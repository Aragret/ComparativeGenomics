library(gdata)
library(Biostrings)
library(seqinr)
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
CHOR = read.table('../../Body/2Derived/MitGenomics.txt', header = TRUE, sep='\t')
GenLength$Species = gsub(' ','_',GenLength$Scientific_name)
GenLength = GenLength[,c(14,16)]
dupl = GenLength[GenLength$Species == "Neophocaena_phocaenoides",]
gl = c(mean(dupl$GenerationLength_d), 'Neophocaena_phocaenoides')
GenLength = GenLength[GenLength$Species != 'Neophocaena_phocaenoides',]
GenLength = rbind(GenLength, gl)
fastaFile <- readDNAStringSet("../../Body/2Derived/mammalia_genomes.fa")
Species = names(fastaFile)
Sequence = paste(fastaFile)
Mamm <- data.frame(Species, Sequence)
data = merge(Mamm, GenLength, by='Species')
data = merge(data, CHOR[, c('Species', 'REP.DirRepLength', 'GenomeLength', 'A', 'T', 'G', 'C', by='Species')])
data = data[, -10]
View(data)
write.table(data, '../../Body/2Derived/MammalsGenomesEcology.txt', sep='\t', quote = F, row.names = F)
rm(list=ls(all=TRUE))  # remove everything from R memory (old variables, datasets...)
Rep = read.table('../../Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
View(contrasts)
par(mfrow=c(2,1))
plot(log(contrasts$generlen), log(contrasts$TLOfADRRreal))
cor.test(log(contrasts$generlen), log(contrasts$TLOfADRRreal))
log(contrasts$TLOfADRRreal)
log(contrasts$generlen)
plot(log(contrasts$generlen), log(contrasts$TLOfADRR1))
log(contrasts$TLOfADRR1)
log(contrasts$generlen)
View(contrasts)
plot(contrasts$generlen, contrasts$TLOfADRRreal);
plot(contrasts$generlen, contrasts$TLOfADRR1)
cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman')
cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman')
cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')
cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less')
rm(list=ls(all=TRUE))  # remove everything from R memory (old variables, datasets...)
Rep = read.table('../../Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
pdf("../../Body/4Figures/RealAndSimulatedRepeatsVsLongevity.R.01.pdf")
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
View(TempData)
TempData[,1] = log2(TempData[,1])
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]);  TempData[,3] = log2(TempData[,3]);
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]);  TempData[,3] = log2(TempData[,3]);
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
par(mfrow=c(2,1))
plot(contrasts$generlen, contrasts$TLOfADRRreal); cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
par(mfrow=c(2,1))
plot(contrasts$generlen, contrasts$TLOfADRRreal); cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(contrasts$generlen, contrasts$TLOfADRR1); cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')       # marginally
rm(list=ls(all=TRUE))  # remove everything from R memory (old variables, datasets...)
Rep = read.table('../../Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
pdf("../../Body/4Figures/RealAndSimulatedRepeatsVsLongevity.R.01.pdf")
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
# dev.off()
#########################################################################################
######################### PICs
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]);  TempData[,3] = log2(TempData[,3]);
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
par(mfrow=c(2,1))
plot(contrasts$generlen, contrasts$TLOfADRRreal); cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(contrasts$generlen, contrasts$TLOfADRR1); cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')       # marginally
dev.off()
rm(list=ls(all=TRUE))  # remove everything from R memory (old variables, datasets...)
Rep = read.table('../../Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
pdf("../../Body/4Figures/RealAndSimulatedRepeatsVsLongevity.R.01.pdf")
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
# dev.off()
#########################################################################################
######################### PICs
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]);  TempData[,3] = log2(TempData[,3]);
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
par(mfrow=c(2,1))
plot(contrasts$generlen, contrasts$TLOfADRRreal); cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(contrasts$generlen, contrasts$TLOfADRR1); cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')       # marginally
dev.off()
rm(list=ls(all=TRUE))  # remove everything from R memory (old variables, datasets...)
Rep = read.table('../../Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
pdf("../../Body/4Figures/RealAndSimulatedRepeatsVsLongevity.R.01.pdf")
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
# dev.off()
#########################################################################################
######################### PICs
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]);  TempData[,3] = log2(TempData[,3]);
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
par(mfrow=c(2,2))
plot(contrasts$generlen, contrasts$TLOfADRRreal); cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(contrasts$generlen, contrasts$TLOfADRR1); cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')       # marginally
dev.off()
rm(list=ls(all=TRUE))  # remove everything from R memory (old variables, datasets...)
Rep = read.table('../../Body/3Results/RepsCountPseudoStep.csv', sep = ';', header = FALSE)
Rep[is.na(Rep)] <- 0
Rep$TotalLengthOfDirRepeats = Rep$V3*Rep$V4 + Rep$V5*Rep$V6  + Rep$V7*Rep$V8  + Rep$V9*Rep$V10 + Rep$V11*Rep$V12 + Rep$V13*Rep$V14  + Rep$V15*Rep$V16  + Rep$V17*Rep$V18   + Rep$V19*Rep$V20   + Rep$V21*Rep$V22   + Rep$V23*Rep$V24   + Rep$V25*Rep$V26   + Rep$V27*Rep$V28   + Rep$V29*Rep$V30   + Rep$V31*Rep$V32   + Rep$V33*Rep$V34   + Rep$V35*Rep$V36   + Rep$V37*Rep$V38   + Rep$V39*Rep$V40   + Rep$V41*Rep$V42   + Rep$V43*Rep$V44   + Rep$V45*Rep$V46   + Rep$V47*Rep$V48   + Rep$V49*Rep$V50   + Rep$V51*Rep$V52   + Rep$V53*Rep$V54
boxplot(Rep$TotalLengthOfDirRepeats[1:10],Rep$TotalLengthOfDirRepeats[11:20],Rep$TotalLengthOfDirRepeats[21:30],Rep$TotalLengthOfDirRepeats[31:40],Rep$TotalLengthOfDirRepeats[41:50],Rep$TotalLengthOfDirRepeats[51:60],Rep$TotalLengthOfDirRepeats[61:70],Rep$TotalLengthOfDirRepeats[71:80],Rep$TotalLengthOfDirRepeats[81:90])
library(ggplot2)
View(Rep)
View(Rep)
View(Rep)
Rep$V2[1]
as.character(Rep$V2[1])
strsplit(as.character(Rep$V2[1]), ' ')
strsplit(as.character(Rep$V2[1]), ' ')[6]
strsplit(as.character(Rep$V2[1]), ' ')[[1]][6]
as.integer(strsplit(as.character(Rep$V2[1]), ' ')[[1]][6])
as.numeric(strsplit(as.character(Rep$V2[1]), ' ')[[1]][6])
Rep$FrA = as.numeric(strsplit(as.character(Rep$V2), ' ')[[1]][6])
View(Rep)
as.numeric(strsplit(as.character(Rep$V2), ' ')[[1]][6])
Rep$FrA = as.numeric(strsplit(as.character(Rep$V2[1]), ' ')[[1]][6])
as.numeric(strsplit(as.character(Rep$V2[1]), ' ')[[1]][6])
as.numeric(strsplit(as.character(Rep$V2[30]), ' ')[[1]][6])
getFrA = function(x){
return(as.numeric(strsplit(as.character(x), ' ')[[1]][6]))
}
?by
View(Rep)
Rep$FrA = lapply(Rep$V2, getFrA)
View(Rep)
pd <- position_dodge(0.1) # move them .05 to the left and right
ggplot(Rep, aes(x = unique(FrA), y = TotalLengthOfDirRepeats, colour=supp)) +
geom_errorbar(aes(ymin=len-ci, ymax=len+ci), width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd)
ggplot(Rep, aes(x = unique(FrA), y = TotalLengthOfDirRepeats, colour=supp)) +
geom_errorbar(position=pd) +
geom_line(position=pd) +
geom_point(position=pd)
ggplot(Rep, aes(x = unique(FrA), y = TotalLengthOfDirRepeats)) +
geom_errorbar(position=pd) +
geom_line(position=pd) +
geom_point(position=pd)
ggplot(Rep, aes(x = FrA, y = TotalLengthOfDirRepeats)) +
geom_errorbar(position=pd) +
geom_line(position=pd) +
geom_point(position=pd)
ggplot(Rep, aes(x = FrA, y = TotalLengthOfDirRepeats)) +
#  geom_errorbar(position=pd) +
geom_line(position=pd) +
geom_point(position=pd)
ggplot(Rep, aes(x = FrA, y = TotalLengthOfDirRepeats))
ggplot(Rep, aes(x = as.factor(FrA), y = TotalLengthOfDirRepeats))
ggplot(Rep, aes(x = sort(as.factor(FrA)), y = TotalLengthOfDirRepeats))
View(Rep)
Rep$FrA
Rep$FrA[[1]]
?apply
Rep$FrA = aggregate(Rep$V2, FUN=getFrA)
Rep$FrA = lapply(Rep$V2, FUN=getFrA)
ggplot(Rep, aes(x = (FrA), y = TotalLengthOfDirRepeats))
library(dplyr)
library(dplyr)
gr_repeats = group_by(Rep, FrA)
as.vector(Rep$FrA)
Rep$FrA = apply(Rep$V2, 1, FUN=getFrA)
Rep$FrA = apply(Rep$V2, 2, FUN=getFrA)
Rep$FrA = apply(Rep$V2, 1, FUN=getFrA)
Rep$FrA = sapply(Rep$V2, FUN=getFrA)
gr_repeats = group_by(Rep, FrA)
View(gr_repeats)
grRepeats = group_by(Rep, FrA)
summ = summarise(grRepeats, meanTotalDr = mean(TotalLengthOfDirRepeats))
ggplot(summ, aes(FrA, TotalLengthOfDirRepeats)) +
geom_point() +
geom_line()
ggplot(summ, aes(FrA, meanTotalDr)) +
geom_point() +
geom_line()
summ = summarise(grRepeats, meanTotalDr = mean(TotalLengthOfDirRepeats),
y_max = mean(TotalLengthOfDirRepeats) +
1.96 * sd(TotalLengthOfDirRepeats) / sqrt(length(TotalLengthOfDirRepeats)),
y_min = mean(TotalLengthOfDirRepeats) -
1.96 * sd(TotalLengthOfDirRepeats) / sqrt(length(TotalLengthOfDirRepeats)))
ggplot(summ, aes(FrA, meanTotalDr)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.2)
ggplot(summ, aes(FrA, meanTotalDr)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max))
ggplot(summ, aes(FrA, meanTotalDr)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.05)
ggplot(summ, aes(FrA, meanTotalDr)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.00005)
ggplot(summ, aes(FrA, meanTotalDr)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.001)
ggplot(summ, aes(FrA, meanTotalDr)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
Rep$TotalDirRepCoverage = Rep$TotalLengthOfDirRepeats / 16000
summ = summarise(grRepeats, meanTotalDr = mean(TotalDirRepCoverage),
y_max = mean(TotalDirRepCoverage) +
1.96 * sd(TotalDirRepCoverage) / sqrt(length(TotalDirRepCoverage)),
y_min = mean(TotalDirRepCoverage) -
1.96 * sd(TotalDirRepCoverage) / sqrt(length(TotalDirRepCoverage)))
grRepeats = group_by(Rep, FrA)
summ = summarise(grRepeats, meanTotalDr = mean(TotalDirRepCoverage),
y_max = mean(TotalDirRepCoverage) +
1.96 * sd(TotalDirRepCoverage) / sqrt(length(TotalDirRepCoverage)),
y_min = mean(TotalDirRepCoverage) -
1.96 * sd(TotalDirRepCoverage) / sqrt(length(TotalDirRepCoverage)))
ggplot(summ, aes(FrA, meanTotalDr)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
summ = summarise(grRepeats, meanTotalDrCoverage = mean(TotalDirRepCoverage),
y_max = mean(TotalDirRepCoverage) +
1.96 * sd(TotalDirRepCoverage) / sqrt(length(TotalDirRepCoverage)),
y_min = mean(TotalDirRepCoverage) -
1.96 * sd(TotalDirRepCoverage) / sqrt(length(TotalDirRepCoverage)))
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 0.5) +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 2) +
geom_line() +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 2) +
geom_line(size = 0.5) +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 2) +
geom_line(size = 0.1) +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 2) +
geom_line(size = 0.2) +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
pdf('../../Body/4Figures/NaiveSimulation.RepeatsAsAFunctionOfNuclFractions.R.01.pdf')
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 2) +
geom_line(size = 0.2) +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01)
boxplot(Rep$TotalLengthOfDirRepeats[1:10],Rep$TotalLengthOfDirRepeats[11:20],Rep$TotalLengthOfDirRepeats[21:30],Rep$TotalLengthOfDirRepeats[31:40],Rep$TotalLengthOfDirRepeats[41:50],Rep$TotalLengthOfDirRepeats[51:60],Rep$TotalLengthOfDirRepeats[61:70],Rep$TotalLengthOfDirRepeats[71:80],Rep$TotalLengthOfDirRepeats[81:90])
dev.off()
