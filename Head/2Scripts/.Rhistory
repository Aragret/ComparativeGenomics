rm(list=ls(all=TRUE))
library(ape)
forTree = "((((A, B), (C, D)), ((E, F), (G, H))), (((I, J), (K, L)), ((M, N), (O, P))), (((Q, R), (S, T)), ((U, V),
(W, X))));"
tree = read.tree(text=forTree)
plot(tree,no.margin=TRUE,edge.width=2)
tree$edge
species = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X')
feature1 = c(1, 1.5, 3, 3.5, 7, 7.5, 8.5, 9, 140, 143, 150, 153, 180, 183, 190, 193, 1000, 1100, 1300, 1400, 2000, 2100, 2300, 2400)
feature2 = c(1, 1.5, 3, 3.5, 7, 7.5, 8.5, 9, 140, 143, 150, 153, 180, 183, 190, 193, 1000, 1100, 1300, 1400, 2000, 2100, 2300, 2400)
cor.test(feature2, feature1)
data = as.data.frame(list(species, feature1, feature2))
View(data)
names(data) = c('species', 'feature1', 'feature2')
View(data)
a = pic(feature1, tree)
?compute.brlen
a = compute.brlen(tree)
plot(a)
summary(a$edge.length)
treeComputeBranchLength = compute.brlen(tree)
a = pic(feature1, treeComputeBranchLength)
?root
treeComputeBranchLength = root(compute.brlen(tree))
plot(tree,no.margin=TRUE,edge.width=2)
tiplabels()
nodelabels()
a = pic(feature1, treeComputeBranchLength, node = 25)
treeComputeBranchLength = root(compute.brlen(tree), node = 25)
a = pic(feature1, treeComputeBranchLength)
plot(treeComputeBranchLength)
is.rooted(treeComputeBranchLength)
plot(root(treeComputeBranchLength, 25))
plot(root(treeComputeBranchLength, 25))
plot(root(treeComputeBranchLength, node = 25))
is.binary.tree(treeComputeBranchLength)
forTree = "((((A, B), (C, D)), ((E, F), (G, H)), ((I, J), (K, L))), (((M, N), (O, P)), ((Q, R), (S, T)), ((U, V),
(W, X))));"
tree = read.tree(text=forTree)
plot(tree,no.margin=TRUE,edge.width=2)
forTree = "((((A, B), (C, D), (E, F)), ((G, H), (I, J), (K, L))), (((M, N), (O, P), (Q, R)), ((S, T), (U, V),
(W, X))));"
tree = read.tree(text=forTree)
plot(tree,no.margin=TRUE,edge.width=2)
forTree = "((((A, B), (C, D)), ((E, F)), (G, H))), (((I, J), (K, L)), ((M, N), (O, P))));"
tree = read.tree(text=forTree)
plot(tree,no.margin=TRUE,edge.width=2)
forTree = "((((A, B), (C, D)), ((E, F)), (G, H)), ((I, J), (K, L)), ((M, N), (O, P))));"
tree = read.tree(text=forTree)
plot(tree,no.margin=TRUE,edge.width=2)
forTree = "((((A, B), (C, D)), ((E, F), (G, H))), (((I, J), (K, L)), ((M, N), (O, P))));"
tree = read.tree(text=forTree)
plot(tree,no.margin=TRUE,edge.width=2)
tiplabels()
nodelabels()
treeComputeBranchLength = root(compute.brlen(tree), node = 25)
plot(root(treeComputeBranchLength, node = 25))
treeComputeBranchLength = root(compute.brlen(tree), node = 17)
plot(treeComputeBranchLength)
is.rooted(treeComputeBranchLength)
feature1 = c(140, 143, 150, 153, 180, 183, 190, 193, 1000, 1100, 1300, 1400, 2000, 2100, 2300, 2400)
feature2 = c(140, 143, 150, 153, 180, 183, 190, 193, 1000, 1100, 1300, 1400, 2000, 2100, 2300, 2400)
data = as.data.frame(list(species, feature1, feature2))
names(data) = c('species', 'feature1', 'feature2')
species = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P')
feature1 = c(140, 143, 150, 153, 180, 183, 190, 193, 1000, 1100, 1300, 1400, 2000, 2100, 2300, 2400)
feature2 = c(140, 143, 150, 153, 180, 183, 190, 193, 1000, 1100, 1300, 1400, 2000, 2100, 2300, 2400)
data = as.data.frame(list(species, feature1, feature2))
names(data) = c('species', 'feature1', 'feature2')
treeComputeBranchLength = root(compute.brlen(tree), node = 17)
a = pic(feature1, treeComputeBranchLength)
b = pic(feature2, treeComputeBranchLength)
cor.test(a, b)
feature2 = c(1, 1.5, 3, 3.5, 7, 7.5, 8.5, 9, 140, 143, 150, 153, 180, 183, 190, 193)
cor.test(feature1, feature2)
cor.test(feature1, feature2, method = 'spearman')
cor.test(feature1, feature2)
data = as.data.frame(list(species, feature1, feature2))
names(data) = c('species', 'feature1', 'feature2')
treeComputeBranchLength = root(compute.brlen(tree), node = 17)
a = pic(feature1, treeComputeBranchLength)
b = pic(feature2, treeComputeBranchLength)
cor.test(a, b)
cor.test(a, b, method = 'spearman')
contrasts <- data %>%
select(feature1, feature2) %>%
#   mutate_if(is.numeric, log2) %>%
map(pic, treeComputeBranchLength)
p_load(tibble, dplyr, magrittr, purrr)
library(pacman)
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- data %>%
select(feature1, feature2) %>%
#   mutate_if(is.numeric, log2) %>%
map(pic, treeComputeBranchLength)
summary(a)
summary(contrasts$feature1)
summary(b)
summary(contrasts$feature2)
feature1 = c(143, 140, 150, 153, 180, 183, 190, 193, 1100, 1000, 1300, 1400, 2000, 2100, 2300, 2400)
feature2 = c(1.5, 1, 3, 3.5, 7, 7.5, 8.5, 9, 143, 140, 150, 153, 180, 183, 190, 193)
cor.test(feature1, feature2) # 0.9633101
cor.test(feature1, feature2, method = 'spearman') # 1
data = as.data.frame(list(species, feature1, feature2))
names(data) = c('species', 'feature1', 'feature2')
a = pic(feature1, treeComputeBranchLength)
b = pic(feature2, treeComputeBranchLength)
cor.test(a, b) # 0.8619552
cor.test(a, b, method = 'spearman') # 0.9990719
summary(a)
summary(b)
summary(contrasts$feature1)
summary(contrasts$feature2)
contrasts <- data %>%
select(feature1, feature2) %>%
#   mutate_if(is.numeric, log2) %>%
map(pic, treeComputeBranchLength)
summary(contrasts$feature1)
summary(contrasts$feature2)
cor.test(feature1, feature2) # 0.9633101
cor.test(feature1, feature2, method = 'spearman') # 1
a = pic(feature1, treeComputeBranchLength)
b = pic(feature2, treeComputeBranchLength)
cor.test(a, b) # 0.8619552
cor.test(a, b, method = 'spearman') # 0.9990719
summary(lm(a ~ 0 + b))
summary(lm(a ~ b))
summary(lm(a ~ b - 1))
