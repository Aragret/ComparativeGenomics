View(Rep)
Rep[is.na(Rep)] <- 0
Rep$TotalLengthOfDirRepeats = Rep$V3*Rep$V4 + Rep$V5*Rep$V6  + Rep$V7*Rep$V8  + Rep$V9*Rep$V10 + Rep$V11*Rep$V12 + Rep$V13*Rep$V14  + Rep$V15*Rep$V16  + Rep$V17*Rep$V18   + Rep$V19*Rep$V20   + Rep$V21*Rep$V22   + Rep$V23*Rep$V24   + Rep$V25*Rep$V26   + Rep$V27*Rep$V28   + Rep$V29*Rep$V30   + Rep$V31*Rep$V32   + Rep$V33*Rep$V34   + Rep$V35*Rep$V36   + Rep$V37*Rep$V38   + Rep$V39*Rep$V40   + Rep$V41*Rep$V42   + Rep$V43*Rep$V44   + Rep$V45*Rep$V46   + Rep$V47*Rep$V48   + Rep$V49*Rep$V50   + Rep$V51*Rep$V52   + Rep$V53*Rep$V54
Rep$TotalDirRepCoverage = Rep$TotalLengthOfDirRepeats / 16000
getFrA = function(x){
return(as.numeric(strsplit(as.character(x), ' ')[[1]][6]))
}
Rep$FrA = sapply(Rep$V2, FUN=getFrA)
grRepeats = group_by(Rep, FrA)
summ = summarise(grRepeats, meanTotalDrCoverage = mean(TotalDirRepCoverage),
y_max = max(TotalDirRepCoverage),
y_min = min(TotalDirRepCoverage))
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 2) +
geom_line(color = 'red') +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Fraction of A') + ylab('Fraction of direct repeats')
boxplot(Rep$TotalLengthOfDirRepeats[1:100],Rep$TotalLengthOfDirRepeats[101:200],Rep$TotalLengthOfDirRepeats[201:300],Rep$TotalLengthOfDirRepeats[301:400],Rep$TotalLengthOfDirRepeats[401:500],Rep$TotalLengthOfDirRepeats[501:600],Rep$TotalLengthOfDirRepeats[601:700],Rep$TotalLengthOfDirRepeats[701:800],Rep$TotalLengthOfDirRepeats[801:900])
Rep = read.table('../../Body/3Results/RepsCountPseudoStep.csv', sep = ';', header = FALSE)
Rep[is.na(Rep)] <- 0
Rep$TotalLengthOfDirRepeats = Rep$V3*Rep$V4 + Rep$V5*Rep$V6  + Rep$V7*Rep$V8  + Rep$V9*Rep$V10 + Rep$V11*Rep$V12 + Rep$V13*Rep$V14  + Rep$V15*Rep$V16  + Rep$V17*Rep$V18   + Rep$V19*Rep$V20   + Rep$V21*Rep$V22   + Rep$V23*Rep$V24   + Rep$V25*Rep$V26   + Rep$V27*Rep$V28   + Rep$V29*Rep$V30   + Rep$V31*Rep$V32   + Rep$V33*Rep$V34   + Rep$V35*Rep$V36   + Rep$V37*Rep$V38   + Rep$V39*Rep$V40   + Rep$V41*Rep$V42   + Rep$V43*Rep$V44   + Rep$V45*Rep$V46   + Rep$V47*Rep$V48   + Rep$V49*Rep$V50   + Rep$V51*Rep$V52   + Rep$V53*Rep$V54
Rep$TotalDirRepCoverage = Rep$TotalLengthOfDirRepeats / 16000
pdf('../../Body/4Figures/NaiveSimulation.RepeatsAsAFunctionOfNuclFractions.R.01.pdf')
getFrA = function(x){
return(as.numeric(strsplit(as.character(x), ' ')[[1]][6]))
}
Rep$FrA = sapply(Rep$V2, FUN=getFrA)
grRepeats = group_by(Rep, FrA)
# summ = summarise(grRepeats, meanTotalDrCoverage = mean(TotalDirRepCoverage),
#                  y_max = mean(TotalDirRepCoverage) +
#                    1.96 * sd(TotalDirRepCoverage) / sqrt(length(TotalDirRepCoverage)),
#                  y_min = mean(TotalDirRepCoverage) -
#                    1.96 * sd(TotalDirRepCoverage) / sqrt(length(TotalDirRepCoverage)))
summ = summarise(grRepeats, meanTotalDrCoverage = mean(TotalDirRepCoverage),
y_max = max(TotalDirRepCoverage),
y_min = min(TotalDirRepCoverage))
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 2) +
geom_line(color = 'red') +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Fraction of A') + ylab('Fraction of direct repeats')
boxplot(Rep$TotalLengthOfDirRepeats[1:10],Rep$TotalLengthOfDirRepeats[11:20],Rep$TotalLengthOfDirRepeats[21:30],Rep$TotalLengthOfDirRepeats[31:40],Rep$TotalLengthOfDirRepeats[41:50],Rep$TotalLengthOfDirRepeats[51:60],Rep$TotalLengthOfDirRepeats[61:70],Rep$TotalLengthOfDirRepeats[71:80],Rep$TotalLengthOfDirRepeats[81:90])
# dev.off()
###########################################################################
# new simulations
Rep = read.table('../../Body/2Derived/RepsCount.csv', sep = ',', header = FALSE)[-1,]
# write.csv(Rep, '../../Body/2Derived/RepsCount.csv', row.names = FALSE, quote = FALSE)
# Rep = read.table('../../Body/2Derived/RepsCount.csv', sep = ';')[, -1]
for(i in 3:ncol(Rep)){
Rep[, i] = as.integer(as.character(Rep[, i]))
}
Rep[is.na(Rep)] <- 0
Rep$TotalLengthOfDirRepeats = Rep$V3*Rep$V4 + Rep$V5*Rep$V6  + Rep$V7*Rep$V8  + Rep$V9*Rep$V10 + Rep$V11*Rep$V12 + Rep$V13*Rep$V14  + Rep$V15*Rep$V16  + Rep$V17*Rep$V18   + Rep$V19*Rep$V20   + Rep$V21*Rep$V22   + Rep$V23*Rep$V24   + Rep$V25*Rep$V26   + Rep$V27*Rep$V28   + Rep$V29*Rep$V30   + Rep$V31*Rep$V32   + Rep$V33*Rep$V34   + Rep$V35*Rep$V36   + Rep$V37*Rep$V38   + Rep$V39*Rep$V40   + Rep$V41*Rep$V42   + Rep$V43*Rep$V44   + Rep$V45*Rep$V46   + Rep$V47*Rep$V48   + Rep$V49*Rep$V50   + Rep$V51*Rep$V52   + Rep$V53*Rep$V54
Rep$TotalDirRepCoverage = Rep$TotalLengthOfDirRepeats / 16000
getFrA = function(x){
return(as.numeric(strsplit(as.character(x), ' ')[[1]][6]))
}
Rep$FrA = sapply(Rep$V2, FUN=getFrA)
grRepeats = group_by(Rep, FrA)
summ = summarise(grRepeats, meanTotalDrCoverage = mean(TotalDirRepCoverage),
y_max = max(TotalDirRepCoverage),
y_min = min(TotalDirRepCoverage))
ggplot(summ, aes(FrA, meanTotalDrCoverage)) +
geom_point(size = 2) +
geom_line(color = 'red') +
geom_errorbar(aes(ymin = y_min, ymax = y_max), width = 0.01) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Fraction of A') + ylab('Fraction of direct repeats')
boxplot(Rep$TotalLengthOfDirRepeats[1:100],Rep$TotalLengthOfDirRepeats[101:200],Rep$TotalLengthOfDirRepeats[201:300],Rep$TotalLengthOfDirRepeats[301:400],Rep$TotalLengthOfDirRepeats[401:500],Rep$TotalLengthOfDirRepeats[501:600],Rep$TotalLengthOfDirRepeats[601:700],Rep$TotalLengthOfDirRepeats[701:800],Rep$TotalLengthOfDirRepeats[801:900])
dev.off()
Rep = read.table('../../Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
# dev.off()
#########################################################################################
######################### PICs
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
### rho vs p
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(pic(log2(data[,i]), tree2), pic(log2(data$generlen), tree2), method = 'spearman')[3])
rho = as.numeric(cor.test(pic(log2(data[,i]), tree2), pic(log2(data$generlen), tree2), method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
par(mfrow=c(1,1))
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
par(mfrow=c(1,1))
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
##############
maxRho = match(min(VecOfRho), VecOfRho)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
# cor.test(Rep$generlen, Rep$TLOfADRR1, method='spearman')
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]); TempData[,3] = log2(TempData[,3]);
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
cor.test(contrasts$generlen, contrasts$TLOfADRR1, method='spearman')
cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method='spearman')
library(pacman)
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- data %>%
select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$generlen)
summary(pic(log2(data$generlen), tree2))
newdata <- subset(contrasts, !(contrasts$generlen > quantile(contrasts$generlen, probs=c(.01, .99))[2] | contrasts$generlen < quantile(contrasts$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRRreal > quantile(newdata$TLOfADRRreal, probs=c(.01, .99))[2] | newdata$TLOfADRRreal < quantile(newdata$TLOfADRRreal, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRR1 > quantile(newdata$TLOfADRR1, probs=c(.01, .99))[2] | newdata$TLOfADRR1 < quantile(newdata$TLOfADRR1, probs=c(.01, .99))[1]) )
par(mfrow=c(2,2))
# plot(contrasts$generlen, contrasts$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.5)); # cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
# plot(contrasts$generlen, contrasts$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.5)); # cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')       # marginally
plot(newdata$generlen, newdata$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2); # cor.test(newdata$generlen, newdata$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(newdata$generlen, newdata$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2,
ylim = c(min(newdata$TLOfADRRreal), max(newdata$TLOfADRRreal))); cor.test(newdata$generlen, newdata$TLOfADRR1, method = 'spearman', alternative = 'less') # nonsignificant
newdata <- subset(contrasts, !(contrasts$generlen > quantile(contrasts$generlen, probs=c(.02, .98))[2] | contrasts$generlen < quantile(contrasts$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRRreal > quantile(newdata$TLOfADRRreal, probs=c(.02, .98))[2] | newdata$TLOfADRRreal < quantile(newdata$TLOfADRRreal, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRR1 > quantile(newdata$TLOfADRR1, probs=c(.02, .98))[2] | newdata$TLOfADRR1 < quantile(newdata$TLOfADRR1, probs=c(.01, .99))[1]) )
plot(newdata$generlen, newdata$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2); # cor.test(newdata$generlen, newdata$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(newdata$generlen, newdata$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2,
ylim = c(min(newdata$TLOfADRRreal), max(newdata$TLOfADRRreal))); cor.test(newdata$generlen, newdata$TLOfADRR1, method = 'spearman', alternative = 'less') # nonsignificant
newdata <- subset(contrasts, !(contrasts$generlen > quantile(contrasts$generlen, probs=c(.03, .97))[2] | contrasts$generlen < quantile(contrasts$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRRreal > quantile(newdata$TLOfADRRreal, probs=c(.03, .97))[2] | newdata$TLOfADRRreal < quantile(newdata$TLOfADRRreal, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRR1 > quantile(newdata$TLOfADRR1, probs=c(.03, .97))[2] | newdata$TLOfADRR1 < quantile(newdata$TLOfADRR1, probs=c(.01, .99))[1]) )
plot(newdata$generlen, newdata$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2); # cor.test(newdata$generlen, newdata$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(newdata$generlen, newdata$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2,
ylim = c(min(newdata$TLOfADRRreal), max(newdata$TLOfADRRreal))); cor.test(newdata$generlen, newdata$TLOfADRR1, method = 'spearman', alternative = 'less') # nonsignificant
dev.off()
plot(newdata$generlen, newdata$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2); # cor.test(newdata$generlen, newdata$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(newdata$generlen, newdata$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2,
ylim = c(min(newdata$TLOfADRRreal), max(newdata$TLOfADRRreal))); cor.test(newdata$generlen, newdata$TLOfADRR1, method = 'spearman', alternative = 'less') # nonsignificant
a = as.data.frame(contrasts)
View(a)
newdata <- subset(a, !(a$generlen > quantile(a$generlen, probs=c(.03, .97))[2] | a$generlen < quantile(a$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRRreal > quantile(newdata$TLOfADRRreal, probs=c(.03, .97))[2] | newdata$TLOfADRRreal < quantile(newdata$TLOfADRRreal, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRR1 > quantile(newdata$TLOfADRR1, probs=c(.03, .97))[2] | newdata$TLOfADRR1 < quantile(newdata$TLOfADRR1, probs=c(.01, .99))[1]) )
plot(newdata$generlen, newdata$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2); # cor.test(newdata$generlen, newdata$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(newdata$generlen, newdata$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2,
ylim = c(min(newdata$TLOfADRRreal), max(newdata$TLOfADRRreal))); cor.test(newdata$generlen, newdata$TLOfADRR1, method = 'spearman', alternative = 'less') # nonsignificant
pdf("../../Body/4Figures/RealAndSimulatedRepeatsVsLongevity.R.01.pdf")
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
# dev.off()
#########################################################################################
######################### PICs
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
### rho vs p
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(pic(log2(data[,i]), tree2), pic(log2(data$generlen), tree2), method = 'spearman')[3])
rho = as.numeric(cor.test(pic(log2(data[,i]), tree2), pic(log2(data$generlen), tree2), method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
par(mfrow=c(1,1))
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
par(mfrow=c(1,1))
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
##############
maxRho = match(min(VecOfRho), VecOfRho)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
# cor.test(Rep$generlen, Rep$TLOfADRR1, method='spearman')
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]); TempData[,3] = log2(TempData[,3]);
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
cor.test(contrasts$generlen, contrasts$TLOfADRR1, method='spearman')
cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method='spearman')
library(pacman)
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- data %>%
select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$generlen)
summary(pic(log2(data$generlen), tree2))
a = as.data.frame(contrasts)
# newdata <- subset(contrasts, !(contrasts$generlen > quantile(contrasts$generlen, probs=c(.03, .97))[2] | contrasts$generlen < quantile(contrasts$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(a, !(a$generlen > quantile(a$generlen, probs=c(.03, .97))[2] | a$generlen < quantile(a$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRRreal > quantile(newdata$TLOfADRRreal, probs=c(.03, .97))[2] | newdata$TLOfADRRreal < quantile(newdata$TLOfADRRreal, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRR1 > quantile(newdata$TLOfADRR1, probs=c(.03, .97))[2] | newdata$TLOfADRR1 < quantile(newdata$TLOfADRR1, probs=c(.01, .99))[1]) )
par(mfrow=c(2,2))
# plot(contrasts$generlen, contrasts$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.5)); # cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
# plot(contrasts$generlen, contrasts$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.5)); # cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')       # marginally
plot(newdata$generlen, newdata$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2); # cor.test(newdata$generlen, newdata$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(newdata$generlen, newdata$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2,
ylim = c(min(newdata$TLOfADRRreal), max(newdata$TLOfADRRreal))); cor.test(newdata$generlen, newdata$TLOfADRR1, method = 'spearman', alternative = 'less') # nonsignificant
dev.off()
c
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
hist(VecOfRho[2:101], breaks = 15, xlim = c(-0.3, 0), col = 'grey')
hist(VecOfRho[2:101], breaks = 15, xlim = c(-0.25, -0.1), col = 'grey')
Rep = read.table('../../Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
pdf("../../Body/4Figures/RealAndSimulatedRepeatsVsLongevity.R.01.pdf")
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
# dev.off()
#########################################################################################
######################### PICs
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
### rho vs p
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(pic(log2(data[,i]), tree2), pic(log2(data$generlen), tree2), method = 'spearman')[3])
rho = as.numeric(cor.test(pic(log2(data[,i]), tree2), pic(log2(data$generlen), tree2), method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
par(mfrow=c(1,1))
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
par(mfrow=c(1,1))
hist(VecOfRho[2:101], breaks = 15, xlim = c(-0.25, -0.1), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
##############
maxRho = match(min(VecOfRho), VecOfRho)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
# cor.test(Rep$generlen, Rep$TLOfADRR1, method='spearman')
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]); TempData[,3] = log2(TempData[,3]);
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
cor.test(contrasts$generlen, contrasts$TLOfADRR1, method='spearman')
cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method='spearman')
library(pacman)
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- data %>%
select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$generlen)
summary(pic(log2(data$generlen), tree2))
a = as.data.frame(contrasts)
# newdata <- subset(contrasts, !(contrasts$generlen > quantile(contrasts$generlen, probs=c(.03, .97))[2] | contrasts$generlen < quantile(contrasts$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(a, !(a$generlen > quantile(a$generlen, probs=c(.03, .97))[2] | a$generlen < quantile(a$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRRreal > quantile(newdata$TLOfADRRreal, probs=c(.03, .97))[2] | newdata$TLOfADRRreal < quantile(newdata$TLOfADRRreal, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRR1 > quantile(newdata$TLOfADRR1, probs=c(.03, .97))[2] | newdata$TLOfADRR1 < quantile(newdata$TLOfADRR1, probs=c(.01, .99))[1]) )
par(mfrow=c(2,2))
# plot(contrasts$generlen, contrasts$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.5)); # cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
# plot(contrasts$generlen, contrasts$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.5)); # cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')       # marginally
plot(newdata$generlen, newdata$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2); # cor.test(newdata$generlen, newdata$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(newdata$generlen, newdata$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2,
ylim = c(min(newdata$TLOfADRRreal), max(newdata$TLOfADRRreal))); cor.test(newdata$generlen, newdata$TLOfADRR1, method = 'spearman', alternative = 'less') # nonsignificant
dev.off()
abline(v = VecOfRho[1], col = 'red', lwd = 3)
hist(VecOfRho[2:101], breaks = 15, xlim = c(-0.25, -0.05), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
pdf("../../Body/4Figures/RealAndSimulatedRepeatsVsLongevity.R.01.pdf")
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[3])
rho = as.numeric(cor.test(Rep[,i],Rep$generlen, method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
hist(VecOfRho[2:101], breaks = 15, xlim = c(min(VecOfRho),max(VecOfRho)), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
### do the same with PICs and probably plot it (should look better):
par(mfrow=c(1,2))
plot(log2(Rep$generlen),log2(Rep$TLOfADRRreal))
plot(log2(Rep$generlen),log2(Rep$TLOfADRR1))
# dev.off()
#########################################################################################
######################### PICs
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
### rho vs p
VecOfP = c(); VecOfRho = c();
for (i in 8:ncol(Rep))
{ # i = 8
p = as.numeric(cor.test(pic(log2(data[,i]), tree2), pic(log2(data$generlen), tree2), method = 'spearman')[3])
rho = as.numeric(cor.test(pic(log2(data[,i]), tree2), pic(log2(data$generlen), tree2), method = 'spearman')[4])
VecOfP = c(VecOfP,p)
VecOfRho = c(VecOfRho,rho)
}
summary(VecOfP)
summary(VecOfRho)
par(mfrow=c(1,1))
plot(VecOfRho[2:101],-log10(VecOfP[2:101]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(0.1,0.1,0.1,0.5), xlab = '', ylab = ''); par(new=TRUE)
plot(VecOfRho[1],-log10(VecOfP[1]), ylim=c(min(-log10(VecOfP)),max(-log10(VecOfP))), xlim = c(min(VecOfRho),max(VecOfRho)), pch = 16, col = rgb(1,0,0,1), xlab = 'rho', ylab = '-log10(p value)');
par(mfrow=c(1,1))
hist(VecOfRho[2:101], breaks = 15, xlim = c(-0.25, -0.05), col = 'grey')
abline(v = VecOfRho[1], col = 'red', lwd = 3)
##############
maxRho = match(min(VecOfRho), VecOfRho)
TempData = data[, c('generlen', 'TLOfADRRreal', 'TLOfADRR1')]
# cor.test(Rep$generlen, Rep$TLOfADRR1, method='spearman')
TempData[,1] = log2(TempData[,1]); TempData[,2] = log2(TempData[,2]); TempData[,3] = log2(TempData[,3]);
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
cor.test(contrasts$generlen, contrasts$TLOfADRR1, method='spearman')
cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method='spearman')
library(pacman)
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- data %>%
select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$generlen)
summary(pic(log2(data$generlen), tree2))
a = as.data.frame(contrasts)
# newdata <- subset(contrasts, !(contrasts$generlen > quantile(contrasts$generlen, probs=c(.03, .97))[2] | contrasts$generlen < quantile(contrasts$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(a, !(a$generlen > quantile(a$generlen, probs=c(.03, .97))[2] | a$generlen < quantile(a$generlen, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRRreal > quantile(newdata$TLOfADRRreal, probs=c(.03, .97))[2] | newdata$TLOfADRRreal < quantile(newdata$TLOfADRRreal, probs=c(.01, .99))[1]) )
newdata <- subset(newdata, !(newdata$TLOfADRR1 > quantile(newdata$TLOfADRR1, probs=c(.03, .97))[2] | newdata$TLOfADRR1 < quantile(newdata$TLOfADRR1, probs=c(.01, .99))[1]) )
par(mfrow=c(2,2))
# plot(contrasts$generlen, contrasts$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.5)); # cor.test(contrasts$generlen, contrasts$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
# plot(contrasts$generlen, contrasts$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.5)); # cor.test(contrasts$generlen, contrasts$TLOfADRR1, method = 'spearman', alternative = 'less')       # marginally
plot(newdata$generlen, newdata$TLOfADRRreal, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2); # cor.test(newdata$generlen, newdata$TLOfADRRreal, method = 'spearman', alternative = 'less') # nonsignificant
plot(newdata$generlen, newdata$TLOfADRR1, col = rgb(0.1,0.1,0.1,0.1), pch = 16, cex = 2,
ylim = c(min(newdata$TLOfADRRreal), max(newdata$TLOfADRRreal))); cor.test(newdata$generlen, newdata$TLOfADRR1, method = 'spearman', alternative = 'less') # nonsignificant
dev.off()
library(gdata)
install.packages("gdata")
library(gdata)
CHOR = read.table('../../Body/2Derived/MitGenomics.txt', header=TRUE, sep='\t')
GenLength = read.xls('../../Body/1Raw/GenerationLengthForMammals.xlsx')
GenLength$Species = gsub(' ', '_', GenLength$Scientific_name)
GenLength = GenLength[, c(14,16)]
data = merge(CHOR, GenLength, by='Species')
summary(data$REP.DirRepLength)
data = data[, c('Species', 'A', 'T', 'G', 'C', 'REP.DirRepLength', 'GenomeLength', 'GenerationLength_d')]
data$FrA = data$A / data$GenomeLength
data$FrT = data$T / data$GenomeLength
data$FrG = data$G / data$GenomeLength
data$FrC = data$C / data$GenomeLength
data$DRCoverage = data$REP.DirRepLength / data$GenomeLength
summary(lm(log(data$GenerationLength_d) ~ data$DRCoverage + data$FrA + data$FrT + data$FrG))
cor.test(data$GenerationLength_d, data$DRCoverage, method = 'spearman')
summary(lm(data$DRCoverage ~ data$FrA + data$FrT + data$FrG))
summary(data$FrA)
summary(data$FrT)
summary(data$FrG)
summary(data$FrC)
nucl_freqs = data[, c('FrA', 'FrT', 'FrG', 'FrC')]
round(cor(nucl_freqs), 2)
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
data = data[which(as.character(data$Species) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(data$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
View(data)
row.names(data) = data$Species
View(data)
data = data[-439,]
row.names(data) = data$Species
df_vec <- as.character(data$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
library(pacman)
p_load(tibble, dplyr, magrittr, purrr)
names(data)
contrasts <- data %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC, DRCoverage) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$GenerationLength_d)
contrasts = as.data.frame(contrasts)
summary(contrasts$GenerationLength_d)
names(contrasts)
summary(lm(DRCoverage ~ GenerationLength_d + FrA, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrT, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrG, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrC, contrasts))
contrasts <- data %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC, DRCoverage) %>%
map(pic, tree2)
summary(contrasts$GenerationLength_d)
contrasts = as.data.frame(contrasts)
summary(lm(DRCoverage ~ GenerationLength_d + FrA, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrT, contrasts))
summary(lm(DRCoverage ~ 0 + GenerationLength_d + FrA, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrT, contrasts))
summary(lm(DRCoverage ~ 0 + GenerationLength_d + FrT, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrG, contrasts))
summary(lm(DRCoverage ~ 0 + GenerationLength_d + FrG, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrT, contrasts))
summary(lm(DRCoverage ~ 0 + GenerationLength_d + FrG, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrC, contrasts))
summary(lm(DRCoverage ~ 0 + GenerationLength_d + FrC, contrasts))
contrasts <- data %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC, DRCoverage) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
contrasts = as.data.frame(contrasts)
summary(lm(DRCoverage ~ GenerationLength_d + FrA, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrT, contrasts))
summary(lm(DRCoverage ~ 0 + GenerationLength_d + FrT, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrG, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d + FrC, contrasts))
contrasts <- data %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC, DRCoverage) %>%
map(pic, tree2)
contrasts = as.data.frame(contrasts)
summary(lm(DRCoverage ~ GenerationLength_d, contrasts))
summary(lm(DRCoverage ~ 0 + GenerationLength_d, contrasts))
contrasts <- data %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC, DRCoverage) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
contrasts = as.data.frame(contrasts)
summary(lm(DRCoverage ~ 0 + GenerationLength_d, contrasts))
summary(lm(DRCoverage ~ GenerationLength_d, contrasts))
cor.test(data$GenerationLength_d, data$DRCoverage, method = 'spearman')
summary(lm(data$DRCoverage ~ data$FrA + data$FrT + data$FrG))
