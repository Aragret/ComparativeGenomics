nrow(breaks); breaks = breaks[breaks$X5..breakpoint > 5781 & breaks$X3..breakpoint > 5781,]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16700, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16700, 100))
## 2A: COMPARE OBSERVED CENTERS AND EXPECTED (PERMUTTED) CENTERS - IF OBSERVED NARROWER? NO
Table = as.data.frame(table(breaks$X3..breakpoint)); Table=Table[order(-Table$Freq),] #
#16072	48
#16071	41
#16073	30
#16075	20
#16070	16
#16074	14
#16078	14
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 200), xlim = c(7000,15000), col = 'light gray')
abline(v=median(breaks$ObservedCenter), col = 'red', lwd=4)
median(breaks$ObservedCenter) # 11605
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 2B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING? YES, HOW TO DRAW IT, CLUSTERS DO NOT CROSS WITH EACH OTHER, CLUSTERS CAN SHOW 3D STRUCTURE
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$X3..breakpoint,breaks$X5..breakpoint, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks$ObservedCenter,breaks$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$ObservedCenter,breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Healthy.tissues == 'Aged tissues',]$ObservedCenter,breaks[breaks$Healthy.tissues == 'Aged tissues',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
## 3A: SPLIT ALL DELETIONS INTO DIFFERENT CATEGORIES ANS RUN ANALYSIS ONCE MORE:
# breaks = breaks[breaks$Healthy.tissues == 'Aged tissues',]; nrow(breaks) # 175
# breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "Patients with pathogenic POLG (...)",]
# breaks = breaks[breaks$Multiple.mtDNA.deletions !=  "ad/ar-PEO",]
breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "ad/ar-PEO",]
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 3B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING?
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length)
dev.off()
rm(list=ls(all=TRUE))
pdf("../../Body/4Figures/MitoBreakDeletionsDistribution.R.01.pdf")
## 1: READ MITOBREAK AND KEEP ONLY MAJOR ARC DELETIONS:
breaks = read.table("../../Body/1Raw/MitoBreakDB_12122019.csv", sep = ',', header = TRUE)
breaks$X5..breakpoint = as.numeric(as.character(breaks$X5..breakpoint)); summary(breaks$X5..breakpoint)
breaks$X3..breakpoint = as.numeric(as.character(breaks$X3..breakpoint)); summary(breaks$X3..breakpoint)
breaks = breaks[!is.na(breaks$X3..breakpoint) & !is.na(breaks$X5..breakpoint),]
par(mfrow=c(2,1))
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
nrow(breaks); breaks = breaks[breaks$Deletion.of.replication.origins == 'None',]; nrow(breaks)
breaks = breaks[breaks$Location.of.the.deleted.region == 'Inside the major arc',]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
# поскольку координаты не такие простые (см ниже) - чтобы не париться можно взять все точки разрыва что больше чем 5781 и меньше чем 16569
# OH: 110-441
# OL: 5721-5781
for (i in 1:nrow(breaks))
{
if (breaks$X5..breakpoint[i] < 110) {breaks$X5..breakpoint[i] = breaks$X5..breakpoint[i] + 16569}
if (breaks$X3..breakpoint[i] < 110) {breaks$X3..breakpoint[i] = breaks$X3..breakpoint[i] + 16569}
}
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
nrow(breaks); breaks = breaks[breaks$X5..breakpoint > 5781 & breaks$X3..breakpoint > 5781,]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16700, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16700, 100))
## 2A: COMPARE OBSERVED CENTERS AND EXPECTED (PERMUTTED) CENTERS - IF OBSERVED NARROWER? NO
Table = as.data.frame(table(breaks$X3..breakpoint)); Table=Table[order(-Table$Freq),] #
#16072	48
#16071	41
#16073	30
#16075	20
#16070	16
#16074	14
#16078	14
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 250), xlim = c(7000,15000), col = 'light gray')
abline(v=median(breaks$ObservedCenter), col = 'red', lwd=4)
median(breaks$ObservedCenter) # 11605
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 2B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING? YES, HOW TO DRAW IT, CLUSTERS DO NOT CROSS WITH EACH OTHER, CLUSTERS CAN SHOW 3D STRUCTURE
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$X3..breakpoint,breaks$X5..breakpoint, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks$ObservedCenter,breaks$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$ObservedCenter,breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Healthy.tissues == 'Aged tissues',]$ObservedCenter,breaks[breaks$Healthy.tissues == 'Aged tissues',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
## 3A: SPLIT ALL DELETIONS INTO DIFFERENT CATEGORIES ANS RUN ANALYSIS ONCE MORE:
# breaks = breaks[breaks$Healthy.tissues == 'Aged tissues',]; nrow(breaks) # 175
# breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "Patients with pathogenic POLG (...)",]
# breaks = breaks[breaks$Multiple.mtDNA.deletions !=  "ad/ar-PEO",]
breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "ad/ar-PEO",]
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 3B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING?
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length)
dev.off()
rm(list=ls(all=TRUE))
pdf("../../Body/4Figures/MitoBreakDeletionsDistribution.R.01.pdf")
## 1: READ MITOBREAK AND KEEP ONLY MAJOR ARC DELETIONS:
breaks = read.table("../../Body/1Raw/MitoBreakDB_12122019.csv", sep = ',', header = TRUE)
breaks$X5..breakpoint = as.numeric(as.character(breaks$X5..breakpoint)); summary(breaks$X5..breakpoint)
breaks$X3..breakpoint = as.numeric(as.character(breaks$X3..breakpoint)); summary(breaks$X3..breakpoint)
breaks = breaks[!is.na(breaks$X3..breakpoint) & !is.na(breaks$X5..breakpoint),]
par(mfrow=c(2,1))
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
nrow(breaks); breaks = breaks[breaks$Deletion.of.replication.origins == 'None',]; nrow(breaks)
breaks = breaks[breaks$Location.of.the.deleted.region == 'Inside the major arc',]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
# поскольку координаты не такие простые (см ниже) - чтобы не париться можно взять все точки разрыва что больше чем 5781 и меньше чем 16569
# OH: 110-441
# OL: 5721-5781
for (i in 1:nrow(breaks))
{
if (breaks$X5..breakpoint[i] < 110) {breaks$X5..breakpoint[i] = breaks$X5..breakpoint[i] + 16569}
if (breaks$X3..breakpoint[i] < 110) {breaks$X3..breakpoint[i] = breaks$X3..breakpoint[i] + 16569}
}
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
nrow(breaks); breaks = breaks[breaks$X5..breakpoint > 5781 & breaks$X3..breakpoint > 5781,]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16700, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16700, 100))
## 2A: COMPARE OBSERVED CENTERS AND EXPECTED (PERMUTTED) CENTERS - IF OBSERVED NARROWER? NO
Table = as.data.frame(table(breaks$X3..breakpoint)); Table=Table[order(-Table$Freq),] #
#16072	48
#16071	41
#16073	30
#16075	20
#16070	16
#16074	14
#16078	14
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 300), xlim = c(7000,15000), col = 'light gray')
abline(v=median(breaks$ObservedCenter), col = 'red', lwd=4)
median(breaks$ObservedCenter) # 11605
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 2B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING? YES, HOW TO DRAW IT, CLUSTERS DO NOT CROSS WITH EACH OTHER, CLUSTERS CAN SHOW 3D STRUCTURE
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$X3..breakpoint,breaks$X5..breakpoint, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks$ObservedCenter,breaks$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$ObservedCenter,breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Healthy.tissues == 'Aged tissues',]$ObservedCenter,breaks[breaks$Healthy.tissues == 'Aged tissues',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
## 3A: SPLIT ALL DELETIONS INTO DIFFERENT CATEGORIES ANS RUN ANALYSIS ONCE MORE:
# breaks = breaks[breaks$Healthy.tissues == 'Aged tissues',]; nrow(breaks) # 175
# breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "Patients with pathogenic POLG (...)",]
# breaks = breaks[breaks$Multiple.mtDNA.deletions !=  "ad/ar-PEO",]
breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "ad/ar-PEO",]
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 3B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING?
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length)
dev.off()
mtBreak = read.csv('../../Body/1Raw/MitoBreakDB_12122019.csv')
konstantinData1 = read.table('../../Body/1Raw/compare.square.200.38windows.txt', header=TRUE, sep='\t')
konstantinData2 = read.table('../../Body/1Raw/compare.square.200.38windows_2.txt', header=TRUE, sep='\t')
row.names(konstantinData1) = konstantinData1[, 1]
konstantinData1 = konstantinData1[, -1]
row.names(konstantinData2) = konstantinData2[, 1]
konstantinData2 = konstantinData2[, -1]
a = konstantinData2 / konstantinData1
View(a)
View(konstantinData1)
View(mtBreak)
mtBreak$X5..breakpoint
as.integer(mtBreak$X5..breakpoint)
mtBreak$X5..breakpoint = as.integer(as.character(mtBreak$X5..breakpoint))
View(mtBreak)
mtBreak$X3..breakpoint = as.integer(as.character(mtBreak$X3..breakpoint))
i = 1
j = 1
View(mtBreak)
View(mtBreak)
row.names(a)[i]
# i = 1
# j = 1
xbegin = row.names(a)[i]
colnames(a)
colnames(a)[j]
?sub
sub('X', '', colnames(a)[j])
as.integer(sub('X', '', colnames(a)[j]))
row.names(a)[i]
as.integer(row.names(a)[i])
as.integer(sub('X', '', colnames(a)[j]))
as.integer(row.names(a)[i + 1])
View(mtBreak)
a[is.na(a)] = 0
View(a)
mtBreak$X5..breakpoint > xbegin & mtBreak$X5..breakpoint < xend
xend = as.integer(row.names(a)[i + 1])
mtBreak$X5..breakpoint > xbegin & mtBreak$X5..breakpoint < xend
any(mtBreak$X5..breakpoint > xbegin & mtBreak$X5..breakpoint < xend)
View(mtBreak)
View(mtBreak)
any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend)
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend)
ybegin = as.integer(sub('X', '', colnames(a)[j]))
yend = as.integer(sub('X', '', colnames(a)[j + 1]))
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend)
one_line = c()
a[i,j]
one_line = c()
for(i in 1:nrow(a)){
for(j in 1:ncol(a)){
# i = 1
# j = 1
xbegin = as.integer(row.names(a)[i])
ybegin = as.integer(sub('X', '', colnames(a)[j]))
xend = as.integer(row.names(a)[i + 1])
yend = as.integer(sub('X', '', colnames(a)[j + 1]))
value = a[i,j]
if(any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend) &
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend)){
one_line = rbind(one_line, c(xbegin, ybegin, value, 1))
}
else{one_line = rbind(one_line, c(xbegin, ybegin, value, 0))}
}
}
any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend) &
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend)
any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend)
mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend
any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend)
mtBreak$X3..breakpoint < xend
mtBreak$X3..breakpoint > xbegin
mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend
any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend)
any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend, na.rm = TRUE)
one_line = c()
for(i in 1:nrow(a)){
for(j in 1:ncol(a)){
# i = 1
# j = 1
xbegin = as.integer(row.names(a)[i])
ybegin = as.integer(sub('X', '', colnames(a)[j]))
xend = as.integer(row.names(a)[i + 1])
yend = as.integer(sub('X', '', colnames(a)[j + 1]))
value = a[i,j]
if(any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend, na.rm = TRUE) &
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend, na.rm = TRUE)){
one_line = rbind(one_line, c(xbegin, ybegin, value, 1))
}
else{one_line = rbind(one_line, c(xbegin, ybegin, value, 0))}
}
}
View(one_line)
one_line = c()
for(i in 1:nrow(a)){
for(j in 1:ncol(a)){
# i = 1
# j = 1
xbegin = as.integer(row.names(a)[i])
ybegin = as.integer(sub('X', '', colnames(a)[j]))
xend = as.integer(row.names(a)[i + 1])
yend = as.integer(sub('X', '', colnames(a)[j + 1]))
value = a[i,j]
if(any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend, na.rm = TRUE) &
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend, na.rm = TRUE)){
one_line = rbind(one_line, c(xbegin, ybegin, value, 1))
}
else{one_line = rbind(one_line, c(ybegin, xbegin, value, 0))}
}
}
one_line = c()
for(i in 1:nrow(a)){
for(j in 1:ncol(a)){
# i = 1
# j = 1
xbegin = as.integer(row.names(a)[i])
ybegin = as.integer(sub('X', '', colnames(a)[j]))
xend = as.integer(row.names(a)[i + 1])
yend = as.integer(sub('X', '', colnames(a)[j + 1]))
value = a[i,j]
if(xbegin >= ybegin){
if(any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend, na.rm = TRUE) &
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend, na.rm = TRUE)){
one_line = rbind(one_line, c(xbegin, ybegin, value, 1))
}
else{one_line = rbind(one_line, c(ybegin, xbegin, value, 0))}
}
}
}
View(one_line)
one_line = c()
for(j in 1:ncol(a)){
for(i in 1:nrow(a)){
# i = 1
# j = 1
xbegin = as.integer(row.names(a)[i])
ybegin = as.integer(sub('X', '', colnames(a)[j]))
xend = as.integer(row.names(a)[i + 1])
yend = as.integer(sub('X', '', colnames(a)[j + 1]))
value = a[i,j]
if(xbegin >= ybegin){
if(any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend, na.rm = TRUE) &
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend, na.rm = TRUE)){
one_line = rbind(one_line, c(xbegin, ybegin, value, 1))
}
else{one_line = rbind(one_line, c(ybegin, xbegin, value, 0))}
}
}
}
View(one_line)
i = 3
j = 1
# i = 3
# j = 1
xbegin = as.integer(row.names(a)[i])
ybegin = as.integer(sub('X', '', colnames(a)[j]))
View(one_line)
xend = as.integer(row.names(a)[i + 1])
yend = as.integer(sub('X', '', colnames(a)[j + 1]))
value = a[i,j]
xbegin >= ybegin
any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend, na.rm = TRUE) &
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend, na.rm = TRUE)
c(xbegin, ybegin, value, 1)
one_line = c()
for(j in 1:ncol(a)){
for(i in 1:nrow(a)){
# i = 3
# j = 1
xbegin = as.integer(row.names(a)[i])
ybegin = as.integer(sub('X', '', colnames(a)[j]))
xend = as.integer(row.names(a)[i + 1])
yend = as.integer(sub('X', '', colnames(a)[j + 1]))
value = a[i,j]
if(xbegin >= ybegin){
if(any(mtBreak$X3..breakpoint > xbegin & mtBreak$X3..breakpoint < xend, na.rm = TRUE) &
any(mtBreak$X5..breakpoint > ybegin & mtBreak$X5..breakpoint < yend, na.rm = TRUE)){
one_line = rbind(one_line, c(ybegin, xbegin, value, 1))
}
else{one_line = rbind(one_line, c(ybegin, xbegin, value, 0))}
}
}
}
data = as.data.frame(one_line)
names(data) = c('X5', 'X3', 'Stability', 'Deletions')
View(data)
i = 1
# i = 1
begin = data[i,]$X5
end = data[i,]$X3
for(i in 1:nrow(data)){
# i = 1
begin = data[i,]$X5
end = data[i,]$X3
if(begin >= 6000 & begin <= 8000 & end >= 14000 & end <= 16000){
data[i,]$Bublik = 1
}
else{data[i,]$Bublik = 0}
}
View(data)
warnings()
for(i in 1:nrow(data)){
# i = 1
begin = data[i,]$X5
end = data[i,]$X3
if(begin >= 6000 & begin <= 8000 & end >= 14000 & end <= 16000){
data[i, 'Bublik'] = 1
}
else{data[i, 'Bublik'] = 0}
}
View(data)
?glm
summary(glm(data$Deletions ~ data$Stability + data$Bublik, family = binomial(())))
summary(glm(data$Deletions ~ data$Stability + data$Bublik, family = binomial()))
summary(data$Stability)
data$Deletions
summary(glm(data$Deletions ~ data$Stability + data$Bublik, family = binomial()))
data$Deletions = as.factor(data$Deletions)
data$Bublik = as.factor(data$Bublik)
summary(glm(data$Deletions ~ data$Stability + data$Bublik, family = binomial()))
summary(data$Deletions)
summary(data$Bublik)
hist(mtBreak$X5..breakpoint)
hist(mtBreak$X3..breakpoint)
summary(glm(data$Deletions ~ data$Stability + data$Bublik, family = binomial()))
summary(data$Stability)
View(data)
View(data)
for(i in 1:nrow(data)){
# i = 1
begin = data[i,]$X5
end = data[i,]$X3
if(begin >= 6000 & begin <= 8021 & end >= 14000 & end <= 16021){
data[i, 'Bublik'] = 1
}
else{data[i, 'Bublik'] = 0}
}
data$Deletions = as.factor(data$Deletions)
data$Bublik = as.factor(data$Bublik)
summary(glm(data$Deletions ~ data$Stability + data$Bublik, family = binomial()))
summary(data$Bublik)
View(konstantinData1)
View(konstantinData2)
