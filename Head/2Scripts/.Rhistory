breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 2B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING? YES, HOW TO DRAW IT, CLUSTERS DO NOT CROSS WITH EACH OTHER, CLUSTERS CAN SHOW 3D STRUCTURE
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
## 3A: SPLIT ALL DELETIONS INTO DIFFERENT CATEGORIES ANS RUN ANALYSIS ONCE MORE:
# breaks = breaks[breaks$Healthy.tissues == 'Aged tissues',]; nrow(breaks) # 175
# breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "Patients with pathogenic POLG (...)",]
# breaks = breaks[breaks$Multiple.mtDNA.deletions !=  "ad/ar-PEO",]
breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "ad/ar-PEO",]
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 3B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING?
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length)
dev.off()
rm(list=ls(all=TRUE))
## 1: READ MITOBREAK AND KEEP ONLY MAJOR ARC DELETIONS:
breaks = read.table("../../Body/1Raw/MitoBreakDB_12122019.csv", sep = ',', header = TRUE)
breaks$X5..breakpoint = as.numeric(as.character(breaks$X5..breakpoint)); summary(breaks$X5..breakpoint)
breaks$X3..breakpoint = as.numeric(as.character(breaks$X3..breakpoint)); summary(breaks$X3..breakpoint)
breaks = breaks[!is.na(breaks$X3..breakpoint) & !is.na(breaks$X5..breakpoint),]
pdf("MitoBreakDeletionsDistribution.R.01.pdf")
par(mfrow=c(2,1))
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
nrow(breaks); breaks = breaks[breaks$Deletion.of.replication.origins == 'None',]; nrow(breaks)
breaks = breaks[breaks$Location.of.the.deleted.region == 'Inside the major arc',]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
# поскольку координаты не такие простые (см ниже) - чтобы не париться можно взять все точки разрыва что больше чем 5781 и меньше чем 16569
# OH: 110-441
# OL: 5721-5781
for (i in 1:nrow(breaks))
{
if (breaks$X5..breakpoint[i] < 110) {breaks$X5..breakpoint[i] = breaks$X5..breakpoint[i] + 16569}
if (breaks$X3..breakpoint[i] < 110) {breaks$X3..breakpoint[i] = breaks$X3..breakpoint[i] + 16569}
}
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
nrow(breaks); breaks = breaks[breaks$X5..breakpoint > 5781 & breaks$X3..breakpoint > 5781,]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16700, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16700, 100))
## 2A: COMPARE OBSERVED CENTERS AND EXPECTED (PERMUTTED) CENTERS - IF OBSERVED NARROWER? NO
Table = as.data.frame(table(breaks$X3..breakpoint)); Table=Table[order(-Table$Freq),] #
#16072	48
#16071	41
#16073	30
#16075	20
#16070	16
#16074	14
#16078	14
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 2B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING? YES, HOW TO DRAW IT, CLUSTERS DO NOT CROSS WITH EACH OTHER, CLUSTERS CAN SHOW 3D STRUCTURE
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
View(breaks)
plot(breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$ObservedCenter,breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
View(breaks)
rm(list=ls(all=TRUE))
## 1: READ MITOBREAK AND KEEP ONLY MAJOR ARC DELETIONS:
breaks = read.table("../../Body/1Raw/MitoBreakDB_12122019.csv", sep = ',', header = TRUE)
breaks$X5..breakpoint = as.numeric(as.character(breaks$X5..breakpoint)); summary(breaks$X5..breakpoint)
breaks$X3..breakpoint = as.numeric(as.character(breaks$X3..breakpoint)); summary(breaks$X3..breakpoint)
breaks = breaks[!is.na(breaks$X3..breakpoint) & !is.na(breaks$X5..breakpoint),]
pdf("MitoBreakDeletionsDistribution.R.01.pdf")
par(mfrow=c(2,1))
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
nrow(breaks); breaks = breaks[breaks$Deletion.of.replication.origins == 'None',]; nrow(breaks)
breaks = breaks[breaks$Location.of.the.deleted.region == 'Inside the major arc',]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
# поскольку координаты не такие простые (см ниже) - чтобы не париться можно взять все точки разрыва что больше чем 5781 и меньше чем 16569
# OH: 110-441
# OL: 5721-5781
for (i in 1:nrow(breaks))
{
if (breaks$X5..breakpoint[i] < 110) {breaks$X5..breakpoint[i] = breaks$X5..breakpoint[i] + 16569}
if (breaks$X3..breakpoint[i] < 110) {breaks$X3..breakpoint[i] = breaks$X3..breakpoint[i] + 16569}
}
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
nrow(breaks); breaks = breaks[breaks$X5..breakpoint > 5781 & breaks$X3..breakpoint > 5781,]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16700, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16700, 100))
## 2A: COMPARE OBSERVED CENTERS AND EXPECTED (PERMUTTED) CENTERS - IF OBSERVED NARROWER? NO
Table = as.data.frame(table(breaks$X3..breakpoint)); Table=Table[order(-Table$Freq),] #
#16072	48
#16071	41
#16073	30
#16075	20
#16070	16
#16074	14
#16078	14
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 2B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING? YES, HOW TO DRAW IT, CLUSTERS DO NOT CROSS WITH EACH OTHER, CLUSTERS CAN SHOW 3D STRUCTURE
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$ObservedCenter,breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Healthy.tissues == 'Aged tissues',]$ObservedCenter,breaks[breaks$Healthy.tissues == 'Aged tissues',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
## 3A: SPLIT ALL DELETIONS INTO DIFFERENT CATEGORIES ANS RUN ANALYSIS ONCE MORE:
# breaks = breaks[breaks$Healthy.tissues == 'Aged tissues',]; nrow(breaks) # 175
# breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "Patients with pathogenic POLG (...)",]
# breaks = breaks[breaks$Multiple.mtDNA.deletions !=  "ad/ar-PEO",]
breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "ad/ar-PEO",]
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 3B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING?
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length)
dev.off()
rm(list=ls(all=TRUE))
## 1: READ MITOBREAK AND KEEP ONLY MAJOR ARC DELETIONS:
breaks = read.table("../../Body/1Raw/MitoBreakDB_12122019.csv", sep = ',', header = TRUE)
breaks$X5..breakpoint = as.numeric(as.character(breaks$X5..breakpoint)); summary(breaks$X5..breakpoint)
breaks$X3..breakpoint = as.numeric(as.character(breaks$X3..breakpoint)); summary(breaks$X3..breakpoint)
breaks = breaks[!is.na(breaks$X3..breakpoint) & !is.na(breaks$X5..breakpoint),]
pdf("MitoBreakDeletionsDistribution.R.01.pdf")
par(mfrow=c(2,1))
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
nrow(breaks); breaks = breaks[breaks$Deletion.of.replication.origins == 'None',]; nrow(breaks)
breaks = breaks[breaks$Location.of.the.deleted.region == 'Inside the major arc',]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16600, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16600, 100))
# поскольку координаты не такие простые (см ниже) - чтобы не париться можно взять все точки разрыва что больше чем 5781 и меньше чем 16569
# OH: 110-441
# OL: 5721-5781
for (i in 1:nrow(breaks))
{
if (breaks$X5..breakpoint[i] < 110) {breaks$X5..breakpoint[i] = breaks$X5..breakpoint[i] + 16569}
if (breaks$X3..breakpoint[i] < 110) {breaks$X3..breakpoint[i] = breaks$X3..breakpoint[i] + 16569}
}
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
nrow(breaks); breaks = breaks[breaks$X5..breakpoint > 5781 & breaks$X3..breakpoint > 5781,]; nrow(breaks)
summary(breaks$X5..breakpoint)
summary(breaks$X3..breakpoint)
hist(breaks$X5..breakpoint, breaks = seq(0, 16700, 100))
hist(breaks$X3..breakpoint, breaks = seq(0, 16700, 100))
## 2A: COMPARE OBSERVED CENTERS AND EXPECTED (PERMUTTED) CENTERS - IF OBSERVED NARROWER? NO
Table = as.data.frame(table(breaks$X3..breakpoint)); Table=Table[order(-Table$Freq),] #
#16072	48
#16071	41
#16073	30
#16075	20
#16070	16
#16074	14
#16078	14
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$ExpectedCenter = breaks$X5..breakpoint + (breaks$PermuttedX3 - breaks$X5..breakpoint)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 2B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING? YES, HOW TO DRAW IT, CLUSTERS DO NOT CROSS WITH EACH OTHER, CLUSTERS CAN SHOW 3D STRUCTURE
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$X3..breakpoint,breaks$X5..breakpoint, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks$ObservedCenter,breaks$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$ObservedCenter,breaks[breaks$Multiple.mtDNA.deletions != 'Patients with pathogenic POLG (...)',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
plot(breaks[breaks$Healthy.tissues == 'Aged tissues',]$ObservedCenter,breaks[breaks$Healthy.tissues == 'Aged tissues',]$length, col = rgb(0.5,0.5,0.5,0.4), pch = 16)
## 3A: SPLIT ALL DELETIONS INTO DIFFERENT CATEGORIES ANS RUN ANALYSIS ONCE MORE:
# breaks = breaks[breaks$Healthy.tissues == 'Aged tissues',]; nrow(breaks) # 175
# breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "Patients with pathogenic POLG (...)",]
# breaks = breaks[breaks$Multiple.mtDNA.deletions !=  "ad/ar-PEO",]
breaks = breaks[breaks$Multiple.mtDNA.deletions ==  "ad/ar-PEO",]
breaks$ObservedCenter = breaks$X5..breakpoint + (breaks$X3..breakpoint - breaks$X5..breakpoint)/2
summary(breaks$ObservedCenter)
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
summary(breaks$ExpectedCenter)
hist(breaks$ObservedCenter, breaks = seq(0, 16700, 100))
hist(breaks$ExpectedCenter, breaks = seq(0, 16700, 100))
VecOfVariance = sd(breaks$ObservedCenter)/mean(breaks$ObservedCenter)
for (i in 1:100)
{
breaks$PermuttedX3 = sample(breaks$X3..breakpoint)
breaks$PermuttedX5 = sample(breaks$X5..breakpoint)
breaks$ExpectedCenter = breaks$PermuttedX5 + (breaks$PermuttedX3 - breaks$PermuttedX5)/2
VecOfVariance = c(VecOfVariance,sd(breaks$ExpectedCenter)/mean(breaks$ExpectedCenter))
}
length(VecOfVariance)
par(mfrow=c(1,1))
hist(VecOfVariance[2:101])
abline(v=VecOfVariance[1], col='red')
## 3B: PLOT CENTER AND LENGTH OF DELETIONS - IS THERE CLUSTERING?
par(mfrow=c(1,1))
breaks$length = breaks$X3..breakpoint - breaks$X5..breakpoint
plot(breaks$ObservedCenter,breaks$length)
dev.off()
mtBreak = read.csv('../../Body/1Raw/MitoBreakDB_12122019.csv')
konstantinData1 = read.table('../../Body/1Raw/compare.square.200.78windows.txt', header=TRUE, sep='\t')
konstantinData1 = read.table('../../Body/1Raw/compare.square.200.38windows.txt', header=TRUE, sep='\t')
konstantinData2 = read.table('../../Body/1Raw/compare.square.200.38windows_2.txt', header=TRUE, sep='\t')
View(konstantinData1)
row.names(konstantinData1) = konstantinData1[, 1]
View(konstantinData1)
konstantinData1 = konstantinData1[, -1]
row.names(konstantinData2) = konstantinData2[, 1]
konstantinData2 = konstantinData2[, -1]
View(konstantinData2)
View(konstantinData1)
konstantinData2 / konstantinData1
a = konstantinData2 / konstantinData1
View(a)
View(konstantinData1)
View(mtBreak)
rm(list=ls(all=TRUE))
### 1: READ VICTOR's FILE
Rep = read.table("../../Body/2Derived/Homo_sapiens_triangles.txt", sep = "\t", header = FALSE)
names(Rep)=c('DelStart','DelEnd','DelLength','MasterRepeat','AlternRepeats1','AlternRepeats2','AlternRepeats3','AlternRepeats4')
### 2: filter out deletions within major arc:
# поскольку координаты не такие простые (см ниже) - чтобы не париться можно взять все точки разрыва что больше чем 5781 и меньше чем 16569.
# однако, позже можно подумать и взять во внимание хвостик (< 110) - добавить его к 16569
# OH: 110-441
# OL: 5721-5781
nrow(Rep)
Rep=Rep[Rep$DelStart > 5781 & Rep$DelStart < 16569 & Rep$DelEnd > 5781 & Rep$DelEnd < 16569,]
nrow(Rep)
### 3: concatenate all alternative deletions
Rep$AllAlternRepeats = paste(Rep$AlternRepeats1,Rep$AlternRepeats2,Rep$AlternRepeats3,Rep$AlternRepeats4,sep=',')
Rep$AllAlternRepeats = gsub("\\,\\[\\]\\,",",",Rep$AllAlternRepeats)
Rep$AllAlternRepeats = gsub("^\\[","",Rep$AllAlternRepeats)
Rep$AllAlternRepeats = gsub("\\]$","",Rep$AllAlternRepeats)
### 4: prepare dataset for analysis of realized and nonrealized deletions line by line
Rep$CenterOfRealizedRepeats = 0
Rep$CenterOfNonRealizedRepats = 0
Rep$LengthOfRealizedRepeats = 0
Rep$LengthOfNonRealizedRepats = 0
for (i in (1:nrow(Rep)))
{
# i = 13
# format of data to get a dataset of master and all alternative repeats for each deletion (for each line of the dataset)
temp =  Rep[i,]
AltRep = unlist(strsplit(temp$AllAlternRepeats, "\\]\\,\\[")); AltRep = AltRep[AltRep != ""]
AltRep = data.frame(AltRep); names(AltRep)=c('WholeLine')
if (nrow(AltRep) > 0)
{
AltRep$RepeatType = 'alternative'
AltRep$WholeLine = as.character(AltRep$WholeLine)
MasterRepeat = as.character(temp$MasterRepeat); MasterRepeat = gsub("^\\[","",MasterRepeat); MasterRepeat = gsub("\\]$","",MasterRepeat);
MasterRepeat = paste(MasterRepeat,'mb_del',sep=' ')
MasterRepeat = data.frame(MasterRepeat); names(MasterRepeat)=c('WholeLine'); MasterRepeat$RepeatType = 'master'
AllRep=rbind(MasterRepeat,AltRep)
ReturnFifth = function(x)  {unlist(strsplit(x,' '))[5]}; AllRep$RealisedRepeat = apply(as.matrix(AllRep$WholeLine),1,FUN = ReturnFifth)
ReturnFirst = function(x)  {as.numeric(unlist(strsplit(x,' '))[1])}; AllRep$RepStart = apply(as.matrix(AllRep$WholeLine),1,FUN = ReturnFirst)
ReturnSecond = function(x)  {as.numeric(unlist(strsplit(x,' '))[2])}; AllRep$RepEnd = apply(as.matrix(AllRep$WholeLine),1,FUN = ReturnSecond)
AllRep = AllRep[AllRep$RepStart > 5781 & AllRep$RepStart < 16569 & AllRep$RepEnd > 5781 & AllRep$RepEnd < 16569,]
if (nrow(AllRep) > 0)
{
AllRep$Center = (AllRep$RepEnd - AllRep$RepStart)/2 + AllRep$RepStart
Rep$CenterOfRealizedRepeats[i]  = mean(AllRep[AllRep$RealisedRepeat == 'mb_del',]$Center)
Rep$CenterOfNonRealizedRepats[i]= mean(AllRep[AllRep$RealisedRepeat == 'non_del',]$Center)
AllRep$Length = AllRep$RepEnd - AllRep$RepStart
Rep$LengthOfRealizedRepeats[i] = mean(AllRep[AllRep$RealisedRepeat == 'mb_del',]$Length)
Rep$LengthOfNonRealizedRepats[i] =  mean(AllRep[AllRep$RealisedRepeat == 'non_del',]$Length)
if (i == 1) {FinalAllRep = AllRep}
if (i >  1) {FinalAllRep = rbind(FinalAllRep,AllRep)}
}
}
}
Rep=Rep[Rep$CenterOfRealizedRepeats > 0 & Rep$CenterOfNonRealizedRepats >0,]
## center is a bit higher in realized repeats
wilcox.test(Rep$CenterOfRealizedRepeats,Rep$CenterOfNonRealizedRepats,paired = TRUE) # significant
t.test(Rep$CenterOfRealizedRepeats,Rep$CenterOfNonRealizedRepats,paired = TRUE) # significant
summary(Rep$CenterOfRealizedRepeats)
summary(Rep$CenterOfNonRealizedRepats)
boxplot(Rep$CenterOfRealizedRepeats,Rep$CenterOfNonRealizedRepats, notch = TRUE, names=c('CenterOfRealizedRepeats','CenterOfNonRealizedRepeats'))
## length is longer in realized repeats
wilcox.test(Rep$LengthOfRealizedRepeats,Rep$LengthOfNonRealizedRepats,paired = TRUE) # significant
t.test(Rep$LengthOfRealizedRepeats,Rep$LengthOfNonRealizedRepats,paired = TRUE) # significant
summary(Rep$LengthOfRealizedRepeats)
summary(Rep$LengthOfNonRealizedRepats)
boxplot(Rep$LengthOfRealizedRepeats,Rep$LengthOfNonRealizedRepats, notch = TRUE, names=c('LengthOfRealizedRepeats','LengthOfNonRealizedRepeats'))
plot(FinalAllRep[FinalAllRep$RealisedRepeat == 'non_del',]$RepStart,FinalAllRep[FinalAllRep$RealisedRepeat == 'non_del',]$RepEnd, pch = 16, col = "grey", xlim = c(5781,16569), ylim=c(16569,5781), xlab = '', ylab = '')
par(new=TRUE)
plot(FinalAllRep[FinalAllRep$RealisedRepeat == 'mb_del',]$RepStart,FinalAllRep[FinalAllRep$RealisedRepeat == 'mb_del',]$RepEnd, pch = 16, col = "red", xlim = c(5781,16569), ylim=c(16569,5781), xlab = 'Start', ylab = 'End')
library(ggplot2)
ggplot(FinalAllRep){
geom_point(aes(RepStart, RepEnd))
}
ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd))
ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd, col = 'grey'))
ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd, col = 'red'))
ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd), col = 'grey')
View(FinalAllRep)
names(FinalAllRep)
ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat))
ggplot(FinalAllRep, aes(fill = RealisedRepeat)) +
geom_point(aes(RepStart, RepEnd)) +
geom_histogram(RepStart, alpha=0.4, position = 'dodge')
ggplot(FinalAllRep, aes(fill = RealisedRepeat)) +
geom_point(aes(RepStart, RepEnd)) +
geom_histogram(aes(RepStart), alpha=0.4, position = 'dodge')
ggplot(FinalAllRep, aes(fill = RealisedRepeat)) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat)) +
geom_histogram(aes(RepStart), alpha=0.4, position = 'dodge')
library(gridExtra)
ggplot(FinalAllRep, aes(fill = RealisedRepeat)) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat))
ggplot(FinalAllRep, aes(fill = RealisedRepeat)) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat)) +
scale_fill_manual(values=c("#404080", "#69b3a2"))
sp = ggplot(FinalAllRep, aes(fill = RealisedRepeat)) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat)) +
scale_fill_manual(values=c("#404080", "#69b3a2"))
sp = ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat)) +
scale_fill_manual(values=c("#404080", "#69b3a2"))
xplot <- ggplot(FinalAllRep, aes(RepStart, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge')
yplot <- ggplot(FinalAllRep, aes(RepEnd, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge')
yplot <- ggplot(FinalAllRep, aes(RepEnd, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge') + rotate()
yplot <- ggplot(FinalAllRep, aes(RepEnd, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge') + coord_flip()
# Cleaning the plots
yplot <- yplot + clean_theme()
# Arranging the plot
ggarrange(xplot, NULL, sp, yplot,
ncol = 2, nrow = 2,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
library(ggpubr)
function (..., plotlist = NULL, ncol = NULL, nrow = NULL, labels = NULL,
label.x = 0, label.y = 1, hjust = -0.5, vjust = 1.5, font.label = list(size = 14,
color = "black", face = "bold", family = NULL), align = c("none",
"h", "v", "hv"), widths = 1, heights = 1, legend = NULL,
common.legend = FALSE)
l
# Arranging the plot
ggarrange(xplot, NULL, sp, yplot,
ncol = 2, nrow = 2,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
sp = ggplot(FinalAllRep) +
geom_point(aes(rev(RepStart), RepEnd, col=RealisedRepeat)) +
scale_fill_manual(values=c("#404080", "#69b3a2"))
xplot <- ggplot(FinalAllRep, aes(rev(RepStart), fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge')
yplot <- ggplot(FinalAllRep, aes(RepEnd, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge') + coord_flip()
# Arranging the plot
ggarrange(xplot, NULL, sp, yplot,
ncol = 2, nrow = 2,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
sp = ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat)) +
scale_fill_manual(values=c("#404080", "#69b3a2"))
xplot <- ggplot(FinalAllRep, aes(RepStart, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge')
yplot <- ggplot(FinalAllRep, aes(RepEnd, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge') + coord_flip()
# Arranging the plot
ggarrange(xplot, NULL, sp, yplot,
ncol = 2, nrow = 2,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
sp = ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat)) +
scale_fill_manual(values=c("#404080", "#69b3a2")) + scale_x_reverse()
xplot <- ggplot(FinalAllRep, aes(RepStart, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge') + scale_x_reverse()
yplot <- ggplot(FinalAllRep, aes(RepEnd, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge') + coord_flip()
# Arranging the plot
ggarrange(xplot, NULL, sp, yplot,
ncol = 2, nrow = 2,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
##
pdf("../../Body/4Figures/RealizedVsNonrealizedDeletions.R.01.pdf")
wilcox.test(Rep$CenterOfRealizedRepeats,Rep$CenterOfNonRealizedRepats,paired = TRUE) # significant
t.test(Rep$CenterOfRealizedRepeats,Rep$CenterOfNonRealizedRepats,paired = TRUE) # significant
summary(Rep$CenterOfRealizedRepeats)
summary(Rep$CenterOfNonRealizedRepats)
boxplot(Rep$CenterOfRealizedRepeats,Rep$CenterOfNonRealizedRepats, notch = TRUE, names=c('CenterOfRealizedRepeats','CenterOfNonRealizedRepeats'))
## length is longer in realized repeats
wilcox.test(Rep$LengthOfRealizedRepeats,Rep$LengthOfNonRealizedRepats,paired = TRUE) # significant
t.test(Rep$LengthOfRealizedRepeats,Rep$LengthOfNonRealizedRepats,paired = TRUE) # significant
summary(Rep$LengthOfRealizedRepeats)
summary(Rep$LengthOfNonRealizedRepats)
boxplot(Rep$LengthOfRealizedRepeats,Rep$LengthOfNonRealizedRepats, notch = TRUE, names=c('LengthOfRealizedRepeats','LengthOfNonRealizedRepeats'))
## how to plot it in terms of X(start) and Y(end)? Just plot it? ALL?
plot(FinalAllRep[FinalAllRep$RealisedRepeat == 'non_del',]$RepStart,FinalAllRep[FinalAllRep$RealisedRepeat == 'non_del',]$RepEnd, pch = 16, col = "grey", xlim = c(5781,16569), ylim=c(16569,5781), xlab = '', ylab = '')
par(new=TRUE)
plot(FinalAllRep[FinalAllRep$RealisedRepeat == 'mb_del',]$RepStart,FinalAllRep[FinalAllRep$RealisedRepeat == 'mb_del',]$RepEnd, pch = 16, col = "red", xlim = c(5781,16569), ylim=c(16569,5781), xlab = 'Start', ylab = 'End')
sp = ggplot(FinalAllRep) +
geom_point(aes(RepStart, RepEnd, col=RealisedRepeat)) +
scale_fill_manual(values=c("#404080", "#69b3a2")) + scale_x_reverse()
xplot <- ggplot(FinalAllRep, aes(RepStart, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge') + scale_x_reverse()
yplot <- ggplot(FinalAllRep, aes(RepEnd, fill = RealisedRepeat)) +
geom_histogram(alpha=0.4, position = 'dodge') + coord_flip()
# Arranging the plot
ggarrange(xplot, NULL, sp, yplot,
ncol = 2, nrow = 2,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
dev.off()
