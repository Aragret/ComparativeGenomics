%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACAGCUAGGGGGGGGGGAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGxxxxxxxxxxCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGCCCCCCCCCCAUAACAGCUA\
) } def
/len { sequence length } bind def

/coor [
[148.62107849 509.76406860]
[135.40087891 502.49160767]
[124.51407623 492.04458618]
[116.70294952 479.13534546]
[112.50006866 464.64404297]
[112.19199371 449.55868530]
[115.79973602 434.90786743]
[123.07730865 421.69049072]
[133.52851868 410.80770874]
[146.44078064 403.00155640]
[160.93371582 398.80429077]
[160.62165833 383.80752563]
[160.30960083 368.81079102]
[159.99754333 353.81402588]
[159.68548584 338.81726074]
[159.37342834 323.82052612]
[159.06137085 308.82376099]
[158.74931335 293.82699585]
[158.43727112 278.83026123]
[177.31561279 236.91362000]
[172.71005249 222.63816833]
[168.10449219 208.36270142]
[163.49891663 194.08723450]
[158.89335632 179.81178284]
[131.19770813 172.20333862]
[129.95823669 146.58091736]
[120.21058655 135.17988586]
[110.46293640 123.77886963]
[91.80760956 128.58621216]
[72.31902313 118.85930634]
[62.91703415 96.44595337]
[48.27353287 93.19512939]
[33.63003159 89.94430542]
[22.30946541 96.21316528]
[10.14823341 93.15974426]
[3.56807280 82.96127319]
[-11.00463009 79.40650940]
[-25.57733345 75.85174561]
[-40.15003586 72.29698181]
[-51.89839554 82.43383026]
[-67.36408234 83.69564819]
[-80.60021973 75.59724426]
[-86.51725006 61.25261307]
[-82.83995056 46.17756653]
[-70.98231506 36.16876221]
[-55.50385284 35.07479095]
[-42.35634232 43.31630707]
[-36.59527206 57.72428131]
[-22.02257156 61.27904510]
[-7.44986820 64.83380890]
[7.12283468 68.38856506]
[23.64130974 62.54563141]
[36.88085556 75.30080414]
[51.52435684 78.55162811]
[66.16786194 81.80245209]
[72.01766968 77.10887146]
[60.72531891 67.23553467]
[46.58275986 62.23672867]
[41.00819778 48.31105804]
[47.79479599 34.93413544]
[62.32466888 31.20817375]
[74.71108246 39.66847610]
[76.52590942 54.55797195]
[83.71729279 67.72171021]
[89.56710815 63.02812958]
[89.56710815 48.02812958]
[81.82980347 34.22795486]
[89.56710815 21.50068474]
[89.56710815 6.50068426]
[89.56710815 -8.49931526]
[76.22597504 -16.10916901]
[68.49100494 -29.37814903]
[68.44286346 -44.73696518]
[76.09449768 -58.05417633]
[89.38765717 -65.74751282]
[104.74655151 -65.74751282]
[118.03971100 -58.05417633]
[125.69134521 -44.73696518]
[125.64320374 -29.37814903]
[117.90823364 -16.10916901]
[104.56710815 -8.49931526]
[104.56710815 6.50068426]
[104.56710815 21.50068474]
[112.30440521 34.22795486]
[104.56710815 48.02812958]
[104.56710815 63.02812958]
[123.92771912 76.56127167]
[129.58160400 96.96438599]
[121.86396027 114.03121948]
[131.61161804 125.43224335]
[141.35926819 136.83326721]
[152.35566711 134.33543396]
[163.94400024 138.08668518]
[172.60061646 147.89964294]
[186.12480164 141.41148376]
[199.64900208 134.92330933]
[213.17318726 128.43515015]
[226.69737244 121.94698334]
[240.22157288 115.45881653]
[245.22645569 100.46793365]
[259.40274048 93.48160553]
[274.33987427 98.64470673]
[281.17590332 112.89405060]
[275.85519409 127.77576447]
[261.53436279 134.46078491]
[246.70973206 128.98300171]
[233.18554688 135.47117615]
[219.66134644 141.95933533]
[206.13716125 148.44750977]
[192.61297607 154.93566895]
[179.08879089 161.42382812]
[173.16882324 175.20622253]
[177.77438354 189.48167419]
[182.37994385 203.75714111]
[186.98551941 218.03259277]
[191.59107971 232.30805969]
[199.28265381 219.43017578]
[214.23551941 218.24215698]
[223.86407471 229.74394226]
[220.06408691 244.25462341]
[206.03387451 249.56076050]
[219.27645874 256.60589600]
[232.51904297 263.65103149]
[249.34225464 265.75234985]
[251.98020935 282.49981689]
[236.61749268 289.67080688]
[225.47390747 276.89361572]
[212.23132324 269.84848022]
[198.98873901 262.80334473]
[186.21081543 270.66113281]
[173.43402100 278.51818848]
[173.74607849 293.51495361]
[174.05813599 308.51171875]
[174.37019348 323.50845337]
[174.68223572 338.50521851]
[174.99429321 353.50198364]
[175.30635071 368.49871826]
[175.61840820 383.49548340]
[175.93046570 398.49221802]
[190.58546448 402.08300781]
[203.81126404 409.34524536]
[214.70613098 419.78384399]
[222.52723694 432.68707275]
[226.74130249 447.17514038]
[227.06101990 462.26022339]
[223.46459961 476.91381836]
[216.19723511 490.13684082]
[205.75444031 501.02767944]
[192.84820557 508.84378052]
[178.35852051 513.05224609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 116]
[21 115]
[22 114]
[23 113]
[24 112]
[26 91]
[27 90]
[28 89]
[31 55]
[32 54]
[33 53]
[36 51]
[37 50]
[38 49]
[39 48]
[65 86]
[66 85]
[68 83]
[69 82]
[70 81]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
