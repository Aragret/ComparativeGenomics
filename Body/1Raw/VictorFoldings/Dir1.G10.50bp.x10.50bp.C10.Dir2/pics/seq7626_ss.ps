%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAUCUCAGGGGGGGGGGGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUxxxxxxxxxxAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUCCCCCCCCCCUACCAUCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.87360382 441.23370361]
[71.38391876 437.02523804]
[58.47768784 429.20910645]
[48.03488541 418.31826782]
[40.76752090 405.09527588]
[37.17109680 390.44168091]
[37.49081802 375.35656738]
[41.70488739 360.86849976]
[49.52598572 347.96530151]
[60.42085266 337.52670288]
[73.64665985 330.26443481]
[88.30165100 326.67367554]
[88.61370850 311.67691040]
[88.92576599 296.68017578]
[89.23782349 281.68341064]
[89.54988098 266.68667603]
[89.86193085 251.68991089]
[90.17398834 236.69316101]
[90.48604584 221.69639587]
[90.79810333 206.69964600]
[91.11016083 191.70289612]
[91.42221832 176.70614624]
[82.13823700 161.84654236]
[91.72096252 146.15733337]
[91.72096252 131.15733337]
[91.72096252 116.15733337]
[81.97330475 104.75631714]
[67.15554810 102.42520905]
[52.33779144 100.09410858]
[37.52003098 97.76300049]
[22.70227432 95.43190002]
[16.30585098 97.47964478]
[10.69806480 96.14396667]
[7.32184076 92.68323517]
[-7.38612080 89.73775482]
[-22.09408188 86.79227448]
[-31.24672890 99.00668335]
[-44.79656982 106.03267670]
[-60.05326843 106.47524261]
[-73.98760223 100.24651337]
[-83.83289337 88.58319092]
[-87.63435364 73.80105591]
[-84.63720703 58.83509827]
[-75.43653107 46.65682602]
[-61.85912704 39.68424225]
[-46.60080338 39.30175781]
[-32.69110870 45.58531952]
[-22.89182281 57.28731537]
[-19.14859962 72.08431244]
[-4.44063854 75.02979279]
[10.26732349 77.97527313]
[25.03337860 80.61414337]
[39.85113525 82.94524384]
[54.66889572 85.27634430]
[69.48665619 87.60745239]
[84.30441284 89.93855286]
[72.41819763 80.78881073]
[58.04467773 76.49905396]
[45.05374527 69.00000763]
[34.15043640 58.69865799]
[25.92649460 46.15406799]
[20.82824135 32.04705429]
[19.13237000 17.14322853]
[20.93091774 2.25144386]
[26.12627411 -11.82009697]
[34.43647766 -24.30771065]
[45.41052246 -34.53367615]
[58.45283127 -41.94300842]
[72.85557556 -46.13359833]
[87.83708954 -46.87800980]
[102.58431244 -44.13584518]
[116.29688263 -38.05592728]
[128.23060608 -28.96822166]
[137.73779297 -17.36593246]
[144.30252075 -3.87873459]
[147.56846619 10.76140118]
[147.35839844 25.75992966]
[143.68373108 40.30286026]
[136.74388123 53.60091782]
[126.91548157 64.93240356]
[114.73731995 73.67935944]
[106.49346924 86.21087646]
[119.73605347 79.16574097]
[128.28536987 65.85334778]
[143.15551758 66.70645142]
[156.39810181 59.66131210]
[169.64068604 52.61617661]
[182.88327026 45.57104492]
[196.12586975 38.52590942]
[209.36845398 31.48077393]
[222.61103821 24.43563843]
[227.38859558 7.63944197]
[242.52261353 -0.37591428]
[258.46130371 4.89817476]
[271.55444336 -2.42093086]
[284.64761353 -9.74003601]
[297.74075317 -17.05914116]
[310.83392334 -24.37824821]
[316.56671143 -39.36206436]
[331.89889526 -44.08473206]
[345.06893921 -34.92343140]
[345.97390747 -18.90592194]
[333.91958618 -8.31946945]
[318.15301514 -11.28509331]
[305.05987549 -3.96598744]
[291.96670532 3.35311794]
[278.87356567 10.67222404]
[265.78039551 17.99132919]
[264.02847290 30.79475021]
[255.07386780 40.38062668]
[242.03739929 43.07848740]
[229.65617371 37.67822266]
[216.41358948 44.72335815]
[203.17100525 51.76849365]
[189.92840576 58.81362915]
[176.68582153 65.85876465]
[163.44323730 72.90390015]
[150.20065308 79.94903564]
[142.59854126 92.75751495]
[126.78118896 92.40832520]
[113.53860474 99.45346069]
[114.03385162 103.79181671]
[113.08580017 108.35303497]
[110.61752319 112.64572144]
[106.72096252 116.15733337]
[106.72096252 131.15733337]
[106.72096252 146.15733337]
[115.29425049 155.85025024]
[114.94899750 168.38420105]
[106.41896820 177.01820374]
[106.10691071 192.01495361]
[105.79485321 207.01170349]
[105.48280334 222.00845337]
[105.17074585 237.00521851]
[104.85868835 252.00196838]
[104.54663086 266.99871826]
[104.23457336 281.99548340]
[103.92251587 296.99221802]
[103.61046600 311.98898315]
[103.29840851 326.98574829]
[117.79134369 331.18301392]
[130.70359802 338.98916626]
[141.15481567 349.87194824]
[148.43238831 363.08932495]
[152.04013062 377.74014282]
[151.73205566 392.82550049]
[147.52917480 407.31680298]
[139.71804810 420.22604370]
[128.83123779 430.67306519]
[115.61104584 437.94552612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 127]
[25 126]
[26 125]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[34 51]
[35 50]
[36 49]
[82 121]
[83 120]
[85 118]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
