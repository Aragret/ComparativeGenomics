%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCACCCCGGGGGGGGGGUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCAxxxxxxxxxxCCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAACCCCCCCCCCUCUCCACCUC\
) } def
/len { sequence length } bind def

/coor [
[83.73583221 375.66333008]
[69.88989258 369.64730835]
[58.18122864 360.11788940]
[49.47870255 347.78222656]
[44.42810059 333.55569458]
[43.40420914 318.49401855]
[46.48300934 303.71487427]
[53.43603134 290.31494141]
[63.74731445 279.28860474]
[76.65169525 271.45410156]
[91.19158173 267.39279175]
[91.19158173 252.39277649]
[91.19158173 237.39277649]
[91.19158173 222.39277649]
[91.19158173 207.39277649]
[91.19158173 192.39277649]
[91.19158173 177.39277649]
[91.19158173 162.39277649]
[91.19158173 147.39277649]
[91.19158173 132.39277649]
[91.19158173 117.39277649]
[80.86437988 106.51395416]
[65.88466644 105.73410797]
[50.90494919 104.95426178]
[35.92523575 104.17441559]
[29.79974556 118.84957123]
[19.04617500 130.52824402]
[4.97278547 137.81666565]
[-10.71748734 139.85350037]
[-26.13308144 136.41166687]
[-39.42184830 127.92341614]
[-48.99359131 115.42623138]
[-53.71034241 100.43596649]
[-68.70304108 99.96792603]
[-83.69573212 99.49988556]
[-95.04125977 110.50236511]
[-110.84218597 110.17626953]
[-121.72409821 98.71505737]
[-121.23096466 82.91845703]
[-109.65533447 72.15832520]
[-93.86483765 72.81845093]
[-83.22769165 84.50718689]
[-68.23500061 84.97522736]
[-53.24230194 85.44327545]
[-48.37341690 72.11566162]
[-39.60582733 60.93215942]
[-27.78985977 52.99895477]
[-14.07819653 49.10597992]
[0.18658797 49.64823914]
[13.60347271 54.58578491]
[24.85059547 63.44633865]
[32.81548309 75.37041473]
[36.70508194 89.19470215]
[51.68479538 89.97454834]
[66.66451263 90.75439453]
[81.64422607 91.53424072]
[92.08403778 80.76343536]
[90.83715820 65.81534576]
[89.59028625 50.86725616]
[88.34341431 35.91917038]
[73.42755890 33.80611801]
[59.35605621 28.42646599]
[46.83473587 20.05005646]
[36.49165726 9.09704590]
[28.84562111 -3.88316560]
[24.28015327 -18.23949623]
[23.02425575 -33.25183868]
[25.14092445 -48.16718292]
[30.52398491 -62.23737717]
[38.90342712 -74.75666809]
[49.85894394 -85.09709930]
[62.84100723 -92.73999023]
[77.19844818 -97.30197144]
[92.21109009 -98.55423737]
[107.12592316 -96.43395233]
[121.19480896 -91.04748535]
[133.71206665 -82.66500854]
[144.04985046 -71.70698547]
[151.68959045 -58.72306824]
[156.24809265 -44.36452866]
[157.49671936 -29.35157776]
[155.37281799 -14.43726158]
[149.98294067 -0.36967722]
[141.59744263 12.14555264]
[130.63691711 22.48066902]
[117.65114594 30.11726570]
[103.29149628 34.67229462]
[104.53837585 49.62038422]
[105.78524780 64.56847382]
[107.03211975 79.51655579]
[119.29449463 88.15567017]
[133.79008484 84.29851532]
[146.48757935 71.00363922]
[163.23481750 76.15437317]
[177.64703369 71.99649048]
[192.05924988 67.83860016]
[206.47146606 63.68071365]
[206.95671082 48.56053925]
[212.09251404 34.33103561]
[221.37571716 22.38627052]
[233.89683533 13.89646912]
[248.42918396 9.69337368]
[263.54904175 10.18876076]
[277.77508545 15.33409882]
[289.71362305 24.62529945]
[298.19503784 37.15210342]
[302.38839722 51.68726730]
[301.88287354 66.80677795]
[296.72802734 81.02938080]
[287.42880249 92.96170044]
[274.89633179 101.43471527]
[260.35836792 105.61833191]
[245.23919678 105.10267639]
[231.02005005 99.93827820]
[219.09396362 90.63108826]
[210.62934875 78.09292603]
[196.21713257 82.25081635]
[181.80491638 86.40870667]
[167.39270020 90.56658936]
[161.24247742 101.02996063]
[149.21879578 104.58663177]
[137.64724731 98.79411316]
[123.15164948 102.65126801]
[137.78829956 105.93278503]
[146.44349670 118.18380737]
[144.64613342 133.07574463]
[133.32469177 142.91571045]
[118.32759857 142.62060547]
[107.40201569 132.34288025]
[106.19158173 117.39277649]
[106.19158173 132.39277649]
[106.19158173 147.39277649]
[106.19158173 162.39277649]
[106.19158173 177.39277649]
[106.19158173 192.39277649]
[106.19158173 207.39277649]
[106.19158173 222.39277649]
[106.19158173 237.39277649]
[106.19158173 252.39277649]
[106.19158173 267.39279175]
[120.73146820 271.45410156]
[133.63584900 279.28860474]
[143.94712830 290.31494141]
[150.90016174 303.71487427]
[153.97895813 318.49401855]
[152.95506287 333.55569458]
[147.90446472 347.78222656]
[139.20193481 360.11788940]
[127.49327850 369.64730835]
[113.64733887 375.66333008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 56]
[23 55]
[24 54]
[25 53]
[33 44]
[34 43]
[35 42]
[57 90]
[58 89]
[59 88]
[60 87]
[91 123]
[92 122]
[94 119]
[95 118]
[96 117]
[97 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
