%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACCCAACAAUGGGGGGGGGGGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAxxxxxxxxxxUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCACCCCCCCCCCACCACCCAACUAU\
) } def
/len { sequence length } bind def

/coor [
[91.09049225 171.06338501]
[76.51117706 167.65840149]
[62.95830154 161.29679871]
[51.02412415 152.25656128]
[41.23015594 140.93275452]
[34.00439072 127.82021332]
[29.66258430 113.49195099]
[28.39447212 98.57409668]
[30.25547028 83.71855927]
[35.16425323 69.57450104]
[42.90631485 56.76002121]
[53.14332581 45.83509445]
[65.42794037 37.27713394]
[79.22333527 31.46012115]
[93.92665100 28.63825035]
[94.22677612 13.64125347]
[94.52690887 -1.35574377]
[94.82704163 -16.35274124]
[95.12717438 -31.34973717]
[95.42730713 -46.34673309]
[95.72743988 -61.34373093]
[96.02757263 -76.34072876]
[96.32770538 -91.33772278]
[96.62783813 -106.33472443]
[81.66780090 -107.48302460]
[66.79669952 -109.47586060]
[52.06215286 -112.30683899]
[37.51137161 -115.96688843]
[23.19096375 -120.44429016]
[9.14680195 -125.72470093]
[-4.57612514 -131.79119873]
[-17.93385887 -138.62437439]
[-30.88361168 -146.20230103]
[-43.38389969 -154.50073242]
[-55.39468002 -163.49308777]
[-66.87747955 -173.15054321]
[-77.79551697 -183.44218445]
[-88.11381531 -194.33502197]
[-97.79932404 -205.79417419]
[-106.82101440 -217.78292847]
[-115.14998627 -230.26287842]
[-122.75956726 -243.19407654]
[-129.62538147 -256.53506470]
[-135.72541809 -270.24310303]
[-141.04014587 -284.27432251]
[-145.55255127 -298.58374023]
[-149.24816895 -313.12551880]
[-152.11517334 -327.85308838]
[-154.14436340 -342.71929932]
[-155.32923889 -357.67648315]
[-155.66601562 -372.67672729]
[-155.15361023 -387.67202759]
[-153.79367065 -402.61428833]
[-151.59054565 -417.45571899]
[-148.55128479 -432.14871216]
[-144.68563843 -446.64620972]
[-140.00598145 -460.90182495]
[-134.52731323 -474.86981201]
[-128.26718140 -488.50552368]
[-121.24562073 -501.76519775]
[-113.48514557 -514.60638428]
[-105.01060486 -526.98797607]
[-95.84914398 -538.87023926]
[-86.03012085 -550.21520996]
[-75.58497620 -560.98645020]
[-64.54718018 -571.14953613]
[-52.95207977 -580.67187500]
[-40.83682251 -589.52294922]
[-28.24022102 -597.67443848]
[-15.20262051 -605.10021973]
[-1.76578820 -611.77655029]
[12.02723503 -617.68194580]
[26.13226509 -622.79748535]
[40.50411987 -627.10693359]
[55.09676361 -630.59631348]
[69.86344910 -633.25457764]
[84.75686646 -635.07312012]
[99.72932434 -636.04620361]
[114.73284912 -636.17059326]
[129.71937561 -635.44598389]
[144.64091492 -633.87469482]
[159.44964600 -631.46173096]
[174.09815979 -628.21478271]
[188.53950500 -624.14428711]
[202.72743225 -619.26336670]
[216.61650085 -613.58752441]
[230.16220093 -607.13500977]
[243.32116699 -599.92645264]
[256.05120850 -591.98498535]
[268.31158447 -583.33605957]
[280.06301880 -574.00732422]
[291.26785278 -564.02868652]
[301.89019775 -553.43212891]
[311.89602661 -542.25158691]
[321.25326538 -530.52282715]
[329.93197632 -518.28350830]
[337.90435791 -505.57281494]
[345.14486694 -492.43139648]
[351.63027954 -478.90139771]
[357.33984375 -465.02618408]
[362.25527954 -450.85015869]
[366.36080933 -436.41873169]
[369.64334106 -421.77816772]
[372.09228516 -406.97534180]
[373.69985962 -392.05767822]
[374.46087646 -377.07293701]
[374.37292480 -362.06915283]
[373.43624878 -347.09439087]
[371.65390015 -332.19659424]
[369.03152466 -317.42349243]
[365.57760620 -302.82241821]
[361.30313110 -288.44012451]
[356.22180176 -274.32269287]
[350.34994507 -260.51538086]
[343.70632935 -247.06234741]
[336.31225586 -234.00674438]
[328.19140625 -221.39038086]
[319.36978149 -209.25364685]
[309.87564087 -197.63545227]
[299.73941040 -186.57298279]
[288.99356079 -176.10169983]
[277.67251587 -166.25512695]
[265.81250000 -157.06483459]
[253.45156860 -148.56022644]
[240.62927246 -140.76856995]
[227.38670349 -133.71481323]
[213.76626587 -127.42155457]
[199.81161499 -121.90895844]
[185.56742859 -117.19467926]
[171.07934570 -113.29381561]
[156.39378357 -110.21886444]
[141.55776978 -107.97968292]
[126.61883545 -106.58342743]
[111.62483215 -106.03459167]
[111.32469940 -91.03759766]
[111.02456665 -76.04059601]
[110.72443390 -61.04359818]
[110.42430878 -46.04660416]
[110.12417603 -31.04960632]
[109.82404327 -16.05260849]
[109.52391052 -1.05561161]
[109.22377777 13.94138527]
[108.92364502 28.93838310]
[123.50228882 32.34626770]
[137.05389404 38.71057129]
[148.98626709 47.75318146]
[158.77798462 59.07893753]
[166.00114441 72.19291687]
[170.34010315 86.52204132]
[171.60523987 101.44014740]
[169.74128723 116.29531860]
[164.82969666 130.43840027]
[157.08508301 143.25134277]
[146.84590149 154.17422485]
[134.55957031 162.72973633]
[120.76303101 168.54400635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
