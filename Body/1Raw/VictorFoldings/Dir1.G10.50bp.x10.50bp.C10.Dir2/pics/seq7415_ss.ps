%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGGUAUUAGGGGGGGGGGGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAxxxxxxxxxxUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGCCCCCCCCCCAAAAGCUAUUA\
) } def
/len { sequence length } bind def

/coor [
[83.25283813 409.99975586]
[69.23089600 404.44674683]
[57.03093338 395.58041382]
[47.41986465 383.95809937]
[41.00183868 370.31042480]
[38.18030167 355.49523926]
[39.13261795 340.44384766]
[43.79892349 326.10241699]
[51.88588715 313.37246704]
[62.88516235 303.05419922]
[76.10532379 295.79623413]
[90.71533203 292.05477905]
[90.71533203 277.05477905]
[90.71533203 262.05477905]
[90.71533203 247.05477905]
[90.71533203 232.05477905]
[90.71533203 217.05477905]
[90.71533203 202.05477905]
[90.71533203 187.05477905]
[90.71533203 172.05477905]
[90.71533203 157.05477905]
[78.12689209 148.89811707]
[64.43627167 155.02729797]
[50.74564362 161.15646362]
[37.05501938 167.28564453]
[30.01605988 181.70204163]
[14.32547474 185.04644775]
[2.01973772 174.75332642]
[2.53875732 158.71867371]
[15.48438549 149.24290466]
[30.92584610 153.59501648]
[44.61647034 147.46583557]
[58.30709457 141.33666992]
[71.99771881 135.20748901]
[63.35265732 117.10189056]
[64.11462402 99.07926178]
[49.53087234 95.57009888]
[34.94712067 92.06092834]
[20.36337280 88.55175781]
[5.77962303 85.04259491]
[-8.80412674 81.53342438]
[-23.38787651 78.02426147]
[-40.20198059 80.19733429]
[-46.94473648 64.64189911]
[-33.86379623 53.85647964]
[-19.87870789 63.44050980]
[-5.29495907 66.94967651]
[9.28879070 70.45884705]
[23.87253952 73.96800995]
[38.45628738 77.47718048]
[53.04003906 80.98634338]
[67.62378693 84.49551392]
[72.26593781 77.20899200]
[78.51458740 71.24265289]
[86.00778198 66.94207764]
[94.31148529 64.55639648]
[102.94468689 64.22379303]
[111.40732574 65.96353149]
[119.04029846 53.05083466]
[126.67326355 40.13813782]
[134.30622864 27.22543716]
[141.80622864 14.23505688]
[149.17247009 1.16836202]
[156.53871155 -11.89833260]
[144.46006775 -20.82504082]
[133.57000732 -31.16844559]
[124.03359985 -42.77174377]
[115.99542236 -55.45903397]
[109.57733154 -69.03797913]
[104.87662506 -83.30272675]
[101.96456146 -98.03701782]
[100.88529205 -113.01750183]
[101.65516663 -128.01705933]
[104.26253510 -142.80831909]
[108.66784668 -157.16703796]
[114.80433655 -170.87554932]
[122.57897186 -183.72602844]
[131.87388611 -195.52365112]
[142.54817200 -206.08959961]
[154.44000244 -215.26368713]
[167.36912537 -222.90681458]
[181.13952637 -228.90315247]
[195.54243469 -233.16175842]
[210.35951233 -235.61810303]
[225.36614990 -236.23492432]
[240.33483887 -235.00289917]
[255.03866577 -231.94067383]
[269.25473022 -227.09469604]
[282.76748657 -220.53842163]
[295.37210083 -212.37123108]
[306.87753296 -202.71694946]
[317.10931396 -191.72193909]
[325.91232300 -179.55285645]
[333.15316772 -166.39421082]
[338.72201538 -152.44546509]
[342.53448486 -137.91809082]
[344.53274536 -123.03231049]
[344.68655396 -108.01379395]
[342.99353027 -93.09020996]
[339.47937012 -78.48780060]
[334.19735718 -64.42794037]
[327.22750854 -51.12376404]
[318.67553711 -38.77696609]
[308.67108154 -27.57471848]
[297.36578369 -17.68684578]
[284.93106079 -9.26324368]
[271.55538940 -2.43161225]
[257.44155884 2.70448160]
[242.80354309 6.06717682]
[227.86322021 7.60549593]
[212.84709167 7.29611778]
[197.98281860 5.14373302]
[183.49571228 1.18097126]
[169.60540771 -4.53209352]
[162.23916626 8.53460121]
[154.87292480 21.60129547]
[154.32446289 29.01826096]
[147.21893311 34.85840607]
[139.58596802 47.77110672]
[131.95298767 60.68380356]
[124.32002258 73.59650421]
[137.85986328 90.94944763]
[139.30851746 114.66806793]
[126.20571899 136.56440735]
[139.19609070 144.06440735]
[155.58631897 143.52331543]
[164.01910400 157.58818054]
[155.81953430 171.79025269]
[139.42260742 171.51966858]
[131.69609070 157.05477905]
[118.70571899 149.55477905]
[105.71533203 157.05477905]
[105.71533203 172.05477905]
[105.71533203 187.05477905]
[105.71533203 202.05477905]
[105.71533203 217.05477905]
[105.71533203 232.05477905]
[105.71533203 247.05477905]
[105.71533203 262.05477905]
[105.71533203 277.05477905]
[105.71533203 292.05477905]
[120.32534790 295.79623413]
[133.54550171 303.05419922]
[144.54478455 313.37246704]
[152.63174438 326.10241699]
[157.29804993 340.44384766]
[158.25036621 355.49523926]
[155.42883301 370.31042480]
[149.01080322 383.95809937]
[139.39973450 395.58041382]
[127.19977570 404.44674683]
[113.17783356 409.99975586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 34]
[23 33]
[24 32]
[25 31]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[58 121]
[59 120]
[60 119]
[61 118]
[62 116]
[63 115]
[64 114]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
