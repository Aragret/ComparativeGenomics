%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCACCCCCGGGGGGGGGGACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGxxxxxxxxxxACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGCCCCCCCCCCACCUCAACCCC\
) } def
/len { sequence length } bind def

/coor [
[84.66148376 378.83255005]
[70.63953400 373.27954102]
[58.43957901 364.41320801]
[48.82850647 352.79089355]
[42.41048431 339.14318848]
[39.58894730 324.32800293]
[40.54125977 309.27661133]
[45.20756531 294.93521118]
[53.29453278 282.20523071]
[64.29380798 271.88696289]
[77.51396942 264.62899780]
[92.12397766 260.88754272]
[92.12397766 245.88755798]
[92.12397766 230.88755798]
[92.12397766 215.88755798]
[92.12397766 200.88755798]
[92.12397766 185.88755798]
[92.12397766 170.88755798]
[92.12397766 155.88755798]
[92.12397766 140.88755798]
[92.12397766 125.88755798]
[88.95941925 119.15719604]
[92.28113556 110.58036804]
[91.97315979 95.58353424]
[91.04974365 80.61198425]
[90.12633514 65.64043427]
[89.04926300 50.67914963]
[87.81864929 35.72971725]
[86.58803558 20.78028297]
[85.35742950 5.83084774]
[70.35240936 6.01592875]
[55.37103653 5.15385723]
[40.48629379 3.24883294]
[25.77069664 0.31013736]
[11.29594040 -3.64791250]
[-2.86745501 -8.60603333]
[-16.65048599 -14.54006863]
[-29.98600197 -21.42111015]
[-42.80903625 -29.21563148]
[-55.05710983 -37.88565826]
[-66.67055511 -47.38895416]
[-77.59278870 -57.67921448]
[-87.77060699 -68.70630646]
[-97.15441132 -80.41651154]
[-105.69849396 -92.75277710]
[-113.36122894 -105.65499878]
[-120.10527039 -119.06031799]
[-125.89778137 -132.90342712]
[-130.71052551 -147.11686707]
[-134.52006531 -161.63142395]
[-137.30783081 -176.37635803]
[-139.06025696 -191.27984619]
[-139.76878357 -206.26925659]
[-139.42997742 -221.27159119]
[-138.04547119 -236.21374512]
[-135.62202454 -251.02291870]
[-132.17144775 -265.62695312]
[-127.71054840 -279.95474243]
[-122.26104736 -293.93643188]
[-115.84951019 -307.50390625]
[-108.50715637 -320.59112549]
[-100.26977539 -333.13424683]
[-91.17749023 -345.07220459]
[-81.27459717 -356.34686279]
[-70.60935211 -366.90322876]
[-59.23369980 -376.68994141]
[-47.20307159 -385.65924072]
[-34.57608032 -393.76751709]
[-21.41424179 -400.97518921]
[-7.78168011 -407.24719238]
[6.25518799 -412.55294800]
[20.62797546 -416.86660767]
[35.26665878 -420.16717529]
[50.09991837 -422.43853760]
[65.05548859 -423.66967773]
[80.06050873 -423.85452271]
[95.04187012 -422.99224854]
[109.92658234 -421.08700562]
[124.64213562 -418.14810181]
[139.11683655 -414.18984985]
[153.28016663 -409.23150635]
[167.06311035 -403.29727173]
[180.39852905 -396.41604614]
[193.22145081 -388.62133789]
[205.46939087 -379.95114136]
[217.08270264 -370.44769287]
[228.00479126 -360.15725708]
[238.18244934 -349.13003540]
[247.56608582 -337.41967773]
[256.10998535 -325.08331299]
[263.77255249 -312.18096924]
[270.51638794 -298.77554321]
[276.30871582 -284.93237305]
[281.12124634 -270.71884155]
[284.93057251 -256.20425415]
[287.71813965 -241.45927429]
[289.47033691 -226.55575562]
[290.17864990 -211.56632996]
[289.83963013 -196.56401062]
[288.45492554 -181.62187195]
[286.03128052 -166.81272888]
[282.58047485 -152.20874023]
[278.11935425 -137.88102722]
[272.66967773 -123.89941406]
[266.25793457 -110.33200836]
[258.91540527 -97.24491882]
[250.67784119 -84.70190430]
[241.58537292 -72.76406860]
[231.68232727 -61.48957062]
[221.01692200 -50.93334198]
[209.64112854 -41.14681625]
[197.61038208 -32.17766571]
[184.98327637 -24.06959152]
[171.82133484 -16.86209297]
[158.18867493 -10.59028912]
[144.15173340 -5.28473234]
[129.77888489 -0.97127223]
[115.14015198 2.32907677]
[100.30686188 4.60023546]
[101.53747559 19.54966927]
[102.76808929 34.49910355]
[103.99869537 49.44853973]
[107.70475769 55.89658737]
[105.09788513 64.71701813]
[106.02129364 79.68856812]
[106.94470978 94.66011810]
[109.11409760 96.89772797]
[110.49489594 99.99301910]
[110.76101685 103.64688873]
[109.70476532 107.44160461]
[107.27797699 110.88835144]
[107.12397766 125.88755798]
[107.12397766 140.88755798]
[107.12397766 155.88755798]
[107.12397766 170.88755798]
[107.12397766 185.88755798]
[107.12397766 200.88755798]
[107.12397766 215.88755798]
[107.12397766 230.88755798]
[107.12397766 245.88755798]
[107.12397766 260.88754272]
[121.73399353 264.62899780]
[134.95414734 271.88696289]
[145.95343018 282.20523071]
[154.04039001 294.93521118]
[158.70669556 309.27661133]
[159.65901184 324.32800293]
[156.83747864 339.14318848]
[150.41944885 352.79089355]
[140.80838013 364.41320801]
[128.60842896 373.27954102]
[114.58647919 378.83255005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 126]
[25 125]
[26 124]
[27 122]
[28 121]
[29 120]
[30 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
