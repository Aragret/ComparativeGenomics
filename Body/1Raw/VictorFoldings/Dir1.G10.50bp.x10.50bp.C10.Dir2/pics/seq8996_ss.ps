%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUUAUUAGGGGGGGGGGCCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCxxxxxxxxxxUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACCCCCCCCCCCUAUUUUUUA\
) } def
/len { sequence length } bind def

/coor [
[74.25817871 377.41345215]
[60.41224289 371.39743042]
[48.70357895 361.86801147]
[40.00105667 349.53234863]
[34.95045471 335.30581665]
[33.92656326 320.24414062]
[37.00535965 305.46496582]
[43.95838165 292.06506348]
[54.26966858 281.03872681]
[67.17404938 273.20419312]
[81.71393585 269.14288330]
[81.71393585 254.14289856]
[81.71393585 239.14289856]
[81.71393585 224.14289856]
[81.71393585 209.14289856]
[81.71393585 194.14289856]
[81.71393585 179.14289856]
[81.71393585 164.14289856]
[81.71393585 149.14289856]
[81.71393585 134.14289856]
[70.11259460 124.63453674]
[55.40463257 127.58001709]
[40.69667053 130.52549744]
[31.91961288 143.39410400]
[16.96168900 146.17172241]
[4.74753046 137.72483826]
[-9.96043110 140.67031860]
[-24.66839218 143.61579895]
[-39.37635422 146.56127930]
[-46.72077942 160.36683655]
[-61.24025345 166.17364502]
[-76.07912445 161.23988342]
[-84.23092651 147.89514160]
[-81.84664154 132.44039917]
[-70.05204010 122.17290497]
[-54.41617966 121.94065857]
[-42.32183838 131.85331726]
[-27.61387444 128.90783691]
[-12.90591335 125.96235657]
[1.80204785 123.01687622]
[9.82149696 110.51791382]
[24.69550323 107.32125854]
[37.75118637 115.81754303]
[52.45914841 112.87205505]
[67.16711426 109.92657471]
[66.37811279 101.49312592]
[67.68071747 93.28559875]
[70.91551208 85.80477905]
[75.80771637 79.48728943]
[81.98876953 74.68018341]
[89.02319336 71.62217712]
[96.43881989 70.43251038]
[103.75827789 71.10787201]
[110.52969360 73.52737427]
[119.54722595 61.54054260]
[128.56475830 49.55371094]
[117.41414642 39.50574875]
[107.19522095 28.51160622]
[97.98795319 16.65732765]
[89.86441040 4.03569078]
[82.88817596 -9.25451946]
[77.11383820 -23.10928917]
[72.58658600 -37.42018127]
[69.34187317 -52.07519531]
[67.40507507 -66.95963287]
[66.79135132 -81.95700073]
[67.50551605 -96.94991302]
[69.54197693 -111.82104492]
[72.88478851 -126.45399475]
[77.50778961 -140.73423767]
[83.37480927 -154.55001831]
[90.43991852 -167.79319763]
[98.64781952 -180.36013794]
[107.93428040 -192.15248108]
[118.22662354 -203.07792664]
[129.44429016 -213.05096436]
[141.49948120 -221.99356079]
[154.29785156 -229.83570862]
[167.73924255 -236.51603699]
[181.71844482 -241.98225403]
[196.12605286 -246.19158936]
[210.84930420 -249.11109924]
[225.77296448 -250.71792603]
[240.78024292 -250.99949646]
[255.75367737 -249.95361328]
[270.57608032 -247.58845520]
[285.13143921 -243.92253113]
[299.30584717 -238.98454285]
[312.98837280 -232.81312561]
[326.07189941 -225.45658875]
[338.45407104 -216.97250366]
[350.03793335 -207.42726135]
[360.73287964 -196.89558411]
[370.45513916 -185.45989990]
[379.12866211 -173.20970154]
[386.68557739 -160.24085999]
[393.06671143 -146.65489197]
[398.22213745 -132.55810547]
[402.11151123 -118.06085205]
[404.70437622 -103.27658081]
[405.98043823 -88.32099915]
[405.92974854 -73.31117249]
[404.55264282 -58.36455917]
[401.85992432 -43.59814453]
[397.87271118 -29.12749863]
[392.62213135 -15.06587505]
[386.14935303 -1.52332830]
[378.50497437 11.39415169]
[369.74887085 23.58546638]
[359.94955444 34.95520020]
[349.18371582 45.41436768]
[337.53558350 54.88111115]
[325.09640503 63.28133774]
[311.96343994 70.54930115]
[298.23953247 76.62812805]
[284.03210449 81.47023010]
[269.45230103 85.03771973]
[254.61424255 87.30266571]
[239.63407898 88.24735260]
[224.62905884 87.86438751]
[209.71658325 86.15675354]
[195.01339722 83.13783264]
[180.63456726 78.83123779]
[166.69261169 73.27068329]
[153.29667664 66.49968719]
[140.55158997 58.57123947]
[131.53405762 70.55807495]
[122.51652527 82.54490662]
[130.22250366 103.52018738]
[120.33617401 125.17640686]
[96.71393585 134.14289856]
[96.71393585 149.14289856]
[96.71393585 164.14289856]
[96.71393585 179.14289856]
[96.71393585 194.14289856]
[96.71393585 209.14289856]
[96.71393585 224.14289856]
[96.71393585 239.14289856]
[96.71393585 254.14289856]
[96.71393585 269.14288330]
[111.25382233 273.20419312]
[124.15820312 281.03872681]
[134.46948242 292.06506348]
[141.42251587 305.46496582]
[144.50131226 320.24414062]
[143.47741699 335.30581665]
[138.42681885 349.53234863]
[129.72428894 361.86801147]
[118.01562500 371.39743042]
[104.16969299 377.41345215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 45]
[22 44]
[23 43]
[26 40]
[27 39]
[28 38]
[29 37]
[54 128]
[55 127]
[56 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
