%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGGCUUUUGGGGGGGGGGUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUAGCCUCAUCxxxxxxxxxxUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUCCCCCCCCCCACCGGGUUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.44326782]
[71.19830322 381.42724609]
[59.48964310 371.89782715]
[50.78712082 359.56216431]
[45.73651886 345.33563232]
[44.71262741 330.27395630]
[47.79142761 315.49478149]
[54.74444962 302.09484863]
[65.05573273 291.06854248]
[77.96011353 283.23400879]
[92.50000000 279.17269897]
[92.50000000 264.17269897]
[92.50000000 249.17271423]
[92.50000000 234.17271423]
[92.50000000 219.17271423]
[92.50000000 204.17271423]
[92.50000000 189.17271423]
[92.50000000 174.17271423]
[92.50000000 159.17271423]
[92.50000000 144.17271423]
[75.74101257 137.66934204]
[62.88715744 125.10209656]
[49.23091888 131.30751038]
[35.57467651 137.51290894]
[21.91843605 143.71832275]
[12.82610130 157.36608887]
[-3.51981974 156.04589844]
[-10.30404568 141.11584473]
[-0.54754603 127.93469238]
[15.71302795 130.06207275]
[29.36927032 123.85666656]
[43.02550888 117.65126038]
[56.68175125 111.44585419]
[55.26696396 97.46350861]
[58.25327682 83.73072052]
[65.34687805 71.59860229]
[75.84986115 62.26077652]
[88.72887421 56.63595963]
[102.71680450 55.27755356]
[106.11978149 40.66865921]
[109.52275848 26.05976868]
[95.21416473 21.53292465]
[81.29938507 15.91087818]
[67.86212921 9.22744179]
[54.98319244 1.52281058]
[42.74003983 -7.15667820]
[31.20630074 -16.75882339]
[20.45134544 -27.22587776]
[10.53985214 -38.49489212]
[1.53143227 -50.49808502]
[-6.51973581 -63.16327286]
[-13.56523037 -76.41428375]
[-19.56267929 -90.17142487]
[-24.47601318 -104.35195923]
[-28.27568054 -118.87059784]
[-30.93883133 -133.64001465]
[-32.44944763 -148.57141113]
[-32.79844666 -163.57496643]
[-31.98372459 -178.56044006]
[-30.01018524 -193.43771362]
[-26.88969803 -208.11732483]
[-22.64102745 -222.51097107]
[-17.28972816 -236.53210449]
[-10.86798286 -250.09637451]
[-3.41441345 -263.12222290]
[5.02615261 -275.53128052]
[14.40295219 -287.24896240]
[24.65959167 -298.20477295]
[35.73438644 -308.33282471]
[47.56072998 -317.57217407]
[60.06749344 -325.86730957]
[73.17946625 -333.16830444]
[86.81777954 -339.43127441]
[100.90042114 -344.61853027]
[115.34268951 -348.69885254]
[130.05772400 -351.64776611]
[144.95703125 -353.44750977]
[159.95098877 -354.08721924]
[174.94944763 -353.56311035]
[189.86218262 -351.87826538]
[204.59951782 -349.04287720]
[219.07279968 -345.07397461]
[233.19500732 -339.99545288]
[246.88119507 -333.83779907]
[260.04907227 -326.63809204]
[272.61938477 -318.43963623]
[284.51660156 -309.29168701]
[295.66915894 -299.24932861]
[306.00994873 -288.37289429]
[315.47677612 -276.72787476]
[324.01275635 -264.38421631]
[331.56649780 -251.41621399]
[338.09262085 -237.90184021]
[343.55184937 -223.92239380]
[347.91134644 -209.56192017]
[351.14489746 -194.90679932]
[353.23306274 -180.04518127]
[354.16326904 -165.06642151]
[353.92993164 -150.06063843]
[352.53445435 -135.11804199]
[349.98522949 -120.32852936]
[346.29760742 -105.78102875]
[341.49371338 -91.56304932]
[335.60250854 -77.76008606]
[328.65936279 -64.45515442]
[320.70605469 -51.72827911]
[311.79043579 -39.65600204]
[301.96609497 -28.31092072]
[291.29214478 -17.76127243]
[279.83276367 -8.07050514]
[267.65689087 0.70310229]
[254.83773804 8.50678158]
[241.45239258 15.29360008]
[227.58137512 21.02274132]
[213.30809021 25.65974808]
[198.71839905 29.17673492]
[183.90003967 31.55254555]
[168.94212341 32.77289581]
[153.93463135 32.83044434]
[138.96780396 31.72484398]
[124.13165283 29.46274567]
[120.72867584 44.07164001]
[117.32569885 58.68053055]
[129.51292419 66.28849030]
[138.66561890 77.36267090]
[143.84269714 90.76442719]
[144.51187134 105.11579132]
[140.60432434 118.94114685]
[132.52183533 130.81896973]
[121.09543610 139.52796936]
[107.50000000 144.17271423]
[107.50000000 159.17271423]
[107.50000000 174.17271423]
[107.50000000 189.17271423]
[107.50000000 204.17271423]
[107.50000000 219.17271423]
[107.50000000 234.17271423]
[107.50000000 249.17271423]
[107.50000000 264.17269897]
[107.50000000 279.17269897]
[122.03988647 283.23400879]
[134.94427490 291.06854248]
[145.25555420 302.09484863]
[152.20857239 315.49478149]
[155.28736877 330.27395630]
[154.26348877 345.33563232]
[149.21287537 359.56216431]
[140.51036072 371.89782715]
[128.80169678 381.42724609]
[114.95575714 387.44326782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 33]
[23 32]
[24 31]
[25 30]
[39 123]
[40 122]
[41 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
