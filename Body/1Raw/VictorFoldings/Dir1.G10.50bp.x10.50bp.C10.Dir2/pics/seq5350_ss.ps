%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACUACUACCGCAUGGGGGGGGGGUCCUACUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCxxxxxxxxxxUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACCCCCCCCCCCUAAAUACUACCGUAU\
) } def
/len { sequence length } bind def

/coor [
[87.04087067 570.44769287]
[72.54173279 566.44586182]
[58.99024582 559.91918945]
[46.82204056 551.07757568]
[36.42827225 540.20513916]
[28.14305687 527.65148926]
[22.23273087 513.82006836]
[18.88728523 499.15557861]
[18.21426392 484.12936401]
[20.23530006 469.22448730]
[24.88542747 454.92007446]
[32.01516342 441.67596436]
[41.39531708 429.91787720]
[52.72434998 420.02380371]
[65.63809204 412.31179810]
[79.72140503 407.02975464]
[94.52158356 404.34747314]
[94.52158356 389.34747314]
[94.52158356 374.34747314]
[94.52158356 359.34747314]
[94.52158356 344.34747314]
[94.52158356 329.34747314]
[94.52158356 314.34747314]
[94.52158356 299.34747314]
[94.52158356 284.34747314]
[94.52158356 269.34747314]
[94.52158356 254.34747314]
[79.59487152 249.67489624]
[66.82247162 240.61328125]
[57.45779037 228.03720093]
[52.42433929 213.16682434]
[52.22468567 197.44952393]
[56.89028168 182.41902161]
[65.97724152 169.54571533]
[78.60853577 160.09283447]
[93.55863953 154.99249268]
[93.26955414 139.99526978]
[92.98046875 124.99806213]
[74.97459412 106.92140961]
[81.13294220 82.16152191]
[73.67471313 69.14711761]
[66.21647644 56.13271332]
[52.64172745 48.00641632]
[53.02662277 33.11678314]
[45.56838989 20.10237694]
[38.11015701 7.08797169]
[30.65192413 -5.92643404]
[16.66562462 -0.43086684]
[2.02818823 2.96962428]
[-12.94838428 4.20255756]
[-27.94486809 3.24165297]
[-42.64161301 0.10739202]
[-56.72535324 -5.13341808]
[-69.89589691 -12.36906910]
[-81.87251282 -21.44533348]
[-92.39990997 -32.16874695]
[-101.25371552 -44.31074524]
[-108.24519348 -57.61251450]
[-113.22531891 -71.79053497]
[-116.08795166 -86.54258728]
[-116.77207184 -101.55424500]
[-115.26309204 -116.50553131]
[-111.59317780 -131.07774353]
[-105.84055328 -144.96029663]
[-98.12783813 -157.85726929]
[-88.61943054 -169.49375916]
[-77.51799774 -179.62174988]
[-65.06017303 -188.02534485]
[-51.51149368 -194.52543640]
[-37.16074753 -198.98345947]
[-22.31382751 -201.30439758]
[-7.28719091 -201.43878174]
[7.59886599 -199.38374329]
[22.02704620 -195.18309021]
[35.68981171 -188.92636108]
[48.29594040 -180.74691772]
[59.57673264 -170.81909180]
[69.29174042 -159.35452271]
[77.23387909 -146.59754944]
[83.23386383 -132.82009888]
[87.16381073 -118.31584930]
[88.93994904 -103.39395142]
[88.52442169 -88.37245941]
[85.92608643 -73.57156372]
[81.20032501 -59.30674362]
[74.44786072 -45.88206100]
[65.81263733 -33.58366013]
[55.47870255 -22.67367744]
[43.66632843 -13.38466740]
[51.12456131 -0.37026110]
[58.58279419 12.64414501]
[66.04103088 25.65855026]
[79.08231354 32.85396957]
[79.23088837 48.67448044]
[86.68911743 61.68888474]
[94.14735413 74.70329285]
[100.55133057 74.04093933]
[106.92140961 74.97459412]
[112.86594391 77.44685364]
[118.01946259 81.30572510]
[131.10513306 73.97325134]
[144.19081116 66.64078522]
[157.27648926 59.30831146]
[170.36215210 51.97583771]
[171.19149780 36.57078171]
[180.23629761 24.07298279]
[194.61041260 18.47044182]
[209.72711182 21.55090904]
[220.76269531 32.33142090]
[224.19575500 47.37195206]
[218.93083191 61.87312698]
[206.64791870 71.20767212]
[191.26646423 72.39696503]
[177.69462585 65.06151581]
[164.60896301 72.39398193]
[151.52328491 79.72645569]
[138.43760681 87.05892944]
[125.35193634 94.39139557]
[125.95451355 100.73506165]
[124.99386597 107.03444672]
[122.52786255 112.91016388]
[118.70502472 118.00830078]
[113.75559998 122.02182007]
[107.97768402 124.70897675]
[108.26676941 139.70619202]
[108.55585480 154.70339966]
[122.42985535 158.63929749]
[134.61514282 166.32293701]
[144.12544250 177.12178040]
[150.19398499 190.15155029]
[152.33534241 204.34869385]
[150.38426208 218.55714417]
[144.50834656 231.62248230]
[135.19371033 242.48574829]
[123.20478058 250.26925659]
[109.52158356 254.34747314]
[109.52158356 269.34747314]
[109.52158356 284.34747314]
[109.52158356 299.34747314]
[109.52158356 314.34747314]
[109.52158356 329.34747314]
[109.52158356 344.34747314]
[109.52158356 359.34747314]
[109.52158356 374.34747314]
[109.52158356 389.34747314]
[109.52158356 404.34747314]
[124.32175446 407.02975464]
[138.40507507 412.31179810]
[151.31880188 420.02380371]
[162.64784241 429.91787720]
[172.02799988 441.67596436]
[179.15773010 454.92007446]
[183.80786133 469.22448730]
[185.82890320 484.12936401]
[185.15586853 499.15557861]
[181.81042480 513.82006836]
[175.90010071 527.65148926]
[167.61488342 540.20513916]
[157.22111511 551.07757568]
[145.05291748 559.91918945]
[131.50143433 566.44586182]
[117.00228882 570.44769287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
[36 126]
[37 125]
[38 124]
[40 96]
[41 95]
[42 94]
[44 92]
[45 91]
[46 90]
[47 89]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
