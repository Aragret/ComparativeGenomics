%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCAUCUUCAGGGGGGGGGGGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACxxxxxxxxxxACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACCCCCCCCCCCGCCUUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[82.35876465 523.14056396]
[68.33681488 517.58758545]
[56.13685989 508.72125244]
[46.52578735 497.09893799]
[40.10776520 483.45123291]
[37.28622818 468.63604736]
[38.23854065 453.58468628]
[42.90484619 439.24325562]
[50.99181366 426.51330566]
[61.99108887 416.19500732]
[75.21125031 408.93704224]
[89.82125854 405.19561768]
[89.82125854 390.19561768]
[89.82125854 375.19561768]
[89.82125854 360.19561768]
[89.82125854 345.19561768]
[89.82125854 330.19561768]
[89.82125854 315.19561768]
[89.82125854 300.19561768]
[89.82125854 285.19561768]
[89.82125854 270.19561768]
[76.63311768 265.30743408]
[65.88928986 256.18414307]
[58.89884186 243.91052246]
[56.52266312 229.95672607]
[59.06752014 216.00228882]
[66.24662018 203.73391724]
[77.21175385 194.64163208]
[90.65349579 189.83779907]
[83.17913818 176.95434570]
[91.19815063 163.31594849]
[91.50612640 148.31910706]
[91.81410980 133.32228088]
[92.12208557 118.32543945]
[80.13808441 101.84047699]
[88.88893127 83.43415070]
[85.83053589 68.74925232]
[82.77214050 54.06435776]
[67.85699463 55.75645447]
[52.84935379 56.06512451]
[37.87725067 54.98773575]
[23.06842804 52.53347397]
[8.54923153 48.72328186]
[-5.55646372 43.58966446]
[-19.12831116 37.17642593]
[-32.05051422 29.53828239]
[-44.21282959 20.74039650]
[-55.51148224 10.85783386]
[-65.85008240 -0.02508971]
[-75.14041901 -11.81552315]
[-83.30322266 -24.41287231]
[-90.26885986 -37.70965958]
[-95.97789764 -51.59243774]
[-100.38162231 -65.94276428]
[-103.44246674 -80.63819885]
[-105.13431549 -95.55337524]
[-105.44274139 -110.56101990]
[-104.36509705 -125.53310394]
[-101.91059113 -140.34188843]
[-98.10015869 -154.86102295]
[-92.96630859 -168.96662903]
[-86.55284119 -182.53837585]
[-78.91448212 -195.46044922]
[-70.11639404 -207.62261963]
[-60.23364258 -218.92111206]
[-49.35054779 -229.25952148]
[-37.55995941 -238.54966736]
[-24.96247101 -246.71226501]
[-11.66556835 -253.67767334]
[2.21730566 -259.38647461]
[16.56770515 -263.78997803]
[31.26319313 -266.85055542]
[46.17839050 -268.54217529]
[61.18604279 -268.85034180]
[76.15811157 -267.77246094]
[90.96685028 -265.31768799]
[105.48592377 -261.50701904]
[119.59144592 -256.37292480]
[133.16308594 -249.95924377]
[146.08503723 -242.32066345]
[158.24705505 -233.52236938]
[169.54537964 -223.63943481]
[179.88360596 -212.75616455]
[189.17355347 -200.96542358]
[197.33593750 -188.36779785]
[204.30113220 -175.07078552]
[210.00970459 -161.18782043]
[214.41294861 -146.83734131]
[217.47331238 -132.14179993]
[219.16467285 -117.22657776]
[219.47257996 -102.21891785]
[218.39443970 -87.24687195]
[215.93943787 -72.43817139]
[212.12852478 -57.91916275]
[206.99420166 -43.81372452]
[200.58029175 -30.24219704]
[192.94149780 -17.32037354]
[184.14300537 -5.15850067]
[174.25987244 6.13966036]
[163.37643433 16.47771454]
[151.58554077 25.76745987]
[138.98777771 33.92963791]
[125.69064331 40.89461136]
[111.80757904 46.60295105]
[97.45703888 51.00596237]
[100.51543427 65.69085693]
[103.57382965 80.37575531]
[112.18354797 84.20619202]
[118.07414246 91.56148529]
[133.05438232 90.79182434]
[148.03462219 90.02217102]
[161.49554443 80.65544128]
[176.22074890 87.87351227]
[177.06219482 104.25106049]
[163.15428162 112.94026184]
[148.80429077 105.00241089]
[133.82405090 105.77207184]
[118.84380341 106.54172516]
[114.32019806 113.88578796]
[107.11891937 118.63341522]
[106.81094360 133.63024902]
[106.50296783 148.62709045]
[106.19499207 163.62393188]
[113.64731598 177.58004761]
[105.65032959 190.14578247]
[120.39260864 196.48977661]
[131.55403137 207.96893311]
[137.45343018 222.81195068]
[137.21844482 238.74418640]
[130.91436768 253.33615112]
[119.52968597 264.37405396]
[104.82125854 270.19561768]
[104.82125854 285.19561768]
[104.82125854 300.19561768]
[104.82125854 315.19561768]
[104.82125854 330.19561768]
[104.82125854 345.19561768]
[104.82125854 360.19561768]
[104.82125854 375.19561768]
[104.82125854 390.19561768]
[104.82125854 405.19561768]
[119.43127441 408.93704224]
[132.65142822 416.19500732]
[143.65071106 426.51330566]
[151.73767090 439.24325562]
[156.40397644 453.58468628]
[157.35629272 468.63604736]
[154.53475952 483.45123291]
[148.11672974 497.09893799]
[138.50566101 508.72125244]
[126.30570221 517.58758545]
[112.28376007 523.14056396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[29 125]
[31 123]
[32 122]
[33 121]
[34 120]
[36 107]
[37 106]
[38 105]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
