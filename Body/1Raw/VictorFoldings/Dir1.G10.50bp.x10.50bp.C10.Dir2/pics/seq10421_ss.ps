%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAACAUAGGGGGGGGGGCUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGxxxxxxxxxxAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACCCCCCCCCCCACUCAACAGA\
) } def
/len { sequence length } bind def

/coor [
[165.34411621 472.89178467]
[152.12391663 465.61932373]
[141.23712158 455.17233276]
[133.42597961 442.26309204]
[129.22309875 427.77175903]
[128.91502380 412.68643188]
[132.52276611 398.03558350]
[139.80033875 384.81820679]
[150.25155640 373.93545532]
[163.16381836 366.12930298]
[177.65675354 361.93200684]
[177.34469604 346.93524170]
[177.03263855 331.93850708]
[176.72058105 316.94174194]
[176.40852356 301.94500732]
[176.09646606 286.94824219]
[175.78440857 271.95147705]
[175.47235107 256.95474243]
[175.16030884 241.95797729]
[174.84825134 226.96122742]
[169.94670105 212.78466797]
[160.92916870 200.79783630]
[156.34855652 199.25070190]
[152.71867371 194.77239990]
[151.79821777 188.11955261]
[143.28712463 175.76799011]
[128.63777161 173.33241272]
[119.83036804 160.92739868]
[122.48435211 145.57832336]
[113.97326660 133.22674561]
[105.46217346 120.87517548]
[96.95108795 108.52360535]
[93.22158051 107.28779602]
[90.07208252 104.38497162]
[88.24710083 100.12027740]
[88.32271576 95.12547302]
[74.58384705 87.27983093]
[74.66269684 72.38543701]
[66.93861389 59.52703476]
[59.21452713 46.66863251]
[51.49044037 33.81023026]
[37.25021362 38.68821716]
[22.31276131 40.49798203]
[7.33129978 39.16283798]
[-7.03953648 34.74356461]
[-20.17230225 27.43565559]
[-31.49414062 17.56067085]
[-40.51176071 5.55208349]
[-46.83294296 -8.06374073]
[-50.18359375 -22.69062042]
[-50.41962051 -37.68866348]
[-47.53313446 -52.40225601]
[-41.65270233 -66.18872070]
[-33.03759003 -78.44640350]
[-22.06636238 -88.64090729]
[-29.79044724 -101.49931335]
[-43.52931595 -109.34495544]
[-43.45046234 -124.23934937]
[-51.17454910 -137.09774780]
[-66.56767273 -140.67926025]
[-74.84870148 -154.14031982]
[-71.10463715 -169.49472046]
[-57.55677795 -177.63296509]
[-42.24282455 -173.72677612]
[-34.24826813 -160.09364319]
[-38.31614685 -144.82183838]
[-30.59206009 -131.96343994]
[-17.40567017 -125.03751373]
[-16.93204498 -109.22339630]
[-9.20796013 -96.36499786]
[4.94506407 -101.26271057]
[19.81293297 -103.11133575]
[34.74606323 -101.82764435]
[49.09150696 -97.46532440]
[62.22150803 -90.21273804]
[73.56097412 -80.38476562]
[82.61264801 -68.40915680]
[88.97893524 -54.80790710]
[92.37937164 -40.17450714]
[92.66293335 -25.14804077]
[89.81481171 -10.38528061]
[83.95709991 3.46802402]
[75.34361267 15.80538750]
[64.34884644 26.08614349]
[72.07292938 38.94454575]
[79.79701233 51.80294800]
[87.52110291 64.66135406]
[100.70748901 71.58727264]
[101.18111420 87.40139008]
[109.30265808 100.01251221]
[117.81374359 112.36408997]
[126.32483673 124.71566010]
[134.83592224 137.06723022]
[150.12391663 140.05303955]
[158.57942200 152.70053101]
[155.63870239 167.25689697]
[164.14979553 179.60847473]
[172.91600037 191.78030396]
[181.93353271 203.76713562]
[180.72407532 188.81597900]
[182.39927673 173.90982056]
[186.89715576 159.60006714]
[194.05133057 146.41606140]
[203.59716797 134.84553528]
[215.18151855 125.31649017]
[228.37586975 118.18141937]
[242.69212341 113.70428467]
[257.60070801 112.05068970]
[272.55007935 113.28180695]
[286.98730469 117.35209656]
[300.37823486 124.11099243]
[312.22756958 133.30847168]
[322.09692383 144.60427856]
[329.62127686 157.58058167]
[334.52221680 171.75735474]
[336.61849976 186.61015320]
[335.83255005 201.58953857]
[332.19345093 216.14141846]
[325.83581543 229.72746277]
[316.99481201 241.84509277]
[305.99752808 252.04606628]
[293.25076294 259.95300293]
[279.22604370 265.27343750]
[264.44216919 267.81054688]
[249.44601440 267.47045898]
[234.79234314 264.26574707]
[221.02322388 258.31500244]
[208.64801025 249.83834839]
[198.12446594 239.14932251]
[189.84500122 226.64916992]
[190.15705872 241.64591980]
[190.46911621 256.64266968]
[190.78117371 271.63943481]
[191.09323120 286.63619995]
[191.40527344 301.63293457]
[191.71733093 316.62969971]
[192.02938843 331.62643433]
[192.34144592 346.62319946]
[192.65350342 361.61996460]
[207.30850220 365.21072388]
[220.53430176 372.47299194]
[231.42916870 382.91156006]
[239.25027466 395.81478882]
[243.46434021 410.30285645]
[243.78405762 425.38793945]
[240.18763733 440.04156494]
[232.92027283 453.26455688]
[222.47747803 464.15539551]
[209.57124329 471.97149658]
[195.08155823 476.17999268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 99]
[22 98]
[25 97]
[26 96]
[29 93]
[30 92]
[31 91]
[32 90]
[36 89]
[38 87]
[39 86]
[40 85]
[41 84]
[55 70]
[56 69]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
