%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCUACACGGGGGGGGGGAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAxxxxxxxxxxAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCACCCCCCCCCCAACUCUACUC\
) } def
/len { sequence length } bind def

/coor [
[67.67710876 361.42892456]
[54.45691299 354.15646362]
[43.57011032 343.70947266]
[35.75897980 330.80020142]
[31.55609894 316.30889893]
[31.24802589 301.22354126]
[34.85576630 286.57272339]
[42.13333893 273.35534668]
[52.58454895 262.47256470]
[65.49681091 254.66642761]
[79.98974609 250.46914673]
[79.67768860 235.47239685]
[79.36563110 220.47563171]
[79.05358124 205.47888184]
[78.74152374 190.48213196]
[78.42946625 175.48538208]
[78.11740875 160.48861694]
[77.80535126 145.49186707]
[77.49329376 130.49511719]
[67.62757111 119.19611359]
[52.80981445 116.86500549]
[37.99205780 114.53390503]
[23.17429924 112.20279694]
[8.35654068 109.87169647]
[3.47816801 124.09746552]
[-3.79653692 137.25990295]
[-13.24650383 148.95901489]
[-24.58455849 158.83927917]
[-37.46614838 166.60044861]
[-51.49982071 172.00666809]
[-66.25910950 174.89364624]
[-81.29548645 175.17364502]
[-96.15202332 172.83816528]
[-110.37724304 167.95817566]
[-123.53885651 160.68197632]
[-135.23689270 151.23068237]
[-145.11587524 139.89151001]
[-152.87557983 127.00904083]
[-158.28021240 112.97475433]
[-161.16551208 98.21514130]
[-161.44380188 83.17873383]
[-159.10664368 68.32246399]
[-154.22503662 54.09779739]
[-146.94735718 40.93700790]
[-137.49473572 29.24003792]
[-126.15443420 19.36234474]
[-113.27108765 11.60410023]
[-99.23619080 6.20106840]
[-84.47624969 3.31744099]
[-69.43980408 3.04084826]
[-54.58379745 5.37969589]
[-40.35968781 10.26290894]
[-27.19972420 17.54209137]
[-15.50382710 26.99603844]
[-5.62742043 38.33745193]
[2.12936354 51.22168350]
[7.53080368 65.25719452]
[10.41275787 80.01746368]
[10.68764496 95.05393982]
[25.50540352 97.38504028]
[40.32316208 99.71614075]
[55.14091873 102.04724884]
[69.95867920 104.37834930]
[99.56957245 75.68408966]
[106.75207520 62.51550674]
[113.93458557 49.34692383]
[121.11709595 36.17834091]
[128.29960632 23.00975990]
[135.48211670 9.84117794]
[123.64612579 0.56975132]
[113.49771118 -10.52346706]
[105.31372070 -23.13584518]
[99.31741333 -36.92330933]
[95.67237854 -51.50972748]
[94.47805023 -66.49716949]
[95.76702118 -81.47676849]
[99.50411987 -96.03987122]
[105.58739471 -109.78918457]
[113.85089111 -122.34961700]
[124.06917572 -133.37850952]
[135.96348572 -142.57499695]
[149.20933533 -149.68817139]
[163.44537354 -154.52398682]
[178.28321838 -156.95053101]
[193.31809998 -156.90159607]
[208.13983154 -154.37852478]
[222.34408569 -149.45013428]
[235.54336548 -142.25090027]
[247.37756348 -132.97718811]
[257.52383423 -121.88201904]
[265.70541382 -109.26805878]
[271.69906616 -95.47943878]
[275.34127808 -80.89231873]
[276.53271484 -65.90464783]
[275.24087524 -50.92529678]
[271.50094604 -36.36291504]
[265.41503906 -22.61477470]
[257.14910889 -10.05593395]
[246.92871094 0.97099066]
[235.03262329 10.16517735]
[221.78540039 17.27580261]
[207.54843140 22.10888290]
[192.71011353 24.53256798]
[177.67524719 24.48073959]
[162.85400391 21.95480919]
[148.65069580 17.02368736]
[141.46818542 30.19226837]
[134.28567505 43.36085129]
[127.10317230 56.52943420]
[119.92066193 69.69801331]
[112.73815155 82.86660004]
[118.94355774 96.52284241]
[133.58706665 99.77366638]
[148.23056030 103.02449036]
[162.87406921 106.27531433]
[176.06944275 97.57717896]
[191.53346252 100.83899689]
[200.09161377 114.12559509]
[196.66647339 129.55427551]
[183.29013062 137.97146606]
[167.89852905 134.38340759]
[159.62322998 120.91881561]
[144.97973633 117.66799164]
[130.33622742 114.41716766]
[115.69273376 111.16634369]
[109.89205933 115.92052460]
[122.52005005 124.01583099]
[118.72319031 138.52734375]
[103.74863434 139.40058899]
[98.29071808 125.42887878]
[92.49005127 130.18305969]
[92.80210876 145.17980957]
[93.11416626 160.17655945]
[93.42621613 175.17332458]
[93.73827362 190.17007446]
[94.05033112 205.16682434]
[94.36238861 220.16357422]
[94.67444611 235.16033936]
[94.98650360 250.15708923]
[109.64149475 253.74786377]
[122.86730194 261.01010132]
[133.76217651 271.44869995]
[141.58326721 284.35192871]
[145.79733276 298.83999634]
[146.11706543 313.92507935]
[142.52062988 328.57867432]
[135.25326538 341.80169678]
[124.81047058 352.69253540]
[111.90423584 360.50863647]
[97.41454315 364.71713257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[69 106]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
