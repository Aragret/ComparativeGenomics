%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUGUCUGGGGGGGGGGUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUxxxxxxxxxxCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCCCCCCCCCCCACCCCAGUCU\
) } def
/len { sequence length } bind def

/coor [
[85.71672058 380.68133545]
[73.83245087 371.40621948]
[64.51374054 359.55612183]
[58.30237579 345.81994629]
[55.55947113 330.99630737]
[56.44449997 315.94705200]
[60.90600967 301.54711914]
[68.68460846 288.63366699]
[79.32805634 277.95751953]
[92.21756744 270.13934326]
[106.60375214 265.63366699]
[105.66812897 250.66287231]
[104.73249817 235.69209290]
[103.79686737 220.72129822]
[102.86123657 205.75050354]
[101.92561340 190.77970886]
[100.98998260 175.80891418]
[100.05435181 160.83813477]
[99.11872864 145.86734009]
[98.18309784 130.89654541]
[81.67255402 122.61874390]
[73.69671631 107.21123505]
[76.14710236 91.16696167]
[86.79463196 80.44298553]
[82.78689575 65.98829651]
[69.04790497 63.18008423]
[57.92080688 54.75519180]
[51.55221939 42.41071701]
[51.13965988 28.59270477]
[56.70677948 16.01151657]
[67.10995483 7.11020184]
[63.40379333 -7.42473459]
[59.69763184 -21.95967102]
[55.99147034 -36.49460602]
[30.02346039 -47.52038956]
[21.03764343 -73.91009521]
[6.71504641 -78.36691284]
[-7.60755062 -82.82373047]
[-21.93014717 -87.28054047]
[-36.29833221 -91.58812714]
[-50.71054840 -95.74601746]
[-64.42277527 -87.88787842]
[-79.65323639 -92.10791779]
[-87.36595917 -105.90246582]
[-82.98513031 -121.08744812]
[-69.10980988 -128.65390015]
[-53.97198868 -124.11277008]
[-46.55266190 -110.15823364]
[-32.14044571 -106.00034332]
[-24.79441452 -107.17572021]
[-17.47333145 -101.60314178]
[-3.15073514 -97.14632416]
[11.17186260 -92.68950653]
[25.49445915 -88.23269653]
[31.20150948 -95.55982208]
[38.68101501 -101.06565857]
[47.37293625 -104.33792877]
[47.37293625 -119.33792877]
[47.37293625 -134.33793640]
[47.37293625 -149.33793640]
[32.61175919 -152.26945496]
[18.70623970 -158.02468872]
[6.19087267 -166.38243103]
[-4.45328569 -177.02142334]
[-12.81710243 -189.53273010]
[-18.57909393 -203.43545532]
[-21.51778603 -218.19520569]
[-21.52022171 -233.24467468]
[-18.58630753 -248.00537109]
[-12.82881737 -261.90997314]
[-4.46905136 -274.42398071]
[6.17166233 -285.06640625]
[18.68432236 -293.42819214]
[32.58797836 -299.18792725]
[47.34820557 -302.12423706]
[62.39766693 -302.12423706]
[77.15789795 -299.18792725]
[91.06154633 -293.42819214]
[103.57421112 -285.06640625]
[114.21492767 -274.42398071]
[122.57469177 -261.90997314]
[128.33218384 -248.00537109]
[131.26609802 -233.24467468]
[131.26365662 -218.19520569]
[128.32496643 -203.43545532]
[122.56297302 -189.53273010]
[114.19915771 -177.02142334]
[103.55500031 -166.38243103]
[91.03963470 -158.02468872]
[77.13411713 -152.26945496]
[62.37293625 -149.33793640]
[62.37293625 -134.33793640]
[62.37293625 -119.33792877]
[62.37293625 -104.33792877]
[69.53618622 -101.92858124]
[76.00376129 -97.98673248]
[81.45184326 -92.70117188]
[85.60578156 -86.32817841]
[88.25390625 -79.17906189]
[89.25834656 -71.60501099]
[88.56214142 -63.97981262]
[86.19245148 -56.68140793]
[82.25956726 -50.07316589]
[76.95177460 -44.48578644]
[70.52640533 -40.20076752]
[74.23256683 -25.66583252]
[77.93872833 -11.13089561]
[81.64488983 3.40404034]
[97.27738953 7.37600231]
[108.85339355 18.74166107]
[113.16078949 34.47939682]
[108.93801117 50.33700562]
[97.24158478 61.98055649]
[101.24932098 76.43524170]
[121.74776459 83.54096985]
[130.18948364 106.81858826]
[144.31428528 111.86734009]
[158.43908691 116.91609955]
[172.61476135 109.92856598]
[187.55233765 115.09039307]
[194.38960266 129.33915710]
[189.07014465 144.22131348]
[174.74987793 150.90756226]
[159.92478943 145.43104553]
[153.39033508 131.04089355]
[139.26551819 125.99214172]
[125.14072418 120.94338989]
[113.15389252 129.96092224]
[114.08951569 144.93170166]
[115.02514648 159.90249634]
[115.96077728 174.87329102]
[116.89640045 189.84408569]
[117.83203125 204.81488037]
[118.76766205 219.78565979]
[119.70328522 234.75645447]
[120.63891602 249.72724915]
[121.57454681 264.69802856]
[136.40977478 267.37747192]
[150.17240906 273.52996826]
[162.06230164 282.79785156]
[171.38819885 294.64233398]
[177.60789490 308.37472534]
[180.35977173 323.19668579]
[179.48387146 338.24649048]
[175.03109741 352.64910889]
[167.26033020 365.56726074]
[156.62335205 376.24987793]
[143.73858643 384.07586670]
[129.35513306 388.59027100]
[114.30922699 389.53057861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[24 114]
[25 113]
[31 108]
[32 107]
[33 106]
[34 105]
[36 54]
[37 53]
[38 52]
[39 51]
[40 49]
[41 48]
[57 94]
[58 93]
[59 92]
[60 91]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
