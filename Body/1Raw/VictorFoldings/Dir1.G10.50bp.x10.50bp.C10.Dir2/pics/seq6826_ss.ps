%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCUAUUCGGGGGGGGGGUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGxxxxxxxxxxAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUCCCCCCCCCCACACCUAUCC\
) } def
/len { sequence length } bind def

/coor [
[74.23650360 407.90447998]
[60.39056396 401.88845825]
[48.68190002 392.35903931]
[39.97937775 380.02337646]
[34.92877579 365.79684448]
[33.90488434 350.73516846]
[36.98368454 335.95602417]
[43.93670654 322.55609131]
[54.24798965 311.52975464]
[67.15236664 303.69525146]
[81.69225311 299.63394165]
[81.69225311 284.63394165]
[81.69225311 269.63394165]
[81.69225311 254.63394165]
[81.69225311 239.63394165]
[81.69225311 224.63394165]
[81.69225311 209.63394165]
[81.69225311 194.63394165]
[81.69225311 179.63394165]
[81.69225311 164.63394165]
[81.53621674 149.63475037]
[81.22416687 134.63798523]
[80.91210938 119.64123535]
[87.45800781 89.22599030]
[83.45027161 74.77130127]
[79.44252777 60.31661224]
[75.43479156 45.86192322]
[71.42704773 31.40723419]
[67.41930389 16.95254517]
[63.41156769 2.49785686]
[49.19779587 1.16762388]
[36.32338715 -4.93131161]
[26.33266258 -15.04471874]
[20.41626167 -27.93820000]
[19.26929474 -42.04784393]
[23.00971794 -55.66989899]
[31.16657639 -67.16651917]
[42.73918533 -75.16268158]
[39.03302383 -89.69761658]
[35.32686234 -104.23255157]
[22.16479492 -117.06765747]
[27.48946190 -133.76040649]
[23.48172188 -148.21508789]
[19.47398186 -162.66978455]
[15.46624184 -177.12446594]
[0.59719217 -174.99382019]
[-14.42224598 -174.78211975]
[-29.34543800 -176.49285889]
[-43.92733383 -180.09794617]
[-57.92848587 -185.53816223]
[-71.11898041 -192.72421265]
[-83.28221893 -201.53805542]
[-94.21846771 -211.83499146]
[-103.74815369 -223.44590759]
[-111.71477509 -236.18016052]
[-117.98751831 -249.82864380]
[-122.46338654 -264.16723633]
[-125.06887817 -278.96044922]
[-125.76119995 -293.96542358]
[-124.52899933 -308.93572998]
[-121.39249420 -323.62554932]
[-116.40319824 -337.79364014]
[-109.64304352 -351.20739746]
[-101.22302246 -363.64651489]
[-91.28141785 -374.90673828]
[-79.98146820 -384.80319214]
[-67.50873566 -393.17330933]
[-54.06802368 -399.87969971]
[-39.88005066 -404.81222534]
[-25.17779350 -407.88989258]
[-10.20267487 -409.06213379]
[4.79939890 -408.30972290]
[19.58208084 -405.64501953]
[33.90262604 -401.11175537]
[47.52587509 -394.78442383]
[60.22812653 -386.76687622]
[71.80079651 -377.19076538]
[82.05384827 -366.21337891]
[90.81891632 -354.01492310]
[97.95207977 -340.79577637]
[103.33619690 -326.77294922]
[106.88285828 -312.17672729]
[108.53382874 -297.24679565]
[108.26198578 -282.22833252]
[106.07180786 -267.36791992]
[101.99925232 -252.90962219]
[96.11119080 -239.09083557]
[88.50431824 -226.13847351]
[79.30354309 -214.26521301]
[68.65994263 -203.66606140]
[56.74831009 -194.51502991]
[43.76423645 -186.96240234]
[29.92093086 -181.13220215]
[33.92866898 -166.67752075]
[37.93640900 -152.22283936]
[41.94415283 -137.76814270]
[52.34297562 -131.50941467]
[55.77437973 -119.44937134]
[49.86180115 -107.93871307]
[53.56796265 -93.40377808]
[57.27412033 -78.86884308]
[72.96357727 -76.86242676]
[86.72177887 -68.98114014]
[96.43614960 -56.40121841]
[100.60208893 -41.02291489]
[98.55590820 -25.18349838]
[90.58042908 -11.30202293]
[77.86625671 -1.50988352]
[81.87399292 12.94480515]
[85.88173676 27.39949417]
[89.88947296 41.85418320]
[93.89721680 56.30886841]
[97.90496063 70.76355743]
[101.91269684 85.21824646]
[112.35250854 95.98905945]
[126.67510986 100.44586945]
[140.99771118 104.90268707]
[154.87043762 97.33151245]
[170.00981140 101.86749268]
[177.43388367 115.81950378]
[172.73809814 130.91006470]
[158.70837402 138.18621826]
[143.66830444 133.33114624]
[136.54089355 119.22528076]
[122.21829224 114.76847076]
[107.89569092 110.31165314]
[95.90885925 119.32918549]
[96.22091675 134.32594299]
[96.53297424 149.32269287]
[99.85783386 157.90156555]
[96.69225311 164.63394165]
[96.69225311 179.63394165]
[96.69225311 194.63394165]
[96.69225311 209.63394165]
[96.69225311 224.63394165]
[96.69225311 239.63394165]
[96.69225311 254.63394165]
[96.69225311 269.63394165]
[96.69225311 284.63394165]
[96.69225311 299.63394165]
[111.23214722 303.69525146]
[124.13652802 311.52975464]
[134.44781494 322.55609131]
[141.40083313 335.95602417]
[144.47962952 350.73516846]
[143.45573425 365.79684448]
[138.40513611 380.02337646]
[129.70260620 392.35903931]
[117.99394989 401.88845825]
[104.14801025 407.90447998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 127]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[30 108]
[38 101]
[39 100]
[40 99]
[42 96]
[43 95]
[44 94]
[45 93]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
