%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACUUUCGGGGGGGGGGCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAxxxxxxxxxxCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCCCCCCCCCCCUCAACUAUC\
) } def
/len { sequence length } bind def

/coor [
[89.36907196 394.75476074]
[77.48480225 385.47967529]
[68.16609192 373.62954712]
[61.95473099 359.89337158]
[59.21182632 345.06976318]
[60.09685516 330.02050781]
[64.55836487 315.62054443]
[72.33695984 302.70712280]
[82.98041534 292.03094482]
[95.86991882 284.21276855]
[110.25611115 279.70709229]
[109.32048035 264.73632812]
[108.38484955 249.76551819]
[107.44922638 234.79473877]
[106.51359558 219.82394409]
[105.57796478 204.85314941]
[104.64234161 189.88235474]
[103.70671082 174.91156006]
[102.77108002 159.94078064]
[100.90346527 145.05749512]
[98.11114502 130.31968689]
[95.31881714 115.58188629]
[84.04689789 103.19483948]
[89.67948151 87.42242432]
[86.58116150 72.74590302]
[83.48283386 58.06937408]
[79.90222168 54.09460831]
[78.40007782 49.58950424]
[78.82344818 45.45157623]
[80.67929077 42.38183212]
[78.50245667 27.54062843]
[76.32561493 12.69942284]
[74.14878082 -2.14178300]
[71.97194672 -16.98298836]
[56.99430466 -16.02221680]
[41.98818970 -16.28546906]
[27.05346298 -17.77099037]
[12.28951740 -20.46889877]
[-2.20539594 -24.36123466]
[-16.33481407 -29.42209816]
[-30.00470734 -35.61780930]
[-43.12409973 -42.90713501]
[-55.60569000 -51.24156952]
[-67.36640930 -60.56563950]
[-78.32798767 -70.81729889]
[-88.41748047 -81.92832947]
[-97.56774902 -93.82477570]
[-105.71788788 -106.42747498]
[-112.81365967 -119.65255737]
[-118.80784607 -133.41200256]
[-123.66056061 -147.61425781]
[-127.33950043 -162.16479492]
[-129.82019043 -176.96679688]
[-131.08610535 -191.92173767]
[-131.12884521 -206.93009949]
[-129.94812012 -221.89199829]
[-127.55176544 -236.70788574]
[-123.95574951 -251.27914429]
[-119.18399048 -265.50878906]
[-113.26826477 -279.30215454]
[-106.24791718 -292.56744385]
[-98.16968536 -305.21633911]
[-89.08731842 -317.16470337]
[-79.06126404 -328.33300781]
[-68.15824127 -338.64694214]
[-56.45081711 -348.03784180]
[-44.01689529 -356.44320679]
[-30.93922615 -363.80712891]
[-17.30484009 -370.08059692]
[-3.20447254 -375.22183228]
[11.26803875 -379.19665527]
[26.01638031 -381.97860718]
[40.94240570 -383.54916382]
[55.94677734 -383.89785767]
[70.92964935 -383.02239990]
[85.79130554 -380.92861938]
[100.43283844 -377.63040161]
[114.75682831 -373.14974976]
[128.66792297 -367.51644897]
[142.07357788 -360.76800537]
[154.88455200 -352.94934082]
[167.01559448 -344.11245728]
[178.38598633 -334.31616211]
[188.92004395 -323.62570190]
[198.54766846 -312.11215210]
[207.20478821 -299.85217285]
[214.83380127 -286.92736816]
[221.38392639 -273.42370605]
[226.81156921 -259.43109131]
[231.08062744 -245.04261780]
[234.16267395 -230.35404968]
[236.03718567 -215.46315002]
[236.69172668 -200.46900940]
[236.12190247 -185.47140503]
[234.33152771 -170.57014465]
[231.33251953 -155.86441040]
[227.14482117 -141.45205688]
[221.79629517 -127.42900085]
[215.32257080 -113.88855743]
[207.76669312 -100.92084503]
[199.17897034 -88.61215973]
[189.61653137 -77.04441833]
[179.14303589 -66.29460144]
[167.82817078 -56.43424225]
[155.74723816 -47.52896881]
[142.98063660 -39.63804626]
[129.61332703 -32.81398010]
[115.73426819 -27.10219002]
[101.43582153 -22.54068756]
[86.81314850 -19.15982628]
[88.98999023 -4.31861973]
[91.16682434 10.52258587]
[93.34365845 25.36379051]
[95.52050018 40.20499802]
[98.15936279 54.97105026]
[101.25768280 69.64757538]
[104.35600281 84.32410431]
[113.74118042 91.28860474]
[116.03610229 102.74806213]
[110.05662537 112.78955841]
[112.84895325 127.52736664]
[115.64127350 142.26516724]
[125.29338837 130.78315735]
[140.21963501 129.29754639]
[151.94558716 138.65180969]
[153.81378174 153.53501892]
[144.76353455 165.49716187]
[129.93318176 167.74670410]
[117.74187469 159.00514221]
[118.67750549 173.97593689]
[119.61312866 188.94673157]
[120.54875946 203.91752625]
[121.48439026 218.88830566]
[122.42001343 233.85910034]
[123.35564423 248.82989502]
[124.29127502 263.80068970]
[125.22689819 278.77148438]
[140.06213379 281.45089722]
[153.82476807 287.60339355]
[165.71466064 296.87130737]
[175.04055786 308.71575928]
[181.26023865 322.44815063]
[184.01213074 337.27011108]
[183.13623047 352.31991577]
[178.68345642 366.72256470]
[170.91268921 379.64071655]
[160.27571106 390.32333374]
[147.39094543 398.14932251]
[133.00749207 402.66369629]
[117.96158600 403.60403442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 122]
[21 121]
[22 120]
[24 117]
[25 116]
[26 115]
[30 114]
[31 113]
[32 112]
[33 111]
[34 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
