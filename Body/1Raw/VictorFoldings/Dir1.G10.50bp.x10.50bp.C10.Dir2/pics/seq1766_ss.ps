%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACGCAUUGGGGGGGGGGUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUxxxxxxxxxxGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCCCCCCCCCCCUACUCAUU\
) } def
/len { sequence length } bind def

/coor [
[79.76071167 600.05664062]
[65.91477203 594.04064941]
[54.20611191 584.51123047]
[45.50358582 572.17553711]
[40.45298386 557.94903564]
[39.42909241 542.88732910]
[42.50789261 528.10821533]
[49.46091461 514.70825195]
[59.77219772 503.68194580]
[72.67658234 495.84741211]
[87.21646881 491.78610229]
[87.21646881 476.78610229]
[87.21646881 461.78610229]
[87.21646881 446.78610229]
[87.21646881 431.78610229]
[87.21646881 416.78610229]
[87.21646881 401.78610229]
[87.21646881 386.78610229]
[87.21646881 371.78610229]
[87.21646881 356.78610229]
[87.21646881 341.78610229]
[72.75160980 337.94976807]
[59.76274872 330.49417114]
[49.13827896 319.92224121]
[41.60667419 306.95046997]
[37.68652344 292.46002197]
[37.65085983 277.43713379]
[41.50811005 262.90579224]
[49.00114822 249.85815430]
[59.62440872 239.18658447]
[72.65799713 231.62278748]
[87.21646881 227.68754578]
[87.21646881 212.68754578]
[79.47916412 199.96028137]
[87.21646881 186.16011047]
[87.21646881 171.16011047]
[85.26280212 169.06474304]
[84.04942322 166.04452515]
[83.94232178 162.38796997]
[85.19235229 158.51390076]
[87.89235687 154.92620850]
[89.13922882 139.97811890]
[90.38610840 125.03003693]
[91.63298035 110.08195496]
[92.25695801 95.09493256]
[92.25695801 80.09493256]
[92.25695801 65.09493256]
[92.25695801 50.09493637]
[91.78891754 35.10224152]
[90.85328674 20.13144875]
[89.91765594 5.16065645]
[88.51535797 -9.77365112]
[86.64774323 -24.65693092]
[84.78012848 -39.54021072]
[82.91251373 -54.42349243]
[81.04490662 -69.30677032]
[77.30435944 -74.88492584]
[77.03326416 -80.64321136]
[79.42251587 -84.84642029]
[78.17564392 -99.79450989]
[69.41854858 -106.38227844]
[65.84102631 -116.50675201]
[68.40791321 -126.70626831]
[76.02586365 -133.63438416]
[75.40188599 -148.62139893]
[74.77790833 -163.60841370]
[74.15393066 -178.59542847]
[59.86827087 -183.79046631]
[48.66147232 -194.06062317]
[42.24249268 -207.83978271]
[41.59017944 -223.02671814]
[46.80400467 -237.30552673]
[57.08889389 -248.49880981]
[70.87648010 -254.89965820]
[86.06426239 -255.53199768]
[100.33620453 -250.29939270]
[111.51593781 -239.99978638]
[117.89864349 -226.20378113]
[118.51100159 -211.01518250]
[113.25962830 -196.75013733]
[102.94532776 -185.58396912]
[89.14094543 -179.21940613]
[89.76492310 -164.23239136]
[90.38890076 -149.24537659]
[91.01287842 -134.25836182]
[102.56855774 -118.80210876]
[93.12372589 -101.04138184]
[94.37060547 -86.09329987]
[95.92818451 -71.17438507]
[97.79579926 -56.29110336]
[99.66340637 -41.40782547]
[101.53102112 -26.52454376]
[103.39863586 -11.64126396]
[106.00719452 -9.17896652]
[107.52075195 -5.30458784]
[107.27690887 -0.56191766]
[104.88845062 4.22502804]
[105.82408142 19.19581985]
[106.75970459 34.16661072]
[109.20960236 36.78682327]
[110.47854614 40.74806595]
[109.93935394 45.46629333]
[107.25695801 50.09493637]
[107.25695801 65.09493256]
[107.25695801 80.09493256]
[107.25695801 95.09493256]
[109.28755188 97.46360779]
[110.47651672 100.64182281]
[110.51572418 104.30985260]
[109.22312927 108.03639984]
[106.58106995 111.32882690]
[105.33419037 126.27691650]
[104.08731842 141.22500610]
[102.84044647 156.17308044]
[102.21646881 171.16011047]
[102.21646881 186.16011047]
[109.95376587 199.96028137]
[102.21646881 212.68754578]
[102.21646881 227.68754578]
[116.77494049 231.62278748]
[129.80851746 239.18658447]
[140.43177795 249.85815430]
[147.92481995 262.90579224]
[151.78207397 277.43713379]
[151.74641418 292.46002197]
[147.82626343 306.95046997]
[140.29464722 319.92224121]
[129.67018127 330.49417114]
[116.68132019 337.94976807]
[102.21646881 341.78610229]
[102.21646881 356.78610229]
[102.21646881 371.78610229]
[102.21646881 386.78610229]
[102.21646881 401.78610229]
[102.21646881 416.78610229]
[102.21646881 431.78610229]
[102.21646881 446.78610229]
[102.21646881 461.78610229]
[102.21646881 476.78610229]
[102.21646881 491.78610229]
[116.75635529 495.84741211]
[129.66073608 503.68194580]
[139.97201538 514.70825195]
[146.92503357 528.10821533]
[150.00384521 542.88732910]
[148.97994995 557.94903564]
[143.92935181 572.17553711]
[135.22682190 584.51123047]
[123.51815796 594.04064941]
[109.67221832 600.05664062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[32 119]
[33 118]
[35 116]
[36 115]
[41 114]
[42 113]
[43 112]
[44 111]
[45 106]
[46 105]
[47 104]
[48 103]
[49 99]
[50 98]
[51 97]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[59 88]
[60 87]
[64 85]
[65 84]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
