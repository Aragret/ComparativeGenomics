%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCCCUCCGGGGGGGGGGCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUxxxxxxxxxxCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAACCCCCCCCCCAUUGCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[84.07571411 406.68496704]
[70.22977448 400.66894531]
[58.52111053 391.13952637]
[49.81858826 378.80386353]
[44.76798630 364.57733154]
[43.74409485 349.51565552]
[46.82289505 334.73648071]
[53.77591324 321.33654785]
[64.08719635 310.31024170]
[76.99157715 302.47570801]
[91.53146362 298.41439819]
[91.53146362 283.41439819]
[91.53146362 268.41439819]
[91.53146362 253.41439819]
[91.53146362 238.41439819]
[91.53146362 223.41439819]
[91.53146362 208.41439819]
[91.53146362 193.41439819]
[91.53146362 178.41439819]
[91.53146362 163.41439819]
[83.18290710 154.60481262]
[83.09848022 142.06640625]
[91.87156677 132.55393982]
[92.18362427 117.55718231]
[81.97013855 106.57151794]
[66.99042511 105.79167175]
[52.01071167 105.01183319]
[43.21267319 107.70373535]
[36.72845459 104.05673981]
[21.76820564 102.96542358]
[16.07594681 116.98160553]
[6.32949829 128.55148315]
[-6.51628351 136.54153442]
[-21.20289993 140.16900635]
[-36.29150391 139.07849121]
[-50.30386734 133.37684631]
[-61.86720657 123.62265015]
[-69.84865570 110.77151489]
[-73.46628571 96.08247375]
[-72.36566162 80.99459839]
[-66.65462494 66.98606110]
[-56.89267731 55.42926025]
[-44.03620148 47.45642471]
[-29.34473801 43.84864044]
[-14.25760841 44.95936966]
[-0.25289655 50.67979431]
[11.29735851 60.44948196]
[19.26158142 73.31130219]
[22.85951614 88.00518036]
[37.81976700 89.09648895]
[52.79055786 90.03211975]
[67.77027130 90.81195831]
[82.74998474 91.59180450]
[95.99256897 84.54666901]
[103.71665955 71.68827057]
[111.44074249 58.82986832]
[119.16482544 45.97146606]
[107.11528015 37.01740646]
[96.00141144 26.92538834]
[85.93027496 15.79260349]
[76.99884033 3.72627139]
[69.29314423 -9.15740108]
[62.88739014 -22.73433304]
[57.84326935 -36.87376785]
[54.20936584 -51.43953323]
[52.02067184 -66.29135132]
[51.29826736 -81.28617859]
[52.04911041 -96.27960968]
[54.26597214 -111.12725067]
[57.92749786 -125.68609619]
[62.99842834 -139.81593323]
[69.42992401 -153.38069153]
[77.16004181 -166.24972534]
[86.11434174 -178.29910278]
[96.20658112 -189.41276550]
[107.33956909 -199.48368835]
[119.40608215 -208.41487122]
[132.28990173 -216.12031555]
[145.86697388 -222.52578735]
[160.00650024 -227.56962585]
[174.57234192 -231.20324707]
[189.42419434 -233.39164734]
[204.41905212 -234.11373901]
[219.41246033 -233.36259460]
[234.26005554 -231.14544678]
[248.81883240 -227.48362732]
[262.94857788 -222.41241455]
[276.51321411 -215.98065186]
[289.38208008 -208.25027466]
[301.43127441 -199.29573059]
[312.54473877 -189.20326233]
[322.61541748 -178.07008362]
[331.54638672 -166.00338745]
[339.25155640 -153.11941528]
[345.65676880 -139.54222107]
[350.70031738 -125.40258026]
[354.33364868 -110.83666992]
[356.52175903 -95.98477173]
[357.24356079 -80.98991394]
[356.49209595 -65.99650574]
[354.27465820 -51.14896011]
[350.61254883 -36.59025955]
[345.54104614 -22.46061897]
[339.10900879 -8.89611912]
[331.37838745 3.97260547]
[322.42358398 16.02161789]
[312.33090210 27.13487625]
[301.19750977 37.20534897]
[289.13064575 46.13605499]
[276.24652100 53.84098053]
[262.66918945 60.24591827]
[248.52946472 65.28919220]
[233.96347046 68.92222595]
[219.11152649 71.11002350]
[204.11665344 71.83152771]
[189.12327576 71.07978821]
[174.27577209 68.86203766]
[159.71713257 65.19963837]
[145.58760071 60.12785721]
[132.02322388 53.69554901]
[124.29914093 66.55395508]
[116.57505798 79.41235352]
[108.85097504 92.27075958]
[112.50882721 95.62388611]
[114.73885345 100.66041565]
[114.80168152 106.71844482]
[112.27644348 112.82895660]
[107.18037415 117.86923981]
[106.86831665 132.86599731]
[116.12257385 148.75115967]
[106.53146362 163.41439819]
[106.53146362 178.41439819]
[106.53146362 193.41439819]
[106.53146362 208.41439819]
[106.53146362 223.41439819]
[106.53146362 238.41439819]
[106.53146362 253.41439819]
[106.53146362 268.41439819]
[106.53146362 283.41439819]
[106.53146362 298.41439819]
[121.07135773 302.47570801]
[133.97573853 310.31024170]
[144.28701782 321.33654785]
[151.24003601 334.73648071]
[154.31883240 349.51565552]
[153.29495239 364.57733154]
[148.24435425 378.80386353]
[139.54182434 391.13952637]
[127.83316040 400.66894531]
[113.98722076 406.68496704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 53]
[26 52]
[27 51]
[29 50]
[30 49]
[54 123]
[55 122]
[56 121]
[57 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
