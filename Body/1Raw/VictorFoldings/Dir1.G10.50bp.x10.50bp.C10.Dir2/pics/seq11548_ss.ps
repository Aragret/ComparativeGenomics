%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUUAAACAGGGGGGGGGGCCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUxxxxxxxxxxGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGUUCCCCCCCCCCCCCCUUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[42.42858505 327.18481445]
[30.49046898 323.82098389]
[18.74702835 319.83029175]
[7.23115015 315.22393799]
[-4.02491188 310.01480103]
[-14.98963356 304.21749878]
[-25.63230705 297.84823608]
[-35.92312241 290.92486572]
[-45.83326340 283.46679688]
[-55.33497238 275.49487305]
[-64.40163422 267.03143311]
[-73.00786591 258.10021973]
[-84.39894104 267.85949707]
[-95.79001617 277.61877441]
[-107.18109131 287.37805176]
[-118.57215881 297.13732910]
[-129.96324158 306.89660645]
[-141.35430908 316.65585327]
[-152.74537659 326.41513062]
[-160.83984375 341.31198120]
[-177.39527893 337.65771484]
[-178.46682739 320.73767090]
[-162.50465393 315.02407837]
[-151.11358643 305.26480103]
[-139.72250366 295.50552368]
[-128.33143616 285.74624634]
[-116.94036102 275.98696899]
[-105.54928589 266.22769165]
[-94.15821838 256.46841431]
[-82.76714325 246.70915222]
[-97.04969788 226.88111877]
[-109.19003296 205.67370605]
[-119.05615997 183.31745911]
[-126.54082489 160.05543518]
[-131.56265259 136.14051819]
[-134.06706238 111.83269501]
[-134.02680969 87.39624023]
[-131.44233704 63.09679794]
[-126.34174347 39.19855499]
[-118.78048706 15.96131229]
[-108.84075928 -6.36230564]
[-121.98239136 -13.59400845]
[-135.12402344 -20.82571030]
[-148.26565552 -28.05741310]
[-161.40728760 -35.28911591]
[-174.50628662 -27.26964951]
[-189.86048889 -26.89012909]
[-203.33969116 -34.25264359]
[-211.31805420 -47.37671280]
[-211.64944458 -62.73203278]
[-204.24472046 -76.18809509]
[-191.09570312 -84.12528229]
[-175.73942566 -84.40853882]
[-162.30664062 -76.96166992]
[-154.41070557 -63.78784180]
[-154.17558289 -48.43074799]
[-141.03395081 -41.19904327]
[-127.89231873 -33.96734238]
[-114.75068665 -26.73563957]
[-101.60905457 -19.50393677]
[-94.60010529 -30.60704994]
[-86.98034668 -41.30021667]
[-78.77370453 -51.54987335]
[-70.00592804 -61.32385254]
[-60.70454788 -70.59146881]
[-50.89875031 -79.32364655]
[-40.61931610 -87.49295807]
[-29.89850807 -95.07377625]
[-18.76998138 -102.04230499]
[-7.26866150 -108.37667084]
[4.56934929 -114.05698395]
[16.70689583 -119.06542206]
[29.10587883 -123.38626862]
[41.72738266 -127.00595856]
[54.53179169 -129.91311646]
[67.47891235 -132.09864807]
[80.52811432 -133.55566406]
[93.63842773 -134.27960205]
[106.76871490 -134.26818848]
[119.87775421 -133.52146912]
[132.92440796 -132.04177856]
[145.86770630 -129.83375549]
[158.66703796 -126.90434265]
[171.28224182 -123.26272583]
[183.67369080 -118.92034149]
[195.80252075 -113.89081573]
[207.63063049 -108.18993378]
[219.12092590 -101.83558655]
[230.23733521 -94.84773254]
[240.94494629 -87.24829102]
[251.21017456 -79.06112671]
[261.00076294 -70.31192780]
[270.28604126 -61.02815628]
[279.03680420 -51.23895645]
[287.22561646 -40.97504807]
[294.82678223 -30.26865578]
[301.81643677 -19.15337944]
[308.17263794 -7.66410828]
[313.87539673 4.16309643]
[318.90689087 16.29111099]
[323.25125122 28.68186760]
[337.67864990 24.57692337]
[352.10601807 20.47197914]
[363.26196289 9.25344849]
[377.62081909 13.21239948]
[386.65216064 -0.04709162]
[402.66000366 -1.10951889]
[413.36447144 10.84012032]
[410.55401611 26.63508606]
[396.38458252 34.15883255]
[381.72573853 27.63978386]
[371.60174561 38.56470108]
[356.21096802 34.89936447]
[341.78359985 39.00430679]
[327.35620117 43.10925293]
[330.04751587 55.21672058]
[332.09454346 67.44961548]
[333.49154663 79.77366638]
[334.23458862 92.15437317]
[334.32165527 104.55704498]
[333.75244141 116.94696045]
[332.52856445 129.28941345]
[330.65344238 141.54983521]
[328.13235474 153.69387817]
[324.97232056 165.68754578]
[321.18222046 177.49725342]
[316.77267456 189.08992004]
[311.75598145 200.43305969]
[306.14627075 211.49491882]
[299.95919800 222.24453735]
[293.21209717 232.65176392]
[285.92385864 242.68748474]
[278.11492920 252.32359314]
[269.80712891 261.53308105]
[261.02377319 270.29016113]
[251.78945923 278.57034302]
[242.13000488 286.35037231]
[232.07250977 293.60852051]
[221.64511108 300.32440186]
[210.87702942 306.47927856]
[199.79840088 312.05584717]
[188.44029236 317.03851318]
[176.83447266 321.41333008]
[165.01347351 325.16806030]
[153.01039124 328.29214478]
[140.85884094 330.77685547]
[128.59286499 332.61523438]
[116.24680328 333.80215454]
[103.85523987 334.33425903]
[91.45288086 334.21005249]
[79.07446289 333.42990112]
[66.75464630 331.99600220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[101 115]
[102 114]
[103 113]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
