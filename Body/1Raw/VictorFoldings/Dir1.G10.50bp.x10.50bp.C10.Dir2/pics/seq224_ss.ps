%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCACACAGGGGGGGGGGGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCxxxxxxxxxxUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCCCCCCCCCCCUUUCCUCACAG\
) } def
/len { sequence length } bind def

/coor [
[1.33043516 225.30245972]
[-0.19982585 210.38072205]
[0.53785193 195.39888000]
[3.52659321 180.69964600]
[8.69802666 166.61929321]
[15.93384933 153.47993469]
[25.06853294 141.58213806]
[35.89310837 131.19808960]
[48.15995026 122.56532288]
[61.58844376 115.88134003]
[75.87139130 111.29904175]
[90.68997955 108.92258453]
[75.75232697 110.28880310]
[60.81467438 111.65501404]
[45.87702179 113.02123260]
[30.95398140 114.53875732]
[16.04708672 116.20743561]
[1.14019191 117.87611389]
[-13.76670265 119.54479218]
[-28.67359734 121.21346283]
[-43.58049393 122.88214111]
[-58.48738861 124.55081940]
[-60.06252289 139.52856445]
[-64.82103729 153.81739807]
[-72.54036713 166.74899292]
[-82.85945892 177.71850586]
[-95.29566956 186.21290588]
[-109.26734924 191.83485413]
[-124.12100220 194.32142639]
[-139.16189575 193.55632019]
[-153.68655396 189.57530212]
[-167.01562500 182.56459045]
[-178.52568054 172.85209656]
[-187.67837524 160.89205933]
[-194.04562378 147.24391174]
[-197.32962036 132.54597473]
[-197.37675476 117.48569489]
[-194.18484497 102.76748657]
[-187.90315247 89.07973480]
[-178.82550049 77.06264496]
[-167.37648010 67.27827454]
[-154.09155273 60.18426514]
[-139.59211731 56.11241150]
[-124.55629730 55.25315475]
[-109.68736267 57.64669418]
[-95.68077087 63.18107224]
[-83.19161987 71.59744263]
[-72.80406189 82.50215149]
[-65.00393677 95.38516235]
[-60.15606308 109.64392853]
[-45.24916840 107.97525024]
[-30.34227562 106.30657196]
[-15.43537998 104.63789368]
[-0.52848500 102.96921539]
[14.37841034 101.30053711]
[29.28530502 99.63186646]
[35.62001419 95.73942566]
[44.51080322 98.08358002]
[59.44845581 96.71736145]
[74.38610840 95.35115051]
[89.32376099 93.98493195]
[86.38082886 90.91495514]
[83.85823822 87.38162994]
[77.66474915 73.71997833]
[63.21540451 66.74889374]
[59.79724121 51.07421112]
[70.03237915 38.72020340]
[86.06929779 39.16381073]
[95.60584259 52.06473541]
[91.32640076 67.52648926]
[97.51988983 81.18814087]
[98.63433075 66.22959900]
[99.74877930 51.27105331]
[100.86322021 36.31251144]
[101.97766876 21.35396767]
[96.57868958 7.35929060]
[93.43163300 -7.30686235]
[92.61373901 -22.28454781]
[94.14508057 -37.20617676]
[97.98808289 -51.70553207]
[104.04841614 -65.42677307]
[112.17734528 -78.03313446]
[122.17537689 -89.21523285]
[133.79713440 -98.69863129]
[146.75738525 -106.25058746]
[160.73805237 -111.68575287]
[175.39601135 -114.87072754]
[190.37152100 -115.72736359]
[205.29707336 -114.23461914]
[219.80632019 -110.42913818]
[233.54318237 -104.40431976]
[246.17053223 -96.30802155]
[257.37844849 -86.33894348]
[266.89187622 -74.74176025]
[274.47732544 -61.80109024]
[279.94863892 -47.83453369]
[283.17153931 -33.18485641]
[284.06689453 -18.21160316]
[282.61276245 -3.28225207]
[278.84481812 11.23679256]
[272.85556030 24.98919868]
[264.79196167 37.63744736]
[254.85189819 48.87112045]
[243.27935791 58.41451263]
[230.35835266 66.03340912]
[216.40599060 71.54083252]
[201.76470947 74.80159760]
[186.79382324 75.73568726]
[171.85464478 74.31911469]
[157.75373840 79.43421173]
[143.65281677 84.54930878]
[129.55191040 89.66441345]
[115.45099640 94.77951050]
[130.27801514 97.05092621]
[145.10504150 99.32234192]
[154.12185669 97.52278900]
[160.20832825 101.79297638]
[174.98626709 104.36442566]
[190.18916321 98.21593475]
[202.94709778 108.51969147]
[200.13578796 124.67607117]
[184.64727783 130.06477356]
[172.41482544 119.14237213]
[157.63687134 116.57092285]
[142.83363342 114.14936829]
[128.00660706 111.87795258]
[113.17958069 109.60653687]
[127.81875610 112.87677002]
[141.79728699 118.31742096]
[154.79539490 125.80402374]
[166.51573181 135.16531372]
[176.69017029 146.18714905]
[185.08596802 158.61737061]
[191.51106262 172.17164612]
[195.81846619 186.53988647]
[197.90963745 201.39340210]
[197.73674011 216.39239502]
[195.30374146 231.19377136]
[190.66629028 245.45890808]
[183.93046570 258.86148071]
[175.25036621 271.09484863]
[164.82456970 281.87924194]
[152.89157104 290.96786499]
[139.72434998 298.15286255]
[125.62411499 303.26986694]
[110.91344452 306.20178223]
[95.92885590 306.88156128]
[81.01313782 305.29367065]
[66.50751495 301.47439575]
[52.74381256 295.51113892]
[40.03689957 287.54028320]
[28.67745590 277.74420166]
[18.92534828 266.34701538]
[11.00366592 253.60937500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 61]
[13 60]
[14 59]
[15 58]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[63 71]
[64 70]
[113 127]
[114 126]
[115 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
