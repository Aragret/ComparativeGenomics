%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACUAGCAGGGGGGGGGGGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUxxxxxxxxxxAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCCCCCCCCCCCACCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[92.36823273 369.66442871]
[78.34629059 364.11141968]
[66.14633179 355.24508667]
[56.53526306 343.62277222]
[50.11723709 329.97506714]
[47.29570007 315.15988159]
[48.24801636 300.10852051]
[52.91432190 285.76708984]
[61.00128937 273.03713989]
[72.00056458 262.71887207]
[85.22071838 255.46087646]
[99.83073425 251.71945190]
[99.83073425 236.71945190]
[99.83073425 221.71945190]
[99.83073425 206.71945190]
[99.83073425 191.71945190]
[99.83073425 176.71945190]
[99.83073425 161.71945190]
[99.83073425 146.71945190]
[99.83073425 131.71945190]
[99.83073425 116.71944427]
[92.63935089 129.88317871]
[91.74695587 144.85661316]
[83.36920929 157.29901123]
[69.83089447 163.75765991]
[54.88885498 162.44030762]
[42.68944550 153.71252441]
[36.61795807 139.99621582]
[38.35920715 125.09761810]
[47.42974854 113.15123749]
[62.32164001 111.35355377]
[48.39092255 105.79161835]
[32.70554352 107.86031342]
[23.75450325 95.95535278]
[9.82378674 90.39341736]
[-4.16329718 84.97479248]
[-18.20527267 79.70005035]
[-32.24724960 74.42530823]
[-46.28922653 69.15056610]
[-60.33120346 63.87582397]
[-74.37317657 58.60108566]
[-88.41515350 53.32634354]
[-102.45713043 48.05160141]
[-115.98947144 55.88804245]
[-131.38401794 53.14178085]
[-141.37193298 41.10951233]
[-141.23724365 25.47251129]
[-131.04353333 13.61408615]
[-115.60395813 11.13342571]
[-102.20862579 19.20182228]
[-97.18238831 34.00962448]
[-83.14041138 39.28436661]
[-69.09843445 44.55910873]
[-55.05646133 49.83385086]
[-41.01448441 55.10858917]
[-26.97250748 60.38333130]
[-12.93053150 65.65807343]
[1.11144459 70.93281555]
[8.52476406 70.33709717]
[15.38572407 76.46269989]
[29.31644058 82.02463531]
[44.00539780 79.55811310]
[53.95285797 91.86090088]
[67.88357544 97.42284393]
[74.13559723 93.28010559]
[62.39179611 83.94826508]
[67.63804626 69.89561462]
[82.62407684 70.54277802]
[86.63963318 84.99462891]
[92.89164734 80.85189056]
[93.19962311 65.85505676]
[79.76548767 58.52139282]
[71.28792572 45.77817917]
[69.71501923 30.55370522]
[75.40821075 16.34644890]
[87.05924988 6.42113066]
[101.99080658 3.05851650]
[116.77172089 7.03131104]
[128.00544739 17.42659378]
[133.11056519 31.85560799]
[130.91394043 47.00266647]
[121.92035675 59.38709259]
[108.19646454 66.16303253]
[107.88848877 81.15986633]
[119.76531219 90.32180786]
[134.19268799 86.21685791]
[148.62007141 82.11191559]
[163.04747009 78.00697327]
[170.77415466 64.48158264]
[185.46405029 60.52410889]
[198.31082153 67.97367859]
[212.73820496 63.86873627]
[227.12268066 59.61588669]
[241.46273804 55.21558762]
[255.80281067 50.81528854]
[267.99249268 37.05149078]
[284.92218018 41.57148361]
[299.16888428 36.87768173]
[313.41555786 32.18388367]
[327.66226196 27.49008179]
[338.34820557 15.82300186]
[352.85748291 19.18911362]
[356.61843872 4.22720623]
[367.88702393 -6.30953741]
[383.06741333 -9.05888081]
[397.31564331 -3.14351988]
[406.08514404 9.54897690]
[406.57760620 24.96847916]
[398.63586426 38.19467926]
[384.79412842 45.00714493]
[369.46920776 43.23204422]
[357.55126953 33.43580627]
[347.88433838 44.76715088]
[332.35604858 41.73677444]
[318.10937500 46.43057251]
[303.86267090 51.12437439]
[289.61596680 55.81817627]
[283.86257935 66.50277710]
[271.98263550 70.50756073]
[260.20309448 65.15534973]
[245.86305237 69.55564880]
[231.52297974 73.95594788]
[226.01707458 78.95565796]
[216.84315491 78.29611969]
[202.41575623 82.40106201]
[195.41491699 95.49777222]
[180.84196472 99.86628723]
[167.15240479 92.43435669]
[152.72502136 96.53929901]
[138.29763794 100.64424133]
[123.87025452 104.74919128]
[114.83073425 116.71944427]
[114.83073425 131.71945190]
[114.83073425 146.71945190]
[114.83073425 161.71945190]
[114.83073425 176.71945190]
[114.83073425 191.71945190]
[114.83073425 206.71945190]
[114.83073425 221.71945190]
[114.83073425 236.71945190]
[114.83073425 251.71945190]
[129.44075012 255.46087646]
[142.66090393 262.71887207]
[153.66018677 273.03713989]
[161.74714661 285.76708984]
[166.41345215 300.10852051]
[167.36576843 315.15988159]
[164.54423523 329.97506714]
[158.12620544 343.62277222]
[148.51513672 355.24508667]
[136.31517029 364.11141968]
[122.29323578 369.66442871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[31 64]
[32 63]
[34 61]
[35 60]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[70 84]
[71 83]
[85 131]
[86 130]
[87 129]
[88 128]
[91 125]
[92 124]
[93 122]
[94 121]
[95 120]
[97 117]
[98 116]
[99 115]
[100 114]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
