%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACAAAACGGGGGGGGGGUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUxxxxxxxxxxUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCCCCCCCCCCCACAUCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[83.69387054 385.99310303]
[70.20498657 379.26156616]
[58.71948624 369.49700928]
[49.90511703 357.26712036]
[44.27433777 343.28292847]
[42.15450668 328.35745239]
[43.66887665 313.35845947]
[48.72940063 299.15792847]
[57.04186630 286.58151245]
[68.12299347 276.36035156]
[81.32855225 269.08871460]
[95.89077759 265.18936157]
[95.58279419 250.19252014]
[95.27481842 235.19567871]
[94.96684265 220.19883728]
[94.65886688 205.20199585]
[94.35089111 190.20516968]
[94.04290771 175.20832825]
[93.73493195 160.21148682]
[93.42695618 145.21464539]
[93.11898041 130.21781921]
[77.61785889 121.43605804]
[69.51335144 105.57034302]
[71.48373413 87.86380768]
[59.51347351 78.82428741]
[47.85624313 88.98588562]
[34.35334778 96.51227570]
[19.59055901 101.07962036]
[4.20776415 102.49239349]
[-11.12878704 100.69174194]
[-25.75533104 95.75795746]
[-39.03932190 87.90686798]
[-50.40678406 77.48041534]
[-59.36710739 64.93176270]
[-65.53423309 50.80558395]
[-68.64328003 35.71444702]
[-68.56192017 20.31223297]
[-65.29599762 5.26580524]
[-58.98921967 -8.77385712]
[-71.14255524 -17.56570053]
[-83.29588318 -26.35754204]
[-95.44921875 -35.14938354]
[-107.60255432 -43.94122696]
[-119.75588226 -52.73307037]
[-131.90922546 -61.52491379]
[-144.44468689 -53.00213623]
[-159.13990784 -49.28373718]
[-174.22033691 -50.81873322]
[-187.86495972 -57.42176437]
[-198.42611694 -68.29547882]
[-204.62850952 -82.12683868]
[-205.72312927 -97.24562073]
[-201.57783508 -111.82616425]
[-192.69317627 -124.10780334]
[-180.14202881 -132.60746765]
[-165.43998718 -136.29876709]
[-150.36239624 -134.73599243]
[-136.72996521 -128.10781860]
[-126.18886566 -117.21466064]
[-120.01198578 -103.37190247]
[-118.94522095 -88.25112915]
[-123.11737823 -73.67824554]
[-110.96404266 -64.88640594]
[-98.81070709 -56.09456253]
[-86.65737915 -47.30271912]
[-74.50404358 -38.51087570]
[-62.35071182 -29.71903229]
[-50.19737625 -20.92719078]
[-39.49738693 -30.81601715]
[-27.06230927 -38.41817474]
[-13.37361813 -43.43702698]
[1.03823054 -45.67601013]
[15.61434937 -45.04631805]
[29.78909111 -41.57042694]
[43.01200485 -35.38131714]
[54.76920700 -26.71735382]
[64.60334778 -15.91313171]
[72.13141632 -3.38654900]
[77.05965424 10.37736416]
[79.19498444 24.84521675]
[78.45264435 39.45593643]
[74.85946655 53.64251328]
[68.55299377 66.85402679]
[80.52325439 75.89354706]
[96.17133331 69.24604034]
[112.97164917 71.85393524]
[125.86814880 82.93238068]
[140.01545715 77.94705963]
[154.16278076 72.96173096]
[153.98284912 58.60330963]
[158.24841309 44.91444397]
[166.52806091 33.23489380]
[177.99818420 24.70344353]
[191.52494812 20.14688110]
[205.77629089 19.99987793]
[219.35314941 24.26356506]
[230.92680359 32.50672531]
[239.36888123 43.90937042]
[253.61558533 39.21556854]
[267.86227417 34.52176666]
[282.10894775 29.82796860]
[286.86062622 25.08831978]
[292.45526123 23.71434402]
[297.03787231 25.24697495]
[311.46527100 21.14203072]
[320.49661255 7.88253927]
[336.50445557 6.82011223]
[347.20892334 18.76975060]
[344.39846802 34.56471634]
[330.22903442 42.08846283]
[315.57022095 35.56941605]
[301.14282227 39.67435837]
[286.80276489 44.07466125]
[272.55606079 48.76845932]
[258.30938721 53.46226120]
[244.06268311 58.15606308]
[243.78285217 73.86975861]
[238.13986206 88.56662750]
[227.79621887 100.47016144]
[213.98379517 108.13482666]
[198.35711670 110.62157440]
[182.79522705 107.61284637]
[169.17568970 99.45301056]
[159.14810181 87.10905457]
[145.00077820 92.09437561]
[130.85346985 97.07969666]
[130.45870972 105.72119141]
[127.69085693 113.91694641]
[122.76556396 121.02840424]
[116.06657410 126.50150299]
[108.11581421 129.90983582]
[108.42378998 144.90667725]
[108.73177338 159.90351868]
[109.03974915 174.90034485]
[109.34772491 189.89718628]
[109.65570068 204.89402771]
[109.96368408 219.89086914]
[110.27165985 234.88769531]
[110.57963562 249.88453674]
[110.88761139 264.88137817]
[125.59764862 268.17959595]
[139.09060669 274.90295410]
[150.58203125 284.66055298]
[159.40380859 296.88510132]
[165.04306030 310.86587524]
[167.17193604 325.79006958]
[165.66667175 340.78997803]
[160.61476135 354.99356079]
[152.30992126 367.57501221]
[141.23498535 377.80288696]
[128.03384399 385.08255005]
[113.47398376 388.99072266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 84]
[25 83]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[87 126]
[88 125]
[89 124]
[98 116]
[99 115]
[100 114]
[101 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
