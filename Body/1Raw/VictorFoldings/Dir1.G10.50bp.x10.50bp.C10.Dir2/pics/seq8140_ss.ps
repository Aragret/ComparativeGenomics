%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCAAAGGGGGGGGGGGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAxxxxxxxxxxACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCCCCCCCCCCCUCACCAUAG\
) } def
/len { sequence length } bind def

/coor [
[80.41916656 416.85467529]
[66.57322693 410.83865356]
[54.86456299 401.30923462]
[46.16204071 388.97357178]
[41.11143875 374.74703979]
[40.08754730 359.68536377]
[43.16634369 344.90618896]
[50.11936569 331.50628662]
[60.43065262 320.47994995]
[73.33502960 312.64544678]
[87.87491608 308.58410645]
[87.87491608 293.58410645]
[87.87491608 278.58410645]
[87.87491608 263.58410645]
[87.87491608 248.58412170]
[87.87491608 233.58412170]
[87.87491608 218.58412170]
[87.87491608 203.58412170]
[87.87491608 188.58412170]
[87.87491608 173.58412170]
[87.87491608 158.58412170]
[82.32926178 153.53479004]
[75.13787842 166.69853210]
[69.39242554 180.55456543]
[54.75247955 183.82136536]
[43.66159439 173.72224426]
[45.54672241 158.84117126]
[58.80415726 151.82667542]
[71.23794556 143.43614197]
[65.69229126 138.38682556]
[50.75798035 139.78912354]
[35.82367325 141.19142151]
[20.88936615 142.59373474]
[7.83648396 152.52117920]
[-7.18071032 145.93211365]
[-8.71381569 129.60478210]
[4.81429482 120.33535767]
[19.48706245 127.65942383]
[34.42136765 126.25711823]
[49.35567856 124.85481262]
[64.28998566 123.45251465]
[60.23930359 108.96057892]
[61.57455444 94.67176056]
[67.63134003 82.43312073]
[77.16602325 73.65466309]
[88.57474518 69.14885712]
[100.14758301 69.06635284]
[103.85374451 54.53141785]
[107.40850067 39.95871353]
[110.81148529 25.34982300]
[114.21446228 10.74093056]
[117.61743927 -3.86796236]
[121.02041626 -18.47685432]
[108.36882019 -26.79324722]
[99.34281921 -38.91362000]
[95.01632690 -53.36359024]
[95.89302826 -68.39360809]
[101.84784698 -82.19077301]
[112.14434052 -93.09749603]
[125.52576447 -99.81066132]
[140.36840820 -101.53727722]
[143.77139282 -116.14617157]
[147.17436218 -130.75506592]
[145.59741211 -137.28352356]
[147.33753967 -142.77926636]
[151.03472900 -145.89476013]
[155.04248047 -160.34945679]
[159.05021667 -174.80413818]
[145.73883057 -181.84835815]
[134.25325012 -191.58978271]
[125.13066864 -203.57279968]
[118.79777527 -217.23693848]
[115.55077362 -231.94309998]
[115.54151917 -247.00343323]
[118.77045441 -261.71356201]
[125.08655548 -275.38546753]
[134.19441223 -287.37969971]
[145.66801453 -297.13522339]
[158.97073364 -304.19580078]
[173.48039246 -308.23114014]
[188.51832581 -309.05258179]
[203.38117981 -306.62164307]
[217.37380981 -301.05203247]
[229.84173584 -292.60427856]
[240.20182800 -281.67346191]
[247.96952820 -268.77087402]
[252.78150940 -254.49995422]
[254.41270447 -239.52821350]
[252.78684998 -224.55587769]
[247.97994995 -210.28324890]
[240.21687317 -197.37788391]
[229.86067200 -186.44338989]
[217.39575195 -177.99118042]
[203.40512085 -172.41658020]
[188.54312134 -169.98034668]
[173.50489807 -170.79640198]
[169.49716187 -156.34170532]
[165.48942566 -141.88702393]
[161.78326416 -127.35208893]
[158.38027954 -112.74319458]
[154.97731018 -98.13430023]
[167.52911377 -90.02645111]
[176.56657410 -78.09105682]
[180.98350525 -63.75700378]
[180.22839355 -48.74863052]
[174.37309265 -34.87832260]
[164.10650635 -23.82764435]
[150.65362549 -16.94347572]
[135.62930298 -15.07387733]
[132.22633362 -0.46498445]
[128.82334900 14.14390850]
[125.42037201 28.75279999]
[122.01739502 43.36169434]
[123.57309723 50.63668060]
[118.38867950 58.23757935]
[114.68251801 72.77251434]
[136.82168579 99.30049896]
[121.69145203 136.80633545]
[135.34770203 143.01174927]
[149.00393677 149.21714783]
[163.71139526 143.43215942]
[178.16819763 149.81779480]
[183.79737854 164.58560181]
[177.25923157 178.97407532]
[162.43273926 184.44680786]
[148.11419678 177.75691223]
[142.79852295 162.87339783]
[129.14228821 156.66798401]
[115.48604584 150.46257019]
[102.87491608 158.58412170]
[102.87491608 173.58412170]
[102.87491608 188.58412170]
[102.87491608 203.58412170]
[102.87491608 218.58412170]
[102.87491608 233.58412170]
[102.87491608 248.58412170]
[102.87491608 263.58410645]
[102.87491608 278.58410645]
[102.87491608 293.58410645]
[102.87491608 308.58410645]
[117.41480255 312.64544678]
[130.31918335 320.47994995]
[140.63047791 331.50628662]
[147.58349609 344.90618896]
[150.66229248 359.68536377]
[149.63839722 374.74703979]
[144.58779907 388.97357178]
[135.88526917 401.30923462]
[124.17661285 410.83865356]
[110.33067322 416.85467529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 41]
[31 40]
[32 39]
[33 38]
[47 116]
[48 115]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
[61 101]
[62 100]
[63 99]
[66 98]
[67 97]
[68 96]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
