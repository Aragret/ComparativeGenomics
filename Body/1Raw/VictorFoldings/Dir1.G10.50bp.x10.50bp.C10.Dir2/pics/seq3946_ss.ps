%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCUCUGAGGGGGGGGGGUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUxxxxxxxxxxAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCCCCCCCCCCCACCCCUCUGA\
) } def
/len { sequence length } bind def

/coor [
[86.64144135 388.25759888]
[72.79550171 382.24157715]
[61.08683777 372.71215820]
[52.38431549 360.37649536]
[47.33371353 346.14996338]
[46.30982208 331.08828735]
[49.38862228 316.30914307]
[56.34164429 302.90921021]
[66.65292358 291.88287354]
[79.55730438 284.04837036]
[94.09719086 279.98706055]
[94.09719086 264.98706055]
[94.09719086 249.98706055]
[94.09719086 234.98706055]
[94.09719086 219.98706055]
[94.09719086 204.98706055]
[94.09719086 189.98706055]
[94.09719086 174.98706055]
[94.09719086 159.98706055]
[94.09719086 144.98706055]
[88.76638031 139.71141052]
[81.57499695 152.87515259]
[74.85649109 166.28640747]
[60.05549240 168.72163391]
[49.39432144 158.16987610]
[51.67672729 143.34454346]
[65.01654053 136.48805237]
[78.10475159 129.16012573]
[72.77394104 123.88447571]
[57.77475357 124.04051208]
[42.77556610 124.19654846]
[27.77637672 124.35258484]
[20.30571556 137.77215576]
[7.11791611 145.64472961]
[-8.23956871 145.85264587]
[-21.63565254 138.33995056]
[-29.46685791 125.12754059]
[-29.62662697 109.76947784]
[-22.07198524 96.39701080]
[-8.83509254 88.60725403]
[6.52339411 88.49562836]
[19.87211800 96.09214783]
[27.62034035 109.35339355]
[42.61952972 109.19735718]
[57.61871719 109.04132080]
[72.61790466 108.88528442]
[76.62564850 94.43059540]
[63.84828949 86.57317352]
[51.07093048 78.71574402]
[34.41153717 75.56917572]
[32.82336044 58.68977737]
[48.60345078 52.49098587]
[58.92835617 65.93838501]
[71.70571136 73.79581451]
[84.48307037 81.65323639]
[90.99122620 77.92578125]
[91.04321289 62.92587280]
[104.00753784 70.47087097]
[110.51569366 66.74341583]
[110.20363617 51.74666595]
[109.89157867 36.74991226]
[106.56671906 28.17103386]
[109.73229218 21.43866730]
[109.73229218 6.43866730]
[109.73229218 -8.56133270]
[95.23477936 -12.80381107]
[82.52050018 -20.96002197]
[72.62014771 -32.36878204]
[66.33630371 -46.10522842]
[64.17837524 -61.05581665]
[66.32128906 -76.00856018]
[72.59132385 -89.75131226]
[82.48020935 -101.17001343]
[95.18628693 -109.33899689]
[109.67953491 -113.59603119]
[124.78505707 -113.59603119]
[139.27830505 -109.33899689]
[151.98439026 -101.17001343]
[161.87326050 -89.75131226]
[168.14331055 -76.00856018]
[170.28620911 -61.05581665]
[168.12828064 -46.10522842]
[161.84443665 -32.36878204]
[151.94409180 -20.96002197]
[139.22981262 -12.80381107]
[124.73229218 -8.56133270]
[124.73229218 6.43866730]
[124.73229218 21.43866730]
[124.88832855 36.43785477]
[125.20038605 51.43460846]
[125.51244354 66.43136597]
[136.70820618 76.41409302]
[151.64251709 75.01178741]
[166.57682800 73.60948181]
[170.45497131 58.97440720]
[179.09002686 46.57248688]
[191.42398071 37.88951874]
[205.95707703 33.95769882]
[220.93022156 35.23294449]
[234.53790283 41.54210663]
[245.14587402 52.10620117]
[251.48742676 65.63653564]
[266.42175293 64.23423004]
[281.35604858 62.83192825]
[296.29034424 61.42962265]
[311.22467041 60.02732086]
[326.15896606 58.62501526]
[341.09329224 57.22271347]
[352.39337158 45.83465958]
[368.32617188 47.71225739]
[376.66940308 61.41517258]
[371.02285767 76.43170166]
[355.71807861 81.24244690]
[342.49557495 72.15702057]
[327.56127930 73.55932617]
[312.62695312 74.96162415]
[297.69265747 76.36392975]
[282.75836182 77.76623535]
[267.82403564 79.16854095]
[252.88973999 80.57083893]
[249.17776489 95.04518127]
[240.72177124 107.39934540]
[228.52642822 116.13137054]
[214.05239868 120.17164612]
[199.04141235 119.01396179]
[185.30667114 112.77879333]
[174.51387024 102.20111084]
[167.97912598 88.54379272]
[153.04481506 89.94609070]
[138.11051941 91.34839630]
[109.09719086 144.98706055]
[109.09719086 159.98706055]
[109.09719086 174.98706055]
[109.09719086 189.98706055]
[109.09719086 204.98706055]
[109.09719086 219.98706055]
[109.09719086 234.98706055]
[109.09719086 249.98706055]
[109.09719086 264.98706055]
[109.09719086 279.98706055]
[123.63708496 284.04837036]
[136.54145813 291.88287354]
[146.85275269 302.90921021]
[153.80577087 316.30914307]
[156.88456726 331.08828735]
[155.86067200 346.14996338]
[150.81007385 360.37649536]
[142.10754395 372.71215820]
[130.39889526 382.24157715]
[116.55294800 388.25759888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 46]
[30 45]
[31 44]
[32 43]
[47 55]
[48 54]
[49 53]
[59 91]
[60 90]
[61 89]
[63 88]
[64 87]
[65 86]
[92 130]
[93 129]
[94 128]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
