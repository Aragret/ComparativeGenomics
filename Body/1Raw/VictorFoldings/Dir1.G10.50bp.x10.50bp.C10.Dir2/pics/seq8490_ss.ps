%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCAACUAGGGGGGGGGGUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUxxxxxxxxxxAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCCCCCCCCCCCACCCCACUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 534.85211182]
[71.19830322 528.83605957]
[59.48964310 519.30664062]
[50.78712082 506.97100830]
[45.73651886 492.74447632]
[44.71262741 477.68280029]
[47.79142761 462.90362549]
[54.74444962 449.50372314]
[65.05573273 438.47738647]
[77.96011353 430.64288330]
[92.50000000 426.58154297]
[92.50000000 411.58154297]
[92.50000000 396.58154297]
[92.50000000 381.58154297]
[92.50000000 366.58154297]
[92.50000000 351.58154297]
[92.50000000 336.58154297]
[92.50000000 321.58154297]
[92.50000000 306.58154297]
[92.50000000 291.58154297]
[78.03514099 287.74523926]
[65.04627991 280.28961182]
[54.42181396 269.71771240]
[46.89020538 256.74591064]
[42.97005844 242.25547791]
[42.93439102 227.23255920]
[46.79164505 212.70124817]
[54.28468323 199.65359497]
[64.90794373 188.98204041]
[77.94152832 181.41824341]
[92.50000000 177.48298645]
[92.50000000 162.48298645]
[92.50000000 147.48298645]
[92.50000000 132.48298645]
[80.17152405 128.00563049]
[70.20344543 118.91155243]
[64.29431152 106.36329651]
[63.59502792 92.13356018]
[68.49681854 78.35569000]
[54.59426117 72.72373962]
[40.63386917 67.23670197]
[26.61715889 61.89519119]
[12.60044479 56.55368042]
[-1.71753502 63.24479294]
[-16.54449081 57.77332687]
[-23.08385086 43.38540268]
[-17.45593071 28.61712456]
[-2.99967408 22.23024750]
[11.70827770 28.01399231]
[17.94195747 42.53696823]
[31.95866966 47.87847900]
[45.97538376 53.21999359]
[53.39369202 52.65932846]
[60.22621918 58.82118225]
[74.12877655 64.45314026]
[87.58473969 57.82463837]
[91.59247589 43.36994934]
[95.60021973 28.91526222]
[99.60796356 14.46057320]
[85.79492188 8.55436039]
[72.89237976 0.85969239]
[61.13060379 -8.48611069]
[50.71949005 -19.31626320]
[41.84484100 -31.43748665]
[34.66503525 -44.63346481]
[29.30820465 -58.66869736]
[25.86994553 -73.29270935]
[24.41161919 -88.24452972]
[24.95925140 -103.25730896]
[27.50306892 -118.06313324]
[31.99767494 -132.39776611]
[38.36285782 -146.00541687]
[46.48501968 -158.64320374]
[56.21921921 -170.08561707]
[67.39173126 -180.12844849]
[79.80316925 -188.59246826]
[93.23204041 -195.32662964]
[107.43868256 -200.21075439]
[122.16957855 -203.15766907]
[137.16181946 -204.11479187]
[152.14785767 -203.06503296]
[166.86026001 -200.02713013]
[181.03645325 -195.05531311]
[194.42344666 -188.23829651]
[206.78234863 -179.69773865]
[217.89257812 -169.58604431]
[227.55587769 -158.08369446]
[235.59977722 -145.39595032]
[241.88073730 -131.74922180]
[246.28668213 -117.38708496]
[248.73895264 -102.56581879]
[249.19378662 -87.54994202]
[247.64308167 -72.60742950]
[244.11451721 -58.00494003]
[238.67105103 -44.00307846]
[231.40983582 -30.85172462]
[222.46044922 -18.78557777]
[211.98260498 -8.01997375]
[200.16328430 1.25296342]
[187.21343994 8.86774731]
[173.36416626 14.68848228]
[158.86260986 18.61129189]
[143.96759033 20.56616783]
[128.94490051 20.51822281]
[114.06264496 18.46831322]
[110.05490875 32.92300415]
[106.04716492 47.37768936]
[102.03942871 61.83237839]
[113.67124939 64.88831329]
[123.61667633 71.34024048]
[130.93325806 80.44883728]
[134.96824646 91.23015594]
[135.41596985 102.56132507]
[132.33857727 113.29736328]
[126.14906311 122.38686371]
[117.55939484 128.97486877]
[107.50000000 132.48298645]
[107.50000000 147.48298645]
[107.50000000 162.48298645]
[107.50000000 177.48298645]
[122.05847168 181.41824341]
[135.09205627 188.98204041]
[145.71531677 199.65359497]
[153.20835876 212.70124817]
[157.06561279 227.23255920]
[157.02993774 242.25547791]
[153.10978699 256.74591064]
[145.57818604 269.71771240]
[134.95372009 280.28961182]
[121.96485901 287.74523926]
[107.50000000 291.58154297]
[107.50000000 306.58154297]
[107.50000000 321.58154297]
[107.50000000 336.58154297]
[107.50000000 351.58154297]
[107.50000000 366.58154297]
[107.50000000 381.58154297]
[107.50000000 396.58154297]
[107.50000000 411.58154297]
[107.50000000 426.58154297]
[122.03988647 430.64288330]
[134.94427490 438.47738647]
[145.25555420 449.50372314]
[152.20857239 462.90362549]
[155.28736877 477.68280029]
[154.26348877 492.74447632]
[149.21287537 506.97100830]
[140.51036072 519.30664062]
[128.80169678 528.83605957]
[114.95575714 534.85211182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 120]
[32 119]
[33 118]
[34 117]
[39 55]
[40 54]
[41 52]
[42 51]
[43 50]
[56 108]
[57 107]
[58 106]
[59 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
