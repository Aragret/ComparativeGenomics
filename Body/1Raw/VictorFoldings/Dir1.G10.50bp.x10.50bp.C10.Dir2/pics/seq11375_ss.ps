%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACACUCAGGGGGGGGGGCCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCxxxxxxxxxxACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACCCCCCCCCCCAAAAUACUCA\
) } def
/len { sequence length } bind def

/coor [
[64.33249664 380.23223877]
[51.11230087 372.95977783]
[40.22549820 362.51278687]
[32.41436768 349.60351562]
[28.21148491 335.11221313]
[27.90341377 320.02688599]
[31.51115417 305.37603760]
[38.78872681 292.15866089]
[49.23993301 281.27587891]
[62.15219498 273.46975708]
[76.64513397 269.27246094]
[76.33307648 254.27571106]
[76.02101898 239.27896118]
[75.70896149 224.28219604]
[75.39691162 209.28544617]
[75.08485413 194.28869629]
[74.77279663 179.29194641]
[74.46073914 164.29518127]
[74.14868164 149.29843140]
[73.83662415 134.30168152]
[66.92065430 147.61218262]
[66.28439331 162.59867859]
[59.76353836 176.10713196]
[48.42499161 185.92738342]
[34.12388992 190.45271301]
[19.20008850 188.94268799]
[6.09532261 181.64439392]
[-3.04629254 169.75192261]
[-6.72906494 155.21104431]
[-4.35044289 140.40083313]
[3.70039868 127.74446106]
[16.10623360 119.31266022]
[30.83729935 116.48499298]
[45.48271942 119.72380829]
[60.12402725 116.46311188]
[45.71181107 112.30522156]
[31.29959297 108.14733887]
[16.88737679 103.98944855]
[2.47516155 99.83155823]
[-8.53455639 110.54051208]
[-23.42765808 114.29431915]
[-38.19797516 110.08322906]
[-48.87236786 99.04000092]
[-52.57947540 84.13520050]
[-48.32210541 69.37815857]
[-37.24546814 58.73843384]
[-22.32912636 55.07806396]
[-7.58549881 59.38167191]
[3.01945257 70.49160004]
[6.63304901 85.41934204]
[21.04526520 89.57723236]
[35.45748138 93.73512268]
[49.86969757 97.89300537]
[64.28191376 102.05089569]
[65.77053070 92.69241333]
[69.61157227 84.25595856]
[75.42829132 77.30547333]
[82.71668243 72.27310944]
[90.88773346 69.43289185]
[99.31439972 68.88723755]
[107.37944031 70.56676483]
[114.52061462 74.24295044]
[124.96042633 63.47214508]
[135.40023804 52.70133591]
[145.84005737 41.93052673]
[156.27986145 31.15971947]
[146.71241760 19.58702087]
[138.47616577 7.03204870]
[131.67108154 -6.35279274]
[126.37976837 -20.40502357]
[122.66646576 -34.95406342]
[120.57623291 -49.82329559]
[120.13446045 -64.83222961]
[121.34650421 -79.79866028]
[124.19764709 -94.54091644]
[128.65328979 -108.88004303]
[134.65933228 -122.64196777]
[142.14288330 -135.65963745]
[151.01307678 -147.77503967]
[161.16224670 -158.84107971]
[172.46720886 -168.72344971]
[184.79071045 -177.30216980]
[197.98315430 -184.47311401]
[211.88441467 -190.14923096]
[226.32572937 -194.26162720]
[241.13179016 -196.76036072]
[256.12286377 -197.61511230]
[271.11700439 -196.81550598]
[285.93215942 -194.37123108]
[300.38848877 -190.31199646]
[314.31051636 -184.68704224]
[327.52926636 -177.56466675]
[339.88421631 -169.03132629]
[351.22546387 -159.19059753]
[361.41525269 -148.16195679]
[370.32995605 -136.07926941]
[377.86132812 -123.08920288]
[383.91793823 -109.34946442]
[388.42630005 -95.02682495]
[391.33163452 -80.29515076]
[392.59872437 -65.33327484]
[392.21215820 -50.32282257]
[390.17663574 -35.44599915]
[386.51684570 -20.88340187]
[381.27725220 -6.81180620]
[374.52145386 6.59797287]
[366.33142090 19.18315315]
[356.80661011 30.79096031]
[346.06262207 41.28048706]
[334.22991943 50.52440262]
[321.45208740 58.41048813]
[307.88427734 64.84302521]
[293.69116211 69.74391174]
[279.04504395 73.05367279]
[264.12371826 74.73211670]
[249.10830688 74.75888062]
[234.18109131 73.13362885]
[219.52326965 69.87609863]
[205.31277466 65.02583313]
[191.72212219 58.64170074]
[178.91625977 50.80120850]
[167.05067444 41.59953308]
[156.61085510 52.37033844]
[146.17105103 63.14114761]
[135.73123169 73.91195679]
[125.29141998 84.68276215]
[131.05731201 101.97925568]
[125.57215881 120.33612823]
[109.81188965 132.78808594]
[88.83338165 133.98962402]
[89.14543915 148.98637390]
[89.45749664 163.98312378]
[89.76954651 178.97988892]
[90.08160400 193.97663879]
[90.39366150 208.97338867]
[90.70571899 223.97013855]
[91.01777649 238.96690369]
[91.32983398 253.96365356]
[91.64188385 268.96041870]
[106.29688263 272.55117798]
[119.52268982 279.81344604]
[130.41755676 290.25201416]
[138.23864746 303.15524292]
[142.45272827 317.64331055]
[142.77244568 332.72839355]
[139.17602539 347.38201904]
[131.90866089 360.60501099]
[121.46585083 371.49584961]
[108.55962372 379.31195068]
[94.06993103 383.52044678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[62 126]
[63 125]
[64 124]
[65 123]
[66 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
