%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCUUAAUUUUAAGGGGGGGGGGUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUAxxxxxxxxxxACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAACCCCCCCCCCUCUCCUUAAUUAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.09116364 177.35813904]
[70.72112274 173.13893127]
[57.40919495 166.27653503]
[45.63646317 157.01895142]
[35.82838821 145.70075989]
[28.33942032 132.73097229]
[23.44020844 118.57832336]
[21.30780602 103.75426483]
[22.01927757 88.79453278]
[25.54890633 74.23974609]
[31.76914024 60.61592484]
[40.45518112 48.41540909]
[51.29312134 38.07911682]
[63.89128876 29.98059654]
[77.79439545 24.41252136]
[92.50000000 21.57611465]
[92.50000000 6.57611465]
[92.50000000 -8.42388535]
[92.50000000 -23.42388535]
[92.50000000 -38.42388535]
[92.50000000 -53.42388535]
[92.50000000 -68.42388153]
[92.50000000 -83.42388153]
[92.50000000 -98.42388153]
[92.50000000 -113.42388153]
[92.50000000 -128.42388916]
[77.52034760 -129.28033447]
[62.61402512 -130.99057007]
[47.82964325 -133.54899597]
[33.21543503 -136.94726562]
[18.81906128 -141.17431641]
[4.68748665 -146.21633911]
[-9.13319683 -152.05690002]
[-22.59790993 -158.67694092]
[-35.66273117 -166.05487061]
[-48.28504562 -174.16662598]
[-60.42368698 -182.98574829]
[-72.03905487 -192.48345947]
[-83.09326172 -202.62879944]
[-93.55025482 -213.38867188]
[-103.37592316 -224.72796631]
[-112.53822327 -236.60971069]
[-121.00725555 -248.99513245]
[-128.75541687 -261.84384155]
[-135.75741577 -275.11395264]
[-141.99041748 -288.76214600]
[-147.43408203 -302.74389648]
[-152.07067871 -317.01364136]
[-155.88507080 -331.52481079]
[-158.86480713 -346.23007202]
[-161.00018311 -361.08145142]
[-162.28421021 -376.03051758]
[-162.71273804 -391.02850342]
[-162.28433228 -406.02651978]
[-161.00041199 -420.97558594]
[-158.86515808 -435.82699585]
[-155.88552856 -450.53225708]
[-152.07125854 -465.04345703]
[-147.43478394 -479.31323242]
[-141.99121094 -493.29504395]
[-135.75831604 -506.94329834]
[-128.75642395 -520.21343994]
[-121.00836945 -533.06219482]
[-112.53942871 -545.44769287]
[-103.37722778 -557.32952881]
[-93.55164337 -568.66888428]
[-83.09473419 -579.42883301]
[-72.04060364 -589.57427979]
[-60.42531586 -599.07208252]
[-48.28674698 -607.89129639]
[-35.66449356 -616.00317383]
[-22.59972954 -623.38116455]
[-9.13506889 -630.00134277]
[4.68556929 -635.84197998]
[18.81710434 -640.88415527]
[33.21344376 -645.11126709]
[47.82762909 -648.50970459]
[62.61198807 -651.06823730]
[77.51830292 -652.77856445]
[92.49794006 -653.63513184]
[107.50205994 -653.63513184]
[122.48169708 -652.77856445]
[137.38801575 -651.06823730]
[152.17237854 -648.50970459]
[166.78656006 -645.11126709]
[181.18289185 -640.88415527]
[195.31443787 -635.84197998]
[209.13507080 -630.00134277]
[222.59973145 -623.38116455]
[235.66448975 -616.00317383]
[248.28674316 -607.89129639]
[260.42532349 -599.07208252]
[272.04061890 -589.57427979]
[283.09472656 -579.42883301]
[293.55163574 -568.66888428]
[303.37722778 -557.32952881]
[312.53942871 -545.44769287]
[321.00836182 -533.06219482]
[328.75640869 -520.21343994]
[335.75833130 -506.94329834]
[341.99121094 -493.29504395]
[347.43478394 -479.31323242]
[352.07125854 -465.04345703]
[355.88552856 -450.53225708]
[358.86514282 -435.82699585]
[361.00039673 -420.97558594]
[362.28433228 -406.02651978]
[362.71273804 -391.02850342]
[362.28421021 -376.03051758]
[361.00018311 -361.08145142]
[358.86480713 -346.23007202]
[355.88507080 -331.52481079]
[352.07067871 -317.01364136]
[347.43408203 -302.74389648]
[341.99041748 -288.76214600]
[335.75741577 -275.11395264]
[328.75540161 -261.84384155]
[321.00726318 -248.99513245]
[312.53820801 -236.60971069]
[303.37591553 -224.72796631]
[293.55026245 -213.38867188]
[283.09326172 -202.62879944]
[272.03906250 -192.48345947]
[260.42367554 -182.98574829]
[248.28504944 -174.16662598]
[235.66273499 -166.05487061]
[222.59791565 -158.67694092]
[209.13319397 -152.05690002]
[195.31251526 -146.21633911]
[181.18093872 -141.17431641]
[166.78456116 -136.94726562]
[152.17034912 -133.54899597]
[137.38597107 -130.99057007]
[122.47965240 -129.28033447]
[107.50000000 -128.42388916]
[107.50000000 -113.42388153]
[107.50000000 -98.42388153]
[107.50000000 -83.42388153]
[107.50000000 -68.42388153]
[107.50000000 -53.42388535]
[107.50000000 -38.42388535]
[107.50000000 -23.42388535]
[107.50000000 -8.42388535]
[107.50000000 6.57611465]
[107.50000000 21.57611465]
[122.20560455 24.41252136]
[136.10870361 29.98059654]
[148.70687866 38.07911682]
[159.54481506 48.41540909]
[168.23086548 60.61592484]
[174.45109558 74.23974609]
[177.98072815 88.79453278]
[178.69219971 103.75426483]
[176.55978394 118.57832336]
[171.66058350 132.73097229]
[164.17161560 145.70075989]
[154.36354065 157.01895142]
[142.59080505 166.27653503]
[129.27888489 173.13893127]
[114.90883636 177.35813904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
