%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAUUAGCUGGGGGGGGGGCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCxxxxxxxxxxAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAACCGCAUCCAUAAUCCCCCCCCCCCCUUCUAAUAGCU\
) } def
/len { sequence length } bind def

/coor [
[52.45749283 589.55639648]
[38.96861267 582.82489014]
[27.48311234 573.06030273]
[18.66874313 560.83044434]
[13.03796101 546.84625244]
[10.91813278 531.92077637]
[12.43250179 516.92175293]
[17.49302483 502.72125244]
[25.80549049 490.14483643]
[36.88661957 479.92367554]
[50.09217453 472.65203857]
[64.65440369 468.75265503]
[64.34642029 453.75582886]
[64.03844452 438.75900269]
[63.73046875 423.76214600]
[63.42248917 408.76531982]
[63.11451340 393.76846313]
[62.80653381 378.77163696]
[62.49855804 363.77481079]
[62.19057846 348.77795410]
[61.88260269 333.78112793]
[51.85516739 344.93685913]
[37.21950912 348.22280884]
[23.38556862 342.42434692]
[15.46694469 329.68484497]
[16.39068794 314.71331787]
[25.81534195 303.04385376]
[40.25716782 298.99002075]
[54.37786865 304.05023193]
[62.95753098 316.35302734]
[65.10610962 301.50769043]
[67.25469208 286.66238403]
[69.40326691 271.81704712]
[71.55184937 256.97174072]
[60.76908875 246.73110962]
[58.05189133 231.92973328]
[64.64842224 218.20606995]
[78.21785736 210.91383362]
[80.36643219 196.06851196]
[82.51501465 181.22317505]
[84.66358948 166.37785339]
[72.84103394 152.46009827]
[74.91933441 133.99765015]
[90.04885101 122.67573547]
[91.58614349 107.75472260]
[79.71608734 116.92542267]
[64.72231293 116.49323273]
[53.40022278 106.65400696]
[50.88115311 91.86705017]
[58.30678177 78.83400726]
[72.31170654 73.46166992]
[86.54868317 78.18483734]
[94.56492615 90.86119080]
[98.22363281 76.31423950]
[94.08607483 61.04363632]
[104.69403839 50.58800125]
[103.75230408 41.43874359]
[108.58008575 35.78147125]
[112.53669739 21.31270409]
[116.49330139 6.84393644]
[120.44991302 -7.62483072]
[124.40652466 -22.09359932]
[113.53794861 -11.75560570]
[100.23331451 -4.82836580]
[85.53141785 -1.85274434]
[70.58016968 -3.06107378]
[56.54692841 -8.35900974]
[44.52738571 -17.33289909]
[35.46001434 -29.28207207]
[30.05277824 -43.27356339]
[28.72786140 -58.21493530]
[31.58871269 -72.93959045]
[38.41196060 -86.29785919]
[48.66485977 -97.24674225]
[61.54688263 -104.93137360]
[76.05221558 -108.75174713]
[91.04831696 -108.40957642]
[105.36430359 -103.93157959]
[117.88241577 -95.66738892]
[127.62525940 -84.26225281]
[133.83212280 -70.60667419]
[136.01840210 -55.76685715]
[134.01266479 -40.89894485]
[143.41651917 -52.58515167]
[152.82037354 -64.27136230]
[161.98231506 -76.14818573]
[170.89845276 -88.21061707]
[179.81460571 -100.27304840]
[175.98062134 -115.43334198]
[182.83496094 -129.48866272]
[197.14123535 -135.80252075]
[212.14443970 -131.39369202]
[220.76052856 -118.34390259]
[218.92126465 -102.81486511]
[207.49505615 -92.13890839]
[191.87704468 -91.35689545]
[182.96089172 -79.29446411]
[174.04473877 -67.23203278]
[173.86801147 -62.40316391]
[170.61444092 -57.64899445]
[164.50657654 -54.86750412]
[155.10272217 -43.18129730]
[145.69886780 -31.49508667]
[138.87528992 -18.13698769]
[134.91868591 -3.66822052]
[130.96206665 10.80054665]
[127.00546265 25.26931381]
[123.04885101 39.73808289]
[119.24098969 54.24670792]
[123.64024353 68.47681427]
[112.77058411 79.97293854]
[109.11187744 94.51989746]
[106.50715637 109.29201508]
[104.96986389 124.21302795]
[114.17420959 131.85295105]
[118.47649384 142.88543701]
[116.90630341 154.50122070]
[109.97297668 163.80261230]
[99.50891113 168.52644348]
[97.36033630 183.37176514]
[95.21175385 198.21708679]
[93.06317902 213.06240845]
[104.00827789 223.90264893]
[106.44314575 238.93345642]
[99.64090729 252.35707092]
[86.39717102 259.12030029]
[84.24858856 273.96563721]
[82.10001373 288.81094360]
[79.95143127 303.65628052]
[77.80285645 318.50158691]
[76.87944031 333.47314453]
[77.18741608 348.46997070]
[77.49539185 363.46682739]
[77.80337524 378.46365356]
[78.11135101 393.46051025]
[78.41932678 408.45733643]
[78.72730255 423.45416260]
[79.03528595 438.45101929]
[79.34326172 453.44784546]
[79.65123749 468.44470215]
[94.36127472 471.74291992]
[107.85423279 478.46627808]
[119.34564972 488.22387695]
[128.16743469 500.44842529]
[133.80668640 514.42919922]
[135.93556213 529.35339355]
[134.43029785 544.35333252]
[129.37837219 558.55688477]
[121.07353973 571.13836670]
[109.99861145 581.36621094]
[96.79746246 588.64587402]
[82.23760986 592.55401611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
[38 122]
[39 121]
[40 120]
[41 119]
[44 114]
[45 113]
[53 112]
[54 111]
[56 109]
[58 108]
[59 107]
[60 106]
[61 105]
[62 104]
[83 103]
[84 102]
[85 101]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
