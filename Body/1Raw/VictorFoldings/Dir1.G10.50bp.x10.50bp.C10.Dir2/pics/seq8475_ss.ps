%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAACCACGGGGGGGGGGCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGxxxxxxxxxxGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCCCCCCCCCCCACCAAUCAC\
) } def
/len { sequence length } bind def

/coor [
[66.13024902 356.95581055]
[54.91481781 346.89047241]
[46.32341766 334.50967407]
[40.81937408 320.48104858]
[38.69951630 305.56115723]
[40.07815933 290.55462646]
[44.88095856 276.27072144]
[52.84890747 263.47976685]
[63.55229950 252.87156677]
[76.41391754 245.01818848]
[90.74014282 240.34317017]
[89.49327087 225.39508057]
[88.24639893 210.44699097]
[86.99951935 195.49890137]
[85.75264740 180.55081177]
[84.50577545 165.60273743]
[83.25889587 150.65464783]
[82.01202393 135.70655823]
[70.11964417 126.56481934]
[55.35358810 129.20368958]
[40.58753204 131.84254456]
[25.82147789 134.48141479]
[11.05542183 137.12028503]
[9.42957687 152.13804626]
[3.63732219 166.08889771]
[-5.85179043 177.84191895]
[-18.26852036 186.44433594]
[-32.60630035 191.19877625]
[-47.70282745 191.71984863]
[-62.33429718 187.96527100]
[-75.31460571 180.23945618]
[-85.59148407 169.16865540]
[-92.33184814 155.65037537]
[-94.98927307 140.78044128]
[-93.34834290 125.76431274]
[-87.54207611 111.81928253]
[-78.04116058 100.07580566]
[-65.61579132 91.48587036]
[-51.27324677 86.74582672]
[-36.17620087 86.23993683]
[-21.54850960 90.00919342]
[-8.57597446 97.74806213]
[1.68978119 108.82917023]
[8.41655731 122.35422516]
[23.18261337 119.71536255]
[37.94866943 117.07649231]
[52.71472549 114.43762970]
[67.48078156 111.79876709]
[66.19129944 100.84142303]
[68.41439056 90.28863525]
[73.76312256 81.21139526]
[81.54190826 74.47927094]
[90.83321381 70.67763519]
[100.60417938 70.05859375]
[109.82086945 72.52957916]
[118.33196259 60.17800522]
[126.84305573 47.82643509]
[135.35414124 35.47486115]
[143.86523438 23.12328911]
[145.32434082 7.36951017]
[158.91706848 1.27957916]
[166.90698242 -11.41535091]
[174.36189270 -24.43165970]
[174.50642395 -40.25220490]
[187.54586792 -47.45095444]
[195.00077820 -60.46726608]
[202.45568848 -73.48357391]
[190.64094543 -82.76956940]
[180.30422974 -93.67691040]
[171.66586304 -105.97310638]
[164.90997314 -119.39607239]
[160.18057251 -133.65968323]
[157.57846069 -148.45991516]
[157.15910339 -163.48129272]
[158.93142700 -178.40365601]
[162.85766602 -192.90890503]
[168.85414124 -206.68788147]
[176.79302979 -219.44688416]
[186.50509644 -230.91394043]
[197.78335571 -240.84463501]
[210.38740540 -249.02729797]
[224.04856873 -255.28752136]
[238.47567749 -259.49185181]
[253.36120605 -261.55068970]
[268.38787842 -261.42013550]
[283.23538208 -259.10299683]
[297.58728027 -254.64863586]
[311.13760376 -248.15200806]
[323.59759521 -239.75158691]
[334.70159912 -229.62643433]
[344.21298218 -217.99237061]
[351.92898560 -205.09736633]
[357.68515015 -191.21629333]
[361.35879517 -176.64500427]
[362.87158203 -161.69410706]
[362.19128418 -146.68228149]
[359.33242798 -131.92948914]
[354.35592651 -117.75019836]
[347.36782837 -104.44664764]
[338.51715088 -92.30239105]
[327.99246216 -81.57628632]
[316.01818848 -72.49696350]
[302.84948730 -65.25794983]
[288.76708984 -60.01354599]
[274.07113647 -56.87553406]
[259.07489014 -55.91080093]
[244.09800720 -57.13991165]
[229.45970154 -60.53666687]
[215.47200012 -66.02866364]
[208.01708984 -53.01235580]
[200.56217957 -39.99604416]
[200.95088196 -25.10651207]
[187.37820435 -16.97674942]
[179.92329407 -3.96044016]
[180.57720947 -1.17122412]
[180.12908936 2.05261993]
[178.40473938 5.27884197]
[175.39463806 8.01932907]
[171.26863098 9.79066944]
[170.41828918 24.66098213]
[156.21681213 31.63438034]
[147.70571899 43.98595047]
[139.19462585 56.33752441]
[130.68353271 68.68909454]
[122.17244720 81.04067230]
[130.32350159 96.47020721]
[128.34379578 114.60054779]
[116.03931427 129.11241150]
[96.96011353 134.45968628]
[98.20698547 149.40777588]
[99.45385742 164.35585022]
[100.70073700 179.30393982]
[101.94760895 194.25202942]
[103.19448090 209.20011902]
[104.44136047 224.14820862]
[105.68823242 239.09628296]
[120.59101105 241.33320618]
[134.57598877 246.94721985]
[146.88897705 255.63554382]
[156.86595154 266.92965698]
[163.96885681 280.22045898]
[167.81465149 294.79119873]
[168.19593811 309.85610962]
[165.09213257 324.60272217]
[158.67065430 338.23583984]
[149.27778625 350.02017212]
[137.42005920 359.32025146]
[123.73697662 365.63449097]
[108.96643829 368.62243652]
[93.90499115 368.12289429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[55 125]
[56 124]
[57 123]
[58 122]
[59 121]
[61 119]
[62 114]
[63 113]
[65 111]
[66 110]
[67 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
