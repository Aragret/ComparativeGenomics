%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACUACUCGGGGGGGGGGCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUxxxxxxxxxxUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCCCCCCCCCCCUUACUUCUC\
) } def
/len { sequence length } bind def

/coor [
[75.51329803 380.54983521]
[61.66735840 374.53381348]
[49.95869446 365.00439453]
[41.25617218 352.66873169]
[36.20557022 338.44219971]
[35.18167877 323.38052368]
[38.26047516 308.60137939]
[45.21349716 295.20144653]
[55.52478409 284.17510986]
[68.42916107 276.34060669]
[82.96904755 272.27929688]
[82.96904755 257.27929688]
[82.96904755 242.27928162]
[82.96904755 227.27928162]
[82.96904755 212.27928162]
[82.96904755 197.27928162]
[82.96904755 182.27928162]
[82.96904755 167.27928162]
[82.96904755 152.27928162]
[82.96904755 137.27928162]
[82.96904755 122.27928162]
[78.36348724 108.00382233]
[69.59728241 95.83198547]
[60.83106995 83.66014862]
[52.06486511 71.48831177]
[38.04815292 66.14679718]
[23.40464973 69.39762878]
[8.76114845 72.64845276]
[2.70158601 86.93345642]
[-10.61453247 94.89967346]
[-26.06688881 93.48392487]
[-37.71373367 83.23060608]
[-41.07662201 68.08232117]
[-34.86244965 53.86389160]
[-21.46069717 46.04259872]
[-6.02460957 47.62588501]
[5.51032305 58.00495148]
[20.15382385 54.75412369]
[34.79732513 51.50329971]
[40.42928314 37.60074234]
[32.17699432 25.07478142]
[23.92470360 12.54881859]
[14.29617786 1.04701555]
[3.41735244 -9.28018951]
[-7.56831217 -19.49366951]
[-18.65962791 -29.59231949]
[-29.75094223 -39.69096756]
[-40.84225845 -49.78961945]
[-51.93357468 -59.88826752]
[-67.34679413 -63.45801926]
[-71.54852295 -77.74768829]
[-86.71633911 -74.47400665]
[-100.89794922 -80.77175140]
[-108.64024353 -94.21929932]
[-106.96614075 -109.64580536]
[-96.51937103 -121.11945343]
[-81.31693268 -124.22840118]
[-67.20447540 -117.77719116]
[-59.60852051 -104.24644470]
[-61.44987488 -88.83900452]
[-46.82997513 -85.99157715]
[-41.83492279 -70.97958374]
[-30.74360847 -60.88093185]
[-19.65229416 -50.78228378]
[-8.56097794 -40.68363571]
[2.53033733 -30.58498383]
[9.63959503 -28.39315987]
[13.74455738 -20.15901375]
[24.62338257 -9.83181000]
[22.13639450 -24.62420273]
[26.68636703 -38.91748047]
[37.26688766 -49.55009842]
[51.53763962 -54.17022324]
[66.34207153 -51.75592422]
[78.40557098 -42.84122086]
[85.05981445 -29.39796638]
[84.83293152 -14.39968204]
[77.77511597 -1.16385126]
[65.44748688 7.38188219]
[50.57680130 9.34728146]
[36.45066452 4.29652977]
[44.70295334 16.82249260]
[52.95524597 29.34845352]
[67.94793701 28.88041115]
[75.40284729 15.86410236]
[82.85775757 2.84779263]
[85.48297882 -13.90167236]
[102.30460358 -16.01576042]
[108.99275970 -0.43677229]
[95.87406921 10.30270290]
[88.41915894 23.31901169]
[80.96424866 36.33532333]
[79.37055969 45.63351822]
[75.60967255 53.39139938]
[70.32547760 59.16368866]
[64.23670197 62.72210693]
[73.00290680 74.89394379]
[81.76911926 87.06578064]
[90.53532410 99.23761749]
[83.84074402 89.42464447]
[86.23503113 74.32853699]
[100.27001190 61.05510712]
[123.63655090 57.34896851]
[138.59680176 56.25765991]
[153.55705261 55.16634750]
[159.11347961 40.95055389]
[170.29350281 30.55970001]
[184.87731934 26.05689621]
[199.96928406 28.33617783]
[212.57290649 36.94499588]
[220.18569946 50.17405701]
[221.29614258 65.39672852]
[215.68377686 79.59053040]
[204.46292114 89.93727875]
[189.86149597 94.38261414]
[174.77861023 92.04391479]
[162.20899963 83.38553619]
[154.64836121 70.12659454]
[139.68811035 71.21791077]
[124.72786713 72.30921936]
[121.47689819 86.95336914]
[118.22621155 101.59622192]
[131.31936646 108.91532898]
[147.70050049 108.14696503]
[156.32756042 122.09350586]
[148.32574463 136.40794373]
[131.92665100 136.36480713]
[124.00025940 122.00848389]
[110.90710449 114.68937683]
[97.96904755 122.27928162]
[97.96904755 137.27928162]
[97.96904755 152.27928162]
[97.96904755 167.27928162]
[97.96904755 182.27928162]
[97.96904755 197.27928162]
[97.96904755 212.27928162]
[97.96904755 227.27928162]
[97.96904755 242.27928162]
[97.96904755 257.27929688]
[97.96904755 272.27929688]
[112.50893402 276.34060669]
[125.41331482 284.17510986]
[135.72460938 295.20144653]
[142.67762756 308.60137939]
[145.75642395 323.38052368]
[144.73252869 338.44219971]
[139.68193054 352.66873169]
[130.97940063 365.00439453]
[119.27074432 374.53381348]
[105.42480469 380.54983521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 99]
[23 98]
[24 97]
[25 96]
[26 39]
[27 38]
[28 37]
[40 83]
[41 82]
[42 81]
[43 69]
[44 68]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[51 60]
[84 92]
[85 91]
[86 90]
[103 120]
[104 119]
[105 118]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
