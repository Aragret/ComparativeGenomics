%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUACCUAAGGGGGGGGGGAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAxxxxxxxxxxCUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCCCCCCCCCCCAACUACCUAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 381.66479492]
[71.01555634 376.11178589]
[58.81560135 367.24545288]
[49.20452881 355.62313843]
[42.78650284 341.97543335]
[39.96496582 327.16024780]
[40.91728210 312.10888672]
[45.58358765 297.76745605]
[53.67055511 285.03750610]
[64.66983032 274.71923828]
[77.88998413 267.46124268]
[92.50000000 263.71981812]
[92.50000000 248.71981812]
[92.50000000 233.71981812]
[92.50000000 218.71981812]
[92.50000000 203.71981812]
[92.50000000 188.71981812]
[92.50000000 173.71981812]
[92.50000000 158.71981812]
[92.50000000 143.71981812]
[92.50000000 128.71981812]
[92.50000000 113.71981812]
[88.54338837 99.25104523]
[80.91042328 86.33834839]
[73.27745056 73.42565155]
[52.40835190 72.03060150]
[37.83633804 54.99649429]
[39.93862152 31.17086601]
[25.51123619 27.06592178]
[11.08385086 22.96097755]
[-3.34353375 18.85603142]
[-10.86419487 30.28708649]
[-21.29711533 39.11444473]
[-33.78474426 44.62501907]
[-47.30416870 46.37784576]
[-60.75089264 44.23933411]
[-73.02907562 38.39342117]
[-83.14085388 29.32578087]
[-90.26741028 17.78348923]
[-93.83528137 4.71347618]
[-93.56251526 -8.81515312]
[-107.80921173 -13.50895405]
[-122.05590057 -18.20275497]
[-136.97001648 -12.29102230]
[-150.81861877 -20.39015007]
[-152.97824097 -36.28718185]
[-141.79220581 -47.78727341]
[-125.84147644 -46.06853867]
[-117.36209869 -32.44944763]
[-103.11540985 -27.75564575]
[-88.86872101 -23.06184578]
[-78.98015594 -36.15209579]
[-65.19850159 -45.09880447]
[-49.16691208 -48.81449127]
[-32.80390930 -46.83660126]
[-18.07377434 -39.38500977]
[-6.75076532 -27.33772850]
[-0.20540026 -12.12748718]
[0.76141113 4.42864704]
[15.18879604 8.53359222]
[29.61618042 12.63853741]
[44.04356384 16.74348259]
[33.35036087 6.22419691]
[22.65715408 -4.29508734]
[11.96394730 -14.81437206]
[-1.49905515 -21.42856598]
[-12.47526741 -31.65220261]
[-20.02745438 -44.61231232]
[-23.51075554 -59.20226288]
[-22.62773705 -74.17624664]
[-17.45379829 -88.25568390]
[-8.43073177 -100.23834229]
[3.67100620 -109.10107422]
[17.81807518 -114.08709717]
[32.80249023 -114.77066803]
[47.34477234 -111.09342194]
[60.20318222 -103.36935425]
[70.27976990 -92.25799561]
[76.71413422 -78.70812225]
[78.95684052 -63.87672806]
[76.81639862 -49.03022766]
[70.47277832 -35.43208694]
[68.73669434 -20.53289223]
[67.00061798 -5.63369703]
[65.26454163 9.26549911]
[73.93114471 -2.97745490]
[82.59775543 -15.22040844]
[91.26435852 -27.46336174]
[99.93096924 -39.70631409]
[100.90449524 -56.07654190]
[115.68743134 -63.17561340]
[129.07235718 -53.70061493]
[127.29001617 -37.39861298]
[112.17391968 -31.03970909]
[103.50731659 -18.79675484]
[94.84070587 -6.55380106]
[86.17410278 5.68915272]
[77.50749207 17.93210602]
[89.51052856 27.53394127]
[95.16522980 41.05407715]
[93.71417999 54.91770172]
[86.19014740 65.79267883]
[93.82312012 78.70538330]
[101.45608521 91.61808014]
[112.25946808 80.56414795]
[130.53868103 78.32112122]
[145.49995422 79.39819336]
[160.46124268 80.47525787]
[175.42251587 81.55233002]
[190.38380432 82.62940216]
[197.93180847 69.36327362]
[210.49317932 60.69292831]
[225.57382202 58.33987427]
[240.17947388 62.77131271]
[251.41017151 73.10737610]
[257.03607178 87.29582977]
[255.94009399 102.51954651]
[248.33988953 115.75585175]
[235.74447632 124.37666321]
[220.65469360 126.67031097]
[206.06658936 122.18138885]
[194.87669373 111.80117798]
[189.30673218 97.59068298]
[174.34544373 96.51361084]
[159.38417053 95.43653870]
[144.42288208 94.35947418]
[129.46160889 93.28240204]
[123.97120667 98.39175415]
[127.33049011 113.01075745]
[112.99040222 108.61046600]
[107.50000000 113.71981812]
[107.50000000 128.71981812]
[107.50000000 143.71981812]
[107.50000000 158.71981812]
[107.50000000 173.71981812]
[107.50000000 188.71981812]
[107.50000000 203.71981812]
[107.50000000 218.71981812]
[107.50000000 233.71981812]
[107.50000000 248.71981812]
[107.50000000 263.71981812]
[122.11001587 267.46124268]
[135.33016968 274.71923828]
[146.32945251 285.03750610]
[154.41641235 297.76745605]
[159.08271790 312.10888672]
[160.03503418 327.16024780]
[157.21350098 341.97543335]
[150.79547119 355.62313843]
[141.18440247 367.24545288]
[128.98443604 376.11178589]
[114.96250153 381.66479492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 104]
[24 103]
[25 102]
[28 62]
[29 61]
[30 60]
[31 59]
[41 51]
[42 50]
[43 49]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
