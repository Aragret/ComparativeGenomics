%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCGCCAACGGGGGGGGGGUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCxxxxxxxxxxCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUCCCCCCCCCCAUCCGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[103.52721405 564.86889648]
[90.30702209 557.59643555]
[79.42021942 547.14941406]
[71.60908508 534.24017334]
[67.40620422 519.74884033]
[67.09812927 504.66351318]
[70.70587158 490.01269531]
[77.98344421 476.79531860]
[88.43465424 465.91253662]
[101.34691620 458.10638428]
[115.83985138 453.90911865]
[115.52779388 438.91235352]
[115.21574402 423.91561890]
[114.90368652 408.91885376]
[114.59162903 393.92208862]
[114.27957153 378.92535400]
[113.96751404 363.92858887]
[113.65545654 348.93182373]
[113.34340668 333.93508911]
[112.87535858 318.94238281]
[112.25138092 303.95538330]
[111.62740326 288.96835327]
[111.00342560 273.98132324]
[102.29563141 265.52667236]
[101.68969727 253.00260925]
[110.05948639 243.13343811]
[109.74742889 228.13668823]
[109.43537140 213.13992310]
[96.31838226 206.08229065]
[88.44281769 193.32174683]
[88.00897980 178.23274231]
[95.23348236 164.86474609]
[108.26419067 156.85549927]
[107.95213318 141.85874939]
[107.64007568 126.86199951]
[107.32801819 111.86524200]
[99.64776611 136.20825195]
[68.31174469 149.14349365]
[26.78374290 134.03036499]
[12.76702976 128.68884277]
[-1.24968362 123.34733582]
[-15.26639652 118.00582123]
[-29.28310966 112.66430664]
[-43.60108948 119.35542297]
[-58.42804337 113.88395691]
[-64.96740723 99.49603271]
[-59.33948517 84.72775269]
[-44.88322830 78.34087372]
[-30.17527771 84.12461853]
[-23.94159698 98.64759827]
[-9.92488384 103.98910522]
[4.09182882 109.33061981]
[18.10854149 114.67213440]
[32.12525558 120.01364899]
[36.81883621 114.16383362]
[31.37995529 100.18461609]
[46.20599747 102.46421051]
[50.89957809 96.61439514]
[42.64728928 84.08843231]
[27.75232506 77.22752380]
[26.51620674 60.87503052]
[40.21054840 51.85299683]
[54.74778366 59.44252014]
[55.17325211 75.83614349]
[63.42554092 88.36210632]
[77.74877167 83.90509033]
[92.07073212 79.44847870]
[91.75868225 64.45172119]
[77.70421600 58.58725739]
[67.25484467 47.50888062]
[62.22097015 33.13598633]
[63.47475433 17.95877075]
[70.79896545 4.60677290]
[82.92464447 -4.60668945]
[97.75093079 -8.08533001]
[112.70909882 -5.22645235]
[125.20754242 3.47462559]
[133.08084106 16.51038933]
[134.96488953 31.62231255]
[130.53326416 46.19216537]
[120.55377960 57.69563293]
[106.75543213 64.13966370]
[107.06748962 79.13642120]
[120.45377350 85.90453339]
[132.71614075 77.26541901]
[139.54142761 62.99215698]
[154.40209961 61.98717499]
[166.66445923 53.34806061]
[178.92683411 44.70894241]
[191.18919373 36.06982803]
[187.19967651 21.44589043]
[188.45552063 6.33964539]
[194.80508423 -7.42475748]
[205.48164368 -18.18519974]
[219.19592285 -24.64230347]
[234.29187012 -26.01634598]
[248.94659424 -22.14140129]
[261.39044189 -13.48538780]
[270.12075806 -1.09356403]
[274.08331299 13.53769875]
[272.79965210 28.64160538]
[266.42471313 42.39428329]
[255.72834778 53.13502884]
[242.00219727 59.56685257]
[226.90373230 60.91307068]
[212.25617981 57.01112366]
[199.82830811 48.33219528]
[187.56594849 56.97130966]
[175.30357361 65.61042786]
[163.04121399 74.24954224]
[157.09300232 87.90487671]
[141.35525513 89.52778625]
[129.09289551 98.16690063]
[122.32477570 111.55319214]
[122.63683319 126.54994202]
[122.94889069 141.54669189]
[123.26094055 156.54345703]
[136.61354065 164.00369263]
[144.38787842 177.05960083]
[144.58210754 192.15359497]
[137.24417114 205.23069763]
[124.43212128 212.82788086]
[124.74417877 227.82463074]
[125.05623627 242.82138062]
[134.96328735 258.30783081]
[125.99044800 273.35736084]
[126.61442566 288.34439087]
[127.23840332 303.33139038]
[127.86237335 318.31842041]
[131.36499023 326.82626343]
[128.34016418 333.62301636]
[128.65220642 348.61978149]
[128.96426392 363.61654663]
[129.27632141 378.61328125]
[129.58837891 393.61004639]
[129.90043640 408.60678101]
[130.21249390 423.60354614]
[130.52455139 438.60031128]
[130.83660889 453.59704590]
[145.49159241 457.18783569]
[158.71740723 464.45007324]
[169.61227417 474.88867188]
[177.43338013 487.79190063]
[181.64744568 502.27993774]
[181.96716309 517.36505127]
[178.37074280 532.01867676]
[171.10337830 545.24163818]
[160.66056824 556.13250732]
[147.75434875 563.94860840]
[133.26464844 568.15710449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[26 124]
[27 123]
[28 122]
[33 117]
[34 116]
[35 115]
[36 114]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[58 65]
[59 64]
[67 83]
[68 82]
[84 113]
[85 112]
[87 110]
[88 109]
[89 108]
[90 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
