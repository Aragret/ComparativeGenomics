%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAUACACGGGGGGGGGGUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUxxxxxxxxxxAACGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUCCCCCCCCCCAGCAAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[13.69563961 468.27868652]
[-0.15029886 462.26266479]
[-11.85896015 452.73324585]
[-20.56148529 440.39755249]
[-25.61208725 426.17105103]
[-26.63597870 411.10937500]
[-23.55717850 396.33020020]
[-16.60415649 382.93026733]
[-6.29287338 371.90393066]
[6.61150789 364.06942749]
[21.15139389 360.00811768]
[21.15139389 345.00811768]
[21.15139389 330.00811768]
[21.15139389 315.00811768]
[21.15139389 300.00811768]
[21.15139389 285.00811768]
[21.15139389 270.00811768]
[21.15139389 255.00811768]
[21.15139389 240.00811768]
[21.15139389 225.00811768]
[17.43958855 239.54161072]
[4.94030428 247.83425903]
[-9.89304829 245.60453796]
[-19.40197754 234.00366211]
[-18.67700005 219.02119446]
[-8.09242630 208.39260864]
[6.88885689 207.60610962]
[-7.81910467 204.66062927]
[-22.52706528 201.71514893]
[-37.23502731 198.76965332]
[-51.94298935 195.82417297]
[-66.65094757 192.87869263]
[-76.95986176 201.60704041]
[-90.22196960 202.76652527]
[-101.55221558 196.15592957]
[-106.90712738 184.39491272]
[-121.55062866 181.14408875]
[-136.19412231 177.89326477]
[-147.07659912 188.82830811]
[-162.14834595 192.12162781]
[-176.60003662 186.72233582]
[-185.82017517 174.35331726]
[-186.86665344 158.96148682]
[-179.40554810 145.45831299]
[-165.81767273 138.15263367]
[-150.43885803 139.37564087]
[-138.17643738 148.73707581]
[-132.94329834 163.24975586]
[-118.29980469 166.50057983]
[-103.65630341 169.75140381]
[-89.90353394 160.12231445]
[-73.10520172 163.45399475]
[-63.70546722 178.17073059]
[-48.99750519 181.11621094]
[-34.28954697 184.06169128]
[-19.58158302 187.00718689]
[-4.87362194 189.95266724]
[9.83433914 192.89814758]
[24.20252419 188.59056091]
[34.86415100 178.03927612]
[37.42261887 171.05357361]
[45.85904312 167.38226318]
[56.73786926 157.05505371]
[67.61669159 146.72784424]
[78.49552155 136.40065002]
[89.37434387 126.07344055]
[72.30782318 64.36000061]
[76.31556702 49.90530777]
[80.32330322 35.45062256]
[84.33104706 20.99593353]
[71.25181580 13.48697090]
[60.45146561 2.96065450]
[52.60892487 -9.92132378]
[48.21717453 -24.34919167]
[47.55228806 -39.41600037]
[50.65606308 -54.17464066]
[57.33338547 -67.69736481]
[67.16452026 -79.13413239]
[79.53147125 -87.76601410]
[93.65683746 -93.05039978]
[108.65269470 -94.65511322]
[123.57638550 -92.47927856]
[137.48979187 -86.65967560]
[149.51831055 -77.56211853]
[158.90582275 -65.75849915]
[165.06221008 -51.99079132]
[167.60049438 -37.12445450]
[166.36108398 -22.09399605]
[161.42192078 -7.84424210]
[153.09347534 4.72905540]
[141.89929199 14.83552837]
[128.54301453 21.83987427]
[113.86425781 25.30179596]
[98.78573608 25.00367355]
[94.77799225 39.45836258]
[90.77024841 53.91305161]
[86.76251221 68.36773682]
[92.30816650 73.41706085]
[103.39948273 83.51570892]
[108.94514465 88.56504059]
[122.96185303 83.22352600]
[136.97856140 77.88201141]
[146.90447998 64.82795715]
[163.13623047 67.16516113]
[168.97596741 82.48930359]
[158.41629028 95.03622437]
[142.32008362 91.89872742]
[128.30337524 97.24023438]
[114.28665161 102.58174896]
[115.99934387 117.48365021]
[130.86239624 119.50598907]
[145.57972717 113.69989777]
[157.14762878 123.08248138]
[172.01068115 125.10481262]
[186.97541809 118.39745331]
[200.10623169 128.22160339]
[197.89524841 144.47102356]
[182.61695862 150.42970276]
[169.98834229 139.96786499]
[155.12530518 137.94552612]
[141.47106934 143.89625549]
[128.84005737 134.36903381]
[113.97701263 132.34669495]
[99.70154572 136.95227051]
[88.82272339 147.27946472]
[77.94390106 157.60667419]
[67.06507111 167.93388367]
[56.18624878 178.26107788]
[45.41543961 188.70089722]
[34.75381470 199.25218201]
[36.15139389 225.00811768]
[36.15139389 240.00811768]
[36.15139389 255.00811768]
[36.15139389 270.00811768]
[36.15139389 285.00811768]
[36.15139389 300.00811768]
[36.15139389 315.00811768]
[36.15139389 330.00811768]
[36.15139389 345.00811768]
[36.15139389 360.00811768]
[50.69128036 364.06942749]
[63.59566116 371.90393066]
[73.90694427 382.93026733]
[80.85997009 396.33020020]
[83.93876648 411.10937500]
[82.91487885 426.17105103]
[77.86427307 440.39755249]
[69.16175079 452.73324585]
[57.45308685 462.26266479]
[43.60715103 468.27868652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[36 50]
[37 49]
[38 48]
[59 130]
[60 129]
[62 128]
[63 127]
[64 126]
[65 125]
[66 124]
[67 97]
[68 96]
[69 95]
[70 94]
[100 109]
[101 108]
[102 107]
[110 123]
[111 122]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
