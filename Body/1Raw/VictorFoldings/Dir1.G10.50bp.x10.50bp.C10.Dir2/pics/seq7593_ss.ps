%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAACUAACGGGGGGGGGGUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCxxxxxxxxxxAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCCCCCCCCCCCACAACUAAC\
) } def
/len { sequence length } bind def

/coor [
[87.55564117 482.79101562]
[74.33544159 475.51852417]
[63.44863892 465.07153320]
[55.63750839 452.16229248]
[51.43462753 437.67095947]
[51.12655640 422.58563232]
[54.73429871 407.93481445]
[62.01187134 394.71740723]
[72.46308136 383.83465576]
[85.37534332 376.02850342]
[99.86827850 371.83120728]
[99.55622101 356.83447266]
[99.24416351 341.83770752]
[98.93210602 326.84094238]
[98.62004852 311.84420776]
[98.30799866 296.84744263]
[97.99594116 281.85067749]
[97.68388367 266.85394287]
[97.37182617 251.85717773]
[97.05976868 236.86042786]
[96.74771118 221.86367798]
[96.43566132 206.86692810]
[96.12360382 191.87016296]
[95.81154633 176.87341309]
[95.49948883 161.87666321]
[84.60628510 151.78341675]
[84.07617950 136.57902527]
[94.73676300 125.22165680]
[94.42470551 110.22490692]
[91.28121948 110.01948547]
[88.01521301 108.88243866]
[84.89160919 106.76358032]
[82.18830872 103.68524933]
[80.17700958 99.74483490]
[66.65281677 93.25667572]
[53.12863159 86.76850891]
[39.60443878 80.28034210]
[26.08024979 73.79217529]
[12.55606079 67.30401611]
[-0.96812934 60.81584549]
[-11.78637505 71.43382263]
[-25.58504677 77.70857239]
[-40.69788742 78.88238525]
[-55.29994965 74.81352234]
[-67.62796021 65.99332428]
[-76.19325256 53.48686600]
[-79.96153259 38.80435944]
[-78.47775269 23.71879768]
[-71.92108917 10.05183125]
[-61.08329391 -0.54618776]
[-47.27308273 -6.79549599]
[-32.15810394 -7.94145918]
[-17.56356621 -3.84569645]
[-5.25182962 4.99720860]
[3.29040194 17.51943207]
[7.03161383 32.20885468]
[5.52003574 47.29165649]
[19.04422569 53.77982330]
[32.56841660 60.26798630]
[46.09260559 66.75614929]
[59.61679459 73.24431610]
[73.14098358 79.73248291]
[86.66517639 86.22064972]
[100.84173584 81.31909943]
[107.47023010 67.86312866]
[114.09873199 54.40716553]
[120.72722626 40.95120239]
[109.75270081 32.52428055]
[100.54442596 22.20258522]
[93.42398071 10.34908676]
[88.63955688 -2.61980319]
[86.35733795 -16.24884796]
[86.65568542 -30.05996513]
[89.52247620 -43.56900787]
[94.85558319 -56.30271530]
[102.46649933 -67.81532288]
[112.08701324 -77.70413971]
[123.37865448 -85.62364197]
[135.94461060 -91.29755402]
[149.34367371 -94.52847290]
[163.10568237 -95.20475769]
[176.74812317 -93.30435944]
[189.79292297 -88.89554596]
[197.24783325 -101.91184998]
[204.70274353 -114.92816162]
[201.90129089 -130.72473145]
[212.61256409 -142.66825867]
[228.61979675 -141.59672546]
[237.64360046 -128.33209229]
[232.76168823 -113.04985809]
[217.71905518 -107.47325134]
[210.26414490 -94.45693970]
[202.80923462 -81.44063568]
[214.89405823 -70.60169983]
[224.31036377 -57.37033463]
[230.59704590 -42.38955307]
[233.44520569 -26.38815498]
[232.71325684 -10.14526176]
[228.43402100 5.54761028]
[220.81326294 19.92512131]
[210.21975708 32.28543854]
[197.16749573 42.02448654]
[182.29071045 48.66548157]
[166.31306458 51.88227081]
[150.01246643 51.51532745]
[134.18319702 47.57970047]
[127.55469513 61.03566360]
[120.92620087 74.49163055]
[114.29769897 87.94759369]
[125.09564972 77.53585815]
[139.41510010 73.06893158]
[154.21766663 75.49462128]
[166.36247253 84.29823303]
[173.27258301 97.61177063]
[173.48176575 112.61031342]
[166.94563293 126.11138916]
[155.05107117 135.25027466]
[140.32191467 138.08784485]
[125.88345337 134.02198792]
[114.79933929 123.91544342]
[109.42146301 109.91284943]
[109.73351288 124.90959930]
[120.85732269 135.81367493]
[120.96015930 151.02696228]
[110.49624634 161.56460571]
[110.80829620 176.56135559]
[111.12035370 191.55812073]
[111.43241119 206.55487061]
[111.74446869 221.55162048]
[112.05652618 236.54837036]
[112.36858368 251.54513550]
[112.68063354 266.54187012]
[112.99269104 281.53863525]
[113.30474854 296.53540039]
[113.61680603 311.53213501]
[113.92886353 326.52890015]
[114.24092102 341.52566528]
[114.55297089 356.52239990]
[114.86502838 371.51916504]
[129.52001953 375.10992432]
[142.74583435 382.37219238]
[153.64070129 392.81079102]
[161.46179199 405.71398926]
[165.67587280 420.20205688]
[165.99559021 435.28713989]
[162.39916992 449.94076538]
[155.13180542 463.16375732]
[144.68899536 474.05459595]
[131.78276062 481.87072754]
[117.29307556 486.07919312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[25 125]
[28 122]
[29 121]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[64 109]
[65 108]
[66 107]
[67 106]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
