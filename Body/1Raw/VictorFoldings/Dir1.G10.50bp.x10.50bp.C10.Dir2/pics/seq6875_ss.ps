%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCAAUUGGCGGGGGGGGGGUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGAxxxxxxxxxxUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCCCCCCCCCCCAAAUCAAUUGGC\
) } def
/len { sequence length } bind def

/coor [
[95.85346985 649.24822998]
[82.15131378 642.98730469]
[70.18619537 633.83398438]
[60.55828476 622.24731445]
[53.75050735 608.80847168]
[50.10433960 594.19158936]
[49.80267334 579.12982178]
[52.86063385 564.37866211]
[59.12484360 550.67803955]
[68.28108978 538.71514893]
[79.87009430 529.09002686]
[93.31056976 522.28552246]
[107.92832947 518.64288330]
[107.62432861 503.64596558]
[107.32032013 488.64904785]
[107.01631927 473.65213013]
[106.71231079 458.65521240]
[106.40830994 443.65829468]
[106.10430908 428.66137695]
[105.80030060 413.66445923]
[105.49629974 398.66754150]
[105.19229126 383.67062378]
[90.55466461 377.32818604]
[80.09963989 365.20239258]
[75.95060730 349.67852783]
[78.98387146 333.83950806]
[88.64412689 320.85372925]
[103.04535675 313.34115601]
[102.43746948 298.35348511]
[101.82958984 283.36581421]
[101.22170258 268.37814331]
[87.29261780 259.74249268]
[81.17449188 244.35987854]
[85.45236969 228.19590759]
[98.63767242 217.64627075]
[97.72615814 202.67398071]
[96.81464386 187.70170593]
[95.90312958 172.72943115]
[94.99161530 157.75714111]
[91.42502594 151.23341370]
[94.21648407 142.47277832]
[93.60859680 127.48509216]
[93.00071716 112.49741364]
[85.68782043 100.58048248]
[92.01160431 88.11046600]
[77.47146606 83.98231506]
[64.93616486 75.57345581]
[55.62633133 63.71785736]
[50.44379807 49.58433533]
[49.88429260 34.56136703]
[53.99003601 20.12066841]
[62.34683990 7.67301846]
[74.12583923 -1.56955945]
[88.16571808 -6.71181011]
[87.55783844 -21.69948769]
[86.94995117 -36.68716431]
[74.81558990 -27.86915588]
[60.30187607 -31.65756607]
[54.02530670 -45.28124619]
[60.57707596 -58.77473831]
[75.16468811 -62.26781464]
[87.11736298 -53.20579147]
[88.02887726 -68.17807007]
[88.63675690 -83.16574860]
[88.94076538 -98.16266632]
[89.24476624 -113.15958405]
[89.54877472 -128.15650940]
[75.09418488 -132.51165771]
[62.35123062 -140.60609436]
[52.26553726 -151.83914185]
[45.58551788 -165.37722778]
[42.80688095 -180.21575928]
[44.13581467 -195.25358582]
[49.47370911 -209.37483215]
[58.42444992 -221.53158569]
[70.32383728 -230.82176208]
[84.28886414 -236.55592346]
[99.28321838 -238.30860901]
[114.19422913 -235.94970703]
[127.91539764 -229.65431213]
[139.42852783 -219.88955688]
[147.87925720 -207.38005066]
[152.64048767 -193.05407715]
[153.35891724 -177.97474670]
[149.98121643 -163.26101685]
[142.75805664 -150.00476074]
[132.22541809 -139.18966675]
[119.16490173 -131.61830139]
[104.54569244 -127.85250092]
[104.24168396 -112.85558319]
[103.93768311 -97.85866547]
[103.63367462 -82.86174774]
[106.27843475 -78.82083893]
[106.37230682 -73.06438446]
[103.00115204 -67.26655579]
[102.08963776 -52.29427719]
[101.93762970 -37.29504776]
[102.54551697 -22.30737114]
[103.15339661 -7.31969357]
[117.56360626 -3.33134747]
[130.05242920 4.92695427]
[139.38984680 16.65694618]
[144.65158081 30.71771240]
[145.31053162 45.73664474]
[141.28962708 60.24344635]
[132.97048950 72.81406403]
[121.15735626 82.21046448]
[106.99928284 87.50258636]
[114.31217957 99.41951752]
[107.98839569 111.88953400]
[108.59627533 126.87721252]
[109.20416260 141.86488342]
[109.96389771 156.84564209]
[110.87541199 171.81791687]
[111.78692627 186.79019165]
[112.69844055 201.76246643]
[113.60994720 216.73475647]
[125.77847290 223.27957153]
[133.05339050 234.89845276]
[133.61746216 248.48680115]
[127.42999268 260.47592163]
[116.20938110 267.77026367]
[116.81726074 282.75793457]
[117.42514801 297.74560547]
[118.03303528 312.73327637]
[131.23663330 317.86047363]
[141.45022583 327.61132812]
[147.14852905 340.48385620]
[147.49815369 354.51348877]
[142.47920227 367.57284546]
[132.88337708 377.69436646]
[120.18920898 383.36660767]
[120.49321747 398.36352539]
[120.79721832 413.36047363]
[121.10122681 428.35739136]
[121.40522766 443.35430908]
[121.70923615 458.35122681]
[122.01323700 473.34814453]
[122.31723785 488.34506226]
[122.62124634 503.34197998]
[122.92524719 518.33886719]
[137.67861938 521.38610840]
[151.38380432 527.64038086]
[163.35336304 536.78790283]
[172.98689270 548.36993408]
[179.80117798 561.80548096]
[183.45442200 576.42059326]
[183.76339722 591.48217773]
[180.71258545 606.23480225]
[174.45501709 619.93847656]
[165.30456543 631.90582275]
[153.72021484 641.53656006]
[140.28305054 648.34759521]
[125.66705322 651.99731445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[28 125]
[29 124]
[30 123]
[31 122]
[35 117]
[36 116]
[37 115]
[38 114]
[39 113]
[41 112]
[42 111]
[43 110]
[45 108]
[54 99]
[55 98]
[56 97]
[62 96]
[63 95]
[64 92]
[65 91]
[66 90]
[67 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
