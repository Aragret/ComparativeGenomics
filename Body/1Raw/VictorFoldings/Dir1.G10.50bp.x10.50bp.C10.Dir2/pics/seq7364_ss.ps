%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAAAAUCGGGGGGGGGGUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAACxxxxxxxxxxCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACACCCCCCCCCCACAUAAAACC\
) } def
/len { sequence length } bind def

/coor [
[81.64962006 491.42880249]
[67.80368042 485.41278076]
[56.09502029 475.88336182]
[47.39249802 463.54769897]
[42.34189606 449.32119751]
[41.31800461 434.25949097]
[44.39680481 419.48034668]
[51.34982300 406.08041382]
[61.66110992 395.05407715]
[74.56549072 387.21957397]
[89.10537720 383.15826416]
[89.10537720 368.15826416]
[89.10537720 353.15826416]
[89.10537720 338.15826416]
[89.10537720 323.15826416]
[89.10537720 308.15826416]
[89.10537720 293.15826416]
[89.10537720 278.15826416]
[89.10537720 263.15826416]
[89.10537720 248.15826416]
[89.10537720 233.15826416]
[75.90902710 229.47215271]
[64.11576080 222.47209167]
[54.54178619 212.63479614]
[47.85173416 200.63362122]
[44.51251602 187.29244995]
[44.76073074 173.52919006]
[48.58594131 160.29251099]
[55.73090363 148.49658203]
[65.70887756 138.95780945]
[77.83677673 132.33847046]
[91.28191376 129.10061646]
[91.90589142 114.11360931]
[84.53246307 105.04616547]
[85.14006805 93.37497711]
[93.41518402 85.12220764]
[94.35081482 70.15141296]
[80.17330170 64.96701050]
[68.04334259 56.00674057]
[58.93890381 44.00364304]
[53.59102249 29.93564987]
[52.42511368 14.94589996]
[55.52714157 0.24986203]
[62.63735199 -12.96322536]
[73.17198181 -23.62659073]
[86.27120209 -30.88205528]
[100.86927032 -34.14909744]
[101.80490112 -49.11988831]
[102.74053192 -64.09068298]
[103.67615509 -79.06147003]
[104.61178589 -94.03226471]
[89.83897400 -96.73417664]
[75.48942566 -101.16439819]
[61.76458740 -107.26071930]
[48.85713577 -114.93757629]
[36.94826889 -124.08718109]
[26.20517159 -134.58108521]
[16.77865791 -146.27198792]
[8.80106068 -158.99575806]
[2.38437486 -172.57377625]
[-2.38131976 -186.81542969]
[-5.42912054 -201.52076721]
[-6.71624136 -216.48338318]
[-6.22461224 -231.49319458]
[-3.96113586 -246.33950806]
[0.04241278 -260.81390381]
[5.72982979 -274.71316528]
[13.02127266 -287.84219360]
[21.81438255 -300.01666260]
[31.98571396 -311.06564331]
[43.39248276 -320.83407593]
[55.87454987 -329.18478394]
[69.25669098 -336.00054932]
[83.35103607 -341.18569946]
[97.95973206 -344.66741943]
[112.87769318 -346.39685059]
[127.89548492 -346.34970093]
[142.80229187 -344.52664185]
[157.38883972 -340.95327759]
[171.45034790 -335.67974854]
[184.78944397 -328.78012085]
[197.21884155 -320.35119629]
[208.56405640 -310.51135254]
[218.66581726 -299.39871216]
[227.38232422 -287.16928101]
[234.59120178 -273.99475098]
[240.19123840 -260.06005859]
[244.10383606 -245.56082153]
[246.27406311 -230.70057678]
[246.67144775 -215.68797302]
[245.29042053 -200.73373413]
[242.15034485 -186.04782104]
[237.29533386 -171.83636475]
[230.79353333 -158.29890442]
[222.73622131 -145.62547302]
[213.23649597 -133.99398804]
[202.42771912 -123.56771851]
[190.46165466 -114.49306488]
[177.50625610 -106.89739990]
[163.74340820 -100.88735962]
[149.36633301 -96.54731750]
[134.57684326 -93.93820190]
[119.58258057 -93.09663391]
[118.64694977 -78.12583923]
[117.71131897 -63.15505219]
[116.77569580 -48.18426132]
[115.84006500 -33.21346664]
[129.91777039 -28.15427971]
[142.01170349 -19.32431984]
[151.13668823 -7.43228817]
[156.54644775 6.56325769]
[157.79457092 21.53116608]
[154.77139282 36.25911331]
[147.71354675 49.55178833]
[137.18548584 60.32791138]
[124.03429413 67.70818329]
[109.32160187 71.08704376]
[108.38597870 86.05783844]
[116.24786377 100.84586334]
[106.89290619 114.73758698]
[106.26892853 129.72459412]
[121.70280457 135.25833130]
[134.67269897 145.25836182]
[143.92886353 158.74667358]
[148.58383179 174.40988159]
[148.19747925 190.72703552]
[142.81866455 206.11735535]
[132.97932434 219.09335327]
[119.64194489 228.40461731]
[104.10537720 233.15826416]
[104.10537720 248.15826416]
[104.10537720 263.15826416]
[104.10537720 278.15826416]
[104.10537720 293.15826416]
[104.10537720 308.15826416]
[104.10537720 323.15826416]
[104.10537720 338.15826416]
[104.10537720 353.15826416]
[104.10537720 368.15826416]
[104.10537720 383.15826416]
[118.64526367 387.21957397]
[131.54965210 395.05407715]
[141.86093140 406.08041382]
[148.81394958 419.48034668]
[151.89274597 434.25949097]
[150.86886597 449.32119751]
[145.81825256 463.54769897]
[137.11573792 475.88336182]
[125.40707397 485.41278076]
[111.56113434 491.42880249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[32 121]
[33 120]
[36 118]
[37 117]
[47 107]
[48 106]
[49 105]
[50 104]
[51 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
