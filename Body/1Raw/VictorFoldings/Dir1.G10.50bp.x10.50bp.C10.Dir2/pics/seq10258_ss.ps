%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGUAGUAGGGGGGGGGGACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUxxxxxxxxxxUAAUACCAACUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCCCCCCCCCCCUUGUAGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 412.71817017]
[71.19830322 406.70214844]
[59.48964310 397.17272949]
[50.78712082 384.83706665]
[45.73651886 370.61053467]
[44.71262741 355.54885864]
[47.79142761 340.76971436]
[54.74444962 327.36978149]
[65.05573273 316.34344482]
[77.96011353 308.50894165]
[92.50000000 304.44763184]
[92.50000000 289.44763184]
[92.50000000 274.44763184]
[92.50000000 259.44763184]
[92.50000000 244.44763184]
[92.50000000 229.44763184]
[92.50000000 214.44763184]
[92.50000000 199.44763184]
[92.50000000 184.44763184]
[92.50000000 169.44763184]
[92.50000000 154.44763184]
[92.50000000 139.44763184]
[92.50000000 124.44762421]
[92.50000000 109.44762421]
[92.18794250 94.45087433]
[91.56396484 79.46385956]
[90.93998718 64.47683716]
[90.31600952 49.48982239]
[89.69203186 34.50280762]
[74.69148254 34.10261917]
[59.75320816 32.67968750]
[44.94686508 30.24064255]
[30.34148598 26.79685974]
[16.00516701 22.36439514]
[2.00475550 16.96391296]
[-11.59447479 10.62059593]
[-24.72911644 3.36401844]
[-37.33792877 -4.77198553]
[-49.36212540 -13.74948215]
[-60.74564362 -23.52661324]
[-71.43540192 -34.05779648]
[-81.38156891 -45.29392242]
[-90.53775787 -57.18260956]
[-98.86128998 -69.66842651]
[-106.31335449 -82.69315338]
[-112.85919952 -96.19606018]
[-118.46830750 -110.11420441]
[-123.11453247 -124.38267517]
[-126.77620697 -138.93495178]
[-129.43624878 -153.70320129]
[-131.08227539 -168.61853027]
[-131.70660400 -183.61143494]
[-131.30632019 -198.61198425]
[-129.88328552 -213.55024719]
[-127.44413757 -228.35658264]
[-124.00025177 -242.96192932]
[-119.56769562 -257.29821777]
[-114.16712189 -271.29858398]
[-107.82370758 -284.89779663]
[-100.56704712 -298.03237915]
[-92.43095398 -310.64114380]
[-83.45337677 -322.66528320]
[-73.67617035 -334.04873657]
[-63.14492035 -344.73840332]
[-51.90872574 -354.68450928]
[-40.01997757 -363.84060669]
[-27.53410530 -372.16406250]
[-14.50932789 -379.61602783]
[-1.00637186 -386.16180420]
[12.91180515 -391.77081299]
[27.18031120 -396.41693115]
[41.73261642 -400.07852173]
[56.50087357 -402.73846436]
[71.41622162 -404.38439941]
[86.40912628 -405.00860596]
[101.40967560 -404.60821533]
[116.34793091 -403.18508911]
[131.15423584 -400.74584961]
[145.75956726 -397.30184937]
[160.09582520 -392.86920166]
[174.09617615 -387.46853638]
[187.69531250 -381.12503052]
[200.82986450 -373.86828613]
[213.43856812 -365.73211670]
[225.46264648 -356.75445557]
[236.84602356 -346.97717285]
[247.53564453 -336.44583130]
[257.48165894 -325.20959473]
[266.63769531 -313.32077026]
[274.96105957 -300.83483887]
[282.41293335 -287.81002808]
[288.95861816 -274.30700684]
[294.56753540 -260.38879395]
[299.21356201 -246.12026978]
[302.87503052 -231.56793213]
[305.53488159 -216.79966736]
[307.18072510 -201.88430786]
[307.80484009 -186.89140320]
[307.40435791 -171.89085388]
[305.98110962 -156.95260620]
[303.54177856 -142.14631653]
[300.09768677 -127.54100037]
[295.66494751 -113.20477295]
[290.26419067 -99.20446777]
[283.92059326 -85.60536957]
[276.66375732 -72.47087097]
[268.52749634 -59.86222076]
[259.54974365 -47.83820724]
[249.77238464 -36.45488739]
[239.24099731 -25.76533699]
[228.00466919 -15.81939983]
[216.11579895 -6.66344643]
[203.62980652 1.65983403]
[190.60493469 9.11163330]
[177.10189819 15.65720844]
[163.18363953 21.26603889]
[148.91506958 25.91197586]
[134.36271667 29.57335472]
[119.59442139 32.23310852]
[104.67904663 33.87882996]
[105.30302429 48.86584473]
[105.92700195 63.85286331]
[106.55097961 78.83988190]
[107.17495728 93.82689667]
[110.17543030 98.21436310]
[110.46695709 103.97628784]
[107.50000000 109.44762421]
[107.50000000 124.44762421]
[107.50000000 139.44763184]
[107.50000000 154.44763184]
[107.50000000 169.44763184]
[107.50000000 184.44763184]
[107.50000000 199.44763184]
[107.50000000 214.44763184]
[107.50000000 229.44763184]
[107.50000000 244.44763184]
[107.50000000 259.44763184]
[107.50000000 274.44763184]
[107.50000000 289.44763184]
[107.50000000 304.44763184]
[122.03988647 308.50894165]
[134.94427490 316.34344482]
[145.25555420 327.36978149]
[152.20857239 340.76971436]
[155.28736877 355.54885864]
[154.26348877 370.61053467]
[149.21287537 384.83706665]
[140.51036072 397.17272949]
[128.80169678 406.70214844]
[114.95575714 412.71817017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 124]
[26 123]
[27 122]
[28 121]
[29 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
