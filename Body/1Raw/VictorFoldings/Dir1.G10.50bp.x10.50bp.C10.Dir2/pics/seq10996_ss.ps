%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUCCACAAGGGGGGGGGGCCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAxxxxxxxxxxUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUCCCCCCCCCCAUCAUACACAA\
) } def
/len { sequence length } bind def

/coor [
[44.56126785 587.40655518]
[30.53932381 581.85351562]
[18.33936691 572.98718262]
[8.72829437 561.36492920]
[2.31026936 547.71722412]
[-0.51126742 532.90203857]
[0.44104844 517.85064697]
[5.10735369 503.50921631]
[13.19432068 490.77926636]
[24.19359398 480.46096802]
[37.41375351 473.20300293]
[52.02376556 469.46157837]
[52.02376556 454.46157837]
[52.02376556 439.46157837]
[52.02376556 424.46157837]
[52.02376556 409.46157837]
[52.02376556 394.46157837]
[52.02376556 379.46157837]
[52.02376556 364.46157837]
[52.02376556 349.46157837]
[52.02376556 334.46157837]
[41.76939774 345.40908813]
[27.06935692 348.39382935]
[13.35738659 342.31256104]
[5.70199871 329.41314697]
[6.93293953 314.46374512]
[16.59520340 302.99026489]
[31.11721802 299.23379517]
[45.13104630 304.58285522]
[53.45629883 317.05920410]
[55.90922928 302.26113892]
[58.36215591 287.46304321]
[45.52432632 281.19839478]
[34.96639633 271.55258179]
[27.55392075 259.30416870]
[23.89802742 245.44561768]
[24.30503654 231.10278320]
[28.75081825 217.44352722]
[36.88202286 205.58258057]
[48.04415131 196.49057007]
[61.33422470 190.91465759]
[75.67384338 189.31703186]
[78.43008423 174.57243347]
[81.18632507 159.82783508]
[83.94256592 145.08323669]
[86.69881439 130.33863831]
[76.79262543 123.63836670]
[69.91122437 113.85713196]
[66.95150757 102.26979828]
[68.29924774 90.38662720]
[73.77877045 79.75643158]
[82.67590332 71.76473236]
[93.83100891 67.45313263]
[94.44683838 52.46578217]
[95.06266022 37.47842789]
[95.67848969 22.49107552]
[91.13119507 8.19694614]
[81.96926117 -3.67987776]
[66.60484314 -9.41282940]
[64.15472412 -25.62791252]
[77.13938141 -35.64444351]
[92.20130157 -29.15826988]
[93.84608459 -12.84181309]
[103.00801849 -0.96498948]
[110.28150177 -2.79434252]
[132.10192871 -8.28240108]
[134.55485535 -23.08048058]
[137.00778198 -37.87855911]
[139.46070862 -52.67663956]
[141.91363525 -67.47471619]
[128.30503845 -74.03084564]
[117.09568787 -84.15641022]
[109.19427490 -97.03057861]
[105.24131775 -111.60970306]
[105.55728912 -126.71191406]
[110.11655426 -141.11294556]
[118.54952240 -153.64537048]
[130.17256165 -163.29324341]
[144.04347229 -169.27445984]
[159.03776550 -171.10412598]
[173.93994141 -168.63395691]
[187.54194641 -162.06414795]
[198.74111938 -151.92733765]
[206.62959290 -139.04522705]
[210.56790161 -124.46214294]
[210.23677063 -109.36026001]
[205.66304016 -94.96381378]
[197.21748352 -82.43985748]
[185.58474731 -72.80367279]
[171.70785522 -66.83640289]
[156.71171570 -65.02178955]
[154.25878906 -50.22370911]
[151.80586243 -35.42563248]
[149.35293579 -20.62755203]
[146.90000916 -5.82947302]
[141.74383545 9.59638691]
[132.08406067 19.93204117]
[120.78845978 24.28948212]
[110.66584015 23.10690117]
[110.05001831 38.09425354]
[109.43418884 53.08160782]
[108.81836700 68.06896210]
[115.55870056 70.75479889]
[121.55260468 74.84368896]
[126.51251984 80.13945770]
[130.20048523 86.38803864]
[144.91601562 83.48056793]
[155.00474548 71.00671387]
[171.04577637 71.26116943]
[180.73381042 84.04872894]
[176.63699341 99.55987549]
[161.89807129 105.89579010]
[147.82348633 98.19609070]
[133.10795593 101.10356140]
[123.54380035 123.30331421]
[101.44340515 133.09487915]
[98.68716431 147.83947754]
[95.93092346 162.58407593]
[93.17468262 177.32867432]
[90.41843414 192.07327271]
[104.31873322 199.56320190]
[115.21782684 210.96122742]
[122.06164551 225.14770508]
[124.19364929 240.73417664]
[121.41780853 256.19924927]
[114.01655579 270.03710938]
[102.72210693 280.90411377]
[88.64402008 287.74929810]
[73.16023254 289.91598511]
[70.70730591 304.71405029]
[68.25437927 319.51214600]
[67.02376556 334.46157837]
[67.02376556 349.46157837]
[67.02376556 364.46157837]
[67.02376556 379.46157837]
[67.02376556 394.46157837]
[67.02376556 409.46157837]
[67.02376556 424.46157837]
[67.02376556 439.46157837]
[67.02376556 454.46157837]
[67.02376556 469.46157837]
[81.63378143 473.20300293]
[94.85393524 480.46096802]
[105.85321045 490.77926636]
[113.94017792 503.50921631]
[118.60648346 517.85064697]
[119.55879974 532.90203857]
[116.73726654 547.71722412]
[110.31923676 561.36492920]
[100.70816803 572.98718262]
[88.50820923 581.85351562]
[74.48626709 587.40655518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[30 131]
[31 130]
[32 129]
[42 120]
[43 119]
[44 118]
[45 117]
[46 116]
[53 102]
[54 101]
[55 100]
[56 99]
[57 64]
[58 63]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
