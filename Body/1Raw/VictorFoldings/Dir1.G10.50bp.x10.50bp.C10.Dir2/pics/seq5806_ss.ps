%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACCCCAUUGGGGGGGGGGCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUxxxxxxxxxxCAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCCCCCCCCCCCACCCACCACAUU\
) } def
/len { sequence length } bind def

/coor [
[83.73792267 394.10519409]
[70.03576660 387.84429932]
[58.07065201 378.69094849]
[48.44273758 367.10427856]
[41.63496017 353.66543579]
[37.98879242 339.04855347]
[37.68712616 323.98681641]
[40.74508667 309.23565674]
[47.00929642 295.53500366]
[56.16554260 283.57211304]
[67.75454712 273.94702148]
[81.19502258 267.14248657]
[95.81278229 263.49984741]
[95.50878143 248.50294495]
[95.20477295 233.50602722]
[94.90077209 218.50910950]
[94.59676361 203.51219177]
[94.29276276 188.51527405]
[93.98876190 173.51834106]
[93.68475342 158.52142334]
[93.38075256 143.52450562]
[93.07674408 128.52758789]
[77.39121246 118.72425079]
[70.68201447 101.48683929]
[75.61290741 83.65911102]
[90.22618103 72.31919098]
[89.01140594 57.36845779]
[87.79663849 42.41772842]
[86.58187103 27.46699905]
[85.36710358 12.51626873]
[70.36244202 12.70820332]
[55.37965775 11.87573147]
[40.48861694 10.02273560]
[25.75874329 7.15785456]
[11.25871468 3.29444528]
[-2.94386101 -1.54947829]
[-16.78276443 -7.35133171]
[-30.19347191 -14.08406353]
[-43.11345291 -21.71628380]
[-55.48247528 -30.21240425]
[-67.24285889 -39.53281403]
[-78.33978271 -49.63405609]
[-88.72149658 -60.46903610]
[-98.33959961 -71.98722839]
[-107.14925385 -84.13494110]
[-115.10936737 -96.85552216]
[-122.18284607 -110.08966827]
[-128.33670044 -123.77568054]
[-133.54223633 -137.84974670]
[-137.77517700 -152.24623108]
[-141.01580811 -166.89802551]
[-143.24899292 -181.73681641]
[-144.46434021 -196.69340515]
[-144.65617371 -211.69807434]
[-143.82360840 -226.68084717]
[-141.97050476 -241.57186890]
[-139.10552979 -256.30172729]
[-135.24201965 -270.80172729]
[-130.39799500 -285.00427246]
[-124.59605408 -298.84313965]
[-117.86323547 -312.25381470]
[-110.23092651 -325.17373657]
[-101.73471832 -337.54269409]
[-92.41423035 -349.30300903]
[-82.31291962 -360.39987183]
[-71.47786713 -370.78152466]
[-59.95960999 -380.39953613]
[-47.81184006 -389.20910645]
[-35.09120560 -397.16915894]
[-21.85700798 -404.24252319]
[-8.17095757 -410.39630127]
[5.90313673 -415.60171509]
[20.29965401 -419.83459473]
[34.95146942 -423.07510376]
[49.79027176 -425.30819702]
[64.74687195 -426.52343750]
[79.75154114 -426.71517944]
[94.73430634 -425.88250732]
[109.62532806 -424.02929688]
[124.35516357 -421.16421509]
[138.85513306 -417.30062866]
[153.05764771 -412.45651245]
[166.89646912 -406.65447998]
[180.30709839 -399.92156982]
[193.22697449 -392.28915405]
[205.59588623 -383.79287720]
[217.35614014 -374.47232056]
[228.45292664 -364.37091064]
[238.83450317 -353.53579712]
[248.45245361 -342.01748657]
[257.26193237 -329.86965942]
[265.22189331 -317.14895630]
[272.29516602 -303.91473389]
[278.44885254 -290.22863770]
[283.65420532 -276.15451050]
[287.88693237 -261.75796509]
[291.12738037 -247.10610962]
[293.36035156 -232.26730347]
[294.57550049 -217.31068420]
[294.76715088 -202.30601501]
[293.93435669 -187.32325745]
[292.08108521 -172.43225098]
[289.21591187 -157.70243835]
[285.35220337 -143.20248413]
[280.50799561 -129.00000000]
[274.70587158 -115.16122437]
[267.97286987 -101.75064850]
[260.34036255 -88.83081818]
[251.84400940 -76.46196747]
[242.52336121 -64.70176697]
[232.42189026 -53.60505295]
[221.58670044 -43.22355652]
[210.06831360 -33.60568237]
[197.92042542 -24.79627991]
[185.19969177 -16.83641624]
[171.96539307 -9.76320648]
[158.27926636 -3.60963106]
[144.20509338 1.59562039]
[129.80853271 5.82827806]
[115.15666199 9.06860733]
[100.31783295 11.30149937]
[101.53260040 26.25222969]
[102.74736786 41.20296097]
[103.96214294 56.15369034]
[105.17691040 71.10442352]
[115.61692047 75.14307404]
[123.78613281 82.79608154]
[128.49668884 92.95064545]
[129.06365967 104.13022614]
[125.40458679 114.70925140]
[118.05152893 123.14945221]
[108.07366180 128.22358704]
[108.37767029 143.22050476]
[108.68167114 158.21742249]
[108.98567963 173.21434021]
[109.28968048 188.21125793]
[109.59368896 203.20817566]
[109.89768982 218.20509338]
[110.20169067 233.20202637]
[110.50569916 248.19894409]
[110.80970001 263.19586182]
[125.56307983 266.24310303]
[139.26826477 272.49734497]
[151.23780823 281.64489746]
[160.87133789 293.22689819]
[167.68562317 306.66241455]
[171.33888245 321.27752686]
[171.64784241 336.33914185]
[168.59703064 351.09179688]
[162.33946228 364.79544067]
[153.18901062 376.76278687]
[141.60467529 386.39349365]
[128.16749573 393.20452881]
[113.55150604 396.85424805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
