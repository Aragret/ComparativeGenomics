%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGGGAUGGGGGGGGGGAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCxxxxxxxxxxCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCCCUAGGAAU\
) } def
/len { sequence length } bind def

/coor [
[86.37223816 586.03308105]
[72.52629852 580.01702881]
[60.81763458 570.48760986]
[52.11511230 558.15191650]
[47.06451035 543.92541504]
[46.04061890 528.86370850]
[49.11941528 514.08459473]
[56.07243729 500.68466187]
[66.38372040 489.65832520]
[79.28810120 481.82382202]
[93.82798767 477.76248169]
[93.82798767 462.76248169]
[93.82798767 447.76248169]
[93.82798767 432.76248169]
[93.82798767 417.76248169]
[93.82798767 402.76248169]
[93.82798767 387.76248169]
[93.82798767 372.76248169]
[93.82798767 357.76248169]
[93.82798767 342.76248169]
[79.46212769 338.59124756]
[66.84097290 330.53286743]
[56.99198914 319.23315430]
[50.71979523 305.60229492]
[48.54047394 290.74139404]
[50.63910294 275.85354614]
[56.85406494 262.14651489]
[66.68946838 250.73469543]
[79.35470581 242.54847717]
[93.82798767 238.25848389]
[93.82798767 223.25848389]
[93.82798767 208.25848389]
[93.82798767 193.25848389]
[93.82798767 178.25848389]
[84.23688507 163.59524536]
[93.49114227 147.71008301]
[93.17908478 132.71333313]
[92.86702728 117.71657562]
[82.48339081 107.61081696]
[82.18195343 93.12443542]
[92.13621521 82.59548187]
[82.60572052 94.17864227]
[68.37191010 98.91136932]
[53.80296707 95.34123993]
[43.36990738 84.56389618]
[40.27450562 69.88674927]
[45.46670532 55.81404495]
[57.35308075 46.66450882]
[72.28585815 45.24601746]
[85.68235779 51.99388504]
[93.43157959 64.83805847]
[95.91669464 50.04535294]
[98.40180969 35.25264359]
[93.05777740 20.36131096]
[102.79673767 9.09179783]
[105.28185272 -5.70090961]
[107.76697540 -20.49361610]
[110.25209045 -35.28632355]
[112.73721313 -50.07903290]
[115.22232819 -64.87173462]
[100.96987152 -69.64813232]
[87.64013672 -76.59541321]
[75.56137848 -85.54248810]
[65.03105164 -96.26902771]
[56.30847168 -108.51088715]
[49.60844040 -121.96659088]
[45.09595490 -136.30479431]
[42.88213348 -151.17239380]
[43.02149963 -166.20326233]
[45.51061630 -181.02725220]
[50.28818893 -195.27931213]
[57.23656464 -208.60847473]
[66.18463135 -220.68649292]
[76.91204834 -231.21594238]
[89.15462494 -239.93751526]
[102.61088562 -246.63642883]
[116.94945526 -251.14773560]
[131.81723022 -253.36033630]
[146.84809875 -253.21972656]
[161.67189026 -250.72938538]
[175.92355347 -245.95063782]
[189.25213623 -239.00115967]
[201.32942200 -230.05209351]
[211.85797119 -219.32380676]
[220.57853699 -207.08052063]
[227.27635193 -193.62370300]
[231.78646851 -179.28475952]
[233.99783325 -164.41679382]
[233.85598755 -149.38595581]
[231.36442566 -134.56236267]
[226.58450317 -120.31108856]
[219.63392639 -106.98307800]
[210.68386841 -94.90653229]
[199.95471191 -84.37886047]
[187.71069336 -75.65931702]
[174.25332642 -68.96261597]
[159.91401672 -64.45367432]
[145.04586792 -62.24353409]
[130.01502991 -62.38661957]
[127.52991486 -47.59391403]
[125.04479980 -32.80120468]
[122.55967712 -18.00849915]
[120.07456207 -3.21579099]
[117.58943939 11.57691574]
[123.11122894 25.41017723]
[113.19451904 37.73776245]
[110.70940399 52.53047180]
[108.22428131 67.32318115]
[107.13297272 82.28342438]
[117.51660919 92.38918304]
[117.81804657 106.87556458]
[107.86378479 117.40451813]
[108.17583466 132.40127563]
[108.48789215 147.39802551]
[117.26097107 156.91049194]
[117.17655182 169.44889832]
[108.82798767 178.25848389]
[108.82798767 193.25848389]
[108.82798767 208.25848389]
[108.82798767 223.25848389]
[108.82798767 238.25848389]
[123.30127716 242.54847717]
[135.96650696 250.73469543]
[145.80191040 262.14651489]
[152.01687622 275.85354614]
[154.11550903 290.74139404]
[151.93618774 305.60229492]
[145.66398621 319.23315430]
[135.81500244 330.53286743]
[123.19385529 338.59124756]
[108.82798767 342.76248169]
[108.82798767 357.76248169]
[108.82798767 372.76248169]
[108.82798767 387.76248169]
[108.82798767 402.76248169]
[108.82798767 417.76248169]
[108.82798767 432.76248169]
[108.82798767 447.76248169]
[108.82798767 462.76248169]
[108.82798767 477.76248169]
[123.36787415 481.82382202]
[136.27226257 489.65832520]
[146.58354187 500.68466187]
[153.53656006 514.08459473]
[156.61535645 528.86370850]
[155.59147644 543.92541504]
[150.54086304 558.15191650]
[141.83834839 570.48760986]
[130.12968445 580.01702881]
[116.28374481 586.03308105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 121]
[31 120]
[32 119]
[33 118]
[34 117]
[36 114]
[37 113]
[38 112]
[41 109]
[51 108]
[52 107]
[53 106]
[55 104]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
