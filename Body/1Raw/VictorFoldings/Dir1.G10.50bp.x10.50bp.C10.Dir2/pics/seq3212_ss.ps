%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUACAGUCAGGGGGGGGGGGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCxxxxxxxxxxCUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAACCCCCCCCCCUUUACACUCA\
) } def
/len { sequence length } bind def

/coor [
[78.70513153 371.51580811]
[64.21543884 367.30731201]
[51.30920792 359.49121094]
[40.86640930 348.60037231]
[33.59904480 335.37738037]
[30.00261879 320.72375488]
[30.32234001 305.63867188]
[34.53641129 291.15060425]
[42.35750580 278.24740601]
[53.25237656 267.80880737]
[66.47818756 260.54653931]
[81.13317871 256.95578003]
[81.44523621 241.95901489]
[81.75728607 226.96226501]
[82.06934357 211.96551514]
[82.38140106 196.96875000]
[82.69345856 181.97200012]
[83.00551605 166.97525024]
[83.31757355 151.97850037]
[83.62962341 136.98173523]
[83.94168091 121.98498535]
[84.97383118 93.95995331]
[75.95629883 81.97312164]
[66.93876648 69.98628998]
[54.21337509 77.94529724]
[40.85089111 84.78089905]
[26.95024490 90.44248199]
[12.61435795 94.88813019]
[-2.05063176 98.08493042]
[-16.93614769 100.00920868]
[-31.93198013 100.64672089]
[-46.92710495 99.99275208]
[-61.81050110 98.05213928]
[-76.47197723 94.83925629]
[-90.80297852 90.37787628]
[-104.69740295 84.70104980]
[-118.05237579 77.85079193]
[-130.76902771 69.87782288]
[-142.75320435 60.84117508]
[-153.91618347 50.80775833]
[-164.17529297 39.85184860]
[-173.45460510 28.05456924]
[-181.68540955 15.50325966]
[-188.80676270 2.29084897]
[-194.76593018 -11.48484230]
[-199.51881409 -25.72182083]
[-203.03021240 -40.31467819]
[-205.27412415 -55.15537643]
[-206.23394775 -70.13403320]
[-205.90257263 -85.13975525]
[-204.28244019 -100.06143951]
[-201.38555908 -114.78860474]
[-197.23336792 -129.21221924]
[-191.85662842 -143.22550964]
[-185.29512024 -156.72470093]
[-177.59744263 -169.60984802]
[-168.82057190 -181.78556824]
[-159.02951050 -193.16169739]
[-148.29673767 -203.65403748]
[-136.70172119 -213.18487549]
[-124.33029938 -221.68365479]
[-111.27407074 -229.08746338]
[-97.62970734 -235.34149170]
[-83.49821472 -240.39939880]
[-68.98423767 -244.22377014]
[-54.19522476 -246.78628540]
[-39.24066544 -248.06797791]
[-24.23129082 -248.05934143]
[-9.27822113 -246.76043701]
[5.50783443 -244.18090820]
[20.01740265 -240.33982849]
[34.14305878 -235.26564026]
[47.78021622 -228.99592590]
[60.82791138 -221.57710266]
[73.18954468 -213.06407166]
[84.77358246 -203.51989746]
[95.49427795 -193.01521301]
[105.27223969 -181.62780762]
[114.03507996 -169.44200134]
[121.71792603 -156.54800415]
[128.26388550 -143.04125977]
[133.62449646 -129.02180481]
[137.76008606 -114.59341431]
[140.64001465 -99.86292267]
[142.24296570 -84.93938446]
[142.55706787 -69.93328857]
[141.58000183 -54.95574951]
[139.31901550 -40.11764526]
[135.79081726 -25.52883720]
[131.02154541 -11.29733944]
[125.04651642 2.47148275]
[117.90996552 15.67568779]
[109.66471863 28.21751404]
[100.37184143 40.00410461]
[90.10011292 50.94819641]
[78.92559814 60.96876144]
[87.94313049 72.95558929]
[96.96066284 84.94242859]
[110.92105103 90.42945862]
[125.68710327 87.79059601]
[140.45315552 85.15172577]
[155.21922302 82.51286316]
[169.98527527 79.87400055]
[184.75132751 77.23513794]
[190.58363342 62.95270920]
[203.22486877 54.10946655]
[218.64123535 53.52725220]
[231.91345215 61.39185333]
[238.80638123 75.19370270]
[237.12052917 90.52867126]
[227.39384460 102.50344086]
[212.73007202 107.29689789]
[197.80836487 103.37947083]
[187.39019775 92.00119019]
[172.62413025 94.64005280]
[157.85807800 97.27892303]
[143.09202576 99.91778564]
[128.32597351 102.55664825]
[113.55991364 105.19551086]
[127.78348541 109.95891571]
[142.78295898 109.83317566]
[155.94848633 117.02129364]
[163.95321655 129.70687866]
[164.77441406 144.68438721]
[158.20457458 158.16909790]
[145.90385437 166.75350952]
[130.98054504 168.26840210]
[117.20568085 162.33097839]
[108.06005859 150.44158936]
[105.85440826 135.60754395]
[98.93843842 122.29704285]
[98.62638092 137.29379272]
[98.31432343 152.29055786]
[98.00226593 167.28730774]
[97.69020844 182.28405762]
[97.37815857 197.28080750]
[97.06610107 212.27757263]
[96.75404358 227.27432251]
[96.44198608 242.27107239]
[96.12992859 257.26782227]
[110.62286377 261.46511841]
[123.53512573 269.27127075]
[133.98634338 280.15402222]
[141.26391602 293.37142944]
[144.87164307 308.02224731]
[144.56358337 323.10757446]
[140.36070251 337.59890747]
[132.54956055 350.50814819]
[121.66276550 360.95513916]
[108.44256592 368.22760010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 98]
[23 97]
[24 96]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
