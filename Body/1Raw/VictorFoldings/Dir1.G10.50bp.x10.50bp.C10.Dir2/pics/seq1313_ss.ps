%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGACUACGAAGGGGGGGGGGAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUxxxxxxxxxxAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCCCCCCCCCCCUAGACUACGUA\
) } def
/len { sequence length } bind def

/coor [
[69.64228821 402.13253784]
[56.72313309 394.37417603]
[45.94183731 383.84515381]
[37.87982178 371.11328125]
[32.97185898 356.86517334]
[31.48263741 341.86920166]
[33.49246216 326.93411255]
[38.89294434 312.86529541]
[47.39284897 300.42147827]
[58.53378296 290.27377319]
[71.71492767 282.96939087]
[86.22544861 278.90225220]
[85.60962677 263.91488647]
[84.99379730 248.92753601]
[84.37797546 233.94018555]
[83.76214600 218.95283508]
[83.14632416 203.96548462]
[82.53049469 188.97813416]
[81.91467285 173.99076843]
[81.29884338 159.00341797]
[80.68302155 144.01606750]
[85.32668304 91.80227661]
[77.69371033 78.88957977]
[70.06074524 65.97688293]
[62.16426086 53.22362137]
[54.00759506 40.63518143]
[45.85092926 28.04674339]
[37.69426346 15.45830441]
[38.09156036 30.45304108]
[35.31569672 45.19395828]
[29.49168968 59.01716232]
[20.88183784 71.30009460]
[9.87390614 81.48957062]
[-3.03634214 89.12668610]
[-17.26746559 93.86747742]
[-32.17853165 95.49844360]
[-47.09799576 93.94612885]
[-61.35391617 89.28044128]
[-74.30426025 81.71150970]
[-85.36576843 71.58021545]
[-94.04026031 59.34285355]
[-99.93708038 45.55055237]
[-102.79063416 30.82448006]
[-102.47241211 15.82785606]
[-98.99674225 1.23608613]
[-92.52016449 -12.29365635]
[-83.33436584 -24.15203094]
[-71.85304260 -33.80496979]
[-58.59328461 -40.81773376]
[-44.15227509 -44.87448502]
[-29.18039322 -45.79251862]
[-14.35193253 -43.53049088]
[-0.33472481 -38.19027710]
[12.23993492 -30.01238441]
[22.80571938 -19.36512184]
[30.88556480 -6.73044491]
[30.57758713 -21.72728348]
[22.55857468 -35.36568451]
[30.03293037 -48.24913406]
[29.72495270 -63.24597168]
[29.41697502 -78.24281311]
[29.10899734 -93.23964691]
[16.27816391 -105.08688354]
[15.96060371 -122.21086121]
[27.86573219 -134.05024719]
[27.24990654 -149.03759766]
[26.63408089 -164.02494812]
[12.18153763 -168.59658813]
[0.16606958 -177.83802795]
[-7.96139622 -190.63334656]
[-11.21942902 -205.43743896]
[-9.21460533 -220.46263123]
[-2.18901682 -233.89456177]
[9.00896168 -244.11126709]
[23.02712059 -249.87902832]
[38.17269897 -250.50135803]
[52.61679077 -245.90310669]
[64.61521149 -236.63952637]
[72.71907806 -223.82925415]
[75.94982147 -209.01919556]
[73.91731262 -193.99771118]
[66.86698914 -180.57875061]
[55.65019989 -170.38269043]
[41.62143326 -164.64077759]
[42.23725891 -149.65342712]
[42.85308456 -134.66607666]
[53.48344421 -127.32115936]
[57.99164581 -115.00431061]
[54.51282883 -102.15599823]
[44.10583496 -93.54763031]
[44.41381073 -78.55078888]
[44.72179031 -63.55395126]
[45.02976608 -48.55711365]
[53.02675247 -35.99138641]
[45.57442474 -22.03526115]
[45.88240433 -7.03842258]
[50.28270340 7.30163860]
[58.43936920 19.89007759]
[66.59603119 32.47851562]
[74.75270081 45.06695557]
[79.21101379 46.93046570]
[82.51742554 51.64804077]
[82.97344208 58.34391022]
[90.60641479 71.25660706]
[98.23937988 84.16930389]
[111.80127716 90.57827759]
[126.62375641 88.27740479]
[134.56361389 74.80548096]
[149.32264709 69.63779449]
[163.93208313 75.21436310]
[171.49382019 88.90210724]
[168.43740845 104.23809052]
[156.20600891 113.98113251]
[140.57490540 113.53086090]
[128.92463684 103.09989166]
[114.10214996 105.40076447]
[112.71812439 120.33677673]
[126.86544037 125.32209778]
[141.01275635 130.30741882]
[154.38134766 122.19478607]
[169.82904053 124.62438965]
[180.06188965 136.44905090]
[180.24829102 152.08552551]
[170.30020142 164.15074158]
[154.91481018 166.94787598]
[141.35664368 159.15621948]
[136.02743530 144.45474243]
[121.88011932 139.46942139]
[107.73280334 134.48408508]
[95.67037201 143.40023804]
[96.28620148 158.38760376]
[96.90202332 173.37495422]
[97.51785278 188.36230469]
[98.13367462 203.34965515]
[98.74950409 218.33700562]
[99.36532593 233.32435608]
[99.98114777 248.31172180]
[100.59697723 263.29907227]
[101.21279907 278.28643799]
[116.00807953 281.14938354]
[129.74404907 287.34774780]
[141.67994690 296.54727173]
[151.17210388 308.25180054]
[157.70860291 321.83010864]
[160.93693542 336.54998779]
[160.68301392 351.61758423]
[156.96052551 366.22030640]
[149.97021484 379.57067871]
[140.08908081 390.94869995]
[127.84997559 399.74081421]
[113.91294861 405.47283936]
[99.02960968 407.83566284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 105]
[23 104]
[24 103]
[25 100]
[26 99]
[27 98]
[28 97]
[56 96]
[57 95]
[59 93]
[60 92]
[61 91]
[62 90]
[65 86]
[66 85]
[67 84]
[106 116]
[107 115]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
