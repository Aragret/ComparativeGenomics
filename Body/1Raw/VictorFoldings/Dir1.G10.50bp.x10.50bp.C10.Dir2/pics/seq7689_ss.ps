%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCUCCCAUGGGGGGGGGGCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCxxxxxxxxxxUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCCCCCCCCCCCGCCAUCCCAU\
) } def
/len { sequence length } bind def

/coor [
[63.54203033 385.17446899]
[50.05315018 378.44293213]
[38.56764984 368.67834473]
[29.75327873 356.44845581]
[24.12249756 342.46426392]
[22.00266838 327.53878784]
[23.51703835 312.53979492]
[28.57756042 298.33926392]
[36.89002609 285.76284790]
[47.97115707 275.54168701]
[61.17671204 268.27005005]
[75.73893738 264.37069702]
[75.43096161 249.37385559]
[75.12297821 234.37701416]
[74.81500244 219.38018799]
[74.50702667 204.38334656]
[74.19905090 189.38650513]
[73.89106750 174.38966370]
[73.58309174 159.39282227]
[73.27511597 144.39599609]
[72.96714020 129.39915466]
[82.57565308 89.72508240]
[74.94268036 76.81238556]
[67.30971527 63.89968872]
[59.67674255 50.98698807]
[59.33894348 65.98318481]
[54.23498154 80.08813477]
[44.89818192 91.82798767]
[32.30416107 99.97603607]
[17.76888657 103.68086243]
[2.81117153 102.55535889]
[-11.00602818 96.71712494]
[-22.23893356 86.77620697]
[-29.71379852 73.77134705]
[-32.64956284 59.06144333]
[-30.73946571 44.18355560]
[-24.18309593 30.69229889]
[-13.66553783 19.99739456]
[-0.28578719 13.21637154]
[14.55808449 11.05778790]
[29.31501770 13.74719715]
[42.44303894 21.00358009]
[52.57010269 32.06828690]
[49.81386185 17.32369041]
[47.05761719 2.57909298]
[44.30137634 -12.16550350]
[31.63035202 -10.97398090]
[17.97002792 -19.06531906]
[6.78173208 -29.05641747]
[-4.40656471 -39.04751205]
[-15.59486103 -49.03861237]
[-30.43273735 -44.81475449]
[-45.19210815 -49.30524445]
[-55.16331100 -61.07719040]
[-57.16457367 -76.37419891]
[-50.55729675 -90.31505585]
[-37.44984055 -98.45127869]
[-22.02474976 -98.18663788]
[-9.20410824 -89.60556793]
[-3.07894063 -75.44626617]
[-5.60376453 -60.22690582]
[5.58453226 -50.23580933]
[16.77282906 -40.24471283]
[27.96112633 -30.25361633]
[41.52302170 -36.66259384]
[40.90719604 -51.64994431]
[40.29137039 -66.63729858]
[25.83882713 -71.20892334]
[13.82335949 -80.45037079]
[5.69589329 -93.24568939]
[2.43786073 -108.04977417]
[4.44268465 -123.07497406]
[11.46827316 -136.50691223]
[22.66625214 -146.72361755]
[36.68441010 -152.49137878]
[51.82998657 -153.11370850]
[66.27407837 -148.51544189]
[78.27249908 -139.25187683]
[86.37637329 -126.44160461]
[89.60711670 -111.63153076]
[87.57460785 -96.61006165]
[80.52427673 -83.19109344]
[69.30748749 -72.99504089]
[55.27872467 -67.25312042]
[55.89455032 -52.26576996]
[56.51037598 -37.27841568]
[63.33330917 -50.63684464]
[75.42031097 -59.51965332]
[90.20671082 -62.04204941]
[104.55504608 -57.66881561]
[115.42082977 -47.32788467]
[120.49849701 -33.21344757]
[118.71064758 -18.32037735]
[110.43663025 -5.80875349]
[97.43207550 1.66664362]
[82.45635223 2.51964855]
[68.68707275 -3.43073344]
[59.04597092 -14.92174625]
[61.80221558 -0.17714976]
[64.55845642 14.56744671]
[67.31469727 29.31204414]
[72.58943939 43.35401917]
[80.22241211 56.26671600]
[87.85538483 69.17941284]
[95.48834991 82.09211731]
[97.14160919 67.18350220]
[109.26371765 58.34864807]
[123.96250916 61.33953094]
[131.66828918 74.20891571]
[127.36415100 88.57813263]
[113.85278320 95.09202576]
[128.56829834 97.99949646]
[143.28382874 100.90696716]
[157.99934387 103.81444550]
[172.71487427 106.72191620]
[184.00392151 96.07592773]
[199.39875793 94.13207245]
[212.97975159 101.63780212]
[219.52474976 115.70700836]
[216.51705933 130.92979431]
[205.11318970 141.45269775]
[189.69816589 143.22943115]
[176.19938660 135.57681274]
[169.80740356 121.43743896]
[155.09187317 118.52996063]
[140.37635803 115.62248993]
[125.66083527 112.71501923]
[110.94531250 109.80754852]
[105.19997406 114.62845612]
[93.70931244 124.27027130]
[87.96397400 129.09117126]
[88.27195740 144.08801270]
[88.57993317 159.08485413]
[88.88790894 174.08169556]
[89.19588470 189.07852173]
[89.50386047 204.07536316]
[89.81184387 219.07220459]
[90.11981964 234.06904602]
[90.42779541 249.06587219]
[90.73577118 264.06271362]
[105.44580841 267.36093140]
[118.93876648 274.08428955]
[130.43019104 283.84188843]
[139.25196838 296.06643677]
[144.89123535 310.04721069]
[147.02011108 324.97140503]
[145.51483154 339.97134399]
[140.46292114 354.17489624]
[132.15808105 366.75637817]
[121.08314514 376.98422241]
[107.88200378 384.26388550]
[93.32214355 388.17208862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 105]
[23 104]
[24 103]
[25 102]
[43 101]
[44 100]
[45 99]
[46 98]
[48 64]
[49 63]
[50 62]
[51 61]
[65 86]
[66 85]
[67 84]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
