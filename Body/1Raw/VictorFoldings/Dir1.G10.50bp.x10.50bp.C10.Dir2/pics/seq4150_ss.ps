%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUACAAUCUGGGGGGGGGGUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUxxxxxxxxxxAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCCCCCCCCCCCAUUACAAUCU\
) } def
/len { sequence length } bind def

/coor [
[82.66501617 463.34484863]
[68.96286774 457.08395386]
[56.99774933 447.93060303]
[47.36983490 436.34393311]
[40.56205750 422.90509033]
[36.91588974 408.28823853]
[36.61422348 393.22647095]
[39.67218781 378.47531128]
[45.93639755 364.77465820]
[55.09263992 352.81176758]
[66.68164825 343.18667603]
[80.12211609 336.38214111]
[94.73988342 332.73953247]
[94.43587494 317.74258423]
[94.13187408 302.74566650]
[93.82786560 287.74874878]
[93.52386475 272.75183105]
[93.21986389 257.75491333]
[92.91585541 242.75801086]
[92.61185455 227.76107788]
[92.30784607 212.76416016]
[92.00384521 197.76724243]
[91.69983673 182.77032471]
[81.89981079 176.79594421]
[76.16484833 166.71534729]
[76.03397369 154.99806213]
[81.65652466 144.58021545]
[91.72554779 138.12879944]
[92.02954865 123.13188171]
[92.33355713 108.13495636]
[92.48556519 93.13572693]
[92.48556519 78.13572693]
[92.48556519 63.13573074]
[92.33355713 48.13650131]
[91.87758636 33.14343262]
[91.26970673 18.15575409]
[90.66181946 3.16807675]
[90.05393982 -11.81960106]
[89.44605255 -26.80727768]
[74.45071411 -27.43915939]
[59.55876923 -29.30719757]
[44.87195206 -32.39863205]
[30.49058914 -36.69234467]
[16.51292229 -42.15900421]
[3.03443360 -48.76126480]
[-9.85280418 -56.45402908]
[-22.06075668 -65.18474579]
[-33.50603104 -74.89377594]
[-44.11043930 -85.51479340]
[-53.80154419 -96.97525024]
[-62.51314545 -109.19685364]
[-70.18573761 -122.09611511]
[-76.76689148 -135.58491516]
[-82.21166992 -149.57112122]
[-86.48287201 -163.95918274]
[-89.55131531 -178.65081787]
[-91.39604950 -193.54566956]
[-92.00445557 -208.54197693]
[-91.37239838 -223.53732300]
[-89.50418091 -238.42924500]
[-86.41257477 -253.11601257]
[-82.11869049 -267.49731445]
[-76.65186310 -281.47494507]
[-70.04944611 -294.95333862]
[-62.35652542 -307.84048462]
[-53.62565994 -320.04833984]
[-43.91649246 -331.49349976]
[-33.29534912 -342.09777832]
[-21.83477974 -351.78875732]
[-9.61307526 -360.50021362]
[3.28627777 -368.17263794]
[16.77516174 -374.75363159]
[30.76143074 -380.19824219]
[45.14954758 -384.46926880]
[59.84122086 -387.53753662]
[74.73609161 -389.38208008]
[89.73240662 -389.99032593]
[104.72773743 -389.35809326]
[119.61963654 -387.48968506]
[134.30638123 -384.39791870]
[148.68763733 -380.10385132]
[162.66517639 -374.63687134]
[176.14350891 -368.03427124]
[189.03056335 -360.34121704]
[201.23829651 -351.61019897]
[212.68334961 -341.90090942]
[223.28750610 -331.27963257]
[232.97833252 -319.81893921]
[241.68965149 -307.59713745]
[249.36192322 -294.69769287]
[255.94276428 -281.20874023]
[261.38720703 -267.22238159]
[265.65805054 -252.83422852]
[268.72616577 -238.14251709]
[270.57052612 -223.24761963]
[271.17858887 -208.25129700]
[270.54617310 -193.25598145]
[268.67761230 -178.36410522]
[265.58563232 -163.67739868]
[261.29141235 -149.29618835]
[255.82424927 -135.31872559]
[249.22151184 -121.84046173]
[241.52828979 -108.95349884]
[232.79713440 -96.74586487]
[223.08769226 -85.30093384]
[212.46629333 -74.69690704]
[201.00549316 -65.00621033]
[188.78358459 -56.29504395]
[175.88404846 -48.62292099]
[162.39500427 -42.04224014]
[148.40859985 -36.59796524]
[134.02038574 -32.32727814]
[119.32864380 -29.25935936]
[104.43373108 -27.41516113]
[105.04161072 -12.42748451]
[105.64949799 2.56019306]
[106.25737762 17.54787064]
[106.86526489 32.53554916]
[110.29891205 39.13022232]
[107.33047485 47.83249664]
[110.62976074 54.49540329]
[107.48556519 63.13573074]
[107.48556519 78.13572693]
[107.48556519 93.13572693]
[110.65012360 100.60476685]
[107.33047485 108.43896484]
[107.02646637 123.43588257]
[106.72246552 138.43280029]
[120.34977722 151.52748108]
[120.14355469 170.10758972]
[106.69675446 182.46632385]
[107.00076294 197.46324158]
[107.30476379 212.46015930]
[107.60877228 227.45707703]
[107.91277313 242.45399475]
[108.21678162 257.45092773]
[108.52078247 272.44784546]
[108.82479095 287.44476318]
[109.12879181 302.44168091]
[109.43280029 317.43859863]
[109.73680115 332.43551636]
[124.49017334 335.48275757]
[138.19535828 341.73699951]
[150.16491699 350.88455200]
[159.79843140 362.46655273]
[166.61273193 375.90206909]
[170.26597595 390.51718140]
[170.57495117 405.57879639]
[167.52412415 420.33145142]
[161.26655579 434.03512573]
[152.11611938 446.00244141]
[140.53176880 455.63317871]
[127.09460449 462.44421387]
[112.47860718 466.09390259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[28 128]
[29 127]
[30 126]
[31 124]
[32 123]
[33 122]
[34 120]
[35 118]
[36 117]
[37 116]
[38 115]
[39 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
