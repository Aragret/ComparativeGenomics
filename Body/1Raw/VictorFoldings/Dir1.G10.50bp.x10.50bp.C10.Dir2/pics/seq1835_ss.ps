%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGACCGCGGGGGGGGGGUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCxxxxxxxxxxAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUCCCCCCCCCCACUUGACCAC\
) } def
/len { sequence length } bind def

/coor [
[82.96863556 344.69967651]
[69.74843597 337.42718506]
[58.86163330 326.98019409]
[51.05050278 314.07095337]
[46.84762192 299.57962036]
[46.53955078 284.49429321]
[50.14728928 269.84347534]
[57.42486191 256.62606812]
[67.87606812 245.74331665]
[80.78833008 237.93716431]
[95.28127289 233.73988342]
[94.96921539 218.74311829]
[94.65715790 203.74636841]
[94.34510040 188.74961853]
[94.03304291 173.75286865]
[93.72098541 158.75610352]
[93.40893555 143.75935364]
[93.09687805 128.76260376]
[92.78482056 113.76584625]
[83.27645874 102.16450500]
[68.63295746 98.91368103]
[53.98945999 95.66285706]
[39.34595871 92.41203308]
[24.70245552 89.16120911]
[9.99449444 86.21572113]
[-4.99252176 86.83969879]
[-19.48811913 90.69686127]
[-33.98371506 94.55401611]
[-48.47931290 98.41117859]
[-59.70708084 110.36396790]
[-75.60839081 106.35391998]
[-79.82533264 90.50622559]
[-68.01988220 79.12363434]
[-52.33647156 83.91558075]
[-37.84087372 80.05842590]
[-23.34527779 76.20126343]
[-8.84968090 72.34410095]
[-23.24382401 68.12406921]
[-36.00601578 60.24203873]
[-46.22455597 49.26108170]
[-53.16945648 35.96565628]
[-56.34458542 21.30555534]
[-55.52311707 6.32806540]
[-50.76374054 -7.89685392]
[-42.40645218 -20.35300636]
[-31.04827881 -30.15055084]
[-17.50062180 -36.58957291]
[-2.73129845 -39.21008301]
[12.20460510 -37.82487869]
[26.24010086 -32.53291702]
[38.37252045 -23.71224022]
[47.73515701 -11.99297905]
[53.65916061 1.78766620]
[55.72133255 16.64523888]
[53.77435684 31.51834488]
[47.95732117 45.34448242]
[38.68578339 57.13594437]
[26.62207985 66.05037689]
[12.63335896 71.44966888]
[17.04152679 69.46382904]
[22.74924660 70.27205658]
[27.95328140 74.51770782]
[42.59678268 77.76853180]
[57.24028397 81.01935577]
[71.88378906 84.27017975]
[86.52729034 87.52100372]
[73.25730133 80.52761841]
[63.48628235 69.14662170]
[58.58190536 54.97103882]
[59.23065567 39.98507309]
[65.34172058 26.28635597]
[76.05972290 15.79233360]
[89.88442230 9.97188759]
[104.88074493 9.63972187]
[118.94960785 14.84233093]
[130.12174988 24.85149002]
[136.83337402 38.26618576]
[138.14503479 53.20872879]
[133.87313843 67.58756256]
[124.61562347 79.39004517]
[111.66687775 86.96464539]
[125.89365387 82.21083069]
[140.12043762 77.45701599]
[154.34721375 72.70320129]
[168.19042969 66.92693329]
[181.57672119 60.15881348]
[194.96299744 53.39070129]
[208.34928894 46.62258530]
[221.73556519 39.85446930]
[235.12185669 33.08635712]
[231.86863708 18.35993767]
[232.38075256 3.28716326]
[236.62602234 -11.18448257]
[244.33757019 -24.14529800]
[255.03065491 -34.78055954]
[268.03311157 -42.42171860]
[282.52755737 -46.58845139]
[297.60287476 -47.01882935]
[312.31143188 -43.68580246]
[325.72863770 -36.79888916]
[337.01104736 -26.79099846]
[345.44946289 -14.29124165]
[350.51345825 -0.08536192]
[351.88464355 14.93364716]
[349.47686768 29.82167816]
[343.44149780 43.64285660]
[334.15789795 55.52836990]
[322.20962524 64.73108673]
[308.34780884 70.67252350]
[293.44378662 72.97917938]
[278.43441772 71.50607300]
[264.26324463 66.34579468]
[251.82104492 57.82272720]
[241.88996887 46.47264099]
[228.50367737 53.24075699]
[215.11740112 60.00886917]
[201.73110962 66.77698517]
[188.34483337 73.54509735]
[174.95854187 80.31321716]
[189.08137512 85.36748505]
[196.80191040 98.22801971]
[194.62266541 113.06887817]
[183.53086853 123.16699219]
[168.55119324 123.94783020]
[156.46960449 115.05765533]
[152.75917053 100.52381134]
[159.10102844 86.92997742]
[144.87425232 91.68379974]
[130.64747620 96.43761444]
[116.42069244 101.19142914]
[107.78157043 113.45379639]
[108.09362793 128.45054626]
[108.40568542 143.44729614]
[108.71774292 158.44406128]
[109.02980042 173.44081116]
[109.34185791 188.43756104]
[109.65390778 203.43431091]
[109.96596527 218.43107605]
[110.27802277 233.42782593]
[124.93301392 237.01858521]
[138.15882874 244.28085327]
[149.05369568 254.71943665]
[156.87478638 267.62265015]
[161.08886719 282.11071777]
[161.40858459 297.19583130]
[157.81214905 311.84942627]
[150.54478455 325.07241821]
[140.10198975 335.96325684]
[127.19576263 343.77938843]
[112.70606995 347.98785400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[25 59]
[26 37]
[27 36]
[28 35]
[29 34]
[81 130]
[82 129]
[83 128]
[84 127]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
