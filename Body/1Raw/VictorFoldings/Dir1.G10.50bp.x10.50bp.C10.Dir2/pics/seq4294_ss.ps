%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCCGAUGGGGGGGGGGUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCxxxxxxxxxxCCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGCCCCCCCCCCUGCCCCCGAU\
) } def
/len { sequence length } bind def

/coor [
[97.51958466 463.44003296]
[83.67364502 457.42401123]
[71.96498871 447.89459229]
[63.26246262 435.55892944]
[58.21186066 421.33239746]
[57.18796921 406.27072144]
[60.26676941 391.49154663]
[67.21978760 378.09164429]
[77.53107452 367.06530762]
[90.43545532 359.23080444]
[104.97534180 355.16946411]
[104.97534180 340.16946411]
[104.97534180 325.16946411]
[104.97534180 310.16946411]
[104.97534180 295.16946411]
[104.97534180 280.16946411]
[104.97534180 265.16946411]
[104.97534180 250.16947937]
[104.97534180 235.16947937]
[104.97534180 220.16947937]
[101.80976105 213.43710327]
[105.13462067 204.85823059]
[105.44667816 189.86148071]
[105.75873566 174.86473083]
[96.47475433 160.00512695]
[106.05747986 144.31591797]
[106.05747986 129.31591797]
[82.62016296 127.63880157]
[65.68753815 108.55530548]
[50.97957611 111.50078583]
[40.92310333 124.00066376]
[24.88146400 123.78765869]
[15.16043091 111.02516937]
[19.21714783 95.50348663]
[33.93965149 89.12951660]
[48.03409195 96.79282379]
[62.74205399 93.84734344]
[66.80282593 87.54177856]
[52.29928207 83.71459961]
[51.45748901 68.73824310]
[65.44078827 63.30987167]
[74.92436981 74.93064880]
[78.98513794 68.62508392]
[75.58216095 54.01619339]
[72.17918396 39.40729904]
[68.77620697 24.79840660]
[65.37322998 10.18951416]
[61.51606750 -4.30608225]
[57.20848465 -18.67426682]
[52.90089798 -33.04244995]
[48.59331512 -47.41063309]
[44.28572845 -61.77882004]
[29.32756996 -60.17628098]
[14.32965565 -61.34982300]
[-0.19719213 -65.25946808]
[-13.75819302 -71.77206421]
[-25.89146423 -80.66579437]
[-36.18375397 -91.63773346]
[-44.28450394 -104.31418610]
[-49.91781235 -118.26339722]
[-52.89180756 -133.01025391]
[-53.10519791 -148.05250549]
[-50.55071640 -162.87779236]
[-45.31536484 -176.98118591]
[-37.57745743 -189.88232422]
[-27.60054779 -201.14181519]
[-15.72444153 -210.37612915]
[-2.35363722 -217.27078247]
[12.05646133 -221.59094238]
[27.01505280 -223.18943787]
[42.01264954 -222.01185608]
[56.53844452 -218.09829712]
[70.09768677 -211.58204651]
[82.22856140 -202.68504333]
[92.51789093 -191.71034241]
[100.61522675 -179.03170776]
[106.24477386 -165.08097839]
[109.21479797 -150.33331299]
[109.42413330 -135.29100037]
[106.86565399 -120.46640015]
[101.62650299 -106.36441803]
[93.88511658 -93.46536255]
[83.90516663 -82.20857239]
[72.02657318 -72.97745514]
[58.65391159 -66.08640289]
[62.96149826 -51.71821976]
[67.26908112 -37.35003662]
[71.57666779 -22.98185158]
[75.88425446 -8.61366653]
[78.86470032 -6.61756897]
[80.99922943 -3.04749084]
[81.54449463 1.67003691]
[79.98211670 6.78653622]
[83.38509369 21.39542961]
[86.78807831 36.00432205]
[90.19105530 50.61321259]
[93.59403229 65.22210693]
[122.24027252 76.09744263]
[129.75382996 103.29029846]
[144.68814087 101.88799286]
[157.70452881 92.89443970]
[171.09939575 99.40802765]
[186.03370667 98.00572205]
[200.75834656 86.99822998]
[216.42079163 94.85237122]
[231.32269287 93.13967896]
[246.22460938 91.42699432]
[261.12649536 89.71430206]
[273.97003174 79.51744843]
[289.12106323 85.79268646]
[290.99349976 102.08458710]
[277.66116333 111.63343811]
[262.83920288 104.61620331]
[247.93728638 106.32889557]
[233.03538513 108.04158783]
[218.13348389 109.75427246]
[210.33474731 119.05410767]
[197.88796997 120.56961060]
[187.43601990 112.94002533]
[172.50170898 114.34233093]
[160.55351257 123.23558044]
[146.09043884 116.82230377]
[131.15612793 118.22460175]
[121.05747986 129.31591797]
[121.05747986 144.31591797]
[129.63076782 154.00883484]
[129.28552246 166.54278564]
[120.75549316 175.17678833]
[120.44343567 190.17353821]
[120.13137817 205.17028809]
[119.97534180 220.16947937]
[119.97534180 235.16947937]
[119.97534180 250.16947937]
[119.97534180 265.16946411]
[119.97534180 280.16946411]
[119.97534180 295.16946411]
[119.97534180 310.16946411]
[119.97534180 325.16946411]
[119.97534180 340.16946411]
[119.97534180 355.16946411]
[134.51522827 359.23080444]
[147.41961670 367.06530762]
[157.73089600 378.09164429]
[164.68391418 391.49154663]
[167.76271057 406.27072144]
[166.73883057 421.33239746]
[161.68821716 435.55892944]
[152.98570251 447.89459229]
[141.27703857 457.42401123]
[127.43109894 463.44003296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[26 125]
[27 124]
[29 37]
[30 36]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[99 123]
[100 122]
[102 120]
[103 119]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
