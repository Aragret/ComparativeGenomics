%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACCCUCGGGGGGGGGGCUUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUxxxxxxxxxxCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCCCCCCCCCCCAUAACCCUC\
) } def
/len { sequence length } bind def

/coor [
[84.70496368 455.45440674]
[70.85902405 449.43838501]
[59.15036392 439.90896606]
[50.44784164 427.57330322]
[45.39723969 413.34677124]
[44.37334824 398.28509521]
[47.45214844 383.50595093]
[54.40517044 370.10601807]
[64.71645355 359.07968140]
[77.62083435 351.24517822]
[92.16072083 347.18386841]
[92.16072083 332.18386841]
[92.16072083 317.18386841]
[92.16072083 302.18386841]
[92.16072083 287.18386841]
[92.16072083 272.18386841]
[92.16072083 257.18386841]
[92.16072083 242.18386841]
[92.16072083 227.18386841]
[92.16072083 212.18386841]
[77.45344543 206.36314392]
[66.06909180 195.32687378]
[59.76412201 180.73677063]
[59.52698135 164.80595398]
[65.42327881 149.96319580]
[76.58128357 138.48266602]
[91.32068634 132.13551331]
[91.00862885 117.13875580]
[82.78862762 103.99385071]
[87.10038757 90.56262970]
[73.87764740 81.87530518]
[74.88538361 67.01482391]
[67.97838593 53.69967270]
[61.07138824 40.38451767]
[54.16439056 27.06936073]
[47.25738907 13.75420475]
[40.35039139 0.43904889]
[26.31952095 5.78997421]
[11.77013779 9.50658894]
[-3.10807514 11.54043865]
[-18.12115097 11.86500835]
[-33.07336044 10.47606659]
[-47.76977539 7.39172077]
[-62.01879501 2.65218210]
[-75.63465118 -3.68076015]
[-88.43984222 -11.52454281]
[-100.26741791 -20.77690697]
[-110.96318054 -31.31722641]
[-120.38769531 -43.00809097]
[-128.41809082 -55.69708252]
[-134.94967651 -69.21877289]
[-139.89729309 -83.39688110]
[-143.19645691 -98.04656982]
[-144.80413818 -112.97684479]
[-144.69937134 -127.99306488]
[-142.88354492 -142.89945984]
[-139.38031006 -157.50169373]
[-134.23535156 -171.60939026]
[-127.51574707 -185.03863525]
[-119.30909729 -197.61434937]
[-109.72238922 -209.17257690]
[-98.88059998 -219.56265259]
[-86.92508698 -228.64909363]
[-74.01170349 -236.31344604]
[-60.30881500 -242.45581055]
[-45.99505615 -246.99607849]
[-31.25704002 -249.87507629]
[-16.28690529 -251.05526733]
[-1.27982068 -250.52125549]
[13.56856728 -248.28002930]
[28.06468010 -244.36077881]
[42.01952744 -238.81460571]
[55.25118256 -231.71383667]
[67.58714294 -223.15101624]
[78.86658478 -213.23779297]
[88.94245911 -202.10340881]
[97.68340302 -189.89302063]
[104.97545624 -176.76580811]
[110.72356415 -162.89291382]
[114.85277557 -148.45521545]
[117.30926514 -133.64091492]
[118.06100464 -118.64315796]
[117.09819031 -103.65747070]
[114.43338013 -88.87922668]
[110.10131836 -74.50108337]
[104.15847778 -60.71049118]
[96.68233490 -47.68724060]
[87.77035522 -35.60112000]
[77.53872681 -24.60968781]
[66.12083435 -14.85624599]
[53.66554642 -6.46794987]
[60.57254791 6.84720612]
[67.47954559 20.16236115]
[74.38654327 33.47751617]
[81.29354095 46.79267120]
[88.20053864 60.10783005]
[100.92924500 67.84276581]
[100.41554260 83.65563202]
[113.73069763 90.56262970]
[128.59375000 88.54029846]
[143.45678711 86.51795959]
[158.31983948 84.49562836]
[173.18289185 82.47328949]
[188.00064087 80.14218903]
[202.76669312 77.50332642]
[210.39674377 63.85354614]
[225.03387451 58.35006332]
[239.76689148 63.59145737]
[247.63931274 77.10289764]
[244.93402100 92.50469208]
[232.92837524 102.52459717]
[217.29106140 102.43150330]
[205.40556335 92.26937866]
[190.63951111 94.90824127]
[187.19201660 98.29798126]
[181.55766296 99.51671600]
[175.20521545 97.33634186]
[160.34217834 99.35867310]
[145.47912598 101.38101196]
[130.61607361 103.40334320]
[115.75302887 105.42567444]
[106.00537872 116.82669830]
[106.31743622 131.82345581]
[119.76184845 136.62434387]
[130.73017883 145.71516418]
[137.91236877 157.98348999]
[140.45964050 171.93902588]
[138.08486938 185.89460754]
[131.09471130 198.17015076]
[120.35020447 207.29495239]
[107.16072083 212.18386841]
[107.16072083 227.18386841]
[107.16072083 242.18386841]
[107.16072083 257.18386841]
[107.16072083 272.18386841]
[107.16072083 287.18386841]
[107.16072083 302.18386841]
[107.16072083 317.18386841]
[107.16072083 332.18386841]
[107.16072083 347.18386841]
[121.70060730 351.24517822]
[134.60499573 359.07968140]
[144.91627502 370.10601807]
[151.86929321 383.50595093]
[154.94808960 398.28509521]
[153.92420959 413.34677124]
[148.87359619 427.57330322]
[140.17108154 439.90896606]
[128.46241760 449.43838501]
[114.61647797 455.45440674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 123]
[28 122]
[30 98]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[37 91]
[99 121]
[100 120]
[101 119]
[102 118]
[103 117]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
