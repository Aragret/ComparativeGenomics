%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAACAAGGGGGGGGGGAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUxxxxxxxxxxCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCCCCCCCCCCCACAUCAA\
) } def
/len { sequence length } bind def

/coor [
[53.79886246 399.84112549]
[40.57866669 392.56866455]
[29.69186401 382.12164307]
[21.88073349 369.21240234]
[17.67785072 354.72106934]
[17.36977959 339.63574219]
[20.97751999 324.98492432]
[28.25509262 311.76751709]
[38.70630264 300.88476562]
[51.61856461 293.07861328]
[66.11149597 288.88131714]
[65.79944611 273.88458252]
[65.48738861 258.88781738]
[65.17533112 243.89106750]
[64.86327362 228.89431763]
[64.55121613 213.89756775]
[64.23915863 198.90080261]
[63.92710495 183.90405273]
[63.61505127 168.90730286]
[63.30299377 153.91055298]
[62.99093628 138.91378784]
[50.81909943 130.14758301]
[36.49650192 134.60440063]
[22.17390633 139.06121826]
[7.85130835 143.51803589]
[4.54904699 158.51771545]
[-5.82248068 169.84587097]
[-20.47338676 174.45526123]
[-35.46265030 171.10600281]
[-46.75823593 160.69902039]
[-51.32168579 146.03373718]
[-47.92545700 131.05505371]
[-37.48311615 119.79213715]
[-22.80360031 115.27468109]
[-7.83562851 118.71784210]
[3.39449286 129.19543457]
[17.71709061 124.73862457]
[32.03968811 120.28180695]
[46.36228561 115.82498932]
[47.98769760 108.50324249]
[33.28172302 105.54784393]
[18.70661354 102.00297546]
[21.95730400 87.35944366]
[36.66342926 90.31479645]
[51.23852158 93.85974121]
[52.86393738 86.53798676]
[41.77262115 76.43933868]
[30.68130493 66.34069061]
[19.58999062 56.24203873]
[5.45441961 61.99950409]
[-9.77882576 61.04503632]
[-23.08517265 53.56814575]
[-31.82263756 41.05337524]
[-34.25638962 25.98554230]
[-29.90320587 11.35637474]
[-19.62741470 0.07050475]
[-5.46928024 -5.63124990]
[9.76008797 -4.61680174]
[23.03688812 2.91243029]
[31.72500229 15.46151066]
[34.09939957 30.53881264]
[29.68864059 45.15072250]
[40.77995682 55.24937439]
[51.87126923 65.34802246]
[62.96258545 75.44667053]
[92.51830292 63.36322784]
[116.69527435 74.65587616]
[108.94747162 61.75767899]
[103.86663055 47.60025787]
[101.64626312 32.72837067]
[102.36985016 17.71387291]
[106.00772095 3.13373709]
[112.41822815 -10.45212269]
[121.35330200 -22.52235222]
[132.46803284 -32.61415863]
[145.33398438 -40.34106827]
[159.45570374 -45.40771103]
[174.28979492 -47.62111664]
[189.26586914 -46.89807510]
[203.80844116 -43.26824188]
[217.35900879 -36.87294388]
[229.39759827 -27.95966911]
[240.48892212 -38.05831909]
[251.58023071 -48.15696716]
[262.67153931 -58.25561905]
[273.76287842 -68.35426331]
[267.51657104 -82.13246918]
[265.83569336 -97.16676331]
[268.88494873 -111.98423004]
[276.36553955 -125.13320923]
[287.54464722 -135.32550049]
[301.32702637 -141.56256104]
[316.36245728 -143.23335266]
[331.17785645 -140.17419434]
[344.32183838 -132.68478394]
[354.50662231 -121.49884796]
[360.73446655 -107.71228027]
[362.39517212 -92.67575836]
[359.32608032 -77.86238861]
[351.82785034 -64.72344208]
[340.63510132 -54.54614258]
[326.84439087 -48.32755280]
[311.80673218 -46.67691040]
[296.99542236 -49.75592804]
[283.86151123 -57.26295090]
[272.77020264 -47.16430283]
[261.67889404 -37.06565094]
[250.58757019 -26.96700287]
[239.49624634 -16.86835289]
[247.24504089 -4.04921246]
[252.34553528 10.03989506]
[254.59992981 24.85811043]
[253.91973877 39.83619690]
[250.32922363 54.39840698]
[243.96458435 67.98461151]
[235.06871033 80.07184601]
[223.98202515 90.19445038]
[211.12933350 97.96199036]
[197.00367737 103.07431793]
[182.14730835 105.33319855]
[167.13092041 104.64996338]
[152.53173828 101.04899597]
[138.91131592 94.66687012]
[126.79392242 85.74718475]
[133.15467834 100.88579559]
[130.82133484 118.57149506]
[119.04081726 133.80856323]
[99.88901520 141.61914062]
[77.98769379 138.60174561]
[78.29974365 153.59849548]
[78.61180115 168.59524536]
[78.92385864 183.59199524]
[79.23591614 198.58876038]
[79.54797363 213.58551025]
[79.86003113 228.58226013]
[80.17208099 243.57901001]
[80.48413849 258.57577515]
[80.79619598 273.57250977]
[81.10825348 288.56927490]
[95.76324463 292.16003418]
[108.98905182 299.42230225]
[119.88391876 309.86090088]
[127.70501709 322.76409912]
[131.91908264 337.25216675]
[132.23881531 352.33728027]
[128.64237976 366.99087524]
[121.37502289 380.21386719]
[110.93222046 391.10470581]
[98.02599335 398.92083740]
[83.53630066 403.12930298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 39]
[23 38]
[24 37]
[25 36]
[46 65]
[47 64]
[48 63]
[49 62]
[67 124]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
