%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUAGCCCUGGGGGGGGGGACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAxxxxxxxxxxAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUACCCCCCCCCCGCCUACCCCU\
) } def
/len { sequence length } bind def

/coor [
[99.87889099 375.11685181]
[86.03295135 369.10083008]
[74.32428741 359.57141113]
[65.62176514 347.23574829]
[60.57116318 333.00921631]
[59.54727173 317.94754028]
[62.62607193 303.16839600]
[69.57909393 289.76846313]
[79.89038086 278.74212646]
[92.79476166 270.90762329]
[107.33464813 266.84631348]
[107.33464813 251.84629822]
[107.33464813 236.84629822]
[107.33464813 221.84629822]
[107.33464813 206.84629822]
[107.33464813 191.84629822]
[107.33464813 176.84629822]
[107.33464813 161.84629822]
[107.33464813 146.84629822]
[107.33464813 131.84629822]
[86.45788574 129.31236267]
[71.68929291 114.69802856]
[69.00260162 94.35030365]
[54.04235077 93.25899506]
[39.08210373 92.16768646]
[24.12185478 91.07637024]
[9.16160583 89.98506165]
[-5.79864264 88.89375305]
[-11.61802864 98.89762115]
[-20.72872925 105.95081329]
[-31.77222633 109.05058289]
[-43.12006760 107.78005219]
[-53.11397552 102.36385345]
[-60.30817413 93.62956238]
[-63.67851639 82.88146973]
[-78.54156494 80.85913849]
[-93.40460968 78.83679962]
[-104.85710144 89.48455048]
[-120.47699738 90.22804260]
[-132.88906860 80.71623993]
[-136.23271179 65.44030762]
[-128.92915344 51.61307907]
[-114.42692566 45.76335526]
[-99.57352448 50.65319061]
[-91.38227844 63.97375488]
[-76.51922607 65.99608612]
[-61.65618134 68.01842499]
[-49.61740494 53.80836487]
[-31.31815910 49.61757278]
[-14.02284622 57.29277802]
[-4.70733213 73.93350220]
[10.25291634 75.02481079]
[25.21316528 76.11612701]
[40.17341232 77.20743561]
[55.13366318 78.29874420]
[70.09391022 79.39005280]
[80.97274017 69.06285095]
[80.66068268 54.06609726]
[80.34862518 39.06934357]
[80.03656769 24.07258987]
[66.68396759 16.61234283]
[58.90962982 3.55644441]
[58.71541214 -11.53754997]
[66.05334473 -24.61465645]
[78.86538696 -32.21183395]
[78.55332947 -47.20858765]
[78.24127197 -62.20534134]
[63.96743393 -67.36498260]
[52.52392197 -77.33546448]
[45.45837784 -90.76834869]
[43.72636032 -105.84696198]
[47.56210709 -120.53204346]
[56.44686890 -132.83753967]
[69.17905426 -141.09925842]
[84.03673553 -144.19985962]
[99.01053619 -141.72000122]
[112.07537842 -133.99507141]
[121.46434021 -122.06981659]
[125.90764618 -107.55701447]
[124.80437469 -92.41940308]
[118.30373383 -78.70422363]
[107.28488159 -68.26634216]
[93.23802948 -62.51739502]
[93.55008698 -47.52064133]
[93.86214447 -32.52388763]
[106.97912598 -25.46625137]
[114.85469818 -12.70570946]
[115.28852844 2.38329816]
[108.06403351 15.75129604]
[95.03332520 23.76053429]
[95.34537506 38.75728607]
[95.65743256 53.75403976]
[95.96949005 68.75079346]
[113.40733337 71.05571747]
[127.09783173 82.44122314]
[132.67730713 99.57863617]
[147.25001526 96.02388000]
[161.82270813 92.46911621]
[162.93652344 77.38220978]
[168.65980530 63.37866974]
[178.43185425 51.83041382]
[191.29530334 43.86881638]
[205.98991394 40.27388382]
[221.07606506 41.39780426]
[235.07577515 47.13047409]
[246.61747742 56.91025543]
[254.57044983 69.77902985]
[258.15554810 84.47605133]
[257.02151489 99.56144714]
[251.27946472 113.55730438]
[241.49194336 125.09246063]
[228.61784363 133.03680420]
[213.91842651 136.61204529]
[198.83380127 135.46791077]
[184.84178162 129.71647644]
[173.31320190 119.92124176]
[165.37747192 107.04181671]
[150.80477905 110.59658051]
[136.23207092 114.15134430]
[150.72506714 118.01827240]
[165.71203613 117.39340210]
[179.12196350 124.11456299]
[187.59034729 136.49545288]
[188.99253845 151.42976379]
[182.97671509 165.17057800]
[171.05221558 174.27038574]
[156.21084595 176.44610596]
[142.17622375 171.15184021]
[132.46954346 159.71591187]
[129.52603149 145.01004028]
[122.33464813 131.84629822]
[122.33464813 146.84629822]
[122.33464813 161.84629822]
[122.33464813 176.84629822]
[122.33464813 191.84629822]
[122.33464813 206.84629822]
[122.33464813 221.84629822]
[122.33464813 236.84629822]
[122.33464813 251.84629822]
[122.33464813 266.84631348]
[136.87452698 270.90762329]
[149.77891541 278.74212646]
[160.09019470 289.76846313]
[167.04321289 303.16839600]
[170.12202454 317.94754028]
[169.09812927 333.00921631]
[164.04753113 347.23574829]
[155.34500122 359.57141113]
[143.63633728 369.10083008]
[129.79040527 375.11685181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[35 47]
[36 46]
[37 45]
[57 93]
[58 92]
[59 91]
[60 90]
[65 85]
[66 84]
[67 83]
[96 119]
[97 118]
[98 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
