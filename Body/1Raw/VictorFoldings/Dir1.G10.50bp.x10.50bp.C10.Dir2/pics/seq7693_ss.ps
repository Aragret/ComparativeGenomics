%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCAUCCCGGGGGGGGGGUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCxxxxxxxxxxCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCCCCCCCCCCCUCCCAUUCC\
) } def
/len { sequence length } bind def

/coor [
[73.27503204 512.42419434]
[59.25308990 506.87115479]
[47.05313110 498.00482178]
[37.44206238 486.38250732]
[31.02403641 472.73483276]
[28.20249939 457.91964722]
[29.15481567 442.86825562]
[33.82112122 428.52682495]
[41.90808487 415.79687500]
[52.90736008 405.47860718]
[66.12751770 398.22064209]
[80.73753357 394.47918701]
[80.73753357 379.47918701]
[80.73753357 364.47918701]
[80.73753357 349.47918701]
[80.73753357 334.47918701]
[80.73753357 319.47918701]
[80.73753357 304.47918701]
[80.73753357 289.47918701]
[80.73753357 274.47918701]
[80.73753357 259.47918701]
[80.73753357 244.47918701]
[69.90967560 238.83854675]
[62.48303604 229.05705261]
[59.92884064 216.97016907]
[62.79663086 204.87937927]
[70.59747314 195.11399841]
[81.88605499 189.58233643]
[82.50188446 174.59498596]
[83.11770630 159.60762024]
[83.73353577 144.62026978]
[73.52469635 155.61024475]
[59.03185654 159.47775269]
[44.70478439 155.03533936]
[34.94235611 143.64697266]
[32.74195480 128.80923462]
[38.77917099 115.07781982]
[51.20038223 106.66868591]
[66.19187927 106.16373444]
[79.15078735 113.71797943]
[86.09793854 127.01023865]
[89.45719147 112.39123535]
[83.87039185 102.12818909]
[86.60406494 90.76731873]
[96.24804688 84.16913605]
[95.30630493 75.01987457]
[100.13408661 69.36260223]
[104.09069824 54.89383698]
[108.04730988 40.42507172]
[96.30912018 28.82161331]
[92.03123474 12.97733212]
[96.28544617 -2.77630615]
[107.82432556 -14.18162251]
[123.44498444 -18.20540428]
[127.10369110 -32.75235748]
[130.76239014 -47.29931259]
[134.42109680 -61.84626389]
[138.07980347 -76.39321899]
[141.73851013 -90.94017029]
[127.77278137 -96.47309875]
[114.64874268 -103.78163910]
[102.59098053 -112.74073029]
[91.80580902 -123.19707489]
[82.47777557 -134.97174072]
[74.76650238 -147.86326599]
[68.80393982 -161.65104675]
[64.69210815 -176.09915161]
[62.50136566 -190.96035767]
[62.26920700 -205.98039246]
[63.99959564 -220.90220642]
[67.66293335 -235.47048950]
[73.19652557 -249.43597412]
[80.50568390 -262.55966187]
[89.46535492 -274.61700439]
[99.92221069 -285.40167236]
[111.69731903 -294.72912598]
[124.58921051 -302.43978882]
[138.37727356 -308.40170288]
[152.82557678 -312.51284790]
[167.68688965 -314.70288086]
[182.70692444 -314.93432617]
[197.62866211 -313.20321655]
[212.19677734 -309.53921509]
[226.16198730 -304.00494385]
[239.28532410 -296.69515991]
[251.34223938 -287.73492432]
[262.12640381 -277.27755737]
[271.45333862 -265.50198364]
[279.16336060 -252.60974121]
[285.12463379 -238.82139587]
[289.23507690 -224.37289429]
[291.42440796 -209.51147461]
[291.65515137 -194.49142456]
[289.92330933 -179.56976318]
[286.25860596 -165.00183105]
[280.72369385 -151.03688049]
[273.41326904 -137.91389465]
[264.45245361 -125.85740662]
[253.99456787 -115.07373047]
[242.21856689 -105.74737549]
[229.32594299 -98.03794861]
[215.53732300 -92.07734680]
[201.08862305 -87.96758270]
[186.22709656 -85.77896118]
[171.20704651 -85.54894257]
[156.28546143 -87.28147125]
[152.62675476 -72.73451233]
[148.96806335 -58.18756104]
[145.30935669 -43.64060593]
[141.65065002 -29.09365273]
[137.99194336 -14.54669762]
[148.42309570 -5.68062782]
[154.03144836 6.88049555]
[153.66560364 20.69822884]
[147.34004211 33.06301117]
[136.24353027 41.52549744]
[122.51607513 44.38167953]
[118.55947113 58.85044861]
[114.60285950 73.31921387]
[110.79499817 87.82784271]
[115.81792450 103.80613708]
[104.07620239 115.75049591]
[100.71694183 130.36950684]
[98.72088623 145.23609924]
[98.10505676 160.22344971]
[97.48923492 175.21080017]
[96.87341309 190.19816589]
[111.39775848 200.96598816]
[116.55182648 218.13298035]
[110.46755219 234.82632446]
[95.73753357 244.47918701]
[95.73753357 259.47918701]
[95.73753357 274.47918701]
[95.73753357 289.47918701]
[95.73753357 304.47918701]
[95.73753357 319.47918701]
[95.73753357 334.47918701]
[95.73753357 349.47918701]
[95.73753357 364.47918701]
[95.73753357 379.47918701]
[95.73753357 394.47918701]
[110.34754181 398.22064209]
[123.56770325 405.47860718]
[134.56698608 415.79687500]
[142.65394592 428.52682495]
[147.32025146 442.86825562]
[148.27256775 457.91964722]
[145.45103455 472.73483276]
[139.03300476 486.38250732]
[129.42193604 498.00482178]
[117.22197723 506.87115479]
[103.20003510 512.42419434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[28 127]
[29 126]
[30 125]
[31 124]
[41 123]
[42 122]
[45 120]
[47 119]
[48 118]
[49 117]
[54 111]
[55 110]
[56 109]
[57 108]
[58 107]
[59 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
