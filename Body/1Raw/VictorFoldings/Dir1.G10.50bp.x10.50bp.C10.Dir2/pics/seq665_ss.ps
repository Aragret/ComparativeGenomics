%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUACAACCGGGGGGGGGGCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGxxxxxxxxxxCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCCCCCCCCCCCAAUACUACC\
) } def
/len { sequence length } bind def

/coor [
[83.43321991 367.02651978]
[70.21302032 359.75405884]
[59.32621765 349.30706787]
[51.51508713 336.39779663]
[47.31220627 321.90649414]
[47.00413132 306.82113647]
[50.61187363 292.17031860]
[57.88944626 278.95294189]
[68.34065247 268.07015991]
[81.25291443 260.26403809]
[95.74584961 256.06674194]
[95.43379974 241.06999207]
[95.12174225 226.07322693]
[94.80968475 211.07647705]
[94.49762726 196.07972717]
[94.18556976 181.08297729]
[93.87351227 166.08621216]
[93.56146240 151.08946228]
[93.24940491 136.09271240]
[92.93734741 121.09595490]
[78.02348328 103.45730591]
[86.80123901 82.09153748]
[82.49365234 67.72335052]
[78.18607330 53.35516739]
[63.54644394 56.65154266]
[48.71253586 58.91867447]
[33.75661469 60.14551544]
[18.75154495 60.32609558]
[3.77043009 59.45952606]
[-11.11374187 57.55003357]
[-25.82845688 54.60692215]
[-40.30202484 50.64453125]
[-54.46393204 45.68215942]
[-68.24517822 39.74398804]
[-81.57862854 32.85894394]
[-94.39932251 25.06057358]
[-106.64479828 16.38687134]
[-118.25538635 6.88009119]
[-129.17453003 -3.41344738]
[-139.34904480 -14.44359589]
[-148.72933960 -26.15661621]
[-157.26971436 -38.49544525]
[-164.92857361 -51.39996338]
[-171.66859436 -64.80730438]
[-177.45693970 -78.65214539]
[-182.26542664 -92.86704254]
[-186.07060242 -107.38273621]
[-188.85394287 -122.12850952]
[-190.60189819 -137.03251648]
[-191.30592346 -152.02214050]
[-190.96261597 -167.02436829]
[-189.57363892 -181.96611023]
[-187.14575195 -196.77455139]
[-183.69078064 -211.37756348]
[-179.22558594 -225.70399475]
[-173.77188110 -239.68405151]
[-167.35627747 -253.24961853]
[-160.00999451 -266.33462524]
[-151.76884460 -278.87527466]
[-142.67298889 -290.81051636]
[-132.76670837 -302.08218384]
[-122.09828949 -312.63534546]
[-110.71970367 -322.41864014]
[-98.68638611 -331.38433838]
[-86.05696106 -339.48880005]
[-72.89295959 -346.69253540]
[-59.25851822 -352.96044922]
[-45.22005844 -358.26199341]
[-30.84597588 -362.57135010]
[-16.20630264 -365.86752319]
[-1.37236238 -368.13442993]
[13.58357620 -369.36105347]
[28.58864975 -369.54144287]
[43.56975174 -368.67465210]
[58.45389557 -366.76495361]
[73.16856384 -363.82162476]
[87.64207458 -359.85900879]
[101.80391693 -354.89645386]
[115.58507538 -348.95806885]
[128.91842651 -342.07284546]
[141.73901367 -334.27429199]
[153.98435974 -325.60040283]
[165.59481812 -316.09347534]
[176.51382446 -305.79977417]
[186.68815613 -294.76947021]
[196.06828308 -283.05630493]
[204.60848999 -270.71737671]
[212.26716614 -257.81274414]
[219.00698853 -244.40530396]
[224.79515076 -230.56037903]
[229.60342407 -216.34541321]
[233.40840149 -201.82966614]
[236.19152832 -187.08386230]
[237.93925476 -172.17982483]
[238.64308167 -157.19018555]
[238.29954529 -142.18795776]
[236.91035461 -127.24624634]
[234.48225403 -112.43782806]
[231.02708435 -97.83486938]
[226.56167603 -83.50849915]
[221.10778809 -69.52851868]
[214.69197083 -55.96304703]
[207.34550476 -42.87816238]
[199.10418701 -30.33761597]
[190.00814819 -18.40250778]
[180.10171509 -7.13098383]
[169.43313599 3.42204189]
[158.05441284 13.20515537]
[146.02096558 22.17069435]
[133.39143372 30.27497864]
[120.22732544 37.47852325]
[106.59278870 43.74623871]
[92.55425262 49.04758072]
[96.86183929 63.41576767]
[101.16942596 77.78395081]
[109.62851715 79.94477081]
[116.60466766 85.19441223]
[121.02344513 92.72434235]
[122.20428467 101.37483978]
[135.98666382 107.29479980]
[149.76904297 113.21476746]
[166.70872498 113.91036987]
[170.72966003 130.38059998]
[156.01620483 138.80381775]
[143.84909058 126.99714661]
[130.06669617 121.07717896]
[116.28432465 115.15721893]
[113.79826355 117.45073700]
[110.99324036 119.34086609]
[107.93409729 120.78389740]
[108.24615479 135.78065491]
[108.55821228 150.77740479]
[108.87026978 165.77415466]
[109.18232727 180.77091980]
[109.49438477 195.76766968]
[109.80643463 210.76441956]
[110.11849213 225.76116943]
[110.43054962 240.75793457]
[110.74260712 255.75468445]
[125.39759827 259.34545898]
[138.62341309 266.60769653]
[149.51828003 277.04629517]
[157.33937073 289.94952393]
[161.55343628 304.43759155]
[161.87316895 319.52267456]
[158.27673340 334.17626953]
[151.00936890 347.39929199]
[140.56657410 358.29013062]
[127.66034698 366.10623169]
[113.17065430 370.31472778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 115]
[23 114]
[24 113]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
