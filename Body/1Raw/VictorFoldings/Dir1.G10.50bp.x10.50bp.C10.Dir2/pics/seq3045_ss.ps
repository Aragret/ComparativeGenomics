%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUACGUGGGGGGGGGGGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAxxxxxxxxxxAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCCCCCCCCCCCAGUCCUACUU\
) } def
/len { sequence length } bind def

/coor [
[102.77401733 581.54132080]
[88.92807770 575.52526855]
[77.21942139 565.99584961]
[68.51689148 553.66021729]
[63.46629333 539.43365479]
[62.44240189 524.37200928]
[65.52120209 509.59283447]
[72.47422028 496.19290161]
[82.78550720 485.16656494]
[95.68988800 477.33206177]
[110.22977448 473.27075195]
[110.22977448 458.27075195]
[110.22977448 443.27075195]
[110.22977448 428.27075195]
[110.22977448 413.27075195]
[110.22977448 398.27075195]
[110.22977448 383.27075195]
[110.22977448 368.27075195]
[110.22977448 353.27075195]
[110.22977448 338.27075195]
[110.22977448 323.27075195]
[102.49247742 310.54345703]
[110.22977448 296.74328613]
[102.49247742 284.01602173]
[110.22977448 270.21585083]
[110.22977448 255.21585083]
[110.22977448 240.21585083]
[102.49247742 227.48858643]
[110.22977448 213.68840027]
[108.98290253 198.74032593]
[106.49777985 183.94761658]
[104.01266479 169.15490723]
[101.52754211 154.36219788]
[99.04242706 139.56948853]
[96.55730438 124.77678680]
[76.95010376 116.27088928]
[69.23394775 93.65493011]
[54.41619110 91.32382965]
[39.59843445 88.99272156]
[24.49739838 95.38731384]
[11.57381248 85.29211426]
[14.12235355 69.09220886]
[29.52130127 63.45266724]
[41.92953873 74.17496490]
[56.74729538 76.50607300]
[71.56505585 78.83717346]
[82.86405945 68.97145081]
[82.55200195 53.97469711]
[82.23994446 38.97794342]
[72.33290100 23.49148750]
[81.30574036 8.44196320]
[80.68176270 -6.54505253]
[72.37709045 -20.01141930]
[79.57826233 -33.04953384]
[78.95428467 -48.03655243]
[64.02259064 -49.76603317]
[49.54531860 -53.81016922]
[35.87897873 -60.06937790]
[23.36011887 -68.38951111]
[12.29702663 -78.56568146]
[2.96214056 -90.34729767]
[-4.41465902 -103.44421387]
[-9.65171242 -117.53392029]
[-12.62005138 -132.26943970]
[-13.24657917 -147.28788757]
[-11.51586628 -162.21943665]
[-7.47053337 -176.69638062]
[-1.21019971 -190.36219788]
[7.11096764 -202.88037109]
[17.28805161 -213.94262695]
[29.07043457 -223.27653503]
[42.16796494 -230.65225220]
[56.25809860 -235.88815308]
[70.99385834 -238.85527039]
[86.01236725 -239.48056030]
[100.94377136 -237.74861145]
[115.42037964 -233.70208740]
[129.08567810 -227.44062805]
[141.60316467 -219.11842346]
[152.66458130 -208.94042969]
[161.99752808 -197.15727234]
[169.37216187 -184.05914307]
[174.60688782 -169.96856689]
[177.57279968 -155.23255920]
[178.19685364 -140.21400452]
[176.46366882 -125.28274536]
[172.41595459 -110.80647278]
[166.15336609 -97.14168549]
[157.83012390 -84.62488556]
[147.65121460 -73.56431580]
[135.86729431 -64.23234558]
[122.76854706 -56.85878372]
[108.67755127 -51.62522125]
[93.94129944 -48.66053009]
[94.56527710 -33.67351151]
[102.82530975 -21.27911758]
[95.66877747 -7.16902971]
[96.29275513 7.81798601]
[105.00054932 16.27266312]
[105.60648346 28.79671288]
[97.23670197 38.66588593]
[97.54875946 53.66263962]
[97.86080933 68.65939331]
[113.90469360 73.26603699]
[124.69734955 85.08032990]
[127.57404327 100.11940002]
[122.38800049 113.79063416]
[111.35001373 122.29166412]
[113.83512878 137.08436584]
[116.32025146 151.87707520]
[118.80536652 166.66978455]
[121.29048920 181.46249390]
[123.77560425 196.25520325]
[132.09503174 183.77372742]
[146.10548401 178.41581726]
[160.63038635 182.16111755]
[170.30307007 193.62579346]
[171.54968262 208.57391357]
[163.90960693 221.48240662]
[150.20571899 227.58186340]
[135.50132751 224.61865234]
[125.22977448 213.68840027]
[132.96707153 227.48858643]
[125.22977448 240.21585083]
[125.22977448 255.21585083]
[125.22977448 270.21585083]
[132.96707153 284.01602173]
[125.22977448 296.74328613]
[132.96707153 310.54345703]
[125.22977448 323.27075195]
[125.22977448 338.27075195]
[125.22977448 353.27075195]
[125.22977448 368.27075195]
[125.22977448 383.27075195]
[125.22977448 398.27075195]
[125.22977448 413.27075195]
[125.22977448 428.27075195]
[125.22977448 443.27075195]
[125.22977448 458.27075195]
[125.22977448 473.27075195]
[139.76965332 477.33206177]
[152.67404175 485.16656494]
[162.98532104 496.19290161]
[169.93835449 509.59283447]
[173.01715088 524.37200928]
[171.99325562 539.43365479]
[166.94265747 553.66021729]
[158.24012756 565.99584961]
[146.53146362 575.52526855]
[132.68553162 581.54132080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[25 126]
[26 125]
[27 124]
[29 122]
[30 113]
[31 112]
[32 111]
[33 110]
[34 109]
[35 108]
[37 46]
[38 45]
[39 44]
[47 103]
[48 102]
[49 101]
[51 98]
[52 97]
[54 95]
[55 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
