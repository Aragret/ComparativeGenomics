%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGGCCUAGGGGGGGGGGCUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAxxxxxxxxxxGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACCCCCCCCCCCAUAUGGCCUA\
) } def
/len { sequence length } bind def

/coor [
[-29.04538918 287.44134521]
[-39.75626755 279.59719849]
[-49.99149704 271.14181519]
[-59.71623993 262.10397339]
[-68.89739990 252.51438904]
[-77.50372314 242.40576172]
[-85.50593567 231.81243896]
[-92.87677765 220.77052307]
[-99.59118652 209.31756592]
[-112.97747040 216.08567810]
[-121.80187988 229.21733093]
[-136.65106201 228.05506897]
[-150.03735352 234.82318115]
[-163.42362976 241.59129333]
[-176.80992126 248.35940552]
[-190.19621277 255.12751770]
[-203.43879700 262.17266846]
[-216.53195190 269.49176025]
[-224.80245972 282.97912598]
[-239.68713379 282.43557739]
[-252.78028870 289.75466919]
[-265.87344360 297.07379150]
[-278.96661377 304.39288330]
[-286.89300537 318.74923706]
[-303.29208374 318.79235840]
[-311.29388428 304.47790527]
[-302.66683960 290.53137207]
[-286.28570557 291.29974365]
[-273.19256592 283.98062134]
[-260.09939575 276.66152954]
[-247.00624084 269.34240723]
[-239.67224121 256.37857056]
[-223.85105896 256.39862061]
[-210.75790405 249.07949829]
[-208.60733032 244.74931335]
[-203.68051147 241.75634766]
[-196.96432495 241.74124146]
[-183.57803345 234.97312927]
[-170.19175720 228.20501709]
[-156.80546570 221.43688965]
[-143.41917419 214.66877747]
[-135.55224609 202.02122498]
[-119.74559021 202.69940186]
[-106.35929871 195.93127441]
[-112.06613922 182.55256653]
[-116.90664673 168.83660889]
[-120.86106110 154.83944702]
[-123.91322327 140.61824036]
[-126.05065918 126.23112488]
[-127.26464081 111.73683929]
[-127.55021667 97.19461060]
[-126.90621185 82.66383362]
[-125.33525848 68.20388794]
[-122.84377289 53.87383270]
[-119.44194031 39.73220825]
[-115.14364624 25.83678627]
[-109.96646118 12.24433422]
[-103.93152618 -0.98962182]
[-97.06349945 -13.81101990]
[-89.39044189 -26.16748047]
[-80.94368744 -38.00852966]
[-71.75775146 -49.28578949]
[-61.87015915 -59.95319366]
[-51.32130051 -69.96716309]
[-40.15426636 -79.28678894]
[-28.41468430 -87.87400055]
[-16.15050697 -95.69371796]
[-3.41183662 -102.71399689]
[9.74928761 -108.90615082]
[23.27910042 -114.24489594]
[37.12232971 -118.70841217]
[51.22242737 -122.27847290]
[65.52178955 -124.94049072]
[79.96199799 -126.68359375]
[94.48406219 -127.50064850]
[109.02866364 -127.38833618]
[123.53637695 -126.34709930]
[137.94795227 -124.38120270]
[152.20449829 -121.49867249]
[166.24777222 -117.71128845]
[180.02041626 -113.03451538]
[193.46617126 -107.48746490]
[206.53009033 -101.09278870]
[213.98500061 -114.10910034]
[221.43991089 -127.12541199]
[228.89482117 -140.14172363]
[231.52005005 -156.89118958]
[248.34167480 -159.00527954]
[255.02983093 -143.42628479]
[241.91113281 -132.68681335]
[234.45622253 -119.67050171]
[227.00131226 -106.65419006]
[219.54640198 -93.63787842]
[240.37615967 -79.11310577]
[259.45797729 -62.35802460]
[276.55419922 -43.58127213]
[291.45202637 -23.01665878]
[303.96588135 -0.92024791]
[317.62210083 -7.12565517]
[331.27835083 -13.33106232]
[344.93460083 -19.53646851]
[356.85345459 -31.59370422]
[371.73895264 -23.47840691]
[368.06152344 -6.92809391]
[351.13998413 -5.88022804]
[337.48376465 0.32517913]
[323.82751465 6.53058624]
[310.17126465 12.73599339]
[314.90234375 25.14044571]
[318.90200806 37.79967880]
[322.15667725 50.67060471]
[324.65521240 63.70941925]
[326.38916016 76.87174988]
[327.35263062 90.11279297]
[327.54229736 103.38748932]
[326.95755005 116.65065002]
[325.60037231 129.85714722]
[323.47537231 142.96202087]
[320.58978271 155.92068481]
[316.95343018 168.68902588]
[312.57870483 181.22358704]
[307.48046875 193.48170471]
[301.67608643 205.42167664]
[295.18530273 217.00283813]
[288.03024292 228.18579102]
[280.23522949 238.93247986]
[271.82681274 249.20631409]
[262.83355713 258.97232056]
[253.28613281 268.19729614]
[243.21701050 276.84982300]
[232.66044617 284.90045166]
[221.65238953 292.32177734]
[210.23030090 299.08856201]
[198.43304443 305.17773438]
[186.30076599 310.56863403]
[173.87478638 315.24285889]
[161.19737244 319.18450928]
[148.31167603 322.38018799]
[135.26156616 324.81903076]
[122.09143066 326.49270630]
[108.84611511 327.39550781]
[95.57069397 327.52441406]
[82.31034088 326.87893677]
[69.11019897 325.46127319]
[56.01518631 323.27630615]
[43.06987381 320.33142090]
[30.31832123 316.63665771]
[17.80392265 312.20455933]
[5.56927347 307.05026245]
[-6.34398651 301.19128418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 44]
[10 43]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[17 34]
[18 33]
[20 31]
[21 30]
[22 29]
[23 28]
[83 93]
[84 92]
[85 91]
[86 90]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
