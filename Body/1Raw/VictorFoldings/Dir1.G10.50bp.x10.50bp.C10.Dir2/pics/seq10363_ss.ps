%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUAAUAGGGGGGGGGGGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACxxxxxxxxxxUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUAUUA\
) } def
/len { sequence length } bind def

/coor [
[103.11106110 551.88647461]
[90.55284119 543.53533936]
[80.46661377 532.32287598]
[73.48641968 518.95397949]
[70.05104065 504.26898193]
[70.37641144 489.19100952]
[74.44210052 474.66790771]
[81.99251556 461.61254883]
[92.55304718 450.84567261]
[105.45984650 443.04403687]
[119.90157318 438.69808960]
[119.27759552 423.71105957]
[118.65361786 408.72406006]
[118.02964020 393.73703003]
[117.40566254 378.75000000]
[116.78168488 363.76300049]
[116.15770721 348.77597046]
[115.53372955 333.78897095]
[114.90975189 318.80194092]
[114.28577423 303.81494141]
[113.66179657 288.82791138]
[99.61386871 283.76974487]
[88.54276276 273.69125366]
[82.15650177 260.10522461]
[81.45643616 245.06867981]
[86.58035278 230.87153625]
[96.77674103 219.68775940]
[110.51483917 213.24256897]
[109.89086151 198.25555420]
[108.33328247 183.33663940]
[105.84815979 168.54394531]
[103.36304474 153.75123596]
[100.57071686 139.01342773]
[97.47239685 124.33689880]
[94.37407684 109.66037750]
[91.12324524 95.01687622]
[87.72026825 80.40798187]
[84.31729126 65.79908752]
[80.91431427 51.19019699]
[75.88914490 43.48308563]
[77.59585571 36.24203873]
[74.49753571 21.56551170]
[71.39920807 6.88898706]
[68.14838409 -7.75451422]
[57.48204803 -19.43953896]
[62.13023376 -33.59028625]
[58.72725296 -48.19918060]
[54.56936646 -62.61139679]
[49.66781616 -76.78795624]
[44.76626587 -90.96450806]
[39.86471558 -105.14106750]
[24.98616600 -102.91767883]
[9.95241642 -103.46631622]
[-4.72449255 -106.76828766]
[-18.54467010 -112.71112823]
[-31.03740311 -121.09243011]
[-41.77719879 -131.62672424]
[-50.39826202 -143.95523071]
[-56.60696030 -157.65803528]
[-60.19182968 -172.26841736]
[-61.03076935 -187.28875732]
[-59.09520721 -202.20748901]
[-54.45106506 -216.51644897]
[-47.25652695 -229.72831726]
[-37.75662613 -241.39306641]
[-26.27493668 -251.11343384]
[-13.20251274 -258.55831909]
[1.01540112 -263.47418213]
[15.89454842 -265.69354248]
[30.92815018 -265.14086914]
[45.60416794 -261.83493042]
[59.42274094 -255.88836670]
[71.91321564 -247.50369263]
[82.65016937 -236.96650696]
[91.26791382 -224.63568115]
[97.47291565 -210.93121338]
[101.05384827 -196.31985474]
[101.88874054 -181.29928589]
[99.94915771 -166.38108826]
[95.30115509 -152.07336426]
[88.10305786 -138.86344910]
[78.60001373 -127.20124817]
[67.11569977 -117.48398590]
[54.04127121 -110.04261780]
[58.94282150 -95.86606598]
[63.84437561 -81.68950653]
[68.74592590 -67.51294708]
[77.85097504 -79.43343353]
[92.84172058 -79.96027374]
[102.76113892 -68.70837402]
[100.35894012 -53.90197754]
[87.39093781 -46.36335373]
[73.33614349 -51.60215759]
[76.73912811 -36.99326324]
[87.16205597 -26.35316467]
[82.75727844 -11.15749264]
[87.36766052 -5.31882381]
[86.07573700 3.79066515]
[89.17405701 18.46718979]
[92.27237701 33.14371490]
[95.52320862 47.78721619]
[98.92618561 62.39611053]
[102.32916260 77.00500488]
[105.73213959 91.61389160]
[110.51126099 98.17469025]
[109.05059814 106.56204987]
[112.14891815 121.23857880]
[115.24724579 135.91510010]
[119.43852997 141.16302490]
[120.18733978 146.87884521]
[118.15574646 151.26611328]
[120.64086914 166.05882263]
[123.12598419 180.85153198]
[133.01487732 169.57279968]
[147.96881104 168.39802551]
[159.49761963 177.99421692]
[161.05577087 192.91305542]
[151.75863647 204.68435669]
[136.88468933 206.62487793]
[124.87787628 197.63157654]
[125.50185394 212.61859131]
[139.72816467 217.89949036]
[150.81890869 228.19699097]
[157.10522461 241.91908264]
[157.65750122 256.96176147]
[152.42268372 271.03164673]
[142.22766113 281.99554443]
[128.64881897 288.20394897]
[129.27279663 303.19094849]
[129.89677429 318.17797852]
[130.52075195 333.16497803]
[131.14472961 348.15200806]
[131.76870728 363.13900757]
[132.39268494 378.12603760]
[133.01666260 393.11303711]
[133.64062500 408.10006714]
[134.26460266 423.08709717]
[134.88858032 438.07409668]
[149.64158630 441.20452881]
[163.15222168 447.90631104]
[174.57121277 457.75808716]
[183.18072510 470.14062500]
[188.43957520 484.27551270]
[190.01718140 499.27426147]
[187.81436157 514.19396973]
[181.96961975 528.09686279]
[172.85034180 540.10888672]
[161.02976990 549.47509766]
[147.25096130 555.60656738]
[132.38006592 558.11798096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[28 121]
[29 120]
[30 113]
[31 112]
[32 111]
[33 108]
[34 107]
[35 106]
[36 104]
[37 103]
[38 102]
[39 101]
[41 100]
[42 99]
[43 98]
[44 96]
[46 94]
[47 93]
[48 87]
[49 86]
[50 85]
[51 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
