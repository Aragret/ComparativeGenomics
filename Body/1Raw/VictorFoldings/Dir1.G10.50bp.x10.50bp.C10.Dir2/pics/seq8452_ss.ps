%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUGCCUGGGGGGGGGGCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUxxxxxxxxxxUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCCCCCCCCCCCACUCCAGCCU\
) } def
/len { sequence length } bind def

/coor [
[82.95735931 387.42761230]
[70.39913940 379.07644653]
[60.31291580 367.86401367]
[53.33272171 354.49511719]
[49.89733887 339.81011963]
[50.22271347 324.73214722]
[54.28839874 310.20904541]
[61.83881760 297.15368652]
[72.39934540 286.38677979]
[85.30614471 278.58517456]
[99.74787140 274.23919678]
[99.12389374 259.25219727]
[98.49991608 244.26518250]
[97.87593842 229.27816772]
[97.25196075 214.29115295]
[96.62798309 199.30412292]
[96.00400543 184.31710815]
[95.38002777 169.33009338]
[94.75605011 154.34307861]
[94.13207245 139.35606384]
[77.16983032 132.59011841]
[65.01628113 118.95974731]
[60.23132324 101.33589935]
[45.41356277 99.00479889]
[31.49835777 109.55488586]
[14.58585644 106.86204529]
[5.01951122 93.06556702]
[-9.84353638 91.04322815]
[-24.70658302 89.02089691]
[-39.56962967 86.99855804]
[-45.55416489 100.85813904]
[-55.05693817 112.58843231]
[-67.37278748 121.31897736]
[-81.58779907 126.40190887]
[-96.64710999 127.46003723]
[-111.43323517 124.41484070]
[-124.84893036 117.49230194]
[-135.89868164 107.20610809]
[-143.76249695 94.31957245]
[-147.85685730 79.78895569]
[-147.87791443 64.69252777]
[-143.82411194 50.15054703]
[-135.99627686 37.24211884]
[-124.97527313 26.92513657]
[-111.57894135 19.96519089]
[-96.80137634 16.87875366]
[-81.73916626 17.89486122]
[-67.51003265 22.93811035]
[-55.16987610 31.63426018]
[-45.63440704 43.33799362]
[-39.61122513 57.18082428]
[-37.54729462 72.13551331]
[-22.68424797 74.15784454]
[-7.82120132 76.18018341]
[7.04184532 78.20251465]
[16.13885689 69.02421570]
[29.05742264 66.74716949]
[41.09702301 72.42836761]
[47.74466705 84.18704224]
[62.56242371 86.51814270]
[69.73904419 74.16190338]
[80.81800842 65.13764954]
[94.37060547 60.60910797]
[108.64914703 61.16027069]
[121.81232452 66.72005463]
[132.25213623 55.94924545]
[142.69195557 45.17843628]
[128.17370605 48.94943237]
[113.17882538 48.55725098]
[98.87754822 44.03250122]
[86.38594055 35.72830200]
[76.67886353 24.29271317]
[70.51387024 10.61818027]
[68.37207031 -4.22812271]
[70.42062378 -19.08757782]
[76.49965668 -32.80054092]
[86.13475037 -44.29684448]
[98.57398224 -52.67930222]
[112.84657288 -57.29373932]
[127.83869171 -57.78004456]
[142.38032532 -54.10026550]
[155.33663940 -46.54157639]
[165.69651794 -35.69385910]
[172.65147400 -22.40368462]
[175.65870667 -7.70822477]
[174.48355103 7.24567175]
[169.21771240 21.29099083]
[160.27024841 33.33354950]
[174.17280579 27.70159340]
[188.07536316 22.06963730]
[201.97790527 16.43767929]
[215.88046265 10.80572319]
[229.78302002 5.17376661]
[228.08799744 -9.82721519]
[230.50418091 -24.72904778]
[236.85227966 -38.42591858]
[246.66122437 -49.90142441]
[259.20312500 -58.30400848]
[273.54727173 -63.01014328]
[288.62927246 -63.67060089]
[303.32989502 -60.23637390]
[316.55828857 -52.96230698]
[327.33282471 -42.38817596]
[334.85394287 -29.29865837]
[338.56350708 -14.66508007]
[338.18627930 0.42664903]
[333.75024414 14.85662270]
[325.58456421 27.55404091]
[314.29522705 37.57667160]
[300.71994019 44.18076706]
[285.86608887 46.87625885]
[270.83593750 45.46313095]
[256.74481201 40.04623795]
[244.63835144 31.02755356]
[235.41497803 19.07632256]
[221.51242065 24.70827866]
[207.60986328 30.34023666]
[193.70730591 35.97219086]
[179.80476379 41.60414886]
[165.90220642 47.23610687]
[153.46275330 55.61824799]
[143.02294922 66.38906097]
[132.58312988 77.15986633]
[138.17227173 88.76566315]
[139.76095581 101.54881287]
[137.18270874 114.16964722]
[130.70771790 125.30550385]
[121.01456451 133.78935242]
[109.11908722 138.73208618]
[109.74306488 153.71910095]
[110.36704254 168.70611572]
[110.99102020 183.69313049]
[111.61499786 198.68014526]
[112.23897552 213.66717529]
[112.86295319 228.65419006]
[113.48693085 243.64120483]
[114.11090851 258.62820435]
[114.73488617 273.61523438]
[129.48788452 276.74566650]
[142.99851990 283.44741821]
[154.41751099 293.29922485]
[163.02702332 305.68176270]
[168.28587341 319.81665039]
[169.86347961 334.81536865]
[167.66067505 349.73510742]
[161.81591797 363.63796997]
[152.69664001 375.65005493]
[140.87606812 385.01620483]
[127.09725952 391.14770508]
[112.22635651 393.65908813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 60]
[24 59]
[27 55]
[28 54]
[29 53]
[30 52]
[65 123]
[66 122]
[67 121]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
