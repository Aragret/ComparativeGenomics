%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCUUUUAGGGGGGGGGGGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAxxxxxxxxxxUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCCCCCCCCCCCUACCCUUUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 397.25570679]
[71.19830322 391.23965454]
[59.48964310 381.71023560]
[50.78712082 369.37457275]
[45.73651886 355.14807129]
[44.71262741 340.08636475]
[47.79142761 325.30722046]
[54.74444962 311.90728760]
[65.05573273 300.88095093]
[77.96011353 293.04644775]
[92.50000000 288.98513794]
[92.50000000 273.98513794]
[92.50000000 258.98513794]
[92.50000000 243.98513794]
[92.50000000 228.98513794]
[92.50000000 213.98513794]
[92.50000000 198.98513794]
[92.50000000 183.98513794]
[92.50000000 168.98513794]
[92.50000000 153.98513794]
[92.50000000 138.98513794]
[92.50000000 123.98513794]
[87.15663910 121.60057831]
[82.50955963 118.04497528]
[78.81069183 113.51110840]
[76.26056671 108.24475098]
[61.26786804 108.71279144]
[46.27517319 109.18083954]
[31.31492233 110.27214813]
[16.41302109 111.98483276]
[1.51111817 113.69752502]
[-6.95547581 126.84480286]
[-21.90738869 131.42457581]
[-36.28478622 125.27440643]
[-43.29909897 111.29823303]
[-39.63838196 96.09516907]
[-27.03111839 86.84363556]
[-11.43006802 87.91192627]
[-0.20157151 98.79562378]
[14.70033073 97.08293152]
[29.60223389 95.37024689]
[31.46082115 93.19010925]
[34.32274246 91.63982391]
[37.94315720 91.11591339]
[41.93462372 91.91543579]
[45.80712891 94.18814087]
[60.79982376 93.72010040]
[75.79251862 93.25205231]
[87.05937958 78.45755005]
[105.41231537 75.45935059]
[112.86722565 62.44303894]
[120.32213593 49.42672729]
[120.46666718 33.60618210]
[133.50611877 26.40743446]
[140.96102905 13.39112473]
[148.41593933 0.37481502]
[140.75852966 -8.25844574]
[139.32197571 -22.10505867]
[137.76440430 -37.02397156]
[122.79879761 -38.71063995]
[108.54581451 -43.57546616]
[95.67208862 -51.39091492]
[84.77973938 -61.79143906]
[76.37823486 -74.29058838]
[70.86051941 -88.30375671]
[68.48467255 -103.17552185]
[69.36180878 -118.21030426]
[73.45091248 -132.70489502]
[80.56072235 -145.98136902]
[90.35869598 -157.41874695]
[102.38657379 -166.48210144]
[116.08178711 -172.74749756]
[130.80378723 -175.92190552]
[145.86399841 -175.85685730]
[160.55801392 -172.55537415]
[174.19859314 -166.17190552]
[186.14772034 -157.00498962]
[195.84652710 -145.48338318]
[202.84136963 -132.14598083]
[206.80509949 -117.61660767]
[207.55232239 -102.57480621]
[205.04808044 -87.72412109]
[199.40951538 -73.75914001]
[190.90034485 -61.33303833]
[179.91854858 -51.02700424]
[166.97778320 -43.32306290]
[152.68330383 -38.58155060]
[154.24089050 -23.66263962]
[167.09928894 -15.93855381]
[176.98472595 -28.29123497]
[191.68591309 -25.89864731]
[205.58847046 -31.53060532]
[219.49102783 -37.16256332]
[233.39358521 -42.79451752]
[247.29614258 -48.42647552]
[253.06092834 -60.01185608]
[264.80749512 -64.39790344]
[276.01251221 -59.73371506]
[290.02923584 -65.07522583]
[304.04592896 -70.41674042]
[318.06265259 -75.75825500]
[324.29632568 -90.28122711]
[339.00427246 -96.06497192]
[353.46054077 -89.67809296]
[359.08847046 -74.90981293]
[352.54910278 -60.52189255]
[337.72213745 -55.05042648]
[323.40417480 -61.74153900]
[309.38745117 -56.40002823]
[295.37072754 -51.05851364]
[281.35403442 -45.71700287]
[271.06741333 -31.53302383]
[252.92810059 -34.52391815]
[239.02554321 -28.89196205]
[225.12298584 -23.26000595]
[211.22042847 -17.62804985]
[197.31787109 -11.99609184]
[188.42683411 -0.04624587]
[172.73124695 -2.03599763]
[161.43225098 7.82972527]
[153.97734070 20.84603500]
[146.52243042 33.86234283]
[146.91111755 48.75187683]
[133.33843994 56.88163757]
[125.88353729 69.89794922]
[118.42862701 82.91426086]
[125.05818939 98.09633636]
[120.79823303 114.10568237]
[107.50000000 123.98513794]
[107.50000000 138.98513794]
[107.50000000 153.98513794]
[107.50000000 168.98513794]
[107.50000000 183.98513794]
[107.50000000 198.98513794]
[107.50000000 213.98513794]
[107.50000000 228.98513794]
[107.50000000 243.98513794]
[107.50000000 258.98513794]
[107.50000000 273.98513794]
[107.50000000 288.98513794]
[122.03988647 293.04644775]
[134.94427490 300.88095093]
[145.25555420 311.90728760]
[152.20857239 325.30722046]
[155.28736877 340.08636475]
[154.26348877 355.14807129]
[149.21287537 369.37457275]
[140.51036072 381.71023560]
[128.80169678 391.23965454]
[114.95575714 397.25570679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 48]
[27 47]
[28 46]
[29 41]
[30 40]
[31 39]
[50 126]
[51 125]
[52 124]
[54 122]
[55 121]
[56 120]
[58 88]
[59 87]
[89 119]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
