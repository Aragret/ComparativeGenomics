%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCUAACAAGGGGGGGGGGCCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAxxxxxxxxxxACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCACCCCCCCCCCACCCCCUGACAA\
) } def
/len { sequence length } bind def

/coor [
[47.79313278 374.00015259]
[32.54314041 370.64959717]
[17.50452042 366.45098877]
[2.72439575 361.41748047]
[-11.75091839 355.56481934]
[-25.87606621 348.91134644]
[-39.60678482 341.47790527]
[-52.90005112 333.28784180]
[-65.71421051 324.36676025]
[-78.00911713 314.74261475]
[-89.74623108 304.44561768]
[-100.88878632 293.50796509]
[-111.96789551 303.62002563]
[-123.04700470 313.73205566]
[-134.12611389 323.84408569]
[-145.20521545 333.95614624]
[-156.28431702 344.06817627]
[-167.36343384 354.18020630]
[-171.80714417 369.96582031]
[-187.76429749 373.74749756]
[-198.81954956 361.63497925]
[-193.60020447 346.08856201]
[-177.47547913 343.10110474]
[-166.39636230 332.98907471]
[-155.31726074 322.87701416]
[-144.23814392 312.76498413]
[-133.15904236 302.65295410]
[-122.07993317 292.54089355]
[-111.00082397 282.42886353]
[-120.19860840 271.21392822]
[-128.80097961 259.53604126]
[-136.78466797 247.42678833]
[-144.12811279 234.91888428]
[-150.81143188 222.04617310]
[-156.81655884 208.84344482]
[-162.12725830 195.34640503]
[-166.72918701 181.59153748]
[-170.60987854 167.61607361]
[-173.75885010 153.45776367]
[-176.16758728 139.15490723]
[-177.82955933 124.74617767]
[-178.74029541 110.27053070]
[-178.89733887 95.76712036]
[-178.30023193 81.27514648]
[-176.95062256 66.83380890]
[-174.85212708 52.48215485]
[-172.01045227 38.25898743]
[-168.43325806 24.20276260]
[-164.13023376 10.35149288]
[-159.11302185 -3.25736928]
[-153.39515686 -16.58702660]
[-146.99212646 -29.60143471]
[-139.92121887 -42.26540375]
[-132.20158386 -54.54469299]
[-123.85408783 -66.40609741]
[-114.90128326 -77.81753540]
[-105.36740112 -88.74816895]
[-95.27819824 -99.16842651]
[-84.66098022 -109.05014038]
[-73.54443359 -118.36659241]
[-61.95863724 -127.09258270]
[-49.93490219 -135.20451355]
[-37.50574875 -142.68046570]
[-24.70478249 -149.50021362]
[-11.56661797 -155.64532471]
[1.87321949 -161.09916687]
[15.57838917 -165.84700012]
[29.51183319 -169.87600708]
[43.63587570 -173.17526245]
[57.91232681 -175.73587036]
[72.30258179 -177.55088806]
[86.76772308 -178.61540222]
[101.26865387 -178.92655945]
[115.76615143 -178.48352051]
[130.22100830 -177.28744507]
[144.59416199 -175.34159851]
[158.84672546 -172.65124512]
[172.94017029 -169.22364807]
[186.83639526 -165.06806946]
[200.49780273 -160.19575500]
[213.88748169 -154.61987305]
[226.96919250 -148.35551453]
[239.70759583 -141.41960144]
[252.06823730 -133.83090210]
[264.01766968 -125.60993195]
[275.52362061 -116.77890778]
[286.55496216 -107.36172485]
[297.08184814 -97.38384247]
[307.07583618 -86.87223816]
[316.50991821 -75.85533142]
[325.35852051 -64.36292267]
[333.59780884 -52.42607880]
[341.20541382 -40.07707596]
[348.16082764 -27.34931183]
[354.44519043 -14.27719688]
[368.28881836 -20.05253983]
[382.13241577 -25.82788277]
[395.97601318 -31.60322762]
[409.81961060 -37.37857056]
[409.74612427 -52.57932663]
[415.49990845 -66.64923096]
[426.20361328 -77.44273376]
[440.22494507 -83.31388855]
[455.42578125 -83.36740112]
[469.48809814 -77.59510040]
[480.26751709 -66.87722778]
[486.12020874 -52.84817505]
[486.15374756 -37.64727783]
[480.36294556 -23.59255791]
[469.63088989 -12.82725811]
[455.59414673 -6.99300957]
[440.39321899 -6.97949266]
[426.34613037 -12.78876877]
[415.59497070 -23.53496552]
[401.75137329 -17.75962067]
[387.90774536 -11.98427773]
[374.06414795 -6.20893478]
[360.22055054 -0.43359134]
[365.43264771 14.28450584]
[369.81304932 29.27118874]
[373.34796143 44.47949982]
[376.02636719 59.86177826]
[377.83987427 75.36982727]
[378.78277588 90.95506287]
[378.85211182 106.56863403]
[378.04766846 122.16162109]
[376.37197876 137.68516541]
[373.83029175 153.09062195]
[370.43057251 168.32972717]
[366.18344116 183.35473633]
[361.10226440 198.11853027]
[355.20291138 212.57489014]
[348.50390625 226.67849731]
[341.02624512 240.38516235]
[332.79330444 253.65193176]
[323.83093262 266.43725586]
[314.16717529 278.70101929]
[303.83233643 290.40487671]
[292.85882568 301.51208496]
[281.28097534 311.98785400]
[269.13507080 321.79937744]
[256.45922852 330.91589355]
[243.29310608 339.30883789]
[229.67797852 346.95193481]
[215.65650940 353.82122803]
[201.27264404 359.89514160]
[186.57144165 365.15472412]
[171.59896851 369.58343506]
[156.40214539 373.16741943]
[141.02857971 375.89544678]
[125.52646637 377.75897217]
[109.94435883 378.75213623]
[94.33109283 378.87182617]
[78.73558807 378.11770630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
