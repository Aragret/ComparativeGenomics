%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAACGUAAGGGGGGGGGGAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACAxxxxxxxxxxGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUACCCCCCCCCCAACAACAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.30427551 440.19107056]
[71.45833588 434.17504883]
[59.74967575 424.64562988]
[51.04715347 412.30996704]
[45.99655151 398.08346558]
[44.97266006 383.02175903]
[48.05145645 368.24261475]
[55.00447845 354.84268188]
[65.31576538 343.81634521]
[78.22014618 335.98184204]
[92.76003265 331.92053223]
[92.76003265 316.92053223]
[92.76003265 301.92053223]
[92.76003265 286.92053223]
[92.76003265 271.92053223]
[92.76003265 256.92053223]
[92.76003265 241.92053223]
[92.76003265 226.92053223]
[92.76003265 211.92053223]
[92.76003265 196.92053223]
[84.41147614 188.11093140]
[84.32704926 175.57252502]
[93.10012817 166.06005859]
[93.41218567 151.06330872]
[82.36640167 130.88232422]
[84.50405884 112.06288910]
[70.00846100 115.92004395]
[55.51286316 119.77720642]
[41.01726532 123.63436890]
[29.78949547 135.58715820]
[13.88818932 131.57710266]
[9.67124748 115.72941589]
[21.47669792 104.34682465]
[37.16010666 109.13877106]
[51.65570450 105.28160858]
[66.15129852 101.42445374]
[80.64689636 97.56729126]
[86.56685638 83.78491211]
[79.38435364 70.61632538]
[72.20184326 57.44774628]
[65.01933289 44.27916336]
[50.97370911 49.61154175]
[36.33280182 52.98163986]
[21.36935806 54.32667542]
[6.36214018 53.62158966]
[-8.40927792 50.87952042]
[-22.66971397 46.15154648]
[-36.15350342 39.52575302]
[-48.60945511 31.12556839]
[-59.80551529 21.10748863]
[-69.53311920 9.65814114]
[-77.61103058 -3.00918007]
[-83.88877869 -16.65848923]
[-88.24941254 -31.03550720]
[-90.61168671 -45.87240219]
[-90.93159485 -60.89276886]
[-89.20317841 -75.81678772]
[-85.45864105 -90.36643219]
[-79.76773834 -104.27065277]
[-72.23649597 -117.27042389]
[-63.00519943 -129.12356567]
[-52.24583435 -139.60926819]
[-40.15884018 -148.53218079]
[-26.96938515 -155.72605896]
[-12.92318630 -161.05693054]
[1.71808624 -164.42543030]
[16.68167496 -165.76885986]
[31.68881798 -165.06214905]
[46.45993805 -162.31848145]
[60.71986389 -157.58895874]
[74.20293427 -150.96170044]
[86.65797424 -142.56018066]
[97.85295868 -132.54087830]
[107.57931519 -121.09048462]
[115.65586090 -108.42228699]
[121.93212891 -94.77230072]
[126.29120636 -80.39480591]
[128.65187073 -65.55765533]
[128.97015381 -50.53725433]
[127.24012756 -35.61342239]
[123.49401855 -21.06418419]
[117.80160522 -7.16057730]
[110.26895142 5.83837843]
[101.03637695 17.69052124]
[90.27587891 28.17505264]
[78.18791199 37.09665298]
[85.37042236 50.26523590]
[92.55293274 63.43381882]
[99.73544312 76.60240173]
[93.18691254 63.10733414]
[95.35258484 48.26449585]
[105.48406219 37.20315933]
[120.08018494 33.74581909]
[134.09693909 39.08723450]
[142.69050598 51.38156128]
[142.89120483 66.38021851]
[134.62966919 78.90008545]
[120.76051331 84.61466980]
[134.88531494 79.56591034]
[149.01011658 74.51715851]
[163.13491821 69.46839905]
[177.25971985 64.41964722]
[185.39572144 50.59267426]
[201.29844666 48.47542191]
[212.76869202 59.69206238]
[211.00747681 75.63814545]
[197.36582947 84.08120728]
[182.30848694 78.54444885]
[168.18367004 83.59320068]
[154.05886841 88.64196014]
[139.93406677 93.69071960]
[125.80926514 98.73947144]
[125.80926514 106.23947144]
[138.79966736 113.73944855]
[125.80926514 121.23947144]
[125.80926514 128.73947144]
[139.93406677 133.78822327]
[154.05886841 138.83699036]
[168.23455811 131.84945679]
[183.17213440 137.01127625]
[190.00939941 151.26004028]
[184.68992615 166.14221191]
[170.36967468 172.82844543]
[155.54458618 167.35192871]
[149.01011658 152.96179199]
[134.88531494 147.91302490]
[120.76051331 142.86427307]
[108.40893555 151.37536621]
[108.09688568 166.37211609]
[117.35113525 182.25729370]
[107.76003265 196.92053223]
[107.76003265 211.92053223]
[107.76003265 226.92053223]
[107.76003265 241.92053223]
[107.76003265 256.92053223]
[107.76003265 271.92053223]
[107.76003265 286.92053223]
[107.76003265 301.92053223]
[107.76003265 316.92053223]
[107.76003265 331.92053223]
[122.29991913 335.98184204]
[135.20429993 343.81634521]
[145.51557922 354.84268188]
[152.46861267 368.24261475]
[155.54740906 383.02175903]
[154.52351379 398.08346558]
[149.47291565 412.30996704]
[140.77038574 424.64562988]
[129.06172180 434.17504883]
[115.21578979 440.19107056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[26 37]
[27 36]
[28 35]
[29 34]
[38 89]
[39 88]
[40 87]
[41 86]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
