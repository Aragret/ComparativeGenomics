%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUGAAACUUGGGGGGGGGGAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGxxxxxxxxxxUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCACCCCCCCCCCUGAUGAAACUU\
) } def
/len { sequence length } bind def

/coor [
[165.87889099 604.60278320]
[151.85694885 599.04974365]
[139.65698242 590.18341064]
[130.04591370 578.56115723]
[123.62789154 564.91345215]
[120.80635071 550.09826660]
[121.75866699 535.04687500]
[126.42497253 520.70544434]
[134.51194763 507.97549438]
[145.51121521 497.65719604]
[158.73136902 490.39923096]
[173.34138489 486.65780640]
[173.34138489 471.65780640]
[173.34138489 456.65780640]
[173.34138489 441.65780640]
[173.34138489 426.65780640]
[173.34138489 411.65780640]
[173.34138489 396.65780640]
[173.34138489 381.65780640]
[173.34138489 366.65780640]
[173.34138489 351.65780640]
[171.19281006 336.81246948]
[157.83782959 325.46835327]
[162.21247864 307.61077881]
[157.66519165 293.31665039]
[153.11790466 279.02252197]
[148.57061768 264.72839355]
[137.33911133 254.94561768]
[140.52874756 239.44926453]
[126.94367981 228.38172913]
[130.95075989 210.43809509]
[126.11093903 196.24034119]
[121.27112579 182.04258728]
[116.43130493 167.84483337]
[105.00131226 158.29473877]
[107.87210846 142.73616028]
[103.03229523 128.53840637]
[98.19247437 114.34066010]
[87.53157043 103.78864288]
[73.28487396 99.09484863]
[59.03818512 94.40104675]
[44.79149246 89.70724487]
[31.59228897 98.09265137]
[16.09797287 95.98072815]
[5.62448883 84.36865997]
[5.11709356 68.73931122]
[14.81536388 56.47237778]
[30.14007378 53.35993958]
[43.85536194 60.87158585]
[49.48529053 75.46054840]
[63.73198318 80.15435028]
[77.97867584 84.84815216]
[92.22536469 89.54195404]
[104.28780365 80.62580109]
[103.97982025 65.62896729]
[103.67184448 50.63212585]
[103.36386871 35.63528824]
[100.04214478 27.05846214]
[103.20671082 20.32810211]
[103.20671082 5.32810116]
[103.20671082 -9.67189884]
[103.20671082 -24.67189789]
[103.20671082 -39.67189789]
[95.46940613 -53.47207260]
[103.20671082 -66.19934082]
[103.20671082 -81.19934082]
[103.20671082 -96.19934082]
[103.20671082 -111.19934082]
[103.20671082 -126.19934082]
[103.20671082 -141.19934082]
[89.43283844 -147.77529907]
[79.88291168 -159.68167114]
[76.45307159 -174.55444336]
[79.82431793 -189.44058228]
[89.32728577 -201.38447571]
[103.07514954 -208.01461792]
[118.33826447 -208.01461792]
[132.08613586 -201.38447571]
[141.58909607 -189.44058228]
[144.96034241 -174.55444336]
[141.53050232 -159.68167114]
[131.98057556 -147.77529907]
[118.20671082 -141.19934082]
[118.20671082 -126.19934082]
[118.20671082 -111.19934082]
[118.20671082 -96.19934082]
[118.20671082 -81.19934082]
[118.20671082 -66.19934082]
[125.94400787 -53.47207260]
[118.20671082 -39.67189789]
[118.20671082 -24.67189789]
[118.20671082 -9.67189884]
[118.20671082 5.32810116]
[118.20671082 20.32810211]
[118.36070251 35.32731247]
[118.66868591 50.32415009]
[118.97666168 65.32098389]
[119.28463745 80.31782532]
[112.39022827 109.50084686]
[117.23004913 123.69859314]
[122.06986237 137.89634705]
[133.84603882 148.46197510]
[130.62905884 163.00502014]
[135.46887207 177.20277405]
[140.30868530 191.40052795]
[145.14851379 205.59828186]
[156.38925171 212.00526428]
[160.10758972 223.97795105]
[154.82287598 234.90197754]
[166.37963867 245.70715332]
[162.86474609 260.18109131]
[167.41203308 274.47521973]
[171.95932007 288.76934814]
[176.50662231 303.06347656]
[187.61343384 309.69992065]
[191.08517456 321.74642944]
[185.57728577 332.55963135]
[189.98442078 318.22164917]
[199.46142578 306.59469604]
[212.61611938 299.38677979]
[227.51602173 297.65679932]
[241.97229004 301.65884399]
[253.86123657 310.80505371]
[261.43634033 323.75177002]
[263.58477783 338.59713745]
[259.99096680 353.16024780]
[251.18281555 365.30175781]
[238.45428467 373.23806763]
[223.67526245 375.80325317]
[209.01681519 372.62051392]
[196.63232422 364.15737915]
[188.34138489 351.65780640]
[188.34138489 366.65780640]
[188.34138489 381.65780640]
[188.34138489 396.65780640]
[188.34138489 411.65780640]
[188.34138489 426.65780640]
[188.34138489 441.65780640]
[188.34138489 456.65780640]
[188.34138489 471.65780640]
[188.34138489 486.65780640]
[202.95140076 490.39923096]
[216.17155457 497.65719604]
[227.17083740 507.97549438]
[235.25779724 520.70544434]
[239.92410278 535.04687500]
[240.87641907 550.09826660]
[238.05488586 564.91345215]
[231.63685608 578.56115723]
[222.02578735 590.18341064]
[209.82583618 599.04974365]
[195.80387878 604.60278320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 117]
[24 114]
[25 113]
[26 112]
[27 111]
[29 109]
[31 106]
[32 105]
[33 104]
[34 103]
[36 101]
[37 100]
[38 99]
[39 53]
[40 52]
[41 51]
[42 50]
[54 98]
[55 97]
[56 96]
[57 95]
[59 94]
[60 93]
[61 92]
[62 91]
[63 90]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
