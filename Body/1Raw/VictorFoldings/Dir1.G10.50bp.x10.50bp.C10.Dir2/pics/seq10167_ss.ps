%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAAACUAGGGGGGGGGGGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAAxxxxxxxxxxAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCCCCCCCCCCCUUCAAACUAG\
) } def
/len { sequence length } bind def

/coor [
[96.34836578 448.94824219]
[81.78850555 445.04003906]
[68.58736420 437.76040649]
[57.51242828 427.53253174]
[49.20758820 414.95108032]
[44.15567780 400.74749756]
[42.65040207 385.74758911]
[44.77927780 370.82339478]
[50.41853714 356.84262085]
[59.24031830 344.61807251]
[70.73173523 334.86047363]
[84.22469330 328.13711548]
[98.93473053 324.83886719]
[99.24270630 309.84204102]
[99.55068970 294.84521484]
[99.85866547 279.84835815]
[100.16664124 264.85153198]
[100.47461700 249.85469055]
[100.78259277 234.85784912]
[101.09057617 219.86100769]
[101.39855194 204.86418152]
[101.70652771 189.86734009]
[102.01450348 174.87049866]
[101.09109497 159.89895630]
[98.94251251 145.05363464]
[96.79393768 130.20831299]
[94.64535522 115.36298370]
[85.72837830 107.81116486]
[84.17343140 96.22994995]
[90.78263855 86.59352112]
[88.93931580 71.70721436]
[87.09598541 56.82090378]
[72.46149445 55.85140228]
[58.26174164 52.19706345]
[44.98479462 45.98508072]
[33.08671951 37.43050766]
[22.97589302 26.82885551]
[14.99901009 14.54585171]
[9.42918301 1.00484514]
[6.45659399 -13.32779503]
[6.18200064 -27.95874023]
[8.61332417 -42.38467789]
[13.66542435 -56.10963440]
[21.16308594 -68.66202545]
[30.84709358 -79.61083984]
[42.38318634 -88.58047485]
[55.37360382 -95.26358795]
[69.37080383 -99.43165588]
[67.83351135 -114.35267639]
[66.29621887 -129.27369690]
[64.75892639 -144.19470215]
[49.74334335 -144.65916443]
[34.92365265 -147.12091064]
[20.56433105 -151.53602600]
[6.92163277 -157.82571411]
[-5.76096869 -165.87774658]
[-17.25713921 -175.54840088]
[-27.36171341 -186.66510010]
[-35.89436722 -199.02944946]
[-42.70281982 -212.42080688]
[-47.66557312 -226.60017395]
[-50.69405365 -241.31451416]
[-51.73422241 -256.30120850]
[-50.76751328 -271.29284668]
[-47.81117249 -286.02185059]
[-42.91796875 -300.22537231]
[-36.17522430 -313.64993286]
[-27.70326614 -326.05596924]
[-17.65328979 -337.22204590]
[-6.20465088 -346.94891357]
[6.43833876 -355.06298828]
[20.05004883 -361.41946411]
[34.38756180 -365.90490723]
[49.19501114 -368.43923950]
[64.20813751 -368.97726440]
[79.15901947 -367.50939941]
[93.78083038 -364.06176758]
[107.81262970 -358.69595337]
[121.00401306 -351.50772095]
[133.11955261 -342.62530518]
[143.94305420 -332.20727539]
[153.28132629 -320.43951416]
[160.96774292 -307.53207397]
[166.86511230 -293.71524048]
[170.86820984 -279.23565674]
[172.90557861 -264.35168457]
[172.94085693 -249.32896423]
[170.97343445 -234.43557739]
[167.03840637 -219.93734741]
[161.20600891 -206.09297180]
[153.58030701 -193.14955139]
[144.29742432 -181.33805847]
[133.52299500 -170.86929321]
[121.44931030 -161.93006897]
[108.29183960 -154.67993164]
[94.28540039 -149.24826050]
[79.67994690 -145.73199463]
[81.21723938 -130.81098938]
[82.75453186 -115.88996887]
[84.29182434 -100.96894836]
[99.59193420 -99.60538483]
[114.34068298 -95.29611969]
[127.97633362 -88.20339966]
[139.97920227 -78.59552002]
[149.89143372 -66.83666992]
[157.33445740 -53.37313843]
[162.02349854 -38.71636963]
[163.77841187 -23.42352867]
[162.53060913 -8.07633305]
[158.32580566 6.74108124]
[151.32226562 20.46439362]
[141.78488159 32.57058716]
[130.07513428 42.59788895]
[116.63746643 50.16336823]
[101.98229980 54.97758102]
[103.82562256 69.86389160]
[105.66894531 84.75019836]
[116.12471008 97.83502197]
[109.49067688 113.21440125]
[111.63925934 128.05972290]
[113.78783417 142.90504456]
[115.93641663 157.75036621]
[124.51693726 145.44692993]
[138.63786316 140.38732910]
[153.07951355 144.44181824]
[162.50364685 156.11166382]
[163.42674255 171.08323669]
[155.50755310 183.82241821]
[141.67335510 189.62026978]
[127.03784180 186.33366394]
[117.01134491 175.17848206]
[116.70336914 190.17532349]
[116.39539337 205.17214966]
[116.08740997 220.16899109]
[115.77943420 235.16583252]
[115.47145844 250.16267395]
[115.16348267 265.15951538]
[114.85549927 280.15634155]
[114.54752350 295.15316772]
[114.23954773 310.15002441]
[113.93157196 325.14685059]
[128.49378967 329.04623413]
[141.69934082 336.31787109]
[152.78047180 346.53903198]
[161.09294128 359.11544800]
[166.15347290 373.31594849]
[167.66783142 388.31494141]
[165.54800415 403.24041748]
[159.91722107 417.22460938]
[151.10285950 429.45452881]
[139.61735535 439.21908569]
[126.12847900 445.95062256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 122]
[25 121]
[26 120]
[27 119]
[30 117]
[31 116]
[32 115]
[48 100]
[49 99]
[50 98]
[51 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
