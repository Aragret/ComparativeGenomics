%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUAGGCUAGGGGGGGGGGAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGxxxxxxxxxxAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUCCCCCCCCCCUCAUAGGCUA\
) } def
/len { sequence length } bind def

/coor [
[63.70019531 425.03900146]
[49.85425568 419.02297974]
[38.14559174 409.49356079]
[29.44306946 397.15789795]
[24.39246750 382.93136597]
[23.36857605 367.86968994]
[26.44737434 353.09051514]
[33.40039825 339.69058228]
[43.71168137 328.66427612]
[56.61606216 320.82974243]
[71.15594482 316.76843262]
[71.15594482 301.76843262]
[71.15594482 286.76843262]
[71.15594482 271.76843262]
[71.15594482 256.76843262]
[71.15594482 241.76844788]
[71.15594482 226.76844788]
[71.15594482 211.76844788]
[71.15594482 196.76844788]
[71.15594482 181.76844788]
[71.15594482 166.76844788]
[63.19633865 179.48239136]
[51.59759521 188.99392700]
[37.57107925 194.30963135]
[22.58171272 194.87437439]
[8.19497871 190.62916565]
[-4.08658266 182.01734924]
[-12.98029232 169.93836975]
[-17.55729675 155.65371704]
[-17.33957672 140.65530396]
[-12.34987068 126.50952911]
[-3.10929918 114.69378662]
[9.41705704 106.44209290]
[23.92095184 102.61625671]
[38.88760757 103.61585236]
[52.75391769 109.33646393]
[64.07169342 119.18064880]
[71.65890503 132.12028503]
[74.72329712 146.80697632]
[79.91870880 132.73545837]
[85.11412811 118.66393280]
[77.00395203 106.41198730]
[77.60448456 91.73123932]
[86.68823242 80.18262482]
[100.81435394 76.14065552]
[106.00977325 62.06913376]
[111.20518494 47.99761200]
[115.95899963 33.77083588]
[120.26658630 19.40265083]
[115.59300232 1.62239468]
[128.75320435 -9.94519806]
[132.76094055 -24.39988708]
[136.76867676 -38.85457611]
[140.77641296 -53.30926514]
[144.78416443 -67.76395416]
[148.79190063 -82.21864319]
[152.79963684 -96.67333221]
[156.80737305 -111.12801361]
[160.81512451 -125.58270264]
[147.00207520 -131.48892212]
[134.09953308 -139.18359375]
[122.33776093 -148.52938843]
[111.92665100 -159.35954285]
[103.05200195 -171.48075867]
[95.87220001 -184.67674255]
[90.51536560 -198.71197510]
[87.07710266 -213.33599854]
[85.61878204 -228.28781128]
[86.16641235 -243.30058289]
[88.71022797 -258.10641479]
[93.20483398 -272.44104004]
[99.57001495 -286.04870605]
[107.69218445 -298.68649292]
[117.42637634 -310.12890625]
[128.59889221 -320.17172241]
[141.01033020 -328.63574219]
[154.43919373 -335.36990356]
[168.64584351 -340.25402832]
[183.37673950 -343.20095825]
[198.36897278 -344.15805054]
[213.35502625 -343.10830688]
[228.06741333 -340.07040405]
[242.24360657 -335.09860229]
[255.63061523 -328.28158569]
[267.98950195 -319.74099731]
[279.09973145 -309.62933350]
[288.76303101 -298.12698364]
[296.80694580 -285.43923950]
[303.08789062 -271.79251099]
[307.49383545 -257.43035889]
[309.94610596 -242.60910034]
[310.40093994 -227.59321594]
[308.85025024 -212.65071106]
[305.32168579 -198.04821777]
[299.87820435 -184.04635620]
[292.61700439 -170.89500427]
[283.66760254 -158.82885742]
[273.18975830 -148.06324768]
[261.37045288 -138.79031372]
[248.42060852 -131.17553711]
[234.57131958 -125.35479736]
[220.06977844 -121.43198395]
[205.17474365 -119.47711182]
[190.15205383 -119.52505493]
[175.26980591 -121.57496643]
[171.26206970 -107.12027740]
[167.25433350 -92.66558838]
[163.24658203 -78.21089935]
[159.23884583 -63.75621033]
[155.23110962 -49.30152512]
[151.22337341 -34.84683609]
[147.21562195 -20.39214706]
[143.20788574 -5.93745804]
[148.89916992 4.78245783]
[145.63047791 16.88760757]
[134.63476562 23.71023560]
[130.32717896 38.07841873]
[131.71789551 41.38499069]
[131.53627014 45.54055405]
[129.39624023 49.77996826]
[125.27670288 53.19302750]
[120.08129120 67.26454926]
[114.88587189 81.33606720]
[122.99604797 93.58801270]
[122.39551544 108.26876068]
[113.31176758 119.81737518]
[99.18564606 123.85934448]
[93.99022675 137.93086243]
[88.79481506 152.00238037]
[86.15594482 166.76844788]
[86.15594482 181.76844788]
[86.15594482 196.76844788]
[86.15594482 211.76844788]
[86.15594482 226.76844788]
[86.15594482 241.76844788]
[86.15594482 256.76843262]
[86.15594482 271.76843262]
[86.15594482 286.76843262]
[86.15594482 301.76843262]
[86.15594482 316.76843262]
[100.69583893 320.82974243]
[113.60021973 328.66427612]
[123.91149902 339.69058228]
[130.86451721 353.09051514]
[133.94332886 367.86968994]
[132.91943359 382.93136597]
[127.86882782 397.15789795]
[119.16630554 409.49356079]
[107.45764160 419.02297974]
[93.61170197 425.03900146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[39 129]
[40 128]
[41 127]
[45 123]
[46 122]
[47 121]
[48 117]
[49 116]
[51 113]
[52 112]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
