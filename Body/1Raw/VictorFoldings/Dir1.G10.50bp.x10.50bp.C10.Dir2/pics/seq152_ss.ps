%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUUACUAGGGGGGGGGGAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUxxxxxxxxxxUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUACCCCCCCCCCAUACUAACUA\
) } def
/len { sequence length } bind def

/coor [
[97.48518372 353.76553345]
[82.99549103 349.55706787]
[70.08926392 341.74093628]
[59.64646149 330.85009766]
[52.37909698 317.62710571]
[48.78267288 302.97351074]
[49.10239410 287.88839722]
[53.31646347 273.40032959]
[61.13756180 260.49713135]
[72.03242493 250.05853271]
[85.25823975 242.79627991]
[99.91323090 239.20550537]
[100.22528839 224.20875549]
[100.53734589 209.21200562]
[100.84939575 194.21524048]
[101.16145325 179.21849060]
[101.47351074 164.22174072]
[101.78556824 149.22499084]
[102.09762573 134.22822571]
[102.40968323 119.23147583]
[90.80834198 109.72312164]
[76.16483307 112.97394562]
[61.52133560 116.22476959]
[46.87783432 119.47559357]
[41.67379761 123.72124481]
[35.96607971 124.52947235]
[31.55791092 122.54363251]
[16.79185486 125.18249512]
[2.02580023 127.82135773]
[-12.74025536 130.46022034]
[-27.50631142 133.09909058]
[-39.68879700 144.07720947]
[-55.20173645 138.75923157]
[-58.08674622 122.61585999]
[-45.37597275 112.25399017]
[-30.14517593 118.33303070]
[-15.37911987 115.69416809]
[-0.61306417 113.05530548]
[14.15299129 110.41644287]
[28.91904640 107.77757263]
[43.62700653 104.83209229]
[58.27051163 101.58126831]
[72.91400909 98.33044434]
[87.55751038 95.07962036]
[99.63750458 86.18726349]
[107.09241486 73.17095947]
[114.54732513 60.15464783]
[122.00223541 47.13834000]
[129.45713806 34.12202835]
[136.91204834 21.10572052]
[124.53956604 12.61017227]
[112.90071869 3.13441348]
[102.07295990 -7.25849628]
[92.12836456 -18.49939156]
[83.13310242 -30.51346779]
[75.14703369 -43.22077179]
[68.22330475 -56.53673172]
[62.40800476 -70.37274170]
[57.73982620 -84.63671112]
[54.24983215 -99.23371887]
[51.96125031 -114.06662750]
[50.88931656 -129.03672791]
[51.04115677 -144.04438782]
[52.41576385 -158.98973083]
[55.00399399 -173.77328491]
[58.78861618 -188.29670715]
[63.74444580 -202.46330261]
[69.83850098 -216.17881775]
[77.03023529 -229.35195923]
[85.27177429 -241.89508057]
[94.50827789 -253.72468567]
[104.67827606 -264.76208496]
[115.71409607 -274.93377686]
[127.54228973 -284.17211914]
[140.08413696 -292.41558838]
[153.25617981 -299.60934448]
[166.97074890 -305.70550537]
[181.13658142 -310.66354370]
[195.65940857 -314.45037842]
[210.44258118 -317.04089355]
[225.38771057 -318.41781616]
[240.39533997 -318.57196045]
[255.36560059 -317.50231934]
[270.19885254 -315.21603394]
[284.79641724 -311.72830200]
[299.06109619 -307.06231689]
[312.89801025 -301.24914551]
[326.21502686 -294.32748413]
[338.92355347 -286.34335327]
[350.93902588 -277.34994507]
[362.18145752 -267.40707397]
[372.57604980 -256.58093262]
[382.05358887 -244.94354248]
[390.55105591 -232.57237244]
[398.01184082 -219.54972839]
[404.38635254 -205.96229553]
[409.63214111 -191.90048218]
[413.71429443 -177.45787048]
[416.60565186 -162.73059082]
[418.28695679 -147.81663513]
[418.74703979 -132.81527710]
[417.98284912 -117.82631683]
[415.99945068 -102.94952393]
[412.81002808 -88.28390503]
[408.43582153 -73.92705536]
[402.90597534 -59.97451019]
[396.25723267 -46.51913452]
[388.53387451 -33.65047073]
[379.78729248 -21.45415497]
[370.07568359 -10.01135445]
[359.46371460 0.60177869]
[348.02197266 10.31461525]
[335.82659912 19.06251717]
[322.95877075 26.78726959]
[309.50411987 33.43746185]
[295.55215454 38.96883774]
[281.19580078 43.34458923]
[266.53051758 46.53559113]
[251.65394592 48.52061081]
[236.66506958 49.28643799]
[221.66365051 48.82797623]
[206.74951172 47.14827728]
[192.02191162 44.25851822]
[177.57887268 40.17792892]
[163.51649475 34.93366623]
[149.92835999 28.56063080]
[142.47344971 41.57693863]
[135.01853943 54.59325027]
[127.56362915 67.60955811]
[120.10871887 80.62586975]
[112.65380859 93.64217377]
[117.40643311 119.54353333]
[117.09437561 134.54028320]
[116.78231812 149.53703308]
[116.47026825 164.53379822]
[116.15821075 179.53054810]
[115.84615326 194.52729797]
[115.53409576 209.52404785]
[115.22203827 224.52081299]
[114.90998077 239.51756287]
[129.40292358 243.71484375]
[142.31518555 251.52099609]
[152.76638794 262.40374756]
[160.04396057 275.62115479]
[163.65170288 290.27197266]
[163.34362793 305.35729980]
[159.14074707 319.84863281]
[151.32962036 332.75787354]
[140.44281006 343.20489502]
[127.22261810 350.47735596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 44]
[22 43]
[23 42]
[24 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[45 131]
[46 130]
[47 129]
[48 128]
[49 127]
[50 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
