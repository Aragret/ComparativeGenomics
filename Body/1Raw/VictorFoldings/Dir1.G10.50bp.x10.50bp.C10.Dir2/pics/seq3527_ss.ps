%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUACAUCGGGGGGGGGGACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUxxxxxxxxxxAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCCCCCCCCCCCUCUACUUC\
) } def
/len { sequence length } bind def

/coor [
[79.06169891 214.77795410]
[70.99131012 213.00834656]
[63.06639099 210.67202759]
[55.32668686 207.78073120]
[47.81100464 204.34893799]
[40.55704117 200.39384460]
[33.60116577 195.93531799]
[26.97826576 190.99569702]
[20.72154999 185.59976196]
[9.84272575 195.92695618]
[-1.03609955 206.25416565]
[-11.91492462 216.58137512]
[-22.79375076 226.90856934]
[-33.67257690 237.23577881]
[-38.35424042 252.34844971]
[-52.91173553 255.49940491]
[-63.79056168 265.82659912]
[-67.92407990 281.69625854]
[-83.80407715 285.78991699]
[-95.09456635 273.89633179]
[-90.18086243 258.25064087]
[-74.11776733 254.94778442]
[-63.23894119 244.62057495]
[-59.33540344 230.24658203]
[-43.99977875 226.35694885]
[-33.12095642 216.02975464]
[-22.24213028 205.70254517]
[-11.36330414 195.37533569]
[-0.48447925 185.04814148]
[10.39434624 174.72093201]
[-0.70168889 158.91995239]
[-9.03987789 141.50537109]
[-14.39186764 122.95411682]
[-16.61108780 103.77423096]
[-15.63676357 84.49098206]
[-30.34472466 81.54550171]
[-45.05268860 78.60001373]
[-55.13412094 90.18708801]
[-69.66364288 95.16589355]
[-84.73288727 92.19715881]
[-96.28830719 82.07945251]
[-101.22154236 67.53439331]
[-98.20558929 52.47452927]
[-88.05171204 40.95088577]
[-73.49126434 36.06326294]
[-58.44092560 39.12640762]
[-46.94916153 49.31635284]
[-42.10720444 63.89205551]
[-27.39924240 66.83753967]
[-12.69128132 69.78302002]
[-2.92782283 45.06135941]
[12.17760754 23.19102859]
[31.84103584 5.30709410]
[55.04192734 -7.66226101]
[80.57614899 -15.04392529]
[107.11847687 -16.45479012]
[133.29135132 -11.82163048]
[138.48675537 -25.89315033]
[143.68217468 -39.96466827]
[148.87759399 -54.03619003]
[154.07301331 -68.10770416]
[159.26841736 -82.17922974]
[146.03424072 -89.29276276]
[133.91889954 -98.17897797]
[123.15824890 -108.66489410]
[113.96173096 -120.54640198]
[106.50837708 -133.59222412]
[100.94325256 -147.54843140]
[97.37468719 -162.14334106]
[95.87215424 -177.09288025]
[96.46488953 -192.10603333]
[99.14135742 -206.89056396]
[103.84946442 -221.15870667]
[110.49755859 -234.63272095]
[118.95624542 -247.05032349]
[129.06086731 -258.16979980]
[140.61473083 -267.77471924]
[153.39292908 -275.67810059]
[167.14674377 -281.72613525]
[181.60845947 -285.80105591]
[196.49656677 -287.82357788]
[211.52125549 -287.75430298]
[226.39007568 -285.59457397]
[240.81359863 -281.38647461]
[254.51106262 -275.21188354]
[267.21585083 -267.19100952]
[278.68066406 -257.47998047]
[288.68231201 -246.26779175]
[297.02612305 -233.77272034]
[303.54971313 -220.23797607]
[308.12603760 -205.92703247]
[310.66607666 -191.11843872]
[311.12036133 -176.10046387]
[309.48004150 -161.16542053]
[305.77703857 -146.60403442]
[300.08346558 -132.69973755]
[292.51013184 -119.72319794]
[283.20443726 -107.92698669]
[272.34756470 -97.54074097]
[260.15078735 -88.76662445]
[246.85157776 -81.77542114]
[232.70877075 -76.70322418]
[217.99768066 -73.64875793]
[203.00463867 -72.67148590]
[188.02151489 -73.79043579]
[173.33995056 -76.98381042]
[168.14453125 -62.91229248]
[162.94911194 -48.84077454]
[157.75369263 -34.76925278]
[152.55828857 -20.69773483]
[147.36286926 -6.62621450]
[154.79010010 -3.00697088]
[161.94256592 1.12882662]
[168.78440857 5.76043797]
[175.28132629 10.86463642]
[181.40071106 16.41582680]
[187.11190796 22.38616943]
[192.38624573 28.74572754]
[197.19729614 35.46260452]
[201.52093506 42.50312424]
[205.33546448 49.83197403]
[208.62176514 57.41240311]
[211.36335754 65.20639801]
[213.54647827 73.17487335]
[215.16020203 81.27787781]
[216.19642639 89.47476196]
[216.64996338 97.72442627]
[216.51850891 105.98550415]
[215.80276489 114.21656036]
[214.50628662 122.37633514]
[212.63558960 130.42388916]
[210.20005798 138.31887817]
[207.21191406 146.02171326]
[203.68611145 153.49375916]
[199.64035034 160.69754028]
[195.09492493 167.59693909]
[190.07261658 174.15736389]
[184.59861755 180.34590149]
[178.70037842 186.13153076]
[172.40748596 191.48522949]
[165.75148010 196.38015747]
[158.76574707 200.79174805]
[151.48532104 204.69790649]
[143.94670105 208.07904053]
[136.18771362 210.91816711]
[128.24723816 213.20108032]
[120.16512299 214.91630554]
[111.98188019 216.05526733]
[103.73855591 216.61224365]
[95.47647858 216.58442688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[16 23]
[17 22]
[35 50]
[36 49]
[37 48]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
