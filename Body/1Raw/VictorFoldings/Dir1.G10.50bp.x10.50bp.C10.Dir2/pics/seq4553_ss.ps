%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCAUCCCGGGGGGGGGGUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAxxxxxxxxxxACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAACCCCCCCCCCAACCCACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.06072998]
[71.19830322 372.04470825]
[59.48964310 362.51528931]
[50.78712082 350.17959595]
[45.73651886 335.95309448]
[44.71262741 320.89141846]
[47.79142761 306.11224365]
[54.74444962 292.71231079]
[65.05573273 281.68597412]
[77.96011353 273.85147095]
[92.50000000 269.79016113]
[92.50000000 254.79016113]
[92.50000000 239.79016113]
[92.50000000 224.79016113]
[92.50000000 209.79016113]
[92.50000000 194.79016113]
[92.50000000 179.79016113]
[92.50000000 164.79016113]
[92.50000000 149.79016113]
[92.50000000 134.79016113]
[92.50000000 119.79016113]
[80.32816315 111.02395630]
[66.10138702 115.77777100]
[51.87460327 120.53158569]
[37.64782715 125.28540039]
[23.42104721 130.03921509]
[9.19426727 134.79302979]
[0.77237648 148.44775391]
[-15.17095757 150.23370361]
[-26.40537453 138.78086853]
[-24.31278801 122.87487793]
[-10.49845505 114.71743774]
[4.44045258 120.56625366]
[18.66723251 115.81243896]
[32.89401245 111.05862427]
[47.12078857 106.30480957]
[61.34756851 101.55099487]
[75.57434845 96.79718018]
[82.75685883 83.62859344]
[79.05069733 69.09365845]
[75.34453583 54.55872345]
[60.47945404 56.67452621]
[45.47275543 57.17070007]
[30.50037956 56.04142761]
[15.73787594 53.29995346]
[1.35832322 48.97841263]
[-12.46968365 43.12747574]
[-25.58402061 35.81574249]
[-37.83092499 27.12894058]
[-49.06681061 17.16891479]
[-59.15994644 6.05244493]
[-67.99198914 -6.09013605]
[-75.45938873 -19.11646271]
[-81.47459412 -32.87380600]
[-85.96707916 -47.20087051]
[-88.88417816 -61.92967987]
[-90.19168091 -76.88754272]
[-89.87426758 -91.89908600]
[-87.93564606 -106.78831482]
[-84.39855957 -121.38064575]
[-79.30447388 -135.50500488]
[-72.71311188 -148.99578857]
[-64.70175171 -161.69480896]
[-55.36432648 -173.45320129]
[-44.81031036 -184.13310242]
[-33.16344833 -193.60926819]
[-20.56029320 -201.77061462]
[-7.14860582 -208.52146912]
[6.91436529 -213.78265381]
[21.46373940 -217.49249268]
[36.32893372 -219.60749817]
[51.33566284 -220.10285950]
[66.30797577 -218.97279358]
[81.07033539 -216.23051453]
[95.44965363 -211.90820312]
[109.27734375 -206.05651855]
[122.39128876 -198.74407959]
[134.63772583 -190.05662537]
[145.87307739 -180.09599304]
[155.96560669 -168.97897339]
[164.79699707 -156.83592224]
[172.26370239 -143.80918884]
[178.27816772 -130.05152893]
[182.76988220 -115.72422028]
[185.68618774 -100.99525452]
[186.99288940 -86.03732300]
[186.67466736 -71.02579498]
[184.73524475 -56.13667297]
[181.19737244 -41.54452896]
[176.10252380 -27.42044640]
[169.51043701 -13.93001938]
[161.49838257 -1.23142052]
[152.16032410 10.52646732]
[141.60574341 21.20578957]
[129.95837402 30.68133545]
[117.35477448 38.84201050]
[103.94272614 45.59213257]
[89.87947083 50.85256195]
[93.58563232 65.38749695]
[97.29179382 79.92243195]
[101.00775146 65.38999939]
[100.40883636 50.40195847]
[106.90236664 36.88034439]
[118.97454071 27.97738838]
[133.81101990 25.76859474]
[147.95304871 30.76888847]
[158.10377502 41.81257629]
[161.89677429 56.32508850]
[158.44783020 70.92319489]
[148.55947876 82.20473480]
[134.15007019 86.37233734]
[148.79357910 89.62316132]
[163.43707275 92.87399292]
[180.83018494 86.91920471]
[193.32458496 99.20293427]
[208.03254700 102.14841461]
[224.75059509 99.33005524]
[232.08683777 114.61455536]
[219.43052673 125.89526367]
[205.08706665 116.85637665]
[190.37910461 113.91089630]
[180.10165405 120.36701965]
[167.79078674 117.98768616]
[160.18624878 107.51749420]
[145.54275513 104.26666260]
[130.89924622 101.01583862]
[125.04943848 105.70941925]
[127.32917786 120.53517151]
[113.34981537 115.09658051]
[107.50000000 119.79016113]
[107.50000000 134.79016113]
[107.50000000 149.79016113]
[107.50000000 164.79016113]
[107.50000000 179.79016113]
[107.50000000 194.79016113]
[107.50000000 209.79016113]
[107.50000000 224.79016113]
[107.50000000 239.79016113]
[107.50000000 254.79016113]
[107.50000000 269.79016113]
[122.03988647 273.85147095]
[134.94427490 281.68597412]
[145.25555420 292.71231079]
[152.20857239 306.11224365]
[155.28736877 320.89141846]
[154.26348877 335.95309448]
[149.21287537 350.17959595]
[140.51036072 362.51528931]
[128.80169678 372.04470825]
[114.95575714 378.06072998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[39 100]
[40 99]
[41 98]
[111 126]
[112 125]
[113 124]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
