%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAGCCAACGGGGGGGGGGCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUxxxxxxxxxxGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACCCCCCCCCCCUUCAAGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[83.90806580 396.42333984]
[70.41918182 389.69180298]
[58.93368530 379.92724609]
[50.11931610 367.69735718]
[44.48853302 353.71313477]
[42.36870575 338.78768921]
[43.88307571 323.78866577]
[48.94359589 309.58816528]
[57.25606155 297.01174927]
[68.33719635 286.79058838]
[81.54274750 279.51895142]
[96.10497284 275.61956787]
[95.79699707 260.62274170]
[95.48901367 245.62590027]
[95.18103790 230.62905884]
[94.87306213 215.63223267]
[94.56508636 200.63539124]
[94.25710297 185.63854980]
[93.94912720 170.64170837]
[93.64115143 155.64486694]
[93.33317566 140.64804077]
[81.78675842 136.94573975]
[71.81859589 130.04193115]
[64.29246521 120.53488922]
[50.14515305 125.52021027]
[35.99783325 130.50552368]
[21.85051918 135.49085999]
[7.70320177 140.47618103]
[-5.22601604 151.44302368]
[-19.34343529 142.05500793]
[-14.23039818 125.89043427]
[2.71788001 126.32885742]
[16.86519623 121.34353638]
[31.01251221 116.35821533]
[45.15982819 111.37289429]
[59.30714417 106.38757324]
[58.86312485 102.11354828]
[58.86677933 97.81652069]
[44.28303146 94.30735016]
[29.69928169 90.79818726]
[15.11553097 87.28901672]
[0.53178209 83.77984619]
[-16.28232193 85.95292664]
[-23.02507973 70.39749146]
[-9.94413853 59.61206818]
[4.04094934 69.19609833]
[18.62469864 72.70526886]
[33.20844650 76.21443176]
[47.79219818 79.72360229]
[62.37594604 83.23276520]
[68.05679321 73.99344635]
[75.95233154 66.55722809]
[85.51515961 61.43967056]
[96.08226013 58.99560165]
[106.92098236 59.39446640]
[117.27985382 62.60861206]
[125.94646454 50.36565781]
[134.61306763 38.12270355]
[143.27967834 25.87974930]
[131.90692139 16.08152199]
[121.51706696 5.24660206]
[112.20418549 -6.52688694]
[104.05262756 -19.13231850]
[97.13622284 -32.45553589]
[91.51760101 -46.37587357]
[87.24765015 -60.76726913]
[84.36504364 -75.49938965]
[82.89587402 -90.43881226]
[82.85346222 -105.45023346]
[84.23818970 -120.39772034]
[87.03750610 -135.14588928]
[91.22606659 -149.56118774]
[96.76593018 -163.51306152]
[103.60694122 -176.87513733]
[111.68713379 -189.52642822]
[120.93333435 -201.35235596]
[131.26181030 -212.24581909]
[142.57901001 -222.10815430]
[154.78245544 -230.85005188]
[167.76161194 -238.39233398]
[181.39895630 -244.66671753]
[195.57096863 -249.61634827]
[210.14930725 -253.19641113]
[225.00193787 -255.37449646]
[239.99435425 -256.13085938]
[254.99078369 -255.45867920]
[269.85540771 -253.36401367]
[284.45361328 -249.86585999]
[298.65319824 -244.99586487]
[312.32553101 -238.79815674]
[325.34683228 -231.32885742]
[337.59918213 -222.65560913]
[348.97155762 -212.85696411]
[359.36102295 -202.02166748]
[368.67349243 -190.24784851]
[376.82458496 -177.64210510]
[383.74050903 -164.31864929]
[389.35861206 -150.39810181]
[393.62805176 -136.00654602]
[396.51010132 -121.27432251]
[397.97872925 -106.33485413]
[398.02059937 -91.32342529]
[396.63534546 -76.37598419]
[393.83547974 -61.62791824]
[389.64639282 -47.21277618]
[384.10601807 -33.26111221]
[377.26452637 -19.89927483]
[369.18386841 -7.24827528]
[359.93722534 4.57731342]
[349.60836792 15.47039509]
[338.29080200 25.33231926]
[326.08703613 34.07376862]
[313.10760498 41.61558533]
[299.47003174 47.88945770]
[285.29785156 52.83857727]
[270.71939087 56.41811752]
[255.86666870 58.59565735]
[240.87422180 59.35148621]
[225.87780762 58.67874908]
[211.01325989 56.58354568]
[196.41519165 53.08484650]
[182.21578979 48.21434021]
[168.54367065 42.01613235]
[155.52262878 34.54635620]
[146.85603333 46.78931046]
[138.18942261 59.03226471]
[129.52281189 71.27521515]
[140.03987122 90.32952118]
[139.37889099 112.08355713]
[127.72439575 130.46418762]
[108.33000946 140.34005737]
[108.63799286 155.33689880]
[108.94596863 170.33374023]
[109.25394440 185.33056641]
[109.56192017 200.32740784]
[109.86990356 215.32424927]
[110.17787933 230.32109070]
[110.48585510 245.31793213]
[110.79383087 260.31475830]
[111.10180664 275.31161499]
[125.81184387 278.60983276]
[139.30480957 285.33319092]
[150.79621887 295.09078979]
[159.61801147 307.31533813]
[165.25726318 321.29611206]
[167.38613892 336.22030640]
[165.88085938 351.22021484]
[160.82894897 365.42379761]
[152.52410889 378.00524902]
[141.44918823 388.23312378]
[128.24803162 395.51275635]
[113.68817902 399.42095947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[56 127]
[57 126]
[58 125]
[59 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
