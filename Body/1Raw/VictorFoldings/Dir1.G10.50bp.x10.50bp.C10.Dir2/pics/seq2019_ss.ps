%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUACCGCAGGGGGGGGGGAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCxxxxxxxxxxUACAACCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACCCCCCCCCCCUACUACCGCA\
) } def
/len { sequence length } bind def

/coor [
[86.19144440 430.02120972]
[72.97124481 422.74874878]
[62.08444595 412.30172729]
[54.27331543 399.39248657]
[50.07043457 384.90118408]
[49.76235962 369.81582642]
[53.37010193 355.16500854]
[60.64767456 341.94763184]
[71.09888458 331.06484985]
[84.01114655 323.25869751]
[98.50408173 319.06143188]
[98.19202423 304.06466675]
[97.87996674 289.06790161]
[97.56790924 274.07116699]
[97.25585938 259.07440186]
[96.94380188 244.07765198]
[96.63174438 229.08090210]
[96.31968689 214.08415222]
[96.00762939 199.08738708]
[95.69557190 184.09063721]
[85.80149078 169.63009644]
[94.72327423 153.55584717]
[94.09929657 138.56883240]
[93.47531891 123.58181763]
[92.85134125 108.59480286]
[92.07149506 93.61508179]
[91.13587189 78.64429474]
[82.55284882 65.35360718]
[89.48121643 52.16850662]
[88.54558563 37.19771194]
[87.60995483 22.22692108]
[86.67433167 7.25613022]
[85.73870087 -7.71466160]
[84.02600861 -22.61656380]
[81.54089355 -37.40927124]
[79.05577087 -52.20197678]
[76.57065582 -66.99468231]
[74.08553314 -81.78739166]
[71.60041809 -96.58010101]
[56.62704849 -95.51102448]
[41.61985397 -95.87011719]
[26.71475220 -97.65412140]
[12.04672527 -100.84687805]
[-2.25138712 -105.41948700]
[-16.05009651 -111.33052826]
[-29.22443581 -118.52646637]
[-41.65509415 -126.94213104]
[-53.22949600 -136.50131226]
[-63.84281540 -147.11744690]
[-73.39894104 -158.69436646]
[-81.81132507 -171.12725830]
[-89.00377655 -184.30349731]
[-94.91116333 -198.10377502]
[-99.47998810 -212.40309143]
[-102.66887665 -227.07196045]
[-104.44893646 -241.97753906]
[-104.80406189 -256.98483276]
[-103.73102570 -271.95791626]
[-101.23954773 -286.76119995]
[-97.35219574 -301.26062012]
[-92.10417938 -315.32485962]
[-85.54300690 -328.82656860]
[-77.72811890 -341.64343262]
[-68.73028564 -353.65942383]
[-58.63098526 -364.76568604]
[-47.52169037 -374.86163330]
[-35.50300980 -383.85583496]
[-22.68378258 -391.66687012]
[-9.18011189 -398.22396851]
[4.88571215 -403.46777344]
[19.38630295 -407.35076904]
[34.19033813 -409.83779907]
[49.16374969 -410.90631104]
[64.17092896 -410.54669189]
[79.07596588 -408.76214600]
[93.74387360 -405.56884766]
[108.04182434 -400.99569702]
[121.84031677 -395.08416748]
[135.01438904 -387.88775635]
[147.44474792 -379.47161865]
[159.01879883 -369.91201782]
[169.63172913 -359.29550171]
[179.18743896 -347.71823120]
[187.59936523 -335.28503418]
[194.79133606 -322.10852051]
[200.69822693 -308.30804443]
[205.26652527 -294.00854492]
[208.45487976 -279.33956909]
[210.23439026 -264.43392944]
[210.58897400 -249.42663574]
[209.51539612 -234.45358276]
[207.02337646 -219.65039062]
[203.13549805 -205.15110779]
[197.88696289 -191.08705139]
[191.32530212 -177.58558655]
[183.50994873 -164.76899719]
[174.51167297 -152.75335693]
[164.41197205 -141.64746094]
[153.30230713 -131.55191040]
[141.28329468 -122.55813599]
[128.46379089 -114.74756622]
[114.95986938 -108.19095612]
[100.89385986 -102.94767761]
[86.39312744 -99.06521606]
[88.87824249 -84.27251434]
[91.36336517 -69.47980499]
[93.84848022 -54.68709564]
[96.33359528 -39.89439011]
[98.81871796 -25.10168266]
[109.77285767 -35.34896088]
[124.64372253 -33.38492966]
[132.56190491 -20.64513779]
[127.73986816 -6.44133949]
[113.70211029 -1.15536392]
[100.70948792 -8.65028954]
[101.64511871 6.32050180]
[102.58074951 21.29129410]
[103.51638031 36.26208496]
[104.45200348 51.23287582]
[112.96810913 63.45275116]
[106.10665894 77.70866394]
[107.04228973 92.67945862]
[110.66840363 99.94136810]
[107.83835602 107.97082520]
[108.46233368 122.95783997]
[109.08631134 137.94485474]
[109.71028900 152.93186951]
[118.67936707 162.25976562]
[118.85580444 174.79721069]
[110.69232941 183.77857971]
[111.00438690 198.77532959]
[111.31644440 213.77209473]
[111.62849426 228.76884460]
[111.94055176 243.76559448]
[112.25260925 258.76235962]
[112.56466675 273.75909424]
[112.87672424 288.75585938]
[113.18878174 303.75262451]
[113.50083160 318.74935913]
[128.15582275 322.34011841]
[141.38163757 329.60238647]
[152.27650452 340.04098511]
[160.09759521 352.94418335]
[164.31167603 367.43225098]
[164.63139343 382.51736450]
[161.03497314 397.17095947]
[153.76760864 410.39398193]
[143.32479858 421.28482056]
[130.41857910 429.10092163]
[115.92887878 433.30938721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 127]
[23 126]
[24 125]
[25 124]
[26 122]
[27 121]
[29 119]
[30 118]
[31 117]
[32 116]
[33 115]
[34 109]
[35 108]
[36 107]
[37 106]
[38 105]
[39 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
