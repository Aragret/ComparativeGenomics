%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCACACUCGGGGGGGGGGAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUxxxxxxxxxxCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACCCCCCCCCCCUCGCCACACUC\
) } def
/len { sequence length } bind def

/coor [
[78.30989838 383.49899292]
[64.14929199 378.34399414]
[51.55954742 370.06179810]
[41.21961212 359.09899902]
[33.68709946 346.04687500]
[29.36823463 331.60928345]
[28.49592590 316.56481934]
[31.11721611 301.72482300]
[37.09074402 287.88958740]
[46.09436035 275.80523682]
[57.64251709 266.12347412]
[71.11243439 259.36639404]
[85.77769470 255.89842224]
[85.77769470 240.89842224]
[85.77769470 225.89842224]
[85.77769470 210.89842224]
[85.77769470 195.89842224]
[85.77769470 180.89842224]
[85.77769470 165.89842224]
[85.77769470 150.89842224]
[85.77769470 135.89842224]
[85.77769470 120.89841461]
[80.79981232 107.33677673]
[84.63640594 96.18729401]
[92.68339539 91.64602661]
[88.19294739 77.33393860]
[83.70249939 63.02185059]
[79.21205139 48.70976257]
[64.60075378 52.13277817]
[49.77655029 54.46736145]
[34.82041550 55.70075989]
[19.81403351 55.82623291]
[4.83936644 54.84309769]
[-10.02180004 52.75672913]
[-24.68829918 49.57851410]
[-39.08002472 45.32581329]
[-53.11837387 40.02185822]
[-66.72667694 33.69561005]
[-79.83059692 26.38162804]
[-92.35858154 18.11985588]
[-104.24219513 8.95541668]
[-115.41653442 -1.06163502]
[-125.82057190 -11.87658978]
[-135.39747620 -23.43037796]
[-144.09495544 -35.65989685]
[-151.86549377 -48.49835587]
[-158.66665649 -61.87562943]
[-164.46128845 -75.71865845]
[-169.21775818 -89.95183563]
[-172.91006470 -104.49742126]
[-175.51806641 -119.27597046]
[-177.02749634 -134.20677185]
[-177.43013000 -149.20826721]
[-176.72373962 -164.19854736]
[-174.91221619 -179.09571838]
[-172.00544739 -193.81842041]
[-168.01930237 -208.28623962]
[-162.97554016 -222.42015076]
[-156.90171814 -236.14299011]
[-149.83102417 -249.37976074]
[-141.80206299 -262.05819702]
[-132.85868835 -274.10906982]
[-123.04973602 -285.46652222]
[-112.42879486 -296.06854248]
[-101.05386353 -305.85720825]
[-88.98707581 -314.77911377]
[-76.29433441 -322.78543091]
[-63.04496765 -329.83251953]
[-49.31132889 -335.88186646]
[-35.16843796 -340.90042114]
[-20.69353294 -344.86074829]
[-5.96567297 -347.74127197]
[8.93470097 -349.52621460]
[23.92620850 -350.20587158]
[38.92697144 -349.77648926]
[53.85505676 -348.24044800]
[68.62893677 -345.60610962]
[83.16791534 -341.88784790]
[97.39258575 -337.10601807]
[111.22525787 -331.28671265]
[124.59038544 -324.46170044]
[137.41496277 -316.66827393]
[149.62895203 -307.94900513]
[161.16564941 -298.35153198]
[171.96203613 -287.92822266]
[181.95913696 -276.73602295]
[191.10237122 -264.83609009]
[199.34179688 -252.29339600]
[206.63240051 -239.17645264]
[212.93437195 -225.55688477]
[218.21328735 -211.50910950]
[222.44030762 -197.10981750]
[225.59237671 -182.43768311]
[227.65223694 -167.57281494]
[228.60867310 -152.59642029]
[228.45643616 -137.59028625]
[227.19636536 -122.63636780]
[224.83535767 -107.81635284]
[221.38629150 -93.21118164]
[216.86801147 -78.90061188]
[211.30519104 -64.96281433]
[204.72821045 -51.47390747]
[197.17298889 -38.50756836]
[188.68081665 -26.13461113]
[179.29804993 -14.42261505]
[169.07592773 -3.43554807]
[158.07031250 6.76658201]
[146.34127808 16.12805367]
[133.95291138 24.59773827]
[120.97286224 32.12937546]
[107.47203064 38.68182755]
[93.52413940 44.21931458]
[98.01458740 58.53140259]
[102.50503540 72.84349060]
[106.99548340 87.15557861]
[117.54820251 97.81578827]
[131.81405640 102.45104218]
[146.07989502 107.08630371]
[156.98785400 96.34967804]
[171.63929749 91.92315674]
[186.66740417 94.82391357]
[198.61885071 104.38536835]
[204.74726868 118.41038513]
[203.64440918 133.67610168]
[195.56367493 146.67459106]
[182.36198425 154.41886902]
[167.07296753 155.12936401]
[153.20996094 148.64282227]
[143.95854187 136.44979858]
[141.44464111 121.35214996]
[127.17879486 116.71689606]
[112.91294861 112.08163452]
[100.77769470 120.89841461]
[100.77769470 135.89842224]
[100.77769470 150.89842224]
[100.77769470 165.89842224]
[100.77769470 180.89842224]
[100.77769470 195.89842224]
[100.77769470 210.89842224]
[100.77769470 225.89842224]
[100.77769470 240.89842224]
[100.77769470 255.89842224]
[115.44295502 259.36639404]
[128.91287231 266.12347412]
[140.46102905 275.80523682]
[149.46464539 287.88958740]
[155.43817139 301.72482300]
[158.05946350 316.56481934]
[157.18714905 331.60928345]
[152.86828613 346.04687500]
[145.33578491 359.09899902]
[134.99583435 370.06179810]
[122.40609741 378.34399414]
[108.24549103 383.49899292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 115]
[26 114]
[27 113]
[28 112]
[116 132]
[117 131]
[118 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
