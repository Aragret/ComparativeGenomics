%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCCUCAGGGGGGGGGGCACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAxxxxxxxxxxAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCCCCCCCCCCCACCCUUA\
) } def
/len { sequence length } bind def

/coor [
[177.37748718 268.48049927]
[175.37330627 260.16937256]
[174.29779053 251.68659973]
[174.16433716 243.13568115]
[174.97485352 234.62091064]
[176.71975708 226.24620056]
[179.37802124 218.11376953]
[182.91749573 210.32295227]
[187.29525757 202.96888733]
[192.45812988 196.14144897]
[182.01832581 185.37065125]
[171.57850647 174.59983826]
[161.13868713 163.82902527]
[150.69888306 153.05822754]
[136.28506470 149.30441284]
[132.23611450 134.01008606]
[121.79630280 123.23928070]
[78.77037048 116.39553833]
[63.86847305 118.10823059]
[48.96656799 119.82091522]
[34.06466675 121.53360748]
[19.16276550 123.24629974]
[6.33628321 132.50869751]
[-7.19119406 126.27518463]
[-22.09309578 127.98786926]
[-36.99499893 129.70056152]
[-40.22349548 144.49432373]
[-48.08272552 157.43693542]
[-59.72017670 167.12448120]
[-73.87350464 172.50611877]
[-89.00746155 172.99809265]
[-103.48043060 168.54704285]
[-115.72249603 159.63578796]
[-124.40571594 147.23092651]
[-128.58822632 132.67808533]
[-127.81630707 117.55582428]
[-122.17371368 103.50449371]
[-112.27250671 92.04827881]
[-99.18669128 84.42987061]
[-84.33572388 81.47564697]
[-69.33052063 83.50607300]
[-55.79873657 90.30088806]
[-45.20819855 101.12305450]
[-38.70768738 114.79866028]
[-23.80578613 113.08596802]
[-8.90388393 111.37327576]
[2.85671401 102.23339081]
[17.45007515 108.34439087]
[32.35197830 106.63170624]
[47.25387955 104.91901398]
[62.15578079 103.20632172]
[77.05768585 101.49363708]
[62.06844330 102.06169128]
[49.86785889 93.33554077]
[45.56167221 78.96694183]
[50.95195389 64.96891022]
[63.78296280 57.19940186]
[78.68512726 58.90982819]
[89.42212677 69.38440704]
[91.50047302 84.24092865]
[90.56484222 69.27014160]
[89.62921906 54.29934692]
[88.69358826 39.32855606]
[87.75795746 24.35776329]
[86.82233429 9.38697243]
[72.21642303 5.39371777]
[59.69990921 -3.12776446]
[50.63049316 -15.25312805]
[45.99195862 -29.66710472]
[46.28746033 -44.80617523]
[51.48493576 -59.02816010]
[61.02061081 -70.79037476]
[73.86012268 -78.81693268]
[88.61073303 -82.23718262]
[103.67241669 -80.68011475]
[117.41138458 -74.31462097]
[128.33734131 -63.83119965]
[135.26512146 -50.36700439]
[137.44325256 -35.38253021]
[134.63546753 -20.50317955]
[127.14631653 -7.34295750]
[115.78819275 2.67061615]
[101.79312134 8.45134354]
[102.72875214 23.42213631]
[103.66438293 38.39292526]
[104.60000610 53.36371994]
[105.53563690 68.33451080]
[106.47126770 83.30529785]
[120.69804382 88.05912018]
[130.44569397 76.65809631]
[132.90898132 60.44500732]
[148.27806091 54.72453690]
[160.74252319 65.38141632]
[157.48001099 81.45275879]
[141.84671021 86.40574646]
[132.09906006 97.80677032]
[132.56710815 112.79946136]
[143.00692749 123.57027435]
[158.16746521 128.09448242]
[161.46969604 142.61840820]
[171.90950012 153.38922119]
[182.34931946 164.16001892]
[192.78912354 174.93083191]
[203.22894287 185.70164490]
[223.93519592 173.93696594]
[247.22282410 169.01986694]
[270.88989258 171.40663147]
[292.70120239 180.86329651]
[310.59942627 196.48861694]
[322.89916992 216.79994202]
[328.44561768 239.87388611]
[326.72296143 263.52847290]
[340.94976807 268.28228760]
[355.17654419 273.03610229]
[369.40332031 277.78991699]
[380.40023804 267.14443970]
[395.08801270 262.83999634]
[410.09146118 265.86572266]
[421.96292114 275.52630615]
[427.97442627 289.60183716]
[426.74453735 304.85784912]
[418.55590820 317.78863525]
[405.29025269 325.42279053]
[389.99584961 326.00604248]
[376.18728638 319.40432739]
[367.03765869 307.13473511]
[364.64950562 292.01669312]
[350.42272949 287.26287842]
[336.19595337 282.50906372]
[321.96914673 277.75524902]
[318.08175659 285.33767700]
[313.38113403 292.44622803]
[307.92440796 298.99398804]
[301.77789307 304.90090942]
[295.01638794 310.09469604]
[287.72222900 314.51181030]
[279.98425293 318.09805298]
[271.89672852 320.80947876]
[263.55822754 322.61267090]
[255.07044983 323.48541260]
[246.53691101 323.41671753]
[238.06170654 322.40719604]
[229.74827576 320.46881104]
[221.69812012 317.62500000]
[214.00952148 313.91012573]
[206.77642822 309.36929321]
[200.08721924 304.05767822]
[194.02369690 298.03979492]
[188.66003418 291.38891602]
[184.06188965 284.18597412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 104]
[11 103]
[12 102]
[13 101]
[14 100]
[16 98]
[17 97]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[24 46]
[25 45]
[26 44]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[89 96]
[90 95]
[112 130]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
