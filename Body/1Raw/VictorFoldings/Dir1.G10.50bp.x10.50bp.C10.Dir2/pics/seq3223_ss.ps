%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUUCUUAGGGGGGGGGGACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCxxxxxxxxxxGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCCCCCCCCCCCACUUCUUA\
) } def
/len { sequence length } bind def

/coor [
[83.27464294 359.40567017]
[70.05444336 352.13320923]
[59.16764069 341.68618774]
[51.35651016 328.77694702]
[47.15362930 314.28561401]
[46.84555435 299.20028687]
[50.45329666 284.54946899]
[57.73086929 271.33206177]
[68.18207550 260.44931030]
[81.09433746 252.64315796]
[95.58727264 248.44587708]
[95.27522278 233.44912720]
[94.96316528 218.45236206]
[94.65110779 203.45561218]
[94.33905029 188.45886230]
[94.02699280 173.46211243]
[93.71493530 158.46534729]
[93.40288544 143.46859741]
[93.09082794 128.47184753]
[92.77877045 113.47509003]
[82.33895874 102.70428467]
[67.35924530 101.92443848]
[52.37952805 101.14459229]
[37.39981461 100.36474609]
[22.55860901 102.54158783]
[8.43380547 107.59033966]
[-5.69099712 112.63909912]
[-15.88633442 125.48383331]
[-32.06594467 122.80945587]
[-37.58562851 107.36714172]
[-26.76721382 95.04261780]
[-10.73975372 98.51429749]
[3.38504934 93.46553802]
[17.50985146 88.41678619]
[2.82811666 85.34324646]
[-10.33560848 78.15184021]
[-20.85443687 67.45818329]
[-27.82790184 54.17771530]
[-30.65903664 39.44731522]
[-29.10548019 24.52798462]
[-23.30022621 10.69689560]
[-13.74023628 -0.86193573]
[-1.24389458 -9.15901089]
[13.11904335 -13.48405647]
[28.11903381 -13.46682453]
[42.47199631 -9.10879040]
[54.94924164 -0.78302532]
[64.48265076 10.79773998]
[70.25611115 24.64213181]
[71.77538300 39.56499481]
[68.91040802 54.28884888]
[61.90645218 67.55326080]
[51.36307907 78.22271729]
[38.17966080 85.38503265]
[53.15937424 86.16487885]
[68.13909149 86.94472504]
[83.11880493 87.72457123]
[72.96150970 76.68693542]
[71.75385284 61.73562622]
[80.00794220 49.21085358]
[94.22358704 44.42383194]
[108.37252808 49.40452576]
[116.45482635 62.04084396]
[115.04311371 76.97426605]
[104.73548889 87.87245941]
[116.43511200 78.48529816]
[128.13473511 69.09813690]
[113.20956421 70.59454346]
[98.72506714 66.69590759]
[86.56749725 57.90993118]
[78.32006073 45.38076782]
[75.05680084 30.74003410]
[77.20265961 15.89431858]
[84.47820282 2.77690792]
[95.93597412 -6.90398121]
[110.08386993 -11.88765335]
[125.07949066 -11.52510929]
[138.97001648 -5.86356020]
[149.94656372 4.35971642]
[156.57971191 17.81339455]
[158.00564575 32.74546432]
[154.03868103 47.21139526]
[145.19670105 59.32613754]
[159.21340942 53.98462677]
[173.23011780 48.64311218]
[187.24684143 43.30160141]
[201.26354980 37.96008682]
[199.96940613 22.31635094]
[203.11927795 6.95324993]
[210.45149231 -6.89344883]
[221.36825562 -18.11228943]
[234.98449707 -25.80534363]
[250.19947815 -29.36006927]
[265.78588867 -28.49808884]
[280.48880005 -23.29695320]
[293.12667847 -14.18326187]
[302.68637085 -1.89766741]
[316.58892822 -7.52962399]
[330.49148560 -13.16158104]
[344.33471680 -18.93785286]
[358.11709595 -24.85781670]
[367.49136353 -38.31347275]
[383.80630493 -36.65351105]
[390.27844238 -21.58555794]
[380.24984741 -8.61023140]
[364.03704834 -11.07543468]
[350.25466919 -5.15547180]
[345.31814575 0.41016644]
[336.12344360 0.74097526]
[322.22088623 6.37293196]
[308.31832886 12.00488853]
[310.03149414 26.26739120]
[307.98095703 40.49758911]
[302.30105591 53.71848297]
[293.37564087 65.02069855]
[281.81198120 73.62507629]
[268.39950562 78.93632507]
[254.05589294 80.58426666]
[239.76431274 78.44959259]
[226.50601196 72.67247772]
[215.19294739 63.64341354]
[206.60505676 51.97680283]
[192.58834839 57.31831360]
[178.57164001 62.65982819]
[164.55491638 68.00133514]
[150.53820801 73.34284973]
[137.52189636 80.79776001]
[125.82227325 90.18492126]
[114.12265015 99.57208252]
[107.77552032 113.16303253]
[108.08757782 128.15979004]
[108.39963531 143.15653992]
[108.71169281 158.15328979]
[109.02375031 173.15005493]
[109.33580780 188.14680481]
[109.64785767 203.14355469]
[109.95991516 218.14030457]
[110.27197266 233.13706970]
[110.58403015 248.13381958]
[125.23902130 251.72459412]
[138.46482849 258.98684692]
[149.35969543 269.42544556]
[157.18080139 282.32864380]
[161.39486694 296.81671143]
[161.71458435 311.90182495]
[158.11816406 326.55541992]
[150.85079956 339.77841187]
[140.40798950 350.66925049]
[127.50177002 358.48538208]
[113.01207733 362.69384766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 57]
[22 56]
[23 55]
[24 54]
[25 34]
[26 33]
[27 32]
[65 129]
[66 128]
[67 127]
[83 126]
[84 125]
[85 124]
[86 123]
[87 122]
[97 111]
[98 110]
[99 109]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
