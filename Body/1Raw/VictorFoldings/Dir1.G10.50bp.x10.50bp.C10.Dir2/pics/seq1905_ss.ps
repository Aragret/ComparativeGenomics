%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUCCACGGGGGGGGGGCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGxxxxxxxxxxCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCCCCCCCCCCCUACUCCAC\
) } def
/len { sequence length } bind def

/coor [
[68.07741547 403.09686279]
[54.85721588 395.82440186]
[43.97041321 385.37738037]
[36.15928268 372.46813965]
[31.95640182 357.97683716]
[31.64832878 342.89147949]
[35.25606918 328.24066162]
[42.53364182 315.02328491]
[52.98485184 304.14050293]
[65.89710999 296.33435059]
[80.39005280 292.13708496]
[80.07799530 277.14031982]
[79.76593781 262.14355469]
[79.45388031 247.14680481]
[79.14182281 232.15005493]
[78.82976532 217.15330505]
[78.51771545 202.15655518]
[78.20565796 187.15979004]
[77.89360046 172.16304016]
[77.58154297 157.16629028]
[77.26948547 142.16954041]
[76.95742798 127.17278290]
[67.81569672 115.28040314]
[53.40348053 111.12251282]
[38.99126434 106.96463013]
[24.57904816 102.80673981]
[18.09308815 116.37074280]
[9.46289921 128.68211365]
[-1.07607639 139.40496826]
[-13.23633003 148.24681091]
[-26.68612099 154.96641541]
[-41.05852890 159.38044739]
[-55.96146011 161.36853027]
[-70.98835754 160.87638855]
[-85.72927856 157.91746521]
[-99.78206635 152.57247925]
[-112.76336670 144.98724365]
[-124.31903076 135.36869812]
[-134.13381958 123.97923279]
[-141.93997192 111.12957001]
[-147.52452087 97.17024994]
[-150.73513794 82.48210144]
[-151.48422241 67.46582031]
[-149.75134277 52.53105927]
[-145.58375549 38.08525848]
[-139.09518433 24.52250671]
[-130.46263123 12.21280289]
[-119.92158508 1.49196839]
[-107.75962830 -7.34752655]
[-94.30854797 -14.06453323]
[-79.93528748 -18.47580719]
[-65.03197479 -20.46100616]
[-50.00516891 -19.96597290]
[-35.26482010 -17.00420952]
[-21.21305847 -11.65651798]
[-8.23322105 -4.06878614]
[3.32059121 5.55198765]
[13.13318157 16.94334030]
[20.93685532 29.79450989]
[26.51872444 43.75490189]
[29.72650719 58.44367599]
[30.47269821 73.46009827]
[28.73693657 88.39452362]
[43.14915085 92.55241394]
[57.56136703 96.71029663]
[71.97358704 100.86818695]
[79.41713715 79.40610504]
[100.95102692 69.82211304]
[103.12786865 54.98090363]
[105.30470276 40.13969803]
[91.83859253 33.21563721]
[81.35214996 22.29257584]
[74.98287201 8.55536366]
[73.42164612 -6.50588751]
[76.83781433 -21.25744629]
[84.86083221 -34.09917450]
[96.62040710 -43.63809586]
[110.84096527 -48.83950043]
[125.97994995 -49.13917923]
[140.39520264 -44.50462723]
[152.52307129 -35.43856049]
[161.04800415 -22.92440224]
[165.04530334 -8.31959438]
[164.08134460 6.79164267]
[158.26069641 20.77015686]
[148.21475220 32.09966278]
[135.03320312 39.55121613]
[120.14591217 42.31653595]
[117.96907043 57.15774155]
[115.79223633 71.99894714]
[126.77790070 82.21242523]
[141.42140198 78.96160126]
[156.06489563 75.71077728]
[170.70840454 72.45994568]
[172.69026184 56.68167496]
[179.93255615 42.55439758]
[191.54698181 31.77077484]
[206.12263489 25.61581612]
[221.89741516 24.81375313]
[236.97099304 29.44288826]
[249.53379822 38.92834473]
[258.08419800 52.11341858]
[272.65692139 48.55865479]
[287.22961426 45.00389481]
[295.22302246 31.37006760]
[310.53662109 27.46257973]
[324.08517456 35.59967041]
[327.83056641 50.95375061]
[319.55065918 64.41551971]
[304.15783691 67.99834442]
[290.78436279 59.57659531]
[276.21166992 63.13135910]
[261.63897705 66.68611908]
[260.50799561 80.83009338]
[255.04718018 93.94958496]
[245.78039551 104.75140381]
[233.60734558 112.16637421]
[219.71626282 115.45513153]
[205.46789551 114.28184509]
[192.26226807 108.74844360]
[181.40103149 99.38593292]
[173.95922852 87.10344696]
[159.31573486 90.35427856]
[144.67222595 93.60510254]
[130.02873230 96.85592651]
[125.11196136 115.43298340]
[110.24753571 126.86975098]
[91.95418549 126.86072540]
[92.26624298 141.85748291]
[92.57830048 156.85423279]
[92.89035034 171.85098267]
[93.20240784 186.84774780]
[93.51446533 201.84449768]
[93.82652283 216.84124756]
[94.13858032 231.83799744]
[94.45063782 246.83476257]
[94.76268768 261.83151245]
[95.07474518 276.82827759]
[95.38680267 291.82501221]
[110.04179382 295.41577148]
[123.26760101 302.67803955]
[134.16247559 313.11663818]
[141.98356628 326.01983643]
[146.19764709 340.50790405]
[146.51736450 355.59301758]
[142.92092896 370.24661255]
[135.65356445 383.46963501]
[125.21076965 394.36044312]
[112.30454254 402.17657471]
[97.81484985 406.38504028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 66]
[24 65]
[25 64]
[26 63]
[68 90]
[69 89]
[70 88]
[91 125]
[92 124]
[93 123]
[94 122]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
