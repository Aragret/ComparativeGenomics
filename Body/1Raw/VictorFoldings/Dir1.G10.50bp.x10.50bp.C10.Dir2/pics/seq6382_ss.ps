%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCAUAAUCGGGGGGGGGGGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUxxxxxxxxxxUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCCCCCCCCCCCAUCAUACUC\
) } def
/len { sequence length } bind def

/coor [
[152.72036743 475.47534180]
[139.01821899 469.21444702]
[127.05310059 460.06109619]
[117.42518616 448.47442627]
[110.61740875 435.03561401]
[106.97123718 420.41873169]
[106.66957092 405.35696411]
[109.72753143 390.60580444]
[115.99174500 376.90518188]
[125.14798737 364.94229126]
[136.73699951 355.31716919]
[150.17745972 348.51266479]
[164.79522705 344.87002563]
[164.49122620 329.87310791]
[164.18722534 314.87619019]
[163.88322449 299.87927246]
[163.57920837 284.88235474]
[163.27520752 269.88543701]
[162.97120667 254.88850403]
[162.66720581 239.89158630]
[162.36318970 224.89466858]
[162.05918884 209.89775085]
[157.42393494 195.63191223]
[148.85491943 183.32044983]
[140.28588867 171.00900269]
[131.71687317 158.69755554]
[123.14784241 146.38609314]
[114.57881927 134.07464600]
[106.00979614 121.76319885]
[94.45803833 121.88700867]
[84.35721588 116.28059387]
[78.35182190 106.41176605]
[63.37107468 105.65203094]
[54.58258820 108.35456085]
[48.09533691 104.72203827]
[33.13306427 103.65884399]
[18.17079163 102.59564972]
[3.20851898 101.53245544]
[-11.29434490 109.18745422]
[-25.02922821 100.22726440]
[-23.86686134 83.86936188]
[-9.00298786 76.94135284]
[4.27171469 86.57018280]
[19.23398781 87.63337708]
[34.19626236 88.69657135]
[49.15853500 89.75976562]
[64.13081360 90.67127991]
[79.11155701 91.43102264]
[80.80413055 88.11416626]
[83.01887512 85.12062836]
[85.69553375 82.53184509]
[88.76129913 80.41822815]
[86.04022217 65.66709900]
[83.31914520 50.91596985]
[80.59806824 36.16484451]
[77.87699127 21.41371727]
[72.24224091 7.51229572]
[63.92449188 -4.97029543]
[55.60674286 -17.45288658]
[47.28899384 -29.93547630]
[31.90379143 -34.48246002]
[25.99998665 -49.39972305]
[34.10647583 -63.24401093]
[50.00465393 -65.39517975]
[61.49879837 -54.20302963]
[59.77158737 -38.25322342]
[68.08933258 -25.77063370]
[76.40708160 -13.28804302]
[84.72483063 -0.80545211]
[84.01094818 -15.78845501]
[87.47147369 -30.38382339]
[94.83608246 -43.45143509]
[105.52949524 -53.97051239]
[118.71638489 -61.11935425]
[133.36665344 -64.33952332]
[148.33590698 -63.37948608]
[162.45478821 -58.31422424]
[174.62043762 -49.53941727]
[183.88249207 -37.74050903]
[189.51747131 -23.83917999]
[191.08518982 -8.92132854]
[188.46318054 5.84772921]
[181.85626221 19.31430626]
[171.78054810 30.42645645]
[159.02308655 38.31615067]
[144.58044434 42.36708832]
[129.58081055 42.26282501]
[115.19587708 38.01150513]
[102.54933167 29.94522285]
[92.62812042 18.69264030]
[95.34919739 33.44376755]
[98.07027435 48.19489288]
[100.79135132 62.94602203]
[103.51242828 77.69715118]
[120.83715820 91.30705261]
[118.32125092 113.19417572]
[126.89027405 125.50562286]
[135.45928955 137.81707764]
[144.02832031 150.12852478]
[152.59733582 162.43997192]
[161.16636658 174.75143433]
[169.73538208 187.06288147]
[168.87785339 172.08741760]
[170.99681091 157.23783875]
[176.00869751 143.09991455]
[183.71582031 130.23132324]
[193.81413269 119.13970184]
[205.90530396 110.26256561]
[219.51237488 103.95008850]
[234.09861755 100.45127106]
[249.08863831 99.90412903]
[263.89114380 102.33025360]
[277.92221069 107.63393402]
[290.62835693 115.60596466]
[301.50842285 125.93186951]
[310.13317871 138.20433044]
[316.16244507 151.93925476]
[319.35836792 166.59484863]
[319.59484863 181.59297180]
[316.86264038 196.34204102]
[311.26943970 210.26023865]
[303.03591919 222.79853821]
[292.48684692 233.46235657]
[280.03833008 241.83105469]
[266.18145752 247.57449341]
[251.46282959 250.46612549]
[236.46301270 250.39189148]
[221.77371216 247.35472107]
[207.97436523 241.47441101]
[195.60929871 232.98292542]
[185.16629028 222.21520996]
[177.05610657 209.59375000]
[177.36010742 224.59066772]
[177.66412354 239.58758545]
[177.96812439 254.58450317]
[178.27212524 269.58142090]
[178.57612610 284.57833862]
[178.88014221 299.57525635]
[179.18414307 314.57217407]
[179.48814392 329.56909180]
[179.79214478 344.56600952]
[194.54551697 347.61325073]
[208.25070190 353.86752319]
[220.22026062 363.01504517]
[229.85379028 374.59707642]
[236.66807556 388.03259277]
[240.32131958 402.64770508]
[240.63029480 417.70932007]
[237.57948303 432.46194458]
[231.32191467 446.16561890]
[222.17146301 458.13296509]
[210.58711243 467.76367188]
[197.14994812 474.57470703]
[182.53395081 478.22442627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 102]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[29 96]
[32 48]
[33 47]
[35 46]
[36 45]
[37 44]
[38 43]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
