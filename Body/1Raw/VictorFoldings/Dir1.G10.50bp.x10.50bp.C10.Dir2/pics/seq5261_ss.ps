%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCAAUUAGGGGGGGGGGCCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCxxxxxxxxxxCCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCCCCCCCCCCCUCCUUAAUUA\
) } def
/len { sequence length } bind def

/coor [
[83.02081299 486.00726318]
[68.99887085 480.45425415]
[56.79891205 471.58792114]
[47.18783951 459.96560669]
[40.76981354 446.31790161]
[37.94827652 431.50271606]
[38.90059280 416.45135498]
[43.56689835 402.10992432]
[51.65386581 389.37997437]
[62.65314102 379.06170654]
[75.87329865 371.80371094]
[90.48331451 368.06228638]
[90.48331451 353.06228638]
[90.48331451 338.06228638]
[90.48331451 323.06228638]
[90.48331451 308.06228638]
[90.48331451 293.06228638]
[90.48331451 278.06228638]
[90.48331451 263.06228638]
[90.48331451 248.06228638]
[90.48331451 233.06228638]
[77.67551422 227.64764404]
[67.87602997 217.72108459]
[62.59409332 204.76422119]
[62.66117859 190.72886658]
[68.10025024 177.74304199]
[78.11728668 167.78823853]
[91.21701813 162.39717102]
[91.52499390 147.40032959]
[91.83297729 132.40348816]
[92.14095306 117.40665436]
[82.18382263 106.88040924]
[82.48131561 92.39394379]
[92.86221313 82.28536987]
[93.17018890 67.28852844]
[85.71785736 53.33240509]
[93.71484375 40.76667786]
[94.02281952 25.76983833]
[94.02281952 10.76983929]
[93.71484375 -4.22699881]
[93.40686798 -19.22383690]
[93.09889221 -34.22067642]
[78.12567139 -35.27798462]
[63.31063461 -37.69251633]
[48.77654648 -41.44425964]
[34.64384842 -46.50212860]
[21.02964211 -52.82421112]
[8.04674911 -60.35811234]
[-4.19725132 -69.04141235]
[-15.60089970 -78.80215454]
[-26.06969833 -89.55945587]
[-35.51689911 -101.22416687]
[-43.86421967 -113.69964600]
[-51.04248428 -126.88250732]
[-56.99221802 -140.66349792]
[-61.66411209 -154.92845154]
[-65.01945496 -169.55912781]
[-67.03044891 -184.43431091]
[-67.68041992 -199.43074036]
[-66.96398163 -214.42413330]
[-64.88708496 -229.29026794]
[-61.46692276 -243.90592957]
[-56.73184967 -258.15002441]
[-50.72109222 -271.90451050]
[-43.48446655 -285.05545044]
[-35.08193207 -297.49380493]
[-25.58312225 -309.11651611]
[-15.06674671 -319.82730103]
[-3.61994743 -329.53741455]
[8.66242027 -338.16635132]
[21.67857933 -345.64263916]
[35.32067108 -351.90432739]
[49.47565079 -356.89950562]
[64.02622223 -360.58679199]
[78.85181427 -362.93563843]
[93.82957458 -363.92657471]
[108.83538818 -363.55136108]
[123.74491119 -361.81317139]
[138.43460083 -358.72637939]
[152.78271484 -354.31652832]
[166.67037964 -348.62020874]
[179.98251343 -341.68463135]
[192.60877991 -333.56719971]
[204.44458008 -324.33523560]
[215.39181519 -314.06521606]
[225.35978699 -302.84225464]
[234.26589966 -290.75936890]
[242.03633118 -277.91662598]
[248.60671997 -264.42050171]
[253.92259216 -250.38282776]
[257.93991089 -235.91989136]
[260.62539673 -221.15156555]
[261.95678711 -206.20022583]
[261.92303467 -191.18975830]
[260.52444458 -176.24455261]
[257.77258301 -161.48844910]
[253.69027710 -147.04373169]
[248.31134033 -133.03009033]
[241.68034363 -119.56363678]
[233.85224915 -106.75598145]
[224.89190674 -94.71324158]
[214.87358093 -83.53521729]
[203.88026428 -73.31452942]
[192.00308228 -64.13587189]
[179.34043884 -56.07530594]
[165.99726868 -49.19962692]
[152.08413696 -43.56580353]
[137.71633911 -39.22052383]
[123.01291656 -36.19979858]
[108.09572601 -34.52865219]
[108.40370178 -19.53181458]
[108.71168518 -4.53497648]
[109.01966095 10.46186161]
[111.82918549 14.39324760]
[112.15686798 20.14481354]
[109.01966095 26.07781601]
[108.71168518 41.07465363]
[116.18603516 53.95810318]
[108.16702271 67.59650421]
[107.85904694 82.59334564]
[117.81617737 93.11959076]
[117.51868439 107.60605621]
[107.13778687 117.71463013]
[106.82981110 132.71147156]
[106.52183533 147.70831299]
[106.21385956 162.70513916]
[120.76141357 169.92720032]
[130.67950439 182.71542358]
[134.03042603 198.48889160]
[130.19544983 214.09193420]
[119.98834229 226.42541504]
[105.48331451 233.06228638]
[105.48331451 248.06228638]
[105.48331451 263.06228638]
[105.48331451 278.06228638]
[105.48331451 293.06228638]
[105.48331451 308.06228638]
[105.48331451 323.06228638]
[105.48331451 338.06228638]
[105.48331451 353.06228638]
[105.48331451 368.06228638]
[120.09332275 371.80371094]
[133.31347656 379.06170654]
[144.31275940 389.37997437]
[152.39971924 402.10992432]
[157.06602478 416.45135498]
[158.01834106 431.50271606]
[155.19680786 446.31790161]
[148.77877808 459.96560669]
[139.16770935 471.58792114]
[126.96775055 480.45425415]
[112.94580841 486.00726318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 126]
[29 125]
[30 124]
[31 123]
[34 120]
[35 119]
[37 117]
[38 116]
[39 113]
[40 112]
[41 111]
[42 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
