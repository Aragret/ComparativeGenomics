%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUGACUAGGGGGGGGGGGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACxxxxxxxxxxAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUACCCCCCCCCCACCUGACUAG\
) } def
/len { sequence length } bind def

/coor [
[76.87078094 388.66107178]
[63.02484131 382.64505005]
[51.31617737 373.11563110]
[42.61365509 360.77996826]
[37.56305313 346.55343628]
[36.53916168 331.49176025]
[39.61796188 316.71258545]
[46.57098389 303.31268311]
[56.88226700 292.28634644]
[69.78664398 284.45181274]
[84.32653809 280.39050293]
[84.32653809 265.39050293]
[84.32653809 250.39051819]
[84.32653809 235.39051819]
[84.32653809 220.39051819]
[84.32653809 205.39051819]
[84.32653809 190.39051819]
[84.32653809 175.39051819]
[84.32653809 160.39051819]
[84.32653809 145.39051819]
[84.32653809 130.39051819]
[77.13515472 143.55424500]
[74.98947906 158.39999390]
[65.28943634 169.84155273]
[50.99492264 174.38763428]
[36.46778107 170.65101624]
[26.14085960 159.77192688]
[23.16532707 145.07002258]
[28.44914818 131.03144836]
[40.38000488 121.93999481]
[55.31591415 120.56955719]
[68.83572388 114.07227325]
[53.85601425 113.29243469]
[38.87629700 112.51258850]
[23.89658356 111.73274231]
[8.91687012 110.95289612]
[-3.91624665 120.58049774]
[-19.40789795 116.41056824]
[-25.67421532 101.64192200]
[-17.90821648 87.60380554]
[-2.06730986 85.06505585]
[9.69671440 95.97318268]
[24.67642975 96.75302887]
[39.65614319 97.53287506]
[54.63585663 98.31271362]
[69.61557007 99.09255981]
[77.45397186 84.42514038]
[90.68460083 77.44049835]
[103.89800262 78.94609833]
[111.62208557 66.08769989]
[103.35245514 62.14984512]
[96.70951843 53.64078522]
[87.44457245 41.84414673]
[78.17961884 30.04750443]
[68.91467285 18.25086594]
[53.41410446 18.96638489]
[40.47185135 10.40614510]
[35.06447220 -4.13826656]
[39.27122116 -19.07422638]
[51.47451019 -28.65855408]
[66.98192596 -29.20587921]
[79.83055878 -20.50574493]
[85.07984161 -5.90353060]
[80.71131134 8.98591614]
[89.97626495 20.78255653]
[99.24121094 32.57919693]
[108.50616455 44.37583542]
[106.03101349 29.58145714]
[97.36086273 17.34101295]
[94.25689697 2.66568065]
[97.22830963 -12.03706360]
[105.78765869 -24.35524559]
[118.53077698 -32.26807785]
[133.36717224 -34.47746277]
[147.86294556 -30.62096024]
[159.64007568 -21.33122063]
[166.76652527 -8.13221836]
[168.07321167 6.81075811]
[163.34579468 21.04632568]
[153.35977173 32.23915482]
[139.75009155 38.55382919]
[130.24955750 50.16157532]
[144.15211487 44.52961731]
[158.05467224 38.89766312]
[171.95722961 33.26570511]
[185.85978699 27.63374901]
[199.76232910 22.00179100]
[197.79512024 7.60120296]
[199.34379578 -6.84085608]
[204.31315613 -20.47910309]
[212.40788269 -32.51639938]
[223.15016174 -42.25035477]
[235.90782166 -49.11428452]
[249.93161011 -52.71023560]
[264.39907837 -52.83202362]
[278.46298218 -49.47707367]
[291.30068970 -42.84628677]
[302.16256714 -33.33203125]
[310.41543579 -21.49490929]
[324.43212891 -26.83642197]
[328.35446167 -41.84957886]
[340.37353516 -51.66392899]
[355.86776733 -52.50565720]
[368.87930298 -44.05110168]
[374.40496826 -29.55120850]
[370.31997681 -14.58148479]
[358.19515991 -4.89809418]
[342.69271851 -4.22449827]
[329.77365112 -12.81970787]
[315.75692749 -7.47819567]
[317.46343994 7.93905544]
[315.13421631 23.28582573]
[308.92117310 37.52282333]
[299.23950195 49.68441391]
[286.73977661 58.94411850]
[272.26443481 64.67077637]
[256.79077148 66.47156525]
[241.36517334 64.21894073]
[227.03224182 58.05965424]
[214.76405334 48.40520096]
[205.39428711 35.90434647]
[191.49172974 41.53630447]
[177.58918762 47.16826248]
[163.68663025 52.80021667]
[149.78407288 58.43217468]
[135.88151550 64.06413269]
[124.48049164 73.81178284]
[116.75640869 86.67018890]
[123.20658112 111.51152802]
[99.32653809 130.39051819]
[99.32653809 145.39051819]
[99.32653809 160.39051819]
[99.32653809 175.39051819]
[99.32653809 190.39051819]
[99.32653809 205.39051819]
[99.32653809 220.39051819]
[99.32653809 235.39051819]
[99.32653809 250.39051819]
[99.32653809 265.39050293]
[99.32653809 280.39050293]
[113.86642456 284.45181274]
[126.77080536 292.28634644]
[137.08209229 303.31268311]
[144.03511047 316.71258545]
[147.11390686 331.49176025]
[146.09001160 346.55343628]
[141.03941345 360.77996826]
[132.33688354 373.11563110]
[120.62822723 382.64505005]
[106.78228760 388.66107178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[49 128]
[50 127]
[52 67]
[53 66]
[54 65]
[55 64]
[82 126]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
