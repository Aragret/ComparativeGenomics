%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCAUCAUGGGGGGGGGGAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUxxxxxxxxxxAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCCCCCCCCCCCACCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[67.73844910 372.02020264]
[53.89251328 366.00418091]
[42.18385315 356.47476196]
[33.48132706 344.13909912]
[28.43072510 329.91256714]
[27.40683365 314.85089111]
[30.48563385 300.07171631]
[37.43865585 286.67181396]
[47.74993896 275.64547729]
[60.65431976 267.81097412]
[75.19420624 263.74963379]
[75.19420624 248.74964905]
[75.19420624 233.74964905]
[75.19420624 218.74964905]
[75.19420624 203.74964905]
[75.19420624 188.74964905]
[75.19420624 173.74964905]
[75.19420624 158.74964905]
[75.19420624 143.74964905]
[75.19420624 128.74964905]
[86.49263000 93.41233063]
[72.59351349 85.85420990]
[72.36248779 70.96139526]
[64.37257385 58.26646805]
[56.38265610 45.57153702]
[43.05595016 52.47555542]
[29.19826698 58.24020004]
[14.90680790 62.82503510]
[0.28181911 66.19790649]
[-14.57411385 68.33515167]
[-29.55678558 69.22177124]
[-44.56110001 68.85156250]
[-59.48181534 67.22711182]
[-74.21426392 64.35980988]
[-88.65512085 60.26977921]
[-102.70307159 54.98570251]
[-116.25959778 48.54464722]
[-129.22959900 40.99179077]
[-141.52209473 32.38011551]
[-153.05087280 22.77002335]
[-163.73506165 12.22892570]
[-173.49971008 0.83076155]
[-182.27633667 -11.34451866]
[-190.00337219 -24.21151161]
[-196.62660217 -37.67996597]
[-202.09959412 -51.65540314]
[-206.38395691 -66.03980255]
[-209.44961548 -80.73225403]
[-211.27508545 -95.62971497]
[-211.84754944 -110.62767792]
[-211.16299438 -125.62094116]
[-209.22624207 -140.50433350]
[-206.05085754 -155.17346191]
[-201.65911865 -169.52543640]
[-196.08181763 -183.45957947]
[-189.35810852 -196.87815857]
[-181.53512573 -209.68704224]
[-172.66775513 -221.79638672]
[-162.81817627 -233.12124634]
[-152.05551147 -243.58219910]
[-140.45523071 -253.10586548]
[-128.09870911 -261.62542725]
[-115.07262421 -269.08111572]
[-101.46833801 -275.42068481]
[-87.38127899 -280.59960938]
[-72.91026306 -284.58160400]
[-58.15679169 -287.33871460]
[-43.22435379 -288.85159302]
[-28.21769142 -289.10968018]
[-13.24206543 -288.11108398]
[1.59747910 -285.86288452]
[16.19685173 -282.38079834]
[30.45364380 -277.68927002]
[44.26785660 -271.82122803]
[57.54259109 -264.81777954]
[70.18473053 -256.72811890]
[82.10559845 -247.60893250]
[93.22158051 -237.52421570]
[103.45470428 -226.54470825]
[112.73318481 -214.74740601]
[120.99194336 -202.21507263]
[128.17304993 -189.03559875]
[134.22613525 -175.30145264]
[139.10874939 -161.10897827]
[142.78662109 -146.55769348]
[145.23396301 -131.74967957]
[146.43360901 -116.78881836]
[146.37715149 -101.78004456]
[145.06497192 -86.82863617]
[142.50628662 -72.03945923]
[138.71903992 -57.51625824]
[133.72979736 -43.36090851]
[127.57355499 -29.67269325]
[120.29349518 -16.54763031]
[111.94068146 -4.07778597]
[102.57370758 7.64937353]
[92.25827026 18.55158997]
[81.06672668 28.55238914]
[69.07758331 37.58162308]
[77.06750488 50.27655029]
[85.05741882 62.97148132]
[98.38504028 69.62157440]
[99.18755341 85.42241669]
[112.20386505 92.87732697]
[127.19656372 93.34536743]
[142.18925476 93.81340790]
[157.18196106 94.28145599]
[172.17465210 94.74949646]
[187.16734314 95.21753693]
[195.82398987 82.44779968]
[210.01922607 76.40637207]
[225.22340393 79.02103424]
[236.58493042 89.45747375]
[240.47837830 104.38545227]
[235.66137695 119.04151154]
[223.67098999 128.74894714]
[208.33332825 130.41015625]
[194.54257202 123.49506378]
[186.69931030 110.21023560]
[171.70660400 109.74218750]
[156.71391296 109.27414703]
[141.72122192 108.80610657]
[126.72852325 108.33806610]
[111.73582458 107.87002563]
[106.35041809 113.08992767]
[120.77693939 117.19792175]
[124.43246460 131.74568176]
[113.66143036 142.18525696]
[99.23500061 138.07695007]
[95.57961273 123.52973938]
[90.19420624 128.74964905]
[90.19420624 143.74964905]
[90.19420624 158.74964905]
[90.19420624 173.74964905]
[90.19420624 188.74964905]
[90.19420624 203.74964905]
[90.19420624 218.74964905]
[90.19420624 233.74964905]
[90.19420624 248.74964905]
[90.19420624 263.74963379]
[104.73409271 267.81097412]
[117.63847351 275.64547729]
[127.94976044 286.67181396]
[134.90278625 300.07171631]
[137.98158264 314.85089111]
[136.95768738 329.91256714]
[131.90708923 344.13909912]
[123.20455933 356.47476196]
[111.49590302 366.00418091]
[97.64996338 372.02020264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 103]
[23 101]
[24 100]
[25 99]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
