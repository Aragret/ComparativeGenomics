%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUCUAGUGGGGGGGGGGAAGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAxxxxxxxxxxGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCCCCCCCCCCCACUUCAAGU\
) } def
/len { sequence length } bind def

/coor [
[84.73467255 402.31726074]
[72.17645264 393.96609497]
[62.09022522 382.75366211]
[55.11003494 369.38476562]
[51.67464828 354.69976807]
[52.00002670 339.62179565]
[56.06571198 325.09869385]
[63.61613083 312.04333496]
[74.17665863 301.27642822]
[87.08345795 293.47482300]
[101.52518463 289.12884521]
[100.90120697 274.14184570]
[100.27722931 259.15481567]
[99.65325165 244.16780090]
[99.02927399 229.18078613]
[98.40529633 214.19377136]
[97.78131866 199.20675659]
[97.15734100 184.21974182]
[96.53336334 169.23272705]
[95.75351715 154.25300598]
[94.81788635 139.28222656]
[93.88226318 124.31143188]
[92.94663239 109.34063721]
[83.90622711 121.31022644]
[69.88161469 126.63095856]
[55.17676544 123.66997528]
[44.30441666 113.33595276]
[40.60114670 98.80027771]
[45.20344543 84.52376556]
[56.69892883 74.88768768]
[71.55977631 72.84924316]
[85.22537994 79.03400421]
[93.50218964 91.54470062]
[95.36979675 76.66142273]
[97.08248901 61.75951767]
[98.64006805 46.84060669]
[100.19765472 31.92169380]
[101.75523376 17.00278282]
[86.99434662 14.29269123]
[72.48786163 10.44688606]
[58.32302475 5.48849630]
[44.58501816 -0.55265766]
[31.35647202 -7.64024353]
[18.71694183 -15.73163509]
[6.74244690 -24.77816772]
[-4.49499798 -34.72543716]
[-14.92780876 -45.51361465]
[-24.49323845 -57.07781982]
[-33.13376236 -69.34850311]
[-40.79740906 -82.25186920]
[-47.43809509 -95.71031189]
[-53.01587677 -109.64288330]
[-57.49720764 -123.96580505]
[-60.85514069 -138.59292603]
[-63.06947708 -153.43626404]
[-64.12689972 -168.40658569]
[-64.02104950 -183.41381836]
[-62.75256729 -198.36772156]
[-60.32907486 -213.17835999]
[-56.76515198 -227.75665283]
[-52.08222961 -242.01493835]
[-46.30847549 -255.86744690]
[-39.47861481 -269.23086548]
[-31.63371658 -282.02487183]
[-22.82096672 -294.17245483]
[-13.09336758 -305.60055542]
[-2.50942063 -316.24050903]
[8.86721897 -326.02828979]
[20.96813011 -334.90499878]
[33.72053909 -342.81729126]
[47.04774475 -349.71759033]
[60.86959457 -355.56436157]
[75.10296631 -360.32244873]
[89.66225433 -363.96325684]
[104.45989990 -366.46484375]
[119.40690613 -367.81222534]
[134.41337585 -367.99725342]
[149.38905334 -367.01885986]
[164.24388123 -364.88287354]
[178.88851929 -361.60217285]
[193.23487854 -357.19647217]
[207.19668579 -351.69229126]
[220.68998718 -345.12271118]
[233.63360596 -337.52725220]
[245.94972229 -328.95159912]
[257.56423950 -319.44732666]
[268.40731812 -309.07159424]
[278.41372681 -297.88677979]
[287.52334595 -285.96017456]
[295.68130493 -273.36352539]
[302.83859253 -260.17257690]
[308.95214844 -246.46662903]
[313.98522949 -232.32815552]
[317.90753174 -217.84216309]
[320.69546509 -203.09577942]
[322.33227539 -188.17770386]
[322.80813599 -173.17764282]
[322.12014771 -158.18580627]
[320.27249146 -143.29237366]
[317.27621460 -128.58689880]
[313.14941406 -114.15784454]
[307.91687012 -100.09197235]
[301.61004639 -86.47388458]
[294.26687622 -73.38548279]
[285.93154907 -60.90547943]
[276.65417480 -49.10893250]
[266.49053955 -38.06679535]
[255.50177002 -27.84546852]
[243.75398254 -18.50642967]
[231.31781006 -10.10584450]
[218.26803589 -2.69423699]
[204.68316650 3.68381882]
[190.64489746 8.98996449]
[176.23764038 13.19228649]
[161.54806519 16.26551247]
[146.66452026 18.19116020]
[131.67649841 18.95764732]
[116.67414093 18.56036377]
[115.11656189 33.47927475]
[113.55898285 48.39818573]
[112.00140381 63.31710052]
[114.45079041 70.34178162]
[110.25308228 78.52903748]
[108.38546753 93.41231537]
[107.91742706 108.40501404]
[108.85305023 123.37580109]
[109.78868103 138.34658813]
[110.72431183 153.31738281]
[114.40316010 161.75053406]
[111.52037811 168.60874939]
[112.14435577 183.59576416]
[112.76833344 198.58277893]
[113.39231110 213.56979370]
[114.01628876 228.55680847]
[114.64026642 243.54383850]
[115.26424408 258.53085327]
[115.88822174 273.51785278]
[116.51219940 288.50488281]
[131.26519775 291.63531494]
[144.77583313 298.33706665]
[156.19482422 308.18887329]
[164.80433655 320.57141113]
[170.06318665 334.70629883]
[171.64079285 349.70501709]
[169.43797302 364.62475586]
[163.59323120 378.52761841]
[154.47395325 390.53970337]
[142.65338135 399.90585327]
[128.87457275 406.03735352]
[114.00366974 408.54873657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 128]
[21 127]
[22 126]
[23 125]
[33 124]
[34 123]
[35 121]
[36 120]
[37 119]
[38 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
