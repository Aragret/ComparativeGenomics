%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUCUCUCCGGGGGGGGGGUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAxxxxxxxxxxAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGCCCCCCCCCCUCCCUUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[101.07654572 386.21691895]
[87.05460358 380.66390991]
[74.85464478 371.79757690]
[65.24357605 360.17526245]
[58.82555008 346.52758789]
[56.00401306 331.71240234]
[56.95632935 316.66101074]
[61.62263107 302.31958008]
[69.70960236 289.58963013]
[80.70887756 279.27136230]
[93.92903137 272.01339722]
[108.53904724 268.27194214]
[108.53904724 253.27194214]
[108.53904724 238.27194214]
[108.53904724 223.27194214]
[108.53904724 208.27194214]
[108.53904724 193.27194214]
[108.53904724 178.27194214]
[108.53904724 163.27194214]
[108.53904724 148.27194214]
[108.53904724 133.27194214]
[93.63938904 132.46850586]
[81.04448700 125.55918884]
[73.01022339 114.32674408]
[70.73547363 101.26872253]
[56.08274841 98.05972290]
[41.43002319 94.85073090]
[26.77729988 91.64173126]
[12.12457466 88.43273926]
[-2.52815032 85.22373962]
[-17.18087578 82.01474762]
[-31.83359909 78.80574799]
[-46.54912186 75.89827728]
[-61.32123947 73.29355621]
[-76.25532532 78.51692963]
[-87.44567108 68.68711090]
[-102.21778870 66.08238983]
[-116.98990631 63.47766495]
[-131.76202393 60.87294388]
[-146.53413391 58.26822281]
[-161.75083923 64.38246155]
[-174.48553467 54.05000305]
[-171.63784790 37.89999390]
[-156.13725281 32.54618073]
[-143.92941284 43.49610519]
[-129.15730286 46.10082626]
[-114.38517761 48.70555115]
[-99.61306763 51.31027222]
[-84.84095001 53.91499710]
[-70.96346283 48.50531006]
[-58.71651459 58.52143860]
[-43.94440079 61.12615967]
[-39.54299927 59.13194656]
[-33.83699799 59.92531204]
[-28.62460327 64.15302277]
[-13.97187901 67.36202240]
[0.68084604 70.57101440]
[15.33357048 73.78001404]
[29.98629570 76.98900604]
[44.63901901 80.19800568]
[59.29174423 83.40700531]
[73.94447327 86.61599731]
[79.48112488 79.09550476]
[87.10338593 73.69982147]
[96.03649902 70.97737122]
[97.87982178 56.09106445]
[99.72314453 41.20475769]
[92.14166260 24.45508003]
[103.18476105 10.85013771]
[104.72205353 -4.07087898]
[90.97093964 -10.41008377]
[80.02495575 -20.87259483]
[73.07144165 -34.32352066]
[70.86466980 -49.30380249]
[73.64400482 -64.18849182]
[81.10797119 -77.36301422]
[92.44692993 -87.39828491]
[106.43091583 -93.20576477]
[121.54305267 -94.15549469]
[136.14408875 -90.14445496]
[148.65022278 -81.60773468]
[157.70486450 -69.47133636]
[162.32583618 -55.05172348]
[162.01190186 -39.91302490]
[156.79710388 -25.69737816]
[147.24711609 -13.94678593]
[134.39784241 -5.93586731]
[119.64307404 -2.53358650]
[118.10578156 12.38743019]
[125.50679779 22.00445175]
[124.30772400 34.48377609]
[114.60945892 43.04808426]
[112.76612854 57.93439102]
[110.92280579 72.82070160]
[123.31046295 79.59745026]
[131.65455627 91.94168854]
[133.51913452 107.51038361]
[148.51200867 107.04845428]
[162.06736755 98.88984680]
[175.02687073 106.23154449]
[188.58222961 98.07293701]
[201.54173279 105.41462708]
[216.53462219 104.95270538]
[231.52751160 104.49077606]
[246.52040100 104.02885437]
[250.97335815 89.55646515]
[259.88623047 77.31558228]
[272.29223633 68.63398743]
[286.84564209 64.45340729]
[301.96780396 65.22731018]
[316.01837158 70.87175751]
[327.47329712 80.77447510]
[335.08996582 93.86129761]
[338.04223633 108.71265411]
[336.00982666 123.71759033]
[329.21322632 137.24847412]
[318.38967896 147.83758545]
[304.71319580 154.33628845]
[289.66735840 156.03965759]
[274.88421631 152.76292419]
[261.96731567 144.86152649]
[252.31776428 133.19255066]
[246.98233032 119.02173615]
[231.98944092 119.48366547]
[216.99655151 119.94558716]
[202.00366211 120.40751648]
[189.52070618 128.53308105]
[175.48880005 121.22442627]
[163.00584412 129.34999084]
[148.97393799 122.04134369]
[133.98104858 122.50327301]
[123.53904724 133.27194214]
[123.53904724 148.27194214]
[123.53904724 163.27194214]
[123.53904724 178.27194214]
[123.53904724 193.27194214]
[123.53904724 208.27194214]
[123.53904724 223.27194214]
[123.53904724 238.27194214]
[123.53904724 253.27194214]
[123.53904724 268.27194214]
[138.14906311 272.01339722]
[151.36921692 279.27136230]
[162.36848450 289.58963013]
[170.45545959 302.31958008]
[175.12176514 316.66101074]
[176.07408142 331.71240234]
[173.25254822 346.52758789]
[166.83451843 360.17526245]
[157.22344971 371.79757690]
[145.02348328 380.66390991]
[131.00154114 386.21691895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 52]
[34 51]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[65 94]
[66 93]
[67 92]
[69 89]
[70 88]
[97 131]
[98 130]
[100 128]
[102 126]
[103 125]
[104 124]
[105 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
