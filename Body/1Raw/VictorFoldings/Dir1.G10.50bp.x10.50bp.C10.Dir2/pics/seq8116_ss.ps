%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCUCCCUCACCAGGGGGGGGGGAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACxxxxxxxxxxACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCCCCCCCCCCCAACCUCCCUCACCA\
) } def
/len { sequence length } bind def

/coor [
[83.70356750 448.57083130]
[69.26669312 444.33139038]
[55.89316177 437.43609619]
[44.06641006 428.13421631]
[34.21397781 416.76205444]
[26.69202042 403.73068237]
[21.77245331 389.51119995]
[19.63311195 374.61758423]
[20.35133743 359.58825684]
[23.90116119 344.96652222]
[30.15426445 331.28091431]
[38.88459778 319.02621460]
[49.77656555 308.64538574]
[62.43643188 300.51370239]
[76.40654755 294.92510986]
[91.18190765 292.08166504]
[91.18190765 277.08166504]
[91.18190765 262.08166504]
[91.18190765 247.08164978]
[91.18190765 232.08164978]
[91.18190765 217.08164978]
[91.18190765 202.08164978]
[91.18190765 187.08164978]
[91.18190765 172.08164978]
[91.18190765 157.08164978]
[91.18190765 142.08164978]
[91.18190765 127.08164978]
[91.18190765 112.08164978]
[83.45007324 124.93539429]
[73.39808655 136.06901550]
[61.39863968 145.06976318]
[47.89660263 151.60389709]
[33.39256287 155.42918396]
[18.42425728 156.40379333]
[3.54663873 154.49160767]
[-10.68870544 149.76350403]
[-23.75400162 142.39477539]
[-35.16485214 132.65863037]
[-44.49819946 120.91603851]
[-51.40801239 107.60234070]
[-55.63810730 93.21115112]
[-57.03165436 78.27602386]
[-55.53698349 63.35067749]
[-51.20951843 48.98846817]
[-44.20969391 35.72187805]
[-34.79702759 24.04276085]
[-23.32049942 14.38412476]
[-10.20559692 7.10406065]
[4.06144428 2.47247863]
[18.95167160 0.66109377]
[33.91303253 1.73706329]
[48.39083099 5.66049576]
[61.84830475 12.28592968]
[73.78652191 21.36772728]
[83.76286316 32.56917953]
[91.40746307 45.47499466]
[96.43689728 59.60668945]
[98.66470337 74.44033051]
[98.00746155 89.43173981]
[106.29532623 76.92928314]
[114.58319092 64.42683411]
[122.87105560 51.92438507]
[131.15892029 39.42193604]
[119.49163818 29.97634697]
[108.77504730 19.46447182]
[99.10621643 7.98150778]
[90.57270813 -4.36855078]
[83.25180054 -17.47385788]
[77.20979309 -31.21572495]
[72.50141144 -45.46970367]
[69.16928864 -60.10670090]
[67.24361420 -74.99416351]
[66.74181366 -89.99726105]
[67.66843414 -104.98012543]
[70.01509094 -119.80705261]
[73.76052094 -134.34378052]
[78.87081909 -148.45866394]
[85.29969025 -162.02384949]
[92.98892212 -174.91650391]
[101.86887360 -187.01985168]
[111.85912323 -198.22430420]
[122.86920166 -208.42835999]
[134.79939270 -217.53964233]
[147.54165649 -225.47560120]
[160.98059082 -232.16439819]
[174.99447632 -237.54542542]
[189.45642090 -241.56997681]
[204.23544312 -244.20158386]
[219.19769287 -245.41642761]
[234.20767212 -245.20350647]
[249.12944031 -243.56474304]
[263.82785034 -240.51496887]
[278.16983032 -236.08183289]
[292.02545166 -230.30545044]
[305.26922607 -223.23814392]
[317.78125000 -214.94393921]
[329.44821167 -205.49792480]
[340.16439819 -194.98565674]
[349.83282471 -183.50233459]
[358.36587524 -171.15196228]
[365.68630981 -158.04640198]
[371.72781372 -144.30430603]
[376.43566895 -130.05015564]
[379.76727295 -115.41304016]
[381.69241333 -100.52550507]
[382.19366455 -85.52239227]
[381.26647949 -70.53955841]
[378.91928101 -55.71271515]
[375.17333984 -41.17612076]
[370.06253052 -27.06143570]
[363.63314819 -13.49648094]
[355.94345093 -0.60410917]
[347.06304932 11.49892330]
[337.07238770 22.70300484]
[326.06195068 32.90666962]
[314.13143921 42.01750946]
[301.38888550 49.95301056]
[287.94970703 56.64130783]
[273.93560791 62.02183151]
[259.47351074 66.04585266]
[244.69441223 68.67692566]
[229.73211670 69.89122009]
[214.72215271 69.67774963]
[199.80043030 68.03843689]
[185.10212708 64.98813629]
[170.76031494 60.55446625]
[156.90490723 54.77758408]
[143.66137695 47.70980072]
[135.37350464 60.21225357]
[127.08563995 72.71470642]
[118.79777527 85.21715546]
[110.50991058 97.71960449]
[106.18190765 112.08164978]
[106.18190765 127.08164978]
[106.18190765 142.08164978]
[106.18190765 157.08164978]
[106.18190765 172.08164978]
[106.18190765 187.08164978]
[106.18190765 202.08164978]
[106.18190765 217.08164978]
[106.18190765 232.08164978]
[106.18190765 247.08164978]
[106.18190765 262.08166504]
[106.18190765 277.08166504]
[106.18190765 292.08166504]
[120.95726013 294.92510986]
[134.92738342 300.51370239]
[147.58724976 308.64538574]
[158.47921753 319.02621460]
[167.20954895 331.28091431]
[173.46264648 344.96652222]
[177.01246643 359.58825684]
[177.73069763 374.61758423]
[175.59135437 389.51119995]
[170.67178345 403.73068237]
[163.14982605 416.76205444]
[153.29739380 428.13421631]
[141.47064209 437.43609619]
[128.09710693 444.33139038]
[113.66024017 448.57083130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[27 134]
[28 133]
[59 132]
[60 131]
[61 130]
[62 129]
[63 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
