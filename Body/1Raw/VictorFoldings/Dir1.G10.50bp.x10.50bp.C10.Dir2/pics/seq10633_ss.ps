%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUCCUUACGGGGGGGGGGCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUxxxxxxxxxxGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCCCCCCCCCCCACCCUUAC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 404.91284180]
[70.87159729 399.75784302]
[58.28185654 391.47564697]
[47.94191742 380.51287842]
[40.40940475 367.46075439]
[36.09054184 353.02316284]
[35.21823120 337.97869873]
[37.83952332 323.13870239]
[43.81304932 309.30346680]
[52.81666565 297.21911621]
[64.36482239 287.53732300]
[77.83473969 280.78024292]
[92.50000000 277.31228638]
[92.50000000 262.31228638]
[92.50000000 247.31227112]
[92.50000000 232.31227112]
[92.50000000 217.31227112]
[92.50000000 202.31227112]
[92.50000000 187.31227112]
[92.50000000 172.31227112]
[92.50000000 157.31227112]
[92.50000000 142.31227112]
[78.48901367 137.20021057]
[67.06925964 127.60697174]
[59.61638260 114.68816376]
[57.02816391 100.00000000]
[59.61638260 85.31183624]
[67.06925964 72.39302826]
[78.48901367 62.79978561]
[92.50000000 57.68772507]
[92.50000000 42.68772507]
[92.50000000 27.68772507]
[84.76270294 13.88755322]
[92.50000000 1.16028130]
[92.50000000 -13.83971882]
[92.50000000 -28.83971786]
[77.53487396 -29.96094131]
[62.69537735 -32.19738007]
[48.06451035 -35.53652954]
[33.72409058 -39.95971298]
[19.75431442 -45.44219208]
[6.23331165 -51.95331192]
[-6.76330423 -59.45665741]
[-19.16284943 -67.91026306]
[-30.89598083 -77.26686096]
[-41.89707947 -87.47411346]
[-52.10462570 -98.47494507]
[-61.46152878 -110.20782471]
[-69.91546631 -122.60714722]
[-77.41915131 -135.60356140]
[-83.93063354 -149.12438965]
[-89.41348267 -163.09402466]
[-93.83704376 -177.43432617]
[-97.17658234 -192.06510925]
[-99.41341400 -206.90454102]
[-100.53502655 -221.86964417]
[-100.53516388 -236.87670898]
[-99.41381073 -251.84182739]
[-97.17723846 -266.68130493]
[-93.83795929 -281.31213379]
[-89.41464996 -295.65252686]
[-83.93204498 -309.62225342]
[-77.42080688 -323.14318848]
[-69.91735077 -336.13973999]
[-61.46363068 -348.53921509]
[-52.10693359 -360.27227783]
[-41.89958191 -371.27328491]
[-30.89866257 -381.48071289]
[-19.16569710 -390.83752441]
[-6.76630020 -399.29135132]
[6.23018360 -406.79492188]
[19.75107193 -413.30627441]
[33.72074890 -418.78900146]
[48.06109238 -423.21246338]
[62.69190216 -426.55184937]
[77.53135681 -428.78854370]
[92.49646759 -429.91003418]
[107.50353241 -429.91003418]
[122.46864319 -428.78854370]
[137.30810547 -426.55184937]
[151.93890381 -423.21246338]
[166.27925110 -418.78900146]
[180.24893188 -413.30627441]
[193.76982117 -406.79492188]
[206.76629639 -399.29135132]
[219.16569519 -390.83752441]
[230.89866638 -381.48071289]
[241.89958191 -371.27328491]
[252.10693359 -360.27227783]
[261.46362305 -348.53921509]
[269.91735840 -336.13973999]
[277.42080688 -323.14318848]
[283.93203735 -309.62225342]
[289.41464233 -295.65252686]
[293.83795166 -281.31213379]
[297.17724609 -266.68130493]
[299.41381836 -251.84182739]
[300.53515625 -236.87670898]
[300.53503418 -221.86964417]
[299.41342163 -206.90454102]
[297.17657471 -192.06510925]
[293.83703613 -177.43432617]
[289.41348267 -163.09402466]
[283.93063354 -149.12438965]
[277.41915894 -135.60356140]
[269.91546631 -122.60714722]
[261.46151733 -110.20782471]
[252.10462952 -98.47494507]
[241.89707947 -87.47411346]
[230.89598083 -77.26686096]
[219.16285706 -67.91026306]
[206.76330566 -59.45665741]
[193.76669312 -51.95331192]
[180.24568176 -45.44219208]
[166.27590942 -39.95971298]
[151.93548584 -35.53652954]
[137.30462646 -32.19738007]
[122.46512604 -29.96094131]
[107.50000000 -28.83971786]
[107.50000000 -13.83971882]
[107.50000000 1.16028130]
[115.23729706 13.88755322]
[107.50000000 27.68772507]
[107.50000000 42.68772507]
[107.50000000 57.68772507]
[121.51098633 62.79978561]
[132.93074036 72.39302826]
[140.38362122 85.31183624]
[142.97183228 100.00000000]
[140.38362122 114.68816376]
[132.93074036 127.60697174]
[121.51098633 137.20021057]
[107.50000000 142.31227112]
[107.50000000 157.31227112]
[107.50000000 172.31227112]
[107.50000000 187.31227112]
[107.50000000 202.31227112]
[107.50000000 217.31227112]
[107.50000000 232.31227112]
[107.50000000 247.31227112]
[107.50000000 262.31228638]
[107.50000000 277.31228638]
[122.16526031 280.78024292]
[135.63517761 287.53732300]
[147.18333435 297.21911621]
[156.18695068 309.30346680]
[162.16047668 323.13870239]
[164.78176880 337.97869873]
[163.90945435 353.02316284]
[159.59059143 367.46075439]
[152.05809021 380.51287842]
[141.71813965 391.47564697]
[129.12840271 399.75784302]
[114.96779633 404.91284180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[30 125]
[31 124]
[32 123]
[34 121]
[35 120]
[36 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
