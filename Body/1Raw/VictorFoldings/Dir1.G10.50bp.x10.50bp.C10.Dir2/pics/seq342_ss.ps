%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACAGCAGGGGGGGGGGCUUAAACACAUCUCUGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCxxxxxxxxxxACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGCCCCCCCCCCGGCCACAGUA\
) } def
/len { sequence length } bind def

/coor [
[81.51994324 425.08602905]
[67.67401123 419.07000732]
[55.96534729 409.54058838]
[47.26282120 397.20492554]
[42.21221924 382.97839355]
[41.18832779 367.91671753]
[44.26712799 353.13754272]
[51.22014999 339.73760986]
[61.53143311 328.71127319]
[74.43581390 320.87677002]
[88.97570038 316.81546021]
[88.97570038 301.81546021]
[88.97570038 286.81546021]
[88.97570038 271.81546021]
[88.97570038 256.81546021]
[88.97570038 241.81546021]
[88.97570038 226.81546021]
[88.97570038 211.81546021]
[88.97570038 196.81546021]
[88.97570038 181.81546021]
[88.97570038 166.81546021]
[88.97570038 151.81546021]
[72.57855988 137.56460571]
[65.23720551 119.87158203]
[66.58750916 103.29743958]
[74.29004669 91.40688324]
[84.80580902 86.02878571]
[94.39711761 86.98000336]
[87.49011993 73.66484833]
[80.58312225 60.34969330]
[73.67612457 47.03453827]
[63.53009796 48.07389069]
[53.05564499 43.75705719]
[45.10883331 34.15414429]
[32.49770737 26.03260231]
[19.88657761 17.91106033]
[9.42968655 28.73416901]
[-2.93793511 37.30902481]
[-16.74090958 43.30603409]
[-31.44868660 46.49468994]
[-46.49593735 46.75242615]
[-61.30429077 44.06933975]
[-75.30455017 38.54855728]
[-87.95858002 30.40228271]
[-98.77999115 19.94364166]
[-107.35284424 7.57463121]
[-113.34762573 -6.22931337]
[-116.53389740 -20.93760681]
[-116.78919983 -35.98490143]
[-114.10371399 -50.79281616]
[-108.58066559 -64.79218292]
[-100.43234253 -77.44489288]
[-89.97194672 -88.26461029]
[-77.60155487 -96.83546448]
[-63.79663849 -102.82801056]
[-49.08782959 -106.01190186]
[-34.04049301 -106.26477051]
[-19.23301125 -103.57688141]
[-5.23454285 -98.05156708]
[7.41684914 -89.90119934]
[18.23487854 -79.43905640]
[26.80372810 -67.06726837]
[32.79403687 -53.26138687]
[35.97554779 -38.55206299]
[36.22597885 -23.50468826]
[33.53570175 -8.69764137]
[28.00811958 5.29993296]
[40.61924744 13.42147541]
[53.23037720 21.54301643]
[46.05674362 8.36959648]
[38.88311386 -4.80382395]
[27.72657585 -14.83037376]
[22.59036255 -28.92361069]
[24.67936707 -43.77743530]
[33.50353241 -55.90731812]
[46.99281693 -62.46774292]
[61.98279953 -61.91971588]
[74.95702362 -54.39179230]
[82.87187958 -41.64993286]
[83.87065125 -26.68321991]
[77.71876526 -13.00231361]
[76.48196411 1.94661057]
[75.24516296 16.89553452]
[83.49745178 4.36957264]
[91.74974060 -8.15638924]
[100.00202942 -20.68235207]
[108.25431824 -33.20831299]
[108.67978668 -49.60194016]
[123.21702576 -57.19145966]
[136.91136169 -48.16942596]
[135.67524719 -31.81693459]
[120.78028107 -24.95602417]
[112.52799225 -12.43006229]
[104.27570343 0.09589979]
[96.02341461 12.62186146]
[87.77112579 25.14782333]
[86.99127960 40.12753677]
[93.89827728 53.44269562]
[100.80527496 66.75785065]
[107.71228027 80.07300568]
[121.49465942 85.99296570]
[135.90687561 81.83508301]
[150.31909180 77.67719269]
[164.73130798 73.51930237]
[175.70797729 61.33552170]
[191.68927002 65.01389313]
[196.23500061 80.77043152]
[184.66889954 92.39615631]
[168.88919067 87.93151855]
[154.47697449 92.08940887]
[140.06475830 96.24729919]
[125.65254211 100.40518188]
[125.02910614 107.87922668]
[139.97718811 109.12609863]
[154.57902527 105.69291687]
[162.35621643 118.51926422]
[152.56079102 129.87925720]
[138.73031616 124.07418823]
[123.78223419 122.82731628]
[123.15879822 130.30136108]
[136.68298340 136.78952026]
[150.20718384 143.27769470]
[167.10325623 144.67735291]
[170.43557739 161.30059814]
[155.38446045 169.10446167]
[143.71900940 156.80187988]
[130.19482422 150.31372070]
[116.67063141 143.82554626]
[103.97570038 151.81546021]
[103.97570038 166.81546021]
[103.97570038 181.81546021]
[103.97570038 196.81546021]
[103.97570038 211.81546021]
[103.97570038 226.81546021]
[103.97570038 241.81546021]
[103.97570038 256.81546021]
[103.97570038 271.81546021]
[103.97570038 286.81546021]
[103.97570038 301.81546021]
[103.97570038 316.81546021]
[118.51558685 320.87677002]
[131.41996765 328.71127319]
[141.73124695 339.73760986]
[148.68428040 353.13754272]
[151.76307678 367.91671753]
[150.73918152 382.97839355]
[145.68858337 397.20492554]
[136.98605347 409.54058838]
[125.27739716 419.07000732]
[111.43145752 425.08602905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[28 100]
[29 99]
[30 98]
[31 97]
[34 69]
[35 68]
[36 67]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[101 112]
[102 111]
[103 110]
[104 109]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
