%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCAAAGAGGGGGGGGGGGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUxxxxxxxxxxGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUCCCCCCCCCCGUCCAAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[86.16088867 425.03759766]
[74.07086945 415.99688721]
[64.86923981 404.02893066]
[59.23882294 390.02172852]
[57.59743881 375.01480103]
[60.06688309 360.12170410]
[66.46390533 346.44760132]
[76.31381226 335.00723267]
[88.88566589 326.64953613]
[103.24655914 321.99472046]
[102.63072968 307.00738525]
[102.01490784 292.02001953]
[101.39907837 277.03265381]
[100.78325653 262.04531860]
[100.16743469 247.05795288]
[99.55160522 232.07060242]
[98.93578339 217.08325195]
[98.31995392 202.09590149]
[97.70413208 187.10855103]
[96.93447113 172.12831116]
[96.01105499 157.15675354]
[81.35742950 154.17805481]
[67.97360229 147.50912476]
[56.77118683 137.60420227]
[48.51321030 125.13795471]
[43.76214981 110.95949554]
[42.84160995 96.03454590]
[45.81429291 81.37969971]
[52.47772217 67.99313354]
[62.37803268 56.78664780]
[74.84088135 48.52354813]
[89.01739502 43.76665878]
[88.09397888 28.79510880]
[87.17057037 13.82355881]
[79.66438293 26.81036758]
[67.82421112 36.01962280]
[53.38942719 40.09845734]
[38.48054123 38.44767380]
[25.28772163 31.30977631]
[15.74904728 19.73334885]
[11.26577854 5.41901064]
[12.49652576 -9.53041267]
[19.26048660 -22.91879654]
[30.56401062 -32.77934265]
[44.74657059 -37.66349411]
[59.72470093 -36.85375977]
[73.29805756 -30.46908951]
[83.47266388 -19.44741249]
[88.75372314 -5.40854836]
[92.11298370 -20.02755547]
[95.47223663 -34.64656448]
[98.83149719 -49.26557159]
[102.19075775 -63.88457870]
[87.99778748 -68.78270721]
[74.40586853 -75.16173553]
[61.56901932 -82.94937134]
[49.63268280 -92.05738831]
[38.73210907 -102.38258362]
[28.99080849 -113.80795288]
[20.51915932 -126.20405579]
[13.41315079 -139.43041992]
[7.75329971 -153.33718872]
[3.60373688 -167.76678467]
[1.01147950 -182.55570984]
[0.00590025 -197.53639221]
[0.59839296 -212.53909302]
[2.78224421 -227.39381409]
[6.53270912 -241.93225098]
[11.80729294 -255.98966980]
[18.54622841 -269.40676880]
[26.67316055 -282.03155518]
[36.09600449 -293.72094727]
[46.70799255 -304.34252930]
[58.38888168 -313.77593994]
[71.00631714 -321.91424561]
[84.41733551 -328.66531372]
[98.46997833 -333.95257568]
[113.00502777 -337.71615601]
[127.85777283 -339.91342163]
[142.85993958 -340.51947021]
[157.84152222 -339.52743530]
[172.63278198 -336.94851685]
[187.06611633 -332.81198120]
[200.97798157 -327.16470337]
[214.21076965 -320.07064819]
[226.61450195 -311.61016846]
[238.04867554 -301.87921143]
[248.38369751 -290.98794556]
[257.50250244 -279.05984497]
[265.30172729 -266.23004150]
[271.69302368 -252.64389038]
[276.60397339 -238.45533752]
[279.97891235 -223.82518005]
[281.77960205 -208.91914368]
[281.98568726 -193.90617371]
[280.59478760 -178.95632935]
[277.62265015 -164.23904419]
[273.10299683 -149.92106628]
[267.08700562 -136.16461182]
[259.64285278 -123.12556458]
[250.85488892 -110.95166779]
[240.82269287 -99.78085327]
[229.65991211 -89.73970795]
[217.49305725 -80.94200134]
[204.45997620 -73.48741150]
[190.70834351 -67.46040344]
[176.39398193 -62.92928314]
[161.67907715 -59.94537735]
[146.73036194 -58.54249954]
[131.71722412 -58.73654556]
[116.80976105 -60.52531815]
[113.45050812 -45.90631104]
[110.09124756 -31.28730392]
[106.73198700 -16.66829681]
[103.37272644 -2.04928970]
[102.14212036 12.90014458]
[103.06552887 27.87169456]
[103.98894501 42.84324646]
[118.64257050 45.82195282]
[132.02639771 52.49088287]
[143.22880554 62.39579773]
[151.48678589 74.86204529]
[156.23785400 89.04050446]
[157.15838623 103.96545410]
[154.18569946 118.62030029]
[147.52227783 132.00686646]
[137.62196350 143.21334839]
[125.15911865 151.47645569]
[110.98260498 156.23333740]
[111.90602112 171.20489502]
[115.57706451 179.63810730]
[112.69148254 186.49272156]
[113.30731201 201.48007202]
[113.92313385 216.46742249]
[114.53895569 231.45478821]
[115.15478516 246.44213867]
[115.77060699 261.42947388]
[116.38643646 276.41683960]
[117.00225830 291.40420532]
[117.61808777 306.39154053]
[118.23390961 321.37890625]
[132.92828369 324.83984375]
[146.14341736 332.13796997]
[156.89869690 342.73165894]
[164.39599609 355.83483887]
[168.07896423 370.47515869]
[167.67428589 385.56616211]
[163.21202087 399.98803711]
[155.02326965 412.67059326]
[143.71571350 422.67266846]
[130.12843323 429.25207520]
[115.26970673 431.92056274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 130]
[21 129]
[32 118]
[33 117]
[34 116]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
