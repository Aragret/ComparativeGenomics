%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAAUGACCGGGGGGGGGGUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUxxxxxxxxxxUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUCCCCCCCCCCUCCUAAUUACC\
) } def
/len { sequence length } bind def

/coor [
[104.70605469 382.90530396]
[90.68410492 377.35229492]
[78.48414612 368.48596191]
[68.87307739 356.86364746]
[62.45505142 343.21594238]
[59.63351822 328.40075684]
[60.58583069 313.34939575]
[65.25213623 299.00796509]
[73.33910370 286.27801514]
[84.33837891 275.95971680]
[97.55854034 268.70175171]
[112.16854858 264.96032715]
[112.16854858 249.96032715]
[112.16854858 234.96032715]
[112.16854858 219.96032715]
[112.16854858 204.96032715]
[112.16854858 189.96032715]
[112.16854858 174.96032715]
[112.16854858 159.96032715]
[112.16854858 144.96032715]
[112.16854858 129.96032715]
[105.95939636 125.75361633]
[92.46401978 132.30151367]
[93.54107666 117.34020233]
[87.33192444 113.13349915]
[73.40120697 118.69543457]
[59.47048950 124.25737762]
[47.00241470 135.74578857]
[32.51147461 126.94527435]
[36.95656204 110.58441925]
[53.90855026 110.32666016]
[67.83927155 104.76471710]
[81.76998138 99.20278168]
[91.41179657 87.71212006]
[94.47019196 73.02722168]
[97.52858734 58.34232330]
[97.83657074 43.34548187]
[95.38363647 28.54740524]
[92.93070984 13.74932575]
[90.47778320 -1.04875338]
[88.02485657 -15.84683228]
[73.04544830 -14.85479355]
[58.04093170 -15.33578968]
[43.15581894 -17.28518677]
[28.53345871 -20.68421364]
[14.31467819 -25.50013161]
[0.63641471 -31.68655968]
[-12.36959839 -39.18392181]
[-24.57810402 -47.92000580]
[-35.87152100 -57.81068420]
[-46.14109039 -68.76069641]
[-55.28790665 -80.66458130]
[-63.22387314 -93.40770721]
[-69.87256622 -106.86734009]
[-75.16995239 -120.91384888]
[-79.06501007 -135.41195679]
[-81.52023315 -150.22204590]
[-82.51197815 -165.20147705]
[-82.03067780 -180.20597839]
[-80.08098602 -195.09106445]
[-76.68166351 -209.71334839]
[-71.86546326 -223.93203735]
[-65.67876434 -237.61016846]
[-58.18114090 -250.61604309]
[-49.44480896 -262.82437134]
[-39.55390930 -274.11758423]
[-28.60369110 -284.38693237]
[-16.69961929 -293.53350830]
[-3.95633674 -301.46923828]
[9.50342751 -308.11764526]
[23.55004501 -313.41476440]
[38.04823685 -317.30953979]
[52.85837173 -319.76446533]
[67.83782196 -320.75588989]
[82.84231567 -320.27429199]
[97.72734833 -318.32431030]
[112.34957886 -314.92468262]
[126.56816101 -310.10821533]
[140.24618530 -303.92123413]
[153.25189209 -296.42333984]
[165.46005249 -287.68676758]
[176.75306702 -277.79565430]
[187.02220154 -266.84521484]
[196.16853333 -254.94097900]
[204.10400391 -242.19752502]
[210.75215149 -228.73764038]
[216.04898071 -214.69090271]
[219.94346619 -200.19264221]
[222.39808655 -185.38246155]
[223.38923645 -170.40298462]
[222.90733337 -155.39849854]
[220.95704651 -140.51350403]
[217.55714417 -125.89134979]
[212.74037170 -111.67285919]
[206.55311584 -97.99496460]
[199.05497742 -84.98940277]
[190.31816101 -72.78142548]
[180.42680359 -61.48859787]
[169.47618103 -51.21968460]
[157.57174683 -42.07358551]
[144.82814026 -34.13838196]
[131.36811829 -27.49049568]
[117.32128143 -22.19395065]
[102.82293701 -18.29976082]
[105.27586365 -3.50168157]
[107.72879028 11.29639721]
[110.18171692 26.09447670]
[112.63464355 40.89255524]
[118.28702545 26.99829102]
[127.89035797 15.47543907]
[140.53834534 7.41142654]
[155.03739929 3.56726480]
[170.01921082 4.30573320]
[184.06993103 9.55714130]
[195.86357117 18.82590675]
[204.28715515 31.23732185]
[208.54573059 45.62010574]
[208.23741150 60.61693954]
[203.39131165 74.81254578]
[194.46473694 86.86726379]
[182.30010986 95.64348602]
[168.04544067 100.31297302]
[153.04592896 100.43506622]
[138.71713257 95.99824524]
[126.41124725 87.42121887]
[117.28962708 75.51340485]
[112.21348572 61.40071869]
[109.15509033 76.08561707]
[106.09669495 90.77051544]
[119.36838531 92.26529694]
[129.86277771 106.90220642]
[127.16854858 129.96032715]
[127.16854858 144.96032715]
[127.16854858 159.96032715]
[127.16854858 174.96032715]
[127.16854858 189.96032715]
[127.16854858 204.96032715]
[127.16854858 219.96032715]
[127.16854858 234.96032715]
[127.16854858 249.96032715]
[127.16854858 264.96032715]
[141.77856445 268.70175171]
[154.99871826 275.95971680]
[165.99800110 286.27801514]
[174.08496094 299.00796509]
[178.75126648 313.34939575]
[179.70358276 328.40075684]
[176.88204956 343.21594238]
[170.46401978 356.86364746]
[160.85295105 368.48596191]
[148.65299988 377.35229492]
[134.63104248 382.90530396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 33]
[26 32]
[27 31]
[34 129]
[35 128]
[36 127]
[37 108]
[38 107]
[39 106]
[40 105]
[41 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
