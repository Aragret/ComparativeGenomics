%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCCCCCAGGGGGGGGGGUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCxxxxxxxxxxUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCCCCUACCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[80.49133301 357.10531616]
[68.60706329 347.83023071]
[59.28835297 335.98010254]
[53.07698822 322.24395752]
[50.33408356 307.42031860]
[51.21911240 292.37106323]
[55.68062210 277.97113037]
[63.45921707 265.05767822]
[74.10266876 254.38151550]
[86.99217987 246.56333923]
[101.37836456 242.05766296]
[100.44274139 227.08686829]
[99.50711060 212.11608887]
[98.57147980 197.14529419]
[97.63585663 182.17449951]
[96.70022583 167.20370483]
[95.76459503 152.23291016]
[94.82896423 137.26213074]
[93.89334106 122.29133606]
[92.95771027 107.32054138]
[89.33159637 100.05863190]
[92.16164398 92.02917480]
[91.53766632 77.04216003]
[76.53571320 76.76015472]
[61.57815170 75.57286835]
[46.71957397 73.48462677]
[32.01418686 70.50305939]
[17.51565361 66.63903809]
[3.27687621 61.90665817]
[-10.65018845 56.32320023]
[-24.21472168 49.90902710]
[-37.36722565 42.68754959]
[-50.05971527 34.68511963]
[-62.24586868 25.93092918]
[-73.88122559 16.45693016]
[-84.92331696 6.29768658]
[-95.33187103 -4.50972843]
[-105.06889343 -15.92588043]
[-114.09886169 -27.90911293]
[-122.38882446 -40.41569901]
[-129.90852356 -53.40000534]
[-136.63053894 -66.81465149]
[-142.53031921 -80.61068726]
[-147.58636475 -94.73777771]
[-151.78019714 -109.14437103]
[-155.09652710 -123.77789307]
[-157.52326965 -138.58496094]
[-159.05154419 -153.51153564]
[-159.67578125 -168.50314331]
[-159.39370728 -183.50509644]
[-158.20634460 -198.46264648]
[-156.11804199 -213.32121277]
[-153.13639832 -228.02659607]
[-149.27230835 -242.52510071]
[-144.53987122 -256.76385498]
[-138.95634460 -270.69088745]
[-132.54209900 -284.25540161]
[-125.32056427 -297.40786743]
[-117.31807709 -310.10031128]
[-108.56382751 -322.28643799]
[-99.08977509 -333.92175293]
[-88.93048096 -344.96380615]
[-78.12301636 -355.37231445]
[-66.70682526 -365.10928345]
[-54.72354889 -374.13919067]
[-42.21692276 -382.42907715]
[-29.23258209 -389.94873047]
[-15.81790543 -396.67068481]
[-2.02184033 -402.57040405]
[12.10527229 -407.62637329]
[26.51188278 -411.82012939]
[41.14542389 -415.13641357]
[55.95249939 -417.56307983]
[70.87907410 -419.09127808]
[85.87068939 -419.71545410]
[100.87264252 -419.43328857]
[115.83019257 -418.24588013]
[130.68875122 -416.15750122]
[145.39410400 -413.17578125]
[159.89260864 -409.31164551]
[174.13134766 -404.57913208]
[188.05834961 -398.99554443]
[201.62283325 -392.58123779]
[214.77526855 -385.35964966]
[227.46768188 -377.35708618]
[239.65374756 -368.60278320]
[251.28901672 -359.12869263]
[262.33102417 -348.96932983]
[272.73947144 -338.16183472]
[282.47637939 -326.74557495]
[291.50625610 -314.76226807]
[299.79608154 -302.25558472]
[307.31567383 -289.27120972]
[314.03756714 -275.85650635]
[319.93722534 -262.06042480]
[324.99313354 -247.93328857]
[329.18682861 -233.52665710]
[332.50302124 -218.89309692]
[334.92962646 -204.08601379]
[336.45776367 -189.15942383]
[337.08184814 -174.16781616]
[336.79965210 -159.16586304]
[335.61215210 -144.20831299]
[333.52371216 -129.34976196]
[330.54193115 -114.64442444]
[326.67770386 -100.14594269]
[321.94512939 -85.90723419]
[316.36148071 -71.98024750]
[309.94711304 -58.41580200]
[302.72546387 -45.26339722]
[294.72283936 -32.57102203]
[285.96847534 -20.38498878]
[276.49432373 -8.74976730]
[266.33493042 2.29218984]
[255.52737427 12.70059013]
[244.11108398 22.43745613]
[232.12771606 31.46725464]
[219.62101746 39.75704193]
[206.63661194 47.27656555]
[193.22186279 53.99839020]
[179.42575073 59.89798355]
[165.29858398 64.95382690]
[150.89193726 69.14746094]
[136.25836182 72.46359253]
[121.45127106 74.89012146]
[106.52468109 76.41818237]
[107.14865875 91.40519714]
[107.92850494 106.38491821]
[108.86412811 121.35570526]
[109.79975891 136.32649231]
[110.73538971 151.29728699]
[111.67101288 166.26808167]
[112.60664368 181.23887634]
[113.54227448 196.20967102]
[114.47789764 211.18045044]
[115.41352844 226.15124512]
[116.34915924 241.12203979]
[131.18438721 243.80145264]
[144.94702148 249.95396423]
[156.83691406 259.22186279]
[166.16281128 271.06631470]
[172.38250732 284.79870605]
[175.13438416 299.62069702]
[174.25848389 314.67047119]
[169.80570984 329.07312012]
[162.03494263 341.99127197]
[151.39796448 352.67388916]
[138.51319885 360.49987793]
[124.12974548 365.01425171]
[109.08383942 365.95458984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[22 127]
[23 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
