%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCAAAGGGGGGGGGGGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAxxxxxxxxxxAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGCCCCCCCCCCAAACCGCAAA\
) } def
/len { sequence length } bind def

/coor [
[103.13831329 393.69198608]
[89.91811371 386.41952515]
[79.03131104 375.97250366]
[71.22017670 363.06326294]
[67.01729584 348.57196045]
[66.70922852 333.48660278]
[70.31696320 318.83578491]
[77.59454346 305.61840820]
[88.04574585 294.73562622]
[100.95800781 286.92947388]
[115.45094299 282.73220825]
[115.13889313 267.73544312]
[114.82683563 252.73869324]
[114.51477814 237.74194336]
[114.20272064 222.74517822]
[113.89066315 207.74842834]
[113.57860565 192.75167847]
[113.26655579 177.75492859]
[112.95449829 162.75816345]
[104.95409393 150.19461060]
[112.40262604 136.23646545]
[112.09056854 121.23971558]
[96.75792694 129.38720703]
[76.67863464 125.68244171]
[62.55383301 130.73120117]
[58.32001114 145.65950012]
[46.09936523 155.22169495]
[30.59097672 155.74090576]
[17.75814247 147.01748657]
[12.53534698 132.40577698]
[16.93086243 117.52427673]
[29.25452232 108.09522247]
[44.76762772 107.74427795]
[57.50507355 116.60639954]
[71.62987518 111.55764008]
[72.56368256 104.11599731]
[60.60817337 95.05698395]
[74.43129730 89.23271942]
[75.36510468 81.79107666]
[62.92566299 73.40893555]
[50.48622513 65.02679443]
[38.04678345 56.64464951]
[25.43565559 48.52310944]
[12.65829754 40.66568375]
[-0.11905960 32.80825806]
[-12.89641666 24.95083046]
[-26.75473213 31.72952080]
[-42.07525635 29.91705322]
[-53.96926880 20.09177780]
[-58.64143372 5.38890648]
[-54.60087585 -9.49992943]
[-43.13692474 -19.82375717]
[-27.90768814 -22.28827858]
[-13.77275658 -16.10707474]
[-5.24253702 -3.25254726]
[-5.03899097 12.17347336]
[7.73836613 20.03089905]
[20.51572418 27.88832474]
[33.29307938 35.74575043]
[38.12215424 35.51005936]
[43.13863754 38.35017014]
[46.42892456 44.20521164]
[58.86836624 52.58735275]
[71.30780792 60.96949768]
[83.74724579 69.35163879]
[112.90956116 73.40184784]
[124.04729462 95.63708496]
[135.74691772 86.24992371]
[147.44653320 76.86275482]
[140.36515808 63.59286118]
[135.84400940 49.25146866]
[134.03567505 34.32745743]
[135.00027466 19.32925797]
[138.70350647 4.76757288]
[145.01782227 -8.86203098]
[153.72685242 -21.09598923]
[164.53279114 -31.51850319]
[177.06661987 -39.77566528]
[190.90065002 -45.58748627]
[205.56318665 -48.75738525]
[220.55453491 -49.17884064]
[235.36412048 -46.83896255]
[249.48779297 -41.81888580]
[262.44503784 -34.29095840]
[273.79528809 -24.51283264]
[285.49493408 -33.89999390]
[297.19454956 -43.28715515]
[308.89416504 -52.67431641]
[313.66937256 -60.53873825]
[320.93624878 -62.13202286]
[332.82861328 -71.27375793]
[344.72100830 -80.41548920]
[356.61337280 -89.55722809]
[356.05914307 -105.06439972]
[364.75354004 -117.91690826]
[379.35342407 -123.17269135]
[394.24481201 -118.81080627]
[403.70169067 -106.50847626]
[404.08764648 -90.99620056]
[395.25433350 -78.23876953]
[380.59829712 -73.14167023]
[365.75509644 -77.66484833]
[353.86273193 -68.52310944]
[341.97033691 -59.38137817]
[330.07797241 -50.23964310]
[318.28134155 -40.97469330]
[306.58169556 -31.58753204]
[294.88208008 -22.20037079]
[283.18246460 -12.81320858]
[290.26834106 0.38642916]
[294.80923462 14.66718483]
[296.64910889 29.54314423]
[295.72381592 44.50785828]
[292.06341553 59.05158615]
[285.79116821 72.67864990]
[277.11935425 84.92434692]
[266.34207153 95.37078094]
[253.82537842 103.66111755]
[239.99475098 109.51180267]
[225.32061768 112.72222137]
[210.30244446 113.18160248]
[195.45166016 110.87284851]
[181.27424622 105.87312317]
[168.25352478 98.35134125]
[156.83369446 88.56238556]
[145.13407898 97.94954681]
[133.43444824 107.33670807]
[127.08732605 120.92765808]
[127.39937592 135.92440796]
[135.42210388 149.56063843]
[127.95124817 162.44610596]
[128.26330566 177.44287109]
[128.57536316 192.43962097]
[128.88742065 207.43637085]
[129.19947815 222.43312073]
[129.51153564 237.42988586]
[129.82359314 252.42663574]
[130.13565063 267.42340088]
[130.44769287 282.42013550]
[145.10269165 286.01092529]
[158.32850647 293.27316284]
[169.22337341 303.71176147]
[177.04446411 316.61495972]
[181.25852966 331.10302734]
[181.57826233 346.18814087]
[177.98182678 360.84173584]
[170.71446228 374.06475830]
[160.27166748 384.95559692]
[147.36543274 392.77169800]
[132.87574768 396.98016357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[24 35]
[25 34]
[39 65]
[40 64]
[41 63]
[42 62]
[43 59]
[44 58]
[45 57]
[46 56]
[67 127]
[68 126]
[69 125]
[85 109]
[86 108]
[87 107]
[88 106]
[90 105]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
