%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCCCCCAGGGGGGGGGGUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCxxxxxxxxxxCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCCCCCCCCCCCUAGCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[83.46918488 368.75497437]
[70.24898529 361.48251343]
[59.36218262 351.03549194]
[51.55105209 338.12625122]
[47.34817123 323.63494873]
[47.04010010 308.54959106]
[50.64783859 293.89877319]
[57.92541122 280.68139648]
[68.37661743 269.79861450]
[81.28887939 261.99249268]
[95.78182220 257.79519653]
[95.46976471 242.79844666]
[95.15770721 227.80168152]
[94.84564972 212.80493164]
[94.53359222 197.80818176]
[94.22153473 182.81143188]
[93.90948486 167.81466675]
[93.59742737 152.81791687]
[93.28536987 137.82116699]
[92.97331238 122.82440948]
[92.66125488 107.82765961]
[90.02239227 93.06159973]
[85.12084198 78.88504028]
[80.21929169 64.70848083]
[75.31774139 50.53192520]
[60.81475449 54.38754272]
[46.06901169 57.17422104]
[31.15919685 58.87708664]
[16.16485214 59.48706055]
[1.16598487 59.00088120]
[-13.75738144 57.42115021]
[-28.52562141 54.75628662]
[-43.05994034 51.02051926]
[-57.28279114 46.23377228]
[-71.11828613 40.42158890]
[-84.49260712 33.61497879]
[-97.33439636 25.85025978]
[-109.57513428 17.16885948]
[-121.14951324 7.61709738]
[-131.99577332 -2.75406241]
[-142.05606079 -13.88928509]
[-151.27667236 -25.72916031]
[-159.60842896 -38.21051407]
[-167.00688171 -51.26675415]
[-173.43254089 -64.82821655]
[-178.85113525 -78.82254791]
[-183.23374939 -93.17507935]
[-186.55699158 -107.80922699]
[-188.80313110 -122.64692688]
[-189.96020508 -137.60899353]
[-190.02201843 -152.61561584]
[-188.98825073 -167.58671570]
[-186.86441040 -182.44241333]
[-183.66184998 -197.10343933]
[-179.39762878 -211.49159241]
[-174.09449768 -225.53009033]
[-167.78077698 -239.14402771]
[-160.49014282 -252.26077271]
[-152.26148987 -264.81033325]
[-143.13873291 -276.72576904]
[-133.17053223 -287.94351196]
[-122.41007233 -298.40365601]
[-110.91477203 -308.05044556]
[-98.74597168 -316.83239746]
[-85.96858215 -324.70263672]
[-72.65078735 -331.61920166]
[-58.86364746 -337.54516602]
[-44.68071365 -342.44894409]
[-30.17766380 -346.30432129]
[-15.43187809 -349.09075928]
[-0.52203280 -350.79336548]
[14.47232056 -351.40310669]
[29.47117996 -350.91665649]
[44.39451981 -349.33670044]
[59.16271591 -346.67160034]
[73.69697571 -342.93557739]
[87.91974640 -338.14859009]
[101.75514984 -332.33618164]
[115.12935638 -325.52935791]
[127.97101593 -317.76443481]
[140.21160889 -309.08282471]
[151.78584290 -299.53088379]
[162.63192749 -289.15954590]
[172.69203186 -278.02413940]
[181.91244507 -266.18411255]
[190.24400330 -253.70263672]
[197.64224243 -240.64627075]
[204.06767273 -227.08470154]
[209.48603821 -213.09028625]
[213.86840820 -198.73768616]
[217.19140625 -184.10346985]
[219.43731689 -169.26573181]
[220.59414673 -154.30364990]
[220.65571594 -139.29702759]
[219.62168884 -124.32595062]
[217.49761963 -109.47028351]
[214.29479980 -94.80930328]
[210.03034973 -80.42122650]
[204.72698975 -66.38282013]
[198.41305542 -52.76898193]
[191.12219238 -39.65235519]
[182.89334106 -27.10292244]
[173.77038574 -15.18763828]
[163.80198669 -3.97007823]
[153.04136658 6.48990726]
[141.54591370 16.13650894]
[129.37695312 24.91825676]
[116.59944916 32.78829575]
[103.28153992 39.70463562]
[89.49430084 45.63037491]
[94.39585114 59.80693436]
[99.29740143 73.98348999]
[104.19895172 88.16004944]
[107.81342316 73.60204315]
[116.35983276 61.27488327]
[128.72521973 52.78387833]
[143.29930115 49.23476791]
[158.18415833 51.08973694]
[171.44142151 58.10722351]
[181.34465027 69.37336731]
[186.60420227 83.42104340]
[186.53514099 98.42089081]
[181.14646912 112.41954041]
[171.13992310 123.59401703]
[157.81860352 130.48913574]
[142.91729736 132.20697021]
[128.37651062 128.52381897]
[116.08983612 119.91930389]
[107.65801239 107.51560211]
[107.97006989 122.51235199]
[108.28211975 137.50910950]
[108.59417725 152.50585938]
[108.90623474 167.50260925]
[109.21829224 182.49937439]
[109.53034973 197.49612427]
[109.84240723 212.49287415]
[110.15445709 227.48962402]
[110.46651459 242.48638916]
[110.77857208 257.48312378]
[125.43356323 261.07391357]
[138.65937805 268.33615112]
[149.55424500 278.77474976]
[157.37533569 291.67797852]
[161.58941650 306.16604614]
[161.90913391 321.25112915]
[158.31269836 335.90472412]
[151.04533386 349.12774658]
[140.60253906 360.01858521]
[127.69631195 367.83468628]
[113.20661926 372.04318237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 113]
[23 112]
[24 111]
[25 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
