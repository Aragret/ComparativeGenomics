%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAGCCCUGGGGGGGGGGCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCxxxxxxxxxxGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGCCCCCCCCCCUCACAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[88.05625916 510.60000610]
[74.21031952 504.58398438]
[62.50165939 495.05456543]
[53.79913712 482.71890259]
[48.74853516 468.49237061]
[47.72464371 453.43069458]
[50.80344009 438.65151978]
[57.75646210 425.25158691]
[68.06774902 414.22528076]
[80.97212982 406.39074707]
[95.51201630 402.32943726]
[95.51201630 387.32943726]
[95.51201630 372.32943726]
[95.51201630 357.32943726]
[95.51201630 342.32943726]
[95.51201630 327.32943726]
[95.51201630 312.32943726]
[95.51201630 297.32943726]
[95.51201630 282.32943726]
[95.51201630 267.32943726]
[95.51201630 252.32945251]
[95.35597992 237.33026123]
[95.04392242 222.33351135]
[94.73186493 207.33674622]
[94.41980743 192.33999634]
[86.41941071 179.77644348]
[93.86794281 165.81829834]
[93.55588531 150.82153320]
[93.24382782 135.82478333]
[92.93177032 120.82803345]
[78.44696808 112.46752167]
[72.72192383 94.61876678]
[57.72922897 95.08681488]
[42.73653030 95.55485535]
[30.74812317 106.21588898]
[14.96346188 103.34813690]
[7.49118853 89.15148926]
[14.06339264 74.51640320]
[29.63844109 70.66966248]
[42.26848984 80.56215668]
[57.26118469 80.09411621]
[72.25388336 79.62607574]
[83.55288696 69.76035309]
[86.03800201 54.96764374]
[88.52312469 40.17493439]
[91.00823975 25.38222885]
[93.49336243 10.58952141]
[95.97847748 -4.20318556]
[98.46360016 -18.99589348]
[90.67478943 -25.02140427]
[85.67749023 -33.43903732]
[84.13531494 -43.04712677]
[86.22216797 -52.49221039]
[91.60378265 -60.45967484]
[99.49037933 -65.85672760]
[108.75238800 -67.96221161]
[112.45854950 -82.49714661]
[116.16471100 -97.03208160]
[119.87087250 -111.56701660]
[112.06484222 -125.04676819]
[116.03047180 -139.73446655]
[128.92945862 -147.09324646]
[118.19782257 -136.61317444]
[105.37259674 -128.83413696]
[91.11946869 -124.15991211]
[76.17826080 -122.83312988]
[61.32450867 -124.92265320]
[47.32921219 -130.32002258]
[34.91880035 -138.74508667]
[24.73744965 -149.76052856]
[17.31362915 -162.79460144]
[13.03267670 -177.17074585]
[12.11679935 -192.14276123]
[14.61353779 -206.93350220]
[20.39329529 -220.77526855]
[29.15606880 -232.94958496]
[40.44702148 -242.82450867]
[53.68008804 -249.88751221]
[68.16839600 -253.77197266]
[83.15991211 -254.27624512]
[97.87650299 -251.37417603]
[111.55428314 -245.21640015]
[123.48330688 -236.12252808]
[133.04437256 -224.56459045]
[139.74122620 -211.14251709]
[143.22625732 -196.55297852]
[143.31855774 -181.55326843]
[140.01269531 -166.92005920]
[150.45249939 -177.69085693]
[160.89231873 -188.46166992]
[171.33212280 -199.23248291]
[172.52050781 -215.23146057]
[185.85066223 -224.15818787]
[201.09684753 -219.16484070]
[206.56347656 -204.08189392]
[198.05703735 -190.47967529]
[182.10293579 -188.79266357]
[171.66311646 -178.02186584]
[161.22331238 -167.25105286]
[150.78349304 -156.48023987]
[143.46438599 -143.38708496]
[151.26484680 -130.75028992]
[147.71333313 -115.95700836]
[134.40580750 -107.86085510]
[130.69964600 -93.32592010]
[126.99348450 -78.79098511]
[123.28732300 -64.25605011]
[135.21287537 -47.72372437]
[131.13864136 -27.45421028]
[113.25630188 -16.51077461]
[110.77118683 -1.71806693]
[108.28607178 13.07464027]
[105.80094910 27.86734772]
[103.31583405 42.66005325]
[100.83071136 57.45276260]
[98.34559631 72.24546814]
[115.91716003 78.99888611]
[124.33044434 94.70831299]
[120.64449310 111.11599731]
[107.92852783 120.51597595]
[108.24057770 135.51272583]
[108.55263519 150.50949097]
[108.86469269 165.50624084]
[116.88741302 179.14245605]
[109.41656494 192.02793884]
[109.72862244 207.02468872]
[110.04067993 222.02145386]
[110.35272980 237.01820374]
[113.67759705 245.59707642]
[110.51201630 252.32945251]
[110.51201630 267.32943726]
[110.51201630 282.32943726]
[110.51201630 297.32943726]
[110.51201630 312.32943726]
[110.51201630 327.32943726]
[110.51201630 342.32943726]
[110.51201630 357.32943726]
[110.51201630 372.32943726]
[110.51201630 387.32943726]
[110.51201630 402.32943726]
[125.05190277 406.39074707]
[137.95628357 414.22528076]
[148.26756287 425.25158691]
[155.22059631 438.65151978]
[158.29939270 453.43069458]
[157.27549744 468.49237061]
[152.22489929 482.71890259]
[143.52236938 495.05456543]
[131.81370544 504.58398438]
[117.96777344 510.60000610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[23 127]
[24 126]
[25 125]
[27 123]
[28 122]
[29 121]
[30 120]
[32 42]
[33 41]
[34 40]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[48 111]
[49 110]
[56 107]
[57 106]
[58 105]
[59 104]
[62 101]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
