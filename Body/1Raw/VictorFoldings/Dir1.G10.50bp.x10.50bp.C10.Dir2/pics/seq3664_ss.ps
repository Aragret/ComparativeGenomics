%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCAACCUGGGGGGGGGGAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCxxxxxxxxxxUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGCCCCCCCCCCACCGCAACCU\
) } def
/len { sequence length } bind def

/coor [
[83.63330078 354.57748413]
[69.14361572 350.36898804]
[56.23738098 342.55288696]
[45.79458237 331.66204834]
[38.52721786 318.43905640]
[34.93078995 303.78543091]
[35.25051498 288.70034790]
[39.46458435 274.21228027]
[47.28568268 261.30905151]
[58.18054962 250.87046814]
[71.40635681 243.60821533]
[86.06134796 240.01744080]
[86.37340546 225.02069092]
[86.68546295 210.02394104]
[86.99752045 195.02717590]
[87.30957794 180.03042603]
[87.62162781 165.03367615]
[87.93368530 150.03692627]
[88.24574280 135.04016113]
[88.55780029 120.04341125]
[77.89617157 109.49212646]
[62.90347672 109.96016693]
[47.91078186 110.42820740]
[32.91808701 110.89624786]
[29.90939713 125.66258240]
[23.57591057 139.33677673]
[14.25918293 151.18141174]
[2.46165252 160.55770874]
[-11.18045425 166.96002197]
[-25.93143463 170.04309082]
[-40.99578857 169.64064026]
[-55.56111145 165.77436829]
[-68.84191895 158.65278625]
[-80.12198639 148.65995789]
[-88.79300690 136.33476257]
[-94.38734436 122.34191132]
[-96.60331726 107.43599701]
[-95.32141876 92.42089081]
[-90.61077881 78.10633087]
[-82.72543335 65.26428986]
[-72.09063721 54.58731461]
[-59.27989960 46.65121078]
[-44.98409653 41.88395309]
[-29.97418022 40.54264069]
[-15.05961704 42.69960403]
[-1.04472899 48.23852539]
[11.31467724 56.86069107]
[21.35207558 68.10112762]
[28.52616119 81.35364532]
[32.45004272 95.90355682]
[47.44273758 95.43550873]
[62.43543625 94.96746826]
[77.42813110 94.49942780]
[95.42716980 81.52246094]
[97.91228485 66.72975159]
[100.39740753 51.93704605]
[86.03436279 47.53726959]
[72.36850739 41.30032730]
[59.63368607 33.33294296]
[48.04779816 23.77144241]
[37.80910110 12.77944088]
[29.09279060 0.54502529]
[22.04801178 -12.72245789]
[16.79531288 -26.79598618]
[13.42457390 -41.43474197]
[11.99347210 -56.38823318]
[12.52649593 -71.40058899]
[15.01452351 -86.21493530]
[19.41498375 -100.57776642]
[25.65257645 -114.24332428]
[33.62056732 -126.97776794]
[43.18262100 -138.56320190]
[54.17510605 -148.80137634]
[66.40993500 -157.51710510]
[79.67775726 -164.56124878]
[93.75153351 -169.81327820]
[108.39044952 -173.18331909]
[123.34400940 -174.61370850]
[138.35633850 -174.07997131]
[153.17056274 -171.59124756]
[167.53318787 -167.19009399]
[181.19845581 -160.95185852]
[193.93251038 -152.98326111]
[205.51748657 -143.42065430]
[215.75514221 -132.42767334]
[224.47029114 -120.19242859]
[231.51380920 -106.92427826]
[236.76516724 -92.85025024]
[240.13450623 -78.21117401]
[241.56419373 -63.25754547]
[241.02973938 -48.24523926]
[238.54029846 -33.43113327]
[234.13847351 -19.06871796]
[227.89958191 -5.40375519]
[219.93037415 7.32993174]
[210.36721802 18.91445160]
[199.37374878 29.15158081]
[187.13809204 37.86614609]
[173.86959839 44.90902710]
[159.79533386 50.15971756]
[145.15609741 53.52836609]
[130.20239258 54.95733261]
[115.19011688 54.42216492]
[112.70499420 69.21487427]
[110.21987915 84.00757599]
[118.60202026 96.44702148]
[133.24551392 99.69784546]
[147.88902283 102.94866943]
[162.53251648 106.19949341]
[170.19859314 93.15776825]
[181.52090454 83.12480927]
[195.39022827 77.08354187]
[210.44779968 75.62583923]
[225.21841431 78.89450073]
[238.25500488 86.56929779]
[248.28038025 97.89833832]
[254.31234741 111.77171326]
[255.75996399 126.83024597]
[252.48139954 141.59866333]
[244.79786682 154.63011169]
[233.46211243 164.64788818]
[219.58470154 170.67056274]
[204.52519226 172.10809326]
[189.75897217 168.81964111]
[176.73268127 161.12738037]
[166.72250366 149.78491211]
[160.70913696 135.90345764]
[159.28169250 120.84299469]
[144.63819885 117.59217072]
[129.99468994 114.34134674]
[115.35119629 111.09052277]
[103.55455017 120.35546875]
[103.24250031 135.35221863]
[102.93044281 150.34898376]
[102.61838531 165.34573364]
[102.30632782 180.34248352]
[101.99427032 195.33923340]
[101.68221283 210.33599854]
[101.37016296 225.33274841]
[101.05810547 240.32949829]
[115.55104065 244.52677917]
[128.46330261 252.33293152]
[138.91450500 263.21569824]
[146.19207764 276.43307495]
[149.79981995 291.08392334]
[149.49174500 306.16925049]
[145.28886414 320.66055298]
[137.47773743 333.56982422]
[126.59093475 344.01681519]
[113.37074280 351.28927612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 53]
[22 52]
[23 51]
[24 50]
[54 105]
[55 104]
[56 103]
[106 131]
[107 130]
[108 129]
[109 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
