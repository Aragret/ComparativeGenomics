%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUUAUCCCCGGGGGGGGGGACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCxxxxxxxxxxAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUCCCCCCCCCCACACCUAUCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.24869537 398.97528076]
[77.08808899 393.82028198]
[64.49834442 385.53805542]
[54.15840530 374.57528687]
[46.62589645 361.52316284]
[42.30702972 347.08557129]
[41.43472290 332.04110718]
[44.05601120 317.20111084]
[50.02953720 303.36587524]
[59.03315735 291.28152466]
[70.58131409 281.59973145]
[84.05123138 274.84268188]
[98.71649170 271.37469482]
[98.71649170 256.37469482]
[98.71649170 241.37469482]
[98.71649170 226.37469482]
[98.71649170 211.37469482]
[98.71649170 196.37469482]
[98.71649170 181.37469482]
[98.71649170 166.37469482]
[98.71649170 151.37469482]
[98.71649170 136.37469482]
[98.71649170 121.37469482]
[90.15957642 133.69456482]
[75.16042328 133.85397339]
[66.34361267 121.71873474]
[71.13013458 107.50292969]
[85.49132538 103.17181396]
[71.22547150 98.53656006]
[56.95962524 93.90129852]
[40.84387970 108.24108887]
[17.70673752 108.06623840]
[-0.51280129 91.38198853]
[-15.50586987 90.92602539]
[-30.49893761 90.47005463]
[-45.49200439 90.01409149]
[-60.48507309 89.55812073]
[-74.66580200 97.79456329]
[-88.75251770 89.39835358]
[-88.25402069 73.00678253]
[-73.68312073 65.48210144]
[-60.02910614 74.56505585]
[-45.03603745 75.02101898]
[-30.04297066 75.47698975]
[-15.04990196 75.93295288]
[-0.05683389 76.38892365]
[4.14262819 61.98876572]
[-8.74522877 54.31392670]
[-21.63308525 46.63908768]
[-37.47493744 49.17192841]
[-49.23488998 38.25940704]
[-47.89171219 22.27268028]
[-34.47577667 13.47539520]
[-19.27864265 18.61607552]
[-13.95824623 33.75123215]
[-1.07038939 41.42607117]
[11.81746674 49.10091019]
[24.12560654 44.58443832]
[36.82289505 44.90471649]
[48.13359451 49.71763992]
[56.58474731 58.07132339]
[61.19722366 68.57743073]
[61.59488297 79.63545227]
[75.86072540 84.27070618]
[90.12657928 88.90596008]
[104.81952667 85.88648224]
[116.10129547 76.00106049]
[127.38307190 66.11563873]
[138.66484070 56.23021317]
[149.94660950 46.34478760]
[141.32972717 34.04859161]
[134.09281921 20.89281464]
[128.32075500 7.03169870]
[124.08120728 -7.37224007]
[121.42388153 -22.15012360]
[120.37992859 -37.12868881]
[120.96158600 -52.13231659]
[123.16204071 -66.98509979]
[126.95549774 -81.51290131]
[132.29747009 -95.54538727]
[139.12533569 -108.91802979]
[147.35902405 -121.47404480]
[156.90202332 -133.06620789]
[167.64242554 -143.55863953]
[179.45431519 -152.82827759]
[192.19921875 -160.76647949]
[205.72767639 -167.28015137]
[219.88110352 -172.29292297]
[234.49353027 -175.74604797]
[249.39366150 -177.59899902]
[264.40676880 -177.83007812]
[279.35687256 -176.43658447]
[294.06866455 -173.43482971]
[308.36965942 -168.86001587]
[322.09219360 -162.76579285]
[335.07534790 -155.22360229]
[347.16693115 -146.32188416]
[358.22518921 -136.16499329]
[368.12042236 -124.87200928]
[376.73666382 -112.57534790]
[383.97283936 -99.41918182]
[389.74417114 -85.55775452]
[393.98294067 -71.15358734]
[396.63946533 -56.37556458]
[397.68261719 -41.39694214]
[397.10015869 -26.39334297]
[394.89889526 -11.54067707]
[391.10467529 2.98691821]
[385.76193237 17.01911354]
[378.93334961 30.39138794]
[370.69897461 42.94696045]
[361.15536499 54.53862000]
[350.41439819 65.03046417]
[338.60198975 74.29947662]
[325.85668945 82.23698425]
[312.32788086 88.74993134]
[298.17419434 93.76194763]
[283.56155396 97.21427155]
[268.66134644 99.06642914]
[253.64819336 99.29670715]
[238.69818115 97.90239716]
[223.98654175 94.89984894]
[209.68580627 90.32427979]
[195.96360779 84.22931671]
[182.98085022 76.68642426]
[170.88973999 67.78404999]
[159.83204651 57.62656021]
[148.55026245 67.51198578]
[137.26849365 77.39740753]
[125.98672485 87.28283691]
[114.70494843 97.16825867]
[113.71649170 121.37469482]
[113.71649170 136.37469482]
[113.71649170 151.37469482]
[113.71649170 166.37469482]
[113.71649170 181.37469482]
[113.71649170 196.37469482]
[113.71649170 211.37469482]
[113.71649170 226.37469482]
[113.71649170 241.37469482]
[113.71649170 256.37469482]
[113.71649170 271.37469482]
[128.38174438 274.84268188]
[141.85166931 281.59973145]
[153.39982605 291.28152466]
[162.40344238 303.36587524]
[168.37696838 317.20111084]
[170.99826050 332.04110718]
[170.12594604 347.08557129]
[165.80708313 361.52316284]
[158.27456665 374.57528687]
[147.93463135 385.53805542]
[135.34489441 393.82028198]
[121.18428802 398.97528076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[28 65]
[29 64]
[30 63]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[47 57]
[48 56]
[49 55]
[66 131]
[67 130]
[68 129]
[69 128]
[70 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
