%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAACCCCGGGGGGGGGGUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCxxxxxxxxxxCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCCCCCCCCCCCUCAACCGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 412.38113403]
[71.19830322 406.36511230]
[59.48964310 396.83569336]
[50.78712082 384.50003052]
[45.73651886 370.27349854]
[44.71262741 355.21182251]
[47.79142761 340.43267822]
[54.74444962 327.03274536]
[65.05573273 316.00640869]
[77.96011353 308.17190552]
[92.50000000 304.11059570]
[92.50000000 289.11059570]
[92.50000000 274.11059570]
[92.50000000 259.11059570]
[92.50000000 244.11058044]
[92.50000000 229.11058044]
[92.50000000 214.11058044]
[92.50000000 199.11058044]
[92.50000000 184.11058044]
[92.50000000 169.11058044]
[92.50000000 154.11058044]
[92.50000000 139.11058044]
[76.90346527 132.44129944]
[65.49739075 119.88611603]
[60.35120010 103.72294617]
[62.39858246 86.88432312]
[71.26807404 72.42530060]
[85.35047150 62.96921921]
[82.55814362 48.23141098]
[79.76581573 33.49360657]
[76.97349548 18.75580025]
[66.80246735 6.63718653]
[72.03527832 -7.30795479]
[69.24295807 -22.04576111]
[64.54273987 -29.95523834]
[66.54918671 -37.11902237]
[64.06407166 -51.91172791]
[61.57895279 -66.70443726]
[59.09383392 -81.49714661]
[51.34520721 -68.65351868]
[37.94890594 -61.90524673]
[23.01608467 -63.32329941]
[11.12943649 -72.47248077]
[5.93682146 -86.54503632]
[9.03178787 -101.22226715]
[19.46452904 -111.99993134]
[34.03337097 -115.57048798]
[48.26731873 -110.83818054]
[57.79847717 -99.25457001]
[58.11053085 -114.25131989]
[58.42258835 -129.24807739]
[58.73464584 -144.24482727]
[56.14912415 -148.92826843]
[55.70820236 -153.65669250]
[57.05928421 -157.59068298]
[59.56315613 -160.15936279]
[60.81003189 -175.10745239]
[58.39396286 -183.98519897]
[62.24150848 -190.35246277]
[63.79909134 -205.27137756]
[65.35667419 -220.19029236]
[66.91425323 -235.10919189]
[60.65177155 -249.63819885]
[69.66883087 -261.49322510]
[71.22640991 -276.41213989]
[57.00053787 -281.38418579]
[44.30508423 -289.50344849]
[33.82469940 -300.33203125]
[26.12457657 -313.28598022]
[21.61997414 -327.66671753]
[20.55382156 -342.69866943]
[22.98361206 -357.57122803]
[28.77831078 -371.48229980]
[37.62541962 -383.68170166]
[49.04782104 -393.51153564]
[62.42952347 -400.44168091]
[77.04886627 -404.09838867]
[92.11744690 -404.28448486]
[106.82263184 -400.98992920]
[120.37139893 -394.39236450]
[132.03306580 -384.84762573]
[141.17875671 -372.87042236]
[147.31523132 -359.10668945]
[150.11155701 -344.29867554]
[149.41696167 -329.24496460]
[145.26887512 -314.75738525]
[137.89100647 -301.61721802]
[127.68122864 -290.53311157]
[115.19016266 -282.10281372]
[101.09141541 -276.78097534]
[86.14532471 -274.85458374]
[84.58773804 -259.93566895]
[90.96163177 -246.47375488]
[81.83316803 -233.55162048]
[80.27558136 -218.63270569]
[78.71800232 -203.71379089]
[77.16042328 -188.79487610]
[75.75811768 -173.86058044]
[74.51124573 -158.91249084]
[73.73139954 -143.93276978]
[73.41934204 -128.93601990]
[73.10728455 -113.93926239]
[72.79522705 -98.94251251]
[73.88654327 -83.98226166]
[76.37165833 -69.18955231]
[78.85678101 -54.39684677]
[81.34189606 -39.60414124]
[83.98075867 -24.83808517]
[86.77308655 -10.10027885]
[96.74438477 0.96418828]
[91.71130371 15.96347618]
[94.50362396 30.70128250]
[97.29595184 45.43908691]
[100.08827209 60.17689514]
[111.88848877 61.99274445]
[122.62014771 67.22476196]
[131.31866455 75.40267181]
[137.20220947 85.79143524]
[139.74194336 97.45728302]
[138.70960999 109.35168457]
[152.36584473 115.55709076]
[168.62641907 113.42971039]
[178.38291931 126.61086273]
[171.59869385 141.54090881]
[155.25277710 142.86109924]
[146.16044617 129.21333313]
[132.50419617 123.00792694]
[121.56172180 133.48103333]
[107.50000000 139.11058044]
[107.50000000 154.11058044]
[107.50000000 169.11058044]
[107.50000000 184.11058044]
[107.50000000 199.11058044]
[107.50000000 214.11058044]
[107.50000000 229.11058044]
[107.50000000 244.11058044]
[107.50000000 259.11059570]
[107.50000000 274.11059570]
[107.50000000 289.11059570]
[107.50000000 304.11059570]
[122.03988647 308.17190552]
[134.94427490 316.00640869]
[145.25555420 327.03274536]
[152.20857239 340.43267822]
[155.28736877 355.21182251]
[154.26348877 370.27349854]
[149.21287537 384.50003052]
[140.51036072 396.83569336]
[128.80169678 406.36511230]
[114.95575714 412.38113403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[28 114]
[29 113]
[30 112]
[31 111]
[33 109]
[34 108]
[36 107]
[37 106]
[38 105]
[39 104]
[49 103]
[50 102]
[51 101]
[52 100]
[56 99]
[57 98]
[59 97]
[60 96]
[61 95]
[62 94]
[64 92]
[65 91]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
