%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCCCCUUAGGGGGGGGGGUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCxxxxxxxxxxCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACCCCCCCCCCCUAAACCCCCAUA\
) } def
/len { sequence length } bind def

/coor [
[83.75896454 395.14349365]
[70.05681610 388.88259888]
[58.09169769 379.72924805]
[48.46378708 368.14257812]
[41.65600967 354.70376587]
[38.00983810 340.08688354]
[37.70817184 325.02511597]
[40.76613617 310.27395630]
[47.03034592 296.57330322]
[56.18659210 284.61041260]
[67.77559662 274.98532104]
[81.21606445 268.18078613]
[95.83383179 264.53817749]
[95.52983093 249.54124451]
[95.22582245 234.54432678]
[94.92182159 219.54740906]
[94.61781311 204.55049133]
[94.31381226 189.55357361]
[94.00980377 174.55665588]
[93.70580292 159.55973816]
[93.40179443 144.56282043]
[93.09779358 129.56590271]
[92.79378510 114.56897736]
[87.30020142 100.61116791]
[77.30095673 89.43015289]
[67.30170441 78.24913788]
[57.30245972 67.06812286]
[58.20197296 82.04113007]
[51.61463547 95.51728821]
[39.24710846 104.00518036]
[24.30359459 105.30573273]
[10.65569592 99.08200073]
[1.83933675 86.94644165]
[0.13867953 72.04315948]
[5.99433374 58.23333359]
[17.88920403 49.09483719]
[32.74154282 46.99530029]
[46.70172501 52.47746277]
[39.15788651 39.51248932]
[31.61404610 26.54751778]
[24.07020569 13.58254719]
[8.71616554 18.78635025]
[-7.37319183 20.73259354]
[-23.51467133 19.34080887]
[-39.02331543 14.67222595]
[-53.24146271 6.92707777]
[-65.56663513 -3.56398726]
[-75.47707367 -16.35401726]
[-82.55383301 -30.89879799]
[-86.49847412 -46.58001328]
[-87.14564514 -62.73152924]
[-84.47004700 -78.66768646]
[-78.58737183 -93.71240997]
[-69.74932861 -107.22789001]
[-58.33287048 -118.64163971]
[-66.65061951 -131.12423706]
[-74.96836853 -143.60682678]
[-83.28610992 -156.08941650]
[-91.60385895 -168.57200623]
[-99.92160797 -181.05459595]
[-115.30680847 -185.60157776]
[-121.21061707 -200.51884460]
[-113.10412598 -214.36312866]
[-97.20594788 -216.51429749]
[-85.71180725 -205.32214355]
[-87.43901825 -189.37234497]
[-79.12126923 -176.88975525]
[-70.80352020 -164.40716553]
[-62.48577499 -151.92457581]
[-54.16802597 -139.44197083]
[-45.85028076 -126.95938873]
[-33.11057281 -132.41873169]
[-19.60462952 -135.54878235]
[-5.75475788 -136.25033569]
[8.00573921 -134.50012207]
[21.24612236 -130.35160828]
[33.55170059 -123.93334198]
[44.53681946 -115.44499969]
[53.85694504 -105.15113831]
[61.21947479 -93.37298584]
[66.39292145 -80.47837830]
[69.21417236 -66.87030792]
[69.59367371 -52.97431946]
[67.51824188 -39.22518158]
[63.05150986 -26.05331039]
[56.33200455 -13.87128258]
[47.56883240 -3.06091404]
[37.03517914 6.03870773]
[44.57901764 19.00367928]
[52.12285614 31.96865082]
[59.66669464 44.93362045]
[68.48347473 57.06887817]
[78.48271942 68.24989319]
[88.48196411 79.43090820]
[98.48121643 90.61192322]
[102.70709229 87.19131470]
[109.09476471 86.02580261]
[116.42373657 88.14630890]
[131.36138916 86.78009033]
[133.03094482 71.82022858]
[137.67805481 57.50278091]
[145.11241150 44.41403961]
[155.02960205 33.08998108]
[167.02351379 23.99431801]
[180.60299683 17.49950981]
[195.21199036 13.87151814]
[210.25224304 13.25890350]
[225.10789490 15.68675518]
[239.17060852 21.05565262]
[251.86451721 29.14574242]
[262.66983032 39.62574005]
[271.14404297 52.06649780]
[276.94015503 65.95857239]
[279.82086182 80.73310089]
[279.66815186 95.78506470]
[276.48828125 110.49809265]
[270.41146851 124.26970673]
[261.68658447 136.53596497]
[250.67085266 146.79457092]
[237.81541443 154.62542725]
[223.64666748 159.70788574]
[208.74481201 161.83381653]
[193.72006226 160.91616821]
[179.18769836 156.99250793]
[165.74278259 150.22351074]
[153.93589783 140.88636780]
[144.25051880 129.36341858]
[137.08325195 116.12652588]
[132.72760010 101.71774292]
[117.78995514 103.08396149]
[107.79071045 114.26496887]
[108.09471130 129.26188660]
[108.39871979 144.25880432]
[108.70272064 159.25572205]
[109.00672150 174.25265503]
[109.31072998 189.24957275]
[109.61473083 204.24649048]
[109.91873932 219.24340820]
[110.22274017 234.24032593]
[110.52674866 249.23724365]
[110.83074951 264.23416138]
[125.58412170 267.28140259]
[139.28930664 273.53564453]
[151.25886536 282.68319702]
[160.89237976 294.26519775]
[167.70668030 307.70071411]
[171.35992432 322.31582642]
[171.66889954 337.37744141]
[168.61807251 352.13009644]
[162.36050415 365.83377075]
[153.21006775 377.80108643]
[141.62571716 387.43182373]
[128.18855286 394.24285889]
[113.57255554 397.89254761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 95]
[25 94]
[26 93]
[27 92]
[38 91]
[39 90]
[40 89]
[41 88]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[98 130]
[99 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
