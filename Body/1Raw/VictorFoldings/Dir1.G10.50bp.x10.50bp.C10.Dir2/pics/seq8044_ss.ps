%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACACUAUGGGGGGGGGGUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCxxxxxxxxxxCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCCCCCCCCCCCUUACACAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.07766724]
[71.19830322 372.06164551]
[59.48964310 362.53222656]
[50.78712082 350.19653320]
[45.73651886 335.97003174]
[44.71262741 320.90835571]
[47.79142761 306.12918091]
[54.74444962 292.72924805]
[65.05573273 281.70291138]
[77.96011353 273.86840820]
[92.50000000 269.80709839]
[92.50000000 254.80709839]
[92.50000000 239.80709839]
[92.50000000 224.80709839]
[92.50000000 209.80709839]
[92.50000000 194.80709839]
[92.50000000 179.80709839]
[92.50000000 164.80709839]
[92.50000000 149.80709839]
[92.50000000 134.80709839]
[92.50000000 119.80709839]
[80.57480621 108.43997192]
[80.40342712 91.96597290]
[92.08956146 80.35321808]
[91.77750397 65.35646057]
[91.46544647 50.35970688]
[91.15338898 35.36295319]
[76.16259003 34.70355225]
[61.24591446 33.07518005]
[46.46592331 30.48466492]
[31.88461113 26.94287300]
[17.56314087 22.46466064]
[3.56157994 17.06880951]
[-10.06134319 10.77795315]
[-23.24848938 3.61847687]
[-35.94454575 -4.37958908]
[-48.09626007 -13.18269825]
[-59.65266418 -22.75392723]
[-70.56528473 -33.05312729]
[-80.78836060 -44.03710556]
[-90.27899170 -55.65979004]
[-98.99739075 -67.87242889]
[-106.90697479 -80.62379456]
[-113.97457886 -93.86040497]
[-120.17055511 -107.52674103]
[-125.46891022 -121.56548309]
[-129.84742737 -135.91775513]
[-133.28773499 -150.52334595]
[-135.77540588 -165.32098389]
[-137.30001831 -180.24862671]
[-137.85516357 -195.24365234]
[-137.43850708 -210.24316406]
[-136.05180359 -225.18424988]
[-133.70088196 -240.00422668]
[-130.39558411 -254.64096069]
[-126.14978790 -269.03305054]
[-120.98129272 -283.12011719]
[-114.91178131 -296.84307861]
[-107.96671295 -310.14440918]
[-100.17520905 -322.96826172]
[-91.56996155 -335.26089478]
[-82.18704987 -346.97070312]
[-72.06584930 -358.04861450]
[-61.24879074 -368.44815063]
[-49.78126144 -378.12570190]
[-37.71135330 -387.04061890]
[-25.08969498 -395.15560913]
[-11.96922207 -402.43652344]
[1.59502935 -408.85293579]
[15.54616737 -414.37783813]
[29.82567406 -418.98809814]
[44.37365723 -422.66439819]
[59.12909698 -425.39126587]
[74.03010559 -427.15731812]
[89.01417542 -427.95510864]
[104.01846313 -427.78134155]
[118.98004150 -426.63665771]
[133.83613586 -424.52593994]
[148.52445984 -421.45800781]
[162.98338318 -417.44573975]
[177.15228271 -412.50595093]
[190.97169495 -406.65939331]
[204.38369751 -399.93054199]
[217.33200073 -392.34762573]
[229.76229858 -383.94250488]
[241.62248230 -374.75036621]
[252.86277771 -364.80981445]
[263.43603516 -354.16253662]
[273.29794312 -342.85314941]
[282.40710449 -330.92913818]
[290.72531128 -318.44049072]
[298.21768188 -305.43960571]
[304.85278320 -291.98098755]
[310.60281372 -278.12112427]
[315.44363403 -263.91809082]
[319.35491943 -249.43153381]
[322.32031250 -234.72216797]
[324.32733154 -219.85169983]
[325.36758423 -204.88250732]
[325.43670654 -189.87736511]
[324.53436279 -174.89923096]
[322.66439819 -160.01091003]
[319.83465576 -145.27485657]
[316.05694580 -130.75286865]
[311.34716797 -116.50587463]
[305.72506714 -102.59362030]
[299.21420288 -89.07446289]
[291.84188843 -76.00510406]
[283.63906860 -63.44036865]
[274.64013672 -51.43295288]
[264.88284302 -40.03321838]
[254.40809631 -29.28898239]
[243.25984192 -19.24530983]
[231.48483276 -9.94432735]
[219.13247681 -1.42504752]
[206.25457764 6.27679682]
[192.90513611 13.12890148]
[179.14015198 19.10252571]
[165.01736450 24.17261314]
[150.59600830 28.31790161]
[135.93656921 31.52099800]
[121.10054016 33.76847458]
[106.15014648 35.05089951]
[106.46220398 50.04764938]
[106.77426147 65.04440308]
[107.08631134 80.04116058]
[117.23731995 87.69365692]
[121.17835236 99.77967834]
[117.48960876 111.94507599]
[107.50000000 119.80709839]
[107.50000000 134.80709839]
[107.50000000 149.80709839]
[107.50000000 164.80709839]
[107.50000000 179.80709839]
[107.50000000 194.80709839]
[107.50000000 209.80709839]
[107.50000000 224.80709839]
[107.50000000 239.80709839]
[107.50000000 254.80709839]
[107.50000000 269.80709839]
[122.03988647 273.86840820]
[134.94427490 281.70291138]
[145.25555420 292.72924805]
[152.20857239 306.12918091]
[155.28736877 320.90835571]
[154.26348877 335.97003174]
[149.21287537 350.19653320]
[140.51036072 362.53222656]
[128.80169678 372.06164551]
[114.95575714 378.07766724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 126]
[25 125]
[26 124]
[27 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
