%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUUCUAGGGGGGGGGGCUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACxxxxxxxxxxCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCCCCCCCCCCCAUCAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[93.63096619 415.07192993]
[79.78502655 409.05590820]
[68.07637024 399.52648926]
[59.37384415 387.19082642]
[54.32324219 372.96429443]
[53.29935074 357.90261841]
[56.37814713 343.12344360]
[63.33116913 329.72351074]
[73.64245605 318.69717407]
[86.54683685 310.86267090]
[101.08672333 306.80136108]
[101.08672333 291.80136108]
[101.08672333 276.80136108]
[101.08672333 261.80136108]
[101.08672333 246.80136108]
[101.08672333 231.80136108]
[101.08672333 216.80136108]
[101.08672333 201.80136108]
[101.08672333 186.80136108]
[101.08672333 171.80136108]
[93.34941864 159.07409668]
[101.08672333 145.27392578]
[99.37403107 130.37202454]
[95.97105408 115.76312256]
[86.44302368 108.99537659]
[83.91019440 97.58614349]
[89.67948151 87.42242432]
[86.58116150 72.74590302]
[83.48283386 58.06937408]
[80.38451385 43.39284897]
[69.96357727 31.48845291]
[74.90514374 17.43746758]
[71.80682373 2.76094174]
[68.70850372 -11.91558361]
[65.61017609 -26.59210968]
[53.52179718 -32.61943436]
[47.22234726 -44.34738922]
[48.82468414 -57.36686707]
[57.51762009 -66.92874908]
[54.72529602 -81.66655731]
[51.93297195 -96.40436554]
[49.14064789 -111.14216614]
[46.34832382 -125.87997437]
[43.55599976 -140.61778259]
[28.57948494 -139.52151489]
[13.57562923 -140.13963318]
[-1.25996315 -142.46406555]
[-15.73387909 -146.46450806]
[-29.65742111 -152.08880615]
[-42.84906769 -159.26364136]
[-55.13683701 -167.89546204]
[-66.36053467 -177.87174988]
[-76.37384033 -189.06243896]
[-85.04620361 -201.32164001]
[-92.26456451 -214.48951721]
[-97.93481445 -228.39440918]
[-101.98303986 -242.85504150]
[-104.35644531 -257.68286133]
[-105.02410889 -272.68460083]
[-103.97731781 -287.66464233]
[-101.22971344 -302.42773438]
[-96.81712341 -316.78137207]
[-90.79708099 -330.53842163]
[-83.24805450 -343.51956177]
[-74.26846313 -355.55554199]
[-63.97539139 -366.48947144]
[-52.50300980 -376.17874146]
[-40.00090027 -384.49710083]
[-26.63204193 -391.33605957]
[-12.57073212 -396.60647583]
[1.99971378 -400.23965454]
[16.88933945 -402.18817139]
[31.90402794 -402.42669678]
[46.84803391 -400.95208740]
[61.52652740 -397.78353882]
[75.74814606 -392.96243286]
[89.32748413 -386.55154419]
[102.08750153 -378.63449097]
[113.86185455 -369.31448364]
[124.49703217 -358.71304321]
[133.85438538 -346.96835327]
[141.81192017 -334.23355103]
[148.26589966 -320.67465210]
[153.13218689 -306.46841431]
[156.34732056 -291.80004883]
[157.86940002 -276.86080933]
[157.67857361 -261.84542847]
[155.77732849 -246.94969177]
[152.19046021 -232.36778259]
[146.96473694 -218.28981018]
[140.16827393 -204.89929199]
[131.88967896 -192.37081909]
[122.23687744 -180.86772156]
[111.33571625 -170.53996277]
[99.32831573 -161.52220154]
[86.37122345 -153.93197632]
[72.63335419 -147.86827087]
[58.29380417 -143.41011047]
[61.08612823 -128.67230225]
[63.87845612 -113.93449402]
[66.67077637 -99.19668579]
[69.46310425 -84.45888519]
[72.25542450 -69.72107697]
[86.53060150 -60.88494492]
[90.09908295 -44.13531494]
[80.28670502 -29.69043159]
[83.38502502 -15.01390553]
[86.48334503 -0.33737990]
[89.58167267 14.33914566]
[99.78099060 25.19377708]
[95.06104279 40.29452515]
[98.15936279 54.97105026]
[101.25768280 69.64757538]
[104.35600281 84.32410431]
[115.88318634 96.47396851]
[110.57994843 112.36014557]
[113.98292542 126.96903992]
[120.04420471 113.24822235]
[131.70719910 103.81559753]
[146.39218140 100.75757599]
[160.85095215 104.75057220]
[171.88536072 114.91136169]
[177.05471802 128.99247742]
[175.21559143 143.87930298]
[166.77478027 156.27900696]
[153.59933472 163.44889832]
[138.60351562 163.80307007]
[125.10427094 157.26315308]
[116.08672333 145.27392578]
[123.82402039 159.07409668]
[116.08672333 171.80136108]
[116.08672333 186.80136108]
[116.08672333 201.80136108]
[116.08672333 216.80136108]
[116.08672333 231.80136108]
[116.08672333 246.80136108]
[116.08672333 261.80136108]
[116.08672333 276.80136108]
[116.08672333 291.80136108]
[116.08672333 306.80136108]
[130.62660217 310.86267090]
[143.53099060 318.69717407]
[153.84226990 329.72351074]
[160.79530334 343.12344360]
[163.87409973 357.90261841]
[162.85020447 372.96429443]
[157.79960632 387.19082642]
[149.09707642 399.52648926]
[137.38841248 409.05590820]
[123.54248047 415.07192993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 117]
[24 116]
[27 114]
[28 113]
[29 112]
[30 111]
[32 109]
[33 108]
[34 107]
[35 106]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[44 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
