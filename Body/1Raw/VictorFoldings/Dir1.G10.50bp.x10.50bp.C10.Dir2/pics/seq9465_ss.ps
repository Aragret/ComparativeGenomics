%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCACUAAUAGUUGGGGGGGGGGAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAxxxxxxxxxxAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACCCCCCCCCCCUCCCACUAAUAGCU\
) } def
/len { sequence length } bind def

/coor [
[83.44168854 394.91360474]
[69.31060028 389.75344849]
[56.36841583 382.08438110]
[45.05593872 372.16760254]
[35.75847244 360.34088135]
[28.79267883 347.00698853]
[24.39581490 332.62011719]
[22.71763420 317.67025757]
[23.81529617 302.66659546]
[27.65141296 288.12014771]
[34.09532928 274.52639771]
[42.92757034 262.34829712]
[53.84730530 252.00062561]
[66.48262024 243.83586121]
[80.40316010 238.13206482]
[95.13478851 235.08351135]
[94.84211731 220.08636475]
[94.54943848 205.08921814]
[94.25675964 190.09208679]
[93.96408844 175.09494019]
[93.67140961 160.09779358]
[93.37873077 145.10064697]
[93.08605957 130.10350037]
[92.79338074 115.10636139]
[81.43972778 105.30357361]
[66.56021881 107.20098877]
[51.68070984 109.09841156]
[36.80120087 110.99583435]
[33.75647354 125.82851410]
[26.05840683 138.86763000]
[14.54202843 148.69879150]
[0.45655110 154.25558472]
[-14.67013931 154.93527222]
[-29.19721222 150.66410828]
[-41.54887772 141.90539551]
[-50.38532257 129.60920715]
[-54.74803543 115.10936737]
[-54.16378021 99.97869110]
[-48.69593048 85.85844421]
[-38.93759918 74.28028870]
[-25.94730186 66.50012970]
[-11.13412189 63.36190796]
[3.89511395 65.20603180]
[17.51014709 71.83245850]
[28.23412132 82.52241516]
[34.90378189 96.11632538]
[49.78329086 94.21890259]
[64.66279602 92.32147980]
[79.54230499 90.42406464]
[88.32476807 87.22959137]
[95.89878845 88.70335388]
[99.66314697 74.18338013]
[103.42750549 59.66341019]
[107.19186401 45.14343643]
[91.21178436 46.82995224]
[74.20374298 37.89305496]
[64.51219177 26.44430733]
[54.82064438 14.99555683]
[39.35676575 16.27933693]
[26.10913849 8.19973469]
[20.17174339 -6.13647699]
[23.82763100 -21.21673203]
[35.67103958 -31.24236679]
[51.14793396 -32.35831833]
[64.30713654 -24.13547897]
[70.08866119 -9.73570156]
[66.26939392 5.30400753]
[75.96094513 16.75275803]
[85.65249634 28.20150757]
[93.14356995 27.83578300]
[100.00092316 14.49499035]
[108.12572479 27.10433578]
[115.61680603 26.73861313]
[124.14704132 14.40025330]
[132.67727661 2.06189346]
[122.03325653 -9.16360569]
[113.94670868 -22.34465981]
[108.76601410 -36.90894699]
[106.71343994 -52.22464371]
[107.87559509 -67.62785339]
[112.19980621 -82.45135498]
[119.49646759 -96.05355072]
[129.44737244 -107.84619141]
[141.61961365 -117.31983185]
[155.48431396 -124.06584167]
[170.43977356 -127.79403687]
[185.83741760 -128.34515381]
[201.01004028 -125.69763184]
[215.30061340 -119.96849823]
[223.58848572 -132.47094727]
[231.75398254 -145.05366516]
[239.79632568 -157.71543884]
[247.83866882 -170.37722778]
[251.22709656 -186.98912048]
[268.12777710 -188.33174133]
[274.09652710 -172.46321106]
[260.50045776 -162.33488464]
[252.45809937 -149.67309570]
[244.41575623 -137.01132202]
[243.47932434 -129.64179993]
[236.09094238 -124.18308258]
[227.80307007 -111.68063354]
[238.11747742 -101.39774323]
[246.21972656 -89.28891754]
[251.79402161 -75.82257080]
[254.62243652 -61.52011108]
[254.59338379 -46.93571472]
[251.70602417 -32.63487244]
[246.07043457 -19.17247581]
[237.90328979 -7.07126331]
[227.51966858 3.19846272]
[215.32080078 11.23711777]
[201.77859497 16.73138428]
[187.41743469 19.46641922]
[172.79376221 19.33425713]
[158.47462463 16.33807182]
[145.01562500 10.59212685]
[136.48539734 22.93048668]
[127.95516205 35.26884460]
[121.71183777 48.90779495]
[117.94747925 63.42776489]
[114.18312073 77.94773865]
[110.41876221 92.46771240]
[119.63312531 80.63151550]
[132.96263123 73.75225830]
[147.94839478 73.09895325]
[161.82600403 78.79212952]
[172.03543091 89.78155518]
[176.69337463 104.04000854]
[174.94055176 118.93724823]
[167.10034180 131.72517395]
[154.61900330 140.04478455]
[139.79896545 142.36138916]
[125.37409210 138.24761963]
[114.00533295 128.46237183]
[107.79052734 114.81368256]
[108.08319855 129.81082153]
[108.37587738 144.80796814]
[108.66855621 159.80511475]
[108.96122742 174.80226135]
[109.25390625 189.79940796]
[109.54658508 204.79655457]
[109.83925629 219.79368591]
[110.13193512 234.79083252]
[124.97129059 237.26229858]
[139.10377502 242.41862488]
[152.04801941 250.08419800]
[163.36317444 259.99792480]
[172.66381836 271.82217407]
[179.63320923 285.15417480]
[184.03395081 299.53985596]
[185.71617126 314.48925781]
[184.62254333 329.49322510]
[180.79034424 344.04067993]
[174.35009766 357.63619995]
[165.52114868 369.81668091]
[154.60418701 380.16726685]
[141.97108459 388.33544922]
[128.05207825 394.04299927]
[113.32127380 397.09552002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 49]
[26 48]
[27 47]
[28 46]
[51 123]
[52 122]
[53 121]
[54 120]
[56 69]
[57 68]
[58 67]
[73 119]
[74 118]
[75 117]
[89 102]
[90 101]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
