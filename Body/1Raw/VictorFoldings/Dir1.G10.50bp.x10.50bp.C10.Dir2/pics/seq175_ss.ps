%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGACAUAAGGGGGGGGGGUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACxxxxxxxxxxACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACACCCCCCCCCCUAGUACAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 400.14538574]
[71.19830322 394.12936401]
[59.48964310 384.59994507]
[50.78712082 372.26428223]
[45.73651886 358.03775024]
[44.71262741 342.97607422]
[47.79142761 328.19692993]
[54.74444962 314.79699707]
[65.05573273 303.77066040]
[77.96011353 295.93615723]
[92.50000000 291.87484741]
[92.50000000 276.87484741]
[92.50000000 261.87484741]
[92.50000000 246.87484741]
[92.50000000 231.87484741]
[92.50000000 216.87484741]
[92.50000000 201.87484741]
[92.50000000 186.87484741]
[92.50000000 171.87484741]
[92.50000000 156.87484741]
[92.50000000 141.87484741]
[83.85138702 139.35700989]
[75.92678070 135.07467651]
[69.08146667 129.21980286]
[63.62234116 122.05489349]
[59.79416275 113.90118408]
[57.76856232 105.12423706]
[57.63634872 96.11754608]
[59.40345764 87.28492737]
[62.99066162 79.02236938]
[68.23712921 71.70031738]
[58.97217941 59.90367508]
[49.70722961 48.10703278]
[38.10588837 38.59867477]
[24.71960449 31.83056068]
[11.33331871 25.06244659]
[-2.05296588 18.29433060]
[-15.43925095 11.52621651]
[-28.82553482 4.75810146]
[-42.21181870 -2.01001334]
[-53.04665375 8.56756401]
[-66.73002625 15.05170059]
[-81.77767181 16.73904610]
[-96.55732727 13.44657135]
[-109.46581268 5.53141642]
[-119.10291290 -6.14783955]
[-124.42326355 -20.32431984]
[-124.84975433 -35.46026611]
[-120.33612823 -49.91384125]
[-111.37197876 -62.11722946]
[-98.92967224 -70.74670410]
[-84.35886383 -74.86620331]
[-69.24008179 -74.02886200]
[-55.21329880 -68.32553101]
[-43.80003357 -58.37484360]
[-36.23831558 -45.25618744]
[-33.34837723 -30.39257622]
[-35.44370651 -15.39629841]
[-22.05742073 -8.62818336]
[-8.67113590 -1.86006868]
[4.71514893 4.90804625]
[18.10143280 11.67616081]
[31.48771858 18.44427490]
[44.87400436 25.21239090]
[36.93893433 12.48310566]
[32.65904617 -1.89335227]
[32.34007645 -16.88996124]
[36.00482178 -31.43539429]
[43.39147568 -44.49056244]
[53.97235107 -55.12282562]
[66.99156952 -62.57264709]
[81.51908112 -66.30782318]
[96.51705933 -66.06152344]
[110.91408539 -61.85133743]
[123.68166351 -53.97803879]
[133.90771484 -43.00407410]
[140.86170959 -29.71340179]
[144.04685974 -15.05547619]
[143.23564148 -0.07742814]
[138.48600769 14.15074348]
[130.13723755 26.61260986]
[118.78576660 36.41792297]
[105.24251556 42.86621094]
[90.47499084 45.49682617]
[75.53814697 44.12184143]
[61.50386810 38.84208298]
[70.76882172 50.63872528]
[80.03376770 62.43536377]
[97.57545471 57.52796555]
[115.56165314 60.40723419]
[130.69483948 70.54529572]
[140.20053101 86.08348083]
[155.01829529 83.75238037]
[169.83604431 81.42127228]
[184.54400635 78.47579193]
[199.11671448 74.92102814]
[213.68942261 71.36626434]
[214.37535095 56.27632904]
[219.28614807 41.99134445]
[228.02368164 29.66932678]
[239.87965393 20.30916977]
[253.89295959 14.66965771]
[268.92758179 13.20796204]
[283.76477051 16.04257393]
[297.20169067 22.94370842]
[308.14910889 33.35191727]
[315.71954346 46.42345428]
[319.29931641 61.09866714]
[318.59820557 76.18790436]
[313.67306519 90.46795654]
[304.92315674 102.78118896]
[293.05780029 112.12943268]
[279.03881836 117.75485992]
[264.00274658 119.20145416]
[249.16842651 116.35193634]
[235.73843384 109.43730927]
[224.80148315 99.01810455]
[217.24417114 85.93897247]
[202.67147827 89.49372864]
[188.09877014 93.04849243]
[186.52609253 95.44306946]
[183.87945557 97.33762360]
[180.35244751 98.30822754]
[176.29249573 98.01189423]
[172.16714478 96.23902893]
[157.34939575 98.57013702]
[142.53163147 100.90123749]
[137.76034546 119.59359741]
[125.22376251 134.25659180]
[107.50000000 141.87484741]
[107.50000000 156.87484741]
[107.50000000 171.87484741]
[107.50000000 186.87484741]
[107.50000000 201.87484741]
[107.50000000 216.87484741]
[107.50000000 231.87484741]
[107.50000000 246.87484741]
[107.50000000 261.87484741]
[107.50000000 276.87484741]
[107.50000000 291.87484741]
[122.03988647 295.93615723]
[134.94427490 303.77066040]
[145.25555420 314.79699707]
[152.20857239 328.19692993]
[155.28736877 342.97607422]
[154.26348877 358.03775024]
[149.21287537 372.26428223]
[140.51036072 384.59994507]
[128.80169678 394.12936401]
[114.95575714 400.14538574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[31 88]
[32 87]
[33 86]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[92 127]
[93 126]
[94 125]
[95 120]
[96 119]
[97 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
