%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAUAAACGGGGGGGGGGGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAxxxxxxxxxxAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGCCCCCCCCCCAGUAAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[82.37422180 369.12005615]
[67.88453674 364.91159058]
[54.97830200 357.09545898]
[44.53550339 346.20462036]
[37.26813889 332.98162842]
[33.67171097 318.32800293]
[33.99143600 303.24291992]
[38.20550537 288.75485229]
[46.02660370 275.85165405]
[56.92147064 265.41305542]
[70.14727783 258.15078735]
[84.80226898 254.56002808]
[85.11432648 239.56326294]
[85.42638397 224.56651306]
[85.73844147 209.56976318]
[86.05049896 194.57301331]
[86.36254883 179.57624817]
[86.67460632 164.57949829]
[86.98666382 149.58274841]
[87.29872131 134.58599854]
[87.61077881 119.58924103]
[81.31674957 105.04513550]
[86.22341156 92.83882904]
[77.20587921 80.85199738]
[68.18834686 68.86516571]
[59.17082214 56.87833023]
[50.15328979 44.89149857]
[42.44169617 39.87321091]
[41.07593536 32.56018448]
[32.30973053 20.38834953]
[23.54352188 8.21651268]
[8.14001846 8.02095699]
[-4.05225134 -1.10055387]
[-8.48318195 -15.48216915]
[-3.65380359 -29.54684448]
[-12.42001057 -41.71868134]
[-21.18621826 -53.89051819]
[-29.95242500 -66.06235504]
[-38.71863174 -78.23419189]
[-50.22043610 -87.86271667]
[-63.74462509 -94.35088348]
[-77.26881409 -100.83905029]
[-90.79300690 -107.32721710]
[-104.31719208 -113.81537628]
[-117.84138489 -120.30354309]
[-131.36557007 -126.79170990]
[-147.66688538 -125.00306702]
[-157.14706421 -138.38433838]
[-150.05369568 -153.17001343]
[-133.68385315 -154.14987183]
[-124.87741089 -140.31590271]
[-111.35321808 -133.82772827]
[-97.82903290 -127.33956909]
[-84.30484009 -120.85140228]
[-70.78064728 -114.36323547]
[-57.25646210 -107.87507629]
[-43.73226929 -101.38690948]
[-51.92251205 -113.95352936]
[-56.93169403 -128.09240723]
[-58.47950745 -143.01234436]
[-56.47932816 -157.87838745]
[-51.04309464 -171.85864258]
[-42.47501373 -184.17074585]
[-31.25456810 -194.12571716]
[-18.00965691 -201.16648865]
[-3.48147130 -204.89901733]
[11.51698112 -205.11445618]
[26.14637947 -201.80075073]
[39.58805466 -195.14331055]
[51.08980179 -185.51472473]
[60.00797653 -173.45378113]
[65.84351349 -159.63545227]
[68.26985168 -144.83297729]
[67.15121460 -129.87475586]
[62.55019760 -115.59782410]
[54.72427750 -102.80114746]
[44.11140060 -92.20082855]
[31.30546570 -84.39006042]
[17.02310181 -79.80594635]
[2.06355810 -78.70501709]
[-12.73602104 -81.14888000]
[-26.54679489 -87.00039673]
[-17.78058815 -74.82855988]
[-9.01438141 -62.65672684]
[-0.24817398 -50.48488998]
[8.51803303 -38.31305313]
[23.38823318 -38.43609238]
[35.62424850 -29.67573357]
[40.41157913 -15.22115421]
[35.71535873 -0.54969460]
[44.48156738 11.62214184]
[53.24777222 23.79397964]
[62.14012146 35.87396622]
[71.15765381 47.86080170]
[80.17518616 59.84763336]
[89.19271088 71.83446503]
[98.21024323 83.82129669]
[94.43917084 69.30307007]
[99.47730255 55.17446899]
[111.58359528 46.31796265]
[126.57444763 45.79410553]
[139.26942444 53.78393555]
[145.28150940 67.52638245]
[142.53308105 82.27243805]
[131.97392273 92.92626953]
[117.25263977 95.80617523]
[131.96060181 98.75165558]
[143.14830017 92.24863434]
[155.37042236 95.04840088]
[162.16131592 105.10777283]
[176.80482483 108.35859680]
[191.44831848 111.60942841]
[206.09182739 114.86025238]
[220.73532104 118.11107635]
[235.37882996 121.36190033]
[248.57420349 112.66376495]
[264.03823853 115.92558289]
[272.59637451 129.21218872]
[269.17123413 144.64085388]
[255.79490662 153.05804443]
[240.40330505 149.46998596]
[232.12800598 136.00540161]
[217.48449707 132.75457764]
[202.84100342 129.50375366]
[188.19749451 126.25292969]
[173.55400085 123.00209808]
[158.91049194 119.75127411]
[142.51715088 125.93659210]
[129.01512146 113.45961761]
[114.30715179 110.51413727]
[102.60752869 119.90129852]
[102.29547119 134.89805603]
[101.98342133 149.89480591]
[101.67136383 164.89155579]
[101.35930634 179.88830566]
[101.04724884 194.88507080]
[100.73519135 209.88182068]
[100.42313385 224.87857056]
[100.11108398 239.87532043]
[99.79902649 254.87208557]
[114.29196167 259.06936646]
[127.20422363 266.87551880]
[137.65542603 277.75827026]
[144.93299866 290.97567749]
[148.54074097 305.62649536]
[148.23266602 320.71182251]
[144.02978516 335.20315552]
[136.21865845 348.11239624]
[125.33185577 358.55938721]
[112.11166382 365.83187866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[29 92]
[30 91]
[31 90]
[35 86]
[36 85]
[37 84]
[38 83]
[39 82]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[106 130]
[107 129]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
