%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACCAAAAGGGGGGGGGGCAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAxxxxxxxxxxAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACACCCCCCCCCCUUAACGAAAA\
) } def
/len { sequence length } bind def

/coor [
[96.72054291 367.49465942]
[83.50035095 360.22216797]
[72.61354065 349.77517700]
[64.80241394 336.86593628]
[60.59953308 322.37460327]
[60.29146194 307.28927612]
[63.89920044 292.63845825]
[71.17677307 279.42105103]
[81.62798309 268.53829956]
[94.54024506 260.73214722]
[109.03318024 256.53485107]
[108.72112274 241.53810120]
[108.40906525 226.54135132]
[108.09701538 211.54460144]
[107.78495789 196.54783630]
[107.47290039 181.55108643]
[107.16084290 166.55433655]
[106.84878540 151.55758667]
[106.53672791 136.56083679]
[103.28590393 121.91732788]
[97.22289276 108.19727325]
[91.54759979 114.41756439]
[83.41043091 118.39422607]
[68.99821472 122.55211639]
[54.58600235 126.71000671]
[40.17378616 130.86788940]
[25.76156998 135.02577209]
[11.34935379 139.18367004]
[-3.06286216 143.34155273]
[-16.60532951 153.54145813]
[-30.15554047 143.35183716]
[-24.11521530 127.51041412]
[-7.22074986 128.92933655]
[7.19146633 124.77144623]
[21.60368156 120.61356354]
[36.01589966 116.45567322]
[50.42811584 112.29779053]
[64.84033203 108.13990021]
[79.25254822 103.98200989]
[64.47033691 101.43520355]
[56.38044357 88.80374908]
[60.24983597 74.31140900]
[73.55932617 67.39350128]
[87.64370728 72.55394745]
[93.33329010 86.43257904]
[94.26892090 71.46178436]
[95.20454407 56.49099350]
[96.14017487 41.52020264]
[93.53993988 32.69463730]
[97.25418854 26.24870682]
[98.50106812 11.30062103]
[95.99337769 5.07012939]
[96.91753387 -0.61997098]
[100.12345123 -4.23902988]
[101.99106598 -19.12231064]
[103.85868073 -34.00558853]
[105.72629547 -48.88887024]
[91.23474121 -52.86074829]
[77.45599365 -58.85464096]
[64.67054749 -66.74851227]
[53.13871765 -76.38166809]
[43.09526443 -87.55796814]
[34.74466324 -100.04989624]
[28.25691986 -113.60312653]
[23.76412201 -127.94172668]
[21.35773087 -142.77378845]
[21.08674240 -157.79734802]
[22.95666885 -172.70654297]
[26.92944527 -187.19784546]
[32.92419052 -200.97622681]
[40.81885529 -213.76118469]
[50.45271683 -225.29241943]
[61.62964630 -235.33517456]
[74.12208557 -243.68501282]
[87.67572021 -250.17190552]
[102.01459503 -254.66381836]
[116.84680939 -257.06930542]
[131.87037659 -257.33935547]
[146.77946472 -255.46850586]
[161.27052307 -251.49482727]
[175.04853821 -245.49923706]
[187.83299255 -237.60377502]
[199.36363220 -227.96919250]
[209.40570068 -216.79165649]
[217.75476074 -204.29869080]
[224.24082947 -190.74465942]
[228.73185730 -176.40550232]
[231.13639832 -161.57313538]
[231.40553284 -146.54954529]
[229.53376770 -131.64057922]
[225.55918884 -117.14977264]
[219.56274414 -103.37213898]
[211.66648865 -90.58815765]
[202.03120422 -79.05811310]
[190.85302734 -69.01673889]
[178.35955811 -60.66845703]
[164.80513000 -54.18323135]
[150.46568298 -49.69309235]
[135.63317871 -47.28945541]
[120.60957336 -47.02125549]
[118.74195862 -32.13797760]
[116.87434387 -17.25469780]
[115.00672913 -2.37141705]
[113.44915009 12.54749489]
[112.20227814 27.49558258]
[111.11096954 42.45582962]
[110.17533875 57.42662430]
[109.23970795 72.39741516]
[108.30408478 87.36820221]
[110.94294739 102.13426208]
[117.00595856 115.85431671]
[119.00319672 100.98787689]
[125.21783447 87.33583069]
[135.11785889 76.06687164]
[147.85578918 68.14567566]
[162.34117126 64.25035095]
[177.33399963 64.71434784]
[191.55078125 69.49794769]
[203.77450562 78.19165802]
[212.95875549 90.05123138]
[218.31730652 104.06144714]
[219.39141846 119.02293396]
[216.08917236 133.65492249]
[208.69325256 146.70483398]
[197.83676147 157.05552673]
[184.44911194 163.82092285]
[169.67633057 166.42187500]
[154.78305054 164.63571167]
[141.04421997 158.61535645]
[129.63597107 148.87617493]
[121.53348541 136.24877930]
[121.84554291 151.24552917]
[122.15760040 166.24227905]
[122.46965027 181.23902893]
[122.78170776 196.23579407]
[123.09376526 211.23254395]
[123.40582275 226.22929382]
[123.71788025 241.22604370]
[124.02993774 256.22280884]
[138.68492126 259.81356812]
[151.91073608 267.07583618]
[162.80560303 277.51443481]
[170.62669373 290.41763306]
[174.84077454 304.90570068]
[175.16049194 319.99078369]
[171.56407166 334.64440918]
[164.29670715 347.86740112]
[153.85389709 358.75823975]
[140.94767761 366.57437134]
[126.45797729 370.78283691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 111]
[21 110]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[45 109]
[46 108]
[47 107]
[48 106]
[50 105]
[51 104]
[54 103]
[55 102]
[56 101]
[57 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
