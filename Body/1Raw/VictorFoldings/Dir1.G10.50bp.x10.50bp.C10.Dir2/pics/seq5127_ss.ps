%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCCUCAGGGGGGGGGGCUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGxxxxxxxxxxUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCCCCCCCCCCCUCUCCUUCA\
) } def
/len { sequence length } bind def

/coor [
[68.07721710 345.92694092]
[57.51371384 335.18634033]
[49.60550690 322.36416626]
[44.74927521 308.10357666]
[43.18859482 293.11984253]
[45.00175858 278.16458130]
[50.09781265 263.98791504]
[58.22114182 251.30093384]
[68.96428680 240.74003601]
[81.78837585 232.83494568]
[96.05014801 227.98216248]
[94.49256897 213.06324768]
[92.93498993 198.14433289]
[91.37740326 183.22541809]
[89.81982422 168.30651855]
[88.26224518 153.38760376]
[86.70466614 138.46868896]
[85.14707947 123.54977417]
[71.90449524 116.50463867]
[58.66191101 123.54977417]
[45.41932678 130.59490967]
[32.17673874 137.64004517]
[29.10624313 152.97322083]
[16.86589622 162.70501709]
[1.23521781 162.24038696]
[-10.40546513 151.79872131]
[-12.55977726 136.31024170]
[-4.21051836 123.08813477]
[10.70004654 118.37548828]
[25.13160515 124.39746094]
[38.37419128 117.35232544]
[51.61677551 110.30718994]
[64.85935974 103.26205444]
[94.30264282 86.63266754]
[94.30264282 71.63266754]
[94.30264282 56.63266754]
[93.21133423 41.67242050]
[91.03449249 26.83121490]
[88.85765839 11.99000835]
[86.68081665 -2.85119677]
[71.68699646 -2.11577034]
[56.69219589 -2.83090734]
[41.83641815 -4.98993015]
[27.25837326 -8.57268047]
[13.09417439 -13.54570675]
[-0.52392739 -19.86257553]
[-13.46878052 -27.46430588]
[-25.61951828 -36.27992249]
[-36.86268997 -46.22711182]
[-47.09332275 -57.21299744]
[-56.21588516 -69.13500977]
[-64.14521027 -81.88182831]
[-70.80725098 -95.33443451]
[-76.13981628 -109.36722565]
[-80.09310913 -123.84918213]
[-82.63021851 -138.64508057]
[-83.72745514 -153.61677551]
[-83.37457275 -168.62446594]
[-81.57487488 -183.52804565]
[-78.34515381 -198.18835449]
[-73.71557617 -212.46849060]
[-67.72935486 -226.23513794]
[-60.44239426 -239.35977173]
[-51.92272568 -251.71981812]
[-42.24990463 -263.19989014]
[-31.51423645 -273.69277954]
[-19.81596565 -283.10055542]
[-7.26431799 -291.33532715]
[6.02351427 -298.32025146]
[19.92346191 -303.99008179]
[34.30574036 -308.29187012]
[49.03606796 -311.18548584]
[63.97690201 -312.64389038]
[78.98874664 -312.65347290]
[93.93143463 -311.21414185]
[108.66544342 -308.33935547]
[123.05319977 -304.05590820]
[136.96037292 -298.40383911]
[150.25711060 -291.43588257]
[162.81927490 -283.21713257]
[174.52954102 -273.82431030]
[185.27859497 -263.34512329]
[194.96606445 -251.87742615]
[203.50151062 -239.52827454]
[210.80522156 -226.41296387]
[216.80902100 -212.65396118]
[221.45683289 -198.37974548]
[224.70526123 -183.72357178]
[226.52398682 -168.82231140]
[226.89602661 -153.81507874]
[225.81791687 -138.84199524]
[223.29969788 -124.04286957]
[219.36489868 -109.55587769]
[214.05024719 -95.51628876]
[207.40539551 -82.05518341]
[199.49235535 -69.29824829]
[190.38500977 -57.36460495]
[180.16842651 -46.36566162]
[168.93795776 -36.40412521]
[156.79847717 -27.57300377]
[143.86334229 -19.95475197]
[130.25332642 -13.62050056]
[116.09548187 -8.62939453]
[101.52202606 -5.02803373]
[103.69886017 9.81317139]
[105.87570190 24.65437698]
[108.05253601 39.49558258]
[117.32209015 27.70256233]
[131.96649170 24.45578194]
[145.35168457 31.22606850]
[151.41403198 44.94641113]
[147.40724182 59.40136719]
[135.14643860 68.04269409]
[120.18586731 66.95578766]
[109.30264282 56.63266754]
[109.30264282 71.63266754]
[109.30264282 86.63266754]
[117.68478394 99.07210541]
[131.58734131 104.70406342]
[145.48989868 110.33602142]
[161.64790344 107.53406525]
[171.94427490 120.29795074]
[165.78698730 135.49728394]
[149.51013184 137.49630737]
[139.85794067 124.23857880]
[125.95538330 118.60662079]
[112.05282593 112.97466278]
[100.06599426 121.99219513]
[101.62357330 136.91110229]
[103.18115997 151.83001709]
[104.73873901 166.74893188]
[106.29631805 181.66784668]
[107.85389709 196.58676147]
[109.41148376 211.50566101]
[110.96906281 226.42457581]
[125.92565155 228.22686768]
[140.10601807 233.31262207]
[152.79888916 241.42672729]
[163.36759949 252.16218567]
[171.28201294 264.98052979]
[176.14515686 279.23876953]
[177.71310425 294.22174072]
[175.90718079 309.17788696]
[170.81799316 323.35702515]
[162.70082092 336.04794312]
[151.96279907 346.61404419]
[139.14253235 354.52536011]
[124.88311768 359.38504028]
[109.89977264 360.94934082]
[94.94406128 359.13980103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 33]
[20 32]
[21 31]
[22 30]
[34 117]
[35 116]
[36 115]
[37 107]
[38 106]
[39 105]
[40 104]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
