%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUAACAGGGGGGGGGGAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUxxxxxxxxxxACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGCCCCCCCCCCAAUAAUAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 356.73217773]
[71.19830322 350.71615601]
[59.48964310 341.18673706]
[50.78712082 328.85107422]
[45.73651886 314.62457275]
[44.71262741 299.56286621]
[47.79142761 284.78372192]
[54.74444962 271.38378906]
[65.05573273 260.35745239]
[77.96011353 252.52294922]
[92.50000000 248.46163940]
[92.50000000 233.46163940]
[92.50000000 218.46163940]
[92.50000000 203.46163940]
[92.50000000 188.46163940]
[92.50000000 173.46163940]
[92.50000000 158.46163940]
[92.50000000 143.46163940]
[92.50000000 128.46163940]
[92.50000000 113.46163177]
[90.16889954 98.64387512]
[85.56333160 84.36841583]
[80.95776367 70.09295654]
[76.35220337 55.81749344]
[71.74663544 41.54203415]
[60.24483490 31.91350746]
[45.38178635 29.89117432]
[30.51874161 27.86883926]
[15.65569401 25.84650421]
[0.79264724 23.82417107]
[-14.07039928 21.80183601]
[-28.93344688 19.77950096]
[-35.71705246 33.31690979]
[-46.53043747 43.91640854]
[-60.20065308 50.42824554]
[-75.24485016 52.14606476]
[-90.03114319 48.88352585]
[-102.95563507 40.99453354]
[-112.61637115 29.33481789]
[-117.96542358 15.16914272]
[-118.42256927 0.03409277]
[-113.93821716 -14.42859459]
[-104.99880219 -26.65011597]
[-92.57400513 -35.30477142]
[-78.01156616 -39.45376968]
[-62.89111710 -38.64705658]
[-48.85281372 -32.97213745]
[-37.41941833 -23.04458809]
[-29.83114433 -9.94127560]
[-26.91111183 4.91645432]
[-12.04806519 6.93878889]
[2.81498170 8.96112347]
[17.67802811 10.98345757]
[32.54107666 13.00579262]
[47.40412140 15.02812672]
[62.26716995 17.05046082]
[68.20345306 -3.49986672]
[85.88479614 -11.32408047]
[89.59095764 -25.85901642]
[78.83491516 -15.40399170]
[66.05522156 -7.55036116]
[51.86885452 -2.67727661]
[36.96068573 -1.01999807]
[22.05044746 -2.65853405]
[7.85796499 -7.51378059]
[-4.93158817 -15.35133934]
[-15.70076561 -25.79283524]
[-23.92966080 -38.33417892]
[-29.22100449 -52.36990738]
[-31.31934357 -67.22241211]
[-30.12337685 -82.17465973]
[-25.69084358 -96.50479126]
[-18.23573303 -109.52098846]
[-8.11795807 -120.59485626]
[4.17402172 -129.19178772]
[18.04678345 -134.89674377]
[32.83058548 -137.43429565]
[47.81170654 -136.68196106]
[62.26689529 -132.67602539]
[75.49829865 -125.60990906]
[86.86713409 -115.82474518]
[95.82455444 -103.79292297]
[101.93811035 -90.09531403]
[104.91265869 -75.39320374]
[104.60459137 -60.39636993]
[101.02951050 -45.83079147]
[111.69113922 -56.38208008]
[122.35276031 -66.93337250]
[133.01438904 -77.48466492]
[129.03887939 -92.32012177]
[133.02920532 -107.15160370]
[143.91200256 -117.98950958]
[158.75985718 -121.91850281]
[173.57875061 -117.88169861]
[184.38249207 -106.96498108]
[188.26493835 -92.10488892]
[184.18170166 -77.29871368]
[173.23117065 -66.52924347]
[158.35897827 -62.69341278]
[143.56567383 -66.82303619]
[132.90405273 -56.27174377]
[122.24242401 -45.72045517]
[111.58080292 -35.16916275]
[104.12589264 -22.15285492]
[100.41973114 -7.61791897]
[107.55565643 -1.15329790]
[111.40135956 8.06118870]
[110.94900513 18.39221954]
[105.98362732 27.86711884]
[97.17956543 34.55040741]
[86.02210236 36.93647003]
[90.62766266 51.21192932]
[95.23323059 65.48738861]
[99.83879089 79.76285553]
[104.44435883 94.03831482]
[111.19103241 88.46085358]
[119.35172272 84.62963104]
[128.57586670 82.80253601]
[138.47189331 83.17467499]
[152.25427246 89.09463501]
[167.62765503 84.50786591]
[180.71609497 93.78538513]
[181.47924805 109.81027985]
[169.33169556 120.28961182]
[153.59199524 117.18454742]
[146.33430481 102.87702179]
[132.55192566 96.95705414]
[126.28894043 101.08319855]
[127.17296600 116.05712891]
[113.76297760 109.33548737]
[107.50000000 113.46163177]
[107.50000000 128.46163940]
[107.50000000 143.46163940]
[107.50000000 158.46163940]
[107.50000000 173.46163940]
[107.50000000 188.46163940]
[107.50000000 203.46163940]
[107.50000000 218.46163940]
[107.50000000 233.46163940]
[107.50000000 248.46163940]
[122.03988647 252.52294922]
[134.94427490 260.35745239]
[145.25555420 271.38378906]
[152.20857239 284.78372192]
[155.28736877 299.56286621]
[154.26348877 314.62457275]
[149.21287537 328.85107422]
[140.51036072 341.18673706]
[128.80169678 350.71615601]
[114.95575714 356.73217773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[58 105]
[59 104]
[86 103]
[87 102]
[88 101]
[89 100]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
