%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAGAAAGGGGGGGGGGACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAxxxxxxxxxxUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGCCCCCCCCCCACCCCCGAAA\
) } def
/len { sequence length } bind def

/coor [
[114.39044189 379.55389404]
[100.54450989 373.53787231]
[88.83584595 364.00845337]
[80.13332367 351.67279053]
[75.08271790 337.44625854]
[74.05883026 322.38458252]
[77.13762665 307.60543823]
[84.09064484 294.20550537]
[94.40193176 283.17916870]
[107.30631256 275.34466553]
[121.84619904 271.28335571]
[121.84619904 256.28335571]
[121.84619904 241.28335571]
[121.84619904 226.28335571]
[121.84619904 211.28335571]
[121.84619904 196.28335571]
[121.84619904 181.28335571]
[121.84619904 166.28335571]
[121.84619904 151.28335571]
[121.84619904 136.28335571]
[84.93858337 134.29533386]
[68.09575653 106.50766754]
[53.10306168 106.03962708]
[39.06818390 113.34255219]
[26.58853531 105.21189117]
[11.59583950 104.74385071]
[-3.39685678 104.27581024]
[-8.10694504 106.81246948]
[-12.83969688 107.20418549]
[-16.75941658 105.81224823]
[-19.30191040 103.28179169]
[-34.23621750 101.87948608]
[-49.17052460 100.47718811]
[-64.10483551 99.07488251]
[-79.03913879 97.67257690]
[-93.97344971 96.27027130]
[-104.97309113 107.38521576]
[-120.54854584 108.77783203]
[-133.34555054 99.79058075]
[-137.32174683 84.66696167]
[-130.59971619 70.54788971]
[-116.35337067 64.09995270]
[-101.30941772 68.36767578]
[-92.57114410 81.33596802]
[-77.63683319 82.73827362]
[-62.70252991 84.14057159]
[-47.76822281 85.54287720]
[-32.83391571 86.94518280]
[-17.89960670 88.34748840]
[-2.92881465 89.28311157]
[12.06388187 89.75115204]
[27.05657768 90.21920013]
[40.01907730 82.88278961]
[53.57110596 91.04692841]
[68.56380463 91.51496887]
[70.91213989 85.36693573]
[74.44878387 79.81669617]
[79.02925873 75.09099579]
[84.46643829 71.38289642]
[90.53820801 68.84386444]
[89.60257721 53.87307358]
[88.66694641 38.90228271]
[77.09917450 28.47038651]
[76.36357880 13.27454567]
[86.38008881 2.31073356]
[85.44445801 -12.66005802]
[84.50883484 -27.63084984]
[70.22257996 -32.90559387]
[59.32140732 -43.53970718]
[53.69400406 -57.69075394]
[54.31535339 -72.90699005]
[61.07780075 -86.55210876]
[72.80971527 -96.26200104]
[87.47846985 -100.35438538]
[102.54261017 -98.12021637]
[115.39218903 -89.94658661]
[123.80093384 -77.24962616]
[126.31198120 -62.22915649]
[122.49028015 -47.48756790]
[112.99796295 -35.57892609]
[99.47962189 -28.56647873]
[100.41525269 -13.59568691]
[101.35088348 1.37510502]
[112.65452576 11.00647354]
[113.81665039 26.17565727]
[103.63774109 37.96665192]
[104.57336426 52.93744659]
[105.50899506 67.90823364]
[114.61033630 68.18538666]
[123.87170410 71.13552094]
[132.49397278 76.83695221]
[139.65557861 85.12813568]
[151.91795349 76.48902130]
[164.18032837 67.84989929]
[164.27163696 52.33309555]
[173.49316406 39.85338974]
[188.29904175 35.20948410]
[202.99609375 40.18705750]
[211.93301392 52.87213135]
[211.67337036 68.38703156]
[202.31700134 80.76596832]
[187.46162415 85.24898529]
[172.81944275 80.11227417]
[160.55706787 88.75138855]
[148.29470825 97.39050293]
[151.39302063 112.06703186]
[166.10098267 115.01251221]
[180.80894470 117.95799255]
[195.85977173 113.08120728]
[206.81991577 123.16706848]
[221.52787781 126.11254883]
[235.86991882 116.15044403]
[252.65576172 119.54448700]
[261.63992310 133.72697449]
[276.40597534 136.36584473]
[291.63674927 130.28678894]
[304.34753418 140.64866638]
[301.46252441 156.79205322]
[285.94958496 162.11001587]
[273.76708984 151.13189697]
[259.00103760 148.49302673]
[249.53010559 157.28495789]
[236.52799988 159.02264404]
[224.73515320 152.84553528]
[218.58239746 140.82051086]
[203.87443542 137.87503052]
[189.87562561 142.96249390]
[177.86346436 132.66595459]
[163.15550232 129.72047424]
[148.44754028 126.77499390]
[136.84620667 136.28335571]
[136.84620667 151.28335571]
[136.84620667 166.28335571]
[136.84620667 181.28335571]
[136.84620667 196.28335571]
[136.84620667 211.28335571]
[136.84620667 226.28335571]
[136.84620667 241.28335571]
[136.84620667 256.28335571]
[136.84620667 271.28335571]
[151.38609314 275.34466553]
[164.29046631 283.17916870]
[174.60174561 294.20550537]
[181.55477905 307.60543823]
[184.63357544 322.38458252]
[183.60968018 337.44625854]
[178.55908203 351.67279053]
[169.85655212 364.00845337]
[158.14788818 373.53787231]
[144.30195618 379.55389404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 55]
[23 54]
[25 52]
[26 51]
[27 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[60 88]
[61 87]
[62 86]
[65 83]
[66 82]
[67 81]
[92 105]
[93 104]
[94 103]
[106 130]
[107 129]
[108 128]
[110 126]
[111 125]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
