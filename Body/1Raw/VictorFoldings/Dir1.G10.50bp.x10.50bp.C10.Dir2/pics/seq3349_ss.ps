%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAAUCGCGGGGGGGGGGAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACxxxxxxxxxxAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCCCCCCCCCCCUUCUAAACGC\
) } def
/len { sequence length } bind def

/coor [
[83.37289429 364.12768555]
[70.15270233 356.85522461]
[59.26589584 346.40823364]
[51.45476532 333.49896240]
[47.25188446 319.00765991]
[46.94381332 303.92230225]
[50.55155563 289.27148438]
[57.82912827 276.05410767]
[68.28033447 265.17132568]
[81.19259644 257.36520386]
[95.68553162 253.16790771]
[95.37347412 238.17115784]
[95.06141663 223.17439270]
[94.74936676 208.17764282]
[94.43730927 193.18089294]
[94.12525177 178.18414307]
[93.81319427 163.18737793]
[93.50113678 148.19062805]
[93.18907928 133.19387817]
[92.87702942 118.19712067]
[86.83703613 113.75094604]
[77.94448090 125.83078766]
[65.86479187 116.93804169]
[74.75704193 104.85859680]
[68.71704865 100.41242218]
[54.30483246 104.57031250]
[39.89261627 108.72819519]
[25.48040199 112.88608551]
[11.06818581 117.04397583]
[-2.47428083 127.24387360]
[-16.02449226 117.05426025]
[-9.98416805 101.21283722]
[6.91029835 102.63175964]
[21.32251358 98.47386932]
[35.73472977 94.31597900]
[50.14694595 90.15809631]
[64.55916595 86.00020599]
[65.26031494 78.53305054]
[50.62360382 81.81431580]
[42.97996521 68.90792847]
[52.89267349 57.65011978]
[66.66262054 63.59874725]
[67.36376953 56.13159180]
[53.97748566 49.36347580]
[40.59120178 42.59536362]
[26.28804398 48.91625977]
[11.28266525 44.51482773]
[2.66014385 31.46928596]
[4.49177170 15.93934250]
[15.91270924 5.25776052]
[31.53034019 4.46805668]
[43.97049713 13.94310474]
[47.35931396 29.20907784]
[60.74560165 35.97719193]
[74.13188171 42.74530792]
[92.52298737 56.51145172]
[102.12882233 74.66323090]
[102.22962952 93.65487671]
[112.44310760 82.66921234]
[122.65658569 71.68354797]
[132.87007141 60.69787979]
[143.08354187 49.71221542]
[153.29702759 38.72655106]
[143.39193726 27.44470215]
[134.67903137 15.21864414]
[127.24775696 2.17383385]
[121.17434692 -11.55586624]
[116.52112579 -25.82956696]
[113.33584595 -40.50079727]
[111.65119171 -55.41900635]
[111.48445129 -70.43110657]
[112.83734131 -85.38305664]
[115.69597626 -100.12141418]
[120.03101349 -114.49494934]
[125.79798126 -128.35615540]
[132.93768311 -141.56280518]
[141.37687683 -153.97937012]
[151.02894592 -165.47843933]
[161.79486084 -175.94200134]
[173.56411743 -185.26271057]
[186.21597290 -193.34489441]
[199.62057495 -200.10562134]
[213.64039612 -205.47552490]
[228.13154602 -209.39949036]
[242.94532776 -211.83726501]
[257.92974854 -212.76380920]
[272.93099976 -212.16964722]
[287.79519653 -210.06085205]
[302.36975098 -206.45907593]
[316.50515747 -201.40126038]
[330.05633545 -194.93934631]
[342.88424683 -187.13960266]
[354.85723877 -178.08207703]
[365.85244751 -167.85972595]
[375.75704956 -156.57743835]
[384.46939087 -144.35099792]
[391.90008545 -131.30586243]
[397.97290039 -117.57589722]
[402.62548828 -103.30198669]
[405.81015015 -88.63061523]
[407.49414062 -73.71233368]
[407.66021729 -58.70022583]
[406.30667114 -43.74834061]
[403.44738770 -29.01010513]
[399.11169434 -14.63676357]
[393.34414673 -0.77580810]
[386.20385742 12.43052578]
[377.76409912 24.84671974]
[368.11154175 36.34535980]
[357.34515381 46.80845642]
[345.57550049 56.12863922]
[332.92327881 64.21026611]
[319.51837158 70.97040558]
[305.49832153 76.33969116]
[291.00698853 80.26301575]
[276.19311523 82.70013428]
[261.20864868 83.62602997]
[246.20741272 83.03120422]
[231.34332275 80.92176056]
[216.76890564 77.31933594]
[202.63372803 72.26091003]
[189.08283997 65.79838562]
[176.25527954 57.99807739]
[164.28269958 48.94002914]
[154.06921387 59.92569351]
[143.85572815 70.91136169]
[133.64225769 81.89702606]
[123.42877197 92.88269043]
[113.21529388 103.86835480]
[107.87377930 117.88506317]
[108.18583679 132.88182068]
[108.49789429 147.87857056]
[108.80995178 162.87532043]
[109.12200165 177.87208557]
[109.43405914 192.86883545]
[109.74611664 207.86558533]
[110.05817413 222.86233521]
[110.37023163 237.85910034]
[110.68228912 252.85585022]
[125.33728027 256.44662476]
[138.56309509 263.70886230]
[149.45796204 274.14746094]
[157.27905273 287.05068970]
[161.49311829 301.53875732]
[161.81285095 316.62384033]
[158.21641541 331.27743530]
[150.94905090 344.50045776]
[140.50625610 355.39129639]
[127.60002136 363.20739746]
[113.11033630 367.41589355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[43 55]
[44 54]
[45 53]
[58 129]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
