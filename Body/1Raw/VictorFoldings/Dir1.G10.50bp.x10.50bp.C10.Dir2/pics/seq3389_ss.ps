%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCCCCAACGGGGGGGGGGGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUxxxxxxxxxxCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGCCCCCCCCCCAAAUGCCCCAAC\
) } def
/len { sequence length } bind def

/coor [
[80.99182892 352.95761108]
[67.78375244 345.72152710]
[56.44030762 335.81494141]
[47.49205399 323.70120239]
[41.35751343 309.94686890]
[38.32361603 295.19528198]
[38.53225708 280.13638306]
[41.97368240 265.47451782]
[48.48692322 251.89541626]
[57.76735306 240.03422546]
[69.38089752 230.44570923]
[82.78438568 223.57835388]
[97.35089874 219.75332642]
[96.74301147 204.76565552]
[96.13513184 189.77796936]
[95.52724457 174.79029846]
[94.91936493 159.80261230]
[94.31147766 144.81494141]
[93.70359802 129.82727051]
[93.09571075 114.83958435]
[81.81394196 104.95416260]
[66.87628937 106.32038116]
[51.93863297 107.68659210]
[37.00098038 109.05281067]
[22.06332970 110.41902924]
[7.12567806 111.78524780]
[-7.81197405 113.15146637]
[-22.74962616 114.51767731]
[-37.68727875 115.88389587]
[-52.59417343 117.55257416]
[-67.46418762 119.52302551]
[-82.33419800 121.49347687]
[-97.20421600 123.46392822]
[-109.86926270 133.88163757]
[-125.12667084 127.86966705]
[-127.28091431 111.61263275]
[-114.11590576 101.83436584]
[-99.17466736 108.59391022]
[-84.30465698 106.62345886]
[-69.43463898 104.65300751]
[-54.56462479 102.68255615]
[-50.97080994 99.45639801]
[-45.29494858 98.49192047]
[-39.05349350 100.94624329]
[-24.11584282 99.58002472]
[-9.17819118 98.21381378]
[5.75946093 96.84759521]
[20.69711304 95.48137665]
[35.63476562 94.11515808]
[50.57241821 92.74893951]
[65.51007080 91.38272858]
[80.44772339 90.01651001]
[88.47047424 86.58357239]
[95.76254272 87.26017761]
[100.61975861 90.85870361]
[109.68067169 78.90462494]
[118.74158478 66.95055389]
[127.80249786 54.99648285]
[136.86341858 43.04240799]
[131.26565552 34.82901001]
[128.28872681 25.17919922]
[128.28604126 14.92163563]
[131.35124207 4.96625805]
[137.30175781 -3.77642727]
[145.68708801 -10.47851944]
[155.82206726 -14.47275734]
[166.84236145 -15.31809139]
[177.77824402 -12.84642506]
[183.41299438 -26.74784660]
[181.42640686 -42.44383621]
[193.37805176 -51.33245850]
[199.01280212 -65.23387909]
[186.37104797 -57.16009521]
[171.49256897 -55.25456619]
[157.22415161 -59.88188553]
[146.29582214 -70.15669250]
[140.79855347 -84.11305237]
[141.78416443 -99.08063507]
[149.06407166 -112.19562531]
[161.24537659 -120.94866943]
[175.99737549 -123.66500092]
[190.49749756 -119.82490540]
[201.97137451 -110.16311646]
[208.22364807 -96.52826691]
[208.05850220 -81.53110504]
[216.87527466 -93.66635895]
[225.69206238 -105.80161285]
[234.50883484 -117.93686676]
[243.32560730 -130.07212830]
[239.36723328 -145.20042419]
[246.10591125 -159.31155396]
[260.35983276 -165.74269104]
[275.39874268 -161.45724487]
[284.12173462 -148.47866821]
[282.41006470 -132.93504333]
[271.07192993 -122.16560364]
[255.46086121 -121.25534821]
[246.64408875 -109.12008667]
[237.82731628 -96.98483276]
[229.01052856 -84.84957886]
[220.19375610 -72.71432495]
[212.91423035 -59.59912491]
[207.27946472 -45.69770432]
[209.66909790 -30.99603844]
[197.31442261 -21.11309052]
[191.67967224 -7.21166945]
[200.12348938 5.18598843]
[215.12271118 5.03397846]
[230.12194824 4.88196850]
[245.12117004 4.72995853]
[260.12039185 4.57794857]
[268.24188232 -8.53865623]
[282.17529297 -15.16162014]
[297.47451782 -13.17757893]
[309.25769043 -3.21963263]
[313.76480103 11.53467369]
[309.55764771 26.37729454]
[297.97872925 36.57200623]
[282.72280884 38.86570740]
[268.65805054 32.52649307]
[260.27239990 19.57717896]
[245.27317810 19.72918892]
[230.27395630 19.88119888]
[215.27471924 20.03320885]
[200.27549744 20.18521881]
[191.62490845 43.39981842]
[171.20785522 55.44675064]
[148.81748962 52.10332108]
[139.75657654 64.05739594]
[130.69566345 76.01146698]
[121.63475037 87.96553802]
[112.57383728 99.91961670]
[108.08338928 114.23170471]
[108.69126892 129.21937561]
[109.29915619 144.20706177]
[109.90703583 159.19473267]
[110.51492310 174.18241882]
[111.12281036 189.17008972]
[111.73069000 204.15776062]
[112.33857727 219.14544678]
[127.16700745 221.77824402]
[141.08261108 227.53756714]
[153.43453979 236.15406799]
[163.64506531 247.22473145]
[171.23660278 260.23175049]
[175.85411072 274.56677246]
[177.28160095 289.55929565]
[175.45231628 304.50814819]
[170.45182800 318.71408081]
[162.51399231 331.51272583]
[152.01008606 342.30541992]
[139.43139648 350.58737183]
[125.36625671 355.97122192]
[110.47251892 358.20516968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 41]
[31 40]
[32 39]
[33 38]
[55 132]
[56 131]
[57 130]
[58 129]
[59 128]
[68 106]
[69 105]
[71 103]
[72 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
