%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCACAUAGGGGGGGGGGCUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAxxxxxxxxxxAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCCCCCCCCCCCAGCCACAUA\
) } def
/len { sequence length } bind def

/coor [
[75.15296936 430.07891846]
[61.30702972 424.06289673]
[49.59836960 414.53347778]
[40.89584351 402.19781494]
[35.84524155 387.97128296]
[34.82135010 372.90960693]
[37.90015030 358.13046265]
[44.85317230 344.73052979]
[55.16445541 333.70419312]
[68.06884003 325.86968994]
[82.60872650 321.80838013]
[82.60872650 306.80838013]
[82.60872650 291.80838013]
[82.60872650 276.80838013]
[82.60872650 261.80838013]
[82.60872650 246.80838013]
[82.60872650 231.80838013]
[82.60872650 216.80838013]
[82.60872650 201.80838013]
[82.60872650 186.80838013]
[70.98789215 196.29289246]
[56.04598999 194.97393799]
[46.26634979 183.60034180]
[47.20139694 168.62951660]
[58.32025528 158.56120300]
[73.31015015 159.11172485]
[83.66107178 169.96997070]
[85.52868652 155.08668518]
[87.39630127 140.20341492]
[81.31753540 137.76417542]
[75.69027710 134.41227722]
[70.65052032 130.22871399]
[66.32006836 125.31461334]
[62.80357742 119.78871918]
[60.18602371 113.78458405]
[58.53067398 107.44730377]
[57.87752914 100.93004608]
[58.24238205 94.39031219]
[59.61640549 87.98615265]
[46.23011780 81.21803284]
[32.84383392 74.44992065]
[19.45755005 67.68180847]
[6.07126474 60.91369247]
[-7.31502008 54.14557648]
[-20.56189537 62.05278015]
[-35.98006058 61.52010345]
[-48.64963531 52.71752167]
[-54.52780151 38.45390701]
[-51.73886108 23.28072739]
[-41.17275620 12.03968906]
[-26.20108795 8.31776714]
[-11.60126400 13.30261230]
[-2.03203416 25.40357780]
[-0.54690534 40.75929260]
[12.83937931 47.52740479]
[26.22566414 54.29552078]
[39.61194992 61.06363678]
[52.99823380 67.83174896]
[66.38452148 74.59986877]
[90.01521301 59.06747818]
[118.14377594 61.97407913]
[126.90998840 49.80224228]
[129.41036987 40.94786835]
[135.98733521 37.47093201]
[145.00486755 25.48409843]
[154.02239990 13.49726582]
[143.88188171 2.38843966]
[135.95747375 -10.39123154]
[130.51780701 -24.40573883]
[127.74678802 -39.17726135]
[127.73734283 -54.20245361]
[130.48832703 -68.96961212]
[135.90460205 -82.97606659]
[143.80033875 -95.74534607]
[153.90541077 -106.84332275]
[165.87455750 -115.89302826]
[179.29927063 -122.58743286]
[193.72171021 -126.69984436]
[208.65026855 -128.09162903]
[223.57638550 -126.71683502]
[237.99188232 -122.62374878]
[251.40618896 -115.95317078]
[260.42370605 -127.94001007]
[269.44125366 -139.92683411]
[278.45877075 -151.91366577]
[271.84722900 -165.71751404]
[272.41952515 -181.01231384]
[280.04418945 -194.28344727]
[292.96911621 -202.48132324]
[308.22424316 -203.72210693]
[322.30404663 -197.72067261]
[331.97314453 -185.85612488]
[335.00958252 -170.85484314]
[330.71563721 -156.16400146]
[320.07803345 -145.15945435]
[305.54119873 -140.36997986]
[290.44561768 -142.89614868]
[281.42807007 -130.90931702]
[272.41055298 -118.92247772]
[263.39303589 -106.93564606]
[273.52053833 -95.89601135]
[281.44909668 -83.17997742]
[286.90744019 -69.21982574]
[289.70828247 -54.49045944]
[289.75479126 -39.49325180]
[287.04397583 -24.73894882]
[281.66662598 -10.73030663]
[273.80456543 2.05505991]
[263.72430420 13.18095398]
[251.76806641 22.26747704]
[238.34211731 29.00400162]
[223.90307617 33.15979767]
[208.94227600 34.59191513]
[193.96910095 33.25012970]
[179.49362183 29.17867088]
[166.00923157 22.51479530]
[156.99169922 34.50162888]
[147.97416687 46.48846054]
[139.08181763 58.56844711]
[130.31561279 70.74028778]
[137.32992554 80.46428680]
[141.32118225 91.77033997]
[141.96615601 103.74284363]
[139.21263123 115.41224670]
[133.28356934 125.83352661]
[124.65914154 134.16275024]
[114.03776550 139.72541809]
[102.27957916 142.07102966]
[100.41196442 156.95429993]
[98.54434967 171.83758545]
[97.60872650 186.80838013]
[97.60872650 201.80838013]
[97.60872650 216.80838013]
[97.60872650 231.80838013]
[97.60872650 246.80838013]
[97.60872650 261.80838013]
[97.60872650 276.80838013]
[97.60872650 291.80838013]
[97.60872650 306.80838013]
[97.60872650 321.80838013]
[112.14861298 325.86968994]
[125.05299377 333.70419312]
[135.36427307 344.73052979]
[142.31729126 358.13046265]
[145.39610291 372.90960693]
[144.37220764 387.97128296]
[139.32160950 402.19781494]
[130.61907959 414.53347778]
[118.91041565 424.06289673]
[105.06447601 430.07891846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 130]
[28 129]
[29 128]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[61 120]
[62 119]
[64 118]
[65 117]
[66 116]
[82 100]
[83 99]
[84 98]
[85 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
