%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAGUACCGGGGGGGGGGUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUxxxxxxxxxxCUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUCCCCCCCCCCAAAUAGUACC\
) } def
/len { sequence length } bind def

/coor [
[106.42089844 478.05410767]
[92.57495880 472.03808594]
[80.86629486 462.50866699]
[72.16377258 450.17300415]
[67.11316681 435.94647217]
[66.08927917 420.88479614]
[69.16807556 406.10565186]
[76.12110138 392.70571899]
[86.43238068 381.67938232]
[99.33676147 373.84487915]
[113.87664795 369.78356934]
[113.87664795 354.78356934]
[113.87664795 339.78356934]
[113.87664795 324.78356934]
[113.87664795 309.78356934]
[113.87664795 294.78356934]
[113.87664795 279.78356934]
[113.87664795 264.78356934]
[113.87664795 249.78355408]
[113.87664795 234.78355408]
[102.57312012 230.14710999]
[93.57208252 221.82531738]
[88.02779388 210.84625244]
[86.66481781 198.58117676]
[89.68350220 186.57316589]
[96.73108673 176.34310913]
[106.94268799 169.19699097]
[103.84436798 154.52046204]
[100.74604797 139.84393311]
[97.64772034 125.16741180]
[69.58788300 111.43577576]
[71.17272949 72.69635773]
[56.52922821 69.44552612]
[41.88572693 66.19470215]
[27.24222565 62.94387817]
[12.59872437 59.69305038]
[3.57063127 71.95736694]
[-9.66849804 79.48367310]
[-24.82490540 80.96800232]
[-39.27265167 76.15317535]
[-50.50857544 65.87339020]
[-56.58598328 51.90969086]
[-56.45193481 36.68136597]
[-50.12965012 22.82681274]
[-38.71450043 12.74642277]
[-24.18423462 8.18667984]
[-9.05630684 9.93758869]
[4.04827833 17.69579315]
[12.85907173 30.11713791]
[15.84955025 45.04954910]
[30.49305153 48.30037689]
[45.13655472 51.55120087]
[59.78005600 54.80202866]
[74.42355347 58.05285263]
[85.82457733 48.30520248]
[84.88894653 33.33440781]
[83.95332336 18.36361694]
[69.57310486 9.51705933]
[63.33888626 -5.99474430]
[67.51396942 -22.01144218]
[80.26921844 -32.29779053]
[79.02234650 -47.24588013]
[77.77546692 -62.19396591]
[76.52859497 -77.14205170]
[61.79808426 -80.58694458]
[48.85411453 -88.41693878]
[38.96480560 -99.86494446]
[33.09901047 -113.80938721]
[31.83139610 -128.88414001]
[35.28615570 -143.61235046]
[43.12482452 -156.55107117]
[54.57944870 -166.43270874]
[68.52782440 -172.28915405]
[83.60343170 -173.54666138]
[98.32930756 -170.08203125]
[111.26277161 -162.23469543]
[121.13673401 -150.77345276]
[126.98383331 -136.82116699]
[128.23124695 -121.74471283]
[124.75675201 -107.02116394]
[116.90074921 -94.09295654]
[105.43289185 -84.22668457]
[91.47668457 -78.38893127]
[92.72355652 -63.44084167]
[93.97042847 -48.49275208]
[95.21730804 -33.54466629]
[107.25514221 -27.68920517]
[114.87528992 -16.55166054]
[115.98947906 -2.99404049]
[110.19831848 9.43477535]
[98.92411041 17.42798996]
[99.85974121 32.39878082]
[100.79537201 47.36957169]
[107.18404388 51.29828644]
[115.04168701 38.52105713]
[127.81877899 46.37890625]
[119.96140289 59.15571213]
[126.35008240 63.08442307]
[140.13246155 57.16445923]
[153.91484070 51.24449921]
[167.69721985 45.32453537]
[177.07151794 31.86887741]
[193.38644409 33.52883911]
[199.85859680 48.59679413]
[189.82998657 61.57212067]
[173.61718750 59.10691452]
[159.83480835 65.02687836]
[146.05242920 70.94683838]
[132.27005005 76.86680603]
[131.70964050 107.08328247]
[112.32424927 122.06909180]
[115.42256927 136.74562073]
[118.52088928 151.42214966]
[121.61921692 166.09866333]
[140.79116821 172.26768494]
[153.29872131 187.85484314]
[155.13925171 207.59913635]
[168.92163086 213.51910400]
[182.70402527 219.43907166]
[196.48640442 225.35902405]
[211.85978699 220.77226257]
[224.94822693 230.04977417]
[225.71138000 246.07466125]
[213.56382751 256.55401611]
[197.82412720 253.44894409]
[190.56643677 239.14140320]
[176.78405762 233.22145081]
[163.00167847 227.30148315]
[149.21929932 221.38151550]
[140.27583313 229.94628906]
[128.87664795 234.78355408]
[128.87664795 249.78355408]
[128.87664795 264.78356934]
[128.87664795 279.78356934]
[128.87664795 294.78356934]
[128.87664795 309.78356934]
[128.87664795 324.78356934]
[128.87664795 339.78356934]
[128.87664795 354.78356934]
[128.87664795 369.78356934]
[143.41653442 373.84487915]
[156.32092285 381.67938232]
[166.63220215 392.70571899]
[173.58522034 406.10565186]
[176.66401672 420.88479614]
[175.64013672 435.94647217]
[170.58952332 450.17300415]
[161.88700867 462.50866699]
[150.17834473 472.03808594]
[136.33239746 478.05410767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 114]
[28 113]
[29 112]
[30 111]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[55 93]
[56 92]
[57 91]
[61 86]
[62 85]
[63 84]
[64 83]
[98 109]
[99 108]
[100 107]
[101 106]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
