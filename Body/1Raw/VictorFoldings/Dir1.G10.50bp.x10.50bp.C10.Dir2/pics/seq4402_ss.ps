%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGCAUUGGGGGGGGGGACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCxxxxxxxxxxCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCCCCCCCCCCCUAGGAUU\
) } def
/len { sequence length } bind def

/coor [
[79.71875763 394.02090454]
[65.87281799 388.00488281]
[54.16415405 378.47546387]
[45.46162796 366.13980103]
[40.41102600 351.91326904]
[39.38713837 336.85159302]
[42.46593475 322.07241821]
[49.41895676 308.67251587]
[59.73023987 297.64617920]
[72.63462067 289.81167603]
[87.17450714 285.75033569]
[87.17450714 270.75033569]
[87.17450714 255.75035095]
[87.17450714 240.75035095]
[87.17450714 225.75035095]
[87.17450714 210.75035095]
[87.17450714 195.75035095]
[87.17450714 180.75035095]
[87.17450714 165.75035095]
[87.17450714 150.75035095]
[84.00893402 144.01799011]
[87.33379364 135.43910217]
[87.64585114 120.44235229]
[85.46028137 116.30495453]
[84.32773590 112.11168671]
[84.18572998 108.09917450]
[84.92254639 104.47779846]
[69.92985535 104.94583893]
[54.93715668 105.41387939]
[39.55459595 115.48149109]
[24.41254616 106.66568756]
[9.43283176 107.44553375]
[-5.54688215 108.22537994]
[-20.52659607 109.00522614]
[-33.98114777 118.38110352]
[-48.71124649 111.17304230]
[-49.56383133 94.79606628]
[-35.66183853 86.09741974]
[-21.30644226 94.02550507]
[-6.32672739 93.24566650]
[8.65298748 92.46582031]
[23.63270187 91.68597412]
[31.99633980 82.89069366]
[44.51340866 82.15451813]
[54.46911240 90.42118835]
[69.46180725 89.95314026]
[84.45450592 89.48509979]
[69.59498596 87.43701172]
[57.95171738 77.98004150]
[52.90050888 63.85611343]
[55.90589523 49.16027451]
[66.09650421 38.15338898]
[80.51770020 34.02675629]
[94.98825073 37.97683716]
[105.31261444 48.85836411]
[108.49737549 63.51637268]
[103.62054443 77.69895935]
[110.80304718 64.53038025]
[117.98555756 51.36179733]
[125.16806793 38.19321442]
[132.35057068 25.02463150]
[137.25212097 10.84807396]
[139.73724365 -3.94463301]
[142.22236633 -18.73734093]
[144.70748901 -33.53004837]
[130.70027161 -39.05197906]
[118.14744568 -47.36583710]
[107.59775543 -58.10817337]
[99.51239777 -70.80937958]
[94.24481964 -84.91420746]
[92.02529907 -99.80606842]
[92.95086670 -114.83394623]
[96.98106384 -129.34088135]
[103.93969727 -142.69270325]
[113.52257538 -154.30570984]
[125.31077576 -163.67225647]
[138.78895569 -170.38285828]
[153.36791992 -174.14416504]
[168.41033936 -174.79174805]
[183.25862122 -172.29728699]
[197.26365662 -166.76985168]
[209.81321716 -158.45104980]
[220.35867310 -147.70457458]
[228.43904114 -135.00018311]
[233.70106506 -120.89328003]
[235.91473389 -106.00054932]
[234.98324585 -90.97304535]
[230.94734192 -76.46768951]
[223.98345947 -63.11861420]
[214.39601135 -51.50936890]
[202.60412598 -42.14746475]
[189.12330627 -35.44216156]
[174.54286194 -31.68659210]
[159.50018311 -31.04492950]
[157.01507568 -16.25222206]
[154.52995300 -1.45951450]
[152.04483032 13.33319283]
[162.08349609 2.18755770]
[175.28340149 -4.93723536]
[190.10978699 -7.21279240]
[204.83882141 -4.37453651]
[217.75794983 3.24753046]
[227.36509705 14.76719761]
[232.54324341 28.84508324]
[232.69032288 43.84436035]
[227.78924561 58.02108002]
[218.40983582 69.72692871]
[205.64265442 77.60086823]
[190.97210693 80.72740936]
[176.10394287 78.74302673]
[162.76687622 71.87844849]
[152.51158142 60.93181229]
[146.53042603 47.17587280]
[145.51916504 32.20714188]
[138.33665466 45.37572479]
[131.15414429 58.54430771]
[123.97163391 71.71289062]
[116.78912354 84.88146973]
[121.54293823 99.10825348]
[135.19917297 105.31365967]
[148.85542297 111.51906586]
[165.11599731 109.39167786]
[174.87249756 122.57283020]
[168.08827209 137.50288391]
[151.74235535 138.82307434]
[142.65000916 125.17530823]
[128.99377441 118.96990204]
[115.33753204 112.76448822]
[102.64260101 120.75440979]
[102.33054352 135.75115967]
[102.17450714 150.75035095]
[102.17450714 165.75035095]
[102.17450714 180.75035095]
[102.17450714 195.75035095]
[102.17450714 210.75035095]
[102.17450714 225.75035095]
[102.17450714 240.75035095]
[102.17450714 255.75035095]
[102.17450714 270.75033569]
[102.17450714 285.75033569]
[116.71439362 289.81167603]
[129.61877441 297.64617920]
[139.93006897 308.67251587]
[146.88308716 322.07241821]
[149.96188354 336.85159302]
[148.93798828 351.91326904]
[143.88739014 366.13980103]
[135.18486023 378.47546387]
[123.47620392 388.00488281]
[109.63026428 394.02090454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[27 47]
[28 46]
[29 45]
[31 42]
[32 41]
[33 40]
[34 39]
[57 118]
[58 117]
[59 116]
[60 115]
[61 114]
[62 97]
[63 96]
[64 95]
[65 94]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
