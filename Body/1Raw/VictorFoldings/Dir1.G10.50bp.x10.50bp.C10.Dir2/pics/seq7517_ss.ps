%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUUUCCUGGGGGGGGGGUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACxxxxxxxxxxCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGCCCCCCCCCCUCACUUUCCU\
) } def
/len { sequence length } bind def

/coor [
[77.41220856 365.92559814]
[63.56626892 359.90957642]
[51.85760498 350.38015747]
[43.15508270 338.04446411]
[38.10448074 323.81796265]
[37.08058929 308.75628662]
[40.15938950 293.97711182]
[47.11241150 280.57717896]
[57.42369461 269.55084229]
[70.32807159 261.71633911]
[84.86796570 257.65502930]
[84.86796570 242.65502930]
[84.86796570 227.65502930]
[84.86796570 212.65502930]
[84.86796570 197.65502930]
[84.86796570 182.65502930]
[84.86796570 167.65502930]
[84.86796570 152.65502930]
[84.86796570 137.65502930]
[84.86796570 122.65502930]
[80.06562042 112.70963287]
[80.19602966 103.05918121]
[84.12059784 95.75759888]
[89.98370361 91.97622681]
[95.72837830 91.81645203]
[93.24325562 77.02374268]
[78.30960083 78.49435425]
[63.31040573 78.94242096]
[48.31559372 78.36585236]
[33.39508820 76.76734924]
[18.61845016 74.15435791]
[4.05457973 70.53905487]
[-10.22862148 65.93830109]
[-24.16455650 60.37355423]
[-37.68825150 53.87075043]
[-50.73664856 46.46021271]
[-63.24891281 38.17649460]
[-75.16670227 29.05821609]
[-86.43445587 19.14789391]
[-96.99963379 8.49173164]
[-106.81297302 -2.86058450]
[-115.82872772 -14.85612392]
[-124.00485229 -27.43895912]
[-131.30322266 -40.55041885]
[-137.68983459 -54.12937546]
[-143.13487244 -68.11251831]
[-147.61299133 -82.43463898]
[-151.10327148 -97.02897644]
[-153.58946228 -111.82747650]
[-155.05998230 -126.76113892]
[-155.50793457 -141.76034546]
[-154.93127441 -156.75515747]
[-153.33267212 -171.67564392]
[-150.71957397 -186.45227051]
[-147.10417175 -201.01611328]
[-142.50332642 -215.29928589]
[-136.93849182 -229.23518372]
[-130.43559265 -242.75883484]
[-123.02497101 -255.80717468]
[-114.74116516 -268.31939697]
[-105.62281036 -280.23712158]
[-95.71240997 -291.50479126]
[-85.05617523 -302.06991577]
[-73.70379639 -311.88317871]
[-61.70819855 -320.89883423]
[-49.12530899 -329.07489014]
[-36.01379776 -336.37316895]
[-22.43479919 -342.75967407]
[-8.45162201 -348.20465088]
[5.87053394 -352.68264771]
[20.46489334 -356.17285156]
[35.26340866 -358.65893555]
[50.19708252 -360.12933350]
[65.19628906 -360.57720947]
[80.19109344 -360.00045776]
[95.11157990 -358.40173340]
[109.88817596 -355.78854370]
[124.45200348 -352.17306519]
[138.73513794 -347.57211304]
[152.67100525 -342.00717163]
[166.19461060 -335.50418091]
[179.24290466 -328.09347534]
[191.75506592 -319.80960083]
[203.67272949 -310.69116211]
[214.94035339 -300.78067017]
[225.50538635 -290.12435913]
[235.31857300 -278.77191162]
[244.33416748 -266.77627563]
[252.51011658 -254.19331360]
[259.80831909 -241.08175659]
[266.19473267 -227.50271606]
[271.63958740 -213.51950073]
[276.11752319 -199.19732666]
[279.60760498 -184.60293579]
[282.09359741 -169.80441284]
[283.56390381 -154.87072754]
[284.01168823 -139.87150574]
[283.43481445 -124.87671661]
[281.83599854 -109.95623779]
[279.22271729 -95.17965698]
[275.60711670 -80.61585999]
[271.00607300 -66.33274841]
[265.44104004 -52.39692307]
[258.93798828 -38.87336349]
[251.52717590 -25.82511330]
[243.24320984 -13.31301594]
[234.12469482 -1.39540780]
[224.21414185 9.87214470]
[213.55776978 20.43710709]
[202.20524597 30.25021935]
[190.20953369 39.26573181]
[177.62652588 47.44160080]
[164.51492310 54.73971558]
[150.93583679 61.12604523]
[136.95259094 66.57081604]
[122.63037109 71.04862976]
[108.03596497 74.53862762]
[110.52108765 89.33132935]
[119.41343689 101.41132355]
[132.79971313 108.17943573]
[146.18600464 114.94754791]
[159.57229614 121.71566772]
[175.90728760 120.26654053]
[185.10702515 133.84213257]
[177.70759583 148.47705078]
[161.32090759 149.11613464]
[152.80416870 135.10194397]
[139.41789246 128.33383179]
[126.03160095 121.56571960]
[112.64531708 114.79760742]
[99.86796570 122.65502930]
[99.86796570 137.65502930]
[99.86796570 152.65502930]
[99.86796570 167.65502930]
[99.86796570 182.65502930]
[99.86796570 197.65502930]
[99.86796570 212.65502930]
[99.86796570 227.65502930]
[99.86796570 242.65502930]
[99.86796570 257.65502930]
[114.40785217 261.71633911]
[127.31223297 269.55084229]
[137.62351990 280.57717896]
[144.57653809 293.97711182]
[147.65533447 308.75628662]
[146.63143921 323.81796265]
[141.58084106 338.04446411]
[132.87831116 350.38015747]
[121.16965485 359.90957642]
[107.32371521 365.92559814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 118]
[26 117]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
