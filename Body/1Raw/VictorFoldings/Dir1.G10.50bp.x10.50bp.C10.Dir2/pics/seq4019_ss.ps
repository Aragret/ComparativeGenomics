%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCUUGCCGGGGGGGGGGGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGxxxxxxxxxxUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCCCCCCCCCCCGUCCUUGCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 375.06948853]
[71.19830322 369.05346680]
[59.48964310 359.52404785]
[50.78712082 347.18838501]
[45.73651886 332.96185303]
[44.71262741 317.90017700]
[47.79142761 303.12100220]
[54.74444962 289.72109985]
[65.05573273 278.69476318]
[77.96011353 270.86026001]
[92.50000000 266.79895020]
[92.50000000 251.79893494]
[92.50000000 236.79893494]
[92.50000000 221.79893494]
[92.50000000 206.79893494]
[92.50000000 191.79893494]
[92.50000000 176.79893494]
[92.50000000 161.79893494]
[92.50000000 146.79893494]
[92.50000000 131.79893494]
[77.84558868 124.01258850]
[68.90668488 110.03135681]
[67.98938751 93.46218872]
[75.33034515 78.57967377]
[60.98685455 71.90322876]
[59.82733917 57.05382538]
[45.48385239 50.37738037]
[44.32433319 35.52797699]
[35.55812836 23.35614014]
[22.93661118 20.50111580]
[15.89175701 10.12860394]
[17.76766396 -1.86257148]
[9.25657463 -14.21414375]
[0.74548453 -26.56571579]
[-7.76560545 -38.91728973]
[-15.26177025 -44.25202179]
[-16.32213783 -51.61553192]
[-24.57442665 -64.14149475]
[-32.82671738 -76.66745758]
[-42.69244003 -87.96646118]
[-53.99144363 -97.83218384]
[-65.29045105 -107.69790649]
[-80.84217072 -106.81381989]
[-92.16043091 -116.98002625]
[-92.90743256 -131.81166077]
[-104.20643616 -141.67738342]
[-115.50543976 -151.54310608]
[-127.10678101 -161.05146790]
[-138.99916077 -170.19320679]
[-150.89154053 -179.33494568]
[-166.52793884 -177.03738403]
[-179.15910339 -186.53628540]
[-181.29121399 -202.19609070]
[-171.65930176 -214.72613525]
[-155.97782898 -216.69255066]
[-143.55032349 -206.92871094]
[-141.74980164 -191.22732544]
[-129.85742188 -182.08558655]
[-117.96504974 -172.94384766]
[-114.37999725 -173.06591797]
[-110.56151581 -171.41641235]
[-107.36206818 -167.90699768]
[-105.63971710 -162.84211731]
[-94.34071350 -152.97639465]
[-83.04170990 -143.11067200]
[-68.24477386 -144.37013245]
[-56.64543152 -134.52583313]
[-55.42472458 -118.99691010]
[-44.12572098 -109.13118744]
[-32.82671738 -99.26546478]
[-36.53533173 -113.79977417]
[-34.12333298 -128.60458374]
[-25.99309731 -141.21011353]
[-13.50093365 -149.51347351]
[1.26918733 -152.12948608]
[15.85327816 -148.62173462]
[27.81838417 -139.57539368]
[35.16845703 -126.49960327]
[36.67734146 -111.57568359]
[32.09332275 -97.29328918]
[22.18111229 -86.03504181]
[8.59429455 -79.67906952]
[-6.40054655 -79.28569794]
[-20.30075455 -84.91974640]
[-12.04846573 -72.39378357]
[-3.79617643 -59.86782074]
[4.58596706 -47.42837906]
[13.09705734 -35.07680511]
[21.60814667 -22.72523499]
[30.11923790 -10.37366199]
[46.33693314 -3.74144244]
[47.72996521 14.58993340]
[56.49617004 26.76177025]
[70.21263885 32.56760406]
[71.99917603 48.28761673]
[85.71564484 54.09345245]
[87.50218201 69.81346893]
[99.10270691 67.34089661]
[110.82149506 69.17277527]
[121.11401367 75.06767273]
[128.62371826 84.24864197]
[132.36082458 95.50563049]
[147.29513550 96.90793610]
[162.22944641 98.31023407]
[177.16374207 99.71253967]
[182.74296570 85.67513275]
[192.05207825 73.77902985]
[204.33642578 64.98860931]
[218.60017395 60.01646805]
[233.68702698 59.26567078]
[248.37394714 62.79708099]
[261.47036743 70.32443237]
[271.91455078 81.23750305]
[278.85992432 94.65162659]
[281.74337769 109.47938538]
[280.33120728 124.51874542]
[274.73788452 138.55055237]
[265.41683960 150.43728638]
[253.12365723 159.21536255]
[238.85491943 164.17317200]
[223.76733398 164.90881348]
[209.08395386 161.36264038]
[195.99513245 153.82214355]
[185.56188965 142.89859009]
[178.63002014 129.47749329]
[175.76144409 114.64685059]
[160.82713318 113.24454498]
[145.89282227 111.84223938]
[130.95852661 110.43994141]
[121.99581909 124.15794373]
[107.50000000 131.79893494]
[107.50000000 146.79893494]
[107.50000000 161.79893494]
[107.50000000 176.79893494]
[107.50000000 191.79893494]
[107.50000000 206.79893494]
[107.50000000 221.79893494]
[107.50000000 236.79893494]
[107.50000000 251.79893494]
[107.50000000 266.79895020]
[122.03988647 270.86026001]
[134.94427490 278.69476318]
[145.25555420 289.72109985]
[152.20857239 303.12100220]
[155.28736877 317.90017700]
[154.26348877 332.96185303]
[149.21287537 347.18838501]
[140.51036072 359.52404785]
[128.80169678 369.05346680]
[114.95575714 375.06948853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 97]
[26 95]
[28 93]
[29 92]
[32 90]
[33 89]
[34 88]
[35 87]
[37 86]
[38 85]
[39 84]
[40 70]
[41 69]
[42 68]
[45 65]
[46 64]
[47 63]
[48 59]
[49 58]
[50 57]
[102 129]
[103 128]
[104 127]
[105 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
