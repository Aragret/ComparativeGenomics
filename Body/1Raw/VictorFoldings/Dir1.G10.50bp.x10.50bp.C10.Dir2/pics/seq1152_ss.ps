%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUAUACUAGGGGGGGGGGACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACxxxxxxxxxxCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCACCCCCCCCCCAAGCCAUACUA\
) } def
/len { sequence length } bind def

/coor [
[82.51857758 371.95144653]
[68.49663544 366.39843750]
[56.29667664 357.53210449]
[46.68560410 345.90979004]
[40.26757812 332.26208496]
[37.44604111 317.44689941]
[38.39835739 302.39553833]
[43.06466293 288.05410767]
[51.15163040 275.32415771]
[62.15090561 265.00588989]
[75.37106323 257.74789429]
[89.98107910 254.00646973]
[89.98107910 239.00646973]
[89.98107910 224.00646973]
[89.98107910 209.00646973]
[89.98107910 194.00646973]
[89.98107910 179.00646973]
[89.98107910 164.00646973]
[89.98107910 149.00646973]
[89.98107910 134.00646973]
[89.98107910 119.00646973]
[80.76683807 130.84275818]
[66.31600952 134.86441040]
[52.31198120 129.48971558]
[44.26241684 116.83252716]
[45.33313751 101.87078857]
[55.10303879 90.48883057]
[69.72970581 87.16307831]
[83.46223450 93.20298767]
[73.82041931 81.71232605]
[64.17860413 70.22165680]
[54.53679276 58.73099136]
[44.89497757 47.24032593]
[35.25316238 35.74965668]
[25.61134911 24.25899124]
[21.34296989 22.88764191]
[18.09095573 20.44879723]
[16.06943893 17.40573883]
[15.31532001 14.24337673]
[15.69712734 11.40696144]
[5.14511204 0.74605232]
[-7.00822115 -8.04579067]
[-19.16155434 -16.83763313]
[-31.31488800 -25.62947464]
[-43.46821976 -34.42131805]
[-55.88653564 -42.83472824]
[-68.55805206 -50.86172485]
[-77.54251862 -52.83026886]
[-81.40496826 -59.18587112]
[-93.90900421 -67.47134399]
[-110.30144501 -67.94028473]
[-117.85239410 -82.49758911]
[-108.79407501 -96.16796112]
[-92.44491577 -94.88848877]
[-85.62352753 -79.97537994]
[-73.11949158 -71.68990326]
[-60.53105164 -63.53324127]
[-47.85953903 -55.50624466]
[-44.30292130 -55.95087814]
[-40.35430527 -54.65549469]
[-36.85223770 -51.45531464]
[-34.67637634 -46.57464981]
[-22.52304459 -37.78281021]
[-10.36971188 -28.99096680]
[1.78362155 -20.19912338]
[13.93695450 -11.40728092]
[8.36470699 -25.33387566]
[7.79691553 -40.32312775]
[12.29963017 -54.63135910]
[21.34906006 -66.59413147]
[33.89250183 -74.81982422]
[48.47079849 -78.35157013]
[63.38808823 -76.77852631]
[76.90907288 -70.28367615]
[87.46087646 -59.62255859]
[93.81602478 -46.03535843]
[95.23525238 -31.10264969]
[91.55344391 -16.56152344]
[83.19891357 -4.10352468]
[71.14351654 4.82213402]
[56.78963470 9.17714691]
[41.80702972 8.45490456]
[27.94008064 2.74035358]
[37.10201645 14.61717701]
[46.74383163 26.10784340]
[56.38564301 37.59851074]
[66.02745819 49.08917618]
[75.66927338 60.57984543]
[85.31108856 72.07051086]
[94.95290375 83.56118011]
[109.66842651 86.46865082]
[122.95576477 79.50829315]
[136.24310303 72.54793549]
[136.74084473 56.05013275]
[145.42541504 42.12461853]
[159.85609436 34.50680923]
[176.06622314 35.18404770]
[189.65336609 43.87801743]
[202.79499817 36.64631271]
[215.93663025 29.41460991]
[223.95851135 15.11141109]
[240.35752869 15.17754745]
[248.26377869 29.54498482]
[239.54399109 43.43373489]
[223.16833496 42.55624390]
[210.02670288 49.78794479]
[196.88507080 57.01964569]
[197.50082397 70.69579315]
[192.12608337 83.35863495]
[181.76153564 92.50411224]
[168.40058899 96.29694366]
[154.64613342 93.93874359]
[143.20346069 85.83528137]
[129.91612244 92.79563141]
[116.62877655 99.75598907]
[131.62649536 100.01799774]
[145.51983643 94.36334229]
[160.51344299 93.92567444]
[174.71296692 98.76029968]
[186.32435608 108.25638580]
[193.88058472 121.21414185]
[196.42694092 135.99642944]
[193.64172363 150.73558044]
[185.87683105 163.56938171]
[174.11331177 172.87634277]
[159.83741760 177.48057556]
[144.85284424 176.80036926]
[131.05282593 170.92164612]
[120.18090057 160.58717346]
[113.61070251 147.10264587]
[112.17246246 132.17021179]
[104.98107910 119.00646973]
[104.98107910 134.00646973]
[104.98107910 149.00646973]
[104.98107910 164.00646973]
[104.98107910 179.00646973]
[104.98107910 194.00646973]
[104.98107910 209.00646973]
[104.98107910 224.00646973]
[104.98107910 239.00646973]
[104.98107910 254.00646973]
[119.59108734 257.74789429]
[132.81124878 265.00588989]
[143.81051636 275.32415771]
[151.89749146 288.05410767]
[156.56379700 302.39553833]
[157.51611328 317.44689941]
[154.69458008 332.26208496]
[148.27655029 345.90979004]
[138.66548157 357.53210449]
[126.46552277 366.39843750]
[112.44357300 371.95144653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[29 90]
[30 89]
[31 88]
[32 87]
[33 86]
[34 85]
[35 84]
[40 83]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 58]
[47 57]
[49 56]
[50 55]
[91 115]
[92 114]
[93 113]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
