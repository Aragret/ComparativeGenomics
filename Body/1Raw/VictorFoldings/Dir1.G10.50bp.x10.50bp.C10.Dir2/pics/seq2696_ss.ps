%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUACCAAAAGGGGGGGGGGACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACAxxxxxxxxxxUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUACCCCCCCCCCUUUACCACAA\
) } def
/len { sequence length } bind def

/coor [
[59.70312881 399.91351318]
[45.21343994 395.70501709]
[32.30720901 387.88891602]
[21.86440849 376.99807739]
[14.59704494 363.77508545]
[11.00061893 349.12145996]
[11.32034016 334.03637695]
[15.53441048 319.54830933]
[23.35550690 306.64508057]
[34.25037766 296.20651245]
[47.47618484 288.94424438]
[62.13117599 285.35348511]
[62.44323349 270.35671997]
[62.75529099 255.35997009]
[63.06734467 240.36320496]
[63.37940216 225.36645508]
[63.69145966 210.36970520]
[64.00351715 195.37295532]
[64.31556702 180.37619019]
[64.62762451 165.37944031]
[56.58301163 178.03977966]
[45.47225571 188.11703491]
[32.08909225 194.89132690]
[17.38958168 197.87869263]
[2.42382288 196.86572266]
[-11.73906040 191.92480469]
[-24.08730316 183.40888977]
[-33.73877716 171.92633057]
[-40.00399780 158.29742432]
[-42.43539429 143.49578857]
[-40.85927582 128.57882690]
[-35.38822937 114.61216736]
[-26.41310120 102.59355164]
[-14.57505131 93.38157654]
[-0.71976531 87.63430786]
[14.16296673 85.76233673]
[29.00995445 87.89937592]
[42.76056290 93.89276886]
[54.43247604 103.31436157]
[63.19188309 115.49109650]
[68.41302490 129.55308533]
[69.72317505 144.49029541]
[76.35167694 131.03433228]
[82.98017120 117.57836914]
[89.60867310 104.12240601]
[96.09683990 90.59821320]
[102.44396973 77.00726318]
[108.79109955 63.41630936]
[115.13822937 49.82535934]
[121.48535919 36.23440933]
[127.83248901 22.64345741]
[116.21999359 13.77727604]
[106.71939850 2.68583703]
[99.74783325 -10.13996124]
[95.61058807 -24.13315582]
[94.48771667 -38.67578125]
[96.42622375 -53.12616730]
[101.33808136 -66.84724426]
[109.00423431 -79.23461914]
[119.08435822 -89.74322510]
[131.13200378 -97.91127777]
[144.61428833 -103.38059235]
[158.93557739 -105.91226959]
[173.46371460 -105.39713287]
[187.55793762 -101.86045074]
[194.18643188 -115.31641388]
[200.81492615 -128.77238464]
[207.44343567 -142.22834778]
[214.07192993 -155.68431091]
[201.93806458 -164.56915283]
[191.53150940 -175.42616272]
[183.16851807 -187.92543030]
[177.10321045 -201.68708801]
[173.51994324 -216.29295349]
[172.52757263 -231.29916382]
[174.15626526 -246.24969482]
[178.35652161 -260.69021606]
[185.00073242 -274.18191528]
[193.88694763 -286.31478882]
[204.74513245 -296.72009277]
[217.24534607 -305.08166504]
[231.00769043 -311.14541626]
[245.61396790 -314.72702026]
[260.62026978 -315.71771240]
[275.57064819 -314.08731079]
[290.01068115 -309.88540649]
[303.50161743 -303.23968506]
[315.63348389 -294.35208130]
[326.03756714 -283.49270630]
[334.39773560 -270.99154663]
[340.45989990 -257.22851562]
[344.03985596 -242.62184143]
[345.02883911 -227.61541748]
[343.39675903 -212.66525269]
[339.19320679 -198.22566223]
[332.54595947 -184.73548889]
[323.65698242 -172.60464478]
[312.79641724 -162.20178223]
[300.29431152 -153.84304810]
[286.53060913 -147.78242493]
[271.92352295 -144.20411682]
[256.91696167 -143.21685791]
[241.96699524 -144.85063171]
[227.52789307 -149.05581665]
[220.89939880 -135.59985352]
[214.27088928 -122.14388275]
[207.64239502 -108.68791962]
[201.01390076 -95.23194885]
[213.04589844 -85.58067322]
[222.64506531 -73.49816895]
[229.33189392 -59.58301163]
[232.77130127 -44.52543259]
[232.78935242 -29.07309914]
[229.38203430 -13.99397278]
[222.71571350 -0.03814806]
[213.11892700 12.09945393]
[201.06617737 21.81369591]
[187.15457153 28.61939240]
[172.07412720 32.17553711]
[156.57363892 32.30239868]
[141.42343140 28.99058723]
[135.07630920 42.58153915]
[128.72917175 56.17248917]
[122.38204956 69.76344299]
[116.03491974 83.35439301]
[109.68778992 96.94534302]
[109.39392853 105.05691528]
[103.06463623 110.75090027]
[96.43614197 124.20686340]
[89.80764008 137.66282654]
[83.17914581 151.11880493]
[79.62438202 165.69149780]
[79.31232452 180.68824768]
[79.00026703 195.68501282]
[78.68820953 210.68176270]
[78.37615204 225.67851257]
[78.06410217 240.67526245]
[77.75204468 255.67202759]
[77.43998718 270.66876221]
[77.12792969 285.66552734]
[91.62086487 289.86282349]
[104.53312683 297.66897583]
[114.98433685 308.55172729]
[122.26190948 321.76910400]
[125.86965179 336.41995239]
[125.56157684 351.50527954]
[121.35869598 365.99658203]
[113.54756927 378.90585327]
[102.66076660 389.35284424]
[89.44056702 396.62530518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[42 131]
[43 130]
[44 129]
[45 128]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
