%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCAACAGGGGGGGGGGGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCCCCCCCCCCCAACCUCAACA\
) } def
/len { sequence length } bind def

/coor [
[74.55692291 383.75650024]
[61.33673096 376.48403931]
[50.44992447 366.03704834]
[42.63879395 353.12777710]
[38.43591309 338.63647461]
[38.12784195 323.55114746]
[41.73558044 308.90029907]
[49.01315689 295.68292236]
[59.46436310 284.80017090]
[72.37662506 276.99401855]
[86.86956024 272.79672241]
[86.55750275 257.79995728]
[86.24544525 242.80322266]
[85.93339539 227.80645752]
[85.62133789 212.80970764]
[85.30928040 197.81295776]
[84.99722290 182.81620789]
[84.68516541 167.81944275]
[84.37310791 152.82269287]
[84.06105804 137.82594299]
[71.53509521 129.57365417]
[57.63253784 135.20561218]
[43.72998047 140.83757019]
[41.68599701 156.05984497]
[32.29201508 168.21092224]
[18.07497025 174.02221680]
[2.85917616 171.93052673]
[-9.26239586 162.49850464]
[-15.02910423 148.26332092]
[-12.88973141 133.05415344]
[-3.41975975 120.96220398]
[10.83343697 115.24015045]
[26.03582001 117.42718506]
[38.09802628 126.93501282]
[52.00057983 121.30305481]
[65.90313721 115.67109680]
[65.56843567 104.18764496]
[68.72077179 94.02468872]
[55.06453323 87.81927490]
[41.40829086 81.61386871]
[27.75204849 75.40846252]
[14.09580803 69.20305634]
[1.72450674 72.99842072]
[-9.54376888 67.49887848]
[-13.87548542 56.16117477]
[-27.39967537 49.67300797]
[-43.70098877 51.46165085]
[-53.18115997 38.08037949]
[-46.08779907 23.29470062]
[-29.71795273 22.31485176]
[-20.91151047 36.14881897]
[-7.38732052 42.63698196]
[9.98182201 40.33201981]
[20.30121613 55.54681396]
[33.95745468 61.75222397]
[47.61369705 67.95762634]
[61.26993942 74.16304016]
[74.92617798 80.36844635]
[84.36738586 70.22998047]
[97.85816956 64.65993500]
[113.18524933 65.23120117]
[116.58822632 50.62231064]
[119.99120331 36.01341629]
[123.39418030 21.40452576]
[126.79715729 6.79563236]
[113.05213165 0.67428774]
[100.71412659 -7.93791914]
[90.22914886 -18.72966385]
[81.97622681 -31.31082916]
[76.25369263 -45.22661591]
[73.26841736 -59.97397614]
[73.12831116 -75.01979828]
[75.83844757 -89.82019806]
[81.30084991 -103.84013367]
[89.31805420 -116.57279968]
[99.60025024 -127.55792236]
[111.77574158 -136.39839172]
[125.40438843 -142.77464294]
[139.99353027 -146.45616150]
[155.01576233 -147.30986023]
[169.92805481 -145.30490112]
[184.19134521 -140.51373291]
[197.29000854 -133.10958862]
[208.75054932 -123.36008453]
[218.15866089 -111.61769104]
[225.17425537 -98.30686951]
[229.54371643 -83.90880585]
[231.10910034 -68.94397736]
[229.81381226 -53.95335388]
[225.70469666 -39.47883987]
[218.93026733 -26.04367828]
[209.73541260 -14.13354111]
[198.45254517 -4.17897224]
[185.48953247 3.46017599]
[171.31495667 8.50775337]
[156.44123840 10.78129387]
[141.40605164 10.19861031]
[138.00306702 24.80750275]
[134.60009766 39.41639709]
[131.19711304 54.02528763]
[127.79413605 68.63417816]
[137.05908203 80.43081665]
[152.05827332 80.58686066]
[167.05746460 80.74289703]
[171.86437988 66.39894867]
[180.87017822 54.24366760]
[193.19256592 45.46790695]
[207.62431335 40.93142319]
[222.75155640 41.07865524]
[237.09228516 45.89517593]
[249.24151611 54.90911865]
[258.00903320 67.23738098]
[262.53582764 81.67217255]
[262.37847900 96.79931641]
[257.55233765 111.13680267]
[248.53025818 123.28000641]
[236.19612122 132.03924561]
[221.75830078 136.55638123]
[206.63127136 136.38888550]
[192.29701233 131.55314636]
[180.15986633 122.52292633]
[171.40888977 110.18292236]
[166.90142822 95.74208069]
[151.90223694 95.58604431]
[136.90304565 95.43000793]
[136.35021973 108.15201569]
[131.53236389 119.96462250]
[122.99892426 129.47909546]
[111.73712158 135.57118225]
[99.05780792 137.51388550]
[99.36986542 152.51063538]
[99.68192291 167.50740051]
[99.99398041 182.50415039]
[100.30603027 197.50090027]
[100.61808777 212.49765015]
[100.93014526 227.49441528]
[101.24220276 242.49116516]
[101.55426025 257.48791504]
[101.86631775 272.48468018]
[116.52130890 276.07543945]
[129.74711609 283.33770752]
[140.64198303 293.77627563]
[148.46308899 306.67950439]
[152.67715454 321.16757202]
[152.99687195 336.25265503]
[149.40045166 350.90628052]
[142.13308716 364.12927246]
[131.69027710 375.02011108]
[118.78404999 382.83621216]
[104.29436493 387.04470825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 36]
[22 35]
[23 34]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
[61 101]
[62 100]
[63 99]
[64 98]
[65 97]
[102 125]
[103 124]
[104 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
