%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUACUACGGGGGGGGGGUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGxxxxxxxxxxUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCCCCCCCCCCCUUACUAC\
) } def
/len { sequence length } bind def

/coor [
[-16.38077545 313.89532471]
[-29.32758904 306.32513428]
[-41.78382111 297.97232056]
[-53.70222092 288.86853027]
[-65.03758240 279.04827881]
[-75.74690247 268.54885864]
[-85.78955841 257.41006470]
[-95.12745667 245.67417908]
[-103.72516632 233.38569641]
[-111.55008698 220.59124756]
[-118.57253265 207.33935547]
[-124.76586151 193.68028259]
[-138.78257751 199.02180481]
[-152.79928589 204.36331177]
[-162.93957520 216.50765991]
[-177.58779907 213.80975342]
[-191.60450745 219.15127563]
[-205.62121582 224.49278259]
[-219.63793945 229.83428955]
[-233.65464783 235.17581177]
[-247.67135620 240.51731873]
[-247.72561646 255.69497681]
[-253.26264954 269.82672119]
[-263.53363037 281.00128174]
[-277.14947510 287.70745850]
[-292.26879883 289.03829956]
[-306.84677124 284.81375122]
[-318.91189575 275.60519409]
[-326.83242798 262.65802002]
[-329.53723145 247.72320557]
[-326.66043091 232.82057190]
[-318.59112549 219.96557617]
[-306.42065430 210.89674377]
[-291.79492188 206.84057617]
[-276.69195557 208.34562683]
[-263.15432739 215.20834351]
[-253.01287842 226.50061035]
[-238.99615479 221.15908813]
[-224.97944641 215.81758118]
[-210.96273804 210.47607422]
[-196.94601440 205.13455200]
[-182.92930603 199.79304504]
[-173.79159546 188.03074646]
[-158.14080811 190.34660339]
[-144.12408447 185.00508118]
[-130.10737610 179.66357422]
[-134.57508850 165.34690857]
[-138.15298462 150.78234863]
[-140.82748413 136.02517700]
[-142.58845520 121.13133240]
[-143.42919922 106.15733337]
[-143.34655762 91.15998077]
[-142.34080505 76.19615936]
[-140.41578674 61.32263565]
[-137.57879639 46.59582901]
[-133.84059143 32.07159805]
[-129.21534729 17.80504036]
[-123.72062683 3.85027647]
[-117.37726593 -9.73976135]
[-110.20931244 -22.91352081]
[-102.24397278 -35.62103271]
[-93.51145935 -47.81408691]
[-84.04489136 -59.44643784]
[-73.88018799 -70.47395325]
[-63.05589676 -80.85481262]
[-51.61308670 -90.54962921]
[-39.59515762 -99.52162933]
[-27.04769897 -107.73678589]
[-14.01830769 -115.16392517]
[-0.55640942 -121.77487946]
[13.28693104 -127.54457092]
[27.45920181 -132.45111084]
[41.90664291 -136.47590637]
[56.57445145 -139.60365295]
[71.40699005 -141.82250977]
[86.34798431 -143.12406921]
[101.34076691 -143.50337219]
[116.32846832 -142.95898438]
[131.25422668 -141.49298096]
[146.06143188 -139.11093140]
[160.69390869 -135.82183838]
[175.09614563 -131.63819885]
[189.21353149 -126.57589722]
[202.99249268 -120.65410614]
[216.38078308 -113.89530945]
[229.32759094 -106.32514191]
[241.78381348 -97.97231293]
[253.70222473 -88.86851501]
[265.03756714 -79.04827881]
[275.74688721 -68.54885101]
[285.78955078 -57.41007233]
[295.12744141 -45.67417908]
[303.72515869 -33.38570023]
[311.55007935 -20.59124756]
[318.57254028 -7.33935261]
[324.76586914 6.31971407]
[338.78256226 0.97820163]
[352.79928589 -4.36331081]
[366.81600952 -9.70482349]
[380.83270264 -15.04633617]
[384.75506592 -30.05949211]
[396.77413940 -39.87384415]
[412.26837158 -40.71557236]
[425.27990723 -32.26101685]
[430.80554199 -17.76112366]
[426.72055054 -2.79139924]
[414.59573364 6.89199114]
[399.09329224 7.56558704]
[386.17422485 -1.02962291]
[372.15750122 4.31188965]
[358.14080811 9.65340233]
[344.12408447 14.99491501]
[330.10739136 20.33642769]
[334.57507324 34.65309525]
[338.15298462 49.21764755]
[340.82748413 63.97483063]
[342.58843994 78.86866760]
[343.42919922 93.84266663]
[343.34655762 108.84001923]
[342.34082031 123.80384064]
[340.41580200 138.67736816]
[337.57879639 153.40417480]
[333.84057617 167.92840576]
[329.21536255 182.19496155]
[323.72064209 196.14971924]
[317.37725830 209.73976135]
[310.20932007 222.91352844]
[302.24398804 235.62103271]
[293.51147461 247.81408691]
[284.04489136 259.44644165]
[273.88018799 270.47396851]
[263.05590820 280.85482788]
[251.61308289 290.54962158]
[239.59515381 299.52163696]
[227.04769897 307.73678589]
[214.01831055 315.16394043]
[200.55641174 321.77487183]
[186.71307373 327.54458618]
[172.54080200 332.45111084]
[158.09335327 336.47589111]
[143.42555237 339.60366821]
[128.59301758 341.82250977]
[113.65201569 343.12405396]
[98.65923309 343.50335693]
[83.67153168 342.95898438]
[68.74577332 341.49298096]
[53.93857193 339.11093140]
[39.30609894 335.82183838]
[24.90385246 331.63821411]
[10.78647232 326.57589722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 46]
[13 45]
[14 44]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
