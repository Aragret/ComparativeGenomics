%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUGCCCGGGGGGGGGGCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAxxxxxxxxxxACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUCCCCCCCCCCAGGCCUACCC\
) } def
/len { sequence length } bind def

/coor [
[48.71833801 343.98339844]
[35.49814224 336.71093750]
[24.61133766 326.26394653]
[16.80020714 313.35467529]
[12.59732628 298.86337280]
[12.28925419 283.77801514]
[15.89699554 269.12719727]
[23.17456818 255.90982056]
[33.62577438 245.02705383]
[46.53803635 237.22090149]
[61.03097534 233.02362061]
[60.71891785 218.02687073]
[60.40686035 203.03010559]
[60.09480667 188.03335571]
[59.78274918 173.03660583]
[59.47069168 158.03985596]
[59.15863800 143.04309082]
[58.84658051 128.04634094]
[58.53452301 113.04959106]
[45.59646988 105.45967865]
[32.35388184 112.50481415]
[19.11129761 119.54994965]
[5.86871195 126.59508514]
[-0.17455326 141.45639038]
[-15.60167027 145.85906982]
[-28.57827568 136.42576599]
[-29.14982796 120.39289856]
[-16.87788200 110.05951691]
[-1.17642307 113.35250092]
[12.06616306 106.30736542]
[25.30874825 99.26222992]
[38.55133438 92.21709442]
[41.49681473 77.50913239]
[31.98845863 65.90779114]
[21.00279236 55.69431305]
[8.74042511 47.05519485]
[-3.52194309 38.41608047]
[-17.17818451 32.21067429]
[-31.75088692 28.65591049]
[-46.32358932 25.10114861]
[-60.89629364 21.54638672]
[-76.47661591 26.66357040]
[-88.51631165 15.52904129]
[-84.62997437 -0.40295216]
[-68.81553650 -4.74294043]
[-57.34152985 6.97368383]
[-42.76882935 10.52844620]
[-28.19612503 14.08320808]
[-13.62342262 17.63796997]
[-24.14902878 6.95098686]
[-30.93492889 -6.42629147]
[-33.34104156 -21.23205376]
[-31.14040947 -36.06975174]
[-24.54060936 -49.53981400]
[-14.16416645 -60.37168503]
[-0.98983663 -67.54364777]
[13.73971176 -70.37920380]
[28.63511658 -68.61089325]
[42.29137039 -62.40551758]
[53.42034531 -52.34838486]
[60.97230911 -39.38814163]
[64.23491669 -24.74726105]
[62.90042114 -9.80674171]
[57.09470749 4.02415371]
[47.36539078 15.44082737]
[34.63019180 23.36640167]
[20.09035873 27.05329895]
[5.11717272 26.15371132]
[17.37954140 34.79282761]
[29.64190865 43.43194199]
[24.44412041 29.36130142]
[25.30576706 14.38606930]
[32.08310699 1.00445330]
[43.64553070 -8.55119324]
[58.06416321 -12.68677425]
[72.93365479 -10.71238136]
[85.77343750 -2.95738816]
[94.44155121 9.28449821]
[97.49195862 23.97105789]
[94.41578674 38.65224075]
[85.72620392 50.87889862]
[72.87283325 58.61134720]
[57.99989700 60.55964661]
[43.58979797 56.39943314]
[53.09815598 68.00077820]
[67.93936157 70.17761230]
[80.37880707 61.79546738]
[92.81824493 53.41332626]
[105.25768280 45.03118134]
[117.69712067 36.64904022]
[130.13656616 28.26689529]
[142.48814392 19.75580597]
[154.75050354 11.11668873]
[167.01287842 2.47757292]
[179.27523804 -6.16154289]
[181.72735596 -21.77444458]
[194.55026245 -31.01287270]
[210.13636780 -28.39583015]
[219.23870850 -15.47596169]
[216.45701599 0.08160180]
[203.44163513 9.04683590]
[187.91435242 6.10082483]
[175.65199280 14.73994160]
[163.38961792 23.37905693]
[151.12725830 32.01817322]
[147.44679260 38.48345184]
[138.51870728 40.70633698]
[126.07926941 49.08847809]
[113.63982391 57.47062302]
[101.20038605 65.85276794]
[88.76094818 74.23490906]
[76.32150269 82.61705017]
[108.48351288 74.07522583]
[125.18095398 99.98092651]
[139.50355530 104.43774414]
[153.82614136 108.89456177]
[168.14874268 113.35137939]
[182.02148438 105.78020477]
[197.16085815 110.31618500]
[204.58493042 124.26819611]
[199.88914490 139.35876465]
[185.85942078 146.63491821]
[170.81935120 141.77984619]
[163.69192505 127.67397308]
[149.36933899 123.21715546]
[135.04673767 118.76034546]
[120.72413635 114.30352783]
[111.27745819 123.68105316]
[97.88007355 127.19503021]
[84.00518799 123.37772369]
[73.53128052 112.73753357]
[73.84333801 127.73428345]
[74.15538788 142.73103333]
[74.46744537 157.72779846]
[74.77950287 172.72454834]
[75.09156036 187.72129822]
[75.40361786 202.71804810]
[75.71567535 217.71481323]
[76.02772522 232.71156311]
[90.68272400 236.30232239]
[103.90853119 243.56459045]
[114.80339813 254.00318909]
[122.62449646 266.90640259]
[126.83856201 281.39447021]
[127.15828705 296.47955322]
[123.56185913 311.13314819]
[116.29449463 324.35617065]
[105.85169220 335.24700928]
[92.94546509 343.06311035]
[78.45577240 347.27160645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 32]
[21 31]
[22 30]
[23 29]
[33 85]
[34 84]
[35 70]
[36 69]
[37 68]
[38 49]
[39 48]
[40 47]
[41 46]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 105]
[93 104]
[94 103]
[95 102]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
