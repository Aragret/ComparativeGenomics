%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCCUAUGGGGGGGGGGUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUxxxxxxxxxxAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCCCCCCCCCCCUCAGCCUAU\
) } def
/len { sequence length } bind def

/coor [
[154.38514709 581.01617432]
[140.53919983 575.00012207]
[128.83055115 565.47070312]
[120.12802124 553.13507080]
[115.07741547 538.90856934]
[114.05352783 523.84686279]
[117.13232422 509.06768799]
[124.08535004 495.66778564]
[134.39663696 484.64144897]
[147.30101013 476.80694580]
[161.84089661 472.74560547]
[161.84089661 457.74560547]
[161.84089661 442.74560547]
[161.84089661 427.74560547]
[161.84089661 412.74560547]
[161.84089661 397.74560547]
[161.84089661 382.74560547]
[161.84089661 367.74560547]
[161.84089661 352.74560547]
[161.84089661 337.74560547]
[161.84089661 322.74560547]
[161.84089661 307.74560547]
[158.28613281 293.17291260]
[151.37913513 279.85775757]
[144.47213745 266.54260254]
[137.56513977 253.22744751]
[130.65814209 239.91229248]
[123.75114441 226.59713745]
[116.84414673 213.28198242]
[115.20198059 228.19181824]
[108.07292175 241.38941956]
[96.50376129 250.93690491]
[82.19324493 255.43237305]
[67.24266815 254.21574402]
[53.84728622 247.46563721]
[43.97401047 236.17323303]
[39.07258224 221.99664307]
[39.86269760 207.01745605]
[46.22834015 193.43518066]
[57.23481750 183.24412537]
[71.26599121 177.94071960]
[86.26159668 178.30366516]
[100.01976776 184.27969360]
[110.51994324 194.99075317]
[107.72762299 180.25294495]
[104.93529510 165.51513672]
[102.14297485 150.77732849]
[99.35064697 136.03952026]
[96.55832672 121.30171967]
[93.76599884 106.56391144]
[90.85424805 103.92608643]
[89.14682007 99.99793243]
[89.20135498 95.35948181]
[91.28942108 90.82144165]
[89.42180634 75.93816376]
[87.55419159 61.05488586]
[85.68658447 46.17160416]
[83.50974274 31.33040047]
[78.90418243 17.05493927]
[72.27568054 3.59897351]
[65.64718628 -9.85699177]
[59.01868439 -23.31295776]
[45.09385681 -31.97501564]
[45.90336609 -48.35417175]
[60.61445618 -55.60095215]
[74.09362030 -46.26049423]
[72.47464752 -29.94145584]
[79.10314941 -16.48549080]
[85.73164368 -3.02952504]
[92.36014557 10.42644024]
[94.31213379 -4.44600868]
[101.71421051 -17.49243546]
[113.47949219 -26.79717064]
[127.88043213 -30.99395752]
[142.80245972 -29.46656036]
[156.05451965 -22.43925285]
[165.69073486 -10.94388962]
[170.29617310 3.33160996]
[169.19461060 18.29110718]
[162.54777527 31.73802757]
[151.33168030 41.69789505]
[137.19320679 46.70825577]
[122.20839691 46.03341293]
[108.57752991 39.77246094]
[98.30245209 28.84528160]
[101.65614319 32.32784653]
[102.81620026 37.97457886]
[100.56986237 44.30399323]
[102.43747711 59.18727112]
[104.30508423 74.07054901]
[106.17269897 88.95383453]
[108.50380707 103.77159119]
[111.29612732 118.50939941]
[114.08845520 133.24720764]
[116.88077545 147.98500061]
[119.67310333 162.72280884]
[122.46542358 177.46061707]
[125.25775146 192.19842529]
[130.15930176 206.37498474]
[137.06629944 219.69013977]
[143.97329712 233.00529480]
[150.88029480 246.32044983]
[157.78729248 259.63562012]
[164.69429016 272.95077515]
[171.60128784 286.26593018]
[172.59565735 271.29891968]
[177.21363831 257.02746582]
[185.17582703 244.31512451]
[196.00041199 233.93109131]
[209.03244019 226.50369263]
[223.48335266 222.48234558]
[238.47874451 222.11038208]
[253.11125183 225.41030884]
[266.49551392 232.18244934]
[277.82162476 242.01702881]
[286.40426636 254.31898499]
[291.72415161 268.34393311]
[293.45935059 283.24322510]
[291.50488281 298.11535645]
[285.97897339 312.06039429]
[277.21603394 324.23458862]
[265.74630737 333.90127563]
[252.26374817 340.47552490]
[237.58421326 343.55953979]
[222.59593201 342.96673584]
[208.20582581 338.73297119]
[195.28460693 331.11441040]
[184.61415100 320.57205200]
[176.84089661 307.74560547]
[176.84089661 322.74560547]
[176.84089661 337.74560547]
[176.84089661 352.74560547]
[176.84089661 367.74560547]
[176.84089661 382.74560547]
[176.84089661 397.74560547]
[176.84089661 412.74560547]
[176.84089661 427.74560547]
[176.84089661 442.74560547]
[176.84089661 457.74560547]
[176.84089661 472.74560547]
[191.38078308 476.80694580]
[204.28517151 484.64144897]
[214.59645081 495.66778564]
[221.54946899 509.06768799]
[224.62826538 523.84686279]
[223.60438538 538.90856934]
[218.55377197 553.13507080]
[209.85125732 565.47070312]
[198.14259338 575.00012207]
[184.29666138 581.01617432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[29 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 85]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
