%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCUACAUAGGGGGGGGGGUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAxxxxxxxxxxUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCCCCCCCCCCCUCUACCUA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 452.87588501]
[70.75619507 448.06646729]
[57.85220718 440.30105591]
[46.91955185 429.94293213]
[38.46956635 417.47650146]
[32.89747238 403.48486328]
[30.46388245 388.62243652]
[31.28262329 373.58435059]
[35.31539917 359.07400513]
[42.37359238 345.77001953]
[52.12707901 334.29464722]
[64.11966705 325.18466187]
[77.79044342 318.86611938]
[92.50000000 315.63458252]
[92.50000000 300.63458252]
[92.50000000 285.63458252]
[92.50000000 270.63458252]
[92.50000000 255.63456726]
[92.50000000 240.63456726]
[92.50000000 225.63456726]
[92.50000000 210.63456726]
[92.50000000 195.63456726]
[92.50000000 180.63456726]
[78.47840118 178.07051086]
[65.12355804 173.08773804]
[52.84923172 165.84063721]
[42.03568268 156.55371094]
[33.01793671 145.51469421]
[26.07536507 133.06558228]
[21.42306137 119.59205627]
[19.20515633 105.51155090]
[19.49036407 91.26029205]
[22.26984787 77.27980042]
[27.45749855 64.00320435]
[34.89259338 51.84182739]
[44.34478760 41.17244339]
[55.52124405 32.32560349]
[68.07569885 25.57538795]
[81.61920166 21.13092995]
[95.73216248 19.12992096]
[96.33230591 4.14193201]
[96.93244934 -10.84605694]
[97.53259277 -25.83404732]
[82.64039612 -27.70386124]
[67.96041870 -30.82989883]
[53.59843445 -35.18963242]
[39.65792465 -40.75165176]
[26.23933411 -47.47587967]
[13.43934345 -55.31386948]
[1.35017860 -64.20914459]
[-9.94105530 -74.09761810]
[-20.35300446 -84.90803528]
[-29.81064796 -96.56251526]
[-38.24584198 -108.97707367]
[-45.59781265 -122.06227112]
[-51.81358719 -135.72381592]
[-56.84837723 -149.86329651]
[-60.66590500 -164.37881470]
[-63.23867035 -179.16578674]
[-64.54813385 -194.11769104]
[-64.58486176 -209.12677002]
[-63.34858704 -224.08489990]
[-60.84821701 -238.88427734]
[-57.10176849 -253.41831970]
[-52.13623428 -267.58224487]
[-45.98739243 -281.27407837]
[-38.69955063 -294.39508057]
[-30.32520866 -306.85076904]
[-20.92471313 -318.55139160]
[-10.56579399 -329.41262817]
[0.67691189 -339.35626221]
[12.72239971 -348.31057739]
[25.48387909 -356.21112061]
[38.86940384 -363.00094604]
[52.78252411 -368.63110352]
[67.12300110 -373.06106567]
[81.78750610 -376.25891113]
[96.67037201 -378.20159912]
[111.66438293 -378.87509155]
[126.66149139 -378.27459717]
[141.55363464 -376.40438843]
[156.23353577 -373.27798462]
[170.59541321 -368.91787720]
[184.53576660 -363.35549927]
[197.95419312 -356.63092041]
[210.75398254 -348.79260254]
[222.84291077 -339.89700317]
[234.13389587 -330.00823975]
[244.54556274 -319.19757080]
[254.00289917 -307.54284668]
[262.43777466 -295.12805176]
[269.78939819 -282.04266357]
[276.00482178 -268.38095093]
[281.03924561 -254.24134827]
[284.85641479 -239.72573853]
[287.42880249 -224.93869019]
[288.73788452 -209.98677063]
[288.77420044 -194.97767639]
[287.53753662 -180.01959229]
[285.03680420 -165.22026062]
[281.28997803 -150.68632507]
[276.32406616 -136.52252197]
[270.17486572 -122.83086395]
[262.88668823 -109.71003723]
[254.51203918 -97.25456238]
[245.11123657 -85.55418396]
[234.75204468 -74.69320679]
[223.50907898 -64.74988556]
[211.46334839 -55.79586411]
[198.70167542 -47.89565659]
[185.31597900 -41.10618591]
[171.40270996 -35.47636795]
[157.06211853 -31.04677391]
[142.39753723 -27.84931183]
[127.51461029 -25.90702438]
[112.52058411 -25.23390198]
[111.92044067 -10.24591351]
[111.32029724 4.74207640]
[110.72015381 19.73006630]
[126.02501678 23.31308746]
[140.34939575 29.78525925]
[153.15364075 38.90274048]
[163.95532227 50.32203674]
[172.34753418 63.61293411]
[178.01406860 78.27469635]
[180.74145508 93.75495148]
[180.42694092 109.47048187]
[177.08238220 124.82922363]
[170.83377075 139.25253296]
[161.91651917 152.19700623]
[150.66659546 163.17498779]
[137.50782776 171.77288818]
[122.93596649 177.66676331]
[107.50000000 180.63456726]
[107.50000000 195.63456726]
[107.50000000 210.63456726]
[107.50000000 225.63456726]
[107.50000000 240.63456726]
[107.50000000 255.63456726]
[107.50000000 270.63458252]
[107.50000000 285.63458252]
[107.50000000 300.63458252]
[107.50000000 315.63458252]
[122.20955658 318.86611938]
[135.88034058 325.18466187]
[147.87292480 334.29464722]
[157.62640381 345.77001953]
[164.68460083 359.07400513]
[168.71737671 373.58435059]
[169.53611755 388.62243652]
[167.10252380 403.48486328]
[161.53042603 417.47650146]
[153.08044434 429.94293213]
[142.14779663 440.30105591]
[129.24380493 448.06646729]
[114.97203827 452.87588501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[40 119]
[41 118]
[42 117]
[43 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
