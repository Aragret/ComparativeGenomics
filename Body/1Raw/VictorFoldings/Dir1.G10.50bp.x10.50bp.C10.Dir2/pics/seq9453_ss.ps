%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAAACAACGGGGGGGGGGUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGxxxxxxxxxxCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUCCCCCCCCCCUCCAAACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 350.98458862]
[71.19830322 344.96856689]
[59.48964310 335.43914795]
[50.78712082 323.10348511]
[45.73651886 308.87695312]
[44.71262741 293.81527710]
[47.79142761 279.03610229]
[54.74444962 265.63616943]
[65.05573273 254.60984802]
[77.96011353 246.77534485]
[92.50000000 242.71401978]
[92.50000000 227.71401978]
[92.50000000 212.71401978]
[92.50000000 197.71401978]
[92.50000000 182.71401978]
[92.50000000 167.71401978]
[92.50000000 152.71401978]
[92.50000000 137.71401978]
[92.50000000 122.71402740]
[92.50000000 107.71402740]
[88.34210968 93.30181122]
[80.35219574 80.60688019]
[72.36228180 67.91194916]
[63.34474945 55.92511749]
[53.36202240 44.72935104]
[43.37929916 33.53358841]
[33.39657211 22.33782005]
[23.41384506 11.14205456]
[11.24046135 19.92913437]
[-1.77190959 27.41794205]
[-15.48532867 33.52909088]
[-29.75442696 38.19780350]
[-44.42794418 41.37458420]
[-59.35033035 43.02576065]
[-74.36340332 43.13382721]
[-89.30801392 41.69763947]
[-104.02574158 38.73242188]
[-118.36057281 34.26960754]
[-132.16053772 28.35650635]
[-145.27937317 21.05579567]
[-157.57798767 12.44487000]
[-168.92602539 2.61501074]
[-179.20318604 -8.32958126]
[-188.30052185 -20.27288628]
[-196.12159729 -33.08829880]
[-202.58349609 -46.63996887]
[-207.61773682 -60.78424072]
[-211.17094421 -75.37117767]
[-213.20545959 -90.24615479]
[-213.69970703 -105.25147247]
[-212.64845276 -120.22808838]
[-210.06282043 -135.01722717]
[-205.97026062 -149.46211243]
[-200.41410828 -163.40963745]
[-193.45330811 -176.71192932]
[-185.16162109 -189.22799683]
[-175.62693787 -200.82514954]
[-164.95034790 -211.38046265]
[-153.24502563 -220.78202820]
[-140.63505554 -228.93019104]
[-127.25410461 -235.73858643]
[-113.24401855 -241.13502502]
[-98.75331879 -245.06230164]
[-83.93560791 -247.47880554]
[-68.94795990 -248.35890198]
[-53.94926453 -247.69326782]
[-39.09850311 -245.48895264]
[-24.55311012 -241.76933289]
[-10.46727276 -236.57383728]
[3.00969195 -229.95753479]
[15.73492050 -221.99057007]
[27.57351875 -212.75738525]
[38.39999008 -202.35586548]
[48.09956741 -190.89628601]
[56.56942749 -178.50009155]
[63.71979141 -165.29872131]
[69.47486115 -151.43209839]
[73.77362061 -137.04721069]
[76.57051086 -122.29657745]
[77.83586884 -107.33653259]
[77.55630493 -92.32567596]
[75.73475647 -77.42312622]
[72.39055634 -62.78685379]
[67.55913544 -48.57202530]
[61.29172134 -34.92931366]
[53.65474701 -22.00334549]
[44.72917175 -9.93113995]
[34.60961151 1.15932846]
[44.59233856 12.35509396]
[54.57506180 23.55085945]
[64.55779266 34.74662781]
[74.54051971 45.94239044]
[74.93308258 30.94752884]
[83.93658447 18.95015335]
[98.22439575 14.38305378]
[112.51746368 18.93368340]
[121.53477478 30.92067719]
[121.94462585 45.91507721]
[113.59557343 58.37675095]
[99.57243347 63.70135880]
[85.05721283 59.92203522]
[93.04712677 72.61696625]
[101.03704071 85.31189728]
[100.90298462 70.31249237]
[103.93635559 55.62240601]
[110.00060272 41.90289688]
[118.82274628 29.77154541]
[130.00567627 19.77443695]
[143.04598999 12.36158657]
[157.35667419 7.86667967]
[172.29354858 6.49205160]
[187.18424988 8.29958153]
[201.35845947 13.20790386]
[214.17814636 20.99607277]
[225.06623840 31.31350708]
[233.53260803 43.69577408]
[239.19615173 57.58549500]
[241.80192566 72.35742950]
[241.23263550 87.34661865]
[237.51390076 101.87834167]
[230.81311035 115.29846191]
[221.43191528 127.00286865]
[209.79260254 136.46470642]
[196.41909790 143.25804138]
[181.91342163 147.07708740]
[166.92851257 147.74992371]
[152.13893127 145.24627686]
[138.21041870 139.67883301]
[125.76995087 131.29821777]
[115.37754059 120.48165894]
[107.50000000 107.71402740]
[107.50000000 122.71402740]
[107.50000000 137.71401978]
[107.50000000 152.71401978]
[107.50000000 167.71401978]
[107.50000000 182.71401978]
[107.50000000 197.71401978]
[107.50000000 212.71401978]
[107.50000000 227.71401978]
[107.50000000 242.71401978]
[122.03988647 246.77534485]
[134.94427490 254.60984802]
[145.25555420 265.63616943]
[152.20857239 279.03610229]
[155.28736877 293.81527710]
[154.26348877 308.87695312]
[149.21287537 323.10348511]
[140.51036072 335.43914795]
[128.80169678 344.96856689]
[114.95575714 350.98458862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 103]
[22 102]
[23 101]
[24 92]
[25 91]
[26 90]
[27 89]
[28 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
