%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCUUUUAGGGGGGGGGGUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCxxxxxxxxxxAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACCCCCCCCCCCUAGCAUUUA\
) } def
/len { sequence length } bind def

/coor [
[118.00249481 373.23626709]
[104.15655518 367.22024536]
[92.44789124 357.69082642]
[83.74536896 345.35516357]
[78.69476318 331.12863159]
[77.67087555 316.06695557]
[80.74967194 301.28778076]
[87.70269775 287.88787842]
[98.01397705 276.86154175]
[110.91835785 269.02703857]
[125.45824432 264.96572876]
[125.45824432 249.96571350]
[125.45824432 234.96571350]
[125.45824432 219.96571350]
[125.45824432 204.96571350]
[125.45824432 189.96571350]
[125.45824432 174.96571350]
[125.45824432 159.96571350]
[125.45824432 144.96571350]
[125.45824432 129.96571350]
[125.45824432 114.96571350]
[105.06762695 126.88893127]
[84.41864777 119.79712677]
[77.00545502 101.17201233]
[62.59323883 97.01412201]
[48.18102264 92.85623932]
[33.72633362 88.84849548]
[19.23073769 84.99133301]
[4.73514175 81.13417816]
[-9.76045513 77.27701569]
[-24.40395546 74.02619171]
[-39.17001343 71.38732910]
[-53.93606567 68.74846649]
[-61.27693558 81.99196625]
[-72.52188873 92.13246918]
[-86.45114899 98.07000732]
[-101.55377960 99.16052246]
[-116.19155884 95.28572845]
[-128.77670288 86.86592102]
[-137.94404602 74.81442261]
[-142.69918823 60.43849945]
[-142.52635193 45.29753494]
[-137.44425964 31.03390694]
[-128.00418091 19.19483185]
[-115.23011017 11.06451988]
[-100.50769043 7.52488995]
[-85.43389130 8.95989227]
[-71.64379883 15.21387005]
[-60.63327408 25.60843658]
[-53.59664917 39.01607132]
[-51.29720306 53.98240662]
[-36.53114700 56.62127304]
[-21.76509094 59.26013565]
[-19.35871506 57.70556641]
[-16.17214203 57.04244232]
[-12.55377197 57.58028793]
[-8.96002674 59.49236679]
[-5.90329504 62.78142166]
[8.59230137 66.63858032]
[23.08789825 70.49574280]
[37.58349609 74.35289764]
[44.90348053 73.02495575]
[52.33890915 78.44402313]
[66.75112915 82.60190582]
[81.16334534 86.75979614]
[97.25589752 73.86584473]
[120.10576630 78.37008667]
[120.72974396 63.38306808]
[121.35372162 48.39605331]
[107.54933929 42.03150177]
[97.23503113 30.86532211]
[91.98365784 16.60027695]
[92.59601593 1.41167998]
[98.97872162 -12.38431644]
[110.15846252 -22.68392372]
[124.43040466 -27.91652489]
[139.61817932 -27.28418922]
[153.40576172 -20.88334274]
[163.69065857 -9.69006538]
[168.90447998 4.58874702]
[168.25216675 19.77568054]
[161.83319092 33.55483627]
[150.62638855 43.82499313]
[136.34072876 49.02003098]
[135.71675110 64.00704956]
[135.09277344 78.99406433]
[146.59458923 88.62258911]
[161.23808289 85.37176514]
[175.88159180 82.12094116]
[190.52508545 78.87010956]
[205.16859436 75.61928558]
[209.10589600 71.99751282]
[213.59512329 70.44859314]
[217.73722839 70.82889557]
[220.82611084 72.65270233]
[235.64387512 70.32160187]
[250.46163940 67.99049377]
[265.27938843 65.65939331]
[280.09713745 63.32828903]
[290.10095215 49.01530457]
[307.02331543 46.38529968]
[320.36361694 56.57814789]
[335.12969971 53.93928528]
[349.89575195 51.30042267]
[364.66180420 48.66155624]
[379.42785645 46.02269363]
[389.74218750 33.73473358]
[405.77593994 34.28141785]
[415.22933960 47.24337769]
[410.85061646 62.67730331]
[395.99868774 68.74361420]
[382.06671143 60.78874969]
[367.30065918 63.42761230]
[352.53460693 66.06647491]
[337.76855469 68.70533752]
[323.00250244 71.34420776]
[317.16296387 82.87229156]
[305.56756592 89.00584412]
[292.36514282 87.29566956]
[282.42825317 78.14604950]
[267.61050415 80.47714996]
[252.79273987 82.80825806]
[237.97497559 85.13935852]
[223.15722656 87.47045898]
[208.41941833 90.26278687]
[193.77590942 93.51361084]
[179.13241577 96.76444244]
[164.48890686 100.01526642]
[149.84541321 103.26609039]
[140.45825195 114.96571350]
[140.45825195 129.96571350]
[140.45825195 144.96571350]
[140.45825195 159.96571350]
[140.45825195 174.96571350]
[140.45825195 189.96571350]
[140.45825195 204.96571350]
[140.45825195 219.96571350]
[140.45825195 234.96571350]
[140.45825195 249.96571350]
[140.45825195 264.96572876]
[154.99813843 269.02703857]
[167.90251160 276.86154175]
[178.21380615 287.88787842]
[185.16682434 301.28778076]
[188.24562073 316.06695557]
[187.22172546 331.12863159]
[182.17112732 345.35516357]
[173.46859741 357.69082642]
[161.75993347 367.22024536]
[147.91400146 373.23626709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 65]
[25 64]
[26 63]
[27 61]
[28 60]
[29 59]
[30 58]
[31 53]
[32 52]
[33 51]
[67 86]
[68 85]
[69 84]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
