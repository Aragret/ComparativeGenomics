%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCACCCGGGGGGGGGGAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAxxxxxxxxxxGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUCCCCCCCCCCACUCCCACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 391.91772461]
[71.19830322 385.90170288]
[59.48964310 376.37228394]
[50.78712082 364.03662109]
[45.73651886 349.81008911]
[44.71262741 334.74841309]
[47.79142761 319.96926880]
[54.74444962 306.56933594]
[65.05573273 295.54299927]
[77.96011353 287.70849609]
[92.50000000 283.64718628]
[92.50000000 268.64718628]
[92.50000000 253.64717102]
[92.50000000 238.64717102]
[92.50000000 223.64717102]
[92.50000000 208.64717102]
[92.50000000 193.64717102]
[92.50000000 178.64717102]
[92.50000000 163.64717102]
[92.50000000 148.64717102]
[92.50000000 133.64717102]
[83.80017090 130.42939758]
[76.27324677 125.00846863]
[70.46417999 117.77688599]
[56.23739624 122.53070068]
[42.01061630 127.28451538]
[27.78383827 132.03833008]
[19.36194801 145.69305420]
[3.41861367 147.47900391]
[-7.81580257 136.02616882]
[-5.72321749 120.12017822]
[8.09111595 111.96273804]
[23.03002357 117.81155396]
[37.25680161 113.05773926]
[51.48358154 108.30392456]
[65.71036530 103.55010986]
[65.48853302 92.11109161]
[69.07731628 80.92951965]
[76.27503204 71.27082825]
[86.46195984 64.29244232]
[98.65074921 60.90675354]
[94.34317017 46.53857040]
[79.32096100 44.06982040]
[66.91089630 35.35906219]
[59.54366684 22.17786026]
[58.63375854 7.16676283]
[64.30818939 -6.69362354]
[75.39189148 -16.67445755]
[71.08430481 -31.04264069]
[66.62748718 -45.36523819]
[62.02192307 -59.64069748]
[57.41635895 -73.91616058]
[52.81079483 -88.19161987]
[48.20523071 -102.46707916]
[33.21397018 -101.02616119]
[18.26350021 -102.84205627]
[4.05307627 -107.82983398]
[-8.75265312 -115.75620270]
[-19.55474091 -126.25044250]
[-27.84795380 -138.82170105]
[-33.24440384 -152.88201904]
[-35.49168396 -167.77375793]
[-34.48469543 -182.80039978]
[-30.27052689 -197.25912476]
[-23.04628754 -210.47367859]
[-13.14986706 -221.82598877]
[-1.04413962 -230.78509521]
[12.70468903 -236.93194580]
[27.45355988 -239.97904968]
[42.51264191 -239.78388977]
[57.17759705 -236.35559082]
[70.76251984 -229.85452271]
[82.63201141 -220.58471680]
[92.23091888 -208.97975159]
[99.11028290 -195.58242798]
[102.94834137 -181.01934814]
[103.56558990 -165.97164917]
[100.93314362 -151.14315796]
[95.17414856 -137.22741699]
[86.55793762 -124.87528229]
[75.48752594 -114.66449738]
[62.48069000 -107.07264709]
[67.08625793 -92.79718781]
[71.69181824 -78.52172089]
[76.29738617 -64.24626160]
[80.90294647 -49.97080231]
[85.98271179 -44.53557968]
[85.45248413 -35.35022354]
[89.76007080 -20.98204041]
[104.50665283 -18.74513245]
[116.87049103 -10.29262257]
[124.36905670 2.74319506]
[125.46862030 17.80344582]
[119.89766693 31.90491676]
[108.71134949 42.23098373]
[113.01893616 56.59917068]
[126.47489929 63.22766876]
[140.49160767 57.88615417]
[154.50833130 52.54464340]
[164.64860535 40.40028763]
[179.29682922 43.09819794]
[193.31353760 37.75668335]
[203.23945618 24.70263100]
[219.47120667 27.03983116]
[225.31094360 42.36397552]
[214.75126648 54.91089630]
[198.65505981 51.77339935]
[184.63835144 57.11491013]
[175.50064087 68.87720490]
[159.84983826 66.56135559]
[145.83312988 71.90287018]
[131.81640625 77.24437714]
[135.46900940 90.21219635]
[134.35607910 102.83598328]
[148.67866516 107.29280090]
[163.00126648 111.74961853]
[177.32386780 116.20643616]
[191.64646912 120.66324615]
[207.51562500 116.52785492]
[218.83737183 128.39167786]
[213.96482849 144.05024719]
[197.91047668 147.39535522]
[187.18965149 134.98583984]
[172.86705017 130.52903748]
[158.54444885 126.07221222]
[144.22184753 121.61540222]
[129.89926147 117.15858459]
[124.07133484 124.67697906]
[116.41046906 130.31631470]
[107.50000000 133.64717102]
[107.50000000 148.64717102]
[107.50000000 163.64717102]
[107.50000000 178.64717102]
[107.50000000 193.64717102]
[107.50000000 208.64717102]
[107.50000000 223.64717102]
[107.50000000 238.64717102]
[107.50000000 253.64717102]
[107.50000000 268.64718628]
[107.50000000 283.64718628]
[122.03988647 287.70849609]
[134.94427490 295.54299927]
[145.25555420 306.56933594]
[152.20857239 319.96926880]
[155.28736877 334.74841309]
[154.26348877 349.81008911]
[149.21287537 364.03662109]
[140.51036072 376.37228394]
[128.80169678 385.90170288]
[114.95575714 391.91772461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 36]
[25 35]
[26 34]
[27 33]
[41 96]
[42 95]
[48 89]
[49 88]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[97 112]
[98 111]
[99 110]
[101 108]
[102 107]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
