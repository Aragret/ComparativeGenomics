%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCCUAGGGGGGGGGGGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCxxxxxxxxxxCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCCCCCCCCCCCACCCACUAG\
) } def
/len { sequence length } bind def

/coor [
[83.02404785 343.88537598]
[70.15077209 335.98251343]
[60.02647781 324.77200317]
[53.47189713 311.16265869]
[51.01837540 296.25775146]
[52.86481094 281.26550293]
[58.86152267 267.40127563]
[68.52238464 255.78903198]
[81.06423187 247.37008667]
[95.47035217 242.82691956]
[95.15830231 227.83016968]
[94.84624481 212.83341980]
[94.53418732 197.83665466]
[94.22212982 182.83990479]
[93.91007233 167.84315491]
[93.59801483 152.84640503]
[93.28596497 137.84963989]
[92.97390747 122.85289001]
[92.66184998 107.85614014]
[89.56352997 93.17961121]
[83.78725433 79.33639526]
[78.01097870 65.49317932]
[72.23471069 51.64995956]
[58.00460052 56.41459274]
[43.46777725 60.13998795]
[28.70003319 62.80672073]
[13.77835846 64.40088654]
[-1.21945143 64.91418457]
[-16.21520233 64.34392548]
[-31.13071442 62.69308472]
[-45.88822174 59.97027588]
[-60.41078949 56.18968964]
[-74.62269592 51.37104034]
[-88.44985199 45.53944397]
[-101.82016754 38.72531128]
[-114.66393280 30.96416092]
[-126.91419220 22.29646301]
[-138.50706482 12.76740360]
[-149.38212585 2.42666411]
[-159.48266602 -8.67184258]
[-168.75602722 -20.47025299]
[-177.15386963 -32.90705872]
[-184.63240051 -45.91741180]
[-191.15263367 -59.43349075]
[-196.68057251 -73.38481903]
[-201.18739319 -87.69866943]
[-204.64961243 -102.30040741]
[-207.04917908 -117.11390686]
[-208.37356567 -132.06195068]
[-208.61589050 -147.06657410]
[-207.77485657 -162.04959106]
[-205.85488892 -176.93284607]
[-202.86596680 -191.63876343]
[-198.82368469 -206.09068298]
[-193.74913025 -220.21322632]
[-187.66873169 -233.93280029]
[-180.61421204 -247.17785645]
[-172.62234497 -259.87933350]
[-163.73480225 -271.97103882]
[-153.99789429 -283.38992310]
[-143.46241760 -294.07641602]
[-132.18328857 -303.97485352]
[-120.21929932 -313.03359985]
[-107.63284302 -321.20541382]
[-94.48953247 -328.44775391]
[-80.85789490 -334.72277832]
[-66.80899048 -339.99783325]
[-52.41607285 -344.24539185]
[-37.75418091 -347.44329834]
[-22.89975357 -349.57489014]
[-7.93023634 -350.62908936]
[7.07632637 -350.60034180]
[22.04169655 -349.48883057]
[36.88785172 -347.30035400]
[51.53738785 -344.04629517]
[65.91392517 -339.74365234]
[79.94252014 -334.41482544]
[93.55002594 -328.08761597]
[106.66550446 -320.79501343]
[119.22056580 -312.57504272]
[131.14976501 -303.47052002]
[142.39089966 -293.52896118]
[152.88537598 -282.80218506]
[162.57846069 -271.34609985]
[171.41963196 -259.22045898]
[179.36279297 -246.48844910]
[186.36653137 -233.21647644]
[192.39433289 -219.47370911]
[197.41476440 -205.33183289]
[201.40165710 -190.86453247]
[204.33422852 -176.14727783]
[206.19717407 -161.25677490]
[206.98080444 -146.27066040]
[206.68101501 -131.26705933]
[205.29937744 -116.32420349]
[202.84309387 -101.52000427]
[199.32498169 -86.93163300]
[194.76335144 -72.63515472]
[189.18202209 -58.70509720]
[182.61006165 -45.21409225]
[175.08175659 -32.23247910]
[166.63635254 -19.82793236]
[157.31785583 -8.06512642]
[147.17488098 2.99461079]
[136.26029968 13.29362011]
[124.63101196 22.77820587]
[112.34764099 31.39891815]
[99.47424316 39.11081696]
[86.07792664 45.87368774]
[91.85420227 59.71690750]
[97.63047028 73.56012726]
[103.40674591 87.40334320]
[105.77349854 72.59123230]
[112.52381134 59.19596863]
[123.02098083 48.48104477]
[136.27484131 41.45715332]
[151.03523254 38.78681946]
[165.90989685 40.72192001]
[179.49575806 47.07992935]
[190.51135254 57.26113129]
[197.91761780 70.30518341]
[201.01596069 84.98169708]
[199.51414490 99.90632629]
[193.55381775 113.67130280]
[183.69718933 124.97824097]
[170.87397766 132.76062012]
[156.29374695 136.28436279]
[141.33177185 135.21710205]
[127.39932251 129.65950012]
[115.81059265 120.13577271]
[107.65859985 107.54408264]
[107.97065735 122.54084015]
[108.28271484 137.53759766]
[108.59477234 152.53434753]
[108.90682983 167.53109741]
[109.21888733 182.52784729]
[109.53093719 197.52461243]
[109.84299469 212.52136230]
[110.15505219 227.51811218]
[110.46710968 242.51486206]
[125.04975128 246.45481873]
[137.93095398 254.34477234]
[148.06651306 265.54510498]
[154.63476562 279.14782715]
[157.10325623 294.05029297]
[155.27188110 309.04437256]
[149.28909302 322.91461182]
[139.63990784 334.53656006]
[127.10652161 342.96810913]
[112.70497131 347.52572632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 112]
[21 111]
[22 110]
[23 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
