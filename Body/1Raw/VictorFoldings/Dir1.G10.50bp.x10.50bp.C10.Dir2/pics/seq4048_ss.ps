%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCCUAUUGGGGGGGGGGCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUAxxxxxxxxxxAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCCCCCCCCCCCUUGCCCUAUU\
) } def
/len { sequence length } bind def

/coor [
[77.72608185 350.51397705]
[66.51065063 340.44866943]
[57.91925049 328.06784058]
[52.41520691 314.03921509]
[50.29534531 299.11935425]
[51.67398834 284.11282349]
[56.47679138 269.82891846]
[64.44473267 257.03796387]
[75.14812469 246.42974854]
[88.00974274 238.57637024]
[102.33597565 233.90133667]
[101.08910370 218.95326233]
[99.84222412 204.00517273]
[98.59535217 189.05708313]
[97.34848022 174.10899353]
[96.10160065 159.16090393]
[94.85472870 144.21281433]
[93.60785675 129.26473999]
[80.22157288 122.49662018]
[67.44421387 130.35404968]
[54.66685486 138.21147156]
[41.88949585 146.06889343]
[34.56716156 160.74252319]
[18.18406105 161.46780396]
[9.59372330 147.49861145]
[17.63315010 133.20527649]
[34.03207016 133.29153442]
[46.80942917 125.43411255]
[59.58678436 117.57669067]
[72.36414337 109.71926117]
[74.65762329 88.59216309]
[90.08679199 75.65263367]
[79.87331390 64.66696930]
[69.65982819 53.68130493]
[57.41803741 62.38724899]
[44.14458847 69.42078400]
[30.06661797 74.66156006]
[15.42501450 78.01989746]
[0.47031385 79.43833160]
[-14.54158783 78.89259338]
[-29.35381699 76.39202118]
[-43.71291733 71.97939301]
[-57.37318420 65.73023224]
[-70.10087585 57.75145340]
[-81.67820740 48.17959213]
[-91.90706635 37.17843628]
[-100.61242676 24.93622780]
[-107.64533234 11.66244602]
[-112.88543701 -2.41577506]
[-116.24308014 -17.05753899]
[-117.66080475 -32.01230621]
[-117.11434937 -47.02418137]
[-114.61306763 -61.83629227]
[-110.19976044 -76.19518280]
[-103.94994354 -89.85515594]
[-95.97055817 -102.58246613]
[-86.39814758 -114.15933990]
[-75.39650726 -124.38767242]
[-63.15388107 -133.09245300]
[-49.87976837 -140.12472534]
[-35.80129623 -145.36416626]
[-21.15937233 -148.72109985]
[-6.20453691 -150.13812256]
[8.80731201 -149.59094238]
[23.61930275 -147.08895874]
[37.97798538 -142.67497253]
[51.63765717 -136.42449951]
[64.36458588 -128.44451904]
[75.94100189 -118.87155151]
[86.16881561 -107.86942291]
[94.87301636 -95.62638855]
[101.90465546 -82.35193634]
[107.14342499 -68.27321625]
[110.49967194 -53.63113403]
[111.91596985 -38.67623138]
[111.36808777 -23.66440773]
[108.86539459 -8.85253429]
[104.45072174 5.50593567]
[98.19960022 19.16531181]
[90.21900940 31.89186287]
[80.64549255 43.46782303]
[90.85897827 54.45348740]
[101.07245636 65.43915558]
[115.60739136 69.14531708]
[129.83416748 64.39150238]
[144.06094360 59.63768387]
[158.28773499 54.88386917]
[172.51451111 50.13005447]
[157.89057922 46.79231262]
[144.76055908 39.53954315]
[134.14912415 28.93776703]
[126.88442993 15.81435108]
[123.53338623 1.19345760]
[124.35752106 -13.78388500]
[129.29252625 -27.94883347]
[137.95326233 -40.19594193]
[149.66383362 -49.56943512]
[163.51036072 -55.33779907]
[178.41221619 -57.05086517]
[193.20646667 -54.57494354]
[206.73854065 -48.10325623]
[217.95240784 -38.14086151]
[225.97291565 -25.46523476]
[230.17413330 -11.06558990]
[230.22819519 3.93431306]
[226.13087463 18.36386681]
[218.20195007 31.09697914]
[207.06019592 41.13994598]
[193.57252502 47.70983887]
[208.50683594 49.11214066]
[223.44114685 50.51444244]
[238.37545776 51.91674805]
[250.38516235 41.64336777]
[266.13497925 42.95441818]
[276.28082275 55.07207870]
[274.80331421 70.80715179]
[262.57907104 80.82430267]
[246.86048889 79.18052673]
[236.97314453 66.85105896]
[222.03883362 65.44875336]
[207.10453796 64.04644775]
[192.17022705 62.64414597]
[177.26832581 64.35683441]
[163.04154968 69.11064911]
[148.81475830 73.86446381]
[134.58798218 78.61827850]
[120.36120605 83.37209320]
[126.59268188 108.07491302]
[108.55593872 128.01785278]
[109.80281830 142.96594238]
[111.04969025 157.91403198]
[112.29656219 172.86212158]
[113.54344177 187.81021118]
[114.79031372 202.75830078]
[116.03718567 217.70637512]
[117.28406525 232.65446472]
[132.18684387 234.89138794]
[146.17182922 240.50540161]
[158.48481750 249.19372559]
[168.46177673 260.48782349]
[175.56468201 273.77862549]
[179.41047668 288.34936523]
[179.79176331 303.41427612]
[176.68797302 318.16091919]
[170.26647949 331.79400635]
[160.87361145 343.57833862]
[149.01589966 352.87841797]
[135.33280945 359.19268799]
[120.56226349 362.18060303]
[105.50081635 361.68106079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 30]
[20 29]
[21 28]
[22 27]
[32 83]
[33 82]
[34 81]
[84 127]
[85 126]
[86 125]
[87 124]
[88 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
