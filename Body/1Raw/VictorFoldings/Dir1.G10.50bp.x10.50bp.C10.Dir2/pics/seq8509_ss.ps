%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCAUGGGGGGGGGGGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUxxxxxxxxxxGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCCCCCCCCCCCUAGCCAUG\
) } def
/len { sequence length } bind def

/coor [
[83.21678162 353.14779663]
[70.34350586 345.24493408]
[60.21921539 334.03442383]
[53.66463089 320.42507935]
[51.21110916 305.52014160]
[53.05754852 290.52792358]
[59.05426025 276.66369629]
[68.71511841 265.05145264]
[81.25696564 256.63250732]
[95.66308594 252.08934021]
[95.35103607 237.09259033]
[95.03897858 222.09582520]
[94.72692108 207.09907532]
[94.41486359 192.10232544]
[94.10280609 177.10557556]
[93.79074860 162.10881042]
[93.47869873 147.11206055]
[93.16664124 132.11531067]
[92.85458374 117.11855316]
[85.67207336 103.94997406]
[73.23263550 95.56783295]
[60.79319382 87.18568420]
[48.35375214 78.80354309]
[35.11116791 71.75840759]
[21.20861244 66.12644958]
[7.30605602 60.49449539]
[2.00891542 61.24275208]
[-2.56655908 59.97097397]
[-5.76154184 57.30756378]
[-7.27020597 54.05311584]
[-20.79439545 47.56495285]
[-34.31858444 41.07678604]
[-43.47474289 40.17309952]
[-48.05450058 34.31038284]
[-61.44078445 27.54226685]
[-74.82707214 20.77415276]
[-88.21335602 14.00603771]
[-101.59963989 7.23792315]
[-115.12383270 0.74975824]
[-128.78007507 -5.45564890]
[-142.43630981 -11.66105556]
[-153.80296326 -1.52601635]
[-168.31118774 3.10338306]
[-183.44734192 1.42507076]
[-196.58900452 -6.27017546]
[-205.45928955 -18.64910698]
[-208.52136230 -33.56700134]
[-205.24472046 -48.43923950]
[-196.19705200 -60.68912125]
[-182.94592285 -68.19427490]
[-167.78715515 -69.65438843]
[-153.34712219 -64.81649780]
[-142.12763977 -54.51877975]
[-136.07254028 -40.54539108]
[-136.23091125 -25.31729698]
[-122.57466125 -19.11189079]
[-108.91842651 -12.90648270]
[-104.15627289 -13.74159622]
[-98.82521057 -11.54817581]
[-94.83152771 -6.14836168]
[-81.44524384 0.61975330]
[-68.05895233 7.38786793]
[-54.67267227 14.15598297]
[-41.28638458 20.92409706]
[-27.83042145 27.55259705]
[-14.30623055 34.04076004]
[-0.78204072 40.52892685]
[12.93801308 46.59193802]
[26.84056854 52.22389603]
[40.74312592 57.85585403]
[33.38912201 44.78226852]
[33.41953278 29.78229904]
[40.82648849 16.73864174]
[53.69272232 9.02760696]
[68.68784332 8.64517403]
[81.93041992 15.69033241]
[89.99263763 28.33946609]
[90.78762817 43.31838226]
[84.10960388 56.74983978]
[71.68715668 65.15714264]
[56.73589706 66.36410522]
[69.17533875 74.74624634]
[81.61477661 83.12838745]
[94.05421448 91.51053619]
[96.61782074 86.85949707]
[101.79361725 83.32312012]
[108.97964478 82.15457153]
[117.03197479 84.27429962]
[131.44418335 80.11641693]
[145.85639954 75.95852661]
[160.26861572 71.80063629]
[169.12400818 49.60206985]
[195.99641418 43.89904785]
[207.88879395 34.75731659]
[219.78117371 25.61557961]
[225.54023743 10.26093102]
[241.75946045 7.83837795]
[251.75390625 20.84003639]
[245.24214172 35.89091492]
[228.92291260 37.50796127]
[217.03053284 46.64969635]
[205.13815308 55.79142761]
[210.91442871 69.63464355]
[225.77746582 67.61231232]
[240.64051819 65.58998108]
[255.50357056 63.56764221]
[263.69482422 50.24707794]
[278.54821777 45.35724258]
[293.05044556 51.20697021]
[300.35400391 65.03419495]
[297.01034546 80.31012726]
[284.59829712 89.82193756]
[268.97839355 89.07843781]
[257.52590942 78.43068695]
[242.66285706 80.45302582]
[227.79980469 82.47535706]
[212.93675232 84.49769592]
[204.32101440 94.45905304]
[192.90139771 99.56591797]
[181.05406189 99.36042786]
[171.00811768 94.43292999]
[164.42651367 86.21285248]
[150.01429749 90.37074280]
[135.60208130 94.52863312]
[121.18986511 98.68651581]
[136.06521606 100.61620331]
[144.67355347 112.90019989]
[141.41036987 127.54094696]
[128.40017700 135.00653076]
[114.11332703 130.43644714]
[107.85133362 116.80650330]
[108.16339111 131.80325317]
[108.47544861 146.80000305]
[108.78750610 161.79676819]
[109.09956360 176.79351807]
[109.41162109 191.79026794]
[109.72367096 206.78701782]
[110.03572845 221.78378296]
[110.34778595 236.78053284]
[110.65984344 251.77728271]
[125.24248505 255.71723938]
[138.12368774 263.60717773]
[148.25924683 274.80749512]
[154.82749939 288.41024780]
[157.29598999 303.31271362]
[155.46461487 318.30679321]
[149.48182678 332.17703247]
[139.83264160 343.79898071]
[127.29925537 352.23052979]
[112.89770508 356.78814697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 84]
[21 83]
[22 82]
[23 81]
[24 70]
[25 69]
[26 68]
[30 67]
[31 66]
[32 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 57]
[40 56]
[41 55]
[88 125]
[89 124]
[90 123]
[91 122]
[93 102]
[94 101]
[95 100]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
