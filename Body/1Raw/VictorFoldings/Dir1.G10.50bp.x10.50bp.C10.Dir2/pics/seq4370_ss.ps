%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCACUCACGGGGGGGGGGCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAxxxxxxxxxxCCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCACCCCCCCCCCUACCUCUCAC\
) } def
/len { sequence length } bind def

/coor [
[64.96096802 355.81881714]
[51.11502838 349.80279541]
[39.40636444 340.27337646]
[30.70384216 327.93771362]
[25.65324020 313.71121216]
[24.62934875 298.64950562]
[27.70814705 283.87036133]
[34.66116714 270.47042847]
[44.97245407 259.44409180]
[57.87683487 251.60958862]
[72.41671753 247.54827881]
[72.41671753 232.54827881]
[72.41671753 217.54827881]
[72.41671753 202.54827881]
[72.41671753 187.54827881]
[72.41671753 172.54827881]
[72.41671753 157.54827881]
[72.41671753 142.54827881]
[72.41671753 127.54827881]
[72.41671753 112.54827881]
[69.77785492 97.78221893]
[64.58244324 83.71070099]
[59.38702393 69.63918304]
[54.19160843 55.56766129]
[39.77561569 59.73621750]
[25.09640694 62.85367966]
[10.23051167 64.90378571]
[-4.74456167 65.87585449]
[-19.75074196 65.76481628]
[-34.70978928 64.57125092]
[-49.54372025 62.30138016]
[-64.17518616 58.96704102]
[-78.52791595 54.58560944]
[-92.52707672 49.17993546]
[-106.09967804 42.77819824]
[-119.17496490 35.41377640]
[-131.68475342 27.12506485]
[-143.56384277 17.95527649]
[-154.75028992 7.95221996]
[-165.18577576 -2.83195400]
[-174.81590271 -14.34102154]
[-183.59043884 -26.51497841]
[-191.46365356 -39.29035187]
[-198.39450073 -52.60054398]
[-204.34683228 -66.37615204]
[-209.28964233 -80.54535675]
[-213.19712830 -95.03429413]
[-216.04895020 -109.76741791]
[-217.83020020 -124.66791534]
[-218.53163147 -139.65811157]
[-218.14956665 -154.65983582]
[-216.68600464 -169.59487915]
[-214.14857483 -184.38539124]
[-210.55050659 -198.95425415]
[-205.91053772 -213.22549438]
[-200.25289917 -227.12474060]
[-193.60705566 -240.57949829]
[-186.00765991 -253.51962280]
[-177.49435425 -265.87768555]
[-168.11149597 -277.58920288]
[-157.90802002 -288.59313965]
[-146.93711853 -298.83215332]
[-135.25598145 -308.25280762]
[-122.92552948 -316.80603027]
[-110.01003265 -324.44720459]
[-96.57682800 -331.13650513]
[-82.69595337 -336.83905029]
[-68.43978119 -341.52511597]
[-53.88262939 -345.17028809]
[-39.10039902 -347.75552368]
[-24.17015648 -349.26736450]
[-9.16974449 -349.69790649]
[5.82263327 -349.04495239]
[20.72881317 -347.31185913]
[35.47107697 -344.50769043]
[49.97256851 -340.64706421]
[64.15768433 -335.75009155]
[77.95246124 -329.84231567]
[91.28498840 -322.95452881]
[104.08574677 -315.12265015]
[116.28800964 -306.38751221]
[127.82814789 -296.79467773]
[138.64599609 -286.39410400]
[148.68516541 -275.24005127]
[157.89331055 -263.39065552]
[166.22242737 -250.90773010]
[173.62907410 -237.85632324]
[180.07464600 -224.30448914]
[185.52555847 -210.32287598]
[189.95336914 -195.98439026]
[193.33499146 -181.36376953]
[195.65280151 -166.53726196]
[196.89471436 -151.58213806]
[197.05427551 -136.57640076]
[196.13061523 -121.59826660]
[194.12857056 -106.72582245]
[191.05859375 -92.03660583]
[186.93666077 -77.60721588]
[181.78427124 -63.51286316]
[175.62829590 -49.82704163]
[168.50082397 -36.62110138]
[160.43901062 -23.96388817]
[151.48490906 -11.92139530]
[141.68516541 -0.55640650]
[131.09091187 10.07182503]
[119.75734711 19.90788841]
[107.74357605 28.90050507]
[95.11223602 37.00278473]
[81.92917633 44.17249298]
[68.26313019 50.37224579]
[73.45854187 64.44376373]
[78.65396118 78.51528168]
[83.84937286 92.58680725]
[102.05525208 83.94840240]
[114.37007904 97.45004272]
[128.38679504 102.79155731]
[139.81704712 92.61275482]
[154.67115784 88.92302704]
[169.53575134 92.57024384]
[180.99507141 102.71630859]
[186.41583252 117.02972412]
[184.55239868 132.22137451]
[175.83297729 144.80032349]
[162.26119995 151.87603760]
[146.95578003 151.82254028]
[133.43379211 144.65216064]
[124.80249786 132.01257324]
[123.04528046 116.80826569]
[109.02857208 111.46675873]
[99.03124237 116.15361786]
[87.41671753 112.54827881]
[87.41671753 127.54827881]
[87.41671753 142.54827881]
[87.41671753 157.54827881]
[87.41671753 172.54827881]
[87.41671753 187.54827881]
[87.41671753 202.54827881]
[87.41671753 217.54827881]
[87.41671753 232.54827881]
[87.41671753 247.54827881]
[101.95661163 251.60958862]
[114.86099243 259.44409180]
[125.17227173 270.47042847]
[132.12528992 283.87036133]
[135.20408630 298.64950562]
[134.18020630 313.71121216]
[129.12960815 327.93771362]
[120.42707825 340.27337646]
[108.71841431 349.80279541]
[94.87247467 355.81881714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 113]
[22 112]
[23 111]
[24 110]
[115 129]
[116 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
