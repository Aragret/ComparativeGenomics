%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAAAUAGGGGGGGGGGGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAxxxxxxxxxxCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCCCCCCCCCCCAGAAAAUAG\
) } def
/len { sequence length } bind def

/coor [
[66.80353546 524.44311523]
[52.95759583 518.42712402]
[41.24893188 508.89767456]
[32.54640961 496.56201172]
[27.49580574 482.33551025]
[26.47191429 467.27380371]
[29.55071449 452.49465942]
[36.50373459 439.09472656]
[46.81502151 428.06838989]
[59.71940231 420.23388672]
[74.25928497 416.17257690]
[74.25928497 401.17257690]
[74.25928497 386.17257690]
[74.25928497 371.17257690]
[74.25928497 356.17257690]
[74.25928497 341.17257690]
[74.25928497 326.17257690]
[74.25928497 311.17257690]
[74.25928497 296.17257690]
[74.25928497 281.17257690]
[71.09371185 274.44021606]
[74.41857147 265.86132812]
[74.73062897 250.86457825]
[75.04268646 235.86781311]
[62.89136124 229.55871582]
[54.61516190 218.56855774]
[51.88214111 205.01722717]
[55.28414536 191.54981995]
[64.20980072 180.82023621]
[76.95347595 174.96835327]
[77.57745361 159.98133850]
[78.20143127 144.99432373]
[78.82540894 130.00730896]
[74.51224518 144.37380981]
[61.67881775 152.13932800]
[46.95105743 149.29449463]
[37.93293762 137.30810547]
[39.28053665 122.36875916]
[50.29808044 112.18967438]
[65.29911041 112.02705383]
[50.72640991 108.47229004]
[35.14608765 113.58947754]
[23.10639000 102.45494843]
[26.99272919 86.52295685]
[42.80717087 82.18296814]
[54.28117371 93.89958954]
[68.85387421 97.45435333]
[77.59558868 79.18000031]
[95.38605499 70.43828583]
[92.28773499 55.76175690]
[89.18941498 41.08523178]
[84.32566833 33.27524948]
[86.18264771 26.07127190]
[83.39032745 11.33346653]
[73.21929932 -0.78514743]
[78.45211029 -14.73028851]
[75.65978241 -29.46809387]
[72.86746216 -44.20590210]
[70.07513428 -58.94370651]
[55.02401352 -59.90001678]
[40.68383026 -64.57012939]
[27.95602036 -72.66047668]
[17.64066505 -83.66248322]
[10.38619804 -96.88456726]
[6.64864016 -111.49557495]
[6.66293716 -126.57704163]
[10.42819023 -141.18093872]
[17.70771217 -154.38923645]
[28.04390907 -165.37167358]
[40.78703308 -173.43788147]
[55.13604736 -178.08079529]
[70.18895721 -179.00856018]
[84.99951935 -176.16287231]
[98.63674164 -169.72259521]
[110.24336243 -160.09259033]
[119.08979034 -147.87818909]
[124.61993408 -133.84721375]
[126.48615265 -118.88165283]
[124.57113647 -103.92225647]
[118.99526978 -89.90938568]
[110.10905457 -77.72389984]
[98.47109222 -68.13179779]
[84.81294250 -61.73603058]
[87.60526276 -46.99822617]
[90.39759064 -32.26041794]
[93.18991852 -17.52261353]
[103.16121674 -6.45814562]
[98.12812805 8.54114246]
[100.92045593 23.27894783]
[103.86593628 37.98690796]
[106.96425629 52.66343689]
[110.06258392 67.33995819]
[123.07888794 74.79486847]
[137.30566406 70.04105377]
[151.53245544 65.28723907]
[158.73602295 59.56356430]
[166.10490417 60.58585739]
[180.42750549 56.12904358]
[194.75010681 51.67222595]
[196.48896790 36.54291153]
[204.23675537 23.43215752]
[216.65107727 14.61148453]
[231.58111572 11.60912704]
[246.44012451 14.94526100]
[258.65368652 24.04188156]
[266.10574341 37.32294464]
[267.50518799 52.48742294]
[262.60955811 66.90798187]
[252.26701355 78.08617401]
[238.26951599 84.08530426]
[223.04217529 83.86599731]
[209.22323608 77.46623230]
[199.20692444 65.99482727]
[184.88432312 70.45163727]
[170.56172180 74.90845490]
[156.28627014 79.51402283]
[142.05947876 84.26783752]
[127.83270264 89.02165222]
[123.44750977 119.63782501]
[93.81242371 130.63128662]
[93.18844604 145.61830139]
[92.56446838 160.60531616]
[91.94049072 175.59233093]
[105.97346497 184.27877808]
[113.68367767 198.76490784]
[113.05893707 215.06950378]
[104.36324310 228.76501465]
[90.03943634 236.17987061]
[89.72737885 251.17663574]
[89.41532135 266.17337036]
[89.25928497 281.17257690]
[89.25928497 296.17257690]
[89.25928497 311.17257690]
[89.25928497 326.17257690]
[89.25928497 341.17257690]
[89.25928497 356.17257690]
[89.25928497 371.17257690]
[89.25928497 386.17257690]
[89.25928497 401.17257690]
[89.25928497 416.17257690]
[103.79917145 420.23388672]
[116.70355225 428.06838989]
[127.01483917 439.09472656]
[133.96786499 452.49465942]
[137.04666138 467.27380371]
[136.02276611 482.33551025]
[130.97216797 496.56201172]
[122.26964569 508.89767456]
[110.56098175 518.42712402]
[96.71504211 524.44311523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[30 123]
[31 122]
[32 121]
[33 120]
[40 47]
[41 46]
[49 92]
[50 91]
[51 90]
[53 89]
[54 88]
[56 86]
[57 85]
[58 84]
[59 83]
[93 118]
[94 117]
[95 116]
[97 115]
[98 114]
[99 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
