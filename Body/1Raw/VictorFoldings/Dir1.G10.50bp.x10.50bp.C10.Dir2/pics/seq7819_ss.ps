%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUACAUCAGGGGGGGGGGCAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGAxxxxxxxxxxGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAACCCCCCCCCCAAUGACAUCA\
) } def
/len { sequence length } bind def

/coor [
[58.90320587 409.84402466]
[45.68301010 402.57156372]
[34.79620743 392.12454224]
[26.98507690 379.21530151]
[22.78219604 364.72399902]
[22.47412300 349.63864136]
[26.08186340 334.98782349]
[33.35943604 321.77044678]
[43.81064606 310.88766479]
[56.72290802 303.08151245]
[71.21584320 298.88424683]
[70.90378571 283.88748169]
[70.59172821 268.89071655]
[70.27967072 253.89398193]
[69.96762085 238.89721680]
[69.65556335 223.90046692]
[69.34350586 208.90371704]
[69.03144836 193.90696716]
[68.71939087 178.91020203]
[55.86099243 171.18612671]
[42.47470474 177.95423889]
[29.08842087 184.72235107]
[15.70213604 191.49046326]
[2.31585145 198.25857544]
[-6.20088577 212.27276611]
[-22.58757591 211.63368225]
[-29.98699760 196.99876404]
[-20.78725815 183.42317200]
[-4.45226336 184.87229919]
[8.93402195 178.10418701]
[22.32030678 171.33607483]
[35.70659256 164.56794739]
[49.09287643 157.79983521]
[48.76538849 148.25268555]
[51.38641357 139.41973877]
[56.48141861 132.15339661]
[63.34896088 127.08419037]
[71.15027618 124.56748962]
[79.00854492 124.66332245]
[84.20395660 110.59180450]
[79.15520477 96.46700287]
[66.21714783 88.87709808]
[53.27909088 81.28718567]
[40.03650284 74.24205017]
[26.51231384 67.75388336]
[12.98812389 61.26572037]
[-3.31318879 63.05436325]
[-12.79335976 49.67309189]
[-5.70000076 34.88741302]
[10.66984749 33.90756607]
[19.47628975 47.74153137]
[33.00048065 54.22969818]
[46.52466965 60.71786118]
[49.25891876 59.86275101]
[52.50682068 60.07513046]
[55.84994507 61.56018829]
[58.80216980 64.36293793]
[60.86899948 68.34912872]
[73.80705261 75.93904114]
[86.74510956 83.52894592]
[93.85849762 81.15203857]
[89.10490417 66.92518616]
[103.33183289 62.17181396]
[108.08528137 76.39822388]
[115.19866943 74.02131653]
[120.97493744 60.17810059]
[126.75121307 46.33488083]
[132.52748108 32.49166489]
[138.30375671 18.64844704]
[144.08003235 4.80522919]
[131.63653564 -3.66496444]
[121.15303040 -14.46687222]
[113.05883789 -27.15816116]
[107.68538666 -41.21913528]
[105.25273132 -56.07400131]
[105.86047363 -71.11446381]
[109.48373413 -85.72462463]
[115.97415161 -99.30621338]
[125.06593323 -111.30306244]
[136.38677979 -121.22390747]
[149.47311401 -128.66250610]
[163.78904724 -133.31425476]
[178.74836731 -134.98864746]
[193.73849487 -133.61714172]
[208.14559937 -129.25588989]
[221.37969971 -122.08347321]
[232.89886475 -112.39361572]
[242.23143005 -100.58309937]
[248.99519348 -87.13555908]
[252.91320801 -72.60166168]
[253.82501221 -57.57656860]
[251.69328308 -42.67554092]
[246.60531616 -28.50876808]
[238.76945496 -15.65637112]
[228.50656128 -4.64464760]
[216.23690796 4.07547951]
[202.46293640 10.14692593]
[187.74867249 13.32107067]
[172.69665527 13.46793365]
[157.92324829 10.58150101]
[152.14697266 24.42471886]
[146.37069702 38.26793671]
[140.59443665 52.11115646]
[134.81816101 65.95436859]
[129.04188538 79.79759216]
[137.55297852 92.14916229]
[152.54566956 91.68112183]
[167.53836060 91.21308136]
[182.53106689 90.74503326]
[197.52375793 90.27699280]
[211.17045593 81.18304443]
[225.74740601 88.69599152]
[226.25910950 105.08715820]
[212.17915344 113.49471283]
[197.99180603 105.26969147]
[182.99909973 105.73773193]
[168.00640869 106.20577240]
[153.01371765 106.67381287]
[138.02101135 107.14186096]
[148.16250610 118.19402313]
[151.40193176 132.84005737]
[146.86747742 147.13825989]
[135.77949524 157.24057007]
[121.12209320 160.42814636]
[106.84001923 155.84312439]
[96.77700806 144.71946716]
[93.64131165 130.05088806]
[98.27547455 115.78722382]
[93.08006287 129.85873413]
[104.57315063 155.22517395]
[83.71614838 178.59814453]
[84.02820587 193.59490967]
[84.34025574 208.59165955]
[84.65231323 223.58840942]
[84.96437073 238.58515930]
[85.27642822 253.58192444]
[85.58848572 268.57867432]
[85.90054321 283.57543945]
[86.21259308 298.57217407]
[100.86759186 302.16296387]
[114.09339905 309.42520142]
[124.98826599 319.86380005]
[132.80935669 332.76699829]
[137.02343750 347.25506592]
[137.34315491 362.34017944]
[133.74673462 376.99377441]
[126.47936249 390.21679688]
[116.03656769 401.10763550]
[103.13033295 408.92373657]
[88.64064026 413.13220215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[39 129]
[40 128]
[41 60]
[42 59]
[43 58]
[44 53]
[45 52]
[46 51]
[65 105]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
