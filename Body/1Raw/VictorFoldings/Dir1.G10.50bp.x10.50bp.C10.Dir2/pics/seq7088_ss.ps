%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAUUCUCGGGGGGGGGGAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUxxxxxxxxxxCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCCCCCCCCCCCUAUACUC\
) } def
/len { sequence length } bind def

/coor [
[112.86219788 370.08627319]
[99.01625824 364.07025146]
[87.30759430 354.54083252]
[78.60507202 342.20516968]
[73.55447388 327.97863770]
[72.53057861 312.91696167]
[75.60938263 298.13778687]
[82.56240082 284.73785400]
[92.87368774 273.71154785]
[105.77806854 265.87701416]
[120.31795502 261.81570435]
[120.31795502 246.81570435]
[120.31795502 231.81570435]
[120.31795502 216.81570435]
[120.31795502 201.81570435]
[120.31795502 186.81570435]
[120.31795502 171.81570435]
[120.31795502 156.81570435]
[120.31795502 141.81570435]
[120.31795502 126.81571198]
[113.88874817 122.95366669]
[94.60115051 111.36753845]
[81.35856628 118.41267395]
[75.31529999 133.27398682]
[59.88817978 137.67666626]
[46.91157532 128.24336243]
[46.34002304 112.21049500]
[58.61196899 101.87710571]
[74.31343079 105.17008972]
[87.55601501 98.12495422]
[96.57353973 86.13812256]
[99.67186737 71.46160126]
[93.53647614 54.13137054]
[105.68956757 41.50986862]
[108.48188782 26.77206230]
[111.27421570 12.03425694]
[96.76394653 8.20790291]
[82.55973053 3.36753678]
[68.73233032 -2.46272755]
[55.35063934 -9.25384331]
[42.48132324 -16.97197914]
[30.18849373 -25.57868004]
[18.53339767 -35.03106689]
[7.57409954 -45.28205490]
[-2.63480210 -56.28056717]
[-12.04244614 -67.97180939]
[-20.60196304 -80.29753876]
[-28.27070999 -93.19634247]
[-35.01048279 -106.60396576]
[-40.78770065 -120.45361328]
[-45.57358551 -134.67628479]
[-49.34429169 -149.20111084]
[-52.08103180 -163.95574951]
[-53.77017593 -178.86666870]
[-54.40330124 -193.85960388]
[-53.97726440 -208.85984802]
[-52.49417877 -223.79267883]
[-49.96143723 -238.58369446]
[-46.39165878 -253.15921021]
[-41.80262375 -267.44659424]
[-36.21719742 -281.37469482]
[-29.66320610 -294.87411499]
[-22.17330170 -307.87759399]
[-13.78480053 -320.32034302]
[-4.53949118 -332.14038086]
[5.51656437 -343.27880859]
[16.33326721 -353.68014526]
[27.85672951 -363.29257202]
[40.02954102 -372.06817627]
[52.79105377 -379.96328735]
[66.07769775 -386.93853760]
[79.82326508 -392.95919800]
[93.95928955 -397.99523926]
[108.41534424 -402.02157593]
[123.11940002 -405.01818848]
[137.99821472 -406.97012329]
[152.97764587 -407.86764526]
[167.98306274 -407.70629883]
[182.93974304 -406.48687744]
[197.77313232 -404.21545410]
[212.40934753 -400.90335083]
[226.77548218 -396.56707764]
[240.79994202 -391.22824097]
[254.41287231 -384.91339111]
[267.54644775 -377.65405273]
[280.13525391 -369.48635864]
[292.11654663 -360.45101929]
[303.43063354 -350.59301758]
[314.02117920 -339.96148682]
[323.83538818 -328.60940552]
[332.82440186 -316.59329224]
[340.94338989 -303.97305298]
[348.15194702 -290.81152344]
[354.41415405 -277.17428589]
[359.69879150 -263.12930298]
[363.97952271 -248.74655151]
[367.23507690 -234.09764099]
[369.44915771 -219.25558472]
[370.61080933 -204.29431152]
[370.71420288 -189.28837585]
[369.75881958 -174.31253052]
[367.74942017 -159.44136047]
[364.69604492 -144.74899292]
[360.61389160 -130.30860901]
[355.52328491 -116.19213867]
[349.44958496 -102.46992493]
[342.42306519 -89.21032715]
[334.47872925 -76.47940826]
[325.65612793 -64.34058380]
[315.99926758 -52.85433960]
[305.55621338 -42.07789612]
[294.37902832 -32.06494141]
[282.52337646 -22.86535835]
[270.04830933 -14.52498245]
[257.01602173 -7.08536482]
[243.49137878 -0.58356851]
[229.54180908 4.94801426]
[215.23680115 9.48182487]
[200.64759827 12.99527645]
[185.84690857 15.47086430]
[170.90846252 16.89625549]
[155.90669250 17.26434898]
[140.91630554 16.57330894]
[126.01202393 14.82658100]
[123.21969604 29.56438828]
[120.42737579 44.30219269]
[126.99005127 54.51192093]
[124.73891449 66.84688568]
[114.34838867 74.55992126]
[111.25006866 89.23644257]
[135.31794739 126.81571198]
[135.31794739 141.81570435]
[135.31794739 156.81570435]
[135.31794739 171.81570435]
[135.31794739 186.81570435]
[135.31794739 201.81570435]
[135.31794739 216.81570435]
[135.31794739 231.81570435]
[135.31794739 246.81570435]
[135.31794739 261.81570435]
[149.85783386 265.87701416]
[162.76222229 273.71154785]
[173.07350159 284.73785400]
[180.02651978 298.13778687]
[183.10533142 312.91696167]
[182.08143616 327.97863770]
[177.03083801 342.20516968]
[168.32830811 354.54083252]
[156.61964417 364.07025146]
[142.77371216 370.08627319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 30]
[23 29]
[31 130]
[32 129]
[34 126]
[35 125]
[36 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
