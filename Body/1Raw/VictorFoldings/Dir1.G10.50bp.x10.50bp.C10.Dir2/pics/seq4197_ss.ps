%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACAACAUGGGGGGGGGGAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAxxxxxxxxxxUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCACCCCCCCCCCUACACCACAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 374.71908569]
[71.19830322 368.70306396]
[59.48964310 359.17364502]
[50.78712082 346.83798218]
[45.73651886 332.61148071]
[44.71262741 317.54977417]
[47.79142761 302.77062988]
[54.74444962 289.37069702]
[65.05573273 278.34436035]
[77.96011353 270.50985718]
[92.50000000 266.44854736]
[92.50000000 251.44854736]
[92.50000000 236.44854736]
[92.50000000 221.44854736]
[92.50000000 206.44854736]
[92.50000000 191.44854736]
[92.50000000 176.44854736]
[92.50000000 161.44854736]
[92.50000000 146.44854736]
[92.50000000 131.44854736]
[86.29674530 129.28279114]
[80.65945435 125.90760803]
[75.82096100 121.46240234]
[71.98109436 116.13077545]
[69.29845428 110.13291168]
[67.88383484 103.71655273]
[67.79566193 97.14668274]
[53.56888199 92.39286804]
[39.34210205 87.63905334]
[27.43178368 92.69851685]
[15.65335751 88.39879608]
[10.16776466 77.57218170]
[-3.95703864 72.52342224]
[-18.08184242 67.47466278]
[-32.20664597 62.42591095]
[-36.58990479 63.39983368]
[-40.63405609 62.93520355]
[-43.91873550 61.32499695]
[-46.16641998 58.97087479]
[-47.26585007 56.32538986]
[-60.92209244 50.11998367]
[-72.28874969 60.25502396]
[-86.79697418 64.88442230]
[-101.93312836 63.20611191]
[-115.07478333 55.51086426]
[-123.94506073 43.13193130]
[-127.00714874 28.21403885]
[-123.73049927 13.34179974]
[-114.68283081 1.09192002]
[-101.43170166 -6.41323471]
[-86.27294159 -7.87335062]
[-71.83290100 -3.03545451]
[-60.61341476 7.26225948]
[-54.55831146 21.23565102]
[-54.71668625 36.46374130]
[-41.06044388 42.66915131]
[-27.15788841 48.30110550]
[-13.03308487 53.34986496]
[1.09171772 58.39862061]
[15.21652031 63.44737625]
[32.25242233 59.35128403]
[44.09591675 73.41227722]
[58.32269669 78.16609192]
[72.54947662 82.91990662]
[77.80332947 74.66232300]
[85.56423950 68.07199097]
[95.28781128 63.91186523]
[106.19844055 62.76323318]
[107.13407135 47.79244232]
[108.06970215 32.82164764]
[94.55136108 25.80920219]
[85.05903625 13.90056133]
[81.23733521 -0.84102899]
[83.74839020 -15.86149883]
[92.15713501 -28.55846214]
[105.00671387 -36.73209000]
[120.07085419 -38.96625519]
[134.73960876 -34.87387466]
[146.47152710 -25.16397858]
[153.23396301 -11.51886368]
[153.85531616 3.69737172]
[148.22792053 17.84842110]
[137.32673645 28.48253250]
[123.04048920 33.75727844]
[122.10485840 48.72806931]
[121.16923523 63.69886017]
[132.57025146 73.44651031]
[147.21376038 70.19568634]
[152.41778564 65.95003510]
[158.12550354 65.14180756]
[162.53367615 67.12764740]
[177.29972839 64.48878479]
[192.06579590 61.84992218]
[200.02372742 57.23223877]
[207.16625977 59.31309891]
[221.98400879 56.98199844]
[225.60603333 42.24575806]
[234.56983948 30.05178261]
[247.48442078 22.23979378]
[262.36569214 19.97356987]
[276.94125366 23.56766510]
[288.99749756 32.44416046]
[296.71572876 45.22533417]
[311.53347778 42.89422989]
[326.35122681 40.56312561]
[341.16900635 38.23202133]
[350.26803589 25.30983353]
[365.85348511 22.68881226]
[378.67874146 31.92396545]
[381.13482666 47.53623962]
[371.76461792 60.26315308]
[356.12722778 62.55404663]
[343.50009155 53.04978180]
[328.68234253 55.38088608]
[313.86459351 57.71199036]
[299.04681396 60.04309464]
[295.62573242 74.57668304]
[286.87722778 86.72614288]
[274.10922241 94.62188721]
[259.25094604 97.03423309]
[244.56159973 93.56484985]
[232.28675842 84.71209717]
[224.31512451 71.79975128]
[209.49736023 74.13085938]
[194.70465088 76.61597443]
[179.93859863 79.25484467]
[165.17254639 81.89370728]
[150.46458435 84.83918762]
[135.82107544 88.09001160]
[130.61753845 117.03981018]
[107.50000000 131.44854736]
[107.50000000 146.44854736]
[107.50000000 161.44854736]
[107.50000000 176.44854736]
[107.50000000 191.44854736]
[107.50000000 206.44854736]
[107.50000000 221.44854736]
[107.50000000 236.44854736]
[107.50000000 251.44854736]
[107.50000000 266.44854736]
[122.03988647 270.50985718]
[134.94427490 278.34436035]
[145.25555420 289.37069702]
[152.20857239 302.77062988]
[155.28736877 317.54977417]
[154.26348877 332.61148071]
[149.21287537 346.83798218]
[140.51036072 359.17364502]
[128.80169678 368.70306396]
[114.95575714 374.71908569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 64]
[28 63]
[29 62]
[32 60]
[33 59]
[34 58]
[35 57]
[40 56]
[41 55]
[68 86]
[69 85]
[70 84]
[87 129]
[88 128]
[91 127]
[92 126]
[93 125]
[95 124]
[96 123]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
