%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACAACCCGGGGGGGGGGAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUxxxxxxxxxxAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCCCCCCCCCCCAAUCAACCC\
) } def
/len { sequence length } bind def

/coor [
[97.15930176 363.08343506]
[83.31336212 357.06738281]
[71.60469818 347.53796387]
[62.90217590 335.20230103]
[57.85157394 320.97579956]
[56.82768250 305.91409302]
[59.90648270 291.13494873]
[66.85950470 277.73501587]
[77.17078400 266.70867920]
[90.07516479 258.87417603]
[104.61505890 254.81286621]
[104.61505890 239.81286621]
[104.61505890 224.81286621]
[104.61505890 209.81286621]
[104.61505890 194.81286621]
[104.61505890 179.81286621]
[104.61505890 164.81286621]
[104.61505890 149.81286621]
[104.61505890 134.81286621]
[104.61505890 119.81286621]
[92.08909607 111.56057739]
[78.30670929 117.48053741]
[64.52433014 123.40050507]
[50.74194717 129.32046509]
[46.40750885 144.34533691]
[33.40056992 153.02597046]
[17.86260796 151.26365662]
[7.13017559 139.89048767]
[6.27079868 124.27653503]
[15.69024849 111.79422760]
[30.94094849 108.33733368]
[44.82198715 115.53808594]
[58.60436630 109.61811829]
[72.38674927 103.69815826]
[86.16912842 97.77819824]
[71.77438354 93.56021881]
[65.17964935 80.08767700]
[70.67846680 66.13191986]
[84.69078827 60.77891541]
[98.09384918 67.51375580]
[102.16156769 81.95126343]
[108.22457886 68.23120880]
[102.75967407 53.64448166]
[109.10388184 39.81676483]
[123.04377747 34.69670486]
[129.10678101 20.97665215]
[135.16979980 7.25659943]
[132.74635315 -10.96719837]
[147.24440002 -20.80623627]
[153.02067566 -34.64945602]
[158.79695129 -48.49267197]
[145.52684021 -55.50834274]
[132.94970703 -63.70167160]
[121.16973114 -73.00476837]
[110.28455353 -83.34053802]
[100.38436890 -94.62333679]
[91.55121613 -106.75967407]
[83.85828400 -119.64897156]
[77.36932373 -133.18443298]
[72.13810730 -147.25389099]
[68.20798492 -161.74075317]
[65.61151886 -176.52499390]
[64.37022400 -191.48408508]
[64.49439240 -206.49407959]
[65.98298645 -221.43058777]
[68.82367706 -236.16984558]
[72.99292755 -250.58970642]
[78.45618439 -264.57070923]
[85.16818237 -277.99694824]
[93.07328796 -290.75723267]
[102.10601807 -302.74575806]
[112.19149780 -313.86325073]
[123.24617767 -324.01751709]
[135.17843628 -333.12445068]
[147.88940430 -341.10861206]
[161.27375793 -347.90377808]
[175.22058105 -353.45367432]
[189.61428833 -357.71234131]
[204.33564758 -360.64443970]
[219.26261902 -362.22567749]
[234.27156067 -362.44299316]
[249.23806763 -361.29455566]
[264.03811646 -358.78988647]
[278.54910278 -354.94970703]
[292.65075684 -349.80590820]
[306.22622681 -343.40106201]
[319.16299438 -335.78826904]
[331.35391235 -327.03057861]
[342.69793701 -317.20059204]
[353.10104370 -306.37976074]
[362.47705078 -294.65774536]
[370.74829102 -282.13168335]
[377.84616089 -268.90539551]
[383.71188354 -255.08842468]
[388.29684448 -240.79530334]
[391.56307983 -226.14445496]
[393.48345947 -211.25730896]
[394.04211426 -196.25720215]
[393.23443604 -181.26844788]
[391.06707764 -166.41523743]
[387.55798340 -151.82066345]
[382.73629761 -137.60565186]
[376.64190674 -123.88800812]
[369.32534790 -110.78139496]
[360.84725952 -98.39442444]
[351.27786255 -86.82973480]
[340.69647217 -76.18315887]
[329.19079590 -66.54293060]
[316.85610962 -57.98891449]
[303.79467773 -50.59200668]
[290.11471558 -44.41349411]
[275.92959595 -39.50458145]
[261.35684204 -35.90594482]
[246.51722717 -33.64739990]
[231.53372192 -32.74766541]
[216.53047180 -33.21419525]
[201.63180542 -35.04312515]
[186.96118164 -38.21929932]
[172.64016724 -42.71640015]
[166.86389160 -28.87318230]
[161.08761597 -15.02996445]
[165.39990234 -3.68485546]
[160.64947510 7.91912222]
[148.88986206 13.31961250]
[142.82684326 27.03966522]
[136.76382446 40.75971985]
[142.36288452 54.51421356]
[136.40957642 68.51467133]
[121.94463348 74.29421997]
[115.88162231 88.01427460]
[119.61505890 119.81286621]
[119.61505890 134.81286621]
[119.61505890 149.81286621]
[119.61505890 164.81286621]
[119.61505890 179.81286621]
[119.61505890 194.81286621]
[119.61505890 209.81286621]
[119.61505890 224.81286621]
[119.61505890 239.81286621]
[119.61505890 254.81286621]
[134.15493774 258.87417603]
[147.05932617 266.70867920]
[157.37060547 277.73501587]
[164.32362366 291.13494873]
[167.40243530 305.91409302]
[166.37854004 320.97579956]
[161.32794189 335.20230103]
[152.62541199 347.53796387]
[140.91674805 357.06738281]
[127.07080841 363.08343506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 35]
[22 34]
[23 33]
[24 32]
[41 130]
[42 129]
[45 126]
[46 125]
[47 124]
[49 121]
[50 120]
[51 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
