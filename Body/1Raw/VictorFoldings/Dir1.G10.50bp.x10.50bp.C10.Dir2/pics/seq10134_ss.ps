%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACUCCUGAGCCGGGGGGGGGGAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCxxxxxxxxxxAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACCCCCCCCCCCAAACGCCUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[76.79343414 564.28955078]
[62.43118668 559.78277588]
[49.27029800 552.47692871]
[37.84969711 542.67108154]
[28.63706017 530.76678467]
[22.00963211 517.25152588]
[18.23880196 502.67874146]
[17.47898483 487.64520264]
[19.76129532 472.76647949]
[24.99227142 458.65188599]
[32.95771027 445.87939453]
[43.33143234 434.97201538]
[55.68864059 426.37640381]
[69.52330780 420.44458008]
[84.26892853 417.41940308]
[84.26892853 402.41940308]
[84.26892853 387.41940308]
[84.26892853 372.41940308]
[84.26892853 357.41940308]
[84.26892853 342.41940308]
[84.26892853 327.41940308]
[84.26892853 312.41940308]
[84.26892853 297.41940308]
[84.26892853 282.41940308]
[72.19770050 278.57730103]
[61.68836594 271.47198486]
[53.60249329 261.67370605]
[48.60643005 249.97395325]
[47.11639404 237.32160950]
[49.26380920 224.74589539]
[54.88379669 213.27268982]
[63.52777481 203.84083557]
[74.49925232 197.22532654]
[86.90995026 193.97364807]
[87.79856110 178.99998474]
[88.68717194 164.02633667]
[89.57578278 149.05267334]
[90.46439362 134.07902527]
[68.49646759 124.16072083]
[55.98729706 100.46307373]
[61.04039764 71.40252686]
[84.75154114 49.61450195]
[70.85119629 43.97708893]
[56.95084763 38.33967590]
[43.05050659 32.70226288]
[29.95216560 41.02170563]
[14.46747875 40.01966858]
[2.55062103 30.08145332]
[-1.21613228 15.02850628]
[4.61561251 0.64899409]
[17.80343056 -7.52786827]
[33.27633667 -6.35791063]
[45.08468246 3.70899510]
[48.68791962 18.80191803]
[62.58826447 24.43933105]
[76.48860931 30.07674599]
[90.38895416 35.71416092]
[102.74664307 27.21195984]
[102.45028687 12.21488857]
[102.15393066 -2.78218389]
[91.04154205 -13.69789028]
[90.95463562 -28.91127586]
[101.42957306 -39.43796539]
[101.13321686 -54.43503952]
[100.83686066 -69.43211365]
[97.71071625 -75.35539246]
[98.03663635 -81.09632111]
[100.83686066 -85.02482605]
[101.13321686 -100.02189636]
[101.42957306 -115.01896667]
[93.96643829 -128.96931458]
[101.95368195 -141.54122925]
[102.25003815 -156.53831482]
[102.54639435 -171.53538513]
[89.10658264 -178.85862732]
[80.61914825 -191.59527588]
[79.03444672 -206.81852722]
[84.71662903 -221.03018188]
[96.35997009 -230.96452332]
[111.28891754 -234.33871460]
[126.07290649 -230.37736511]
[137.31468201 -219.99079895]
[142.43098450 -205.56573486]
[140.24609375 -190.41697693]
[131.26211548 -178.02558899]
[117.54347229 -171.23902893]
[117.24710846 -156.24195862]
[116.95075226 -141.24487305]
[124.43508911 -128.36721802]
[116.42665100 -114.72261047]
[116.13028717 -99.72554016]
[115.83393097 -84.72846985]
[115.83393097 -69.72846985]
[116.13028717 -54.73139572]
[116.42665100 -39.73432541]
[127.30928040 -29.62968063]
[127.82347107 -14.42473888]
[117.15100098 -3.07854128]
[117.44735718 11.91853046]
[117.74372101 26.91560364]
[130.95063782 34.02736282]
[143.63458252 26.02000999]
[148.55964661 10.75163174]
[163.61796570 5.21753883]
[177.25811768 13.66301250]
[179.01652527 29.60940933]
[167.54429626 40.82401657]
[151.64193726 38.70394897]
[138.95799255 46.71129990]
[141.56950378 53.74194717]
[146.79252625 67.80324554]
[149.40403748 74.83389282]
[164.23963928 72.61919403]
[176.73167419 61.99464035]
[192.08587646 67.75490570]
[194.50715637 83.97431946]
[181.50471497 93.96774292]
[166.45434570 87.45479584]
[151.61874390 89.66949463]
[148.80587769 106.14688873]
[141.22482300 119.81700897]
[130.33369446 129.46669006]
[117.83457184 134.50192261]
[105.43804932 134.96763611]
[104.54943848 149.94128418]
[103.66082764 164.91494751]
[102.77221680 179.88859558]
[101.88360596 194.86225891]
[117.81639099 202.12834167]
[129.73895264 214.90629578]
[135.86085510 231.23793030]
[135.27775574 248.63444519]
[128.10494995 264.45565796]
[115.45578766 276.31072998]
[99.26892853 282.41940308]
[99.26892853 297.41940308]
[99.26892853 312.41940308]
[99.26892853 327.41940308]
[99.26892853 342.41940308]
[99.26892853 357.41940308]
[99.26892853 372.41940308]
[99.26892853 387.41940308]
[99.26892853 402.41940308]
[99.26892853 417.41940308]
[114.01454163 420.44458008]
[127.84921265 426.37640381]
[140.20642090 434.97201538]
[150.58013916 445.87939453]
[158.54557800 458.65188599]
[163.77655029 472.76647949]
[166.05886841 487.64520264]
[165.29905701 502.67874146]
[161.52822876 517.25152588]
[154.90078735 530.76678467]
[145.68815613 542.67108154]
[134.26756287 552.47692871]
[121.10666656 559.78277588]
[106.74441528 564.28955078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[42 57]
[43 56]
[44 55]
[45 54]
[58 100]
[59 99]
[60 98]
[63 95]
[64 94]
[65 93]
[68 92]
[69 91]
[70 90]
[72 88]
[73 87]
[74 86]
[101 109]
[102 108]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
