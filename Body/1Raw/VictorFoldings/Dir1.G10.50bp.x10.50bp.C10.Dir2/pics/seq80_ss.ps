%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGUCUUUGGGGGGGGGGGAUUCCUGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGxxxxxxxxxxACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCCCCCCCCCCCAUCUUUCUUU\
) } def
/len { sequence length } bind def

/coor [
[89.56715393 546.00793457]
[75.72121429 539.99194336]
[64.01255035 530.46252441]
[55.31002808 518.12683105]
[50.25942612 503.90032959]
[49.23553467 488.83865356]
[52.31433487 474.05947876]
[59.26735687 460.65954590]
[69.57863617 449.63320923]
[82.48301697 441.79870605]
[97.02290344 437.73739624]
[97.02290344 422.73739624]
[97.02290344 407.73739624]
[97.02290344 392.73739624]
[97.02290344 377.73739624]
[97.02290344 362.73739624]
[97.02290344 347.73739624]
[97.02290344 332.73739624]
[97.02290344 317.73739624]
[97.02290344 302.73739624]
[97.02290344 287.73739624]
[97.02290344 272.73739624]
[89.28560638 260.01013184]
[97.02290344 246.20996094]
[97.02290344 231.20996094]
[97.02290344 216.20996094]
[97.02290344 201.20996094]
[96.55486298 186.21725464]
[95.61923981 171.24647522]
[92.03988647 164.72467041]
[94.82316589 155.95510864]
[94.19918823 140.96809387]
[93.57521057 125.98107147]
[87.48325348 123.65639496]
[82.13423920 119.92758179]
[77.84565735 115.01596069]
[74.87205505 109.21305084]
[73.38993835 102.86329651]
[58.62387848 100.22443390]
[44.69191360 108.17929840]
[29.83999443 102.11299133]
[25.46124649 86.67906189]
[34.91466904 73.71710968]
[50.94840240 73.17042542]
[61.26274490 85.45838165]
[76.02880096 88.09724426]
[85.04420471 77.80499268]
[97.96839905 73.31355286]
[101.06672668 58.63702393]
[104.16504669 43.96049881]
[107.26336670 29.28397179]
[96.86255646 20.82539368]
[92.15667725 7.35240316]
[95.38816833 -7.43551064]
[106.47824097 -18.97280121]
[102.47050476 -33.42749023]
[98.46276093 -47.88217926]
[83.38423920 -47.58405304]
[68.70548248 -51.04597473]
[55.34920883 -58.05032349]
[44.15501404 -68.15679169]
[35.82656860 -80.73009491]
[30.88740540 -94.97985077]
[29.64800644 -110.01030731]
[32.18628311 -124.87664032]
[38.34267044 -138.64434814]
[47.73017883 -150.44796753]
[59.75870132 -159.54553223]
[73.67211151 -165.36512756]
[88.59580231 -167.54096985]
[103.59165955 -165.93624878]
[117.71702576 -160.65187073]
[130.08398438 -152.01998901]
[139.91511536 -140.58322144]
[146.59243774 -127.06049347]
[149.69621277 -112.30184937]
[149.03132629 -97.23503876]
[144.63957214 -82.80717468]
[136.79702759 -69.92519379]
[125.99668121 -59.39888000]
[112.91744995 -51.88991928]
[116.92519379 -37.43523026]
[120.93292999 -22.98054123]
[135.30111694 -18.67295647]
[140.60739136 -33.57778931]
[155.28337097 -36.12045288]
[166.58236694 -45.98617554]
[177.88137817 -55.85189819]
[189.18037415 -65.71762085]
[190.46902466 -70.01888275]
[192.84790039 -73.32221985]
[195.85614014 -75.40365601]
[199.00773621 -76.21693420]
[201.85337830 -75.88576508]
[213.93336487 -84.77811432]
[217.75595093 -100.35910797]
[232.38081360 -106.95401001]
[246.58903503 -99.50376129]
[249.48126221 -83.72356415]
[238.83883667 -71.71863556]
[222.82571411 -72.69812775]
[210.74572754 -63.80577850]
[199.04609680 -54.41861725]
[187.74710083 -44.55289459]
[176.44808960 -34.68716812]
[165.14909363 -24.82144737]
[160.65098572 -10.62227726]
[145.16683960 -7.37395191]
[143.71736145 20.49949837]
[121.93989563 32.38229370]
[118.84157562 47.05881882]
[115.74324799 61.73534393]
[112.64492798 76.41187286]
[125.53575134 91.98630524]
[123.85520172 112.13357544]
[108.56222534 125.35709381]
[109.18620300 140.34411621]
[109.81018066 155.33113098]
[110.59002686 170.31083679]
[111.52565765 185.28163147]
[114.49153900 189.73394775]
[115.32398987 194.40934753]
[114.30459595 198.44203186]
[112.02290344 201.20996094]
[112.02290344 216.20996094]
[112.02290344 231.20996094]
[112.02290344 246.20996094]
[119.76020813 260.01013184]
[112.02290344 272.73739624]
[112.02290344 287.73739624]
[112.02290344 302.73739624]
[112.02290344 317.73739624]
[112.02290344 332.73739624]
[112.02290344 347.73739624]
[112.02290344 362.73739624]
[112.02290344 377.73739624]
[112.02290344 392.73739624]
[112.02290344 407.73739624]
[112.02290344 422.73739624]
[112.02290344 437.73739624]
[126.56279755 441.79870605]
[139.46717834 449.63320923]
[149.77845764 460.65954590]
[156.73147583 474.05947876]
[159.81028748 488.83865356]
[158.78639221 503.90032959]
[153.73579407 518.12683105]
[145.03326416 530.46252441]
[133.32460022 539.99194336]
[119.47866058 546.00793457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 127]
[25 126]
[26 125]
[27 124]
[28 120]
[29 119]
[31 118]
[32 117]
[33 116]
[38 46]
[39 45]
[48 113]
[49 112]
[50 111]
[51 110]
[55 83]
[56 82]
[57 81]
[84 108]
[86 106]
[87 105]
[88 104]
[89 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
