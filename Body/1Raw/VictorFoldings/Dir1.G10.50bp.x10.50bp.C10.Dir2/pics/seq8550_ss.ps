%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACACCCCGGGGGGGGGGUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAxxxxxxxxxxUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCCCCCCCCCCCUACACUCC\
) } def
/len { sequence length } bind def

/coor [
[81.27263641 564.28192139]
[67.42669678 558.26593018]
[55.71803665 548.73651123]
[47.01551056 536.40081787]
[41.96490860 522.17431641]
[40.94101715 507.11260986]
[44.01981735 492.33346558]
[50.97283936 478.93353271]
[61.28412247 467.90719604]
[74.18850708 460.07269287]
[88.72839355 456.01138306]
[88.72839355 441.01138306]
[88.72839355 426.01138306]
[88.72839355 411.01138306]
[88.72839355 396.01138306]
[88.72839355 381.01138306]
[88.72839355 366.01138306]
[88.72839355 351.01138306]
[88.72839355 336.01138306]
[88.72839355 321.01138306]
[75.53890991 316.12246704]
[64.79439545 306.99765015]
[57.80423737 294.72210693]
[55.42947006 280.76654053]
[57.97674942 266.81100464]
[65.15892792 254.54267883]
[76.12725830 245.45185852]
[89.57167816 240.65097046]
[89.88373566 225.65420532]
[90.19578552 210.65745544]
[82.72493744 197.77197266]
[90.74765778 184.13575745]
[91.05971527 169.13899231]
[91.37177277 154.14224243]
[76.51549530 149.54096985]
[63.54903412 140.95309448]
[53.51580048 129.06971741]
[47.22317123 114.84707642]
[45.17752457 99.42967987]
[47.54346848 84.05818176]
[54.13061905 69.96953583]
[64.40889740 58.29744720]
[77.55121613 49.98118973]
[92.50000000 45.68997192]
[92.50000000 30.68997192]
[92.50000000 15.68997192]
[92.50000000 0.68997216]
[92.50000000 -14.31002808]
[92.50000000 -29.31002808]
[92.03195953 -44.30272293]
[91.09632874 -59.27351379]
[90.16069794 -74.24430847]
[86.48184967 -82.67745209]
[89.36463165 -89.53567505]
[88.74065399 -104.52268982]
[88.11667633 -119.50970459]
[87.18104553 -134.48049927]
[85.93417358 -149.42858887]
[84.68730164 -164.37666321]
[69.75003052 -166.26654053]
[55.53222275 -171.22109985]
[42.65543365 -179.02378845]
[31.68257141 -189.33349609]
[23.09332466 -201.69952393]
[17.26317978 -215.58126831]
[14.44700336 -230.37190247]
[14.76790714 -245.42483521]
[18.21186447 -260.08200073]
[24.62831688 -273.70269775]
[33.73676682 -285.69143677]
[45.13903427 -295.52413940]
[58.33665466 -302.77096558]
[72.75269318 -307.11511230]
[87.75693512 -308.36666870]
[102.69345856 -306.47091675]
[116.90931702 -301.51074219]
[129.78303528 -293.70300293]
[140.75184631 -283.38897705]
[149.33622742 -271.01959229]
[155.16090393 -257.13552856]
[157.97126770 -242.34379578]
[157.64443970 -227.29098511]
[154.19471741 -212.63516235]
[147.77290344 -199.01701355]
[138.65972900 -187.03186035]
[127.25360107 -177.20364380]
[114.05313110 -169.96202087]
[99.63538361 -165.62355042]
[100.88226318 -150.67546082]
[102.12913513 -135.72737122]
[105.18173218 -131.97808838]
[105.86838531 -126.25446320]
[103.10369110 -120.13368225]
[103.72766876 -105.14666748]
[104.35164642 -90.15965271]
[105.13149261 -75.17993927]
[106.06712341 -60.20914459]
[107.00274658 -45.23835373]
[109.45264435 -42.61814117]
[110.72158813 -38.65689850]
[110.18239594 -33.93867111]
[107.50000000 -29.31002808]
[107.50000000 -14.31002808]
[107.50000000 0.68997216]
[107.50000000 15.68997192]
[107.50000000 30.68997192]
[107.50000000 45.68997192]
[121.33833313 49.49747849]
[133.71429443 56.76603699]
[143.77973938 66.99752045]
[150.84486389 79.49074554]
[154.42546082 93.38951111]
[154.27615356 107.74131012]
[150.40718079 121.56258392]
[143.08369446 133.90611267]
[132.80757141 143.92599487]
[120.28307343 150.93551636]
[106.36852264 154.45429993]
[106.05646515 169.45104980]
[105.74441528 184.44781494]
[113.19293976 198.40596008]
[105.19254303 210.96951294]
[104.88048553 225.96626282]
[104.56842804 240.96301270]
[119.30783081 247.31018066]
[130.46583557 258.79071045]
[136.36213684 273.63348389]
[136.12498474 289.56430054]
[129.82002258 304.15438843]
[118.43566895 315.19064331]
[103.72839355 321.01138306]
[103.72839355 336.01138306]
[103.72839355 351.01138306]
[103.72839355 366.01138306]
[103.72839355 381.01138306]
[103.72839355 396.01138306]
[103.72839355 411.01138306]
[103.72839355 426.01138306]
[103.72839355 441.01138306]
[103.72839355 456.01138306]
[118.26828003 460.07269287]
[131.17265320 467.90719604]
[141.48394775 478.93353271]
[148.43696594 492.33346558]
[151.51576233 507.11260986]
[150.49186707 522.17431641]
[145.44126892 536.40081787]
[136.73873901 548.73651123]
[125.03008270 558.26593018]
[111.18414307 564.28192139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 124]
[29 123]
[30 122]
[32 120]
[33 119]
[34 118]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[49 102]
[50 98]
[51 97]
[52 96]
[54 95]
[55 94]
[56 93]
[57 90]
[58 89]
[59 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
