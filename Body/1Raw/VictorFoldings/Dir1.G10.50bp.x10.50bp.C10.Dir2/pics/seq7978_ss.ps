%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCCAACUAAGGGGGGGGGGAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCxxxxxxxxxxACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUCCCCCCCCCCUGCCACAACUAA\
) } def
/len { sequence length } bind def

/coor [
[101.43753052 437.01281738]
[87.27692413 431.85781860]
[74.68717957 423.57559204]
[64.34724426 412.61282349]
[56.81473160 399.56069946]
[52.49586868 385.12310791]
[51.62355804 370.07864380]
[54.24485016 355.23864746]
[60.21837616 341.40341187]
[69.22199249 329.31906128]
[80.77014923 319.63726807]
[94.24006653 312.88021851]
[108.90532684 309.41223145]
[108.90532684 294.41223145]
[108.90532684 279.41223145]
[108.90532684 264.41223145]
[108.90532684 249.41223145]
[108.90532684 234.41223145]
[108.90532684 219.41223145]
[108.90532684 204.41223145]
[108.90532684 189.41223145]
[108.90532684 174.41223145]
[108.90532684 159.41223145]
[108.90532684 144.41223145]
[108.90532684 129.41223145]
[98.47624207 130.95446777]
[88.04935455 128.87794495]
[78.85385895 123.36629486]
[71.99427795 115.01160431]
[68.31789398 104.75128174]
[68.31041718 93.76304626]
[53.71604538 90.29833221]
[39.12167358 86.83361816]
[24.52729988 83.36890411]
[9.93292618 79.90418243]
[-4.66144753 76.43946838]
[-12.97510242 89.11460114]
[-25.12438774 98.17940521]
[-39.64221954 102.53926086]
[-54.77550125 101.66769409]
[-68.69681549 95.66994476]
[-79.72509003 85.27028656]
[-86.52861023 71.72451782]
[-88.28582001 56.66835403]
[-84.78452301 41.91990662]
[-76.44752502 29.26011658]
[-64.28155518 20.21771812]
[-49.75571060 15.88462639]
[-34.62406540 16.78408051]
[-20.71382904 22.80746651]
[-9.70473862 33.22743607]
[-2.92619157 46.78572083]
[-1.19673133 61.84509659]
[13.39764214 65.30981445]
[27.99201584 68.77452850]
[42.58639145 72.23924255]
[57.18076324 75.70395660]
[71.77513885 79.16867828]
[83.05690765 69.28324890]
[81.53938293 54.36021042]
[80.02185822 39.43717194]
[78.50433350 24.51413155]
[76.98680878 9.59109211]
[62.07324219 7.34692287]
[48.18663406 1.46364629]
[36.19990921 -7.68891001]
[26.86656761 -19.53540802]
[20.77330589 -33.33116913]
[18.30315399 -48.20897675]
[19.61138725 -63.23360062]
[24.61576843 -77.46057892]
[33.00171661 -89.99559784]
[44.24208832 -100.05068970]
[57.63030243 -106.99378204]
[72.32476044 -110.38843536]
[87.40176392 -110.02124786]
[101.91355896 -105.91530609]
[114.94791412 -98.32871246]
[125.68547821 -87.73836517]
[133.45129395 -74.80998993]
[137.75718689 -60.35626221]
[138.33247375 -45.28576660]
[135.14100647 -30.54584312]
[128.38340759 -17.06305504]
[118.48444366 -5.68494225]
[106.06639099 2.87325692]
[91.90985107 8.07356739]
[93.42737579 22.99660683]
[94.94490051 37.91964722]
[96.46242523 52.84268570]
[97.97994995 67.76572418]
[115.66957855 72.35704803]
[127.76697540 85.65605927]
[130.57281494 103.11238098]
[145.29560852 100.24195862]
[154.13819885 87.41828918]
[169.11009216 84.71700287]
[181.28100586 93.22607422]
[196.00379944 90.35565186]
[210.72659302 87.48522949]
[225.44938660 84.61480713]
[226.83918762 69.57335663]
[232.41165161 55.53325653]
[241.71502686 43.63267136]
[253.99513245 34.83633041]
[268.25646973 29.85730743]
[283.34295654 29.09923553]
[298.03158569 32.62356567]
[311.13162231 40.14459610]
[321.58108521 51.05263138]
[328.53289795 64.46340942]
[331.42352295 79.28977203]
[330.01861572 94.32981110]
[324.43203735 108.36431122]
[315.11672974 120.25553894]
[302.82778931 129.03953552]
[288.56146240 134.00422668]
[273.47421265 134.74714661]
[258.78912354 131.20806885]
[245.69667053 123.67387390]
[235.25816345 112.75534821]
[228.31980896 99.33760071]
[213.59701538 102.20802307]
[198.87422180 105.07844543]
[184.15142822 107.94886780]
[176.06832886 120.40676117]
[161.17822266 123.52751160]
[148.16603088 114.96475220]
[133.44323730 117.83517456]
[123.90532684 129.41223145]
[123.90532684 144.41223145]
[123.90532684 159.41223145]
[123.90532684 174.41223145]
[123.90532684 189.41223145]
[123.90532684 204.41223145]
[123.90532684 219.41223145]
[123.90532684 234.41223145]
[123.90532684 249.41223145]
[123.90532684 264.41223145]
[123.90532684 279.41223145]
[123.90532684 294.41223145]
[123.90532684 309.41223145]
[138.57058716 312.88021851]
[152.04051208 319.63726807]
[163.58865356 329.31906128]
[172.59228516 341.40341187]
[178.56581116 355.23864746]
[181.18710327 370.07864380]
[180.31478882 385.12310791]
[175.99592590 399.56069946]
[168.46340942 412.61282349]
[158.12347412 423.57559204]
[145.53372192 431.85781860]
[131.37312317 437.01281738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[94 129]
[95 128]
[98 125]
[99 124]
[100 123]
[101 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
