%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCACCCUCGGGGGGGGGGCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCxxxxxxxxxxAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUCCCCCCCCCCAUCCAUCCUC\
) } def
/len { sequence length } bind def

/coor [
[16.50172615 249.50527954]
[7.20154381 243.91746521]
[-1.72610974 237.75190735]
[-10.24539471 231.03335571]
[-18.32211304 223.78878784]
[-25.92383957 216.04730225]
[-33.02005768 207.83993530]
[-39.58228302 199.19966125]
[-45.58417130 190.16117859]
[-51.00162888 180.76072693]
[-64.52581787 187.24890137]
[-78.05001068 193.73706055]
[-91.57419586 200.22523499]
[-105.09838867 206.71339417]
[-118.62258148 213.20155334]
[-127.71826172 226.14678955]
[-142.54005432 224.67585754]
[-156.06425476 231.16401672]
[-169.58843994 237.65219116]
[-178.68412781 250.59741211]
[-193.50592041 249.12648010]
[-207.03010559 255.61463928]
[-220.55429077 262.10281372]
[-234.07849121 268.59097290]
[-240.73472595 283.18801880]
[-256.33163452 286.94515991]
[-268.90460205 276.98019409]
[-268.80871582 260.93743896]
[-256.11752319 251.12348938]
[-240.56665039 255.06678772]
[-227.04246521 248.57862854]
[-213.51828003 242.09045410]
[-199.99407959 235.60229492]
[-191.86573792 223.12113953]
[-176.07659912 224.12799072]
[-162.55241394 217.63983154]
[-149.02822876 211.15167236]
[-140.89988708 198.67050171]
[-125.11074066 199.67736816]
[-111.58655548 193.18920898]
[-98.06236267 186.70103455]
[-84.53817749 180.21287537]
[-71.01398468 173.72471619]
[-57.48979568 167.23654175]
[-63.32228088 151.47445679]
[-67.58156586 135.21655273]
[-70.22663116 118.61942291]
[-71.23197937 101.84294128]
[-70.58794403 85.04870605]
[-68.30072021 68.39849091]
[-64.39234161 52.05267334]
[-58.90045547 36.16870880]
[-51.87796021 20.89960098]
[-43.39250565 6.39242554]
[-33.52582169 -7.21307564]
[-22.37294960 -19.78584862]
[-10.04132366 -31.20478439]
[3.35027504 -41.35988998]
[17.67285156 -50.15335083]
[11.04435253 -63.60931778]
[4.41585398 -77.06528473]
[-2.21264458 -90.52124786]
[-16.13747025 -99.18330383]
[-15.32796192 -115.56246185]
[-0.61687106 -122.80924225]
[12.86229229 -113.46878052]
[11.24332047 -97.14974213]
[17.87181854 -83.69377899]
[24.50031853 -70.23781586]
[31.12881660 -56.78184891]
[40.24383545 -60.47737885]
[49.55599213 -63.64348602]
[59.03456497 -66.26972198]
[68.64828491 -68.34743500]
[78.36544037 -69.86975861]
[88.15396118 -70.83167267]
[97.98156738 -71.23000336]
[107.81583405 -71.06343842]
[117.62431335 -70.33253479]
[127.37464905 -69.03968811]
[137.03466797 -67.18917847]
[146.57252502 -64.78710175]
[155.95672607 -61.84138107]
[165.15632629 -58.36174393]
[174.14096069 -54.35966110]
[182.88101196 -49.84833908]
[191.34764099 -44.84266281]
[199.51290894 -39.35914230]
[207.34986877 -33.41587067]
[214.83267212 -27.03245163]
[221.93666077 -20.22994804]
[228.63835144 -13.03080177]
[234.91566467 -5.45876074]
[240.74789429 2.46119308]
[246.11578369 10.70293236]
[251.00163269 19.23926544]
[264.52581787 12.75110149]
[278.05001831 6.26293612]
[291.57418823 -0.22522900]
[296.57907104 -15.21611595]
[310.75537109 -22.20244217]
[325.69250488 -17.03934479]
[332.52853394 -2.78999758]
[327.20782471 12.09171391]
[312.88699341 18.77673531]
[298.06237793 13.29896069]
[284.53817749 19.78712654]
[271.01397705 26.27529144]
[257.48980713 32.76345444]
[269.16140747 73.38782501]
[270.52676392 115.63355255]
[285.38983154 117.65588379]
[300.25286865 119.67821503]
[315.11590576 121.70055389]
[330.08065796 114.99318695]
[343.21145630 124.81734467]
[341.00048828 141.06675720]
[325.72219849 147.02543640]
[313.09356689 136.56359863]
[298.23052979 134.54125977]
[283.36749268 132.51893616]
[268.50442505 130.49659729]
[266.23495483 141.10632324]
[263.29812622 151.55105591]
[259.70574951 161.78881836]
[255.47227478 171.77854919]
[250.61466980 181.48013306]
[245.15242004 190.85461426]
[239.10748291 199.86437988]
[232.50411987 208.47325134]
[225.36883545 216.64666748]
[217.73027039 224.35180664]
[209.61907959 231.55776978]
[201.06784058 238.23559570]
[192.11088562 244.35848999]
[182.78414917 249.90188599]
[173.12509155 254.84350586]
[163.17247009 259.16351318]
[152.96626282 262.84460449]
[142.54742432 265.87194824]
[131.95777893 268.23342896]
[121.23985291 269.91955566]
[110.43666077 270.92355347]
[99.59156799 271.24142456]
[88.74811554 270.87182617]
[77.94982910 269.81631470]
[67.24006653 268.07907104]
[56.66180801 265.66711426]
[46.25753021 262.59008789]
[36.06899643 258.86035156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[17 37]
[18 36]
[19 35]
[21 33]
[22 32]
[23 31]
[24 30]
[59 70]
[60 69]
[61 68]
[62 67]
[96 109]
[97 108]
[98 107]
[99 106]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
