%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCCAAUGGGGGGGGGGUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAxxxxxxxxxxUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUACCCCCCCCCCACCCCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 417.13790894]
[71.19830322 411.12188721]
[59.48964310 401.59246826]
[50.78712082 389.25680542]
[45.73651886 375.03027344]
[44.71262741 359.96859741]
[47.79142761 345.18945312]
[54.74444962 331.78952026]
[65.05573273 320.76318359]
[77.96011353 312.92868042]
[92.50000000 308.86737061]
[92.50000000 293.86737061]
[92.50000000 278.86737061]
[92.50000000 263.86737061]
[92.50000000 248.86735535]
[92.50000000 233.86735535]
[92.50000000 218.86735535]
[92.50000000 203.86735535]
[92.50000000 188.86735535]
[92.50000000 173.86735535]
[92.50000000 158.86735535]
[92.50000000 143.86735535]
[92.50000000 128.86735535]
[85.13775635 125.85900879]
[78.83228302 121.01196289]
[74.03193665 114.67086792]
[59.53633881 118.52802277]
[45.04074478 122.38518524]
[30.54514694 126.24234772]
[19.31737709 138.19512939]
[3.41607070 134.18508911]
[-0.80087107 118.33739471]
[11.00457954 106.95480347]
[26.68798828 111.74674988]
[41.18358231 107.88958740]
[55.67918015 104.03243256]
[70.17477417 100.17527008]
[71.70877838 86.40507507]
[79.56374359 74.15242004]
[92.63071442 66.28298950]
[84.90662384 53.42459106]
[77.18254089 40.56618881]
[67.43489075 29.16516685]
[55.93308640 19.53664207]
[44.43128204 9.90811539]
[31.62101555 17.95499229]
[16.95060921 21.64747238]
[1.85732353 20.62380028]
[-12.18015671 14.98426819]
[-23.78658295 5.28137922]
[-31.82487488 -7.53427696]
[-35.50752258 -22.20715332]
[-34.47373962 -37.29975128]
[-28.82480240 -51.33344650]
[-19.11413765 -62.93336868]
[-6.29309797 -70.96307373]
[8.38224220 -74.63588715]
[23.47414207 -73.59198761]
[37.50405502 -67.93365479]
[49.09746552 -58.21521759]
[57.11857605 -45.38880157]
[60.78155518 -30.71100235]
[59.72754669 -15.61980438]
[54.05980682 -1.59368837]
[65.56161499 8.03483772]
[77.06341553 17.66336441]
[72.52939606 3.36501932]
[73.06306458 -11.62548447]
[78.60237885 -25.56521416]
[88.50327301 -36.83340836]
[101.61459351 -44.11992264]
[116.41189575 -46.57756042]
[131.17469788 -43.92057800]
[144.18655396 -36.45789337]
[153.93458557 -25.05719376]
[159.28538513 -11.04402637]
[159.61683655 3.95231175]
[154.89038086 18.18820763]
[145.65557861 30.00846291]
[132.98616028 38.03874969]
[118.35515594 41.34539413]
[103.46372223 39.54393005]
[90.04094696 32.84210205]
[97.76502991 45.70050430]
[105.48911285 58.55890656]
[119.76457214 63.16447449]
[133.54695129 57.24451065]
[147.32933044 51.32454681]
[161.11172485 45.40458298]
[174.89410400 39.48461914]
[188.41828918 32.99645615]
[201.66087341 25.95132065]
[214.90345764 18.90618515]
[212.76576233 3.89931774]
[215.89268494 -10.93301868]
[223.90661621 -23.79974747]
[235.83984375 -33.14714813]
[250.25137329 -37.84647369]
[265.40093994 -37.33026505]
[279.45916748 -31.66085052]
[290.72842407 -21.52284050]
[297.84793091 -8.14045048]
[299.95797729 6.87033129]
[296.80374146 21.69688034]
[288.76611328 34.54881668]
[276.81567383 43.87421036]
[262.39550781 48.54697418]
[247.24691772 48.00284195]
[233.19917297 42.30752945]
[221.94859314 32.14876938]
[208.70600891 39.19390488]
[195.46342468 46.23904037]
[194.53114319 48.94795227]
[192.43467712 51.43769073]
[189.25683594 53.24964142]
[185.24954224 53.96562195]
[180.81405640 53.26700211]
[167.03167725 59.18696594]
[153.24929810 65.10692596]
[139.46691895 71.02689362]
[125.68453979 76.94685364]
[130.63595581 85.61913300]
[132.81936646 95.16405487]
[132.15698242 104.73786926]
[128.81773376 113.52686310]
[123.19325256 120.81649017]
[115.85546875 126.04936981]
[107.50000000 128.86735535]
[107.50000000 143.86735535]
[107.50000000 158.86735535]
[107.50000000 173.86735535]
[107.50000000 188.86735535]
[107.50000000 203.86735535]
[107.50000000 218.86735535]
[107.50000000 233.86735535]
[107.50000000 248.86735535]
[107.50000000 263.86737061]
[107.50000000 278.86737061]
[107.50000000 293.86737061]
[107.50000000 308.86737061]
[122.03988647 312.92868042]
[134.94427490 320.76318359]
[145.25555420 331.78952026]
[152.20857239 345.18945312]
[155.28736877 359.96859741]
[154.26348877 375.03027344]
[149.21287537 389.25680542]
[140.51036072 401.59246826]
[128.80169678 411.12188721]
[114.95575714 417.13790894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 37]
[27 36]
[28 35]
[29 34]
[40 85]
[41 84]
[42 83]
[43 66]
[44 65]
[45 64]
[86 121]
[87 120]
[88 119]
[89 118]
[90 117]
[91 112]
[92 111]
[93 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
