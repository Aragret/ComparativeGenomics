%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUAAUCUCGGGGGGGGGGAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAAxxxxxxxxxxCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCCCCCCCCCCCUACAAAUCUC\
) } def
/len { sequence length } bind def

/coor [
[17.47008705 284.38592529]
[7.90380859 279.79891968]
[-1.40846324 274.71600342]
[-10.44104481 269.15121460]
[-19.16902542 263.11990356]
[-27.56832886 256.63867188]
[-35.61579514 249.72546387]
[-43.28922272 242.39927673]
[-50.56745148 234.68035889]
[-57.43040848 226.58998108]
[-63.85916519 218.15045166]
[-69.83599091 209.38507080]
[-75.34439087 200.31799316]
[-88.63173676 207.27835083]
[-101.91907501 214.23870850]
[-110.55329132 227.49618530]
[-125.41768646 226.54806519]
[-138.70503235 233.50842285]
[-151.99237061 240.46878052]
[-165.27970886 247.42913818]
[-178.56706238 254.38949585]
[-179.11743164 269.73852539]
[-187.28219604 282.74746704]
[-200.86503601 289.91696167]
[-216.21226501 289.31848145]
[-229.19554138 281.11297607]
[-236.32243347 267.50772095]
[-235.67584229 252.16244507]
[-227.42970276 239.20495605]
[-213.80216980 232.12074280]
[-198.45899963 232.81542969]
[-185.52740479 241.10215759]
[-172.24006653 234.14179993]
[-158.95272827 227.18144226]
[-145.66539001 220.22108459]
[-132.37805176 213.26072693]
[-124.69422913 200.50109863]
[-108.87943268 200.95137024]
[-95.59208679 193.99101257]
[-82.30474854 187.03065491]
[-92.38914490 161.60983276]
[-98.94763184 135.05990601]
[-101.86000061 107.86742401]
[-101.07288361 80.53076172]
[-96.60070801 53.55090714]
[-88.52542877 27.42232704]
[-76.99504852 2.62387848]
[-62.22087860 -20.38995934]
[-44.47369003 -41.19741058]
[-54.80459213 -52.07272339]
[-65.13549805 -62.94804001]
[-75.46640015 -73.82335663]
[-90.17340088 -69.58510590]
[-105.16307068 -72.67836761]
[-116.99090576 -82.39232635]
[-122.93894196 -96.49478149]
[-121.64037323 -111.74510956]
[-113.39360046 -124.63887787]
[-100.09366608 -132.21319580]
[-84.79680634 -132.72755432]
[-71.01811218 -126.06374359]
[-61.92384720 -113.75305939]
[-59.60379410 -98.62441254]
[-64.59108734 -84.15425873]
[-54.26018143 -73.27893829]
[-43.92927933 -62.40362930]
[-33.59837723 -51.52831268]
[-22.11936188 -60.92301559]
[-9.98192883 -69.45008850]
[2.74848509 -77.06354523]
[16.00324059 -83.72234344]
[29.71087456 -89.39058685]
[43.79748154 -94.03771210]
[58.18710709 -97.63865662]
[72.80217743 -100.17401123]
[87.56388092 -101.63010406]
[102.39263916 -101.99908447]
[117.20849609 -101.27896881]
[131.93156433 -99.47363281]
[146.48248291 -96.59281158]
[160.78277588 -92.65204620]
[174.75535583 -87.67256927]
[188.32489014 -81.68122864]
[201.41819763 -74.71034241]
[213.96470642 -66.79748535]
[222.88085938 -78.85991669]
[231.79701233 -90.92234802]
[240.71316528 -102.98477936]
[236.87918091 -118.14507294]
[243.73352051 -132.20039368]
[258.03979492 -138.51423645]
[273.04299927 -134.10542297]
[281.65908813 -121.05563354]
[279.81982422 -105.52659607]
[268.39361572 -94.85063934]
[252.77560425 -94.06862640]
[243.85945129 -82.00619507]
[234.94329834 -69.94376373]
[226.02714539 -57.88133240]
[234.14196777 -51.04730225]
[241.88682556 -43.79667664]
[249.24035645 -36.14944839]
[256.18228149 -28.12671661]
[262.69342041 -19.75060272]
[268.75585938 -11.04421043]
[274.35284424 -2.03155184]
[279.46899414 7.26251459]
[284.09011841 16.81235695]
[288.20352173 26.59163475]
[291.79785156 36.57337570]
[294.86318970 46.73005295]
[297.39111328 57.03364944]
[299.37460327 67.45574951]
[300.80819702 77.96760559]
[301.68795776 88.54023743]
[302.01144409 99.14447021]
[301.77777100 109.75106049]
[300.98760986 120.33075714]
[299.64309692 130.85438538]
[297.74795532 141.29290771]
[295.30740356 151.61755371]
[292.32821655 161.79981995]
[288.81854248 171.81164551]
[284.78811646 181.62542725]
[280.24801636 191.21406555]
[275.21081543 200.55113220]
[269.69033813 209.61087036]
[263.70187378 218.36830139]
[257.26190186 226.79925537]
[250.38818359 234.88050842]
[243.09970093 242.58973694]
[235.41653442 249.90570068]
[227.35987854 256.80822754]
[218.95195007 263.27825928]
[210.21595764 269.29794312]
[201.17599487 274.85073853]
[191.85696411 279.92123413]
[182.28459167 284.49554443]
[172.48527527 288.56097412]
[162.48603821 292.10635376]
[152.31446838 295.12188721]
[141.99861145 297.59927368]
[131.56690979 299.53167725]
[121.04815674 300.91372681]
[110.47134399 301.74166870]
[99.86565399 302.01321411]
[89.26033020 301.72756958]
[78.68463135 300.88555908]
[68.16772461 299.48950195]
[57.73860931 297.54324341]
[47.42605209 295.05212402]
[37.25849533 292.02307129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 40]
[14 39]
[15 38]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[49 67]
[50 66]
[51 65]
[52 64]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
