%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAACUACGGGGGGGGGGCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAAxxxxxxxxxxCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCCCCCCCCCCCUAAUCUAC\
) } def
/len { sequence length } bind def

/coor [
[79.12059784 388.59005737]
[65.27465820 382.57403564]
[53.56599808 373.04461670]
[44.86347580 360.70895386]
[39.81287384 346.48242188]
[38.78898239 331.42074585]
[41.86777878 316.64157104]
[48.82080078 303.24166870]
[59.13208771 292.21533203]
[72.03646851 284.38079834]
[86.57635498 280.31948853]
[86.57635498 265.31948853]
[86.57635498 250.31950378]
[86.57635498 235.31950378]
[86.57635498 220.31950378]
[86.57635498 205.31950378]
[86.57635498 190.31950378]
[86.57635498 175.31950378]
[86.57635498 160.31950378]
[86.57635498 145.31950378]
[86.57635498 130.31950378]
[74.58952332 121.30197144]
[60.17730713 125.45985413]
[45.76509094 129.61775208]
[43.71184540 144.70761108]
[35.69299316 157.65434265]
[23.09784698 166.21484375]
[8.10858917 168.90594482]
[-6.67779779 165.26141357]
[-18.69948387 155.91267395]
[-25.87364006 142.47946167]
[-26.95730019 127.28914642]
[-21.76271248 112.97355652]
[-11.18987083 102.01294708]
[2.92941475 96.30631256]
[18.14889336 96.84236145]
[31.83169937 103.52822876]
[41.60720062 115.20552826]
[56.01941681 111.04763794]
[70.43163300 106.88975525]
[79.20873260 83.05646515]
[100.59810638 76.72635651]
[105.79351807 62.65483475]
[110.98893738 48.58331680]
[112.54651642 33.66440201]
[110.36968231 18.82319832]
[108.19284058 3.98199201]
[105.86174011 -10.83576584]
[103.37662506 -25.62847328]
[100.89150238 -40.42118073]
[85.86974335 -40.06418991]
[70.95008850 -41.84873581]
[56.43627930 -45.73848724]
[42.62380219 -51.65425491]
[29.79386520 -59.47560120]
[18.20766449 -69.04328918]
[8.10108280 -80.16254425]
[-0.32012513 -92.60697937]
[-6.88451290 -106.12325287]
[-11.45843792 -120.43618011]
[-13.94878197 -135.25437927]
[-14.30484390 -150.27616882]
[-12.51937485 -165.19570923]
[-8.62872410 -179.70927429]
[-2.71210194 -193.52137756]
[5.11003780 -206.35083008]
[14.67844677 -217.93644714]
[25.79832268 -228.04234314]
[38.24328232 -236.46278381]
[51.75996017 -243.02632141]
[66.07317352 -247.59936523]
[80.89152527 -250.08879089]
[95.91333008 -250.44392395]
[110.83276367 -248.65753174]
[125.34609222 -244.76599121]
[139.15783691 -238.84851074]
[151.98680115 -231.02557373]
[163.57182312 -221.45645142]
[173.67701721 -210.33595276]
[182.09669495 -197.89047241]
[188.65940857 -184.37338257]
[193.23155212 -170.05989075]
[195.72006226 -155.24137878]
[196.07426453 -140.21955872]
[194.28695679 -125.30023193]
[190.39451599 -110.78714752]
[184.47618103 -96.97576904]
[176.65245056 -84.14728546]
[167.08261108 -72.56285858]
[155.96148682 -62.45834351]
[143.51547241 -54.03944397]
[129.99798584 -47.47756577]
[115.68421173 -42.90629959]
[118.16932678 -28.11359215]
[120.65444946 -13.32088470]
[124.89166260 -7.20601225]
[123.03404999 1.80515492]
[125.21088409 16.64636040]
[127.38772583 31.48756599]
[133.23239136 17.67308426]
[142.15852356 5.61804438]
[153.66664124 -4.00294828]
[167.11270142 -10.65149689]
[181.74429321 -13.95554543]
[196.74259949 -13.73019695]
[211.26831055 -9.98806190]
[224.50857544 -2.93855238]
[235.72244263 7.02383661]
[244.28237915 19.34160423]
[249.70938110 33.32543945]
[251.69973755 48.19280624]
[250.14205933 63.11170578]
[245.12353516 77.24728394]
[236.92500305 89.80848694]
[226.00523376 100.09239960]
[212.97532654 107.52351379]
[198.56443787 111.68599701]
[183.57901001 112.34690094]
[168.85762024 109.46924591]
[155.22410583 103.21406555]
[143.44140625 93.93140411]
[134.16886902 82.14072418]
[127.92540741 68.50183868]
[125.06045532 53.77873230]
[119.86504364 67.85025024]
[114.66962433 81.92176819]
[124.02560425 92.90573120]
[125.50228119 108.30624390]
[117.39212036 122.69229889]
[101.57635498 130.31950378]
[101.57635498 145.31950378]
[101.57635498 160.31950378]
[101.57635498 175.31950378]
[101.57635498 190.31950378]
[101.57635498 205.31950378]
[101.57635498 220.31950378]
[101.57635498 235.31950378]
[101.57635498 250.31950378]
[101.57635498 265.31948853]
[101.57635498 280.31948853]
[116.11624146 284.38079834]
[129.02061462 292.21533203]
[139.33190918 303.24166870]
[146.28492737 316.64157104]
[149.36372375 331.42074585]
[148.33982849 346.48242188]
[143.28923035 360.70895386]
[134.58671570 373.04461670]
[122.87804413 382.57403564]
[109.03211212 388.59005737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 40]
[23 39]
[24 38]
[42 126]
[43 125]
[44 124]
[45 99]
[46 98]
[47 97]
[48 95]
[49 94]
[50 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
