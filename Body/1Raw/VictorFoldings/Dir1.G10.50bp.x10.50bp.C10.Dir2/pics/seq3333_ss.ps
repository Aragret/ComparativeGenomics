%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCAUUGUAGGGGGGGGGGCCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUxxxxxxxxxxUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCCCCCCCCCCCUCCUCAUUCUA\
) } def
/len { sequence length } bind def

/coor [
[76.92778778 452.32220459]
[63.22563553 446.06130981]
[51.26051712 436.90798950]
[41.63260651 425.32128906]
[34.82482529 411.88247681]
[31.17865944 397.26559448]
[30.87699127 382.20382690]
[33.93495560 367.45266724]
[40.19916534 353.75204468]
[49.35541153 341.78915405]
[60.94441605 332.16403198]
[74.38488770 325.35952759]
[89.00264740 321.71688843]
[88.69864655 306.71997070]
[88.39464569 291.72305298]
[88.09063721 276.72613525]
[87.78663635 261.72921753]
[87.48262787 246.73229980]
[87.17862701 231.73538208]
[86.87461853 216.73846436]
[86.57061768 201.74154663]
[86.26660919 186.74462891]
[73.95603180 195.31489563]
[59.52207565 191.23310852]
[53.52290344 177.48501587]
[60.34679794 164.12709045]
[75.00220490 160.93037415]
[86.76876831 170.23278809]
[87.98353577 155.28204346]
[89.19830322 140.33131409]
[71.76746368 130.76062012]
[60.74063492 114.21246338]
[58.61904144 94.44047546]
[44.35319519 89.80522156]
[30.08734703 85.16996765]
[20.16575241 95.07545471]
[7.00275040 99.70557404]
[-6.80346823 98.20705414]
[-18.55383682 90.93041229]
[-25.97606087 79.35010529]
[-27.66397095 65.76611328]
[-41.83294678 60.84268570]
[-56.00191879 55.91925812]
[-70.17089844 50.99583054]
[-84.33987427 46.07240295]
[-101.28607178 46.58490753]
[-106.46972656 30.44285011]
[-92.39347839 20.99320984]
[-79.41644287 31.90342712]
[-65.24746704 36.82685471]
[-51.07849121 41.75028229]
[-36.90951920 46.67370987]
[-22.74054146 51.59713745]
[-10.80401230 40.74549484]
[5.06408978 37.35817719]
[20.56923866 42.44837189]
[31.46649361 54.72177124]
[34.72260284 70.90412140]
[48.98844910 75.53937531]
[63.25429535 80.17462921]
[75.11729431 66.47175598]
[91.66910553 59.08682251]
[91.36509705 44.08990479]
[91.06109619 29.09298325]
[90.75708771 14.09606457]
[90.45308685 -0.90085411]
[82.43769073 -14.54138088]
[89.91545868 -27.42284966]
[89.61145020 -42.41976929]
[89.30744934 -57.41668701]
[75.25613403 -63.28870010]
[64.81271362 -74.37268829]
[59.78655624 -88.74827576]
[61.04848862 -103.92481995]
[68.37986755 -117.27288055]
[80.51049042 -126.47983551]
[95.33864594 -129.95051575]
[110.29527283 -127.08360291]
[122.78904724 -118.37581635]
[130.65533447 -105.33583069]
[132.53128052 -90.22289276]
[128.09182739 -75.65542603]
[118.10617065 -64.15731812]
[104.30436707 -57.72069168]
[104.60836792 -42.72377396]
[104.91237640 -27.72685432]
[112.90602875 -15.15900803]
[105.45000458 -1.20485842]
[105.75401306 13.79206085]
[106.05801392 28.78898048]
[106.36201477 43.78590012]
[106.66602325 58.78281784]
[114.69641876 60.91921997]
[122.14469147 64.60360718]
[128.71582031 69.69003296]
[134.14952087 75.97703552]
[138.23056030 83.21558380]
[152.82493591 79.75086975]
[167.41929626 76.28615570]
[181.94046021 72.52636719]
[196.38243103 68.47305298]
[207.57843018 57.29449463]
[221.92301941 61.30477524]
[236.36499023 57.25146103]
[250.80696106 53.19814682]
[265.24893188 49.14482880]
[272.76922607 35.24443436]
[287.93954468 30.81314659]
[301.75967407 38.47996902]
[306.03030396 53.69631195]
[298.21780396 67.43459320]
[282.95715332 71.54412842]
[269.30224609 63.58680344]
[254.86027527 67.64012146]
[240.41830444 71.69343567]
[225.97633362 75.74674988]
[215.81330872 86.63538361]
[200.43574524 82.91502380]
[185.99377441 86.96833801]
[182.89225769 90.67025757]
[177.40980530 92.42762756]
[170.88401794 90.88052368]
[156.28964233 94.34524536]
[141.69526672 97.80995941]
[140.43119812 110.42163086]
[135.44120789 122.07289886]
[127.18515015 131.69006348]
[116.42385864 138.38682556]
[104.14903259 141.54608154]
[102.93426514 156.49682617]
[101.71949768 171.44755554]
[101.26353455 186.44061279]
[101.56753540 201.43753052]
[101.87153625 216.43444824]
[102.17554474 231.43138123]
[102.47954559 246.42829895]
[102.78355408 261.42520142]
[103.08755493 276.42211914]
[103.39156342 291.41903687]
[103.69556427 306.41595459]
[103.99957275 321.41290283]
[118.75294495 324.46014404]
[132.45812988 330.71438599]
[144.42767334 339.86193848]
[154.06120300 351.44393921]
[160.87550354 364.87945557]
[164.52874756 379.49456787]
[164.83770752 394.55618286]
[161.78689575 409.30880737]
[155.52932739 423.01248169]
[146.37887573 434.97982788]
[134.79454041 444.61053467]
[121.35736847 451.42156982]
[106.74137115 455.07128906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[28 131]
[29 130]
[30 129]
[33 60]
[34 59]
[35 58]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[68 86]
[69 85]
[70 84]
[97 124]
[98 123]
[99 122]
[100 119]
[101 118]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
