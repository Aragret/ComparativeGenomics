%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUUCCCCAGGGGGGGGGGCAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACxxxxxxxxxxAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUCCCCCCCCCCUCUCGUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[73.37559509 363.37911987]
[60.45643997 355.62075806]
[49.67514420 345.09173584]
[41.61312866 332.35986328]
[36.70516968 318.11175537]
[35.21594620 303.11578369]
[37.22576904 288.18069458]
[42.62625122 274.11187744]
[51.12615585 261.66806030]
[62.26708984 251.52033997]
[75.44823456 244.21595764]
[89.95875549 240.14881897]
[89.34293365 225.16146851]
[88.72710419 210.17411804]
[88.11128235 195.18676758]
[87.49545288 180.19941711]
[86.87963104 165.21205139]
[86.26380157 150.22470093]
[85.64797974 135.23735046]
[73.14394379 126.95188141]
[59.10196686 132.22662354]
[45.05998993 137.50135803]
[31.01801300 142.77610779]
[24.03273010 148.75955200]
[16.63320541 148.01174927]
[2.48588824 152.99707031]
[-2.84331560 167.69854736]
[-16.40148544 175.49021912]
[-31.78686905 172.69306946]
[-41.73495865 160.62785339]
[-41.54856873 144.99137878]
[-31.31571007 133.16671753]
[-15.86802292 130.73712158]
[-2.49943376 138.84974670]
[11.64788246 133.86442566]
[25.74327278 128.73413086]
[39.78524780 123.45938110]
[53.82722473 118.18464661]
[67.86920166 112.90990448]
[68.51464081 102.28964996]
[72.28637695 93.31006622]
[59.14474487 86.07836151]
[46.00311279 78.84665680]
[34.15783691 88.37335205]
[19.56711960 92.63708496]
[4.45593643 90.98765564]
[-8.87136555 83.67660522]
[-18.38246918 71.81880951]
[-22.62700081 57.22249603]
[-20.95770073 42.11349487]
[-13.62912560 28.79582405]
[-1.75882745 19.30032539]
[12.84305763 15.07499886]
[27.94984818 16.76417160]
[41.25786972 24.11026192]
[50.73774338 35.99303818]
[54.94385910 50.60047150]
[53.23481369 65.70502472]
[66.37644958 72.93672943]
[79.51807404 80.16843414]
[95.62685394 71.82774353]
[113.50608826 74.89251709]
[123.83699036 64.01720428]
[123.60589600 48.44208145]
[134.23782349 37.56013489]
[149.08773804 37.43580246]
[159.41864014 26.56048965]
[169.74954224 15.68517590]
[180.08045959 4.80986214]
[171.81497192 -6.81633711]
[165.85192871 -19.77035141]
[162.39697266 -33.60166550]
[161.56851196 -47.82957840]
[163.39373779 -61.95989990]
[167.80770874 -75.50214386]
[174.65559387 -87.98651123]
[183.69822693 -98.98023987]
[194.62033081 -108.10255432]
[207.04159546 -115.03789520]
[220.52990723 -119.54679871]
[234.61636353 -121.47420502]
[248.81155396 -120.75475311]
[262.62261963 -117.41501617]
[275.57028198 -111.57251740]
[287.20562744 -103.43161011]
[297.97430420 -113.87361908]
[308.74298096 -124.31562805]
[319.51165771 -134.75762939]
[324.10583496 -152.55999756]
[341.23855591 -156.23616028]
[351.79058838 -166.89706421]
[362.34259033 -177.55798340]
[372.89462280 -188.21888733]
[376.53204346 -204.20954895]
[392.27685547 -208.79562378]
[403.93218994 -197.25935364]
[399.50799561 -181.46826172]
[383.55551147 -177.66687012]
[373.00350952 -167.00596619]
[362.45150757 -156.34506226]
[351.89947510 -145.68414307]
[351.63632202 -133.55183411]
[342.87857056 -124.58116913]
[329.95367432 -123.98896027]
[319.18499756 -113.54695129]
[308.41632080 -103.10494232]
[297.64764404 -92.66292572]
[306.15319824 -79.37413788]
[311.74182129 -64.61351013]
[314.17181396 -49.01300430]
[313.33679199 -33.24102402]
[309.27032471 -17.97378731]
[302.14456177 -3.86633635]
[292.26293945 8.47557068]
[280.04733276 18.52146912]
[266.01995850 25.83898544]
[250.78106689 30.11244965]
[234.98335266 31.15651131]
[219.30381775 28.92417717]
[204.41496277 23.50891685]
[190.95576477 15.14076424]
[180.62486267 26.01607895]
[170.29396057 36.89139175]
[159.96305847 47.76670456]
[160.60084534 62.60344315]
[150.27876282 73.77972412]
[134.71231079 74.34810638]
[124.38140106 85.22341919]
[130.03274536 99.38317871]
[127.64637756 115.23970032]
[117.09275818 128.34274292]
[100.63533020 134.62152100]
[101.25115967 149.60888672]
[101.86698151 164.59623718]
[102.48281097 179.58358765]
[103.09863281 194.57093811]
[103.71446228 209.55828857]
[104.33028412 224.54565430]
[104.94611359 239.53300476]
[119.74138641 242.39596558]
[133.47735596 248.59434509]
[145.41325378 257.79385376]
[154.90541077 269.49835205]
[161.44190979 283.07669067]
[164.67024231 297.79656982]
[164.41632080 312.86413574]
[160.69383240 327.46688843]
[153.70352173 340.81726074]
[143.82238770 352.19528198]
[131.58328247 360.98739624]
[117.64625549 366.71942139]
[102.76291656 369.08221436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 39]
[21 38]
[22 37]
[23 36]
[25 35]
[26 34]
[41 60]
[42 59]
[43 58]
[62 128]
[63 127]
[66 124]
[67 123]
[68 122]
[69 121]
[85 107]
[86 106]
[87 105]
[88 104]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
