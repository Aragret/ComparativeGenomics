%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUAACAAGGGGGGGGGGCAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUxxxxxxxxxxAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUACCCCCCCCCCACAUUAACGA\
) } def
/len { sequence length } bind def

/coor [
[80.73965454 454.31814575]
[66.89371490 448.30212402]
[55.18505478 438.77270508]
[46.48253250 426.43701172]
[41.43193054 412.21051025]
[40.40803909 397.14883423]
[43.48683548 382.36965942]
[50.43985748 368.96972656]
[60.75114059 357.94338989]
[73.65552521 350.10888672]
[88.19541168 346.04757690]
[88.19541168 331.04757690]
[88.19541168 316.04757690]
[88.19541168 301.04757690]
[88.19541168 286.04757690]
[88.19541168 271.04757690]
[88.19541168 256.04757690]
[88.19541168 241.04757690]
[88.19541168 226.04757690]
[88.19541168 211.04757690]
[85.46503448 207.05752563]
[85.25653076 201.29663086]
[88.52044678 195.42684937]
[89.14442444 180.43983459]
[74.54975891 177.07589722]
[60.82160568 171.08772278]
[48.42739487 162.67915344]
[37.78911209 152.13650513]
[29.26896858 139.81872559]
[23.15705872 126.14521790]
[19.66147614 111.58151245]
[18.90123749 96.62348938]
[20.90222931 81.78042603]
[25.59632111 67.55770111]
[32.82369232 54.43956375]
[42.33826065 42.87265396]
[53.81608200 33.25080109]
[66.86636353 25.90160561]
[81.04476929 21.07529449]
[95.86855316 18.93619156]
[96.49253082 3.94917488]
[97.11650848 -11.03784084]
[97.74048615 -26.02485657]
[85.52735138 -32.91580963]
[77.52448273 -44.35019684]
[75.25373840 -58.05379868]
[79.10375214 -71.33103180]
[88.26486206 -81.59519958]
[100.89857483 -86.87239838]
[101.83420563 -101.84318542]
[102.76982880 -116.81398010]
[100.61906433 -120.75551605]
[99.94448090 -124.76998138]
[100.58110046 -128.37228394]
[102.21993256 -131.18444824]
[104.45700073 -132.97410583]
[106.63383484 -147.81530762]
[108.81067657 -162.65650940]
[110.98751068 -177.49771118]
[96.62322998 -181.92127991]
[83.10259247 -188.48579407]
[70.74255371 -197.03738403]
[59.83282852 -207.37559509]
[50.62917709 -219.25805664]
[43.34733582 -232.40626526]
[38.15800095 -246.51197815]
[35.18282318 -261.24456787]
[34.49154282 -276.25863647]
[36.10036087 -291.20227051]
[39.97157288 -305.72515869]
[46.01442337 -319.48684692]
[54.08726120 -332.16476440]
[64.00085449 -343.46173096]
[75.52280426 -353.11288452]
[88.38301849 -360.89205933]
[102.28005219 -366.61682129]
[116.88812256 -370.15301514]
[131.86479187 -371.41775513]
[146.85900879 -370.38137817]
[161.51927185 -367.06817627]
[175.50190735 -361.55584717]
[188.47917175 -353.97354126]
[200.14685059 -344.49905396]
[210.23143005 -333.35449219]
[218.49652100 -320.80105591]
[224.74836731 -307.13302612]
[228.84040833 -292.67080688]
[230.67675781 -277.75341797]
[230.21434021 -262.73056030]
[227.46398926 -247.95436096]
[222.49020386 -233.77120972]
[215.40956116 -220.51358032]
[206.38803101 -208.49223328]
[195.63710022 -197.98899841]
[183.40879822 -189.25006104]
[169.98976135 -182.48028564]
[155.69456482 -177.83834839]
[140.85827637 -175.43309021]
[125.82871246 -175.32087708]
[123.65187836 -160.47967529]
[121.47504425 -145.63847351]
[119.29820251 -130.79725647]
[117.74062347 -115.87834930]
[116.80499268 -100.90756226]
[115.86936951 -85.93676758]
[129.52723694 -77.35689545]
[137.05439758 -62.98595810]
[136.32165527 -46.68586349]
[127.43396759 -32.89077377]
[112.72750092 -25.40088081]
[112.10352325 -10.41386414]
[111.47955322 4.57315207]
[110.85557556 19.56016922]
[125.45024109 22.92409515]
[139.17839050 28.91228294]
[151.57260132 37.32084656]
[162.21089172 47.86349487]
[170.73103333 60.18127060]
[176.84294128 73.85478210]
[180.33853149 88.41848755]
[181.09875488 103.37651062]
[179.09776306 118.21957397]
[174.40367126 132.44229126]
[167.17631531 145.56044006]
[157.66174316 157.12734985]
[146.18391418 166.74920654]
[133.13363647 174.09838867]
[118.95523071 178.92471313]
[104.13144684 181.06381226]
[103.50746918 196.05082703]
[103.19541168 211.04757690]
[103.19541168 226.04757690]
[103.19541168 241.04757690]
[103.19541168 256.04757690]
[103.19541168 271.04757690]
[103.19541168 286.04757690]
[103.19541168 301.04757690]
[103.19541168 316.04757690]
[103.19541168 331.04757690]
[103.19541168 346.04757690]
[117.73529816 350.10888672]
[130.63967896 357.94338989]
[140.95095825 368.96972656]
[147.90399170 382.36965942]
[150.98278809 397.14883423]
[149.95889282 412.21051025]
[144.90829468 426.43701172]
[136.20576477 438.77270508]
[124.49710083 448.30212402]
[110.65116882 454.31814575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[40 113]
[41 112]
[42 111]
[43 110]
[49 105]
[50 104]
[51 103]
[56 102]
[57 101]
[58 100]
[59 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
