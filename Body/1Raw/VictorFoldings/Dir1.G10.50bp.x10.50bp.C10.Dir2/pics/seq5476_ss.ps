%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUUAAUGGGGGGGGGGUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUxxxxxxxxxxGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCCCCCCCCCCCACCCUUACU\
) } def
/len { sequence length } bind def

/coor [
[84.04325867 396.34375000]
[70.82305908 389.07128906]
[59.93625641 378.62426758]
[52.12512589 365.71502686]
[47.92224503 351.22372437]
[47.61417389 336.13836670]
[51.22191238 321.48754883]
[58.49948502 308.27017212]
[68.95069122 297.38739014]
[81.86295319 289.58123779]
[96.35589600 285.38397217]
[96.04383850 270.38720703]
[95.73178101 255.39045715]
[95.41972351 240.39369202]
[95.10766602 225.39694214]
[94.79560852 210.40019226]
[94.48355865 195.40344238]
[94.17150116 180.40667725]
[93.85944366 165.40992737]
[93.54738617 150.41317749]
[84.02255249 148.24775696]
[75.08787537 144.30023193]
[67.07335663 138.71641541]
[60.27503586 131.70254517]
[54.94401169 123.51770782]
[51.27719879 114.46420288]
[49.41003418 104.87644196]
[34.43031693 104.09659576]
[18.26412582 112.85068512]
[3.90729475 102.80670929]
[-11.08540154 102.33866882]
[-26.07809830 101.87062836]
[-41.07079315 101.40258789]
[-56.06348801 100.93453979]
[-71.05618286 100.46649933]
[-82.40171051 111.46898651]
[-98.20263672 111.14288330]
[-109.08454895 99.68167114]
[-108.59141541 83.88507843]
[-97.01578522 73.12494659]
[-81.22528839 73.78506470]
[-70.58814240 85.47380066]
[-55.59544754 85.94184875]
[-40.60275269 86.40988922]
[-25.61005592 86.87792969]
[-10.61735916 87.34597015]
[4.37533712 87.81401825]
[13.44113636 79.74440765]
[25.97607994 80.05125427]
[35.21016312 89.11688232]
[50.18987656 89.89672089]
[52.16215134 82.83420563]
[55.13019562 76.12899780]
[59.03222656 69.92067719]
[63.78702164 64.33847046]
[54.76949310 52.35163879]
[45.75196075 40.36480713]
[30.13204575 36.70451355]
[23.38537216 22.14903450]
[30.68741608 7.86408663]
[46.43666840 4.80785942]
[58.55165863 15.32482910]
[57.73879623 31.34727669]
[66.75632477 43.33411026]
[75.77385712 55.32094193]
[103.69768524 49.31024170]
[130.45361328 59.30968475]
[141.11523438 48.75839615]
[151.77687073 38.20710373]
[162.43849182 27.65581322]
[147.57569885 29.68002701]
[133.43135071 24.68628120]
[123.13405609 13.77914429]
[118.96147156 -0.62882268]
[121.83653259 -15.35071182]
[131.12330627 -27.13017654]
[144.76765442 -33.36170578]
[159.75155640 -32.66694641]
[172.76071167 -25.19957161]
[180.91763306 -12.61129379]
[182.41806030 2.31347394]
[176.92900085 16.27513313]
[189.70635986 8.41770744]
[202.48371887 0.56028217]
[187.50386047 -0.21703583]
[174.08430481 -6.91892672]
[164.46371460 -18.42736435]
[160.24700928 -32.82248306]
[162.13764954 -47.70285797]
[169.82023621 -60.58610153]
[182.01312256 -69.32300568]
[196.68226624 -72.45605469]
[211.38053894 -69.46258545]
[223.65592957 -60.84197998]
[231.46063232 -48.03234863]
[233.49263000 -33.17061996]
[229.41296387 -18.73606873]
[219.90330505 -7.13758993]
[234.31552124 -11.29547691]
[248.72773743 -15.45336437]
[263.13995361 -19.61125183]
[277.55215454 -23.76914024]
[282.70889282 -38.40429306]
[295.50219727 -47.18559265]
[311.01275635 -46.73645020]
[323.27648926 -37.22957230]
[327.57769775 -22.32054138]
[322.26251221 -7.74218941]
[309.37472534 0.89981174]
[293.86993408 0.28243586]
[281.71005249 -9.35692310]
[267.29785156 -5.19903612]
[252.88562012 -1.04114842]
[238.47340393 3.11673903]
[224.06118774 7.27462626]
[210.34114075 13.33763981]
[197.56378174 21.19506454]
[184.78642273 29.05249023]
[172.98977661 38.31744003]
[162.32815552 48.86872864]
[151.66653442 59.42002106]
[141.00489807 69.97131348]
[147.23942566 81.25004578]
[150.43673706 93.73428345]
[150.39128113 106.62136841]
[147.10598755 119.08274078]
[140.79205322 130.31721497]
[131.85543823 139.60246277]
[120.87071991 146.34153748]
[108.54414368 150.10112000]
[108.85619354 165.09786987]
[109.16825104 180.09461975]
[109.48030853 195.09138489]
[109.79236603 210.08813477]
[110.10442352 225.08488464]
[110.41648102 240.08163452]
[110.72853088 255.07839966]
[111.04058838 270.07513428]
[111.35264587 285.07189941]
[126.00763702 288.66265869]
[139.23344421 295.92492676]
[150.12831116 306.36352539]
[157.94941711 319.26672363]
[162.16348267 333.75479126]
[162.48320007 348.83990479]
[158.88677979 363.49349976]
[151.61941528 376.71649170]
[141.17662048 387.60733032]
[128.27038574 395.42346191]
[113.78069305 399.63192749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 51]
[28 50]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[55 65]
[56 64]
[57 63]
[67 122]
[68 121]
[69 120]
[70 119]
[82 118]
[83 117]
[84 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
