%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAAUAAAGGGGGGGGGGGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGxxxxxxxxxxACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCCUAAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[82.72593689 381.86926270]
[70.16771698 373.51809692]
[60.08149338 362.30563354]
[53.10129929 348.93673706]
[49.66591644 334.25173950]
[49.99129486 319.17379761]
[54.05698013 304.65066528]
[61.60739899 291.59533691]
[72.16793060 280.82843018]
[85.07472229 273.02679443]
[99.51644897 268.68084717]
[98.89247131 253.69383240]
[98.26849365 238.70681763]
[97.64451599 223.71980286]
[97.02053833 208.73277283]
[96.39656067 193.74575806]
[95.77258301 178.75874329]
[95.14860535 163.77172852]
[94.52462769 148.78471375]
[93.90065002 133.79769897]
[93.27667999 118.81068420]
[82.50586700 108.37087250]
[67.50667572 108.21483612]
[52.50749207 108.05879974]
[42.72591782 116.53079224]
[30.19624329 116.05517578]
[21.65143967 107.43579865]
[6.65874434 106.96775055]
[-8.33395195 106.49971008]
[-22.36882973 113.80264282]
[-34.84848022 105.67198181]
[-49.84117508 105.20394135]
[-64.83386993 104.73589325]
[-72.85630035 117.83307648]
[-86.36016846 125.15025330]
[-101.71301270 124.71913147]
[-114.78498077 116.65569305]
[-122.05979156 103.12895203]
[-121.58055115 87.77753448]
[-113.47617340 74.73090363]
[-99.92669678 67.49852753]
[-84.57686615 68.02588654]
[-71.55569458 76.17111969]
[-64.36582947 89.74320221]
[-49.37313461 90.21124268]
[-34.38043594 90.67928314]
[-21.41793633 83.34288025]
[-7.86590958 91.50701904]
[7.12678623 91.97505951]
[22.11948204 92.44309998]
[37.07485199 83.31419373]
[52.66352844 93.05960846]
[67.66271973 93.21564484]
[82.66190338 93.37168121]
[94.74188995 84.47933197]
[99.04947662 70.11114502]
[103.35706329 55.74296570]
[107.66464996 41.37477875]
[111.97222900 27.00659561]
[116.27981567 12.63841152]
[112.83144379 -2.80242109]
[123.89776611 -12.77166843]
[128.20535278 -27.13985252]
[132.51293945 -41.50803757]
[121.33128357 -31.50949669]
[108.23596191 -24.19428062]
[93.85915375 -19.91554642]
[78.89495850 -18.87985802]
[64.06578064 -21.13722038]
[50.08755493 -26.57864952]
[37.63510513 -34.94145203]
[27.30959892 -45.82188797]
[19.60952759 -58.69468689]
[14.90662956 -72.93837738]
[13.42794800 -87.86531830]
[15.24487019 -102.75486755]
[20.26967812 -116.88820648]
[28.25979042 -129.58302307]
[38.82946396 -140.22642517]
[51.46842194 -148.30458069]
[65.56649017 -153.42750549]
[80.44305420 -155.34788513]
[95.37991333 -153.97300720]
[109.65595245 -149.36923218]
[122.58196259 -141.75881958]
[133.53390503 -131.50920105]
[141.98306274 -119.11517334]
[147.52153015 -105.17510986]
[149.88191223 -90.36199188]
[148.95027161 -75.39095306]
[144.77238464 -60.98669815]
[155.86369324 -71.08535004]
[166.95501709 -81.18399811]
[171.41778564 -96.96422577]
[187.37950134 -100.72661591]
[198.42012024 -88.60074615]
[193.18199158 -73.06066132]
[177.05366516 -70.09268188]
[165.96234131 -59.99403000]
[154.87103271 -49.89538193]
[146.88111877 -37.20045090]
[142.57353210 -22.83226776]
[138.26594543 -8.46408367]
[142.02243042 5.94904041]
[130.64799500 16.94599724]
[126.34041595 31.31418037]
[122.03282928 45.68236542]
[117.72524261 60.05054855]
[113.41766357 74.41873169]
[109.11007690 88.78691864]
[116.47910309 89.63136292]
[123.82047272 94.30394745]
[138.31607056 98.16110992]
[153.64178467 94.23262024]
[163.95147705 104.98247528]
[178.44708252 108.83963776]
[191.99285889 100.69793701]
[207.30781555 104.60021210]
[215.30584717 118.23131561]
[211.24186707 133.50415039]
[197.52696228 141.35762024]
[182.29794312 137.13240051]
[174.58992004 123.33523560]
[160.09431458 119.47807312]
[145.80543518 123.68244934]
[134.45890808 112.65670013]
[119.96331787 108.79954529]
[108.26369476 118.18670654]
[108.88767242 133.17372131]
[109.51165009 148.16073608]
[110.13562775 163.14775085]
[110.75960541 178.13476562]
[111.38358307 193.12178040]
[112.00755310 208.10879517]
[112.63153076 223.09582520]
[113.25550842 238.08283997]
[113.87948608 253.06985474]
[114.50346375 268.05685425]
[129.25646973 271.18731689]
[142.76710510 277.88906860]
[154.18608093 287.74084473]
[162.79559326 300.12338257]
[168.05444336 314.25827026]
[169.63204956 329.25701904]
[167.42924500 344.17675781]
[161.58450317 358.07962036]
[152.46522522 370.09167480]
[140.64465332 379.45782471]
[126.86583710 385.58932495]
[111.99494171 388.10073853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 54]
[23 53]
[24 52]
[27 50]
[28 49]
[29 48]
[31 46]
[32 45]
[33 44]
[55 110]
[56 109]
[57 108]
[58 107]
[59 106]
[60 105]
[62 103]
[63 102]
[64 101]
[91 100]
[92 99]
[93 98]
[112 127]
[113 126]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
