%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUACCCAGGGGGGGGGGCACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAxxxxxxxxxxGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCCUCCCCCCCCCCCAUUGUACCCA\
) } def
/len { sequence length } bind def

/coor [
[91.82208252 502.54415894]
[77.97615051 496.52810669]
[66.26748657 486.99868774]
[57.56496048 474.66302490]
[52.51435852 460.43652344]
[51.49046707 445.37481689]
[54.56926727 430.59567261]
[61.52228928 417.19573975]
[71.83357239 406.16940308]
[84.73795319 398.33489990]
[99.27783966 394.27359009]
[99.27783966 379.27359009]
[99.27783966 364.27359009]
[99.27783966 349.27359009]
[99.27783966 334.27359009]
[99.27783966 319.27359009]
[99.27783966 304.27359009]
[99.27783966 289.27359009]
[99.27783966 274.27359009]
[99.27783966 259.27359009]
[85.87224579 255.83995056]
[73.68031311 249.27246094]
[63.42284775 239.95393372]
[55.70757675 228.43000793]
[50.99317169 215.37718201]
[49.56198502 201.56306458]
[51.50312805 187.80128479]
[56.70693970 174.90356445]
[64.87118530 163.63180542]
[75.51859283 154.65310669]
[88.02474976 148.50028992]
[101.65474701 145.54025269]
[102.27872467 130.55322266]
[82.95018005 123.59062195]
[73.24572754 106.68080139]
[76.61154938 88.54121399]
[90.11715698 77.56697083]
[88.55957794 62.64805984]
[87.00199890 47.72914886]
[85.44441223 32.81023788]
[83.42208099 17.94719124]
[80.93695831 3.15448308]
[78.45184326 -11.63822365]
[75.96672821 -26.43093109]
[73.48160553 -41.22363663]
[70.99649048 -56.01634598]
[68.51136780 -70.80905151]
[66.02625275 -85.60176086]
[63.54113388 -100.39447021]
[60.55224609 -103.74529266]
[58.98450851 -107.50205231]
[58.78728867 -111.15486145]
[59.74541473 -114.26548767]
[61.51813889 -116.51599121]
[60.27126312 -131.46408081]
[59.02439117 -146.41217041]
[57.77751541 -161.36024475]
[42.81091690 -162.88195801]
[28.37883186 -167.12808228]
[14.97281265 -173.95401001]
[3.04946184 -183.12724304]
[-6.98511457 -194.33535767]
[-14.78914261 -207.19660950]
[-20.09682083 -221.27294922]
[-22.72737122 -236.08493042]
[-22.59119797 -251.12806702]
[-19.69293976 -265.89001465]
[-14.13130856 -279.86795044]
[-6.09573317 -292.58581543]
[4.14009809 -303.61044312]
[16.22755623 -312.56634521]
[29.75494957 -319.14846802]
[44.26153564 -323.13262939]
[59.25323105 -324.38314819]
[74.21941376 -322.85739136]
[88.65036011 -318.60739136]
[102.05453491 -311.77786255]
[113.97541046 -302.60140991]
[124.00696564 -291.39056396]
[131.80752563 -278.52722168]
[137.11141968 -264.44946289]
[139.73797607 -249.63676453]
[139.59774780 -234.59365845]
[136.69551086 -219.83250427]
[131.13011169 -205.85606384]
[123.09110260 -193.14035034]
[112.85230255 -182.11848450]
[100.76242828 -173.16586304]
[87.23326111 -166.58738708]
[72.72560120 -162.60713196]
[73.97248077 -147.65904236]
[75.21935272 -132.71095276]
[76.46622467 -117.76286316]
[78.33383942 -102.87958527]
[80.81895447 -88.08687592]
[83.30407715 -73.29417419]
[85.78919220 -58.50146484]
[88.27431488 -43.70875549]
[90.75942993 -28.91604996]
[93.24455261 -14.12334251]
[95.72966766 0.66936463]
[98.21479034 15.46207142]
[100.92351532 17.81372643]
[102.59693909 21.62178993]
[102.55059052 26.37049866]
[100.36332703 31.25265694]
[101.92090607 46.17156982]
[103.47849274 61.09048080]
[105.03607178 76.00939178]
[117.73709869 80.23729706]
[127.19090271 91.14461517]
[129.96705627 106.37717438]
[144.90135193 107.77947998]
[159.57412720 100.45541382]
[173.10223389 109.72483826]
[171.56912231 126.05216980]
[156.55194092 132.64123535]
[143.49905396 122.71379089]
[128.56474304 121.31148529]
[117.26573944 131.17720032]
[116.64176178 146.16423035]
[132.07542419 151.23303223]
[145.46176147 160.41157532]
[155.73483276 172.95957947]
[162.07929993 187.86883545]
[163.99504089 203.94421387]
[161.33660889 219.89949036]
[154.32423401 234.46023560]
[143.52558899 246.46562195]
[129.80987549 254.96095276]
[114.27783966 259.27359009]
[114.27783966 274.27359009]
[114.27783966 289.27359009]
[114.27783966 304.27359009]
[114.27783966 319.27359009]
[114.27783966 334.27359009]
[114.27783966 349.27359009]
[114.27783966 364.27359009]
[114.27783966 379.27359009]
[114.27783966 394.27359009]
[128.81773376 398.33489990]
[141.72210693 406.16940308]
[152.03338623 417.19573975]
[158.98641968 430.59567261]
[162.06521606 445.37481689]
[161.04132080 460.43652344]
[155.99072266 474.66302490]
[147.28819275 486.99868774]
[135.57952881 496.52810669]
[121.73359680 502.54415894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 121]
[33 120]
[37 109]
[38 108]
[39 107]
[40 106]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
[49 94]
[54 93]
[55 92]
[56 91]
[57 90]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
