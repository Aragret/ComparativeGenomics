%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCAUCACCGGGGGGGGGGAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUAxxxxxxxxxxACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCCCCCCCCCCCUAUCAUCACC\
) } def
/len { sequence length } bind def

/coor [
[70.93580627 372.61141968]
[56.91386414 367.05841064]
[44.71390533 358.19207764]
[35.10283279 346.56976318]
[28.68480873 332.92205811]
[25.86327171 318.10687256]
[26.81558800 303.05548096]
[31.48189354 288.71408081]
[39.56885910 275.98413086]
[50.56813431 265.66583252]
[63.78829193 258.40786743]
[78.39830780 254.66642761]
[78.39830780 239.66642761]
[78.39830780 224.66642761]
[78.39830780 209.66642761]
[78.39830780 194.66642761]
[78.39830780 179.66642761]
[78.39830780 164.66642761]
[78.39830780 149.66642761]
[78.39830780 134.66642761]
[78.39830780 119.66642761]
[85.05243683 85.61536407]
[80.79959106 71.23088074]
[76.54674530 56.84640121]
[68.51975250 44.17488480]
[57.33145142 34.18378830]
[46.14315414 24.19268990]
[34.95486069 14.20159340]
[23.76656342 4.21049690]
[3.94552541 12.43568993]
[-17.26613426 9.68301105]
[-34.21925735 -3.24361944]
[-42.43418121 -22.84018517]
[-39.78434753 -43.85215378]
[-52.45586395 -51.87915039]
[-65.12738037 -59.90614700]
[-77.79889679 -67.93314362]
[-90.47041321 -75.96014404]
[-103.24454498 -73.90461731]
[-113.64739227 -80.90119171]
[-116.37870789 -92.72499084]
[-128.88275146 -101.01045990]
[-141.38677979 -109.29593658]
[-153.21951294 -99.87036133]
[-167.38648987 -94.56452179]
[-182.49977112 -93.89822388]
[-197.07872009 -97.93675995]
[-209.69500732 -106.28446198]
[-219.11265564 -118.12351227]
[-224.40901184 -132.29405212]
[-225.06517029 -147.40776062]
[-221.01687622 -161.98399353]
[-212.66072083 -174.59469604]
[-200.81535339 -184.00440979]
[-186.64128113 -189.29125977]
[-171.52711487 -189.93730164]
[-156.95361328 -185.87922668]
[-144.34851074 -177.51463318]
[-134.94673157 -165.66296387]
[-129.66938782 -151.48535156]
[-129.03347778 -136.37075806]
[-133.10130310 -121.79997253]
[-120.59726715 -113.51449585]
[-108.09323120 -105.22902679]
[-90.57086945 -105.12332916]
[-82.44341278 -88.63166046]
[-69.77189636 -80.60466003]
[-57.10037994 -72.57766724]
[-44.42886734 -64.55066681]
[-31.75734901 -56.52367020]
[-24.77231216 -62.58147049]
[-16.59617615 -66.92398071]
[-7.64299059 -69.32527924]
[1.63249135 -69.65791321]
[10.75791454 -67.89962769]
[19.26737595 -64.13478851]
[26.72520828 -58.55034637]
[32.74828720 -51.42655945]
[37.02570724 -43.12292862]
[39.33484650 -34.06005859]
[39.55291367 -24.69834900]
[37.66349792 -15.51461601]
[33.75765991 -6.97779989]
[44.94595718 3.01329708]
[56.13425446 13.00439453]
[67.32254791 22.99549103]
[78.51084900 32.98658752]
[74.17240143 18.62769318]
[72.96168518 3.67663360]
[74.93322754 -11.19323540]
[79.99823761 -25.31221771]
[87.92859650 -38.04443741]
[98.36714935 -48.81646347]
[110.84377289 -57.14316177]
[124.79655457 -62.64952087]
[139.59709167 -65.08754730]
[154.57882690 -64.34743500]
[169.06701660 -60.46252441]
[182.40913391 -53.60778046]
[194.00431824 -44.09191513]
[203.33035278 -32.34350204]
[209.96720886 -18.89165306]
[213.61596680 -4.34220219]
[214.11231995 10.64958286]
[211.43391418 25.40851593]
[205.70135498 39.26989746]
[197.17285156 51.60944748]
[186.23248291 61.87142944]
[173.37297058 69.59367371]
[159.17347717 74.42838287]
[144.27351379 76.15782928]
[129.34411621 74.70411682]
[115.05768585 70.13272095]
[102.05761719 62.64951324]
[90.93122864 52.59355545]
[95.18407440 66.97803497]
[99.43692017 81.36251831]
[105.10700226 67.47546387]
[119.18412781 62.29524994]
[132.50331116 69.19447327]
[136.39305115 83.68136597]
[128.32089233 96.32416534]
[113.54270935 98.89183044]
[126.68434143 106.12353516]
[139.82597351 113.35523224]
[156.61779785 115.69424438]
[159.01863098 132.47734070]
[143.55604553 139.43037415]
[132.59426880 126.49686432]
[119.45263672 119.26515961]
[106.31100464 112.03346252]
[93.39830780 119.66642761]
[93.39830780 134.66642761]
[93.39830780 149.66642761]
[93.39830780 164.66642761]
[93.39830780 179.66642761]
[93.39830780 194.66642761]
[93.39830780 209.66642761]
[93.39830780 224.66642761]
[93.39830780 239.66642761]
[93.39830780 254.66642761]
[108.00831604 258.40786743]
[121.22847748 265.66583252]
[132.22775269 275.98413086]
[140.31471252 288.71408081]
[144.98101807 303.05548096]
[145.93333435 318.10687256]
[143.11180115 332.92205811]
[136.69377136 346.56976318]
[127.08270264 358.19207764]
[114.88275146 367.05841064]
[100.86080170 372.61141968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 117]
[23 116]
[24 115]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 64]
[42 63]
[43 62]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
