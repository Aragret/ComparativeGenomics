%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAGCAUAGGGGGGGGGGCAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCxxxxxxxxxxACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACCCCCCCCCCCAACAAAGCAUA\
) } def
/len { sequence length } bind def

/coor [
[83.53406525 378.21170044]
[70.04518890 371.48016357]
[58.55968857 361.71560669]
[49.74531937 349.48568726]
[44.11453629 335.50149536]
[41.99470901 320.57601929]
[43.50907516 305.57702637]
[48.56959915 291.37652588]
[56.88206482 278.80007935]
[67.96319580 268.57894897]
[81.16874695 261.30731201]
[95.73097229 257.40792847]
[95.42299652 242.41108704]
[95.11502075 227.41426086]
[94.80704498 212.41741943]
[94.49906158 197.42057800]
[94.19108582 182.42373657]
[93.88311005 167.42691040]
[93.57513428 152.43006897]
[93.26715088 137.43322754]
[92.95917511 122.43639374]
[82.30045319 115.48194885]
[76.82621765 103.99258423]
[62.00373840 101.69171143]
[47.18125534 99.39083862]
[32.35877228 97.08995819]
[17.53629112 94.78908539]
[2.71380973 92.48821259]
[-5.38832331 101.28842926]
[-16.62704086 105.01895142]
[-28.14695168 102.85482025]
[-37.08034134 95.45336151]
[-41.26102448 84.76070404]
[-55.97654724 81.85323334]
[-70.69207001 78.94576263]
[-78.78939819 91.78311920]
[-90.97964478 100.82536316]
[-105.61418915 104.84960938]
[-120.71382904 103.31160736]
[-134.23645020 96.41936493]
[-144.35324097 85.10498810]
[-149.69598389 70.89867401]
[-149.54211426 55.72169113]
[-143.91244507 41.62660980]
[-133.56834412 30.51967430]
[-119.90876770 23.90300369]
[-104.78105927 22.67145157]
[-90.23110962 26.99157524]
[-78.22668457 36.27910995]
[-70.39129639 49.27799606]
[-67.78459930 64.23023987]
[-53.06907272 67.13771057]
[-38.35354996 70.04518127]
[-23.84749985 58.95232391]
[-5.51600885 61.97521210]
[5.01468468 77.66573334]
[19.83716583 79.96660614]
[34.65964890 82.26747894]
[49.48213196 84.56835175]
[64.30461121 86.86923218]
[79.12709808 89.17010498]
[92.64162445 77.66574097]
[110.34780121 78.88394165]
[120.89981842 68.22303772]
[111.31626892 56.66784286]
[102.91149902 44.22892761]
[95.76643372 31.02609253]
[89.94990540 17.18648529]
[85.51791382 2.84339356]
[82.51315308 -11.86504650]
[80.96456146 -26.79718208]
[80.88704681 -41.80920410]
[82.28136444 -56.75653458]
[85.13407898 -71.49521637]
[89.41771698 -85.88330841]
[95.09102631 -99.78224182]
[102.09936523 -113.05815887]
[110.37524414 -125.58319855]
[119.83895111 -137.23674011]
[130.39935303 -147.90653992]
[141.95472717 -157.48986816]
[154.39381409 -165.89439392]
[167.59680176 -173.03918457]
[181.43652344 -178.85543823]
[195.77969360 -183.28713989]
[210.48820496 -186.29161072]
[225.42036438 -187.83990479]
[240.43238831 -187.91711426]
[255.37968445 -186.52250671]
[270.11831665 -183.66949463]
[284.50631714 -179.38555908]
[298.40515137 -173.71197510]
[311.68090820 -166.70336914]
[324.20581055 -158.42724609]
[335.85916138 -148.96330261]
[346.52874756 -138.40269470]
[356.11181641 -126.84711456]
[364.51611328 -114.40786743]
[371.66064453 -101.20474243]
[377.47662354 -87.36490631]
[381.90802002 -73.02163696]
[384.91220093 -58.31307220]
[386.46020508 -43.38087845]
[386.53710938 -28.36885262]
[385.14218140 -13.42157841]
[382.28887939 1.31699204]
[378.00466919 15.70491409]
[372.33081055 29.60362053]
[365.32192993 42.87925720]
[357.04556274 55.40396500]
[347.58139038 67.05712891]
[337.02056885 77.72650909]
[325.46478271 87.30936432]
[313.02539062 95.71339417]
[299.82211304 102.85765839]
[285.98214722 108.67336273]
[271.63879395 113.10449219]
[256.93017578 116.10836792]
[241.99795532 117.65606689]
[226.98593140 117.73268127]
[212.03868103 116.33746338]
[197.30017090 113.48387146]
[182.91232300 109.19936371]
[169.01373291 103.52522278]
[155.73823547 96.51608276]
[143.21369934 88.23945618]
[131.56072998 78.77504730]
[121.00870514 89.43595886]
[123.40251923 102.29934692]
[118.55094147 114.45086670]
[107.95601654 122.12841034]
[108.26399231 137.12524414]
[108.57196808 152.12208557]
[108.87994385 167.11892700]
[109.18792725 182.11576843]
[109.49590302 197.11260986]
[109.80387878 212.10943604]
[110.11185455 227.10627747]
[110.41983795 242.10311890]
[110.72781372 257.09994507]
[125.43785095 260.39819336]
[138.93080139 267.12152100]
[150.42222595 276.87911987]
[159.24400330 289.10369873]
[164.88327026 303.08447266]
[167.01214600 318.00863647]
[165.50686646 333.00857544]
[160.45495605 347.21215820]
[152.15011597 359.79360962]
[141.07518005 370.02148438]
[127.87403870 377.30111694]
[113.31417847 381.20932007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[33 53]
[34 52]
[35 51]
[63 128]
[64 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
