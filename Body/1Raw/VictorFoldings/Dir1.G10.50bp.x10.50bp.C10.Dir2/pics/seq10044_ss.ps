%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCAUCACGGGGGGGGGGCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUxxxxxxxxxxAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCCCCCCCCCCCUAGCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[101.95978546 460.18469238]
[89.40155792 451.83355713]
[79.31533813 440.62109375]
[72.33514404 427.25219727]
[68.89975739 412.56719971]
[69.22513580 397.48922729]
[73.29082489 382.96612549]
[80.84123993 369.91076660]
[91.40177155 359.14389038]
[104.30856323 351.34225464]
[118.75029755 346.99627686]
[118.12631989 332.00927734]
[117.50234222 317.02224731]
[116.87836456 302.03524780]
[116.25438690 287.04821777]
[115.63040924 272.06121826]
[115.00643158 257.07418823]
[114.38245392 242.08717346]
[113.75847626 227.10015869]
[113.13449860 212.11314392]
[111.57691956 197.19422913]
[109.09179688 182.40153503]
[106.60668182 167.60882568]
[104.12155914 152.81611633]
[101.17607880 138.10815430]
[97.77310181 123.49925995]
[80.24482727 117.59459686]
[70.70220184 99.38222504]
[55.99423981 102.32770538]
[41.28627777 105.27318573]
[31.22980690 117.77306366]
[15.18816757 117.56005859]
[5.46713448 104.79756927]
[9.52385235 89.27589417]
[24.24635506 82.90192413]
[38.34079742 90.56522369]
[53.04875946 87.61974335]
[67.75672150 84.67426300]
[76.89845276 72.78188324]
[75.96282196 57.81109238]
[75.02719879 42.84029770]
[74.09156799 27.86950684]
[59.63203049 34.49557114]
[40.89617920 31.63651085]
[27.95812225 24.04660225]
[15.02006531 16.45669365]
[2.08200979 8.86678600]
[-10.85604572 1.27687788]
[-27.24962234 1.70428324]
[-35.58466721 -12.41871548]
[-27.28679848 -26.56358719]
[-10.89215374 -26.17930222]
[-3.26613784 -11.66117859]
[9.67191792 -4.07126999]
[22.60997391 3.51863837]
[35.54803085 11.10854721]
[48.48608780 18.69845581]
[55.46628189 15.95493889]
[69.42667389 10.46790791]
[76.40686798 7.72439194]
[80.71444702 -6.64379215]
[69.53555298 3.35782266]
[55.94031525 9.69576454]
[41.09256363 11.82747269]
[26.26333809 9.57046032]
[12.72210503 3.11794114]
[1.62806559 -6.97771597]
[-6.06907082 -19.85226822]
[-9.71038818 -34.40358353]
[-8.98417091 -49.38599396]
[-3.95258641 -63.51692200]
[4.95363474 -75.58668518]
[16.97207260 -84.56204987]
[31.07388306 -89.67467499]
[46.05187607 -90.48689270]
[60.62385941 -86.92916870]
[73.54238892 -79.30606842]
[83.70156097 -68.27017212]
[90.23171234 -54.76620102]
[92.57382202 -39.95018005]
[90.52642822 -25.08715248]
[100.03479004 -36.68849182]
[109.54314423 -48.28983307]
[119.05150604 -59.89117432]
[128.55986023 -71.49251556]
[121.68849945 -85.08311462]
[120.94547272 -100.29389191]
[126.45951843 -114.48949432]
[137.27529907 -125.21044922]
[151.51890564 -130.59928894]
[166.72254944 -129.72235107]
[180.25212097 -122.73159027]
[189.76351929 -110.83818054]
[193.60884094 -96.10273743]
[191.12187195 -81.07826233]
[182.73350525 -68.36782837]
[169.89703369 -60.17361450]
[154.83650208 -57.91529846]
[140.16120911 -61.98415756]
[130.65284729 -50.38281631]
[121.14448547 -38.78147507]
[111.63613129 -27.18013382]
[102.12776947 -15.57879353]
[95.08263397 -2.33620739]
[90.77504730 12.03197670]
[89.06236267 26.93387985]
[89.99798584 41.90467072]
[90.93361664 56.87546158]
[91.86924744 71.84625244]
[108.13351440 73.03563690]
[120.60436249 82.51347351]
[125.66730499 96.65427399]
[122.34007263 110.64006042]
[112.38199615 120.09628296]
[115.78497314 134.70516968]
[119.44750214 138.60458374]
[121.04304504 143.07746887]
[120.70584869 147.22331238]
[118.91426849 150.33099365]
[121.39938354 165.12370300]
[123.88450623 179.91641235]
[126.36962128 194.70912170]
[136.25851440 183.43038940]
[151.21244812 182.25561523]
[162.74125671 191.85180664]
[164.29940796 206.77064514]
[155.00227356 218.54194641]
[140.12832642 220.48246765]
[128.12152100 211.48916626]
[128.74548340 226.47618103]
[129.36946106 241.46319580]
[129.99343872 256.45022583]
[130.61741638 271.43722534]
[131.24139404 286.42425537]
[131.86537170 301.41125488]
[132.48934937 316.39828491]
[133.11332703 331.38528442]
[133.73730469 346.37231445]
[148.49031067 349.50274658]
[162.00094604 356.20449829]
[173.41992188 366.05630493]
[182.02944946 378.43884277]
[187.28828430 392.57373047]
[188.86589050 407.57244873]
[186.66308594 422.49218750]
[180.81834412 436.39508057]
[171.69906616 448.40713501]
[159.87849426 457.77328491]
[146.09968567 463.90478516]
[131.22877502 466.41616821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 122]
[22 121]
[23 120]
[24 119]
[25 115]
[26 114]
[28 38]
[29 37]
[30 36]
[39 109]
[40 108]
[41 107]
[42 106]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[60 105]
[61 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
