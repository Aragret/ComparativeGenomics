%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUAAGGGGGGGGGGCCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACxxxxxxxxxxAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACCCCCCCCCCCUACUACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 368.63174438]
[71.19830322 362.61572266]
[59.48964310 353.08630371]
[50.78712082 340.75064087]
[45.73651886 326.52410889]
[44.71262741 311.46243286]
[47.79142761 296.68328857]
[54.74444962 283.28335571]
[65.05573273 272.25701904]
[77.96011353 264.42251587]
[92.50000000 260.36120605]
[92.50000000 245.36120605]
[92.50000000 230.36120605]
[92.50000000 215.36120605]
[92.50000000 200.36120605]
[92.50000000 185.36120605]
[92.50000000 170.36120605]
[92.50000000 155.36120605]
[92.50000000 140.36120605]
[92.50000000 125.36119843]
[87.06058502 120.19760132]
[80.60055542 133.73524475]
[65.72922516 131.77473450]
[62.99832153 117.02541351]
[76.18176270 109.87039185]
[70.74234772 104.70678711]
[55.76263428 105.48663330]
[40.78292084 106.26647949]
[25.80320740 107.04632568]
[10.82349205 107.82617188]
[-4.15622234 108.60601807]
[-11.06218338 122.32473755]
[-23.91107941 130.73908997]
[-39.24662399 131.58567810]
[-52.94363022 124.63674164]
[-61.31766891 111.76153564]
[-62.11617279 96.42341614]
[-55.12434769 82.74826050]
[-42.22295380 74.41461182]
[-26.88240433 73.66419220]
[-13.22922993 80.69885254]
[-4.93606710 93.62630463]
[10.04364681 92.84645844]
[25.02336121 92.06661224]
[40.00307465 91.28676605]
[54.98279190 90.50691986]
[69.96250153 89.72707367]
[74.71668243 83.92640686]
[61.19686890 77.42912292]
[46.41827393 74.86141968]
[38.39161301 62.18968964]
[42.38521576 47.73109055]
[55.77787018 40.97558594]
[69.77924347 46.35718536]
[75.19943237 60.34431076]
[84.22504425 72.32506561]
[88.97922516 66.52439117]
[86.80238342 51.68318939]
[84.62554932 36.84198380]
[82.44870758 22.00077629]
[78.59292603 16.50164604]
[78.20210266 10.75024986]
[80.50338745 6.49824142]
[78.94580841 -8.42067051]
[77.38822937 -23.33958244]
[62.73489380 -27.29485703]
[50.50218964 -36.27958679]
[42.34449005 -49.07866287]
[39.36505508 -63.96111679]
[41.96683121 -78.91421509]
[49.79795074 -91.91567993]
[61.79931641 -101.20716095]
[76.34783936 -105.53207397]
[91.47595978 -104.30549622]
[105.13771820 -97.69332123]
[115.48546600 -86.58979034]
[121.11977386 -72.49656677]
[121.27863312 -57.31963348]
[115.94056702 -43.11155701]
[105.82749939 -31.79385948]
[92.30714417 -24.89716339]
[93.86472321 -9.97825146]
[95.42230225 4.94066048]
[97.28991699 19.82394028]
[99.46675110 34.66514587]
[101.64359283 49.50635147]
[103.82042694 64.34755707]
[112.17849731 70.48674011]
[117.51699066 78.15879059]
[119.72476959 86.20757294]
[119.08108521 93.55772400]
[116.19634247 99.33557892]
[131.13066101 97.93327332]
[146.06495667 96.53096771]
[160.99926758 95.12866974]
[164.87741089 80.49359131]
[173.51246643 68.09166718]
[185.84642029 59.40870285]
[200.37951660 55.47688293]
[215.35266113 56.75212860]
[228.96034241 63.06129074]
[239.56831360 73.62538910]
[245.90988159 87.15571594]
[260.84417725 85.75341797]
[275.77850342 84.35111237]
[281.53414917 70.16904449]
[293.22875977 60.29509354]
[308.17495728 56.99821854]
[322.93826294 61.03601837]
[334.12612915 71.48063660]
[339.16769409 85.93197632]
[336.90444946 101.06922150]
[327.85644531 113.41394806]
[314.10287476 120.12943268]
[298.80416870 119.67249298]
[285.47592163 112.14814758]
[277.18078613 99.28541565]
[262.24649048 100.68772125]
[247.31217957 102.09002686]
[243.60020447 116.56436920]
[235.14422607 128.91853333]
[222.94888306 137.65055847]
[208.47485352 141.69082642]
[193.46385193 140.53314209]
[179.72912598 134.29797363]
[168.93630981 123.72029877]
[162.40156555 110.06297302]
[147.46726990 111.46527863]
[132.53295898 112.86758423]
[117.59864807 114.26988220]
[107.50000000 125.36119843]
[107.50000000 140.36120605]
[107.50000000 155.36120605]
[107.50000000 170.36120605]
[107.50000000 185.36120605]
[107.50000000 200.36120605]
[107.50000000 215.36120605]
[107.50000000 230.36120605]
[107.50000000 245.36120605]
[107.50000000 260.36120605]
[122.03988647 264.42251587]
[134.94427490 272.25701904]
[145.25555420 283.28335571]
[152.20857239 296.68328857]
[155.28736877 311.46243286]
[154.26348877 326.52410889]
[149.21287537 340.75064087]
[140.51036072 353.08630371]
[128.80169678 362.61572266]
[114.95575714 368.63174438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[57 87]
[58 86]
[59 85]
[60 84]
[63 83]
[64 82]
[65 81]
[92 130]
[93 129]
[94 128]
[95 127]
[103 119]
[104 118]
[105 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
