%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACACAAACGGGGGGGGGGGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAxxxxxxxxxxCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUCCCCCCCCCCAUACACCAAC\
) } def
/len { sequence length } bind def

/coor [
[63.39690018 371.78137207]
[49.55096054 365.76535034]
[37.84230042 356.23593140]
[29.13977623 343.90026855]
[24.08917427 329.67373657]
[23.06528282 314.61206055]
[26.14408112 299.83288574]
[33.09710312 286.43298340]
[43.40838623 275.40664673]
[56.31276703 267.57211304]
[70.85265350 263.51080322]
[70.85265350 248.51081848]
[70.85265350 233.51081848]
[70.85265350 218.51081848]
[70.85265350 203.51081848]
[70.85265350 188.51081848]
[70.85265350 173.51081848]
[70.85265350 158.51081848]
[70.85265350 143.51081848]
[70.85265350 128.51081848]
[87.13220215 90.42268372]
[81.93679047 76.35116577]
[77.01478577 78.91689301]
[70.88338470 79.91090393]
[56.02033615 81.93324280]
[41.15728760 83.95557404]
[26.29424095 85.97790527]
[22.45747948 100.68666840]
[13.27998734 112.80451202]
[0.16126774 120.48355103]
[-14.89817142 122.55278778]
[-29.60187340 118.69667816]
[-41.70763397 109.50325775]
[-49.36940765 96.37444305]
[-51.41883087 81.31230164]
[-47.54338455 66.61367798]
[-38.33404541 54.52002716]
[-25.19516754 46.87553024]
[-10.13033581 44.84592056]
[4.56317043 48.74069595]
[16.64470100 57.96593857]
[24.27190781 71.11486053]
[39.13495255 69.09252930]
[53.99800110 67.07019043]
[68.86104584 65.04785919]
[79.41233826 54.38623047]
[81.27995300 39.50295258]
[83.14756775 24.61967278]
[68.51674652 21.25362587]
[54.30154419 16.42465591]
[40.64781952 10.18231201]
[27.69568825 2.59065413]
[15.57805729 -6.27241611]
[4.41927338 -16.31595039]
[-5.66615486 -27.43688202]
[-14.57473469 -39.52109528]
[-22.21504974 -52.44458771]
[-28.50869751 -66.07473755]
[-33.39109421 -80.27168274]
[-36.81214142 -94.88973236]
[-38.73672867 -109.77889252]
[-39.14511108 -124.78636169]
[-38.03309631 -139.75814819]
[-35.41209412 -154.54061890]
[-31.30900192 -168.98207092]
[-25.76592255 -182.93432617]
[-18.83974075 -196.25419617]
[-10.60152626 -208.80500793]
[-1.13581860 -220.45796204]
[9.46024895 -231.09349060]
[21.07794189 -240.60244751]
[33.59804535 -248.88725281]
[46.89208221 -255.86288452]
[60.82363510 -261.45779419]
[75.24974060 -265.61453247]
[90.02236176 -268.29046631]
[104.98991394 -269.45809937]
[119.99880219 -269.10549927]
[134.89500427 -267.23626709]
[149.52568054 -263.86959839]
[163.74066162 -259.03997803]
[177.39411926 -252.79704285]
[190.34591675 -245.20481873]
[202.46315002 -236.34121704]
[213.62150574 -226.29719543]
[223.70643616 -215.17581177]
[232.61448669 -203.09120178]
[240.25422668 -190.16737366]
[246.54728699 -176.53695679]
[251.42904663 -162.33979797]
[254.84945679 -147.72158813]
[256.77337646 -132.83235168]
[257.18112183 -117.82485962]
[256.06842041 -102.85311890]
[253.44677734 -88.07077026]
[249.34304810 -73.62949371]
[243.79936218 -59.67748642]
[236.87258911 -46.35791779]
[228.63381958 -33.80747223]
[219.16760254 -22.15493011]
[208.57107544 -11.51987267]
[196.95295715 -2.01143050]
[184.43249512 6.27282476]
[171.13815308 13.24788189]
[157.20634460 18.84216690]
[142.78005981 22.99827194]
[128.00732422 25.67354965]
[113.03971863 26.84054565]
[98.03084564 26.48728561]
[96.16323090 41.37056351]
[94.29561615 56.25384521]
[96.00830841 71.15574646]
[101.20372009 85.22726440]
[112.50273132 95.09298706]
[127.14623260 98.34381866]
[141.78973389 101.59464264]
[157.26022339 96.15443420]
[169.52896118 107.03608704]
[165.97489929 123.04547882]
[150.25418091 127.71353149]
[138.53890991 116.23814392]
[123.89540100 112.98731995]
[109.25189972 109.73648834]
[103.40209198 114.43006897]
[118.03589630 117.72425842]
[124.58457184 131.21925354]
[118.11692047 144.75326538]
[103.50312805 148.13513184]
[91.74743652 138.81828308]
[91.70246887 123.81723022]
[85.85265350 128.51081848]
[85.85265350 143.51081848]
[85.85265350 158.51081848]
[85.85265350 173.51081848]
[85.85265350 188.51081848]
[85.85265350 203.51081848]
[85.85265350 218.51081848]
[85.85265350 233.51081848]
[85.85265350 248.51081848]
[85.85265350 263.51080322]
[100.39253998 267.57211304]
[113.29692078 275.40664673]
[123.60820770 286.43298340]
[130.56123352 299.83288574]
[133.64002991 314.61206055]
[132.61613464 329.67373657]
[127.56553650 343.90026855]
[118.86300659 356.23593140]
[107.15435028 365.76535034]
[93.30841064 371.78137207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 113]
[22 112]
[24 45]
[25 44]
[26 43]
[27 42]
[46 111]
[47 110]
[48 109]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
