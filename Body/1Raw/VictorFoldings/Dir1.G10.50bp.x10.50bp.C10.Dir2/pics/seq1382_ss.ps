%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAGCCCUAGGGGGGGGGGAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCAxxxxxxxxxxUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGCCCCCCCCCCGCCUAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[63.69671631 432.62139893]
[49.67477417 427.06838989]
[37.47481537 418.20205688]
[27.86374474 406.57974243]
[21.44572067 392.93203735]
[18.62418365 378.11685181]
[19.57649994 363.06549072]
[24.24280357 348.72406006]
[32.32977295 335.99411011]
[43.32904434 325.67584229]
[56.54920578 318.41784668]
[71.15921783 314.67642212]
[71.15921783 299.67642212]
[71.15921783 284.67642212]
[71.15921783 269.67642212]
[71.15921783 254.67642212]
[71.15921783 239.67642212]
[71.15921783 224.67642212]
[71.15921783 209.67642212]
[71.15921783 194.67642212]
[71.15921783 179.67642212]
[58.57077789 171.51974487]
[44.88015366 177.64892578]
[31.18952751 183.77809143]
[27.08440971 198.86723328]
[14.21117878 207.74494934]
[-1.35181928 206.21946716]
[-12.25621319 195.01107788]
[-13.35328197 179.41201782]
[-4.12502289 166.78770447]
[11.07126236 163.09895325]
[25.06035233 170.08747864]
[38.75098038 163.95829773]
[52.44160461 157.82911682]
[52.96377182 147.19860840]
[57.10894012 137.91067505]
[64.00550079 131.09107971]
[72.47575378 127.43068695]
[81.22651672 127.12172699]
[86.06632996 112.92397308]
[81.84946442 97.01354980]
[91.52328491 84.36557770]
[91.21530914 69.36873627]
[90.90733337 54.37189865]
[90.59935760 39.37506104]
[90.13742828 24.38217545]
[89.52160645 9.39482307]
[88.90577698 -5.59253025]
[83.34384155 -19.52324677]
[73.46813202 -30.81352615]
[63.59243011 -42.10380554]
[53.71672058 -53.39408875]
[43.84101486 -64.68436432]
[31.00827408 -66.33495331]
[23.01599312 -75.99387360]
[23.74907494 -88.10687256]
[14.10726070 -99.59754181]
[-1.47956824 -104.69487000]
[-4.59333134 -120.79569244]
[7.96914434 -131.33686829]
[23.28466034 -125.47452545]
[25.59792709 -109.23935699]
[35.23974228 -97.74868774]
[52.01311874 -92.67933655]
[55.13129425 -74.56007385]
[65.00700378 -63.26979446]
[74.88270569 -51.97951508]
[84.75841522 -40.68923187]
[94.63411713 -29.39895248]
[102.12424469 -29.78378296]
[98.87034607 -44.42660141]
[95.61643982 -59.06941986]
[92.36254120 -73.71224213]
[83.23303223 -85.61399841]
[82.73432922 -100.60571289]
[91.05271912 -113.08787537]
[105.08122253 -118.39833832]
[119.58012390 -114.55361176]
[129.13400269 -102.98972321]
[130.17440796 -88.02584839]
[122.31272125 -75.25102997]
[120.57663727 -60.35183334]
[118.84056091 -45.45263672]
[117.10448456 -30.55344200]
[124.59460449 -30.93827248]
[133.26121521 -43.18122482]
[135.68815613 -52.05284882]
[142.23358154 -55.58410263]
[151.14971924 -67.64653778]
[150.20181274 -83.66156006]
[162.22770691 -94.28029633]
[178.00216675 -91.35695648]
[185.42437744 -77.13407898]
[178.80065918 -62.52223587]
[163.21215820 -58.73038483]
[154.29600525 -46.66795349]
[145.50416565 -34.51461792]
[136.83755493 -22.27166557]
[131.30143738 -14.48192406]
[124.54730988 -8.96090317]
[117.28017426 -5.82366228]
[110.18812561 -4.99185085]
[103.89312744 -6.20835590]
[104.50895691 8.77899742]
[105.12477875 23.76635170]
[108.56298828 30.36111450]
[105.59619141 39.06708527]
[105.90416718 54.06392288]
[106.21215057 69.06076050]
[106.52012634 84.05760193]
[116.16194153 95.54826355]
[130.87745667 98.45573425]
[145.59298706 101.36321259]
[160.30850220 104.27068329]
[169.39739990 102.86073303]
[175.29492188 107.39187622]
[189.94764709 110.60086823]
[204.60037231 113.80986786]
[221.36631775 111.29202271]
[228.42703247 126.70574188]
[215.57029724 137.75746155]
[201.39138794 128.46258545]
[186.73866272 125.25359344]
[172.08593750 122.04460144]
[157.40103149 118.98620605]
[142.68551636 116.07873535]
[127.96999359 113.17125702]
[113.25447083 110.26378632]
[100.26408386 117.76378632]
[95.42427063 131.96153259]
[106.92649078 156.76950073]
[86.15921783 179.67642212]
[86.15921783 194.67642212]
[86.15921783 209.67642212]
[86.15921783 224.67642212]
[86.15921783 239.67642212]
[86.15921783 254.67642212]
[86.15921783 269.67642212]
[86.15921783 284.67642212]
[86.15921783 299.67642212]
[86.15921783 314.67642212]
[100.76923370 318.41784668]
[113.98938751 325.67584229]
[124.98866272 335.99411011]
[133.07562256 348.72406006]
[137.74192810 363.06549072]
[138.69424438 378.11685181]
[135.87271118 392.93203735]
[129.45468140 406.57974243]
[119.84362030 418.20205688]
[107.64366150 427.06838989]
[93.62171936 432.62139893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 34]
[23 33]
[24 32]
[39 130]
[40 129]
[42 110]
[43 109]
[44 108]
[45 107]
[46 105]
[47 104]
[48 103]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[56 63]
[57 62]
[85 98]
[86 97]
[88 96]
[89 95]
[111 128]
[112 127]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
