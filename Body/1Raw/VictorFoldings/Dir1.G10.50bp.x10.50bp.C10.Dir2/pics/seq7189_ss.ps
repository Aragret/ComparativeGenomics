%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCACAACGGGGGGGGGGACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUxxxxxxxxxxCCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUCCCCCCCCCCUUACCACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.86856842 433.68490601]
[72.02262878 427.66888428]
[60.31396484 418.13946533]
[51.61144257 405.80377197]
[46.56084061 391.57727051]
[45.53694916 376.51559448]
[48.61574936 361.73641968]
[55.56876755 348.33648682]
[65.88005066 337.31015015]
[78.78443146 329.47564697]
[93.32431793 325.41433716]
[93.32431793 310.41433716]
[93.32431793 295.41433716]
[93.32431793 280.41433716]
[93.32431793 265.41433716]
[93.32431793 250.41433716]
[93.32431793 235.41433716]
[93.32431793 220.41433716]
[93.32431793 205.41433716]
[93.32431793 190.41433716]
[93.32431793 175.41433716]
[93.32431793 160.41433716]
[93.32431793 145.41433716]
[93.32431793 130.41433716]
[93.32431793 115.41433716]
[84.64979553 110.01713562]
[80.13908386 99.88609314]
[66.48284149 93.68068695]
[52.82659912 87.47528076]
[39.17035675 81.26986694]
[25.85056305 91.01470184]
[9.52936840 92.72179413]
[-5.34776449 86.02098083]
[-14.77634525 72.81932068]
[-16.27065086 56.75947189]
[-30.05303192 50.83950806]
[-43.83541489 44.91954422]
[-57.61779404 38.99958420]
[-71.40017700 33.07962036]
[-85.30273438 27.44766235]
[-99.31944275 22.10614967]
[-113.33615875 16.76463699]
[-127.35287476 11.42312527]
[-141.67085266 18.11423874]
[-156.49780273 12.64277172]
[-163.03717041 -1.74515092]
[-157.40924072 -16.51342964]
[-142.95298767 -22.90030670]
[-128.24504089 -17.11656189]
[-122.01136017 -2.59358788]
[-107.99464417 2.74792480]
[-93.97793579 8.08943748]
[-79.96121979 13.43095016]
[-75.26042938 12.30042171]
[-69.80293274 14.15704536]
[-65.48021698 19.29723740]
[-51.69783401 25.21720123]
[-37.91545105 31.13716507]
[-24.13306999 37.05712891]
[-10.35068798 42.97708893]
[0.05920595 34.08363724]
[13.35270882 30.53935623]
[26.93872452 33.09432220]
[38.14349747 41.30395126]
[44.73680496 53.60514450]
[45.37576294 67.61363220]
[59.03200531 73.81903839]
[72.68824768 80.02444458]
[86.34449005 86.22985077]
[77.33503723 74.23693848]
[65.40434265 65.14527130]
[58.35133743 51.90687943]
[57.46084595 36.93333435]
[62.89508820 22.95230865]
[73.66412354 12.51066971]
[87.80620575 7.51052427]
[102.74514008 8.86272812]
[115.75954437 16.32095528]
[124.47865295 28.52657318]
[127.31414795 43.25613403]
[123.74948120 57.82641983]
[114.43634796 69.58132172]
[108.66941071 83.42842865]
[120.36903381 74.04126740]
[132.06864929 64.65410614]
[143.76828003 55.26694489]
[137.83677673 41.38458252]
[135.87179565 26.41657066]
[138.01914978 11.47362995]
[144.11947632 -2.33537173]
[153.72010803 -13.98571587]
[166.10861206 -22.61286736]
[180.36566162 -27.57663727]
[195.43330383 -28.50868034]
[210.19342041 -25.33983040]
[223.55070496 -18.30523872]
[234.51396179 -7.92691994]
[242.26965332 5.02498770]
[246.24223328 19.58936691]
[246.13693237 34.68544006]
[241.96156311 49.19298553]
[234.02595520 62.03543854]
[222.91897583 72.25981140]
[209.46485901 79.10738373]
[194.66197205 82.07002258]
[179.60879517 80.92787170]
[165.42237854 75.76570129]
[153.15544128 66.96656799]
[141.45581055 76.35372925]
[129.75619507 85.74089050]
[118.05657196 95.12805176]
[130.03768921 86.10294342]
[144.51380920 82.17330170]
[159.41394043 83.90130615]
[172.60646057 91.03974915]
[182.20404053 102.56739807]
[186.83361816 116.83508301]
[185.83290100 131.80166626]
[179.34503174 145.32600403]
[168.29818726 155.47328186]
[154.27275085 160.79182434]
[139.27519226 160.52076721]
[125.45111084 154.69885254]
[114.77816772 144.15901184]
[108.78327179 130.40905762]
[108.32431793 115.41433716]
[108.32431793 130.41433716]
[108.32431793 145.41433716]
[108.32431793 160.41433716]
[108.32431793 175.41433716]
[108.32431793 190.41433716]
[108.32431793 205.41433716]
[108.32431793 220.41433716]
[108.32431793 235.41433716]
[108.32431793 250.41433716]
[108.32431793 265.41433716]
[108.32431793 280.41433716]
[108.32431793 295.41433716]
[108.32431793 310.41433716]
[108.32431793 325.41433716]
[122.86421204 329.47564697]
[135.76858521 337.31015015]
[146.07987976 348.33648682]
[153.03289795 361.73641968]
[156.11169434 376.51559448]
[155.08779907 391.57727051]
[150.03720093 405.80377197]
[141.33467102 418.13946533]
[129.62602234 427.66888428]
[115.78007507 433.68490601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 126]
[27 69]
[28 68]
[29 67]
[30 66]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 53]
[41 52]
[42 51]
[43 50]
[83 111]
[84 110]
[85 109]
[86 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
