%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCGCAAGGGGGGGGGGGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAxxxxxxxxxxAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUCCCCCCCCCCUACCACAAGG\
) } def
/len { sequence length } bind def

/coor [
[84.65146637 455.06521606]
[70.16177368 450.85675049]
[57.25554657 443.04061890]
[46.81274414 432.14978027]
[39.54537964 418.92678833]
[35.94895554 404.27319336]
[36.26867676 389.18807983]
[40.48274612 374.70001221]
[48.30384445 361.79681396]
[59.19871140 351.35821533]
[72.42452240 344.09594727]
[87.07951355 340.50518799]
[87.39157104 325.50842285]
[87.70362854 310.51168823]
[88.01567841 295.51492310]
[88.32773590 280.51815796]
[88.63979340 265.52142334]
[88.95185089 250.52465820]
[89.26390839 235.52790833]
[89.57596588 220.53115845]
[89.88801575 205.53440857]
[90.20007324 190.53764343]
[90.35610962 175.53845215]
[90.35610962 160.53845215]
[90.35610962 145.53845215]
[87.19053650 138.80609131]
[90.51539612 130.22721863]
[90.82745361 115.23046112]
[80.93611145 126.50704956]
[66.06314850 128.45509338]
[53.60129166 120.10631561]
[49.74481964 105.61053467]
[56.41062546 92.17301178]
[70.28540802 86.47298431]
[84.47103882 91.34240723]
[76.74694824 78.48400879]
[69.02286530 65.62560272]
[61.29878235 52.76720047]
[53.57469559 39.90879822]
[42.69586945 29.58159447]
[29.45328522 22.53645897]
[14.50762177 26.92563820]
[1.17811763 19.59222412]
[-2.91418862 5.31676912]
[-16.15677452 -1.72836566]
[-30.04547119 5.19144249]
[-45.34342194 2.59291625]
[-56.16825104 -8.52475739]
[-58.35759354 -23.88660622]
[-51.06960297 -37.58568573]
[-37.10665512 -44.35441971]
[-21.83779526 -41.59009552]
[-11.13420582 -30.35564613]
[-9.11163902 -14.97095108]
[4.13094616 -7.92581654]
[18.25634384 -12.50934315]
[31.78656960 -5.55322075]
[36.49842072 9.29387379]
[49.74100494 16.33900833]
[61.91284180 7.57280159]
[59.42772293 -7.21990538]
[56.94260406 -22.01261330]
[41.97671890 -24.22110748]
[28.42667961 -30.94803810]
[17.61998177 -41.53437042]
[10.61535358 -54.94296265]
[8.09903908 -69.86018372]
[10.31756115 -84.82458496]
[17.05356979 -98.37010956]
[27.64714241 -109.16971588]
[41.06042480 -116.16535950]
[55.97932434 -118.67167664]
[70.94223785 -116.44313049]
[84.48325348 -109.69804382]
[95.27574921 -99.09723663]
[102.26240540 -85.67926788]
[104.75872803 -70.75868988]
[102.52014923 -55.79727554]
[95.76599884 -42.26078796]
[85.15795898 -31.47539139]
[71.73531342 -24.49773216]
[74.22042847 -9.70502377]
[76.70555115 5.08768320]
[77.33303070 17.01225853]
[73.25629425 26.54969215]
[66.43309784 32.18471527]
[74.15718079 45.04311752]
[81.88127136 57.90151978]
[89.60535431 70.75991821]
[97.32943726 83.61832428]
[111.23199463 89.25028229]
[125.72759247 85.39311981]
[140.22319031 81.53596497]
[154.71878052 77.67880249]
[160.38671875 63.35467529]
[173.25196838 55.20981598]
[188.26869202 56.19064713]
[199.69165039 65.71189117]
[214.18724060 61.85473251]
[215.81723022 46.76474762]
[222.79176331 33.28437805]
[234.16757202 23.23672295]
[248.40618896 17.98065186]
[263.58193970 18.22700310]
[277.64245605 23.94246101]
[288.68615723 34.35405350]
[295.21945190 48.05370331]
[296.35879517 63.18864059]
[291.95010376 77.71199036]
[282.58956909 89.65959167]
[269.54318237 97.41562653]
[254.57533264 99.93115997]
[239.71029663 96.86597443]
[226.95846558 88.63462830]
[218.04440308 76.35032654]
[203.54881287 80.20748901]
[198.36849976 94.14672852]
[185.82514954 102.46106720]
[170.61332703 101.78728485]
[158.57594299 92.17440033]
[144.08035278 96.03155518]
[129.58474731 99.88871765]
[115.08915710 103.74588013]
[105.82420349 115.54251862]
[105.51214600 130.53927612]
[105.35610962 145.53845215]
[105.35610962 160.53845215]
[105.35610962 175.53845215]
[108.50177765 184.18464661]
[105.19683075 190.84970093]
[104.88477325 205.84645081]
[104.57271576 220.84321594]
[104.26065826 235.83996582]
[103.94860077 250.83671570]
[103.63655090 265.83346558]
[103.32449341 280.83023071]
[103.01243591 295.82696533]
[102.70037842 310.82373047]
[102.38832092 325.82049561]
[102.07626343 340.81723022]
[116.56920624 345.01452637]
[129.48146057 352.82067871]
[139.93267822 363.70343018]
[147.21025085 376.92083740]
[150.81799316 391.57165527]
[150.50991821 406.65698242]
[146.30703735 421.14831543]
[138.49591064 434.05755615]
[127.60910034 444.50454712]
[114.38890076 451.77703857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 128]
[24 127]
[25 126]
[27 125]
[28 124]
[35 90]
[36 89]
[37 88]
[38 87]
[39 86]
[40 59]
[41 58]
[44 55]
[45 54]
[60 83]
[61 82]
[62 81]
[91 123]
[92 122]
[93 121]
[94 120]
[98 116]
[99 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
