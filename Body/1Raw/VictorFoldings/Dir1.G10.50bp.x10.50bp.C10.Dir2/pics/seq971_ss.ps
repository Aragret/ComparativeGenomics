%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGCAAGCGGGGGGGGGGAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAACxxxxxxxxxxCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAACCCCCCCCCCACAUGCUAGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.62649536]
[71.19830322 367.61047363]
[59.48964310 358.08105469]
[50.78712082 345.74539185]
[45.73651886 331.51885986]
[44.71262741 316.45718384]
[47.79142761 301.67800903]
[54.74444962 288.27807617]
[65.05573273 277.25177002]
[77.96011353 269.41723633]
[92.50000000 265.35592651]
[92.50000000 250.35592651]
[92.50000000 235.35592651]
[92.50000000 220.35592651]
[92.50000000 205.35592651]
[92.50000000 190.35592651]
[92.50000000 175.35592651]
[92.50000000 160.35592651]
[92.50000000 145.35592651]
[92.50000000 130.35592651]
[81.10561371 126.41878510]
[71.65933990 118.21835327]
[65.74343872 106.68392181]
[64.50865936 93.32377625]
[68.46695709 80.02929688]
[77.37120056 68.80724335]
[90.20576477 61.47796631]
[76.68157196 54.98980331]
[63.15738297 48.50163651]
[49.63319397 42.01347351]
[36.10900497 35.52530670]
[25.77608109 53.71363068]
[-2.69201016 58.35923386]
[-17.26471329 54.80447006]
[-31.83741570 51.24971008]
[-46.41011810 47.69494629]
[-61.65079117 51.94141769]
[-72.18189240 41.40836334]
[-86.75459290 37.85359955]
[-98.50295258 47.99044800]
[-113.96863556 49.25226593]
[-127.20478058 41.15385818]
[-133.12181091 26.80922890]
[-129.44450378 11.73418140]
[-117.58687592 1.72537720]
[-102.10840607 0.63140714]
[-88.96089935 8.87292480]
[-83.19982910 23.28089905]
[-68.62712860 26.83566093]
[-54.42879486 22.33493042]
[-42.85535812 33.12224197]
[-28.28265381 36.67700577]
[-13.70995140 40.23176575]
[0.86275172 43.78652954]
[5.30892658 37.74653625]
[-8.92770481 33.02230835]
[-8.83403301 18.02259827]
[5.46049023 13.47654533]
[14.20127583 25.66654778]
[18.64745140 19.62655258]
[4.05078363 12.15197372]
[3.49597406 -4.23778629]
[17.55376244 -12.68234634]
[31.76270294 -4.49466801]
[31.50585365 11.90246773]
[42.59716797 22.00111771]
[56.12135696 28.48928261]
[69.64554596 34.97744751]
[83.16973877 41.46561432]
[96.69393158 47.95377731]
[87.93592834 35.77603531]
[75.36442566 27.59329414]
[67.85186005 14.61017513]
[67.02217102 -0.36686146]
[73.05470276 -14.10034370]
[84.64545441 -23.62160873]
[99.28894043 -26.87251854]
[113.81978607 -23.15035057]
[125.09696960 -13.25969315]
[130.68278503 0.66146255]
[129.36981201 15.60388756]
[121.44157410 28.33785439]
[118.65917969 43.07753754]
[128.16754150 31.47619820]
[137.67590332 19.87485695]
[140.43949890 4.29688787]
[154.49139404 -0.64207214]
[163.99975586 -12.24341297]
[160.92887878 -27.57650757]
[168.47770691 -41.27137375]
[183.08187866 -46.86171722]
[197.84577942 -41.70794296]
[205.79833984 -28.24351120]
[203.18458557 -12.82591343]
[191.23867798 -2.73486614]
[175.60108948 -2.73505497]
[166.09274292 8.86628628]
[164.00924683 23.61445045]
[149.27723694 29.38321495]
[139.76887512 40.98455811]
[130.26052856 52.58589935]
[136.18048096 66.36827850]
[151.14073181 67.45958710]
[166.10098267 68.55090332]
[181.06123352 69.64221191]
[190.18132019 55.88711548]
[204.90098572 48.63265991]
[221.17813110 49.76584625]
[234.59564209 58.88464737]
[241.55995178 73.43283844]
[256.53967285 74.21268463]
[271.51937866 74.99253082]
[285.87478638 67.06443787]
[299.77676392 75.76309204]
[298.92419434 92.14006042]
[284.19409180 99.34812927]
[270.73953247 89.97224426]
[255.75982666 89.19239807]
[240.78012085 88.41255951]
[234.09492493 100.36109924]
[222.85186768 108.29034424]
[209.22187805 110.59919739]
[195.86717224 106.77862549]
[185.42132568 97.52252960]
[179.96992493 84.60246277]
[165.00967407 83.51114655]
[150.04942322 82.41983795]
[135.08917236 81.32852936]
[136.66954041 104.30459595]
[125.57167053 122.55127716]
[107.50000000 130.35592651]
[107.50000000 145.35592651]
[107.50000000 160.35592651]
[107.50000000 175.35592651]
[107.50000000 190.35592651]
[107.50000000 205.35592651]
[107.50000000 220.35592651]
[107.50000000 235.35592651]
[107.50000000 250.35592651]
[107.50000000 265.35592651]
[122.03988647 269.41723633]
[134.94427490 277.25177002]
[145.25555420 288.27807617]
[152.20857239 301.67800903]
[155.28736877 316.45718384]
[154.26348877 331.51885986]
[149.21287537 345.74539185]
[140.51036072 358.08105469]
[128.80169678 367.61047363]
[114.95575714 373.62649536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[33 54]
[34 53]
[35 52]
[36 51]
[38 49]
[39 48]
[60 65]
[83 101]
[84 100]
[85 99]
[87 97]
[88 96]
[102 128]
[103 127]
[104 126]
[105 125]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
