%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUAGAACGGGGGGGGGGCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUxxxxxxxxxxUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUCCCCCCCCCCUUCCUAGGAC\
) } def
/len { sequence length } bind def

/coor [
[84.18656921 384.15289307]
[70.96636963 376.88043213]
[60.07956696 366.43341064]
[52.26843643 353.52416992]
[48.06555557 339.03283691]
[47.75748444 323.94750977]
[51.36522293 309.29669189]
[58.64279938 296.07928467]
[69.09400177 285.19653320]
[82.00626373 277.39038086]
[96.49920654 273.19308472]
[96.18714905 258.19635010]
[95.87509155 243.19958496]
[95.56303406 228.20283508]
[95.25097656 213.20608521]
[94.93891907 198.20933533]
[94.62686920 183.21257019]
[94.31481171 168.21582031]
[94.00275421 153.21907043]
[81.06469727 145.62916565]
[67.82211304 152.67430115]
[54.57952499 159.71943665]
[41.33694077 166.76457214]
[28.09435463 173.80970764]
[16.95076942 186.58689880]
[1.58805609 179.41589355]
[4.22599745 162.66842651]
[21.04922104 160.56710815]
[34.29180527 153.52197266]
[47.53439331 146.47685242]
[60.77697754 139.43171692]
[74.01956177 132.38658142]
[63.77051163 106.41221619]
[72.56935120 83.39398193]
[58.34257126 78.64016724]
[44.11579132 73.88635254]
[29.88901329 69.13253784]
[11.97158623 73.24905396]
[0.82026124 59.73432541]
[-13.50233650 55.27751160]
[-27.82493401 50.82069397]
[-40.88321304 59.42390823]
[-56.41043091 57.56931305]
[-67.07511139 46.13258743]
[-67.84171295 30.51380539]
[-58.34827042 18.08767891]
[-43.07730103 14.72144318]
[-29.23928833 22.00453377]
[-23.36811829 36.49809647]
[-9.04552078 40.95491409]
[5.27707672 45.41172791]
[16.16935730 40.05770493]
[28.16661835 43.70252228]
[34.64282990 54.90576172]
[48.86960602 59.65957642]
[63.09638596 64.41339111]
[77.32316589 69.16720581]
[90.91411591 62.82007599]
[96.40114594 48.85968399]
[101.88817596 34.89929581]
[88.70736694 27.69725800]
[76.53316498 18.89997673]
[65.55759430 8.64619541]
[55.95374298 -2.90236783]
[47.87308502 -15.56357574]
[41.44306183 -29.13774300]
[36.76508331 -43.41078568]
[33.91292572 -58.15759659]
[32.93157578 -73.14559937]
[33.83650970 -88.13840485]
[36.61345673 -102.89956665]
[41.21861649 -117.19627380]
[47.57936096 -130.80303955]
[55.59537125 -143.50527954]
[65.14022827 -155.10264587]
[76.06338501 -165.41224670]
[88.19258118 -174.27146912]
[101.33650970 -181.54060364]
[115.28787994 -187.10499573]
[129.82666016 -190.87690735]
[144.72354126 -192.79681396]
[159.74359131 -192.83447266]
[174.64991760 -190.98925781]
[189.20741272 -187.29029846]
[203.18650818 -181.79591370]
[216.36671448 -174.59277344]
[228.54017639 -165.79446411]
[239.51487732 -155.53976440]
[249.11776733 -143.99038696]
[257.19735718 -131.32849121]
[263.62622070 -117.75379181]
[268.30300903 -103.48035431]
[271.15393066 -88.73329926]
[272.13400269 -73.74521637]
[271.22781372 -58.75248337]
[268.44964600 -43.99155807]
[263.84326172 -29.69524193]
[257.48138428 -16.08900833]
[249.46429443 -3.38744783]
[239.91847229 8.20911884]
[228.99444580 18.51779747]
[216.86450195 27.37600327]
[203.71995544 34.64403152]
[189.76811218 40.20725250]
[175.22901917 43.97792816]
[160.33198547 45.89659119]
[145.31193542 45.93297577]
[130.40576172 44.08651733]
[115.84857178 40.38632584]
[110.36153412 54.34671783]
[104.87450409 68.30710602]
[132.97747803 83.68502808]
[136.44995117 119.88151550]
[150.94554138 123.73867798]
[165.44114685 127.59584045]
[179.93673706 131.45300293]
[194.43232727 135.31015015]
[210.11573792 130.51820374]
[221.92118835 141.90080261]
[217.70425415 157.74848938]
[201.80294800 161.75854492]
[190.57518005 149.80575562]
[176.07957458 145.94859314]
[161.58398438 142.09143066]
[147.08837891 138.23426819]
[132.59278870 134.37712097]
[126.69446564 139.00958252]
[135.95922852 150.80636597]
[124.16230774 160.07095337]
[114.89782715 148.27453613]
[108.99950409 152.90701294]
[109.31156158 167.90376282]
[109.62361908 182.90052795]
[109.93567657 197.89727783]
[110.24773407 212.89402771]
[110.55979156 227.89077759]
[110.87184143 242.88754272]
[111.18389893 257.88427734]
[111.49595642 272.88104248]
[126.15094757 276.47180176]
[139.37675476 283.73406982]
[150.27162170 294.17266846]
[158.09272766 307.07586670]
[162.30679321 321.56393433]
[162.62651062 336.64904785]
[159.03009033 351.30264282]
[151.76272583 364.52563477]
[141.31993103 375.41647339]
[128.41369629 383.23260498]
[113.92400360 387.44107056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[34 57]
[35 56]
[36 55]
[37 54]
[39 51]
[40 50]
[41 49]
[58 111]
[59 110]
[60 109]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
