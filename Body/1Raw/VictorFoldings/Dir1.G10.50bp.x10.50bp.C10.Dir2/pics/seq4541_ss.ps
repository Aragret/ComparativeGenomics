%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGAGAAUCGGGGGGGGGGGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAxxxxxxxxxxGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAACCCCCCCCCCUAUGAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[67.06605530 378.65008545]
[52.57636642 374.44161987]
[39.67013931 366.62548828]
[29.22733688 355.73464966]
[21.95997238 342.51165771]
[18.36354637 327.85803223]
[18.68326759 312.77294922]
[22.89733887 298.28488159]
[30.71843529 285.38168335]
[41.61330414 274.94308472]
[54.83911133 267.68081665]
[69.49410248 264.09005737]
[69.80615997 249.09329224]
[70.11821747 234.09654236]
[70.43027496 219.09979248]
[70.74233246 204.10304260]
[71.05438232 189.10627747]
[71.36643982 174.10952759]
[71.67849731 159.11277771]
[71.99055481 144.11602783]
[72.30261230 129.11926270]
[67.99502563 114.75108337]
[59.48393631 102.39951324]
[50.97284698 90.04794312]
[42.46175766 77.69636536]
[45.19907379 92.44448853]
[38.33588028 105.78227997]
[24.74431229 112.12808228]
[10.11221886 108.82629395]
[0.56289423 97.25864410]
[0.09257561 82.26602173]
[8.89808369 70.12258911]
[23.29571915 65.91023254]
[8.43267250 63.88789368]
[-6.43037415 61.86555862]
[-21.29342079 59.84322357]
[-36.15646744 57.82089233]
[-51.01951599 55.79855728]
[-64.60851288 64.32608032]
[-79.69992065 58.88284302]
[-84.71691132 43.64442825]
[-75.81086731 30.30043983]
[-59.81375504 29.08724785]
[-48.99718094 40.93550873]
[-34.13413239 42.95784378]
[-19.27108574 44.98017883]
[-4.40803957 47.00251389]
[10.45500755 49.02484894]
[25.31805420 51.04718018]
[30.81088638 45.94044113]
[41.79655075 35.72696304]
[47.28938293 30.62022209]
[46.35375595 15.64943027]
[45.41812515 0.67863911]
[44.48249817 -14.29215240]
[37.48701477 -1.02327204]
[27.66973305 10.31784725]
[15.54022884 19.14253807]
[1.72809374 24.99274445]
[-13.04974365 27.56480980]
[-28.02622795 26.72522926]
[-42.42399597 22.51758194]
[-55.49571609 15.16026592]
[-66.56289673 5.03517199]
[-75.05108643 -7.33215094]
[-80.51969147 -21.29976845]
[-82.68487549 -36.14267731]
[-81.43423462 -51.09045029]
[-76.83269501 -65.36721039]
[-69.11910248 -78.23191071]
[-58.69383621 -89.01679993]
[-46.09802628 -97.16207886]
[-31.98546982 -102.24495697]
[-17.08868599 -104.00161743]
[-2.18090558 -102.34086609]
[11.96407127 -97.34891510]
[24.61204147 -89.28486633]
[35.10649872 -78.56729126]
[42.90272141 -65.75250244]
[47.59604645 -51.50564957]
[48.94280624 -36.56423950]
[55.57130432 -50.02020645]
[62.19980240 -63.47617340]
[56.87653732 -78.35697937]
[63.71017075 -92.60749054]
[78.64642334 -97.77312469]
[92.82389069 -90.78921509]
[97.83132172 -75.79917908]
[90.69790649 -61.69634628]
[75.65576935 -56.84767151]
[69.02726746 -43.39170837]
[62.39877319 -29.93574333]
[59.45328903 -15.22778130]
[60.38891983 -0.25698936]
[61.32454681 14.71380234]
[62.26017380 29.68459320]
[54.81332779 69.18527985]
[63.32441711 81.53684998]
[71.83551025 93.88842010]
[80.34659576 106.23999786]
[82.07797241 78.86000061]
[115.82115173 68.99427795]
[130.52911377 66.04879761]
[145.23707581 63.10331345]
[159.94503784 60.15782928]
[168.49865723 46.86832047]
[183.96156311 43.60123444]
[197.15989685 52.29488373]
[200.26332092 67.79147339]
[191.43061829 80.89715576]
[175.90208435 83.83656311]
[162.89051819 74.86579132]
[148.18255615 77.81127167]
[133.47459412 80.75675964]
[118.76663208 83.70223999]
[117.51976013 98.65032959]
[131.53646851 103.99183655]
[145.55317688 109.33335114]
[159.56990051 114.67486572]
[173.58660889 120.01637268]
[190.54055786 120.00671387]
[195.24314880 136.29542542]
[180.89282227 145.32341003]
[168.24510193 134.03309631]
[154.22837830 128.69157410]
[140.21166992 123.35006714]
[126.19496155 118.00855255]
[112.17824554 112.66703796]
[105.95852661 116.85810852]
[93.51908112 125.24025726]
[87.29936218 129.43132019]
[86.98730469 144.42808533]
[86.67525482 159.42483521]
[86.36319733 174.42158508]
[86.05113983 189.41833496]
[85.73908234 204.41510010]
[85.42702484 219.41184998]
[85.11496735 234.40859985]
[84.80291748 249.40534973]
[84.49085999 264.40209961]
[98.98379517 268.59939575]
[111.89605713 276.40554810]
[122.34726715 287.28829956]
[129.62483215 300.50570679]
[133.23257446 315.15652466]
[132.92449951 330.24185181]
[128.72161865 344.73318481]
[120.91049194 357.64242554]
[110.02368927 368.08941650]
[96.80349731 375.36190796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 100]
[23 99]
[24 98]
[25 97]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[52 96]
[53 95]
[54 94]
[55 93]
[81 92]
[82 91]
[83 90]
[102 115]
[103 114]
[104 113]
[105 112]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
