%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCACUCGGGGGGGGGGUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUxxxxxxxxxxAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUCCCCCCCCCCAACCCUACUC\
) } def
/len { sequence length } bind def

/coor [
[152.06596375 769.66082764]
[138.22001648 763.64477539]
[126.51136017 754.11535645]
[117.80883026 741.77972412]
[112.75823212 727.55316162]
[111.73433685 712.49151611]
[114.81314087 697.71234131]
[121.76615906 684.31237793]
[132.07743835 673.28607178]
[144.98182678 665.45153809]
[159.52171326 661.39025879]
[159.52171326 646.39025879]
[159.52171326 631.39025879]
[159.52171326 616.39025879]
[159.52171326 601.39025879]
[159.52171326 586.39025879]
[159.52171326 571.39025879]
[159.52171326 556.39025879]
[159.52171326 541.39025879]
[159.52171326 526.39025879]
[158.27484131 511.44216919]
[155.78971863 496.64944458]
[141.76551819 494.49246216]
[129.07807922 488.09161377]
[118.97908783 478.06350708]
[112.46940613 465.38323975]
[110.19999695 451.28970337]
[112.40679932 437.16445923]
[118.88629913 424.39642334]
[129.01419067 414.24511719]
[141.80555725 407.71664429]
[139.62872314 392.87542725]
[137.45187378 378.03421021]
[122.10865784 377.32937622]
[107.18962097 373.65838623]
[93.26280212 367.15917969]
[80.85879517 358.07736206]
[70.45058441 346.75701904]
[62.43545914 333.62759399]
[57.11989975 319.18768311]
[54.70782089 303.98599243]
[55.29276657 288.60064697]
[58.85427856 273.61697388]
[65.25861359 259.60549927]
[74.26375580 247.09999084]
[85.52856445 236.57731628]
[98.62570190 228.43908691]
[113.05783844 222.99645996]
[110.57272339 208.20375061]
[108.08760071 193.41104126]
[105.60248566 178.61833191]
[103.11736298 163.82563782]
[100.63224792 149.03292847]
[98.14712524 134.24021912]
[95.66201019 119.44750977]
[78.02680206 111.36457062]
[72.74408722 88.58225250]
[63.72655869 76.59542084]
[49.37280655 67.57289124]
[54.06921768 51.28240204]
[71.02316284 51.28562164]
[75.71339417 67.57789612]
[84.73091888 79.56472778]
[98.85572815 74.51596832]
[98.23175049 59.52895355]
[97.60777283 44.54193878]
[96.98379517 29.55492210]
[82.69813538 24.35988617]
[71.49134064 14.08972740]
[65.07235718 0.31057122]
[64.42004395 -14.87636185]
[69.63386536 -29.15517426]
[79.91876221 -40.34844971]
[93.70634460 -46.74929810]
[108.89412689 -47.38163376]
[123.16606903 -42.14903259]
[134.34580994 -31.84942436]
[140.72851562 -18.05342865]
[141.34086609 -2.86483240]
[136.08949280 11.40021324]
[125.77519226 22.56639290]
[111.97080994 28.93094444]
[112.59478760 43.91796112]
[113.21876526 58.90497589]
[113.84274292 73.89199066]
[124.43672943 90.16304016]
[121.97496033 107.23039246]
[110.45471954 116.96238708]
[112.93983459 131.75509644]
[115.42494965 146.54780579]
[117.91007233 161.34051514]
[120.39518738 176.13322449]
[122.88031006 190.92593384]
[125.36542511 205.71862793]
[127.85054779 220.51133728]
[142.51466370 220.84745789]
[156.86042786 223.88519287]
[170.39454651 229.51852417]
[182.65200806 237.55226135]
[193.21191406 247.70869446]
[201.71202087 259.63732910]
[207.86112976 272.92684937]
[211.44906616 287.11941528]
[212.35385132 301.72631836]
[210.54589844 316.24499512]
[206.08892822 330.17605591]
[199.13772583 343.04067993]
[189.93276978 354.39703369]
[178.79197693 363.85531616]
[166.09959412 371.09130859]
[152.29309082 375.85739136]
[154.46992493 390.69857788]
[156.64675903 405.53979492]
[172.23902893 408.66433716]
[185.80197144 416.91525269]
[195.71200562 429.28344727]
[200.79022217 444.26828003]
[200.44247437 460.05960083]
[194.72895813 474.75643921]
[184.35462952 486.59585571]
[170.58242798 494.16433716]
[173.06755066 508.95706177]
[181.38696289 496.47558594]
[195.39741516 491.11764526]
[209.92231750 494.86294556]
[219.59501648 506.32763672]
[220.84161377 521.27575684]
[213.20155334 534.18426514]
[199.49766541 540.28369141]
[184.79325867 537.32049561]
[174.52171326 526.39025879]
[174.52171326 541.39025879]
[174.52171326 556.39025879]
[174.52171326 571.39025879]
[174.52171326 586.39025879]
[174.52171326 601.39025879]
[174.52171326 616.39025879]
[174.52171326 631.39025879]
[174.52171326 646.39025879]
[174.52171326 661.39025879]
[189.06159973 665.45153809]
[201.96598816 673.28607178]
[212.27726746 684.31237793]
[219.23028564 697.71234131]
[222.30908203 712.49151611]
[221.28520203 727.55316162]
[216.23458862 741.77972412]
[207.53207397 754.11535645]
[195.82341003 763.64477539]
[181.97746277 769.66082764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 122]
[22 121]
[31 113]
[32 112]
[33 111]
[48 95]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[57 63]
[58 62]
[64 85]
[65 84]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
