%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACUUUGCAGGGGGGGGGGAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAxxxxxxxxxxUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCCCCCCCCCCCUAACUUAGCA\
) } def
/len { sequence length } bind def

/coor [
[58.41253281 362.53152466]
[45.85430908 354.18038940]
[35.76808929 342.96792603]
[28.78789330 329.59902954]
[25.35251045 314.91403198]
[25.67788696 299.83605957]
[29.74357224 285.31295776]
[37.29399109 272.25759888]
[47.85451889 261.49072266]
[60.76131439 253.68908691]
[75.20304108 249.34312439]
[74.57906342 234.35610962]
[73.95508575 219.36909485]
[73.33110809 204.38208008]
[72.70713043 189.39506531]
[72.08315277 174.40805054]
[71.45917511 159.42103577]
[70.83520508 144.43402100]
[70.21122742 129.44700623]
[87.31242371 91.46365356]
[81.53615570 77.62042999]
[75.75988007 63.77721405]
[69.98360443 49.93399811]
[63.63647842 36.34304810]
[56.72948074 23.02789116]
[49.82247925 9.71273613]
[42.91548157 -3.60241985]
[27.69628906 -3.23155761]
[13.88159752 -9.47986031]
[4.18939590 -21.05921364]
[0.50100261 -35.63853836]
[3.49606395 -50.31297302]
[12.52804565 -62.18263245]
[5.62104702 -75.49778748]
[-1.28595161 -88.81294250]
[-8.19295025 -102.12809753]
[-22.20121956 -96.72147369]
[-36.71924973 -92.88872528]
[-51.57080460 -90.67636108]
[-66.57559967 -90.11125183]
[-81.55148315 -91.20024872]
[-96.31668091 -93.93013763]
[-110.69193268 -98.26778412]
[-124.50276184 -104.16052246]
[-137.58149719 -111.53683472]
[-149.76937866 -120.30715942]
[-160.91845703 -130.36505127]
[-170.89340210 -141.58840942]
[-179.57312012 -153.84098816]
[-186.85224915 -166.97406006]
[-192.64242554 -180.82818604]
[-196.87335205 -195.23521423]
[-199.49368286 -210.02024841]
[-200.47161865 -225.00379944]
[-199.79525757 -240.00398254]
[-197.47283936 -254.83872986]
[-193.53253174 -269.32794189]
[-188.02218628 -283.29574585]
[-181.00869751 -296.57257080]
[-172.57717896 -308.99725342]
[-162.83000183 -320.41894531]
[-151.88546753 -330.69906616]
[-139.87644958 -339.71276855]
[-126.94873047 -347.35064697]
[-113.25922394 -353.51995850]
[-98.97412109 -358.14587402]
[-84.26682281 -361.17218018]
[-69.31587219 -362.56219482]
[-54.30274582 -362.29901123]
[-39.40969467 -360.38580322]
[-24.81751251 -356.84582520]
[-10.70333004 -351.72207642]
[2.76151872 -345.07669067]
[15.41358280 -336.99038696]
[27.09927750 -327.56127930]
[37.67675018 -316.90386963]
[47.01760101 -305.14752197]
[55.00843430 -292.43493652]
[61.55225754 -278.92044067]
[66.56962585 -264.76809692]
[69.99964142 -250.14967346]
[71.80065918 -235.24264526]
[71.95082855 -220.22796631]
[70.44831085 -205.28790283]
[67.31135559 -190.60380554]
[62.57804108 -176.35392761]
[56.30582047 -162.71125793]
[48.57083893 -149.84140015]
[39.46698761 -137.90058899]
[29.10478401 -127.03376007]
[17.61001015 -117.37284088]
[5.12220526 -109.03509521]
[12.02920437 -95.71994019]
[18.93620300 -82.40478516]
[25.84320068 -69.08963013]
[40.74843216 -69.63697052]
[54.46963120 -63.63380051]
[64.26380920 -52.22173691]
[68.14768982 -37.62942123]
[65.29917145 -22.73738098]
[56.23063660 -10.50941849]
[63.13763428 2.80573726]
[70.04463196 16.12089348]
[76.95162964 29.43604851]
[79.65069580 30.39645386]
[82.11849213 32.51870728]
[83.89729309 35.71523285]
[84.57154846 39.72975922]
[83.82682800 44.15772629]
[89.60309601 58.00094223]
[95.37937164 71.84416199]
[101.15563965 85.68737793]
[112.45464325 95.55310059]
[126.95024109 99.41026306]
[142.27595520 95.48177338]
[152.58564758 106.23163605]
[167.08125305 110.08879089]
[182.76466370 105.29684448]
[194.57011414 116.67943573]
[190.35316467 132.52713013]
[174.45185852 136.53718567]
[163.22409058 124.58438873]
[148.72850037 120.72723389]
[134.43960571 124.93161011]
[123.09308624 113.90586090]
[108.59748840 110.04869843]
[102.74767303 114.74227905]
[105.02741241 129.56802368]
[91.04804993 124.12944031]
[85.19824219 128.82302856]
[85.82221985 143.81004333]
[86.44619751 158.79705811]
[87.07017517 173.78407288]
[87.69415283 188.77108765]
[88.31813049 203.75810242]
[88.94210815 218.74511719]
[89.56607819 233.73213196]
[90.19005585 248.71914673]
[104.94306183 251.84959412]
[118.45369720 258.55136108]
[129.87268066 268.40313721]
[138.48219299 280.78567505]
[143.74104309 294.92056274]
[145.31864929 309.91931152]
[143.11584473 324.83901978]
[137.27108765 338.74191284]
[128.15180969 350.75396729]
[116.33124542 360.12011719]
[102.55242920 366.25161743]
[87.68153381 368.76300049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 112]
[21 111]
[22 110]
[23 109]
[24 104]
[25 103]
[26 102]
[27 101]
[33 95]
[34 94]
[35 93]
[36 92]
[113 126]
[114 125]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
