%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCAUAAUCGGGGGGGGGGGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUxxxxxxxxxxCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCCCCCCCCCCCGCAUCAUAAUC\
) } def
/len { sequence length } bind def

/coor [
[89.75688934 390.64636230]
[75.59628296 385.49136353]
[63.00654221 377.20913696]
[52.66660309 366.24636841]
[45.13409424 353.19424438]
[40.81522751 338.75665283]
[39.94291687 323.71218872]
[42.56420898 308.87219238]
[48.53773499 295.03695679]
[57.54135513 282.95260620]
[69.08950806 273.27081299]
[82.55942535 266.51373291]
[97.22468567 263.04577637]
[97.22468567 248.04577637]
[97.22468567 233.04577637]
[97.22468567 218.04577637]
[97.22468567 203.04577637]
[97.22468567 188.04577637]
[97.22468567 173.04577637]
[97.22468567 158.04577637]
[97.22468567 143.04577637]
[97.22468567 128.04577637]
[77.15232086 108.36531067]
[85.30081940 85.74065399]
[79.10733032 72.07901001]
[72.91383362 58.41735840]
[66.30792236 44.95029068]
[59.29569626 31.69025040]
[52.28346634 18.43021011]
[40.17670059 13.87159824]
[34.62128830 2.63494468]
[38.11930466 -8.98323631]
[31.37725639 -22.38266945]
[24.63520813 -35.78210068]
[17.89315987 -49.18153381]
[5.41056919 -57.49927902]
[-9.55170345 -58.56247711]
[-24.51397705 -59.62567139]
[-39.01684189 -51.97067642]
[-52.75172424 -60.93086243]
[-51.58935928 -77.28876495]
[-36.72548294 -84.21677399]
[-23.45078087 -74.58794403]
[-8.48850822 -73.52474976]
[6.47376490 -72.46155548]
[11.52978516 -78.00110626]
[-3.12100029 -81.21894836]
[-7.65956116 -95.51584625]
[2.45272136 -106.59473419]
[17.10343742 -103.37657928]
[21.64182663 -89.08021545]
[26.69784737 -94.61976624]
[24.27628899 -109.42301178]
[21.85473251 -124.22625732]
[19.43317604 -139.02951050]
[13.93958664 -152.98731995]
[5.62183905 -165.46990967]
[-2.69590878 -177.95249939]
[-11.01365662 -190.43508911]
[-19.33140373 -202.91767883]
[-34.71660614 -207.46466064]
[-40.62041092 -222.38192749]
[-32.51392365 -236.22621155]
[-16.61574554 -238.37738037]
[-5.12160110 -227.18522644]
[-6.84881306 -211.23542786]
[1.46893454 -198.75283813]
[9.78668213 -186.27024841]
[18.10442924 -173.78765869]
[26.42217636 -161.30506897]
[25.67978477 -176.28668213]
[28.93411636 -190.92939758]
[35.95246887 -204.18620300]
[46.23299789 -215.10914612]
[59.04058838 -222.91719055]
[73.45943451 -227.05203247]
[88.45851898 -227.21798706]
[102.96532440 -223.40319824]
[115.94254303 -215.88044739]
[126.46223450 -205.18763733]
[133.77220154 -192.08937073]
[137.34971619 -177.52224731]
[136.93899536 -162.52786255]
[132.56938171 -148.17842102]
[124.55335999 -135.49996948]
[113.46408081 -125.39907837]
[100.09450531 -118.59801483]
[85.40062714 -115.58309174]
[70.43312073 -116.56988525]
[56.26224518 -121.48784637]
[43.90129089 -129.98530579]
[34.23641968 -141.45106506]
[36.65797806 -126.64781952]
[39.07953644 -111.84457397]
[41.50109100 -97.04132843]
[45.26351166 -70.29480743]
[31.29259300 -55.92358017]
[38.03464127 -42.52415085]
[44.77668762 -29.12471771]
[51.51873779 -15.72528458]
[66.67790222 -6.93394613]
[65.54350281 11.41798210]
[72.55573273 24.67802048]
[79.56796265 37.93806076]
[82.87278748 39.31850433]
[85.65447998 42.40081024]
[87.10557556 46.91239929]
[86.57548523 52.22386932]
[92.76897430 65.88552094]
[98.96246338 79.54716492]
[111.87660217 80.24877930]
[123.20396423 89.15111542]
[127.84610748 104.34302521]
[142.36726379 108.10281372]
[156.88842773 111.86260223]
[166.01202393 99.70413971]
[179.09652710 91.96693420]
[194.14663696 89.83085632]
[208.86730957 93.62165070]
[221.01376343 102.76123810]
[228.73374939 115.85590363]
[230.85002136 130.90881348]
[227.03987122 145.62448120]
[217.88430786 157.75891113]
[204.77949524 165.46165466]
[189.72383118 167.55813599]
[175.01316833 163.72862244]
[162.89080811 154.55711365]
[155.20530701 141.44216919]
[153.12863159 126.38375854]
[138.60748291 122.62397003]
[124.08632660 118.86418152]
[112.22468567 128.04577637]
[112.22468567 143.04577637]
[112.22468567 158.04577637]
[112.22468567 173.04577637]
[112.22468567 188.04577637]
[112.22468567 203.04577637]
[112.22468567 218.04577637]
[112.22468567 233.04577637]
[112.22468567 248.04577637]
[112.22468567 263.04577637]
[126.88994598 266.51373291]
[140.35986328 273.27081299]
[151.90802002 282.95260620]
[160.91163635 295.03695679]
[166.88516235 308.87219238]
[169.50645447 323.71218872]
[168.63414001 338.75665283]
[164.31527710 353.19424438]
[156.78277588 366.24636841]
[146.44282532 377.20913696]
[133.85308838 385.49136353]
[119.69248199 390.64636230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 110]
[25 109]
[26 108]
[27 104]
[28 103]
[29 102]
[32 100]
[33 99]
[34 98]
[35 97]
[36 45]
[37 44]
[38 43]
[52 95]
[53 94]
[54 93]
[55 92]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[113 132]
[114 131]
[115 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
