%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCAAACGGGGGGGGGGUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACxxxxxxxxxxGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUCCCCCCCCCCAAACUCAGAC\
) } def
/len { sequence length } bind def

/coor [
[139.06793213 448.69625854]
[125.22199249 442.68023682]
[113.51332855 433.15081787]
[104.81080627 420.81515503]
[99.76020050 406.58862305]
[98.73631287 391.52694702]
[101.81510925 376.74777222]
[108.76813507 363.34783936]
[119.07941437 352.32150269]
[131.98379517 344.48699951]
[146.52368164 340.42568970]
[146.52368164 325.42568970]
[146.52368164 310.42568970]
[146.52368164 295.42568970]
[146.52368164 280.42568970]
[146.52368164 265.42568970]
[146.52368164 250.42568970]
[146.52368164 235.42568970]
[146.52368164 220.42568970]
[146.52368164 205.42568970]
[143.96063232 183.95814514]
[153.83341980 170.12464905]
[143.85069275 158.92887878]
[133.86798096 147.73310852]
[123.88524628 136.53733826]
[113.90251923 125.34157562]
[103.91979218 114.14581299]
[89.84827423 108.95040131]
[74.98522949 110.97273254]
[60.14402390 113.14956665]
[45.32626343 115.48067474]
[30.50850677 117.81177521]
[15.80145359 126.24617004]
[3.62536526 114.44874573]
[11.59106350 99.48265076]
[28.17740250 102.99401855]
[42.99515915 100.66291809]
[57.81291962 98.33181000]
[63.97153854 94.15843964]
[72.96289062 96.10968781]
[87.82594299 94.08734894]
[91.75465393 87.69866943]
[77.17459106 84.17420959]
[76.02108765 69.21862793]
[89.88825226 63.50008011]
[99.61207581 74.92131805]
[103.54079437 68.53263855]
[98.63924408 54.35607910]
[90.38695526 41.83011627]
[79.29563904 31.73146629]
[68.20432281 21.63281631]
[57.11300659 11.53416729]
[41.33974457 12.52398968]
[29.54187965 2.00800490]
[28.71887589 -13.77484035]
[39.35900879 -25.46086502]
[55.14967346 -26.11695480]
[66.72254944 -15.35386658]
[67.21165466 0.44285214]
[78.30297089 10.54150200]
[89.39428711 20.64015198]
[100.48560333 30.73880005]
[96.24913025 16.34948921]
[95.51123047 1.36764932]
[98.31320953 -13.36832523]
[104.49825287 -27.03380013]
[113.72024536 -38.86405182]
[125.46312714 -48.19704437]
[139.06974792 -54.51050949]
[153.77868652 -57.45112991]
[168.76679993 -56.85435867]
[183.19537354 -52.75358200]
[196.25695801 -45.37828827]
[207.22062683 -35.14119720]
[215.47283936 -22.61518669]
[220.55180359 -8.50121784]
[222.17330933 6.41088343]
[220.24658203 21.28662682]
[214.87947083 35.29356003]
[206.37231445 47.64784241]
[195.20118713 57.65812302]
[181.99121094 64.76422882]
[167.48164368 68.56848145]
[152.48443604 68.85800934]
[137.83885193 65.61660004]
[124.36445618 59.02564621]
[112.81579590 49.45452881]
[117.71735382 63.63108444]
[115.11556244 104.16308594]
[125.09828949 115.35885620]
[135.08100891 126.55461884]
[145.06373596 137.75038147]
[155.04646301 148.94615173]
[165.02919006 160.14192200]
[158.23391724 146.76939392]
[158.70886230 131.77691650]
[166.33691406 118.86132050]
[179.23715210 111.20732117]
[194.22865295 110.70223999]
[207.61479187 117.47062683]
[216.09484863 129.84352112]
[217.57778931 144.77005005]
[211.69796753 158.56959534]
[199.90522766 167.83949280]
[185.10861206 170.29408264]
[200.04292297 171.69639587]
[214.97723389 173.09869385]
[229.91154480 174.50099182]
[244.84585571 175.90330505]
[259.78015137 177.30560303]
[274.71447754 178.70791626]
[284.86737061 166.97341919]
[299.98620605 163.48054504]
[314.25750732 169.57235718]
[322.19360352 182.90643311]
[320.74298096 198.35556030]
[310.46337891 209.97921753]
[295.30752563 213.30787659]
[281.10314941 207.06159973]
[273.31216431 193.64221191]
[258.37786865 192.23991394]
[243.44354248 190.83761597]
[228.50923157 189.43530273]
[213.57493591 188.03300476]
[198.64062500 186.63070679]
[183.70631409 185.22839355]
[178.16065979 190.27772522]
[188.25914001 201.36918640]
[177.16751099 211.46749878]
[167.06933594 200.37637329]
[161.52368164 205.42568970]
[161.52368164 220.42568970]
[161.52368164 235.42568970]
[161.52368164 250.42568970]
[161.52368164 265.42568970]
[161.52368164 280.42568970]
[161.52368164 295.42568970]
[161.52368164 310.42568970]
[161.52368164 325.42568970]
[161.52368164 340.42568970]
[176.06356812 344.48699951]
[188.96795654 352.32150269]
[199.27923584 363.34783936]
[206.23225403 376.74777222]
[209.31106567 391.52694702]
[208.28717041 406.58862305]
[203.23657227 420.81515503]
[194.53404236 433.15081787]
[182.82537842 442.68023682]
[168.97944641 448.69625854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 94]
[23 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 41]
[29 40]
[30 38]
[31 37]
[32 36]
[47 88]
[48 87]
[49 62]
[50 61]
[51 60]
[52 59]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
