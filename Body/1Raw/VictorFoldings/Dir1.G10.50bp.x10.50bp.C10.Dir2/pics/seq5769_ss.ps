%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUUUGAACAGGGGGGGGGGUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACxxxxxxxxxxCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGACCCCCCCCCCACAGGUUGAACA\
) } def
/len { sequence length } bind def

/coor [
[91.31063080 332.34927368]
[75.00955963 331.16479492]
[58.83196259 328.83810425]
[42.85778809 325.38070679]
[27.16596222 320.80963135]
[11.83402157 315.14752197]
[-3.06227636 308.42230225]
[-17.44932556 300.66723633]
[-31.25603867 291.92065430]
[-44.41419220 282.22576904]
[-56.85876846 271.63046265]
[-68.52828217 260.18710327]
[-79.36506653 247.95222473]
[-89.31558228 234.98629761]
[-98.33065033 221.35337830]
[-111.37140656 228.76544189]
[-124.41216278 236.17750549]
[-137.45291138 243.58956909]
[-145.62727356 257.13543701]
[-160.51544189 256.69778442]
[-173.55619812 264.10983276]
[-186.59695435 271.52191162]
[-199.63771057 278.93399048]
[-205.26374817 293.95819092]
[-220.56195068 298.78982544]
[-233.79684448 289.72244263]
[-234.81573486 273.71176147]
[-222.83703613 263.03982544]
[-207.04977417 265.89321899]
[-194.00901794 258.48117065]
[-180.96826172 251.06909180]
[-167.92750549 243.65702820]
[-160.68591309 230.64132690]
[-144.86497498 230.54881287]
[-131.82423401 223.13674927]
[-118.78347015 215.72468567]
[-105.74271393 208.31262207]
[-111.87136841 195.77166748]
[-117.23645020 182.88554382]
[-121.81861877 169.70071411]
[-125.60136414 156.26469421]
[-128.57104492 142.62588501]
[-130.71697998 128.83345032]
[-132.03140259 114.93711853]
[-132.50959778 100.98693848]
[-132.14984131 87.03321075]
[-130.95343018 73.12621307]
[-128.92468262 59.31606293]
[-126.07088470 45.65253830]
[-122.40233612 32.18488312]
[-117.93226624 18.96162605]
[-112.67677307 6.03042984]
[-106.65480042 -6.56210470]
[-99.88806152 -18.77059364]
[-92.40092468 -30.55103874]
[-84.22039032 -41.86098099]
[-75.37593079 -52.65966415]
[-65.89942169 -62.90816879]
[-55.82501984 -72.56955719]
[-45.18902969 -81.60901642]
[-34.02978516 -89.99396515]
[-22.38750458 -97.69417572]
[-10.30414391 -104.68191528]
[2.17674804 -110.93198395]
[15.01019096 -116.42185974]
[28.14993477 -121.13176727]
[41.54862213 -125.04472351]
[55.15796661 -128.14662170]
[68.92891693 -130.42630005]
[82.81185150 -131.87551880]
[96.75672150 -132.48907471]
[110.71328735 -132.26475525]
[124.63124847 -131.20335388]
[138.46043396 -129.30871582]
[152.15100098 -126.58764648]
[165.65362549 -123.04997253]
[178.91964722 -118.70843506]
[191.90122986 -113.57868195]
[204.55162048 -107.67919922]
[216.82519531 -101.03125000]
[228.67774963 -93.65879059]
[240.06654358 -85.58839417]
[250.95054626 -76.84915161]
[261.29052734 -67.47254181]
[271.04922485 -57.49237442]
[280.19149780 -46.94461060]
[288.68432617 -35.86726379]
[296.49716187 -24.30025673]
[303.60183716 -12.28527641]
[309.97271729 0.13437437]
[315.58688354 12.91393661]
[320.42407227 26.00735283]
[324.46688843 39.36743546]
[327.70071411 52.94603729]
[330.11392212 66.69422150]
[345.02081299 65.02554321]
[359.92770386 63.35686493]
[374.83459473 61.68818665]
[389.74148560 60.01951218]
[404.64837646 58.35083389]
[419.55529785 56.68215561]
[434.46218872 55.01348114]
[449.33218384 53.04302979]
[464.15921021 50.77161026]
[476.62860107 41.03380585]
[490.38076782 46.75461960]
[505.20779419 44.48320389]
[520.03479004 42.21178818]
[534.86181641 39.94036865]
[549.68884277 37.66895294]
[562.14019775 26.99670792]
[577.51629639 32.69821167]
[579.99957275 48.90825272]
[567.03546143 58.95132446]
[551.96026611 52.49597931]
[537.13323975 54.76739502]
[522.30621338 57.03881073]
[507.47918701 59.31022644]
[492.65216064 61.58164597]
[481.24331665 71.15698242]
[466.43063354 65.59864044]
[451.60360718 67.87005615]
[448.07592773 71.16838837]
[442.42077637 72.24769592]
[436.13085938 69.92037201]
[421.22396851 71.58905029]
[406.31707764 73.25772858]
[391.41018677 74.92640686]
[376.50326538 76.59508514]
[361.59637451 78.26376343]
[346.68948364 79.93243408]
[331.78259277 81.60111237]
[332.50247192 97.92930603]
[332.07351685 114.26772308]
[330.49786377 130.53564453]
[327.78326416 146.65269470]
[323.94314575 162.53921509]
[318.99649048 178.11671448]
[312.96774292 193.30822754]
[305.88668823 208.03869629]
[297.78829956 222.23532104]
[288.71261597 235.82797241]
[278.70446777 248.74946594]
[267.81332397 260.93594360]
[256.09295654 272.32723999]
[243.60131836 282.86703491]
[230.40013123 292.50323486]
[216.55461121 301.18826294]
[202.13316345 308.87918091]
[187.20706177 315.53796387]
[171.85006714 321.13177490]
[156.13804626 325.63290405]
[140.14862061 329.01916504]
[123.96083069 331.27380371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 37]
[16 36]
[17 35]
[18 34]
[20 32]
[21 31]
[22 30]
[23 29]
[95 132]
[96 131]
[97 130]
[98 129]
[99 128]
[100 127]
[101 126]
[102 125]
[103 122]
[104 121]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
