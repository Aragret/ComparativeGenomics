%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACUGUCGGGGGGGGGGAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAAxxxxxxxxxxUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCCCCCCCCCCCUCACUAUC\
) } def
/len { sequence length } bind def

/coor [
[67.77992249 579.84277344]
[53.93398285 573.82678223]
[42.22532272 564.29736328]
[33.52279663 551.96166992]
[28.47219467 537.73516846]
[27.44830322 522.67346191]
[30.52710342 507.89431763]
[37.48012543 494.49441528]
[47.79140854 483.46807861]
[60.69578934 475.63354492]
[75.23567963 471.57223511]
[75.23567963 456.57223511]
[75.23567963 441.57223511]
[75.23567963 426.57223511]
[75.23567963 411.57223511]
[75.23567963 396.57223511]
[75.23567963 381.57223511]
[75.23567963 366.57223511]
[75.23567963 351.57223511]
[75.23567963 336.57223511]
[75.23567963 321.57223511]
[75.23567963 306.57223511]
[63.61291885 302.43453979]
[53.81597137 294.89562988]
[46.81129456 284.68008423]
[43.29577637 272.77743530]
[43.62744904 260.34634399]
[47.78905869 248.60182190]
[55.38827896 238.69641113]
[65.69465637 231.60714722]
[77.70979309 228.03918457]
[78.64542389 213.06838989]
[71.71705627 199.88328552]
[80.30007935 186.59260559]
[81.23571014 171.62181091]
[68.24243164 179.11679077]
[54.20487595 173.83029175]
[49.38336182 159.62631226]
[57.30202866 146.88681030]
[72.17296600 144.92333984]
[83.12648010 155.17041016]
[85.61160278 140.37770081]
[88.09671783 125.58499908]
[90.58184052 110.79229736]
[85.87400818 97.62688446]
[94.62545776 86.72258759]
[97.11057281 71.92987823]
[98.97818756 57.04660034]
[100.22505951 42.09851456]
[101.47193909 27.15042686]
[94.90855408 12.75485229]
[103.67703247 0.71479058]
[94.62952423 12.67901325]
[83.45890045 22.68987083]
[70.57839966 30.37703705]
[56.46448135 35.45615005]
[41.63926315 37.73932266]
[26.65115547 37.14209366]
[12.05460644 33.68655777]
[-1.61042809 27.50053787]
[-13.83844852 18.81287384]
[-24.17711258 7.94493771]
[-32.24397278 -4.70123863]
[-37.74061584 -18.65784645]
[-40.46370697 -33.40860367]
[-40.31251907 -48.40784073]
[-37.29264069 -63.10070801]
[-31.51578331 -76.94367981]
[-23.19564819 -89.42468262]
[-12.64001274 -100.08200836]
[-0.23935524 -108.52141571]
[13.54759789 -114.43072510]
[28.21083641 -117.59133148]
[43.20793533 -117.88631439]
[57.98411942 -115.30477142]
[71.99278259 -109.94218445]
[84.71572113 -101.99694061]
[95.68227386 -91.76294708]
[104.48677826 -79.61877441]
[110.80352020 -66.01367950]
[114.39884186 -51.45092773]
[115.13973999 -36.46923828]
[113.00036621 -21.62920380]
[122.74802399 -33.03022385]
[132.49566650 -44.43124771]
[141.88282776 -56.13087082]
[150.90036011 -68.11770630]
[159.91789246 -80.10453796]
[168.93542480 -92.09136963]
[173.62565613 -108.38363647]
[190.57958984 -108.38685608]
[195.27601624 -92.09636688]
[180.92225647 -83.07383728]
[171.90472412 -71.08700562]
[162.88719177 -59.10017395]
[153.86965942 -47.11333847]
[154.02902222 -43.52975464]
[152.41932678 -39.69432068]
[148.94338989 -36.45854187]
[143.89669800 -34.68359375]
[134.14904785 -23.28257370]
[124.40139008 -11.88155270]
[118.62511444 1.96166515]
[125.27768707 15.28805256]
[116.42002106 28.39730072]
[115.17314911 43.34538651]
[113.92627716 58.29347610]
[115.69899750 60.54398346]
[116.65712738 63.65460587]
[116.45990753 67.30741119]
[114.89216614 71.06417084]
[111.90328217 74.41500092]
[109.41815948 89.20770264]
[114.12599182 102.37311554]
[105.37454224 113.27741241]
[102.88942719 128.07011414]
[100.40430450 142.86282349]
[97.91918945 157.65553284]
[96.20649719 172.55743408]
[95.27087402 187.52822876]
[102.13231659 201.78414917]
[93.61621857 214.00401306]
[92.68058777 228.97480774]
[108.52803040 237.26116943]
[119.16227722 251.57341003]
[122.50276947 269.03469849]
[117.92932129 286.15991211]
[106.39669037 299.55123901]
[90.23567963 306.57223511]
[90.23567963 321.57223511]
[90.23567963 336.57223511]
[90.23567963 351.57223511]
[90.23567963 366.57223511]
[90.23567963 381.57223511]
[90.23567963 396.57223511]
[90.23567963 411.57223511]
[90.23567963 426.57223511]
[90.23567963 441.57223511]
[90.23567963 456.57223511]
[90.23567963 471.57223511]
[104.77556610 475.63354492]
[117.67994690 483.46807861]
[127.99122620 494.49441528]
[134.94424438 507.89431763]
[138.02305603 522.67346191]
[136.99916077 537.73516846]
[131.94856262 551.96166992]
[123.24603271 564.29736328]
[111.53736877 573.82678223]
[97.69142914 579.84277344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[31 123]
[32 122]
[34 120]
[35 119]
[41 118]
[42 117]
[43 116]
[44 115]
[46 113]
[47 112]
[48 107]
[49 106]
[50 105]
[52 103]
[83 102]
[84 101]
[85 100]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
