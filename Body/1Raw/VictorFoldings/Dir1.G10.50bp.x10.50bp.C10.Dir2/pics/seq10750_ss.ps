%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCCAAACAGGGGGGGGGGUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCxxxxxxxxxxUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCCCCCCCCCCCGACCCAGACA\
) } def
/len { sequence length } bind def

/coor [
[61.95108032 378.04263306]
[49.39285660 369.69146729]
[39.30663681 358.47903442]
[32.32644272 345.11010742]
[28.89105797 330.42510986]
[29.21643448 315.34716797]
[33.28211975 300.82403564]
[40.83253860 287.76870728]
[51.39306641 277.00180054]
[64.29986572 269.20016479]
[78.74159241 264.85421753]
[78.11761475 249.86720276]
[77.49363708 234.88018799]
[76.86965942 219.89317322]
[76.24568176 204.90615845]
[75.62170410 189.91914368]
[74.99772644 174.93211365]
[74.37374878 159.94509888]
[73.74977112 144.95808411]
[82.28594208 89.53833008]
[74.56185913 76.67992401]
[66.83777618 63.82152176]
[59.11368942 50.96311951]
[51.38960266 38.10471725]
[43.39968872 25.40979004]
[35.14739990 12.88382721]
[26.89510918 0.35786524]
[13.67106342 7.45933437]
[-0.13632159 13.34680843]
[-14.41587543 17.97288513]
[-29.05262566 21.30031586]
[-43.92872238 23.30231094]
[-58.92438889 23.96274948]
[-73.91889191 23.27631569]
[-88.79149628 21.24853516]
[-103.42245483 17.89573479]
[-117.69396973 13.24491119]
[-131.49111938 7.33350897]
[-144.70283508 0.20912555]
[-157.22273254 -8.07087708]
[-168.95001221 -17.43983269]
[-179.79023743 -27.82230377]
[-189.65612793 -39.13470078]
[-198.46827698 -51.28593445]
[-206.15570068 -64.17816925]
[-212.65650940 -77.70761108]
[-217.91836548 -91.76531219]
[-221.89891052 -106.23809814]
[-224.56608582 -121.00943756]
[-225.89840698 -135.96040344]
[-225.88516235 -150.97059631]
[-224.52645874 -165.91917419]
[-221.83323669 -180.68579102]
[-217.82717896 -195.15153503]
[-212.54052734 -209.19993591]
[-206.01585388 -222.71788025]
[-198.30569458 -235.59654236]
[-189.47213745 -247.73220825]
[-179.58630371 -259.02719116]
[-168.72776794 -269.39050293]
[-156.98399353 -278.73876953]
[-144.44950867 -286.99667358]
[-131.22525024 -294.09771729]
[-117.41767883 -299.98477173]
[-103.13798523 -304.61041260]
[-88.50113678 -307.93740845]
[-73.62497711 -309.93893433]
[-58.62928772 -310.59893799]
[-43.63480759 -309.91204834]
[-28.76226616 -307.88378906]
[-14.13140869 -304.53054810]
[0.13996197 -299.87930298]
[13.93693924 -293.96746826]
[27.14843750 -286.84268188]
[39.66807938 -278.56231689]
[51.39506531 -269.19299316]
[62.23497772 -258.81018066]
[72.10053253 -247.49749756]
[80.91229248 -235.34599304]
[88.59932709 -222.45352173]
[95.09972382 -208.92387390]
[100.36115265 -194.86601257]
[104.34125519 -180.39311218]
[107.00797272 -165.62168884]
[108.33985138 -150.67068481]
[108.32614899 -135.66049194]
[106.96698761 -120.71194458]
[104.27330780 -105.94541931]
[100.26679993 -91.47979736]
[94.97972107 -77.43155670]
[88.45464325 -63.91381073]
[80.74409485 -51.03538895]
[71.91016388 -38.89999008]
[62.02397919 -27.60531807]
[51.16513824 -17.24231720]
[39.42107010 -7.89442396]
[47.67335892 4.63153791]
[55.92564774 17.15749931]
[60.40082932 18.98733330]
[63.74430847 23.68333626]
[64.24800873 30.38063431]
[71.97209167 43.23903656]
[79.69617462 56.09743881]
[87.42025757 68.95584106]
[95.14434814 81.81424713]
[95.98667908 66.83791351]
[107.61182404 57.35867691]
[122.45118713 59.54803848]
[130.84353638 71.98059845]
[127.32497406 86.56208801]
[114.18673706 93.79911804]
[129.12104797 95.20142365]
[144.05535889 96.60372162]
[158.72811890 89.27965546]
[172.25624084 98.54908752]
[170.72312927 114.87641144]
[155.70593262 121.46548462]
[142.65304565 111.53803253]
[127.71874237 110.13572693]
[112.78443909 108.73342896]
[108.47685242 123.10160828]
[121.71943665 130.14674377]
[134.96202087 137.19187927]
[151.78524780 139.29318237]
[154.42318726 156.04064941]
[139.06047058 163.21166992]
[127.91688538 150.43446350]
[114.67430115 143.38932800]
[101.43171692 136.34419250]
[88.73678589 144.33410645]
[89.36076355 159.32112122]
[89.98474121 174.30815125]
[90.60871887 189.29516602]
[91.23269653 204.28218079]
[91.85667419 219.26919556]
[92.48065186 234.25621033]
[93.10462952 249.24322510]
[93.72860718 264.23025513]
[108.48161316 267.36068726]
[121.99224854 274.06243896]
[133.41122437 283.91421509]
[142.02073669 296.29675293]
[147.27958679 310.43167114]
[148.85719299 325.43038940]
[146.65438843 340.35012817]
[140.80964661 354.25299072]
[131.69035339 366.26504517]
[119.86978912 375.63119507]
[106.09098053 381.76269531]
[91.22007751 384.27410889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 105]
[21 104]
[22 103]
[23 102]
[24 101]
[25 98]
[26 97]
[27 96]
[111 120]
[112 119]
[113 118]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
