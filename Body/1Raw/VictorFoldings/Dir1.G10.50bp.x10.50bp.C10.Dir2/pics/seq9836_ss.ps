%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCAACCUGGGGGGGGGGUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCxxxxxxxxxxACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAACCCCCCCCCCUCCCCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 398.14038086]
[71.19830322 392.12435913]
[59.48964310 382.59494019]
[50.78712082 370.25927734]
[45.73651886 356.03274536]
[44.71262741 340.97106934]
[47.79142761 326.19189453]
[54.74444962 312.79196167]
[65.05573273 301.76562500]
[77.96011353 293.93112183]
[92.50000000 289.86981201]
[92.50000000 274.86981201]
[92.50000000 259.86981201]
[92.50000000 244.86981201]
[92.50000000 229.86981201]
[92.50000000 214.86981201]
[92.50000000 199.86981201]
[92.50000000 184.86981201]
[92.50000000 169.86981201]
[92.50000000 154.86981201]
[92.50000000 139.86981201]
[92.50000000 124.86981964]
[76.02714539 110.00300598]
[77.04750824 87.83689880]
[66.38587952 77.28561401]
[55.72425461 66.73432159]
[45.06262970 56.18303299]
[34.40100479 45.63174057]
[22.74776649 55.10007477]
[10.13912106 63.25294495]
[-3.27710533 69.99475861]
[-17.34361458 75.24648285]
[-31.89548111 78.94653320]
[-46.76209641 81.05153656]
[-61.76915359 81.53680420]
[-76.74069977 80.39665222]
[-91.50121307 77.64444733]
[-105.87761688 73.31246185]
[-119.70137024 67.45147705]
[-132.81039429 60.13021851]
[-145.05097961 51.43451691]
[-156.27961731 41.46632767]
[-166.36466980 30.34252739]
[-175.18789673 18.19353104]
[-182.64582825 5.16178131]
[-188.65103149 -8.59993076]
[-193.13310242 -22.93025589]
[-196.03950500 -37.66117859]
[-197.33613586 -52.61999130]
[-197.00781250 -67.63130188]
[-195.05836487 -82.51911163]
[-191.51068115 -97.10887146]
[-186.40632629 -111.22952271]
[-179.80516052 -124.71551514]
[-171.78457642 -137.40872192]
[-162.43861389 -149.16032410]
[-151.87684631 -159.83253479]
[-140.22309875 -169.30024719]
[-127.61400604 -177.45243835]
[-114.19741821 -184.19352722]
[-100.13063049 -189.44448853]
[-85.57855988 -193.14376831]
[-70.71183777 -195.24797058]
[-55.70475388 -195.73242188]
[-40.73326492 -194.59147644]
[-25.97290421 -191.83847046]
[-11.59672928 -187.50570679]
[2.22670746 -181.64398193]
[15.33533287 -174.32202148]
[27.57545471 -165.62565613]
[38.80356216 -155.65686035]
[48.88801575 -144.53251648]
[57.71057892 -132.38305664]
[65.16780853 -119.35089874]
[71.17227936 -105.58886719]
[75.65357971 -91.25829315]
[78.55918121 -76.52721405]
[79.85501099 -61.56833649]
[79.52587891 -46.55704498]
[77.57563782 -31.66933823]
[74.02716064 -17.07976723]
[68.92205048 -2.95938969]
[62.32015991 10.52624226]
[54.29889297 23.21901512]
[44.95229340 34.97011566]
[55.61391830 45.52140427]
[66.27554321 56.07269669]
[76.93717194 66.62398529]
[87.59880066 77.17527771]
[94.39786530 74.63518524]
[101.63429260 74.07536316]
[108.74313354 75.53951263]
[115.16938782 78.91333008]
[120.41133881 83.93341827]
[124.05974579 90.20784760]
[138.99406433 88.80554199]
[153.92835999 87.40323639]
[168.86267090 86.00093079]
[170.94444275 71.07569122]
[176.41267395 57.03306580]
[184.97244263 44.63036346]
[196.16215515 34.53644943]
[209.37835693 27.29566956]
[223.90829468 23.29851341]
[238.96842957 22.76054192]
[253.74655151 25.71076775]
[267.44570923 31.99008751]
[279.32711792 41.25986481]
[288.75003052 53.02019501]
[295.20629883 66.63685608]
[298.34771729 81.37551880]
[298.00488281 96.44135284]
[294.19628906 111.02185822]
[287.12731934 124.33074951]
[277.17919922 135.65028381]
[264.88842773 144.37001038]
[250.91781616 150.01968384]
[236.02079773 152.29463196]
[221.00073242 151.07215881]
[206.66764832 146.41821289]
[193.79449463 138.58375549]
[183.07551575 127.99129486]
[175.08877563 115.21206665]
[170.26496887 100.93524170]
[155.33067322 102.33754730]
[140.39636230 103.73984528]
[125.46205139 105.14215088]
[119.20727539 117.48823547]
[107.50000000 124.86981964]
[107.50000000 139.86981201]
[107.50000000 154.86981201]
[107.50000000 169.86981201]
[107.50000000 184.86981201]
[107.50000000 199.86981201]
[107.50000000 214.86981201]
[107.50000000 229.86981201]
[107.50000000 244.86981201]
[107.50000000 259.86981201]
[107.50000000 274.86981201]
[107.50000000 289.86981201]
[122.03988647 293.93112183]
[134.94427490 301.76562500]
[145.25555420 312.79196167]
[152.20857239 326.19189453]
[155.28736877 340.97106934]
[154.26348877 356.03274536]
[149.21287537 370.25927734]
[140.51036072 382.59494019]
[128.80169678 392.12435913]
[114.95575714 398.14038086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[95 127]
[96 126]
[97 125]
[98 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
