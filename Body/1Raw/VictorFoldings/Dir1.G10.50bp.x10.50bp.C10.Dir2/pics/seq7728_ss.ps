%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUACCAUCGGGGGGGGGGAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGxxxxxxxxxxAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCCCCCCCCCCCUUACCACC\
) } def
/len { sequence length } bind def

/coor [
[113.79256439 447.70330811]
[99.94662476 441.68728638]
[88.23796082 432.15786743]
[79.53543854 419.82220459]
[74.48483276 405.59570312]
[73.46094513 390.53399658]
[76.53974152 375.75485229]
[83.49276733 362.35491943]
[93.80404663 351.32858276]
[106.70842743 343.49407959]
[121.24832153 339.43276978]
[121.24832153 324.43276978]
[121.24832153 309.43276978]
[121.24832153 294.43276978]
[121.24832153 279.43276978]
[121.24832153 264.43276978]
[121.24832153 249.43276978]
[121.24832153 234.43276978]
[121.24832153 219.43276978]
[121.24832153 204.43276978]
[121.24832153 189.43276978]
[118.91721344 174.61500549]
[114.31165314 160.33955383]
[109.55783844 146.11276245]
[104.65628052 131.93620300]
[99.75473022 117.75965118]
[86.73842621 110.30474091]
[72.03046417 113.25022125]
[57.32250214 116.19570923]
[42.61454010 119.14118958]
[27.90657806 122.08666992]
[13.56311321 131.12554932]
[0.90680915 119.84484863]
[8.24304581 104.56034851]
[24.96109581 107.37870789]
[39.66905594 104.43322754]
[54.37701797 101.48774719]
[69.08497620 98.54225922]
[83.79293823 95.59677887]
[92.81047058 83.60994720]
[91.56359863 68.66185760]
[90.31671906 53.71377182]
[75.41004181 51.56976700]
[61.36103058 46.16479492]
[48.87313461 37.77293777]
[38.57085419 26.81772995]
[30.96853256 13.85081100]
[26.44467354 -0.47587046]
[25.22309303 -15.44282722]
[27.36185074 -30.29916573]
[32.75049973 -44.30026245]
[41.11578369 -56.74508286]
[52.03549194 -67.01127625]
[64.95977783 -74.58631897]
[79.23881531 -79.09307098]
[77.99194336 -94.04116058]
[76.74507141 -108.98925018]
[75.49819183 -123.93733215]
[73.47586060 -138.80038452]
[70.68353271 -153.53819275]
[66.22672272 -167.86077881]
[60.16370773 -181.58084106]
[54.10069275 -195.30088806]
[40.54824829 -204.53469849]
[42.03840637 -220.86601257]
[57.03821564 -227.49455261]
[70.11716461 -217.60147095]
[67.82074738 -201.36390686]
[73.88375854 -187.64384460]
[79.94676971 -173.92379761]
[83.34790802 -188.53312683]
[93.05110931 -199.97198486]
[106.91013336 -205.71023560]
[121.85948944 -204.47860718]
[134.59251404 -196.54954529]
[142.29277039 -183.67684937]
[143.25704956 -168.70788574]
[137.27204895 -154.95361328]
[125.66160583 -145.45637512]
[110.99383545 -142.31686401]
[96.51311493 -146.22950745]
[85.42134094 -156.33050537]
[88.21366882 -141.59271240]
[98.95225525 -152.06565857]
[113.86076355 -150.41142273]
[122.04226685 -137.83911133]
[117.51676178 -123.53807068]
[103.59201050 -117.96119690]
[90.44628143 -125.18421173]
[91.69315338 -110.23612213]
[92.94003296 -95.28803253]
[94.18690491 -80.33995056]
[109.01527405 -78.26115417]
[123.01593781 -72.93201447]
[135.48559570 -64.61681366]
[145.79705811 -53.72988892]
[153.43086243 -40.81504440]
[158.00138855 -26.51834869]
[159.27633667 -11.55584431]
[157.18855286 3.32233787]
[151.83958435 17.36957169]
[143.49467468 29.88020706]
[132.56967163 40.22502136]
[119.61028290 47.88286209]
[105.26480865 52.46689987]
[106.51168060 67.41498566]
[107.75856018 82.36307526]
[118.71090698 96.09974670]
[113.93128967 112.85810089]
[118.83283997 127.03466034]
[123.73439026 141.21121216]
[129.53269958 148.35485840]
[128.58711243 155.73397827]
[133.19267273 170.00944519]
[137.10922241 155.52978516]
[145.91024780 143.38308716]
[158.44960022 135.15116882]
[173.09436035 131.90602112]
[187.93740845 134.07025146]
[201.04580688 141.36201477]
[210.71250916 152.83175659]
[215.67868042 166.98580933]
[215.29757690 181.98095703]
[209.61885071 195.86447144]
[199.38200378 206.82836914]
[185.92012024 213.44485474]
[170.98629761 214.85231018]
[156.52528381 210.86746216]
[144.42027283 202.00920105]
[136.24832153 189.43276978]
[136.24832153 204.43276978]
[136.24832153 219.43276978]
[136.24832153 234.43276978]
[136.24832153 249.43276978]
[136.24832153 264.43276978]
[136.24832153 279.43276978]
[136.24832153 294.43276978]
[136.24832153 309.43276978]
[136.24832153 324.43276978]
[136.24832153 339.43276978]
[150.78820801 343.49407959]
[163.69258118 351.32858276]
[174.00387573 362.35491943]
[180.95689392 375.75485229]
[184.03569031 390.53399658]
[183.01179504 405.59570312]
[177.96119690 419.82220459]
[169.25866699 432.15786743]
[157.55001831 441.68728638]
[143.70407104 447.70330811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 114]
[23 113]
[24 111]
[25 110]
[26 109]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[40 107]
[41 106]
[42 105]
[55 92]
[56 91]
[57 90]
[58 89]
[59 83]
[60 82]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
