%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUCCUAGGGGGGGGGGAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGxxxxxxxxxxCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCCCCCCCCCCCACCCUA\
) } def
/len { sequence length } bind def

/coor [
[98.73252869 409.87088013]
[84.88658905 403.85485840]
[73.17792511 394.32543945]
[64.47540283 381.98977661]
[59.42480087 367.76324463]
[58.40090942 352.70156860]
[61.47970963 337.92242432]
[68.43273163 324.52249146]
[78.74401093 313.49615479]
[91.64839935 305.66165161]
[106.18828583 301.60034180]
[106.18828583 286.60034180]
[106.18828583 271.60034180]
[106.18828583 256.60034180]
[106.18828583 241.60034180]
[106.18828583 226.60034180]
[106.18828583 211.60034180]
[106.18828583 196.60034180]
[106.18828583 181.60034180]
[106.18828583 166.60034180]
[94.56745148 176.08485413]
[79.62554932 174.76589966]
[69.84590912 163.39230347]
[70.78095245 148.42147827]
[81.89981842 138.35316467]
[96.88970947 138.90368652]
[107.24063110 149.76193237]
[109.10824585 134.87864685]
[110.97586060 119.99536896]
[94.62183380 128.29353333]
[73.23661041 122.22843170]
[58.24391174 122.69647217]
[43.25121689 123.16451263]
[28.25852203 123.63256073]
[16.27011299 134.29359436]
[0.48545077 131.42584229]
[-6.98682213 117.22919464]
[-0.41461837 102.59410858]
[15.16042995 98.74736786]
[27.79047966 108.63986206]
[42.78317642 108.17182159]
[57.77587128 107.70378113]
[72.76856995 107.23573303]
[74.99697876 100.07444000]
[81.68219757 78.59053802]
[69.60221100 69.69818878]
[57.52222061 60.80584335]
[45.44223404 51.91349030]
[33.36224747 43.02114105]
[18.20954132 46.88501740]
[4.14073420 40.05840302]
[-2.20131373 25.76461220]
[2.17791843 10.75273800]
[15.21069050 2.11092949]
[30.74332619 3.91958332]
[41.44179153 15.32470894]
[42.25459671 30.94115448]
[54.33458328 39.83350372]
[66.41457367 48.72585297]
[78.49456024 57.61820221]
[90.57454681 66.51055145]
[109.20264435 70.61015320]
[120.67977905 82.94813538]
[122.66748810 97.45651245]
[133.75880432 87.35786438]
[118.95603180 89.78231812]
[104.25656128 86.79474640]
[91.57463074 78.78421021]
[82.56175232 66.79387665]
[78.39162445 52.38520050]
[79.60729980 37.43454361]
[86.05047607 23.88886070]
[96.88208008 13.51214218]
[110.69157410 7.65569592]
[125.68060303 7.08217955]
[139.89723206 11.86627865]
[151.49008179 21.38498306]
[158.94949341 34.39871979]
[161.30403137 49.21276855]
[158.24711609 63.89797211]
[150.17800903 76.54064941]
[163.83424377 70.33524323]
[169.46301270 55.81095886]
[183.40078735 49.71233368]
[197.21278381 55.16801071]
[210.86901855 48.96260071]
[224.52525330 42.75719452]
[238.18150330 36.55178833]
[251.83773804 30.34638023]
[237.63668823 25.51625252]
[228.85624695 13.35468197]
[228.74060059 -1.64487195]
[237.33250427 -13.94037342]
[251.45739746 -18.98887825]
[265.89642334 -14.92506695]
[275.31463623 -3.25043392]
[276.23220825 11.72147465]
[268.31079102 24.45826912]
[282.76547241 20.45052910]
[297.17770386 16.29264259]
[311.58990479 12.13475418]
[326.00213623 7.97686672]
[340.41433716 3.81897950]
[347.83367920 -10.13555813]
[362.97149658 -14.67668819]
[376.84680176 -7.11023951]
[381.22763062 8.07474899]
[373.51492310 21.86929321]
[358.28445435 26.08933258]
[344.57223511 18.23119545]
[330.16000366 22.38908195]
[315.74780273 26.54697037]
[301.33557129 30.70485687]
[286.92337036 34.86274338]
[281.33227539 39.77043915]
[272.16793823 38.95386505]
[258.04315186 44.00262070]
[244.38690186 50.20803070]
[230.73066711 56.41343689]
[217.07443237 62.61884308]
[203.41818237 68.82424927]
[198.44340515 82.81665039]
[184.68243408 89.30435181]
[170.03965759 83.99147797]
[156.38340759 90.19689178]
[143.85745239 98.44918060]
[132.76612854 108.54782867]
[125.85913849 121.86298370]
[123.99152374 136.74626160]
[122.12390900 151.62954712]
[121.18828583 166.60034180]
[121.18828583 181.60034180]
[121.18828583 196.60034180]
[121.18828583 211.60034180]
[121.18828583 226.60034180]
[121.18828583 241.60034180]
[121.18828583 256.60034180]
[121.18828583 271.60034180]
[121.18828583 286.60034180]
[121.18828583 301.60034180]
[135.72816467 305.66165161]
[148.63255310 313.49615479]
[158.94383240 324.52249146]
[165.89685059 337.92242432]
[168.97566223 352.70156860]
[167.95176697 367.76324463]
[162.90116882 381.98977661]
[154.19863892 394.32543945]
[142.48997498 403.85485840]
[128.64404297 409.87088013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 130]
[28 129]
[29 128]
[31 43]
[32 42]
[33 41]
[34 40]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[64 127]
[65 126]
[81 125]
[82 124]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[98 116]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
