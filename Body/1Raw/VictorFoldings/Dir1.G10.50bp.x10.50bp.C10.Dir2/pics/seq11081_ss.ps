%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUACCUCCGGGGGGGGGGCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAxxxxxxxxxxUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCCCCCCCCCCCGCUACCUUC\
) } def
/len { sequence length } bind def

/coor [
[86.22870636 438.14025879]
[73.00851440 430.86776733]
[62.12170792 420.42077637]
[54.31057739 407.51153564]
[50.10769653 393.02020264]
[49.79962540 377.93487549]
[53.40736771 363.28405762]
[60.68494034 350.06665039]
[71.13614655 339.18389893]
[84.04840851 331.37774658]
[98.54134369 327.18045044]
[98.22928619 312.18371582]
[97.91723633 297.18695068]
[97.60517883 282.19018555]
[97.29312134 267.19345093]
[96.98106384 252.19668579]
[96.66900635 237.19993591]
[96.35694885 222.20318604]
[96.04489899 207.20643616]
[95.73284149 192.20967102]
[87.73243713 179.64611816]
[95.18096924 165.68797302]
[94.86891174 150.69122314]
[94.55685425 135.69447327]
[93.93287659 120.70745087]
[92.99725342 105.73665619]
[90.43658447 102.75682068]
[89.23152924 98.64664459]
[89.86315918 94.05107880]
[92.50000000 89.80833435]
[92.50000000 74.80833435]
[92.50000000 59.80833435]
[89.35433197 51.16214371]
[92.65928650 44.49708939]
[92.97133636 29.50033569]
[93.28339386 14.50358105]
[92.97133636 -0.49317223]
[92.03571320 -15.46396351]
[81.49302673 -30.52489662]
[89.83206177 -45.93465042]
[88.58518219 -60.88273621]
[87.33831024 -75.83082581]
[86.09143829 -90.77890778]
[84.84455872 -105.72699738]
[69.83409882 -106.04904938]
[54.93953323 -107.93837738]
[40.32405472 -111.37429047]
[26.14779854 -116.31913757]
[12.56608868 -122.71873474]
[-0.27226472 -130.50297546]
[-12.22659969 -139.58656311]
[-23.16593552 -149.86997986]
[-32.97041702 -161.24055481]
[-41.53262329 -173.57368469]
[-48.75873566 -186.73426819]
[-54.56958771 -200.57810974]
[-58.90150833 -214.95350647]
[-61.70703506 -229.70297241]
[-62.95542908 -244.66490173]
[-62.63301468 -259.67535400]
[-60.74332047 -274.56988525]
[-57.30705643 -289.18527222]
[-52.36186600 -303.36141968]
[-45.96193314 -316.94296265]
[-38.17738342 -329.78112793]
[-29.09350395 -341.73522949]
[-18.80982208 -352.67431641]
[-7.43901587 -362.47854614]
[4.89433289 -371.04043579]
[18.05509377 -378.26623535]
[31.89906693 -384.07675171]
[46.27457428 -388.40832520]
[61.02410889 -391.21350098]
[75.98606110 -392.46151733]
[90.99651337 -392.13873291]
[105.89098358 -390.24868774]
[120.50630188 -386.81207275]
[134.68231201 -381.86651611]
[148.26371765 -375.46627808]
[161.10168457 -367.68139648]
[173.05558777 -358.59722900]
[183.99441528 -348.31329346]
[193.79835510 -336.94223022]
[202.35995483 -324.60867310]
[209.58543396 -311.44775391]
[215.39559937 -297.60363770]
[219.72682190 -283.22802734]
[222.53163147 -268.47842407]
[223.77931213 -253.51643372]
[223.45616150 -238.50599670]
[221.56575012 -223.61157227]
[218.12876892 -208.99633789]
[213.18289185 -194.82044983]
[206.78230286 -181.23919678]
[198.99713135 -168.40141296]
[189.91265869 -156.44773865]
[179.62844849 -145.50915527]
[168.25717163 -135.70550537]
[155.92340088 -127.14419556]
[142.76229858 -119.91903687]
[128.91802979 -114.10919952]
[114.54232025 -109.77832794]
[99.79264832 -106.97386932]
[101.03952026 -92.02578735]
[102.28639984 -77.07769775]
[103.53327179 -62.12961197]
[104.78014374 -47.18152237]
[113.83210754 -39.09639740]
[114.95849609 -26.60839272]
[107.00650024 -16.39959145]
[107.94213104 -1.42880070]
[110.02268982 0.54061872]
[111.42208862 3.47926688]
[111.75706482 7.12202358]
[110.75111389 11.06652832]
[108.28015137 14.81563759]
[107.96809387 29.81239128]
[107.65603638 44.80914688]
[107.50000000 59.80833435]
[107.50000000 74.80833435]
[107.50000000 89.80833435]
[107.96804047 104.80103302]
[108.90367126 119.77182007]
[112.28899384 125.57243347]
[112.20038605 131.33641052]
[109.55361176 135.38241577]
[109.86566925 150.37916565]
[110.17771912 165.37591553]
[118.20044708 179.01213074]
[110.72959137 191.89761353]
[111.04164886 206.89437866]
[111.35370636 221.89112854]
[111.66576385 236.88787842]
[111.97782135 251.88462830]
[112.28987122 266.88137817]
[112.60192871 281.87814331]
[112.91398621 296.87490845]
[113.22604370 311.87164307]
[113.53810120 326.86840820]
[128.19308472 330.45916748]
[141.41889954 337.72143555]
[152.31376648 348.16003418]
[160.13487244 361.06323242]
[164.34893799 375.55130005]
[164.66865540 390.63638306]
[161.07223511 405.29000854]
[153.80487061 418.51300049]
[143.36206055 429.40383911]
[130.45584106 437.21997070]
[115.96614838 441.42843628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 127]
[24 126]
[25 123]
[26 122]
[30 121]
[31 120]
[32 119]
[34 118]
[35 117]
[36 116]
[37 111]
[38 110]
[40 107]
[41 106]
[42 105]
[43 104]
[44 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
