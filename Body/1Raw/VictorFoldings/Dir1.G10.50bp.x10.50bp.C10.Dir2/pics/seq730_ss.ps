%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCCCAUACCGGGGGGGGGGCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCxxxxxxxxxxAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCACCCCCCCCCCUAACCCAAUACC\
) } def
/len { sequence length } bind def

/coor [
[70.69604492 391.50573730]
[56.53543854 386.35073853]
[43.94569397 378.06854248]
[33.60575867 367.10577393]
[26.07324600 354.05361938]
[21.75438118 339.61602783]
[20.88207245 324.57159424]
[23.50336266 309.73156738]
[29.47688866 295.89633179]
[38.48050690 283.81198120]
[50.02866364 274.13021851]
[63.49858093 267.37313843]
[78.16384125 263.90515137]
[78.16384125 248.90516663]
[78.16384125 233.90516663]
[78.16384125 218.90516663]
[78.16384125 203.90516663]
[78.16384125 188.90516663]
[78.16384125 173.90516663]
[78.16384125 158.90516663]
[78.16384125 143.90516663]
[78.16384125 128.90516663]
[75.96865082 143.74366760]
[65.81520081 154.78483582]
[51.21223068 158.21315002]
[37.20613098 152.84385681]
[28.63702202 140.53247070]
[28.46615219 125.53343964]
[36.75257111 113.03002930]
[50.63271713 107.34307098]
[65.31030273 110.43798828]
[51.24402237 105.22840881]
[33.20014572 108.76374817]
[22.49363136 94.89080811]
[8.32465649 89.96738434]
[-5.84431887 85.04395294]
[-20.01329422 80.12052155]
[-28.95025826 92.31159210]
[-41.08454895 101.32549286]
[-55.33719635 106.36071014]
[-70.44086456 106.96952820]
[-85.05254364 103.09780121]
[-97.87297058 95.08980560]
[-107.76216888 83.65760803]
[-113.84079742 69.81774902]
[-115.56833649 54.80085754]
[-112.79119110 39.94222641]
[-105.75628662 26.56307983]
[-95.08917999 15.85307693]
[-81.73836517 8.76454639]
[-66.89099884 5.92779493]
[-51.86730194 7.59506464]
[-38.00315857 13.61810207]
[-26.53136826 23.46134567]
[-18.47199059 36.24953842]
[-14.54166317 50.84556198]
[-15.08986568 65.95155334]
[-0.92089099 70.87497711]
[13.24808407 75.79840851]
[27.41705894 80.72183228]
[38.47504807 75.72792816]
[50.34410477 79.75910950]
[56.45360184 91.16212463]
[70.51988220 96.37170410]
[87.99720764 77.03443146]
[110.31691742 80.42937469]
[121.39601898 70.31733704]
[106.60936737 72.83823395]
[91.89122009 69.94408417]
[79.15999603 62.01213455]
[70.07512665 50.07625580]
[65.82077789 35.69221878]
[66.95146942 20.73489571]
[73.31982422 7.15387821]
[84.09577179 -3.28062963]
[97.87473297 -9.20855522]
[112.86070251 -9.85723019]
[127.10034943 -5.14210272]
[138.73762512 4.32223797]
[146.25569153 17.30217552]
[148.67459106 32.10585022]
[145.67907715 46.80370331]
[137.65902710 59.48051071]
[151.25721741 53.14889145]
[164.85540771 46.81727219]
[178.45358276 40.48565292]
[192.05177307 34.15403366]
[188.03271484 19.66621208]
[186.45323181 4.71445131]
[187.35643005 -10.29334927]
[190.71766663 -24.94776917]
[196.44523621 -38.84902191]
[204.38288879 -51.61787033]
[214.31407166 -62.90597916]
[225.96788025 -72.40538788]
[239.02635193 -79.85695648]
[253.13328552 -85.05739594]
[267.90380859 -87.86483765]
[282.93496704 -88.20268250]
[297.81668091 -86.06172943]
[312.14303589 -81.50037384]
[325.52313232 -74.64305115]
[337.59197998 -65.67684937]
[348.02032471 -54.84635544]
[356.52365112 -42.44704056]
[362.87002563 -28.81717110]
[366.88629150 -14.32857227]
[368.46289062 0.62349111]
[367.55679321 15.63111782]
[364.19274902 30.28488922]
[358.46249390 44.18503952]
[350.52239990 56.95235825]
[340.58901978 68.23854828]
[328.93341064 77.73571777]
[315.87347412 85.18476868]
[301.76556396 90.38249207]
[286.99450684 93.18708038]
[271.96328735 93.52203369]
[257.08193970 91.37821198]
[242.75650024 86.81409454]
[229.37771606 79.95420074]
[217.31059265 70.98567200]
[206.88433838 60.15316772]
[198.38339233 47.75222015]
[184.78520203 54.08383942]
[171.18702698 60.41545486]
[157.58883667 66.74707794]
[143.99064636 73.07869720]
[131.50805664 81.39643860]
[120.42895508 91.50848389]
[123.25196838 108.18293762]
[113.03101349 123.84822845]
[93.16384125 128.90516663]
[93.16384125 143.90516663]
[93.16384125 158.90516663]
[93.16384125 173.90516663]
[93.16384125 188.90516663]
[93.16384125 203.90516663]
[93.16384125 218.90516663]
[93.16384125 233.90516663]
[93.16384125 248.90516663]
[93.16384125 263.90515137]
[107.82910156 267.37313843]
[121.29901886 274.13021851]
[132.84716797 283.81198120]
[141.85078430 295.89633179]
[147.82432556 309.73156738]
[150.44560242 324.57159424]
[149.57330322 339.61602783]
[145.25444031 354.05361938]
[137.72192383 367.10577393]
[127.38198853 378.06854248]
[114.79224396 386.35073853]
[100.63163757 391.50573730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[31 64]
[32 63]
[34 60]
[35 59]
[36 58]
[37 57]
[66 130]
[67 129]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
