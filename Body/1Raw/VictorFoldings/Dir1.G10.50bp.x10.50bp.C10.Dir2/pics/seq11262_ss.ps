%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCACCUCCGGGGGGGGGGAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUxxxxxxxxxxUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACCCCCCCCCCCUCCACCUCC\
) } def
/len { sequence length } bind def

/coor [
[82.52829742 542.55755615]
[68.68235779 536.54150391]
[56.97369385 527.01208496]
[48.27117157 514.67645264]
[43.22056961 500.44992065]
[42.19667816 485.38824463]
[45.27547455 470.60906982]
[52.22849655 457.20916748]
[62.53978348 446.18283081]
[75.44416046 438.34832764]
[89.98404694 434.28698730]
[89.98404694 419.28698730]
[89.98404694 404.28698730]
[89.98404694 389.28698730]
[89.98404694 374.28698730]
[89.98404694 359.28698730]
[89.98404694 344.28698730]
[89.98404694 329.28698730]
[89.98404694 314.28698730]
[89.98404694 299.28698730]
[75.63203430 296.57501221]
[62.02391815 291.25756836]
[49.62844467 283.51620483]
[38.87288666 273.61593628]
[30.12831688 261.89624023]
[23.69681358 248.75947571]
[19.80101967 234.65689087]
[18.57644081 220.07328796]
[20.06672859 205.51028442]
[24.22212982 191.46908569]
[30.90114212 178.43318176]
[39.87533188 166.85177612]
[50.83715439 157.12426758]
[63.41048431 149.58645630]
[77.16352081 144.49899292]
[91.62363434 142.03833008]
[91.93569183 127.04158020]
[92.24774170 112.04483032]
[85.67915344 99.70201111]
[92.75550079 87.64311218]
[93.06755829 72.64636230]
[92.59951782 57.65366364]
[91.35263824 42.70557785]
[90.10576630 27.75749016]
[88.85889435 12.80940247]
[73.84870148 12.43320179]
[58.96718597 10.43629074]
[44.38881683 6.84208441]
[30.28451538 1.69272161]
[16.81965065 -4.95142365]
[4.15209055 -13.01245213]
[-7.56964302 -22.39585114]
[-18.20812035 -32.99160767]
[-27.63860893 -44.67549133]
[-35.75054169 -57.31051254]
[-42.44881439 -70.74853516]
[-47.65488815 -84.83200073]
[-51.30772400 -99.39579010]
[-53.36449814 -114.26915741]
[-53.80109406 -129.27770996]
[-52.61239243 -144.24548340]
[-49.81232834 -158.99697876]
[-45.43373871 -173.35926819]
[-39.52795029 -187.16394043]
[-32.16421509 -200.24914551]
[-23.42885971 -212.46147156]
[-13.42430782 -223.65773010]
[-2.26785564 -233.70664978]
[9.90969181 -242.49041748]
[22.96556091 -249.90603638]
[36.74667740 -255.86657715]
[51.09146500 -260.30215454]
[65.83173370 -263.16076660]
[80.79467010 -264.40887451]
[95.80484009 -264.03186035]
[110.68624878 -262.03414917]
[125.26442719 -258.43914795]
[139.36845398 -253.28903198]
[152.83296204 -246.64416504]
[165.50009155 -238.58245850]
[177.22131348 -229.19842529]
[187.85922241 -218.60209656]
[197.28907776 -206.91770935]
[205.40032959 -194.28225708]
[212.09788513 -180.84387207]
[217.30319214 -166.76013184]
[220.95524597 -152.19613647]
[223.01123047 -137.32266235]
[223.44700623 -122.31408691]
[222.25750732 -107.34638214]
[219.45664978 -92.59502411]
[215.07728577 -78.23297882]
[209.17076111 -64.42862701]
[201.80632019 -51.34381485]
[193.07029724 -39.13196182]
[183.06515503 -27.93624306]
[171.90815735 -17.88792229]
[159.73013306 -9.10481071]
[146.67387390 -1.68988562]
[132.89242554 4.26991606]
[118.54740906 8.70471954]
[103.80697632 11.56252861]
[105.05385590 26.51061630]
[106.30072784 41.45870209]
[107.54759979 56.40678787]
[119.31564331 47.10553741]
[133.97177124 50.29891205]
[140.80355835 63.65281296]
[134.81752014 77.40662384]
[120.38895416 81.50741577]
[108.06430817 72.95841980]
[107.75225830 87.95516968]
[114.32084656 100.29798889]
[107.24449921 112.35688782]
[106.93244171 127.35363770]
[106.62038422 142.35038757]
[121.68958282 145.64097595]
[135.82911682 151.79235840]
[148.50173950 160.56887817]
[159.22637939 171.63513184]
[167.59629822 184.56887817]
[173.29458618 198.87705994]
[176.10609436 214.01466370]
[175.92565918 229.40544128]
[172.76191711 244.46389771]
[166.73703003 258.61749268]
[158.08183289 271.32846069]
[147.12712097 282.11425781]
[134.29090881 290.56576538]
[120.06256104 296.36297607]
[104.98404694 299.28698730]
[104.98404694 314.28698730]
[104.98404694 329.28698730]
[104.98404694 344.28698730]
[104.98404694 359.28698730]
[104.98404694 374.28698730]
[104.98404694 389.28698730]
[104.98404694 404.28698730]
[104.98404694 419.28698730]
[104.98404694 434.28698730]
[119.52393341 438.34832764]
[132.42831421 446.18283081]
[142.73960876 457.20916748]
[149.69262695 470.60906982]
[152.77142334 485.38824463]
[151.74752808 500.44992065]
[146.69692993 514.67645264]
[137.99440002 527.01208496]
[126.28574371 536.54150391]
[112.43980408 542.55755615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 116]
[37 115]
[38 114]
[40 112]
[41 111]
[42 105]
[43 104]
[44 103]
[45 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
