%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAACCCUGGGGGGGGGGUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAxxxxxxxxxxUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCCCCCCCCCCCUACAAGCCU\
) } def
/len { sequence length } bind def

/coor [
[83.67209625 378.50665283]
[70.45190430 371.23419189]
[59.56509781 360.78717041]
[51.75396729 347.87792969]
[47.55108643 333.38662720]
[47.24301529 318.30126953]
[50.85075378 303.65045166]
[58.12832642 290.43307495]
[68.57953644 279.55029297]
[81.49179840 271.74414062]
[95.98473358 267.54687500]
[95.67267609 252.55010986]
[95.36061859 237.55335999]
[95.04856873 222.55661011]
[94.73651123 207.55986023]
[94.42445374 192.56309509]
[94.11239624 177.56634521]
[93.80033875 162.56959534]
[93.48828125 147.57284546]
[93.17623138 132.57608032]
[83.45849609 128.88154602]
[75.35470581 122.36905670]
[62.26155090 129.68815613]
[54.33515549 144.04449463]
[37.93606567 144.08763123]
[29.93425941 129.77319336]
[38.56130981 115.82664490]
[54.94244766 116.59500885]
[68.03559875 109.27590179]
[67.14443970 94.68235779]
[72.59342194 81.11496735]
[83.33105469 71.19181824]
[97.28529358 66.82778931]
[99.46212769 51.98658371]
[101.63896942 37.14537811]
[103.81580353 22.30417442]
[105.99264526 7.46296835]
[98.00272369 -5.23196125]
[83.68013000 -9.68877697]
[69.35752869 -14.14559269]
[55.03493500 -18.60240936]
[40.71233749 -23.05922508]
[25.89833832 -16.90089417]
[11.91728973 -24.76917267]
[9.49425316 -40.62819290]
[20.48797607 -52.31226730]
[36.46501541 -50.85837555]
[45.16915131 -37.38182068]
[59.49174881 -32.92500687]
[73.81434631 -28.46818924]
[88.13694763 -24.01137543]
[102.45954132 -19.55455971]
[115.84582520 -26.32267380]
[120.74737549 -40.49923325]
[125.64892578 -54.67578888]
[121.71902466 -72.63507080]
[135.34901428 -83.64520264]
[139.95458984 -97.92066193]
[144.56015015 -112.19612885]
[149.16571045 -126.47158813]
[153.77127075 -140.74703979]
[146.27708435 -151.98513794]
[146.63943481 -165.29290771]
[154.50047302 -175.79425049]
[166.79600525 -179.77128601]
[154.96147156 -170.55477905]
[140.62617493 -166.13897705]
[125.65692902 -167.09892273]
[112.00309753 -173.30963135]
[101.44274902 -183.96229553]
[95.35112000 -197.66966248]
[94.52148438 -212.64669800]
[99.06188965 -226.94302368]
[108.38105011 -238.69688416]
[121.26538849 -246.37762451]
[136.03703308 -248.98504639]
[150.77233887 -246.17958069]
[163.55239868 -238.32655334]
[172.71295166 -226.44865417]
[177.06103516 -212.09268188]
[176.03085327 -197.12985229]
[185.04838562 -209.11668396]
[194.06591797 -221.10351562]
[203.08345032 -233.09034729]
[204.27986145 -239.69912720]
[208.09289551 -244.02256775]
[212.73388672 -245.37780762]
[222.24224854 -256.97915649]
[231.75061035 -268.58050537]
[241.25897217 -280.18182373]
[246.62286377 -296.26489258]
[263.56225586 -295.56286621]
[267.57696533 -279.09109497]
[252.86030579 -270.67349243]
[243.35194397 -259.07214355]
[233.84358215 -247.47079468]
[224.33523560 -235.86946106]
[215.07028198 -224.07281494]
[206.05274963 -212.08598328]
[197.03521729 -200.09915161]
[188.01768494 -188.11231995]
[180.97254944 -174.86973572]
[188.96839905 -160.10746765]
[183.74047852 -143.79939270]
[168.04673767 -136.14147949]
[163.44117737 -121.86602020]
[158.83560181 -107.59056091]
[154.23004150 -93.31510162]
[149.62448120 -79.03964233]
[154.86489868 -68.09225464]
[151.09548950 -56.13355637]
[139.82548523 -49.77423859]
[134.92393494 -35.59767914]
[130.02238464 -21.42112350]
[132.77966309 -17.75782204]
[134.47340393 -13.17972660]
[134.81080627 -8.01205826]
[133.60217285 -2.67029405]
[130.78765869 2.37311387]
[126.45325470 6.62965393]
[120.83384705 9.63980484]
[118.65701294 24.48101044]
[116.48017120 39.32221603]
[114.30333710 54.16342163]
[112.12650299 69.00462341]
[125.58973694 78.71784210]
[132.68640137 93.72592163]
[131.65089417 110.29496002]
[122.74082947 124.30267334]
[108.17298126 132.26402283]
[108.48503876 147.26078796]
[108.79709625 162.25753784]
[109.10915375 177.25428772]
[109.42120361 192.25103760]
[109.73326111 207.24780273]
[110.04531860 222.24455261]
[110.35737610 237.24130249]
[110.66943359 252.23805237]
[110.98149109 267.23480225]
[125.63648224 270.82559204]
[138.86228943 278.08782959]
[149.75715637 288.52642822]
[157.57824707 301.42965698]
[161.79232788 315.91769409]
[162.11204529 331.00280762]
[158.51562500 345.65640259]
[151.24826050 358.87942505]
[140.80545044 369.77026367]
[127.89922333 377.58636475]
[113.40953064 381.79483032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 29]
[23 28]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[53 114]
[54 113]
[55 112]
[57 109]
[58 108]
[59 107]
[60 106]
[61 105]
[65 102]
[81 101]
[82 100]
[83 99]
[84 98]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
