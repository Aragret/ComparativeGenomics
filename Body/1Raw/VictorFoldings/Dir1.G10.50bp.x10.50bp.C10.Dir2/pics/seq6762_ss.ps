%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCGCAACGGGGGGGGGGCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUAxxxxxxxxxxCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUCCCCCCCCCCAGACCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[79.47827911 363.91961670]
[65.63234711 357.90359497]
[53.92368317 348.37417603]
[45.22115707 336.03851318]
[40.17055511 321.81198120]
[39.14666367 306.75030518]
[42.22546387 291.97113037]
[49.17848587 278.57119751]
[59.48976898 267.54489136]
[72.39414978 259.71035767]
[86.93403625 255.64906311]
[86.93403625 240.64906311]
[86.93403625 225.64906311]
[86.93403625 210.64906311]
[86.93403625 195.64906311]
[86.93403625 180.64906311]
[86.93403625 165.64906311]
[86.93403625 150.64906311]
[86.93403625 135.64906311]
[86.93403625 120.64905548]
[79.74265289 133.81278992]
[72.55126953 146.97653198]
[62.27296066 157.90156555]
[47.51793671 160.60142517]
[34.03701019 154.02384949]
[27.08440590 140.73245239]
[29.36992264 125.90758514]
[40.00277328 115.32730103]
[54.84003448 113.11549377]
[68.96143341 108.05722046]
[83.08283234 102.99893951]
[68.26506805 100.66783905]
[53.44731140 98.33673096]
[38.62955475 96.00563049]
[23.81179619 93.67452240]
[11.12084484 102.70655060]
[-3.87326169 100.13139343]
[-12.40570736 87.97685242]
[-27.22346497 85.64574432]
[-42.32450104 92.04033661]
[-55.24808884 81.94513702]
[-52.69954681 65.74523163]
[-37.30059814 60.10569000]
[-24.89236259 70.82798767]
[-10.07460403 73.15909576]
[1.77760518 64.21142578]
[16.83812714 66.36441040]
[26.14290047 78.85676575]
[40.96065903 81.18787384]
[55.77841568 83.51897430]
[70.59617615 85.85008240]
[85.41393280 88.18118286]
[98.10886383 80.19126892]
[102.41645050 65.82308197]
[106.72402954 51.45489883]
[111.03161621 37.08671570]
[99.78765106 47.01512527]
[86.75450134 54.44055557]
[72.48049164 59.05060959]
[57.56615067 60.65133286]
[42.63893890 59.17538452]
[28.32687569 54.68485641]
[15.23208809 47.36867523]
[3.90549350 37.53463745]
[-5.17638159 25.59648323]
[-11.63144779 12.05646515]
[-15.18813229 -2.51576900]
[-15.69679928 -17.50714111]
[-13.13604927 -32.28694534]
[-7.61361456 -46.23336792]
[0.63816530 -58.75966644]
[11.27212715 -69.33883667]
[23.84088326 -77.52580261]
[37.81564713 -82.97612000]
[52.60847855 -85.46048737]
[67.59702301 -84.87438965]
[82.15068817 -81.24247742]
[95.65718842 -74.71755219]
[107.54827118 -65.57412720]
[117.32366180 -54.19688416]
[124.57210541 -41.06447983]
[128.98864746 -26.72941017]
[130.38746643 -11.79477692]
[128.70971680 3.11110020]
[124.02356720 17.36653328]
[135.52536011 7.73800802]
[134.59973145 -7.63890314]
[142.81004333 -20.46248817]
[156.83117676 -25.92799759]
[171.20993042 -22.13467979]
[182.71173096 -31.76320648]
[194.21354675 -41.39173126]
[205.71534729 -51.02025986]
[217.21714783 -60.64878464]
[222.33248901 -76.22971344]
[238.43690491 -79.32485962]
[248.96354675 -66.75021362]
[243.08351135 -51.44148254]
[226.84567261 -49.14698029]
[215.34387207 -39.51845551]
[203.84207153 -29.88992882]
[192.34025574 -20.26140213]
[180.83845520 -10.63287640]
[182.04304504 4.18896532]
[174.19612122 17.02990532]
[160.12814331 22.85617638]
[145.15390015 19.23981094]
[133.65208435 28.86833763]
[125.39980316 41.39429855]
[121.09221649 55.76248550]
[116.78462982 70.13066864]
[112.47704315 84.49885559]
[119.24516296 97.88513947]
[133.36996460 102.93389130]
[147.49476624 107.98265076]
[158.32310486 97.22579956]
[172.74913025 92.24057007]
[187.90855408 94.01677704]
[200.79144287 102.20175934]
[208.83988953 115.17037964]
[210.45590210 130.34770203]
[205.31857300 144.72027588]
[194.44796753 155.43440247]
[180.00241089 160.36277771]
[164.85011292 158.52688599]
[151.99955750 150.29124451]
[144.00222778 137.29103088]
[142.44601440 122.10745239]
[128.32121277 117.05869293]
[114.19640350 112.00994110]
[101.93403625 120.64905548]
[101.93403625 135.64906311]
[101.93403625 150.64906311]
[101.93403625 165.64906311]
[101.93403625 180.64906311]
[101.93403625 195.64906311]
[101.93403625 210.64906311]
[101.93403625 225.64906311]
[101.93403625 240.64906311]
[101.93403625 255.64906311]
[116.47392273 259.71035767]
[129.37831116 267.54489136]
[139.68959045 278.57119751]
[146.64260864 291.97113037]
[149.72140503 306.75030518]
[148.69752502 321.81198120]
[143.64691162 336.03851318]
[134.94439697 348.37417603]
[123.23573303 357.90359497]
[109.38979340 363.91961670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[38 45]
[39 44]
[53 112]
[54 111]
[55 110]
[56 109]
[85 108]
[86 107]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
[113 130]
[114 129]
[115 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
