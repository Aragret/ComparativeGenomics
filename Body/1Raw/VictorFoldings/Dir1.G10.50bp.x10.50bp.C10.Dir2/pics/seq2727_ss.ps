%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCUCUAGGGGGGGGGGGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCxxxxxxxxxxUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCCCCCCCCCCCUCACUUCUAG\
) } def
/len { sequence length } bind def

/coor [
[83.86126709 384.12036133]
[70.98799133 376.21746826]
[60.86369705 365.00695801]
[54.30911636 351.39764404]
[51.85559464 336.49270630]
[53.70203018 321.50045776]
[59.69874191 307.63626099]
[69.35960388 296.02401733]
[81.90145111 287.60504150]
[96.30757141 283.06188965]
[95.99552155 268.06512451]
[95.68346405 253.06838989]
[95.37140656 238.07162476]
[95.05934906 223.07487488]
[94.74729156 208.07812500]
[94.43523407 193.08137512]
[94.12318420 178.08460999]
[93.81112671 163.08786011]
[93.49906921 148.09111023]
[93.18701172 133.09436035]
[80.87490082 127.85468292]
[71.56211853 118.24664307]
[66.70917511 105.77703094]
[51.72946167 104.99719238]
[36.74974823 104.21734619]
[21.77003288 103.43750000]
[11.64450550 111.49526215]
[-0.85453928 110.49884033]
[-9.03339195 101.53147125]
[0.47043541 113.13652802]
[0.46629041 128.13652039]
[-9.04394913 139.73632812]
[-23.75205231 142.68109131]
[-36.99510574 135.63684082]
[-42.77387238 121.79466248]
[-38.47052002 107.42520905]
[-26.03411293 99.03788757]
[-40.67761612 95.78706360]
[-55.32111740 92.53623199]
[-69.96461487 89.28540802]
[-84.21543121 96.65383911]
[-98.80214691 89.97496796]
[-102.53507996 74.37224579]
[-92.55064392 61.81475830]
[-76.50804138 61.93552399]
[-66.71379089 74.64190674]
[-52.07028961 77.89273071]
[-37.42678833 81.14356232]
[-22.78328705 84.39438629]
[-7.94208145 86.57122040]
[7.38009119 78.07234192]
[22.54987907 88.45778656]
[37.52959442 89.23763275]
[52.50930786 90.01747131]
[67.48902130 90.79731750]
[73.42826080 77.15102386]
[84.99198151 66.94657135]
[100.30591583 62.44377518]
[116.62043762 64.92472076]
[120.62817383 50.47003174]
[124.63591766 36.01534271]
[128.64366150 21.56065369]
[117.71389008 31.83392906]
[104.67675781 39.25236130]
[90.26182556 43.40081024]
[75.27574921 44.04712677]
[60.55717850 41.15514374]
[46.92975998 34.88669586]
[35.15609360 25.59256744]
[25.89504242 13.79286766]
[19.66485786 0.14791264]
[16.81418610 -14.57871914]
[17.50255203 -29.56291580]
[21.69143486 -43.96615219]
[29.14642143 -56.98241806]
[39.45032883 -67.88331604]
[52.02653885 -76.05882263]
[66.17128754 -81.05142975]
[81.09301758 -82.58175659]
[95.95671082 -80.56415558]
[109.93058014 -75.11154175]
[122.23263550 -66.52903748]
[132.17445374 -55.29692841]
[139.19969177 -42.04377365]
[142.91519165 -27.51122475]
[143.11305237 -12.51252937]
[139.78245544 2.11227226]
[150.22225952 -8.65853596]
[160.66207886 -19.42934418]
[171.10188293 -30.20015335]
[181.54170227 -40.97096252]
[182.73007202 -56.96994019]
[196.06024170 -65.89666748]
[211.30641174 -60.90332031]
[216.77305603 -45.82036972]
[208.26661682 -32.21816254]
[192.31250000 -30.53114891]
[181.87269592 -19.76034164]
[171.43287659 -8.98953247]
[160.99307251 1.78127611]
[150.55325317 12.55208492]
[143.09834290 25.56839371]
[139.09060669 40.02308273]
[135.08287048 54.47777176]
[131.07511902 68.93245697]
[139.71424866 81.19482422]
[154.67448425 82.28614044]
[169.63473511 83.37744904]
[184.59498596 84.46875763]
[192.62071228 71.43624878]
[205.78956604 63.63624954]
[221.07542419 62.86114120]
[234.96574402 69.28903961]
[244.26860046 81.44286346]
[246.84626770 96.52975464]
[242.10643005 111.08284760]
[231.13827515 121.75795746]
[216.46217346 126.10201263]
[201.45060730 123.11679077]
[189.55313110 113.48826599]
[183.50367737 99.42900848]
[168.54342651 98.33769989]
[153.58317566 97.24638367]
[138.62292480 96.15507507]
[137.61344910 105.23689270]
[134.54551697 113.63408661]
[129.68185425 120.89874268]
[123.37786865 126.66713715]
[116.05715942 130.67773438]
[108.18376923 132.78230286]
[108.49581909 147.77905273]
[108.80787659 162.77580261]
[109.11993408 177.77255249]
[109.43199158 192.76931763]
[109.74404907 207.76606750]
[110.05610657 222.76281738]
[110.36815643 237.75956726]
[110.68021393 252.75633240]
[110.99227142 267.75308228]
[111.30432892 282.74984741]
[125.88697052 286.68978882]
[138.76817322 294.57974243]
[148.90373230 305.78005981]
[155.47198486 319.38281250]
[157.94047546 334.28524780]
[156.10910034 349.27935791]
[150.12631226 363.14956665]
[140.47712708 374.77151489]
[127.94374084 383.20306396]
[113.54219055 387.76071167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 55]
[24 54]
[25 53]
[26 52]
[29 50]
[37 49]
[38 48]
[39 47]
[40 46]
[59 105]
[60 104]
[61 103]
[62 102]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[106 124]
[107 123]
[108 122]
[109 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
