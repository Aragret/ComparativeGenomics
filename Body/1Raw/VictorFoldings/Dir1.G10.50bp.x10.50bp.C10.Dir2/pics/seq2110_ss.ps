%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUAAUGAAGGGGGGGGGGUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACxxxxxxxxxxAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCCCCCCCCCCCGCAUGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[84.28109741 354.26757812]
[70.43515778 348.25155640]
[58.72650146 338.72213745]
[50.02397537 326.38647461]
[44.97337341 312.15994263]
[43.94948196 297.09826660]
[47.02828217 282.31912231]
[53.98130417 268.91918945]
[64.29258728 257.89285278]
[77.19696808 250.05833435]
[91.73685455 245.99702454]
[91.73685455 230.99702454]
[91.73685455 215.99702454]
[91.73685455 200.99702454]
[91.73685455 185.99702454]
[91.73685455 170.99702454]
[91.73685455 155.99702454]
[91.73685455 140.99702454]
[91.73685455 125.99702454]
[91.73685455 110.99702454]
[83.96560669 123.82698059]
[73.18960571 134.26142883]
[60.11609268 141.61557007]
[45.60309219 145.40672302]
[30.60310745 145.38607788]
[16.10059547 141.55499268]
[3.04737258 134.16491699]
[-7.69987059 123.70084381]
[-15.43578148 110.84955597]
[-19.65264702 96.45448303]
[-20.07371140 81.46039581]
[-16.67133904 66.85135651]
[-9.66882896 53.58618546]
[0.47423664 42.53547287]
[13.09216022 34.42449188]
[27.35681534 29.78557205]
[42.33200455 28.92317009]
[57.03488922 31.89388466]
[70.50051117 38.50274658]
[81.84510803 48.31600952]
[90.32412720 60.68962097]
[95.38107300 74.81149292]
[96.68386841 89.75963593]
[103.31236267 76.30367279]
[109.94086456 62.84770584]
[116.56936646 49.39173889]
[123.19786072 35.93577576]
[110.29658508 28.26823807]
[98.03666687 19.61210823]
[86.49370575 10.02075577]
[75.73885345 -0.44668677]
[65.83843231 -11.72568226]
[56.85347748 -23.74669075]
[48.83938217 -36.43559647]
[41.84555817 -49.71417236]
[35.91512680 -63.50054550]
[31.08465195 -77.70971680]
[27.38391113 -92.25408173]
[24.83572578 -107.04397583]
[23.45580482 -121.98819733]
[23.25265503 -136.99462891]
[24.22752953 -151.97073364]
[26.37441826 -166.82418823]
[29.68008423 -181.46339417]
[34.12414932 -195.79812622]
[39.67920685 -209.73997498]
[46.31101608 -223.20301819]
[53.97868347 -236.10421753]
[62.63494110 -248.36404419]
[72.22640991 -259.90692139]
[82.69396210 -270.66165161]
[93.97306061 -280.56195068]
[105.99415588 -289.54678345]
[118.68315125 -297.56076050]
[131.96179199 -304.55444336]
[145.74822998 -310.48474121]
[159.95744324 -315.31506348]
[174.50184631 -319.01565552]
[189.29176331 -321.56369019]
[204.23600769 -322.94345093]
[219.24243164 -323.14645386]
[234.21853638 -322.17141724]
[249.07196045 -320.02438354]
[263.71115112 -316.71856689]
[278.04583740 -312.27435303]
[291.98764038 -306.71914673]
[305.45059204 -300.08721924]
[318.35171509 -292.41940308]
[330.61145020 -283.76303101]
[342.15420532 -274.17144775]
[352.90884399 -263.70379639]
[362.80905151 -252.42459106]
[371.79376221 -240.40339661]
[379.80758667 -227.71432495]
[386.80114746 -214.43560791]
[392.73129272 -200.64910889]
[397.56149292 -186.43983459]
[401.26193237 -171.89540100]
[403.80981445 -157.10545349]
[405.18942261 -142.16119385]
[405.39227295 -127.15476990]
[404.41708374 -112.17868805]
[402.26989746 -97.32527924]
[398.96392822 -82.68613434]
[394.51956177 -68.35149384]
[388.96423340 -54.40975189]
[382.33215332 -40.94685364]
[374.66421509 -28.04581261]
[366.00769043 -15.78616142]
[356.41598511 -4.24349070]
[345.94824219 6.51103592]
[334.66891479 16.41111183]
[322.64764404 25.39570045]
[309.95849609 33.40940857]
[296.67971802 40.40282440]
[282.89315796 46.33283234]
[268.68383789 51.16287613]
[254.13934326 54.86316681]
[239.34938049 57.41090012]
[224.40510559 58.79036331]
[209.39868164 58.99305344]
[194.42260742 58.01772308]
[179.56921387 55.87037659]
[164.93009949 52.56426239]
[150.59552002 48.11975861]
[136.65382385 42.56427383]
[130.02532959 56.02023697]
[123.39682770 69.47620392]
[116.76833344 82.93216705]
[110.13983154 96.38813782]
[106.73685455 110.99702454]
[106.73685455 125.99702454]
[106.73685455 140.99702454]
[106.73685455 155.99702454]
[106.73685455 170.99702454]
[106.73685455 185.99702454]
[106.73685455 200.99702454]
[106.73685455 215.99702454]
[106.73685455 230.99702454]
[106.73685455 245.99702454]
[121.27674103 250.05833435]
[134.18112183 257.89285278]
[144.49240112 268.91918945]
[151.44543457 282.31912231]
[154.52423096 297.09826660]
[153.50033569 312.15994263]
[148.44973755 326.38647461]
[139.74720764 338.72213745]
[128.03854370 348.25155640]
[114.19261169 354.26757812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[43 130]
[44 129]
[45 128]
[46 127]
[47 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
