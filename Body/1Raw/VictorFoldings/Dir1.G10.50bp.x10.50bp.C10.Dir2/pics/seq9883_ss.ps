%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCCCCCUCGGGGGGGGGGCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGxxxxxxxxxxACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCCCCCCCCCCCAACCUCCCUC\
) } def
/len { sequence length } bind def

/coor [
[74.48120880 376.12869263]
[60.45926285 370.57568359]
[48.25930786 361.70935059]
[38.64823532 350.08703613]
[32.23020935 336.43933105]
[29.40867424 321.62414551]
[30.36098862 306.57278442]
[35.02729416 292.23135376]
[43.11426163 279.50140381]
[54.11353683 269.18313599]
[67.33369446 261.92514038]
[81.94371033 258.18371582]
[81.94371033 243.18371582]
[81.94371033 228.18371582]
[81.94371033 213.18371582]
[81.94371033 198.18371582]
[81.94371033 183.18371582]
[81.94371033 168.18371582]
[81.94371033 153.18371582]
[81.94371033 138.18371582]
[81.94371033 123.18371582]
[85.93206024 94.00923920]
[77.26545715 81.76628113]
[68.59884644 69.52333069]
[55.67475891 77.15402222]
[42.16466904 83.69137573]
[28.16086769 89.09073639]
[13.75901890 93.31522369]
[-0.94249755 96.33597565]
[-15.84325409 98.13236237]
[-30.84146118 98.69210815]
[-45.83466339 98.01139069]
[-60.72044373 96.09486389]
[-75.39711761 92.95561218]
[-89.76441956 88.61508179]
[-103.72420502 83.10292816]
[-117.18112183 76.45680237]
[-130.04322815 68.72210693]
[-142.22268677 59.95167160]
[-153.63627625 50.20541763]
[-164.20603943 39.54991913]
[-173.85977173 28.05796242]
[-182.53150940 15.80805302]
[-190.16204834 2.88387060]
[-196.69924927 -10.62629700]
[-202.09843445 -24.63016129]
[-206.32275391 -39.03206253]
[-209.34333801 -53.73361206]
[-211.13954163 -68.63439178]
[-211.69911194 -83.63260651]
[-211.01821899 -98.62580109]
[-209.10150146 -113.51155853]
[-205.96208191 -128.18818665]
[-201.62138367 -142.55543518]
[-196.10905457 -156.51516724]
[-189.46276855 -169.97200012]
[-181.72792053 -182.83401489]
[-172.95735168 -195.01336670]
[-163.21095276 -206.42683411]
[-152.55532837 -216.99647522]
[-141.06326294 -226.65007019]
[-128.81324768 -235.32167053]
[-115.88896942 -242.95205688]
[-102.37872314 -249.48908997]
[-88.37479401 -254.88810730]
[-73.97284698 -259.11224365]
[-59.27125931 -262.13265991]
[-44.37046051 -263.92868042]
[-29.37224007 -264.48806763]
[-14.37905312 -263.80700684]
[0.50668156 -261.89013672]
[15.18327618 -258.75051880]
[29.55047417 -254.40965271]
[43.51013184 -248.89715576]
[56.96688843 -242.25071716]
[69.82881927 -234.51571655]
[82.00806427 -225.74499512]
[93.42141724 -215.99845886]
[103.99092865 -205.34271240]
[113.64437866 -193.85052490]
[122.31584167 -181.60040283]
[129.94606018 -168.67604065]
[136.48294067 -155.16572571]
[141.88180542 -141.16172791]
[146.10577393 -126.75972748]
[149.12600708 -112.05810547]
[150.92185974 -97.15727997]
[151.48106384 -82.15905762]
[150.79980469 -67.16587830]
[148.88275146 -52.28016663]
[145.74296570 -37.60360718]
[141.40193176 -23.23646164]
[135.88928223 -9.27686977]
[129.24267578 4.17980671]
[121.50751495 17.04164505]
[112.73664093 29.22078323]
[102.98998260 40.63402557]
[92.33410645 51.20340729]
[80.84180450 60.85672379]
[89.50840759 73.09967804]
[98.17501831 85.34262848]
[111.67040253 91.89050293]
[126.65064240 91.12084198]
[141.63088989 90.35118103]
[156.61112976 89.58152008]
[161.03413391 75.08280182]
[170.15173340 62.97309494]
[182.86294556 54.71469116]
[197.63279724 51.30484772]
[212.67778015 53.15530777]
[226.18113708 60.04262924]
[236.51226807 71.13512421]
[242.42364502 85.09333038]
[243.20143127 100.23171997]
[238.75170898 114.72226715]
[229.61180115 126.81515503]
[216.88540649 135.05010986]
[202.10928345 138.43273926]
[187.06773376 136.55455017]
[173.57708740 129.64234924]
[163.26641846 118.53083801]
[157.38078308 104.56175995]
[142.40054321 105.33142090]
[127.42030334 106.10108185]
[112.44006348 106.87074280]
[127.32197571 108.74919891]
[137.10247803 120.12204742]
[136.73187256 135.11746216]
[126.40150452 145.99328613]
[111.44496918 147.13430786]
[99.58435059 137.95140076]
[96.94371033 123.18371582]
[96.94371033 138.18371582]
[96.94371033 153.18371582]
[96.94371033 168.18371582]
[96.94371033 183.18371582]
[96.94371033 198.18371582]
[96.94371033 213.18371582]
[96.94371033 228.18371582]
[96.94371033 243.18371582]
[96.94371033 258.18371582]
[111.55371857 261.92514038]
[124.77388000 269.18313599]
[135.77314758 279.50140381]
[143.86012268 292.23135376]
[148.52642822 306.57278442]
[149.47874451 321.62414551]
[146.65721130 336.43933105]
[140.23918152 350.08703613]
[130.62811279 361.70935059]
[118.42814636 370.57568359]
[104.40620422 376.12869263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 101]
[23 100]
[24 99]
[102 125]
[103 124]
[104 123]
[105 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
