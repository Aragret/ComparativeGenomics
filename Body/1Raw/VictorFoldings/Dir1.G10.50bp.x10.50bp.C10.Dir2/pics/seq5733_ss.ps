%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUAUCUAACAACGUGGGGGGGGGGAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCAxxxxxxxxxxUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCCCCCCCCCCCAUGUCUAACAACAU\
) } def
/len { sequence length } bind def

/coor [
[64.19145966 467.08709717]
[49.81086349 462.71160889]
[36.29184723 456.14025879]
[23.96733093 447.53485107]
[13.14081669 437.10733032]
[4.07891607 425.11450195]
[-2.99521279 411.85162354]
[-7.90736341 397.64538574]
[-10.53656960 382.84561157]
[-10.81808472 367.81674194]
[-8.74497604 352.92886353]
[-4.36829662 338.54861450]
[2.20417523 325.03015137]
[10.81058598 312.70632935]
[21.23899460 301.88067627]
[33.23258972 292.81976318]
[46.49602509 285.74673462]
[60.70267105 280.83575439]
[75.50267792 278.20776367]
[75.22051239 263.21041870]
[74.93835449 248.21308899]
[74.65618896 233.21574402]
[74.37403107 218.21839905]
[74.09186554 203.22105408]
[73.80970001 188.22370911]
[73.52754211 173.22636414]
[73.24537659 158.22900391]
[72.96321869 143.23165894]
[64.98787689 130.65219116]
[72.46421051 116.70891571]
[67.88266754 102.42572784]
[59.38850784 90.06250763]
[50.89435196 77.69927979]
[42.40019608 65.33605194]
[33.90604401 52.97283173]
[25.41188622 40.60960388]
[13.99206448 30.88398743]
[0.43411052 24.46667480]
[-13.12384319 18.04936409]
[-26.68179703 11.63205147]
[-43.01313782 21.52532196]
[-61.86432648 19.64311981]
[-75.69738007 6.91827011]
[-79.08921051 -11.41695499]
[-92.98754883 -17.05930138]
[-106.88589478 -22.70164871]
[-120.78423309 -28.34399605]
[-133.33468628 -19.37239265]
[-148.74432373 -18.63311005]
[-162.09599304 -26.36205101]
[-169.12922668 -40.09294128]
[-167.59973145 -55.44429779]
[-157.99557495 -67.51756287]
[-143.38140869 -72.46020508]
[-128.42054749 -68.69503784]
[-117.88697052 -57.42351151]
[-115.14188385 -42.24234009]
[-101.24354553 -36.59999084]
[-87.34519958 -30.95764351]
[-73.44686127 -25.31529617]
[-65.20365143 -32.93825912]
[-54.65593719 -36.93374634]
[-43.32814407 -36.68305206]
[-32.87297440 -32.18416595]
[-24.83026695 -24.05769348]
[-20.40024376 -13.46151543]
[-20.26448441 -1.92590177]
[-6.70653152 4.49141026]
[6.85142231 10.90872192]
[20.40937614 17.32603455]
[11.87111664 4.99322653]
[6.03382111 -8.82437038]
[3.14394641 -23.54335785]
[3.32350779 -38.54228210]
[6.56492376 -53.18787003]
[12.73133659 -66.86176300]
[21.56239319 -78.98663330]
[32.68523407 -89.05054474]
[45.63023758 -96.62860107]
[59.85085297 -101.40083313]
[74.74665833 -103.16575623]
[89.68873596 -101.84884644]
[104.04621887 -97.50571442]
[117.21290588 -90.31973267]
[128.63288879 -80.59429169]
[137.82398987 -68.74002838]
[144.39814758 -55.25743484]
[148.07781982 -40.71576691]
[148.70761108 -25.72899628]
[146.26095581 -10.92987919]
[140.84114075 3.05674291]
[132.67700195 15.64033604]
[122.11323547 26.28960609]
[109.59586334 34.55492401]
[95.65338898 40.08731842]
[80.87447357 42.65320206]
[65.88311768 42.14424515]
[51.31225586 38.58193207]
[37.77511215 32.11545181]
[46.26926804 44.47867584]
[54.76342392 56.84189987]
[63.25757980 69.20512390]
[71.75173187 81.56835175]
[80.24588776 93.93157196]
[87.03883362 85.11380005]
[97.00287628 81.42940521]
[106.90422058 83.50272369]
[113.81959534 90.17428589]
[128.62823486 87.78597260]
[143.43688965 85.39765930]
[152.69334412 72.86946106]
[167.74543762 70.65832520]
[179.63211060 79.56015015]
[194.44076538 77.17183685]
[209.24940491 74.78352356]
[214.05316162 60.25140381]
[225.06813049 49.62460709]
[239.76318359 45.34509277]
[254.76147461 48.39626694]
[266.61651611 58.07698441]
[272.60412598 72.16269684]
[271.34838867 87.41660309]
[263.13781738 100.33347321]
[249.85920715 107.94509888]
[234.56384277 108.50238800]
[220.76651001 101.87727356]
[211.63772583 89.59217072]
[196.82907104 91.98048401]
[182.02043152 94.36879730]
[173.53498840 106.55620575]
[158.55093384 109.18924713]
[145.82519531 100.20630646]
[131.01655579 102.59461975]
[116.20790863 104.98293304]
[105.74357605 117.91259766]
[87.46155548 116.42675018]
[95.45708466 130.07893372]
[87.96056366 142.94950867]
[88.24272156 157.94685364]
[88.52488708 172.94419861]
[88.80705261 187.94154358]
[89.08921051 202.93888855]
[89.37137604 217.93623352]
[89.65353394 232.93357849]
[89.93569946 247.93092346]
[90.21785736 262.92828369]
[90.50002289 277.92562866]
[105.38840485 279.99502563]
[119.76972198 284.36816406]
[133.28982544 290.93728638]
[145.61575317 299.54064941]
[156.44400024 309.96636963]
[165.50787354 321.95773315]
[172.58419800 335.21942139]
[177.49868774 349.42483521]
[180.13034058 364.22418213]
[180.41433716 379.25302124]
[178.34367371 394.14123535]
[173.96937561 408.52218628]
[167.39913940 422.04174805]
[158.79475403 434.36697388]
[148.36813354 445.19436646]
[136.37603760 454.25723267]
[123.11376190 461.33245850]
[108.90792847 466.24578857]
[94.10836029 468.87622070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 147]
[20 146]
[21 145]
[22 144]
[23 143]
[24 142]
[25 141]
[26 140]
[27 139]
[28 138]
[30 136]
[31 104]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 70]
[38 69]
[39 68]
[40 67]
[44 60]
[45 59]
[46 58]
[47 57]
[108 134]
[109 133]
[110 132]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
