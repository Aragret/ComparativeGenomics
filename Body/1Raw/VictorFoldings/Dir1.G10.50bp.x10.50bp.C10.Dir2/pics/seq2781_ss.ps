%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGUAUGAAGGGGGGGGGGUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCAGUGAAAUUGACxxxxxxxxxxGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCCCCCCCCCCCCUGUACGAA\
) } def
/len { sequence length } bind def

/coor [
[77.36137390 423.03781128]
[64.14118195 415.76535034]
[53.25437546 405.31835938]
[45.44324493 392.40908813]
[41.24036407 377.91778564]
[40.93229294 362.83245850]
[44.54003143 348.18161011]
[51.81760406 334.96423340]
[62.26881409 324.08145142]
[75.18107605 316.27532959]
[89.67401123 312.07803345]
[89.36195374 297.08126831]
[89.04989624 282.08453369]
[88.73784637 267.08776855]
[88.42578888 252.09101868]
[88.11373138 237.09426880]
[87.80167389 222.09750366]
[87.48961639 207.10075378]
[87.17755890 192.10400391]
[86.86550903 177.10725403]
[78.86510468 164.54370117]
[86.31363678 150.58554077]
[86.00157928 135.58879089]
[73.39044952 127.46724701]
[59.60807037 133.38720703]
[45.82568741 139.30717468]
[33.65856552 151.11384583]
[18.94510841 142.69062805]
[22.96605301 126.22040558]
[39.90572357 125.52479553]
[53.68810654 119.60483551]
[67.47048950 113.68486786]
[67.36064148 106.25480652]
[68.83026886 99.39092255]
[71.63819885 93.40666962]
[58.39561844 86.36154175]
[45.15303040 79.31640625]
[31.91044617 72.27127075]
[22.79980659 70.98748016]
[18.46789169 64.93933105]
[5.37473774 57.62022400]
[-7.71841669 50.30111694]
[-19.39127541 60.00208664]
[-33.78153229 64.82753754]
[-48.94301987 64.12487030]
[-62.82527161 57.98911667]
[-73.55082703 47.25008392]
[-79.66915131 33.36013794]
[-80.35277557 18.19777870]
[-75.50925446 3.81359458]
[-65.79364014 -7.84707403]
[-52.51987839 -15.20721722]
[-37.48313904 -17.27143478]
[-22.71702385 -13.76056099]
[-10.21852398 -5.14941025]
[-1.67795837 7.39742947]
[1.74963021 22.18309975]
[-0.39931118 37.20796204]
[12.69384289 44.52706909]
[25.78699684 51.84617233]
[38.95558167 59.02868271]
[52.19816589 66.07381439]
[65.44075012 73.11894989]
[78.68333435 80.16408539]
[95.77430725 71.19015503]
[114.72245789 74.87804413]
[125.38408661 64.32675171]
[136.04571533 53.77546310]
[146.70733643 43.22417068]
[138.69905090 30.96756363]
[133.25077820 17.38346863]
[130.57214355 2.99978399]
[130.76518250 -11.62493706]
[133.82043457 -25.92316818]
[139.61744690 -39.34043503]
[147.92944336 -51.35681915]
[158.43225098 -61.50710678]
[170.71690369 -69.39878845]
[184.30564880 -74.72725677]
[198.67039490 -77.28753662]
[213.25332642 -76.98220062]
[227.48858643 -73.82503510]
[240.82414246 -67.94049072]
[252.74327087 -59.55870438]
[257.42492676 -74.67137146]
[271.98242188 -77.82232666]
[282.86123657 -88.14953613]
[293.74008179 -98.47673798]
[304.61889648 -108.80394745]
[315.38970947 -119.24375916]
[326.05133057 -129.79504395]
[336.71295166 -140.34634399]
[340.51544189 -156.29855347]
[356.30682373 -160.72166443]
[367.84231567 -149.06556702]
[363.25515747 -133.32104492]
[347.26425171 -129.68470764]
[336.60263062 -119.13342285]
[325.94100952 -108.58213043]
[323.38253784 -101.59643555]
[314.94610596 -97.92511749]
[304.06729126 -87.59791565]
[293.18844604 -77.27070618]
[282.30963135 -66.94350433]
[278.40609741 -52.56951141]
[263.07046509 -48.67988205]
[271.18438721 -35.60279846]
[276.41854858 -21.12442970]
[278.54415894 -5.87074137]
[277.46685791 9.49826241]
[273.23098755 24.31710052]
[266.01766968 37.94363403]
[256.13708496 49.78688049]
[244.01519775 59.33266068]
[230.17530823 66.16590881]
[215.21548462 69.98872375]
[199.78276062 70.63335419]
[184.54513550 68.06957245]
[170.16259766 62.40605164]
[157.25862122 53.88579941]
[146.59700012 64.43708801]
[135.93537903 74.98838043]
[125.27375031 85.53966522]
[130.66102600 99.87304688]
[128.08412170 115.76103973]
[117.46192932 128.87881470]
[100.99832916 135.27673340]
[101.31038666 150.27348328]
[109.33310699 163.90971375]
[101.86225891 176.79519653]
[102.17431641 191.79194641]
[102.48637390 206.78869629]
[102.79843140 221.78546143]
[103.11048126 236.78221130]
[103.42253876 251.77896118]
[103.73459625 266.77572632]
[104.04665375 281.77246094]
[104.35871124 296.76922607]
[104.67076874 311.76599121]
[119.32575989 315.35675049]
[132.55155945 322.61898804]
[143.44644165 333.05758667]
[151.26753235 345.96081543]
[155.48159790 360.44888306]
[155.80133057 375.53396606]
[152.20489502 390.18756104]
[144.93753052 403.41058350]
[134.49473572 414.30142212]
[121.58850098 422.11752319]
[107.09880829 426.32601929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 127]
[24 32]
[25 31]
[26 30]
[35 64]
[36 63]
[37 62]
[38 61]
[40 60]
[41 59]
[42 58]
[66 123]
[67 122]
[68 121]
[69 120]
[84 106]
[86 104]
[87 103]
[88 102]
[89 101]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
