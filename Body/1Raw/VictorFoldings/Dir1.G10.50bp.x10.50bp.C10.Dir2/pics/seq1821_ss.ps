%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUCAACUGGGGGGGGGGUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACxxxxxxxxxxAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUCCCCCCCCCCGAUUUCGACU\
) } def
/len { sequence length } bind def

/coor [
[81.19833374 396.34063721]
[67.35239410 390.32458496]
[55.64373016 380.79516602]
[46.94120789 368.45950317]
[41.89060593 354.23300171]
[40.86671448 339.17129517]
[43.94551086 324.39215088]
[50.89853287 310.99221802]
[61.20981979 299.96588135]
[74.11419678 292.13137817]
[88.65408325 288.07006836]
[88.65408325 273.07006836]
[88.65408325 258.07006836]
[88.65408325 243.07006836]
[88.65408325 228.07006836]
[88.65408325 213.07006836]
[88.65408325 198.07006836]
[88.65408325 183.07006836]
[88.65408325 168.07006836]
[88.65408325 153.07006836]
[76.20346832 161.43559265]
[61.64004135 165.02818298]
[46.72727585 163.41281128]
[33.27093124 156.78507996]
[22.90041733 145.94752502]
[16.87148094 132.21246338]
[15.91415596 117.24304962]
[20.14436340 102.85189819]
[29.04987717 90.78160858]
[41.55233765 82.49375916]
[56.13784790 78.99191284]
[71.04026794 80.70010376]
[84.45175934 87.40901184]
[78.10462952 73.81805420]
[65.25470734 64.58820343]
[66.87975311 49.78251266]
[55.01033020 44.62783432]
[50.01951218 33.12519455]
[54.09484863 21.69282913]
[48.03183365 7.97277546]
[41.96882248 -5.74727821]
[35.90580750 -19.46733093]
[23.25068855 -28.96251488]
[25.18339157 -43.73119736]
[19.12037849 -57.45124817]
[13.05736542 -71.17130280]
[-1.47209704 -67.31887054]
[-16.42534256 -65.78691101]
[-31.43413544 -66.61312866]
[-46.12886810 -69.77719116]
[-60.14767456 -75.20117950]
[-73.14532471 -82.75151825]
[-84.80173492 -92.24227905]
[-94.82986450 -103.43973541]
[-102.98275757 -116.06814575]
[-109.05964661 -129.81652832]
[-112.91087341 -144.34631348]
[-114.44161224 -159.29968262]
[-113.61415100 -174.30841064]
[-110.44887543 -189.00288391]
[-105.02373505 -203.02124023]
[-97.47232056 -216.01826477]
[-87.98059845 -227.67388916]
[-76.78231049 -237.70109558]
[-64.15322876 -245.85295105]
[-50.40434647 -251.92869568]
[-35.87424850 -255.77873230]
[-20.92074966 -257.30822754]
[-5.91209459 -256.47952271]
[8.78211689 -253.31304932]
[22.80002594 -247.88674927]
[35.79642868 -240.33425903]
[47.45127487 -230.84158325]
[57.47755814 -219.64247131]
[65.62837219 -207.01271057]
[71.70298767 -193.26332092]
[75.55181885 -178.73291016]
[77.08008575 -163.77928162]
[76.25014496 -148.77069092]
[73.08244324 -134.07675171]
[67.65499115 -120.05928802]
[60.10143280 -107.06350708]
[50.60779190 -95.40943909]
[39.40784836 -85.38408661]
[26.77742004 -77.23431396]
[32.84043121 -63.51426315]
[38.90344620 -49.79420853]
[51.12489700 -41.28037643]
[49.62586212 -25.53034401]
[55.68887329 -11.81029129]
[61.75188828 1.90976250]
[67.81490326 15.62981606]
[82.51449585 25.16511154]
[80.47070312 43.43538284]
[92.86663055 51.69311905]
[91.69557953 67.47092438]
[98.04270935 81.06188202]
[112.11422729 86.25729370]
[125.77046967 80.05188751]
[139.42671204 73.84648132]
[146.38517761 59.39105988]
[162.05688477 55.95922089]
[174.41981506 66.18357849]
[173.99020386 82.22087860]
[161.09759521 91.76867676]
[145.63211060 87.50272369]
[131.97587585 93.70812988]
[118.31963348 99.91353607]
[118.78744507 107.39893341]
[119.72307587 122.36972046]
[120.19088745 129.85511780]
[134.51348877 134.31193542]
[152.34140015 129.82356262]
[163.77146912 143.10337830]
[178.18368530 147.26126099]
[192.59590149 151.41914368]
[207.00811768 155.57704163]
[221.69079590 149.11184692]
[235.83250427 156.68757629]
[238.58494568 172.49275208]
[227.83666992 184.40299988]
[211.83283997 183.28181458]
[202.85023499 169.98925781]
[188.43801880 165.83135986]
[174.02580261 161.67347717]
[159.61358643 157.51559448]
[148.83503723 163.09504700]
[136.76454163 159.70062256]
[130.05667114 148.63453674]
[115.73407745 144.17771912]
[103.65408325 153.07006836]
[103.65408325 168.07006836]
[103.65408325 183.07006836]
[103.65408325 198.07006836]
[103.65408325 213.07006836]
[103.65408325 228.07006836]
[103.65408325 243.07006836]
[103.65408325 258.07006836]
[103.65408325 273.07006836]
[103.65408325 288.07006836]
[118.19396973 292.13137817]
[131.09835815 299.96588135]
[141.40963745 310.99221802]
[148.36265564 324.39215088]
[151.44145203 339.17129517]
[150.41757202 354.23300171]
[145.36695862 368.45950317]
[136.66444397 380.79516602]
[124.95578003 390.32458496]
[111.10984039 396.34063721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 97]
[34 96]
[36 94]
[39 92]
[40 91]
[41 90]
[42 89]
[44 87]
[45 86]
[46 85]
[98 108]
[99 107]
[100 106]
[111 130]
[112 129]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
