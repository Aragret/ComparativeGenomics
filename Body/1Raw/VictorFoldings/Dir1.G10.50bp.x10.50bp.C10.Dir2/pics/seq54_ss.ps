%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCUCCAUGGGGGGGGGGGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACxxxxxxxxxxCCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCCCCCCCCCCCAGCUCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[101.66407013 696.86065674]
[89.10585022 688.50952148]
[79.01962280 677.29705811]
[72.03942871 663.92816162]
[68.60404968 649.24316406]
[68.92942047 634.16522217]
[72.99510956 619.64208984]
[80.54552460 606.58673096]
[91.10605621 595.81982422]
[104.01285553 588.01818848]
[118.45458221 583.67224121]
[117.83060455 568.68524170]
[117.20662689 553.69824219]
[116.58264923 538.71118164]
[115.95867157 523.72418213]
[115.33469391 508.73718262]
[114.71071625 493.75015259]
[114.08673859 478.76315308]
[113.46276093 463.77612305]
[112.83878326 448.78912354]
[112.21480560 433.80209351]
[99.37306976 422.98785400]
[98.27312469 405.89767456]
[110.07789612 393.02969360]
[109.14226532 378.05892944]
[108.20664215 363.08813477]
[107.27101135 348.11734009]
[106.33538055 333.14654541]
[91.84136963 329.47439575]
[79.17487335 321.49130249]
[69.58306885 309.96838379]
[64.01498413 296.02612305]
[63.02760315 281.02517700]
[66.73018646 266.43389893]
[74.77231598 253.68428040]
[86.37705994 244.03169250]
[100.41596222 238.43109131]
[99.48033142 223.46031189]
[90.96423340 211.24043274]
[97.82567596 196.98451233]
[89.30957794 184.76464844]
[96.17102051 170.50872803]
[85.68396759 156.47229004]
[93.92935944 140.04081726]
[92.68248749 125.09272766]
[91.43560791 110.14463806]
[84.52861023 96.82948303]
[73.02680969 87.20095825]
[61.52500534 77.57243347]
[50.02320099 67.94390106]
[35.00469589 71.84571075]
[20.57338333 66.14335632]
[12.27839851 53.02951431]
[13.30933285 37.54672623]
[23.26977158 25.64843369]
[38.32971954 21.90978050]
[52.69832611 27.76835060]
[60.85055923 40.97140503]
[59.65172958 56.44210052]
[71.15353394 66.07062531]
[82.65533447 75.69915771]
[94.15714264 85.32768250]
[101.31843567 83.09927368]
[115.64103699 78.64245605]
[122.80233765 76.41404724]
[126.81007385 61.95936203]
[130.81781006 47.50467300]
[134.82556152 33.04998398]
[138.83329773 18.59529495]
[125.62776184 11.33509254]
[114.45290375 1.22473526]
[105.91137695 -11.19053745]
[100.46380615 -25.24118423]
[98.40397644 -40.16947556]
[99.84297180 -55.17034149]
[104.70318604 -69.43480682]
[112.72251892 -82.19361115]
[123.46849060 -92.75868225]
[136.36158752 -100.56025696]
[150.70651245 -105.17761993]
[165.72964478 -106.36174774]
[180.62081909 -104.04878998]
[194.57696533 -98.36347198]
[206.84544373 -89.61241150]
[216.76463318 -78.26752472]
[223.79960632 -64.94064331]
[227.57098389 -50.35046005]
[227.87536621 -35.28380585]
[224.69633484 -20.55320740]
[218.20535278 -6.95306730]
[208.75245667 4.78317642]
[196.84742737 14.02260208]
[183.13229370 20.26693916]
[168.34667969 23.17943954]
[153.28797913 22.60303497]
[149.28024292 37.05772400]
[145.27250671 51.51241302]
[141.26475525 65.96710205]
[137.25701904 80.42179108]
[125.80699921 106.10549927]
[106.38369751 108.89776611]
[107.63056946 123.84584808]
[108.87744904 138.79394531]
[118.22678375 147.74064636]
[118.92461395 160.25991821]
[111.14180756 169.57310486]
[119.72483063 182.86378479]
[112.79646301 196.04888916]
[121.37948608 209.33956909]
[114.45111847 222.52467346]
[115.38674927 237.49546814]
[130.01373291 241.30453491]
[142.72998047 249.43713379]
[152.29696655 261.08624268]
[157.78746033 275.10299683]
[158.67549133 290.11010742]
[154.88665771 304.63717651]
[146.80416870 317.26467896]
[135.23019409 326.76272583]
[121.30617523 332.21090698]
[122.24180603 347.18170166]
[123.17742920 362.15249634]
[124.11306000 377.12329102]
[125.04869080 392.09408569]
[136.13439941 399.81188965]
[140.66517639 412.32989502]
[137.19038391 424.97900391]
[127.20182037 433.17813110]
[127.82579803 448.16513062]
[128.44978333 463.15216064]
[129.07376099 478.13916016]
[129.69773865 493.12619019]
[130.32171631 508.11318970]
[130.94569397 523.10021973]
[131.56967163 538.08721924]
[132.19363403 553.07421875]
[132.81761169 568.06127930]
[133.44158936 583.04827881]
[148.19459534 586.17871094]
[161.70523071 592.88049316]
[173.12422180 602.73223877]
[181.73373413 615.11480713]
[186.99258423 629.24969482]
[188.57019043 644.24841309]
[186.36737061 659.16815186]
[180.52262878 673.07104492]
[171.40335083 685.08306885]
[159.58277893 694.44921875]
[145.80397034 700.58074951]
[130.93307495 703.09216309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 124]
[25 123]
[26 122]
[27 121]
[28 120]
[37 111]
[38 110]
[40 108]
[42 106]
[44 103]
[45 102]
[46 101]
[47 62]
[48 61]
[49 60]
[50 59]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
