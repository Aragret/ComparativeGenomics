%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUCCUAUGGGGGGGGGGCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCxxxxxxxxxxAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGACCCCCCCCCCUAUUUCCUAU\
) } def
/len { sequence length } bind def

/coor [
[105.24689484 361.13726807]
[91.40096283 355.12124634]
[79.69229889 345.59182739]
[70.98977661 333.25616455]
[65.93917084 319.02963257]
[64.91528320 303.96795654]
[67.99407959 289.18881226]
[74.94709778 275.78887939]
[85.25838470 264.76254272]
[98.16276550 256.92803955]
[112.70265198 252.86672974]
[112.70265198 237.86672974]
[112.70265198 222.86672974]
[112.70265198 207.86672974]
[112.70265198 192.86672974]
[112.70265198 177.86672974]
[112.70265198 162.86672974]
[112.70265198 147.86672974]
[112.70265198 132.86672974]
[112.70265198 117.86672211]
[101.36344910 128.06253052]
[82.94400024 129.72322083]
[68.92728424 135.06474304]
[54.91057205 140.40625000]
[40.89385605 145.74775696]
[35.93815994 160.57931519]
[22.58137512 168.71138000]
[7.13017321 166.30422974]
[-3.11986279 154.49446106]
[-3.32897925 138.85826111]
[6.60156250 126.77860260]
[21.98286438 123.95909882]
[35.55234528 131.73104858]
[49.56905746 126.38954163]
[63.58576965 121.04802704]
[77.60248566 115.70651245]
[77.36846161 108.21016693]
[76.66639709 85.72112274]
[62.34380341 81.26430511]
[48.02120590 76.80748749]
[38.83083344 77.24213409]
[33.44874573 72.10610962]
[19.22196579 67.35229492]
[3.27019906 71.15665436]
[-7.80227232 59.05986023]
[-2.60503817 43.50605392]
[13.51543236 40.49566269]
[23.97578049 53.12551498]
[38.20256042 57.87932968]
[52.47801971 62.48489380]
[66.80062103 66.94171143]
[81.12321472 71.39852142]
[109.91384125 73.71159363]
[121.15007019 94.23355865]
[130.65843201 82.63221741]
[140.16677856 71.03087616]
[149.67514038 59.42953873]
[159.18350220 47.82819748]
[168.69186401 36.22685623]
[158.02359009 25.66642952]
[148.39111328 14.15340424]
[139.87905884 1.78895867]
[132.56225586 -11.31824589]
[126.50499725 -25.05302048]
[121.76050568 -39.29465866]
[118.37048340 -53.91800690]
[116.36473083 -68.79454803]
[115.76086426 -83.79354095]
[116.56420135 -98.78317261]
[118.76766968 -113.63171387]
[122.35191345 -128.20867920]
[127.28543091 -142.38594055]
[133.52485657 -156.03892517]
[141.01538086 -169.04763794]
[149.69114685 -181.29776001]
[159.47592163 -192.68162537]
[170.28372192 -203.09921265]
[182.01956177 -212.45893860]
[194.58030701 -220.67857361]
[207.85554504 -227.68586731]
[221.72865295 -233.41925049]
[236.07768250 -237.82830811]
[250.77653503 -240.87432861]
[265.69601440 -242.53053284]
[280.70504761 -242.78234863]
[295.67172241 -241.62757874]
[310.46447754 -239.07635498]
[324.95333862 -235.15112305]
[339.01095581 -229.88636780]
[352.51382446 -223.32835388]
[365.34323120 -215.53471375]
[377.38644409 -206.57392883]
[388.53762817 -196.52478027]
[398.69876099 -185.47555542]
[407.78060913 -173.52336121]
[415.70330811 -160.77325439]
[422.39721680 -147.33726501]
[427.80355835 -133.33348083]
[431.87478638 -118.88495636]
[434.57513428 -104.11869049]
[435.88085938 -89.16444397]
[435.78048706 -74.15363312]
[434.27490234 -59.21818161]
[431.37734985 -44.48934555]
[427.11328125 -30.09656143]
[421.52017212 -16.16631889]
[414.64718628 -2.82104135]
[406.55471802 9.82199192]
[397.31387329 21.65166855]
[387.00585938 32.56402969]
[375.72128296 42.46317291]
[363.55932617 51.26210403]
[350.62686157 58.88349533]
[337.03753662 65.26036835]
[322.91076660 70.33667755]
[308.37069702 74.06781769]
[293.54516602 76.42098999]
[278.56439209 77.37552643]
[263.56005859 76.92303467]
[248.66404724 75.06748199]
[234.00724792 71.82518005]
[219.71846008 67.22463226]
[205.92326355 61.30625916]
[192.74290466 54.12207413]
[180.29319763 45.73521423]
[170.78483582 57.33655548]
[161.27648926 68.93789673]
[151.76812744 80.53923798]
[142.25976562 92.14057922]
[132.75140381 103.74192047]
[127.70265198 117.86672211]
[127.70265198 132.86672974]
[127.70265198 147.86672974]
[127.70265198 162.86672974]
[127.70265198 177.86672974]
[127.70265198 192.86672974]
[127.70265198 207.86672974]
[127.70265198 222.86672974]
[127.70265198 237.86672974]
[127.70265198 252.86672974]
[142.24253845 256.92803955]
[155.14692688 264.76254272]
[165.45820618 275.78887939]
[172.41122437 289.18881226]
[175.49002075 303.96795654]
[174.46614075 319.02963257]
[169.41552734 333.25616455]
[160.71301270 345.59182739]
[149.00434875 355.12124634]
[135.15840149 361.13726807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 36]
[23 35]
[24 34]
[25 33]
[38 52]
[39 51]
[40 50]
[42 49]
[43 48]
[54 130]
[55 129]
[56 128]
[57 127]
[58 126]
[59 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
