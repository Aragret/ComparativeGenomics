%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAACCAAGGGGGGGGGGACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUxxxxxxxxxxCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACCCCCCCCCCCAAUCAACCAA\
) } def
/len { sequence length } bind def

/coor [
[22.86278534 274.44076538]
[12.45007706 269.45425415]
[2.35813975 263.84689331]
[-7.37605286 257.63919067]
[-16.71683693 250.85395813]
[-25.62998581 243.51599121]
[-34.08284760 235.65222168]
[-42.04444885 227.29142761]
[-49.48562241 218.46426392]
[-56.37910080 209.20307922]
[-62.69963074 199.54177856]
[-70.97014618 213.02914429]
[-85.85482788 212.48558044]
[-98.94798279 219.80468750]
[-112.04113770 227.12379456]
[-125.13429260 234.44290161]
[-138.22744751 241.76200867]
[-151.32060242 249.08111572]
[-159.59111023 262.56848145]
[-174.47579956 262.02493286]
[-174.60858154 277.38323975]
[-182.41656494 290.60937500]
[-195.79943848 298.14559937]
[-211.15725708 297.96466064]
[-224.35887146 290.11526489]
[-231.85308838 276.70883179]
[-231.62402344 261.35165405]
[-223.73327637 248.17471313]
[-210.30343628 240.72254944]
[-194.94703674 240.99975586]
[-181.79490662 248.93176270]
[-174.46089172 235.96791077]
[-158.63970947 235.98796082]
[-145.54655457 228.66885376]
[-132.45339966 221.34974670]
[-119.36024475 214.03063965]
[-106.26708984 206.71153259]
[-93.17393494 199.39242554]
[-85.83992767 186.42857361]
[-70.01873779 186.44862366]
[-79.11696625 165.55033875]
[-85.65733337 143.71598816]
[-89.54645538 121.25736237]
[-90.72878265 98.49516296]
[-89.18743896 75.75445557]
[-84.94443512 53.35998535]
[-78.06035614 31.63154984]
[-68.63350677 10.87944031]
[-56.79851913 -8.59999657]
[-42.72438812 -26.52858734]
[-26.61210442 -42.65030289]
[-36.12046432 -54.25164413]
[-45.62882233 -65.85298920]
[-55.13718033 -77.45433044]
[-70.44979858 -75.57624054]
[-84.33702850 -82.29550171]
[-92.36750031 -95.46801758]
[-91.97872162 -110.89048004]
[-83.29474640 -123.64163971]
[-69.08660889 -129.65266418]
[-53.88806534 -127.00542450]
[-42.54891968 -116.54467773]
[-38.68745041 -101.60839081]
[-43.53583908 -86.96268463]
[-34.02748108 -75.36134338]
[-24.51912117 -63.76000595]
[-15.01076317 -52.15866470]
[-2.45492721 -60.88108063]
[10.75915337 -68.56988525]
[24.54658127 -75.17567444]
[38.81877518 -80.65600586]
[53.48404312 -84.97567749]
[68.44816589 -88.10692596]
[83.61499786 -90.02964783]
[98.88709259 -90.73147583]
[114.16634369 -90.20790863]
[129.35458374 -88.46231079]
[144.35421753 -85.50589752]
[159.06889343 -81.35765839]
[173.40406799 -76.04424286]
[187.26765442 -69.59980011]
[200.57055664 -62.06571960]
[213.22732544 -53.49041748]
[225.15663147 -43.92897797]
[236.28186035 -33.44283676]
[246.53149414 -22.09936333]
[258.42388916 -31.24109840]
[270.31625366 -40.38283157]
[282.20864868 -49.52456665]
[294.10101318 -58.66630173]
[290.12020874 -73.33673859]
[292.06152344 -88.41320038]
[299.62890625 -101.59664154]
[311.66839600 -110.87667847]
[326.34405518 -114.83818054]
[341.41796875 -112.87703705]
[354.59143066 -105.29232025]
[363.85562134 -93.24063110]
[367.79782104 -78.55977631]
[365.81683350 -63.48846817]
[358.21481323 -50.32498550]
[346.15093994 -41.07665253]
[331.46490479 -37.15377426]
[316.39624023 -39.15456772]
[303.24273682 -46.77392197]
[291.35037231 -37.63218689]
[279.45797729 -28.49045181]
[267.56561279 -19.34871864]
[255.67323303 -10.20698452]
[262.05578613 -0.58655047]
[267.84460449 9.40241718]
[273.01846313 19.72332001]
[277.55841064 30.33834648]
[281.44781494 41.20859909]
[284.67239380 52.29425812]
[287.22039795 63.55470276]
[289.08242798 74.94867706]
[290.25170898 86.43443298]
[290.72390747 97.96989441]
[290.49734497 109.51279449]
[289.57284546 121.02084351]
[287.95373535 132.45187378]
[285.64602661 143.76399231]
[282.65811157 154.91578674]
[279.00100708 165.86636353]
[274.68801880 176.57562256]
[269.73504639 187.00431824]
[264.16015625 197.11424255]
[257.98382568 206.86836243]
[251.22866821 216.23091125]
[243.91941833 225.16763306]
[236.08287048 233.64575195]
[227.74774170 241.63420105]
[218.94456482 249.10372925]
[209.70559692 256.02697754]
[200.06468201 262.37854004]
[190.05714417 268.13519287]
[179.71965027 273.27581787]
[169.09007263 277.78158569]
[158.20735168 281.63601685]
[147.11138916 284.82492065]
[135.84280396 287.33666992]
[124.44289398 289.16204834]
[112.95343781 290.29437256]
[101.41651154 290.72946167]
[89.87440491 290.46575928]
[78.36939240 289.50421143]
[66.94363403 287.84835815]
[55.63898468 285.50427246]
[44.49687195 282.48049927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 40]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[20 31]
[51 67]
[52 66]
[53 65]
[54 64]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
