%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAAAGAACCGGGGGGGGGGCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACxxxxxxxxxxAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGCCCCCCCCCCAAAAAAAGAACC\
) } def
/len { sequence length } bind def

/coor [
[102.33404541 410.39178467]
[88.17344666 405.23678589]
[75.58370209 396.95455933]
[65.24375916 385.99179077]
[57.71125031 372.93966675]
[53.39238358 358.50207520]
[52.52007675 343.45761108]
[55.14136505 328.61761475]
[61.11489487 314.78237915]
[70.11851501 302.69802856]
[81.66666412 293.01626587]
[95.13658142 286.25918579]
[109.80184174 282.79119873]
[109.80184174 267.79119873]
[109.80184174 252.79119873]
[109.80184174 237.79119873]
[109.80184174 222.79119873]
[109.80184174 207.79119873]
[109.80184174 192.79119873]
[109.80184174 177.79119873]
[109.80184174 162.79119873]
[109.80184174 147.79119873]
[109.80184174 132.79119873]
[96.78038025 133.09269714]
[84.97016907 128.55969238]
[76.04068756 120.13618469]
[71.13756561 109.29206848]
[70.73922729 97.77236176]
[56.57025146 92.84893799]
[42.40127563 87.92550659]
[33.20762634 88.05950928]
[27.99677277 82.75605011]
[13.93049145 77.54647064]
[-0.13579091 72.33689117]
[-15.76413727 74.79969025]
[-25.01195908 63.12377167]
[-39.07823944 57.91419601]
[-45.74351120 58.65822601]
[-50.97228622 56.24875641]
[-53.60181427 52.19792938]
[-67.44541931 46.42258453]
[-81.28902435 40.64724350]
[-95.13262939 34.87189865]
[-107.29245758 44.25455093]
[-122.51663208 46.28434753]
[-136.70993042 40.41528320]
[-146.05442810 28.22610664]
[-148.03648376 12.99564362]
[-142.12295532 -1.17918599]
[-129.90455627 -10.48542500]
[-114.66795349 -12.41974163]
[-100.51172638 -6.46181393]
[-91.24383545 5.78570461]
[-89.35728455 21.02829361]
[-75.51367950 26.80363655]
[-61.67007828 32.57897949]
[-47.82647324 38.35432434]
[-33.86865997 43.84791183]
[-19.80237961 49.05749130]
[-5.18014812 46.22206879]
[5.07378769 58.27061081]
[19.14006996 63.48019028]
[33.20635223 68.68976593]
[47.32470703 73.75653076]
[61.49367905 78.67996216]
[75.66265869 83.60338593]
[81.45555115 77.25668335]
[88.83850861 72.86006165]
[97.17848969 70.79051208]
[99.60004425 55.98726654]
[85.84291077 49.79019547]
[74.15907288 40.24292755]
[65.34515381 27.99640656]
[60.00210571 13.88562202]
[58.49422073 -1.12732875]
[60.92431259 -16.01883888]
[67.12669373 -29.77357864]
[76.67847443 -41.45372772]
[88.92839813 -50.26291656]
[103.04124451 -55.60051727]
[118.05477905 -57.10260391]
[132.94534302 -54.66676331]
[146.69769287 -48.45907211]
[158.37414551 -38.90278244]
[167.17860413 -26.64945984]
[172.51075745 -12.53455257]
[174.00704956 2.47955823]
[171.56546021 17.36918640]
[165.35246277 31.11913300]
[155.79165649 42.79190445]
[143.53494263 51.59162903]
[129.41796875 56.91833115]
[114.40328979 58.40882492]
[111.98172760 73.21206665]
[123.68093109 80.03821564]
[131.58039856 91.91719055]
[133.54766846 106.77444458]
[148.48532104 105.40822601]
[163.42297363 104.04200745]
[178.36062622 102.67578888]
[180.23899841 87.73303986]
[185.28611755 73.54358673]
[193.26594543 60.77109909]
[203.80523682 50.01296616]
[216.41105652 41.77236938]
[230.49378967 36.43473434]
[245.39479065 34.24971390]
[260.41711426 35.31949997]
[274.85809326 39.59406281]
[288.04232788 46.87347031]
[299.35317993 56.81724930]
[308.26159668 68.96031952]
[314.35095215 82.73471832]
[317.33636475 97.49619293]
[317.07827759 112.55432892]
[313.58871460 127.20482635]
[307.03091431 140.76245117]
[297.71157837 152.59310913]
[286.06661987 162.14341736]
[272.64065552 168.96673584]
[258.06164551 172.74389648]
[243.01150513 173.29823303]
[228.19413757 170.60385132]
[214.30259705 164.78672791]
[201.98658752 156.11897278]
[191.82215881 145.00598145]
[184.28472900 131.96752930]
[179.72683716 117.61344147]
[164.78918457 118.97966003]
[149.85153198 120.34587860]
[134.91387939 121.71209717]
[124.80184174 132.79119873]
[124.80184174 147.79119873]
[124.80184174 162.79119873]
[124.80184174 177.79119873]
[124.80184174 192.79119873]
[124.80184174 207.79119873]
[124.80184174 222.79119873]
[124.80184174 237.79119873]
[124.80184174 252.79119873]
[124.80184174 267.79119873]
[124.80184174 282.79119873]
[139.46710205 286.25918579]
[152.93702698 293.01626587]
[164.48518372 302.69802856]
[173.48880005 314.78237915]
[179.46232605 328.61761475]
[182.08361816 343.45761108]
[181.21130371 358.50207520]
[176.89244080 372.93966675]
[169.35992432 385.99179077]
[159.01998901 396.95455933]
[146.43025208 405.23678589]
[132.26963806 410.39178467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[28 66]
[29 65]
[30 64]
[32 63]
[33 62]
[34 61]
[36 59]
[37 58]
[40 57]
[41 56]
[42 55]
[43 54]
[69 94]
[70 93]
[97 131]
[98 130]
[99 129]
[100 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
