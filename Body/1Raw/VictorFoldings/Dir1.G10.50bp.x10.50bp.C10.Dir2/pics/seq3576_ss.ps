%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCCUCGGGGGGGGGGCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCACCCCCCCCCCAACGCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[84.65834808 353.25173950]
[70.81240845 347.23571777]
[59.10374832 337.70629883]
[50.40122223 325.37063599]
[45.35062027 311.14410400]
[44.32672882 296.08242798]
[47.40552902 281.30325317]
[54.35855103 267.90335083]
[64.66983795 256.87701416]
[77.57421875 249.04249573]
[92.11410522 244.98118591]
[92.11410522 229.98118591]
[92.11410522 214.98118591]
[92.11410522 199.98118591]
[92.11410522 184.98118591]
[92.11410522 169.98118591]
[92.11410522 154.98118591]
[92.11410522 139.98118591]
[92.11410522 124.98118591]
[92.11410522 109.98118591]
[84.06071472 122.63594818]
[72.22362518 131.84916687]
[57.97913361 136.54963684]
[42.98342514 136.19082642]
[28.98004341 130.81446838]
[17.59714699 121.04565430]
[10.15821648 108.02020264]
[7.52817059 93.25257111]
[10.01280212 78.45978546]
[17.32322693 65.36177826]
[28.60946465 55.48145676]
[42.55927658 49.96758652]
[57.55072784 49.46126556]
[71.84077454 54.02136612]
[83.76792908 63.11768341]
[91.94542694 75.69259644]
[95.42266083 90.28692627]
[100.32421112 76.11036682]
[105.22576141 61.93381119]
[110.12731171 47.75725174]
[96.33054352 41.85451889]
[82.99001312 34.98257065]
[70.17372131 27.17642403]
[57.94697571 18.47585869]
[46.37207031 8.92521095]
[35.50799942 -1.42685056]
[25.41011620 -12.52757454]
[16.12988472 -24.32039261]
[7.71459198 -36.74520874]
[0.20712130 -49.73871613]
[-6.35427046 -63.23469162]
[-11.93614769 -77.16436768]
[-16.51006699 -91.45676422]
[-20.05271721 -106.03903961]
[-22.54605103 -120.83689880]
[-23.97735786 -135.77493286]
[-24.33934784 -150.77699280]
[-23.63017273 -165.76667786]
[-21.85344887 -180.66755676]
[-19.01823044 -195.40373230]
[-15.13896275 -209.90010071]
[-10.23541641 -224.08277893]
[-4.33257771 -237.87951660]
[2.53947377 -251.21998596]
[10.34571838 -264.03622437]
[19.04637718 -276.26290894]
[28.59711456 -287.83773804]
[38.94926071 -298.70172119]
[50.05006027 -308.79953003]
[61.84294891 -318.07965088]
[74.26782990 -326.49487305]
[87.26139069 -334.00222778]
[100.75742340 -340.56350708]
[114.68714142 -346.14529419]
[128.97956848 -350.71908569]
[143.56187439 -354.26162720]
[158.35975647 -356.75485229]
[173.29779053 -358.18603516]
[188.29986572 -358.54791260]
[203.28953552 -357.83862305]
[218.19041443 -356.06179810]
[232.92655945 -353.22647095]
[247.42289734 -349.34707642]
[261.60552979 -344.44342041]
[275.40222168 -338.54049683]
[288.74264526 -331.66833496]
[301.55880737 -323.86199951]
[313.78543091 -315.16122437]
[325.36019897 -305.61041260]
[336.22412109 -295.25817871]
[346.32180786 -284.15731812]
[355.60186768 -272.36434937]
[364.01696777 -259.93939209]
[371.52423096 -246.94578552]
[378.08541870 -233.44970703]
[383.66708374 -219.51994324]
[388.24078369 -205.22747803]
[391.78323364 -190.64514160]
[394.27633667 -175.84724426]
[395.70739746 -160.90919495]
[396.06915283 -145.90711975]
[395.35977173 -130.91744995]
[393.58279419 -116.01659393]
[390.74737549 -101.28046417]
[386.86785889 -86.78415680]
[381.96411133 -72.60154724]
[376.06106567 -58.80490875]
[369.18881226 -45.46454620]
[361.38235474 -32.64843369]
[352.68151855 -20.42188263]
[343.13058472 -8.84719849]
[332.77828979 2.01663685]
[321.67733765 12.11426258]
[309.88430786 21.39422417]
[297.45928955 29.80923080]
[284.46560669 37.31640244]
[270.96948242 43.87748337]
[257.03967285 49.45904160]
[242.74717712 54.03263092]
[228.16481018 57.57494736]
[213.36689758 60.06793976]
[198.42884827 61.49890518]
[183.42675781 61.86054611]
[168.43710327 61.15102768]
[153.53625488 59.37396240]
[138.80014038 56.53840637]
[124.30387115 52.65880585]
[119.40232086 66.83536530]
[114.50077057 81.01191711]
[109.59922028 95.18847656]
[107.11410522 109.98118591]
[107.11410522 124.98118591]
[107.11410522 139.98118591]
[107.11410522 154.98118591]
[107.11410522 169.98118591]
[107.11410522 184.98118591]
[107.11410522 199.98118591]
[107.11410522 214.98118591]
[107.11410522 229.98118591]
[107.11410522 244.98118591]
[121.65399170 249.04249573]
[134.55836487 256.87701416]
[144.86965942 267.90335083]
[151.82267761 281.30325317]
[154.90147400 296.08242798]
[153.87757874 311.14410400]
[148.82698059 325.37063599]
[140.12445068 337.70629883]
[128.41580200 347.23571777]
[114.56985474 353.25173950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[37 130]
[38 129]
[39 128]
[40 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
