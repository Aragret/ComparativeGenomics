%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCCUAGGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCCCCCCCCCCCAUCAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[73.42813873 393.96444702]
[60.20794296 386.69198608]
[49.32114029 376.24496460]
[41.51000977 363.33572388]
[37.30712891 348.84442139]
[36.99905777 333.75906372]
[40.60679626 319.10824585]
[47.88437271 305.89086914]
[58.33557892 295.00808716]
[71.24784088 287.20193481]
[85.74077606 283.00466919]
[85.42871857 268.00790405]
[85.11666107 253.01115417]
[84.80461121 238.01440430]
[84.49255371 223.01763916]
[84.18049622 208.02088928]
[83.86843872 193.02413940]
[83.55638123 178.02738953]
[83.24432373 163.03062439]
[82.93227386 148.03387451]
[82.62021637 133.03712463]
[71.01887512 123.52876282]
[56.25281906 126.16763306]
[41.48676300 128.80648804]
[26.72070694 131.44535828]
[19.88169289 145.24876404]
[6.38392639 152.29602051]
[-8.49929428 150.07031250]
[-19.09126282 139.63249207]
[-33.85731888 142.27134705]
[-42.68556213 155.38003540]
[-58.21309662 158.32472229]
[-71.22771454 149.35838318]
[-74.00807190 133.80058289]
[-64.90463257 120.88149261]
[-49.31830597 118.26577759]
[-36.49618149 127.50529480]
[-21.73012733 124.86643219]
[-15.40904331 111.40604401]
[-2.21797180 104.16314697]
[12.88519192 106.09907532]
[24.08184242 116.67930603]
[38.84789658 114.04043579]
[53.61395264 111.40157318]
[68.38001251 108.76271057]
[69.57401276 92.59550476]
[78.13871765 79.72448730]
[91.25463867 73.06560516]
[105.19986725 73.68799591]
[112.10686493 60.37283707]
[119.01386261 47.05768204]
[125.92086029 33.74252701]
[116.57662201 8.49511909]
[135.96438599 -14.10668755]
[132.56141663 -28.71557999]
[117.51396942 -28.31661415]
[102.69429016 -30.95518494]
[88.70924377 -36.52324295]
[76.13150024 -44.79278183]
[65.47611237 -55.42517090]
[57.17941666 -67.98501587]
[51.58115768 -81.95800018]
[48.91057205 -96.77194214]
[49.27702713 -111.82022095]
[52.66551208 -126.48661041]
[58.93727112 -140.17054749]
[67.83548737 -152.31166077]
[78.99576569 -162.41279602]
[91.96112061 -170.06030273]
[106.20062256 -174.94105530]
[121.13116455 -176.85514832]
[136.14135742 -175.72421265]
[150.61654663 -171.59457397]
[163.96395874 -164.63533020]
[175.63706970 -155.13145447]
[185.15783691 -143.47213745]
[192.13639832 -130.13479614]
[196.28698730 -115.66561127]
[197.43965149 -100.65706635]
[195.54718018 -85.72377014]
[190.68705750 -71.47721863]
[183.05831909 -58.50080872]
[172.97335815 -47.32590866]
[160.84513855 -38.41012573]
[147.17030334 -32.11855698]
[150.57328796 -17.50966454]
[164.22952271 -11.30425835]
[177.47210693 -18.34939384]
[190.71469116 -25.39452744]
[203.95729065 -32.43966293]
[217.19987488 -39.48479843]
[230.44245911 -46.52993393]
[243.68504333 -53.57506943]
[241.54734802 -68.58193207]
[244.67427063 -83.41426849]
[252.68820190 -96.28099823]
[264.62142944 -105.62840271]
[279.03295898 -110.32772827]
[294.18252563 -109.81151581]
[308.24072266 -104.14210510]
[319.51000977 -94.00409698]
[326.62951660 -80.62170410]
[328.73956299 -65.61092377]
[325.58532715 -50.78437424]
[317.54766846 -37.93243408]
[305.59725952 -28.60704231]
[291.17709351 -23.93428040]
[276.02850342 -24.47840881]
[261.98074341 -30.17372131]
[250.73017883 -40.33248138]
[237.48759460 -33.28734589]
[224.24501038 -26.24221230]
[211.00242615 -19.19707680]
[197.75982666 -12.15194225]
[184.51724243 -5.10680771]
[171.27465820 1.93832731]
[173.48074341 12.92174625]
[171.60832214 23.61469650]
[166.15960693 32.60036850]
[158.09326172 38.78043747]
[148.66506958 41.50794220]
[139.23600769 40.64952469]
[132.32901001 53.96467972]
[125.42201996 67.27983856]
[118.51502228 80.59499359]
[127.77762604 94.49124146]
[127.25752258 112.08468628]
[116.11030579 126.85191345]
[97.61696625 132.72506714]
[97.92902374 147.72181702]
[98.24108124 162.71858215]
[98.55313873 177.71533203]
[98.86519623 192.71208191]
[99.17724609 207.70883179]
[99.48930359 222.70559692]
[99.80136108 237.70234680]
[100.11341858 252.69909668]
[100.42547607 267.69586182]
[100.73753357 282.69259644]
[115.39252472 286.28338623]
[128.61833191 293.54562378]
[139.51319885 303.98422241]
[147.33428955 316.88745117]
[151.54837036 331.37548828]
[151.86808777 346.46060181]
[148.27166748 361.11419678]
[141.00430298 374.33721924]
[130.56149292 385.22805786]
[117.65526581 393.04415894]
[103.16558075 397.25262451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 45]
[23 44]
[24 43]
[25 42]
[29 38]
[30 37]
[49 125]
[50 124]
[51 123]
[52 122]
[54 86]
[55 85]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
