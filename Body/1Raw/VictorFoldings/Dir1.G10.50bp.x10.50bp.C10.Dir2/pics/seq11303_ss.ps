%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUAAUCACGGGGGGGGGGAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACxxxxxxxxxxACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCCCCCCCCCCCUCCAAAUCAC\
) } def
/len { sequence length } bind def

/coor [
[60.71250153 414.55212402]
[47.22362137 407.82058716]
[35.73812103 398.05603027]
[26.92375183 385.82614136]
[21.29296875 371.84191895]
[19.17314148 356.91647339]
[20.68750954 341.91744995]
[25.74803352 327.71694946]
[34.06049728 315.14053345]
[45.14162827 304.91937256]
[58.34718323 297.64773560]
[72.90940857 293.74835205]
[72.60143280 278.75152588]
[72.29344940 263.75469971]
[71.98547363 248.75784302]
[71.67749786 233.76101685]
[71.36952209 218.76417542]
[71.06154633 203.76733398]
[70.75356293 188.77049255]
[70.44558716 173.77366638]
[70.13761139 158.77682495]
[69.82963562 143.77998352]
[69.52165222 128.78314209]
[87.35630035 89.01961517]
[83.39968872 74.55084991]
[68.97734833 74.13504028]
[55.27462006 69.66824341]
[43.40420532 61.52264023]
[34.32732773 50.36876297]
[28.77591515 37.12028885]
[27.19358063 22.85920143]
[29.70018387 8.74743557]
[36.08280182 -4.06780148]
[45.81378937 -14.54728699]
[58.09438324 -21.84405708]
[54.43568039 -36.39101028]
[50.77697372 -50.93796539]
[47.11826706 -65.48491669]
[32.43525314 -69.76934814]
[21.93749237 -80.75542450]
[18.37188721 -95.42351532]
[22.59872437 -109.81065369]
[33.38675308 -120.08119965]
[29.72804642 -134.62814331]
[25.92018700 -149.13677979]
[21.96357727 -163.60554504]
[18.00696754 -178.07431030]
[3.11756420 -176.07702637]
[-11.90519905 -176.08219910]
[-26.79322433 -178.08972168]
[-41.28081512 -182.06378174]
[-55.10942841 -187.93344116]
[-68.03227234 -195.59396362]
[-79.81871796 -204.90863037]
[-90.25843811 -215.71121216]
[-99.16510773 -227.80892944]
[-106.37978363 -240.98587036]
[-111.77371979 -255.00688171]
[-115.25063324 -269.62176514]
[-116.74849701 -284.56967163]
[-116.24057007 -299.58383179]
[-113.73591614 -314.39633179]
[-109.27923584 -328.74282837]
[-102.95005798 -342.36724854]
[-94.86134338 -355.02648926]
[-85.15744019 -366.49459839]
[-74.01152802 -376.56692505]
[-61.62251282 -385.06375122]
[-48.21149826 -391.83340454]
[-34.01781845 -396.75506592]
[-19.29477119 -399.74093628]
[-4.30511189 -400.73767090]
[10.68365383 -399.72756958]
[25.40403366 -396.72857666]
[39.59332275 -391.79428101]
[52.99830246 -385.01266479]
[65.37973785 -376.50482178]
[76.51667023 -366.42257690]
[86.21035767 -354.94580078]
[94.28778839 -342.27935791]
[100.60482025 -328.64932251]
[105.04871368 -314.29885864]
[107.54016876 -299.48413086]
[108.03472137 -284.46951294]
[106.52354431 -269.52294922]
[103.03359985 -254.91119385]
[97.62718201 -240.89498901]
[90.40076447 -227.72447205]
[81.48331451 -215.63470459]
[71.03398132 -204.84143066]
[59.23923492 -195.53726196]
[46.30957031 -187.88825989]
[32.47573471 -182.03091431]
[36.43234634 -167.56214905]
[40.38895416 -153.09338379]
[45.21673584 -147.43611145]
[44.27500153 -138.28684998]
[47.93370438 -123.73989868]
[62.29701614 -119.79517365]
[72.82737732 -109.11962128]
[76.62541199 -94.50998688]
[72.57419586 -79.86470032]
[61.66522217 -69.14362335]
[65.32392883 -54.59667206]
[68.98263550 -40.04971695]
[72.64134216 -25.50276184]
[88.25068665 -24.61369133]
[102.84289551 -18.94655800]
[114.99080658 -9.04279041]
[123.50238037 4.14121056]
[127.53762817 19.32641602]
[126.69154358 35.03525543]
[121.03466797 49.73538208]
[111.10741425 61.98915863]
[97.86846161 70.59423828]
[101.82507324 85.06300354]
[112.37708282 95.72391510]
[126.80446625 99.82885742]
[141.23185730 103.93379974]
[156.99505615 99.41126251]
[168.60375977 110.99444580]
[164.11592102 126.76756287]
[148.14823914 130.50459290]
[137.12690735 118.36119080]
[122.69952393 114.25624084]
[108.27214050 110.15129852]
[102.33372498 114.73226166]
[90.45690155 123.89420319]
[84.51849365 128.47517395]
[84.82646942 143.47200012]
[85.13444519 158.46884155]
[85.44242859 173.46568298]
[85.75040436 188.46252441]
[86.05838013 203.45936584]
[86.36635590 218.45619202]
[86.67433929 233.45303345]
[86.98231506 248.44987488]
[87.29029083 263.44671631]
[87.59826660 278.44354248]
[87.90625000 293.44039917]
[102.61627960 296.73861694]
[116.10923767 303.46197510]
[127.60066223 313.21957397]
[136.42243958 325.44412231]
[142.06170654 339.42489624]
[144.19058228 354.34909058]
[142.68530273 369.34899902]
[137.63339233 383.55258179]
[129.32855225 396.13403320]
[118.25361633 406.36190796]
[105.05247498 413.64154053]
[90.49261475 417.54974365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 116]
[25 115]
[35 106]
[36 105]
[37 104]
[38 103]
[43 98]
[44 97]
[45 95]
[46 94]
[47 93]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
