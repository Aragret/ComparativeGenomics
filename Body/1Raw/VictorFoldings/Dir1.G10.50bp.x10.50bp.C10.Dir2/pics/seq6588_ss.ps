%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUAUCUUAGGGGGGGGGGGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUxxxxxxxxxxACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCCCCCCCCCCCUCUAUUUUA\
) } def
/len { sequence length } bind def

/coor [
[84.98838043 460.55688477]
[70.11748505 458.04547119]
[56.33867264 451.91397095]
[44.51810074 442.54782104]
[35.39881897 430.53576660]
[29.55407524 416.63290405]
[27.35126877 401.71316528]
[28.92887497 386.71444702]
[34.18772125 372.57952881]
[42.79723740 360.19699097]
[54.21621323 350.34521484]
[67.72685242 343.64346313]
[82.47985840 340.51303101]
[83.10383606 325.52600098]
[83.72781372 310.53897095]
[84.35179138 295.55197144]
[84.97576904 280.56494141]
[85.59973907 265.57794189]
[86.22371674 250.59092712]
[86.84769440 235.60389709]
[87.47167206 220.61688232]
[88.09564972 205.62986755]
[88.71962738 190.64285278]
[81.51846313 177.60473633]
[89.82312775 164.13836670]
[90.44710541 149.15135193]
[91.07108307 134.16433716]
[78.08980560 127.69244385]
[68.80552673 116.54788208]
[64.78480530 102.61113739]
[66.70609283 88.23380280]
[74.24518585 75.84182739]
[65.73410034 63.49025345]
[57.22300720 51.13867950]
[48.71191788 38.78710556]
[35.42507553 45.78682709]
[21.40359497 51.16590500]
[6.84431934 54.84882355]
[-8.04836082 56.78387833]
[-23.06537628 56.94390869]
[-37.99591064 55.32666779]
[-52.63036346 51.95485306]
[-66.76329041 46.87580872]
[-80.19628906 40.16082764]
[-92.74077606 31.90418434]
[-104.22064972 22.22178650]
[-114.47475433 11.24955845]
[-123.35913086 -0.85846448]
[-130.74905396 -13.93230534]
[-136.54080200 -27.78842735]
[-140.65303040 -42.23231506]
[-143.02804565 -57.06119537]
[-143.63249207 -72.06689453]
[-142.45788574 -87.03875732]
[-139.52070618 -101.76660156]
[-134.86219788 -116.04366302]
[-128.54776001 -129.66952515]
[-120.66603851 -142.45291138]
[-111.32767487 -154.21434021]
[-100.66375732 -164.78871155]
[-88.82400513 -174.02757263]
[-75.97462463 -181.80123901]
[-62.29600525 -188.00056458]
[-47.98016357 -192.53851318]
[-33.22807693 -195.35140991]
[-18.24684525 -196.39973450]
[-3.24677539 -195.66879272]
[11.56155109 -193.16882324]
[25.97025108 -188.93495178]
[39.77704620 -183.02658081]
[52.78811264 -175.52668762]
[64.82079315 -166.54052734]
[75.70616913 -156.19427490]
[85.29142761 -144.63316345]
[93.44200897 -132.01951599]
[100.04348755 -118.53037262]
[105.00318146 -104.35511780]
[108.25148010 -89.69275665]
[109.74277496 -74.74911499]
[109.45613098 -59.73398590]
[107.39557648 -44.85815048]
[103.59002686 -30.33044624]
[98.09291077 -16.35482025]
[90.98140717 -3.12746763]
[82.35534668 9.16592026]
[72.33582306 20.35276413]
[61.06349182 30.27601624]
[69.57458496 42.62759018]
[78.08567047 54.97916031]
[86.59676361 67.33073425]
[103.98005676 64.91315460]
[120.38017273 71.16293335]
[131.74586487 84.53622437]
[146.31855774 80.98146820]
[160.89126587 77.42670441]
[175.46395874 73.87194061]
[189.91865540 69.86420441]
[204.24125671 65.40738678]
[218.56384277 60.95056915]
[223.39695740 56.28702927]
[229.01773071 55.00714111]
[233.57571411 56.61968231]
[248.07131958 52.76252365]
[262.56692505 48.90536499]
[277.06250000 45.04820633]
[290.81423950 35.13224792]
[304.14953613 45.60154724]
[297.78097534 61.31388474]
[280.91967773 59.54380035]
[266.42407227 63.40095901]
[251.92848206 67.25811768]
[237.43287659 71.11528015]
[223.02066040 75.27317047]
[208.69807434 79.72998047]
[194.37547302 84.18679810]
[192.41047668 87.18785095]
[188.86280823 89.35940552]
[184.15119934 89.95371246]
[179.01872253 88.44464111]
[164.44602966 91.99940491]
[149.87332153 95.55416870]
[135.30061340 99.10893250]
[133.39886475 111.46488190]
[127.31099701 122.38385773]
[117.80005646 130.49731445]
[106.05810547 134.78831482]
[105.43412781 149.77532959]
[104.81015015 164.76234436]
[111.96668243 178.87243652]
[103.70664215 191.26683044]
[103.08267212 206.25384521]
[102.45869446 221.24085999]
[101.83471680 236.22787476]
[101.21073914 251.21490479]
[100.58676147 266.20190430]
[99.96278381 281.18893433]
[99.33880615 296.17593384]
[98.71482849 311.16296387]
[98.09085083 326.14996338]
[97.46687317 341.13699341]
[111.90859985 345.48294067]
[124.81539154 353.28457642]
[135.37593079 364.05148315]
[142.92634583 377.10681152]
[146.99203491 391.62994385]
[147.31739807 406.70788574]
[143.88201904 421.39288330]
[136.90182495 434.76181030]
[126.81560516 445.97424316]
[114.25738525 454.32540894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[25 128]
[26 127]
[27 126]
[32 90]
[33 89]
[34 88]
[35 87]
[93 122]
[94 121]
[95 120]
[96 119]
[97 115]
[98 114]
[99 113]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
