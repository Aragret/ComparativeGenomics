%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCACUAAGGGGGGGGGGUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCxxxxxxxxxxUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCCCCCCCCCCCGCCCACUAA\
) } def
/len { sequence length } bind def

/coor [
[88.93801117 382.28390503]
[75.09207153 376.26788330]
[63.38341141 366.73846436]
[54.68088913 354.40280151]
[49.63028717 340.17626953]
[48.60639572 325.11459351]
[51.68519211 310.33544922]
[58.63821411 296.93551636]
[68.94950104 285.90917969]
[81.85388184 278.07467651]
[96.39376831 274.01336670]
[96.39376831 259.01336670]
[96.39376831 244.01335144]
[96.39376831 229.01335144]
[96.39376831 214.01335144]
[96.39376831 199.01335144]
[96.39376831 184.01335144]
[96.39376831 169.01335144]
[96.39376831 154.01335144]
[96.39376831 139.01335144]
[95.45813751 124.04256439]
[93.59052277 109.15928650]
[91.56819153 94.29624176]
[89.39135742 79.45503235]
[87.21451569 64.61383057]
[85.03768158 49.77262115]
[82.86083984 34.93141556]
[80.52973938 20.11365891]
[78.04462433 5.32095194]
[75.55950165 -9.47175503]
[60.61542511 -8.09814167]
[45.61048889 -7.84514713]
[30.62859917 -8.71418667]
[15.75354767 -10.70040131]
[1.06852043 -13.79268169]
[-13.34435558 -17.97373390]
[-27.40447807 -23.22017860]
[-41.03321457 -29.50267220]
[-54.15435028 -36.78607941]
[-66.69450378 -45.02967072]
[-78.58354187 -54.18734360]
[-89.75497437 -64.20788574]
[-100.14633942 -75.03525543]
[-109.69950104 -86.60889435]
[-118.36105347 -98.86408997]
[-126.08255005 -111.73229218]
[-132.82080078 -125.14154816]
[-138.53813171 -139.01686096]
[-143.20257568 -153.28063965]
[-146.78802490 -167.85310364]
[-149.27444458 -182.65275574]
[-150.64793396 -197.59684753]
[-150.90078735 -212.60179138]
[-150.03161621 -227.58367920]
[-148.04527283 -242.45870972]
[-144.95286560 -257.14370728]
[-140.77168274 -271.55654907]
[-135.52511597 -285.61660767]
[-129.24250793 -299.24530029]
[-121.95897675 -312.36636353]
[-113.71527100 -324.90646362]
[-104.55749512 -336.79541016]
[-94.53685760 -347.96676636]
[-83.70939636 -358.35803223]
[-72.13567352 -367.91110229]
[-59.88040161 -376.57254028]
[-47.01212692 -384.29391479]
[-33.60281372 -391.03204346]
[-19.72744942 -396.74926758]
[-5.46363449 -401.41357422]
[9.10886192 -404.99890137]
[23.90854263 -407.48519897]
[38.85264206 -408.85852051]
[53.85758591 -409.11126709]
[68.83946228 -408.24197388]
[83.71447754 -406.25549316]
[98.39945221 -403.16293335]
[112.81225586 -398.98162842]
[126.87228394 -393.73495483]
[140.50091553 -387.45220947]
[153.62191772 -380.16857910]
[166.16192627 -371.92474365]
[178.05079651 -362.76687622]
[189.22206116 -352.74612427]
[199.61322021 -341.91857910]
[209.16618347 -330.34478760]
[217.82752991 -318.08941650]
[225.54879761 -305.22109985]
[232.28680420 -291.81170654]
[238.00389099 -277.93630981]
[242.66807556 -263.67245483]
[246.25328064 -249.09991455]
[248.73944092 -234.30021667]
[250.11265564 -219.35609436]
[250.36524963 -204.35115051]
[249.49581909 -189.36929321]
[247.50921631 -174.49429321]
[244.41653442 -159.80934143]
[240.23510742 -145.39657593]
[234.98829651 -131.33659363]
[228.70544434 -117.70802307]
[221.42167664 -104.58708191]
[213.17776489 -92.04714966]
[204.01977539 -80.15834808]
[193.99893188 -68.98718262]
[183.17129517 -58.59610748]
[171.59739685 -49.04324722]
[159.34197998 -40.38201904]
[146.47357178 -32.66086578]
[133.06413269 -25.92296600]
[119.18866730 -20.20600128]
[104.92476654 -15.54194260]
[90.35221100 -11.95687389]
[92.83732605 2.83583355]
[95.32244873 17.62854004]
[99.55966187 23.74341393]
[97.70204926 32.75458145]
[99.87888336 47.59578705]
[102.05572510 62.43699265]
[104.23255920 77.27819824]
[106.40939331 92.11940002]
[110.62660980 99.05475616]
[108.47380829 107.29167175]
[110.34141541 122.17494965]
[120.69093323 111.31735229]
[135.68078613 110.76566315]
[146.80043030 120.83311462]
[147.73663330 135.80386353]
[137.95787048 147.17822266]
[123.01607513 148.49833679]
[111.39376831 139.01335144]
[111.39376831 154.01335144]
[111.39376831 169.01335144]
[111.39376831 184.01335144]
[111.39376831 199.01335144]
[111.39376831 214.01335144]
[111.39376831 229.01335144]
[111.39376831 244.01335144]
[111.39376831 259.01336670]
[111.39376831 274.01336670]
[125.93365479 278.07467651]
[138.83802795 285.90917969]
[149.14932251 296.93551636]
[156.10234070 310.33544922]
[159.18113708 325.11459351]
[158.15724182 340.17626953]
[153.10664368 354.40280151]
[144.40412903 366.73846436]
[132.69546509 376.26788330]
[118.84952545 382.28390503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 124]
[22 123]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[28 115]
[29 114]
[30 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
