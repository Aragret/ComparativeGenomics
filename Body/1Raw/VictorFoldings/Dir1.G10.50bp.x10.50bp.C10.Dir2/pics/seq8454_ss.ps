%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCACUCAGGGGGGGGGGUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUxxxxxxxxxxUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGCCCCCCCCCCGGCUCACUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 326.33206177]
[71.19830322 320.31604004]
[59.48964310 310.78662109]
[50.78712082 298.45092773]
[45.73651886 284.22442627]
[44.71262741 269.16275024]
[47.79142761 254.38357544]
[54.74444962 240.98364258]
[65.05573273 229.95732117]
[77.96011353 222.12280273]
[92.50000000 218.06149292]
[92.50000000 203.06149292]
[92.50000000 188.06149292]
[92.50000000 173.06149292]
[92.50000000 158.06149292]
[92.50000000 143.06149292]
[92.50000000 128.06149292]
[92.50000000 113.06149292]
[81.30423737 103.07876587]
[66.40232849 104.79145813]
[51.50043106 106.50415039]
[36.59852600 108.21683502]
[21.69662476 109.92952728]
[6.79472256 111.64221954]
[4.42012358 126.55073547]
[-1.88973534 140.26525879]
[-11.66662121 151.76808167]
[-24.18502426 160.20562744]
[-38.51599503 164.95176697]
[-53.59608459 165.65431213]
[-68.30624390 162.26110840]
[-81.55488586 155.02397156]
[-92.35887146 144.47994995]
[-99.91646576 131.41146851]
[-103.66686249 116.78829956]
[-103.33174133 101.69557953]
[-98.93598175 87.25328064]
[-90.80577087 74.53313446]
[-79.54442596 64.47904205]
[-65.98761749 57.83709717]
[-51.14134598 55.10016632]
[-36.10730362 56.47135925]
[-22.00111771 61.84891129]
[-9.86956024 70.83378601]
[-0.61287463 82.75923157]
[5.08203268 96.74031067]
[19.98393440 95.02762604]
[34.88583755 93.31493378]
[49.78773880 91.60224152]
[64.68964386 89.88955688]
[79.59154510 88.17686462]
[69.84535980 76.77458954]
[69.01318359 61.79769135]
[77.43614960 49.38585663]
[91.66132355 44.62723923]
[105.85717773 49.47259903]
[114.20422363 61.93561935]
[113.28063965 76.90715790]
[103.46436310 88.25012207]
[114.55567932 78.15147400]
[125.64699554 68.05282593]
[136.73831177 57.95417786]
[147.82962036 47.85552597]
[158.92094421 37.75687790]
[149.95028687 25.71967697]
[142.20269775 12.86115170]
[135.75279236 -0.69486123]
[130.66268921 -14.81780624]
[126.98139191 -29.37166786]
[124.74436951 -44.21628189]
[123.97316742 -59.20867920]
[124.67521667 -74.20447540]
[126.84374237 -89.05924988]
[130.45787048 -103.62993622]
[135.48277283 -117.77620697]
[141.87008667 -131.36183167]
[149.55828857 -144.25595093]
[158.47332764 -156.33439636]
[168.52934265 -167.48085022]
[179.62950134 -177.58795166]
[191.66687012 -186.55836487]
[204.52555847 -194.30569458]
[218.08169556 -200.75532532]
[232.20474243 -205.84515381]
[246.75868225 -209.52615356]
[261.60333252 -211.76287842]
[276.59576416 -212.53378296]
[291.59152222 -211.83143616]
[306.44625854 -209.66261292]
[321.01687622 -206.04820251]
[335.16305542 -201.02299500]
[348.74853516 -194.63540649]
[361.64251709 -186.94696045]
[373.72076416 -178.03167725]
[384.86703491 -167.97543335]
[394.97390747 -156.87509155]
[403.94406128 -144.83752441]
[411.69116211 -131.97869873]
[418.14050293 -118.42242432]
[423.23007202 -104.29927063]
[426.91076660 -89.74526215]
[429.14718628 -74.90055847]
[429.91778564 -59.90813065]
[429.21514893 -44.91236115]
[427.04602051 -30.05767632]
[423.43133545 -15.48713398]
[418.40585327 -1.34106314]
[412.01797485 12.24429893]
[404.32928467 25.13811493]
[395.41375732 37.21620560]
[385.35729980 48.36225510]
[374.25674438 58.46891022]
[362.21899414 67.43883514]
[349.36001587 75.18565369]
[335.80361938 81.63475037]
[321.68035889 86.72401428]
[307.12628174 90.40443420]
[292.28152466 92.64055634]
[277.28909302 93.41085815]
[262.29333496 92.70791626]
[247.43869019 90.53850555]
[232.86820984 86.92350006]
[218.72224426 81.89773560]
[205.13700867 75.50961304]
[192.24334717 67.82064056]
[180.16543579 58.90487671]
[169.01959229 48.84819412]
[157.92826843 58.94684219]
[146.83695984 69.04549408]
[135.74565125 79.14414215]
[124.65432739 89.24279022]
[113.56301117 99.34143829]
[107.50000000 113.06149292]
[107.50000000 128.06149292]
[107.50000000 143.06149292]
[107.50000000 158.06149292]
[107.50000000 173.06149292]
[107.50000000 188.06149292]
[107.50000000 203.06149292]
[107.50000000 218.06149292]
[122.03988647 222.12280273]
[134.94427490 229.95732117]
[145.25555420 240.98364258]
[152.20857239 254.38357544]
[155.28736877 269.16275024]
[154.26348877 284.22442627]
[149.21287537 298.45092773]
[140.51036072 310.78662109]
[128.80169678 320.31604004]
[114.95575714 326.33206177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[59 132]
[60 131]
[61 130]
[62 129]
[63 128]
[64 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
