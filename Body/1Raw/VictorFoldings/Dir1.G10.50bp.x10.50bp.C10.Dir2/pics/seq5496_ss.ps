%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCUCCCUGGGGGGGGGGAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGxxxxxxxxxxUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCCCCCCCCCCCUCCUAUCCCU\
) } def
/len { sequence length } bind def

/coor [
[13.54994678 493.58547974]
[-0.61065638 488.43048096]
[-13.20040131 480.14828491]
[-23.54033852 469.18551636]
[-31.07285118 456.13339233]
[-35.39171600 441.69577026]
[-36.26402283 426.65133667]
[-33.64273453 411.81130981]
[-27.66920662 397.97610474]
[-18.66558838 385.89172363]
[-7.11743307 376.20996094]
[6.35248327 369.45288086]
[21.01774406 365.98492432]
[21.01774406 350.98492432]
[21.01774406 335.98492432]
[21.01774406 320.98492432]
[21.01774406 305.98492432]
[21.01774406 290.98492432]
[21.01774406 275.98492432]
[21.01774406 260.98492432]
[21.01774406 245.98490906]
[21.01774406 230.98490906]
[21.01774406 215.98490906]
[21.01774406 200.98490906]
[8.66128254 203.66864014]
[-2.22692466 198.98487854]
[-7.94727802 189.51696777]
[-22.88492966 188.15074158]
[-37.82258224 186.78453064]
[-44.94092941 200.18620300]
[-56.61645126 209.81559753]
[-71.05017090 214.22937012]
[-86.03351593 212.78469849]
[-99.28623962 205.73274231]
[-108.80346680 194.17558289]
[-113.15896606 179.89416504]
[-128.09661865 178.52795410]
[-143.03427124 177.16172791]
[-156.23477173 186.27908325]
[-171.55113220 181.50532532]
[-177.23394775 166.50248718]
[-168.92382812 152.77944946]
[-152.99560547 150.86337280]
[-141.66804504 162.22409058]
[-126.73040009 163.59030151]
[-111.79274750 164.95651245]
[-104.91879272 151.70216370]
[-93.46294403 142.06323242]
[-79.15084076 137.53237915]
[-64.15402985 138.82974243]
[-50.76046371 145.78863525]
[-41.02547455 157.37625122]
[-36.45636368 171.84687805]
[-21.51871300 173.21308899]
[-6.58106136 174.57931519]
[3.63824391 165.27813721]
[18.43592453 165.91674805]
[29.17319107 177.51461792]
[38.47451401 165.74662781]
[47.77584076 153.97865295]
[57.07716370 142.21066284]
[66.37848663 130.44268799]
[75.67980957 118.67470551]
[67.84334564 102.86169434]
[69.88504028 84.42417145]
[82.12073517 69.30178070]
[101.43674469 62.88167572]
[104.15782166 48.13055038]
[99.05231476 33.15575790]
[108.97003174 22.04323578]
[111.69110870 7.29210901]
[114.41218567 -7.45901775]
[101.00839996 -14.44685745]
[90.26097870 -25.07626534]
[83.12557220 -38.40208435]
[80.23666382 -53.23938751]
[81.85112762 -68.26885986]
[87.82540894 -82.15407562]
[97.62827301 -93.66039276]
[110.38806915 -101.76465607]
[124.97019196 -105.74625397]
[140.07800293 -105.25113678]
[154.36814880 -100.32333374]
[166.56994629 -91.40103149]
[175.59841919 -79.27757263]
[180.65075684 -65.03099060]
[181.27772522 -49.92806244]
[177.42355347 -35.31174469]
[169.43096924 -22.48170090]
[158.01066589 -12.57877541]
[144.17811584 -6.48352671]
[129.16331482 -4.73794174]
[126.44223785 10.01318550]
[123.72116089 24.76431274]
[129.02130127 38.68400574]
[118.90895081 50.85162354]
[116.18787384 65.60275269]
[128.23315430 74.54205322]
[141.56356812 67.66456604]
[154.89399719 60.78707123]
[168.22441101 53.90958023]
[172.79261780 38.77990723]
[186.76042175 31.38556099]
[201.84094238 36.11347580]
[209.08720398 50.15866089]
[204.20011902 65.18836212]
[190.07910156 72.28572083]
[175.10191345 67.23999786]
[161.77148438 74.11749268]
[148.44107056 80.99498749]
[135.11064148 87.87247467]
[132.72540283 91.13629150]
[130.07327271 94.01550293]
[145.05403137 94.77524567]
[160.03477478 95.53498077]
[174.37951660 87.58762360]
[188.29316711 96.26760864]
[187.46257019 112.64571381]
[172.74215698 119.87354279]
[159.27503967 110.51573181]
[144.29429626 109.75598907]
[129.31353760 108.99625397]
[119.94287872 123.29158020]
[104.37509918 130.34921265]
[87.44779205 127.97602844]
[78.14646912 139.74401855]
[68.84514618 151.51199341]
[59.54381943 163.27996826]
[50.24249649 175.04795837]
[40.94117355 186.81593323]
[36.01774216 200.98490906]
[36.01774216 215.98490906]
[36.01774216 230.98490906]
[36.01774216 245.98490906]
[36.01774216 260.98492432]
[36.01774216 275.98492432]
[36.01774216 290.98492432]
[36.01774216 305.98492432]
[36.01774216 320.98492432]
[36.01774216 335.98492432]
[36.01774216 350.98492432]
[36.01774216 365.98492432]
[50.68300629 369.45288086]
[64.15292358 376.20996094]
[75.70108032 385.89172363]
[84.70469666 397.97610474]
[90.67822266 411.81130981]
[93.29951477 426.65133667]
[92.42720032 441.69577026]
[88.10833740 456.13339233]
[80.57582855 469.18551636]
[70.23588562 480.14828491]
[57.64614487 488.43048096]
[43.48554230 493.58547974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[27 55]
[28 54]
[29 53]
[36 46]
[37 45]
[38 44]
[58 130]
[59 129]
[60 128]
[61 127]
[62 126]
[63 125]
[67 97]
[68 96]
[70 94]
[71 93]
[72 92]
[98 111]
[99 110]
[100 109]
[101 108]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
