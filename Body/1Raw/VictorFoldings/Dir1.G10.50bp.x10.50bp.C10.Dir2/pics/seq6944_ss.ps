%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCCCACCGGGGGGGGGGGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAxxxxxxxxxxACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAACCCCCCCCCCUAACCCCACC\
) } def
/len { sequence length } bind def

/coor [
[70.61716461 380.45806885]
[56.77122879 374.44204712]
[45.06256866 364.91262817]
[36.36004257 352.57696533]
[31.30944252 338.35043335]
[30.28555107 323.28875732]
[33.36434937 308.50961304]
[40.31737137 295.10968018]
[50.62865448 284.08334351]
[63.53303528 276.24884033]
[78.07292175 272.18753052]
[78.07292175 257.18753052]
[78.07292175 242.18753052]
[78.07292175 227.18753052]
[78.07292175 212.18753052]
[78.07292175 197.18753052]
[78.07292175 182.18753052]
[78.07292175 167.18753052]
[78.07292175 152.18753052]
[78.07292175 137.18753052]
[66.67190552 127.43987274]
[51.85414505 129.77098083]
[37.03638458 132.10208130]
[22.21862793 134.43318176]
[7.45257235 137.07205200]
[-7.25538921 140.01753235]
[-21.96335030 142.96301270]
[-26.21524429 157.66607666]
[-36.82132721 168.70100403]
[-51.34439850 173.53204346]
[-66.44715881 171.04907227]
[-78.65911102 161.82266235]
[-85.17403412 147.97294617]
[-84.49484253 132.68252563]
[-76.77761841 119.46499634]
[-63.79571915 111.35765839]
[-48.53228760 110.22353363]
[-34.49475098 116.32321167]
[-24.90883255 128.25505066]
[-10.20087147 125.30957031]
[4.50709009 122.36408997]
[7.88331461 118.90336609]
[13.49109936 117.56768036]
[19.88752365 119.61542511]
[34.70528030 117.28432465]
[49.52304077 114.95321655]
[64.34079742 112.62211609]
[62.85990906 103.04736328]
[63.86739349 93.55669403]
[67.22245789 84.77649689]
[72.63185120 77.26720428]
[79.67401123 71.48761749]
[87.83121490 67.76708984]
[96.52724457 66.28723907]
[105.16795349 67.07424927]
[113.18186188 70.00189209]
[122.19939423 58.01506042]
[128.54652405 44.42411041]
[131.94950867 29.81521797]
[135.35247803 15.20632648]
[138.75546265 0.59743375]
[142.15843201 -14.01145840]
[129.98777771 -25.15837669]
[125.10900116 -40.82659531]
[128.75799561 -56.72989273]
[139.85119629 -68.56726074]
[155.30493164 -73.18607330]
[158.40325928 -87.86259460]
[161.50157166 -102.53912354]
[150.62449646 -92.21008301]
[136.52481079 -87.09159851]
[121.55466461 -88.03754425]
[108.21141815 -94.89012146]
[98.72102356 -106.50616455]
[94.66669464 -120.94785309]
[96.72477722 -135.80598450]
[104.55193329 -148.60191345]
[116.84243011 -157.20095825]
[131.54592896 -160.16862488]
[146.20956421 -157.00984192]
[158.38710022 -148.25155640]
[166.04705811 -135.35485840]
[167.91169739 -120.47260284]
[174.81869507 -133.78775024]
[181.72570801 -147.10290527]
[183.65190125 -163.94708252]
[200.37101746 -166.75909424]
[207.70144653 -151.47181702]
[195.04086304 -140.19590759]
[188.13386536 -126.88076019]
[181.22685242 -113.56560516]
[176.17810059 -99.44079590]
[173.07978821 -84.76427460]
[169.98146057 -70.08774567]
[180.74591064 -61.62689209]
[186.83157349 -49.28818130]
[186.99417114 -35.46496582]
[181.14460754 -22.86625481]
[170.37760925 -13.98578167]
[156.76733398 -10.60848045]
[153.36434937 4.00041151]
[149.96138000 18.60930443]
[146.55839539 33.21819687]
[143.15541077 47.82709122]
[153.65901184 37.11847687]
[166.71498108 29.73322105]
[181.30438232 26.24766922]
[196.28868103 26.93383980]
[210.49847412 31.73818016]
[222.82482910 40.28575897]
[232.30577087 51.90951538]
[238.20141602 65.70231628]
[240.05165100 80.58776855]
[237.71208191 95.40419006]
[231.36529541 108.99530029]
[221.50659180 120.30043793]
[208.90536499 128.43733215]
[194.54502869 132.77099609]
[179.54624939 132.96319580]
[165.07957458 128.99894714]
[152.27398682 121.18762207]
[142.12882996 110.13882446]
[135.43586731 96.71480560]
[132.71739197 81.96319580]
[134.18623352 67.03259277]
[125.16870117 79.01942444]
[133.07192993 93.12629700]
[133.38694763 109.78327942]
[125.57791901 125.05236053]
[111.08365631 135.10700989]
[93.07292175 137.18753052]
[93.07292175 152.18753052]
[93.07292175 167.18753052]
[93.07292175 182.18753052]
[93.07292175 197.18753052]
[93.07292175 212.18753052]
[93.07292175 227.18753052]
[93.07292175 242.18753052]
[93.07292175 257.18753052]
[93.07292175 272.18753052]
[107.61280823 276.24884033]
[120.51718903 284.08334351]
[130.82847595 295.10968018]
[137.78149414 308.50961304]
[140.86029053 323.28875732]
[139.83641052 338.35043335]
[134.78579712 352.57696533]
[126.08327484 364.91262817]
[114.37461853 374.44204712]
[100.52867889 380.45806885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 47]
[22 46]
[23 45]
[24 44]
[25 41]
[26 40]
[27 39]
[56 126]
[57 125]
[58 104]
[59 103]
[60 102]
[61 101]
[62 100]
[67 94]
[68 93]
[69 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
