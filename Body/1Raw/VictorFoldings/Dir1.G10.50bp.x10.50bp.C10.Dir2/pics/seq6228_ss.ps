%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUCAGCCAGGGGGGGGGGUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAxxxxxxxxxxUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCCCCCCCCCCCUCACUCACCCA\
) } def
/len { sequence length } bind def

/coor [
[59.45019531 478.66754150]
[45.96131516 471.93600464]
[34.47581482 462.17144775]
[25.66144371 449.94155884]
[20.03066254 435.95736694]
[17.91083336 421.03189087]
[19.42520332 406.03286743]
[24.48572540 391.83236694]
[32.79819107 379.25595093]
[43.87932205 369.03479004]
[57.08487701 361.76315308]
[71.64710236 357.86380005]
[71.33912659 342.86694336]
[71.03114319 327.87011719]
[70.72316742 312.87326050]
[70.41519165 297.87643433]
[70.10721588 282.87960815]
[69.79923248 267.88275146]
[69.49125671 252.88592529]
[69.18328094 237.88908386]
[68.87530518 222.89224243]
[60.13295746 235.08123779]
[46.78489685 241.92442322]
[31.78490829 241.90750122]
[18.45232773 235.03419495]
[9.73751831 222.82550049]
[7.56897593 207.98307800]
[12.42657566 193.79141235]
[23.23538208 183.39094543]
[37.60351944 179.08319092]
[52.35146713 181.82144165]
[64.21566772 190.99972534]
[70.57126617 204.58985901]
[73.62966156 189.90496826]
[76.68805695 175.22006226]
[79.74645233 160.53517151]
[82.80484772 145.85026550]
[77.82508850 131.81277466]
[88.21361542 119.88008118]
[91.27201080 105.19518280]
[89.69656372 97.23529053]
[94.54689026 90.24160004]
[97.90615082 75.62258911]
[101.26541138 61.00358200]
[104.62467194 46.38457489]
[92.17905426 54.75754929]
[77.18395233 54.37441635]
[65.18215942 45.37680054]
[60.61005020 31.09059334]
[65.15765381 16.79656219]
[77.14398956 7.77837610]
[92.13842010 7.36952734]
[104.59837341 15.72114372]
[109.91808319 29.74504089]
[115.62274933 15.87216091]
[117.00677490 0.93614787]
[113.94837952 -13.74874973]
[110.88998413 -28.43364716]
[107.83158875 -43.11854553]
[104.77319336 -57.80344391]
[101.71479797 -72.48834229]
[86.65681458 -73.68575287]
[72.54663086 -79.07827759]
[60.52808762 -88.22875977]
[51.57548141 -100.39541626]
[46.41456223 -114.59194946]
[45.46369553 -129.66751099]
[48.79996872 -144.39999390]
[56.15292740 -157.59509277]
[66.92649078 -168.18315125]
[80.24730682 -175.30583191]
[95.03549957 -178.38574219]
[110.09227753 -177.17320251]
[124.19703674 -171.76651001]
[136.20637512 -162.60395813]
[145.14675903 -150.42831421]
[150.29341125 -136.22660828]
[151.22914124 -121.15009308]
[147.87806702 -106.42097473]
[140.51185608 -93.23326111]
[129.72766113 -82.65603638]
[116.39969635 -75.54673767]
[119.45809174 -60.86183929]
[122.51648712 -46.17694092]
[125.57488251 -31.49204254]
[128.63327026 -16.80714607]
[131.69168091 -2.12224770]
[136.83572388 -16.21262550]
[144.66244507 -29.00881767]
[154.86322021 -40.00627899]
[167.03584290 -48.77138901]
[180.70036316 -54.95854187]
[195.31799316 -58.32378387]
[210.31237793 -58.73442459]
[225.09228516 -56.17427826]
[239.07495117 -50.74428177]
[251.70906067 -42.65854263]
[262.49645996 -32.23587036]
[271.01181030 -19.88722992]
[276.91934204 -6.09951639]
[279.98614502 8.58362961]
[280.09127808 23.58326149]
[277.23059082 38.30795288]
[271.51690674 52.17712021]
[263.17550659 64.64391327]
[252.53524780 75.21676636]
[240.01571655 83.47881317]
[226.11053467 89.10427094]
[211.36796570 91.87134552]
[196.36930847 91.67092133]
[181.70594788 88.51091003]
[167.95603943 82.51589966]
[155.66174316 73.92227936]
[145.30781555 63.06888962]
[137.30250549 50.38366318]
[131.96144104 36.36677551]
[129.49563599 21.57682419]
[123.79096985 35.44970322]
[119.24367523 49.74383545]
[115.88442230 64.36283875]
[112.52516174 78.98184967]
[109.16590118 93.60086060]
[105.95690155 108.25357819]
[102.89850616 122.93847656]
[107.65951538 138.02633667]
[97.48974609 148.90866089]
[94.43135071 163.59356689]
[91.37295532 178.27845764]
[88.31455994 192.96336365]
[85.25616455 207.64825439]
[83.87213898 222.58427429]
[84.18012238 237.58110046]
[84.48809814 252.57794189]
[84.79607391 267.57476807]
[85.10404968 282.57162476]
[85.41202545 297.56845093]
[85.72000885 312.56530762]
[86.02798462 327.56213379]
[86.33596039 342.55895996]
[86.64393616 357.55581665]
[101.35397339 360.85403442]
[114.84693146 367.57739258]
[126.33834839 377.33499146]
[135.16014099 389.55953979]
[140.79939270 403.54031372]
[142.92826843 418.46450806]
[141.42298889 433.46441650]
[136.37107849 447.66799927]
[128.06623840 460.24945068]
[116.99131012 470.47732544]
[103.79016876 477.75698853]
[89.23030853 481.66516113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[33 130]
[34 129]
[35 128]
[36 127]
[37 126]
[39 124]
[40 123]
[42 122]
[43 121]
[44 120]
[45 119]
[54 118]
[55 117]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
