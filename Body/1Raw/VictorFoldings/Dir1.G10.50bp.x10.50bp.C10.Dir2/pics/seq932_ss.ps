%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAACAAAGGGGGGGGGGUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAxxxxxxxxxxGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUCAACCCCCCCCCCCAGAAACAAA\
) } def
/len { sequence length } bind def

/coor [
[88.52614594 392.61215210]
[74.68020630 386.59613037]
[62.97154617 377.06671143]
[54.26902390 364.73104858]
[49.21842194 350.50451660]
[48.19453049 335.44284058]
[51.27333069 320.66366577]
[58.22634888 307.26376343]
[68.53763580 296.23742676]
[81.44201660 288.40292358]
[95.98190308 284.34158325]
[95.98190308 269.34158325]
[95.98190308 254.34159851]
[95.98190308 239.34159851]
[95.98190308 224.34159851]
[95.98190308 209.34159851]
[95.98190308 194.34159851]
[95.98190308 179.34159851]
[95.98190308 164.34159851]
[95.98190308 149.34159851]
[95.98190308 134.34159851]
[72.80615234 108.95962524]
[84.48513031 83.44637299]
[78.42211914 69.72632599]
[72.35910797 56.00626755]
[66.29608917 42.28621674]
[60.23307800 28.56616211]
[54.17006683 14.84610844]
[39.26323700 17.13120461]
[24.28450966 15.48100948]
[10.25427341 10.01397991]
[-1.87325573 1.10838103]
[-11.27494240 -10.62388134]
[-17.31459045 -24.37930298]
[-19.58599854 -39.21780777]
[-17.94026947 -54.12699890]
[-12.49555492 -68.09122467]
[-3.62859964 -80.16076660]
[8.05132580 -89.51645660]
[1.98831248 -103.23650360]
[-4.07470083 -116.95655823]
[-10.13771343 -130.67662048]
[-16.20072746 -144.39666748]
[-21.38560867 -148.66567993]
[-23.29890251 -154.10357666]
[-22.21733475 -158.81587219]
[-27.70436668 -172.77626038]
[-33.19139862 -186.73664856]
[-42.08374786 -198.81663513]
[-53.78337097 -208.20379639]
[-65.48299408 -217.59095764]
[-77.18261719 -226.97811890]
[-93.32061005 -232.17442322]
[-92.79481506 -249.12022400]
[-76.36571503 -253.30603027]
[-67.79545593 -238.67774963]
[-56.09583282 -229.29058838]
[-44.39620972 -219.90342712]
[-32.69658661 -210.51626587]
[-37.79821396 -224.62205505]
[-39.57465744 -239.51649475]
[-37.93370819 -254.42646790]
[-32.96054840 -268.57806396]
[-24.91330719 -281.23672485]
[-14.20968628 -291.74542236]
[-1.40526211 -299.55865479]
[12.83534050 -304.27090454]
[27.77295303 -305.63754272]
[42.63222504 -303.58767700]
[56.64188004 -298.22769165]
[69.07472992 -289.83575439]
[79.28544617 -278.84753418]
[86.74402618 -265.83331299]
[91.06333160 -251.46865845]
[92.01916504 -236.49914551]
[89.56191254 -221.70178223]
[83.81911469 -207.84463501]
[75.08886719 -195.64698792]
[63.82431030 -185.74195862]
[50.61014175 -178.64366150]
[36.13225174 -174.72055054]
[21.14213181 -174.17626953]
[6.41784906 -177.03904724]
[-7.27631903 -183.16029358]
[-19.23100853 -192.22367859]
[-13.74397755 -178.26329041]
[-8.25694561 -164.30290222]
[-2.48067331 -150.45968628]
[3.58233976 -136.73962402]
[9.64535332 -123.01957703]
[15.70836639 -109.29952240]
[21.77137947 -95.57946777]
[36.55260086 -97.91719818]
[51.44669342 -96.34786987]
[65.43775177 -90.97248077]
[77.56990051 -82.15186310]
[87.01258850 -70.48240662]
[93.11748505 -56.75581741]
[95.46294403 -41.90534592]
[93.88315582 -26.94236183]
[88.47982788 -12.88747025]
[79.61569214 -0.70090109]
[67.89012146 8.78309536]
[73.95313263 22.50314903]
[80.01614380 36.22320175]
[86.07915497 49.94325638]
[92.14217377 63.66331100]
[98.20518494 77.38336182]
[108.25640106 75.70481873]
[119.18687439 78.74808502]
[128.73161316 86.83576965]
[134.56683350 99.20999146]
[149.50114441 100.61228943]
[164.17390442 93.28822327]
[177.70202637 102.55765533]
[176.16891479 118.88497925]
[161.15171814 125.47405243]
[148.09884644 115.54660034]
[133.16453552 114.14429474]
[127.61887360 119.19361877]
[140.05265808 127.58414459]
[154.78282166 130.41656494]
[163.77856445 142.41975403]
[162.36264038 157.35278320]
[151.27127075 167.45135498]
[136.27127075 167.46484375]
[125.16176605 157.38621521]
[123.71894073 142.45600891]
[116.52755737 129.29226685]
[110.98190308 134.34159851]
[110.98190308 149.34159851]
[110.98190308 164.34159851]
[110.98190308 179.34159851]
[110.98190308 194.34159851]
[110.98190308 209.34159851]
[110.98190308 224.34159851]
[110.98190308 239.34159851]
[110.98190308 254.34159851]
[110.98190308 269.34158325]
[110.98190308 284.34158325]
[125.52178955 288.40292358]
[138.42617798 296.23742676]
[148.73745728 307.26376343]
[155.69047546 320.66366577]
[158.76927185 335.44284058]
[157.74539185 350.50451660]
[152.69477844 364.73104858]
[143.99226379 377.06671143]
[132.28359985 386.59613037]
[118.43766022 392.61215210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[39 92]
[40 91]
[41 90]
[42 89]
[43 88]
[46 87]
[47 86]
[48 85]
[49 59]
[50 58]
[51 57]
[52 56]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
