%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUAGGCCUGGGGGGGGGGAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAxxxxxxxxxxAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCCCCCCCCCCCUAGGAGGCCU\
) } def
/len { sequence length } bind def

/coor [
[109.91464233 632.42138672]
[98.03036499 623.14630127]
[88.71166229 611.29620361]
[82.50028992 597.55999756]
[79.75739288 582.73638916]
[80.64241791 567.68713379]
[85.10392761 553.28717041]
[92.88252258 540.37371826]
[103.52597809 529.69757080]
[116.41548920 521.87939453]
[130.80166626 517.37371826]
[129.86604309 502.40295410]
[128.93041992 487.43215942]
[127.99478912 472.46136475]
[127.05915833 457.49057007]
[126.12352753 442.51977539]
[125.18790436 427.54898071]
[124.25227356 412.57818604]
[123.31664276 397.60739136]
[122.38101959 382.63659668]
[121.44538879 367.66583252]
[105.39071655 365.26312256]
[90.24822998 359.39447021]
[76.75672913 350.34320068]
[65.57512665 338.54794312]
[57.25027847 324.58139038]
[52.19023895 309.12258911]
[50.64423752 292.92388916]
[52.69042969 276.77416992]
[58.23194122 261.46072388]
[67.00144958 247.73054504]
[78.57408142 236.25418091]
[92.38800049 227.59278870]
[107.77165985 222.17077637]
[105.90404510 207.28749084]
[104.03643036 192.40422058]
[102.16881561 177.52093506]
[100.30120087 162.63764954]
[98.43359375 147.75437927]
[96.56597900 132.87109375]
[83.37461090 128.56391907]
[73.11416626 119.22116852]
[67.59347534 106.48987579]
[67.78578949 92.61447144]
[73.65721130 80.04107666]
[84.17264557 70.98627472]
[80.16490936 56.53158569]
[76.15716553 42.07690048]
[71.64670563 37.10063171]
[70.54282379 31.44264984]
[72.29679871 26.93720055]
[68.89382172 12.32830811]
[65.49084473 -2.28058481]
[62.08786774 -16.88947678]
[47.05267334 -16.30679321]
[32.17895508 -18.58033371]
[18.00438499 -23.62791061]
[5.04136419 -31.26705933]
[-6.24150133 -41.22163010]
[-15.43634415 -53.13176727]
[-22.21077538 -66.56692505]
[-26.31990433 -81.04144287]
[-27.61518669 -96.03206635]
[-26.04980087 -110.99689484]
[-21.68033409 -125.39495850]
[-14.66474056 -138.70578003]
[-5.25662756 -150.44818115]
[6.20390606 -160.19767761]
[19.30256844 -167.60182190]
[33.56585312 -172.39299011]
[48.47814941 -174.39794922]
[63.50038910 -173.54425049]
[78.08953094 -169.86273193]
[91.71817780 -163.48648071]
[103.89366913 -154.64601135]
[114.17586517 -143.66088867]
[122.19306946 -130.92822266]
[127.65547180 -116.90827942]
[130.36560059 -102.10788727]
[130.22549438 -87.06206512]
[127.24022675 -72.31470490]
[121.51769257 -58.39891434]
[113.26476288 -45.81774902]
[102.77978516 -35.02600861]
[90.44178009 -26.41379929]
[76.69676208 -20.29245567]
[80.09973907 -5.68356276]
[83.50271606 8.92533016]
[86.90569305 23.53422165]
[90.61185455 38.06915665]
[94.61959076 52.52384567]
[98.62733459 66.97853851]
[110.79974365 68.76433563]
[121.47566986 74.87835693]
[133.55566406 65.98600769]
[137.37823486 50.40501022]
[152.00311279 43.81011581]
[166.21131897 51.26036072]
[169.10356140 67.04055786]
[158.46113586 79.04548645]
[142.44801331 78.06599426]
[130.36801147 86.95834351]
[132.74813843 104.45658875]
[125.77861023 120.68247223]
[111.44925690 131.00347900]
[113.31687164 145.88676453]
[115.18448639 160.77003479]
[117.05209351 175.65332031]
[118.91970825 190.53660583]
[120.78732300 205.41987610]
[122.65493774 220.30316162]
[136.45545959 221.30252075]
[149.82347107 224.85583496]
[162.29074097 230.83692932]
[173.42089844 239.03462219]
[182.82475281 249.16018677]
[190.17384338 260.85748291]
[195.21191406 273.71557617]
[197.76391602 287.28305054]
[197.74200439 301.08398438]
[195.14862061 314.63455200]
[190.07630920 327.45996094]
[182.70443726 339.11123657]
[173.29287720 349.18078613]
[162.17276001 357.31674194]
[149.73495483 363.23519897]
[136.41618347 366.73019409]
[137.35180664 381.70098877]
[138.28742981 396.67178345]
[139.22306824 411.64257812]
[140.15869141 426.61334229]
[141.09432983 441.58413696]
[142.02995300 456.55493164]
[142.96557617 471.52572632]
[143.90121460 486.49652100]
[144.83683777 501.46731567]
[145.77246094 516.43811035]
[160.60769653 519.11755371]
[174.37033081 525.27001953]
[186.26022339 534.53790283]
[195.58612061 546.38238525]
[201.80580139 560.11480713]
[204.55769348 574.93676758]
[203.68179321 589.98651123]
[199.22901917 604.38916016]
[191.45825195 617.30731201]
[180.82127380 627.98992920]
[167.93650818 635.81591797]
[153.55305481 640.33032227]
[138.50714111 641.27062988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[34 111]
[35 110]
[36 109]
[37 108]
[38 107]
[39 106]
[40 105]
[46 92]
[47 91]
[48 90]
[51 89]
[52 88]
[53 87]
[54 86]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
