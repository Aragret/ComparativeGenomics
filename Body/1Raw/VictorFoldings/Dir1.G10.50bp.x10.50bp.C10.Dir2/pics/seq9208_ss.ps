%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAUUUCACGGGGGGGGGGUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAxxxxxxxxxxCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCACCCCCCCCCCUAAUAUUUCGC\
) } def
/len { sequence length } bind def

/coor [
[88.21408081 387.40243530]
[74.19213867 381.84942627]
[61.99218369 372.98309326]
[52.38111115 361.36080933]
[45.96308517 347.71310425]
[43.14154816 332.89791870]
[44.09386444 317.84652710]
[48.76016998 303.50509644]
[56.84713745 290.77514648]
[67.84641266 280.45687866]
[81.06657410 273.19891357]
[95.67658234 269.45745850]
[95.67658234 254.45747375]
[95.67658234 239.45747375]
[95.67658234 224.45747375]
[95.67658234 209.45747375]
[95.67658234 194.45747375]
[95.67658234 179.45747375]
[95.67658234 164.45747375]
[95.67658234 149.45747375]
[95.67658234 134.45747375]
[95.67658234 119.45746613]
[88.48519897 132.62120056]
[84.32531738 147.03285217]
[74.18616486 158.08714294]
[60.18675232 163.47384644]
[45.25286102 162.06715393]
[32.50555801 154.16105652]
[24.60894775 141.40786743]
[23.21335983 126.47293854]
[28.61046410 112.47753906]
[39.67230606 102.34661102]
[54.08703613 98.19744873]
[68.84268951 100.89746094]
[83.83186340 100.32758331]
[70.40441132 93.64151001]
[56.97695923 86.95542908]
[43.54951096 80.26935577]
[39.08855438 80.71604919]
[35.13329315 79.77825165]
[32.06500626 77.79523468]
[30.11111069 75.19686890]
[29.32881927 72.44385529]
[16.49516678 64.67872620]
[3.66151237 56.91358566]
[-11.50357819 60.47136688]
[-24.40810966 52.41359711]
[-27.70645332 37.93407440]
[-40.54010773 30.16893959]
[-56.93798065 30.37338829]
[-65.08020782 16.13835716]
[-56.59077072 2.10762572]
[-40.20286560 2.71480680]
[-32.77497101 17.33528519]
[-19.94131660 25.10042000]
[-5.58451891 21.30332565]
[7.54124832 28.99545670]
[11.42664814 44.07993317]
[24.26030159 51.84506989]
[37.09395599 59.61020279]
[50.23558807 66.84190369]
[63.66303635 73.52798462]
[77.09048462 80.21405792]
[90.51793671 86.90013123]
[84.43518829 73.18881989]
[92.09000397 60.28906250]
[107.03943634 59.05841064]
[116.70074463 70.53269196]
[112.94208527 85.05421448]
[125.09542084 76.26237488]
[117.61456299 63.24490356]
[111.53540802 49.51677322]
[106.92455292 35.22839355]
[103.83252716 20.53631783]
[102.29320526 5.60152006]
[102.32344818 -9.41236687]
[103.92293549 -24.34084129]
[107.07412720 -39.02033997]
[111.74250793 -53.29002762]
[117.87692261 -66.99355316]
[125.41016388 -79.98077393]
[134.25968933 -92.10940552]
[144.32855225 -103.24654388]
[155.50640869 -113.27017212]
[167.67080688 -122.07046509]
[180.68846130 -129.55101013]
[194.41673279 -135.62983704]
[208.70523071 -140.24034119]
[223.39736938 -143.33200073]
[238.33221436 -144.87097168]
[253.34609985 -144.84036255]
[268.27453613 -143.24050903]
[282.95394897 -140.08895874]
[297.22354126 -135.42022705]
[310.92691040 -129.28547668]
[323.91394043 -121.75193024]
[336.04235840 -112.90210724]
[347.17926025 -102.83297729]
[357.20260620 -91.65487671]
[366.00262451 -79.49026489]
[373.48281860 -66.47243500]
[379.56130981 -52.74401093]
[384.17147827 -38.45540619]
[387.26278687 -23.76318169]
[388.80139160 -8.82830811]
[388.77041626 6.18557739]
[387.17019653 21.11397552]
[384.01831055 35.79331970]
[379.34921265 50.06277847]
[373.21414185 63.76600647]
[365.68026733 76.75286865]
[356.83016968 88.88106537]
[346.76077271 100.01771545]
[335.58242798 110.04080200]
[323.41760254 118.84050751]
[310.39956665 126.32041168]
[296.67098999 132.39857483]
[282.38229370 137.00837708]
[267.69000244 140.09933472]
[252.75508118 141.63757324]
[237.74119568 141.60623169]
[222.81283569 140.00566101]
[208.13356018 136.85339355]
[193.86422729 132.18397522]
[180.16113281 126.04856110]
[167.17446899 118.51437378]
[155.04647827 109.66396332]
[143.91007996 99.59429169]
[133.88726807 88.41570282]
[121.73393250 97.20755005]
[110.67658234 119.45746613]
[110.67658234 134.45747375]
[110.67658234 149.45747375]
[110.67658234 164.45747375]
[110.67658234 179.45747375]
[110.67658234 194.45747375]
[110.67658234 209.45747375]
[110.67658234 224.45747375]
[110.67658234 239.45747375]
[110.67658234 254.45747375]
[110.67658234 269.45745850]
[125.28659821 273.19891357]
[138.50675964 280.45687866]
[149.50602722 290.77514648]
[157.59300232 303.50509644]
[162.25930786 317.84652710]
[163.21162415 332.89791870]
[160.39007568 347.71310425]
[153.97206116 361.36080933]
[144.36097717 372.98309326]
[132.16102600 381.84942627]
[118.13908386 387.40243530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[35 64]
[36 63]
[37 62]
[38 61]
[43 60]
[44 59]
[45 58]
[48 55]
[49 54]
[69 130]
[70 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
