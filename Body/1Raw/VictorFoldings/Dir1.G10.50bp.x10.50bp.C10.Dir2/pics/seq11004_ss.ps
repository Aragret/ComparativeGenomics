%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAAUGAAGGGGGGGGGGCAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCxxxxxxxxxxCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCCCCCCCCCCCUAACAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[124.88647461 519.23284912]
[111.66628265 511.96035767]
[100.77947998 501.51336670]
[92.96834564 488.60412598]
[88.76546478 474.11279297]
[88.45738983 459.02746582]
[92.06513214 444.37664795]
[99.34270477 431.15924072]
[109.79391479 420.27648926]
[122.70617676 412.47033691]
[137.19911194 408.27304077]
[136.88705444 393.27630615]
[136.57499695 378.27954102]
[136.26293945 363.28277588]
[135.95088196 348.28604126]
[135.63883972 333.28927612]
[135.32678223 318.29251099]
[135.01472473 303.29577637]
[134.70266724 288.29901123]
[134.39060974 273.30227661]
[134.07855225 258.30551147]
[111.57618713 249.34440613]
[96.09704590 230.64137268]
[91.47963715 206.74905396]
[98.90990448 183.51724243]
[116.61723328 166.66062927]
[111.42181396 152.58911133]
[106.22640228 138.51759338]
[101.03098297 124.44607544]
[95.83557129 110.37455750]
[90.49405670 96.35784149]
[85.00702667 82.39745331]
[79.51999664 68.43706512]
[62.42902374 67.50595856]
[47.49666214 59.25306320]
[37.67901993 45.36698532]
[34.89575577 28.64596748]
[39.65488815 12.43407726]
[50.96084976 -0.04758235]
[44.89783478 -13.76763630]
[38.83482361 -27.48768997]
[32.77180862 -41.20774460]
[26.70879745 -54.92779541]
[12.26853085 -50.78141403]
[-2.60184598 -48.64000702]
[-17.62530899 -48.54346085]
[-32.52198029 -50.49357986]
[-47.01434326 -54.45403290]
[-60.83241272 -60.35103989]
[-73.71876526 -68.07474518]
[-85.43334198 -77.48125458]
[-95.75790405 -88.39533997]
[-104.50011444 -100.61367035]
[-111.49710083 -113.90862274]
[-116.61852264 -128.03253174]
[-119.76897430 -142.72227478]
[-120.88975525 -157.70417786]
[-119.95999146 -172.69915771]
[-116.99700165 -187.42785645]
[-112.05598450 -201.61587524]
[-105.22898865 -214.99893188]
[-96.64319611 -227.32766724]
[-86.45856476 -238.37243652]
[-74.86480713 -247.92747498]
[-62.07793045 -255.81477356]
[-48.33613205 -261.88739014]
[-33.89541626 -266.03219604]
[-19.02480888 -268.17199707]
[-4.00133514 -268.26693726]
[10.89512444 -266.31518555]
[25.38705826 -262.35317993]
[39.20449066 -256.45468140]
[52.09000778 -248.72956848]
[63.80356598 -239.32179260]
[74.12694550 -228.40660095]
[82.86782837 -216.18731689]
[89.86338043 -202.89160156]
[94.98327637 -188.76713562]
[98.13213348 -174.07705688]
[99.25129700 -159.09503174]
[98.31990814 -144.10015869]
[95.35532379 -129.37178040]
[90.41277313 -115.18428802]
[83.58432770 -101.80198669]
[74.99720001 -89.47416687]
[64.81137085 -78.43050385]
[53.21658325 -68.87672424]
[40.42885208 -60.99081039]
[46.49186325 -47.27075577]
[52.55487823 -33.55070114]
[58.61788940 -19.83064842]
[64.68090057 -6.11059570]
[77.72436523 -6.74200535]
[90.23088837 -2.87479544]
[100.69242859 5.04761553]
[107.83973694 16.09146500]
[110.79630280 28.94266701]
[109.18584442 42.06315613]
[103.18000793 53.87497330]
[93.48038483 62.95003128]
[98.96741486 76.91042328]
[104.45444489 90.87081146]
[110.13509369 96.66859436]
[109.90708923 105.17913818]
[115.10250092 119.25065613]
[120.29792023 133.32217407]
[125.49333191 147.39369202]
[130.68875122 161.46520996]
[138.07978821 160.55699158]
[145.51927185 160.76974487]
[152.83822632 162.09739685]
[159.87066650 164.50859070]
[166.45719910 167.94738770]
[172.44880676 172.33457947]
[177.71012878 177.56950378]
[182.12249756 183.53236389]
[185.58668518 190.08700562]
[188.02510071 197.08395386]
[189.38351440 204.36384583]
[189.63229370 211.76110840]
[188.76699829 219.10765076]
[186.80853271 226.23675537]
[183.80258179 232.98681641]
[179.81852722 239.20498657]
[174.94790649 244.75070190]
[169.30232239 249.49879456]
[163.01077271 253.34234619]
[156.21682739 256.19512939]
[149.07530212 257.99343872]
[149.38735962 272.99020386]
[149.69941711 287.98696899]
[150.01147461 302.98370361]
[150.32353210 317.98046875]
[150.63558960 332.97723389]
[150.94764709 347.97396851]
[151.25970459 362.97073364]
[151.57176208 377.96746826]
[151.88380432 392.96423340]
[152.19586182 407.96099854]
[166.85086060 411.55175781]
[180.07667542 418.81402588]
[190.97154236 429.25262451]
[198.79263306 442.15582275]
[203.00669861 456.64389038]
[203.32643127 471.72897339]
[199.72999573 486.38259888]
[192.46263123 499.60559082]
[182.01983643 510.49642944]
[169.11360168 518.31256104]
[154.62391663 522.52099609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 108]
[27 107]
[28 106]
[29 105]
[30 104]
[31 102]
[32 101]
[33 100]
[39 92]
[40 91]
[41 90]
[42 89]
[43 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
