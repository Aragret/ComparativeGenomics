%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAAUUACAUGGGGGGGGGGCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAxxxxxxxxxxUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUACCCCCCCCCCAUAAUUAUUACAU\
) } def
/len { sequence length } bind def

/coor [
[52.48799515 397.16122437]
[38.61386108 391.31298828]
[26.25905800 382.70761108]
[15.96368313 371.72128296]
[8.17780685 358.83432007]
[3.24179339 344.61007690]
[1.37142467 329.67034912]
[2.64846516 314.66824341]
[7.01708794 300.25961304]
[14.28631592 287.07431030]
[24.13837051 275.68878174]
[36.14255905 266.60070801]
[49.77411270 260.20739746]
[64.43711853 256.78833008]
[64.13698578 241.79133606]
[63.83685303 226.79432678]
[63.53672409 211.79733276]
[63.23659134 196.80033875]
[62.93645859 181.80334473]
[62.63632584 166.80635071]
[62.33619308 151.80934143]
[62.03606033 136.81234741]
[50.56686020 127.14501190]
[35.73546600 129.38771057]
[26.93861198 145.57160950]
[4.57624102 148.28643799]
[-9.70804310 152.86456299]
[-23.99232674 157.44268799]
[-38.27661133 162.02081299]
[-48.89181137 174.52079773]
[-64.97396088 171.31196594]
[-69.97911835 155.69528198]
[-58.75840759 143.73587036]
[-42.85473633 147.73652649]
[-28.57045174 143.15840149]
[-14.28616810 138.58027649]
[-0.00188446 134.00215149]
[-1.64939082 119.09290314]
[-16.58862114 117.74404144]
[-31.23508835 125.12055969]
[-44.79627609 115.89959717]
[-43.32160187 99.56688690]
[-28.32807732 92.92412567]
[-15.23976040 102.80480957]
[-0.30053061 104.15367126]
[21.21185875 101.79055023]
[33.49276352 114.55632019]
[48.32416153 112.31361389]
[51.45262146 97.64348602]
[38.82644653 89.54535675]
[26.20027351 81.44722748]
[9.80266285 81.22273254]
[2.03552127 66.77961731]
[10.88901806 52.97571945]
[27.25543404 54.01130295]
[34.29840469 68.82105255]
[46.92457962 76.91918182]
[59.55075455 85.01731110]
[74.51130676 69.27848816]
[93.82374573 63.82138062]
[111.62044525 68.59540558]
[119.84449768 56.05088425]
[128.06854248 43.50636292]
[136.29260254 30.96184158]
[144.51664734 18.41732216]
[150.49864197 4.66175270]
[154.06596375 -9.90788269]
[157.63327026 -24.47751808]
[161.20059204 -39.04715347]
[164.76789856 -53.61679077]
[151.20518494 -60.15485382]
[139.29841614 -69.37020874]
[129.56813049 -80.85999298]
[122.43968201 -94.12192535]
[118.22469330 -108.57625580]
[117.10742950 -123.59109497]
[119.13674164 -138.51005554]
[124.22389984 -152.68096924]
[132.14653015 -165.48431396]
[142.55827332 -176.36039734]
[155.00398254 -184.83375549]
[168.93959045 -190.53398132]
[183.75588989 -193.21188354]
[198.80516052 -192.75038147]
[213.42953491 -189.16967773]
[226.98966980 -182.62628174]
[238.89280701 -173.40623474]
[248.61857605 -161.91262817]
[255.74180603 -148.64788818]
[259.95111084 -134.19190979]
[261.06246948 -119.17662811]
[259.02728271 -104.25846100]
[253.93455505 -90.08955383]
[246.00689697 -77.28932953]
[235.59086609 -66.41734314]
[223.14181519 -57.94887543]
[209.20397949 -52.25413132]
[194.38662720 -49.58206177]
[179.33753967 -50.04947662]
[175.77021790 -35.47983932]
[172.20291138 -20.91020584]
[168.63558960 -6.34056997]
[165.06828308 8.22906590]
[175.73190308 -2.32020426]
[189.20463562 -8.91457748]
[204.07736206 -10.86436367]
[218.79461670 -7.96563864]
[231.81713867 -0.52157408]
[241.78291321 10.68927288]
[247.64967346 24.49438477]
[248.80381775 39.44991684]
[245.12463379 53.99170685]
[236.99691772 66.59885406]
[225.27073669 75.95281982]
[211.17250061 81.07527924]
[196.17671204 81.43049622]
[181.85173035 76.98131561]
[169.69580078 68.19306946]
[160.98027039 55.98489380]
[156.61666870 41.63362122]
[157.06117249 26.64137077]
[148.83711243 39.18589020]
[140.61306763 51.73041153]
[132.38902283 64.27493286]
[124.16497040 76.81945801]
[131.22583008 85.19513702]
[135.36997986 95.70441437]
[135.96296692 107.32830048]
[132.72662354 118.86415863]
[125.79006195 129.05012512]
[115.69725037 136.70260620]
[103.36841583 140.85198975]
[90.01755524 140.86108398]
[77.03305817 136.51222229]
[77.33319092 151.50921631]
[77.63332367 166.50621033]
[77.93345642 181.50320435]
[78.23358917 196.50021362]
[78.53372192 211.49720764]
[78.83385468 226.49420166]
[79.13398743 241.49119568]
[79.43411255 256.48818970]
[94.22217560 259.31784058]
[108.09860992 265.16064453]
[120.45679474 273.76116943]
[130.75650024 284.74343872]
[138.54743958 297.62731934]
[143.48904419 311.84963989]
[145.36529541 326.78863525]
[144.09416199 341.79122925]
[139.73120117 356.20156860]
[132.46716309 369.38973999]
[122.61959076 380.77914429]
[110.61897278 389.87194824]
[96.98993683 396.27062988]
[82.32827759 399.69543457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 48]
[24 47]
[26 37]
[27 36]
[28 35]
[29 34]
[38 45]
[39 44]
[49 58]
[50 57]
[51 56]
[61 125]
[62 124]
[63 123]
[64 122]
[65 121]
[66 103]
[67 102]
[68 101]
[69 100]
[70 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
