%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAUACCCAUGGGGGGGGGGCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCxxxxxxxxxxGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAACCCCCCCCCCAGUAAUAACCAU\
) } def
/len { sequence length } bind def

/coor [
[87.11964417 552.00524902]
[72.95904541 546.85028076]
[60.36930084 538.56805420]
[50.02936172 527.60528564]
[42.49684906 514.55316162]
[38.17798615 500.11557007]
[37.30567551 485.07110596]
[39.92696762 470.23110962]
[45.90049362 456.39587402]
[54.90410995 444.31152344]
[66.45227051 434.62973022]
[79.92218018 427.87265015]
[94.58744812 424.40469360]
[94.58744812 409.40469360]
[94.58744812 394.40469360]
[94.58744812 379.40469360]
[94.58744812 364.40469360]
[94.58744812 349.40469360]
[94.58744812 334.40469360]
[94.58744812 319.40469360]
[94.58744812 304.40469360]
[94.58744812 289.40469360]
[80.52351379 284.35580444]
[69.01397705 274.78189087]
[61.46030807 261.82363892]
[58.79085541 247.03527832]
[61.34679794 232.19825745]
[68.83867645 219.10658264]
[80.37902069 209.34991455]
[94.58744812 204.12057495]
[94.58744812 189.12057495]
[94.58744812 174.12057495]
[94.58744812 159.12057495]
[94.28343964 144.12365723]
[93.67556000 129.13597107]
[81.04484558 124.87419128]
[71.00031281 115.17951202]
[65.84320068 101.53153229]
[67.06240845 86.36046600]
[52.89343262 81.43703461]
[43.69977951 81.57103729]
[38.48892975 76.26757812]
[24.42264748 71.05799866]
[10.35636520 65.84842682]
[-3.70991707 60.63884354]
[-19.77594185 63.92744064]
[-30.45304298 51.48028946]
[-24.75753403 36.10195541]
[-8.54846478 33.61234665]
[1.49966168 46.57256317]
[15.56594372 51.78214264]
[29.63222504 56.99172211]
[43.69850922 62.20129776]
[57.81686020 67.26806641]
[71.98583984 72.19149017]
[84.38349152 63.74767303]
[84.99137878 48.75999451]
[85.59925842 33.77231598]
[86.20714569 18.78463936]
[86.81502533 3.79696178]
[86.96704102 -11.20226765]
[86.66303253 -26.19918633]
[86.35903168 -41.19610596]
[86.05502319 -56.19302368]
[82.73636627 -64.76785278]
[85.89993286 -71.49626160]
[85.89993286 -86.49626160]
[71.40241241 -90.73873901]
[58.68813705 -98.89495087]
[48.78778839 -110.30371094]
[42.50394821 -124.04015350]
[40.34601593 -138.99073792]
[42.48892593 -153.94348145]
[48.75896454 -167.68624878]
[58.64784622 -179.10493469]
[71.35392761 -187.27392578]
[85.84717560 -191.53096008]
[100.95269775 -191.53096008]
[115.44594574 -187.27392578]
[128.15202332 -179.10493469]
[138.04090881 -167.68624878]
[144.31094360 -153.94348145]
[146.45385742 -138.99073792]
[144.29592896 -124.04015350]
[138.01208496 -110.30371094]
[128.11174011 -98.89495087]
[115.39745331 -90.73873901]
[100.89993286 -86.49626160]
[100.89993286 -71.49626160]
[101.05194855 -56.49702835]
[101.35594940 -41.50011063]
[101.65995026 -26.50319099]
[101.96395874 -11.50627232]
[104.29567719 -8.78770828]
[105.39514160 -4.78401327]
[104.66357422 -0.10160548]
[101.80270386 4.40484524]
[101.19482422 19.39252281]
[100.58693695 34.38019943]
[99.97905731 49.36787796]
[99.37117004 64.35555267]
[111.32349396 68.25423431]
[120.53025055 75.76810455]
[126.05468750 85.50666046]
[140.57585144 81.74687195]
[155.09700012 77.98708344]
[169.61816406 74.22729492]
[184.13931274 70.46750641]
[197.95729065 60.64406204]
[211.22201538 71.20262146]
[204.74813843 86.87186432]
[187.89910889 84.98866272]
[173.37794495 88.74845123]
[158.85679626 92.50823975]
[144.33563232 96.26802826]
[129.81448364 100.02781677]
[123.94159698 117.76805115]
[108.66323090 128.52809143]
[109.27111816 143.51577759]
[112.52407074 149.38072205]
[112.31355286 155.13410950]
[109.58744812 159.12057495]
[109.58744812 174.12057495]
[109.58744812 189.12057495]
[109.58744812 204.12057495]
[123.79586792 209.34991455]
[135.33621216 219.10658264]
[142.82809448 232.19825745]
[145.38403320 247.03527832]
[142.71458435 261.82363892]
[135.16090393 274.78189087]
[123.65137482 284.35580444]
[109.58744812 289.40469360]
[109.58744812 304.40469360]
[109.58744812 319.40469360]
[109.58744812 334.40469360]
[109.58744812 349.40469360]
[109.58744812 364.40469360]
[109.58744812 379.40469360]
[109.58744812 394.40469360]
[109.58744812 409.40469360]
[109.58744812 424.40469360]
[124.25270844 427.87265015]
[137.72262573 434.62973022]
[149.27078247 444.31152344]
[158.27439880 456.39587402]
[164.24792480 470.23110962]
[166.86921692 485.07110596]
[165.99690247 500.11557007]
[161.67803955 514.55316162]
[154.14552307 527.60528564]
[143.80558777 538.56805420]
[131.21585083 546.85028076]
[117.05524445 552.00524902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[30 125]
[31 124]
[32 123]
[33 122]
[34 119]
[35 118]
[39 55]
[40 54]
[42 53]
[43 52]
[44 51]
[45 50]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 93]
[62 92]
[63 91]
[64 90]
[66 89]
[67 88]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
