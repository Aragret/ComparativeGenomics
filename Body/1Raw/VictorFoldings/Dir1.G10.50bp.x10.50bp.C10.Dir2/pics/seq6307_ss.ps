%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUCCUUAGGGGGGGGGGUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCxxxxxxxxxxACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGCCCCCCCCCCAGCCUCCGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.86987305]
[71.19830322 365.85382080]
[59.48964310 356.32440186]
[50.78712082 343.98873901]
[45.73651886 329.76223755]
[44.71262741 314.70053101]
[47.79142761 299.92138672]
[54.74444962 286.52145386]
[65.05573273 275.49511719]
[77.96011353 267.66061401]
[92.50000000 263.59930420]
[92.50000000 248.59930420]
[92.50000000 233.59930420]
[92.50000000 218.59930420]
[92.50000000 203.59930420]
[92.50000000 188.59930420]
[92.50000000 173.59930420]
[92.50000000 158.59930420]
[92.50000000 143.59930420]
[92.50000000 128.59930420]
[92.50000000 113.59930420]
[82.99163818 101.99796295]
[68.28367615 99.05247498]
[53.57571793 96.10699463]
[37.53115463 112.95754242]
[8.61814690 107.32518005]
[-6.34210205 108.41648865]
[-21.30235100 109.50779724]
[-31.61334991 121.18346405]
[-46.80071640 122.07708740]
[-57.86812973 112.17517853]
[-72.82837677 113.26648712]
[-87.78862762 114.35779572]
[-102.74887848 115.44911194]
[-118.10614014 122.63178253]
[-129.25942993 109.86305237]
[-120.07723999 95.61090088]
[-103.84018707 100.48886108]
[-88.87993622 99.39755249]
[-73.91969299 98.30623627]
[-58.95944214 97.21492767]
[-49.44617844 85.81170654]
[-34.28990555 84.49185181]
[-22.39366150 94.54755402]
[-7.43341255 93.45623779]
[7.52683592 92.36492920]
[11.68490124 77.95207214]
[15.84261131 63.54049683]
[3.76262259 54.64814758]
[-8.31736565 45.75579834]
[-20.39735413 36.86344910]
[-36.73753357 32.34295654]
[-36.91711426 15.38996029]
[-20.67636299 10.52433968]
[-11.50500393 24.78346062]
[0.57498401 33.67581177]
[12.65497208 42.56816101]
[24.73496056 51.46051025]
[43.43860245 55.39568710]
[54.74602509 67.48574066]
[56.52120209 81.39903259]
[71.22916412 84.34452057]
[85.93712616 87.29000092]
[72.17214203 81.32969666]
[60.81532288 71.53057861]
[52.90320587 58.78701401]
[49.15793228 44.26210785]
[49.92133331 29.28154564]
[55.12372971 15.21260548]
[64.29029846 3.33935905]
[76.58441162 -5.25452280]
[90.88397980 -9.78467655]
[105.88388824 -9.83763409]
[120.21508789 -5.40856361]
[132.56958008 3.09829450]
[141.81976318 14.90651894]
[147.12136841 28.93837357]
[147.99052429 43.91317368]
[144.34790039 58.46416092]
[136.52597046 71.26327515]
[125.23862457 81.14234161]
[111.51239014 87.20068359]
[125.73917389 82.44686890]
[139.96595764 77.69305420]
[154.19273376 72.93923950]
[164.82942200 61.22721863]
[179.35273743 64.53213501]
[193.57951355 59.77832413]
[198.47679138 42.37631989]
[212.68484497 31.45323181]
[230.44816589 31.19792366]
[244.71086121 41.52473450]
[258.72756958 36.18322372]
[272.74429321 30.84171104]
[259.74331665 23.36009789]
[255.65498352 8.92799568]
[262.80047607 -4.26071167]
[277.12289429 -8.71808243]
[290.49063110 -1.91342664]
[295.31411743 12.28988552]
[288.85363770 25.82890511]
[303.42633057 22.27414322]
[317.99905396 18.71938133]
[332.57174683 15.16461945]
[347.14443970 11.60985756]
[358.61843872 -0.10676678]
[374.43289185 4.23322153]
[378.31921387 20.16521454]
[366.27954102 31.29974365]
[350.69921875 26.18255997]
[336.12649536 29.73732185]
[321.55380249 33.29208374]
[306.98110962 36.84684753]
[292.40838623 40.40160751]
[278.08581543 44.85842514]
[264.06909180 50.19993591]
[250.05236816 55.54145050]
[248.63647461 67.67140198]
[242.13766479 78.09638977]
[231.74832153 84.78675079]
[219.42504883 86.40893555]
[207.52029419 82.59090424]
[198.33332825 74.00510406]
[184.10655212 78.75891876]
[174.48745728 90.13091278]
[158.94654846 87.16602325]
[144.71977234 91.91983795]
[130.49298096 96.67365265]
[116.26620483 101.42746735]
[107.50000000 113.59930420]
[107.50000000 128.59930420]
[107.50000000 143.59930420]
[107.50000000 158.59930420]
[107.50000000 173.59930420]
[107.50000000 188.59930420]
[107.50000000 203.59930420]
[107.50000000 218.59930420]
[107.50000000 233.59930420]
[107.50000000 248.59930420]
[107.50000000 263.59930420]
[122.03988647 267.66061401]
[134.94427490 275.49511719]
[145.25555420 286.52145386]
[152.20857239 299.92138672]
[155.28736877 314.70053101]
[154.26348877 329.76223755]
[149.21287537 343.98873901]
[140.51036072 356.32440186]
[128.80169678 365.85382080]
[114.95575714 371.86987305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 63]
[23 62]
[24 61]
[26 46]
[27 45]
[28 44]
[31 41]
[32 40]
[33 39]
[34 38]
[48 58]
[49 57]
[50 56]
[51 55]
[82 129]
[83 128]
[84 127]
[85 126]
[87 124]
[88 123]
[92 117]
[93 116]
[94 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
