%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUAGUCCUGGGGGGGGGGGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUxxxxxxxxxxAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCCCCCCCCCCCAUCCUAGUCCU\
) } def
/len { sequence length } bind def

/coor [
[84.43450165 436.10559082]
[69.81850433 432.45590210]
[56.38133240 425.64486694]
[44.79699326 416.01412964]
[35.64654541 404.04681396]
[29.38897514 390.34313965]
[26.33815956 375.59048462]
[26.64712715 360.52886963]
[30.30037880 345.91375732]
[37.11466599 332.47824097]
[46.74819565 320.89624023]
[58.71774292 311.74868774]
[72.42292786 305.49444580]
[87.17630768 302.44720459]
[87.48030853 287.45028687]
[87.78430939 272.45336914]
[88.08831787 257.45645142]
[88.39231873 242.45953369]
[88.69632721 227.46261597]
[89.00032806 212.46569824]
[89.30433655 197.46876526]
[89.60833740 182.47184753]
[89.91234589 167.47492981]
[86.88578796 160.68379211]
[90.37755585 152.17799377]
[90.98543549 137.19030762]
[91.59332275 122.20262909]
[80.85392761 114.03770447]
[76.29696655 101.33988953]
[79.39390564 88.20941162]
[69.39466095 77.02839661]
[57.18642044 85.76945496]
[44.10465622 93.13930511]
[30.30274582 99.05153656]
[15.94250965 103.43683624]
[1.19231451 106.24378967]
[-13.77490139 107.43948364]
[-28.78365517 107.00990295]
[-43.65797806 104.96007538]
[-58.22347260 101.31404114]
[-72.30937195 96.11454773]
[-85.75051880 89.42255402]
[-98.38932800 81.31652832]
[-110.07761383 71.89149475]
[-120.67834473 61.25797272]
[-130.06721497 49.54062271]
[-138.13415527 36.87683105]
[-144.78459167 23.41507149]
[-149.94055176 9.31317711]
[-153.54156494 -5.26351357]
[-155.54542542 -20.14409637]
[-155.92863464 -35.15410614]
[-154.68670654 -50.11755753]
[-151.83419800 -64.85900879]
[-147.40455627 -79.20562744]
[-141.44970703 -92.98921204]
[-134.03947449 -106.04814148]
[-125.26074982 -118.22931671]
[-115.21643829 -129.38992310]
[-104.02432251 -139.39910889]
[-91.81560516 -148.13951111]
[-78.73344421 -155.50865173]
[-64.93122101 -161.42013550]
[-50.57074738 -165.80467224]
[-35.82040024 -168.61082458]
[-20.85312080 -169.80572510]
[-5.84439039 -169.37532043]
[9.02982140 -167.32470703]
[23.59512138 -163.67788696]
[37.68074036 -158.47763062]
[51.12152863 -151.78491211]
[63.75990295 -143.67820740]
[75.44767761 -134.25254822]
[86.04783630 -123.61845398]
[95.43608093 -111.90059662]
[103.50234222 -99.23637390]
[110.15205383 -85.77425385]
[115.30724335 -71.67208099]
[118.90747833 -57.09519958]
[120.91053772 -42.21450806]
[121.29294586 -27.20447731]
[120.05020905 -12.24109364]
[117.19690704 2.50020552]
[112.76649475 16.84658623]
[106.81090546 30.62984467]
[99.39997101 43.68837738]
[90.62058258 55.86908340]
[80.57567596 67.02915192]
[90.57492065 78.21015930]
[106.64659119 77.20851135]
[119.66044617 86.69226074]
[134.10241699 82.63894653]
[141.87744141 69.14128876]
[156.58140564 65.23638153]
[169.40144348 72.73184967]
[183.84341431 68.67853546]
[198.28538513 64.62522125]
[212.72737122 60.57190323]
[227.16934204 56.51858902]
[232.12432861 51.99890900]
[237.77075195 50.87481308]
[242.27909851 52.60640335]
[256.87347412 49.14168549]
[271.46783447 45.67697144]
[274.68447876 30.75664711]
[284.06301880 18.71482277]
[297.74136353 11.94240570]
[313.00366211 11.78406620]
[326.81958008 18.27124405]
[336.44592285 30.11590385]
[339.97143555 44.96627808]
[336.69607544 59.87381744]
[327.27017212 71.87861633]
[313.56524658 78.59711456]
[298.30245972 78.69535065]
[284.51220703 72.15381622]
[274.93255615 60.27134323]
[260.33819580 63.73606110]
[245.74380493 67.20077515]
[231.22265625 70.96056366]
[216.78068542 75.01387787]
[202.33869934 79.06719208]
[187.89672852 83.12051392]
[173.45475769 87.17382812]
[166.40710449 100.24540710]
[151.81863403 104.56177521]
[138.15574646 97.08092499]
[123.71376801 101.13423920]
[118.62548065 114.72143555]
[106.58099365 122.81051636]
[105.97311401 137.79818726]
[105.36522675 152.78587341]
[104.90926361 167.77894592]
[104.60525513 182.77586365]
[104.30125427 197.77278137]
[103.99724579 212.76969910]
[103.69324493 227.76661682]
[103.38924408 242.76353455]
[103.08523560 257.76046753]
[102.78123474 272.75738525]
[102.47722626 287.75430298]
[102.17322540 302.75122070]
[116.79098511 306.39382935]
[130.23146057 313.19836426]
[141.82046509 322.82345581]
[150.97671509 334.78634644]
[157.24092102 348.48699951]
[160.29888916 363.23815918]
[159.99722290 378.29992676]
[156.35104370 392.91680908]
[149.54327393 406.35562134]
[139.91535950 417.94229126]
[127.95024109 427.09564209]
[114.24808502 433.35653687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[25 132]
[26 131]
[27 130]
[30 89]
[31 88]
[91 128]
[92 127]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
