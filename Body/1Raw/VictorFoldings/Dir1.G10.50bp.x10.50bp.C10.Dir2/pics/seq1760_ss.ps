%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUACGCAUGGGGGGGGGGUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACxxxxxxxxxxACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCCCCCCCCCCCAUCCCUACGCAU\
) } def
/len { sequence length } bind def

/coor [
[99.57418823 572.55377197]
[86.87870789 564.45941162]
[76.14383698 553.90209961]
[67.83886719 541.34344482]
[62.32684326 527.33233643]
[59.84873581 512.48132324]
[60.51287460 497.43960571]
[64.29022980 482.86477661]
[71.01566315 469.39398193]
[80.39517975 457.61611938]
[92.01873779 448.04602051]
[105.37820435 441.10208130]
[119.88957214 437.08786011]
[118.97805786 422.11560059]
[118.06654358 407.14331055]
[117.15502930 392.17102051]
[116.24351501 377.19876099]
[115.33200073 362.22647095]
[114.42048645 347.25418091]
[113.50897980 332.28192139]
[112.59746552 317.30963135]
[111.68595123 302.33737183]
[96.56023407 298.06500244]
[83.78401947 288.86434937]
[74.90692139 275.82885742]
[71.01334381 260.51831055]
[72.59000397 244.77241516]
[79.46520996 230.48957825]
[90.82732391 219.39814758]
[105.32056427 212.84721375]
[104.10579681 197.89648438]
[102.89102173 182.94575500]
[101.67625427 167.99502563]
[100.46148682 153.04428101]
[98.64183044 138.15507507]
[96.22027588 123.35182190]
[86.39922333 121.36169434]
[77.68194580 115.18166351]
[71.85994720 105.43666077]
[70.37380219 93.51036835]
[55.65100861 90.63993835]
[40.32662201 96.47904968]
[27.78014183 85.91885376]
[30.91830826 69.82276917]
[46.51284790 64.74906921]
[58.52143478 75.91714478]
[73.24422455 78.78757477]
[84.91734314 69.36746979]
[85.22135162 54.37054825]
[85.52535248 39.37363052]
[85.82935333 24.37671089]
[86.13336182 9.37979221]
[83.82639313 5.54345179]
[82.98331451 1.57273388]
[83.46105957 -2.04449368]
[84.96964264 -4.92014360]
[87.11875153 -6.80600739]
[77.40641785 -18.98419571]
[79.15798950 -34.09666061]
[90.82788086 -43.28084183]
[84.52642059 -57.79298019]
[93.51161957 -69.67218018]
[95.02914429 -84.59522247]
[96.54666901 -99.51826477]
[90.24520874 -114.03039551]
[99.23040771 -125.90959930]
[100.74793243 -140.83264160]
[102.26545715 -155.75567627]
[95.96398926 -170.26782227]
[104.94919586 -182.14701843]
[106.46672058 -197.07006836]
[92.70721436 -203.39103699]
[81.74738312 -213.83905029]
[74.77605438 -227.28074646]
[72.54943848 -242.25810242]
[75.30905151 -257.14645386]
[82.75556183 -270.33084106]
[94.08121490 -280.38113403]
[108.05749512 -286.20712280]
[123.16836548 -287.17687988]
[137.77470398 -283.18518066]
[150.29212952 -274.66503906]
[159.36283875 -262.54064941]
[164.00291443 -248.12716675]
[163.70903015 -232.98806763]
[158.51307678 -218.76553345]
[148.97865295 -207.00228882]
[136.13999939 -198.97436523]
[121.38975525 -195.55253601]
[119.87223053 -180.62950134]
[126.28224182 -167.18475342]
[117.18849182 -154.23815918]
[115.67096710 -139.31512451]
[114.15344238 -124.39207458]
[120.56345367 -110.94733429]
[111.46971130 -98.00074005]
[109.95218658 -83.07769775]
[108.43466187 -68.15465546]
[114.84466553 -54.70991516]
[105.75092316 -41.76331711]
[115.33316803 -30.41800499]
[114.00676727 -15.26230335]
[102.04179382 -5.28848267]
[101.13027954 9.68379688]
[100.82627869 24.68071556]
[100.52227020 39.67763519]
[100.21826935 54.67455292]
[99.91426086 69.67147064]
[121.72767639 82.17411041]
[125.36682129 105.12843323]
[111.02352142 120.93026733]
[113.44507599 135.73350525]
[116.40969849 139.08770752]
[117.95909882 142.83959961]
[118.14546204 146.48348999]
[117.18357086 149.58508301]
[115.41221619 151.82951355]
[116.62698364 166.78024292]
[117.84175873 181.73097229]
[119.05652618 196.68171692]
[120.27129364 211.63244629]
[134.19998169 215.11763000]
[146.34860229 222.73005676]
[155.53192139 233.71136475]
[160.85888672 246.97528076]
[161.81900024 261.21508789]
[158.33132935 275.03234863]
[150.75103760 287.07431030]
[139.83334351 296.16616821]
[126.65822601 301.42584229]
[127.56974030 316.39813232]
[128.48126221 331.37039185]
[129.39277649 346.34268188]
[130.30427551 361.31497192]
[131.21578979 376.28723145]
[132.12730408 391.25952148]
[133.03881836 406.23181152]
[133.95033264 421.20407104]
[134.86184692 436.17636108]
[149.75300598 438.40054321]
[163.85618591 443.67254639]
[176.55485535 451.76190186]
[187.29386902 462.31497192]
[195.60379028 474.87039185]
[201.12132263 488.87933350]
[203.60527039 503.72940063]
[202.94705200 518.77136230]
[199.17543030 533.34765625]
[192.45529175 546.82110596]
[183.08041382 558.60266113]
[171.46063232 568.17730713]
[158.10388184 575.12652588]
[143.59410095 579.14642334]
[128.56558228 580.06134033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[30 121]
[31 120]
[32 119]
[33 118]
[34 117]
[35 112]
[36 111]
[40 47]
[41 46]
[48 108]
[49 107]
[50 106]
[51 105]
[52 104]
[57 103]
[60 100]
[62 98]
[63 97]
[64 96]
[66 94]
[67 93]
[68 92]
[70 90]
[71 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
