%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCACCCUAGGGGGGGGGGUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUxxxxxxxxxxACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACCCCCCCCCCCUAUCUCCCUA\
) } def
/len { sequence length } bind def

/coor [
[95.78644562 450.27270508]
[81.76449585 444.71969604]
[69.56454468 435.85336304]
[59.95347214 424.23104858]
[53.53544617 410.58334351]
[50.71390915 395.76815796]
[51.66622543 380.71679688]
[56.33253098 366.37536621]
[64.41949463 353.64541626]
[75.41876984 343.32714844]
[88.63893127 336.06915283]
[103.24893951 332.32772827]
[103.24893951 317.32772827]
[103.24893951 302.32772827]
[103.24893951 287.32772827]
[103.24893951 272.32772827]
[103.24893951 257.32772827]
[103.24893951 242.32772827]
[103.24893951 227.32772827]
[103.24893951 212.32772827]
[103.24893951 197.32772827]
[103.24893951 182.32772827]
[102.17187500 167.36645508]
[100.02329254 152.52113342]
[85.23037720 150.40165710]
[71.63319397 144.20173645]
[60.33255005 134.42329407]
[52.24333954 121.85797119]
[48.02045822 107.52305603]
[48.00577545 92.57907867]
[52.20048904 78.23590088]
[60.26499939 65.65470886]
[71.54640198 55.85408020]
[85.13138580 49.62745285]
[82.98280334 34.78213120]
[80.83422852 19.93680763]
[78.68564606 5.09148455]
[75.92940521 -9.65311146]
[72.57014465 -24.27211952]
[69.21088409 -38.89112854]
[65.85163116 -53.51013565]
[62.49237061 -68.12914276]
[59.13311005 -82.74814606]
[54.13241196 -90.46752930]
[55.85822296 -97.70173645]
[52.79982758 -112.38663483]
[49.74143219 -127.07153320]
[34.76907730 -125.87494659]
[19.76481438 -126.56438446]
[4.96528244 -129.12896729]
[-9.39610863 -133.52825928]
[-23.09285927 -139.69285583]
[-35.90895081 -147.52554321]
[-47.64225388 -156.90278625]
[-58.10772324 -167.67669678]
[-67.14029694 -179.67736816]
[-74.59751892 -192.71549988]
[-80.36178589 -206.58549500]
[-84.34217072 -221.06857300]
[-86.47591400 -235.93634033]
[-86.72936249 -250.95428467]
[-85.09850311 -265.88558960]
[-81.60906982 -280.49472046]
[-76.31609344 -294.55133057]
[-69.30305481 -307.83364868]
[-60.68055344 -320.13226318]
[-50.58457947 -331.25317383]
[-39.17436600 -341.02099609]
[-26.62986565 -349.28164673]
[-13.14892197 -355.90490723]
[1.05584955 -360.78625488]
[15.76041985 -363.84875488]
[30.73287582 -365.04409790]
[45.73707962 -364.35339355]
[60.53639603 -361.78756714]
[74.89741516 -357.38705444]
[88.59365082 -351.22131348]
[101.40908051 -343.38754272]
[113.14159393 -334.00930786]
[123.60615540 -323.23452759]
[132.63772583 -311.23309326]
[140.09384155 -298.19433594]
[145.85694885 -284.32385254]
[149.83612061 -269.84042358]
[151.96861267 -254.97248840]
[152.22077942 -239.95451355]
[150.58866882 -225.02336121]
[147.09800720 -210.41450500]
[141.80384827 -196.35836792]
[134.78968811 -183.07661438]
[126.16615295 -170.77874756]
[116.06924438 -159.65867615]
[104.65821075 -149.89183044]
[92.11301422 -141.63220215]
[78.63151550 -135.01010132]
[64.42633057 -130.12992859]
[67.48472595 -115.44503021]
[70.54312134 -100.76013184]
[73.75212097 -86.10740662]
[77.11137390 -71.48840332]
[80.47063446 -56.86939240]
[83.82989502 -42.25038528]
[87.18915558 -27.63137817]
[90.54840851 -13.01237011]
[92.91836548 -11.40789509]
[94.77483368 -8.73904324]
[95.69812775 -5.20432138]
[95.35115051 -1.15424013]
[93.53096771 2.94290566]
[95.67955017 17.78822899]
[97.82812500 32.63355255]
[99.97670746 47.47887421]
[114.76962280 49.59833908]
[128.36680603 55.79826355]
[139.66744995 65.57671356]
[147.75665283 78.14202881]
[151.97953796 92.47694397]
[151.99421692 107.42092133]
[147.79951477 121.76409912]
[139.73500061 134.34529114]
[128.45359802 144.14591980]
[114.86861420 150.37254333]
[117.01719666 165.21786499]
[126.29187775 153.42887878]
[140.93820190 150.19082642]
[154.31825256 156.97126770]
[160.36799622 170.69717407]
[156.34558105 185.14779663]
[144.07403564 193.77386475]
[129.11500549 192.66593933]
[118.24893951 182.32772827]
[118.24893951 197.32772827]
[118.24893951 212.32772827]
[118.24893951 227.32772827]
[118.24893951 242.32772827]
[118.24893951 257.32772827]
[118.24893951 272.32772827]
[118.24893951 287.32772827]
[118.24893951 302.32772827]
[118.24893951 317.32772827]
[118.24893951 332.32772827]
[132.85894775 336.06915283]
[146.07911682 343.32714844]
[157.07838440 353.64541626]
[165.16535950 366.37536621]
[169.83166504 380.71679688]
[170.78398132 395.76815796]
[167.96243286 410.58334351]
[161.54441833 424.23104858]
[151.93334961 435.85336304]
[139.73338318 444.71969604]
[125.71144104 450.27270508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 123]
[24 122]
[34 112]
[35 111]
[36 110]
[37 109]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[45 98]
[46 97]
[47 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
