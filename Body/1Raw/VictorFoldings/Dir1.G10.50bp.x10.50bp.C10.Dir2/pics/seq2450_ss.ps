%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUCACAGGGGGGGGGGCCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGxxxxxxxxxxAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACCCCCCCCCCCACUCAUCACA\
) } def
/len { sequence length } bind def

/coor [
[160.24540710 546.58630371]
[147.68717957 538.23510742]
[137.60095215 527.02270508]
[130.62075806 513.65380859]
[127.18537903 498.96878052]
[127.51075745 483.89083862]
[131.57644653 469.36770630]
[139.12686157 456.31237793]
[149.68739319 445.54547119]
[162.59419250 437.74383545]
[177.03591919 433.39788818]
[176.41194153 418.41085815]
[175.78796387 403.42385864]
[175.16398621 388.43682861]
[174.54000854 373.44982910]
[173.91603088 358.46279907]
[173.29205322 343.47579956]
[172.66807556 328.48876953]
[172.04409790 313.50177002]
[171.26425171 298.52203369]
[170.32862854 283.55123901]
[169.39299011 268.58047485]
[168.14611816 253.63237000]
[166.58853149 238.71345520]
[165.03096008 223.79455566]
[160.12940979 209.61799622]
[152.13949585 196.92306519]
[144.14956665 184.22813416]
[136.15965271 171.53320312]
[122.83203888 164.88310242]
[122.02951813 149.08226013]
[114.03960419 136.38732910]
[106.04969025 123.69240570]
[86.12545776 120.13519287]
[75.70639038 102.78376770]
[60.99842834 99.83828735]
[46.29046631 96.89280701]
[31.58250618 93.94732666]
[16.87454414 91.00183868]
[3.86297870 99.97261047]
[-11.66555786 97.03321075]
[-20.49826050 83.92752838]
[-17.39484406 68.43093109]
[-4.19650888 59.73728561]
[11.26640511 63.00436783]
[19.82002640 76.29387665]
[34.52798843 79.23936462]
[49.23595047 82.18484497]
[63.94391251 85.13032532]
[78.65187073 88.07581329]
[82.26564026 83.16487885]
[86.98205566 79.30067444]
[83.27589417 64.76573944]
[76.64739227 51.30977631]
[67.38244629 39.51313782]
[58.11749649 27.71649742]
[48.85254669 15.91985703]
[33.43881989 10.32083511]
[30.84767723 -5.87231255]
[43.74466705 -16.00146484]
[58.86246872 -9.64661694]
[60.64918518 6.65490723]
[69.91413116 18.45154762]
[79.17908478 30.24818802]
[88.44403076 42.04482651]
[95.53231049 39.59405136]
[116.79714966 32.24172592]
[116.79714966 17.24172592]
[116.79714966 2.24172544]
[103.02327728 -4.33423805]
[93.47335815 -16.24060822]
[90.04351807 -31.11336708]
[93.41475677 -45.99951935]
[102.91772461 -57.94340134]
[116.66558838 -64.57355499]
[131.92871094 -64.57355499]
[145.67657471 -57.94340134]
[155.17953491 -45.99951935]
[158.55078125 -31.11336708]
[155.12094116 -16.24060822]
[145.57101440 -4.33423805]
[131.79714966 2.24172544]
[131.79714966 17.24172592]
[131.79714966 32.24172592]
[118.12751007 56.70537186]
[97.81082916 61.05958176]
[101.51699066 75.59452057]
[114.07987213 80.00785065]
[122.46765900 90.34944153]
[124.19312286 103.55270386]
[118.74461365 115.70249176]
[126.73453522 128.39741516]
[134.72444153 141.09234619]
[148.62356567 148.65046692]
[148.85458374 163.54328918]
[156.84449768 176.23822021]
[164.83441162 188.93315125]
[172.82434082 201.62808228]
[172.56735229 186.63027954]
[176.12936401 172.05934143]
[183.27658081 158.87158203]
[193.53994751 147.93251038]
[206.24586487 139.96006775]
[220.56042480 135.47749329]
[235.54415894 134.77899170]
[250.21365356 137.91040039]
[263.60617065 144.66619873]
[274.84271240 154.60299683]
[283.18582153 167.06863403]
[288.08798218 181.24499512]
[289.22738647 196.20166016]
[286.52929688 210.95700073]
[280.17080688 224.54263306]
[270.56918335 236.06690979]
[258.35461426 244.77348328]
[244.32876587 250.09094238]
[229.41213989 251.67028809]
[214.58374023 249.40786743]
[200.81677246 243.45216370]
[189.01475525 234.19406128]
[179.94987488 222.23696899]
[181.50744629 237.15588379]
[183.06503296 252.07479858]
[186.68872070 257.72955322]
[186.83996582 263.49224854]
[184.36378479 267.64483643]
[185.29940796 282.61563110]
[186.23504639 297.58642578]
[189.91389465 306.01956177]
[187.03111267 312.87777710]
[187.65509033 327.86480713]
[188.27906799 342.85180664]
[188.90304565 357.83883667]
[189.52702332 372.82583618]
[190.15100098 387.81286621]
[190.77497864 402.79986572]
[191.39895630 417.78689575]
[192.02293396 432.77389526]
[206.77593994 435.90435791]
[220.28657532 442.60610962]
[231.70555115 452.45788574]
[240.31506348 464.84042358]
[245.57391357 478.97531128]
[247.15151978 493.97406006]
[244.94871521 508.89379883]
[239.10395813 522.79669189]
[229.98468018 534.80871582]
[218.16410828 544.17486572]
[204.38529968 550.30639648]
[189.51440430 552.81774902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 128]
[21 127]
[22 126]
[23 123]
[24 122]
[25 121]
[26 98]
[27 97]
[28 96]
[29 95]
[31 93]
[32 92]
[33 91]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[52 87]
[53 86]
[54 65]
[55 64]
[56 63]
[57 62]
[67 84]
[68 83]
[69 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
