%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCAAACCCCAGGGGGGGGGGAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUxxxxxxxxxxUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACCCCCCCCCCCUGCAAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[69.04581451 399.97476196]
[54.77404785 395.16531372]
[41.87006378 387.39993286]
[30.93741035 377.04177856]
[22.48742294 364.57537842]
[16.91532707 350.58374023]
[14.48173809 335.72131348]
[15.30047894 320.68322754]
[19.33325577 306.17285156]
[26.39144897 292.86886597]
[36.14493561 281.39352417]
[48.13752365 272.28353882]
[61.80830002 265.96499634]
[76.51785278 262.73342896]
[76.51785278 247.73344421]
[76.51785278 232.73344421]
[76.51785278 217.73344421]
[76.51785278 202.73344421]
[76.51785278 187.73344421]
[76.51785278 172.73344421]
[76.51785278 157.73344421]
[76.51785278 142.73344421]
[76.51785278 127.73343658]
[67.31713867 115.88663483]
[52.78392029 112.17372894]
[38.25070572 108.46083069]
[23.71748924 104.74792480]
[13.76493740 114.32969666]
[0.47924623 117.70161438]
[-12.62904835 114.08342743]
[-22.15086746 104.52745819]
[-25.66513824 91.61553955]
[-40.12115479 87.61258698]
[-54.57716751 83.60964203]
[-68.21389771 91.13806915]
[-82.81732941 86.87257385]
[-89.91049957 73.82563782]
[-104.36651611 69.82269287]
[-113.40384674 82.01658630]
[-126.23793030 90.11909485]
[-141.13307190 93.03441620]
[-156.07482910 90.36827087]
[-169.04244995 82.48123169]
[-178.28216553 70.43996429]
[-182.54438782 55.87295151]
[-181.25267029 40.75025558]
[-174.58172607 27.11710167]
[-163.43374634 16.81725883]
[-149.31637573 11.24369717]
[-134.13891602 11.15019512]
[-119.95394897 16.54940033]
[-108.67990875 26.71111107]
[-101.84149933 40.26103973]
[-100.36356354 55.36667633]
[-85.90755463 59.36962509]
[-73.11371613 51.82951355]
[-58.39623260 55.68314362]
[-50.57421875 69.15362549]
[-36.11820221 73.15657806]
[-21.66218567 77.15952301]
[-9.18045235 66.53678894]
[7.33750391 65.41558075]
[21.41959190 74.43298340]
[27.43039131 90.21471405]
[41.96360779 93.92761230]
[56.49682236 97.64051819]
[71.03003693 101.35341644]
[74.96787262 89.26268768]
[83.32372284 80.74311066]
[93.86295319 77.09774780]
[94.76287079 62.12477112]
[95.66278076 47.15179062]
[96.56269836 32.17881012]
[83.02767181 25.19862747]
[73.50697327 13.31266212]
[69.65011597 -1.41977000]
[72.12532806 -16.44618607]
[80.50376892 -29.16316986]
[93.33381653 -37.36742783]
[108.39258575 -39.63751984]
[123.07106018 -35.58013916]
[134.82609558 -25.89825439]
[141.62107849 -12.26930904]
[142.27871704 2.94540119]
[136.68508911 17.10983467]
[125.80931091 27.76991653]
[111.53568268 33.07872391]
[110.63576508 48.05170441]
[109.73584747 63.02468491]
[108.83592987 77.99766541]
[115.28100586 81.87081909]
[120.18920898 87.56729126]
[134.79380798 84.14592743]
[149.39840698 80.72455597]
[161.06999207 70.04351807]
[175.22657776 74.67388153]
[189.83117676 71.25251770]
[204.43577576 67.83115387]
[211.91345215 57.27693558]
[224.18934631 54.75065994]
[234.54098511 61.07673264]
[249.21110535 57.94827271]
[263.88125610 54.81981277]
[278.55136108 51.69134903]
[293.22149658 48.56288910]
[307.89163208 45.43442917]
[311.45025635 30.59195518]
[321.10299683 18.76880264]
[334.93334961 12.31246567]
[350.19525146 12.50485611]
[363.85845947 19.30777359]
[373.21011353 31.37049484]
[376.39346313 46.29795456]
[372.77642822 61.12630081]
[363.07717896 72.91134644]
[349.22152710 79.31317139]
[333.96047974 79.06068420]
[320.32418823 72.20401001]
[311.02008057 60.10455704]
[296.34997559 63.23302078]
[281.67984009 66.36148071]
[267.00970459 69.48994446]
[252.33956909 72.61840057]
[237.66943359 75.74686432]
[225.32350159 88.18503571]
[207.85713196 82.43574524]
[193.25254822 85.85711670]
[178.64794922 89.27848053]
[168.02098083 99.71480560]
[152.81976318 95.32915497]
[138.21517944 98.75051880]
[123.61057281 102.17189026]
[114.68808746 121.88364410]
[91.51785278 127.73343658]
[91.51785278 142.73344421]
[91.51785278 157.73344421]
[91.51785278 172.73344421]
[91.51785278 187.73344421]
[91.51785278 202.73344421]
[91.51785278 217.73344421]
[91.51785278 232.73344421]
[91.51785278 247.73344421]
[91.51785278 262.73342896]
[106.22741699 265.96499634]
[119.89819336 272.28353882]
[131.89077759 281.39352417]
[141.64425659 292.86886597]
[148.70245361 306.17285156]
[152.73522949 320.68322754]
[153.55397034 335.72131348]
[151.12039185 350.58374023]
[145.54829407 364.57537842]
[137.09829712 377.04177856]
[126.16564941 387.39993286]
[113.26166534 395.16531372]
[98.98989105 399.97476196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 67]
[25 66]
[26 65]
[27 64]
[32 60]
[33 59]
[34 58]
[37 55]
[38 54]
[70 90]
[71 89]
[72 88]
[73 87]
[92 132]
[93 131]
[94 130]
[96 128]
[97 127]
[98 126]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
