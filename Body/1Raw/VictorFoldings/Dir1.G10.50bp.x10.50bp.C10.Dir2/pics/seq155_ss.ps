%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAAAGUGGGGGGGGGGGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGxxxxxxxxxxAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACCCCCCCCCCCUACGAAAGUG\
) } def
/len { sequence length } bind def

/coor [
[68.37768555 516.66369629]
[55.50440979 508.76080322]
[45.38011551 497.55032349]
[38.82553482 483.94097900]
[36.37201309 469.03604126]
[38.21844864 454.04379272]
[44.21516037 440.17959595]
[53.87602234 428.56735229]
[66.41786957 420.14840698]
[80.82398987 415.60522461]
[80.51193237 400.60848999]
[80.19988251 385.61172485]
[79.88782501 370.61495972]
[79.57576752 355.61822510]
[79.26371002 340.62145996]
[78.95165253 325.62472534]
[78.63959503 310.62796021]
[78.32754517 295.63119507]
[78.01548767 280.63446045]
[77.70343018 265.63769531]
[77.39137268 250.64094543]
[69.39097595 238.07739258]
[76.83950043 224.11924744]
[74.02671051 220.18684387]
[73.69841003 214.43154907]
[76.83950043 208.49513245]
[77.15155792 193.49836731]
[77.46361542 178.50161743]
[67.45952606 189.67829895]
[53.04116440 193.81481934]
[38.63333893 189.64173889]
[28.65763283 178.43972778]
[26.17545700 163.64651489]
[31.94856453 149.80198669]
[44.20526123 141.15481567]
[59.18412018 140.35873413]
[72.28832245 147.65803528]
[79.49653625 160.81344604]
[82.59485626 146.13693237]
[85.69317627 131.46040344]
[88.79149628 116.78387451]
[75.92181396 99.86585236]
[84.72412109 76.56427765]
[73.84529114 66.23707581]
[62.96646881 55.90987015]
[52.08764267 45.58266449]
[41.20881653 35.25545883]
[30.32999039 24.92825317]
[17.39761734 24.47269249]
[8.54500961 15.59292126]
[8.15591049 3.46213770]
[-2.50571585 -7.08915234]
[-13.16734219 -17.64044189]
[-23.82896805 -28.19173241]
[-39.81987762 -31.82806206]
[-44.40702438 -47.57258987]
[-32.87154770 -59.22869492]
[-17.08015442 -54.80557632]
[-13.27767849 -38.85335922]
[-2.61605191 -28.30206871]
[8.04557419 -17.75077820]
[18.70720100 -7.19948864]
[35.87603760 -3.70220232]
[40.65719604 14.04942799]
[51.53602219 24.37663269]
[62.41484833 34.70383835]
[73.29367065 45.03104401]
[84.17250061 55.35824966]
[95.05132294 65.68545532]
[90.45538330 51.40689087]
[85.85943604 37.12833023]
[76.36880493 25.51248360]
[70.80970764 11.58063507]
[69.69656372 -3.37800527]
[73.13239288 -17.97920799]
[80.79924011 -30.87181854]
[91.98764801 -40.86279297]
[105.66226959 -47.02759552]
[120.55769348 -48.79575348]
[135.29553223 -46.00364685]
[148.51200867 -38.90964508]
[158.98410034 -28.17021370]
[165.74273682 -14.77914429]
[168.16250610 0.02439233]
[166.01950073 14.87051964]
[159.51200867 28.38541985]
[149.24221802 39.31846237]
[136.15910339 46.65844345]
[126.65856934 58.26619339]
[117.15802765 69.87393951]
[131.06059265 64.24198151]
[144.96315002 58.61002731]
[154.84857178 46.25734329]
[169.54975891 48.64993286]
[183.45231628 43.01797485]
[197.35487366 37.38601685]
[211.19808960 31.60974693]
[224.98046875 25.68978310]
[238.76284790 19.76981926]
[252.54524231 13.84985638]
[258.16937256 -0.91985822]
[272.62402344 -7.31042576]
[287.33343506 -1.53043509]
[293.57083130 12.99094772]
[287.63565063 27.63844299]
[273.04913330 33.72195435]
[258.46520996 27.63223839]
[244.68281555 33.55220032]
[230.90043640 39.47216415]
[217.11805725 45.39212799]
[212.18151855 50.95776749]
[202.98683167 51.28857422]
[189.08427429 56.92053223]
[175.18171692 62.55248642]
[166.29067993 74.50233459]
[150.59509277 72.51258087]
[136.69255066 78.14453888]
[122.78998566 83.77649689]
[122.27296448 109.14834595]
[103.46802521 119.88219452]
[100.36970520 134.55873108]
[97.27137756 149.23524475]
[94.17305756 163.91177368]
[92.46037292 178.81367493]
[92.14831543 193.81042480]
[91.83625793 208.80718994]
[91.83625793 223.80718994]
[99.85897827 237.44340515]
[92.38813019 250.32888794]
[92.70018005 265.32565308]
[93.01223755 280.32238770]
[93.32429504 295.31915283]
[93.63635254 310.31588745]
[93.94841003 325.31265259]
[94.26046753 340.30941772]
[94.57251740 355.30615234]
[94.88457489 370.30291748]
[95.19663239 385.29968262]
[95.50868988 400.29641724]
[95.82074738 415.29318237]
[110.40338898 419.23312378]
[123.28459167 427.12307739]
[133.42015076 438.32339478]
[139.98840332 451.92614746]
[142.45689392 466.82861328]
[140.62551880 481.82269287]
[134.64273071 495.69293213]
[124.99354553 507.31488037]
[112.46015930 515.74639893]
[98.05860901 520.30407715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 127]
[26 126]
[27 125]
[28 124]
[38 123]
[39 122]
[40 121]
[41 120]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[51 62]
[52 61]
[53 60]
[54 59]
[90 118]
[91 117]
[92 116]
[94 114]
[95 113]
[96 112]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
