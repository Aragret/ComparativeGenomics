%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACAUAUGGGGGGGGGGUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACxxxxxxxxxxUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCCCCCCCCCCCACACCAUAU\
) } def
/len { sequence length } bind def

/coor [
[81.34115601 425.49801636]
[67.49521637 419.48199463]
[55.78655624 409.95257568]
[47.08403015 397.61691284]
[42.03342819 383.39038086]
[41.00953674 368.32870483]
[44.08833694 353.54953003]
[51.04135895 340.14962769]
[61.35264206 329.12329102]
[74.25702667 321.28878784]
[88.79691315 317.22744751]
[88.79691315 302.22744751]
[88.79691315 287.22744751]
[88.79691315 272.22744751]
[88.79691315 257.22744751]
[88.79691315 242.22746277]
[88.79691315 227.22746277]
[88.79691315 212.22746277]
[88.79691315 197.22746277]
[88.79691315 182.22746277]
[88.79691315 167.22746277]
[86.51522827 164.45953369]
[85.49582672 160.42684937]
[86.32827759 155.75144958]
[89.29415894 151.29913330]
[90.22978973 136.32833862]
[91.16542053 121.35755157]
[92.10104370 106.38676453]
[89.40731049 98.72988129]
[93.21506500 91.11526489]
[86.65167999 76.71968842]
[95.42015076 64.67962646]
[96.04412842 49.69261551]
[96.04412842 34.69261551]
[96.04412842 19.69261360]
[96.04412842 4.69261408]
[96.04412842 -10.30738640]
[96.04412842 -25.30738640]
[81.08671570 -26.54644394]
[66.28270721 -29.01645088]
[51.73324203 -32.70053864]
[37.53770065 -37.57353592]
[23.79305458 -43.60215759]
[10.59319782 -50.74521637]
[-1.97169900 -58.95392609]
[-13.81580544 -68.17220306]
[-24.85821152 -78.33708954]
[-35.02348709 -89.37912750]
[-44.24219131 -101.22290802]
[-52.45134735 -113.78751373]
[-59.59488297 -126.98711395]
[-65.62399292 -140.73153687]
[-70.49749756 -154.92691040]
[-74.18210602 -169.47624207]
[-76.65264130 -184.28016663]
[-77.89223480 -199.23753357]
[-77.89241028 -214.24618530]
[-76.65317535 -229.20358276]
[-74.18299103 -244.00755310]
[-70.49873352 -258.55697632]
[-65.62556458 -272.75247192]
[-59.59678268 -286.49703979]
[-52.45356369 -299.69680786]
[-44.24470520 -312.26162720]
[-35.02628326 -324.10562134]
[-24.86127281 -335.14788818]
[-13.81910801 -345.31304932]
[-1.97522140 -354.53158569]
[10.58948040 -362.74060059]
[23.78916550 -369.88397217]
[37.53366852 -375.91293335]
[51.72909164 -380.78625488]
[66.27847290 -384.47070312]
[81.08242035 -386.94107056]
[96.03981018 -388.18048096]
[111.04845428 -388.18048096]
[126.00584412 -386.94107056]
[140.80978394 -384.47070312]
[155.35917664 -380.78625488]
[169.55459595 -375.91293335]
[183.29910278 -369.88397217]
[196.49877930 -362.74060059]
[209.06349182 -354.53158569]
[220.90736389 -345.31304932]
[231.94953918 -335.14788818]
[242.11454773 -324.10562134]
[251.33296204 -312.26162720]
[259.54183960 -299.69680786]
[266.68505859 -286.49703979]
[272.71383667 -272.75247192]
[277.58700562 -258.55697632]
[281.27127075 -244.00755310]
[283.74145508 -229.20358276]
[284.98068237 -214.24618530]
[284.98049927 -199.23753357]
[283.74090576 -184.28016663]
[281.27035522 -169.47624207]
[277.58575439 -154.92691040]
[272.71224976 -140.73153687]
[266.68313599 -126.98711395]
[259.53961182 -113.78751373]
[251.33045959 -101.22290802]
[242.11175537 -89.37912750]
[231.94647217 -78.33708954]
[220.90406799 -68.17220306]
[209.05996704 -58.95392609]
[196.49507141 -50.74521637]
[183.29521179 -43.60215759]
[169.55056763 -37.57353592]
[155.35502625 -32.70053864]
[140.80555725 -29.01645088]
[126.00154877 -26.54644394]
[111.04412842 -25.30738640]
[111.04412842 -10.30738640]
[111.04412842 4.69261408]
[111.04412842 19.69261360]
[111.04412842 34.69261551]
[111.04412842 49.69261551]
[112.99779510 51.78797531]
[114.21117401 54.80818939]
[114.31827545 58.46474457]
[113.06824493 62.33882141]
[110.36824036 65.92650604]
[117.02081299 79.25289154]
[108.16314697 92.36214447]
[107.07183838 107.32238770]
[106.13620758 122.29318237]
[105.20058441 137.26397705]
[104.26495361 152.23477173]
[103.79691315 167.22746277]
[103.79691315 182.22746277]
[103.79691315 197.22746277]
[103.79691315 212.22746277]
[103.79691315 227.22746277]
[103.79691315 242.22746277]
[103.79691315 257.22744751]
[103.79691315 272.22744751]
[103.79691315 287.22744751]
[103.79691315 302.22744751]
[103.79691315 317.22744751]
[118.33679962 321.28878784]
[131.24118042 329.12329102]
[141.55245972 340.14962769]
[148.50547791 353.54953003]
[151.58428955 368.32870483]
[150.56039429 383.39038086]
[145.50979614 397.61691284]
[136.80726624 409.95257568]
[125.09860229 419.48199463]
[111.25266266 425.49801636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 129]
[26 128]
[27 127]
[28 126]
[30 125]
[32 123]
[33 118]
[34 117]
[35 116]
[36 115]
[37 114]
[38 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
