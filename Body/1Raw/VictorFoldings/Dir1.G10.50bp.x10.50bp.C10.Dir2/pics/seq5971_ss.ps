%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGACCAAGGGGGGGGGGGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAxxxxxxxxxxGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUACAUUGGGCCCCCCCCCCACAGACCUAG\
) } def
/len { sequence length } bind def

/coor [
[83.23851013 354.19198608]
[70.36523438 346.28909302]
[60.24094009 335.07861328]
[53.68635941 321.46926880]
[51.23283768 306.56433105]
[53.07927322 291.57208252]
[59.07598495 277.70788574]
[68.73684692 266.09564209]
[81.27869415 257.67669678]
[95.68481445 253.13351440]
[95.37276459 238.13676453]
[95.06070709 223.14001465]
[94.74864960 208.14326477]
[94.43659210 193.14649963]
[94.12453461 178.14974976]
[93.81247711 163.15299988]
[93.50042725 148.15625000]
[93.18836975 133.15948486]
[92.87631226 118.16273499]
[80.26518250 110.04119873]
[66.48280334 115.96115875]
[52.70042038 121.88112640]
[51.57720566 137.14535522]
[43.47916031 150.13305664]
[30.26715469 157.85972595]
[14.97721386 158.54985046]
[1.12285161 152.04484558]
[-8.11229992 139.83949280]
[-10.60607052 124.73850250]
[-5.78541040 110.21198273]
[5.24192810 99.59801483]
[19.94194412 95.33560944]
[34.93667984 98.40422821]
[46.78045654 108.09873962]
[60.56283951 102.17877960]
[74.34522247 96.25881195]
[81.80013275 83.24250793]
[79.93251801 68.35922241]
[78.06490326 53.47594452]
[76.19728851 38.59266663]
[74.32968140 23.70938683]
[72.46206665 8.82610607]
[70.59445190 -6.05717373]
[68.72683716 -20.94045448]
[66.70450592 -35.80350113]
[57.43494797 -24.01047897]
[42.79055023 -20.76370049]
[29.40536308 -27.53398514]
[23.34300804 -41.25432968]
[27.34979248 -55.70928574]
[39.61060333 -64.35060883]
[54.57117081 -63.26370621]
[65.45439911 -52.94058609]
[65.45439911 -67.94058990]
[65.45439911 -82.94058990]
[65.45439911 -97.94058990]
[65.45439911 -112.94058990]
[57.71709824 -126.74076080]
[65.45439911 -139.46803284]
[65.45439911 -154.46803284]
[65.45439911 -169.46803284]
[65.45439911 -184.46803284]
[50.76581192 -187.81364441]
[37.19019699 -194.34437561]
[25.40849876 -203.73263550]
[16.01168251 -215.50750732]
[9.47108936 -229.07836914]
[6.11479235 -243.76452637]
[6.11114216 -258.82931519]
[9.46032143 -273.51708984]
[15.99433804 -287.09112549]
[25.38544655 -298.87054443]
[37.16259384 -308.26449585]
[50.73504257 -314.80178833]
[65.42200470 -318.15454102]
[80.48679352 -318.15454102]
[95.17375183 -314.80178833]
[108.74620056 -308.26449585]
[120.52335358 -298.87054443]
[129.91445923 -287.09112549]
[136.44847107 -273.51708984]
[139.79765320 -258.82931519]
[139.79400635 -243.76452637]
[136.43771362 -229.07836914]
[129.89710999 -215.50750732]
[120.50029755 -203.73263550]
[108.71859741 -194.34437561]
[95.14298248 -187.81364441]
[80.45439911 -184.46803284]
[80.45439911 -169.46803284]
[80.45439911 -154.46803284]
[80.45439911 -139.46803284]
[88.19169617 -126.74076080]
[80.45439911 -112.94058990]
[80.45439911 -97.94058990]
[80.45439911 -82.94058990]
[80.45439911 -67.94058990]
[80.45439911 -52.94058609]
[81.54570770 -37.98033905]
[85.65479279 -31.77863884]
[83.61011505 -22.80806732]
[85.47772980 -7.92478704]
[87.34534454 6.95849276]
[89.21295929 21.84177208]
[91.08057404 36.72505188]
[92.94818115 51.60833359]
[94.81579590 66.49161530]
[96.68341064 81.37489319]
[102.17984772 67.41820526]
[106.97830963 53.20642090]
[118.31291962 43.38162613]
[133.06202698 40.64964676]
[147.16362000 45.76289749]
[156.73397827 57.31314468]
[159.13735962 72.11935425]
[153.71183777 86.10376740]
[141.95153809 95.41500854]
[126.97235870 96.20494843]
[140.49655151 102.69311523]
[154.02073669 109.18128204]
[167.54492188 115.66944885]
[183.09580994 111.72615051]
[195.78698730 121.54010010]
[195.88287354 137.58287048]
[183.30992126 147.54782104]
[167.71301270 143.79069519]
[161.05676270 129.19363403]
[147.53257751 122.70546722]
[134.00837708 116.21730804]
[120.48419189 109.72914124]
[107.87306213 117.85068512]
[108.18511963 132.84744263]
[108.49717712 147.84419250]
[108.80923462 162.84094238]
[109.12129211 177.83769226]
[109.43334961 192.83445740]
[109.74539948 207.83120728]
[110.05745697 222.82795715]
[110.36951447 237.82470703]
[110.68157196 252.82147217]
[125.26421356 256.76141357]
[138.14541626 264.65136719]
[148.28097534 275.85168457]
[154.84922791 289.45443726]
[157.31771851 304.35690308]
[155.48634338 319.35098267]
[149.50355530 333.22119141]
[139.85437012 344.84317017]
[127.32098389 353.27471924]
[112.91943359 357.83233643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 36]
[21 35]
[22 34]
[37 108]
[38 107]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[59 92]
[60 91]
[61 90]
[62 89]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
