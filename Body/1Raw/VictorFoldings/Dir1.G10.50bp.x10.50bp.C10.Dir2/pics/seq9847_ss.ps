%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCCCCUAACAGGGGGGGGGGACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCxxxxxxxxxxCUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCCCCCCCCCCCACCCCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[79.29956818 405.88244629]
[65.02779388 401.07299805]
[52.12381363 393.30761719]
[41.19115829 382.94946289]
[32.74117279 370.48303223]
[27.16907692 356.49139404]
[24.73548698 341.62896729]
[25.55422783 326.59091187]
[29.58700562 312.08053589]
[36.64519882 298.77655029]
[46.39868164 287.30120850]
[58.39126968 278.19122314]
[72.06204987 271.87268066]
[86.77160645 268.64111328]
[86.77160645 253.64111328]
[86.77160645 238.64111328]
[86.77160645 223.64111328]
[86.77160645 208.64111328]
[86.77160645 193.64111328]
[86.77160645 178.64111328]
[86.77160645 163.64111328]
[86.77160645 148.64111328]
[86.77160645 133.64111328]
[86.77160645 118.64111328]
[77.85104370 130.70028687]
[65.01461792 138.46083069]
[50.19133377 140.75653076]
[35.60878372 137.24238586]
[23.45837975 128.44650269]
[15.56604385 115.69067383]
[13.11780834 100.89181519]
[16.48158455 86.27384949]
[25.15187645 74.03350067]
[37.82574463 66.01021576]
[52.59860229 63.40970230]
[67.25043488 66.62275696]
[79.57942200 75.16652679]
[87.73203278 87.75514221]
[83.87391663 73.25980377]
[78.61454773 65.72142792]
[80.08671570 58.43578339]
[76.51940155 43.86614609]
[72.95208740 29.29651070]
[69.38478088 14.72687531]
[65.81746674 0.15723991]
[58.49142075 -12.93203259]
[47.93801117 -23.59156227]
[37.27848053 -34.14496994]
[26.51390076 -44.59120560]
[15.74931908 -55.03743744]
[2.11971569 -48.40345764]
[-12.95719910 -46.83423996]
[-27.66081429 -50.51927567]
[-40.21559906 -59.01358032]
[-49.10549545 -71.29142761]
[-53.25701523 -85.87020111]
[-52.16883469 -100.98944855]
[-45.97235870 -114.82344818]
[-35.41584015 -125.70167542]
[-21.77403450 -132.31053162]
[-6.69425392 -133.85195923]
[8.00254536 -130.13983154]
[20.54165268 -121.62239838]
[29.40891075 -109.32819366]
[33.53355408 -94.74179077]
[32.41751099 -79.62457275]
[26.19555283 -65.80201721]
[36.96013260 -55.35578537]
[47.72471619 -44.90955353]
[54.75440216 -42.49472046]
[58.59753799 -34.14496994]
[69.15094757 -23.48544312]
[65.58028412 -38.05425644]
[65.16585541 -53.04853058]
[67.92633820 -67.79233551]
[73.73729706 -81.62102509]
[82.33677673 -93.91122437]
[93.33711243 -104.10890198]
[106.24243164 -111.75434113]
[120.47096252 -116.50290680]
[135.38130188 -118.14052582]
[150.30130005 -116.59338379]
[164.55838013 -111.93122864]
[177.50984192 -104.36421204]
[188.57183838 -94.23345947]
[197.24571228 -81.99565125]
[203.14045715 -68.20246124]
[205.99032593 -53.47567749]
[205.66687012 -38.47916412]
[202.18464661 -23.88895798]
[195.70065308 -10.36276817]
[186.50717163 1.48965335]
[175.01863098 11.13401031]
[161.75294495 18.13554192]
[147.30810547 22.17862701]
[132.33526611 23.08100319]
[117.50941467 20.80199623]
[103.49886322 15.44433975]
[90.93520355 7.24955273]
[80.38710022 -3.41007304]
[83.95441437 11.15956211]
[87.52172852 25.72919846]
[91.08903503 40.29883194]
[94.65634918 54.86846924]
[98.36925507 69.40168762]
[102.22737122 83.89702606]
[113.79272461 93.44913483]
[128.75595093 94.49880219]
[143.71917725 95.54847717]
[152.55548096 93.01713562]
[158.97033691 96.77180481]
[173.90957642 98.12066650]
[188.84880066 99.46952820]
[196.23204041 86.15007782]
[208.39836121 76.99037170]
[223.23991394 73.57738495]
[238.18527222 76.50243378]
[250.64509583 85.25874329]
[258.46060181 98.32922363]
[260.27777100 113.44934082]
[255.78169250 127.99943542]
[245.75138855 139.45861816]
[231.92466736 145.84152222]
[216.69706726 146.04226685]
[202.70687866 140.02606201]
[192.37799072 128.83528137]
[187.49993896 114.40875244]
[172.56071472 113.05989075]
[157.62147522 111.71103668]
[142.66950989 110.51170349]
[127.70627594 109.46203613]
[112.74304962 108.41236115]
[101.77160645 118.64111328]
[101.77160645 133.64111328]
[101.77160645 148.64111328]
[101.77160645 163.64111328]
[101.77160645 178.64111328]
[101.77160645 193.64111328]
[101.77160645 208.64111328]
[101.77160645 223.64111328]
[101.77160645 238.64111328]
[101.77160645 253.64111328]
[101.77160645 268.64111328]
[116.48116302 271.87268066]
[130.15193176 278.19122314]
[142.14453125 287.30120850]
[151.89801025 298.77655029]
[158.95620728 312.08053589]
[162.98898315 326.59091187]
[163.80772400 341.62896729]
[161.37413025 356.49139404]
[155.80203247 370.48303223]
[147.35205078 382.94946289]
[136.41940308 393.30761719]
[123.51541138 401.07299805]
[109.24364471 405.88244629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[38 106]
[39 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 100]
[46 72]
[47 71]
[48 69]
[49 68]
[50 67]
[107 132]
[108 131]
[109 130]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
