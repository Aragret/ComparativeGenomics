%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAACAGCAGGGGGGGGGGUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUxxxxxxxxxxGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCCCCCCCCCCCUCUAACAGCA\
) } def
/len { sequence length } bind def

/coor [
[99.37075043 375.26254272]
[86.15055084 367.99005127]
[75.26374817 357.54306030]
[67.45261383 344.63381958]
[63.24973679 330.14248657]
[62.94166183 315.05715942]
[66.54940796 300.40634155]
[73.82698059 287.18893433]
[84.27818298 276.30618286]
[97.19044495 268.50003052]
[111.68338013 264.30273438]
[111.37133026 249.30598450]
[111.05927277 234.30923462]
[110.74721527 219.31248474]
[110.43515778 204.31571960]
[110.12310028 189.31896973]
[109.81104279 174.32221985]
[109.49899292 159.32546997]
[109.18693542 144.32870483]
[108.87487793 129.33195496]
[103.02506256 124.63837433]
[100.74544525 139.46414185]
[86.76618195 144.90290833]
[75.06638336 135.51596069]
[77.34572601 120.69015503]
[91.32543945 115.25121307]
[85.47563171 110.55763245]
[70.76766968 113.50311279]
[65.23374939 127.90378571]
[52.77923203 137.00810242]
[37.37830734 137.91090393]
[23.94535446 130.32412720]
[16.76677895 116.66865540]
[18.13323975 101.30193329]
[27.60870361 89.12740326]
[42.16958237 84.02992249]
[57.16955566 87.63607788]
[67.82218933 98.79515839]
[82.53015137 95.84967041]
[84.30752563 88.56332397]
[69.73482513 85.00856018]
[55.16218185 81.45355225]
[58.71742630 66.88097382]
[73.28958893 70.43585968]
[87.86228943 73.99061584]
[89.63967133 66.70426941]
[77.94004822 57.31710434]
[66.24042511 47.92994308]
[54.54080200 38.54278183]
[42.84117889 29.15562057]
[27.54085732 32.38582230]
[13.76820469 24.97987366]
[8.02624702 10.43463612]
[13.02616024 -4.38207388]
[26.40713692 -12.47425842]
[41.85109329 -10.02103615]
[52.06586075 1.81925678]
[52.22834015 17.45599556]
[63.92796326 26.84315872]
[75.62758636 36.23031998]
[87.32720947 45.61748123]
[99.02683258 55.00464249]
[114.02359009 54.69258881]
[125.32259369 44.82686234]
[136.62159729 34.96113968]
[121.79804993 37.25514603]
[106.80950928 36.66886902]
[92.21044159 33.22399902]
[78.54088593 27.04796791]
[66.30652618 18.36923981]
[55.95991898 7.50886345]
[47.88382339 -5.13141489]
[42.37698364 -19.08400345]
[39.64311218 -33.83276367]
[39.78334045 -48.83210754]
[42.79248047 -63.52717972]
[48.55921936 -77.37436676]
[56.87023163 -89.86144257]
[67.41807556 -100.52648163]
[79.81256104 -108.97495270]
[93.59519196 -114.89433289]
[108.25611877 -118.06565094]
[123.25299835 -118.37159729]
[138.03106689 -115.80084991]
[152.04364014 -110.44850159]
[164.77238464 -102.51255798]
[175.74641418 -92.28658295]
[184.55978394 -80.14884949]
[190.88647461 -66.54837036]
[194.49243164 -51.98825073]
[195.24427795 -37.00710678]
[193.11419678 -22.15911865]
[188.18098450 -7.99354792]
[180.62712097 4.96558952]
[170.73205566 16.23890686]
[158.86740112 25.40587425]
[173.80171204 24.00357056]
[188.73600769 22.60126686]
[203.67031860 21.19896317]
[210.13934326 7.33898544]
[222.59503174 -1.36461854]
[237.63488770 -2.65647125]
[251.21121216 3.71060181]
[259.72036743 15.93596840]
[274.65469360 14.53366470]
[289.58898926 13.13136101]
[304.52331543 11.72905731]
[319.45761108 10.32675362]
[330.75769043 -1.06129873]
[346.69049072 0.81629819]
[355.03372192 14.51921272]
[349.38720703 29.53574181]
[334.08242798 34.34648895]
[320.85992432 25.26106071]
[305.92559814 26.66336441]
[290.99130249 28.06566811]
[276.05697632 29.46797180]
[261.12268066 30.87027550]
[255.03805542 44.46597290]
[242.88430786 53.24905014]
[227.86685181 54.77952194]
[214.00866699 48.54674149]
[205.07263184 36.13327026]
[190.13832092 37.53557587]
[175.20401001 38.93787766]
[160.26969910 40.34018326]
[146.48731995 46.26014709]
[135.18830872 56.12586975]
[123.88931274 65.99159241]
[123.87162781 129.01989746]
[124.18368530 144.01666260]
[124.49574280 159.01341248]
[124.80780029 174.01016235]
[125.11985779 189.00691223]
[125.43191528 204.00367737]
[125.74396515 219.00042725]
[126.05602264 233.99717712]
[126.36808014 248.99392700]
[126.68013763 263.99069214]
[141.33512878 267.58145142]
[154.56094360 274.84371948]
[165.45581055 285.28231812]
[173.27690125 298.18551636]
[177.49096680 312.67358398]
[177.81069946 327.75866699]
[174.21426392 342.41229248]
[166.94689941 355.63528442]
[156.50410461 366.52612305]
[143.59786987 374.34225464]
[129.10818481 378.55072021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 39]
[28 38]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[63 129]
[64 128]
[65 127]
[96 126]
[97 125]
[98 124]
[99 123]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
