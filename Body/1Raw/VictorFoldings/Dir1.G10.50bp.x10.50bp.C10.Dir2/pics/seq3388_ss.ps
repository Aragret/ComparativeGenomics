%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGGCCCCGGGGGGGGGGAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAxxxxxxxxxxACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACCCCCCCCCCCAAAGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.91345215 360.05743408]
[58.69325256 352.78497314]
[47.80644608 342.33798218]
[39.99531555 329.42871094]
[35.79243469 314.93740845]
[35.48436356 299.85205078]
[39.09210587 285.20123291]
[46.36967850 271.98385620]
[56.82088470 261.10107422]
[69.73314667 253.29493713]
[84.22608185 249.09765625]
[83.91402435 234.10090637]
[83.60197449 219.10414124]
[83.28991699 204.10739136]
[82.97785950 189.11064148]
[82.66580200 174.11389160]
[82.35374451 159.11712646]
[82.04168701 144.12037659]
[81.72963715 129.12362671]
[71.06800842 118.57233429]
[56.06882095 118.41629791]
[41.06962967 118.26026154]
[25.28158760 127.67926025]
[10.51937103 118.24120331]
[-4.47981739 118.39723969]
[-19.47900581 118.55327606]
[-34.47819519 118.70931244]
[-49.47738266 118.86534882]
[-64.47657013 119.02138519]
[-79.47576141 119.17742157]
[-94.46845245 119.64546967]
[-109.44817352 120.42531586]
[-124.42788696 121.20515442]
[-139.40759277 121.98500061]
[-152.86215210 131.36088562]
[-167.59225464 124.15281677]
[-168.44483948 107.77584839]
[-154.54284668 99.07719421]
[-140.18743896 107.00528717]
[-125.20773315 106.22544098]
[-110.22801208 105.44559479]
[-95.24829865 104.66575623]
[-91.40558624 101.73162842]
[-85.66333008 101.22389984]
[-79.63179779 104.17823792]
[-64.63260651 104.02220154]
[-49.63341904 103.86616516]
[-34.63423157 103.71012878]
[-19.63504219 103.55409241]
[-4.63585424 103.39805603]
[10.36333466 103.24201965]
[19.08560181 94.80226898]
[31.62246132 94.58741760]
[41.22566605 103.26107025]
[56.22485733 103.41710663]
[71.22404480 103.57314301]
[77.46459198 85.26521301]
[92.91455841 76.17824554]
[109.15418243 79.13886261]
[119.36766052 68.15319824]
[129.58114624 57.16753387]
[119.60804749 45.94781494]
[110.74662781 33.83088684]
[103.07713318 20.92648315]
[96.66902161 7.35147333]
[91.58032990 -6.77120256]
[87.85713959 -21.31364441]
[85.53318024 -36.14415359]
[84.62947845 -51.12841415]
[85.15423584 -66.13072205]
[87.10269165 -81.01522064]
[90.45720673 -95.64710999]
[95.18739319 -109.89385986]
[101.25041962 -123.62647247]
[108.59136963 -136.72056580]
[117.14376831 -149.05754089]
[126.83016205 -160.52569580]
[137.56282043 -171.02116394]
[149.24455261 -180.44889832]
[161.76954651 -188.72349548]
[175.02439880 -195.77003479]
[188.88905334 -201.52470398]
[203.23794556 -205.93537903]
[217.94113159 -208.96211243]
[232.86544800 -210.57749939]
[247.87573242 -210.76692200]
[262.83605957 -209.52864075]
[277.61093140 -206.87387085]
[292.06655884 -202.82667542]
[306.07202148 -197.42369080]
[319.50045776 -190.71386719]
[332.23025513 -182.75794983]
[344.14614868 -173.62799072]
[355.14022827 -163.40669250]
[365.11291504 -152.18659973]
[373.97390747 -140.06935120]
[381.64291382 -127.16467285]
[388.05053711 -113.58943176]
[393.13873291 -99.46656799]
[396.86138916 -84.92398834]
[399.18481445 -70.09339905]
[400.08795166 -55.10910416]
[399.56265259 -40.10681152]
[397.61364746 -25.22238350]
[394.25860596 -10.59062386]
[389.52789307 3.65596080]
[383.46435547 17.38834572]
[376.12292480 30.48216820]
[367.57009888 42.81884384]
[357.88327026 54.28664780]
[347.15023804 64.78172302]
[335.46817017 74.20902252]
[322.94287109 82.48316956]
[309.68777466 89.52922821]
[295.82290649 95.28338623]
[281.47384644 99.69353485]
[266.77056885 102.71974182]
[251.84617615 104.33458710]
[236.83587646 104.52344513]
[221.87559509 103.28462219]
[207.10081482 100.62931824]
[192.64533997 96.58159637]
[178.64009094 91.17810822]
[165.21189880 84.46778107]
[152.48237610 76.51139832]
[140.56680298 67.38101196]
[130.35333252 78.36667633]
[120.13984680 89.35234070]
[124.15791321 105.83737183]
[115.43078613 122.06466675]
[96.72638702 128.81156921]
[97.03844452 143.80831909]
[97.35050201 158.80506897]
[97.66255951 173.80183411]
[97.97460938 188.79858398]
[98.28666687 203.79533386]
[98.59872437 218.79208374]
[98.91078186 233.78884888]
[99.22283936 248.78559875]
[113.87783051 252.37635803]
[127.10363770 259.63861084]
[137.99850464 270.07720947]
[145.81961060 282.98043823]
[150.03367615 297.46850586]
[150.35339355 312.55358887]
[146.75697327 327.20718384]
[139.48960876 340.43020630]
[129.04679871 351.32104492]
[116.14057159 359.13714600]
[101.65088654 363.34564209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 56]
[21 55]
[22 54]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 42]
[32 41]
[33 40]
[34 39]
[59 128]
[60 127]
[61 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
