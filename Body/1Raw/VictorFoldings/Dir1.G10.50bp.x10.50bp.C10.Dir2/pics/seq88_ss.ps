%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCUCAUCCUGGGGGGGGGGAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAxxxxxxxxxxCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCCCCCCCCCCCUGCCUGAUCCU\
) } def
/len { sequence length } bind def

/coor [
[76.10051727 429.48370361]
[61.82874298 424.67428589]
[48.92476273 416.90887451]
[37.99210739 406.55075073]
[29.54211998 394.08432007]
[23.97002411 380.09268188]
[21.53643417 365.23025513]
[22.35517502 350.19216919]
[26.38795280 335.68182373]
[33.44614410 322.37783813]
[43.19963074 310.90246582]
[55.19221878 301.79248047]
[68.86299133 295.47393799]
[83.57255554 292.24240112]
[83.57255554 277.24240112]
[83.57255554 262.24240112]
[83.57255554 247.24238586]
[83.57255554 232.24238586]
[83.57255554 217.24238586]
[83.57255554 202.24238586]
[83.57255554 187.24238586]
[83.57255554 172.24238586]
[83.57255554 157.24238586]
[73.86315155 168.67599487]
[59.55582047 173.18159485]
[45.04694748 169.37467957]
[34.79483795 158.42506409]
[31.94977760 143.69734192]
[37.38599777 129.71708679]
[49.43305588 120.78017426]
[64.38910675 119.63274384]
[77.65843201 126.62738800]
[85.16400146 139.61636353]
[87.85079193 124.85895538]
[90.53758240 110.10154724]
[80.98548126 98.53620148]
[65.98622894 98.38612366]
[51.97644424 106.91008759]
[37.72140503 98.80293274]
[37.88547897 82.40460968]
[52.29987717 74.58429718]
[66.13630676 83.38687897]
[81.13555145 83.53694916]
[88.89850616 87.48816681]
[95.26045990 93.04564667]
[100.54713440 79.00815582]
[105.83380890 64.97067261]
[94.80566406 54.54686737]
[88.62520599 40.73220444]
[88.20581055 25.64453316]
[93.58025360 11.58384609]
[103.90047455 0.68165100]
[117.57122040 -5.42213631]
[132.49658203 -5.82582855]
[137.78324890 -19.86331558]
[135.40623474 -35.50494003]
[147.13272095 -44.68856049]
[152.41940308 -58.72604752]
[157.70606995 -72.76353455]
[162.99275208 -86.80101776]
[167.71356201 -101.03878784]
[171.86094666 -115.45403290]
[176.00833130 -129.86927795]
[162.26971436 -135.94909668]
[149.48696899 -143.84310913]
[137.89823914 -153.40422058]
[127.71939087 -164.45433044]
[119.14006805 -176.78756714]
[112.32009125 -190.17419434]
[107.38652039 -204.36480713]
[104.43125916 -219.09506226]
[103.50935364 -234.09051514]
[104.63799286 -249.07183838]
[107.79614258 -263.75991821]
[112.92497253 -277.88113403]
[119.92893982 -291.17242432]
[128.67755127 -303.38616943]
[139.00784302 -314.29483032]
[150.72734070 -323.69519043]
[163.61775208 -331.41213989]
[177.43890381 -337.30191040]
[191.93334961 -341.25476074]
[206.83103943 -343.19705200]
[221.85444641 -343.09265137]
[236.72370911 -340.94342041]
[251.16178894 -336.78948975]
[264.89974976 -330.70816040]
[277.68164062 -322.81277466]
[289.26934814 -313.25039673]
[299.44699097 -302.19918823]
[308.02496338 -289.86502075]
[314.84350586 -276.47766113]
[319.77554321 -262.28649902]
[322.72921753 -247.55593872]
[323.64947510 -232.56037903]
[322.51922607 -217.57919312]
[319.35946655 -202.89144897]
[314.22912598 -188.77078247]
[307.22372437 -175.48025513]
[298.47378540 -163.26745605]
[288.14230347 -152.35990906]
[276.42178345 -142.96081543]
[263.53054810 -135.24525452]
[249.70875549 -129.35699463]
[235.21388245 -125.40571594]
[220.31597900 -123.46501923]
[205.29258728 -123.57107544]
[190.42356873 -125.72189331]
[186.27618408 -111.30664825]
[182.12879944 -96.89140320]
[183.41862488 -94.34265900]
[183.74745178 -91.11563873]
[182.84646606 -87.58468628]
[180.59130859 -84.21619415]
[177.03024292 -81.51434326]
[171.74356079 -67.47686005]
[166.45687866 -53.43936920]
[161.17021179 -39.40188217]
[163.92535400 -24.76431465]
[151.82073975 -14.57663918]
[146.53405762 -0.53915155]
[157.48513794 9.60989857]
[163.73316956 23.21532059]
[164.29774475 38.21685791]
[159.06173706 52.32967758]
[148.79380798 63.39238358]
[135.03582764 69.69799805]
[119.87129974 70.25734711]
[114.58462524 84.29483795]
[109.29794312 98.33232117]
[105.29499817 112.78833771]
[102.60820007 127.54574585]
[99.92140961 142.30316162]
[98.57255554 157.24238586]
[98.57255554 172.24238586]
[98.57255554 187.24238586]
[98.57255554 202.24238586]
[98.57255554 217.24238586]
[98.57255554 232.24238586]
[98.57255554 247.24238586]
[98.57255554 262.24240112]
[98.57255554 277.24240112]
[98.57255554 292.24240112]
[113.28211212 295.47393799]
[126.95288849 301.79248047]
[138.94548035 310.90246582]
[148.69895935 322.37783813]
[155.75715637 335.68182373]
[159.78993225 350.19216919]
[160.60867310 365.23025513]
[158.17507935 380.09268188]
[152.60298157 394.08432007]
[144.15299988 406.55075073]
[133.22033691 416.90887451]
[120.31636047 424.67428589]
[106.04459381 429.48370361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[33 133]
[34 132]
[35 131]
[36 43]
[37 42]
[45 130]
[46 129]
[47 128]
[54 121]
[55 120]
[57 118]
[58 117]
[59 116]
[60 115]
[61 110]
[62 109]
[63 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
