%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCACCUCUGGGGGGGGGGUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAxxxxxxxxxxAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACCCCCCCCCCCAUCACCUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 423.49325562]
[71.19830322 417.47723389]
[59.48964310 407.94781494]
[50.78712082 395.61215210]
[45.73651886 381.38562012]
[44.71262741 366.32394409]
[47.79142761 351.54479980]
[54.74444962 338.14486694]
[65.05573273 327.11853027]
[77.96011353 319.28402710]
[92.50000000 315.22271729]
[92.50000000 300.22271729]
[92.50000000 285.22271729]
[92.50000000 270.22271729]
[92.50000000 255.22270203]
[92.50000000 240.22270203]
[92.50000000 225.22270203]
[92.50000000 210.22270203]
[92.50000000 195.22270203]
[92.50000000 180.22270203]
[92.50000000 165.22270203]
[71.35423279 159.07344055]
[53.43146896 146.27767944]
[40.74824524 128.27510071]
[34.73158264 107.09122467]
[36.05842590 85.10949707]
[21.93362427 80.06073761]
[7.80882168 75.01198578]
[-6.31598139 69.96322632]
[-20.44078445 64.91447449]
[-12.18691158 77.43939209]
[-10.57128143 92.35212708]
[-15.95125389 106.35412598]
[-27.13683128 116.34826660]
[-41.65386581 120.12393951]
[-56.29132080 116.84600830]
[-67.81153107 107.23950958]
[-73.66632843 93.42932129]
[-72.56068420 78.47012329]
[-64.73916626 65.67076111]
[-51.93180847 57.86232376]
[-36.96953583 56.77229691]
[-49.58066559 48.65075684]
[-65.37229919 47.68391800]
[-71.88339996 34.28783798]
[-84.49452209 26.16629601]
[-97.10565186 18.04475403]
[-109.71678162 9.92321301]
[-125.10807800 13.51258469]
[-138.48513794 5.09653139]
[-141.91157532 -10.33185196]
[-133.35456848 -23.61917877]
[-117.89081573 -26.88231468]
[-104.69470215 -18.18529892]
[-101.59523773 -2.68791556]
[-88.98410797 5.43362665]
[-76.37298584 13.55516911]
[-63.76185608 21.67671013]
[-48.87224960 22.06264305]
[-41.45912170 36.03962708]
[-28.84799385 44.16117096]
[-15.39202785 50.78966904]
[-1.26722503 55.83842468]
[12.85757828 60.88718033]
[26.98238182 65.93593597]
[41.10718536 70.98469543]
[44.54245758 64.86151886]
[48.61197662 59.14020538]
[53.26919556 53.88618851]
[58.46085358 49.15955353]
[64.12757874 45.01435471]
[70.20455170 41.49800491]
[76.62229156 38.65071869]
[83.30738831 36.50505066]
[90.18338776 35.08554840]
[97.17166138 34.40844345]
[104.19227600 34.48147964]
[111.16494751 35.30382156]
[118.00993347 36.86606216]
[124.64894104 39.15033722]
[131.00605774 42.13052368]
[137.00856018 45.77253723]
[142.58782959 50.03472519]
[147.68003845 54.86834335]
[152.22694397 60.21811295]
[156.17654419 66.02285004]
[159.48370361 72.21616364]
[173.71047974 67.46234894]
[187.93725586 62.70853424]
[202.16403198 57.95471954]
[216.39080811 53.20090485]
[230.56736755 48.29935455]
[244.69216919 43.25059891]
[258.81698608 38.20184326]
[261.58972168 34.67007828]
[265.01208496 32.46588898]
[268.57324219 31.62912750]
[271.80389404 32.02507401]
[274.33117676 33.37423325]
[288.82678223 29.51707268]
[303.32235718 25.65991402]
[306.64886475 10.72027111]
[316.54598999 -0.95472485]
[330.73944092 -6.68224525]
[345.96768188 -5.14614773]
[358.73135376 3.30058360]
[366.09747314 16.71695137]
[366.37335205 32.01997375]
[359.49560547 45.69312668]
[347.04467773 54.59442139]
[331.88171387 56.67840195]
[317.49102783 51.46619034]
[307.17953491 40.15550995]
[292.68392944 44.01266861]
[278.18832397 47.86983109]
[263.86572266 52.32664490]
[249.74093628 57.37540054]
[235.61613464 62.42415619]
[230.34205627 67.67104340]
[221.14462280 67.42768097]
[206.91784668 72.18150330]
[192.69107056 76.93531799]
[178.46429443 81.68913269]
[164.23751831 86.44294739]
[165.49450684 104.55197906]
[161.74447632 122.31301880]
[153.27410889 138.36822510]
[140.73094177 151.49020386]
[125.07392120 160.67578125]
[107.50000000 165.22270203]
[107.50000000 180.22270203]
[107.50000000 195.22270203]
[107.50000000 210.22270203]
[107.50000000 225.22270203]
[107.50000000 240.22270203]
[107.50000000 255.22270203]
[107.50000000 270.22271729]
[107.50000000 285.22271729]
[107.50000000 300.22271729]
[107.50000000 315.22271729]
[122.03988647 319.28402710]
[134.94427490 327.11853027]
[145.25555420 338.14486694]
[152.20857239 351.54479980]
[155.28736877 366.32394409]
[154.26348877 381.38562012]
[149.21287537 395.61215210]
[140.51036072 407.94781494]
[128.80169678 417.47723389]
[114.95575714 423.49325562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[42 61]
[43 60]
[45 58]
[46 57]
[47 56]
[48 55]
[87 124]
[88 123]
[89 122]
[90 121]
[91 120]
[92 118]
[93 117]
[94 116]
[99 115]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
