%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAGCCCUGGGGGGGGGGAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGxxxxxxxxxxCGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUCCCCCCCCCCUCUGAGCCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.85769653]
[71.19830322 365.84167480]
[59.48964310 356.31225586]
[50.78712082 343.97659302]
[45.73651886 329.75006104]
[44.71262741 314.68838501]
[47.79142761 299.90924072]
[54.74444962 286.50930786]
[65.05573273 275.48297119]
[77.96011353 267.64846802]
[92.50000000 263.58715820]
[92.50000000 248.58714294]
[92.50000000 233.58714294]
[92.50000000 218.58714294]
[92.50000000 203.58714294]
[92.50000000 188.58714294]
[92.50000000 173.58714294]
[92.50000000 158.58714294]
[92.50000000 143.58714294]
[92.50000000 128.58714294]
[92.50000000 113.58714294]
[86.72372437 99.74392700]
[76.06210327 89.19263458]
[65.40047455 78.64134979]
[54.73884964 68.09005737]
[44.07722092 57.53876495]
[31.29986572 49.68133926]
[17.07308578 44.92752457]
[12.73539543 51.40125656]
[6.95803356 56.80827713]
[0.00338868 60.82883072]
[-7.79533291 63.20770264]
[-16.04998779 63.76985931]
[-24.33679199 62.43212891]
[-32.21808243 59.21028519]
[-39.26540756 54.22093201]
[-45.08275604 47.67803955]
[-49.32863998 39.88412857]
[-51.73582840 31.21645164]
[-66.23142242 27.35929298]
[-80.72702026 23.50213432]
[-95.22261810 19.64497375]
[-112.08390808 21.41505623]
[-118.45248413 5.70271921]
[-105.11718750 -4.76657963]
[-91.36545563 5.14937782]
[-76.86985779 9.00653744]
[-62.37426376 12.86369610]
[-47.87866974 16.72085571]
[-40.83353424 3.47827029]
[-52.13253784 -6.38745260]
[-63.43154144 -16.25317574]
[-79.47066498 -16.60816574]
[-89.07835388 -29.45619965]
[-84.88439941 -44.94136429]
[-70.10605621 -51.18476868]
[-56.07999802 -43.39700317]
[-53.56581879 -27.55218124]
[-42.26681519 -17.68645668]
[-30.96780968 -7.82073450]
[-3.48566413 -9.67001057]
[17.21829605 6.33671570]
[21.82690048 30.70074654]
[36.05368042 35.45455933]
[26.34795952 24.01782227]
[19.86652184 10.49040699]
[17.03475189 -4.23987055]
[18.03849792 -19.20624924]
[22.81188393 -33.42647171]
[31.04163170 -45.96725845]
[42.18761063 -56.00553894]
[55.51830673 -62.88249969]
[70.15881348 -66.14679718]
[85.14825439 -65.58419037]
[99.50287628 -61.23160934]
[112.28055573 -53.37471390]
[122.64269257 -42.52915573]
[129.90921021 -29.40674400]
[133.60321045 -14.86870956]
[133.48222351 0.13080257]
[129.55422974 14.60736275]
[122.07698822 27.61086082]
[111.54126740 38.28786850]
[98.63851929 45.93764496]
[84.21556091 50.05812454]
[69.21899414 50.37888336]
[54.62851334 46.87714005]
[65.29013824 57.42842865]
[75.95176697 67.97972107]
[86.61338806 78.53101349]
[97.27501678 89.08229828]
[92.97711945 74.71121979]
[87.63164520 60.69601440]
[90.49695587 45.97222519]
[100.70812988 34.98441696]
[115.18278503 31.04940224]
[129.55155945 35.35501862]
[139.47705078 46.60155487]
[141.96311951 61.39410400]
[136.25910950 75.26758575]
[123.17089844 82.59552002]
[138.17008972 82.43948364]
[153.16928101 82.28344727]
[164.18846130 71.27366638]
[179.40200806 71.32909393]
[189.83023071 81.90206146]
[204.82942200 81.74602509]
[219.82861328 81.58998871]
[234.82778931 81.43395233]
[244.61381531 69.23690796]
[259.96044922 66.23448181]
[273.62152100 73.84432983]
[279.14663696 88.47330475]
[273.92703247 103.21406555]
[260.42727661 111.10646057]
[245.02148438 108.42395020]
[234.98382568 96.43313599]
[219.98464966 96.58917236]
[204.98545837 96.74520874]
[189.98626709 96.90124512]
[179.78025818 107.68887329]
[164.57116699 108.06078339]
[153.32531738 97.28263092]
[138.32612610 97.43866730]
[123.32693481 97.59470367]
[136.86747742 104.04867554]
[139.44819641 118.82500458]
[128.89692688 129.48666382]
[114.09454346 127.05986786]
[107.50000000 113.58714294]
[107.50000000 128.58714294]
[107.50000000 143.58714294]
[107.50000000 158.58714294]
[107.50000000 173.58714294]
[107.50000000 188.58714294]
[107.50000000 203.58714294]
[107.50000000 218.58714294]
[107.50000000 233.58714294]
[107.50000000 248.58714294]
[107.50000000 263.58715820]
[122.03988647 267.64846802]
[134.94427490 275.48297119]
[145.25555420 286.50930786]
[152.20857239 299.90924072]
[155.28736877 314.68838501]
[154.26348877 329.75006104]
[149.21287537 343.97659302]
[140.51036072 356.31225586]
[128.80169678 365.84167480]
[114.95575714 371.85769653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 64]
[28 63]
[39 49]
[40 48]
[41 47]
[42 46]
[50 60]
[51 59]
[52 58]
[101 125]
[102 124]
[103 123]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
