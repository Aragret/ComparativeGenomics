%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCACUAUGGGGGGGGGGGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGxxxxxxxxxxUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUCCCCCCCCCCACUUCCCCUAU\
) } def
/len { sequence length } bind def

/coor [
[86.76709747 377.25158691]
[72.20723724 373.34338379]
[59.00609207 366.06375122]
[47.93115997 355.83587646]
[39.62632370 343.25442505]
[34.57440948 329.05084229]
[33.06913376 314.05090332]
[35.19800949 299.12673950]
[40.83726883 285.14596558]
[49.65904999 272.92138672]
[61.15047073 263.16378784]
[74.64342499 256.44046021]
[89.35346222 253.14222717]
[89.66143799 238.14538574]
[89.96942139 223.14854431]
[90.27739716 208.15170288]
[90.58537292 193.15487671]
[90.89334869 178.15803528]
[91.20133209 163.16119385]
[91.50930786 148.16435242]
[91.81728363 133.16751099]
[92.12525940 118.17067719]
[79.88230896 109.50407410]
[65.84033203 114.77881622]
[51.79835510 120.05355835]
[37.75637817 125.32830048]
[23.71440315 130.60304260]
[13.72647476 143.60969543]
[-2.49396205 141.19528198]
[-8.26071358 125.84351349]
[2.35856104 113.34699249]
[18.43966103 116.56105804]
[32.48163986 111.28632355]
[46.52361298 106.01158142]
[60.56558990 100.73683929]
[74.60756683 95.46209717]
[82.24053955 82.54940033]
[80.09195709 67.70407867]
[77.94338226 52.85875320]
[75.79479980 38.01342773]
[73.64621735 23.16810608]
[71.49764252 8.32278347]
[69.34906006 -6.52253914]
[59.71483231 -19.07212639]
[65.54930878 -32.77643585]
[63.40073013 -47.62176132]
[61.25215149 -62.46708298]
[59.10357285 -77.31240845]
[56.95499039 -92.15773010]
[54.80641174 -107.00305176]
[33.43215942 -108.28430176]
[17.31929588 -133.57133484]
[13.06644917 -147.95581055]
[8.81360245 -162.34030151]
[4.56075621 -176.72477722]
[0.30790946 -191.10925293]
[-3.94493723 -205.49374390]
[-19.00399590 -204.79502869]
[-33.79254150 -207.72117615]
[-47.45078659 -214.10208130]
[-59.18465805 -223.56672668]
[-68.31196594 -235.56488037]
[-74.30206299 -249.39897156]
[-76.80668640 -264.26470947]
[-75.68022156 -279.29782104]
[-70.98816681 -293.62432861]
[-63.00330353 -306.41122437]
[-52.18986511 -316.91519165]
[-39.17653275 -324.52548218]
[-24.71988106 -328.79968262]
[-9.66040134 -329.48925781]
[5.12636709 -326.55413818]
[18.78074074 -320.16494751]
[30.50887299 -310.69320679]
[39.62890625 -298.68951416]
[45.61061096 -284.85177612]
[48.10622406 -269.98452759]
[46.97064590 -254.95210266]
[42.26990509 -240.62846375]
[34.27729416 -227.84638977]
[23.45748901 -217.34898376]
[10.43954372 -209.74658203]
[14.69239044 -195.36210632]
[18.94523811 -180.97763062]
[23.19808388 -166.59313965]
[27.45093155 -152.20866394]
[31.70377731 -137.82417297]
[39.08983612 -136.52182007]
[61.24800873 -132.61473083]
[70.16416168 -144.67716980]
[74.71686554 -161.00840759]
[91.67018127 -161.15455627]
[96.50376892 -144.90423584]
[82.22659302 -135.76101685]
[73.31044006 -123.69858551]
[69.65173340 -109.15162659]
[71.80031586 -94.30630493]
[73.94889069 -79.46098328]
[76.09747314 -64.61566162]
[78.24605560 -49.77033997]
[80.39463043 -34.92501450]
[89.87518311 -23.43726540]
[84.19438171 -8.67111778]
[86.34296417 6.17420483]
[88.49154663 21.01952744]
[90.64012146 35.86484909]
[92.78870392 50.71017456]
[94.93727875 65.55549622]
[97.08586121 80.40081787]
[97.96778870 65.42676544]
[108.01367950 54.28764343]
[122.81741333 51.86906052]
[135.88607788 59.23180771]
[141.48776245 73.14658356]
[137.16557312 87.51038361]
[124.81515503 96.02326965]
[138.85713196 101.29801178]
[152.95251465 106.42831421]
[167.09983826 111.41363525]
[181.24716187 116.39895630]
[195.39447021 121.38427734]
[212.34274292 120.94586182]
[217.45578003 137.11042786]
[203.33836365 146.49844360]
[190.40914917 135.53160095]
[176.26182556 130.54627991]
[162.11451721 125.56095123]
[147.96719360 120.57563019]
[140.56767273 121.32343292]
[133.58239746 115.33998871]
[119.54041290 110.06524658]
[107.12210083 118.47866058]
[106.81412506 133.47549438]
[106.50614166 148.47233582]
[106.19816589 163.46917725]
[105.89019012 178.46600342]
[105.58221436 193.46284485]
[105.27423096 208.45968628]
[104.96625519 223.45652771]
[104.65827942 238.45335388]
[104.35030365 253.45019531]
[118.91252899 257.34957886]
[132.11808777 264.62121582]
[143.19921875 274.84234619]
[151.51167297 287.41879272]
[156.57220459 301.61929321]
[158.08656311 316.61828613]
[155.96673584 331.54376221]
[150.33595276 345.52795410]
[141.52159119 357.75787354]
[130.03608704 367.52243042]
[116.54721069 374.25396729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[37 109]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[43 103]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 82]
[89 95]
[90 94]
[116 131]
[117 130]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
