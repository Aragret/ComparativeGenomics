%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUCACCCACCAGGGGGGGGGGCAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAxxxxxxxxxxCUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUCCCCCCCCCCUGACUCACCCAUCA\
) } def
/len { sequence length } bind def

/coor [
[100.83782196 410.52682495]
[86.13848877 407.29949951]
[72.35134125 401.26617432]
[60.00632858 392.65881348]
[49.57795715 381.80819702]
[41.46706390 369.13146973]
[35.98541260 355.11584473]
[33.34370041 340.30004883]
[33.64347076 325.25360107]
[36.87319946 310.55477905]
[42.90874481 296.76861572]
[51.51811600 284.42498779]
[62.37039185 273.99838257]
[75.04843903 265.88952637]
[89.06495667 260.41015625]
[103.88117218 257.77084351]
[104.17752838 242.77375793]
[104.47388458 227.77668762]
[104.77024078 212.77961731]
[105.06659698 197.78254700]
[105.36295319 182.78547668]
[105.65931702 167.78840637]
[105.95567322 152.79133606]
[106.25202942 137.79425049]
[91.18327332 135.55763245]
[78.84084320 127.83087158]
[71.00982666 116.35926819]
[56.62123489 120.59817505]
[42.23263931 124.83708954]
[34.89194489 138.83314514]
[19.77991295 143.45938110]
[5.86224365 135.97113037]
[1.39604378 120.81102753]
[9.03103065 106.97330475]
[24.23750114 102.66763306]
[37.99372864 110.44849396]
[52.38232040 106.20958710]
[66.77091217 101.97067261]
[68.57290649 89.02761078]
[75.21833801 77.77558136]
[85.68304443 69.94870758]
[82.44850922 55.30159760]
[79.21396637 40.65448761]
[74.28314972 32.90056992]
[76.06324005 25.68612480]
[73.11872101 10.97797012]
[70.17420197 -3.73018456]
[51.95885849 -14.13278294]
[47.29489517 -34.28574753]
[58.76115417 -51.15199661]
[54.66459656 -65.58176422]
[50.56803513 -80.01153564]
[45.18652725 -87.45972443]
[46.53610611 -94.76696014]
[42.72543716 -109.27484894]
[38.91476822 -123.78273010]
[35.10409927 -138.29061890]
[31.29343224 -152.79850769]
[25.38248634 -166.58476257]
[17.50083160 -179.34718323]
[9.61917782 -192.10961914]
[1.73752320 -204.87203979]
[-13.69848919 -208.26394653]
[-22.14445496 -221.62214661]
[-18.58953285 -237.02142334]
[-5.14279461 -245.32568359]
[10.21804810 -241.60815430]
[18.37968063 -228.07437134]
[14.49994946 -212.75369263]
[22.38160324 -199.99127197]
[30.26325798 -187.22883606]
[38.14491272 -174.46641541]
[38.33472824 -189.46520996]
[43.84050751 -203.41821289]
[53.94397736 -214.50514221]
[67.32704926 -221.27961731]
[82.24378967 -222.85781860]
[96.74819183 -219.03390503]
[108.94802856 -210.30670166]
[117.25172424 -197.81475830]
[120.57599640 -183.18775940]
[118.48716736 -168.33390808]
[111.25773621 -155.19102478]
[99.83084869 -145.47370911]
[85.69724274 -140.44966125]
[70.70075226 -140.77430725]
[56.79780960 -146.40530396]
[45.80131912 -156.60917664]
[49.61198807 -142.10128784]
[53.42265701 -127.59339905]
[57.23332596 -113.08551788]
[61.04399490 -98.57762909]
[64.99780273 -84.10809326]
[69.09436035 -69.67832184]
[73.19092560 -55.24855804]
[82.48158264 -53.39947128]
[90.49343109 -48.23704147]
[96.08434296 -40.44643021]
[98.43878174 -31.09084129]
[97.18650818 -21.46653366]
[92.46011353 -12.92319775]
[84.88235474 -6.67470455]
[87.82687378 8.03344917]
[90.77140045 22.74160385]
[93.86107635 37.41995239]
[97.09561157 52.06705856]
[100.33014679 66.71416473]
[111.12112427 67.73884583]
[121.26936340 72.25326538]
[129.65104675 79.94285583]
[135.28074646 90.13346100]
[137.42552185 101.84864044]
[135.69602966 113.90277100]
[150.43255615 116.70184326]
[165.16908264 119.50092316]
[179.95803833 122.00829315]
[194.79364014 124.22299194]
[209.62924194 126.43769073]
[224.46484375 128.65238953]
[239.30044556 130.86709595]
[254.13604736 133.08178711]
[270.69430542 129.44030762]
[278.77725220 144.34339905]
[266.69415283 156.23605347]
[251.92135620 147.91738892]
[237.08575439 145.70269775]
[222.25013733 143.48799133]
[207.41453552 141.27330017]
[192.57893372 139.05859375]
[177.74333191 136.84390259]
[173.40202332 138.94804382]
[167.68739319 138.30972290]
[162.37001038 134.23744202]
[147.63348389 131.43836975]
[132.89695740 128.63929749]
[121.24909973 138.09062195]
[120.95274353 153.08769226]
[120.65638733 168.08476257]
[120.36003113 183.08183289]
[120.06366730 198.07890320]
[119.76731110 213.07597351]
[119.47095490 228.07304382]
[119.17459869 243.07011414]
[118.87824249 258.06719971]
[133.57861328 261.28979492]
[147.36772156 267.31863403]
[159.71551514 275.92199707]
[170.14739990 286.76922607]
[178.26239014 299.44332886]
[183.74858093 313.45718384]
[186.39509583 328.27212524]
[186.10018921 343.31869507]
[182.87522888 358.01855469]
[176.84414673 371.80667114]
[168.23876953 384.15307617]
[157.38986206 394.58319092]
[144.71444702 402.69613647]
[130.69970703 408.18005371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[27 38]
[28 37]
[29 36]
[41 107]
[42 106]
[43 105]
[45 104]
[46 103]
[47 102]
[50 95]
[51 94]
[52 93]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 72]
[60 71]
[61 70]
[62 69]
[113 135]
[114 134]
[115 133]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
