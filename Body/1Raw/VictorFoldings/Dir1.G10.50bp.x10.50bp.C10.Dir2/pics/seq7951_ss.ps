%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAACCUUUGGGGGGGGGGUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAAxxxxxxxxxxCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUACCCCCCCCCCAUUAAACUUU\
) } def
/len { sequence length } bind def

/coor [
[63.75791168 402.47906494]
[49.91197205 396.46304321]
[38.20331192 386.93362427]
[29.50078773 374.59796143]
[24.45018578 360.37142944]
[23.42629433 345.30975342]
[26.50509262 330.53057861]
[33.45811462 317.13067627]
[43.76939774 306.10433960]
[56.67377853 298.26983643]
[71.21366882 294.20849609]
[71.21366882 279.20849609]
[71.21366882 264.20849609]
[71.21366882 249.20851135]
[71.21366882 234.20851135]
[71.21366882 219.20851135]
[71.21366882 204.20851135]
[71.21366882 189.20851135]
[71.21366882 174.20851135]
[71.21366882 159.20851135]
[71.21366882 144.20851135]
[71.21366882 129.20851135]
[73.02188873 98.65248108]
[91.83414459 89.86692047]
[88.73582458 75.19039154]
[85.63750458 60.51386642]
[75.24697876 52.80083466]
[72.99584198 40.46586990]
[79.55852509 30.25613976]
[76.76619720 15.51833439]
[72.52545166 17.85324669]
[67.43466187 19.17579651]
[61.72597504 19.27719688]
[55.67565918 17.99977303]
[41.03215790 14.74894619]
[26.38865662 11.49812126]
[11.74515533 8.24729538]
[-2.89834619 4.99646950]
[-13.78082085 15.93151855]
[-28.85256958 19.22483635]
[-43.30425262 13.82553864]
[-52.52438736 1.45651972]
[-53.57086945 -13.93531036]
[-46.10976028 -27.43847466]
[-32.52188110 -34.74416351]
[-17.14307213 -33.52115631]
[-4.88065386 -24.15971184]
[0.35247946 -9.64703178]
[14.99598122 -6.39620638]
[29.63948250 -3.14538050]
[44.28298187 0.10544529]
[58.92648315 3.35627103]
[47.80968857 -6.71431971]
[49.58102798 -21.60936356]
[62.74959183 -28.79190636]
[76.23157501 -22.21649742]
[78.67935944 -7.41749239]
[83.87477112 -21.48901176]
[89.07019043 -35.56053162]
[94.26560211 -49.63204956]
[90.71016693 -67.66919708]
[104.56626892 -78.39339447]
[109.46781921 -92.56995392]
[114.36936951 -106.74651337]
[101.10520172 -113.81817627]
[89.11066437 -122.87783813]
[78.68113708 -133.70240784]
[70.07344818 -146.02532959]
[63.49957275 -159.54312134]
[59.12140274 -173.92289734]
[57.04674911 -188.81054688]
[57.32670593 -203.83946228]
[59.95437622 -218.63952637]
[64.86505890 -232.84626770]
[71.93780518 -246.10986328]
[80.99846649 -258.10363770]
[91.82389832 -268.53228760]
[104.14752197 -277.13894653]
[117.66585541 -283.71173096]
[132.04600525 -288.08871460]
[146.93382263 -290.16213989]
[161.96270752 -289.88092041]
[176.76255798 -287.25204468]
[190.96890259 -282.34017944]
[204.23190308 -275.26632690]
[216.22494507 -266.20468140]
[226.65269470 -255.37840271]
[235.25834656 -243.05406189]
[241.82998657 -229.53518677]
[246.20578003 -215.15469360]
[248.27798462 -200.26669312]
[247.99554443 -185.23782349]
[245.36543274 -170.43820190]
[240.45240784 -156.23225403]
[233.37747192 -142.96984863]
[224.31483459 -130.97755432]
[213.48767090 -120.55069733]
[201.16262817 -111.94606018]
[187.64321899 -105.37553406]
[173.26234436 -101.00091553]
[158.37417603 -98.92995453]
[143.34533691 -99.21363068]
[128.54592896 -101.84496307]
[123.64437866 -87.66840363]
[118.74282837 -73.49184418]
[123.75437164 -62.43780899]
[119.73698425 -50.56011963]
[108.33712769 -44.43663406]
[103.14170837 -30.36511612]
[97.94629669 -16.29359627]
[92.75087738 -2.22207665]
[91.50400543 12.72601032]
[94.29632568 27.46381569]
[106.44942474 40.08531570]
[100.31402588 57.41554642]
[103.41235352 72.09207153]
[106.51067352 86.76859283]
[116.25832367 98.16961670]
[130.27503967 103.51113129]
[145.44432068 98.28881836]
[158.90734863 107.01384735]
[160.33645630 122.99311829]
[148.63534546 133.96870422]
[132.78010559 131.52107239]
[124.93352509 117.52783966]
[110.91680908 112.18633270]
[104.74102783 116.44187164]
[92.38945007 124.95296478]
[86.21366882 129.20851135]
[86.21366882 144.20851135]
[86.21366882 159.20851135]
[86.21366882 174.20851135]
[86.21366882 189.20851135]
[86.21366882 204.20851135]
[86.21366882 219.20851135]
[86.21366882 234.20851135]
[86.21366882 249.20851135]
[86.21366882 264.20849609]
[86.21366882 279.20849609]
[86.21366882 294.20849609]
[100.75355530 298.26983643]
[113.65793610 306.10433960]
[123.96921539 317.13067627]
[130.92224121 330.53057861]
[134.00103760 345.30975342]
[132.97714233 360.37142944]
[127.92654419 374.59796143]
[119.22402191 386.93362427]
[107.51535797 396.46304321]
[93.66941833 402.47906494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 117]
[25 116]
[26 115]
[29 113]
[30 112]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[57 111]
[58 110]
[59 109]
[60 108]
[62 105]
[63 104]
[64 103]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
