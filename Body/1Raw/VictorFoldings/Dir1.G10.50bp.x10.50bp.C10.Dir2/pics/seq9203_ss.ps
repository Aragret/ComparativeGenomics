%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCAACUAAGGGGGGGGGGUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAxxxxxxxxxxUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCCCCCCCCCCCGCCCACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 353.46221924]
[71.19830322 347.44619751]
[59.48964310 337.91677856]
[50.78712082 325.58111572]
[45.73651886 311.35458374]
[44.71262741 296.29290771]
[47.79142761 281.51376343]
[54.74444962 268.11383057]
[65.05573273 257.08749390]
[77.96011353 249.25297546]
[92.50000000 245.19166565]
[92.50000000 230.19166565]
[92.50000000 215.19166565]
[92.50000000 200.19166565]
[92.50000000 185.19166565]
[92.50000000 170.19166565]
[92.50000000 155.19166565]
[92.50000000 140.19166565]
[92.50000000 125.19166565]
[92.50000000 110.19166565]
[92.03195953 95.19896698]
[91.09632874 80.22817993]
[90.16069794 65.25738525]
[89.22507477 50.28659439]
[76.29280853 41.91624451]
[70.83281708 27.70210075]
[74.74332428 13.17034435]
[86.32226562 3.83942795]
[85.38664246 -11.13136387]
[84.45101166 -26.10215569]
[83.51538086 -41.07294846]
[68.50951385 -41.21984863]
[53.55335617 -42.44916153]
[38.72489548 -44.75447845]
[24.10143661 -48.12377930]
[9.75921917 -52.53950119]
[-4.22698021 -57.97861481]
[-17.78424454 -64.41277313]
[-30.84189034 -71.80841827]
[-43.33184052 -80.12700653]
[-55.18898010 -89.32515717]
[-66.35148621 -99.35492706]
[-76.76116943 -110.16400909]
[-86.36375427 -121.69606018]
[-95.10916901 -133.89094543]
[-102.95183563 -146.68510437]
[-109.85084534 -160.01182556]
[-115.77024841 -173.80162048]
[-120.67916870 -187.98258972]
[-124.55202484 -202.48083496]
[-127.36862183 -217.22073364]
[-129.11427307 -232.12544250]
[-129.77986145 -247.11726379]
[-129.36195374 -262.11804199]
[-127.86269379 -277.04953003]
[-125.28992462 -291.83395386]
[-121.65703583 -306.39416504]
[-116.98298645 -320.65429688]
[-111.29213715 -334.53994751]
[-104.61415863 -347.97879028]
[-96.98386383 -360.90072632]
[-88.44104004 -373.23840332]
[-79.03022003 -384.92745972]
[-68.80047607 -395.90698242]
[-57.80513382 -406.11972046]
[-46.10152435 -415.51245117]
[-33.75065994 -424.03619385]
[-20.81693459 -431.64648438]
[-7.36778212 -438.30364990]
[6.52668142 -443.97302246]
[20.79401398 -448.62500000]
[35.35983658 -452.23535156]
[50.14820099 -454.78524780]
[65.08201599 -456.26141357]
[80.08341217 -456.65609741]
[95.07418823 -455.96731567]
[109.97618103 -454.19860840]
[124.71170044 -451.35922241]
[139.20391846 -447.46392822]
[153.37728882 -442.53308105]
[167.15791321 -436.59234619]
[180.47393799 -429.67272949]
[193.25595093 -421.81027222]
[205.43730164 -413.04598999]
[216.95448303 -403.42559814]
[227.74743652 -392.99920654]
[237.75991821 -381.82119751]
[246.93972778 -369.94982910]
[255.23896790 -357.44702148]
[262.61441040 -344.37796021]
[269.02758789 -330.81076050]
[274.44506836 -316.81616211]
[278.83859253 -302.46713257]
[282.18524170 -287.83847046]
[284.46762085 -273.00646973]
[285.67379761 -258.04843140]
[285.79748535 -243.04234314]
[284.83804321 -228.06645203]
[282.80044556 -213.19883728]
[279.69537354 -198.51699829]
[275.53897095 -184.09750366]
[270.35290527 -170.01550293]
[264.16424561 -156.34443665]
[257.00524902 -143.15556335]
[248.91320801 -130.51765442]
[239.93032837 -118.49659729]
[230.10346985 -107.15505981]
[219.48382568 -96.55217743]
[208.12680054 -86.74323273]
[196.09156799 -77.77935028]
[183.44090271 -69.70728302]
[170.24073792 -62.56910324]
[156.55992126 -56.40202713]
[142.46975708 -51.23821259]
[128.04370117 -47.10457993]
[113.35698700 -44.02267838]
[98.48617554 -42.00857544]
[99.42179871 -27.03778458]
[100.35742950 -12.06699181]
[101.29306030 2.90379953]
[113.94367218 10.72044277]
[119.63306427 24.65223503]
[115.98532104 39.43558502]
[104.19586182 49.35096741]
[105.13149261 64.32176208]
[106.06712341 79.29254913]
[107.00274658 94.26334381]
[109.56341553 97.24317932]
[110.76847076 101.35335541]
[110.13684082 105.94892120]
[107.50000000 110.19166565]
[107.50000000 125.19166565]
[107.50000000 140.19166565]
[107.50000000 155.19166565]
[107.50000000 170.19166565]
[107.50000000 185.19166565]
[107.50000000 200.19166565]
[107.50000000 215.19166565]
[107.50000000 230.19166565]
[107.50000000 245.19166565]
[122.03988647 249.25297546]
[134.94427490 257.08749390]
[145.25555420 268.11383057]
[152.20857239 281.51376343]
[155.28736877 296.29290771]
[154.26348877 311.35458374]
[149.21287537 325.58111572]
[140.51036072 337.91677856]
[128.80169678 347.44619751]
[114.95575714 353.46221924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 127]
[22 126]
[23 125]
[24 124]
[28 120]
[29 119]
[30 118]
[31 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
