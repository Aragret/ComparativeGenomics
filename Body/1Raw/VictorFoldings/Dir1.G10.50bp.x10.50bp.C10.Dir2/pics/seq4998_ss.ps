%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAACUAGGGGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCxxxxxxxxxxCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUCCCCCCCCCCUAAAACUAGG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 385.30709839]
[71.19830322 379.29107666]
[59.48964310 369.76165771]
[50.78712082 357.42599487]
[45.73651886 343.19946289]
[44.71262741 328.13778687]
[47.79142761 313.35861206]
[54.74444962 299.95867920]
[65.05573273 288.93237305]
[77.96011353 281.09783936]
[92.50000000 277.03652954]
[92.50000000 262.03652954]
[92.50000000 247.03652954]
[92.50000000 232.03652954]
[92.50000000 217.03652954]
[92.50000000 202.03652954]
[92.50000000 187.03652954]
[92.50000000 172.03652954]
[92.50000000 157.03652954]
[92.50000000 142.03652954]
[92.50000000 127.03653717]
[80.34906006 121.72285461]
[71.54608154 111.05819702]
[68.37847137 97.01583099]
[72.02321625 82.50450897]
[57.52761841 78.64735413]
[43.03202057 74.79019165]
[34.32491302 87.17613983]
[21.92880630 95.81954956]
[7.35087061 99.69305420]
[-7.64447355 98.34780121]
[-21.24911118 91.96537781]
[-31.82924461 81.33357239]
[-38.12160110 67.74919128]
[-39.38424683 52.85989761]
[-53.87984467 49.00273895]
[-68.37544250 45.14558029]
[-82.87104034 41.28842163]
[-97.36663818 37.43126297]
[-111.86222839 33.57410049]
[-126.35782623 29.71694374]
[-140.90283203 36.48618317]
[-155.19908142 29.20630455]
[-158.27972412 13.46180820]
[-147.78157043 1.33052433]
[-131.75787354 2.11853504]
[-122.50067139 15.22134590]
[-108.00507355 19.07850647]
[-93.50947571 22.93566513]
[-79.01387787 26.79282379]
[-64.51828003 30.64998436]
[-50.02268600 34.50714493]
[-35.52708817 38.36430359]
[-27.03153229 26.07158852]
[-14.81996059 17.41095352]
[-0.35506392 13.44342709]
[14.62244034 14.66647625]
[28.30329323 20.95172310]
[39.02824402 31.55811882]
[45.48929214 45.21926498]
[46.88917923 60.29459763]
[61.38477707 64.15175629]
[75.88037109 68.00891876]
[89.33634186 61.38041687]
[95.11260986 47.53720093]
[100.88888550 33.69398117]
[106.66515350 19.85076332]
[94.55259705 28.69869423]
[80.58947754 34.17877960]
[65.69221497 35.93136215]
[50.83852386 33.84141159]
[37.00326920 28.04609299]
[25.09446526 18.92576408]
[15.89370060 7.07899618]
[10.00482655 -6.71669769]
[7.81433678 -21.55589485]
[9.46599388 -36.46468353]
[14.85139847 -50.46459198]
[23.61710167 -62.63679123]
[35.18780518 -72.18241119]
[48.80410767 -78.47496796]
[63.57236862 -81.10146332]
[78.52333069 -79.88953400]
[92.67574310 -74.91871643]
[105.10078430 -66.51523590]
[114.98297882 -55.23063660]
[121.67375946 -41.80553055]
[124.73399353 -27.12101555]
[123.96283722 -12.14085102]
[119.40885925 2.15619469]
[130.70787048 -7.70952845]
[142.00686646 -17.57525063]
[141.51873779 -33.20521545]
[151.23213196 -45.46017838]
[166.56066895 -48.55372238]
[180.26667786 -41.02516937]
[185.87861633 -26.42927361]
[180.74668884 -11.65777016]
[167.29403687 -3.68531060]
[151.87258911 -6.27624655]
[140.57359314 3.58947635]
[129.27458191 13.45519924]
[120.50837708 25.62703705]
[114.73210144 39.47025299]
[108.95582581 53.31347275]
[103.17955780 67.15669250]
[112.14753723 70.38559723]
[119.55432892 75.91809845]
[124.85456848 83.14038086]
[127.71977997 91.32543182]
[128.05595398 99.70448303]
[142.55155945 103.56164551]
[157.04714966 107.41880035]
[171.54275513 111.27596283]
[186.03834534 115.13312531]
[200.53395081 118.99028015]
[214.07972717 110.84857941]
[229.39468384 114.75085449]
[237.39271545 128.38195801]
[233.32873535 143.65480042]
[219.61383057 151.50827026]
[204.38481140 147.28305054]
[196.67678833 133.48587036]
[182.18118286 129.62872314]
[167.68559265 125.77156067]
[153.19000244 121.91439819]
[138.69439697 118.05724335]
[124.19879913 114.20008087]
[117.09962463 122.24471283]
[107.50000000 127.03653717]
[107.50000000 142.03652954]
[107.50000000 157.03652954]
[107.50000000 172.03652954]
[107.50000000 187.03652954]
[107.50000000 202.03652954]
[107.50000000 217.03652954]
[107.50000000 232.03652954]
[107.50000000 247.03652954]
[107.50000000 262.03652954]
[107.50000000 277.03652954]
[122.03988647 281.09783936]
[134.94427490 288.93237305]
[145.25555420 299.95867920]
[152.20857239 313.35861206]
[155.28736877 328.13778687]
[154.26348877 343.19946289]
[149.21287537 357.42599487]
[140.51036072 369.76165771]
[128.80169678 379.29107666]
[114.95575714 385.30709839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 63]
[26 62]
[27 61]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[64 106]
[65 105]
[66 104]
[67 103]
[90 102]
[91 101]
[92 100]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
