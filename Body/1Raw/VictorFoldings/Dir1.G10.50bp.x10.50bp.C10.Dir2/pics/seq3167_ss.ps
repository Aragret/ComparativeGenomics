%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCACCCGGGGGGGGGGAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAxxxxxxxxxxUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACACCCCCCCCCCAAACCCACCC\
) } def
/len { sequence length } bind def

/coor [
[62.81631088 361.04428101]
[48.97037506 355.02825928]
[37.26171112 345.49884033]
[28.55918694 333.16317749]
[23.50858498 318.93664551]
[22.48469353 303.87496948]
[25.56349373 289.09582520]
[32.51651382 275.69589233]
[42.82780075 264.66955566]
[55.73218155 256.83505249]
[70.27206421 252.77374268]
[70.27206421 237.77374268]
[70.27206421 222.77374268]
[70.27206421 207.77374268]
[70.27206421 192.77374268]
[70.27206421 177.77374268]
[70.27206421 162.77374268]
[70.27206421 147.77374268]
[70.27206421 132.77374268]
[70.27206421 117.77373505]
[64.74871063 131.71978760]
[53.55999374 141.71041870]
[39.08000565 145.62577820]
[24.38117599 142.63505554]
[12.58237362 133.37286377]
[6.18712711 119.80448151]
[6.55241013 104.80892944]
[13.60071564 91.56803131]
[25.83650017 82.89130402]
[40.66351318 80.61981964]
[54.93569183 85.23555756]
[65.62458801 95.75894928]
[59.56157303 82.03889465]
[53.49855804 68.31884003]
[47.43554688 54.59878922]
[41.37253189 40.87873459]
[35.30952072 27.15867996]
[29.10411263 13.50243950]
[16.25419617 4.27258444]
[17.87923622 -10.53310680]
[11.53210735 -24.12405777]
[5.18497801 -37.71500778]
[-1.16215158 -51.30596161]
[-13.03157234 -56.46063614]
[-18.02239037 -67.96327972]
[-13.94705582 -79.39564514]
[-20.01006889 -93.11569214]
[-26.07308197 -106.83574677]
[-40.67461014 -103.23485565]
[-55.67961502 -102.22438049]
[-70.63210297 -103.83504486]
[-85.07769012 -108.01789093]
[-98.57738495 -114.64580536]
[-110.72095490 -123.51737976]
[-121.13936615 -134.36302185]
[-129.51602173 -146.85313416]
[-135.59634399 -160.60815430]
[-139.19558716 -175.21008301]
[-140.20436096 -190.21520996]
[-138.59199524 -205.16751099]
[-134.40751648 -219.61262512]
[-127.77806854 -233.11157227]
[-118.90511322 -245.25413513]
[-108.05829620 -255.67131042]
[-95.56723785 -264.04653931]
[-81.81152344 -270.12530518]
[-67.20917511 -273.72290039]
[-52.20394516 -274.72998047]
[-37.25182343 -273.11590576]
[-22.80718803 -268.92980957]
[-9.30899429 -262.29882812]
[2.83256269 -253.42448425]
[13.24851418 -242.57649231]
[21.62232971 -230.08447266]
[27.69954300 -216.32807922]
[31.29546928 -201.72532654]
[32.30083466 -186.71997070]
[30.68508720 -171.76803589]
[26.49732780 -157.32386780]
[19.86481857 -143.82643127]
[10.98911190 -131.68588257]
[0.13993126 -121.27116394]
[-12.35302830 -112.89876556]
[-6.29001522 -99.17871094]
[-0.22700208 -85.45865631]
[14.47259331 -75.92336273]
[12.42879963 -57.65308762]
[18.77592850 -44.06213760]
[25.12305832 -30.47118759]
[31.47018814 -16.88023758]
[43.86611557 -8.62249756]
[42.69506454 7.15530968]
[48.41202545 11.91577148]
[49.02957153 21.09566689]
[55.09258652 34.81571960]
[61.15559769 48.53577423]
[67.21861267 62.25582886]
[73.28162384 75.97588348]
[79.34463501 89.69593811]
[101.10927582 79.44770050]
[116.95481873 93.71688080]
[131.91506958 94.80818939]
[121.27360535 84.23655701]
[117.89228821 69.62264252]
[122.80878448 55.45125580]
[134.51428223 46.07143021]
[149.41653442 44.36170578]
[162.94219971 50.84677887]
[170.94044495 63.53646088]
[170.95671082 78.53645325]
[162.98599243 91.24344635]
[149.47361755 97.75796509]
[163.96922302 101.61511993]
[178.46481323 105.47228241]
[196.09057617 100.24617767]
[208.06317139 113.03902435]
[222.63587952 116.59378815]
[239.45669556 114.47330475]
[246.15077209 130.04975891]
[233.03616333 140.79421997]
[219.08111572 131.16648865]
[204.50842285 127.61172485]
[193.97129822 133.63473511]
[181.77005005 130.74534607]
[174.60765076 119.96788025]
[160.11206055 116.11071777]
[145.61645508 112.25355530]
[130.82376099 109.76844025]
[115.86350250 108.67713165]
[103.87005615 120.21509552]
[85.27206421 117.77373505]
[85.27206421 132.77374268]
[85.27206421 147.77374268]
[85.27206421 162.77374268]
[85.27206421 177.77374268]
[85.27206421 192.77374268]
[85.27206421 207.77374268]
[85.27206421 222.77374268]
[85.27206421 237.77374268]
[85.27206421 252.77374268]
[99.81195068 256.83505249]
[112.71633148 264.66955566]
[123.02761841 275.69589233]
[129.98063660 289.09582520]
[133.05943298 303.87496948]
[132.03555298 318.93664551]
[126.98494720 333.16317749]
[118.28242493 345.49884033]
[106.57376099 355.02825928]
[92.72782135 361.04428101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 99]
[33 98]
[34 97]
[35 96]
[36 95]
[37 94]
[38 92]
[40 90]
[41 89]
[42 88]
[43 87]
[46 85]
[47 84]
[48 83]
[101 129]
[102 128]
[112 127]
[113 126]
[114 125]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
