%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCAAGAAGGGGGGGGGGCAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAAACUxxxxxxxxxxUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCCCCCCCCCCCACCCAAGUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 377.88262939]
[71.01555634 372.32962036]
[58.81560135 363.46328735]
[49.20452881 351.84097290]
[42.78650284 338.19326782]
[39.96496582 323.37808228]
[40.91728210 308.32672119]
[45.58358765 293.98529053]
[53.67055511 281.25534058]
[64.66983032 270.93707275]
[77.88998413 263.67907715]
[92.50000000 259.93765259]
[92.50000000 244.93765259]
[92.50000000 229.93765259]
[92.50000000 214.93765259]
[92.50000000 199.93765259]
[92.50000000 184.93765259]
[92.50000000 169.93765259]
[92.50000000 154.93765259]
[92.50000000 139.93765259]
[92.50000000 124.93765259]
[81.47698212 120.52909088]
[72.99098969 111.25380707]
[69.16513824 98.54547882]
[71.32887268 84.74154663]
[79.64830780 72.65421295]
[65.13968658 68.84635162]
[50.63105774 65.03849792]
[36.12243271 61.23063660]
[26.18959999 72.76753998]
[12.28933144 78.82307434]
[-2.79994702 78.24526215]
[-16.08741379 71.20223999]
[-24.96265793 59.13826370]
[-27.70846558 44.47790909]
[-42.21709061 40.67004776]
[-56.72571564 36.86219025]
[-71.41061401 33.80379486]
[-86.23309326 31.50292015]
[-101.05558014 29.20204544]
[-117.63471985 32.74723816]
[-125.63092804 17.79742241]
[-113.47892761 5.97518826]
[-98.75470734 14.37956333]
[-83.93222046 16.68043709]
[-69.10974121 18.98131371]
[-75.40055084 5.36420202]
[-68.86531067 -8.13730335]
[-54.28261566 -11.65084648]
[-42.31538773 -2.60731173]
[-41.71411896 12.38063240]
[-52.91785812 22.35356522]
[-38.40923309 26.16142273]
[-23.90060806 29.96928215]
[-14.30925179 18.54687500]
[-0.65350324 12.39626884]
[14.38008976 12.78623962]
[27.80830956 19.69298363]
[36.94324493 31.79421997]
[39.93029404 46.72201157]
[54.43891907 50.52986908]
[68.94754028 54.33772659]
[83.45616913 58.14558792]
[95.60950470 49.35374451]
[96.53291321 34.38219452]
[97.45632935 19.41064453]
[98.37974548 4.43909407]
[99.30315399 -10.53245640]
[85.15489197 -15.85391426]
[73.20473480 -25.11054611]
[64.51529694 -37.47925949]
[59.85923004 -51.86023331]
[59.65055084 -66.97472382]
[63.90781403 -81.47876740]
[72.25247192 -94.08265686]
[83.94251251 -103.66567993]
[97.93847656 -109.37570953]
[112.99584198 -110.70502472]
[127.77572632 -107.53541565]
[140.96391296 -100.14871979]
[151.38771057 -89.20176697]
[158.12023926 -75.66793823]
[160.56286621 -60.75066757]
[158.49836731 -45.77638245]
[152.11033630 -32.07658005]
[141.96679688 -20.86944771]
[128.96968079 -13.15151024]
[114.27470398 -9.60904217]
[113.35129547 5.36250734]
[112.42787933 20.33405685]
[111.50446320 35.30560684]
[110.58105469 50.27715683]
[121.56185150 60.49586487]
[136.42845154 58.49980927]
[151.29505920 56.50374985]
[157.20686340 42.39709473]
[169.30598450 33.20426178]
[184.28245544 31.31436348]
[198.10160828 37.13560867]
[207.09098816 49.01233673]
[221.95759583 47.01627731]
[236.82418823 45.02022171]
[251.69078064 43.02416611]
[266.55737305 41.02810669]
[270.78335571 37.75756836]
[275.38269043 36.59497833]
[279.47433472 37.32179260]
[282.39739990 39.39613342]
[297.35867310 38.31906128]
[312.31994629 37.24199295]
[323.86511230 26.10247421]
[339.75329590 28.32625008]
[347.79644775 42.20743179]
[341.82455444 57.09756470]
[326.41873169 61.57421112]
[313.39703369 52.20327377]
[298.43572998 53.28034210]
[283.47445679 54.35741425]
[268.55343628 55.89470673]
[253.68684387 57.89076233]
[238.82025146 59.88682175]
[223.95364380 61.88287735]
[209.08705139 63.87893295]
[203.54879761 77.70620728]
[191.75454712 86.96642303]
[176.80996704 89.09385681]
[162.71452332 83.41802979]
[153.29110718 71.37034607]
[138.42451477 73.36640930]
[123.55791473 75.36246490]
[129.23512268 107.01281738]
[107.50000000 124.93765259]
[107.50000000 139.93765259]
[107.50000000 154.93765259]
[107.50000000 169.93765259]
[107.50000000 184.93765259]
[107.50000000 199.93765259]
[107.50000000 214.93765259]
[107.50000000 229.93765259]
[107.50000000 244.93765259]
[107.50000000 259.93765259]
[122.11001587 263.67907715]
[135.33016968 270.93707275]
[146.32945251 281.25534058]
[154.41641235 293.98529053]
[159.08271790 308.32672119]
[160.03503418 323.37808228]
[157.21350098 338.19326782]
[150.79547119 351.84097290]
[141.18440247 363.46328735]
[128.98443604 372.32962036]
[114.96250153 377.88262939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 63]
[27 62]
[28 61]
[29 60]
[35 54]
[36 53]
[37 52]
[38 46]
[39 45]
[40 44]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[93 130]
[94 129]
[95 128]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
