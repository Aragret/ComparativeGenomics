%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCCUAGGGGGGGGGGCUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAAxxxxxxxxxxCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCCCCCCCCCCCUUGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.63421631]
[71.19830322 364.61819458]
[59.48964310 355.08877563]
[50.78712082 342.75311279]
[45.73651886 328.52658081]
[44.71262741 313.46490479]
[47.79142761 298.68576050]
[54.74444962 285.28582764]
[65.05573273 274.25949097]
[77.96011353 266.42498779]
[92.50000000 262.36367798]
[92.50000000 247.36367798]
[92.50000000 232.36367798]
[92.50000000 217.36367798]
[92.50000000 202.36367798]
[92.50000000 187.36367798]
[92.50000000 172.36367798]
[92.50000000 157.36367798]
[92.50000000 142.36367798]
[92.50000000 127.36367035]
[73.42379761 120.50074005]
[61.24618149 100.41961670]
[46.25348663 99.95157623]
[31.26078987 99.48352814]
[16.26809502 99.01548767]
[1.27539802 98.54744720]
[-13.71729851 98.07940674]
[-19.11550140 108.31669617]
[-27.92491341 115.74277496]
[-38.82990646 119.29924774]
[-50.22077560 118.50186920]
[-60.43133926 113.50608826]
[-67.98264313 105.07862854]
[-71.79717255 94.48004150]
[-86.73148346 93.07773590]
[-101.66578674 91.67543793]
[-112.66543579 102.79037476]
[-128.24089050 104.18299103]
[-141.03788757 95.19573975]
[-145.01408386 80.07212067]
[-138.29205322 65.95304871]
[-124.04571533 59.50511169]
[-109.00176239 63.77283478]
[-100.26348877 76.74112701]
[-85.32917786 78.14343262]
[-70.39486694 79.54573822]
[-58.95763016 64.84718323]
[-40.84855652 59.89879608]
[-23.24893570 66.84790039]
[-13.24925613 83.08670807]
[1.74344015 83.55474854]
[16.73613548 84.02279663]
[31.72883224 84.49083710]
[46.72152710 84.95887756]
[61.71422577 85.42691803]
[66.76354980 79.88126373]
[53.09443665 73.70426178]
[54.74515152 58.79536438]
[69.43445587 55.75820923]
[76.86219788 68.78994751]
[81.91152191 63.24428940]
[80.04390717 48.36100769]
[78.17630005 33.47772980]
[63.31523514 30.64858818]
[50.05675507 23.36381912]
[39.69978714 12.33710670]
[33.25899887 -1.35126221]
[31.36539650 -16.36024094]
[34.20449448 -31.21940422]
[41.49814606 -44.47299957]
[52.53179550 -54.82257843]
[66.22447968 -61.25419235]
[81.23471832 -63.13773727]
[96.09197998 -60.28868484]
[109.34068298 -52.98615265]
[119.68286896 -41.94557190]
[126.10530090 -28.24858093]
[127.97879028 -13.23707867]
[125.11978149 1.61826587]
[117.80837250 14.86207581]
[106.76086426 25.19685745]
[93.05957794 31.61011696]
[94.92719269 46.49339676]
[96.79479980 61.37667465]
[115.81443024 70.39461517]
[124.80679321 86.22888947]
[139.37950134 82.67413330]
[153.95220947 79.11936951]
[168.52490234 75.56460571]
[183.09761047 72.00984192]
[168.80172729 67.46804047]
[156.32003784 59.14894104]
[146.62661743 47.70177841]
[140.47793579 34.01990509]
[138.35385132 19.17105675]
[140.42013550 4.31405449]
[146.51551819 -9.39164829]
[156.16432190 -20.87644768]
[168.61354065 -29.24405861]
[182.89163208 -33.84146881]
[197.88430786 -34.30988693]
[212.42155457 -30.61276436]
[225.36885071 -23.03862190]
[235.71577454 -12.17855549]
[242.65486145 1.11990809]
[245.64456177 15.81894398]
[244.45156860 30.77142715]
[239.16897583 44.81045532]
[230.20906067 56.84040833]
[218.27102661 65.92245483]
[204.28393555 71.34844971]
[219.04998779 73.98731232]
[233.81604004 76.62617493]
[248.58209229 79.26504517]
[261.40420532 70.02552795]
[276.99053955 72.64124298]
[286.09399414 85.56033325]
[283.31362915 101.11813354]
[270.29901123 110.08447266]
[254.77146912 107.13978577]
[245.94323730 94.03109741]
[231.17716980 91.39223480]
[216.41111755 88.75337219]
[201.64506531 86.11450195]
[186.65237427 86.58255005]
[172.07966614 90.13730621]
[157.50695801 93.69207001]
[142.93426514 97.24683380]
[128.36155701 100.80159760]
[122.31364441 117.52488708]
[107.50000000 127.36367035]
[107.50000000 142.36367798]
[107.50000000 157.36367798]
[107.50000000 172.36367798]
[107.50000000 187.36367798]
[107.50000000 202.36367798]
[107.50000000 217.36367798]
[107.50000000 232.36367798]
[107.50000000 247.36367798]
[107.50000000 262.36367798]
[122.03988647 266.42498779]
[134.94427490 274.25949097]
[145.25555420 285.28582764]
[152.20857239 298.68576050]
[155.28736877 313.46490479]
[154.26348877 328.52658081]
[149.21287537 342.75311279]
[140.51036072 355.08877563]
[128.80169678 364.61819458]
[114.95575714 370.63421631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[34 46]
[35 45]
[36 44]
[61 84]
[62 83]
[63 82]
[86 129]
[87 128]
[88 127]
[89 126]
[90 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
