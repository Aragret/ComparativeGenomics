%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUAAACUCGGGGGGGGGGCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACxxxxxxxxxxAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGCCCCCCCCCCACUUAAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.28728485 363.17562866]
[71.44134521 357.15960693]
[59.73268509 347.63018799]
[51.03016281 335.29452515]
[45.97956085 321.06799316]
[44.95566940 306.00631714]
[48.03446960 291.22714233]
[54.98748779 277.82720947]
[65.29877472 266.80087280]
[78.20315552 258.96636963]
[92.74304199 254.90505981]
[92.74304199 239.90505981]
[92.74304199 224.90505981]
[92.74304199 209.90505981]
[92.74304199 194.90505981]
[92.74304199 179.90505981]
[92.74304199 164.90505981]
[92.74304199 149.90505981]
[92.74304199 134.90505981]
[92.74304199 119.90506744]
[92.74304199 104.90506744]
[90.71244812 102.53639221]
[89.52348328 99.35817719]
[89.48427582 95.69014740]
[90.77687073 91.96360016]
[93.41893005 88.67117310]
[94.66580963 73.72308350]
[95.91268158 58.77500153]
[81.06742859 56.59141541]
[66.38858795 53.47999191]
[51.93407440 49.45301819]
[37.76094055 44.52637863]
[23.92512131 38.71951675]
[10.48122215 32.05535889]
[-2.51770091 24.56019402]
[-15.02034664 16.26360893]
[-26.97737312 7.19834423]
[-38.34158707 -2.59982157]
[-49.06814575 -13.09222031]
[-59.11471176 -24.23744392]
[-68.44163513 -35.99150467]
[-77.01210785 -48.30801392]
[-84.79231262 -61.13837051]
[-91.75152588 -74.43193054]
[-97.86230469 -88.13623047]
[-103.10051727 -102.19718933]
[-107.44549561 -116.55931854]
[-110.88008881 -131.16592407]
[-113.39075470 -145.95936584]
[-114.96756744 -160.88127136]
[-115.60430908 -175.87274170]
[-115.29847717 -190.87460327]
[-114.05126190 -205.82766724]
[-111.86759949 -220.67289734]
[-108.75610352 -235.35173035]
[-104.72904968 -249.80622864]
[-99.80233765 -263.97933960]
[-93.99540710 -277.81512451]
[-87.33117676 -291.25897217]
[-79.83594513 -304.25787354]
[-71.53929138 -316.76046753]
[-62.47396851 -328.71743774]
[-52.67574310 -340.08160400]
[-42.18328857 -350.80810547]
[-31.03801155 -360.85461426]
[-19.28390312 -370.18148804]
[-6.96734619 -378.75189209]
[5.86304808 -386.53201294]
[19.15664482 -393.49118042]
[32.86098099 -399.60186768]
[46.92196655 -404.84002686]
[61.28411484 -409.18493652]
[75.89073944 -412.61944580]
[90.68420410 -415.13003540]
[105.60610962 -416.70675659]
[120.59757996 -417.34344482]
[135.59944153 -417.03750610]
[150.55249023 -415.79022217]
[165.39772034 -413.60647583]
[180.07653809 -410.49490356]
[194.53100586 -406.46777344]
[208.70408630 -401.54098511]
[222.53984070 -395.73400879]
[235.98367310 -389.06970215]
[248.98251343 -381.57440186]
[261.48507690 -373.27767944]
[273.44201660 -364.21228027]
[284.80612183 -354.41400146]
[295.53256226 -343.92150879]
[305.57901001 -332.77615356]
[314.90582275 -321.02200317]
[323.47616577 -308.70541382]
[331.25622559 -295.87496948]
[338.21530151 -282.58132935]
[344.32595825 -268.87698364]
[349.56402588 -254.81596375]
[353.90884399 -240.45378113]
[357.34329224 -225.84713745]
[359.85379028 -211.05366516]
[361.43045044 -196.13175964]
[362.06704712 -181.14027405]
[361.76104736 -166.13841248]
[360.51367188 -151.18537903]
[358.32986450 -136.34016418]
[355.21820068 -121.66136169]
[351.19100952 -107.20690918]
[346.26416016 -93.03385925]
[340.45706177 -79.19812775]
[333.79269409 -65.75433350]
[326.29733276 -52.75552750]
[318.00054932 -40.25301361]
[308.93508911 -28.29612732]
[299.13674927 -16.93206406]
[288.64419556 -6.20567083]
[277.49880981 3.84072042]
[265.74459839 13.16746140]
[253.42796326 21.73774147]
[240.59747314 29.51774025]
[227.30381775 36.47675323]
[213.59941101 42.58731079]
[199.53837585 47.82530594]
[185.17617798 52.17005920]
[170.56951904 55.60442734]
[155.77603149 58.11485291]
[140.85411072 59.69143295]
[125.86262512 60.32794571]
[110.86077118 60.02187347]
[109.61389160 74.96996307]
[108.36701965 89.91804504]
[107.74304199 104.90506744]
[107.74304199 119.90506744]
[107.74304199 134.90505981]
[107.74304199 149.90505981]
[107.74304199 164.90505981]
[107.74304199 179.90505981]
[107.74304199 194.90505981]
[107.74304199 209.90505981]
[107.74304199 224.90505981]
[107.74304199 239.90505981]
[107.74304199 254.90505981]
[122.28292847 258.96636963]
[135.18731689 266.80087280]
[145.49859619 277.82720947]
[152.45161438 291.22714233]
[155.53041077 306.00631714]
[154.50653076 321.06799316]
[149.45591736 335.29452515]
[140.75340271 347.63018799]
[129.04473877 357.15960693]
[115.19879913 363.17562866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 129]
[27 128]
[28 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
