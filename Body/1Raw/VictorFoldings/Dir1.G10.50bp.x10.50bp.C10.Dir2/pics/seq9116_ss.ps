%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAUAAUUCGGGGGGGGGGAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAxxxxxxxxxxCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCCCCCCCCCCCGAAUAAUUC\
) } def
/len { sequence length } bind def

/coor [
[84.92958832 378.71649170]
[71.08364868 372.70046997]
[59.37498856 363.17105103]
[50.67246246 350.83538818]
[45.62186050 336.60885620]
[44.59796906 321.54718018]
[47.67676926 306.76803589]
[54.62979126 293.36810303]
[64.94107819 282.34176636]
[77.84545898 274.50726318]
[92.38534546 270.44595337]
[92.38534546 255.44593811]
[92.38534546 240.44593811]
[92.38534546 225.44593811]
[92.38534546 210.44593811]
[92.38534546 195.44593811]
[92.38534546 180.44593811]
[92.38534546 165.44593811]
[92.38534546 150.44593811]
[92.38534546 135.44593811]
[92.38534546 120.44594574]
[89.21976471 113.71357727]
[92.54462433 105.13470459]
[90.24052429 101.95232391]
[89.38129425 97.75620270]
[90.39274597 93.22904205]
[93.37313843 89.22016907]
[94.62001038 74.27207947]
[95.86688995 59.32399368]
[97.11376190 44.37590790]
[83.14916992 40.08064270]
[70.39500427 32.96638870]
[59.41261292 23.34916878]
[50.68476105 11.65511703]
[44.59439850 -1.59842300]
[41.40786362 -15.82577229]
[41.26323700 -30.39880371]
[44.16435623 -44.67467117]
[49.98077011 -58.02417374]
[58.45357513 -69.85946655]
[69.20697784 -79.65998077]
[81.76492310 -86.99528503]
[95.57220459 -91.54402161]
[110.01897430 -93.10794067]
[103.75650024 -107.63694000]
[112.77355194 -119.49198151]
[114.33113861 -134.41088867]
[115.88871765 -149.32980347]
[101.19571686 -152.41522217]
[86.89784241 -156.99504089]
[73.14665985 -163.02075195]
[60.08794403 -170.42843628]
[47.86011887 -179.13960266]
[36.59280396 -189.06188965]
[26.40544891 -200.09010315]
[17.40603638 -212.10737610]
[9.68996811 -224.98628235]
[3.33904004 -238.59031677]
[-1.57942593 -252.77526855]
[-5.01329088 -267.39074707]
[-6.92615366 -282.28186035]
[-7.29773712 -297.29071045]
[-6.12410259 -312.25823975]
[-3.41769052 -327.02575684]
[0.79280895 -341.43670654]
[6.46276236 -355.33834839]
[13.53206539 -368.58331299]
[21.92577934 -381.03118896]
[31.55492592 -392.55001831]
[42.31742859 -403.01770020]
[54.09920502 -412.32330322]
[66.77535248 -420.36813354]
[80.21150970 -427.06692505]
[94.26523590 -432.34866333]
[108.78755188 -436.15737915]
[123.62451935 -438.45266724]
[138.61885071 -439.21023560]
[153.61161804 -438.42205811]
[168.44386292 -436.09643555]
[182.95835876 -432.25805664]
[197.00126648 -426.94760132]
[210.42370605 -420.22134399]
[223.08338928 -412.15063477]
[234.84611511 -402.82101440]
[245.58721924 -392.33135986]
[255.19281006 -380.79284668]
[263.56106567 -368.32785034]
[270.60330200 -355.06848145]
[276.24481201 -341.15527344]
[280.42587280 -326.73574829]
[283.10211182 -311.96273804]
[284.24514771 -296.99285889]
[283.84289551 -281.98477173]
[281.89959717 -267.09762573]
[278.43588257 -252.48916626]
[273.48843384 -238.31430054]
[267.10974121 -224.72328186]
[259.36737061 -211.86016846]
[250.34341431 -199.86131287]
[240.13354492 -188.85392761]
[228.84597778 -178.95468140]
[216.60037231 -170.26852417]
[203.52655029 -162.88754272]
[189.76307678 -156.88995361]
[175.45588684 -152.33934021]
[160.75660706 -149.28396606]
[145.82107544 -147.75619507]
[130.80763245 -147.77221680]
[129.25004578 -132.85331726]
[127.69246674 -117.93439484]
[134.06636047 -104.47249603]
[124.93788910 -91.55035400]
[139.56796265 -86.66390228]
[152.75785828 -78.65406036]
[163.85044861 -67.91629028]
[172.29231262 -54.98203659]
[177.66133118 -40.49242783]
[179.68774414 -25.16652107]
[178.26782227 -9.76559162]
[173.46903992 4.94466543]
[165.52699280 18.23220825]
[154.83370972 29.43508148]
[141.91844177 37.99438095]
[127.42135620 43.48215485]
[112.06185150 45.62278366]
[110.81497192 60.57086945]
[109.56809998 75.51895905]
[108.32122803 90.46704102]
[107.54138184 105.44675446]
[107.38534546 120.44594574]
[107.38534546 135.44593811]
[107.38534546 150.44593811]
[107.38534546 165.44593811]
[107.38534546 180.44593811]
[107.38534546 195.44593811]
[107.38534546 210.44593811]
[107.38534546 225.44593811]
[107.38534546 240.44593811]
[107.38534546 255.44593811]
[107.38534546 270.44595337]
[121.92523193 274.50726318]
[134.82960510 282.34176636]
[145.14089966 293.36810303]
[152.09391785 306.76803589]
[155.17271423 321.54718018]
[154.14881897 336.60885620]
[149.09822083 350.83538818]
[140.39570618 363.17105103]
[128.68704224 372.70046997]
[114.84109497 378.71649170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[27 128]
[28 127]
[29 126]
[30 125]
[44 112]
[46 110]
[47 109]
[48 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
