%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUACCCCAGGGGGGGGGGGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCxxxxxxxxxxUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGCCCCCCCCCCUUUCUACUCCA\
) } def
/len { sequence length } bind def

/coor [
[92.86226654 366.88394165]
[77.97891998 364.52111816]
[64.04190063 358.78909302]
[51.80279541 349.99700928]
[41.92164993 338.61895752]
[34.93134689 325.26858521]
[31.20885849 310.66586304]
[30.95493507 295.59826660]
[34.18327332 280.87841797]
[40.71976852 267.30007935]
[50.21191788 255.59555054]
[62.14782333 246.39605713]
[75.88379669 240.19767761]
[90.67906952 237.33471680]
[91.29489899 222.34736633]
[91.91072083 207.36000061]
[92.52655029 192.37265015]
[93.14237213 177.38529968]
[93.75819397 162.39794922]
[94.37402344 147.41059875]
[94.98984528 132.42324829]
[95.60567474 117.43589020]
[92.93682098 132.19654846]
[81.79097748 142.23498535]
[66.83249664 143.35026550]
[54.32126236 135.07566833]
[49.49301910 120.87397766]
[54.36831284 106.68836975]
[66.90690613 98.45529175]
[81.86277008 99.62065125]
[67.21004486 96.41165924]
[52.55731964 93.20265961]
[47.46761703 94.83059692]
[42.74801636 94.35000610]
[39.15173721 92.26760101]
[37.11441803 89.31861115]
[22.68703461 85.21366882]
[8.25964928 81.10872650]
[-6.16773510 77.00377655]
[-20.59511948 72.89883423]
[-35.02250290 68.79389191]
[-47.86631775 77.71411896]
[-63.43427277 76.24009705]
[-74.37566376 65.06781006]
[-75.52429199 49.47246552]
[-66.33781433 36.81771851]
[-51.15380859 33.07874298]
[-37.14169312 40.02097702]
[-30.91756058 54.36650467]
[-16.49017525 58.47145081]
[-2.06279039 62.57639313]
[12.36459446 66.68134308]
[26.79197884 70.78628540]
[41.21936417 74.89122772]
[55.76631927 78.54993439]
[70.41904449 81.75893402]
[85.07176971 84.96792603]
[86.45659637 82.55185699]
[88.21562195 80.26008606]
[90.33781433 78.14865875]
[89.41440582 63.17711258]
[88.49098969 48.20556259]
[87.56757355 33.23401260]
[72.75495148 30.39907646]
[59.11305618 23.96871185]
[47.49943924 14.34713364]
[38.64414597 2.13916302]
[33.10382080 -11.88779736]
[31.22673416 -26.85199928]
[33.13088226 -41.81278229]
[38.69657135 -55.82970047]
[47.57393265 -68.02162933]
[59.20492935 -77.62219238]
[72.85842896 -84.02787018]
[87.67616272 -86.83600616]
[102.72666931 -85.87007904]
[117.06386566 -81.19080353]
[129.78649902 -73.09233093]
[140.09483337 -62.08372879]
[147.34085083 -48.85701370]
[151.06906128 -34.24362183]
[151.04513550 -19.16216850]
[147.27055359 -4.56068420]
[139.98258972 8.64296818]
[129.63937378 19.61879730]
[116.89110565 27.67685318]
[102.53912354 32.31059647]
[103.46253967 47.28214645]
[104.38595581 62.25369644]
[105.30936432 77.22525024]
[105.68247223 62.22988892]
[115.15660095 50.60057449]
[129.76698303 47.20398712]
[143.39939880 53.46153641]
[150.34892273 66.75454712]
[147.70729065 81.52011108]
[136.57995605 91.57907104]
[121.62233734 92.72160339]
[136.62155151 92.87559509]
[151.62075806 93.02959442]
[166.61996460 93.18359375]
[180.13995361 75.64006805]
[205.91824341 76.79066467]
[220.06555176 71.80534363]
[230.31843567 59.00648880]
[246.48587036 61.75344467]
[251.93620300 77.22037506]
[241.06259155 89.49622345]
[225.05087280 85.95265961]
[210.90356445 90.93798065]
[212.44085693 105.85900116]
[227.30744934 107.85505676]
[242.17405701 109.85111237]
[257.04064941 111.84716797]
[271.90725708 113.84322357]
[285.48114014 105.29168701]
[300.58215332 110.70824432]
[305.62606812 125.93776703]
[296.74365234 139.29747009]
[280.74868774 140.53894043]
[269.91119385 128.70982361]
[255.04458618 126.71376801]
[240.17799377 124.71771240]
[225.31140137 122.72165680]
[210.44479370 120.72559357]
[196.75723267 127.65030670]
[182.50144958 126.71861267]
[171.58178711 119.24131012]
[166.46597290 108.18280029]
[151.46676636 108.02880096]
[136.46754456 107.87480927]
[121.46833801 107.72080994]
[110.59302521 118.05171204]
[109.97720337 133.03906250]
[109.36137390 148.02641296]
[108.74555206 163.01377869]
[108.12972260 178.00112915]
[107.51390076 192.98847961]
[106.89807129 207.97583008]
[106.28224945 222.96318054]
[105.66641998 237.95054626]
[120.17694092 242.01766968]
[133.35809326 249.32206726]
[144.49902344 259.46978760]
[152.99893188 271.91360474]
[158.39941406 285.98239136]
[160.40924072 300.91751099]
[158.92001343 315.91348267]
[154.01205444 330.16159058]
[145.95004272 342.89346313]
[135.16873169 353.42248535]
[122.24958038 361.18084717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[30 57]
[31 56]
[32 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[60 90]
[61 89]
[62 88]
[63 87]
[98 132]
[99 131]
[100 130]
[101 129]
[103 110]
[104 109]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
