%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACUCCACGGGGGGGGGGGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUxxxxxxxxxxAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCCCCCCCCCCCACACUCAAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 396.12283325]
[71.01555634 390.56982422]
[58.81560135 381.70349121]
[49.20452881 370.08117676]
[42.78650284 356.43347168]
[39.96496582 341.61828613]
[40.91728210 326.56692505]
[45.58358765 312.22549438]
[53.67055511 299.49554443]
[64.66983032 289.17727661]
[77.88998413 281.91928101]
[92.50000000 278.17785645]
[92.50000000 263.17785645]
[92.50000000 248.17785645]
[92.50000000 233.17785645]
[92.50000000 218.17785645]
[92.50000000 203.17785645]
[92.50000000 188.17785645]
[92.50000000 173.17785645]
[92.50000000 158.17785645]
[92.50000000 143.17785645]
[92.50000000 128.17785645]
[76.48236847 122.21496582]
[65.18814087 107.17211151]
[63.62076569 86.69755554]
[48.75416946 88.69361115]
[33.88756943 90.68966675]
[19.02097130 92.68572235]
[15.57834721 95.55765533]
[11.77783108 96.99974823]
[8.12537193 97.07901764]
[5.05035591 96.02378845]
[2.85856152 94.18338776]
[-12.12167931 94.95304871]
[-23.89311790 105.85317993]
[-39.73229599 103.30365753]
[-47.48874664 89.26026154]
[-41.21239090 74.49588013]
[-25.71790695 70.33648682]
[-12.89133930 79.97280884]
[2.08890128 79.20314789]
[17.02491379 77.81912231]
[31.89151192 75.82306671]
[46.75811005 73.82701111]
[61.62471008 71.83095551]
[63.92558670 57.00847244]
[50.36368942 50.59949493]
[33.45972061 49.29864502]
[30.03025055 32.69517899]
[45.03547668 24.80343628]
[56.77266312 37.03759766]
[70.33456421 43.44657516]
[83.16821289 35.68143845]
[83.78404236 20.69408607]
[84.39986420 5.70673323]
[85.01569366 -9.28062057]
[85.63151550 -24.26797295]
[86.24734497 -39.25532532]
[86.86316681 -54.24267960]
[87.47898865 -69.23003387]
[75.49036407 -60.21488953]
[60.61302185 -62.12923431]
[51.29718781 -73.88573456]
[52.83418655 -88.80677795]
[64.35101318 -98.41732788]
[79.30619812 -97.25866699]
[89.20555878 -85.98815155]
[91.65848541 -100.78623199]
[94.11141205 -115.58431244]
[80.36744690 -121.81052399]
[68.70387268 -131.38253784]
[59.91593170 -143.64772034]
[54.60280228 -157.76979065]
[53.12674332 -172.78590393]
[55.58839417 -187.67222595]
[61.81991577 -201.41378784]
[71.39643097 -213.07366943]
[83.66500092 -221.85687256]
[97.78912354 -227.16455078]
[112.80580902 -228.63481140]
[127.69118500 -226.16741943]
[141.43034363 -219.93058777]
[153.08651733 -210.34956360]
[161.86499023 -198.07760620]
[167.16720581 -183.95143127]
[168.63166809 -168.93418884]
[166.15852356 -154.04977417]
[159.91639709 -140.31301880]
[150.33087158 -128.66053772]
[138.05552673 -119.88681030]
[123.92730713 -114.59004974]
[108.90949249 -113.13138580]
[106.45656586 -98.33330536]
[104.00363922 -83.53522491]
[102.46634674 -68.61420441]
[101.85051727 -53.62685394]
[101.23469543 -38.63949966]
[100.61886597 -23.65214729]
[100.00304413 -8.66479492]
[99.38722229 6.32255840]
[98.77139282 21.30991173]
[98.15557098 36.29726410]
[108.48647308 47.17258072]
[123.48567963 47.32657623]
[137.36456299 39.73136139]
[150.01171875 47.59891891]
[165.01094055 47.75291443]
[170.61152649 33.64625931]
[180.93270874 22.51802254]
[194.57862854 15.87320614]
[209.70376587 14.61046982]
[224.26258850 18.90058517]
[236.28613281 28.16335297]
[244.14831543 41.14605713]
[246.78582764 56.09289551]
[243.84197998 70.98242950]
[235.71490479 83.80097198]
[223.50370789 92.81491852]
[208.85987854 96.80521393]
[193.76383972 95.23219299]
[180.25723267 88.30860138]
[170.16671753 76.97080231]
[164.85693359 62.75212479]
[149.85772705 62.59812927]
[137.05169678 70.20435333]
[123.33168030 62.32578659]
[108.33247375 62.17178726]
[128.07809448 76.92861176]
[133.93901062 99.26466370]
[125.22344208 118.95693970]
[107.50000000 128.17785645]
[107.50000000 143.17785645]
[107.50000000 158.17785645]
[107.50000000 173.17785645]
[107.50000000 188.17785645]
[107.50000000 203.17785645]
[107.50000000 218.17785645]
[107.50000000 233.17785645]
[107.50000000 248.17785645]
[107.50000000 263.17785645]
[107.50000000 278.17785645]
[122.11001587 281.91928101]
[135.33016968 289.17727661]
[146.32945251 299.49554443]
[154.41641235 312.22549438]
[159.08271790 326.56692505]
[160.03503418 341.61828613]
[157.21350098 356.43347168]
[150.79547119 370.08117676]
[141.18440247 381.70349121]
[128.98443604 390.56982422]
[114.96250153 396.12283325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 45]
[26 44]
[27 43]
[28 42]
[33 41]
[34 40]
[46 52]
[47 51]
[53 102]
[54 101]
[55 100]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[67 94]
[68 93]
[69 92]
[103 127]
[104 126]
[106 124]
[107 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
