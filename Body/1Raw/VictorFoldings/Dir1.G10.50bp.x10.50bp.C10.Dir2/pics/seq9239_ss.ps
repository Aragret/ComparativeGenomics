%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAAGCCGCGGGGGGGGGGCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUxxxxxxxxxxAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCACCCCCCCCCCUCGAAACCGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.56079102]
[71.19830322 353.54476929]
[59.48964310 344.01535034]
[50.78712082 331.67965698]
[45.73651886 317.45315552]
[44.71262741 302.39147949]
[47.79142761 287.61230469]
[54.74444962 274.21237183]
[65.05573273 263.18603516]
[77.96011353 255.35153198]
[92.50000000 251.29022217]
[92.50000000 236.29022217]
[92.50000000 221.29022217]
[92.50000000 206.29022217]
[92.50000000 191.29022217]
[92.50000000 176.29022217]
[92.50000000 161.29022217]
[92.50000000 146.29022217]
[92.50000000 131.29022217]
[92.50000000 116.29022217]
[81.85799408 110.93493652]
[75.60469818 98.67004395]
[61.82231522 104.59001160]
[48.03993225 110.50997162]
[38.41362000 123.06563568]
[23.66584206 120.97940826]
[11.49871826 132.78607178]
[-3.21473670 124.36285400]
[0.80620766 107.89263153]
[17.74587822 107.19702148]
[26.38638496 95.06479645]
[42.11996841 96.72759247]
[55.90235138 90.80762482]
[69.68473053 84.88766479]
[54.68638992 85.11071777]
[42.15422440 76.86785126]
[36.41900635 63.00757599]
[39.46266937 48.31961823]
[50.23340225 37.87973022]
[65.00914764 35.29565430]
[78.68379974 41.46036911]
[86.53179169 54.24352646]
[85.84094238 69.22794342]
[92.18807220 55.63699341]
[98.53520203 42.04604340]
[104.88233185 28.45509338]
[111.22946167 14.86414242]
[117.57659149 1.27319157]
[123.92372131 -12.31775951]
[130.27085876 -25.90871048]
[119.27716064 -28.44508934]
[110.86581421 -35.44546509]
[106.64653778 -45.17411041]
[107.24576569 -55.42170715]
[112.23100281 -64.00509644]
[120.26772308 -69.23233795]
[119.64374542 -84.21935272]
[119.01976776 -99.20636749]
[118.39579010 -114.19338226]
[117.77181244 -129.18040466]
[117.14783478 -144.16741943]
[116.52385712 -159.15443420]
[115.89987946 -174.14144897]
[115.27590179 -189.12846375]
[100.61444855 -192.76419067]
[87.57189178 -200.38444519]
[77.20552063 -211.37149048]
[70.35570526 -224.83465576]
[67.57772064 -239.68254089]
[69.09676361 -254.71147156]
[74.78969574 -268.70315552]
[84.19502258 -280.52334595]
[96.55028534 -289.21380615]
[110.85390472 -294.07006836]
[125.94634247 -294.69842529]
[140.60414124 -291.04797363]
[153.63903809 -283.41461182]
[163.99435425 -272.41714478]
[170.83064270 -258.94711304]
[173.59371948 -244.09646606]
[172.05957031 -229.06904602]
[166.35258484 -215.08309937]
[156.93539429 -203.27236938]
[144.57141113 -194.59432983]
[130.26292419 -189.75244141]
[130.88690186 -174.76542664]
[131.51086426 -159.77841187]
[132.13484192 -144.79139709]
[132.75881958 -129.80438232]
[133.38279724 -114.81735992]
[134.00677490 -99.83034515]
[134.63075256 -84.84333038]
[135.25473022 -69.85631561]
[148.63618469 -60.92596436]
[152.31060791 -43.59224319]
[166.95410156 -46.84307098]
[181.59761047 -50.09389496]
[196.24110413 -53.34472275]
[210.46788025 -58.09853745]
[224.12413025 -64.30393982]
[237.78036499 -70.50935364]
[249.69923401 -82.56658936]
[264.58474731 -74.45128632]
[260.90731812 -57.90097427]
[243.98577881 -56.85310745]
[230.32952881 -50.64770126]
[216.67329407 -44.44229507]
[231.21806335 -40.77491760]
[242.07592773 -30.42567825]
[246.43635559 -16.07344437]
[243.17068481 -1.43324840]
[233.12419128 9.70533848]
[218.89739990 14.45912838]
[204.17288208 11.59761524]
[192.76200867 1.86149526]
[187.61846924 -12.22906780]
[190.07363892 -27.02677345]
[199.49192810 -38.70122147]
[184.84843445 -35.45039368]
[170.20492554 -32.19956970]
[155.56143188 -28.94874191]
[143.86180115 -19.56158066]
[137.51467896 -5.97062969]
[131.16754150 7.62032127]
[124.82041168 21.21127129]
[118.47328186 34.80222321]
[112.12615204 48.39317322]
[105.77902222 61.98412323]
[99.43189240 75.57507324]
[120.63751984 95.22526550]
[107.50000000 116.29022217]
[107.50000000 131.29022217]
[107.50000000 146.29022217]
[107.50000000 161.29022217]
[107.50000000 176.29022217]
[107.50000000 191.29022217]
[107.50000000 206.29022217]
[107.50000000 221.29022217]
[107.50000000 236.29022217]
[107.50000000 251.29022217]
[122.03988647 255.35153198]
[134.94427490 263.18603516]
[145.25555420 274.21237183]
[152.20857239 287.61230469]
[155.28736877 302.39147949]
[154.26348877 317.45315552]
[149.21287537 331.67965698]
[140.51036072 344.01535034]
[128.80169678 353.54476929]
[114.95575714 359.56079102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 34]
[23 33]
[24 32]
[26 30]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[95 121]
[96 120]
[97 119]
[98 118]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
