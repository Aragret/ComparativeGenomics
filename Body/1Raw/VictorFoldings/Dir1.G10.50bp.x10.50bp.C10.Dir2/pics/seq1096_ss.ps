%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACGGGGGGGGGGGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUxxxxxxxxxxAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCCCCCCCCCCCGCCCACGGG\
) } def
/len { sequence length } bind def

/coor [
[124.14317322 528.43298340]
[110.29723358 522.41693115]
[98.58857727 512.88751221]
[89.88604736 500.55184937]
[84.83544922 486.32531738]
[83.81155396 471.26364136]
[86.89035797 456.48449707]
[93.84337616 443.08456421]
[104.15466309 432.05822754]
[117.05904388 424.22372437]
[131.59892273 420.16241455]
[131.59892273 405.16241455]
[131.59892273 390.16241455]
[131.59892273 375.16241455]
[131.59892273 360.16241455]
[131.59892273 345.16241455]
[131.59892273 330.16241455]
[131.59892273 315.16241455]
[131.59892273 300.16241455]
[131.59892273 285.16241455]
[131.59892273 270.16241455]
[112.77998352 261.82781982]
[101.15462494 245.99270630]
[99.05886078 227.40339661]
[106.12966919 211.10047913]
[119.63698578 201.05393982]
[115.93082428 186.51901245]
[103.01412964 174.68013000]
[108.05659485 157.00096130]
[104.04885864 142.54626465]
[100.04111481 128.09158325]
[96.03337860 113.63688660]
[86.05065155 102.44112396]
[72.14809418 96.80916595]
[58.24553680 91.17720795]
[44.34298325 85.54525757]
[28.64739609 87.53500366]
[19.75636292 75.58515930]
[5.85380793 69.95320129]
[-8.04874802 64.32124329]
[-21.95130348 58.68928909]
[-37.64689255 60.67904282]
[-46.53792191 48.72919464]
[-60.26615143 56.21716690]
[-75.58547211 53.07828903]
[-85.26255798 40.79464340]
[-84.72819519 25.16619301]
[-74.23469543 13.57221222]
[-58.73675537 11.48702717]
[-45.55204010 19.89519501]
[-40.90596771 34.82664108]
[-26.20478249 32.43405151]
[-16.31934738 44.78673553]
[-2.41679144 50.41868973]
[11.48576450 56.05064774]
[25.38832092 61.68260193]
[40.08950424 59.29001617]
[49.97493744 71.64270020]
[63.87749481 77.27465820]
[77.78005219 82.90660858]
[91.68260956 88.53856659]
[84.56363678 75.33552551]
[93.26451874 63.11690903]
[108.06977844 65.52612305]
[112.44743347 79.87416077]
[118.22370911 66.03094482]
[123.99997711 52.18772507]
[129.77624512 38.34450531]
[117.47077179 46.92210770]
[102.99868011 50.86653137]
[88.04262543 49.71916580]
[74.34153748 43.61341095]
[63.48843765 33.25917816]
[56.74519730 19.86034393]
[54.89585114 4.97478342]
[58.15542221 -9.66677380]
[66.14492035 -22.36196709]
[77.93541718 -31.63473511]
[92.15603638 -36.40694046]
[107.15335846 -36.12372589]
[121.18366241 -30.81801796]
[132.61566162 -21.10670853]
[140.12014771 -8.11892128]
[142.82460022 6.63526249]
[140.41362000 21.44312286]
[150.39634705 10.24735737]
[160.37907410 -0.94840884]
[154.93783569 -15.25405598]
[156.77954102 -30.44835472]
[165.48097229 -43.03976822]
[179.04260254 -50.13487625]
[194.34808350 -50.10328293]
[207.88031006 -42.95223999]
[216.52969360 -30.32501221]
[218.30863953 -15.12323952]
[212.80839539 -0.84017938]
[201.29284668 9.24202633]
[186.40820312 12.80655956]
[171.57484436 9.03431797]
[161.59211731 20.23008347]
[151.60939026 31.42584991]
[143.61947632 44.12077713]
[137.84320068 57.96399689]
[132.06692505 71.80721283]
[126.29064941 85.65042877]
[110.48806763 109.62915039]
[114.49580383 124.08383942]
[118.50354767 138.53852844]
[122.51128387 152.99320984]
[133.36268616 160.04312134]
[136.37882996 172.21365356]
[130.46575928 182.81285095]
[134.17192078 197.34777832]
[153.84631348 200.08583069]
[169.72171021 214.81114197]
[174.73048401 237.71513367]
[189.14270020 241.87301636]
[203.82537842 235.40783691]
[217.96708679 242.98355103]
[220.71952820 258.78872681]
[209.97125244 270.69900513]
[193.96742249 269.57778931]
[184.98481750 256.28524780]
[170.57260132 252.12734985]
[164.57917786 256.63610840]
[176.85948181 265.24972534]
[172.46224976 279.59072876]
[157.46432495 279.84030151]
[152.59234619 265.65365601]
[146.59892273 270.16241455]
[146.59892273 285.16241455]
[146.59892273 300.16241455]
[146.59892273 315.16241455]
[146.59892273 330.16241455]
[146.59892273 345.16241455]
[146.59892273 360.16241455]
[146.59892273 375.16241455]
[146.59892273 390.16241455]
[146.59892273 405.16241455]
[146.59892273 420.16241455]
[161.13880920 424.22372437]
[174.04319763 432.05822754]
[184.35447693 443.08456421]
[191.30751038 456.48449707]
[194.38630676 471.26364136]
[193.36241150 486.32531738]
[188.31181335 500.55184937]
[179.60928345 512.88751221]
[167.90061951 522.41693115]
[154.05468750 528.43298340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 113]
[27 112]
[29 109]
[30 108]
[31 107]
[32 106]
[33 61]
[34 60]
[35 59]
[36 58]
[38 56]
[39 55]
[40 54]
[41 53]
[43 51]
[65 105]
[66 104]
[67 103]
[68 102]
[85 101]
[86 100]
[87 99]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
