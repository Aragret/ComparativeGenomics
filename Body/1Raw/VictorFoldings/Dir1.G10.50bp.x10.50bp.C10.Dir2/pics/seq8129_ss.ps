%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUCACGGGGGGGGGGCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAxxxxxxxxxxAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCCCCCCCCCCCUGCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[82.86477661 385.88159180]
[69.01883698 379.86557007]
[57.31017303 370.33615112]
[48.60765076 358.00048828]
[43.55704880 343.77395630]
[42.53315735 328.71228027]
[45.61195374 313.93310547]
[52.56497574 300.53320312]
[62.87626266 289.50686646]
[75.78063965 281.67236328]
[90.32052612 277.61105347]
[90.32052612 262.61105347]
[90.32052612 247.61103821]
[90.32052612 232.61103821]
[90.32052612 217.61103821]
[90.32052612 202.61103821]
[90.32052612 187.61103821]
[90.32052612 172.61103821]
[90.32052612 157.61103821]
[90.32052612 142.61103821]
[88.03884125 139.84310913]
[87.01944733 135.81044006]
[87.85189819 131.13502502]
[90.81777954 126.68271637]
[91.75341034 111.71192169]
[85.70394897 99.10653687]
[93.27580261 87.35244751]
[94.21142578 72.38166046]
[92.18909454 57.51861191]
[87.28754425 43.34205246]
[82.38599396 29.16549492]
[77.48444366 14.98893642]
[72.58289337 0.81237859]
[67.68134308 -13.36417961]
[62.77978897 -27.54073715]
[57.87823868 -41.71729660]
[43.27775574 -38.22548676]
[28.40532112 -36.18160248]
[13.40416527 -35.60533905]
[-1.58124018 -36.50223541]
[-16.40657234 -38.86365891]
[-30.92905235 -42.66686630]
[-45.00881577 -47.87523270]
[-58.51026154 -54.43859100]
[-71.30336761 -62.29373550]
[-83.26491547 -71.36501312]
[-94.27971649 -81.56506348]
[-104.24168396 -92.79564667]
[-113.05487823 -104.94860077]
[-120.63441467 -117.90689850]
[-126.90731049 -131.54573059]
[-131.81314087 -145.73373413]
[-135.30465698 -160.33428955]
[-137.34823608 -175.20675659]
[-137.92420959 -190.20793152]
[-137.02700806 -205.19331360]
[-134.66528320 -220.01860046]
[-130.86178589 -234.54100037]
[-125.65314484 -248.62066650]
[-119.08951569 -262.12197876]
[-111.23411560 -274.91491699]
[-102.16259766 -286.87631226]
[-91.96232605 -297.89089966]
[-80.73154449 -307.85263062]
[-68.57840729 -316.66558838]
[-55.61996460 -324.24487305]
[-41.98101044 -330.51748657]
[-27.79290199 -335.42303467]
[-13.19228172 -338.91424561]
[1.68023539 -340.95755005]
[16.68141556 -341.53320312]
[31.66678429 -340.63571167]
[46.49202347 -338.27368164]
[61.01435089 -334.46990967]
[75.09390259 -329.26098633]
[88.59509277 -322.69708252]
[101.38787842 -314.84143066]
[113.34906769 -305.76968384]
[124.36345673 -295.56918335]
[134.32498169 -284.33819580]
[143.13768005 -272.18487549]
[150.71670532 -259.22628784]
[156.98904419 -245.58720398]
[161.89431763 -231.39900208]
[165.38523865 -216.79830933]
[167.42823792 -201.92575073]
[168.00360107 -186.92456055]
[167.10580444 -171.93920898]
[164.74348450 -157.11402893]
[160.93940735 -142.59176636]
[155.73020935 -128.51231384]
[149.16603088 -115.01126862]
[141.31011963 -102.21863556]
[132.23812866 -90.25762939]
[122.03742218 -79.24343872]
[110.80623627 -69.28214264]
[98.65274811 -60.46968079]
[85.69400024 -52.89091873]
[72.05479431 -46.61884689]
[76.95634460 -32.44228745]
[81.85789490 -18.26572990]
[86.75945282 -4.08917236]
[91.66100311 10.08738613]
[96.56255341 24.26394463]
[101.46410370 38.44050217]
[106.36565399 52.61706161]
[109.59175110 37.96809006]
[116.91970062 24.87988663]
[127.72219849 14.47286701]
[141.07449341 7.63792896]
[155.83354187 4.96017933]
[170.73590088 6.66884899]
[184.50585938 12.61766529]
[195.96461487 22.29737854]
[204.13125610 34.87935257]
[208.30665588 49.28650665]
[208.13339233 64.28550720]
[203.62628174 78.59235382]
[195.17117310 90.98231506]
[183.49186707 100.39474487]
[169.58816528 106.02387238]
[154.65029907 107.38783264]
[139.95704651 104.36985016]
[126.76621246 97.22828674]
[116.20700836 86.57450104]
[109.18222046 73.31728363]
[108.24658966 88.28807831]
[114.29605103 100.89346313]
[106.72419739 112.64755249]
[105.78857422 127.61833954]
[105.32052612 142.61103821]
[105.32052612 157.61103821]
[105.32052612 172.61103821]
[105.32052612 187.61103821]
[105.32052612 202.61103821]
[105.32052612 217.61103821]
[105.32052612 232.61103821]
[105.32052612 247.61103821]
[105.32052612 262.61105347]
[105.32052612 277.61105347]
[119.86041260 281.67236328]
[132.76480103 289.50686646]
[143.07608032 300.53320312]
[150.02909851 313.93310547]
[153.10789490 328.71228027]
[152.08401489 343.77395630]
[147.03340149 358.00048828]
[138.33088684 370.33615112]
[126.62222290 379.86557007]
[112.77628326 385.88159180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[27 127]
[28 126]
[29 106]
[30 105]
[31 104]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
