%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUAAGCCGGGGGGGGGGUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACxxxxxxxxxxAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUCCCCCCCCCCGCUCUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.05914307]
[71.19830322 352.04312134]
[59.48964310 342.51370239]
[50.78712082 330.17803955]
[45.73651886 315.95150757]
[44.71262741 300.88983154]
[47.79142761 286.11068726]
[54.74444962 272.71075439]
[65.05573273 261.68441772]
[77.96011353 253.84989929]
[92.50000000 249.78858948]
[92.50000000 234.78858948]
[92.50000000 219.78858948]
[92.50000000 204.78858948]
[92.50000000 189.78858948]
[92.50000000 174.78858948]
[92.50000000 159.78858948]
[92.50000000 144.78858948]
[92.50000000 129.78858948]
[92.50000000 114.78858948]
[88.43835449 129.22822571]
[76.38766479 138.16023254]
[61.39094162 137.84672546]
[49.72407150 128.41888428]
[46.26945496 113.82211304]
[52.47278976 100.16493225]
[65.73807526 93.16264343]
[80.51512909 95.74620056]
[66.99093628 89.25803375]
[53.46674728 82.76986694]
[33.75624084 95.13372803]
[7.13129044 82.53224182]
[-7.63476515 79.89337158]
[-22.40081978 77.25450897]
[-35.27692795 86.02056122]
[-50.21421432 83.13402557]
[-58.49195480 70.80461121]
[-73.25801086 68.16574097]
[-88.02406311 65.52687836]
[-102.79012299 62.88801575]
[-119.44591522 66.05356598]
[-127.09854126 50.92499542]
[-114.67965698 39.38343430]
[-100.15125275 48.12195969]
[-85.38520050 50.76082230]
[-70.61914825 53.39968872]
[-55.85308838 56.03855133]
[-43.81729889 47.33939362]
[-28.80482864 49.80522919]
[-19.76195717 62.48845291]
[-4.99590063 65.12731934]
[9.77015495 67.76618195]
[13.56510925 61.29715347]
[24.94997215 41.89007187]
[15.44161320 30.28872871]
[5.93325424 18.68738747]
[-3.57510424 7.08604670]
[-18.29175758 -1.33158076]
[-14.27706909 -17.80333328]
[2.66233706 -18.50537491]
[8.02623749 -2.42231154]
[17.53459549 9.17902946]
[27.04295349 20.78037071]
[36.55131149 32.38171387]
[53.70276642 40.81612778]
[61.67243576 55.32514572]
[59.95491028 69.24567413]
[73.47910309 75.73384094]
[87.00328827 82.22200775]
[76.83749390 71.19220734]
[72.14234161 56.94595718]
[73.75824738 42.03324890]
[81.39596558 29.12335587]
[93.68839264 20.52706718]
[108.43527222 17.78305817]
[122.99700165 21.38249016]
[134.76713562 30.68108940]
[141.63890076 44.01446533]
[142.38227844 58.99603271]
[136.86422729 72.94419098]
[126.07243347 83.36231232]
[111.93553162 88.38600922]
[126.25813293 83.92919159]
[140.58073425 79.47237396]
[154.90332031 75.01555634]
[162.22441101 69.44298553]
[169.57043457 70.61835480]
[161.44740295 52.91329575]
[169.83679199 29.06830978]
[180.92811584 18.96966171]
[177.57316589 3.98166752]
[182.17701721 -10.67098331]
[193.50123596 -21.04680061]
[208.49967957 -24.35474396]
[223.13781738 -19.70499229]
[233.47808838 -8.34830379]
[236.73901367 6.66042757]
[232.04339600 21.28392792]
[220.65435791 31.58855057]
[205.63546753 34.80240250]
[191.02676392 30.06097603]
[179.93544006 40.15962601]
[182.38621521 47.24790573]
[187.28776550 61.42446518]
[189.73855591 68.51274109]
[204.69879150 69.60404968]
[219.65904236 70.69536591]
[234.61929321 71.78667450]
[238.58299255 69.67702484]
[242.60426331 69.04423523]
[246.19975281 69.71829224]
[248.99470520 71.38629150]
[250.76098633 73.64185333]
[265.57873535 75.97296143]
[279.34219360 67.72998047]
[294.31710815 73.48600006]
[299.01599121 88.82549286]
[289.83428955 101.98130798]
[273.81539917 102.86144257]
[263.24765015 90.79071808]
[248.42988586 88.45960999]
[233.52798462 86.74692535]
[218.56773376 85.65560913]
[203.60748291 84.56430054]
[188.64723206 83.47299194]
[173.72833252 85.03057098]
[159.36013794 89.33815765]
[145.03755188 93.79497528]
[130.71495056 98.25178528]
[116.39234924 102.70860291]
[107.50000000 114.78858948]
[107.50000000 129.78858948]
[107.50000000 144.78858948]
[107.50000000 159.78858948]
[107.50000000 174.78858948]
[107.50000000 189.78858948]
[107.50000000 204.78858948]
[107.50000000 219.78858948]
[107.50000000 234.78858948]
[107.50000000 249.78858948]
[122.03988647 253.84989929]
[134.94427490 261.68441772]
[145.25555420 272.71075439]
[152.20857239 286.11068726]
[155.28736877 300.88983154]
[154.26348877 315.95150757]
[149.21287537 330.17803955]
[140.51036072 342.51370239]
[128.80169678 352.04312134]
[114.95575714 358.05914307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 69]
[29 68]
[30 67]
[32 52]
[33 51]
[34 50]
[37 47]
[38 46]
[39 45]
[40 44]
[54 64]
[55 63]
[56 62]
[57 61]
[82 130]
[83 129]
[84 128]
[85 127]
[87 126]
[89 102]
[90 101]
[105 125]
[106 124]
[107 123]
[108 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
