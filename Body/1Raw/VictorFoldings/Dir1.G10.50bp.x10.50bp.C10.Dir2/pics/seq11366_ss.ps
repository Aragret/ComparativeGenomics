%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAAUCCUAGGGGGGGGGGCCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACxxxxxxxxxxAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACCCCCCCCCCCAACAAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 375.77587891]
[71.01555634 370.22286987]
[58.81560135 361.35653687]
[49.20452881 349.73422241]
[42.78650284 336.08651733]
[39.96496582 321.27133179]
[40.91728210 306.21997070]
[45.58358765 291.87854004]
[53.67055511 279.14859009]
[64.66983032 268.83032227]
[77.88998413 261.57232666]
[92.50000000 257.83090210]
[92.50000000 242.83090210]
[92.50000000 227.83090210]
[92.50000000 212.83090210]
[92.50000000 197.83090210]
[92.50000000 182.83090210]
[92.50000000 167.83090210]
[92.50000000 152.83090210]
[92.50000000 137.83090210]
[92.50000000 122.83090210]
[79.83607483 113.07349396]
[76.09602356 97.53020477]
[82.93505859 83.07995605]
[76.11148071 69.72185516]
[69.28791046 56.36375809]
[62.46433258 43.00566101]
[48.58683395 48.72123718]
[34.28963852 53.28664780]
[19.66788673 56.67150116]
[4.81889200 58.85327530]
[-10.15853024 59.81744766]
[-25.16470528 59.55760574]
[-40.09976578 58.07547760]
[-54.86432648 55.38092422]
[-69.36012268 51.49188232]
[-83.49069214 46.43422699]
[-97.16198730 40.24162292]
[-110.28304291 32.95527649]
[-122.76652527 24.62368011]
[-134.52935791 15.30228043]
[-145.49327087 5.05311060]
[-155.58528137 -6.05562305]
[-164.73825073 -17.94999123]
[-172.89125061 -30.55084038]
[-179.99003601 -43.77430725]
[-185.98735046 -57.53239822]
[-190.84329224 -71.73355103]
[-194.52552795 -86.28324890]
[-197.00958252 -101.08467865]
[-198.27890015 -116.03932953]
[-198.32505798 -131.04768372]
[-197.14772034 -146.00985718]
[-194.75473022 -160.82627869]
[-191.16203308 -175.39836121]
[-186.39350891 -189.62910461]
[-180.48091125 -203.42381287]
[-173.46357727 -216.69067383]
[-165.38821411 -229.34141541]
[-156.30856323 -241.29185486]
[-146.28504944 -252.46243286]
[-135.38436890 -262.77883911]
[-123.67908478 -272.17239380]
[-111.24707031 -280.58059692]
[-98.17107391 -287.94747925]
[-84.53811646 -294.22402954]
[-70.43891144 -299.36849976]
[-55.96730804 -303.34661865]
[-41.21959686 -306.13189697]
[-26.29393005 -307.70584106]
[-11.28963757 -308.05795288]
[3.69342995 -307.18591309]
[18.55556107 -305.09548950]
[33.19784927 -301.80059814]
[47.52285004 -297.32321167]
[61.43523407 -291.69308472]
[74.84241486 -284.94766235]
[87.65515900 -277.13189697]
[99.78821564 -268.29779053]
[111.16082764 -258.50408936]
[121.69731903 -247.81599426]
[131.32756042 -236.30464172]
[139.98747253 -224.04663086]
[147.61941528 -211.12355042]
[154.17260742 -197.62138367]
[159.60343933 -183.62998962]
[163.87574768 -169.24249268]
[166.96113586 -154.55464172]
[168.83903503 -139.66415405]
[169.49697876 -124.67016602]
[168.93057251 -109.67243195]
[167.14358521 -94.77077484]
[164.14790344 -80.06435394]
[159.96348572 -65.65104675]
[154.61814880 -51.62677383]
[148.14749146 -38.08486176]
[140.59455872 -25.11543465]
[132.00962830 -12.80479813]
[122.44982910 -1.23488307]
[111.97877502 9.51731586]
[100.66614532 19.38024139]
[88.58724213 28.28825951]
[75.82243347 36.18208313]
[82.64600372 49.54018402]
[89.46958160 62.89828491]
[96.29315948 76.25638580]
[114.08525085 80.52936554]
[123.71114349 96.09082794]
[138.53363037 98.39170074]
[153.35610962 100.69258118]
[168.17858887 102.99345398]
[183.00106812 105.29432678]
[191.61201477 92.69216156]
[204.84234619 85.08159637]
[220.06521606 83.97370148]
[234.25807190 89.58846283]
[244.60292053 100.81105804]
[249.04580688 115.41323090]
[246.70457458 130.49571228]
[238.04408264 143.06387329]
[224.78385925 150.62228394]
[209.55676270 151.67022705]
[195.38612366 145.99961853]
[185.08554077 134.73637390]
[180.70019531 120.11681366]
[165.87771606 117.81593323]
[151.05523682 115.51506042]
[136.23275757 113.21418762]
[121.41027069 110.91330719]
[117.87434387 116.06262207]
[113.13075256 120.12667847]
[107.50000000 122.83090210]
[107.50000000 137.83090210]
[107.50000000 152.83090210]
[107.50000000 167.83090210]
[107.50000000 182.83090210]
[107.50000000 197.83090210]
[107.50000000 212.83090210]
[107.50000000 227.83090210]
[107.50000000 242.83090210]
[107.50000000 257.83090210]
[122.11001587 261.57232666]
[135.33016968 268.83032227]
[146.32945251 279.14859009]
[154.41641235 291.87854004]
[159.08271790 306.21997070]
[160.03503418 321.27133179]
[157.21350098 336.08651733]
[150.79547119 349.73422241]
[141.18440247 361.35653687]
[128.98443604 370.22286987]
[114.96250153 375.77587891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 106]
[25 105]
[26 104]
[27 103]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
