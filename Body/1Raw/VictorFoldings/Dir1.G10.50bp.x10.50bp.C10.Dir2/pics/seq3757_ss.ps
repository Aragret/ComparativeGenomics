%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCAAACGGGGGGGGGGUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAxxxxxxxxxxGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUCCCCCCCCCCAAACUCAGAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.47433472]
[71.19830322 367.45828247]
[59.48964310 357.92886353]
[50.78712082 345.59320068]
[45.73651886 331.36669922]
[44.71262741 316.30499268]
[47.79142761 301.52584839]
[54.74444962 288.12591553]
[65.05573273 277.09957886]
[77.96011353 269.26507568]
[92.50000000 265.20376587]
[92.50000000 250.20376587]
[92.50000000 235.20376587]
[92.50000000 220.20376587]
[92.50000000 205.20376587]
[92.50000000 190.20376587]
[92.50000000 175.20376587]
[92.50000000 160.20376587]
[92.50000000 145.20376587]
[92.50000000 130.20376587]
[80.43165588 125.70659637]
[70.81656647 116.43537903]
[65.51406860 103.65705872]
[65.75350189 89.34618378]
[50.75431061 89.19014740]
[34.96626663 98.60915375]
[20.20405006 89.17109680]
[5.20486164 89.32713318]
[-9.79432678 89.48316956]
[-23.51326561 97.36360931]
[-36.32033539 89.75911713]
[-51.31952286 89.91515350]
[-66.31871033 90.07118988]
[-75.19823456 102.79650879]
[-89.87265015 107.84042358]
[-104.69934845 103.26345825]
[-113.97716522 90.82553101]
[-114.13858032 75.30929565]
[-105.12152863 62.68105698]
[-90.39325714 57.79662704]
[-75.61708832 62.53416824]
[-66.47474670 75.07200623]
[-51.47555923 74.91596985]
[-36.47637177 74.75993347]
[-23.83027649 66.89065552]
[-9.95036316 74.48397827]
[5.04882526 74.32794189]
[20.04801369 74.17190552]
[28.77028275 65.73216248]
[41.30714035 65.51731110]
[50.91034698 74.19096375]
[65.90953827 74.34700012]
[76.89520264 64.13352203]
[77.83082581 49.16272736]
[78.76645660 34.19193649]
[78.61042023 19.19274712]
[77.36354828 4.24466038]
[76.11666870 -10.70342636]
[74.86979675 -25.65151405]
[73.62292480 -40.59960175]
[72.37604523 -55.54768753]
[70.97374725 -70.48199463]
[69.41616058 -85.40090942]
[54.58415985 -88.31691742]
[41.27140045 -95.47665405]
[30.66164589 -106.24348450]
[23.69830704 -119.66001129]
[21.00055885 -134.53326416]
[22.80828476 -149.54071045]
[28.96074104 -163.34791565]
[38.91085815 -174.72712708]
[51.77387619 -182.66653442]
[66.40602875 -186.46015930]
[81.50622559 -185.77067566]
[95.73177338 -180.65940857]
[107.81774902 -171.58082581]
[116.68947601 -159.34219360]
[121.55807495 -145.03178406]
[121.99064636 -129.92204285]
[117.94872284 -115.35652161]
[109.79170227 -102.63039398]
[98.24491119 -92.87523651]
[84.33507538 -86.95848846]
[85.89265442 -72.03957367]
[89.74020386 -65.67230988]
[87.32413483 -56.79456329]
[88.57100677 -41.84647369]
[89.81788635 -26.89838791]
[91.06475830 -11.95030117]
[92.31163025 2.99778557]
[93.55850983 17.94587326]
[103.54560852 6.75400591]
[118.36400604 4.42699671]
[131.30082703 12.01900291]
[136.49557495 26.09077263]
[131.59495544 40.26765442]
[118.81901550 48.12738419]
[103.95537567 46.10942459]
[93.73725128 35.12756348]
[92.80162048 50.09835434]
[91.86598969 65.06914520]
[106.33379364 65.90400696]
[118.80437469 72.28375244]
[127.33419037 82.77818298]
[130.77264404 95.35650635]
[145.70693970 96.75880432]
[160.64125061 98.16110992]
[175.57556152 99.56341553]
[190.50987244 100.96571350]
[205.44418335 102.36801910]
[220.37847900 103.77032471]
[230.53138733 92.03583527]
[245.65023804 88.54296112]
[259.92150879 94.63477325]
[267.85763550 107.96884918]
[266.40698242 123.41796875]
[256.12738037 135.04162598]
[240.97154236 138.37028503]
[226.76718140 132.12402344]
[218.97618103 118.70463562]
[204.04187012 117.30233002]
[189.10755920 115.90002441]
[174.17326355 114.49771881]
[159.23895264 113.09542084]
[144.30464172 111.69311523]
[129.37033081 110.29080963]
[126.77095795 115.86924744]
[123.12465668 120.82708740]
[118.57402039 124.97044373]
[113.29701233 128.13728333]
[107.50000000 130.20376587]
[107.50000000 145.20376587]
[107.50000000 160.20376587]
[107.50000000 175.20376587]
[107.50000000 190.20376587]
[107.50000000 205.20376587]
[107.50000000 220.20376587]
[107.50000000 235.20376587]
[107.50000000 250.20376587]
[107.50000000 265.20376587]
[122.03988647 269.26507568]
[134.94427490 277.09957886]
[145.25555420 288.12591553]
[152.20857239 301.52584839]
[155.28736877 316.30499268]
[154.26348877 331.36669922]
[149.21287537 345.59320068]
[140.51036072 357.92886353]
[128.80169678 367.45828247]
[114.95575714 373.47433472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 52]
[25 51]
[27 48]
[28 47]
[29 46]
[31 44]
[32 43]
[33 42]
[53 101]
[54 100]
[55 99]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 84]
[63 83]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
