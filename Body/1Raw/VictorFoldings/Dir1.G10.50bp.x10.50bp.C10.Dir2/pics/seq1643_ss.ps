%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAACUACGGGGGGGGGGGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAxxxxxxxxxxGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUCCCCCCCCCCAGAAAACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.77741241 420.86859131]
[71.28771973 416.66012573]
[58.38148880 408.84399414]
[47.93868637 397.95315552]
[40.67132568 384.73016357]
[37.07489777 370.07656860]
[37.39461899 354.99145508]
[41.60868835 340.50338745]
[49.42978668 327.60018921]
[60.32465363 317.16159058]
[73.55046082 309.89932251]
[88.20545959 306.30856323]
[88.51750946 291.31179810]
[88.82956696 276.31506348]
[89.14162445 261.31829834]
[89.45368195 246.32154846]
[89.76573944 231.32479858]
[90.07779694 216.32804871]
[90.38984680 201.33128357]
[90.70190430 186.33453369]
[91.01396179 171.33778381]
[91.32601929 156.34103394]
[91.63807678 141.34426880]
[71.60165405 131.18981934]
[59.61852264 112.19045258]
[44.71662140 113.90314484]
[29.81471825 115.61582947]
[14.91281605 117.32852173]
[0.01091407 119.04121399]
[-14.89098835 120.75389862]
[-29.79289055 122.46659088]
[-38.25948334 135.61386108]
[-53.21139908 140.19363403]
[-67.58879852 134.04347229]
[-74.60311127 120.06729889]
[-70.94239044 104.86423492]
[-58.33512878 95.61270142]
[-42.73407745 96.68099213]
[-31.50558090 107.56468964]
[-16.60367775 105.85199738]
[-1.70177567 104.13931274]
[13.20012665 102.42662048]
[28.10202980 100.71392822]
[43.00393295 99.00124359]
[57.90583420 97.28855133]
[61.29656219 83.22756195]
[69.23808289 71.13869476]
[80.79661560 62.44336700]
[94.61310577 58.16398621]
[109.06298828 58.80372620]
[114.83925629 44.96050644]
[120.61553192 31.11729050]
[126.39180756 17.27407265]
[111.66267395 20.11179161]
[100.12319946 10.52844620]
[100.20780182 -4.47131491]
[111.85464478 -13.92388058]
[126.55083466 -10.92018890]
[133.55461121 2.34364581]
[140.73710632 -10.82493687]
[147.91961670 -23.99351883]
[125.48184967 -56.34850693]
[125.16979218 -71.34526062]
[124.85773468 -86.34201813]
[124.54568481 -101.33876801]
[124.23362732 -116.33552551]
[109.80647278 -120.93290710]
[97.65527344 -129.96768188]
[89.09810638 -142.45982361]
[85.06318665 -157.05427551]
[85.98818970 -172.16795349]
[91.77278137 -186.16142273]
[101.78949738 -197.51678467]
[114.95178223 -205.00228882]
[129.83190918 -207.80596924]
[144.81578064 -205.62370300]
[158.27806091 -198.69221497]
[168.75846863 -187.76335144]
[175.12016296 -174.02262878]
[176.67306519 -158.96052551]
[173.24874878 -144.21084595]
[165.21864319 -131.37355042]
[153.45379639 -121.84112549]
[139.23037720 -116.64757538]
[139.54243469 -101.65082550]
[139.85449219 -86.65406799]
[140.16654968 -71.65731812]
[140.47860718 -56.66056442]
[146.82606506 -52.66560745]
[154.81619263 -65.36040497]
[167.51086426 -57.37006378]
[159.52099609 -44.67568970]
[165.86846924 -40.68073273]
[179.52470398 -46.88613892]
[193.18093872 -53.09154510]
[206.83718872 -59.29695129]
[220.49342346 -65.50235748]
[221.29884338 -80.78665924]
[229.12493896 -93.94001770]
[242.17333984 -101.93988037]
[257.44561768 -102.94793701]
[271.43231201 -96.73255157]
[280.91937256 -84.72196960]
[283.72677612 -69.67613983]
[279.20935059 -55.05247116]
[268.40521240 -44.21138763]
[253.79705811 -39.64408875]
[238.74172974 -42.40010071]
[226.69883728 -51.84611893]
[213.04258728 -45.64071274]
[199.38635254 -39.43530273]
[185.73011780 -33.22989655]
[172.07386780 -27.02449036]
[161.08821106 -16.81101036]
[153.90570068 -3.64242792]
[146.72319031 9.52615452]
[140.23501587 23.05034447]
[134.45875549 36.89356232]
[128.68247986 50.73677826]
[122.90620422 64.57999420]
[131.46032715 71.90161896]
[137.77278137 81.22534943]
[141.39381409 91.88684082]
[142.06538391 103.12641907]
[139.73965454 114.14322662]
[134.58233643 124.15228271]
[126.96091461 132.44039917]
[117.41843414 138.41703796]
[106.63482666 141.65632629]
[106.32276917 156.65309143]
[106.01071930 171.64984131]
[105.69866180 186.64659119]
[105.38660431 201.64334106]
[105.07454681 216.64009094]
[104.76248932 231.63685608]
[104.45043182 246.63360596]
[104.13838196 261.63037109]
[103.82632446 276.62710571]
[103.51426697 291.62387085]
[103.20220947 306.62060547]
[117.69514465 310.81790161]
[130.60740662 318.62405396]
[141.05860901 329.50683594]
[148.33618164 342.72421265]
[151.94392395 357.37503052]
[151.63586426 372.46035767]
[147.43298340 386.95169067]
[139.62184143 399.86093140]
[128.73504639 410.30795288]
[115.51484680 417.58041382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[50 120]
[51 119]
[52 118]
[53 117]
[59 116]
[60 115]
[61 114]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
