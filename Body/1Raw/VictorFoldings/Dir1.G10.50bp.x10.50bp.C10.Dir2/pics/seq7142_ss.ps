%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUCCAUUUCAGGGGGGGGGGCUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCxxxxxxxxxxGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGCCCCCCCCCCAAAAACCAUUUCA\
) } def
/len { sequence length } bind def

/coor [
[98.20762634 514.52581787]
[83.93585968 509.71640015]
[71.03187561 501.95101929]
[60.09922028 491.59286499]
[51.64923096 479.12643433]
[46.07713699 465.13479614]
[43.64354706 450.27236938]
[44.46228790 435.23431396]
[48.49506378 420.72393799]
[55.55325699 407.41995239]
[65.30673981 395.94461060]
[77.29933167 386.83462524]
[90.97010803 380.51608276]
[105.67966461 377.28451538]
[105.67966461 362.28451538]
[105.67966461 347.28451538]
[105.67966461 332.28451538]
[105.67966461 317.28451538]
[105.67966461 302.28451538]
[105.67966461 287.28451538]
[105.67966461 272.28451538]
[105.67966461 257.28451538]
[105.67966461 242.28451538]
[105.67966461 227.28451538]
[105.67966461 212.28451538]
[105.67966461 197.28451538]
[102.95560455 193.29975891]
[102.74411774 187.55000305]
[105.99180603 181.68737793]
[106.59194946 166.69938660]
[107.19209290 151.71139526]
[107.79223633 136.72340393]
[91.71467590 135.79449463]
[77.85036469 128.30426025]
[68.67346191 115.92203522]
[65.67898560 101.15652466]
[69.14482117 86.85031128]
[78.13283539 75.63300323]
[70.93811035 62.47108841]
[63.74339294 49.30917358]
[49.80671692 54.90429688]
[35.30609512 58.81177521]
[20.44509888 60.97675705]
[5.43235064 61.36883926]
[-9.52139473 59.98252869]
[-24.20620918 56.83728027]
[-38.41593933 51.97725296]
[-51.95110703 45.47066879]
[-64.62169647 37.40887451]
[-76.24983215 27.90504456]
[-86.67227173 17.09259415]
[-95.74270630 5.12331772]
[-103.33380127 -7.83475733]
[-109.33898163 -21.59971809]
[-113.67394257 -35.97832870]
[-116.27783966 -50.76873398]
[-117.11411285 -65.76329803]
[-116.17102051 -80.75152588]
[-113.46179962 -95.52300262]
[-109.02449036 -109.87036133]
[-102.92138672 -123.59217834]
[-95.23815155 -136.49583435]
[-86.08266449 -148.40017700]
[-75.58344269 -159.13809204]
[-63.88788223 -168.55882263]
[-51.16017151 -176.53013611]
[-37.57898712 -182.94010925]
[-23.33498573 -187.69876099]
[-8.62813282 -190.73928833]
[6.33511066 -192.01901245]
[21.34468460 -191.51997375]
[36.18987656 -189.24916077]
[50.66228485 -185.23844910]
[64.55873871 -179.54417419]
[77.68415833 -172.24623108]
[89.85427856 -163.44711304]
[100.89824677 -153.27032471]
[110.66102600 -141.85871887]
[119.00556183 -129.37252808]
[125.81471252 -115.98702240]
[130.99288940 -101.89011383]
[134.46739197 -87.27970123]
[136.18945312 -72.36088562]
[136.13488770 -57.34312057]
[134.30445862 -42.43721771]
[130.72387695 -27.85243797]
[125.44340515 -13.79352760]
[118.53717041 -0.45785266]
[110.10211945 11.96737480]
[100.25666809 23.30772591]
[89.13904572 33.40399551]
[76.90530396 42.11445236]
[84.10002899 55.27636719]
[91.29474640 68.43827820]
[97.40425873 67.36281586]
[103.60695648 67.45905304]
[109.68016052 68.72352600]
[115.40584564 71.11083984]
[120.57844543 74.53530121]
[125.01226807 78.87395477]
[138.38417053 72.07747650]
[151.75607300 65.28099060]
[165.12799072 58.48450851]
[178.49989319 51.68802643]
[189.88026428 39.12126160]
[205.10630798 46.57805634]
[202.15591431 63.27331161]
[185.29637146 65.05992889]
[171.92446899 71.85641479]
[158.55256653 78.65289307]
[145.18066406 85.44937897]
[131.80874634 92.24585724]
[135.09666443 101.75703430]
[135.40255737 112.48942566]
[150.34179688 113.83828735]
[165.28102112 115.18714905]
[180.22024536 116.53601074]
[195.15948486 117.88487244]
[211.47814941 113.28734589]
[220.41346741 127.69555664]
[209.04187012 140.27026367]
[193.81062317 132.82409668]
[178.87138367 131.47523499]
[163.93215942 130.12637329]
[148.99293518 128.77751160]
[134.05369568 127.42865753]
[122.78022766 137.32354736]
[122.18008423 152.31153870]
[121.57994080 167.29953003]
[120.97979736 182.28752136]
[120.67966461 197.28451538]
[120.67966461 212.28451538]
[120.67966461 227.28451538]
[120.67966461 242.28451538]
[120.67966461 257.28451538]
[120.67966461 272.28451538]
[120.67966461 287.28451538]
[120.67966461 302.28451538]
[120.67966461 317.28451538]
[120.67966461 332.28451538]
[120.67966461 347.28451538]
[120.67966461 362.28451538]
[120.67966461 377.28451538]
[135.38922119 380.51608276]
[149.05999756 386.83462524]
[161.05258179 395.94461060]
[170.80607605 407.41995239]
[177.86425781 420.72393799]
[181.89704895 435.23431396]
[182.71578979 450.27236938]
[180.28219604 465.13479614]
[174.71009827 479.12643433]
[166.26011658 491.59286499]
[155.32745361 501.95101929]
[142.42347717 509.71640015]
[128.15170288 514.52581787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[29 130]
[30 129]
[31 128]
[32 127]
[38 94]
[39 93]
[40 92]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
