%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGCUCUGAGGGGGGGGGGGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUxxxxxxxxxxGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCCCCCCCCCCCAAUGCUCUGA\
) } def
/len { sequence length } bind def

/coor [
[-6.77344418 534.55242920]
[-20.79538727 528.99945068]
[-32.99534607 520.13311768]
[-42.60641861 508.51080322]
[-49.02444077 494.86309814]
[-51.84597778 480.04791260]
[-50.89366150 464.99652100]
[-46.22735977 450.65512085]
[-38.14039230 437.92514038]
[-27.14111710 427.60687256]
[-13.92095757 420.34890747]
[0.68905479 416.60748291]
[0.68905479 401.60748291]
[0.68905479 386.60748291]
[0.68905479 371.60748291]
[0.68905479 356.60748291]
[0.68905479 341.60748291]
[0.68905479 326.60748291]
[0.68905479 311.60748291]
[0.68905479 296.60748291]
[0.68905479 281.60748291]
[-7.04775906 294.45822144]
[-17.58730888 305.13143921]
[-30.33952713 313.02960205]
[-44.59046173 317.71051025]
[-59.54225922 318.91207886]
[-74.35781860 316.56704712]
[-88.20767975 310.80673218]
[-100.31643677 301.95358276]
[-110.00615692 290.50329590]
[-116.73435974 277.09689331]
[-120.12435150 262.48498535]
[-119.98635101 247.48562622]
[-116.32806396 232.93856812]
[-109.35432434 219.65824890]
[-99.45555115 208.38818359]
[-87.18595123 199.75933838]
[-73.23244476 194.25482178]
[-58.37624359 192.18281555]
[-43.44908905 193.65930176]
[-29.28669357 198.60162354]
[-16.68196297 206.73309326]
[-6.34058428 217.59843445]
[1.15846419 230.58937073]
[5.39533949 244.97856140]
[6.13257742 259.96411133]
[13.22898102 246.74893188]
[20.32538414 233.53375244]
[27.42178726 220.31855774]
[34.51819229 207.10337830]
[41.61459351 193.88819885]
[48.71099854 180.67301941]
[43.16822815 164.82432556]
[50.92897797 149.55664062]
[67.64438629 144.49874878]
[66.54370880 129.64486694]
[79.71185303 120.87500000]
[86.53543091 107.51689911]
[83.38955688 77.69049835]
[85.84248352 62.89241791]
[88.29541779 48.09434128]
[80.32138062 29.62429428]
[93.09708405 15.15782166]
[94.94040680 0.27151394]
[96.78372955 -14.61479378]
[89.46733856 -25.28597069]
[91.34835052 -37.68085480]
[100.87155914 -45.20220184]
[103.02014160 -60.04752731]
[105.16871643 -74.89284515]
[91.50472260 -81.35710144]
[80.35427094 -91.56293488]
[72.70886230 -104.60283661]
[69.24832153 -119.31732178]
[70.28034973 -134.39797974]
[75.71318817 -148.50386047]
[85.06374359 -160.38066101]
[97.50057983 -168.97232056]
[111.91781616 -173.51486206]
[127.03348541 -173.60437012]
[141.50350952 -169.23289490]
[154.04122925 -160.78913879]
[163.53178406 -149.02389526]
[169.13130188 -134.98335266]
[170.34185791 -119.91597748]
[167.05581665 -105.16153717]
[159.56538391 -92.03200531]
[148.53659058 -81.69483185]
[134.95010376 -75.06920624]
[120.01403809 -72.74427032]
[117.86546326 -57.89894485]
[115.71688080 -43.05362320]
[123.10801697 -27.16602898]
[111.67003632 -12.77146912]
[109.82671356 2.11483836]
[107.98339081 17.00114632]
[115.00925446 24.52407265]
[116.73788452 34.89489365]
[112.35217285 44.69232559]
[103.09349060 50.54726791]
[100.64056396 65.34534454]
[98.18763733 80.14342499]
[108.95631409 90.58543396]
[123.67183685 87.67796326]
[138.38735962 84.77049255]
[143.95846558 70.38416290]
[156.43646240 61.31206131]
[171.83967590 60.44905090]
[185.25297546 68.07051849]
[192.39625549 81.74447632]
[190.99009705 97.10762787]
[181.48320007 109.25762939]
[166.90919495 114.31747437]
[151.91859436 110.67257690]
[141.29483032 99.48601532]
[126.57930756 102.39348602]
[111.86378479 105.30095673]
[99.89353180 114.34047699]
[93.06995392 127.69857788]
[93.68256378 143.50791931]
[81.00248718 151.32232666]
[86.60781097 163.61012268]
[84.12907410 176.68823242]
[74.69647217 185.80166626]
[61.92618179 187.76942444]
[54.82977676 200.98460388]
[47.73337555 214.19978333]
[40.63697052 227.41496277]
[33.54056549 240.63014221]
[26.44416428 253.84533691]
[19.34776115 267.06051636]
[15.68905449 281.60748291]
[15.68905449 296.60748291]
[15.68905449 311.60748291]
[15.68905449 326.60748291]
[15.68905449 341.60748291]
[15.68905449 356.60748291]
[15.68905449 371.60748291]
[15.68905449 386.60748291]
[15.68905449 401.60748291]
[15.68905449 416.60748291]
[30.29906845 420.34890747]
[43.51922607 427.60687256]
[54.51850128 437.92514038]
[62.60546875 450.65512085]
[67.27177429 464.99652100]
[68.22409058 480.04791260]
[65.40254974 494.86309814]
[58.98452759 508.51080322]
[49.37345505 520.13311768]
[37.17349625 528.99945068]
[23.15155411 534.55242920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[46 131]
[47 130]
[48 129]
[49 128]
[50 127]
[51 126]
[52 125]
[55 121]
[57 119]
[58 118]
[59 102]
[60 101]
[61 100]
[63 96]
[64 95]
[65 94]
[68 92]
[69 91]
[70 90]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
