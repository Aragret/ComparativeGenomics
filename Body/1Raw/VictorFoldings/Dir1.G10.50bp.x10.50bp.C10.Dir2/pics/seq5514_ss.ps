%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGAGGCCUGGGGGGGGGGGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACxxxxxxxxxxAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGCCCCCCCCCCUAGGUGGCCUG\
) } def
/len { sequence length } bind def

/coor [
[81.12020111 346.51214600]
[68.56652069 338.15414429]
[58.48640060 326.93621826]
[51.51348114 313.56350708]
[48.08608246 298.87664795]
[48.41966248 283.79888916]
[52.49324417 269.27798462]
[60.05076599 256.22674561]
[70.61714935 245.46559143]
[83.52818298 237.67097473]
[97.97227478 233.33288574]
[97.35645294 218.34552002]
[96.74062347 203.35816956]
[96.12480164 188.37081909]
[95.50897217 173.38346863]
[94.89315033 158.39611816]
[94.27732086 143.40875244]
[93.66149902 128.42140198]
[93.04566956 113.43405151]
[81.96054077 103.32862091]
[66.98030090 104.09827423]
[52.00005722 104.86793518]
[37.01981354 105.63759613]
[22.03957367 106.40725708]
[7.32405138 109.31472778]
[-6.82326508 114.30004883]
[-20.97058105 119.28537750]
[-29.16854668 133.07569885]
[-45.08061600 135.12156677]
[-56.50041199 123.85356903]
[-54.66764832 107.91554260]
[-40.98825836 99.53378296]
[-25.95590401 105.13805389]
[-11.80858707 100.15273285]
[2.33872938 95.16741180]
[1.80019450 87.68677521]
[0.72312474 72.72549438]
[0.18458983 65.24485016]
[-14.53093243 62.33737946]
[-29.24645615 59.42990875]
[-43.32105255 67.12960052]
[-58.05997086 60.79369354]
[-62.15678024 45.28254318]
[-52.46875381 32.49498367]
[-36.42771912 32.24053192]
[-26.33898354 44.71438599]
[-11.62346077 47.62185669]
[3.09206223 50.52933121]
[22.42320633 70.48294067]
[21.26991463 91.42701721]
[36.25015640 90.65735626]
[51.23039627 89.88769531]
[66.21063995 89.11803436]
[81.19087982 88.34837341]
[73.62720490 75.39496613]
[78.20188904 61.10957718]
[91.88315582 54.95953751]
[105.60404968 61.02065277]
[110.27134705 75.27604675]
[102.79074097 88.27912903]
[113.34275818 77.61821747]
[122.86609650 66.02916718]
[131.27951050 53.61085510]
[139.69291687 41.19254303]
[148.10632324 28.77422714]
[134.40353394 34.87616348]
[119.47013855 36.28808975]
[104.86653900 32.86247253]
[92.11869049 24.95726013]
[82.55863953 13.39847851]
[77.18532562 -0.60607558]
[76.56022644 -15.59304428]
[80.74864197 -29.99641800]
[89.31293488 -42.31116104]
[101.35819244 -51.25049210]
[115.62580109 -55.88032532]
[130.62490845 -55.71688080]
[144.78823853 -50.77723694]
[156.63584900 -41.57754517]
[164.92974854 -29.07909584]
[168.80329895 -14.58787155]
[167.85176086 0.38191640]
[162.17480469 14.26562595]
[174.32814026 5.47378397]
[186.48147583 -3.31805873]
[198.54389954 -12.23421001]
[210.51416016 -21.27372932]
[222.48442078 -30.31324959]
[234.07347107 -39.83658600]
[245.26176453 -49.82768250]
[256.45007324 -59.81877899]
[260.80218506 -67.92155457]
[267.97216797 -69.89726257]
[279.36325073 -79.65653992]
[290.75430298 -89.41580963]
[295.69134521 -105.05415344]
[311.75936890 -108.33304596]
[322.42895508 -95.87945557]
[316.72415161 -80.50456238]
[300.51358032 -78.02474213]
[289.12249756 -68.26546478]
[277.73144531 -58.50619125]
[266.44116211 -48.63048553]
[255.25286865 -38.63938522]
[244.06455994 -28.64829063]
[243.80145264 -25.79841232]
[242.35827637 -22.88525772]
[239.70661926 -20.37221146]
[235.99101257 -18.72360229]
[231.52394104 -18.34299088]
[219.55368042 -9.30347061]
[207.58341980 -0.26395133]
[204.11955261 6.31737137]
[195.27331543 8.83527470]
[183.11997986 17.62711716]
[170.96664429 26.41895866]
[160.52464294 37.18763733]
[152.11122131 49.60595322]
[143.69781494 62.02426529]
[135.28440857 74.44258118]
[149.74961853 70.47297668]
[164.10765076 74.81424713]
[173.95014954 86.13349915]
[176.25512695 100.95534515]
[170.31488037 114.72899628]
[157.95327759 123.22550964]
[142.96571350 123.83616638]
[129.95385742 116.37348175]
[122.91277313 103.12873840]
[124.00366211 88.17023468]
[113.45165253 98.83114624]
[108.03302765 112.81822968]
[108.64884949 127.80558014]
[109.26467896 142.79293823]
[109.88050079 157.78028870]
[110.49633026 172.76763916]
[111.11215210 187.75498962]
[111.72798157 202.74234009]
[112.34380341 217.72970581]
[112.95962524 232.71705627]
[127.71092987 235.85551453]
[141.21791077 242.56462097]
[152.63153076 252.42262268]
[161.23431396 264.80984497]
[166.48547363 278.94760132]
[168.05491638 293.94717407]
[165.84399414 308.86572266]
[159.99168396 322.76541138]
[150.86587524 334.77249146]
[139.04020691 344.13223267]
[125.25807190 350.25622559]
[110.38580322 352.75952148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 35]
[26 34]
[27 33]
[38 48]
[39 47]
[40 46]
[60 131]
[61 130]
[62 120]
[63 119]
[64 118]
[65 117]
[83 116]
[84 115]
[85 114]
[86 112]
[87 111]
[88 110]
[89 105]
[90 104]
[91 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
