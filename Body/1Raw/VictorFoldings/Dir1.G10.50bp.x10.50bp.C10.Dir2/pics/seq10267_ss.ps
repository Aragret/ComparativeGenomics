%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCAUUCUCAUGGGGGGGGGGCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGxxxxxxxxxxCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCCCCCCCCCCCAGUCAUUCUCAU\
) } def
/len { sequence length } bind def

/coor [
[68.12865448 638.28399658]
[53.85688019 633.47454834]
[40.95289993 625.70916748]
[30.02024269 615.35101318]
[21.57025719 602.88458252]
[15.99816132 588.89294434]
[13.56457138 574.03051758]
[14.38331223 558.99243164]
[18.41609001 544.48205566]
[25.47428322 531.17810059]
[35.22776794 519.70275879]
[47.22035599 510.59274292]
[60.89113235 504.27423096]
[75.60069275 501.04266357]
[75.60069275 486.04266357]
[75.60069275 471.04266357]
[75.60069275 456.04266357]
[75.60069275 441.04266357]
[75.60069275 426.04266357]
[75.60069275 411.04266357]
[75.60069275 396.04266357]
[75.60069275 381.04266357]
[75.60069275 366.04266357]
[75.60069275 351.04266357]
[64.49880219 347.35321045]
[54.87102509 340.67315674]
[47.50426102 331.53524780]
[43.00434494 320.67355347]
[41.74624252 308.96466064]
[43.84280777 297.35684204]
[49.13477325 286.79327393]
[57.20278168 278.13543701]
[67.40060425 272.09274292]
[78.90689087 269.16458130]
[80.10621643 254.21261597]
[81.30554199 239.26063538]
[82.50487518 224.30865479]
[83.70420074 209.35668945]
[84.90352631 194.40470886]
[86.10285187 179.45272827]
[87.30217743 164.50074768]
[88.50151062 149.54878235]
[89.70083618 134.59680176]
[71.94572449 122.71495056]
[64.01753998 102.87644958]
[68.69338989 82.03038025]
[57.51947784 72.02319336]
[46.34556580 62.01601410]
[35.17165375 52.00883102]
[33.05769730 66.85912323]
[20.23448944 74.64149475]
[6.08540058 69.66120148]
[0.96401405 55.56257248]
[8.61789894 42.66226196]
[23.44607735 40.39998627]
[13.32760143 29.32675362]
[3.20912576 18.25352287]
[-12.68845558 16.09795380]
[-20.79111099 2.25142026]
[-14.88317871 -12.66420555]
[0.50328338 -17.20693016]
[13.56509686 -7.89196491]
[14.28235722 8.13504601]
[24.40083313 19.20827866]
[34.51931000 30.28150940]
[45.17883682 40.83491898]
[56.35274887 50.84210205]
[67.52665710 60.84928513]
[78.70056915 70.85646820]
[86.26963806 66.61604309]
[94.63188171 64.30413818]
[95.53179932 49.33115768]
[96.43171692 34.35817719]
[82.89668274 27.37799454]
[73.37598419 15.49203014]
[69.51913452 0.75959796]
[71.99434662 -14.26681900]
[80.37277985 -26.98380280]
[93.20282745 -35.18806076]
[108.26159668 -37.45815277]
[122.94007111 -33.40077209]
[134.69511414 -23.71888733]
[141.49008179 -10.08994102]
[142.14773560 5.12476921]
[136.55409241 19.28920174]
[125.67832184 29.94928360]
[111.40469360 35.25809097]
[110.50477600 50.23107147]
[109.60486603 65.20405579]
[117.31397247 68.32607269]
[124.10388184 73.12967682]
[136.22146606 64.28863525]
[131.29228210 49.99897003]
[130.79571533 34.89119339]
[134.77589417 20.30868721]
[142.87893677 7.54811335]
[154.38429260 -2.25586700]
[168.26893616 -8.23148918]
[183.29824829 -9.84740639]
[198.13583374 -6.95993042]
[211.46234131 0.17418492]
[222.09278870 10.92057991]
[229.08192444 24.32369041]
[231.80827332 39.19172287]
[230.02941895 54.20262146]
[223.90353394 68.02162933]
[213.97532654 79.41996765]
[201.12760925 87.38410187]
[186.50277710 91.20587158]
[171.40129089 90.54544067]
[157.16592407 85.46154022]
[145.06251526 76.40622711]
[132.94493103 85.24726868]
[136.05477905 98.24960327]
[134.21907043 111.49203491]
[127.68957520 123.15812683]
[117.36194611 131.64765930]
[104.65280914 135.79612732]
[103.45348358 150.74810791]
[102.25415802 165.70007324]
[101.05483246 180.65205383]
[99.85550690 195.60403442]
[98.65617371 210.55601501]
[97.45684814 225.50798035]
[96.25752258 240.45996094]
[95.05819702 255.41194153]
[93.85887146 270.36392212]
[110.23627472 279.13000488]
[121.14758301 294.10113525]
[124.46015167 312.27667236]
[119.55892944 330.03726196]
[107.46008301 343.86550903]
[90.60069275 351.04266357]
[90.60069275 366.04266357]
[90.60069275 381.04266357]
[90.60069275 396.04266357]
[90.60069275 411.04266357]
[90.60069275 426.04266357]
[90.60069275 441.04266357]
[90.60069275 456.04266357]
[90.60069275 471.04266357]
[90.60069275 486.04266357]
[90.60069275 501.04266357]
[105.31024933 504.27423096]
[118.98102570 510.59274292]
[130.97361755 519.70275879]
[140.72709656 531.17810059]
[147.78529358 544.48205566]
[151.81806946 558.99243164]
[152.63681030 574.03051758]
[150.20321655 588.89294434]
[144.63111877 602.88458252]
[136.18113708 615.35101318]
[125.24848175 625.70916748]
[112.34449768 633.47454834]
[98.07273102 638.28399658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[34 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[46 69]
[47 68]
[48 67]
[49 66]
[55 65]
[56 64]
[57 63]
[71 89]
[72 88]
[73 87]
[91 113]
[92 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
