%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACCCUAGCCAUGGGGGGGGGGCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCxxxxxxxxxxUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCCCCCCCCCCCGCCACCCUAGCAAU\
) } def
/len { sequence length } bind def

/coor [
[83.86393738 481.24038696]
[69.84919739 475.75646973]
[57.17377853 467.64352417]
[46.32487488 457.21340942]
[37.71950150 444.86700439]
[31.68841934 431.07888794]
[28.46344757 416.37902832]
[28.16854858 401.33245850]
[30.81505585 386.51751709]
[36.30124664 372.50366211]
[44.41624069 359.82955933]
[54.84812546 348.98236084]
[67.19592285 340.37896729]
[80.98502350 334.35012817]
[95.68540192 331.12753296]
[95.38904572 316.13046265]
[95.09268188 301.13339233]
[94.79632568 286.13632202]
[94.49996948 271.13925171]
[94.20361328 256.14218140]
[93.90725708 241.14509583]
[93.61090088 226.14802551]
[93.31453705 211.15095520]
[93.01818085 196.15388489]
[92.72182465 181.15681458]
[89.42791748 174.49594116]
[92.57070923 165.86119080]
[92.57070923 150.86119080]
[92.57070923 135.86119080]
[92.57070923 120.86118317]
[92.57070923 105.86118317]
[89.76286316 101.36264801]
[89.70600891 95.60774994]
[92.87877655 90.27151489]
[93.47138214 75.28322601]
[78.81099701 71.92027283]
[65.02188873 65.92221069]
[52.57307816 57.49467468]
[41.88771439 46.92588043]
[33.32867813 34.57681274]
[27.18625450 20.86888313]
[23.66830254 6.26953506]
[22.89320564 -8.72367668]
[24.88590050 -23.60005379]
[29.57706451 -37.85314941]
[36.80554581 -50.99800110]
[46.32387161 -62.58764648]
[57.80675125 -72.22830963]
[70.86216736 -79.59277344]
[85.04477692 -84.43151093]
[99.87108612 -86.58111572]
[100.46368408 -101.56940460]
[101.05628204 -116.55769348]
[101.64888000 -131.54597473]
[102.24148560 -146.53427124]
[87.41540527 -148.93109131]
[72.98633575 -153.09754944]
[59.16470718 -158.97291565]
[46.15206909 -166.47148132]
[34.13818741 -175.48391724]
[23.29825783 -185.87879944]
[13.79036140 -197.50451660]
[5.75314903 -210.19152832]
[-0.69617146 -223.75485229]
[-5.46355104 -237.99667358]
[-8.47946644 -252.70930481]
[-9.69993782 -267.67819214]
[-9.10716629 -282.68505859]
[-6.70979643 -297.51104736]
[-2.54278922 -311.93997192]
[3.33308840 -325.76138306]
[10.83214855 -338.77374268]
[19.84503365 -350.78729248]
[30.24030876 -361.62683105]
[41.86637878 -371.13427734]
[54.55370331 -379.17102051]
[68.11726379 -385.61984253]
[82.35926056 -390.38668823]
[97.07201385 -393.40203857]
[112.04095459 -394.62194824]
[127.04779053 -394.02862549]
[141.87368774 -391.63070679]
[156.30244446 -387.46316528]
[170.12364197 -381.58676147]
[183.13571167 -374.08721924]
[195.14892578 -365.07388306]
[205.98806763 -354.67819214]
[215.49510193 -343.05175781]
[223.53137207 -330.36413574]
[229.97967529 -316.80035400]
[234.74598694 -302.55816650]
[237.76080322 -287.84530640]
[238.98014832 -272.87631226]
[238.38626099 -257.86950684]
[235.98777771 -243.04368591]
[231.81968689 -228.61509705]
[225.94277954 -214.79412842]
[218.44274902 -201.78231812]
[209.42897034 -189.76945496]
[199.03288269 -178.93069458]
[187.40609741 -169.42410278]
[174.71817017 -161.38830566]
[161.15412903 -154.94050598]
[146.91177368 -150.17472839]
[132.19880676 -147.16046143]
[117.22977448 -145.94166565]
[116.63716888 -130.95338440]
[116.04457092 -115.96509552]
[115.45197296 -100.97679901]
[114.85937500 -85.98851013]
[129.46969604 -82.67506409]
[143.22599792 -76.73168945]
[155.65922546 -68.35946655]
[166.34512329 -57.84231186]
[174.91871643 -45.53735733]
[181.08682251 -31.86283684]
[184.63804626 -17.28385925]
[185.44999695 -2.29659200]
[183.49359131 12.58862305]
[178.83398438 26.86465073]
[171.62846375 40.04483795]
[162.12117004 51.67960739]
[150.63473511 61.37178421]
[137.55941772 68.79016113]
[123.33979797 73.68082428]
[108.45967102 75.87582397]
[107.86707306 90.86411285]
[107.57070923 105.86118317]
[107.57070923 120.86118317]
[107.57070923 135.86119080]
[107.57070923 150.86119080]
[107.57070923 165.86119080]
[107.71889496 180.86045837]
[108.01525879 195.85752869]
[108.31161499 210.85459900]
[108.60797119 225.85166931]
[108.90432739 240.84873962]
[109.20068359 255.84580994]
[109.49703979 270.84289551]
[109.79340363 285.83996582]
[110.08975983 300.83703613]
[110.38611603 315.83410645]
[110.68247223 330.83117676]
[125.49868774 333.47048950]
[139.51519775 338.94985962]
[152.19325256 347.05871582]
[163.04553223 357.48532104]
[171.65489197 369.82894897]
[177.69044495 383.61511230]
[180.92016602 398.31393433]
[181.21994019 413.36041260]
[178.57823181 428.17617798]
[173.09657288 442.19180298]
[164.98568726 454.86856079]
[154.55731201 465.71914673]
[142.21229553 474.32650757]
[128.42515564 480.35983276]
[113.72582245 483.58718872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[27 132]
[28 131]
[29 130]
[30 129]
[31 128]
[34 127]
[35 126]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
