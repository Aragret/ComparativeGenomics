%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAAAGACGGGGGGGGGGACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUxxxxxxxxxxCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUCCCCCCCCCCACUCCAAAGAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 401.76782227]
[71.01555634 396.21481323]
[58.81560135 387.34848022]
[49.20452881 375.72616577]
[42.78650284 362.07846069]
[39.96496582 347.26327515]
[40.91728210 332.21191406]
[45.58358765 317.87048340]
[53.67055511 305.14053345]
[64.66983032 294.82226562]
[77.88998413 287.56427002]
[92.50000000 283.82284546]
[92.50000000 268.82284546]
[92.50000000 253.82284546]
[92.50000000 238.82284546]
[92.50000000 223.82284546]
[92.50000000 208.82284546]
[92.50000000 193.82284546]
[92.50000000 178.82284546]
[92.50000000 163.82284546]
[92.50000000 148.82284546]
[92.50000000 133.82284546]
[80.11342621 128.36827087]
[70.76194000 118.58414459]
[65.87275696 105.96370697]
[66.19206238 92.43309021]
[71.67112732 80.05733490]
[61.56569672 68.97219849]
[51.46026230 57.88706589]
[39.21730804 49.22045898]
[25.40372467 43.37367249]
[11.59014225 37.52688217]
[7.16514587 38.24734879]
[3.15965557 37.55481720]
[-0.02488940 35.76445007]
[-2.13503647 33.29129410]
[-3.08532190 30.59166718]
[-16.37266350 23.63130951]
[-29.66000557 16.67095375]
[-42.94734573 9.71059799]
[-56.37479401 3.02452254]
[-69.93669128 -3.38445306]
[-83.49858856 -9.79342842]
[-97.06048584 -16.20240402]
[-110.09193420 -7.94499016]
[-125.51881409 -8.06659412]
[-138.41847229 -16.52841377]
[-144.67466736 -30.63031387]
[-142.29107666 -45.87242508]
[-132.02828979 -57.39105225]
[-117.16112518 -61.51063538]
[-102.43363953 -56.91663742]
[-92.54532623 -45.07498169]
[-90.65151215 -29.76430130]
[-77.08961487 -23.35532570]
[-63.52771759 -16.94635010]
[-49.96582031 -10.53737354]
[-45.19427490 -11.29998589]
[-39.89962387 -9.02962303]
[-35.98699188 -3.57674360]
[-22.69964790 3.38361263]
[-9.41230679 10.34396839]
[3.87503433 17.30432510]
[17.43692970 23.71330070]
[31.25051308 29.56008911]
[45.06409454 35.40687561]
[36.24289322 23.27483559]
[30.95122337 9.23923111]
[29.56728363 -5.69678926]
[32.18999100 -20.46572304]
[38.63189697 -34.01200867]
[48.43258286 -45.36746979]
[60.89158249 -53.72051620]
[75.11842346 -58.47413635]
[90.09629822 -59.28858185]
[104.75470734 -56.10564423]
[118.04598999 -49.15281677]
[129.02018738 -38.92702103]
[136.89297485 -26.15912056]
[141.10165405 -11.76165485]
[141.34542847 3.23636413]
[137.60687256 17.76300240]
[130.15319824 30.78001595]
[119.51711273 41.35705948]
[106.45881653 48.73816681]
[91.91159058 52.39580536]
[76.91516113 52.06855774]
[62.54539490 47.78163147]
[72.65083313 58.86676788]
[82.75626373 69.95189667]
[101.33401489 65.38128662]
[119.50494385 71.36799622]
[131.72764587 86.08630371]
[146.44317627 83.17883301]
[161.15869141 80.27136230]
[175.87422180 77.36389160]
[185.53318787 57.43227005]
[211.00456238 53.30268097]
[223.83821106 45.53754425]
[231.26611328 30.91706657]
[247.65400696 30.30988693]
[256.14346313 44.34061813]
[248.00122070 58.57564926]
[231.60334778 58.37120056]
[218.76969910 66.13633728]
[223.31698608 80.43046570]
[238.27825928 79.35339355]
[253.23954773 78.27632904]
[268.20083618 77.19925690]
[283.16210938 76.12218475]
[294.70727539 64.98266602]
[310.59545898 67.20644379]
[318.63861084 81.08762360]
[312.66671753 95.97776031]
[297.26089478 100.45440674]
[284.23916626 91.08346558]
[269.27789307 92.16053772]
[254.31661987 93.23760986]
[239.35533142 94.31467438]
[224.39405823 95.39174652]
[212.40591431 104.96179199]
[198.25964355 106.95632172]
[186.04479980 101.86253357]
[178.78169250 92.07941437]
[164.06616211 94.98688507]
[149.35064697 97.89435577]
[134.63511658 100.80182648]
[132.47810364 112.05849457]
[126.76638031 121.99535370]
[118.12508392 129.52484131]
[107.50000000 133.82284546]
[107.50000000 148.82284546]
[107.50000000 163.82284546]
[107.50000000 178.82284546]
[107.50000000 193.82284546]
[107.50000000 208.82284546]
[107.50000000 223.82284546]
[107.50000000 238.82284546]
[107.50000000 253.82284546]
[107.50000000 268.82284546]
[107.50000000 283.82284546]
[122.11001587 287.56427002]
[135.33016968 294.82226562]
[146.32945251 305.14053345]
[154.41641235 317.87048340]
[159.08271790 332.21191406]
[160.03503418 347.26327515]
[157.21350098 362.07846069]
[150.79547119 375.72616577]
[141.18440247 387.34848022]
[128.98443604 396.21481323]
[114.96250153 401.76782227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 90]
[28 89]
[29 88]
[30 66]
[31 65]
[32 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 57]
[42 56]
[43 55]
[44 54]
[93 127]
[94 126]
[95 125]
[96 124]
[98 105]
[99 104]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
