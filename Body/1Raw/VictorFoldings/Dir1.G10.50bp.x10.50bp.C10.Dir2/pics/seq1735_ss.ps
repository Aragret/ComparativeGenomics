%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACUAAAACGGGGGGGGGGCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGxxxxxxxxxxGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUACCCCCCCCCCUUACCUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[78.28717041 486.37664795]
[64.26522827 480.82363892]
[52.06526947 471.95730591]
[42.45419693 460.33499146]
[36.03617477 446.68731689]
[33.21463776 431.87213135]
[34.16695404 416.82073975]
[38.83325577 402.47930908]
[46.92022324 389.74935913]
[57.91949844 379.43109131]
[71.13965607 372.17312622]
[85.74967194 368.43167114]
[85.74967194 353.43167114]
[85.74967194 338.43167114]
[85.74967194 323.43167114]
[85.74967194 308.43167114]
[85.74967194 293.43167114]
[85.74967194 278.43167114]
[85.74967194 263.43167114]
[85.74967194 248.43167114]
[85.74967194 233.43167114]
[83.47079468 230.66510010]
[82.45205688 226.63623047]
[83.28139496 221.96528625]
[86.24004364 217.51538086]
[87.16345978 202.54382324]
[84.41922760 195.63142395]
[88.26264191 187.27534485]
[89.49325562 172.32591248]
[82.82619476 159.00677490]
[91.66959381 145.88789368]
[92.90019989 130.93846130]
[94.13081360 115.98902130]
[88.62262726 112.42822266]
[84.92095184 107.09955597]
[83.53701019 100.83301544]
[84.62599182 94.58028412]
[87.97164917 89.27021027]
[93.02660370 85.67086029]
[89.96820831 70.98596191]
[86.90981293 56.30106354]
[83.85141754 41.61616516]
[80.79302216 26.93126869]
[77.73462677 12.24637032]
[62.68232727 12.16235828]
[47.98218155 8.95167351]
[34.27622604 2.75703168]
[22.16255188 -6.14857769]
[12.16922188 -17.37392616]
[4.73123074 -30.42672729]
[0.17158572 -44.73522949]
[-1.31272531 -59.67326355]
[0.34075785 -74.58763123]
[5.05734301 -88.82669067]
[12.62855625 -101.76880646]
[22.72135544 -112.84949493]
[34.89278030 -121.58604431]
[48.60939026 -127.59856415]
[45.55099487 -142.28346252]
[42.49259949 -156.96835327]
[39.43420410 -171.65325928]
[24.37621880 -172.85066223]
[10.26603317 -178.24319458]
[-1.75250757 -187.39367676]
[-10.70511246 -199.56033325]
[-15.86603260 -213.75686646]
[-16.81689835 -228.83242798]
[-13.48062420 -243.56491089]
[-6.12766886 -256.76000977]
[4.64589739 -267.34805298]
[17.96670914 -274.47076416]
[32.75490952 -277.55065918]
[47.81167984 -276.33813477]
[61.91644287 -270.93142700]
[73.92578888 -261.76885986]
[82.86616516 -249.59323120]
[88.01281738 -235.39151001]
[88.94853973 -220.31500244]
[85.59746552 -205.58589172]
[78.23126221 -192.39817810]
[67.44705963 -181.82095337]
[54.11910248 -174.71165466]
[57.17749786 -160.02674866]
[60.23589325 -145.34185791]
[63.29428864 -130.65695190]
[78.27075195 -130.62030029]
[92.91798401 -127.46921539]
[106.59525299 -121.33907318]
[118.70370483 -112.49560547]
[128.71264648 -101.32340240]
[136.18276978 -88.30918884]
[140.78543091 -74.02060699]
[142.31712341 -59.08147812]
[140.70849609 -44.14455414]
[136.02745056 -29.86300087]
[128.47625732 -16.86182785]
[118.38290405 -5.71055031]
[106.18676758 3.10177231]
[92.41952515 9.18797493]
[95.47792053 23.87287331]
[98.53631592 38.55776978]
[101.59471130 53.24266815]
[104.65310669 67.92756653]
[107.71150208 82.61246490]
[119.49363708 91.89585114]
[134.48652649 91.43392181]
[149.47941589 90.97200012]
[164.47229004 90.51007080]
[171.10697937 76.71733856]
[183.39842224 67.59707642]
[198.52212524 65.24506378]
[213.00279236 70.20177460]
[223.51286316 81.32818604]
[227.63719177 96.06754303]
[224.42805481 111.03282928]
[214.62287903 122.78515625]
[200.47480774 128.62390137]
[185.23500061 127.20738220]
[172.40541077 118.86109161]
[164.93421936 105.50296021]
[149.94132996 105.96488190]
[134.94845581 106.42681122]
[119.95556641 106.88873291]
[109.08025360 117.21963501]
[107.84963989 132.16906738]
[106.61902618 147.11849976]
[113.19806671 161.50692749]
[104.44269562 173.55651855]
[103.21208191 188.50596619]
[102.13500977 203.46723938]
[101.21159363 218.43879700]
[100.74967194 233.43167114]
[100.74967194 248.43167114]
[100.74967194 263.43167114]
[100.74967194 278.43167114]
[100.74967194 293.43167114]
[100.74967194 308.43167114]
[100.74967194 323.43167114]
[100.74967194 338.43167114]
[100.74967194 353.43167114]
[100.74967194 368.43167114]
[115.35968018 372.17312622]
[128.57984924 379.43109131]
[139.57911682 389.74935913]
[147.66607666 402.47930908]
[152.33238220 416.82073975]
[153.28469849 431.87213135]
[150.46316528 446.68731689]
[144.04513550 460.33499146]
[134.43406677 471.95730591]
[122.23411560 480.82363892]
[108.21216583 486.37664795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 131]
[26 130]
[28 129]
[29 128]
[31 126]
[32 125]
[33 124]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[58 85]
[59 84]
[60 83]
[61 82]
[105 123]
[106 122]
[107 121]
[108 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
