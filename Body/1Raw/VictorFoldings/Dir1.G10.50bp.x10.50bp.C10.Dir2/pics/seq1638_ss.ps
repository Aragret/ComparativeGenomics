%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCAGAAGGGGGGGGGGAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUxxxxxxxxxxCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUCCCCCCCCCCUACCUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[71.53914642 388.81069946]
[57.69320297 382.79467773]
[45.98454285 373.26525879]
[37.28201675 360.92959595]
[32.23141479 346.70306396]
[31.20752525 331.64138794]
[34.28632355 316.86224365]
[41.23934555 303.46231079]
[51.55062866 292.43597412]
[64.45500946 284.60147095]
[78.99489594 280.54016113]
[78.99489594 265.54016113]
[78.99489594 250.54014587]
[78.99489594 235.54014587]
[78.99489594 220.54014587]
[78.99489594 205.54014587]
[78.99489594 190.54014587]
[78.99489594 175.54014587]
[78.99489594 160.54014587]
[78.99489594 145.54014587]
[78.99489594 130.54014587]
[72.71585083 116.28630066]
[73.67005920 102.85423279]
[79.89736938 93.28939819]
[88.39019775 89.13321686]
[95.98275757 90.17889404]
[92.57978058 75.57000732]
[83.64274597 74.15802765]
[75.49920654 69.48815155]
[69.33432007 61.96398544]
[66.13932037 52.41738129]
[66.55859375 42.01882935]
[51.69554520 39.99649429]
[36.83249664 37.97415924]
[21.96945190 35.95182419]
[7.10640478 33.92949295]
[-7.75664234 31.90715599]
[-19.20912933 42.55490494]
[-34.82902908 43.29840088]
[-47.24110031 33.78659058]
[-50.58473969 18.51066208]
[-43.28118896 4.68343639]
[-28.77895737 -1.16628957]
[-13.92555714 3.72354507]
[-5.73430777 17.04410934]
[9.12873936 19.06644440]
[23.99178696 21.08877945]
[38.85483170 23.11111259]
[53.71788025 25.13344765]
[68.58092499 27.15578270]
[80.84329224 18.51666641]
[83.94161987 3.84014058]
[87.03993988 -10.83638477]
[90.13825989 -25.51291084]
[93.23657990 -40.18943787]
[96.33490753 -54.86596298]
[99.43322754 -69.54248810]
[101.61006165 -84.38368988]
[102.85693359 -99.33177948]
[104.10381317 -114.27986908]
[105.35068512 -129.22795105]
[92.20429993 -122.00490570]
[78.27976227 -127.58229828]
[73.75479126 -141.88351440]
[81.93676758 -154.45550537]
[96.84533691 -156.10919189]
[107.58330536 -145.63644409]
[110.37562561 -160.37425232]
[113.16795349 -175.11206055]
[99.63825226 -181.80905151]
[88.41786194 -191.90884399]
[80.33942413 -204.66192627]
[76.00240326 -219.12197876]
[75.72863007 -234.21592712]
[79.53842926 -248.82373047]
[87.14909363 -261.86138916]
[97.99584198 -272.36141968]
[111.27378845 -279.54464722]
[125.99761963 -282.87802124]
[141.07472229 -282.11419678]
[155.38629150 -277.30984497]
[167.87030029 -268.82147217]
[177.60034180 -257.27902222]
[183.85440063 -243.53895569]
[186.16838074 -228.62091064]
[184.37057495 -213.63189697]
[178.59437561 -199.68420410]
[169.26843262 -187.81283569]
[157.08477783 -178.89874268]
[142.94752502 -173.60339355]
[127.90575409 -172.31973267]
[125.11343384 -157.58192444]
[122.32110596 -142.84413147]
[120.29877472 -127.98107910]
[119.05189514 -113.03298950]
[117.80502319 -98.08490753]
[116.55815125 -83.13681793]
[128.92716980 -91.62253571]
[143.70771790 -89.06610107]
[152.50808716 -76.91893768]
[150.33181763 -62.07764816]
[138.41450500 -52.96843338]
[123.52225494 -54.76308823]
[114.10974884 -66.44416809]
[111.01142883 -51.76763916]
[107.91310883 -37.09111404]
[104.81478882 -22.41458893]
[101.71646118 -7.73806334]
[98.61814117 6.93846226]
[95.51982117 21.61498833]
[116.16964722 33.48862076]
[120.38581085 55.59315491]
[107.18867493 72.16703033]
[110.59165192 86.77591705]
[121.14293671 97.43754578]
[135.71563721 100.99230957]
[150.28834534 104.54707336]
[167.10916138 102.42658997]
[173.80323792 118.00303650]
[160.68862915 128.74749756]
[146.73358154 119.11977386]
[132.16087341 115.56501007]
[117.58818054 112.01024628]
[111.68985748 116.64272308]
[125.61181641 122.22653961]
[127.73696136 137.07524109]
[115.94012451 146.33992004]
[102.01828003 140.75581360]
[99.89321899 125.90766907]
[93.99489594 130.54014587]
[93.99489594 145.54014587]
[93.99489594 160.54014587]
[93.99489594 175.54014587]
[93.99489594 190.54014587]
[93.99489594 205.54014587]
[93.99489594 220.54014587]
[93.99489594 235.54014587]
[93.99489594 250.54014587]
[93.99489594 265.54016113]
[93.99489594 280.54016113]
[108.53478241 284.60147095]
[121.43916321 292.43597412]
[131.75044250 303.46231079]
[138.70347595 316.86224365]
[141.78227234 331.64138794]
[140.75837708 346.70306396]
[135.70777893 360.92959595]
[127.00525665 373.26525879]
[115.29659271 382.79467773]
[101.45065308 388.81069946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 114]
[27 113]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 97]
[59 96]
[60 95]
[61 94]
[67 93]
[68 92]
[69 91]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
