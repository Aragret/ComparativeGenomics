%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCACUCGGGGGGGGGGCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACAxxxxxxxxxxAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCCCCCCCCCCCUCACACUC\
) } def
/len { sequence length } bind def

/coor [
[112.24028778 441.44873047]
[98.39434814 435.43270874]
[86.68568420 425.90328979]
[77.98316193 413.56762695]
[72.93255615 399.34109497]
[71.90866852 384.27941895]
[74.98746490 369.50027466]
[81.94049072 356.10034180]
[92.25177002 345.07400513]
[105.15615082 337.23950195]
[119.69603729 333.17819214]
[119.69603729 318.17819214]
[119.69603729 303.17819214]
[119.69603729 288.17819214]
[119.69603729 273.17819214]
[119.69603729 258.17819214]
[119.69603729 243.17819214]
[119.69603729 228.17819214]
[119.69603729 213.17819214]
[119.69603729 198.17819214]
[119.69603729 183.17819214]
[118.29373932 168.24388123]
[115.50141144 153.50607300]
[112.70908356 138.76826477]
[109.91676331 124.03045654]
[83.77049255 116.20147705]
[81.64741516 92.38920593]
[70.98578644 81.83791351]
[60.32416153 71.28662109]
[49.66253662 60.73533249]
[39.00090790 50.18404388]
[27.22754669 59.50849152]
[14.41606522 67.34579468]
[0.75329405 73.58165741]
[-13.56152439 78.12515259]
[-28.31963730 80.91001892]
[-43.30582809 81.89563751]
[-58.30155182 81.06764221]
[-73.08813477 78.43811035]
[-87.44993591 74.04537964]
[-101.17751312 67.95352173]
[-114.07069397 60.25135803]
[-125.94145203 51.05121994]
[-136.61666870 40.48726654]
[-145.94067383 28.71355629]
[-153.77749634 15.90178204]
[-160.01284790 2.23877764]
[-164.55581665 -12.07621098]
[-167.34011841 -26.83442688]
[-168.32518005 -41.82065582]
[-167.49662781 -56.81634903]
[-164.86654663 -71.60282898]
[-160.47328186 -85.96446228]
[-154.38090515 -99.69182587]
[-146.67825317 -112.58471680]
[-137.47767639 -124.45512390]
[-126.91332245 -135.12994385]
[-115.13926697 -144.45350647]
[-102.32720184 -152.28985596]
[-88.66396332 -158.52470398]
[-74.34880066 -163.06712341]
[-59.59048080 -165.85089111]
[-44.60421753 -166.83538818]
[-29.60855293 -166.00627136]
[-14.82217216 -163.37562561]
[-0.46070027 -158.98182678]
[13.26642799 -152.88894653]
[26.15903091 -145.18582153]
[38.02909851 -135.98478699]
[48.70352554 -125.42003632]
[58.02665329 -113.64562988]
[65.86251831 -100.83326721]
[72.09684753 -87.16979980]
[76.63874054 -72.85446930]
[79.42194366 -58.09604645]
[80.40588379 -43.10974503]
[79.57621002 -28.11411095]
[76.94502258 -13.32782841]
[72.55068207 1.03347909]
[66.45727539 14.76037979]
[58.75366974 27.65269470]
[49.55220032 39.52241516]
[60.21382523 50.07370758]
[70.87545013 60.62499619]
[81.53707886 71.17628479]
[92.19870758 81.72757721]
[100.73751068 78.61257172]
[110.43583679 79.57995605]
[119.32120514 84.99370575]
[125.35616302 94.26673889]
[139.01240540 88.06133270]
[152.66864014 81.85592651]
[166.32489014 75.65052032]
[179.98112488 69.44510651]
[193.50531006 62.95694351]
[206.89160156 56.18883133]
[220.27787781 49.42071533]
[221.76301575 34.06500244]
[231.33224487 21.96403503]
[245.93206787 16.97919083]
[260.90374756 20.70111275]
[271.46984863 31.94215012]
[274.25878906 47.11532974]
[268.38061523 61.37894440]
[255.71104431 70.18152618]
[240.29287720 70.71420288]
[227.04600525 62.80699921]
[213.65971375 69.57511139]
[200.27342224 76.34323120]
[197.94459534 80.58021545]
[192.89753723 83.36563873]
[186.18653870 83.10134888]
[172.53028870 89.30675507]
[158.87405396 95.51216125]
[145.21780396 101.71757507]
[131.56156921 107.92298126]
[124.65457153 121.23813629]
[127.44689178 135.97593689]
[130.23921204 150.71374512]
[133.03153992 165.45155334]
[140.51129150 152.44950867]
[153.76431274 145.42399597]
[168.72340393 146.53108215]
[180.79780579 155.43099976]
[186.28205872 169.39248657]
[183.49310303 184.13093567]
[173.28684998 195.12329102]
[158.79544067 198.99617004]
[144.46611023 194.56100464]
[134.69604492 183.17819214]
[134.69604492 198.17819214]
[134.69604492 213.17819214]
[134.69604492 228.17819214]
[134.69604492 243.17819214]
[134.69604492 258.17819214]
[134.69604492 273.17819214]
[134.69604492 288.17819214]
[134.69604492 303.17819214]
[134.69604492 318.17819214]
[134.69604492 333.17819214]
[149.23593140 337.23950195]
[162.14030457 345.07400513]
[172.45159912 356.10034180]
[179.40461731 369.50027466]
[182.48341370 384.27941895]
[181.45951843 399.34109497]
[176.40892029 413.56762695]
[167.70639038 425.90328979]
[155.99772644 435.43270874]
[142.15179443 441.44873047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 120]
[23 119]
[24 118]
[25 117]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
