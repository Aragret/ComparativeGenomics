%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUUACCCGGGGGGGGGGAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUAxxxxxxxxxxUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCCCCCCCCCCCUUUUACCC\
) } def
/len { sequence length } bind def

/coor [
[108.66009521 387.01797485]
[94.81416321 381.00195312]
[83.10549927 371.47253418]
[74.40297699 359.13687134]
[69.35237122 344.91033936]
[68.32848358 329.84866333]
[71.40727997 315.06948853]
[78.36029816 301.66958618]
[88.67158508 290.64324951]
[101.57596588 282.80874634]
[116.11585236 278.74740601]
[116.11585236 263.74740601]
[116.11585236 248.74742126]
[116.11585236 233.74742126]
[116.11585236 218.74742126]
[116.11585236 203.74742126]
[116.11585236 188.74742126]
[116.11585236 173.74742126]
[116.11585236 158.74742126]
[116.11585236 143.74742126]
[116.11585236 128.74742126]
[109.76838684 124.75246429]
[90.72599030 112.76758575]
[77.20180511 119.25575256]
[63.67761230 125.74391937]
[52.01216125 138.04650879]
[36.96104813 130.24263000]
[40.29337692 113.61940002]
[57.18944931 112.21972656]
[70.71363831 105.73155975]
[84.23783112 99.24340057]
[82.21549225 84.38034821]
[67.44944000 81.74148560]
[52.68338394 79.10262299]
[44.82130432 92.08538818]
[32.79783249 101.34824371]
[18.23904228 105.63847351]
[3.11388993 104.37584686]
[-10.53207111 97.73114014]
[-20.85333633 86.60298157]
[-26.45403862 72.49636841]
[-26.57673264 57.31909943]
[-21.20482063 43.12378311]
[-11.06481171 31.83021736]
[2.47194099 24.96576118]
[17.57470322 23.45877838]
[32.20095062 27.51307487]
[44.37260437 36.58034134]
[52.44354630 49.43430328]
[55.32224655 64.33656311]
[70.08830261 66.97543335]
[84.85436249 69.61429596]
[98.81475067 64.12726593]
[107.83227539 52.14043045]
[110.51632690 43.33999252]
[117.16420746 40.00063324]
[126.42915344 28.20399284]
[135.69410706 16.40735245]
[144.95906067 4.61071205]
[154.22399902 -7.18592787]
[162.99020386 -19.35776520]
[171.24249268 -31.88372612]
[179.49478149 -44.40968704]
[187.74707031 -56.93564987]
[193.66703796 -70.71803284]
[197.07002258 -85.32692719]
[200.47299194 -99.93581390]
[203.87597656 -114.54470825]
[207.27894592 -129.15359497]
[193.89868164 -136.11198425]
[182.66979980 -146.17991638]
[174.29817200 -158.72450256]
[169.31005859 -172.95719910]
[168.01898193 -187.98330688]
[170.50613403 -202.85827637]
[176.61515808 -216.64706421]
[185.96202087 -228.48289490]
[197.95919800 -237.62174988]
[211.85252380 -243.48915100]
[226.76864624 -245.71629333]
[241.76992798 -244.16314697]
[255.91337585 -238.92735291]
[268.30993652 -230.33802795]
[278.18032837 -218.93513489]
[284.90411377 -205.43544006]
[288.05859375 -190.68756104]
[287.44552612 -175.61856079]
[283.10339355 -161.17567444]
[275.30520630 -148.26681519]
[264.54110718 -137.70343018]
[251.48776245 -130.14953613]
[236.96571350 -126.08000183]
[221.88784790 -125.75062561]
[218.48486328 -111.14173126]
[215.08189392 -96.53283691]
[211.67890930 -81.92395020]
[208.27593994 -67.31505585]
[218.91235352 -77.89174652]
[232.36651611 -84.52391815]
[247.23326111 -86.51890564]
[261.95989990 -83.66835785]
[275.00842285 -76.26998138]
[285.01605225 -65.09645844]
[290.93756104 -51.31473923]
[292.15454102 -36.36418915]
[288.53988647 -21.80622864]
[280.47109985 -9.16128445]
[268.79086304 0.25001577]
[254.71910095 5.44475985]
[239.72543335 5.88041162]
[225.37579346 1.51147234]
[213.16883850 -7.20576859]
[204.37945557 -19.36088753]
[199.92562866 -33.68441391]
[200.27304077 -48.68336105]
[192.02075195 -36.15739822]
[183.76846313 -23.63143730]
[175.51617432 -11.10547543]
[175.99484253 -8.28090191]
[175.34651184 -5.09128714]
[173.42428589 -1.97890389]
[170.24908447 0.56849080]
[166.02064514 2.07902145]
[156.75569153 13.87566185]
[147.49073792 25.67230225]
[138.22579956 37.46894073]
[128.96084595 49.26558304]
[119.81911469 61.15796280]
[110.80158234 73.14479065]
[131.11585999 128.74742126]
[131.11585999 143.74742126]
[131.11585999 158.74742126]
[131.11585999 173.74742126]
[131.11585999 188.74742126]
[131.11585999 203.74742126]
[131.11585999 218.74742126]
[131.11585999 233.74742126]
[131.11585999 248.74742126]
[131.11585999 263.74740601]
[131.11585999 278.74740601]
[145.65574646 282.80874634]
[158.56011963 290.64324951]
[168.87139893 301.66958618]
[175.82443237 315.06948853]
[178.90322876 329.84866333]
[177.87933350 344.91033936]
[172.82873535 359.13687134]
[164.12620544 371.47253418]
[152.41754150 381.00195312]
[138.57160950 387.01797485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 31]
[24 30]
[25 29]
[32 52]
[33 51]
[34 50]
[53 129]
[54 128]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[61 118]
[62 117]
[63 116]
[64 115]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
