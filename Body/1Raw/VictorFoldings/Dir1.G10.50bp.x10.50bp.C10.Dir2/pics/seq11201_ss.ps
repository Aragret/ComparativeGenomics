%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACAAACUUAGGGGGGGGGGAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCxxxxxxxxxxACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUCCCCCCCCCCACCAACAAACCUA\
) } def
/len { sequence length } bind def

/coor [
[86.92332458 378.43850708]
[73.04918671 372.59024048]
[60.69438553 363.98486328]
[50.39900970 352.99856567]
[42.61313248 340.11160278]
[37.67712021 325.88732910]
[35.80675125 310.94760132]
[37.08378983 295.94552612]
[41.45241547 281.53689575]
[48.72164154 268.35159302]
[58.57369614 256.96603394]
[70.57788849 247.87796021]
[84.20944214 241.48464966]
[98.87244415 238.06559753]
[98.57231140 223.06860352]
[98.27217865 208.07159424]
[97.97204590 193.07460022]
[97.67191315 178.07760620]
[97.37178802 163.08061218]
[97.07165527 148.08361816]
[96.77152252 133.08660889]
[96.47138977 118.08961487]
[85.70681000 107.64338684]
[70.70755768 107.79345703]
[55.70830917 107.94353485]
[40.70906067 108.09360504]
[25.70981026 108.24367523]
[10.71056080 108.39375305]
[-4.28868818 108.54382324]
[-19.28793716 108.69390106]
[-34.28718567 108.84397125]
[-49.28643417 108.99404907]
[-55.30234909 122.98435211]
[-66.49293518 133.31347656]
[-80.91934967 138.19181824]
[-96.08214569 136.77420044]
[-109.35426331 129.30621338]
[-118.43622589 117.08174133]
[-121.75453949 102.21874237]
[-118.73428345 87.29232788]
[-109.89873505 74.88858032]
[-96.77869415 67.15653229]
[-81.64730835 65.43580627]
[-67.12616730 70.02452087]
[-55.73114777 80.12766266]
[-49.43650818 93.99479675]
[-34.43725967 93.84472656]
[-19.43801117 93.69464874]
[-4.43876171 93.54457855]
[10.56048775 93.39450073]
[25.55973625 93.24443054]
[40.55898666 93.09435272]
[55.55823517 92.94428253]
[70.55748749 92.79421234]
[85.55673218 92.64413452]
[98.85997009 85.71421051]
[107.57933807 73.50877380]
[116.29870605 61.30333710]
[104.88062286 51.56122208]
[94.34229279 40.87361145]
[84.76174164 29.31962967]
[76.20989990 16.98482323]
[68.75008392 3.96051407]
[62.43752670 -9.65686703]
[57.31896210 -23.76650047]
[53.43228912 -38.26391983]
[50.80628204 -53.04179382]
[49.46038437 -67.99070740]
[49.40456009 -82.99998474]
[50.63922119 -97.95848846]
[53.15523148 -112.75549316]
[56.93395615 -127.28141785]
[61.94742203 -141.42874146]
[68.15851593 -155.09269714]
[75.52124023 -168.17213440]
[83.98109436 -180.57022095]
[93.47543335 -192.19514465]
[103.93396759 -202.96084595]
[115.27927399 -212.78762817]
[127.42733765 -221.60272217]
[140.28822327 -229.34088135]
[153.76672363 -235.94477844]
[167.76303101 -241.36555481]
[182.17352295 -245.56307983]
[196.89151001 -248.50624084]
[211.80802917 -250.17326355]
[226.81263733 -250.55181885]
[241.79423523 -249.63909912]
[256.64190674 -247.44184875]
[271.24572754 -243.97634888]
[285.49758911 -239.26823425]
[299.29193115 -233.35240173]
[312.52667236 -226.27262878]
[325.10379028 -218.08131409]
[336.93020630 -208.83914185]
[347.91830444 -198.61451721]
[357.98675537 -187.48313904]
[367.06103516 -175.52743530]
[375.07394409 -162.83590698]
[381.96615601 -149.50253296]
[387.68664551 -135.62602234]
[392.19305420 -121.30912018]
[395.45199585 -106.65782166]
[397.43939209 -91.78060150]
[398.14050293 -76.78760529]
[397.55014038 -61.78984451]
[395.67266846 -46.89835358]
[392.52197266 -32.22338486]
[388.12142944 -17.87359238]
[382.50357056 -3.95521784]
[375.71002197 9.42869091]
[367.79104614 22.17904282]
[358.80532837 34.20143509]
[348.81933594 45.40685654]
[337.90701294 55.71234894]
[326.14920044 65.04161072]
[313.63290405 73.32556915]
[300.45083618 80.50288391]
[286.70053101 86.52043152]
[272.48382568 91.33364868]
[257.90600586 94.90690613]
[243.07495117 97.21374512]
[228.10050964 98.23707581]
[213.09352112 97.96933746]
[198.16510010 96.41250610]
[183.42576599 93.57810974]
[168.98468018 89.48713684]
[154.94871521 84.16986084]
[141.42181396 77.66566467]
[128.50413513 70.02270508]
[119.78477478 82.22814178]
[111.06540680 94.43357849]
[116.18596649 104.41078186]
[111.46838379 117.78948975]
[111.76851654 132.78648376]
[112.06864929 147.78347778]
[112.36878204 162.78047180]
[112.66891479 177.77748108]
[112.96904755 192.77447510]
[113.26918030 207.77146912]
[113.56931305 222.76846313]
[113.86944580 237.76545715]
[128.65750122 240.59512329]
[142.53393555 246.43791199]
[154.89212036 255.03843689]
[165.19181824 266.02069092]
[172.98277283 278.90460205]
[177.92437744 293.12689209]
[179.80061340 308.06588745]
[178.52947998 323.06848145]
[174.16653442 337.47885132]
[166.90248108 350.66699219]
[157.05491638 362.05642700]
[145.05430603 371.14923096]
[131.42526245 377.54788208]
[116.76360321 380.97271729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[56 132]
[57 131]
[58 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
