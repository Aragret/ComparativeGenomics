%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCUUACCAGGGGGGGGGGCGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUxxxxxxxxxxGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCCCCCCCCCCCUCCCUUACCA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 407.25463867]
[71.01555634 401.70162964]
[58.81560135 392.83529663]
[49.20452881 381.21298218]
[42.78650284 367.56527710]
[39.96496582 352.75009155]
[40.91728210 337.69873047]
[45.58358765 323.35729980]
[53.67055511 310.62734985]
[64.66983032 300.30905151]
[77.88998413 293.05108643]
[92.50000000 289.30966187]
[92.50000000 274.30966187]
[92.50000000 259.30966187]
[92.50000000 244.30964661]
[92.50000000 229.30964661]
[92.50000000 214.30964661]
[92.50000000 199.30964661]
[92.50000000 184.30964661]
[92.50000000 169.30964661]
[92.50000000 154.30964661]
[78.66302490 150.50268555]
[66.28804779 143.23532104]
[56.22299194 133.00547791]
[49.15750885 120.51413727]
[45.57572556 106.61716461]
[45.72306061 92.26679993]
[49.58942032 78.44630432]
[56.90988159 66.10265350]
[67.18285370 56.08162689]
[79.70443726 49.06986618]
[93.61666107 45.54780579]
[93.92463684 30.55096817]
[94.23261261 15.55412960]
[94.54058838 0.55729151]
[85.28241730 -15.32719326]
[94.87305450 -29.99226379]
[94.87305450 -44.99226379]
[94.87305450 -59.99226379]
[79.91563416 -61.23131943]
[65.11163330 -63.70132828]
[50.56216049 -67.38541412]
[36.36661911 -72.25841522]
[22.62197304 -78.28703308]
[9.42211723 -85.43009186]
[-3.14277983 -93.63880157]
[-14.98688602 -102.85708618]
[-26.02929306 -113.02196503]
[-36.19456863 -124.06401062]
[-45.41327286 -135.90779114]
[-53.62242889 -148.47238159]
[-60.76596451 -161.67198181]
[-66.79507446 -175.41641235]
[-71.66857910 -189.61178589]
[-75.35318756 -204.16111755]
[-77.82372284 -218.96504211]
[-79.06331635 -233.92240906]
[-79.06349182 -248.93106079]
[-77.82425690 -263.88845825]
[-75.35407257 -278.69244385]
[-71.66981506 -293.24185181]
[-66.79664612 -307.43734741]
[-60.76786423 -321.18191528]
[-53.62464523 -334.38168335]
[-45.41578674 -346.94650269]
[-36.19736481 -358.79049683]
[-26.03235245 -369.83276367]
[-14.99018860 -379.99792480]
[-3.14630222 -389.21649170]
[9.41839886 -397.42547607]
[22.61808586 -404.56884766]
[36.36258698 -410.59780884]
[50.55801392 -415.47116089]
[65.10739136 -419.15557861]
[79.91133881 -421.62594604]
[94.86872864 -422.86535645]
[109.87737274 -422.86535645]
[124.83476257 -421.62594604]
[139.63870239 -419.15557861]
[154.18809509 -415.47116089]
[168.38351440 -410.59780884]
[182.12802124 -404.56884766]
[195.32769775 -397.42547607]
[207.89241028 -389.21649170]
[219.73629761 -379.99792480]
[230.77845764 -369.83276367]
[240.94346619 -358.79049683]
[250.16188049 -346.94650269]
[258.37075806 -334.38168335]
[265.51397705 -321.18191528]
[271.54275513 -307.43734741]
[276.41592407 -293.24185181]
[280.10018921 -278.69244385]
[282.57037354 -263.88845825]
[283.80960083 -248.93106079]
[283.80941772 -233.92240906]
[282.56982422 -218.96504211]
[280.09927368 -204.16111755]
[276.41467285 -189.61178589]
[271.54116821 -175.41641235]
[265.51205444 -161.67198181]
[258.36853027 -148.47238159]
[250.15937805 -135.90779114]
[240.94067383 -124.06401062]
[230.77539062 -113.02196503]
[219.73298645 -102.85708618]
[207.88888550 -93.63880157]
[195.32398987 -85.43009186]
[182.12413025 -78.28703308]
[168.37948608 -72.25841522]
[154.18394470 -67.38541412]
[139.63447571 -63.70132828]
[124.83046722 -61.23131943]
[109.87305450 -59.99226379]
[109.87305450 -44.99226379]
[109.87305450 -29.99226379]
[118.22071075 -21.18438148]
[118.30690765 -8.64787865]
[109.53742981 0.86526912]
[109.22945404 15.86210728]
[108.92147064 30.85894585]
[108.61349487 45.85578156]
[123.47225189 50.45363998]
[136.44183350 59.03926849]
[146.47836304 70.92165375]
[152.77404785 85.14442444]
[154.82218933 100.56285858]
[152.45791626 115.93598938]
[145.87153625 130.02650452]
[135.59315491 141.70031738]
[122.45002747 150.01783752]
[107.50000000 154.30964661]
[107.50000000 169.30964661]
[107.50000000 184.30964661]
[107.50000000 199.30964661]
[107.50000000 214.30964661]
[107.50000000 229.30964661]
[107.50000000 244.30964661]
[107.50000000 259.30966187]
[107.50000000 274.30966187]
[107.50000000 289.30966187]
[122.11001587 293.05108643]
[135.33016968 300.30905151]
[146.32945251 310.62734985]
[154.41641235 323.35729980]
[159.08271790 337.69873047]
[160.03503418 352.75009155]
[157.21350098 367.56527710]
[150.79547119 381.21298218]
[141.18440247 392.83529663]
[128.98443604 401.70162964]
[114.96250153 407.25463867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[32 122]
[33 121]
[34 120]
[35 119]
[37 116]
[38 115]
[39 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
