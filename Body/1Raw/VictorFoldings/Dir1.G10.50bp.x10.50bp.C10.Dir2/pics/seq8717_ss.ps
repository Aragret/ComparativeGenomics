%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACACUUAUGGGGGGGGGGCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUxxxxxxxxxxUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACCCCCCCCCCCUCCACUUAU\
) } def
/len { sequence length } bind def

/coor [
[51.49026108 397.54946899]
[37.64432144 391.53344727]
[25.93566132 382.00402832]
[17.23313713 369.66833496]
[12.18253517 355.44183350]
[11.15864372 340.38015747]
[14.23744297 325.60098267]
[21.19046402 312.20104980]
[31.50174904 301.17471313]
[44.40613174 293.34020996]
[58.94601822 289.27890015]
[58.94601822 274.27890015]
[58.94601822 259.27890015]
[58.94601822 244.27890015]
[58.94601822 229.27890015]
[58.94601822 214.27890015]
[58.94601822 199.27890015]
[58.94601822 184.27890015]
[58.94601822 169.27890015]
[58.94601822 154.27890015]
[50.97808456 166.98764038]
[40.65669632 177.87197876]
[28.38861084 186.50297546]
[14.65731144 192.54048157]
[0.00394718 195.74655151]
[-14.99399757 195.99485779]
[-29.74545670 193.27557373]
[-43.66908264 187.69590759]
[-56.21614075 179.47573853]
[-66.89215851 168.93901062]
[-75.27640533 156.50097656]
[-81.03844452 142.65184021]
[-83.95120239 127.93736267]
[-83.89989471 112.93744659]
[-80.88653564 98.24324036]
[-75.02987671 84.43383789]
[-66.56073761 72.05346680]
[-55.81288147 61.59002686]
[-43.20987701 53.45588303]
[-29.24840736 47.97160339]
[-14.47869015 45.35331726]
[0.51720530 45.70421219]
[15.14829254 49.01045990]
[28.83796501 55.14176559]
[41.04671478 63.85648727]
[51.29339981 74.81118774]
[59.17419815 87.57414246]
[64.37853241 101.64236450]
[66.70129395 116.46143341]
[66.05126190 131.44522095]
[74.56234741 119.09364319]
[83.07344055 106.74207306]
[90.03742218 79.02471924]
[93.44039917 64.41582489]
[89.03561401 49.22015381]
[99.45854950 38.58005524]
[102.86152649 23.97116280]
[106.26451111 9.36226940]
[100.11374664 -2.02289462]
[103.29351044 -14.15170574]
[113.55987549 -20.62542152]
[117.26603699 -35.16035843]
[120.97219849 -49.69529343]
[122.68489075 -64.59719849]
[122.37283325 -79.59394836]
[122.06077576 -94.59070587]
[107.63362122 -99.18808746]
[95.48242950 -108.22286224]
[86.92526245 -120.71500397]
[82.89034271 -135.30946350]
[83.81534576 -150.42312622]
[89.59993744 -164.41659546]
[99.61664581 -175.77195740]
[112.77893829 -183.25746155]
[127.65906525 -186.06115723]
[142.64292908 -183.87889099]
[156.10522461 -176.94738770]
[166.58561707 -166.01853943]
[172.94731140 -152.27781677]
[174.50022888 -137.21569824]
[171.07591248 -122.46602631]
[163.04580688 -109.62873077]
[151.28096008 -100.09630585]
[137.05752563 -94.90275574]
[137.36958313 -79.90600586]
[137.68164062 -64.90924835]
[145.93182373 -77.43660736]
[158.50267029 -85.62036133]
[173.29708862 -88.09528351]
[187.84703064 -84.44849396]
[199.72525024 -75.28836823]
[206.95019531 -62.14301682]
[208.31655884 -47.20537949]
[203.59643555 -32.96738815]
[193.57722473 -21.80426216]
[179.93035889 -15.57825851]
[164.93244934 -15.32801533]
[151.08547974 -21.09527779]
[140.69943237 -31.91794014]
[135.50714111 -45.98913193]
[131.80097961 -31.45419502]
[128.09481812 -16.91926003]
[133.76559448 -0.34089646]
[120.87339783 12.76524734]
[117.47042084 27.37413979]
[114.06744385 41.98303223]
[118.71562958 56.13378143]
[108.04929352 67.81880188]
[104.64630890 82.42769623]
[112.63623047 95.12262726]
[127.27973175 98.37345123]
[141.92323303 101.62427521]
[156.56672668 104.87510681]
[171.21023560 108.12593079]
[185.85372925 111.37675476]
[200.49723816 114.62757874]
[215.96772766 109.18737793]
[228.23646545 120.06902313]
[224.68240356 136.07841492]
[208.96168518 140.74647522]
[197.24641418 129.27108765]
[182.60290527 126.02025604]
[167.95941162 122.76943207]
[153.31590271 119.51860809]
[138.67240906 116.26777649]
[124.02890778 113.01695251]
[109.38540649 109.76612854]
[95.42501068 115.25315857]
[86.91392517 127.60472870]
[78.40283203 139.95629883]
[73.94601440 154.27890015]
[73.94601440 169.27890015]
[73.94601440 184.27890015]
[73.94601440 199.27890015]
[73.94601440 214.27890015]
[73.94601440 229.27890015]
[73.94601440 244.27890015]
[73.94601440 259.27890015]
[73.94601440 274.27890015]
[73.94601440 289.27890015]
[88.48590088 293.34020996]
[101.39028168 301.17471313]
[111.70156860 312.20104980]
[118.65459442 325.60098267]
[121.73339081 340.38015747]
[120.70949554 355.44183350]
[115.65889740 369.66833496]
[106.95637512 382.00402832]
[95.24771118 391.53344727]
[81.40177155 397.54946899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[50 130]
[51 129]
[52 128]
[53 109]
[54 108]
[56 106]
[57 105]
[58 104]
[61 102]
[62 101]
[63 100]
[64 86]
[65 85]
[66 84]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
