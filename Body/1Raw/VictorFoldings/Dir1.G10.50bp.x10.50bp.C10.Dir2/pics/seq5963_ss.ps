%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUUAGGUGGGGGGGGGGUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAxxxxxxxxxxCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAACCCCCCCCCCAAAUUUUGGU\
) } def
/len { sequence length } bind def

/coor [
[88.00611115 549.70178223]
[74.16017151 543.68572998]
[62.45151138 534.15631104]
[53.74898911 521.82061768]
[48.69838715 507.59411621]
[47.67449570 492.53244019]
[50.75329590 477.75326538]
[57.70631409 464.35336304]
[68.01760101 453.32702637]
[80.92198181 445.49252319]
[95.46186829 441.43118286]
[95.46186829 426.43118286]
[95.46186829 411.43118286]
[95.46186829 396.43118286]
[95.46186829 381.43118286]
[95.46186829 366.43118286]
[95.46186829 351.43118286]
[95.46186829 336.43118286]
[95.46186829 321.43118286]
[95.46186829 306.43118286]
[95.46186829 291.43118286]
[79.28626251 285.33178711]
[66.63884735 273.49511719]
[59.45377350 257.69470215]
[58.84378052 240.31306458]
[64.92797852 223.98228455]
[76.80973816 211.18553162]
[92.70874786 203.87951660]
[91.77311707 188.90872192]
[90.83749390 173.93792725]
[89.90186310 158.96713257]
[88.96623230 143.99635315]
[88.03060913 129.02555847]
[87.09497833 114.05476379]
[77.34732819 102.65374756]
[62.70382309 99.40291595]
[48.06032181 96.15209198]
[38.22825241 107.88192749]
[24.06685638 113.68825531]
[8.83032322 112.23683167]
[-3.98010540 103.86118317]
[-11.42068672 90.48596954]
[-11.78162861 75.18472290]
[-4.97999048 61.47354507]
[7.42126179 52.50317383]
[22.57241058 50.33493805]
[36.99183273 55.46707153]
[47.36605453 66.72026062]
[51.31114960 81.50859070]
[65.95465088 84.75941467]
[80.59815216 88.01024628]
[86.24765015 83.07737732]
[83.35315704 68.35929871]
[97.54666138 73.21165466]
[103.19615936 68.27879333]
[101.94928741 53.33070755]
[100.70240784 38.38262177]
[99.45553589 23.43453598]
[98.20866394 8.48644829]
[96.96178436 -6.46163845]
[82.04592896 -8.57469177]
[67.97443390 -13.95434380]
[55.45310974 -22.33075333]
[45.11003113 -33.28376389]
[37.46399689 -46.26397324]
[32.89852905 -60.62030792]
[31.64263153 -75.63265228]
[33.75930023 -90.54799652]
[39.14236069 -104.61818695]
[47.52180481 -117.13748169]
[58.47731781 -127.47790527]
[71.45938110 -135.12078857]
[85.81681824 -139.68278503]
[100.82946777 -140.93504333]
[115.74430084 -138.81475830]
[129.81318665 -133.42829895]
[142.33044434 -125.04581451]
[152.66822815 -114.08779144]
[160.30796814 -101.10388184]
[164.86647034 -86.74533844]
[166.11509705 -71.73238373]
[163.99119568 -56.81806946]
[158.60131836 -42.75048828]
[150.21580505 -30.23525620]
[139.25527954 -19.90014076]
[126.26952362 -12.26354313]
[111.90987396 -7.70851278]
[113.15674591 7.23957396]
[114.40362549 22.18766022]
[115.65049744 37.13574982]
[116.89736938 52.08383560]
[118.14424896 67.03192139]
[124.44981384 71.09268951]
[128.27699280 56.58914948]
[143.25334167 55.74735641]
[148.68171692 69.73065948]
[137.06094360 79.21423340]
[143.36650085 83.27500916]
[157.49130249 78.22624969]
[171.61610413 73.17749023]
[185.74090576 68.12873840]
[199.86572266 63.07997894]
[208.00170898 49.25300980]
[223.90444946 47.13576126]
[235.37469482 58.35239792]
[233.61346436 74.29848480]
[219.97181702 82.74154663]
[204.91447449 77.20478058]
[190.78967285 82.25354004]
[176.66487122 87.30229950]
[162.54006958 92.35105133]
[148.41525269 97.39981079]
[124.00436401 119.43050385]
[102.06576538 113.11913300]
[103.00139618 128.08993530]
[103.93702698 143.06071472]
[104.87265778 158.03150940]
[105.80828094 173.00230408]
[106.74391174 187.97309875]
[107.67954254 202.94387817]
[120.11760712 206.16242981]
[131.12252808 212.75746155]
[139.80125427 222.18197632]
[145.45289612 233.65979004]
[147.62525940 246.24955750]
[146.15104675 258.92193604]
[141.16069031 270.64370728]
[133.07087708 280.46212769]
[122.54978180 287.58221436]
[110.46186829 291.43118286]
[110.46186829 306.43118286]
[110.46186829 321.43118286]
[110.46186829 336.43118286]
[110.46186829 351.43118286]
[110.46186829 366.43118286]
[110.46186829 381.43118286]
[110.46186829 396.43118286]
[110.46186829 411.43118286]
[110.46186829 426.43118286]
[110.46186829 441.43118286]
[125.00175476 445.49252319]
[137.90614319 453.32702637]
[148.21742249 464.35336304]
[155.17044067 477.75326538]
[158.24923706 492.53244019]
[157.22535706 507.59411621]
[152.17474365 521.82061768]
[143.47222900 534.15631104]
[131.76356506 543.68572998]
[117.91762543 549.70178223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 120]
[29 119]
[30 118]
[31 117]
[32 116]
[33 115]
[34 114]
[35 51]
[36 50]
[37 49]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
