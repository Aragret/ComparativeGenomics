%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCAUAAUGGGGGGGGGGCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAxxxxxxxxxxAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCCCCCCCCCCCACCAUAAU\
) } def
/len { sequence length } bind def

/coor [
[61.42514038 396.24938965]
[47.40319824 390.69638062]
[35.20323944 381.83004761]
[25.59216881 370.20773315]
[19.17414474 356.56005859]
[16.35260773 341.74487305]
[17.30492210 326.69348145]
[21.97122765 312.35205078]
[30.05819511 299.62210083]
[41.05746841 289.30383301]
[54.27762985 282.04586792]
[68.88764191 278.30441284]
[68.88764191 263.30441284]
[68.88764191 248.30441284]
[68.88764191 233.30441284]
[68.88764191 218.30441284]
[68.88764191 203.30441284]
[68.88764191 188.30441284]
[68.88764191 173.30441284]
[68.88764191 158.30441284]
[68.88764191 143.30441284]
[68.88764191 128.30441284]
[83.79904938 87.22317505]
[78.09439087 73.35029602]
[71.89866638 66.55258179]
[72.41825104 59.13354111]
[66.99962616 45.14645767]
[61.58099747 31.15937233]
[37.76984787 18.07255936]
[42.79099274 -11.95290565]
[32.68555832 -23.03803825]
[22.58012390 -34.12317276]
[12.47468853 -45.20830536]
[1.98385191 -30.69055557]
[-19.92970467 -24.93012047]
[-34.86571503 -26.31414413]
[-49.80173111 -27.69816971]
[-64.73773956 -29.08219528]
[-79.40153503 -21.74017715]
[-92.94097900 -30.99304008]
[-91.42785645 -47.32223129]
[-76.41873932 -53.92967987]
[-63.35371780 -44.01820755]
[-48.41770554 -42.63418198]
[-33.48168945 -41.25015640]
[-18.54567909 -39.86613083]
[-14.59743786 -46.24275970]
[-27.35069466 -54.13924408]
[-40.10395050 -62.03572464]
[-54.67312241 -65.60493469]
[-55.78053665 -80.56400299]
[-41.89575958 -86.23964691]
[-32.20746994 -74.78898621]
[-19.45421219 -66.89250183]
[-6.70095491 -58.99601746]
[-2.75271368 -65.37264252]
[-10.64919662 -78.12590027]
[-18.54567909 -90.87915802]
[-26.44216156 -103.63241577]
[-34.33864212 -116.38567352]
[-49.56351089 -121.44363403]
[-54.96613312 -136.54963684]
[-46.40208054 -150.11564636]
[-30.44096184 -151.73498535]
[-19.32678032 -140.16542053]
[-21.58538628 -124.28215790]
[-13.68890381 -111.52890015]
[-5.79242182 -98.77564240]
[2.10406089 -86.02238464]
[10.00054359 -73.26912689]
[7.93965149 -88.12687683]
[11.89990902 -102.59465027]
[21.24052238 -114.33146667]
[34.45012665 -121.43824768]
[49.39133072 -122.76507568]
[63.64655685 -118.09725952]
[74.90922546 -108.19007874]
[81.35697174 -94.64656830]
[81.94651794 -79.65815735]
[76.58245850 -65.65005493]
[66.13274384 -54.88885880]
[52.28819275 -49.11578751]
[37.28893280 -49.26495743]
[23.55982208 -55.31373978]
[33.66525650 -44.22860718]
[43.77069092 -33.14347458]
[53.87612534 -22.05834007]
[68.87533569 -21.90434265]
[79.20623779 -32.77965546]
[89.53713989 -43.65497208]
[85.77221680 -58.61588287]
[90.71509552 -73.22996521]
[102.78852081 -82.83392334]
[118.13990784 -84.36316681]
[131.87068176 -77.32971191]
[139.59939575 -63.97792053]
[138.85986328 -48.56829071]
[129.88804626 -36.01798630]
[115.54684448 -30.33176041]
[100.41245270 -33.32406616]
[90.08155060 -22.44875336]
[79.75064850 -11.57344055]
[84.52483368 -3.66587210]
[86.28385925 5.01350975]
[85.06996155 13.40105438]
[81.27515411 20.55071259]
[75.56808472 25.74074745]
[80.98670959 39.72782898]
[86.40533447 53.71491241]
[91.96726990 67.64562988]
[97.67192841 81.51850891]
[99.70307159 66.65666199]
[111.17573547 56.99343491]
[126.16655731 57.51797104]
[136.93574524 67.95944977]
[137.92315674 82.92691803]
[128.61895752 94.69263458]
[113.82495117 97.18152618]
[127.86692810 102.45626831]
[141.90890503 107.73101044]
[155.95088196 113.00575256]
[172.03198242 109.79167938]
[182.65126038 122.28820038]
[176.88450623 137.63996887]
[160.66406250 140.05439758]
[150.67613220 127.04772949]
[136.63415527 121.77298737]
[122.59218597 116.49824524]
[108.55020905 111.22350311]
[102.38456726 115.49372864]
[83.88764191 128.30441284]
[83.88764191 143.30441284]
[83.88764191 158.30441284]
[83.88764191 173.30441284]
[83.88764191 188.30441284]
[83.88764191 203.30441284]
[83.88764191 218.30441284]
[83.88764191 233.30441284]
[83.88764191 248.30441284]
[83.88764191 263.30441284]
[83.88764191 278.30441284]
[98.49765015 282.04586792]
[111.71781158 289.30383301]
[122.71708679 299.62210083]
[130.80404663 312.35205078]
[135.47035217 326.69348145]
[136.42266846 341.74487305]
[133.60113525 356.56005859]
[127.18311310 370.20773315]
[117.57204437 381.83004761]
[105.37208557 390.69638062]
[91.35014343 396.24938965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 111]
[24 110]
[26 109]
[27 108]
[28 107]
[30 87]
[31 86]
[32 85]
[33 84]
[35 46]
[36 45]
[37 44]
[38 43]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[88 102]
[89 101]
[90 100]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
