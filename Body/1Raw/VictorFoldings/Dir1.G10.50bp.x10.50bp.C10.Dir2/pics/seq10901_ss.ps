%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAGUCUGGGGGGGGGGCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCxxxxxxxxxxAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUCCCCCCCCCCACACCAGUCU\
) } def
/len { sequence length } bind def

/coor [
[106.58013916 460.29669189]
[92.73419952 454.28067017]
[81.02554321 444.75125122]
[72.32301331 432.41558838]
[67.27241516 418.18905640]
[66.24851990 403.12738037]
[69.32732391 388.34820557]
[76.28034210 374.94830322]
[86.59162903 363.92196655]
[99.49600983 356.08746338]
[114.03589630 352.02612305]
[114.03589630 337.02612305]
[114.03589630 322.02612305]
[114.03589630 307.02612305]
[114.03589630 292.02612305]
[114.03589630 277.02612305]
[114.03589630 262.02612305]
[114.03589630 247.02613831]
[114.03589630 232.02613831]
[114.03589630 217.02613831]
[129.67047119 176.76258850]
[123.60745239 163.04254150]
[117.54444122 149.32247925]
[111.33903503 135.66624451]
[104.99190521 122.07528687]
[98.64477539 108.48433685]
[94.96048737 110.69349670]
[90.04837036 111.29158783]
[84.57393646 109.80915833]
[79.35369110 106.03500366]
[64.85809326 102.17784119]
[50.36249542 98.32068634]
[32.73672867 103.54678345]
[20.76413155 90.75393677]
[6.19142866 87.19918060]
[-8.41746330 83.79619598]
[-23.06096458 80.54537201]
[-37.70446777 77.29454803]
[-48.58694077 88.22959900]
[-63.65868759 91.52291870]
[-78.11037445 86.12361908]
[-87.33050537 73.75460052]
[-88.37699127 58.36277008]
[-80.91587830 44.85960388]
[-67.32800293 37.55391693]
[-51.94919205 38.77692413]
[-39.68677521 48.13836670]
[-34.45363998 62.65104675]
[-19.81013870 65.90187073]
[-5.16663790 69.15269470]
[2.09177303 67.52140808]
[9.74619102 72.62647247]
[24.31889343 76.18123627]
[34.85600662 70.15823364]
[47.05725098 73.04761505]
[54.21965408 83.82508850]
[68.71525574 87.68224335]
[83.21084595 91.53940582]
[96.06925201 83.81532288]
[99.47222900 69.20642853]
[88.99293518 79.93882751]
[76.13069153 87.65651703]
[61.72966003 91.85297394]
[46.73498917 92.25278473]
[32.13079453 88.82970428]
[18.87555695 81.80840302]
[7.83923388 71.64968109]
[-0.25385392 59.02027512]
[-4.87255001 44.74905777]
[-5.71372557 29.77266121]
[-2.72217345 15.07400036]
[3.90576816 1.61776078]
[13.73510170 -9.71291447]
[26.12071991 -18.17438316]
[40.24974442 -23.21131134]
[55.19487762 -24.49312401]
[69.97525024 -21.93569183]
[83.62082672 -15.70686150]
[95.23603058 -6.21543741]
[104.05854034 5.91565084]
[109.50933075 19.89023018]
[111.23066711 34.79113388]
[109.10827637 49.64508057]
[118.61663818 38.04373932]
[128.12500000 26.44239807]
[137.63336182 14.84105778]
[131.60173035 0.77414072]
[132.80978394 -14.48361778]
[140.97990417 -27.42609787]
[154.23464966 -35.07920837]
[169.52819824 -35.68432617]
[183.34617615 -29.10239792]
[192.51333618 -16.84589958]
[194.92312622 -1.73128676]
[190.02178955 12.76821232]
[178.93562317 23.32072067]
[164.21214294 27.50134659]
[149.23469543 24.34941673]
[139.72633362 35.95075607]
[130.21797180 47.55209732]
[120.70961761 59.15343857]
[114.08112335 72.60940552]
[110.67814636 87.21829987]
[112.23572540 102.13720703]
[118.58285522 115.72816467]
[124.92998505 129.31910706]
[131.43872070 135.82205200]
[131.26449585 143.25947571]
[137.32749939 156.97952271]
[143.39051819 170.69956970]
[145.41862488 155.83731079]
[156.88931274 146.17175293]
[171.88024902 146.69322205]
[182.65158081 157.13250732]
[183.64202881 172.09977722]
[174.34024048 183.86738586]
[159.54673767 186.35929871]
[173.44929504 191.99125671]
[187.35183716 197.62321472]
[201.25439453 203.25517273]
[217.41239929 200.45320129]
[227.70877075 213.21710205]
[221.55148315 228.41642761]
[205.27462769 230.41545105]
[195.62243652 217.15771484]
[181.71989441 211.52577209]
[167.81733704 205.89381409]
[153.91477966 200.26185608]
[147.69505310 204.45292664]
[135.25561523 212.83506775]
[129.03588867 217.02613831]
[129.03588867 232.02613831]
[129.03588867 247.02613831]
[129.03588867 262.02612305]
[129.03588867 277.02612305]
[129.03588867 292.02612305]
[129.03588867 307.02612305]
[129.03588867 322.02612305]
[129.03588867 337.02612305]
[129.03588867 352.02612305]
[143.57577515 356.08746338]
[156.48016357 363.92196655]
[166.79144287 374.94830322]
[173.74447632 388.34820557]
[176.82327271 403.12738037]
[175.79937744 418.18905640]
[170.74877930 432.41558838]
[162.04624939 444.75125122]
[150.33758545 454.28067017]
[136.49165344 460.29669189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 110]
[22 109]
[23 108]
[24 106]
[25 105]
[26 104]
[30 58]
[31 57]
[32 56]
[34 53]
[35 52]
[36 50]
[37 49]
[38 48]
[59 103]
[60 102]
[83 101]
[84 100]
[85 99]
[86 98]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
