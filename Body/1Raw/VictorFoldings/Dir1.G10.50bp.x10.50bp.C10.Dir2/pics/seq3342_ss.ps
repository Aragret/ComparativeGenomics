%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUCUAAUGGGGGGGGGGCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACxxxxxxxxxxCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACCCCCCCCCCCAAUUCUAAU\
) } def
/len { sequence length } bind def

/coor [
[78.14501953 372.15524292]
[64.29907990 366.13922119]
[52.59041595 356.60980225]
[43.88789368 344.27413940]
[38.83729172 330.04760742]
[37.81340027 314.98593140]
[40.89220047 300.20678711]
[47.84522247 286.80685425]
[58.15650558 275.78051758]
[71.06088257 267.94601440]
[85.60077667 263.88470459]
[85.60077667 248.88470459]
[85.60077667 233.88470459]
[85.60077667 218.88470459]
[85.60077667 203.88470459]
[85.60077667 188.88470459]
[85.60077667 173.88470459]
[85.60077667 158.88470459]
[85.60077667 143.88470459]
[85.60077667 128.88470459]
[74.09896851 119.25617218]
[59.33291245 121.89503479]
[55.25258636 135.31132507]
[45.82435226 145.60206604]
[32.93856049 150.78872681]
[19.14249420 149.90766907]
[7.13685846 143.18875122]
[-0.75291294 131.99899292]
[-15.57067108 134.33009338]
[-30.38842964 136.66119385]
[-45.20618820 138.99229431]
[-60.02394485 141.32341003]
[-74.73099518 149.75779724]
[-86.90708923 137.96037292]
[-78.94139099 122.99427795]
[-62.35504913 126.50564575]
[-47.53729248 124.17454529]
[-32.71953201 121.84343719]
[-17.90177536 119.51233673]
[-3.08401680 117.18122864]
[2.33198428 101.98851776]
[14.73007202 91.52574921]
[30.80157089 88.70849609]
[46.19495392 94.39526367]
[56.69404984 107.12898254]
[71.46010590 104.49011993]
[74.38330841 91.12995148]
[82.77204895 81.43531036]
[93.97711182 77.23856354]
[104.97640991 78.81383514]
[113.22869873 66.28787231]
[121.48098755 53.76191330]
[128.93589783 40.74560165]
[135.56439209 27.28963661]
[138.35671997 12.55183125]
[137.10984802 -2.39625549]
[135.86297607 -17.34434319]
[134.46067810 -32.27864838]
[132.90309143 -47.19756317]
[131.34550476 -62.11647415]
[129.78793335 -77.03538513]
[128.23034668 -91.95429993]
[113.34733582 -94.48385620]
[99.69919586 -100.93603516]
[88.29869080 -110.83205414]
[79.99182129 -123.43754578]
[75.39501953 -137.81710815]
[74.84938812 -152.90368652]
[78.39542389 -167.57775879]
[85.76998138 -180.75039673]
[96.42582703 -191.44412231]
[109.57221985 -198.86537170]
[124.23361206 -202.46343994]
[139.32203674 -201.97134399]
[153.71781921 -197.42558289]
[166.35270691 -189.16348267]
[176.28910828 -177.79817200]
[182.78967285 -164.17298889]
[185.37200928 -149.29905701]
[183.84451294 -134.28009033]
[178.32051086 -120.23060608]
[169.20991516 -108.19317627]
[157.18882751 -99.06104279]
[143.14926147 -93.51187897]
[144.70684814 -78.59296417]
[146.26441956 -63.67405701]
[147.82200623 -48.75514221]
[149.37957764 -33.83623123]
[153.22712708 -27.46896744]
[150.81106567 -18.59121704]
[152.05793762 -3.64313006]
[153.30480957 11.30495739]
[160.05400085 -2.09087992]
[169.56579590 -13.68939686]
[181.38101196 -22.93064880]
[194.92922974 -29.36849022]
[209.55638123 -32.69212341]
[224.55630493 -32.74108887]
[239.20483398 -29.51302528]
[252.79479980 -23.16377258]
[264.67010498 -13.99985790]
[274.25741577 -2.46368837]
[281.09393311 10.88779926]
[284.84954834 25.41003036]
[285.34301758 40.40191269]
[282.55044556 55.13967514]
[276.60671997 68.91181946]
[267.79873657 81.05346680]
[256.55175781 90.97843933]
[243.40872192 98.20760345]
[229.00416565 102.39193726]
[214.03347778 103.32944489]
[199.21943665 100.97485352]
[185.27720642 95.44184875]
[172.87988281 86.99755096]
[162.62596130 76.04961395]
[155.01049805 63.12658310]
[150.40113831 48.85234833]
[149.02037048 33.91813660]
[142.39186096 47.37409973]
[157.00770569 44.00111771]
[169.82870483 51.78712845]
[173.57568359 66.31159973]
[166.12127686 79.32819366]
[151.69776917 83.44670105]
[138.49414062 76.32881165]
[134.00695801 62.01420212]
[125.75466156 74.54016113]
[117.50237274 87.06612396]
[122.73011017 111.17102051]
[100.60077667 128.88470459]
[100.60077667 143.88470459]
[100.60077667 158.88470459]
[100.60077667 173.88470459]
[100.60077667 188.88470459]
[100.60077667 203.88470459]
[100.60077667 218.88470459]
[100.60077667 233.88470459]
[100.60077667 248.88470459]
[100.60077667 263.88470459]
[115.14066315 267.94601440]
[128.04504395 275.78051758]
[138.35632324 286.80685425]
[145.30934143 300.20678711]
[148.38815308 314.98593140]
[147.36425781 330.04760742]
[142.31365967 344.27413940]
[133.61112976 356.60980225]
[121.90246582 366.13922119]
[108.05652618 372.15524292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 46]
[22 45]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[50 129]
[51 128]
[52 127]
[53 120]
[54 119]
[55 92]
[56 91]
[57 90]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
