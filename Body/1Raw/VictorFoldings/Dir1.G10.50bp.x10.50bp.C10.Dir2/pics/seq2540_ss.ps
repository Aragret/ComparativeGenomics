%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGCAUAAGGGGGGGGGGGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUAxxxxxxxxxxAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCCCCCCCCCCCUCCGCAUGA\
) } def
/len { sequence length } bind def

/coor [
[103.57032013 405.17120361]
[89.72438049 399.15518188]
[78.01571655 389.62576294]
[69.31319427 377.29010010]
[64.26258850 363.06356812]
[63.23869705 348.00189209]
[66.31749725 333.22274780]
[73.27051544 319.82281494]
[83.58180237 308.79647827]
[96.48618317 300.96197510]
[111.02606964 296.90066528]
[111.02606964 281.90066528]
[111.02606964 266.90066528]
[111.02606964 251.90066528]
[111.02606964 236.90066528]
[111.02606964 221.90066528]
[111.02606964 206.90066528]
[111.02606964 191.90066528]
[111.02606964 176.90066528]
[111.02606964 161.90066528]
[111.02606964 146.90066528]
[108.29570007 142.91059875]
[108.08719635 137.14971924]
[111.35111237 131.27992249]
[111.97509003 116.29291534]
[95.48188019 117.80658722]
[85.05223083 107.03701782]
[70.05953217 106.56896973]
[55.06683731 106.10092926]
[40.07414246 105.63288879]
[25.08144569 105.16484833]
[18.86083794 119.03468323]
[7.80255604 129.46458435]
[-6.40709114 134.86407471]
[-21.60123634 134.40974426]
[-35.46288300 128.17089844]
[-45.87822723 117.09889984]
[-51.25901031 102.88216400]
[-50.78469849 87.68862915]
[-44.52762222 73.83520508]
[-33.44193649 63.43443298]
[-19.21813393 58.07235718]
[-4.02523756 58.56665421]
[9.81994629 64.84194946]
[20.20612717 75.94130707]
[25.54948807 90.17214966]
[40.54218292 90.64019012]
[55.53487778 91.10823059]
[70.52757263 91.57627869]
[85.52027130 92.04431915]
[94.99127197 82.96680450]
[109.04289246 83.30433655]
[119.36434937 94.17902374]
[127.87543488 81.82744598]
[116.29375458 72.28040314]
[105.57566833 61.77307129]
[95.80052185 50.38325119]
[87.04069519 38.19527054]
[79.36103821 25.29936600]
[72.81842041 11.79101372]
[67.46127319 -2.22977114]
[63.32926178 -16.65918350]
[60.45298004 -31.39038849]
[58.85372162 -46.31432343]
[58.54332733 -61.32049179]
[59.52409363 -76.29779053]
[61.78876114 -91.13533783]
[65.32056427 -105.72327423]
[70.09335327 -119.95359039]
[76.07178497 -133.72093201]
[83.21160889 -146.92337036]
[91.45995331 -159.46315002]
[100.75575256 -171.24745178]
[111.03018188 -182.18899536]
[122.20717621 -192.20680237]
[134.20397949 -201.22666931]
[146.93176270 -209.18185425]
[160.29631042 -216.01342773]
[174.19866943 -221.67082214]
[188.53588867 -226.11215210]
[203.20184326 -229.30453491]
[218.08793640 -231.22431946]
[233.08395386 -231.85733032]
[248.07888794 -231.19883728]
[262.96170044 -229.25373840]
[277.62219238 -226.03643799]
[291.95184326 -221.57075500]
[305.84457397 -215.88972473]
[319.19747925 -209.03544617]
[331.91174316 -201.05865479]
[343.89318848 -192.01840210]
[355.05313110 -181.98161316]
[365.30895996 -171.02261353]
[374.58471680 -159.22254944]
[382.81173706 -146.66876221]
[389.92910767 -133.45419312]
[395.88412476 -119.67671204]
[400.63272095 -105.43830872]
[404.13970947 -90.84439087]
[406.37918091 -76.00302124]
[407.33447266 -61.02407074]
[406.99856567 -46.01845169]
[405.37396240 -31.09725761]
[402.47262573 -16.37096214]
[398.31610107 -1.94859409]
[392.93515015 12.06306553]
[386.36956787 25.56027794]
[378.66799927 38.44311142]
[369.88748169 50.61618423]
[360.09298706 61.98937225]
[349.35705566 72.47846985]
[337.75915527 82.00582123]
[325.38519287 90.50087738]
[312.32672119 97.90074921]
[298.68048096 104.15065765]
[284.54745483 109.20431519]
[270.03231812 113.02432251]
[255.24253845 115.58238220]
[240.28759766 116.85955811]
[225.27822876 116.84639740]
[210.32556152 115.54299927]
[195.54028320 112.95900726]
[181.03186035 109.11356354]
[166.90774536 104.03512573]
[153.27247620 97.76129913]
[140.22700500 90.33853912]
[131.71592712 102.69010925]
[126.96210480 116.91689301]
[126.33812714 131.90390015]
[126.02606964 146.90066528]
[126.02606964 161.90066528]
[126.02606964 176.90066528]
[126.02606964 191.90066528]
[126.02606964 206.90066528]
[126.02606964 221.90066528]
[126.02606964 236.90066528]
[126.02606964 251.90066528]
[126.02606964 266.90066528]
[126.02606964 281.90066528]
[126.02606964 296.90066528]
[140.56596375 300.96197510]
[153.47033691 308.79647827]
[163.78161621 319.82281494]
[170.73464966 333.22274780]
[173.81344604 348.00189209]
[172.78955078 363.06356812]
[167.73895264 377.29010010]
[159.03642273 389.62576294]
[147.32775879 399.15518188]
[133.48182678 405.17120361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[53 127]
[54 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
