%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAACACGGGGGGGGGGUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCxxxxxxxxxxAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCCCCCCCCCCCUCAACAC\
) } def
/len { sequence length } bind def

/coor [
[121.32305908 388.95370483]
[107.47711945 382.93768311]
[95.76846313 373.40826416]
[87.06593323 361.07257080]
[82.01533508 346.84606934]
[80.99143982 331.78439331]
[84.07024384 317.00521851]
[91.02326202 303.60528564]
[101.33454895 292.57894897]
[114.23892975 284.74444580]
[128.77880859 280.68313599]
[128.77880859 265.68313599]
[128.77880859 250.68313599]
[128.77880859 235.68313599]
[128.77880859 220.68313599]
[128.77880859 205.68313599]
[128.77880859 190.68313599]
[128.77880859 175.68313599]
[128.77880859 160.68313599]
[128.77880859 145.68313599]
[128.77880859 130.68313599]
[128.77880859 115.68313599]
[105.33490753 129.77136230]
[81.78244019 120.88835907]
[74.83373260 98.96930695]
[60.70893097 93.92054749]
[46.58412552 88.87179565]
[32.45932388 83.82303619]
[19.99566650 94.64134979]
[3.87286019 97.69923401]
[-11.50979042 92.25827026]
[-22.00312805 79.88604736]
[-24.82723618 64.00599670]
[-39.05401611 59.25218201]
[-53.28079605 54.49836731]
[-67.50757599 49.74455261]
[-81.73435211 44.99073792]
[-96.05695343 40.53392410]
[-110.46916962 36.37603378]
[-124.88138580 32.21814728]
[-139.29359436 28.06026077]
[-153.00582886 35.91839981]
[-168.23628235 31.69835854]
[-175.94900513 17.90381432]
[-171.56817627 2.71882606]
[-157.69285583 -4.84762287]
[-142.55503845 -0.30649284]
[-135.13571167 13.64804459]
[-120.72349548 17.80593300]
[-106.31127930 21.96381950]
[-91.89906311 26.12170792]
[-87.30851746 24.60433960]
[-81.71557617 26.00088310]
[-76.98053741 30.76395988]
[-62.75375748 35.51777267]
[-48.52698135 40.27159119]
[-34.30020142 45.02540588]
[-20.07342148 49.77922058]
[-10.43882275 40.05122375]
[2.51405454 35.41418839]
[16.26543236 36.83097076]
[28.11385155 44.08079147]
[35.70687866 55.79134369]
[37.50807953 69.69823456]
[51.63288116 74.74698639]
[65.75768280 79.79574585]
[79.88249207 84.84450531]
[96.47303772 71.23438263]
[120.63786316 74.53905487]
[121.26184082 59.55204010]
[107.77344513 52.40879440]
[98.72706604 40.11546707]
[95.91888428 25.11290741]
[99.90644836 10.37988186]
[109.89804077 -1.15835631]
[123.90980530 -7.21088028]
[139.15971375 -6.57595778]
[152.61987305 0.62034732]
[161.61776733 12.94920349]
[164.36685181 27.96270752]
[160.32130432 42.67991638]
[150.28434753 54.17871857]
[136.24885559 60.17601776]
[135.62487793 75.16303253]
[148.31980896 83.15294647]
[161.56239319 76.10781097]
[174.80497742 69.06268311]
[183.35429382 55.75028229]
[198.22444153 56.60338593]
[211.46702576 49.55825043]
[220.01634216 36.24585342]
[234.88648987 37.09895325]
[248.12907410 30.05381966]
[261.37167358 23.00868416]
[274.61425781 15.96354961]
[273.95050049 0.71487093]
[279.97656250 -13.30830956]
[291.49588013 -23.32167816]
[306.22137451 -27.33707428]
[321.22918701 -24.55723763]
[333.53961182 -15.53410721]
[340.70831299 -2.05923104]
[341.31198120 13.19194412]
[335.23077393 27.19128418]
[323.67208862 37.15921402]
[308.93093872 41.11658859]
[293.93414307 38.27767563]
[281.65939331 29.20613480]
[268.41680908 36.25127029]
[255.17420959 43.29640579]
[241.93162537 50.34154129]
[234.32951355 63.15002060]
[218.51216125 62.80083466]
[205.26957703 69.84597015]
[197.66746521 82.65444946]
[181.85011292 82.30526733]
[168.60752869 89.35040283]
[155.36494446 96.39553833]
[169.19641113 90.59117126]
[184.11459351 92.15561676]
[196.44099426 100.70311737]
[203.13616943 114.12603760]
[202.54922485 129.11454773]
[194.82487488 141.97279358]
[181.86779785 149.53019714]
[166.87295532 149.92324829]
[153.53775024 143.05503845]
[145.15039062 130.61911011]
[143.77880859 115.68313599]
[143.77880859 130.68313599]
[143.77880859 145.68313599]
[143.77880859 160.68313599]
[143.77880859 175.68313599]
[143.77880859 190.68313599]
[143.77880859 205.68313599]
[143.77880859 220.68313599]
[143.77880859 235.68313599]
[143.77880859 250.68313599]
[143.77880859 265.68313599]
[143.77880859 280.68313599]
[158.31869507 284.74444580]
[171.22308350 292.57894897]
[181.53436279 303.60528564]
[188.48739624 317.00521851]
[191.56619263 331.78439331]
[190.54229736 346.84606934]
[185.49169922 361.07257080]
[176.78916931 373.40826416]
[165.08050537 382.93768311]
[151.23457336 388.95370483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 67]
[26 66]
[27 65]
[28 64]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 51]
[39 50]
[40 49]
[41 48]
[69 84]
[70 83]
[85 118]
[86 117]
[87 116]
[89 114]
[90 113]
[92 111]
[93 110]
[94 109]
[95 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
