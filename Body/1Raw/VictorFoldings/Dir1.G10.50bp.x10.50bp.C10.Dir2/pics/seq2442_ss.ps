%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAUAUAAGGGGGGGGGGCUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUxxxxxxxxxxAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAACCCCCCCCCCAAACACAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.41900635]
[71.19830322 353.40295410]
[59.48964310 343.87353516]
[50.78712082 331.53787231]
[45.73651886 317.31137085]
[44.71262741 302.24966431]
[47.79142761 287.47052002]
[54.74444962 274.07058716]
[65.05573273 263.04425049]
[77.96011353 255.20974731]
[92.50000000 251.14843750]
[92.50000000 236.14843750]
[92.50000000 221.14843750]
[92.50000000 206.14843750]
[92.50000000 191.14843750]
[92.50000000 176.14843750]
[92.50000000 161.14843750]
[92.50000000 146.14843750]
[92.50000000 131.14843750]
[92.50000000 116.14843750]
[82.22683716 111.41080475]
[75.56371307 100.13435364]
[62.03952026 106.62251282]
[48.51533127 113.11067963]
[41.85908890 127.70773315]
[26.26218224 131.46485901]
[13.68921947 121.49991608]
[13.78510475 105.45714569]
[26.47628212 95.64319611]
[42.02716827 99.58649445]
[55.55135727 93.09832764]
[69.07554626 86.61016083]
[54.07704544 86.39816284]
[42.34662628 77.04951477]
[38.79328537 62.47646332]
[44.90402985 48.77760315]
[58.12162018 41.68568039]
[72.91470337 44.16855240]
[83.09262085 55.18717575]
[84.39576721 70.13166046]
[89.88279724 56.17127609]
[95.36982727 42.21088409]
[100.85686493 28.25049400]
[106.34389496 14.29010487]
[92.83769226 7.74752951]
[79.87195587 0.19025570]
[67.52276611 -8.33736706]
[55.86260223 -17.78529358]
[44.95988846 -28.09808159]
[34.87860870 -39.21520615]
[25.67791939 -51.07143402]
[17.41181755 -63.59717941]
[10.12881374 -76.71894073]
[3.87164688 -90.35971069]
[-1.32296276 -104.43943787]
[-5.42453098 -118.87550354]
[-8.40898800 -133.58317566]
[-10.25881958 -148.47616577]
[-10.96316910 -163.46704102]
[-10.51790524 -178.46786499]
[-8.92563915 -193.39057922]
[-6.19571495 -208.14761353]
[-2.34415412 -222.65238953]
[2.60644102 -236.81974792]
[8.62701797 -250.56658936]
[15.68224525 -263.81219482]
[23.73072052 -276.47888184]
[32.72520828 -288.49230957]
[42.61292648 -299.78192139]
[53.33585358 -310.28152466]
[64.83105469 -319.92947388]
[77.03107452 -328.66918945]
[89.86431885 -336.44931030]
[103.25547791 -343.22424316]
[117.12596130 -348.95419312]
[131.39437866 -353.60556030]
[145.97697449 -357.15106201]
[160.78819275 -359.56982422]
[175.74111938 -360.84771729]
[190.74798584 -360.97720337]
[205.72071838 -359.95755005]
[220.57147217 -357.79473877]
[235.21308899 -354.50143433]
[249.55964661 -350.09698486]
[263.52694702 -344.60723877]
[277.03302002 -338.06442261]
[289.99862671 -330.50689697]
[302.34765625 -321.97903442]
[314.00762939 -312.53088379]
[324.91015625 -302.21789551]
[334.99121094 -291.10058594]
[344.19168091 -279.24417114]
[352.45755005 -266.71826172]
[359.74029541 -253.59637451]
[365.99722290 -239.95549011]
[371.19155884 -225.87565613]
[375.29284668 -211.43951416]
[378.27703857 -196.73178101]
[380.12658691 -181.83877563]
[380.83062744 -166.84786987]
[380.38510132 -151.84706116]
[378.79254150 -136.92437744]
[376.06234741 -122.16738892]
[372.21051025 -107.66269684]
[367.25964355 -93.49542236]
[361.23880005 -79.74870300]
[354.18331909 -66.50321198]
[346.13461304 -53.83668137]
[337.13989258 -41.82344818]
[327.25195312 -30.53400612]
[316.52883911 -20.03460693]
[305.03344727 -10.38686848]
[292.83325195 -1.64740729]
[279.99987793 6.13248968]
[266.60858154 12.90716553]
[252.73799133 18.63686371]
[238.46949768 23.28796196]
[223.88682556 26.83316040]
[209.07556152 29.25165939]
[194.12261963 30.52926254]
[179.11575317 30.65847397]
[164.14302063 29.63853455]
[149.29231262 27.47542953]
[134.65075684 24.18185425]
[120.30428314 19.77713585]
[114.81725311 33.73752594]
[109.33022308 47.69791412]
[103.84318542 61.65830612]
[98.35615540 75.61869812]
[120.45874023 94.75293732]
[107.50000000 116.14843750]
[107.50000000 131.14843750]
[107.50000000 146.14843750]
[107.50000000 161.14843750]
[107.50000000 176.14843750]
[107.50000000 191.14843750]
[107.50000000 206.14843750]
[107.50000000 221.14843750]
[107.50000000 236.14843750]
[107.50000000 251.14843750]
[122.03988647 255.20974731]
[134.94427490 263.04425049]
[145.25555420 274.07058716]
[152.20857239 287.47052002]
[155.28736877 302.24966431]
[154.26348877 317.31137085]
[149.21287537 331.53787231]
[140.51036072 343.87353516]
[128.80169678 353.40295410]
[114.95575714 359.41900635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 32]
[23 31]
[24 30]
[40 129]
[41 128]
[42 127]
[43 126]
[44 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
