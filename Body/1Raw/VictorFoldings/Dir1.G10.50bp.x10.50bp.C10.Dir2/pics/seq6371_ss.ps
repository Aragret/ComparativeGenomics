%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUAGUAAGGGGGGGGGGUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCxxxxxxxxxxUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUCCCCCCCCCCUUUAUAGUAA\
) } def
/len { sequence length } bind def

/coor [
[93.11572266 379.80065918]
[79.26978302 373.78463745]
[67.56111908 364.25521851]
[58.85859680 351.91952515]
[53.80799484 337.69302368]
[52.78410339 322.63134766]
[55.86290359 307.85217285]
[62.81592560 294.45223999]
[73.12721252 283.42590332]
[86.03159332 275.59140015]
[100.57147980 271.53009033]
[100.57147980 256.53009033]
[100.57147980 241.53009033]
[100.57147980 226.53009033]
[100.57147980 211.53009033]
[100.57147980 196.53009033]
[100.57147980 181.53009033]
[100.57147980 166.53009033]
[100.57147980 151.53009033]
[100.57147980 136.53009033]
[87.28206635 133.34573364]
[76.39352417 125.62731171]
[69.33462524 114.67758179]
[66.92189789 102.19969940]
[69.27031708 90.03409576]
[75.80958557 79.88729095]
[85.39910889 73.09262848]
[81.69294739 58.55768967]
[77.98678589 44.02275467]
[74.28062439 29.48781776]
[70.57446289 14.95288181]
[54.02543640 3.70190096]
[55.47488022 -17.82630920]
[48.29237366 -30.99489212]
[40.97326660 -44.08804703]
[33.51835632 -57.10435486]
[26.06344604 -70.12066650]
[18.60853577 -83.13697815]
[13.00839329 -86.84452057]
[10.54077911 -92.05433655]
[11.12718010 -96.85346985]
[4.22018194 -110.16862488]
[-2.68681669 -123.48377991]
[-12.66954327 -134.67955017]
[-25.10898399 -143.06169128]
[-34.03706360 -145.28457642]
[-37.71752930 -151.74984741]
[-49.97989655 -160.38896179]
[-62.24226379 -169.02809143]
[-74.50463104 -177.66720581]
[-90.87699890 -178.60398865]
[-98.00922394 -193.37095642]
[-88.56428528 -206.77711487]
[-72.25832367 -205.03135681]
[-65.86551666 -189.92956543]
[-53.60314941 -181.29045105]
[-41.34078217 -172.65133667]
[-29.07841301 -164.01222229]
[-16.72684097 -155.50112915]
[-4.28739977 -147.11898804]
[-10.56723595 -160.74116516]
[-13.47152138 -175.45732117]
[-12.83773041 -190.44392395]
[-8.70133018 -204.86231995]
[-1.29379690 -217.90563965]
[8.97034073 -228.84399414]
[21.51669502 -237.06524658]
[35.64316559 -242.10934448]
[50.55922699 -243.69400024]
[65.43016815 -241.73054504]
[79.42379761 -236.32885742]
[91.75703430 -227.79121399]
[101.73969269 -216.59538269]
[108.81314087 -203.36790466]
[112.58155060 -188.84898376]
[112.83403778 -173.85110474]
[109.55646515 -159.21356201]
[102.93225098 -145.75549316]
[93.33209991 -134.22999573]
[81.29322815 -125.28205872]
[67.48934174 -119.41241455]
[52.69291687 -116.94952393]
[37.73196793 -118.03121185]
[23.44372177 -122.59695435]
[10.62833881 -130.39077759]
[17.53533745 -117.07562256]
[24.44233704 -103.76046753]
[31.62484550 -90.59188843]
[39.07975388 -77.57557678]
[46.53466415 -64.55926514]
[53.98957443 -51.54295731]
[60.08246613 -47.27419281]
[61.46095276 -38.17740250]
[68.64346313 -25.00881767]
[83.31999207 -21.91049576]
[89.07904816 -37.26514816]
[105.29827118 -39.68769836]
[115.29271698 -26.68603897]
[108.78095245 -11.63516140]
[92.46172333 -10.01811695]
[106.26609802 -15.88661671]
[120.77429199 -12.07712746]
[129.91487122 -0.18385763]
[129.86264038 14.81605148]
[120.63946533 26.64538193]
[106.10509491 30.35375023]
[92.34191895 24.38926315]
[85.10939789 11.24672031]
[88.81555939 25.78165627]
[92.52172089 40.31659317]
[96.22788239 54.85152817]
[99.93404388 69.38646698]
[119.86828613 74.17015839]
[133.42326355 91.20559692]
[133.64286804 114.24539185]
[147.54542542 119.87734985]
[161.44798279 125.50930786]
[175.35054016 131.14126587]
[188.44561768 122.81668091]
[203.93069458 123.81263733]
[215.85145569 133.74617004]
[219.62411499 148.79763794]
[213.79801941 163.17944336]
[200.61340332 171.36148071]
[185.14004517 170.19760132]
[173.32774353 160.13533020]
[169.71858215 145.04382324]
[155.81602478 139.41186523]
[141.91346741 133.77990723]
[128.01091003 128.14794922]
[115.57147980 136.53009033]
[115.57147980 151.53009033]
[115.57147980 166.53009033]
[115.57147980 181.53009033]
[115.57147980 196.53009033]
[115.57147980 211.53009033]
[115.57147980 226.53009033]
[115.57147980 241.53009033]
[115.57147980 256.53009033]
[115.57147980 271.53009033]
[130.11135864 275.59140015]
[143.01574707 283.42590332]
[153.32702637 294.45223999]
[160.28004456 307.85217285]
[163.35885620 322.63134766]
[162.33496094 337.69302368]
[157.28436279 351.91952515]
[148.58183289 364.25521851]
[136.87316895 373.78463745]
[123.02722931 379.80065918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
[33 94]
[34 93]
[35 91]
[36 90]
[37 89]
[38 88]
[41 87]
[42 86]
[43 85]
[44 60]
[45 59]
[47 58]
[48 57]
[49 56]
[50 55]
[95 100]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
