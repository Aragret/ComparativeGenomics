%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCCGAUUGGGGGGGGGGCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCAxxxxxxxxxxAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGCCCCCCCCCCUACUCCCGAUU\
) } def
/len { sequence length } bind def

/coor [
[84.07964325 375.96829224]
[70.05770111 370.41528320]
[57.85774231 361.54895020]
[48.24666977 349.92663574]
[41.82864380 336.27893066]
[39.00711060 321.46374512]
[39.95942307 306.41238403]
[44.62572861 292.07095337]
[52.71269608 279.34100342]
[63.71197128 269.02273560]
[76.93212891 261.76473999]
[91.54214478 258.02331543]
[91.54214478 243.02331543]
[91.54214478 228.02331543]
[91.54214478 213.02331543]
[91.54214478 198.02331543]
[91.54214478 183.02331543]
[91.54214478 168.02331543]
[91.54214478 153.02331543]
[91.54214478 138.02331543]
[91.54214478 123.02331543]
[91.54214478 108.02331543]
[87.73428345 93.51468658]
[80.36804199 80.44799042]
[73.00180817 67.38129425]
[54.61030197 63.04074097]
[45.33422089 46.94304657]
[50.61755371 29.46267509]
[42.72106934 16.70941734]
[35.49713516 11.01639271]
[34.79649353 3.61225200]
[27.16352463 -9.30044556]
[13.55400848 -2.96421146]
[-0.61104006 2.00752902]
[-15.19519997 5.56689358]
[-30.05801392 7.67960215]
[-45.05634308 8.32530880]
[-60.04573822 7.49779320]
[-74.88184357 5.20502663]
[-89.42177582 1.46908963]
[-103.52549744 -3.67403793]
[-117.05718994 -10.17482376]
[-129.88652039 -17.97065926]
[-141.88993835 -26.98646545]
[-152.95184326 -37.13541412]
[-162.96568298 -48.31975937]
[-171.83505249 -60.43178940]
[-179.47448730 -73.35485077]
[-185.81045532 -86.96450043]
[-190.78190613 -101.12964630]
[-194.34098816 -115.71387482]
[-196.45339966 -130.57673645]
[-197.09880066 -145.57507324]
[-196.27099609 -160.56445312]
[-193.97792053 -175.40051270]
[-190.24169922 -189.94036865]
[-185.09828186 -204.04399109]
[-178.59722900 -217.57554626]
[-170.80113220 -230.40472412]
[-161.78509521 -242.40795898]
[-151.63592529 -253.46965027]
[-140.45138550 -263.48327637]
[-128.33917236 -272.35238647]
[-115.41595459 -279.99157715]
[-101.80618286 -286.32727051]
[-87.64093781 -291.29846191]
[-73.05663300 -294.85723877]
[-58.19373703 -296.96936035]
[-43.19538116 -297.61447144]
[-28.20601845 -296.78634644]
[-13.37000465 -294.49298096]
[1.16977620 -290.75646973]
[15.27329445 -285.61276245]
[28.80472183 -279.11145020]
[41.63374329 -271.31509399]
[53.63679886 -262.29879761]
[64.69829559 -252.14941406]
[74.71170044 -240.96467590]
[83.58057404 -228.85229492]
[91.21950531 -215.92892456]
[97.55492401 -202.31901550]
[102.52581024 -188.15367126]
[106.08429718 -173.56930542]
[108.19612122 -158.70635986]
[108.84092712 -143.70799255]
[108.01251221 -128.71864319]
[105.71885681 -113.88268280]
[101.98204041 -99.34297180]
[96.83807373 -85.23955536]
[90.33647156 -71.70825958]
[82.53986359 -58.87939835]
[73.52333832 -46.87652206]
[63.37372971 -35.81522751]
[52.18878555 -25.80204773]
[40.07622147 -16.93341637]
[47.70919037 -4.02071810]
[55.47432709 8.81293583]
[63.37081146 21.56619263]
[74.85068512 21.71979332]
[84.92083740 27.47990608]
[90.99772644 37.50304413]
[91.45755005 49.33580399]
[86.06849670 60.01505661]
[93.43473816 73.08174896]
[100.80097961 86.14844513]
[113.30501556 94.43392181]
[128.20945740 96.12432098]
[143.11390686 97.81472015]
[158.01835632 99.50511169]
[174.68931580 91.75206757]
[188.40692139 102.65491486]
[203.34292603 104.03894043]
[218.27894592 105.42296600]
[229.26496887 94.29457092]
[244.83871460 92.88289642]
[257.64669800 101.85447693]
[261.64141846 116.97322083]
[254.93666077 131.10050964]
[240.69822693 137.56587219]
[225.64906311 133.31655884]
[216.89491272 120.35897827]
[201.95890808 118.97495270]
[187.02288818 117.59092712]
[177.48236084 125.09028625]
[164.99137878 124.01939392]
[156.32795715 114.40956116]
[141.42350769 112.71916199]
[126.51906586 111.02877045]
[111.61461639 109.33837128]
[108.95982361 108.89849091]
[106.54214478 108.02331543]
[106.54214478 123.02331543]
[106.54214478 138.02331543]
[106.54214478 153.02331543]
[106.54214478 168.02331543]
[106.54214478 183.02331543]
[106.54214478 198.02331543]
[106.54214478 213.02331543]
[106.54214478 228.02331543]
[106.54214478 243.02331543]
[106.54214478 258.02331543]
[121.15215302 261.76473999]
[134.37231445 269.02273560]
[145.37158203 279.34100342]
[153.45855713 292.07095337]
[158.12486267 306.41238403]
[159.07717896 321.46374512]
[156.25564575 336.27893066]
[149.83761597 349.92663574]
[140.22654724 361.54895020]
[128.02658081 370.41528320]
[114.00463867 375.96829224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 105]
[24 104]
[25 103]
[28 98]
[29 97]
[31 96]
[32 95]
[106 129]
[107 128]
[108 127]
[109 126]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
