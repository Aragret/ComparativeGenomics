%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCAUACAGGGGGGGGGGCAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUxxxxxxxxxxUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCCCCCCCCCCCAUAAUCAUACA\
) } def
/len { sequence length } bind def

/coor [
[67.71195984 405.17617798]
[55.37884903 396.52505493]
[45.28039932 385.34609985]
[37.92314529 372.20004272]
[33.67612457 357.74630737]
[32.75236511 342.70986938]
[35.19820404 327.84497070]
[40.89095688 313.89718628]
[49.54507828 301.56619263]
[60.72648239 291.47042847]
[73.87431335 284.11636353]
[88.32907867 279.87286377]
[87.40567017 264.90130615]
[86.48225403 249.92976379]
[85.55883789 234.95820618]
[84.63542938 219.98666382]
[83.71201324 205.01510620]
[82.78859711 190.04356384]
[81.86518860 175.07200623]
[80.94177246 160.10046387]
[80.01835632 145.12890625]
[79.09494781 130.15736389]
[65.21323395 135.84049988]
[50.27257919 134.50746155]
[37.61623764 126.45656586]
[30.07629204 113.48932648]
[29.33994293 98.50741577]
[35.57196426 84.86329651]
[47.37782288 75.61009979]
[62.11574936 72.81839752]
[76.48785400 77.11287689]
[87.27762604 87.53179932]
[83.02478027 73.14731598]
[69.42077637 65.55989075]
[65.31269836 50.91139984]
[72.62998962 37.98882294]
[68.37713623 23.60434341]
[64.12429047 9.21986294]
[59.87144470 -5.16461849]
[46.23351669 -17.49497032]
[50.92708206 -34.37735748]
[46.37979126 -48.67148972]
[31.64438629 -45.77915573]
[16.67532539 -44.58542252]
[1.66776335 -45.10584641]
[-13.18264675 -47.33364868]
[-27.68229866 -51.23978043]
[-41.64215851 -56.77331924]
[-54.88023376 -63.86212158]
[-67.22393799 -72.41377258]
[-78.51234436 -82.31678772]
[-88.59828186 -93.44205475]
[-97.35027313 -105.64453125]
[-104.65419769 -118.76514435]
[-110.41485596 -132.63282776]
[-114.55712891 -147.06678772]
[-117.02701569 -161.87886047]
[-117.79232788 -176.87593079]
[-116.84307098 -191.86247253]
[-114.19163513 -206.64312744]
[-109.87258148 -221.02519226]
[-103.94222260 -234.82115173]
[-96.47785950 -247.85115051]
[-87.57682037 -259.94534302]
[-77.35514069 -270.94601440]
[-65.94608307 -280.70977783]
[-53.49838638 -289.10934448]
[-40.17433548 -296.03518677]
[-26.14763260 -301.39703369]
[-11.60114765 -305.12500000]
[3.27547789 -307.17041016]
[18.28829575 -307.50668335]
[33.24158478 -306.12936401]
[47.94039154 -303.05645752]
[62.19309616 -298.32803345]
[75.81388092 -292.00567627]
[88.62517548 -284.17187500]
[100.45994568 -274.92871094]
[111.16390991 -264.39672852]
[120.59752655 -252.71319580]
[128.63780212 -240.03045654]
[135.17990112 -226.51385498]
[140.13856506 -212.33959961]
[143.44912720 -197.69248962]
[145.06842041 -182.76347351]
[144.97535706 -167.74717712]
[143.17112732 -152.83937073]
[139.67926025 -138.23442078]
[134.54528809 -124.12271881]
[127.83614349 -110.68824768]
[119.63928223 -98.10614777]
[110.06156921 -86.54045868]
[99.22787476 -76.14195251]
[87.27943420 -67.04620361]
[74.37202454 -59.37179947]
[60.67392349 -53.21877670]
[65.22121429 -38.92464828]
[75.84618378 -33.06186295]
[79.72879028 -21.14143372]
[74.25592804 -9.41746521]
[78.50877380 4.96701574]
[82.76161957 19.35149765]
[87.01446533 33.73597717]
[100.18235779 40.60200500]
[104.70025635 55.12932968]
[97.40925598 68.89447021]
[101.66210175 83.27894592]
[113.81543732 92.07079315]
[128.80831909 91.60886383]
[143.80120850 91.14694214]
[158.79409790 90.68501282]
[170.78684998 80.02887726]
[186.57034302 82.90306854]
[194.03681946 97.10275269]
[187.45864868 111.73516083]
[171.88203430 115.57554626]
[159.25602722 105.67790222]
[144.26313782 106.13982391]
[129.27024841 106.60175323]
[114.27736664 107.06367493]
[109.22464752 112.60624695]
[124.19200134 113.59537506]
[132.75077820 125.91394043]
[128.45620728 140.28601074]
[114.54209137 145.88935852]
[101.48583221 138.50462341]
[99.11920929 123.69137573]
[94.06649780 129.23394775]
[94.98990631 144.20549011]
[95.91332245 159.17704773]
[96.83673859 174.14859009]
[97.76014709 189.12014771]
[98.68356323 204.09169006]
[99.60697937 219.06324768]
[100.53038788 234.03479004]
[101.45380402 249.00634766]
[102.37722015 263.97790527]
[103.30062866 278.94943237]
[118.16731262 281.38449097]
[132.11921692 287.06707764]
[144.45652771 295.71224976]
[154.56039429 306.88632202]
[161.92401123 320.02877808]
[166.17803955 334.48046875]
[167.10908508 349.51644897]
[164.67044067 364.38253784]
[158.98445129 378.33306885]
[150.33630371 390.66827393]
[139.15979004 400.76943970]
[126.01553345 408.12988281]
[111.56282043 412.38040161]
[96.52661133 413.30780029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[32 107]
[33 106]
[36 103]
[37 102]
[38 101]
[39 100]
[41 97]
[42 96]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
