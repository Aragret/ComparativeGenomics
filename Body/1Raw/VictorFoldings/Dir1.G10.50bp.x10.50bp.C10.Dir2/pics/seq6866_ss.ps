%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGGAUACGGGGGGGGGGAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUxxxxxxxxxxAAGCUAAGAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGCCCCCCCCCCAUUUGGGUAC\
) } def
/len { sequence length } bind def

/coor [
[77.03582001 376.98962402]
[63.18988037 370.97357178]
[51.48121643 361.44415283]
[42.77869415 349.10848999]
[37.72809219 334.88198853]
[36.70420074 319.82028198]
[39.78300095 305.04113770]
[46.73602295 291.64120483]
[57.04730606 280.61486816]
[69.95168304 272.78036499]
[84.49157715 268.71905518]
[84.49157715 253.71905518]
[84.49157715 238.71905518]
[84.49157715 223.71905518]
[84.49157715 208.71905518]
[84.49157715 193.71905518]
[84.49157715 178.71905518]
[84.49157715 163.71905518]
[84.49157715 148.71905518]
[84.49157715 133.71905518]
[72.41158295 124.82670593]
[58.08898926 129.28352356]
[43.76639175 133.74034119]
[29.44379234 138.19714355]
[18.56575394 149.68534851]
[4.11433315 146.07901001]
[-0.73681754 160.81828308]
[-13.34465981 169.86383057]
[-28.86121941 169.73745728]
[-41.32006454 160.48776245]
[-45.93051529 145.67144775]
[-40.91975784 130.98567200]
[-28.21453094 122.07743073]
[-12.70025349 122.37211609]
[-0.34248260 131.75640869]
[9.51110840 120.58699036]
[24.98697662 123.87454987]
[39.30957413 119.41773987]
[53.63217163 114.96092224]
[67.95477295 110.50410461]
[69.69060516 104.13143921]
[72.57234192 98.74279022]
[58.34556198 93.98897552]
[42.39379501 97.79333496]
[31.32132149 85.69654083]
[36.51855469 70.14273834]
[52.63902664 67.13234711]
[63.09937668 79.76219940]
[77.32615662 84.51601410]
[85.91033173 76.43437958]
[97.09245300 72.69792175]
[108.81068420 73.99559784]
[117.32177734 61.64402390]
[125.83286285 49.29245377]
[134.34394836 36.94087982]
[142.85504150 24.58930779]
[151.36613464 12.23773479]
[139.85696411 2.60065675]
[129.30079651 -8.07182312]
[119.79040527 -19.68591309]
[111.40938568 -32.13954544]
[104.23138428 -45.32327652]
[98.31948090 -59.12124252]
[93.72563171 -73.41218567]
[90.49020386 -88.07051086]
[88.64163971 -102.96739960]
[88.19617462 -117.97193146]
[89.15773773 -132.95223999]
[91.51786804 -147.77670288]
[95.25582123 -162.31500244]
[100.33876038 -176.43937683]
[106.72200012 -190.02572632]
[114.34945679 -202.95462036]
[123.15408325 -215.11245728]
[133.05851746 -226.39237976]
[143.97570801 -236.69525146]
[155.80972290 -245.93055725]
[168.45654297 -254.01710510]
[181.80505371 -260.88385010]
[195.73791504 -266.47039795]
[210.13269043 -270.72772217]
[224.86288452 -273.61837769]
[239.79904175 -275.11694336]
[254.80989075 -275.21026611]
[269.76351929 -273.89755249]
[284.52853394 -271.19027710]
[298.97512817 -267.11227417]
[312.97637939 -261.69937134]
[326.40924072 -254.99914551]
[339.15563965 -247.07048035]
[351.10357666 -237.98304749]
[362.14801025 -227.81671143]
[372.19195557 -216.66081238]
[381.14706421 -204.61340332]
[388.93469238 -191.78033447]
[395.48638916 -178.27441406]
[400.74453735 -164.21432495]
[404.66299438 -149.72363281]
[407.20727539 -134.92967224]
[408.35501099 -119.96247101]
[408.09616089 -104.95355988]
[406.43298340 -90.03483582]
[403.38006592 -75.33741760]
[398.96426392 -60.99045944]
[393.22439575 -47.12005234]
[386.21087646 -33.84808731]
[377.98535156 -21.29120445]
[368.62011719 -9.55975819]
[358.19747925 1.24315488]
[346.80902100 11.02259636]
[334.55480957 19.69262123]
[321.54260254 27.17703629]
[307.88668823 33.41006470]
[293.70709229 38.33693314]
[279.12847900 41.91434097]
[264.27890015 44.11084747]
[249.28889465 44.90715027]
[234.29017639 44.29625320]
[219.41458130 42.28352356]
[204.79283142 38.88664627]
[190.55340576 34.13548279]
[176.82148743 28.07177734]
[163.71771240 20.74882507]
[155.20661926 33.10039902]
[146.69552612 45.45196915]
[138.18443298 57.80354309]
[129.67335510 70.15511322]
[121.16225433 82.50669098]
[129.47676086 102.01084900]
[121.41916656 123.27947998]
[99.49157715 133.71905518]
[99.49157715 148.71905518]
[99.49157715 163.71905518]
[99.49157715 178.71905518]
[99.49157715 193.71905518]
[99.49157715 208.71905518]
[99.49157715 223.71905518]
[99.49157715 238.71905518]
[99.49157715 253.71905518]
[99.49157715 268.71905518]
[114.03146362 272.78036499]
[126.93584442 280.61486816]
[137.24713135 291.64120483]
[144.20014954 305.04113770]
[147.27894592 319.82028198]
[146.25505066 334.88198853]
[141.20445251 349.10848999]
[132.50192261 361.44415283]
[120.79326630 370.97357178]
[106.94732666 376.98962402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 40]
[22 39]
[23 38]
[24 37]
[26 35]
[42 49]
[43 48]
[52 128]
[53 127]
[54 126]
[55 125]
[56 124]
[57 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
