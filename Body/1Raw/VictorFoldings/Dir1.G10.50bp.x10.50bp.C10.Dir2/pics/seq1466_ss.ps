%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAACACUAGGGGGGGGGGCGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUxxxxxxxxxxCCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACCCCCCCCCCCACAACACUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.40258789]
[71.19830322 356.38656616]
[59.48964310 346.85714722]
[50.78712082 334.52148438]
[45.73651886 320.29495239]
[44.71262741 305.23327637]
[47.79142761 290.45413208]
[54.74444962 277.05419922]
[65.05573273 266.02786255]
[77.96011353 258.19335938]
[92.50000000 254.13203430]
[92.50000000 239.13203430]
[92.50000000 224.13203430]
[92.50000000 209.13203430]
[92.50000000 194.13203430]
[92.50000000 179.13203430]
[92.50000000 164.13203430]
[92.50000000 149.13203430]
[92.50000000 134.13203430]
[92.50000000 119.13203430]
[84.55062866 115.24724579]
[78.60614014 108.06327820]
[76.02070618 98.60888672]
[77.62622833 88.45616913]
[62.62703705 88.30013275]
[47.62784958 88.14409637]
[32.62866211 87.98805237]
[22.75932884 101.68653870]
[6.83506823 106.77568817]
[-8.83542919 101.44638824]
[-18.16652489 87.97657013]
[-33.16571426 88.13260651]
[-48.16490173 88.28864288]
[-57.04442596 101.01396179]
[-71.71884155 106.05787659]
[-86.54553986 101.48091125]
[-95.82334900 89.04299164]
[-95.98476410 73.52674866]
[-86.96772003 60.89850998]
[-72.23944855 56.01408005]
[-57.46327591 60.75162125]
[-48.32093811 73.28945923]
[-33.32175064 73.13342285]
[-18.32256126 72.97738647]
[-11.60681438 61.39745712]
[0.05560936 54.60780716]
[13.65836334 54.48293686]
[25.63291168 61.16300201]
[32.78469849 72.98886871]
[47.78388596 73.14490509]
[62.78307343 73.30094147]
[77.78226471 73.45697784]
[91.09741974 66.54998016]
[99.60851288 54.19840622]
[108.11959839 41.84683228]
[104.16833496 28.92997932]
[108.33704376 16.28680611]
[118.88266754 8.48525524]
[131.80238342 8.20668125]
[140.56858826 -3.96515584]
[149.33479309 -16.13699341]
[158.10101318 -28.30883026]
[146.93672180 -38.34904099]
[136.92343140 -49.53748703]
[128.17854309 -61.74298859]
[120.80459595 -74.82244110]
[114.88803864 -88.62249756]
[110.49823761 -102.98136139]
[107.68666077 -117.73067474]
[106.48627472 -132.69750977]
[106.91116333 -147.70640564]
[108.95632172 -162.58135986]
[112.59779358 -177.14801025]
[117.79286957 -191.23553467]
[124.48065186 -204.67877197]
[132.58271790 -217.32012939]
[142.00408936 -229.01136780]
[152.63429260 -239.61541748]
[164.34869385 -249.00796509]
[177.00996399 -257.07888794]
[190.46963501 -263.73352051]
[204.56991577 -268.89389038]
[219.14547729 -272.49948120]
[234.02543640 -274.50799561]
[249.03532410 -274.89593506]
[263.99914551 -273.65869141]
[278.74151611 -270.81079102]
[293.08950806 -266.38565063]
[306.87496948 -260.43511963]
[319.93621826 -253.02897644]
[332.12014771 -244.25407410]
[343.28387451 -234.21325684]
[353.29656982 -223.02427673]
[362.04080200 -210.81829834]
[369.41403198 -197.73844910]
[375.32986450 -183.93807983]
[379.71890259 -169.57897949]
[382.52966309 -154.82951355]
[383.72924805 -139.86260986]
[383.30355835 -124.85374451]
[381.25759888 -109.97888947]
[377.61535645 -95.41244507]
[372.41949463 -81.32520294]
[365.73101807 -67.88231659]
[357.62826538 -55.24140167]
[348.20626831 -43.55066681]
[337.57546997 -32.94718552]
[325.86056519 -23.55526924]
[313.19888306 -15.48503685]
[299.73883057 -8.83110809]
[285.63827515 -3.67149758]
[271.06253052 -0.06669776]
[256.18246460 1.94102657]
[241.17256165 2.32813597]
[226.20878601 1.09009147]
[211.46659851 -1.75859129]
[197.11882019 -6.18451309]
[183.33369446 -12.13578129]
[170.27284241 -19.54262161]
[161.50663757 -7.37078571]
[152.74043274 4.80105114]
[143.97422791 16.97288895]
[147.39395142 33.40953445]
[137.70301819 47.52938080]
[120.47116852 50.35792542]
[111.96008301 62.70949554]
[103.44898987 75.06106567]
[117.14785767 83.18058014]
[122.70371246 97.30643463]
[118.62262726 111.15164948]
[107.50000000 119.13203430]
[107.50000000 134.13203430]
[107.50000000 149.13203430]
[107.50000000 164.13203430]
[107.50000000 179.13203430]
[107.50000000 194.13203430]
[107.50000000 209.13203430]
[107.50000000 224.13203430]
[107.50000000 239.13203430]
[107.50000000 254.13203430]
[122.03988647 258.19335938]
[134.94427490 266.02786255]
[145.25555420 277.05419922]
[152.20857239 290.45413208]
[155.28736877 305.23327637]
[154.26348877 320.29495239]
[149.21287537 334.52148438]
[140.51036072 346.85714722]
[128.80169678 356.38656616]
[114.95575714 362.40258789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 52]
[25 51]
[26 50]
[27 49]
[31 44]
[32 43]
[33 42]
[53 127]
[54 126]
[55 125]
[59 122]
[60 121]
[61 120]
[62 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
