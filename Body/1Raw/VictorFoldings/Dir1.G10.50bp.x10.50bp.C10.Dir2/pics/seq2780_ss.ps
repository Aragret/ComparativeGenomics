%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCUGUAUGGGGGGGGGGGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCAGUGAAAUUGxxxxxxxxxxUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUACCCCCCCCCCGUCCUGUAUG\
) } def
/len { sequence length } bind def

/coor [
[176.90798950 590.94677734]
[163.06205750 584.93078613]
[151.35339355 575.40136719]
[142.65086365 563.06567383]
[137.60026550 548.83917236]
[136.57637024 533.77746582]
[139.65516663 518.99835205]
[146.60818481 505.59838867]
[156.91947937 494.57205200]
[169.82385254 486.73754883]
[184.36373901 482.67623901]
[184.36373901 467.67623901]
[184.36373901 452.67623901]
[184.36373901 437.67623901]
[184.36373901 422.67623901]
[184.36373901 407.67623901]
[184.36373901 392.67623901]
[184.36373901 377.67623901]
[184.36373901 362.67623901]
[184.36373901 347.67623901]
[181.57142639 332.93844604]
[176.08438110 318.97805786]
[170.59735107 305.01766968]
[165.11032104 291.05728149]
[152.05189514 291.14553833]
[139.71705627 286.76144409]
[129.59413147 278.41070557]
[122.91242218 267.07907104]
[120.49300385 254.11601257]
[122.64786530 241.07388306]
[129.13986206 229.52212524]
[139.20858765 220.85839844]
[134.30703735 206.68185425]
[129.40548706 192.50529480]
[124.50393677 178.32873535]
[119.60238647 164.15217590]
[114.70083618 149.97561646]
[109.21380615 136.01522827]
[103.15079498 122.29517365]
[97.08777618 108.57511902]
[85.66596222 112.84223938]
[71.26006317 106.35787964]
[58.82062531 97.97573090]
[46.38118362 89.59358978]
[33.94232941 98.29067993]
[19.20076180 101.90324402]
[4.15015602 99.94271088]
[-9.17401695 92.67422485]
[-18.96977425 81.08079529]
[-23.91231537 66.73033905]
[-23.33320808 51.56362915]
[-17.31076622 37.63184357]
[-6.65947962 26.81914139]
[7.18015432 20.58785248]
[22.33643913 19.78070641]
[36.75960922 24.50686264]
[48.49905396 34.12714767]
[55.96710587 47.34049988]
[58.15377426 62.35991669]
[54.76332855 77.15415192]
[67.20276642 85.53629303]
[79.64220428 93.91843414]
[93.02849579 87.15032196]
[93.65247345 72.16330719]
[94.27645111 57.17628860]
[94.90042114 42.18927383]
[95.52439880 27.20225716]
[81.33743286 21.95011520]
[69.46907806 12.56942368]
[61.08208084 -0.02079122]
[56.99811554 -14.58706856]
[57.61729050 -29.70235252]
[62.87893677 -43.88580322]
[72.26757812 -55.74786758]
[84.86341095 -64.12642670]
[99.43241882 -68.20063019]
[114.54728699 -67.57132721]
[128.72720337 -62.30017471]
[140.58297729 -52.90358734]
[148.95309448 -40.30214310]
[153.01753235 -25.73040771]
[152.37811279 -10.61596680]
[147.09745789 3.56041837]
[137.69291687 15.40989113]
[125.08587646 23.77156067]
[110.51142120 27.82623482]
[109.88744354 42.81325150]
[109.26346588 57.80026627]
[108.63948822 72.78728485]
[108.01551056 87.77429962]
[110.80783081 102.51210785]
[116.87084961 116.23216248]
[122.93386078 129.95220947]
[126.65798950 132.46066284]
[129.10533142 135.71359253]
[130.19895935 139.20442200]
[130.03910828 142.45533752]
[128.87739563 145.07406616]
[133.77894592 159.25062561]
[138.68049622 173.42718506]
[143.58204651 187.60374451]
[148.48359680 201.78030396]
[153.38514709 215.95684814]
[170.42259216 217.59811401]
[184.99871826 226.46502686]
[194.23022461 240.74748230]
[196.31550598 257.56979370]
[190.88610840 273.56970215]
[179.07070923 285.57025146]
[184.55773926 299.53063965]
[190.04478455 313.49102783]
[195.53181458 327.45141602]
[198.20619202 312.69174194]
[205.23371887 299.43981934]
[215.95152283 288.94558716]
[229.34864807 282.19894409]
[244.16140747 279.83624268]
[258.99258423 282.08038330]
[272.44323730 288.71966553]
[283.24462891 299.12780762]
[290.37792969 312.32312012]
[293.17028809 327.06091309]
[291.35830688 341.95108032]
[285.11288452 355.58908081]
[275.02316284 366.68850708]
[262.04083252 374.20245361]
[247.39045715 377.42208862]
[232.45391846 376.04379272]
[218.64010620 370.19754028]
[207.25201416 360.43481445]
[199.36373901 347.67623901]
[199.36373901 362.67623901]
[199.36373901 377.67623901]
[199.36373901 392.67623901]
[199.36373901 407.67623901]
[199.36373901 422.67623901]
[199.36373901 437.67623901]
[199.36373901 452.67623901]
[199.36373901 467.67623901]
[199.36373901 482.67623901]
[213.90362549 486.73754883]
[226.80801392 494.57205200]
[237.11929321 505.59838867]
[244.07231140 518.99835205]
[247.15112305 533.77746582]
[246.12722778 548.83917236]
[241.07662964 563.06567383]
[232.37409973 575.40136719]
[220.66543579 584.93078613]
[206.81950378 590.94677734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 112]
[22 111]
[23 110]
[24 109]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 93]
[39 92]
[40 91]
[42 62]
[43 61]
[44 60]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
