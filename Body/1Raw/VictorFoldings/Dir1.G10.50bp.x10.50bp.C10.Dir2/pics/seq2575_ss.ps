%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCAAUAGGGGGGGGGGUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAxxxxxxxxxxUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCCCCCCCCCCCACAGCCCUAUA\
) } def
/len { sequence length } bind def

/coor [
[83.32703400 368.13021851]
[69.83815002 361.39868164]
[58.35265350 351.63412476]
[49.53828430 339.40423584]
[43.90750122 325.42001343]
[41.78767395 310.49456787]
[43.30204010 295.49554443]
[48.36256409 281.29504395]
[56.67502975 268.71862793]
[67.75615692 258.49746704]
[80.96171570 251.22583008]
[95.52394104 247.32646179]
[95.21596527 232.32962036]
[94.90798187 217.33277893]
[94.60000610 202.33593750]
[94.29203033 187.33911133]
[93.98405457 172.34226990]
[93.67607117 157.34542847]
[93.36809540 142.34858704]
[93.06011963 127.35175323]
[92.75214386 112.35491943]
[85.67907715 100.29409790]
[92.25102234 87.95306396]
[91.94304657 72.95622253]
[91.63506317 57.95938492]
[76.64264679 57.35247421]
[61.71512222 55.83269119]
[46.90801239 53.40569305]
[32.27640152 50.08050156]
[17.87472534 45.86949539]
[3.75655794 40.78833389]
[-10.02558041 34.85592270]
[-23.42041969 28.09432793]
[-36.37812805 20.52870750]
[-48.85050201 12.18720150]
[-60.79114532 3.10084343]
[-72.15563965 -6.69656420]
[-82.90170288 -17.16857529]
[-92.98935699 -28.27623177]
[-102.38108063 -39.97821426]
[-111.04193115 -52.23098755]
[-118.93969727 -64.98897552]
[-126.04499054 -78.20471191]
[-132.33137512 -91.82903290]
[-137.77548218 -105.81125641]
[-142.35704041 -120.09936523]
[-146.05902100 -134.64021301]
[-148.86764526 -149.37969971]
[-150.77246094 -164.26300049]
[-151.76638794 -179.23474121]
[-151.84573364 -194.23922729]
[-151.01017761 -209.22064209]
[-149.26286316 -224.12324524]
[-146.61026001 -238.89160156]
[-143.06227112 -253.47079468]
[-138.63204956 -267.80654907]
[-133.33612061 -281.84555054]
[-127.19415283 -295.53561401]
[-120.22901154 -308.82574463]
[-112.46660614 -321.66653442]
[-103.93580627 -334.01019287]
[-94.66835785 -345.81085205]
[-84.69872284 -357.02456665]
[-74.06400299 -367.60961914]
[-62.80375671 -377.52667236]
[-50.95986938 -386.73880005]
[-38.57640076 -395.21173096]
[-25.69942474 -402.91394043]
[-12.37683773 -409.81680298]
[1.34179580 -415.89462280]
[15.40544128 -421.12481689]
[29.76178169 -425.48788452]
[44.35740662 -428.96762085]
[59.13802719 -431.55105591]
[74.04864502 -433.22860718]
[89.03380585 -433.99404907]
[104.03775787 -433.84448242]
[119.00467682 -432.78048706]
[133.87889099 -430.80603027]
[148.60508728 -427.92846680]
[163.12844849 -424.15847778]
[177.39495850 -419.51010132]
[191.35154724 -414.00061035]
[204.94630432 -407.65051270]
[218.12863159 -400.48345947]
[230.84951782 -392.52606201]
[243.06163025 -383.80798340]
[254.71952820 -374.36157227]
[265.77984619 -364.22204590]
[276.20144653 -353.42709351]
[285.94555664 -342.01687622]
[294.97595215 -330.03384399]
[303.25897217 -317.52255249]
[310.76388550 -304.52957153]
[317.46270752 -291.10324097]
[323.33053589 -277.29348755]
[328.34558105 -263.15170288]
[332.48913574 -248.73046875]
[335.74581909 -234.08346558]
[338.10348511 -219.26515198]
[339.55340576 -204.33067322]
[340.09011841 -189.33558655]
[339.71170044 -174.33566284]
[338.41952515 -159.38671875]
[336.21841431 -144.54434204]
[333.11651611 -129.86376953]
[329.12542725 -115.39961243]
[324.25994873 -101.20566559]
[318.53820801 -87.33474731]
[311.98147583 -73.83844757]
[304.61416626 -60.76697159]
[296.46365356 -48.16895676]
[287.56027222 -36.09126282]
[277.93713379 -24.57882309]
[267.63006592 -13.67446136]
[256.67739868 -3.41874456]
[245.11984253 6.15017557]
[233.00044250 14.99670219]
[220.36427307 23.08792496]
[207.25833130 30.39374352]
[193.73135376 36.88697815]
[179.83370972 42.54347610]
[165.61705017 47.34219742]
[151.13429260 51.26528168]
[136.43931580 54.29814148]
[121.58676147 56.42949295]
[106.63190460 57.65140915]
[106.93988037 72.64824677]
[107.24785614 87.64508057]
[114.32092285 99.70590210]
[107.74897766 112.04693604]
[108.05695343 127.04377747]
[108.36493683 142.04061890]
[108.67291260 157.03744507]
[108.98088837 172.03428650]
[109.28886414 187.03112793]
[109.59684753 202.02796936]
[109.90482330 217.02481079]
[110.21279907 232.02163696]
[110.52077484 247.01847839]
[125.23081207 250.31671143]
[138.72377014 257.04006958]
[150.21519470 266.79766846]
[159.03697205 279.02221680]
[164.67622375 293.00299072]
[166.80511475 307.92718506]
[165.29983521 322.92709351]
[160.24792480 337.13067627]
[151.94308472 349.71212769]
[140.86814880 359.94000244]
[127.66700745 367.21963501]
[113.10714722 371.12783813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 129]
[24 128]
[25 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
