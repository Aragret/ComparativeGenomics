%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGAACCCGGGGGGGGGGAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAxxxxxxxxxxAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUCCCCCCCCCCAGAAGAACCC\
) } def
/len { sequence length } bind def

/coor [
[93.20235443 414.98348999]
[79.35641479 408.96746826]
[67.64775085 399.43804932]
[58.94522858 387.10238647]
[53.89462662 372.87585449]
[52.87073517 357.81417847]
[55.94953537 343.03500366]
[62.90255737 329.63507080]
[73.21384430 318.60873413]
[86.11822510 310.77423096]
[100.65811157 306.71292114]
[100.65811157 291.71292114]
[100.65811157 276.71292114]
[100.65811157 261.71292114]
[100.65811157 246.71292114]
[100.65811157 231.71292114]
[100.65811157 216.71292114]
[100.65811157 201.71292114]
[100.65811157 186.71292114]
[100.65811157 171.71292114]
[100.65811157 156.71292114]
[99.41123199 141.76483154]
[96.92611694 126.97212982]
[76.94772339 119.04876709]
[67.43289185 97.51554108]
[52.53098679 99.22823334]
[42.71460342 111.32270813]
[27.57755661 112.84733582]
[16.10781670 103.41438293]
[1.20591438 105.12707520]
[-13.69598770 106.83975983]
[-28.59789085 108.55245209]
[-39.65861130 120.17312622]
[-55.62702560 118.62739563]
[-64.25353241 105.10101318]
[-58.92061615 89.97026825]
[-43.71923065 84.84216309]
[-30.31057930 93.65055084]
[-15.40867805 91.93785858]
[-0.50677532 90.22516632]
[14.39512730 88.51248169]
[23.42579842 76.72339630]
[38.51404953 74.77420044]
[50.81829834 84.32633209]
[65.72019958 82.61363983]
[74.98514557 70.81700134]
[73.11753845 55.93371964]
[71.24992371 41.05044174]
[69.38230896 26.16716194]
[58.01137543 35.94989395]
[43.23508453 33.36895752]
[35.85371017 20.31080818]
[41.26243591 6.31989431]
[55.50792694 1.62244368]
[68.17752838 9.65135574]
[67.86547089 -5.34539795]
[67.55341339 -20.34215164]
[67.24135590 -35.33890533]
[66.92929840 -50.33565903]
[58.90657806 -63.97187805]
[66.37742615 -76.85736084]
[66.06537628 -91.85411835]
[51.33113861 -95.01625061]
[37.72356415 -101.49163818]
[25.97649193 -110.93107605]
[16.72342300 -122.82550049]
[10.46336365 -136.53346252]
[7.53391314 -151.31571960]
[8.09305191 -166.37507629]
[12.11062622 -180.89939880]
[19.36997414 -194.10539246]
[29.47960663 -205.28091431]
[41.89432526 -213.82324219]
[55.94462204 -219.27172852]
[70.87277985 -221.33251953]
[85.87374115 -219.89450073]
[100.13851929 -215.03520203]
[112.89784241 -207.01669312]
[123.46360779 -196.27140808]
[131.26602173 -183.37881470]
[135.88430786 -169.03419495]
[137.06941223 -154.01112366]
[134.75741577 -139.11981201]
[129.07299805 -125.16329956]
[120.32273865 -112.89425659]
[108.97849274 -102.97432709]
[95.65206909 -95.93849182]
[81.06212616 -92.16617584]
[81.37418365 -77.16941833]
[89.37458038 -64.60586548]
[81.92605591 -50.64771652]
[82.23811340 -35.65096283]
[82.55016327 -20.65420723]
[82.86222076 -5.65745449]
[83.17427826 9.33929920]
[84.26558685 24.29954720]
[86.13320160 39.18282700]
[88.00081635 54.06610870]
[89.86843109 68.94938660]
[105.15440369 69.61062622]
[117.57425690 76.95050049]
[124.60758972 88.53653717]
[139.42535400 86.20542908]
[154.24310303 83.87432861]
[169.06086731 81.54322052]
[183.87861633 79.21212006]
[198.69638062 76.88101196]
[211.10461426 66.15871429]
[226.50357056 71.79826355]
[229.05210876 87.99816895]
[216.12852478 98.09336090]
[201.02748108 91.69877625]
[186.20973206 94.02987671]
[171.39196777 96.36098480]
[156.57421875 98.69208527]
[141.75645447 101.02318573]
[126.93869781 103.35429382]
[124.35617065 111.98839569]
[119.08940125 119.30128479]
[111.71882629 124.48701477]
[114.20394135 139.27972412]
[122.52336121 126.79824066]
[136.53381348 121.44033051]
[151.05871582 125.18563080]
[160.73139954 136.65031433]
[161.97801208 151.59841919]
[154.33795166 164.50692749]
[140.63406372 170.60638428]
[125.92965698 167.64317322]
[115.65811157 156.71292114]
[115.65811157 171.71292114]
[115.65811157 186.71292114]
[115.65811157 201.71292114]
[115.65811157 216.71292114]
[115.65811157 231.71292114]
[115.65811157 246.71292114]
[115.65811157 261.71292114]
[115.65811157 276.71292114]
[115.65811157 291.71292114]
[115.65811157 306.71292114]
[130.19799805 310.77423096]
[143.10237122 318.60873413]
[153.41366577 329.63507080]
[160.36668396 343.03500366]
[163.44548035 357.81417847]
[162.42158508 372.87585449]
[157.37098694 387.10238647]
[148.66847229 399.43804932]
[136.95980835 408.96746826]
[123.11386108 414.98348999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 121]
[23 120]
[25 45]
[26 44]
[29 41]
[30 40]
[31 39]
[32 38]
[46 99]
[47 98]
[48 97]
[49 96]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[61 89]
[62 88]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
