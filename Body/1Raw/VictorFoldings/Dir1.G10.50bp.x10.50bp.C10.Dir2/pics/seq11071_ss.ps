%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAGCCCUGGGGGGGGGGAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAxxxxxxxxxxGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCCCCCCCCCCCUGACCCCU\
) } def
/len { sequence length } bind def

/coor [
[89.46039581 519.31506348]
[76.24019623 512.04260254]
[65.35339355 501.59561157]
[57.54226303 488.68637085]
[53.33938217 474.19503784]
[53.03131104 459.10971069]
[56.63904953 444.45889282]
[63.91662216 431.24148560]
[74.36782837 420.35873413]
[87.28009033 412.55258179]
[101.77303314 408.35528564]
[101.46097565 393.35855103]
[101.14891815 378.36178589]
[100.83686066 363.36505127]
[100.52480316 348.36828613]
[100.21274567 333.37152100]
[99.90069580 318.37478638]
[99.58863831 303.37802124]
[99.27658081 288.38125610]
[98.96452332 273.38452148]
[84.24904633 270.60055542]
[70.42864227 264.81546021]
[58.10834503 256.27987671]
[47.82807159 245.36485291]
[40.03895569 232.54585266]
[35.08353424 218.38194275]
[33.18071365 203.49143982]
[34.41607666 188.52488708]
[38.73805237 174.13670349]
[45.96004868 160.95649719]
[55.76852417 149.56155396]
[67.73658752 140.45153809]
[81.34257507 134.02659607]
[95.99279785 130.56976318]
[95.68074036 115.57301331]
[86.78839111 103.49301910]
[72.56161499 98.73920441]
[58.33483505 93.98538971]
[44.10805511 89.23157501]
[33.50584030 100.21137238]
[19.18664932 105.49563599]
[3.99356413 104.03518677]
[-9.05681610 96.11998749]
[-17.37332726 83.32161713]
[-19.30472183 68.18119049]
[-14.46752071 53.70485687]
[-3.82215095 42.76690292]
[10.51773930 37.53906250]
[25.70495605 39.05933380]
[38.72406387 47.02585983]
[46.99011230 59.85688400]
[48.86186981 75.00479889]
[63.08864975 79.75861359]
[77.31542969 84.51242828]
[91.54220581 89.26624298]
[105.19844818 83.06083679]
[110.97472382 69.21762085]
[116.75099182 55.37440109]
[122.52726746 41.53118515]
[128.30354309 27.68796539]
[115.25774384 20.24572945]
[103.22541809 11.25669003]
[92.38897705 0.85711771]
[82.91268921 -10.79533291]
[74.94021606 -23.52401352]
[68.59242249 -37.13595963]
[63.96553421 -51.42481995]
[61.12969208 -66.17397308]
[60.12789154 -81.15983582]
[60.97531509 -96.15522003]
[63.65911865 -110.93280029]
[68.13861847 -125.26854706]
[74.34590149 -138.94514465]
[82.18687439 -151.75524902]
[91.54265594 -163.50466919]
[102.27143097 -174.01527405]
[114.21054840 -183.12774658]
[127.17900848 -190.70393372]
[140.98022461 -196.62898254]
[155.40495300 -200.81307983]
[170.23454285 -203.19276428]
[185.24417114 -203.73199463]
[200.20629883 -202.42259216]
[214.89408875 -199.28437805]
[229.08489990 -194.36495972]
[242.56358337 -187.73890686]
[255.12580872 -179.50666809]
[266.58114624 -169.79302979]
[276.75595093 -158.74525452]
[285.49594116 -146.53082275]
[292.66864014 -133.33491516]
[298.16528320 -119.35756683]
[301.90258789 -104.81066895]
[303.82388306 -89.91475677]
[303.90002441 -74.89564514]
[302.12988281 -59.98101044]
[298.54025269 -45.39696884]
[293.18560791 -31.36460495]
[286.14706421 -18.09664726]
[277.53137207 -5.79423046]
[267.46914673 5.35613966]
[256.11288452 15.18542862]
[243.63475037 23.54462433]
[230.22393799 30.30700684]
[216.08374023 35.37005997]
[201.42852783 38.65702438]
[186.48045349 40.11807632]
[171.46612549 39.73106003]
[156.61317444 37.50185013]
[142.14675903 33.46423721]
[136.37048340 47.30745697]
[130.59420776 61.15067291]
[124.81793976 74.99388885]
[119.04166412 88.83711243]
[110.67749786 115.26095581]
[110.98955536 130.25770569]
[125.77089691 133.10212708]
[139.63237000 138.95552063]
[151.96903992 147.55978394]
[162.24304199 158.53684998]
[170.00706482 171.40522766]
[174.92381287 185.60116577]
[176.78070068 200.50337219]
[175.49894714 215.46014404]
[171.13700867 229.81793213]
[163.88789368 242.94984436]
[154.07057190 254.28306580]
[142.11599731 263.32379150]
[128.54821777 269.67877197]
[113.96128082 273.07244873]
[114.27333069 288.06921387]
[114.58538818 303.06597900]
[114.89744568 318.06271362]
[115.20950317 333.05947876]
[115.52156067 348.05624390]
[115.83361816 363.05297852]
[116.14566803 378.04974365]
[116.45772552 393.04647827]
[116.76978302 408.04324341]
[131.42477417 411.63400269]
[144.65058899 418.89627075]
[155.54545593 429.33486938]
[163.36654663 442.23806763]
[167.58062744 456.72613525]
[167.90034485 471.81124878]
[164.30390930 486.46484375]
[157.03654480 499.68783569]
[146.59375000 510.57867432]
[133.68751526 518.39477539]
[119.19783020 522.60327148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[34 116]
[35 115]
[36 55]
[37 54]
[38 53]
[39 52]
[56 114]
[57 113]
[58 112]
[59 111]
[60 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
