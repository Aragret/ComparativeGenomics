%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAACUAAGGGGGGGGGGCACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACxxxxxxxxxxACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCCCCCCCCCCCAACUAA\
) } def
/len { sequence length } bind def

/coor [
[54.28362656 480.87194824]
[40.43768692 474.85592651]
[28.72902489 465.32650757]
[20.02650070 452.99084473]
[14.97589874 438.76431274]
[13.95200729 423.70263672]
[17.03080559 408.92349243]
[23.98382759 395.52355957]
[34.29511261 384.49722290]
[47.19949341 376.66271973]
[61.73937988 372.60140991]
[61.73937988 357.60140991]
[61.73937988 342.60140991]
[61.73937988 327.60140991]
[61.73937988 312.60140991]
[61.73937988 297.60140991]
[61.73937988 282.60140991]
[61.73937988 267.60140991]
[61.73937988 252.60140991]
[61.73937988 237.60140991]
[61.73937988 222.60140991]
[61.73937988 207.60140991]
[50.11854553 217.08592224]
[35.17664719 215.76696777]
[25.39700508 204.39337158]
[26.33205414 189.42254639]
[37.45091248 179.35423279]
[52.44080734 179.90475464]
[62.79172897 190.76300049]
[64.65933990 175.87971497]
[66.52695465 160.99644470]
[68.39456940 146.11315918]
[58.97928238 157.79016113]
[46.46429825 166.05909729]
[32.03009033 170.13998413]
[17.03816605 169.64790344]
[2.90263200 164.62925720]
[-9.04317570 155.55744934]
[-17.67247009 143.28817749]
[-22.17129326 128.97871399]
[-22.11529541 113.97882080]
[-17.50975800 99.70334625]
[-8.78909874 87.49884033]
[3.22410798 78.51647186]
[17.39671707 73.60352325]
[32.39189911 73.22338867]
[46.79523468 77.41193390]
[59.24813461 85.77407074]
[68.57597351 97.52104187]
[73.89890289 111.54482269]
[74.71482849 126.52280426]
[81.89733887 113.35421753]
[89.07984924 100.18563843]
[93.08758545 85.73094940]
[93.71156311 70.74393463]
[94.33554077 55.75691605]
[94.95951843 40.76990128]
[95.58349609 25.78288460]
[80.86881256 22.69613838]
[66.86293793 17.22939301]
[53.94795990 9.53178310]
[42.47620773 -0.18669194]
[32.76064301 -11.66090679]
[25.06630516 -24.57783699]
[19.60310936 -38.58509827]
[16.52009392 -53.30056000]
[15.90136433 -68.32277679]
[17.76379967 -83.24193573]
[22.05659294 -97.65102386]
[28.66263199 -111.15695190]
[37.40169907 -123.39126587]
[48.03538895 -134.02021790]
[60.27360535 -142.75382996]
[73.78247833 -149.35383606]
[88.19348145 -153.64019775]
[103.11346436 -155.49598694]
[118.13540649 -154.87054443]
[132.84948730 -151.78097534]
[146.85430908 -146.31152344]
[159.76780701 -138.61143494]
[171.23768616 -128.89074707]
[180.95104980 -117.41465759]
[188.64289856 -104.49624634]
[194.10339355 -90.48793030]
[197.18357849 -75.77187347]
[197.79940796 -60.74953842]
[195.93409729 -45.83074188]
[191.63853455 -31.42248344]
[185.02989197 -17.91782761]
[176.28846741 -5.68519354]
[165.65272522 4.94170427]
[153.41282654 13.67295647]
[139.90267944 20.27036667]
[125.49085236 24.55395508]
[110.57051086 26.40686035]
[109.94653320 41.39387894]
[109.32255554 56.38089371]
[108.69857788 71.36791229]
[108.07460022 86.35492706]
[119.37361145 96.22064972]
[134.13966370 93.58178711]
[148.90571594 90.94291687]
[163.67176819 88.30405426]
[178.43783569 85.66519165]
[184.27014160 71.38276672]
[196.91136169 62.53952026]
[212.32774353 61.95730972]
[225.59994507 69.82190704]
[232.49288940 83.62375641]
[230.80703735 98.95873260]
[221.08035278 110.93350220]
[206.41658020 115.72695160]
[191.49487305 111.80952454]
[181.07669067 100.43124390]
[166.31063843 103.07011414]
[151.54458618 105.70897675]
[136.77853394 108.34783936]
[122.01247406 110.98670197]
[116.02450562 112.58778381]
[110.43082428 112.33328247]
[105.70924377 110.47309875]
[102.24842834 107.36814880]
[95.06591797 120.53672791]
[87.88341522 133.70530701]
[83.27784729 147.98077393]
[81.41023254 162.86404419]
[79.54261780 177.74732971]
[77.67501068 192.63061523]
[76.73937988 207.60140991]
[76.73937988 222.60140991]
[76.73937988 237.60140991]
[76.73937988 252.60140991]
[76.73937988 267.60140991]
[76.73937988 282.60140991]
[76.73937988 297.60140991]
[76.73937988 312.60140991]
[76.73937988 327.60140991]
[76.73937988 342.60140991]
[76.73937988 357.60140991]
[76.73937988 372.60140991]
[91.27926636 376.66271973]
[104.18364716 384.49722290]
[114.49493408 395.52355957]
[121.44795227 408.92349243]
[124.52675629 423.70263672]
[123.50286102 438.76431274]
[118.45226288 452.99084473]
[109.74973297 465.32650757]
[98.04107666 474.85592651]
[84.19513702 480.87194824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[29 128]
[30 127]
[31 126]
[32 125]
[51 124]
[52 123]
[53 122]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
