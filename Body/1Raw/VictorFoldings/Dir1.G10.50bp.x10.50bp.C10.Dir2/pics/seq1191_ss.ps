%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUAACCCAAGGGGGGGGGGGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAxxxxxxxxxxCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGCCCCCCCCCCGAUUAAACCAA\
) } def
/len { sequence length } bind def

/coor [
[91.64736176 508.71667480]
[77.08750153 504.80850220]
[63.88635635 497.52883911]
[52.81142426 487.30096436]
[44.50658417 474.71951294]
[39.45467377 460.51593018]
[37.94939804 445.51602173]
[40.07827377 430.59182739]
[45.71753311 416.61105347]
[54.53931427 404.38650513]
[66.03073120 394.62890625]
[79.52368927 387.90554810]
[94.23372650 384.60733032]
[94.54170227 369.61050415]
[94.84968567 354.61364746]
[95.15766144 339.61682129]
[95.46563721 324.61996460]
[95.77361298 309.62313843]
[96.08159637 294.62631226]
[96.38957214 279.62945557]
[96.69754791 264.63262939]
[97.00552368 249.63578796]
[96.69754791 234.63894653]
[95.77413177 219.66740417]
[94.85072327 204.69584656]
[93.92730713 189.72430420]
[84.59734344 185.19599915]
[77.96242523 177.12008667]
[75.28945923 166.93186951]
[77.13328552 156.47914124]
[83.22314453 147.68702698]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[91.26938629 57.84706497]
[88.81645966 43.04898834]
[86.36353302 28.25090790]
[83.91060638 13.45282841]
[80.40143585 -1.13092053]
[75.85414886 -15.42505074]
[71.30685425 -29.71918106]
[66.75956726 -44.01330948]
[62.21227646 -58.30744171]
[57.66498566 -72.60157013]
[42.85288239 -70.08209229]
[27.83428574 -69.64865112]
[12.90153503 -71.30970001]
[-1.65470016 -75.03289032]
[-15.55107784 -80.74575043]
[-28.51710129 -88.33708954]
[-40.30038071 -97.65912628]
[-50.67155457 -108.53041077]
[-59.42874527 -120.73933411]
[-66.40148926 -134.04824829]
[-71.45405579 -148.19807434]
[-74.48810577 -162.91339111]
[-75.44457245 -177.90777588]
[-74.30484009 -192.88932800]
[-71.09109497 -207.56645203]
[-65.86589050 -221.65344238]
[-58.73093414 -234.87609863]
[-49.82512283 -246.97703552]
[-39.32179642 -257.72070312]
[-27.42541695 -266.89797974]
[-14.36754227 -274.33020020]
[-0.40235090 -279.87271118]
[14.19832039 -283.41766357]
[29.15026474 -284.89599609]
[44.16244125 -284.27896118]
[58.94262695 -281.57855225]
[73.20313263 -276.84735107]
[86.66635895 -270.17745972]
[99.07025146 -261.69866943]
[110.17335510 -251.57606506]
[119.75955963 -240.00666809]
[127.64225006 -227.21568298]
[133.66799927 -213.45210266]
[137.71951294 -198.98381042]
[139.71791077 -184.09245300]
[139.62431335 -169.06788635]
[137.44055176 -154.20259094]
[133.20909119 -139.78588867]
[127.01234436 -126.09844208]
[118.97090912 -113.40665436]
[109.24131775 -101.95758820]
[98.01295471 -91.97409821]
[85.50439453 -83.65051270]
[71.95911407 -77.14885712]
[76.50640869 -62.85473251]
[81.05369568 -48.56060028]
[85.60098267 -34.26647186]
[90.14827728 -19.97234154]
[94.69556427 -5.67821074]
[101.91755676 -18.82518005]
[115.83721924 -24.41473007]
[130.14595032 -19.91359329]
[138.35882568 -7.36175060]
[136.75364685 7.55211496]
[126.05789948 18.06882095]
[111.11906433 19.42203712]
[98.70867920 10.99990082]
[101.16161346 25.79797935]
[103.61454010 40.59605789]
[106.06746674 55.39413834]
[114.39356995 42.91711807]
[128.40763855 37.56865692]
[142.92947388 41.32577133]
[152.59124756 52.79967117]
[153.82151794 67.74913025]
[146.16557312 80.64821625]
[132.45333862 86.72888947]
[117.75342560 83.74347687]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[122.44210815 155.54866028]
[122.84671783 175.27580261]
[108.89885712 188.80088806]
[109.82227325 203.77243042]
[110.74568176 218.74398804]
[111.66909790 233.71553040]
[114.28642273 237.35549927]
[115.45189667 241.24974060]
[115.26869965 244.89846802]
[113.99539185 247.88977051]
[112.00236511 249.94377136]
[111.69438934 264.94061279]
[111.38640594 279.93743896]
[111.07843018 294.93426514]
[110.77045441 309.93112183]
[110.46247864 324.92794800]
[110.15449524 339.92480469]
[109.84651947 354.92163086]
[109.53854370 369.91845703]
[109.23056793 384.91531372]
[123.79279327 388.81466675]
[136.99833679 396.08630371]
[148.07948303 406.30746460]
[156.39193726 418.88388062]
[161.45246887 433.08441162]
[162.96682739 448.08340454]
[160.84700012 463.00888062]
[155.21621704 476.99307251]
[146.40185547 489.22296143]
[134.91635132 498.98751831]
[121.42747498 505.71905518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 127]
[24 126]
[25 125]
[26 124]
[32 121]
[33 120]
[34 119]
[36 117]
[37 116]
[38 107]
[39 106]
[40 105]
[41 104]
[42 96]
[43 95]
[44 94]
[45 93]
[46 92]
[47 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
