%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCACCUUGGGGGGGGGGACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAxxxxxxxxxxACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUACCCCCCCCCCACUCCACCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 366.86703491]
[71.19830322 360.85098267]
[59.48964310 351.32159424]
[50.78712082 338.98590088]
[45.73651886 324.75939941]
[44.71262741 309.69772339]
[47.79142761 294.91854858]
[54.74444962 281.51861572]
[65.05573273 270.49227905]
[77.96011353 262.65777588]
[92.50000000 258.59646606]
[92.50000000 243.59646606]
[92.50000000 228.59646606]
[92.50000000 213.59646606]
[92.50000000 198.59646606]
[92.50000000 183.59646606]
[92.50000000 168.59646606]
[92.50000000 153.59646606]
[92.50000000 138.59646606]
[92.50000000 123.59646606]
[77.56613159 110.47687531]
[77.09227753 90.60428619]
[65.59046936 80.97576141]
[56.94147491 77.83781433]
[53.95225525 71.02531433]
[42.65324783 61.15958786]
[29.02532387 71.02947235]
[13.46692944 77.41760254]
[-3.14920807 79.96961212]
[-19.89196396 78.54622650]
[-35.82399368 73.23081207]
[-50.05420685 64.32454681]
[-61.78760147 52.32932281]
[-70.36969757 37.91949081]
[-75.32302094 21.90393829]
[-76.37368011 5.18068171]
[-73.46649933 -11.31348324]
[-66.76791382 -26.65545845]
[-78.84790039 -35.54780960]
[-90.92788696 -44.44015884]
[-108.13806152 -41.48257065]
[-121.91093445 -51.66058731]
[-124.04994202 -68.31239319]
[-136.31231689 -76.95150757]
[-142.95521545 -77.94112396]
[-147.39552307 -81.61740112]
[-148.89491272 -86.21384430]
[-160.78729248 -95.35558319]
[-172.67967224 -104.49731445]
[-184.57205200 -113.63904572]
[-200.20845032 -111.34149933]
[-212.83963013 -120.84039307]
[-214.97172546 -136.50019836]
[-205.33981323 -149.03024292]
[-189.65834045 -150.99665833]
[-177.23083496 -141.23281860]
[-175.43032837 -125.53142548]
[-163.53794861 -116.38969421]
[-151.64556885 -107.24796295]
[-139.75318909 -98.10622406]
[-127.67319489 -89.21387482]
[-115.41082764 -80.57476044]
[-103.10932159 -84.53325653]
[-90.59329987 -80.60597229]
[-82.52202606 -70.01907349]
[-82.03553772 -56.52014542]
[-69.95555115 -47.62779617]
[-57.87556458 -38.73544693]
[-48.03298569 -47.68100739]
[-36.68584824 -54.62836838]
[-24.23441696 -59.33041382]
[-11.11829758 -61.61927032]
[2.19908762 -61.41229630]
[15.24687290 -58.71506882]
[27.56339836 -53.62123108]
[38.71254349 -46.30927277]
[48.29917526 -37.03624725]
[55.98313904 -26.12874603]
[61.49134445 -13.97140694]
[64.62745667 -0.99333131]
[65.27890015 12.34704876]
[63.42090607 25.57816696]
[59.11742783 38.23199081]
[52.51897430 49.86058426]
[63.81797791 59.72630692]
[75.21900177 69.47396088]
[86.72080231 79.10248566]
[96.48117828 75.49160767]
[106.86320496 76.21051788]
[116.03274536 81.13218689]
[122.36985779 89.38714600]
[137.23291016 87.36481476]
[152.09594727 85.34247589]
[161.65859985 73.04640198]
[176.76065063 71.20719910]
[188.42414856 80.39949799]
[203.28720093 78.37715912]
[218.15023804 76.35482788]
[233.01329041 74.33248901]
[247.87634277 72.31015778]
[262.73937988 70.28782654]
[277.60244751 68.26548767]
[281.09854126 53.49587250]
[289.69720459 40.98877716]
[302.23550415 32.43568039]
[317.01776123 28.99332428]
[332.04476929 31.12725639]
[345.28424072 38.54887772]
[354.94567871 50.25447845]
[359.72244263 64.66097260]
[358.96850586 79.81999207]
[352.78582764 93.68141937]
[342.01058960 104.37059784]
[328.10003662 110.44190216]
[312.93545532 111.07424927]
[298.56771851 106.18211365]
[286.93997192 96.42711639]
[279.62475586 83.12853241]
[264.76171875 85.15087128]
[249.89866638 87.17320251]
[235.03562927 89.19554138]
[220.17257690 91.21787262]
[205.30953979 93.24021149]
[190.44648743 95.26254272]
[181.66302490 107.23695374]
[166.61859131 109.49961853]
[154.11828613 100.20552826]
[139.25523376 102.22785950]
[124.39219666 104.25019073]
[118.65067291 116.28482819]
[107.50000000 123.59646606]
[107.50000000 138.59646606]
[107.50000000 153.59646606]
[107.50000000 168.59646606]
[107.50000000 183.59646606]
[107.50000000 198.59646606]
[107.50000000 213.59646606]
[107.50000000 228.59646606]
[107.50000000 243.59646606]
[107.50000000 258.59646606]
[122.03988647 262.65777588]
[134.94427490 270.49227905]
[145.25555420 281.51861572]
[152.20857239 294.91854858]
[155.28736877 309.69772339]
[154.26348877 324.75939941]
[149.21287537 338.98590088]
[140.51036072 351.32159424]
[128.80169678 360.85098267]
[114.95575714 366.86703491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 87]
[23 86]
[25 85]
[26 84]
[38 68]
[39 67]
[40 66]
[43 62]
[44 61]
[47 60]
[48 59]
[49 58]
[50 57]
[91 129]
[92 128]
[93 127]
[96 124]
[97 123]
[98 122]
[99 121]
[100 120]
[101 119]
[102 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
