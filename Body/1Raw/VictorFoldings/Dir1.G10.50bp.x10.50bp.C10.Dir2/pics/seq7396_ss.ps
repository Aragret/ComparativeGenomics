%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCCCAUGGGGGGGGGGGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUxxxxxxxxxxAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACCCCCCCCCCCAAACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[90.22176361 401.26266479]
[76.37582397 395.24664307]
[64.66716003 385.71722412]
[55.96463776 373.38156128]
[50.91403580 359.15502930]
[49.89014435 344.09335327]
[52.96894455 329.31417847]
[59.92196655 315.91427612]
[70.23324585 304.88793945]
[83.13762665 297.05343628]
[97.67752075 292.99209595]
[97.67752075 277.99209595]
[97.67752075 262.99209595]
[97.67752075 247.99211121]
[97.67752075 232.99211121]
[97.67752075 217.99211121]
[97.67752075 202.99211121]
[97.67752075 187.99211121]
[97.67752075 172.99211121]
[97.67752075 157.99211121]
[97.52147675 142.99291992]
[97.20942688 127.99617004]
[77.06759644 107.77421570]
[86.12187958 85.19345093]
[80.63484955 71.23306274]
[75.14781189 57.27267456]
[69.66078186 43.31228256]
[63.45537567 29.65604401]
[56.54837799 16.34088707]
[49.64138031 3.02573180]
[22.55330658 -0.83497435]
[7.87284803 -26.56632614]
[-7.12634039 -26.72236252]
[-22.12552834 -26.87839890]
[-37.12471771 -27.03443527]
[-52.12390518 -27.19047165]
[-68.02507782 -21.30922508]
[-78.07836914 -34.96088028]
[-67.74324799 -48.40043640]
[-51.96786880 -42.18965912]
[-36.96868134 -42.03362274]
[-21.96949196 -41.87758636]
[-6.97030354 -41.72154999]
[8.02888489 -41.56551361]
[16.66800117 -53.82788086]
[11.47258568 -67.89939880]
[6.27716970 -81.97092438]
[1.08175421 -96.04244232]
[-4.11366129 -110.11396027]
[-10.05932140 -117.13542175]
[-9.26745605 -124.53263092]
[-14.16900730 -138.70918274]
[-21.89309311 -151.56758118]
[-32.10657120 -162.55325317]
[-42.32005310 -173.53890991]
[-58.14585114 -177.83729553]
[-62.07408142 -193.75901794]
[-50.06371307 -204.92517090]
[-34.46998215 -199.84898376]
[-31.33438683 -183.75239563]
[-21.12090683 -172.76673889]
[-10.90742779 -161.78106689]
[-13.91852283 -176.47573853]
[-12.74729538 -191.42994690]
[-7.48514652 -205.47663879]
[1.45725965 -217.51962280]
[13.38205051 -226.61903381]
[27.35860634 -232.06475830]
[42.29618073 -233.43180847]
[57.02903748 -230.61347961]
[70.40740967 -223.82974243]
[81.38723755 -213.60998535]
[89.11164856 -200.75178528]
[92.97782135 -186.25859070]
[92.68402863 -171.26145935]
[88.25321198 -156.93080139]
[80.03115082 -144.38497925]
[68.65950012 -134.60308838]
[55.02571106 -128.34849548]
[40.19377899 -126.10933685]
[25.32120323 -128.06034851]
[11.56864834 -134.04927063]
[0.00755087 -143.61073303]
[4.90910149 -129.43417358]
[9.95785809 -115.30937195]
[15.15327358 -101.23785400]
[20.34869003 -87.16633606]
[25.54410553 -73.09481812]
[30.73952103 -59.02329636]
[41.29145813 -60.60474396]
[51.65171814 -58.93909073]
[60.86098862 -54.28870010]
[68.09941864 -47.18716049]
[72.75939941 -38.38013077]
[74.49588776 -28.74796486]
[73.25014496 -19.21803665]
[69.24552155 -10.67554188]
[62.95653534 -3.88126683]
[69.86353302 9.43388939]
[76.77053070 22.74904442]
[84.04926300 9.63340187]
[98.80485535 6.93664980]
[110.25216675 16.62989616]
[110.02413940 31.62816429]
[98.28744507 40.96892929]
[83.62117767 37.82525253]
[89.10820770 51.78564453]
[94.59523773 65.74603271]
[100.08226776 79.70642090]
[112.41822052 80.75059509]
[123.20879364 89.38478851]
[127.85997772 103.92356873]
[142.35557556 107.78072357]
[152.25227356 96.16099548]
[166.21397400 89.99385834]
[181.46856689 90.50379181]
[194.98725891 97.58955383]
[204.08587646 109.84426117]
[206.95790100 124.83473969]
[203.03308105 139.58460999]
[193.09069824 151.16526794]
[179.10481262 157.27737427]
[163.85234070 156.70738220]
[150.36167908 149.56843567]
[141.31138611 137.27798462]
[138.49841309 122.27632141]
[124.00281525 118.41915894]
[112.20617676 127.68411255]
[112.51823425 142.68086243]
[115.84309387 151.25975037]
[112.67752075 157.99211121]
[112.67752075 172.99211121]
[112.67752075 187.99211121]
[112.67752075 202.99211121]
[112.67752075 217.99211121]
[112.67752075 232.99211121]
[112.67752075 247.99211121]
[112.67752075 262.99209595]
[112.67752075 277.99209595]
[112.67752075 292.99209595]
[127.21740723 297.05343628]
[140.12178040 304.88793945]
[150.43307495 315.91427612]
[157.38609314 329.31417847]
[160.46488953 344.09335327]
[159.44099426 359.15502930]
[154.39039612 373.38156128]
[145.68786621 385.71722412]
[133.97921753 395.24664307]
[120.13327026 401.26266479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[24 109]
[25 108]
[26 107]
[27 106]
[28 100]
[29 99]
[30 98]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[51 84]
[52 83]
[53 62]
[54 61]
[55 60]
[112 127]
[113 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
