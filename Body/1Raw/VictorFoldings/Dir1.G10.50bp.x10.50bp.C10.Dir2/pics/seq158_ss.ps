%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUUAAUUAAUGCGGGGGGGGGGUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACAxxxxxxxxxxCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGAGCUCCCCCCCCCCUUAAUUUAUUAAUGC\
) } def
/len { sequence length } bind def

/coor [
[128.15464783 479.49792480]
[113.71777344 475.25845337]
[100.34423828 468.36315918]
[88.51748657 459.06130981]
[78.66505432 447.68914795]
[71.14309692 434.65777588]
[66.22353363 420.43826294]
[64.08419037 405.54464722]
[64.80241394 390.51531982]
[68.35224152 375.89358521]
[74.60533905 362.20800781]
[83.33567047 349.95330811]
[94.22764587 339.57247925]
[106.88750458 331.44079590]
[120.85762787 325.85220337]
[135.63298035 323.00872803]
[135.63298035 308.00872803]
[135.63298035 293.00872803]
[135.63298035 278.00872803]
[135.63298035 263.00872803]
[135.63298035 248.00874329]
[135.63298035 233.00874329]
[135.63298035 218.00874329]
[135.63298035 203.00874329]
[135.63298035 188.00874329]
[114.70129395 171.72608948]
[119.78190613 148.92341614]
[112.23969269 135.95750427]
[104.69748688 122.99157715]
[89.00636292 123.24987030]
[75.26753235 113.06127930]
[70.15242004 95.26421356]
[55.31276321 93.07682800]
[40.47311020 90.88944244]
[25.63345337 88.70205688]
[10.79379940 86.51467133]
[-0.03694383 93.57940674]
[-12.37900543 91.41925049]
[-19.68203735 81.73634338]
[-34.47618484 79.25982666]
[-49.27033615 76.78330994]
[-64.06448364 74.30680084]
[-79.22759247 80.55277252]
[-92.05141449 70.33113861]
[-89.34389496 54.15704346]
[-73.89030457 48.66900635]
[-61.58797073 59.51264572]
[-46.79381943 61.98916245]
[-31.99967003 64.46568298]
[-17.20552063 66.94219208]
[-1.15180695 59.90728378]
[12.98118401 71.67501831]
[27.82083893 73.86240387]
[42.66049194 76.04978943]
[57.50014877 78.23717499]
[72.33980560 80.42456055]
[83.50002289 70.40210724]
[82.91477966 55.41352844]
[82.32953644 40.42494965]
[74.05970001 26.93716621]
[81.29454041 13.91770554]
[77.81802368 5.41479206]
[80.84700012 -1.36843503]
[80.55432129 -16.36557961]
[80.26164246 -31.36272430]
[72.25655365 -45.00930023]
[79.74404907 -57.88511658]
[79.45137024 -72.88226318]
[79.15869141 -87.87940979]
[76.03605652 -93.79961395]
[76.36141205 -99.53716278]
[79.15869141 -103.46475983]
[79.45137024 -118.46190643]
[79.74404907 -133.45904541]
[65.93738556 -139.88525391]
[55.94304276 -151.37580872]
[51.49259567 -165.93992615]
[53.35711288 -181.05427551]
[61.21355820 -194.10018921]
[73.70074463 -202.81741333]
[88.65520477 -205.69561768]
[103.48598480 -202.23614502]
[115.62355042 -193.03836060]
[122.96501160 -179.69583130]
[124.23840332 -164.52024841]
[119.22311401 -150.14086914]
[108.78806305 -139.04899597]
[94.74118805 -133.16636658]
[94.44851685 -118.16922760]
[94.15583801 -103.17208099]
[94.15583801 -88.17208099]
[94.44851685 -73.17494202]
[94.74118805 -58.17779541]
[102.72534943 -45.60391235]
[95.25878906 -31.65539932]
[95.55146790 -16.65825653]
[95.84413910 -1.66111147]
[96.28311920 13.33246422]
[104.51110077 25.74816513]
[97.31811523 39.83971024]
[97.90335846 54.82828903]
[98.48860168 69.81686401]
[118.64759064 79.15390778]
[125.66989136 98.42737579]
[117.66340637 115.44937134]
[125.20561981 128.41529846]
[132.74781799 141.38121033]
[151.45916748 144.13310242]
[162.22656250 162.68180847]
[177.20870972 163.41326904]
[192.19087219 164.14471436]
[196.95635986 149.82015991]
[205.41081238 137.31317139]
[216.92683411 127.55182648]
[230.64987183 121.26050568]
[245.56158447 118.90604401]
[260.55541992 120.66316986]
[274.51873779 126.40149689]
[286.41537476 135.69519043]
[295.36248779 147.85461426]
[300.69619751 161.97743225]
[302.02066040 177.01567078]
[299.23760986 191.85336304]
[292.55355835 205.38946533]
[282.46453857 216.61952209]
[269.71917725 224.71015930]
[255.26330566 229.06103516]
[240.16961670 229.34924316]
[225.55816650 225.55343628]
[212.51322937 217.95526123]
[202.00282288 207.11856079]
[194.80690002 193.84750366]
[191.45942688 179.12686157]
[176.47726440 178.39541626]
[161.49511719 177.66397095]
[150.63298035 188.00874329]
[150.63298035 203.00874329]
[150.63298035 218.00874329]
[150.63298035 233.00874329]
[150.63298035 248.00874329]
[150.63298035 263.00872803]
[150.63298035 278.00872803]
[150.63298035 293.00872803]
[150.63298035 308.00872803]
[150.63298035 323.00872803]
[165.40834045 325.85220337]
[179.37844849 331.44079590]
[192.03831482 339.57247925]
[202.93028259 349.95330811]
[211.66062927 362.20800781]
[217.91372681 375.89358521]
[221.46354675 390.51531982]
[222.18177795 405.54464722]
[220.04243469 420.43826294]
[215.12286377 434.65777588]
[207.60090637 447.68914795]
[197.74847412 459.06130981]
[185.92172241 468.36315918]
[172.54818726 475.25845337]
[158.11131287 479.49792480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[27 107]
[28 106]
[29 105]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[39 50]
[40 49]
[41 48]
[42 47]
[57 102]
[58 101]
[59 100]
[61 98]
[63 97]
[64 96]
[65 95]
[67 93]
[68 92]
[69 91]
[72 90]
[73 89]
[74 88]
[109 135]
[110 134]
[111 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
