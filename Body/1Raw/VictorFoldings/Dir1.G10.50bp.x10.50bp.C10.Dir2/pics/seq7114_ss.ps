%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGACCAAAGGGGGGGGGGCCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUxxxxxxxxxxUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCCCCCCCCCCCUAGACAAAA\
) } def
/len { sequence length } bind def

/coor [
[226.55383301 331.84542847]
[223.35716248 317.17788696]
[221.59104919 302.27029419]
[221.27198792 287.26184082]
[222.40296936 272.29266357]
[224.97341919 257.50250244]
[228.95933533 243.02951050]
[234.32350159 229.00877380]
[241.01583862 215.57121277]
[248.97387695 202.84228516]
[237.08149719 193.70056152]
[225.18911743 184.55882263]
[213.29673767 175.41708374]
[198.49073792 173.79478455]
[192.26510620 159.24996948]
[180.37272644 150.10823059]
[168.48034668 140.96649170]
[156.58796692 131.82476807]
[144.69558716 122.68302917]
[132.80320740 113.54129028]
[120.91082764 104.39955902]
[100.85816956 118.86206818]
[84.32951355 104.81832886]
[69.56345367 102.17946625]
[54.79740143 99.54060364]
[40.03134537 96.90173340]
[25.26528931 94.26287079]
[10.49923420 91.62400818]
[-4.49995422 91.46797180]
[-19.31771278 93.79907227]
[-34.13547134 96.13018036]
[-44.70321274 108.20089722]
[-60.72210693 107.32077026]
[-69.90382385 94.16495514]
[-65.20494080 78.82546234]
[-50.23003387 73.06944275]
[-36.46657562 81.31242371]
[-21.64881706 78.98131561]
[-6.83105803 76.65021515]
[-20.58362198 70.66130829]
[-31.52446938 60.39983368]
[-38.38151932 47.05888748]
[-40.35750961 32.18960571]
[-37.22269058 17.52083397]
[-29.34154701 4.75809193]
[-17.63041306 -4.61470461]
[-3.45092940 -9.50778866]
[11.54826355 -9.35224533]
[25.62322426 -4.16615963]
[37.13747025 5.44748592]
[44.75224304 18.37092209]
[47.58218765 33.10155106]
[45.29826355 47.92665482]
[38.16602325 61.12253189]
[27.01472664 71.15490723]
[13.13809872 76.85794830]
[27.90415382 79.49681854]
[42.67020798 82.13568115]
[57.43626404 84.77454376]
[72.20232391 87.41340637]
[86.96837616 90.05227661]
[95.02535248 81.78553009]
[108.03662872 80.20021820]
[107.10100555 65.22943115]
[106.16537476 50.25864029]
[105.22974396 35.28784561]
[90.75363159 30.72644043]
[78.90526581 21.24062538]
[71.28704834 8.11327839]
[68.92928314 -6.88023233]
[72.15083313 -21.71215820]
[80.51601410 -34.37660599]
[92.89350128 -43.16080856]
[107.60934448 -46.87677765]
[122.67333984 -45.02195740]
[136.04821777 -37.84719849]
[145.92512512 -26.32282448]
[150.96829224 -12.00741863]
[150.49568176 3.16298270]
[144.57119751 17.13670540]
[133.99607849 28.02392006]
[120.20053864 34.35221863]
[121.13616943 49.32300949]
[122.07179260 64.29380035]
[123.00742340 79.26459503]
[130.05255127 92.50717926]
[141.94493103 101.64891052]
[153.83731079 110.79064941]
[165.72969055 119.93238068]
[177.62207031 129.07411194]
[189.51445007 138.21585083]
[201.40682983 147.35758972]
[217.06344604 149.63375854]
[222.43846130 163.52470398]
[234.33084106 172.66644287]
[246.22322083 181.80818176]
[258.11560059 190.94990540]
[268.37011719 179.98632812]
[279.63491821 170.06362915]
[291.80484009 161.27449036]
[304.76620483 153.70095825]
[318.39804077 147.41375732]
[332.57302856 142.47158813]
[347.15884399 138.92057800]
[362.01928711 136.79389954]
[377.01559448 136.11141968]
[392.00778198 136.87948608]
[406.85583496 139.09094238]
[421.42114258 142.72512817]
[435.56771851 147.74812317]
[449.16342163 154.11303711]
[462.08135986 161.76042175]
[474.20089722 170.61886597]
[485.40887451 180.60569763]
[495.60067749 191.62762451]
[504.68109131 203.58177185]
[512.56536865 216.35649109]
[519.17987061 229.83253479]
[524.46289062 243.88407898]
[528.36499023 258.37988281]
[530.84985352 273.18466187]
[531.89422607 288.16012573]
[531.48840332 303.16647339]
[529.63610840 318.06362915]
[526.35461426 332.71243286]
[521.67468262 346.97613525]
[515.63989258 360.72155762]
[508.30664062 373.82037354]
[499.74337769 386.15026855]
[490.03009033 397.59613037]
[479.25744629 408.05105591]
[467.52603149 417.41748047]
[454.94540405 425.60787964]
[441.63299561 432.54586792]
[427.71310425 438.16656494]
[413.31573486 442.41757202]
[398.57528687 445.25918579]
[383.62939453 446.66482544]
[368.61761475 446.62142944]
[353.68011475 445.12933350]
[338.95632935 442.20254517]
[324.58377075 437.86834717]
[310.69665527 432.16720581]
[297.42459106 425.15234375]
[284.89154053 416.88931274]
[273.21447754 407.45520020]
[262.50250244 396.93814087]
[252.85557556 385.43630981]
[244.36376953 373.05709839]
[237.10641479 359.91607666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 97]
[11 96]
[12 95]
[13 94]
[15 92]
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 39]
[30 38]
[31 37]
[63 85]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
