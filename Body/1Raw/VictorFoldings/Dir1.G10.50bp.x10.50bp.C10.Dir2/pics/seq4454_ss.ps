%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCAUUCCCCCUCAAGGGGGGGGGGACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAxxxxxxxxxxUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCCCCCCCCCCCAUCAUUCCCCCUAAA\
) } def
/len { sequence length } bind def

/coor [
[103.14806366 440.10867310]
[88.59643555 436.31945801]
[74.89456940 430.12536621]
[62.43669510 421.70458984]
[51.58124924 411.29943848]
[42.64056778 399.20925903]
[35.87189102 385.78192139]
[31.46996307 371.40377808]
[29.56144142 356.48849487]
[30.20123672 341.46524048]
[33.37094116 326.76623535]
[38.97935104 312.81439209]
[46.86510849 300.01113892]
[56.80131912 288.72488403]
[68.50210571 279.28033447]
[81.63079834 271.94921875]
[95.80967712 266.94247437]
[110.63077545 264.40414429]
[110.63077545 249.40414429]
[110.63077545 234.40414429]
[110.63077545 219.40414429]
[110.63077545 204.40414429]
[110.63077545 189.40414429]
[110.63077545 174.40414429]
[110.63077545 159.40414429]
[110.63077545 144.40414429]
[110.63077545 129.40414429]
[104.73537445 124.76795959]
[90.80997467 130.34318542]
[92.94458008 115.49557495]
[87.04917908 110.85938263]
[72.47200775 114.39576721]
[62.92794800 127.29113007]
[46.89077377 127.72539520]
[36.66283417 115.36543274]
[40.09012604 99.69274139]
[54.54352570 92.73007202]
[68.93562317 99.81858826]
[83.51279449 96.28220367]
[93.96685791 85.52523041]
[97.08553314 70.85301208]
[100.20420837 56.18080139]
[103.32288361 41.50858688]
[106.44156647 26.83637428]
[109.13998413 12.08108616]
[111.41595459 -2.74524093]
[113.69192505 -17.57156754]
[115.96789551 -32.39789581]
[103.72747803 -23.72770500]
[88.76543427 -24.79409027]
[77.87839508 -35.11263657]
[76.01189423 -49.99605942]
[84.01380920 -62.68342972]
[98.24919891 -67.41140747]
[112.25151062 -62.03226089]
[119.66004181 -48.98977280]
[123.88602448 -63.38216782]
[128.11201477 -77.77455902]
[132.33799744 -92.16695404]
[134.75502014 -106.97094727]
[135.32608032 -121.96006775]
[135.89714050 -136.94918823]
[136.46820068 -151.93832397]
[128.27610779 -161.93920898]
[129.08692932 -174.43930054]
[137.91833496 -182.74717712]
[138.77467346 -197.72271729]
[139.63101196 -212.69824219]
[140.48733521 -227.67378235]
[141.34367371 -242.64932251]
[126.84259033 -246.71536255]
[113.55482483 -253.80404663]
[102.10187531 -263.58383179]
[93.01940918 -275.59725952]
[86.73223877 -289.28250122]
[83.53441620 -303.99942017]
[83.57551575 -319.05972290]
[86.85361481 -333.75897217]
[93.21539307 -347.40969849]
[102.36328888 -359.37338257]
[113.86944580 -369.09051514]
[127.19570160 -376.10656738]
[141.71876526 -380.09338379]
[156.75935364 -380.86453247]
[171.61399841 -378.38391113]
[185.58793640 -372.76757812]
[198.02755737 -364.27816772]
[208.35104370 -353.31277466]
[216.07556152 -340.38427734]
[220.83979797 -326.09738159]
[222.42094421 -311.12023926]
[220.74502563 -296.15344238]
[215.89044189 -281.89697266]
[208.08425903 -269.01760864]
[197.69157410 -258.11779785]
[185.19845581 -249.70732117]
[171.18925476 -244.17953491]
[156.31921387 -241.79298401]
[155.46287537 -226.81745911]
[154.60653687 -211.84191895]
[153.75021362 -196.86637878]
[152.89387512 -181.89083862]
[161.62847900 -166.69229126]
[151.45732117 -151.36726379]
[150.88626099 -136.37812805]
[150.31520081 -121.38900757]
[149.74414062 -106.39988708]
[161.16430664 -110.78576660]
[171.58576965 -106.54835510]
[185.45758057 -112.25560760]
[199.32940674 -117.96286011]
[208.90956116 -131.27272034]
[225.19702148 -129.36198425]
[231.43663025 -114.19625854]
[221.20960999 -101.37673187]
[205.03665161 -104.09104156]
[191.16484070 -98.38378906]
[177.29302979 -92.67653656]
[171.06112671 -81.59207153]
[157.83169556 -79.03371429]
[146.73039246 -87.94097137]
[142.50440979 -73.54857635]
[138.27842712 -59.15617752]
[134.05242920 -44.76378250]
[130.79421997 -30.12192345]
[128.51824951 -15.29559803]
[126.24227905 -0.46927100]
[123.96630859 14.35705566]
[125.78495789 17.42770958]
[126.18020630 21.54330444]
[124.67224884 26.01279068]
[121.11377716 29.95504951]
[117.99510193 44.62726212]
[114.87642670 59.29947662]
[111.75775146 73.97168732]
[108.63907623 88.64390564]
[126.62302399 99.11312103]
[125.63077545 129.40414429]
[125.63077545 144.40414429]
[125.63077545 159.40414429]
[125.63077545 174.40414429]
[125.63077545 189.40414429]
[125.63077545 204.40414429]
[125.63077545 219.40414429]
[125.63077545 234.40414429]
[125.63077545 249.40414429]
[125.63077545 264.40414429]
[140.45187378 266.94247437]
[154.63075256 271.94921875]
[167.75944519 279.28033447]
[179.46023560 288.72488403]
[189.39643860 300.01113892]
[197.28219604 312.81439209]
[202.89060974 326.76623535]
[206.06031799 341.46524048]
[206.70010376 356.48849487]
[204.79158020 371.40377808]
[200.38966370 385.78192139]
[193.62098694 399.20925903]
[184.68029785 411.29943848]
[173.82485962 421.70458984]
[161.36697388 430.12536621]
[147.66511536 436.31945801]
[133.11347961 440.10867310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 147]
[19 146]
[20 145]
[21 144]
[22 143]
[23 142]
[24 141]
[25 140]
[26 139]
[27 138]
[31 39]
[32 38]
[40 136]
[41 135]
[42 134]
[43 133]
[44 132]
[45 128]
[46 127]
[47 126]
[48 125]
[56 124]
[57 123]
[58 122]
[59 121]
[60 107]
[61 106]
[62 105]
[63 104]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
