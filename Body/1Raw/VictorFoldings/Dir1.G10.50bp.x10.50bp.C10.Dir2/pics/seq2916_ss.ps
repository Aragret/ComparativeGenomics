%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCUCCGGGGGGGGGGGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUxxxxxxxxxxCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCCCCCCCCCCCAUCCUCCG\
) } def
/len { sequence length } bind def

/coor [
[83.55092621 369.20623779]
[70.67765808 361.30334473]
[60.55335999 350.09286499]
[53.99877930 336.48352051]
[51.54525757 321.57858276]
[53.39169312 306.58633423]
[59.38840866 292.72213745]
[69.04927063 281.10989380]
[81.59111786 272.69091797]
[95.99723816 268.14776611]
[95.68518066 253.15101624]
[95.37312317 238.15426636]
[95.06106567 223.15750122]
[94.74901581 208.16075134]
[94.43695831 193.16400146]
[94.12490082 178.16725159]
[93.81284332 163.17048645]
[93.50078583 148.17373657]
[93.18872833 133.17698669]
[82.45191193 135.18522644]
[70.38726807 133.57446289]
[56.86307526 140.06262207]
[43.33888626 146.55079651]
[29.81469536 153.03895569]
[23.15845299 167.63600159]
[7.56154442 171.39312744]
[-5.01141739 161.42819214]
[-4.91553164 145.38542175]
[7.77564573 135.57147217]
[23.32653046 139.51477051]
[36.85071945 133.02659607]
[50.37490845 126.53843689]
[63.89910126 120.05027008]
[62.88793182 112.61874390]
[60.86559677 97.75569916]
[59.85443115 90.32417297]
[45.08837509 87.68531036]
[30.32231903 85.04644775]
[15.55626392 82.40758514]
[1.62429798 90.36244965]
[-13.22762012 84.29614258]
[-17.60636902 68.86221313]
[-8.15294838 55.90025330]
[7.88078785 55.35356903]
[18.19512939 67.64152527]
[32.96118546 70.28038788]
[47.72724152 72.91925812]
[62.49329376 75.55812073]
[86.20036316 63.18280411]
[109.23069000 67.41319275]
[116.41319275 54.24460602]
[123.59570312 41.07602310]
[125.92681122 26.25826645]
[123.13448334 11.52046013]
[120.34215546 -3.21734571]
[105.29574585 -3.26060748]
[90.52947235 -6.15090418]
[76.57714844 -11.78375340]
[63.94312286 -19.95553207]
[53.08411789 -30.37083435]
[44.39267731 -42.65315247]
[38.18299484 -56.35849380]
[34.67953873 -70.99140930]
[34.00896454 -86.02294159]
[36.19551086 -100.90969849]
[41.16013336 -115.11353302]
[48.72336197 -128.12098694]
[58.61179733 -139.46186829]
[70.46797943 -148.72618103]
[83.86330414 -155.57904053]
[98.31354523 -159.77272034]
[113.29634094 -161.15562439]
[128.27006531 -159.67774963]
[142.69342041 -155.39253235]
[156.04502869 -148.45487976]
[167.84223938 -139.11558533]
[177.65856934 -127.71224213]
[185.13917542 -114.65708923]
[190.01364136 -100.42205811]
[192.10575867 -85.52174377]
[191.33988953 -70.49476624]
[187.74372864 -55.88435364]
[181.44726562 -42.21866226]
[172.67813110 -29.99169731]
[161.75331116 -19.64545441]
[149.06773376 -11.55394363]
[135.07997131 -6.00967026]
[137.87228394 8.72813606]
[140.66461182 23.46594238]
[154.98721313 27.92275810]
[165.64883423 17.37146759]
[176.31047058 6.82017660]
[180.11294556 -9.13204002]
[195.90432739 -13.55515766]
[207.43980408 -1.89905202]
[202.85266113 13.84547424]
[186.86175537 17.48180389]
[176.20013428 28.03309250]
[165.53849792 38.58438492]
[171.88592529 52.17593384]
[178.23275757 65.76628876]
[193.16706848 64.36398315]
[208.10137939 62.96167755]
[223.03569031 61.55937576]
[237.96998596 60.15707016]
[252.90429688 58.75476837]
[259.90365601 45.00658035]
[273.23620605 37.24474335]
[288.64764404 37.94603348]
[301.22018433 46.88666534]
[306.94198608 61.21372223]
[303.98724365 76.35548401]
[293.29879761 87.48028564]
[278.28732300 91.03822327]
[263.74288940 85.89398193]
[254.30661011 73.68907166]
[239.37229919 75.09137726]
[224.43798828 76.49368286]
[209.50367737 77.89598846]
[194.56936646 79.29828644]
[179.63507080 80.70059204]
[150.68559265 69.95128632]
[136.76428223 48.25853348]
[129.58177185 61.42711639]
[122.39926910 74.59569550]
[129.95198059 84.18909454]
[133.61216736 95.83725739]
[132.90414429 108.02640533]
[127.91993713 119.17244720]
[119.30728912 127.82686615]
[108.18548584 132.86492920]
[108.49754333 147.86167908]
[108.80960083 162.85844421]
[109.12165070 177.85519409]
[109.43370819 192.85194397]
[109.74576569 207.84869385]
[110.05782318 222.84545898]
[110.36988068 237.84220886]
[110.68193817 252.83895874]
[110.99398804 267.83572388]
[125.57662964 271.77566528]
[138.45783997 279.66561890]
[148.59338379 290.86593628]
[155.16163635 304.46868896]
[157.63014221 319.37115479]
[155.79876709 334.36523438]
[149.81597900 348.23544312]
[140.16679382 359.85739136]
[127.63340759 368.28894043]
[113.23185730 372.84658813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 33]
[22 32]
[23 31]
[24 30]
[36 48]
[37 47]
[38 46]
[39 45]
[50 125]
[51 124]
[52 123]
[53 89]
[54 88]
[55 87]
[90 99]
[91 98]
[92 97]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
