%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCAUCCUGGGGGGGGGGAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCxxxxxxxxxxAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUACCCCCCCCCCAUCCCCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[92.71582794 380.72744751]
[78.69388580 375.17443848]
[66.49392700 366.30810547]
[56.88285446 354.68579102]
[50.46482849 341.03808594]
[47.64329147 326.22290039]
[48.59560776 311.17150879]
[53.26191330 296.83010864]
[61.34888077 284.10012817]
[72.34815216 273.78186035]
[85.56831360 266.52389526]
[100.17832184 262.78244019]
[100.17832184 247.78245544]
[100.17832184 232.78245544]
[100.17832184 217.78245544]
[100.17832184 202.78245544]
[100.17832184 187.78245544]
[100.17832184 172.78245544]
[100.17832184 157.78245544]
[100.17832184 142.78245544]
[100.17832184 127.78245544]
[78.71304321 111.54747009]
[82.76123047 88.62836456]
[74.09461975 76.38541412]
[65.42801666 64.14245605]
[56.76140594 51.89950562]
[39.00182724 54.75736237]
[21.79781532 46.84371185]
[11.41372490 29.88428116]
[-3.17002463 33.39344788]
[-14.68061638 45.07413101]
[-30.48140526 40.68470383]
[-34.31789780 24.74063301]
[-22.24343491 13.64381218]
[-6.67919207 18.80970001]
[7.90455723 15.30053234]
[13.89285374 1.54770374]
[6.52661467 -11.51899147]
[-0.83962494 -24.58568573]
[-8.20586395 -37.65238190]
[-15.57210350 -50.71907425]
[-29.52463722 -45.15039062]
[-44.09492874 -41.49114609]
[-59.02295303 -39.80664444]
[-74.04229736 -40.12694931]
[-88.88493347 -42.44634247]
[-103.28597260 -46.72343063]
[-116.98841858 -52.88188934]
[-129.74771118 -60.81180954]
[-141.33618164 -70.37167358]
[-151.54698181 -81.39087677]
[-160.19792175 -93.67276764]
[-167.13459778 -106.99815369]
[-172.23321533 -121.12923431]
[-175.40280151 -135.81382751]
[-176.58676147 -150.78987122]
[-175.76399231 -165.79008484]
[-172.94915771 -180.54678345]
[-168.19250488 -194.79661560]
[-161.57891846 -208.28527832]
[-153.22642517 -220.77203369]
[-143.28408813 -232.03407288]
[-131.92933655 -241.87037659]
[-119.36481476 -250.10543823]
[-105.81474304 -256.59225464]
[-91.52094269 -261.21511841]
[-76.73850250 -263.89147949]
[-61.73122787 -264.57357788]
[-46.76695251 -263.24923706]
[-32.11272049 -259.94213867]
[-18.03006172 -254.71125793]
[-4.77029276 -247.64994812]
[7.42994833 -238.88424683]
[18.35293388 -228.57057190]
[27.80373192 -216.89300537]
[35.61367798 -204.05990601]
[41.64339828 -190.30033875]
[45.78528595 -175.85983276]
[47.96541977 -160.99609375]
[48.14489746 -145.97441101]
[46.32051086 -131.06283569]
[42.52482224 -116.52748871]
[36.82557297 -102.62777710]
[29.32446480 -89.61175537]
[20.15536880 -77.71170807]
[9.48191738 -67.14000702]
[-2.50540900 -58.08531570]
[4.86083031 -45.01861954]
[12.22706985 -31.95192528]
[19.59330940 -18.88523102]
[26.95954895 -5.81853580]
[42.63207245 -10.43252182]
[58.29763412 -7.42960262]
[70.54371643 2.17618012]
[76.86813354 15.97291088]
[76.18686676 30.74769402]
[69.00435638 43.23289871]
[77.67096710 55.47585297]
[86.33757782 67.71880341]
[95.00418091 79.96176147]
[108.83293915 78.73258972]
[121.80175781 86.95613098]
[127.64748383 102.74100494]
[142.58349609 104.12503052]
[157.51951599 105.50905609]
[172.45552063 106.89308167]
[186.91073608 100.46210480]
[198.86981201 109.34072876]
[213.80581665 110.72475433]
[228.74183655 112.10877991]
[236.15640259 98.80674744]
[248.34426880 89.67570496]
[263.19378662 86.29766846]
[278.13223267 89.25789642]
[290.57141113 98.04351044]
[298.35614014 111.13235474]
[300.13766479 126.25670624]
[295.60739136 140.79617310]
[285.55014038 152.23171997]
[271.70840454 158.58206177]
[256.48037720 158.74694824]
[242.50440979 152.69783020]
[232.20188904 141.48275757]
[227.35780334 127.04479218]
[212.42179871 125.66076660]
[197.48577881 124.27674103]
[184.09889221 130.80670166]
[171.07150269 121.82909393]
[156.13548279 120.44506836]
[141.19947815 119.06104279]
[126.26345825 117.67701721]
[115.17832184 127.78245544]
[115.17832184 142.78245544]
[115.17832184 157.78245544]
[115.17832184 172.78245544]
[115.17832184 187.78245544]
[115.17832184 202.78245544]
[115.17832184 217.78245544]
[115.17832184 232.78245544]
[115.17832184 247.78245544]
[115.17832184 262.78244019]
[129.78834534 266.52389526]
[143.00849915 273.78186035]
[154.00776672 284.10012817]
[162.09474182 296.83010864]
[166.76104736 311.17150879]
[167.71336365 326.22290039]
[164.89181519 341.03808594]
[158.47380066 354.68579102]
[148.86273193 366.30810547]
[136.66276550 375.17443848]
[122.64082336 380.72744751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 100]
[24 99]
[25 98]
[26 97]
[29 36]
[30 35]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[103 131]
[104 130]
[105 129]
[106 128]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
