%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCCACCUGGGGGGGGGGUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGxxxxxxxxxxUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACCCCCCCCCCCACACCACCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 395.66317749]
[71.19830322 389.64715576]
[59.48964310 380.11773682]
[50.78712082 367.78207397]
[45.73651886 353.55554199]
[44.71262741 338.49386597]
[47.79142761 323.71469116]
[54.74444962 310.31478882]
[65.05573273 299.28845215]
[77.96011353 291.45394897]
[92.50000000 287.39260864]
[92.50000000 272.39260864]
[92.50000000 257.39260864]
[92.50000000 242.39262390]
[92.50000000 227.39262390]
[92.50000000 212.39262390]
[92.50000000 197.39262390]
[92.50000000 182.39262390]
[92.50000000 167.39262390]
[92.50000000 152.39262390]
[92.50000000 137.39262390]
[80.36158752 132.69236755]
[70.51090240 124.18370056]
[57.26831436 131.22883606]
[46.12472916 144.00602722]
[30.76201439 136.83502197]
[33.39995575 120.08755493]
[50.22317886 117.98624420]
[63.46576309 110.94110870]
[61.95849991 97.29769897]
[65.37923431 84.00434113]
[73.28484344 72.78311157]
[84.65121460 65.08763885]
[98.00590515 61.91480637]
[100.18274689 47.07360077]
[102.35958099 32.23239517]
[104.53641510 17.39119148]
[90.18792725 -2.97830200]
[99.45880890 -25.53569984]
[93.68253326 -39.37891769]
[87.90626526 -53.22213364]
[82.12998962 -67.06535339]
[67.64192200 -63.09996796]
[52.76571655 -61.01988602]
[37.74564743 -60.85926437]
[22.82835579 -62.62073898]
[8.25880241 -66.27538300]
[-5.72376871 -71.76319122]
[-18.88975143 -78.99404144]
[-31.02294922 -87.84920502]
[-41.92412186 -98.18325806]
[-51.41426468 -109.82652283]
[-59.33753967 -122.58779144]
[-65.56384277 -136.25752258]
[-69.99092865 -150.61123657]
[-72.54609680 -165.41325378]
[-73.18739319 -180.42048645]
[-71.90428925 -195.38650513]
[-68.71785736 -210.06558228]
[-63.68041229 -224.21662903]
[-56.87467957 -237.60731506]
[-48.41241455 -250.01773071]
[-38.43257523 -261.24407959]
[-27.09903717 -271.10205078]
[-14.59791183 -279.42971802]
[-1.13447654 -286.09036255]
[13.07018661 -290.97460938]
[27.78282547 -294.00225830]
[42.76184464 -295.12356567]
[57.76127243 -294.32015991]
[72.53480530 -291.60519409]
[86.83985138 -287.02328491]
[100.44150543 -280.64962769]
[113.11642456 -272.58892822]
[124.65646362 -262.97354126]
[134.87213135 -251.96134949]
[143.59567261 -239.73318481]
[150.68383789 -226.48983765]
[156.02024841 -212.44877625]
[159.51724243 -197.84059143]
[161.11744690 -182.90513611]
[160.79454041 -167.88768005]
[158.55383301 -153.03482056]
[154.43212891 -138.59043884]
[148.49711609 -124.79174805]
[140.84625244 -111.86532593]
[131.60514832 -100.02342987]
[120.92557526 -89.46052551]
[108.98289490 -80.35005188]
[95.97320557 -72.84162903]
[101.74948120 -58.99840927]
[107.52575684 -45.15518951]
[113.30202484 -31.31197166]
[120.16225433 -30.99816895]
[126.68021393 -28.83543396]
[132.36724854 -24.98590660]
[136.79701233 -19.73818779]
[151.29260254 -23.59534836]
[165.78819275 -27.45250702]
[180.28379822 -31.30966759]
[182.65051270 -46.35355377]
[190.93698120 -59.13066101]
[203.70748901 -67.42728424]
[218.74948120 -69.80597687]
[233.45684814 -65.85461426]
[245.28144836 -56.25780106]
[252.17459106 -42.67824173]
[252.94200134 -27.46867371]
[247.45071411 -13.26424694]
[236.65214539 -2.52596593]
[222.41719055 2.88569760]
[207.21215820 2.03314066]
[193.67141724 -4.93592644]
[184.14096069 -16.81406975]
[169.64535522 -12.95691109]
[155.14976501 -9.09975147]
[140.65415955 -5.24259186]
[139.05633545 3.28446364]
[134.61434937 10.84603310]
[127.79930878 16.51405144]
[119.37762451 19.56802750]
[117.20078278 34.40923309]
[115.02394867 49.25043869]
[112.84711456 64.09164429]
[126.73780060 72.80536652]
[135.68557739 86.54645538]
[138.03630066 102.77465057]
[133.35539246 118.48990631]
[122.50819397 130.78700256]
[107.50000000 137.39262390]
[107.50000000 152.39262390]
[107.50000000 167.39262390]
[107.50000000 182.39262390]
[107.50000000 197.39262390]
[107.50000000 212.39262390]
[107.50000000 227.39262390]
[107.50000000 242.39262390]
[107.50000000 257.39260864]
[107.50000000 272.39260864]
[107.50000000 287.39260864]
[122.03988647 291.45394897]
[134.94427490 299.28845215]
[145.25555420 310.31478882]
[152.20857239 323.71469116]
[155.28736877 338.49386597]
[154.26348877 353.55554199]
[149.21287537 367.78207397]
[140.51036072 380.11773682]
[128.80169678 389.64715576]
[114.95575714 395.66317749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 29]
[24 28]
[34 124]
[35 123]
[36 122]
[37 121]
[39 93]
[40 92]
[41 91]
[42 90]
[97 117]
[98 116]
[99 115]
[100 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
