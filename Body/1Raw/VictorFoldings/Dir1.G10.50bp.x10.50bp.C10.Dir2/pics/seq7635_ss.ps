%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUCCUGCCGGGGGGGGGGCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAxxxxxxxxxxUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUCCCCCCCCCCACUAUUCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-4.82990503 259.39212036]
[-15.79293728 251.61514282]
[-26.18115997 243.08554077]
[-35.94300842 233.84564209]
[-45.03001785 223.94132996]
[-53.39708710 213.42173767]
[-61.00267410 202.33912659]
[-67.80902863 190.74848938]
[-73.78236389 178.70736694]
[-78.89302063 166.27552795]
[-83.11563110 153.51469421]
[-86.42924500 140.48820496]
[-101.20136261 143.09292603]
[-115.97348022 145.69764709]
[-130.68899536 148.60511780]
[-145.34172058 151.81411743]
[-159.99444580 155.02311707]
[-174.64717102 158.23211670]
[-189.29989624 161.44110107]
[-203.95262146 164.65010071]
[-218.60534668 167.85910034]
[-233.25807190 171.06809998]
[-247.91079712 174.27709961]
[-249.15725708 189.34155273]
[-254.79020691 203.36871338]
[-264.30877686 215.11129761]
[-276.86657715 223.52516174]
[-291.34698486 227.86215210]
[-306.46237183 227.73661804]
[-320.86874390 223.15974426]
[-333.28509521 214.53846741]
[-342.60729980 202.63941956]
[-348.00653076 188.52064514]
[-349.00262451 173.43756104]
[-345.50701904 158.73136902]
[-337.83056641 145.70971680]
[-326.65582275 135.53048706]
[-312.97647095 129.09880066]
[-298.00885010 126.98657990]
[-283.08386230 129.38162231]
[-269.52862549 136.07096863]
[-258.54849243 146.45980835]
[-251.11979675 159.62437439]
[-236.46707153 156.41537476]
[-221.81434631 153.20637512]
[-207.16162109 149.99737549]
[-192.50889587 146.78837585]
[-177.85617065 143.57939148]
[-163.20344543 140.37039185]
[-148.55072021 137.16139221]
[-133.89799500 133.95239258]
[-130.58573914 130.43412781]
[-125.00677490 128.99783325]
[-118.57820129 130.92553711]
[-103.80608368 128.32081604]
[-89.03396606 125.71608734]
[-90.57232666 108.79461670]
[-90.59898376 91.80337524]
[-89.11372375 74.87715912]
[-86.12832642 58.15022659]
[-81.66648102 41.75526810]
[-75.76356506 25.82232857]
[-68.46641541 10.47780323]
[-59.83292007 -4.15659332]
[-49.93155289 -17.96477127]
[-38.84086227 -30.83720016]
[-26.64882278 -42.67176819]
[-13.45214653 -53.37460327]
[0.64448255 -62.86079788]
[15.52924442 -71.05510712]
[31.08406639 -77.89253235]
[47.18556213 -83.31883240]
[63.70600510 -87.29096222]
[80.51435089 -89.77741241]
[97.47725677 -90.75846863]
[114.46018219 -90.22634125]
[131.32839966 -88.18524933]
[147.94810486 -84.65139008]
[164.18746948 -79.65279388]
[179.91766357 -73.22911072]
[195.01391602 -65.43128967]
[209.35649109 -56.32119751]
[222.83157349 -45.97109604]
[235.33232117 -34.46308517]
[246.75953674 -21.88844872]
[257.02261353 -8.34694099]
[269.69412231 -16.37393761]
[282.36563110 -24.40093613]
[294.78393555 -32.81434631]
[306.93728638 -41.60618973]
[319.09060669 -50.39802933]
[305.04037476 -55.65069962]
[300.18725586 -69.84391785]
[308.07992554 -82.59954834]
[322.94720459 -84.59061432]
[333.91806030 -74.36124420]
[332.97088623 -59.39174271]
[345.96127319 -66.89174652]
[358.95166016 -74.39174652]
[364.47607422 -89.45362854]
[379.74127197 -94.38849640]
[393.03713989 -85.41074371]
[394.16418457 -69.40732574]
[382.25784302 -58.65470123]
[366.45166016 -61.40136337]
[353.46127319 -53.90136337]
[340.47088623 -46.40136337]
[327.88244629 -38.24469757]
[315.72912598 -29.45285416]
[303.57580566 -20.66101265]
[302.66995239 -17.19306374]
[300.00277710 -14.00624943]
[295.73217773 -11.94044209]
[290.39263916 -11.72941875]
[277.72113037 -3.70242214]
[265.04959106 4.32457495]
[271.37670898 16.18362999]
[276.85305786 28.45875740]
[281.45150757 41.08902359]
[285.14923096 54.01173019]
[287.92782593 67.16272736]
[289.77355957 80.47673035]
[290.67721558 93.88764954]
[290.63430786 107.32891083]
[289.64511108 120.73379517]
[287.71447754 134.03575134]
[284.85202026 147.16874695]
[281.07192993 160.06759644]
[276.39297485 172.66825867]
[270.83837891 184.90820312]
[264.43576050 196.72663879]
[257.21682739 208.06492615]
[249.21746826 218.86676025]
[240.47737122 229.07852173]
[231.03994751 238.64952087]
[220.95201111 247.53225708]
[210.26365662 255.68263245]
[199.02795410 263.06018066]
[187.30065918 269.62826538]
[175.13998413 275.35433960]
[162.60632324 280.20989990]
[149.76187134 284.17086792]
[136.67039490 287.21762085]
[123.39688110 289.33499146]
[110.00723267 290.51251221]
[96.56789398 290.74426270]
[83.14559937 290.02917480]
[69.80697632 288.37075806]
[56.61822510 285.77722168]
[43.64483261 282.26150513]
[30.95118904 277.84100342]
[18.60031319 272.53765869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 56]
[13 55]
[14 54]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[86 116]
[87 115]
[88 114]
[89 110]
[90 109]
[91 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
