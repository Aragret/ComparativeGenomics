%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUACAUGGGGGGGGGGGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAxxxxxxxxxxUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUCCCCCCCCCCAACAGUACAU\
) } def
/len { sequence length } bind def

/coor [
[97.84928131 353.81845093]
[83.35958862 349.60995483]
[70.45336151 341.79385376]
[60.01055908 330.90301514]
[52.74319458 317.68002319]
[49.14676666 303.02639771]
[49.46648788 287.94131470]
[53.68056107 273.45324707]
[61.50165558 260.55001831]
[72.39652252 250.11143494]
[85.62232971 242.84918213]
[100.27732849 239.25840759]
[100.58937836 224.26165771]
[100.90143585 209.26490784]
[101.21349335 194.26815796]
[101.52555084 179.27139282]
[101.83760834 164.27464294]
[102.14966583 149.27789307]
[102.46171570 134.28114319]
[102.77377319 119.28438568]
[91.07415009 109.89722443]
[76.50144958 113.45198059]
[61.92874527 117.00674438]
[53.69460297 130.22932434]
[38.86516953 133.62677002]
[26.31020546 125.69528198]
[11.73750210 129.25004578]
[-2.83520079 132.80480957]
[-17.40790367 136.35955811]
[-26.93569565 149.26695251]
[-42.97230911 149.72145081]
[-53.21582794 137.37438965]
[-49.80830002 121.69738770]
[-35.36368942 114.71649933]
[-20.96266556 121.78686523]
[-6.38996267 118.23210144]
[8.18274021 114.67733765]
[22.75544357 111.12257385]
[30.24801254 98.30083466]
[44.97616577 94.48821259]
[58.37398529 102.43404388]
[72.94668579 98.87928009]
[87.51938629 95.32451630]
[99.41176605 86.18278503]
[106.59427643 73.01419830]
[113.77678680 59.84561920]
[102.73994446 50.27236938]
[93.94966888 38.60992813]
[87.79169464 25.37425041]
[84.53533173 11.15024281]
[84.32175446 -3.43410611]
[87.15782928 -17.73543930]
[92.91597748 -31.12341499]
[101.33986664 -43.00849152]
[112.05583954 -52.86788559]
[124.58950806 -60.26856232]
[138.38670349 -64.88626862]
[152.83801270 -66.51971436]
[167.30572510 -65.09938812]
[181.15190125 -60.69046402]
[188.60681152 -73.70677185]
[196.06172180 -86.72308350]
[202.82983398 -100.10936737]
[208.89283752 -113.82942200]
[214.95585632 -127.54947662]
[221.01887512 -141.26953125]
[208.38844299 -149.41929626]
[197.18849182 -159.44465637]
[187.69485474 -171.09872437]
[180.14129639 -184.09449768]
[174.71383667 -198.11195374]
[171.54614258 -212.80590820]
[170.71620178 -227.81449890]
[172.24447632 -242.76812744]
[176.09330750 -257.29852295]
[182.16792297 -271.04791260]
[190.31872559 -283.67767334]
[200.34501648 -294.87680054]
[211.99986267 -304.36947632]
[224.99626160 -311.92196655]
[239.01417542 -317.34826660]
[253.70838928 -320.51473999]
[268.71704102 -321.34344482]
[283.67053223 -319.81393433]
[298.20062256 -315.96392822]
[311.94952393 -309.88815308]
[324.57861328 -301.73629761]
[335.77688599 -291.70910645]
[345.26861572 -280.05346680]
[352.82000732 -267.05645752]
[358.24517822 -253.03808594]
[361.41043091 -238.34361267]
[362.23788452 -223.33489990]
[360.70715332 -208.38151550]
[356.85592651 -193.85174561]
[350.77905273 -180.10336304]
[342.62615967 -167.47494507]
[332.59802246 -156.27748108]
[320.94161987 -146.78672791]
[307.94396973 -139.23638916]
[293.92517090 -133.81240845]
[279.23043823 -130.64834595]
[264.22161865 -129.82211304]
[249.26838684 -131.35408020]
[234.73892212 -135.20651245]
[228.67590332 -121.48645782]
[222.61289978 -107.76641083]
[216.54988098 -94.04635620]
[231.33486938 -96.57704163]
[242.67247009 -86.75569916]
[242.27583313 -71.76094818]
[230.43486023 -62.55272675]
[215.80435181 -65.86150360]
[209.07801819 -79.26817322]
[201.62310791 -66.25186157]
[194.16819763 -53.23555374]
[205.57478333 -42.85256958]
[214.40159607 -30.19484138]
[220.20745850 -15.88968563]
[222.70094299 -0.64689595]
[221.75511169 14.77647305]
[217.41386414 29.61370659]
[209.89002991 43.12654114]
[199.55484009 54.64190674]
[186.91963196 63.58544159]
[172.61061096 69.51014709]
[157.33772278 72.11872101]
[141.85949707 71.27848816]
[126.94537354 67.02812958]
[119.76286316 80.19670868]
[112.58035278 93.36529541]
[117.77053070 119.59643555]
[117.45847321 134.59318542]
[117.14641571 149.58995056]
[116.83435822 164.58670044]
[116.52230072 179.58345032]
[116.21025085 194.58020020]
[115.89819336 209.57696533]
[115.58613586 224.57371521]
[115.27407837 239.57046509]
[129.76701355 243.76776123]
[142.67927551 251.57389832]
[153.13047791 262.45666504]
[160.40806580 275.67407227]
[164.01579285 290.32489014]
[163.70773315 305.41021729]
[159.50485229 319.90155029]
[151.69371033 332.81079102]
[140.80691528 343.25778198]
[127.58671570 350.53024292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 43]
[22 42]
[23 41]
[26 38]
[27 37]
[28 36]
[29 35]
[44 131]
[45 130]
[46 129]
[60 116]
[61 115]
[62 114]
[63 108]
[64 107]
[65 106]
[66 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
