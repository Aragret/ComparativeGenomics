%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACUAAUGGGGGGGGGGCUUAGUUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGxxxxxxxxxxCCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCCCCCCCCCCCAUACUAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 402.78070068]
[71.19830322 396.76467896]
[59.48964310 387.23526001]
[50.78712082 374.89959717]
[45.73651886 360.67306519]
[44.71262741 345.61138916]
[47.79142761 330.83221436]
[54.74444962 317.43231201]
[65.05573273 306.40597534]
[77.96011353 298.57147217]
[92.50000000 294.51013184]
[92.50000000 279.51013184]
[92.50000000 264.51013184]
[92.50000000 249.51014709]
[92.50000000 234.51014709]
[92.50000000 219.51014709]
[92.50000000 204.51014709]
[92.50000000 189.51014709]
[92.50000000 174.51014709]
[92.50000000 159.51014709]
[92.50000000 144.51014709]
[92.50000000 129.51014709]
[92.50000000 114.51014709]
[86.52259064 128.26771545]
[72.33378601 133.13369751]
[59.17126846 125.94007111]
[55.60456085 111.37029266]
[63.95578003 98.91006470]
[78.78739929 96.67157745]
[64.29180145 92.81441498]
[49.79620361 88.95725250]
[34.86071396 98.00537872]
[18.31926155 93.57091522]
[10.23723984 78.85565948]
[-4.33546305 75.30089569]
[-18.90816498 71.74613953]
[-33.48086929 68.19137573]
[-43.13369370 80.01447296]
[-56.96407700 86.47073364]
[-72.22598267 86.27826691]
[-85.88914490 79.47527313]
[-95.24073792 67.41250610]
[-98.42399597 52.48502350]
[-94.80687714 37.65670013]
[-85.10756683 25.87170219]
[-71.25186920 19.46995354]
[-55.99084473 19.72252464]
[-42.35457611 26.57926941]
[-33.05055618 38.67877197]
[-29.92610741 53.61867142]
[-15.35340405 57.17343140]
[-0.78070098 60.72819519]
[13.79200172 64.28295898]
[23.79289818 56.09889603]
[36.87807465 55.17560196]
[48.26266098 62.07626343]
[53.65336609 74.46166229]
[68.14896393 78.31881714]
[82.64456177 82.17597961]
[95.36396027 83.13064575]
[102.36114502 90.16777802]
[112.80096436 79.39696503]
[123.24077606 68.62615967]
[133.56797791 57.74733353]
[143.78146362 46.76166916]
[153.99493408 35.77600479]
[164.20841980 24.79033852]
[174.42189026 13.80467415]
[184.63537598 2.81900978]
[194.84886169 -8.16665459]
[185.27534485 -19.74261475]
[177.29475403 -32.46916580]
[171.04364014 -46.12854385]
[166.62895203 -60.48701477]
[164.12626648 -75.29888916]
[163.57838440 -90.31070709]
[164.99468994 -105.26560974]
[168.35093689 -119.90769196]
[173.58969116 -133.98641968]
[180.62133789 -147.26086426]
[189.32553101 -159.50390625]
[199.55334473 -170.50602722]
[211.12976074 -180.07899475]
[223.85668945 -188.05899048]
[237.51637268 -194.30944824]
[251.87504578 -198.72344971]
[266.68704224 -201.22543335]
[281.69888306 -201.77259827]
[296.65371704 -200.35559082]
[311.29565430 -196.99864197]
[325.37411499 -191.75920105]
[338.64822388 -184.72692871]
[350.89086914 -176.02215576]
[361.89251709 -165.79382324]
[371.46490479 -154.21694946]
[379.44430542 -141.48963928]
[385.69412231 -127.82965851]
[390.10742188 -113.47077179]
[392.60870361 -98.65866089]
[393.15515137 -83.64678955]
[391.73742676 -68.69201660]
[388.37979126 -54.05025482]
[383.13967896 -39.97203445]
[376.10678101 -26.69825172]
[367.40142822 -14.45604324]
[357.17254639 -3.45488620]
[345.59524536 6.11697435]
[332.86755371 14.09575081]
[319.20727539 20.34491730]
[304.84817505 24.75754166]
[290.03594971 27.25811768]
[275.02404785 27.80385590]
[260.06933594 26.38542175]
[245.42773438 23.02708244]
[231.34976196 17.78630638]
[218.07630920 10.75277042]
[205.83451843 2.04682493]
[195.62104797 13.03248978]
[185.40756226 24.01815414]
[175.19407654 35.00381851]
[164.98060608 45.98948288]
[154.76712036 56.97514725]
[144.55364990 67.96081543]
[142.28797913 75.04688263]
[134.01158142 79.06597137]
[123.57176971 89.83677673]
[113.13195801 100.60758972]
[107.50000000 114.51014709]
[107.50000000 129.51014709]
[107.50000000 144.51014709]
[107.50000000 159.51014709]
[107.50000000 174.51014709]
[107.50000000 189.51014709]
[107.50000000 204.51014709]
[107.50000000 219.51014709]
[107.50000000 234.51014709]
[107.50000000 249.51014709]
[107.50000000 264.51013184]
[107.50000000 279.51013184]
[107.50000000 294.51013184]
[122.03988647 298.57147217]
[134.94427490 306.40597534]
[145.25555420 317.43231201]
[152.20857239 330.83221436]
[155.28736877 345.61138916]
[154.26348877 360.67306519]
[149.21287537 374.89959717]
[140.51036072 387.23526001]
[128.80169678 396.76467896]
[114.95575714 402.78070068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[29 59]
[30 58]
[31 57]
[34 53]
[35 52]
[36 51]
[37 50]
[61 127]
[62 126]
[63 125]
[64 123]
[65 122]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
