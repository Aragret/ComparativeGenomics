%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUAACCCCGGGGGGGGGGACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGxxxxxxxxxxAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCACCCCCCCCCCAAACUAACCCC\
) } def
/len { sequence length } bind def

/coor [
[82.23873901 562.80212402]
[68.21678925 557.24914551]
[56.01683426 548.38281250]
[46.40576553 536.76049805]
[39.98773956 523.11279297]
[37.16620255 508.29757690]
[38.11851883 493.24621582]
[42.78482437 478.90478516]
[50.87178802 466.17483521]
[61.87106323 455.85656738]
[75.09122467 448.59857178]
[89.70123291 444.85714722]
[89.70123291 429.85714722]
[89.70123291 414.85714722]
[89.70123291 399.85714722]
[89.70123291 384.85714722]
[89.70123291 369.85714722]
[89.70123291 354.85714722]
[89.70123291 339.85714722]
[89.70123291 324.85714722]
[89.70123291 309.85714722]
[75.41757965 306.98385620]
[61.96966171 301.36447144]
[49.88002014 293.21524048]
[39.61883163 282.85076904]
[31.58562851 270.67178345]
[26.09372902 257.14981079]
[23.35803413 242.80873108]
[23.48660469 228.20463562]
[26.47640991 213.90419006]
[32.21335220 200.46267700]
[40.47663116 188.40235901]
[50.94723892 178.19233704]
[63.22027206 170.23011780]
[76.82059479 164.82630920]
[91.22122192 162.19238281]
[91.52920532 147.19554138]
[91.83718109 132.19871521]
[92.14515686 117.20187378]
[77.32427979 100.07662964]
[88.85470581 76.02239990]
[82.86640930 62.26956940]
[76.87811279 48.51673889]
[70.88981628 34.76391220]
[62.60434341 22.25987434]
[52.27344131 11.38456059]
[41.94253922 0.50924724]
[30.85740471 -9.59618759]
[19.07526779 -18.87957382]
[7.29313087 -28.16295815]
[-7.60312891 -23.81772232]
[-22.19711685 -29.08983040]
[-30.87714767 -41.95204926]
[-30.30557251 -57.45859528]
[-20.70217323 -69.64688110]
[-5.75965309 -73.83026886]
[8.77628422 -68.40015411]
[17.31627464 -55.44452667]
[16.57651711 -39.94509506]
[28.35865402 -30.66171074]
[40.14078903 -21.37832451]
[38.74573135 -36.31331253]
[47.13450241 -48.74828339]
[61.50518417 -53.04752731]
[75.34477234 -47.26256561]
[82.38095856 -34.01522446]
[79.42484283 -19.30939674]
[67.81617737 -9.80998039]
[52.81785202 -9.82165527]
[63.14875412 1.05365837]
[73.47966003 11.92897224]
[70.45046997 -2.76197839]
[72.26598358 -17.65170288]
[78.73648071 -31.18435287]
[89.18586731 -41.94588089]
[102.52225494 -48.81179428]
[117.35210419 -51.06466675]
[132.12583923 -48.46908951]
[145.29969788 -41.29627991]
[155.49714661 -30.29573822]
[161.65264893 -16.61692429]
[163.12297058 -1.68916047]
[159.75450134 12.92772770]
[151.89921570 25.70639992]
[140.37791443 35.31159210]
[126.39449310 40.73964310]
[111.41008759 41.42336655]
[96.99044037 37.29132080]
[84.64264679 28.77561378]
[90.63094330 42.52844238]
[96.61923981 56.28127289]
[102.60753632 70.03410339]
[116.75485229 75.01942444]
[130.04219055 68.05906677]
[134.64912415 55.96857834]
[145.90975952 50.45773697]
[157.51512146 54.00424576]
[170.94258118 47.31816864]
[184.37002563 40.63209534]
[186.80603027 25.30742455]
[197.80818176 14.36520195]
[213.14593506 12.01293278]
[226.92160034 19.15511322]
[233.83815002 33.04542923]
[231.23603821 48.34276962]
[220.11582947 59.16499710]
[204.75347900 61.35074234]
[191.05610657 54.05954361]
[177.62864685 60.74561691]
[164.20120239 67.43169403]
[155.34848022 82.55366516]
[137.00254822 81.34640503]
[123.71520996 88.30676270]
[121.20051575 108.04564667]
[107.14199829 117.50984955]
[106.83401489 132.50668335]
[106.52603912 147.50352478]
[106.21806335 162.50036621]
[121.28378296 165.98936462]
[135.29618835 172.51832581]
[147.64956665 181.80242920]
[157.81042480 193.43786621]
[165.34060669 206.91928101]
[169.91609192 221.66183472]
[171.34101868 237.02651978]
[169.55599976 252.34786987]
[164.64065552 266.96276855]
[156.80999756 280.23919678]
[146.40512085 291.60348511]
[133.87820435 300.56512451]
[119.77303314 306.73806763]
[104.70123291 309.85714722]
[104.70123291 324.85714722]
[104.70123291 339.85714722]
[104.70123291 354.85714722]
[104.70123291 369.85714722]
[104.70123291 384.85714722]
[104.70123291 399.85714722]
[104.70123291 414.85714722]
[104.70123291 429.85714722]
[104.70123291 444.85714722]
[119.31124878 448.59857178]
[132.53140259 455.85656738]
[143.53068542 466.17483521]
[151.61764526 478.90478516]
[156.28395081 493.24621582]
[157.23626709 508.29757690]
[154.41473389 523.11279297]
[147.99670410 536.76049805]
[138.38563538 548.38281250]
[126.18567657 557.24914551]
[112.16373444 562.80212402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[36 118]
[37 117]
[38 116]
[39 115]
[41 92]
[42 91]
[43 90]
[44 89]
[45 71]
[46 70]
[47 69]
[48 61]
[49 60]
[50 59]
[93 113]
[94 112]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
