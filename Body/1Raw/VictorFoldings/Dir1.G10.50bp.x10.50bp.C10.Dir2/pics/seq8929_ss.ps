%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACACACGGGGGGGGGGUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAxxxxxxxxxxACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUCCCCCCCCCCACCAACAAAC\
) } def
/len { sequence length } bind def

/coor [
[77.82499695 533.89233398]
[63.97905731 527.87628174]
[52.27039719 518.34686279]
[43.56787109 506.01119995]
[38.51726913 491.78469849]
[37.49337769 476.72302246]
[40.57217789 461.94384766]
[47.52519989 448.54391479]
[57.83648300 437.51757812]
[70.74086761 429.68307495]
[85.28075409 425.62176514]
[85.28075409 410.62176514]
[85.28075409 395.62176514]
[85.28075409 380.62176514]
[85.28075409 365.62176514]
[85.28075409 350.62176514]
[85.28075409 335.62176514]
[85.28075409 320.62176514]
[85.28075409 305.62176514]
[85.28075409 290.62176514]
[74.95977020 282.84524536]
[70.96179962 270.35162354]
[74.96791840 257.65600586]
[85.72298431 249.48371887]
[86.03504181 234.48696899]
[73.18318176 230.24317932]
[62.04215240 222.52859497]
[53.52691650 211.96519470]
[48.34006882 199.40934753]
[46.91386032 185.88244629]
[49.37421417 172.48777771]
[55.52965927 160.32057190]
[64.88619232 150.37844849]
[76.68692017 143.47958374]
[89.97327423 140.19541931]
[90.90890503 125.22462463]
[91.84453583 110.25383759]
[92.15659332 95.25708008]
[91.84453583 80.26033020]
[91.53247833 65.26357269]
[91.22042084 50.26681900]
[89.50772858 35.36491776]
[86.40940857 20.68839264]
[82.70324707 6.15345669]
[78.39566803 -8.21472740]
[74.08808136 -22.58291245]
[69.78049469 -36.95109558]
[65.47290802 -51.31927872]
[50.59520721 -49.19522476]
[35.56710434 -49.31240082]
[20.72433090 -51.66819000]
[6.39848185 -56.20996475]
[-7.09039736 -62.83626175]
[-19.44095993 -71.39904785]
[-30.37729073 -81.70701599]
[-39.65506744 -93.52989960]
[-47.06702423 -106.60356140]
[-52.44756699 -120.63592529]
[-55.67650223 -135.31352234]
[-56.68169022 -150.30842590]
[-55.44067383 -165.28565979]
[-51.98117828 -179.91062927]
[-46.38048935 -193.85658264]
[-38.76372910 -206.81199646]
[-29.30105972 -218.48742676]
[-18.20387840 -228.62202454]
[-5.72010422 -236.98941040]
[7.87137413 -243.40263367]
[22.26691628 -247.71841431]
[37.14492035 -249.84034729]
[52.17300797 -249.72103882]
[67.01544952 -247.36312866]
[81.34064484 -242.81932068]
[94.82858276 -236.19110107]
[107.17792511 -227.62655640]
[118.11278534 -217.31701660]
[127.38888550 -205.49282837]
[134.79898071 -192.41810608]
[140.17752075 -178.38496399]
[143.40437317 -163.70692444]
[144.40740967 -148.71186829]
[143.16426086 -133.73481750]
[139.70268250 -119.11034393]
[134.10000610 -105.16517639]
[126.48140717 -92.21085358]
[117.01707458 -80.53677368]
[105.91844940 -70.40374756]
[93.43348694 -62.03814697]
[79.84109497 -55.62686539]
[84.14868164 -41.25868225]
[88.45626068 -26.89049721]
[92.76384735 -12.52231216]
[97.07143402 1.84587181]
[99.54453278 3.29193473]
[101.57412720 5.83648539]
[102.72678375 9.30826759]
[102.64192963 13.37813950]
[101.08593750 17.59007072]
[104.18425751 32.26659775]
[111.39189911 19.11175537]
[124.49588776 11.81206226]
[139.47477722 12.60770130]
[151.73171997 21.25450134]
[157.50524902 35.09886932]
[155.02349854 49.89214325]
[145.04812622 61.09445953]
[130.64042664 65.26796722]
[116.22194672 61.13187027]
[106.21717834 49.95476532]
[106.52922821 64.95151520]
[106.84128571 79.94827271]
[107.15334320 94.94502258]
[109.23278046 97.27094269]
[110.48760223 100.42372894]
[110.60311127 104.09014893]
[109.38831329 107.84278107]
[106.81532288 111.18946075]
[105.87969971 126.16025543]
[104.94406891 141.13104248]
[120.23031616 147.55628967]
[132.39062500 158.79165649]
[139.97914124 173.47753906]
[142.10171509 189.84555054]
[138.52119446 205.93138123]
[129.68377686 219.81059265]
[116.66352081 229.82884216]
[101.03179932 234.79902649]
[100.71974182 249.79577637]
[113.04958344 262.16156006]
[112.66151428 279.28268433]
[100.28075409 290.62176514]
[100.28075409 305.62176514]
[100.28075409 320.62176514]
[100.28075409 335.62176514]
[100.28075409 350.62176514]
[100.28075409 365.62176514]
[100.28075409 380.62176514]
[100.28075409 395.62176514]
[100.28075409 410.62176514]
[100.28075409 425.62176514]
[114.82064056 429.68307495]
[127.72502136 437.51757812]
[138.03630066 448.54391479]
[144.98931885 461.94384766]
[148.06813049 476.72302246]
[147.04423523 491.78469849]
[141.99363708 506.01119995]
[133.29110718 518.34686279]
[121.58244324 527.87628174]
[107.73650360 533.89233398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 128]
[25 127]
[35 119]
[36 118]
[37 117]
[38 112]
[39 111]
[40 110]
[41 109]
[42 99]
[43 98]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
