%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCAUAAUAGGGGGGGGGGGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAxxxxxxxxxxUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCCCCCCCCCCCUAAUCCUAAUA\
) } def
/len { sequence length } bind def

/coor [
[75.74427795 326.82910156]
[65.13856506 316.14715576]
[56.90050125 303.54876709]
[51.36743164 289.54986572]
[48.76592636 274.72363281]
[49.20251846 259.67721558]
[52.65932846 245.02677917]
[58.99480438 231.37223816]
[67.94950867 219.27272034]
[79.15675354 209.22372437]
[92.15761566 201.63671875]
[106.41970825 196.82240295]
[104.57638550 181.93609619]
[102.73305511 167.04978943]
[100.88973236 152.16348267]
[99.04640961 137.27717590]
[97.20308685 122.39086914]
[85.23282623 113.35134888]
[70.41034698 115.65222168]
[55.58786011 117.95309448]
[40.76538086 120.25396729]
[25.94289780 122.55484772]
[11.12041569 124.85572052]
[-3.70206642 127.15659332]
[-18.52454948 129.45747375]
[-33.34703064 131.75834656]
[-36.26083374 146.63401794]
[-44.08934784 159.61439514]
[-55.88724899 169.13203430]
[-70.22987366 174.03762817]
[-85.38528442 173.73881531]
[-99.52339172 168.27166748]
[-110.93695068 158.29637146]
[-118.24771881 145.01750183]
[-120.57288361 130.03852844]
[-117.63167572 115.16825867]
[-109.77925110 102.20233154]
[-97.96383667 92.70645142]
[-83.61219025 87.82729340]
[-68.45735931 88.15403748]
[-54.32934570 93.64723206]
[-42.93418884 103.64353943]
[-35.64790726 116.93585968]
[-20.82542419 114.63498688]
[-6.00294113 112.33411407]
[8.81954098 110.03324127]
[23.64202309 107.73236084]
[38.46450424 105.43148804]
[53.28698730 103.13061523]
[68.10946655 100.82974243]
[82.93195343 98.52886200]
[78.50194550 96.03975677]
[74.43525696 92.69401550]
[70.85451508 88.54251099]
[60.74907684 77.45738220]
[50.64364243 66.37224579]
[34.86068344 61.91912842]
[31.08852768 45.95971680]
[43.20764542 34.91168213]
[58.75092697 40.14029694]
[61.72877884 56.26681137]
[71.83421326 67.35194397]
[81.93964386 78.43708038]
[96.36703491 74.33213043]
[99.12327576 59.58753586]
[101.87951660 44.84294128]
[104.63575745 30.09834480]
[90.77046204 24.21893311]
[78.49348450 15.49597931]
[68.37904358 4.33747339]
[60.90022278 -8.73468304]
[56.40681076 -23.10908127]
[55.10897064 -38.11340332]
[57.06740952 -53.04587173]
[62.19052505 -67.20806122]
[70.23870087 -79.93759155]
[80.83551025 -90.63907623]
[93.48532104 -98.81198120]
[107.59647369 -104.07405090]
[122.50897217 -106.17916870]
[137.52532959 -105.02886963]
[151.94319153 -100.67695618]
[165.08822632 -93.32698059]
[176.34561157 -83.32270813]
[185.18881226 -71.13206482]
[191.20422363 -57.32521820]
[194.11048889 -42.54795074]
[193.77168274 -27.49141502]
[190.20364380 -12.85983276]
[183.57325745 0.66244745]
[174.19064331 12.44296551]
[162.49462891 21.93072510]
[149.03228760 28.68196869]
[134.43325806 32.38092422]
[119.38035583 32.85458755]
[116.62411499 47.59918213]
[113.86787415 62.34378052]
[111.11162567 77.08837891]
[121.88031006 87.53038788]
[136.53303528 84.32138824]
[151.18576050 81.11239624]
[165.83848572 77.90339661]
[180.49121094 74.69440460]
[183.96824646 59.83260345]
[193.55590820 47.95660782]
[207.35058594 41.42440033]
[222.61331177 41.53295517]
[236.31367493 48.26071930]
[245.73146057 60.27188873]
[248.99674988 75.18164062]
[245.46121216 90.02962494]
[235.82684326 101.86777496]
[222.00656128 108.34561157]
[206.74436951 108.17695618]
[193.07060242 101.39528656]
[183.70019531 89.34712219]
[169.04747009 92.55612183]
[154.39476013 95.76512146]
[139.74203491 98.97411346]
[125.08930206 102.18311310]
[139.48675537 106.39184570]
[154.46629333 107.17516327]
[166.29670715 116.39694214]
[170.71249390 130.73223877]
[166.12155151 145.01240540]
[154.17913818 154.08866882]
[139.19113159 154.68856812]
[126.56153107 146.59577942]
[120.84394073 132.72776794]
[112.08939362 120.54753876]
[113.93271637 135.43385315]
[115.77603912 150.32015991]
[117.61936188 165.20646667]
[119.46269226 180.09277344]
[121.30601501 194.97908020]
[136.31163025 196.16926575]
[150.77038574 200.35603333]
[164.09024048 207.36791992]
[175.72572327 216.91781616]
[185.20037842 228.61463928]
[192.12622070 241.97943115]
[196.21965027 256.46490479]
[197.31303406 271.47787476]
[195.36161804 286.40356445]
[190.44528198 300.63082886]
[182.76536560 313.57702637]
[172.63635254 324.71200562]
[160.47302246 333.57983398]
[146.77346802 339.81735229]
[132.09864807 343.16915894]
[117.04949951 343.49798584]
[102.24227905 340.79037476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[54 63]
[55 62]
[56 61]
[64 98]
[65 97]
[66 96]
[67 95]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
