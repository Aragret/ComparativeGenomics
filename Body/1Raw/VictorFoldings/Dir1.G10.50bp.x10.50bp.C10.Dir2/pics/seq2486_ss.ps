%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCCUAUGGGGGGGGGGAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAxxxxxxxxxxUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCCCCCCCCCCCAUCACCCGAU\
) } def
/len { sequence length } bind def

/coor [
[83.63605499 376.77441406]
[70.41585541 369.50195312]
[59.52905273 359.05493164]
[51.71792221 346.14569092]
[47.51504135 331.65438843]
[47.20697021 316.56903076]
[50.81470871 301.91821289]
[58.09228134 288.70083618]
[68.54348755 277.81805420]
[81.45574951 270.01190186]
[95.94869232 265.81463623]
[95.63663483 250.81787109]
[95.32457733 235.82112122]
[95.01251984 220.82435608]
[94.70046234 205.82760620]
[94.38840485 190.83085632]
[94.07635498 175.83410645]
[93.76429749 160.83734131]
[93.45223999 145.84059143]
[93.14018250 130.84384155]
[92.82812500 115.84708405]
[88.22256470 101.57162476]
[79.71147156 89.22005463]
[71.20037842 76.86847687]
[62.68929291 64.51690674]
[54.17819977 52.16533661]
[45.66711044 39.81376266]
[28.87417793 32.33196640]
[28.08753777 14.82821846]
[19.32133102 2.65638208]
[6.30502224 -4.79852819]
[-8.62928581 -6.20083189]
[-23.56359291 -7.60313559]
[-38.49790192 -9.00543880]
[-53.43220901 -10.40774250]
[-68.36651611 -11.81004620]
[-82.82958984 -5.39676714]
[-94.77778625 -14.29001522]
[-111.11280060 -9.75090694]
[-119.99650574 -24.19099617]
[-108.57999420 -36.72493362]
[-93.37548065 -29.22432327]
[-79.98061371 -35.73790359]
[-66.96421051 -26.74435425]
[-52.02990341 -25.34205055]
[-37.09559631 -23.93974686]
[-22.16128922 -22.53744316]
[-7.22698212 -21.13513947]
[7.70732546 -19.73283577]
[9.55262661 -31.71458054]
[17.08882713 -39.25709534]
[13.68584919 -53.86598587]
[10.28287125 -68.47487640]
[6.87989378 -83.08377075]
[-8.15529728 -82.50109100]
[-23.02901649 -84.77462769]
[-37.20358658 -89.82220459]
[-50.16660690 -97.46135712]
[-61.44947433 -107.41592407]
[-70.64431763 -119.32605743]
[-77.41874695 -132.76121521]
[-81.52787781 -147.23573303]
[-82.82315826 -162.22636414]
[-81.25777435 -177.19119263]
[-76.88830566 -191.58924866]
[-69.87271118 -204.90007019]
[-60.46459961 -216.64247131]
[-49.00406647 -226.39196777]
[-35.90540314 -233.79612732]
[-21.64211845 -238.58728027]
[-6.72982121 -240.59223938]
[8.29241848 -239.73854065]
[22.88155556 -236.05702209]
[36.51020432 -229.68078613]
[48.68569183 -220.84030151]
[58.96788788 -209.85517883]
[66.98509979 -197.12251282]
[72.44750214 -183.10256958]
[75.15763092 -168.30218506]
[75.01753235 -153.25636292]
[72.03224945 -138.50900269]
[66.30971527 -124.59320831]
[58.05679321 -112.01204681]
[47.57181549 -101.22029877]
[35.23381042 -92.60809326]
[21.48878670 -86.48674774]
[24.89176369 -71.87785339]
[28.29474258 -57.26896286]
[31.69771957 -42.66007233]
[46.34613037 -26.31788635]
[31.49316788 -6.10982513]
[40.25937653 6.06201172]
[52.18230820 8.33159161]
[59.57843781 18.45662117]
[58.01868439 31.30267334]
[66.52977753 43.65424347]
[75.04086304 56.00581741]
[83.55195618 68.35739136]
[92.06304169 80.70896149]
[100.57413483 93.06053162]
[103.37033844 87.54508972]
[108.12794495 83.00062561]
[114.55480194 79.94213104]
[122.23996735 78.80513763]
[130.67384338 79.92037201]
[145.63409424 81.01168060]
[160.59434509 82.10298920]
[167.06579590 68.37402344]
[178.06243896 57.91273499]
[192.09703064 52.13393402]
[207.27153015 51.81915283]
[221.53369141 57.01096725]
[232.95469666 67.00721741]
[239.98994446 80.45600891]
[241.68795776 95.53848267]
[237.81910706 110.21487427]
[228.90663147 122.50032043]
[216.15585327 130.73330688]
[201.29121399 133.80039978]
[186.32304382 131.28678894]
[173.27565002 123.53242493]
[163.91360474 111.58602905]
[159.50302124 97.06324005]
[144.54278564 95.97193146]
[129.58253479 94.88062286]
[124.14311981 100.04421997]
[127.64735413 114.62915802]
[113.26428986 110.37142944]
[107.82488251 115.53502655]
[108.13694000 130.53178406]
[108.44898987 145.52853394]
[108.76104736 160.52528381]
[109.07310486 175.52204895]
[109.38516235 190.51879883]
[109.69721985 205.51554871]
[110.00927734 220.51229858]
[110.32132721 235.50906372]
[110.63338470 250.50581360]
[110.94544220 265.50256348]
[125.60043335 269.09332275]
[138.82624817 276.35559082]
[149.72111511 286.79418945]
[157.54220581 299.69738770]
[161.75628662 314.18545532]
[162.07600403 329.27056885]
[158.47956848 343.92416382]
[151.21220398 357.14715576]
[140.76940918 368.03799438]
[127.86318207 375.85412598]
[113.37348938 380.06259155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 100]
[23 99]
[24 98]
[25 97]
[26 96]
[27 95]
[29 92]
[30 91]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[38 42]
[51 89]
[52 88]
[53 87]
[54 86]
[105 125]
[106 124]
[107 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
