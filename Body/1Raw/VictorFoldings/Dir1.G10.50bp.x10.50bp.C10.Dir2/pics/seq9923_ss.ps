%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACCCCUCAGGGGGGGGGGCAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAxxxxxxxxxxCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCCCCCCCCCCCUCCUAUCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 395.83767700]
[70.75619507 391.02822876]
[57.85220718 383.26284790]
[46.91955185 372.90469360]
[38.46956635 360.43826294]
[32.89747238 346.44662476]
[30.46388245 331.58419800]
[31.28262329 316.54614258]
[35.31539917 302.03576660]
[42.37359238 288.73178101]
[52.12707901 277.25643921]
[64.11966705 268.14645386]
[77.79044342 261.82791138]
[92.50000000 258.59634399]
[92.50000000 243.59634399]
[92.50000000 228.59634399]
[92.50000000 213.59634399]
[92.50000000 198.59634399]
[92.50000000 183.59634399]
[92.50000000 168.59634399]
[92.50000000 153.59634399]
[92.50000000 138.59634399]
[92.50000000 123.59634399]
[87.01428223 118.48197174]
[83.64173126 133.09791565]
[69.29769897 137.48526001]
[58.32606506 127.25670624]
[61.69834900 112.64070129]
[76.04283905 108.25321198]
[70.55711365 103.13883209]
[55.59388733 104.18850708]
[40.63066101 105.23818207]
[25.66743088 106.28785706]
[17.56208801 119.51975250]
[3.21436024 125.42926025]
[-11.85875893 121.74406433]
[-21.86134720 109.88118744]
[-22.94720459 94.40214539]
[-14.69879818 81.25895691]
[-0.28780767 75.50543976]
[14.74444675 79.35394287]
[24.61775780 91.32463074]
[39.58098602 90.27495575]
[54.54421234 89.22528076]
[69.50743866 88.17560577]
[73.86712646 82.07289124]
[60.23241425 75.82031250]
[45.66159058 72.25786591]
[40.44295883 58.19493866]
[49.16251373 45.98963547]
[64.15775299 46.36764145]
[72.25123596 58.99627686]
[82.58648682 69.86745453]
[86.94617462 63.76473618]
[83.08805084 49.26939392]
[79.22993469 34.77405548]
[75.37181091 20.27871323]
[71.51369476 5.78337145]
[56.46783829 6.44394875]
[41.63182449 3.85422254]
[27.69955063 -1.86468112]
[15.32266045 -10.44527912]
[5.08004189 -21.48624039]
[-2.54923964 -34.47116089]
[-7.20834827 -48.79270935]
[-8.67936897 -63.78104401]
[-6.89350033 -78.73513031]
[-1.93426955 -92.95554352]
[5.96637058 -105.77716064]
[16.43889236 -116.60030365]
[28.99347878 -124.91874695]
[43.04292679 -130.34341431]
[57.93011856 -132.62060547]
[72.95875549 -131.64378357]
[87.42591858 -127.45866394]
[100.65495300 -120.26097107]
[112.02711487 -110.38736725]
[121.01050568 -98.29965973]
[127.18495178 -84.56320190]
[130.26167297 -69.82048035]
[130.09675598 -54.76103210]
[126.69791412 -40.08922195]
[120.22412872 -26.49127769]
[110.97817993 -14.60319519]
[99.39252472 -4.98100233]
[86.00903320 1.92525172]
[89.86715698 16.42059326]
[93.72527313 30.91593361]
[97.58339691 45.41127396]
[101.44151306 59.90661621]
[114.71904755 72.07116699]
[118.51053619 86.31347656]
[114.21780396 97.30120850]
[128.94758606 94.46690369]
[143.67738342 91.63259888]
[158.40718079 88.79830170]
[173.13696289 85.96399689]
[187.17445374 80.67732239]
[200.11451721 73.09084320]
[213.05458069 65.50436401]
[225.99465942 57.91788101]
[229.74017334 42.56383896]
[243.28880310 34.42687988]
[258.60238647 38.33451843]
[266.59564209 51.96842194]
[262.52633667 67.23983765]
[248.80867004 75.08850098]
[233.58113098 70.85794830]
[220.64106750 78.44442749]
[207.70100403 86.03090668]
[194.76092529 93.61738586]
[209.75781250 93.92333984]
[223.87280273 98.99946594]
[235.62965393 108.31485748]
[243.79873657 120.89524078]
[247.52566528 135.42486572]
[246.42065430 150.38410950]
[240.59927368 164.20841980]
[230.67036438 175.45193481]
[217.67237854 182.93873596]
[202.96473694 185.88578796]
[188.08566284 183.98487854]
[174.59135437 177.43479919]
[163.89314270 166.92060852]
[157.10990906 153.54197693]
[154.95111084 138.69813538]
[157.64254761 123.94157410]
[164.90269470 110.81563568]
[175.97126770 100.69378662]
[161.24147034 103.52809143]
[146.51168823 106.36238861]
[131.78189087 109.19669342]
[117.05210876 112.03099823]
[107.50000000 123.59634399]
[107.50000000 138.59634399]
[107.50000000 153.59634399]
[107.50000000 168.59634399]
[107.50000000 183.59634399]
[107.50000000 198.59634399]
[107.50000000 213.59634399]
[107.50000000 228.59634399]
[107.50000000 243.59634399]
[107.50000000 258.59634399]
[122.20955658 261.82791138]
[135.88034058 268.14645386]
[147.87292480 277.25643921]
[157.62640381 288.73178101]
[164.68460083 302.03576660]
[168.71737671 316.54614258]
[169.53611755 331.58419800]
[167.10252380 346.44662476]
[161.53042603 360.43826294]
[153.08044434 372.90469360]
[142.14779663 383.26284790]
[129.24380493 391.02822876]
[114.97203827 395.83767700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[30 45]
[31 44]
[32 43]
[33 42]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[93 133]
[94 132]
[95 131]
[96 130]
[97 129]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
