%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCCACCUGGGGGGGGGGUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGxxxxxxxxxxAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACCCCCCCCCCCACUCCACCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 403.28640747]
[71.19830322 397.27035522]
[59.48964310 387.74096680]
[50.78712082 375.40527344]
[45.73651886 361.17877197]
[44.71262741 346.11709595]
[47.79142761 331.33792114]
[54.74444962 317.93798828]
[65.05573273 306.91165161]
[77.96011353 299.07714844]
[92.50000000 295.01583862]
[92.50000000 280.01583862]
[92.50000000 265.01583862]
[92.50000000 250.01583862]
[92.50000000 235.01583862]
[92.50000000 220.01583862]
[92.50000000 205.01583862]
[92.50000000 190.01583862]
[92.50000000 175.01583862]
[92.50000000 160.01583862]
[92.50000000 145.01583862]
[69.04813385 138.91966248]
[50.26859665 120.56922150]
[35.85638046 124.72710419]
[21.44416428 128.88499451]
[16.51508713 133.44697571]
[10.86889458 134.60964966]
[6.34544277 132.90263367]
[-8.22726059 136.45739746]
[-17.75505257 149.36479187]
[-33.79166794 149.81927490]
[-44.03518295 137.47221375]
[-40.62765503 121.79521942]
[-26.18304634 114.81433105]
[-11.78202248 121.88469696]
[2.79068065 118.32993317]
[17.28627777 114.47277832]
[31.69849396 110.31488800]
[46.11071014 106.15700531]
[47.35326767 98.76065063]
[32.56056213 96.27552795]
[17.72389030 98.48305511]
[11.03979301 85.05461884]
[21.74562454 74.54818726]
[35.04568100 81.48282623]
[49.83838654 83.96794128]
[51.08094788 76.57158661]
[38.81857681 67.93247223]
[26.55620956 59.29335403]
[14.29384232 50.65423965]
[-2.07852674 49.71744919]
[-9.21074963 34.95047760]
[0.23419306 21.54431915]
[16.54015350 23.29007912]
[22.93295860 38.39187241]
[35.19532776 47.03098679]
[47.45769501 55.67010498]
[59.72006226 64.30921936]
[79.15318298 54.85391998]
[99.11220551 54.37229538]
[101.28904724 39.53108978]
[103.46588135 24.68988228]
[105.64271545 9.84867668]
[94.94844818 -3.95602965]
[97.46520996 -20.89562798]
[111.16143799 -30.60497284]
[113.02904510 -45.48825073]
[114.89665985 -60.37153244]
[101.04017639 -66.38604736]
[89.44033813 -76.06182098]
[81.03750610 -88.61447144]
[76.51284790 -103.02641296]
[76.23316956 -118.12934113]
[80.22113800 -132.69892883]
[88.15346527 -145.55407715]
[99.38710785 -155.65267944]
[113.01142120 -162.17610168]
[127.92192841 -164.59548950]
[142.90989685 -162.71473694]
[156.76034546 -156.68630981]
[168.35044861 -146.99888611]
[176.74067688 -134.43780518]
[181.25083923 -120.02131653]
[181.51535034 -104.91811371]
[177.51275635 -90.35254669]
[169.56752014 -77.50537109]
[158.32373047 -67.41805267]
[144.69287109 -60.90833282]
[129.77993774 -58.50391769]
[127.91233063 -43.62063980]
[126.04471588 -28.73736000]
[135.31715393 -19.73631668]
[137.72845459 -6.84213591]
[132.17280579 5.25590992]
[120.48392487 12.02551365]
[118.30708313 26.86672020]
[116.13024902 41.70792389]
[113.95341492 56.54912949]
[121.48371124 58.79011536]
[128.64683533 62.34771729]
[135.21093750 67.16011047]
[140.95495605 73.12443542]
[145.67582703 80.09872437]
[149.19549561 87.90514374]
[164.17520142 87.12529755]
[179.15492249 86.34545135]
[185.49554443 72.41508484]
[197.59075928 63.03616333]
[212.66117859 60.36388016]
[227.24372864 65.01231384]
[237.98744202 75.91329193]
[242.42349243 90.56184387]
[239.53250122 105.59184265]
[229.97882080 117.54949951]
[215.95779419 123.68703461]
[200.69136047 122.59409332]
[187.68762207 114.52182007]
[179.93476868 101.32516479]
[164.95504761 102.10501099]
[149.97534180 102.88485718]
[146.87701416 117.56138611]
[160.26330566 124.32949829]
[176.59829712 122.88037109]
[185.79803467 136.45596313]
[178.39862061 151.09088135]
[162.01191711 151.72996521]
[153.49517822 137.71577454]
[140.10890198 130.94766235]
[124.72821045 141.31324768]
[107.50000000 145.01583862]
[107.50000000 160.01583862]
[107.50000000 175.01583862]
[107.50000000 190.01583862]
[107.50000000 205.01583862]
[107.50000000 220.01583862]
[107.50000000 235.01583862]
[107.50000000 250.01583862]
[107.50000000 265.01583862]
[107.50000000 280.01583862]
[107.50000000 295.01583862]
[122.03988647 299.07714844]
[134.94427490 306.91165161]
[145.25555420 317.93798828]
[152.20857239 331.33792114]
[155.28736877 346.11709595]
[154.26348877 361.17877197]
[149.21287537 375.40527344]
[140.51036072 387.74096680]
[128.80169678 397.27035522]
[114.95575714 403.28640747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 39]
[24 38]
[25 37]
[28 36]
[29 35]
[47 58]
[48 57]
[49 56]
[50 55]
[60 98]
[61 97]
[62 96]
[63 95]
[66 91]
[67 90]
[68 89]
[104 120]
[105 119]
[106 118]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
