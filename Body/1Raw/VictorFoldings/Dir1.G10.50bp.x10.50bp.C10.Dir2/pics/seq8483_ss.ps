%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCACCCAGGGGGGGGGGACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAxxxxxxxxxxGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCCCCCCCCCCCAACCAACCA\
) } def
/len { sequence length } bind def

/coor [
[147.75236511 597.70111084]
[133.90641785 591.68505859]
[122.19776154 582.15563965]
[113.49523926 569.82000732]
[108.44463348 555.59344482]
[107.42074585 540.53179932]
[110.49954224 525.75262451]
[117.45256042 512.35272217]
[127.76384735 501.32638550]
[140.66822815 493.49185181]
[155.20811462 489.43054199]
[155.20811462 474.43054199]
[155.20811462 459.43054199]
[155.20811462 444.43054199]
[155.20811462 429.43054199]
[155.20811462 414.43054199]
[155.20811462 399.43054199]
[155.20811462 384.43054199]
[155.20811462 369.43054199]
[155.20811462 354.43054199]
[153.34049988 339.54727173]
[149.63433838 325.01232910]
[145.92817688 310.47738647]
[142.22201538 295.94247437]
[138.51585388 281.40753174]
[123.64050293 279.99005127]
[110.12231445 273.55673218]
[99.60115051 262.86657715]
[93.36058807 249.19628906]
[92.17139435 234.18775940]
[96.19634247 219.65090942]
[104.96823120 207.34538269]
[117.44408417 198.76757812]
[113.73792267 184.23265076]
[110.03176117 169.69770813]
[106.32559967 155.16278076]
[102.61943817 140.62783813]
[82.23554230 136.63204956]
[66.47602081 123.10034180]
[59.44333267 103.55525208]
[62.96819687 83.08466339]
[50.70582962 74.44554901]
[34.96807861 72.82263947]
[29.01987648 59.16730499]
[16.75750923 50.52819061]
[3.93237281 58.68811035]
[-11.04003906 61.31400681]
[-25.87654305 58.00544357]
[-38.31467819 49.26695633]
[-46.45772552 36.43109512]
[-49.06392288 21.45524406]
[-45.73584366 6.62310457]
[-36.98100281 -5.80352640]
[-24.13444138 -13.92967892]
[-9.15517330 -16.51617432]
[5.67257452 -13.16858864]
[18.08767891 -4.39740610]
[26.19692421 8.45983219]
[28.76371193 23.44248962]
[25.39662552 38.26582336]
[37.65899277 46.90493774]
[52.51965332 47.90991974]
[59.34494400 62.18318176]
[71.60731506 70.82229614]
[83.93235016 62.59259796]
[98.38653564 59.31978989]
[100.56336975 44.47858429]
[102.74020386 29.63737679]
[104.91704559 14.79617119]
[91.26537323 8.30591488]
[80.13437653 -1.92112207]
[72.51380920 -14.97555923]
[69.08128357 -29.69660568]
[70.14202118 -44.77527237]
[75.60169983 -58.87078094]
[84.97485352 -70.72975922]
[97.42802429 -79.29772186]
[111.85388184 -83.81281281]
[126.96968842 -83.87355042]
[141.43136597 -79.47453308]
[153.95298767 -71.00691223]
[163.42112732 -59.22363663]
[168.99389648 -45.17245865]
[170.17578125 -30.10280228]
[166.86166382 -15.35464859]
[159.34623718 -2.23939443]
[148.29779053 8.07675934]
[134.69871521 14.67650890]
[119.75824738 16.97300911]
[117.58141327 31.81421471]
[115.40457153 46.65541840]
[113.22773743 61.49662399]
[121.91777802 65.69120026]
[129.37655640 71.81311035]
[135.18507385 79.51845551]
[139.01701355 88.37438202]
[140.65713501 97.88338470]
[140.01329041 107.51129913]
[137.12164307 116.71725464]
[132.14463806 124.98409271]
[125.36187744 131.84742737]
[117.15437317 136.92167664]
[120.86053467 151.45661926]
[124.56669617 165.99154663]
[128.27285767 180.52648926]
[131.97901917 195.06143188]
[147.03897095 196.61805725]
[160.63217163 203.22087097]
[171.12641907 214.05557251]
[177.26901245 227.80105591]
[178.33619690 242.79048157]
[174.21841431 257.21331787]
[165.43121338 269.33413696]
[153.05079651 277.70135498]
[156.75695801 292.23629761]
[160.46311951 306.77124023]
[164.16928101 321.30618286]
[167.87544250 335.84109497]
[173.32923889 321.86770630]
[184.22343445 311.55670166]
[198.47546387 306.87915039]
[213.36094666 308.72921753]
[226.03433228 316.75326538]
[234.07301331 329.41735840]
[235.94030762 344.30068970]
[231.27926636 358.55813599]
[220.98088074 369.46423340]
[207.01379395 374.93420410]
[192.04795837 373.92239380]
[178.94422913 366.62222290]
[170.20811462 354.43054199]
[170.20811462 369.43054199]
[170.20811462 384.43054199]
[170.20811462 399.43054199]
[170.20811462 414.43054199]
[170.20811462 429.43054199]
[170.20811462 444.43054199]
[170.20811462 459.43054199]
[170.20811462 474.43054199]
[170.20811462 489.43054199]
[184.74800110 493.49185181]
[197.65238953 501.32638550]
[207.96366882 512.35272217]
[214.91668701 525.75262451]
[217.99548340 540.53179932]
[216.97160339 555.59344482]
[211.92098999 569.82000732]
[203.21847534 582.15563965]
[191.50981140 591.68505859]
[177.66386414 597.70111084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 118]
[22 117]
[23 116]
[24 115]
[25 114]
[33 106]
[34 105]
[35 104]
[36 103]
[37 102]
[41 64]
[42 63]
[44 61]
[45 60]
[66 92]
[67 91]
[68 90]
[69 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
