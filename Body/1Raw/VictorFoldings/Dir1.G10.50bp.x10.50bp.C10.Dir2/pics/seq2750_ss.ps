%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUUUAACGGGGGGGGGGGGCCGCGGUACCCUAACCGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAxxxxxxxxxxCGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCCCCCCCCCCCAUGUCUAAC\
) } def
/len { sequence length } bind def

/coor [
[105.37089539 404.21054077]
[92.15069580 396.93807983]
[81.26389313 386.49108887]
[73.45275879 373.58181763]
[69.24987793 359.09051514]
[68.94181061 344.00518799]
[72.54955292 329.35433960]
[79.82712555 316.13696289]
[90.27832794 305.25418091]
[103.19058990 297.44805908]
[117.68352509 293.25076294]
[117.37147522 278.25399780]
[117.05941772 263.25726318]
[116.74736023 248.26049805]
[116.43530273 233.26374817]
[116.12324524 218.26699829]
[115.81118774 203.27024841]
[115.49913788 188.27348328]
[115.18708038 173.27673340]
[114.87502289 158.27998352]
[114.56296539 143.28323364]
[114.25090790 128.28646851]
[108.35259247 123.65399933]
[96.55595398 114.38904572]
[90.65763092 109.75657654]
[76.01412964 113.00740051]
[61.37062836 116.25822449]
[46.72712708 119.50904846]
[32.08362579 122.75988007]
[23.80832672 136.22445679]
[8.41672611 139.81251526]
[-4.95961237 131.39532471]
[-8.38474464 115.96665955]
[0.17339899 102.68005371]
[15.63742447 99.41823578]
[28.83279991 108.11637878]
[43.47629929 104.86554718]
[58.11980057 101.61472321]
[72.76330566 98.36389923]
[87.40680695 95.11307526]
[98.70581055 85.24735260]
[103.90122223 71.17583466]
[109.09664154 57.10431290]
[105.54120636 39.06716156]
[119.39730835 28.34296417]
[124.29885864 14.16640663]
[121.49578857 -1.40450788]
[132.96722412 -10.90478420]
[137.86877441 -25.08134270]
[142.77032471 -39.25790024]
[147.67187500 -53.43445969]
[152.57344055 -67.61101532]
[144.40238953 -75.80715179]
[139.92912292 -86.42517090]
[139.77336121 -97.89439392]
[143.91920471 -108.53393555]
[151.72314453 -116.79903412]
[162.01367188 -121.50534821]
[173.26699829 -121.99855042]
[179.04327393 -135.84176636]
[184.81954956 -149.68498230]
[190.59582520 -163.52819824]
[196.37208557 -177.37141418]
[183.44526672 -185.02932739]
[171.71008301 -194.41181946]
[161.39492798 -205.33628845]
[152.70063782 -217.59007263]
[145.79641724 -230.93466187]
[140.81666565 -245.11027527]
[137.85832214 -259.84100342]
[136.97895813 -274.84008789]
[138.19570923 -289.81561279]
[141.48487854 -304.47601318]
[146.78244019 -318.53594971]
[153.98527527 -331.72174072]
[162.95320129 -343.77673340]
[173.51161194 -354.46624756]
[185.45503235 -363.58221436]
[198.55094910 -370.94723511]
[212.54444885 -376.41787720]
[227.16314697 -379.88769531]
[242.12249756 -381.28912354]
[257.13131714 -380.59490967]
[271.89739990 -377.81854248]
[286.13339233 -373.01409912]
[299.56216431 -366.27505493]
[311.92230225 -357.73260498]
[322.97320557 -347.55303955]
[332.49978638 -335.93450928]
[340.31661987 -323.10317993]
[346.27151489 -309.30877686]
[350.24859619 -294.81985474]
[352.17041016 -279.91842651]
[351.99954224 -264.89453125]
[349.73937988 -250.04066467]
[345.43386841 -235.64591980]
[339.16680908 -221.99050903]
[331.06024170 -209.34024048]
[321.27191162 -197.94134521]
[309.99237061 -188.01571655]
[297.44116211 -179.75656128]
[283.86264038 -173.32463074]
[269.52108765 -168.84513855]
[254.69564819 -166.40528870]
[239.67494202 -166.05255127]
[224.75132751 -167.79380798]
[210.21530151 -171.59513855]
[204.43904114 -157.75192261]
[198.66276550 -143.90870667]
[192.88648987 -130.06549072]
[187.11021423 -116.22227478]
[197.74673462 -100.93429565]
[197.09106445 -82.17276001]
[185.22656250 -67.43266296]
[166.74998474 -62.70946503]
[161.84843445 -48.53290558]
[156.94688416 -34.35634995]
[152.04533386 -20.17979050]
[147.14378357 -6.00323296]
[150.29745483 8.55367947]
[138.47541809 19.06795692]
[133.57386780 33.24451447]
[138.58540344 44.29855347]
[134.56802368 56.17624283]
[123.16815948 62.29972839]
[117.97274780 76.37124634]
[112.77732849 90.44276428]
[129.24766541 127.97441864]
[129.55972290 142.97117615]
[129.87178040 157.96792603]
[130.18383789 172.96467590]
[130.49589539 187.96142578]
[130.80793762 202.95819092]
[131.11999512 217.95494080]
[131.43205261 232.95169067]
[131.74411011 247.94844055]
[132.05616760 262.94519043]
[132.36822510 277.94195557]
[132.68028259 292.93872070]
[147.33528137 296.52947998]
[160.56108093 303.79174805]
[171.45594788 314.23031616]
[179.27705383 327.13354492]
[183.49111938 341.62161255]
[183.81083679 356.70669556]
[180.21441650 371.36032104]
[172.94705200 384.58331299]
[162.50425720 395.47415161]
[149.59802246 403.29025269]
[135.10832214 407.49874878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[41 127]
[42 126]
[43 125]
[45 122]
[46 121]
[48 119]
[49 118]
[50 117]
[51 116]
[52 115]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
