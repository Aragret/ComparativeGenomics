%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUACCCUGGGGGGGGGGCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUxxxxxxxxxxCUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGCCCCCCCCCCAUUCUACCCU\
) } def
/len { sequence length } bind def

/coor [
[96.40327454 396.63888550]
[82.55733490 390.62286377]
[70.84867096 381.09344482]
[62.14614868 368.75778198]
[57.09554672 354.53128052]
[56.07165527 339.46957397]
[59.15045166 324.69042969]
[66.10347748 311.29049683]
[76.41475677 300.26416016]
[89.31913757 292.42965698]
[103.85902405 288.36834717]
[103.85902405 273.36834717]
[103.85902405 258.36834717]
[103.85902405 243.36834717]
[103.85902405 228.36834717]
[103.85902405 213.36834717]
[103.85902405 198.36834717]
[103.85902405 183.36834717]
[103.85902405 168.36834717]
[103.85902405 153.36834717]
[103.85902405 138.36834717]
[103.85902405 123.36833954]
[99.64105225 137.76309204]
[86.16850281 144.35781860]
[72.21275330 138.85900879]
[66.85974884 124.84667969]
[73.59458923 111.44362640]
[88.03208923 107.37590027]
[73.03290558 107.21986389]
[58.03371429 107.06382751]
[43.03452682 106.90779114]
[28.03533936 106.75175476]
[20.83814812 120.25949860]
[8.18146896 128.86572266]
[-7.02628708 130.59277344]
[-21.29048920 125.04380035]
[-31.33333015 113.49391174]
[-34.84703445 98.59718323]
[-31.02418137 83.77677917]
[-20.74323463 72.43832397]
[-6.36668015 67.18729401]
[8.80185604 69.23035431]
[21.27675438 78.09802246]
[28.19137573 91.75257111]
[43.19056320 91.90860748]
[58.18975067 92.06464386]
[73.18894196 92.22068024]
[88.18812561 92.37671661]
[101.28128052 85.05760956]
[109.00537109 72.19920349]
[116.72945404 59.34080505]
[106.65065002 47.04042053]
[101.39094543 32.06155777]
[101.56637573 16.21382713]
[107.13751221 1.40518916]
[117.41643524 -10.58774853]
[131.15159607 -18.33287048]
[146.68022156 -20.91355515]
[162.12954712 -18.03712273]
[169.58445740 -31.05343246]
[177.03936768 -44.06974411]
[163.91018677 -36.81547928]
[149.44432068 -32.84823227]
[134.45132446 -32.39000702]
[119.77020264 -35.46644974]
[106.22251129 -41.90539551]
[94.56639099 -51.34652328]
[85.45412445 -63.26150131]
[79.39564514 -76.98355865]
[76.72998810 -91.74479675]
[77.60631561 -106.71917725]
[81.97559357 -121.06871796]
[89.59332275 -133.99041748]
[100.03319550 -144.76116943]
[112.71099854 -152.77822876]
[126.91728210 -157.59295654]
[141.85704041 -158.93592834]
[156.69424438 -156.73197937]
[170.59858704 -151.10444641]
[182.79199219 -142.36827087]
[192.59208679 -131.01229858]
[199.45046997 -117.67203522]
[202.98333740 -103.09400940]
[202.99298096 -88.09400940]
[199.47886658 -73.51145172]
[192.63807678 -60.16299820]
[205.41542053 -68.02042389]
[218.19277954 -75.87784576]
[230.97013855 -83.73527527]
[243.74749756 -91.59270477]
[256.52487183 -99.45012665]
[269.30221558 -107.30755615]
[282.07955933 -115.16497803]
[280.02642822 -130.25485229]
[284.29461670 -144.87342834]
[294.14465332 -156.48791504]
[307.86996460 -163.08605957]
[323.09255981 -163.52468872]
[337.17504883 -157.72779846]
[347.67752075 -146.69973755]
[352.78036499 -132.35119629]
[351.59948730 -117.16812897]
[344.33950806 -103.78110504]
[332.25823975 -94.50950623]
[317.44882202 -90.95968628]
[302.47708130 -93.74668121]
[289.93701172 -102.38761902]
[277.15963745 -94.53019714]
[264.38229370 -86.67276764]
[251.60491943 -78.81534576]
[238.82756042 -70.95791626]
[226.05021667 -63.10049057]
[213.27285767 -55.24306488]
[200.49549866 -47.38563919]
[190.05567932 -36.61483383]
[182.60076904 -23.59852219]
[175.14585876 -10.58221340]
[184.62519836 -0.02412021]
[190.38050842 12.96887302]
[191.83457947 27.12650108]
[188.83142090 41.06013107]
[181.65286255 53.39895248]
[170.99221802 62.92485428]
[157.88728333 68.69266510]
[143.61932373 70.12393188]
[129.58786011 67.06488800]
[121.86376953 79.92329407]
[114.13968658 92.78169250]
[118.85902405 123.36833954]
[118.85902405 138.36834717]
[118.85902405 153.36834717]
[118.85902405 168.36834717]
[118.85902405 183.36834717]
[118.85902405 198.36834717]
[118.85902405 213.36834717]
[118.85902405 228.36834717]
[118.85902405 243.36834717]
[118.85902405 258.36834717]
[118.85902405 273.36834717]
[118.85902405 288.36834717]
[133.39891052 292.42965698]
[146.30329895 300.26416016]
[156.61457825 311.29049683]
[163.56759644 324.69042969]
[166.64639282 339.46957397]
[165.62251282 354.53128052]
[160.57191467 368.75778198]
[151.86938477 381.09344482]
[140.16072083 390.62286377]
[126.31478119 396.63888550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[49 128]
[50 127]
[51 126]
[59 117]
[60 116]
[61 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
