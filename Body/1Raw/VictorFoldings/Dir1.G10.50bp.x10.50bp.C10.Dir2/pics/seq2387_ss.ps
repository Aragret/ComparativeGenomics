%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACACCCACGGGGGGGGGGUACCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACxxxxxxxxxxCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCCCCCCCCCCCACACCCAC\
) } def
/len { sequence length } bind def

/coor [
[79.18245697 153.38011169]
[66.07752228 146.17436218]
[55.28377151 135.82269287]
[47.53659821 123.03036499]
[43.36383057 108.66895294]
[43.04976654 93.71691132]
[46.61579895 79.19294739]
[53.81896973 66.08659363]
[64.16851807 55.29081345]
[76.95932007 47.54112625]
[91.31991577 43.36553574]
[91.00785828 28.36878395]
[90.69580078 13.37202930]
[90.38374329 -1.62472427]
[90.07168579 -16.62147713]
[89.75962830 -31.61823082]
[89.44757843 -46.61498642]
[89.13552094 -61.61174011]
[88.82346344 -76.60848999]
[88.51140594 -91.60524750]
[88.19934845 -106.60199738]
[87.88729095 -121.59875488]
[72.89372253 -122.16739655]
[57.95936966 -123.61500549]
[43.13571548 -125.93657684]
[28.47385597 -129.12411499]
[14.02433968 -133.16662598]
[-0.16302516 -138.05018616]
[-14.03933144 -143.75794983]
[-27.55674553 -150.27024841]
[-40.66866684 -157.56463623]
[-53.32989883 -165.61595154]
[-65.49678802 -174.39645386]
[-77.12740326 -183.87586975]
[-88.18164825 -194.02151489]
[-98.62141418 -204.79843140]
[-108.41071320 -216.16944885]
[-117.51579285 -228.09538269]
[-125.90528107 -240.53511047]
[-133.55024719 -253.44577026]
[-140.42433167 -266.78283691]
[-146.50384521 -280.50033569]
[-151.76783752 -294.55099487]
[-156.19815063 -308.88638306]
[-159.77951050 -323.45703125]
[-162.49958801 -338.21276855]
[-164.34899902 -353.10269165]
[-165.32135010 -368.07550049]
[-165.41331482 -383.07958984]
[-164.62457275 -398.06317139]
[-162.95782471 -412.97467041]
[-160.41882324 -427.76263428]
[-157.01634216 -442.37609863]
[-152.76206970 -456.76470947]
[-147.67071533 -470.87884521]
[-141.75979614 -484.66983032]
[-135.04971313 -498.09014893]
[-127.56358337 -511.09356689]
[-119.32721710 -523.63519287]
[-110.36900330 -535.67181396]
[-100.71982574 -547.16198730]
[-90.41295624 -558.06610107]
[-79.48390198 -568.34643555]
[-67.97035980 -577.96771240]
[-55.91201401 -586.89672852]
[-43.35042572 -595.10260010]
[-30.32890320 -602.55718994]
[-16.89233208 -609.23468018]
[-3.08703446 -615.11212158]
[11.03940201 -620.16925049]
[25.43828011 -624.38854980]
[40.05996323 -627.75555420]
[54.85404968 -630.25866699]
[69.76953888 -631.88922119]
[84.75500488 -632.64166260]
[99.75880432 -632.51324463]
[114.72920990 -631.50457764]
[129.61462402 -629.61907959]
[144.36370850 -626.86315918]
[158.92564392 -623.24645996]
[173.25021362 -618.78137207]
[187.28805542 -613.48333740]
[200.99076843 -607.37054443]
[214.31112671 -600.46411133]
[227.20318604 -592.78784180]
[239.62252808 -584.36822510]
[251.52633667 -575.23419189]
[262.87356567 -565.41735840]
[273.62512207 -554.95147705]
[283.74392700 -543.87261963]
[293.19509888 -532.21905518]
[301.94604492 -520.03088379]
[309.96661377 -507.35015869]
[317.22915649 -494.22058105]
[323.70864868 -480.68740845]
[329.38272095 -466.79730225]
[334.23184204 -452.59811401]
[338.23928833 -438.13882446]
[341.39123535 -423.46929932]
[343.67681885 -408.64004517]
[345.08819580 -393.70220947]
[345.62045288 -378.70730591]
[345.27178955 -363.70703125]
[344.04339600 -348.75305176]
[341.93948364 -333.89694214]
[338.96731567 -319.18991089]
[335.13717651 -304.68264771]
[330.46224976 -290.42517090]
[324.95861816 -276.46664429]
[318.64526367 -262.85516357]
[311.54397583 -249.63766479]
[303.67922974 -236.85971069]
[295.07812500 -224.56533813]
[285.77032471 -212.79695129]
[275.78790283 -201.59507751]
[265.16528320 -190.99838257]
[253.93905640 -181.04335022]
[242.14794922 -171.76432800]
[229.83261108 -163.19329834]
[217.03546143 -155.35978699]
[203.80065918 -148.29083252]
[190.17379761 -142.01077271]
[176.20185852 -136.54125977]
[161.93301392 -131.90116882]
[147.41644287 -128.10647583]
[132.70219421 -125.17027283]
[117.84098053 -123.10267639]
[102.88404846 -121.91081238]
[103.19610596 -106.91405487]
[103.50816345 -91.91730499]
[103.82021332 -76.92054749]
[104.13227081 -61.92379379]
[104.44432831 -46.92704010]
[104.75638580 -31.93028831]
[105.06844330 -16.93353462]
[105.38050079 -1.93678057]
[105.69255066 13.05997276]
[106.00460815 28.05672646]
[106.31666565 43.05348206]
[120.83852386 46.62807846]
[133.94062805 53.83897781]
[144.73031616 64.19489288]
[152.47245789 76.99025726]
[156.63957214 91.35330963]
[156.94775391 106.30547333]
[153.37602234 120.82803345]
[146.16769409 133.93154907]
[135.81390381 144.72326660]
[123.02005768 152.46792603]
[108.65782166 156.63787842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
