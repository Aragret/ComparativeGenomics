%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUAACCGGGGGGGGGGAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGxxxxxxxxxxUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUAUUAACC\
) } def
/len { sequence length } bind def

/coor [
[81.26905060 377.05352783]
[71.33265686 365.73617554]
[64.06185150 352.54718018]
[59.79671860 338.10342407]
[58.73673248 323.08041382]
[60.93148041 308.18084717]
[66.27830505 294.10159302]
[74.52713013 281.50115967]
[85.29213715 270.96887207]
[98.06982422 262.99737549]
[112.26257324 257.95953369]
[110.39495850 243.07624817]
[108.52734375 228.19296265]
[106.65972900 213.30969238]
[104.79212189 198.42640686]
[102.92450714 183.54312134]
[101.05689240 168.65985107]
[99.18927765 153.77656555]
[97.32166290 138.89328003]
[95.45405579 124.01000214]
[82.81084442 117.36890411]
[76.03858185 104.79546356]
[61.13668060 103.08277130]
[46.23477936 101.37008667]
[41.33013153 103.50643921]
[36.58119583 103.50338745]
[32.79074860 101.79044342]
[30.46739769 99.05740356]
[15.70134258 96.41853333]
[0.93528670 93.77967072]
[-4.09306574 95.60594177]
[-8.83256149 95.30667877]
[-12.50878525 93.36064148]
[-14.65713692 90.48799896]
[-29.22983932 86.93323517]
[-43.80254364 83.37847137]
[-58.37524414 79.82370758]
[-72.94794464 76.26895142]
[-87.52065277 72.71418762]
[-102.09335327 69.15942383]
[-115.46682739 77.58116913]
[-130.85964966 73.99834442]
[-139.13952637 60.53657913]
[-135.39416504 45.18249893]
[-121.84561157 37.04540634]
[-106.53198242 40.95289612]
[-98.53858948 54.58672333]
[-83.96588898 58.14148331]
[-69.39318848 61.69624710]
[-54.82048416 65.25100708]
[-40.24777985 68.80577087]
[-25.67507744 72.36053467]
[-11.10237503 75.91529083]
[3.57415104 79.01361847]
[18.34020615 81.65248108]
[33.10626221 84.29134369]
[47.94746780 86.46817780]
[62.84936905 88.18087006]
[77.75127411 89.89356232]
[83.26718140 82.19104767]
[91.29811859 77.16530609]
[100.63698578 75.57173157]
[109.88011169 77.64984894]
[119.86283875 66.45407867]
[129.84556580 55.25831604]
[133.25479126 39.80879211]
[147.49998474 35.45864487]
[157.48271179 24.26288033]
[167.46543884 13.06711388]
[177.44816589 1.87134802]
[168.42594910 -10.74199295]
[162.42501831 -25.03430367]
[159.74078369 -40.29407501]
[160.50361633 -55.76238251]
[164.67251587 -70.67061615]
[172.03735352 -84.27867126]
[182.22935486 -95.91172028]
[194.73970032 -104.99362946]
[208.94482422 -111.07553864]
[224.13751221 -113.85801697]
[239.56216431 -113.20579529]
[254.45233154 -109.15437317]
[268.06875610 -101.90807343]
[277.81640625 -113.30909729]
[287.56408691 -124.71011353]
[280.63885498 -138.24192810]
[279.42419434 -153.39425659]
[284.10528564 -167.85647583]
[293.96832275 -179.42320251]
[307.50921631 -186.33059692]
[322.66314697 -187.52534485]
[337.11917114 -182.82522583]
[348.67294312 -172.94700623]
[355.56250000 -159.39701843]
[356.73730469 -144.24154663]
[352.01818848 -129.79168701]
[342.12475586 -118.25094604]
[328.56573486 -111.37919617]
[313.40872192 -110.22433472]
[298.96508789 -114.96246338]
[289.21743774 -103.56143951]
[279.46978760 -92.16042328]
[288.28186035 -80.60609436]
[294.48892212 -67.46058655]
[297.81484985 -53.30265808]
[298.11047363 -38.75624084]
[295.36022949 -24.46292686]
[289.68292236 -11.05367661]
[281.32666016 0.87903100]
[270.65792847 10.80738544]
[258.14559937 18.29158592]
[244.34030151 22.99932098]
[229.85017395 24.72052574]
[215.31407166 23.37675858]
[201.37342834 19.02475929]
[188.64392090 11.85407448]
[178.66120911 23.04984093]
[168.67848206 34.24560547]
[158.69575500 45.44137192]
[156.00056458 60.09009933]
[141.04133606 65.24104309]
[131.05860901 76.43680573]
[121.07588196 87.63257599]
[123.33300781 107.26062012]
[110.33733368 122.14239502]
[112.20494843 137.02566528]
[114.07256317 151.90895081]
[115.94017029 166.79223633]
[117.80778503 181.67550659]
[119.67539978 196.55879211]
[121.54301453 211.44207764]
[123.41062164 226.32534790]
[125.27823639 241.20863342]
[127.14585114 256.09191895]
[142.14329529 257.46688843]
[156.49441528 262.03414917]
[169.52793884 269.58007812]
[180.63429260 279.75173950]
[189.29402161 292.07339478]
[195.10206604 305.96875000]
[197.78678894 320.78787231]
[197.22261047 335.83764648]
[193.43594360 350.41418457]
[186.60386658 363.83569336]
[177.04595947 375.47442627]
[165.20922852 384.78604126]
[151.64732361 391.33499146]
[136.99455261 394.81497192]
[121.93625641 395.06326294]
[107.17672729 392.06817627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 134]
[12 133]
[13 132]
[14 131]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[22 59]
[23 58]
[24 57]
[28 56]
[29 55]
[30 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[63 123]
[64 122]
[65 121]
[67 119]
[68 118]
[69 117]
[70 116]
[83 102]
[84 101]
[85 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
