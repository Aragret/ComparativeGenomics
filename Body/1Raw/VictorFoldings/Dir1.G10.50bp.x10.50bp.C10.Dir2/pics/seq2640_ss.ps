%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCUCACUGGGGGGGGGGGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGxxxxxxxxxxUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCCCCCCCCCCCUACCCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[97.00157166 480.70150757]
[83.15563202 474.68548584]
[71.44696808 465.15606689]
[62.74444580 452.82040405]
[57.69384384 438.59387207]
[56.66995239 423.53219604]
[59.74875259 408.75305176]
[66.70177460 395.35311890]
[77.01305389 384.32678223]
[89.91743469 376.49227905]
[104.45732880 372.43096924]
[104.45732880 357.43096924]
[104.45732880 342.43096924]
[104.45732880 327.43096924]
[104.45732880 312.43096924]
[104.45732880 297.43096924]
[104.45732880 282.43096924]
[104.45732880 267.43096924]
[104.45732880 252.43095398]
[104.45732880 237.43095398]
[104.45732880 222.43095398]
[103.67748260 207.45124817]
[102.11989594 192.53233337]
[100.56231689 177.61341858]
[99.00473785 162.69450378]
[97.44715881 147.77558899]
[95.88957214 132.85667419]
[87.56744385 131.14100647]
[79.85556030 127.32682800]
[73.28038025 121.61454773]
[68.30561829 114.33581543]
[65.29981232 105.93457794]
[64.50941467 96.94006348]
[66.03947449 87.93350983]
[69.84333038 79.51060486]
[75.72223663 72.24207306]
[83.33512878 66.63510895]
[92.21812439 63.09812164]
[85.03561401 49.92953873]
[77.85311127 36.76095581]
[70.67060089 23.59237480]
[56.62497711 28.92475319]
[41.98406982 32.29484940]
[27.02062607 33.63988495]
[12.01340771 32.93480301]
[-2.75801110 30.19273186]
[-17.01844788 25.46475983]
[-30.50223732 18.83896446]
[-42.95818710 10.43878174]
[-54.15425110 0.42070106]
[-63.88184738 -11.02864647]
[-71.95976257 -23.69596672]
[-78.23751068 -37.34527588]
[-82.59814453 -51.72229385]
[-84.96041870 -66.55918884]
[-85.28032684 -81.57955933]
[-83.55191040 -96.50357819]
[-79.80737305 -111.05322266]
[-74.11647034 -124.95744324]
[-66.58522797 -137.95721436]
[-57.35393143 -149.81036377]
[-46.59456635 -160.29605103]
[-34.50757217 -169.21896362]
[-21.31811905 -176.41285706]
[-7.27191925 -181.74371338]
[7.36935377 -185.11222839]
[22.33294296 -186.45564270]
[37.34008408 -185.74893188]
[52.11120605 -183.00526428]
[66.37113190 -178.27574158]
[79.85420227 -171.64849854]
[92.30924225 -163.24696350]
[103.50421906 -153.22767639]
[113.23058319 -141.77726746]
[121.30712891 -129.10906982]
[127.58339691 -115.45908356]
[131.94247437 -101.08159637]
[134.30313110 -86.24444580]
[134.62142944 -71.22404480]
[132.89138794 -56.30021286]
[129.14527893 -41.75096893]
[123.45287323 -27.84736443]
[115.92021942 -14.84840870]
[106.68764496 -2.99626613]
[95.92714691 7.48826551]
[83.83917999 16.40986633]
[91.02169037 29.57844734]
[98.20420074 42.74703217]
[105.38671112 55.91561508]
[119.75489044 60.22319794]
[132.99748230 53.17806244]
[146.24006653 46.13292694]
[159.48265076 39.08779144]
[172.72523499 32.04265976]
[171.22996521 16.91544342]
[175.64222717 2.36895561]
[185.28919983 -9.37857342]
[198.69978333 -16.53573036]
[213.82894897 -18.01110077]
[228.36961365 -13.57970047]
[240.10444641 -3.91728640]
[247.24395752 9.50269318]
[248.69941711 24.63378906]
[244.24890137 39.16861725]
[234.57106018 50.89072800]
[221.14169312 58.01257706]
[206.00869751 59.44813919]
[191.47973633 54.97849655]
[179.77037048 45.28524399]
[166.52778625 52.33037949]
[153.28520203 59.37551498]
[140.04261780 66.42064667]
[126.80002594 73.46578217]
[133.36494446 84.13056946]
[135.97100830 96.11766815]
[134.48913574 108.03675079]
[129.25471497 118.56155396]
[121.01106262 126.57745361]
[110.80848694 131.29910278]
[112.36606598 146.21801758]
[113.92365265 161.13691711]
[115.48123169 176.05583191]
[117.03881073 190.97474670]
[118.59638977 205.89366150]
[130.16838074 196.34960938]
[144.88778687 199.23738098]
[151.99589539 212.44627380]
[146.29728699 226.32162476]
[131.95715332 230.72171021]
[119.45732880 222.43095398]
[119.45732880 237.43095398]
[119.45732880 252.43095398]
[119.45732880 267.43096924]
[119.45732880 282.43096924]
[119.45732880 297.43096924]
[119.45732880 312.43096924]
[119.45732880 327.43096924]
[119.45732880 342.43096924]
[119.45732880 357.43096924]
[119.45732880 372.43096924]
[133.99720764 376.49227905]
[146.90159607 384.32678223]
[157.21287537 395.35311890]
[164.16589355 408.75305176]
[167.24470520 423.53219604]
[166.22080994 438.59387207]
[161.17021179 452.82040405]
[152.46768188 465.15606689]
[140.75901794 474.68548584]
[126.91307831 480.70150757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 124]
[23 123]
[24 122]
[25 121]
[26 120]
[27 119]
[38 89]
[39 88]
[40 87]
[41 86]
[90 113]
[91 112]
[92 111]
[93 110]
[94 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
