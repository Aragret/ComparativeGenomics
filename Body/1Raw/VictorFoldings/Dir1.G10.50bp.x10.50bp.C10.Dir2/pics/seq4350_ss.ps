%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUACCACUCACGGGGGGGGGGCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAxxxxxxxxxxCAUAACCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUACCCCCCCCCCUUACUACCACUGAC\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 410.92282104]
[70.66226196 406.41607666]
[57.50136948 399.11019897]
[46.08077240 389.30435181]
[36.86813354 377.40005493]
[30.24070549 363.88479614]
[26.46987534 349.31201172]
[25.71005821 334.27847290]
[27.99236870 319.39978027]
[33.22334671 305.28515625]
[41.18878555 292.51266479]
[51.56250763 281.60531616]
[63.91971207 273.00970459]
[77.75438690 267.07785034]
[92.50000000 264.05267334]
[92.50000000 249.05268860]
[92.50000000 234.05268860]
[92.50000000 219.05268860]
[92.50000000 204.05268860]
[92.50000000 189.05268860]
[92.50000000 174.05268860]
[92.50000000 159.05268860]
[92.50000000 144.05268860]
[92.50000000 129.05268860]
[74.97246552 116.55084991]
[70.32997894 95.52806854]
[80.96266174 76.80758667]
[74.64577484 63.20255280]
[68.32889557 49.59751511]
[62.01201630 35.99248123]
[55.69513321 22.38744354]
[49.37825394 8.78240776]
[43.06137085 -4.82262897]
[28.94862747 0.28812569]
[14.44415188 4.14941406]
[-0.34166580 6.73184919]
[-15.29629326 8.01577663]
[-30.30591583 7.99142551]
[-45.25629807 6.65898037]
[-60.03366089 4.02858257]
[-74.52552795 0.12025070]
[-88.62162018 -5.03626919]
[-102.21463776 -11.40173244]
[-115.20114136 -18.92769432]
[-127.48229218 -27.55687332]
[-138.96461487 -37.22359848]
[-149.56072998 -47.85429764]
[-159.18998718 -59.36806488]
[-167.77909851 -71.67726898]
[-175.26269531 -84.68822479]
[-181.58383179 -98.30191803]
[-186.69438171 -112.41473389]
[-190.55546570 -126.91926575]
[-193.13769531 -141.70512390]
[-194.42141724 -156.65975952]
[-194.39685059 -171.66938782]
[-193.06419373 -186.61975098]
[-190.43359375 -201.39707947]
[-186.52505493 -215.88888550]
[-181.36834717 -229.98490906]
[-175.00268555 -243.57783508]
[-167.47654724 -256.56423950]
[-158.84719849 -268.84527588]
[-149.18031311 -280.32745361]
[-138.54945374 -290.92343140]
[-127.03556061 -300.55252075]
[-114.72623444 -309.14144897]
[-101.71517181 -316.62487793]
[-88.10138702 -322.94580078]
[-73.98849487 -328.05618286]
[-59.48391342 -331.91705322]
[-44.69802475 -334.49908447]
[-29.74336052 -335.78259277]
[-14.73373890 -335.75781250]
[0.21660653 -334.42495728]
[14.99389267 -331.79412842]
[29.48565292 -327.88540649]
[43.58159637 -322.72848511]
[57.17443848 -316.36264038]
[70.16072845 -308.83630371]
[82.44163513 -300.20678711]
[93.92369080 -290.53973389]
[104.51950836 -279.90875244]
[114.14843750 -268.39471436]
[122.73720551 -256.08526611]
[130.22044373 -243.07408142]
[136.54119873 -229.46022034]
[141.65135193 -215.34725952]
[145.51203918 -200.84262085]
[148.09384155 -186.05670166]
[149.37713623 -171.10202026]
[149.35215759 -156.09239197]
[148.01908875 -141.14205933]
[145.38806152 -126.36481476]
[141.47912598 -111.87310791]
[136.32200623 -97.77723694]
[129.95597839 -84.18448639]
[122.42946625 -71.19829559]
[113.79977417 -58.91751099]
[104.13256073 -47.43559265]
[93.50141907 -36.83992767]
[81.98725128 -27.21115875]
[69.67768097 -18.62256241]
[56.66640854 -11.13951015]
[62.98328781 2.46552610]
[69.30017090 16.07056236]
[75.61705017 29.67559814]
[81.93392944 43.28063583]
[88.25081635 56.88566971]
[94.56769562 70.49070740]
[104.53083038 70.33891296]
[113.99430084 73.45818329]
[121.91445923 79.50451660]
[127.41786957 87.81111908]
[129.89759827 97.46192169]
[144.68655396 99.96929932]
[159.47549438 102.47667694]
[174.26445007 104.98404694]
[189.16381836 99.66242981]
[200.41865540 109.41833496]
[215.20761108 111.92571259]
[230.38371277 105.71138763]
[243.18617249 115.95974731]
[240.44493103 132.12815857]
[224.97991943 137.58393860]
[212.70022583 126.71466064]
[197.91128540 124.20728302]
[184.06973267 129.70825195]
[171.75708008 119.77300262]
[156.96812439 117.26562500]
[142.17916870 114.75824738]
[127.39022064 112.25087738]
[122.56247711 119.77986145]
[115.73004913 125.55139923]
[107.50000000 129.05268860]
[107.50000000 144.05268860]
[107.50000000 159.05268860]
[107.50000000 174.05268860]
[107.50000000 189.05268860]
[107.50000000 204.05268860]
[107.50000000 219.05268860]
[107.50000000 234.05268860]
[107.50000000 249.05268860]
[107.50000000 264.05267334]
[122.24561310 267.07785034]
[136.08029175 273.00970459]
[148.43750000 281.60531616]
[158.81121826 292.51266479]
[166.77665710 305.28515625]
[172.00762939 319.39978027]
[174.28994751 334.27847290]
[173.53012085 349.31201172]
[169.75929260 363.88479614]
[163.13186646 377.40005493]
[153.91921997 389.30435181]
[142.49862671 399.11019897]
[129.33773804 406.41607666]
[114.97548676 410.92282104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[27 110]
[28 109]
[29 108]
[30 107]
[31 106]
[32 105]
[33 104]
[115 132]
[116 131]
[117 130]
[118 129]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
