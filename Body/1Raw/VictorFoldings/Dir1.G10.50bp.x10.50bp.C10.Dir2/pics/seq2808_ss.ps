%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGCGGGGGGGGGGGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCxxxxxxxxxxCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAACCCCCCCCCCAAAAGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[62.64994049 361.38522339]
[49.77666473 353.48233032]
[39.65237045 342.27182007]
[33.09778976 328.66250610]
[30.64426804 313.75756836]
[32.49070358 298.76531982]
[38.48741531 284.90112305]
[48.14827728 273.28887939]
[60.69012451 264.86990356]
[75.09624481 260.32675171]
[74.78419495 245.33000183]
[74.47213745 230.33325195]
[74.16007996 215.33648682]
[73.84802246 200.33973694]
[73.53596497 185.34298706]
[73.22390747 170.34623718]
[72.91185760 155.34947205]
[72.59980011 140.35272217]
[72.28774261 125.35597229]
[59.27143097 117.90106201]
[46.17827606 125.22016144]
[44.47620773 140.64360046]
[34.00865555 152.09829712]
[18.80060577 155.17967224]
[4.69986773 148.70289612]
[-2.87153959 135.15838623]
[-1.00225520 119.75431824]
[9.58894348 108.41385651]
[24.82952309 105.49763489]
[38.85917282 112.12701416]
[51.95232773 104.80790710]
[58.85932541 91.49275208]
[57.30174255 76.57383728]
[55.74416351 61.65492630]
[43.75245667 51.71326065]
[42.38537216 36.56117249]
[51.93712997 25.19017982]
[50.37955093 10.27126789]
[48.51193619 -4.61201239]
[46.33509827 -19.45321846]
[44.15826416 -34.29442215]
[41.98142624 -49.13562775]
[37.61429977 -57.23377991]
[39.91701508 -64.30789948]
[38.04940414 -79.19117737]
[24.86338997 -83.96350098]
[15.07673359 -93.91399384]
[10.56702614 -107.05200958]
[12.16413593 -120.78361511]
[19.49813461 -132.42370605]
[31.08295822 -139.72105408]
[29.52537727 -154.63995361]
[24.47661972 -168.76477051]
[16.22433090 -181.29072571]
[2.17098808 -188.55805969]
[1.63018811 -203.44284058]
[-6.62210131 -215.96881104]
[-14.87439060 -228.49476624]
[-23.12668037 -241.02073669]
[-38.02164459 -247.88163757]
[-39.25776291 -264.23413086]
[-25.56342125 -273.25616455]
[-11.02618694 -265.66665649]
[-10.60071754 -249.27302551]
[-2.34842825 -236.74705505]
[5.90386105 -224.22109985]
[14.15614986 -211.69512939]
[27.61923409 -205.32374573]
[28.75029373 -189.54301453]
[37.00258255 -177.01705933]
[36.43741226 -192.00640869]
[39.54850388 -206.68022156]
[46.14760971 -220.15063477]
[55.83542252 -231.60253906]
[68.02574921 -240.34301758]
[81.98096466 -245.84318542]
[96.85666656 -247.77024841]
[111.75273895 -246.00756836]
[125.76784515 -240.66184998]
[138.05395508 -232.05651855]
[147.86763000 -220.71228027]
[154.61508179 -207.31556702]
[157.88803101 -192.67700195]
[157.48841858 -177.68232727]
[153.44042969 -163.23884583]
[145.98901367 -150.22053528]
[135.58503723 -139.41511536]
[122.85803986 -131.47637939]
[108.57810211 -126.88471985]
[93.60929108 -125.91796112]
[78.85734558 -128.63459778]
[65.21488190 -134.87023926]
[53.50740051 -144.24760437]
[44.44429016 -156.19754028]
[46.00186920 -141.27862549]
[60.89245987 -135.08009338]
[70.69650269 -122.15481567]
[72.67440033 -105.95858002]
[66.19503021 -90.88166809]
[52.93268204 -81.05879211]
[54.80029678 -66.17551422]
[56.82263184 -51.31246567]
[58.99946594 -36.47126007]
[61.17630386 -21.63005447]
[63.35314178 -6.78884935]
[66.63365936 -3.23726845]
[67.67598724 2.43237448]
[65.29846191 8.71368694]
[66.85604095 23.63259888]
[78.55055237 32.78541565]
[80.34268188 47.89312744]
[70.66307831 60.09734344]
[72.22065735 75.01625824]
[73.77823639 89.93516541]
[104.66534424 75.97550201]
[120.85649872 100.35697937]
[134.75904846 105.98892975]
[148.66160583 111.62088776]
[162.56416321 117.25284576]
[176.46672058 122.88480377]
[192.62472534 120.08284760]
[202.92109680 132.84672546]
[196.76380920 148.04606628]
[180.48695374 150.04508972]
[170.83476257 136.78735352]
[156.93220520 131.15539551]
[143.02964783 125.52344513]
[129.12709045 119.89148712]
[115.22454071 114.25952911]
[104.24057770 124.10310364]
[87.28449249 125.04391479]
[87.59654999 140.04066467]
[87.90860748 155.03741455]
[88.22066498 170.03417969]
[88.53272247 185.03092957]
[88.84477997 200.02767944]
[89.15682983 215.02442932]
[89.46888733 230.02119446]
[89.78094482 245.01794434]
[90.09300232 260.01470947]
[104.67564392 263.95465088]
[117.55684662 271.84460449]
[127.69239807 283.04492188]
[134.26065063 296.64767456]
[136.72914124 311.55014038]
[134.89776611 326.54421997]
[128.91499329 340.41442871]
[119.26580048 352.03637695]
[106.73241425 360.46792603]
[92.33086395 365.02557373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 31]
[21 30]
[32 114]
[33 113]
[34 112]
[37 109]
[38 108]
[39 105]
[40 104]
[41 103]
[42 102]
[44 101]
[45 100]
[51 95]
[52 94]
[53 70]
[54 69]
[56 67]
[57 66]
[58 65]
[59 64]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
