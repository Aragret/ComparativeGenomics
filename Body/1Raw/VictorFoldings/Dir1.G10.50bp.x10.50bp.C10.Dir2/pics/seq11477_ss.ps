%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAACUUCGGCGGGGGGGGGGUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUxxxxxxxxxxUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCCCCCCCCCCCUGAAACAUCGGC\
) } def
/len { sequence length } bind def

/coor [
[89.07386017 419.19564819]
[77.77799988 409.19235229]
[69.45689392 396.60577393]
[64.67787933 382.29412842]
[63.76679993 367.23318481]
[66.78578186 352.44979858]
[73.52898407 338.95196533]
[83.53663635 327.65997314]
[96.12641144 319.34371948]
[110.43991089 314.57022095]
[109.52839661 299.59793091]
[105.96179962 293.07421875]
[108.75325775 284.31356812]
[108.14537811 269.32589722]
[107.53749084 254.33821106]
[106.92961121 239.35052490]
[106.32172394 224.36285400]
[105.71384430 209.37518311]
[105.10595703 194.38749695]
[104.49807739 179.39982605]
[103.89019012 164.41213989]
[103.28231049 149.42446899]
[102.67442322 134.43678284]
[82.05363464 127.72324371]
[70.33955383 110.63516998]
[71.41494751 90.91505432]
[83.66080475 76.67495728]
[78.59404755 62.55660248]
[73.52728271 48.43824768]
[61.58327103 38.06274033]
[64.56672668 23.46999168]
[58.79138565 9.62638760]
[52.32228851 -3.90693378]
[45.75918579 -10.34641457]
[45.86233902 -17.78072548]
[39.66884995 -31.44237518]
[33.47535706 -45.10402679]
[27.28186798 -58.76567459]
[20.95025063 -72.36386108]
[14.48115158 -85.89717865]
[8.01205444 -99.43050385]
[1.54295635 -112.96382141]
[-4.92614126 -126.49713898]
[-11.39523888 -140.03045654]
[-17.86433792 -153.56378174]
[-32.40021896 -149.69799805]
[-47.39496994 -148.56942749]
[-62.33780670 -150.21504211]
[-76.71997070 -154.57733154]
[-90.05209351 -161.50634766]
[-101.88078308 -170.76478577]
[-111.80410767 -182.03619385]
[-119.48519897 -194.93572998]
[-124.66372681 -209.02333069]
[-127.16470337 -223.81869507]
[-126.90438843 -238.81770325]
[-123.89312744 -253.50956726]
[-118.23490906 -267.39422607]
[-110.12377930 -279.99932861]
[-99.83721924 -290.89642334]
[-87.72662354 -299.71536255]
[-94.19572449 -313.24865723]
[-100.66482544 -326.78198242]
[-107.13391876 -340.31530762]
[-120.95545959 -349.14123535]
[-119.95254517 -365.50970459]
[-105.15688324 -372.58221436]
[-91.78898621 -363.08319092]
[-93.60060120 -346.78442383]
[-87.13150024 -333.25109863]
[-80.66240692 -319.71777344]
[-74.19330597 -306.18444824]
[-59.72480011 -310.07064819]
[-44.78457642 -311.23229980]
[-29.88133430 -309.62832642]
[-15.52279186 -305.31195068]
[-2.19837928 -298.42874146]
[9.63744354 -289.21185303]
[19.58068275 -277.97396851]
[27.29160690 -265.09689331]
[32.50634766 -251.01841736]
[35.04593277 -236.21748352]
[34.82242584 -221.19793701]
[31.84197235 -206.47131348]
[26.20464325 -192.53944397]
[18.10107040 -179.87736511]
[7.80600023 -168.91708374]
[-4.33101654 -160.03288269]
[2.13808155 -146.49955750]
[8.60717964 -132.96624756]
[15.07627678 -119.43292236]
[21.54537582 -105.89959717]
[28.01447296 -92.36627960]
[34.48357010 -78.83295441]
[40.23959351 -74.12680817]
[40.94351959 -64.95916748]
[47.13700867 -51.29751587]
[53.33049774 -37.63586426]
[59.52399063 -23.97421455]
[65.85560608 -10.37603188]
[72.32470703 3.15728927]
[79.99823761 -9.73134518]
[94.82971191 -11.97352505]
[105.97019196 -1.92913890]
[105.27062988 13.05453968]
[93.24275208 22.01723862]
[78.68508148 18.40322876]
[90.26668549 27.76889992]
[87.64563751 43.37148285]
[92.71239471 57.48983765]
[97.77915955 71.60819244]
[109.05109406 71.72229004]
[119.85192871 76.31634521]
[128.40672302 85.01747131]
[133.16976929 96.75524139]
[133.09500122 109.88764191]
[147.61616516 113.64743042]
[162.13731384 117.40721893]
[176.65847778 121.16700745]
[190.14930725 112.93457794]
[205.49011230 116.73398590]
[213.57945251 130.31111145]
[209.61805725 145.61087036]
[195.95617676 153.55621338]
[180.69914246 149.43328857]
[172.89868164 135.68817139]
[158.37753296 131.92837524]
[143.85636902 128.16859436]
[129.33522034 124.40880585]
[117.66210175 133.82890320]
[118.26998138 148.81658936]
[118.87786865 163.80426025]
[119.48575592 178.79193115]
[120.09363556 193.77961731]
[120.70152283 208.76728821]
[121.30940247 223.75497437]
[121.91728973 238.74264526]
[122.52516937 253.73033142]
[123.13305664 268.71801758]
[123.74093628 283.70568848]
[124.50067902 298.68643188]
[125.41218567 313.65872192]
[140.19905090 316.66055298]
[153.70469666 323.38812256]
[165.00827026 333.38269043]
[173.33911133 345.96282959]
[178.12916565 360.27078247]
[179.05187988 375.33102417]
[176.04431152 390.11672974]
[169.31153870 403.61978149]
[159.31260681 414.91949463]
[146.72924805 423.24548340]
[132.41944885 428.02999878]
[117.35884857 428.94689941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 142]
[11 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[27 111]
[28 110]
[29 109]
[31 107]
[32 101]
[33 100]
[35 99]
[36 98]
[37 97]
[38 96]
[39 94]
[40 93]
[41 92]
[42 91]
[43 90]
[44 89]
[45 88]
[61 72]
[62 71]
[63 70]
[64 69]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
