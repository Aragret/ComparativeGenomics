%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUAACUAGGGGGGGGGGAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCAxxxxxxxxxxUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUUCCCCCCCCCCAAUUUAACUA\
) } def
/len { sequence length } bind def

/coor [
[67.16748047 623.10852051]
[53.32154465 617.09246826]
[41.61288071 607.56304932]
[32.91035843 595.22735596]
[27.85975647 581.00085449]
[26.83586502 565.93920898]
[29.91466331 551.16003418]
[36.86768723 537.76007080]
[47.17897034 526.73376465]
[60.08335114 518.89923096]
[74.62323761 514.83795166]
[74.62323761 499.83795166]
[74.62323761 484.83795166]
[74.62323761 469.83795166]
[74.62323761 454.83795166]
[74.62323761 439.83795166]
[74.62323761 424.83795166]
[74.62323761 409.83795166]
[74.62323761 394.83795166]
[74.62323761 379.83795166]
[74.62323761 364.83795166]
[59.92767334 361.93716431]
[46.07602310 356.22317505]
[33.60136414 347.91384888]
[22.98418808 337.32699585]
[14.63386917 324.86819458]
[8.87290096 311.01522827]
[5.92442608 296.29977417]
[5.90360212 281.28707886]
[8.81310272 266.55407715]
[14.54294205 252.66743469]
[22.87463188 240.16154480]
[33.48951721 229.51809692]
[45.98094940 221.14747620]
[59.86988449 215.37297058]
[74.62323761 212.41824341]
[74.62323761 197.41824341]
[74.62323761 182.41824341]
[74.62323761 167.41824341]
[74.62323761 152.41824341]
[74.62323761 137.41824341]
[74.62323761 122.41823578]
[70.14160919 136.73309326]
[58.88633347 146.64868164]
[44.12073517 149.29010010]
[30.12590218 143.89152527]
[20.95945168 132.01818848]
[19.27907181 117.11260223]
[25.57196808 103.49645996]
[38.01359940 95.11756134]
[52.99667740 94.40527344]
[66.17530060 101.56440735]
[55.73548889 90.79359436]
[45.29567719 80.02278900]
[29.34156990 78.33577728]
[20.83512878 64.73356628]
[26.30176735 49.65061951]
[41.54795074 44.65727234]
[54.87810898 53.58399582]
[56.06648636 69.58297729]
[66.50630188 80.35378265]
[76.94611359 91.12459564]
[87.79265594 82.46096039]
[99.76940918 81.96666718]
[105.83242798 68.24661255]
[111.89543915 54.52656174]
[117.95845032 40.80650711]
[124.02146149 27.08645439]
[111.52850342 18.71405411]
[100.67932129 8.29933357]
[91.80361938 -3.84121609]
[85.17110443 -17.33865738]
[80.98334503 -31.78281975]
[79.36759949 -46.73475647]
[80.37297058 -61.74010086]
[83.96889496 -76.34285736]
[90.04610443 -90.09925842]
[98.41992188 -102.59127045]
[108.83587646 -113.43927002]
[120.97743225 -122.31359863]
[134.47561646 -128.94458008]
[148.92025757 -133.13069153]
[163.87237549 -134.74475098]
[178.87760925 -133.73768616]
[193.47996521 -130.14010620]
[207.23567200 -124.06132507]
[219.72673035 -115.68609619]
[230.57354736 -105.26891327]
[239.44650269 -93.12635040]
[246.07595825 -79.62740326]
[250.26043701 -65.18229675]
[251.87278748 -50.22998810]
[250.86401367 -35.22487259]
[247.26478577 -20.62293434]
[241.18444824 -6.86791086]
[232.80780029 5.62219954]
[222.38938904 16.46783638]
[210.24581909 25.33941078]
[196.74612427 31.96732903]
[182.30053711 36.15017319]
[167.34805298 37.76083374]
[152.34304810 36.75036240]
[137.74151611 33.14946747]
[131.67851257 46.86952209]
[125.61549377 60.58957672]
[119.55248260 74.30963135]
[113.48946381 88.02968597]
[117.14958954 112.74867249]
[89.62323761 122.41823578]
[89.62323761 137.41824341]
[89.62323761 152.41824341]
[89.62323761 167.41824341]
[89.62323761 182.41824341]
[89.62323761 197.41824341]
[89.62323761 212.41824341]
[104.37658691 215.37297058]
[118.26552582 221.14747620]
[130.75695801 229.51809692]
[141.37184143 240.16154480]
[149.70353699 252.66743469]
[155.43338013 266.55407715]
[158.34288025 281.28707886]
[158.32205200 296.29977417]
[155.37358093 311.01522827]
[149.61260986 324.86819458]
[141.26228333 337.32699585]
[130.64511108 347.91384888]
[118.17045593 356.22317505]
[104.31880188 361.93716431]
[89.62323761 364.83795166]
[89.62323761 379.83795166]
[89.62323761 394.83795166]
[89.62323761 409.83795166]
[89.62323761 424.83795166]
[89.62323761 439.83795166]
[89.62323761 454.83795166]
[89.62323761 469.83795166]
[89.62323761 484.83795166]
[89.62323761 499.83795166]
[89.62323761 514.83795166]
[104.16312408 518.89923096]
[117.06750488 526.73376465]
[127.37879181 537.76007080]
[134.33181763 551.16003418]
[137.41061401 565.93920898]
[136.38671875 581.00085449]
[131.33612061 595.22735596]
[122.63359070 607.56304932]
[110.92493439 617.09246826]
[97.07899475 623.10852051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
[41 110]
[42 109]
[52 62]
[53 61]
[54 60]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
