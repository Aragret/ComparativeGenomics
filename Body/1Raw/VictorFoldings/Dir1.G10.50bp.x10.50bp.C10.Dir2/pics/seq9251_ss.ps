%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUCUCCAGGGGGGGGGGUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCxxxxxxxxxxUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUCCCCCCCCCCUAUUUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[97.81333160 379.16711426]
[83.96739197 373.15109253]
[72.25873566 363.62167358]
[63.55620956 351.28601074]
[58.50560760 337.05947876]
[57.48171616 321.99780273]
[60.56051254 307.21865845]
[67.51353455 293.81872559]
[77.82482147 282.79238892]
[90.72920227 274.95788574]
[105.26908875 270.89657593]
[105.26908875 255.89657593]
[105.26908875 240.89657593]
[105.26908875 225.89657593]
[105.26908875 210.89657593]
[105.26908875 195.89657593]
[105.26908875 180.89657593]
[105.26908875 165.89657593]
[105.26908875 150.89657593]
[105.26908875 135.89657593]
[87.91612244 133.06768799]
[74.43769073 122.61718750]
[67.80051422 107.47983551]
[69.15835571 91.53570557]
[77.68151093 78.61908722]
[69.69158936 65.92415619]
[61.70167542 53.22922897]
[47.80256271 45.67110825]
[47.57153702 30.77829361]
[39.58162308 18.08336449]
[32.48603058 20.68385506]
[23.95349312 20.20889664]
[15.36438847 16.03385162]
[1.46183252 10.40189552]
[-12.44072342 4.76993895]
[-17.73786354 5.51819420]
[-22.31333923 4.24641800]
[-25.50832176 1.58300567]
[-27.01698494 -1.67144012]
[-40.54117584 -8.15960503]
[-54.06536484 -14.64776993]
[-66.51294708 -11.11060143]
[-77.66437531 -16.84337234]
[-81.75928497 -28.26873970]
[-95.14556885 -35.03685379]
[-108.53185272 -41.80496979]
[-121.91813660 -48.57308197]
[-138.78143311 -50.32395172]
[-141.76721191 -67.01291656]
[-126.55701447 -74.50197601]
[-115.15002441 -61.95936966]
[-101.76374054 -55.19125366]
[-88.37745667 -48.42313766]
[-74.99117279 -41.65502548]
[-57.57783508 -43.59814453]
[-47.57720184 -28.17196083]
[-34.05300903 -21.68379593]
[-20.52882004 -15.19563007]
[-6.80876684 -9.13261700]
[7.09378910 -3.50066018]
[20.99634552 2.13129640]
[33.77370453 -5.72612906]
[35.02057648 -20.67421532]
[36.26745224 -35.62230301]
[37.51432800 -50.57038879]
[23.22498703 -55.37437057]
[10.50091553 -63.45901108]
[0.08187141 -74.35428619]
[-7.42639542 -87.42675018]
[-11.58736324 -101.91639709]
[-12.15912056 -116.98080444]
[-9.10842514 -131.74417114]
[-2.61263990 -145.34814453]
[6.95057774 -157.00181580]
[19.02523613 -166.02767944]
[32.90932846 -171.90095520]
[47.79565430 -174.28019714]
[62.81873703 -173.02706909]
[77.10516357 -168.21441650]
[89.82433319 -160.12207031]
[100.23677063 -149.22047424]
[107.73710632 -136.14346313]
[111.88928986 -121.65129852]
[112.45191193 -106.58654785]
[109.39226532 -91.82504272]
[102.88823700 -78.22500610]
[93.31795502 -66.57712555]
[81.23783112 -57.55858612]
[67.35017395 -51.69372559]
[52.46241379 -49.32351685]
[51.21553802 -34.37542725]
[49.96866226 -19.42734146]
[48.72179031 -4.47925472]
[52.27655029 10.09344769]
[60.26646805 22.78837776]
[73.59408569 29.43847466]
[74.39660645 45.23931503]
[82.38652039 57.93424225]
[90.37643433 70.62917328]
[101.64357758 68.23958588]
[113.33436584 70.14382172]
[123.82534790 76.31613159]
[131.57499695 86.12294006]
[135.34854126 98.38176727]
[134.40975952 111.50199127]
[149.17581177 114.14085388]
[163.94186401 116.77971649]
[178.70791626 119.41857910]
[185.82482910 106.06924438]
[196.72000122 95.57397461]
[210.32600403 88.96099854]
[225.30990601 86.87818146]
[240.20370483 89.52957916]
[253.54826355 96.65543365]
[264.03622437 107.55762482]
[270.64010620 121.16806793]
[272.71286011 136.15335083]
[270.05148315 151.04537964]
[262.91668701 164.38516235]
[252.00747681 174.86581421]
[238.39260864 181.46055603]
[223.40594482 183.52328491]
[208.51571655 180.85194397]
[195.18070984 173.70820618]
[184.70736694 162.79196167]
[178.12174988 149.17268372]
[176.06906128 134.18463135]
[161.30300903 131.54577637]
[146.53694153 128.90690613]
[131.77088928 126.26804352]
[120.26908875 135.89657593]
[120.26908875 150.89657593]
[120.26908875 165.89657593]
[120.26908875 180.89657593]
[120.26908875 195.89657593]
[120.26908875 210.89657593]
[120.26908875 225.89657593]
[120.26908875 240.89657593]
[120.26908875 255.89657593]
[120.26908875 270.89657593]
[134.80897522 274.95788574]
[147.71334839 282.79238892]
[158.02464294 293.81872559]
[164.97766113 307.21865845]
[168.05645752 321.99780273]
[167.03256226 337.05947876]
[161.98196411 351.28601074]
[153.27944946 363.62167358]
[141.57078552 373.15109253]
[127.72484589 379.16711426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 99]
[26 98]
[27 97]
[29 95]
[30 94]
[33 61]
[34 60]
[35 59]
[39 58]
[40 57]
[41 56]
[44 54]
[45 53]
[46 52]
[47 51]
[62 93]
[63 92]
[64 91]
[65 90]
[105 130]
[106 129]
[107 128]
[108 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
