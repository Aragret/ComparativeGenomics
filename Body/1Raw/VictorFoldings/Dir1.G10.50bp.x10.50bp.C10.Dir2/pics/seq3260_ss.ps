%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAUGGCCAGGGGGGGGGGACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGxxxxxxxxxxUCCACCCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGCCCCCCCCCCACCCUUGGCCA\
) } def
/len { sequence length } bind def

/coor [
[72.28195190 415.82537842]
[58.26000595 410.27236938]
[46.06005096 401.40603638]
[36.44897842 389.78372192]
[30.03095245 376.13601685]
[27.20941544 361.32083130]
[28.16173172 346.26947021]
[32.82803726 331.92803955]
[40.91500473 319.19808960]
[51.91427994 308.87979126]
[65.13443756 301.62182617]
[79.74445343 297.88040161]
[79.74445343 282.88040161]
[79.74445343 267.88040161]
[79.74445343 252.88038635]
[79.74445343 237.88038635]
[79.74445343 222.88038635]
[79.74445343 207.88038635]
[79.74445343 192.88038635]
[79.74445343 177.88038635]
[79.74445343 162.88038635]
[71.26505280 175.25373840]
[58.54488373 183.20341492]
[43.70697021 185.40260315]
[29.22779846 181.48423767]
[17.52396584 172.10232544]
[10.54887295 158.82272339]
[9.46667480 143.86180115]
[14.45799446 129.71659851]
[24.68976974 118.74797821]
[38.45429230 112.78661346]
[53.45423889 112.82747650]
[67.18608093 118.86374664]
[77.35794067 129.88795471]
[82.27173615 144.05717468]
[86.22834778 129.58840942]
[90.18495941 115.11964417]
[83.36138153 101.76155090]
[69.31940460 96.48680878]
[55.27743149 91.21206665]
[44.61672211 102.08722687]
[30.45196724 107.68004608]
[15.23729610 107.02152252]
[1.60874104 100.22576141]
[-8.07246685 88.47016907]
[-12.12900162 73.79145813]
[-9.85804176 58.73281860]
[-1.65304613 45.90324783]
[11.06442070 37.52554321]
[26.09098053 35.05119324]
[40.82318878 38.90889740]
[52.70860672 48.43028259]
[59.68800735 61.96570969]
[60.55217361 77.17008972]
[74.59414673 82.44483185]
[88.63612366 87.71957397]
[103.02060699 83.46672058]
[111.93675995 71.40428925]
[120.85290527 59.34186172]
[129.76905823 47.27943039]
[138.68521118 35.21699905]
[147.60136414 23.15456772]
[136.50923157 13.03682518]
[126.51622772 1.83218920]
[117.72827148 -10.34056473]
[110.23853302 -23.35239792]
[104.12640381 -37.06538010]
[99.45666504 -51.33414459]
[96.27883911 -66.00743103]
[94.62658691 -80.92970276]
[94.51744843 -95.94276428]
[95.95256042 -110.88748169]
[98.91672516 -125.60542297]
[103.37851715 -139.94056702]
[109.29062653 -153.74096680]
[116.59040070 -166.86032104]
[125.20044708 -179.15954590]
[135.02949524 -190.50828552]
[145.97334290 -200.78622437]
[157.91600037 -209.88441467]
[170.73085022 -217.70642090]
[184.28205872 -224.16929626]
[198.42596436 -229.20454407]
[213.01264954 -232.75880432]
[227.88748169 -234.79437256]
[242.89276123 -235.28970337]
[257.86944580 -234.23951721]
[272.65878296 -231.65495300]
[287.10397339 -227.56341553]
[301.05187988 -222.00827026]
[314.35467529 -215.04841614]
[326.87133789 -206.75762939]
[338.46917725 -197.22378540]
[349.02523804 -186.54794312]
[358.42764282 -174.84330750]
[366.57672119 -162.23391724]
[373.38607788 -148.85343933]
[378.78350830 -134.84375000]
[382.71182251 -120.35332489]
[385.12939453 -105.53578949]
[386.01055908 -90.54821014]
[385.34600830 -75.54946136]
[383.14276123 -60.69854736]
[379.42419434 -46.15288544]
[374.22970581 -32.06667709]
[367.61434937 -18.58923721]
[359.64831543 -5.86343813]
[350.41595459 5.97582054]
[340.01522827 16.80303574]
[328.55633545 26.50343513]
[316.16073608 34.97418594]
[302.95989990 42.12549591]
[289.09368896 47.88155365]
[274.70910645 52.18134689]
[259.95867920 54.97929001]
[244.99871826 56.24572754]
[229.98783875 55.96723175]
[215.08515930 54.14675903]
[200.44863892 50.80360031]
[186.23347473 45.97320175]
[172.59031677 39.70676422]
[159.66378784 32.07071686]
[150.74763489 44.13314819]
[141.83149719 56.19557953]
[132.91534424 68.25801086]
[123.99919128 80.32044220]
[115.08303833 92.38287354]
[116.58886719 107.64685822]
[104.65372467 119.07625580]
[100.69712067 133.54502869]
[96.74050903 148.01379395]
[94.74445343 162.88038635]
[94.74445343 177.88038635]
[94.74445343 192.88038635]
[94.74445343 207.88038635]
[94.74445343 222.88038635]
[94.74445343 237.88038635]
[94.74445343 252.88038635]
[94.74445343 267.88040161]
[94.74445343 282.88040161]
[94.74445343 297.88040161]
[109.35446167 301.62182617]
[122.57462311 308.87979126]
[133.57389832 319.19808960]
[141.66085815 331.92803955]
[146.32716370 346.26947021]
[147.27947998 361.32083130]
[144.45794678 376.13601685]
[138.03991699 389.78372192]
[128.42884827 401.40603638]
[116.22888947 410.27236938]
[102.20694733 415.82537842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[35 131]
[36 130]
[37 129]
[38 56]
[39 55]
[40 54]
[57 127]
[58 126]
[59 125]
[60 124]
[61 123]
[62 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
