%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUACAUAGGGGGGGGGGGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAxxxxxxxxxxUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACCCCCCCCCCCGGCUACAUAG\
) } def
/len { sequence length } bind def

/coor [
[83.33906555 462.84927368]
[69.49312592 456.83325195]
[57.78446198 447.30383301]
[49.08193588 434.96817017]
[44.03133392 420.74163818]
[43.00744629 405.67996216]
[46.08624268 390.90078735]
[53.03926468 377.50085449]
[63.35054779 366.47454834]
[76.25492859 358.64001465]
[90.79481506 354.57870483]
[90.79481506 339.57870483]
[90.79481506 324.57870483]
[90.79481506 309.57870483]
[90.79481506 294.57870483]
[90.79481506 279.57870483]
[90.79481506 264.57870483]
[90.79481506 249.57870483]
[90.79481506 234.57870483]
[90.79481506 219.57870483]
[90.79481506 204.57870483]
[90.79481506 189.57870483]
[79.17398071 199.06323242]
[64.23208618 197.74427795]
[54.45244217 186.37068176]
[55.38748932 171.39985657]
[66.50634766 161.33154297]
[81.49624634 161.88206482]
[91.84716797 172.74031067]
[93.71478271 157.85702515]
[95.58238983 142.97373962]
[97.45000458 128.09046936]
[78.98836517 115.15239716]
[77.02085114 94.60223389]
[90.07566833 81.14888000]
[88.20805359 66.26560211]
[86.34044647 51.38232422]
[74.14450836 41.69228363]
[72.46250153 26.57191467]
[81.77562714 15.00467014]
[79.90802002 0.12138976]
[75.71031189 -8.06586266]
[78.15969849 -15.09054470]
[76.60211182 -30.00945663]
[75.04453278 -44.92836761]
[73.48695374 -59.84728241]
[70.23612976 -74.49078369]
[65.33457947 -88.66734314]
[60.43302536 -102.84390259]
[55.53147507 -117.02045441]
[52.02874756 -119.82979584]
[49.86027527 -123.27490234]
[49.06060410 -126.84455872]
[49.49013519 -130.07092285]
[50.86551285 -132.58403015]
[47.15935135 -147.11897278]
[43.45318985 -161.65390015]
[28.37848282 -161.52484131]
[13.71109390 -165.00781250]
[0.30376655 -171.90034485]
[-11.06401539 -181.80171204]
[-19.73134422 -194.13624573]
[-25.19431305 -208.18684387]
[-27.13531113 -223.13662720]
[-25.44149208 -238.11642456]
[-20.21133232 -252.25534058]
[-11.74890709 -264.73135376]
[-0.54620886 -274.81912231]
[12.74545097 -281.93215942]
[27.35331345 -285.65689087]
[42.42809296 -285.77682495]
[57.09336853 -282.28497314]
[70.49651337 -275.38430786]
[81.85829163 -265.47604370]
[90.51814270 -253.13626099]
[95.97259521 -239.08235168]
[97.90452576 -224.13139343]
[96.20162201 -209.15261841]
[90.96289825 -195.01687622]
[82.49290466 -182.54600525]
[71.28409576 -172.46504211]
[57.98812485 -165.36006165]
[61.69428635 -150.82513428]
[65.40044403 -136.29019165]
[69.70803070 -121.92200470]
[74.60958099 -107.74545288]
[79.51113129 -93.56889343]
[84.41268158 -79.39233398]
[99.08921051 -76.29401398]
[109.30268860 -87.27967834]
[119.51616669 -98.26534271]
[122.65176392 -114.36192322]
[138.24549866 -119.43811035]
[150.25585938 -108.27195740]
[146.32763672 -92.35024261]
[130.50183105 -88.05186462]
[120.28835297 -77.06620026]
[110.07487488 -66.08052826]
[98.83406830 -60.66498184]
[88.40586090 -61.40486145]
[89.96344757 -46.48595047]
[91.52102661 -31.56703758]
[93.07860565 -16.64812660]
[94.79129791 -1.74622333]
[96.65891266 13.13705635]
[108.54129791 22.04460335]
[110.64734650 37.11175919]
[101.22372437 49.51470947]
[103.09133911 64.39798737]
[104.95894623 79.28127289]
[121.07881165 87.01958466]
[127.45060730 106.48390961]
[142.15856934 109.42938995]
[156.86653137 112.37487793]
[168.96087646 102.46221161]
[184.59672546 102.69445801]
[196.39132690 112.96195221]
[198.77561951 128.41670227]
[190.62380981 141.76144409]
[175.78494263 146.69519043]
[161.26547241 140.88839722]
[153.92105103 127.08283997]
[139.21308899 124.13735199]
[124.50511932 121.19187164]
[112.33328247 129.95808411]
[110.46567535 144.84135437]
[108.59806061 159.72463989]
[106.73044586 174.60792542]
[105.79481506 189.57870483]
[105.79481506 204.57870483]
[105.79481506 219.57870483]
[105.79481506 234.57870483]
[105.79481506 249.57870483]
[105.79481506 264.57870483]
[105.79481506 279.57870483]
[105.79481506 294.57870483]
[105.79481506 309.57870483]
[105.79481506 324.57870483]
[105.79481506 339.57870483]
[105.79481506 354.57870483]
[120.33470154 358.64001465]
[133.23908997 366.47454834]
[143.55036926 377.50085449]
[150.50338745 390.90078735]
[153.58218384 405.67996216]
[152.55830383 420.74163818]
[147.50769043 434.96817017]
[138.80517578 447.30383301]
[127.09651184 456.83325195]
[113.25057220 462.84927368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[29 128]
[30 127]
[31 126]
[32 125]
[35 110]
[36 109]
[37 108]
[40 105]
[41 104]
[43 103]
[44 102]
[45 101]
[46 100]
[47 88]
[48 87]
[49 86]
[50 85]
[55 84]
[56 83]
[57 82]
[89 98]
[90 97]
[91 96]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
