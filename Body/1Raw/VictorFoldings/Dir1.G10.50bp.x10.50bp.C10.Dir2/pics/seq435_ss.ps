%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGAACCCGGGGGGGGGGUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCCCCCCCCCCCAAACAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.66806030]
[71.19830322 375.65203857]
[59.48964310 366.12261963]
[50.78712082 353.78695679]
[45.73651886 339.56042480]
[44.71262741 324.49874878]
[47.79142761 309.71957397]
[54.74444962 296.31964111]
[65.05573273 285.29330444]
[77.96011353 277.45880127]
[92.50000000 273.39749146]
[92.50000000 258.39749146]
[92.50000000 243.39749146]
[92.50000000 228.39749146]
[92.50000000 213.39749146]
[92.50000000 198.39749146]
[92.50000000 183.39749146]
[92.50000000 168.39749146]
[92.50000000 153.39749146]
[92.50000000 138.39749146]
[81.86750031 134.66741943]
[72.73908234 128.06172180]
[65.87193298 119.12831879]
[61.83567047 108.60823822]
[60.96511078 97.37411499]
[46.46951675 93.51695251]
[31.97391891 89.65979767]
[22.80958366 90.47637177]
[17.21850204 85.56867218]
[2.80628657 81.41078949]
[-11.60592937 77.25289917]
[-27.01005554 80.86170197]
[-37.09387970 69.89968872]
[-51.50609589 65.74180603]
[-58.10770798 66.97721100]
[-63.50555420 64.95371246]
[-66.42462158 61.09955215]
[-80.65139771 56.34573746]
[-94.87818146 51.59192276]
[-109.10495758 46.83810806]
[-120.55062103 57.07980347]
[-135.58699036 60.21083069]
[-150.16934204 55.38896179]
[-160.37510681 43.91125107]
[-163.45899963 28.86514664]
[-158.59144592 14.29797554]
[-147.08178711 4.12823296]
[-132.02609253 1.09152865]
[-117.47425842 6.00472116]
[-107.34063721 17.54618645]
[-104.35114288 32.61132812]
[-90.12436676 37.36514282]
[-75.89758301 42.11895752]
[-61.67080688 46.87277222]
[-47.34820938 51.32958603]
[-32.93599319 55.48747635]
[-18.56272507 51.58126831]
[-7.44804192 62.84068298]
[6.96417427 66.99857330]
[21.37639046 71.15645599]
[35.83107758 75.16419983]
[50.32667542 79.02135468]
[64.82227325 82.87851715]
[76.48041534 68.73585510]
[93.30043793 61.45478439]
[93.61248779 46.45803070]
[93.92454529 31.46127892]
[94.23660278 16.46452522]
[80.18975067 10.71557713]
[69.17089844 0.27769619]
[62.67026138 -13.43748188]
[61.56698990 -28.57509232]
[66.01029205 -43.08789444]
[75.39925385 -55.01315689]
[88.46409607 -62.73807907]
[103.43789673 -65.21793365]
[118.29557800 -62.11734009]
[131.02777100 -53.85562515]
[139.91252136 -41.55011749]
[143.74827576 -26.86504364]
[142.01625061 -11.78643036]
[134.95071411 1.64645898]
[123.50719452 11.61693764]
[109.23336029 16.77658081]
[108.92130280 31.77333450]
[108.60924530 46.77008820]
[108.29718781 61.76684189]
[120.20913696 66.50061798]
[129.95173645 74.83036041]
[136.47920227 85.86192322]
[151.24525452 83.22305298]
[147.83760071 69.80764771]
[154.39839172 53.74681854]
[171.80886841 41.63739395]
[186.13146973 37.18057632]
[200.45405579 32.72376251]
[214.77665710 28.26694679]
[215.19479370 13.13076878]
[220.50730896 -1.04864764]
[230.13795471 -12.73322487]
[243.04206848 -20.65550804]
[257.81991577 -23.95614624]
[272.86846924 -22.27711105]
[286.55541992 -15.80053329]
[297.39611816 -5.22894144]
[304.21459961 8.29093552]
[306.27124023 23.29256439]
[303.34301758 38.14867783]
[295.74749756 51.24779892]
[284.30862427 61.16903305]
[270.26718140 66.83619690]
[255.14630127 67.63455963]
[240.58615112 63.47751617]
[228.16613770 54.81600189]
[219.23347473 42.58954239]
[204.91087341 47.04636002]
[190.58827209 51.50317383]
[176.26568604 55.95999146]
[175.87576294 63.44984818]
[174.70599365 85.91941833]
[188.48837280 91.83938599]
[205.42803955 92.53498840]
[209.44898987 109.00521851]
[194.73553467 117.42843628]
[182.56840515 105.62176514]
[168.78602600 99.70179749]
[153.88412476 97.98911285]
[139.11807251 100.62797546]
[134.88090515 117.71836090]
[123.57842255 131.21980286]
[107.50000000 138.39749146]
[107.50000000 153.39749146]
[107.50000000 168.39749146]
[107.50000000 183.39749146]
[107.50000000 198.39749146]
[107.50000000 213.39749146]
[107.50000000 228.39749146]
[107.50000000 243.39749146]
[107.50000000 258.39749146]
[107.50000000 273.39749146]
[122.03988647 277.45880127]
[134.94427490 285.29330444]
[145.25555420 296.31964111]
[152.20857239 309.71957397]
[155.28736877 324.49874878]
[154.26348877 339.56042480]
[149.21287537 353.78695679]
[140.51036072 366.12261963]
[128.80169678 375.65203857]
[114.95575714 381.66806030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 63]
[26 62]
[27 61]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[37 54]
[38 53]
[39 52]
[40 51]
[65 87]
[66 86]
[67 85]
[68 84]
[90 128]
[91 127]
[94 118]
[95 117]
[96 116]
[97 115]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
