%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUGACUAGGGGGGGGGGGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAAxxxxxxxxxxAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACCCCCCCCCCCAACCGACUA\
) } def
/len { sequence length } bind def

/coor [
[73.12762451 511.97607422]
[58.63793564 507.76757812]
[45.73170471 499.95147705]
[35.28890610 489.06063843]
[28.02154160 475.83761597]
[24.42511559 461.18402100]
[24.74483681 446.09893799]
[28.95890808 431.61087036]
[36.78000259 418.70764160]
[47.67487335 408.26904297]
[60.90068054 401.00680542]
[75.55567169 397.41601562]
[75.86772919 382.41928101]
[76.17978668 367.42251587]
[76.49184418 352.42578125]
[76.80390167 337.42901611]
[77.11595154 322.43225098]
[77.42800903 307.43551636]
[77.74006653 292.43875122]
[78.05212402 277.44201660]
[78.36418152 262.44525146]
[78.67623901 247.44850159]
[78.98828888 232.45173645]
[65.28322601 226.52719116]
[54.86232376 215.77775574]
[49.33592987 201.81982422]
[49.57513809 186.76889038]
[55.57462692 172.91899109]
[66.44874573 162.39300537]
[80.56211090 156.81729126]
[80.87416840 141.82054138]
[81.18622589 126.82378387]
[71.20349884 115.62801361]
[56.26919174 114.22570801]
[41.33488464 112.82341003]
[26.40057564 111.42110443]
[11.46626854 110.01879883]
[-1.75623345 119.10422516]
[-17.06101227 114.29347992]
[-22.70755196 99.27695465]
[-14.36431026 85.57403564]
[1.56849170 83.69644165]
[12.86857224 95.08449554]
[27.80287933 96.48679352]
[42.73718643 97.88909912]
[57.67149353 99.29140472]
[72.60580444 100.69371033]
[82.24899292 83.61720276]
[98.85466766 79.12312317]
[103.46022797 64.84765625]
[108.06579590 50.57219696]
[94.29039001 44.60615540]
[81.15510559 37.33842850]
[68.78258514 28.83687973]
[57.28835678 19.18088531]
[46.77973938 8.46060276]
[37.35485077 -3.22387218]
[29.10168648 -15.76344299]
[22.09731293 -29.04102707]
[16.40712547 -42.93265533]
[12.08425331 -57.30861664]
[9.16906071 -72.03469086]
[7.68876553 -86.97337341]
[7.65718889 -101.98518372]
[9.07462692 -116.92996216]
[11.92784309 -131.66816711]
[16.19019890 -146.06217957]
[21.82189751 -159.97763062]
[28.77035332 -173.28456116]
[36.97068787 -185.85873413]
[46.34634018 -197.58276367]
[56.80976868 -208.34715271]
[68.26327515 -218.05142212]
[80.59991455 -226.60494995]
[93.70451355 -233.92785645]
[107.45469666 -239.95179749]
[121.72209167 -244.62052917]
[136.37348938 -247.89042664]
[151.27206421 -249.73098755]
[166.27874756 -250.12501526]
[181.25338745 -249.06883240]
[196.05618286 -246.57229614]
[210.54891968 -242.65872192]
[224.59628296 -237.36465454]
[238.06710815 -230.73951721]
[250.83561707 -222.84518433]
[262.78259277 -213.75534058]
[273.79650879 -203.55487061]
[283.77447510 -192.33900452]
[292.62338257 -180.21249390]
[300.26055908 -167.28852844]
[306.61474609 -153.68778992]
[311.62658691 -139.53727722]
[315.24929810 -124.96911621]
[317.44903564 -110.11931610]
[318.20529175 -95.12652588]
[317.51098633 -80.13074493]
[315.37258911 -65.27198792]
[311.81008911 -50.68898010]
[306.85675049 -36.51788712]
[300.55877686 -22.89102745]
[292.97503662 -9.93563175]
[284.17630005 2.22733736]
[274.24475098 13.48431301]
[263.27307129 23.73019028]
[251.36373901 32.86930084]
[238.62794495 40.81631851]
[225.18460083 47.49703598]
[211.15922546 52.84908295]
[196.68276978 56.82248306]
[181.89041138 59.38013458]
[166.92025757 60.49816132]
[151.91209412 60.16612244]
[137.00602722 58.38711929]
[122.34125519 55.17776489]
[117.73568726 69.45322418]
[113.13012695 83.72868347]
[123.06632233 99.43766785]
[116.78742981 118.84523010]
[96.18297577 127.13583374]
[95.87092590 142.13258362]
[95.55886841 157.12934875]
[109.42807770 163.28732300]
[119.85491943 174.25656128]
[125.27307892 188.34403992]
[124.88597870 203.39189148]
[118.78374481 217.10784912]
[107.92470551 227.41447449]
[93.98504639 232.76379395]
[93.67298889 247.76054382]
[93.36093140 262.75729370]
[93.04887390 277.75405884]
[92.73682404 292.75082397]
[92.42476654 307.74755859]
[92.11270905 322.74432373]
[91.80065155 337.74105835]
[91.48859406 352.73782349]
[91.17653656 367.73458862]
[90.86448669 382.73132324]
[90.55242920 397.72808838]
[105.04536438 401.92538452]
[117.95762634 409.73150635]
[128.40882874 420.61428833]
[135.68640137 433.83166504]
[139.29414368 448.48251343]
[138.98606873 463.56784058]
[134.78318787 478.05914307]
[126.97206116 490.96841431]
[116.08525848 501.41540527]
[102.86505890 508.68786621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[30 122]
[31 121]
[32 120]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[49 117]
[50 116]
[51 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
