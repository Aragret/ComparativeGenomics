%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCUUACGGGGGGGGGGACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAxxxxxxxxxxCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUCCCCCCCCCCUUCUCAUUAC\
) } def
/len { sequence length } bind def

/coor [
[75.43454742 456.67776489]
[61.58860779 450.66174316]
[49.87994766 441.13232422]
[41.17742157 428.79666138]
[36.12681961 414.57015991]
[35.10292816 399.50845337]
[38.18172836 384.72930908]
[45.13475037 371.32937622]
[55.44603348 360.30303955]
[68.35041809 352.46853638]
[82.89030457 348.40722656]
[82.89030457 333.40722656]
[82.89030457 318.40722656]
[82.89030457 303.40722656]
[82.89030457 288.40722656]
[82.89030457 273.40722656]
[82.89030457 258.40722656]
[82.89030457 243.40722656]
[82.89030457 228.40722656]
[82.89030457 213.40722656]
[82.89030457 198.40722656]
[82.73426819 183.40803528]
[82.42221069 168.41128540]
[82.11015320 153.41452026]
[78.80519867 146.74946594]
[81.95086670 138.10328674]
[81.95086670 123.10327911]
[84.55920410 89.58338165]
[78.78292847 75.74016571]
[73.00666046 61.89694595]
[67.23038483 48.05373001]
[61.45411301 34.21051025]
[55.67784119 20.36729431]
[51.55841446 34.79055023]
[40.87541580 45.32020187]
[26.39411354 49.23068237]
[11.86294460 45.50977707]
[1.04326010 35.12062836]
[-3.26429868 20.75243568]
[0.05526704 6.12436342]
[10.14269733 -4.97715616]
[24.38689232 -9.67852974]
[39.10078430 -6.76282024]
[50.47566986 3.01516223]
[47.68334579 -11.72264385]
[44.89102173 -26.46044922]
[41.79269791 -41.13697433]
[38.38972092 -55.74586868]
[34.98674393 -70.35475922]
[31.58376503 -84.96365356]
[16.59688759 -83.82614136]
[1.61201751 -84.98981476]
[-13.01957607 -88.42739105]
[-26.95490837 -94.05828094]
[-39.86731720 -101.75049591]
[-51.45411301 -111.32371521]
[-61.44368744 -122.55353546]
[-69.60186768 -135.17671204]
[-75.73741913 -148.89732361]
[-79.70652008 -163.39376831]
[-81.41611481 -178.32620239]
[-80.82613373 -193.34460449]
[-77.95041656 -208.09692383]
[-72.85636139 -222.23731995]
[-65.66338348 -235.43434143]
[-56.54010010 -247.37864685]
[-45.70037079 -257.79022217]
[-33.39829636 -266.42498779]
[-19.92225456 -273.08056641]
[-5.58814383 -277.60092163]
[9.26802444 -279.88012695]
[24.29800224 -279.86468506]
[39.14945984 -277.55502319]
[53.47426605 -273.00524902]
[66.93662262 -266.32202148]
[79.22094727 -257.66201782]
[90.03928375 -247.22824097]
[99.13803864 -235.26524353]
[106.30391693 -222.05348206]
[111.36894226 -207.90266418]
[114.21438599 -193.14447021]
[114.77353668 -178.12489319]
[113.03330231 -163.19599915]
[109.03446960 -148.70773315]
[102.87077332 -134.99974060]
[94.68669891 -122.39333344]
[84.67410278 -111.18403625]
[73.06768036 -101.63461304]
[60.13951492 -93.96891022]
[46.19265747 -88.36663055]
[49.59563446 -73.75773621]
[52.99861145 -59.14884567]
[56.40159225 -44.53995132]
[59.96598053 -41.27335739]
[61.47599030 -35.70998001]
[59.62882614 -29.25277328]
[62.42115021 -14.51496792]
[65.21347809 0.22283778]
[69.52105713 14.59102154]
[75.29733276 28.43424034]
[81.07360840 42.27745819]
[86.84987640 56.12067413]
[92.62615204 69.96389008]
[98.40242004 83.80711365]
[111.17977905 91.66453552]
[126.14002991 90.57322693]
[141.10028076 89.48191833]
[149.16876221 76.22751617]
[163.50000000 70.27809906]
[178.58331299 73.92134094]
[188.61886597 85.75633240]
[189.74780273 101.23229218]
[181.53599548 114.39838409]
[167.14108276 120.19197845]
[152.09817505 116.38533020]
[142.19158936 104.44216156]
[127.23133850 105.53347778]
[112.27108765 106.62478638]
[126.82883453 110.24031067]
[133.97830200 123.42686462]
[129.06478882 137.59927368]
[115.28726196 143.53054810]
[101.61565399 137.35906982]
[96.95086670 123.10327911]
[96.95086670 138.10328674]
[97.10690308 153.10246277]
[97.41896057 168.09922791]
[97.73101807 183.09597778]
[101.05587769 191.67485046]
[97.89030457 198.40722656]
[97.89030457 213.40722656]
[97.89030457 228.40722656]
[97.89030457 243.40722656]
[97.89030457 258.40722656]
[97.89030457 273.40722656]
[97.89030457 288.40722656]
[97.89030457 303.40722656]
[97.89030457 318.40722656]
[97.89030457 333.40722656]
[97.89030457 348.40722656]
[112.43019104 352.46853638]
[125.33457184 360.30303955]
[135.64585876 371.32937622]
[142.59887695 384.72930908]
[145.67767334 399.50845337]
[144.65377808 414.57015991]
[139.60317993 428.79666138]
[130.90065002 441.13232422]
[119.19199371 450.66174316]
[105.34605408 456.67776489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[23 127]
[24 126]
[26 125]
[27 124]
[28 104]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[44 98]
[45 97]
[46 96]
[47 93]
[48 92]
[49 91]
[50 90]
[105 118]
[106 117]
[107 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
