%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACACCCCGGGGGGGGGGCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAxxxxxxxxxxCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGCCCCCCCCCCGCCCCACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 379.56820679]
[71.19830322 373.55218506]
[59.48964310 364.02276611]
[50.78712082 351.68710327]
[45.73651886 337.46057129]
[44.71262741 322.39889526]
[47.79142761 307.61975098]
[54.74444962 294.21981812]
[65.05573273 283.19348145]
[77.96011353 275.35897827]
[92.50000000 271.29766846]
[92.50000000 256.29766846]
[92.50000000 241.29765320]
[92.50000000 226.29765320]
[92.50000000 211.29765320]
[92.50000000 196.29765320]
[92.50000000 181.29765320]
[92.50000000 166.29765320]
[92.50000000 151.29765320]
[92.50000000 136.29765320]
[92.50000000 121.29765320]
[80.04567719 110.56716919]
[78.16864014 94.23529816]
[87.86385345 80.95914459]
[84.46087646 66.35025024]
[81.05789948 51.74135971]
[77.65492249 37.13246918]
[64.51871490 28.76122093]
[61.27571869 13.89725018]
[69.33737946 1.42547226]
[65.93440247 -13.18342018]
[62.53142166 -27.79231262]
[49.39521408 -36.16355896]
[46.15221786 -51.02753067]
[54.21387863 -63.49930954]
[50.81089783 -78.10820007]
[47.40792084 -92.71709442]
[34.31316757 -97.13598633]
[25.19672203 -107.37822723]
[22.37061119 -120.68474579]
[26.47139359 -133.54145813]
[36.32065582 -142.60722351]
[33.22233582 -157.28375244]
[30.12401390 -171.96026611]
[27.02569199 -186.63679504]
[16.50730133 -175.94271851]
[1.56760967 -177.28643799]
[-6.87367821 -189.68582153]
[-2.64666319 -204.07791138]
[11.15904903 -209.94326782]
[24.45220184 -202.99530029]
[22.89462090 -217.91421509]
[21.33703995 -232.83311462]
[15.70508289 -246.73567200]
[6.44013405 -258.53231812]
[-2.82481527 -270.32894897]
[-12.08976460 -282.12561035]
[-27.50349236 -287.72460938]
[-30.09463310 -303.91775513]
[-17.19764328 -314.04690552]
[-2.07984138 -307.69207764]
[-0.29312468 -291.39053345]
[8.97182465 -279.59390259]
[18.23677444 -267.79727173]
[27.50172234 -256.00061035]
[25.81087112 -270.90502930]
[27.30244064 -285.83068848]
[31.90929031 -300.10571289]
[39.42404556 -313.08758545]
[49.50843048 -324.19186401]
[61.70850372 -332.91873169]
[75.47508240 -338.87533569]
[90.18847656 -341.79357910]
[105.18637085 -341.54202271]
[119.79363251 -338.13208008]
[133.35273743 -331.71719360]
[145.25331116 -322.58615112]
[154.95968628 -311.14993286]
[162.03489685 -297.92340088]
[166.16047668 -283.50192261]
[167.15072632 -268.53463745]
[164.96104431 -253.69531250]
[159.69001770 -239.65194702]
[151.57490540 -227.03668213]
[140.98100281 -216.41737366]
[128.38520813 -208.27207947]
[114.35450745 -202.96742249]
[99.52048492 -200.74220276]
[84.55087280 -201.69659424]
[70.11953735 -205.78762817]
[56.87609100 -212.83113098]
[45.41667938 -222.51008606]
[36.25595093 -234.39070129]
[37.81353378 -219.47178650]
[39.37111282 -204.55287170]
[41.70221710 -189.73512268]
[44.80054092 -175.05859375]
[47.89886093 -160.38206482]
[50.99718475 -145.70553589]
[66.16912079 -139.51541138]
[74.76789856 -125.37232971]
[73.25083160 -108.72360229]
[62.01681519 -96.12007141]
[65.41979218 -81.51117706]
[68.82276917 -66.90229034]
[81.56587219 -59.27674484]
[85.22509003 -44.50972748]
[77.14031219 -31.19529152]
[80.54328918 -16.58639908]
[83.94627380 -1.97750568]
[96.68937683 5.64803600]
[100.34858704 20.41505432]
[92.26381683 33.72949219]
[95.66679382 48.33838272]
[99.06977081 62.94727707]
[102.47274780 77.55616760]
[117.31377411 85.50608826]
[122.52880859 101.51422882]
[136.31118774 107.43419647]
[150.19223022 100.23344421]
[165.44293213 103.69033813]
[174.86238098 116.17264557]
[174.00300598 131.78660583]
[163.27056885 143.15975952]
[147.73260498 144.92208862]
[134.72566223 136.24143982]
[130.39122009 121.21657562]
[116.60884857 115.29661560]
[112.42224884 118.85544586]
[107.50000000 121.29765320]
[107.50000000 136.29765320]
[107.50000000 151.29765320]
[107.50000000 166.29765320]
[107.50000000 181.29765320]
[107.50000000 196.29765320]
[107.50000000 211.29765320]
[107.50000000 226.29765320]
[107.50000000 241.29765320]
[107.50000000 256.29766846]
[107.50000000 271.29766846]
[122.03988647 275.35897827]
[134.94427490 283.19348145]
[145.25555420 294.21981812]
[152.20857239 307.61975098]
[155.28736877 322.39889526]
[154.26348877 337.46057129]
[149.21287537 351.68710327]
[140.51036072 364.02276611]
[128.80169678 373.55218506]
[114.95575714 379.56820679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 116]
[25 115]
[26 114]
[27 113]
[30 110]
[31 109]
[32 108]
[35 105]
[36 104]
[37 103]
[42 99]
[43 98]
[44 97]
[45 96]
[51 95]
[52 94]
[53 93]
[54 65]
[55 64]
[56 63]
[57 62]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
