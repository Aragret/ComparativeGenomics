%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCCCACCCGGGGGGGGGGCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCxxxxxxxxxxACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAACCCCCCCCCCACCUACCCACCC\
) } def
/len { sequence length } bind def

/coor [
[76.78411102 663.01879883]
[62.62350845 657.86383057]
[50.03376389 649.58160400]
[39.69382477 638.61883545]
[32.16131592 625.56671143]
[27.84244919 611.12908936]
[26.97014046 596.08465576]
[29.59143066 581.24462891]
[35.56495667 567.40942383]
[44.56857681 555.32507324]
[56.11673355 545.64331055]
[69.58664703 538.88623047]
[84.25190735 535.41821289]
[84.25190735 520.41821289]
[84.25190735 505.41824341]
[84.25190735 490.41824341]
[84.25190735 475.41824341]
[84.25190735 460.41824341]
[84.25190735 445.41824341]
[84.25190735 430.41824341]
[84.25190735 415.41824341]
[84.25190735 400.41824341]
[70.85182190 396.98657227]
[58.66416931 390.42343140]
[48.40895844 381.11111450]
[40.69334412 369.59442139]
[35.97567368 356.54898071]
[34.53828430 342.74139404]
[36.47058105 328.98428345]
[41.66350937 316.08847046]
[49.81570435 304.81521606]
[60.45095444 295.83120728]
[72.94603729 289.66912842]
[86.56723022 286.69622803]
[87.17511749 271.70855713]
[87.78299713 256.72088623]
[76.00268555 247.64550781]
[71.77520752 233.20277405]
[76.92292023 218.87258911]
[89.66896820 210.22131348]
[90.27685547 195.23364258]
[81.28894043 180.19018555]
[91.18702698 164.69476318]
[91.49102783 149.69784546]
[91.79503632 134.70092773]
[79.18503571 128.95190430]
[69.71924591 118.82955170]
[64.82752991 105.86288452]
[65.24880981 92.01060486]
[70.91943359 79.36515808]
[80.98284149 69.83672333]
[93.91888428 64.86460876]
[94.52677155 49.87692642]
[95.13465118 34.88925171]
[95.74253845 19.90157318]
[83.77021027 28.93835258]
[68.88974762 27.04840469]
[59.55660629 15.30564404]
[61.07410431 0.38260141]
[72.57996368 -9.24107838]
[87.53626251 -8.09698105]
[97.44449615 3.16485977]
[99.86605072 -11.63838482]
[102.28760529 -26.44162941]
[104.70916748 -41.24487686]
[99.30121613 -56.11311722]
[108.99168396 -67.42436218]
[102.09701538 -78.37051392]
[104.45732117 -90.68123627]
[114.26310730 -97.82719421]
[116.98418427 -112.57832336]
[119.70526123 -127.32945251]
[106.30147552 -134.31729126]
[95.55405426 -144.94670105]
[88.41864777 -158.27252197]
[85.52973938 -173.10981750]
[87.14420319 -188.13929749]
[93.11848450 -202.02450562]
[102.92134857 -213.53082275]
[115.68114471 -221.63508606]
[130.26325989 -225.61668396]
[145.37107849 -225.12156677]
[159.66122437 -220.19377136]
[171.86302185 -211.27146912]
[180.89149475 -199.14801025]
[185.94383240 -184.90142822]
[186.57080078 -169.79849243]
[182.71662903 -155.18217468]
[174.72404480 -142.35214233]
[163.30374146 -132.44920349]
[149.47119141 -126.35395813]
[134.45639038 -124.60837555]
[131.73530579 -109.85724640]
[129.01423645 -95.10612488]
[135.78465271 -78.94290924]
[123.79492950 -65.00279999]
[129.37608337 -51.19338608]
[119.51241302 -38.82331848]
[117.09085083 -24.02007294]
[114.66929626 -9.21682835]
[112.24774170 5.58641672]
[110.73021698 20.50945663]
[110.12232971 35.49713516]
[109.51445007 50.48480988]
[108.90656281 65.47248840]
[123.02679443 72.77423096]
[132.57061768 85.48688507]
[135.64128113 101.08391571]
[131.62850952 116.46553040]
[121.32979584 128.57473755]
[106.79195404 135.00492859]
[106.48794556 150.00184631]
[106.18394470 164.99876404]
[114.55715179 174.86001587]
[113.96133423 187.38079834]
[105.26452637 195.84152222]
[104.65664673 210.82919312]
[116.66020966 220.48428345]
[120.63049316 235.18429565]
[115.24725342 249.23722839]
[102.77067566 257.32876587]
[102.16278839 272.31643677]
[101.55490875 287.30410767]
[116.99867249 292.35885620]
[130.39764404 301.52819824]
[140.68409729 314.07196045]
[147.04100037 328.98156738]
[148.96685791 345.06097412]
[146.31530762 361.02267456]
[139.30618286 375.59075928]
[128.50735474 387.60293579]
[114.78866577 396.10327148]
[99.25190735 400.41824341]
[99.25190735 415.41824341]
[99.25190735 430.41824341]
[99.25190735 445.41824341]
[99.25190735 460.41824341]
[99.25190735 475.41824341]
[99.25190735 490.41824341]
[99.25190735 505.41824341]
[99.25190735 520.41821289]
[99.25190735 535.41821289]
[113.91716766 538.88623047]
[127.38708496 545.64331055]
[138.93524170 555.32507324]
[147.93885803 567.40942383]
[153.91238403 581.24462891]
[156.53367615 596.08465576]
[155.66136169 611.12908936]
[151.34249878 625.56671143]
[143.80999756 638.61883545]
[133.47006226 649.58160400]
[120.88031006 657.86383057]
[106.71970367 663.01879883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[34 123]
[35 122]
[36 121]
[40 117]
[41 116]
[43 113]
[44 112]
[45 111]
[52 105]
[53 104]
[54 103]
[55 102]
[62 101]
[63 100]
[64 99]
[65 98]
[67 96]
[70 94]
[71 93]
[72 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
