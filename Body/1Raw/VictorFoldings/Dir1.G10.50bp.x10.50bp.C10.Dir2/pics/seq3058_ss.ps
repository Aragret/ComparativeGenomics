%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUCCCUGGGGGGGGGGGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCxxxxxxxxxxCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGCCCCCCCCCCAUCCCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[84.27921295 407.68325806]
[71.05901337 400.41079712]
[60.17221069 389.96377563]
[52.36108017 377.05453491]
[48.15819931 362.56323242]
[47.85012817 347.47787476]
[51.45787048 332.82705688]
[58.73544312 319.60968018]
[69.18665314 308.72689819]
[82.09891510 300.92074585]
[96.59185028 296.72348022]
[96.27979279 281.72671509]
[95.96773529 266.72998047]
[95.65567780 251.73321533]
[95.34362030 236.73646545]
[95.03157043 221.73970032]
[94.71951294 206.74295044]
[94.40745544 191.74620056]
[94.09539795 176.74945068]
[86.09500122 164.18589783]
[93.54352570 150.22773743]
[93.23146820 135.23098755]
[74.46848297 125.20272064]
[64.68424225 106.31133270]
[67.31961060 85.20041656]
[81.44779205 69.29412079]
[76.54624176 55.11756134]
[71.64469147 40.94100189]
[66.74314117 26.76444435]
[61.84159088 12.58788586]
[56.94004059 -1.58867216]
[40.70213699 -4.53979445]
[28.22723389 -15.20152092]
[22.84442139 -30.60461617]
[25.92760086 -46.53182602]
[36.54628372 -58.67247009]
[31.35087013 -72.74398804]
[17.27459335 -79.41453552]
[12.20615864 -93.75907135]
[18.65225601 -107.13753510]
[13.45683956 -121.20906067]
[4.56449032 -133.28904724]
[-7.32788944 -142.43078613]
[-19.22027016 -151.57250977]
[-31.11264801 -160.71424866]
[-43.00502777 -169.85598755]
[-54.99185944 -178.87351990]
[-67.07184601 -187.76586914]
[-81.44567871 -182.16259766]
[-96.56252289 -185.24232483]
[-107.59864807 -196.02227783]
[-111.03246307 -211.06263733]
[-105.76825714 -225.56407166]
[-93.48580933 -234.89923096]
[-78.10441589 -236.08929443]
[-64.53221893 -228.75451660]
[-57.10005188 -215.23539734]
[-58.17950058 -199.84585571]
[-46.09951019 -190.95350647]
[-38.80109024 -189.51173401]
[-33.86329269 -181.74836731]
[-21.97091484 -172.60662842]
[-10.07853508 -163.46488953]
[1.81384468 -154.32316589]
[13.70622444 -145.18142700]
[8.38525677 -159.20594788]
[6.14278889 -174.03738403]
[7.07976484 -189.00808716]
[11.15400696 -203.44416809]
[18.18211555 -216.69580078]
[27.84772301 -228.16645813]
[39.71573639 -237.33981323]
[53.25192642 -243.80290222]
[67.84696960 -247.26481628]
[82.84386444 -247.56970215]
[97.56755066 -244.70385742]
[111.35523987 -238.79626465]
[123.58628845 -230.11286926]
[133.71012878 -219.04452515]
[141.27102661 -206.08950806]
[145.92863464 -191.83093262]
[147.47331238 -176.91069031]
[145.83549500 -162.00036621]
[141.08894348 -147.77116394]
[133.44729614 -134.86360168]
[123.25454712 -123.85869598]
[110.96951294 -115.25183868]
[97.14520264 -109.43046570]
[82.40390778 -106.65660858]
[67.40920258 -107.05513763]
[52.83606720 -110.60811615]
[39.34049988 -117.15560913]
[27.52835846 -126.40447235]
[32.72377396 -112.33295441]
[46.31715775 -106.35336304]
[51.78650284 -92.15685272]
[45.42238998 -77.93939972]
[50.61780548 -63.86788559]
[64.23483276 -62.44102478]
[75.95765686 -55.24001312]
[83.45835876 -43.62764359]
[85.21855164 -29.84915733]
[80.83641052 -16.59819794]
[71.11660004 -6.49022293]
[76.01815033 7.68633509]
[80.91970062 21.86289406]
[85.82125092 36.03945160]
[90.72280121 50.21601105]
[95.62435150 64.39257050]
[102.97063446 64.24792480]
[110.19230652 65.60301971]
[116.98642731 68.40100098]
[123.06799316 72.52449799]
[128.18191528 77.80055237]
[132.11364746 84.00782776]
[134.69825745 90.88594055]
[135.82736206 98.14637756]
[135.45356750 105.48457336]
[149.47027588 110.82608032]
[163.48698425 116.16759491]
[180.44093323 116.15793610]
[185.14353943 132.44664001]
[170.79321289 141.47462463]
[158.14547729 130.18431091]
[144.12876892 124.84279633]
[130.11204529 119.50128174]
[120.66204834 129.32772827]
[108.22822571 134.91893005]
[108.54028320 149.91567993]
[116.56300354 163.55191040]
[109.09215546 176.43739319]
[109.40420532 191.43414307]
[109.71626282 206.43089294]
[110.02832031 221.42765808]
[110.34037781 236.42440796]
[110.65243530 251.42115784]
[110.96449280 266.41790771]
[111.27654266 281.41467285]
[111.58860016 296.41140747]
[126.24359131 300.00219727]
[139.46940613 307.26443481]
[150.36427307 317.70303345]
[158.18536377 330.60626221]
[162.39944458 345.09432983]
[162.71916199 360.17941284]
[159.12272644 374.83300781]
[151.85537720 388.05603027]
[141.41256714 398.94686890]
[128.50633240 406.76296997]
[114.01664734 410.97143555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[36 98]
[37 97]
[40 94]
[41 93]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 59]
[48 58]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
