%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAACAGACCGGGGGGGGGGGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUxxxxxxxxxxCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGCCCCCCCCCCACAAACAGACC\
) } def
/len { sequence length } bind def

/coor [
[86.14788818 407.40356445]
[71.58802795 403.49539185]
[58.38688660 396.21572876]
[47.31195450 385.98785400]
[39.00711441 373.40640259]
[33.95520401 359.20281982]
[32.44992828 344.20291138]
[34.57880402 329.27871704]
[40.21806335 315.29794312]
[49.03984451 303.07339478]
[60.53126144 293.31579590]
[74.02422333 286.59243774]
[88.73426056 283.29421997]
[89.04223633 268.29736328]
[89.35021210 253.30053711]
[89.65818787 238.30369568]
[89.96617126 223.30685425]
[90.27414703 208.31002808]
[90.58212280 193.31318665]
[90.89009857 178.31634521]
[91.19808197 163.31950378]
[91.50605774 148.32267761]
[91.81403351 133.32583618]
[78.90405273 127.06625366]
[69.68167114 116.07544708]
[65.75897980 102.27463531]
[50.93650055 99.97375488]
[36.11401749 97.67288208]
[21.29153633 95.37200928]
[15.61507607 109.33175659]
[6.87179375 121.60578156]
[-4.46679497 131.53216553]
[-17.78921509 138.57559204]
[-32.37700653 142.35621643]
[-47.44346237 142.67015076]
[-62.17607498 139.50047302]
[-75.78032684 133.01811218]
[-87.52256775 123.57265472]
[-96.76953888 111.67349243]
[-103.02257538 97.96231842]
[-105.94445038 83.17856598]
[-105.37759399 68.11949921]
[-101.35257721 53.59724426]
[-94.08646393 40.39495850]
[-83.97110748 29.22462845]
[-71.55201721 20.68865776]
[-57.49892807 15.24737740]
[-42.56971741 13.19423008]
[-27.56949806 14.63993931]
[-13.30720711 19.50654030]
[-0.55199617 27.53158188]
[10.00826359 38.28228378]
[17.80407143 51.17887878]
[22.41500854 65.52586365]
[23.59241104 80.54953003]
[38.41489410 82.85040283]
[53.23737717 85.15127563]
[68.05986023 87.45214844]
[85.65706635 68.82466125]
[111.25194550 67.58063507]
[119.14842224 54.82738113]
[127.04490662 42.07412338]
[134.94139099 29.32086754]
[121.53921509 36.05745697]
[106.72451019 38.40789795]
[91.89536285 36.15037155]
[78.45122528 29.49792671]
[67.66082764 19.07836151]
[60.54247665 5.87498569]
[57.76795197 -8.86618042]
[59.59907532 -23.75399399]
[65.86305237 -37.38346863]
[75.96873474 -48.46837616]
[88.96244049 -55.96261978]
[103.61792755 -59.15895081]
[118.55215454 -57.75572968]
[132.35574341 -51.88538742]
[143.72602844 -42.10190582]
[151.58999634 -29.32857132]
[155.20550537 -14.77081966]
[154.23133850 0.19751401]
[148.76055908 14.16195774]
[160.73081970 5.12243795]
[172.70108032 -3.91708136]
[184.67134094 -12.95660114]
[196.64160156 -21.99612045]
[199.60986328 -28.01542282]
[204.46197510 -31.12105179]
[209.29399109 -31.14898872]
[221.62527466 -39.68944931]
[233.95655823 -48.22990799]
[234.43588257 -63.62719345]
[243.78048706 -75.64933014]
[258.24130249 -79.81453705]
[272.21459961 -74.72684479]
[284.54589844 -83.26730347]
[296.87716675 -91.80776215]
[309.20846558 -100.34822083]
[318.78701782 -114.33705902]
[334.88076782 -109.00533295]
[334.21261597 -92.06455994]
[317.74890137 -88.01693726]
[305.41763306 -79.47647858]
[293.08633423 -70.93601990]
[280.75506592 -62.39556122]
[280.60409546 -47.52561569]
[271.61978149 -35.45308304]
[257.07946777 -30.93288612]
[242.49700928 -35.89862061]
[230.16572571 -27.35816383]
[217.83444214 -18.81770515]
[205.68112183 -10.02586174]
[193.71086121 -0.98634255]
[181.74060059 8.05317688]
[169.77033997 17.09269714]
[157.80007935 26.13221550]
[147.69464111 37.21735001]
[139.79817200 49.97060776]
[131.90168762 62.72386551]
[124.00520325 75.47711945]
[128.34082031 80.65009308]
[131.58006287 86.57164001]
[133.59759521 93.01267242]
[134.31536865 99.72401428]
[133.70564270 106.44602966]
[131.79196167 112.91867828]
[128.64839172 118.89155579]
[124.39653015 124.13359833]
[119.20086670 128.44200134]
[113.26240540 131.65011597]
[106.81087494 133.63380432]
[106.50289154 148.63064575]
[106.19491577 163.62748718]
[105.88694000 178.62432861]
[105.57896423 193.62117004]
[105.27098083 208.61799622]
[104.96300507 223.61483765]
[104.65502930 238.61167908]
[104.34705353 253.60852051]
[104.03907013 268.60534668]
[103.73109436 283.60220337]
[118.29331970 287.50155640]
[131.49887085 294.77319336]
[142.58000183 304.99435425]
[150.89247131 317.57077026]
[155.95298767 331.77127075]
[157.46736145 346.77029419]
[155.34753418 361.69577026]
[149.71675110 375.67996216]
[140.90238953 387.90985107]
[129.41688538 397.67440796]
[115.92800140 404.40594482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[26 58]
[27 57]
[28 56]
[29 55]
[60 120]
[61 119]
[62 118]
[63 117]
[82 116]
[83 115]
[84 114]
[85 113]
[86 112]
[89 111]
[90 110]
[91 109]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
