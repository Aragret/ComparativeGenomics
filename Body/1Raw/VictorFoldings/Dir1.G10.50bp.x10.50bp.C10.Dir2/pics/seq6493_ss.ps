%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUGGGGGGGGGGGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCACCCCCCCCCCUCCUAGUCCU\
) } def
/len { sequence length } bind def

/coor [
[105.05859375 379.09555054]
[90.56890106 374.88708496]
[77.66267395 367.07098389]
[67.21987152 356.18014526]
[59.95250702 342.95712280]
[56.35608292 328.30352783]
[56.67580414 313.21844482]
[60.88987350 298.73037720]
[68.71096802 285.82714844]
[79.60584259 275.38854980]
[92.83164978 268.12631226]
[107.48664093 264.53552246]
[107.79869843 249.53878784]
[108.11075592 234.54202271]
[108.42280579 219.54527283]
[108.73486328 204.54852295]
[109.04692078 189.55177307]
[109.35897827 174.55500793]
[109.67103577 159.55825806]
[109.98309326 144.56150818]
[110.29514313 129.56475830]
[104.49447632 124.81056976]
[94.98592377 136.41175842]
[83.38490295 126.90301514]
[92.89313507 115.30221558]
[87.09246063 110.54803467]
[72.44895935 113.79885864]
[64.68999481 118.74358368]
[57.46709442 116.96163940]
[42.75913239 119.90712738]
[32.70265961 132.40699768]
[16.66102028 132.19400024]
[6.93998814 119.43151093]
[10.99670601 103.90982819]
[25.71920776 97.53585815]
[39.81365204 105.19916534]
[54.52161026 102.25367737]
[69.19813538 99.15535736]
[83.84163666 95.90453339]
[95.24266052 86.15688324]
[100.72969055 72.19648743]
[106.07120514 58.17977905]
[111.26661682 44.10825729]
[116.46203613 30.03673935]
[116.50578308 20.83619881]
[121.91468048 15.72840977]
[127.40171051 1.76802003]
[127.63684845 -7.42961884]
[133.15083313 -12.42377663]
[138.92710876 -26.26699448]
[144.70338440 -40.11021423]
[150.47966003 -53.95343018]
[156.25592041 -67.79664612]
[162.03219604 -81.63986206]
[149.54570007 -93.70133972]
[148.68261719 -115.07652283]
[139.17425537 -126.67786407]
[124.45760345 -135.09548950]
[128.47229004 -151.56724548]
[145.41169739 -152.26928711]
[150.77560425 -136.18621826]
[160.28396606 -124.58487701]
[167.77746582 -124.89686584]
[174.73031616 -138.18814087]
[182.76448059 -125.52084351]
[190.25799561 -125.83283234]
[198.76908875 -138.18440247]
[207.28016663 -150.53598022]
[193.26435852 -145.19210815]
[178.28097534 -145.89791870]
[164.82957458 -152.53569031]
[155.15417480 -163.99809265]
[150.86883545 -178.37292480]
[152.68843079 -193.26214600]
[160.30944824 -206.18191528]
[172.46049500 -214.97689819]
[187.11453247 -218.17991638]
[201.82691956 -215.25663757]
[214.14331055 -206.69470215]
[222.00904846 -193.92247009]
[224.11195374 -179.07060242]
[220.10186768 -164.61801147]
[231.60366821 -174.24653625]
[243.10546875 -183.87506104]
[254.60728455 -193.50358582]
[266.10906982 -203.13211060]
[277.61087036 -212.76063538]
[289.11270142 -222.38916016]
[283.92135620 -236.63085938]
[283.91714478 -251.78921509]
[289.10058594 -266.03378296]
[298.84570312 -277.64447021]
[311.97579956 -285.21923828]
[326.90527344 -287.84338379]
[341.83139038 -285.20001221]
[354.95169067 -277.60833740]
[364.68185425 -265.98510742]
[369.84695435 -251.73388672]
[369.82321167 -236.57554626]
[364.61355591 -222.34054565]
[354.84701538 -210.74783325]
[341.70300293 -203.19729614]
[326.76870728 -200.60067749]
[311.84750366 -203.27153015]
[298.74121094 -210.88735962]
[287.23941040 -201.25883484]
[275.73760986 -191.63031006]
[264.23580933 -182.00178528]
[252.73399353 -172.37326050]
[241.23219299 -162.74473572]
[229.73039246 -153.11621094]
[219.63174438 -142.02488708]
[211.12065125 -129.67330933]
[202.60955811 -117.32174683]
[200.65177917 -84.56809235]
[175.87541199 -75.86359406]
[170.09915161 -62.02037430]
[164.32287598 -48.17715836]
[158.54660034 -34.33393860]
[152.77032471 -20.49072266]
[146.99404907 -6.64750433]
[141.36209106 7.25505161]
[135.87506104 21.21544075]
[130.53355408 35.23215485]
[125.33814240 49.30367279]
[120.14272308 63.37519455]
[120.78052521 70.78726959]
[114.69007874 77.68352509]
[109.20304871 91.64391327]
[125.73223877 101.68934631]
[125.29190063 129.87680054]
[124.97984314 144.87356567]
[124.66778564 159.87031555]
[124.35572815 174.86706543]
[124.04367828 189.86381531]
[123.73162079 204.86058044]
[123.41956329 219.85733032]
[123.10750580 234.85408020]
[122.79544830 249.85083008]
[122.48339081 264.84759521]
[136.97633362 269.04486084]
[149.88859558 276.85101318]
[160.33979797 287.73379517]
[167.61737061 300.95117188]
[171.22511292 315.60198975]
[170.91703796 330.68734741]
[166.71415710 345.17864990]
[158.90303040 358.08789062]
[148.01622009 368.53491211]
[134.79603577 375.80737305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 39]
[27 38]
[29 37]
[30 36]
[40 129]
[41 128]
[42 126]
[43 125]
[44 124]
[46 123]
[47 122]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[54 116]
[56 62]
[57 61]
[66 114]
[67 113]
[68 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
