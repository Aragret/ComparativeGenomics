%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCAACAAGGGGGGGGGGAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGxxxxxxxxxxAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCCCCCCCCCCCAUAUCAACAA\
) } def
/len { sequence length } bind def

/coor [
[83.18147278 414.69757080]
[70.62325287 406.34640503]
[60.53702927 395.13394165]
[53.55683517 381.76504517]
[50.12145233 367.08004761]
[50.44682693 352.00210571]
[54.51251221 337.47897339]
[62.06293106 324.42364502]
[72.62345886 313.65673828]
[85.53025818 305.85510254]
[99.97198486 301.50915527]
[99.34800720 286.52212524]
[98.72402954 271.53512573]
[98.10005188 256.54809570]
[97.47607422 241.56108093]
[96.85209656 226.57406616]
[96.22811890 211.58705139]
[95.60414124 196.60003662]
[94.98016357 181.61302185]
[94.35618591 166.62600708]
[93.73220825 151.63899231]
[90.28931427 145.04412842]
[93.25443268 136.33438110]
[92.94237518 121.33762360]
[81.64337158 111.47189331]
[66.74147034 113.18458557]
[51.83956528 114.89727783]
[36.93766403 116.60996246]
[22.03576088 118.32265472]
[13.38512802 127.94660950]
[0.89373302 129.03472900]
[-8.65775681 121.54631042]
[-23.59206390 122.94861603]
[-36.64494705 132.87606812]
[-51.66213989 126.28699493]
[-53.19524384 109.95967102]
[-39.66713333 100.69023895]
[-24.99436760 108.01431274]
[-10.06006050 106.61200714]
[3.64231896 95.69207764]
[20.32307053 103.42075348]
[35.22497177 101.70806122]
[50.12687683 99.99537659]
[65.02877808 98.28268433]
[79.93067932 96.56999207]
[66.03192139 90.92866516]
[51.04655838 90.26621246]
[38.68924332 81.76345825]
[32.71533203 68.00437927]
[34.94028091 53.17030716]
[44.68793488 41.76928711]
[58.99600220 37.26605225]
[73.51631165 41.02912521]
[83.83617401 51.91491699]
[86.81941223 66.61527252]
[94.55216217 79.46846008]
[93.92818451 64.48144531]
[93.30420685 49.49443054]
[92.68022919 34.50741577]
[77.80987549 32.19247055]
[63.67698669 27.02066040]
[50.82478333 19.19077492]
[39.74727249 9.00377464]
[30.87024498 -3.14878082]
[24.53490829 -16.79977798]
[20.98477745 -31.42451096]
[20.35630798 -46.46084213]
[22.67365837 -61.33081436]
[27.84775734 -75.46286774]
[35.67972183 -88.31380463]
[45.86851501 -99.38966370]
[58.02250671 -108.26472473]
[71.67453003 -114.59785461]
[86.29983521 -118.14562225]
[101.33627319 -118.77165222]
[116.20587158 -116.45189667]
[130.33708191 -111.27551270]
[143.18675232 -103.44146729]
[154.26097107 -93.25087738]
[163.13406372 -81.09545135]
[169.46498108 -67.44240570]
[173.01037598 -52.81652451]
[173.63397217 -37.77998734]
[171.31181335 -22.91076660]
[166.13313293 -8.78038788]
[158.29701233 4.06801176]
[148.10462952 15.14057446]
[135.94776917 24.01170158]
[122.29369354 30.34040833]
[107.66724396 33.88343811]
[108.29122162 48.87045288]
[108.91519928 63.85747147]
[109.53917694 78.84448242]
[112.89675140 82.51395416]
[115.17689514 86.59619141]
[116.36647797 90.81159973]
[116.51955414 94.89549255]
[131.45385742 93.49318695]
[146.38816833 92.09088135]
[161.32247925 90.68857574]
[176.18551636 88.66624451]
[190.95158386 86.02738190]
[205.71763611 83.38851929]
[220.48368835 80.74964905]
[226.31599426 66.46722412]
[238.95722961 57.62398148]
[254.37359619 57.04177094]
[267.64581299 64.90637207]
[274.53875732 78.70821381]
[272.85290527 94.04319000]
[263.12622070 106.01795959]
[248.46243286 110.81141663]
[233.54072571 106.89398956]
[223.12255859 95.51570892]
[208.35649109 98.15457153]
[193.59043884 100.79343414]
[178.82438660 103.43229675]
[177.10540771 105.72412109]
[174.34574890 107.44990540]
[170.76507568 108.19860840]
[166.73150635 107.64962006]
[162.72477722 105.62288666]
[147.79046631 107.02519226]
[132.85615540 108.42749786]
[117.92185211 109.82979584]
[107.93912506 121.02556610]
[108.25118256 136.02232361]
[108.71923065 151.01501465]
[109.34320068 166.00202942]
[109.96717834 180.98904419]
[110.59115601 195.97605896]
[111.21513367 210.96307373]
[111.83911133 225.95008850]
[112.46308899 240.93710327]
[113.08706665 255.92413330]
[113.71104431 270.91113281]
[114.33502197 285.89816284]
[114.95899963 300.88516235]
[129.71200562 304.01562500]
[143.22264099 310.71737671]
[154.64161682 320.56915283]
[163.25112915 332.95169067]
[168.50997925 347.08657837]
[170.08758545 362.08532715]
[167.88478088 377.00506592]
[162.04003906 390.90792847]
[152.92076111 402.91998291]
[141.10018921 412.28613281]
[127.32137299 418.41763306]
[112.45046997 420.92904663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[23 127]
[24 126]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[32 39]
[33 38]
[56 93]
[57 92]
[58 91]
[59 90]
[97 125]
[98 124]
[99 123]
[100 122]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
