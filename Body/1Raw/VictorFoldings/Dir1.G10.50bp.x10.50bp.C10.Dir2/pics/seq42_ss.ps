%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACCACUCGGGGGGGGGGACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGxxxxxxxxxxAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUCCCCCCCCCCUUAACCUCUC\
) } def
/len { sequence length } bind def

/coor [
[89.27946472 480.23937988]
[75.43352509 474.22335815]
[63.72486115 464.69393921]
[55.02233887 452.35827637]
[49.97173691 438.13174438]
[48.94784546 423.07006836]
[52.02664185 408.29089355]
[58.97966385 394.89099121]
[69.29094696 383.86465454]
[82.19532776 376.03012085]
[96.73521423 371.96881104]
[96.73521423 356.96881104]
[96.73521423 341.96881104]
[96.73521423 326.96881104]
[96.73521423 311.96881104]
[96.73521423 296.96881104]
[96.73521423 281.96881104]
[96.73521423 266.96881104]
[96.73521423 251.96882629]
[96.73521423 236.96882629]
[96.73521423 221.96882629]
[94.00484467 217.97875977]
[93.79634094 212.21788025]
[97.06025696 206.34809875]
[97.68423462 191.36106873]
[98.30821228 176.37405396]
[98.93218994 161.38703918]
[99.55616760 146.40002441]
[100.18014526 131.41300964]
[84.45484924 125.81459808]
[74.42012024 113.35012054]
[72.48709869 98.16089630]
[78.51579285 84.83976746]
[90.06253815 77.04378510]
[88.50495148 62.12487030]
[86.94737244 47.20595551]
[83.79884338 42.88087082]
[82.77262878 38.24414062]
[83.62339020 34.17254639]
[85.78795624 31.31210518]
[85.16397858 16.32508850]
[84.54000092 1.33807266]
[83.91602325 -13.64894390]
[83.29204559 -28.63595963]
[82.66807556 -43.62297440]
[67.44245148 -47.80080414]
[54.26363754 -56.45994186]
[44.40982437 -68.74623871]
[38.83230591 -83.45445251]
[38.06363297 -99.14647675]
[42.16679382 -114.29196167]
[50.73024750 -127.41754150]
[62.90914154 -137.25018311]
[77.50868225 -142.84060669]
[76.57305145 -157.81140137]
[75.63742828 -172.78219604]
[74.39054871 -187.73028564]
[72.83296967 -202.64920044]
[71.27539062 -217.56809998]
[69.71780396 -232.48701477]
[68.16022491 -247.40592957]
[53.24068832 -249.61006165]
[39.33833694 -255.45603943]
[27.32708549 -264.57638550]
[17.96197319 -276.39776611]
[11.83169842 -290.17712402]
[9.32161427 -305.04824829]
[10.58950901 -320.07632446]
[15.55567932 -334.31671143]
[23.90794754 -346.87417603]
[35.12128448 -356.95941162]
[48.49081039 -363.93841553]
[63.17610550 -367.37249756]
[78.25403595 -367.04580688]
[92.77680206 -362.97882080]
[105.83147430 -355.42724609]
[116.59743500 -344.86578369]
[124.39792633 -331.95828247]
[128.74259949 -317.51617432]
[129.35835266 -302.44726562]
[126.20646667 -287.69885254]
[119.48507690 -274.19796753]
[109.61669922 -262.79330444]
[97.22166443 -254.20181274]
[83.07913971 -248.96351624]
[84.63671875 -234.04460144]
[86.19429779 -219.12568665]
[87.75188446 -204.20677185]
[89.30946350 -189.28785706]
[92.43939972 -185.60289001]
[93.24497986 -179.89479065]
[90.60821533 -173.71781921]
[91.54384613 -158.74702454]
[92.47947693 -143.77624512]
[106.39822388 -140.55657959]
[118.85490417 -133.52914429]
[128.83085632 -123.25828552]
[135.50733948 -110.57398224]
[138.33279419 -96.50481415]
[137.06832886 -82.19454956]
[131.80792236 -68.80913544]
[122.97150421 -57.44173431]
[111.27143860 -49.02342606]
[97.65509033 -44.24695206]
[98.27906799 -29.25993729]
[98.90304565 -14.27292061]
[99.52702332 0.71409523]
[100.15100098 15.70111179]
[100.77497101 30.68812752]
[101.86628723 45.64837646]
[103.42386627 60.56728745]
[104.98144531 75.48619843]
[124.01991272 85.19853973]
[130.31036377 108.25175476]
[144.95387268 111.50257874]
[159.59736633 114.75340271]
[175.06785583 109.31320190]
[187.33659363 120.19484711]
[183.78254700 136.20423889]
[168.06181335 140.87229919]
[156.34654236 129.39691162]
[141.70304871 126.14608002]
[127.05953979 122.89525604]
[115.16716003 132.03698730]
[114.54318237 147.02400208]
[113.91920471 162.01101685]
[113.29522705 176.99803162]
[112.67124939 191.98504639]
[112.04727173 206.97207642]
[111.73521423 221.96882629]
[111.73521423 236.96882629]
[111.73521423 251.96882629]
[111.73521423 266.96881104]
[111.73521423 281.96881104]
[111.73521423 296.96881104]
[111.73521423 311.96881104]
[111.73521423 326.96881104]
[111.73521423 341.96881104]
[111.73521423 356.96881104]
[111.73521423 371.96881104]
[126.27510071 376.03012085]
[139.17948914 383.86465454]
[149.49076843 394.89099121]
[156.44378662 408.29089355]
[159.52258301 423.07006836]
[158.49870300 438.13174438]
[153.44808960 452.35827637]
[144.74557495 464.69393921]
[133.03691101 474.22335815]
[119.19097137 480.23937988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[29 124]
[34 112]
[35 111]
[36 110]
[40 109]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
[54 94]
[55 93]
[56 92]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
