%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUGAUCAUUGGGGGGGGGGCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGxxxxxxxxxxCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUCCCCCCCCCCUACGGAUCAUU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 464.64675903]
[71.01555634 459.09375000]
[58.81560135 450.22741699]
[49.20452881 438.60513306]
[42.78650284 424.95742798]
[39.96496582 410.14224243]
[40.91728210 395.09085083]
[45.58358765 380.74942017]
[53.67055511 368.01947021]
[64.66983032 357.70120239]
[77.88998413 350.44323730]
[92.50000000 346.70178223]
[92.50000000 331.70178223]
[92.50000000 316.70178223]
[92.50000000 301.70178223]
[92.50000000 286.70178223]
[92.50000000 271.70178223]
[92.50000000 256.70178223]
[92.50000000 241.70179749]
[92.50000000 226.70179749]
[92.50000000 211.70179749]
[84.76270294 198.97451782]
[92.50000000 185.17434692]
[92.50000000 170.17434692]
[92.50000000 155.17434692]
[80.24430084 152.05929565]
[69.00749969 146.25930786]
[59.36913300 138.07350159]
[51.82629395 127.92405701]
[46.76800919 116.33443451]
[44.45515060 103.90236664]
[45.00701141 91.26902771]
[48.39512634 79.08599854]
[54.44475174 67.98159790]
[62.84388351 58.52854538]
[54.43047333 46.11023331]
[46.01706314 33.69191742]
[37.60365295 21.27360344]
[29.19024086 8.85528851]
[20.77683067 -3.56302547]
[7.28686857 3.05264115]
[-6.99255705 7.72641134]
[-21.78349304 10.36730862]
[-36.79803085 10.92392731]
[-51.74390411 9.38543224]
[-66.33019257 5.78177166]
[-80.27296448 0.18309069]
[-93.30081940 -7.30163002]
[-105.16017151 -16.52669907]
[-115.62017822 -27.31254578]
[-124.47721863 -39.44922256]
[-131.55889893 -52.70048523]
[-136.72737122 -66.80838776]
[-139.88201904 -81.49832916]
[-140.96145630 -96.48435211]
[-139.94465637 -111.47476196]
[-136.85140991 -126.17774963]
[-131.74194336 -140.30712891]
[-124.71569061 -153.58787537]
[-115.90943909 -165.76145935]
[-105.49459839 -176.59091187]
[-93.67389679 -185.86546326]
[-80.67742920 -193.40455627]
[-66.75817108 -199.06144714]
[-52.18707275 -202.72602844]
[-37.24775696 -204.32696533]
[-22.23102570 -203.83308411]
[-7.42918301 -201.25401306]
[6.86964798 -196.63995361]
[20.38713646 -190.08071899]
[32.86016083 -181.70397949]
[44.04593277 -171.67279053]
[53.72671127 -160.18241882]
[61.71406555 -147.45652771]
[67.85250854 -133.74282837]
[72.02256775 -119.30825806]
[74.14305878 -104.43379211]
[74.17271423 -89.40897369]
[72.11095428 -74.52625275]
[67.99790192 -60.07533646]
[61.91363907 -46.33751297]
[53.97658157 -33.58019257]
[44.34123230 -22.05169678]
[33.19514465 -11.97643566]
[41.60855484 0.44187877]
[50.02196503 12.86019325]
[58.43537521 25.27850723]
[66.84878540 37.69682312]
[75.26219940 50.11513519]
[83.73693848 46.74616241]
[92.64794159 44.80574417]
[101.75616455 44.34593964]
[110.81728363 45.37907791]
[119.58822632 47.87745285]
[127.83370209 51.77403259]
[135.33251953 56.96429825]
[141.88352966 63.30901718]
[147.31100464 70.63799286]
[151.46932983 78.75460815]
[154.24696350 87.44114685]
[169.18298340 86.05712128]
[184.11900330 84.67309570]
[199.05500793 83.28907013]
[213.99102783 81.90504456]
[222.84992981 72.47512054]
[235.36026001 71.66091156]
[244.74479675 79.35457611]
[259.70608521 78.27750397]
[267.00286865 64.68484497]
[280.50115967 57.21490479]
[295.89367676 58.25130844]
[308.26870728 67.46334839]
[313.67745972 81.91149139]
[310.39401245 96.98538971]
[299.46609497 107.87502289]
[284.38076782 111.10553741]
[269.95169067 105.64609528]
[260.78314209 93.23878479]
[245.82186890 94.31585693]
[231.88331604 104.93475342]
[215.37504578 96.84105682]
[200.43904114 98.22508240]
[185.50302124 99.60910797]
[170.56700134 100.99313354]
[155.63099670 102.37715912]
[148.67636108 127.03830719]
[131.41424561 145.97393799]
[107.50000000 155.17434692]
[107.50000000 170.17434692]
[107.50000000 185.17434692]
[115.23729706 198.97451782]
[107.50000000 211.70179749]
[107.50000000 226.70179749]
[107.50000000 241.70179749]
[107.50000000 256.70178223]
[107.50000000 271.70178223]
[107.50000000 286.70178223]
[107.50000000 301.70178223]
[107.50000000 316.70178223]
[107.50000000 331.70178223]
[107.50000000 346.70178223]
[122.11001587 350.44323730]
[135.33016968 357.70120239]
[146.32945251 368.01947021]
[154.41641235 380.74942017]
[159.08271790 395.09085083]
[160.03503418 410.14224243]
[157.21350098 424.95742798]
[150.79547119 438.60513306]
[141.18440247 450.22741699]
[128.98443604 459.09375000]
[114.96250153 464.64675903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[25 128]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
