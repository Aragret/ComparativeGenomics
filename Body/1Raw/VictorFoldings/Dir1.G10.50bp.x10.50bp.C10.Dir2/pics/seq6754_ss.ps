%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACUAACAGGGGGGGGGGGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCxxxxxxxxxxUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCCCCCCCCCCCAUUACUAACA\
) } def
/len { sequence length } bind def

/coor [
[115.64489746 509.00607300]
[101.79895782 502.99002075]
[90.09030151 493.46060181]
[81.38777161 481.12493896]
[76.33717346 466.89843750]
[75.31327820 451.83673096]
[78.39208221 437.05758667]
[85.34510040 423.65765381]
[95.65638733 412.63131714]
[108.56076813 404.79681396]
[123.10065460 400.73550415]
[123.10065460 385.73550415]
[123.10065460 370.73550415]
[123.10065460 355.73550415]
[123.10065460 340.73550415]
[123.10065460 325.73550415]
[123.10065460 310.73550415]
[123.10065460 295.73550415]
[123.10065460 280.73550415]
[123.10065460 265.73550415]
[123.10065460 250.73550415]
[123.10065460 235.73550415]
[138.22642517 198.51045227]
[132.16342163 184.79040527]
[126.10040283 171.07035828]
[119.89499664 157.41410828]
[105.85160828 152.58515930]
[99.22110748 138.89242554]
[104.38137054 124.19515991]
[98.03424072 110.60420990]
[97.08852386 125.57437134]
[95.23321533 140.45918274]
[85.80345154 152.12451172]
[71.63812256 157.05842590]
[57.00177765 153.77554321]
[46.30075836 143.26420593]
[42.75666809 128.68890381]
[47.43647766 114.43760681]
[58.93300629 104.79998779]
[73.92601013 105.25792694]
[60.98795700 97.66802216]
[48.04990005 90.07810974]
[35.11184692 82.48820496]
[22.17378998 74.89829254]
[7.05847979 78.66195679]
[-5.95442772 70.78040314]
[-9.44935417 56.34707260]
[-22.38741112 48.75716400]
[-38.78098679 49.18457031]
[-47.11603165 35.06156921]
[-38.81816101 20.91669846]
[-22.42351723 21.30098343]
[-14.79750252 35.81910706]
[-1.85944617 43.40901566]
[12.44439316 39.41704941]
[25.67354202 46.92998886]
[29.76369858 61.96023941]
[42.70175552 69.55014801]
[55.63980865 77.14005280]
[68.57786560 84.72996521]
[81.51592255 92.31987000]
[95.23597717 86.25685883]
[98.33429718 71.58032990]
[101.43261719 56.90380859]
[96.71266174 41.80305862]
[106.91198730 30.94842720]
[93.14660645 24.84859467]
[80.95049286 16.01975632]
[70.85679626 4.84786797]
[63.30678558 -8.17868233]
[58.63050842 -22.49042892]
[57.03239059 -37.46172714]
[58.58229446 -52.43809128]
[63.21246719 -66.76481628]
[70.72049713 -79.81561279]
[80.77816010 -91.01994324]
[92.94578552 -99.88800812]
[106.69145966 -106.03212738]
[121.41426849 -109.18371582]
[136.47061157 -109.20499420]
[151.20227051 -106.09503174]
[164.96524048 -99.98978424]
[177.15788269 -91.15615082]
[187.24719238 -79.98029327]
[194.79206848 -66.95077515]
[199.46272278 -52.63718796]
[201.05494690 -37.66526413]
[199.49914551 -22.68951035]
[194.86334229 -8.36460400]
[187.35018921 4.68323421]
[177.28810120 15.88360786]
[165.11698914 24.74688339]
[151.36891174 30.88559914]
[136.64485168 34.03139496]
[121.58851624 34.04674911]
[126.53008270 48.09773254]
[116.10914612 60.00212860]
[113.01082611 74.67865753]
[109.91249847 89.35517883]
[111.62519073 104.25708008]
[117.97232056 117.84803772]
[132.55436707 123.32540894]
[138.79765320 137.19898987]
[133.48594666 151.06698608]
[139.99468994 157.56991577]
[139.82046509 165.00733948]
[145.88346863 178.72738647]
[151.94648743 192.44744873]
[163.74311829 201.71240234]
[178.50918579 204.35125732]
[193.45530701 199.16241455]
[204.62289429 209.01808167]
[219.38894653 211.65695190]
[234.15499878 214.29580688]
[246.97712708 205.05628967]
[262.56344604 207.67201233]
[271.66690063 220.59109497]
[268.88653564 236.14889526]
[255.87191772 245.11524963]
[240.34437561 242.17054749]
[231.51614380 229.06185913]
[216.75009155 226.42300415]
[201.98402405 223.78413391]
[188.09407043 229.16172791]
[175.87031555 219.11730957]
[161.10426331 216.47845459]
[155.35336304 221.29270935]
[143.85156250 230.92123413]
[138.10064697 235.73550415]
[138.10064697 250.73550415]
[138.10064697 265.73550415]
[138.10064697 280.73550415]
[138.10064697 295.73550415]
[138.10064697 310.73550415]
[138.10064697 325.73550415]
[138.10064697 340.73550415]
[138.10064697 355.73550415]
[138.10064697 370.73550415]
[138.10064697 385.73550415]
[138.10064697 400.73550415]
[152.64053345 404.79681396]
[165.54492188 412.63131714]
[175.85620117 423.65765381]
[182.80923462 437.05758667]
[185.88803101 451.83673096]
[184.86413574 466.89843750]
[179.81353760 481.12493896]
[171.11100769 493.46060181]
[159.40234375 502.99002075]
[145.55641174 509.00607300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 108]
[24 107]
[25 106]
[26 104]
[29 101]
[30 100]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[47 54]
[48 53]
[62 99]
[63 98]
[64 97]
[66 95]
[109 126]
[110 125]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
