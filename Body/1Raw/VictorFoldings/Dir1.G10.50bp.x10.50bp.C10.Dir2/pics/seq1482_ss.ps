%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUAAAACGGGGGGGGGGUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAxxxxxxxxxxUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUCCCCCCCCCCAGCUUAACAC\
) } def
/len { sequence length } bind def

/coor [
[73.85025024 428.44039917]
[60.00431061 422.42437744]
[48.29565048 412.89495850]
[39.59312439 400.55926514]
[34.54252243 386.33276367]
[33.51863098 371.27108765]
[36.59743118 356.49191284]
[43.55045319 343.09197998]
[53.86173630 332.06564331]
[66.76612091 324.23114014]
[81.30600739 320.16983032]
[81.30600739 305.16983032]
[81.30600739 290.16983032]
[81.30600739 275.16983032]
[81.30600739 260.16983032]
[81.30600739 245.16983032]
[81.30600739 230.16983032]
[81.30600739 215.16983032]
[81.30600739 200.16983032]
[81.30600739 185.16983032]
[73.56870270 172.44256592]
[81.30600739 158.64239502]
[81.30600739 143.64239502]
[69.60638428 134.25523376]
[54.96287918 137.50605774]
[40.31937790 140.75688171]
[28.52402878 151.30108643]
[14.42240047 146.50595093]
[-0.22110128 149.75677490]
[-14.86460304 153.00759888]
[-26.57987213 164.48298645]
[-42.30060196 159.81494141]
[-45.85465240 143.80554199]
[-33.58592224 132.92388916]
[-18.11542892 138.36410522]
[-3.47192693 135.11328125]
[11.17157459 131.86245728]
[21.91952133 121.55076599]
[37.06855392 126.11337280]
[51.71205521 122.86254883]
[66.35555267 119.61172485]
[67.75171661 112.24282074]
[53.01395798 109.45025635]
[55.80677032 94.71253967]
[70.54404449 97.50501251]
[71.94020081 90.13611603]
[59.50076294 81.75396729]
[47.06132126 73.37182617]
[32.08246613 77.86268616]
[17.74185944 71.62722015]
[10.81070137 57.60962296]
[14.56167126 42.42857361]
[27.22367668 33.25210190]
[42.81810379 34.41305542]
[53.98174667 45.36326981]
[55.44346619 60.93238831]
[67.88290405 69.31452942]
[80.32234955 77.69667053]
[86.90663910 74.10541534]
[87.27038574 59.10982895]
[100.07521820 66.92291260]
[106.65951538 63.33165359]
[106.34745789 48.33489990]
[106.03540039 33.33814621]
[105.72334290 18.34139442]
[91.18506622 14.20256424]
[78.51353455 5.96098232]
[68.83548737 -5.65051413]
[63.01149750 -19.59943962]
[61.55942535 -34.64546585]
[64.60839081 -49.45071030]
[71.88727570 -62.69869995]
[82.74885559 -73.21143341]
[96.22731781 -80.05412292]
[111.12416840 -82.61832428]
[126.11479950 -80.67602539]
[139.86624146 -74.39994049]
[151.15573120 -64.34813690]
[158.97941589 -51.41440582]
[162.64161682 -36.74880981]
[161.81669617 -21.65540314]
[156.57798767 -7.47628260]
[147.39134216 4.52775574]
[135.07362366 13.28931999]
[120.72010040 18.02933693]
[121.03215027 33.02609253]
[121.34420776 48.02284622]
[121.65626526 63.01959991]
[133.73625183 71.91194916]
[148.14846802 67.75405884]
[162.56068420 63.59617233]
[176.97290039 59.43828583]
[191.09770203 54.38953018]
[204.88008118 48.46956635]
[218.66247559 42.54960251]
[232.44485474 36.62964249]
[246.22723389 30.70967674]
[260.00961304 24.78971481]
[273.79199219 18.86975098]
[287.57437134 12.94978809]
[301.35675049 7.02982521]
[310.73104858 -6.42583179]
[327.04595947 -4.76587057]
[333.51812744 10.30208302]
[323.48950195 23.27741051]
[307.27673340 20.81220627]
[293.49432373 26.73217010]
[279.71194458 32.65213394]
[265.92956543 38.57209396]
[252.14718628 44.49205780]
[238.36480713 50.41202164]
[224.58242798 56.33198547]
[210.80004883 62.25194931]
[197.01766968 68.17191315]
[210.31861877 75.10622406]
[215.00375366 89.35576630]
[208.41308594 102.83029938]
[194.28848267 107.87960815]
[180.64924622 101.63691711]
[175.23910522 87.64655304]
[181.13078308 73.85050201]
[166.71856689 78.00839233]
[152.30635071 82.16627502]
[137.89413452 86.32416534]
[140.67694092 106.31624603]
[133.35588074 125.59201050]
[117.34259796 139.26063538]
[96.30600739 143.64239502]
[96.30600739 158.64239502]
[104.04330444 172.44256592]
[96.30600739 185.16983032]
[96.30600739 200.16983032]
[96.30600739 215.16983032]
[96.30600739 230.16983032]
[96.30600739 245.16983032]
[96.30600739 260.16983032]
[96.30600739 275.16983032]
[96.30600739 290.16983032]
[96.30600739 305.16983032]
[96.30600739 320.16983032]
[110.84589386 324.23114014]
[123.75027466 332.06564331]
[134.06155396 343.09197998]
[141.01457214 356.49191284]
[144.09338379 371.27108765]
[143.06948853 386.33276367]
[138.01889038 400.55926514]
[129.31636047 412.89495850]
[117.60769653 422.42437744]
[103.76175690 428.44039917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[46 58]
[47 57]
[48 56]
[62 88]
[63 87]
[64 86]
[65 85]
[89 124]
[90 123]
[91 122]
[92 121]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
