%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUGGGACUGGGGGGGGGGUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUxxxxxxxxxxCAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCCCCCCCCCCCACCAAUGGUACU\
) } def
/len { sequence length } bind def

/coor [
[81.60292816 400.75430298]
[68.39484406 393.51824951]
[57.05140305 383.61166382]
[48.10314941 371.49792480]
[41.96861267 357.74359131]
[38.93471146 342.99200439]
[39.14335632 327.93307495]
[42.58477783 313.27120972]
[49.09802246 299.69210815]
[58.37844849 287.83093262]
[69.99199677 278.24243164]
[83.39547729 271.37506104]
[97.96199036 267.55004883]
[97.35411072 252.56236267]
[96.74622345 237.57467651]
[96.13834381 222.58700562]
[95.53045654 207.59931946]
[94.92257690 192.61164856]
[94.31468964 177.62396240]
[93.70681000 162.63629150]
[93.09892273 147.64862061]
[92.49104309 132.66093445]
[91.88315582 117.67325592]
[85.79158783 109.49003601]
[85.28591156 100.55170441]
[89.23430634 93.92268372]
[80.17339325 81.96861267]
[71.11248016 70.01453400]
[74.50425720 84.62603760]
[69.09996796 98.61865997]
[56.76718140 107.15695190]
[41.76777267 107.29031372]
[29.28512383 98.97264862]
[23.63289452 85.07832336]
[26.76433754 70.40882874]
[37.59731293 60.03353882]
[52.38859177 57.53791428]
[37.86743546 53.77812576]
[23.34627914 50.01834106]
[8.82512188 46.25855255]
[-5.69603443 42.49876404]
[-20.21719170 38.73897552]
[-34.71643066 45.60567856]
[-49.06122208 38.42191315]
[-52.24747086 22.69844627]
[-41.83095551 10.49697781]
[-25.80233955 11.17743111]
[-16.45740318 24.21781921]
[-1.93624640 27.97760773]
[12.58491039 31.73739433]
[27.10606766 35.49718094]
[41.62722397 39.25696945]
[56.14838028 43.01675797]
[62.12541580 38.48630142]
[51.18444061 28.22496414]
[38.21149445 20.69484901]
[37.29239273 5.72303391]
[49.24686432 -3.33734918]
[63.41290665 1.59451616]
[67.15637207 16.11860847]
[74.07949066 29.42539024]
[80.05652618 24.89493370]
[80.36053467 9.89801502]
[69.69384766 -1.45362270]
[70.21578979 -16.65830040]
[81.10357666 -26.75739479]
[81.40758514 -41.75431442]
[81.71158600 -56.75123215]
[67.35552216 -61.48354340]
[55.03308868 -70.23849487]
[45.84000015 -82.23759460]
[40.59369278 -96.41390228]
[39.76066208 -111.50686646]
[43.41498947 -126.17442322]
[51.23172760 -139.11235046]
[62.51581955 -149.17022705]
[76.26388550 -155.45368958]
[91.25347137 -157.40402222]
[106.15170288 -154.84782410]
[119.63383484 -148.01237488]
[130.50105286 -137.50547791]
[137.78706360 -124.26139832]
[140.84396362 -109.45779419]
[139.39997864 -94.41098785]
[133.58346558 -80.45893860]
[123.91166687 -68.84224701]
[111.24456024 -60.59386444]
[96.70850372 -56.44722748]
[96.40450287 -41.45030975]
[96.10049438 -26.45339012]
[106.57006836 -15.92135906]
[106.47540283 -0.70801967]
[95.35745239 10.20201874]
[95.05344391 25.19893837]
[83.06655121 60.95362473]
[92.12746429 72.90769958]
[101.18837738 84.86177063]
[114.97274780 90.77710724]
[129.87963867 89.10842896]
[144.78652954 87.43975830]
[159.31602478 76.17147064]
[175.11557007 83.75185394]
[189.98558044 81.78140259]
[204.85560608 79.81095123]
[207.82746887 64.96350098]
[215.46142578 51.88674927]
[226.92939758 41.99916077]
[240.98741150 36.37327194]
[256.11059570 35.61933136]
[270.65844727 39.81912613]
[283.05297852 48.51708984]
[291.94967651 60.76973343]
[296.38354492 75.24798584]
[295.87356567 90.38134766]
[290.47512817 104.52826691]
[280.77374268 116.15419769]
[267.82180786 123.99803925]
[253.02421570 127.20895386]
[237.98609924 125.43863678]
[224.33869934 118.87913513]
[213.56237793 108.24195862]
[206.82604980 94.68096161]
[191.95603943 96.65141296]
[177.08602905 98.62186432]
[169.45257568 108.05313110]
[157.03811646 109.78688049]
[146.45521545 102.34664917]
[131.54830933 104.01532745]
[116.64141846 105.68400574]
[106.87083435 117.06537628]
[107.47871399 132.05305481]
[108.08660126 147.04072571]
[108.69448853 162.02841187]
[109.30236816 177.01608276]
[109.91025543 192.00376892]
[110.51813507 206.99143982]
[111.12602234 221.97911072]
[111.73390198 236.96679688]
[112.34178925 251.95446777]
[112.94966888 266.94213867]
[127.77810669 269.57495117]
[141.69371033 275.33428955]
[154.04563904 283.95077515]
[164.25614929 295.02142334]
[171.84770203 308.02844238]
[176.46520996 322.36346436]
[177.89270020 337.35601807]
[176.06341553 352.30484009]
[171.06292725 366.51080322]
[163.12509155 379.30941772]
[152.62118530 390.10211182]
[140.04249573 398.38406372]
[125.97735596 403.76791382]
[111.08361053 406.00186157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[26 97]
[27 96]
[28 95]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[62 94]
[63 93]
[66 90]
[67 89]
[68 88]
[98 129]
[99 128]
[100 127]
[102 124]
[103 123]
[104 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
