%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAAAUAGGGGGGGGGGGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCxxxxxxxxxxUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCCCAUAAAUAGG\
) } def
/len { sequence length } bind def

/coor [
[90.23951721 539.95849609]
[78.14949799 530.91778564]
[68.94786835 518.94982910]
[63.31745529 504.94265747]
[61.67607117 489.93569946]
[64.14551544 475.04260254]
[70.54254150 461.36853027]
[80.39244843 449.92816162]
[92.96430206 441.57046509]
[107.32518768 436.91564941]
[106.70936584 421.92828369]
[106.09353638 406.94091797]
[105.47771454 391.95358276]
[104.86189270 376.96621704]
[104.24606323 361.97888184]
[103.63024139 346.99151611]
[103.01441193 332.00415039]
[102.39859009 317.01681519]
[101.78276062 302.02944946]
[101.16693878 287.04211426]
[100.55110931 272.05474854]
[99.93528748 257.06738281]
[86.67800140 250.27696228]
[78.54552460 237.67858887]
[77.80607605 222.60147095]
[84.75826263 209.08984375]
[97.62402344 200.81825256]
[97.00820160 185.83090210]
[96.39237976 170.84355164]
[95.77655029 155.85620117]
[95.00688934 140.87596130]
[94.08347321 125.90440369]
[88.22379303 123.81941223]
[83.00930786 120.42938232]
[78.72572327 115.92006683]
[75.60771942 110.53850555]
[73.82614136 104.57955933]
[58.92169189 102.88916016]
[44.01724243 101.19876099]
[27.59762764 105.42162323]
[18.99439430 90.81269836]
[30.65078735 78.50152588]
[45.70764160 86.29431152]
[60.61208725 87.98471069]
[75.51653290 89.67510986]
[84.20565033 78.63222504]
[97.31166840 73.56486511]
[100.06790924 58.82027054]
[102.82415771 44.07567215]
[101.32096863 35.00174332]
[105.79132843 29.05799866]
[108.84972382 14.37310123]
[111.90811920 -0.31179652]
[114.66436005 -15.05639267]
[117.11728668 -29.85447121]
[119.57021332 -44.65254974]
[105.17665100 -48.94541168]
[91.43464661 -55.00845718]
[78.56092834 -62.74606705]
[66.75853729 -72.03620911]
[56.21360779 -82.73236084]
[47.09245300 -94.66583252]
[39.53892517 -107.64841461]
[33.67215347 -121.47535706]
[29.58466721 -135.92857361]
[27.34093094 -150.78013611]
[26.97633362 -165.79580688]
[28.49662209 -180.73876953]
[31.87782288 -195.37333679]
[37.06660461 -209.46871948]
[43.98114014 -222.80259705]
[52.51237106 -235.16470337]
[62.52574921 -246.36003113]
[73.86334991 -256.21203613]
[86.34635925 -264.56533813]
[99.77790833 -271.28817749]
[113.94615936 -276.27456665]
[128.62765503 -279.44583130]
[143.59085083 -280.75192261]
[158.59976196 -280.17230225]
[173.41766357 -277.71609497]
[187.81086731 -273.42202759]
[201.55235291 -267.35781860]
[214.42543030 -259.61914062]
[226.22703552 -250.32800293]
[236.77107239 -239.63095093]
[245.89122009 -227.69671631]
[253.44364929 -214.71350098]
[259.30926514 -200.88606262]
[263.39553833 -186.43249512]
[265.63803101 -171.58074951]
[266.00134277 -156.56504822]
[264.47979736 -141.62222290]
[261.09738159 -126.98793030]
[255.90739441 -112.89299011]
[248.99174500 -99.55968475]
[240.45947266 -87.19831085]
[230.44515991 -76.00382233]
[219.10671997 -66.15276337]
[206.62301636 -57.80051422]
[193.19090271 -51.07879257]
[179.02223206 -46.09361267]
[164.34045410 -42.92359543]
[149.37715149 -41.61874008]
[134.36830139 -42.19962311]
[131.91535950 -27.40154457]
[129.46243286 -12.60346508]
[131.50173950 -8.22276974]
[130.76698303 -2.50892401]
[126.59301758 2.74659896]
[123.53462219 17.43149567]
[120.47622681 32.11639404]
[117.56874847 46.83191681]
[114.81250763 61.57651138]
[112.05626678 76.32110596]
[125.17580414 91.50164032]
[123.94063568 111.52775574]
[109.05502319 124.98098755]
[109.97843933 139.95254517]
[113.64948273 148.38575745]
[110.76390076 155.24037170]
[111.37973022 170.22772217]
[111.99555206 185.21507263]
[112.61138153 200.20242310]
[126.11238098 207.39062500]
[134.14964294 220.28633118]
[134.64961243 235.37329102]
[127.57813263 248.59638977]
[114.92263794 256.45156860]
[115.53846741 271.43893433]
[116.15428925 286.42626953]
[116.77011871 301.41363525]
[117.38594055 316.40097046]
[118.00176239 331.38833618]
[118.61759186 346.37570190]
[119.23341370 361.36303711]
[119.84924316 376.35040283]
[120.46506500 391.33773804]
[121.08089447 406.32510376]
[121.69671631 421.31246948]
[122.31254578 436.29980469]
[137.00691223 439.76077271]
[150.22206116 447.05886841]
[160.97734070 457.65258789]
[168.47462463 470.75576782]
[172.15759277 485.39605713]
[171.75291443 500.48706055]
[167.29064941 514.90893555]
[159.10189819 527.59149170]
[147.79434204 537.59356689]
[134.20706177 544.17297363]
[119.34833527 546.84149170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[27 124]
[28 123]
[29 122]
[30 121]
[31 119]
[32 118]
[37 45]
[38 44]
[39 43]
[47 115]
[48 114]
[49 113]
[51 112]
[52 111]
[53 110]
[54 107]
[55 106]
[56 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
