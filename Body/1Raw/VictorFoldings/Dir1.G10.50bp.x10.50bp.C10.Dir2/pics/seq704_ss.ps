%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAGCACAGGGGGGGGGGCACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACAxxxxxxxxxxCAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCCCCCCCCCCCACCCACCACA\
) } def
/len { sequence length } bind def

/coor [
[73.60604095 372.78652954]
[61.04781723 364.43536377]
[50.96159744 353.22290039]
[43.98140335 339.85400391]
[40.54601669 325.16900635]
[40.87139511 310.09106445]
[44.93708038 295.56793213]
[52.48749924 282.51260376]
[63.04802704 271.74569702]
[75.95482635 263.94406128]
[90.39655304 259.59811401]
[89.77257538 244.61109924]
[89.14859772 229.62406921]
[88.52462006 214.63705444]
[87.90064240 199.65003967]
[87.27666473 184.66302490]
[86.65268707 169.67601013]
[86.02870941 154.68899536]
[85.40473175 139.70198059]
[72.46667480 132.11207581]
[59.08039093 138.88018799]
[45.69410706 145.64830017]
[43.35191727 160.98759460]
[32.41692734 171.99693298]
[17.09386253 174.44300842]
[3.27475429 167.38525391]
[-3.72666883 153.53752136]
[-1.21821618 138.22454834]
[9.83556080 127.33448029]
[25.18425941 125.05477142]
[38.92599106 132.26202393]
[52.31227875 125.49390411]
[65.69856262 118.72578430]
[62.31432343 99.68727875]
[68.43687439 82.08290100]
[81.86211395 70.18227386]
[98.71051788 66.51681519]
[101.50284576 51.77901077]
[104.29517365 37.04120636]
[107.08749390 22.30340004]
[109.87982178 7.56559324]
[112.67214203 -7.17221260]
[98.20276642 -11.15842819]
[84.10645294 -16.31077766]
[70.47700500 -22.59497070]
[57.40513992 -29.96918869]
[44.97784042 -38.38435364]
[33.27781296 -47.78446960]
[22.38291740 -58.10697174]
[12.36565971 -69.28316498]
[3.29270530 -81.23867798]
[-4.77556705 -93.89394379]
[-11.78546333 -107.16474915]
[-17.69033241 -120.96276855]
[-22.45088005 -135.19618225]
[-26.03542328 -149.77026367]
[-28.42010689 -164.58802795]
[-29.58905983 -179.55085754]
[-29.53450775 -194.55917358]
[-28.25680733 -209.51312256]
[-25.76446724 -224.31315613]
[-22.07406998 -238.86079407]
[-17.21017647 -253.05921936]
[-11.20515537 -266.81393433]
[-4.09896994 -280.03344727]
[4.06108904 -292.62969971]
[13.22071743 -304.51895142]
[23.31895638 -315.62203979]
[34.28860474 -325.86505127]
[46.05666351 -335.17987061]
[58.54480743 -343.50445557]
[71.66993713 -350.78344727]
[85.34470367 -356.96841431]
[99.47810364 -362.01815796]
[113.97607422 -365.89907837]
[128.74214172 -368.58535767]
[143.67803955 -370.05911255]
[158.68435669 -370.31054688]
[173.66122437 -369.33798218]
[188.50900269 -367.14788818]
[203.12886047 -363.75485229]
[217.42349243 -359.18142700]
[231.29779053 -353.45806885]
[244.65940857 -346.62289429]
[257.41943359 -338.72131348]
[269.49291992 -329.80599976]
[280.79959106 -319.93621826]
[291.26412964 -309.17767334]
[300.81689453 -297.60195923]
[309.39437866 -285.28613281]
[316.93945312 -272.31210327]
[323.40188599 -258.76629639]
[328.73870850 -244.73876953]
[332.91439819 -230.32293701]
[335.90118408 -215.61470032]
[337.67913818 -200.71195984]
[338.23645020 -185.71389771]
[337.56942749 -170.72029114]
[335.68249512 -155.83096313]
[332.58822632 -141.14497375]
[328.30718994 -126.76007080]
[322.86788940 -112.77197266]
[316.30651855 -99.27378082]
[308.66671753 -86.35532379]
[299.99938965 -74.10256195]
[290.36218262 -62.59705353]
[279.81921387 -51.91535187]
[268.44067383 -42.12854767]
[256.30224609 -33.30177689]
[243.48477173 -25.49377441]
[230.07351685 -18.75650406]
[216.15771484 -13.13480282]
[201.83000183 -8.66608238]
[187.18572998 -5.38008118]
[172.32232666 -3.29866743]
[157.33872986 -2.43569326]
[142.33465576 -2.79690123]
[127.40995026 -4.37988806]
[124.61762238 10.35791779]
[121.82530212 25.09572411]
[119.03297424 39.83353043]
[116.24065399 54.57133484]
[113.44832611 69.30914307]
[124.64055634 76.13355255]
[132.58215332 86.94575500]
[135.89503479 100.26192474]
[133.85716248 114.14191437]
[126.54412842 126.47182465]
[114.85180664 135.28578186]
[100.39174652 139.07800293]
[101.01572418 154.06501770]
[101.63970184 169.05203247]
[102.26367950 184.03904724]
[102.88765717 199.02606201]
[103.51163483 214.01307678]
[104.13561249 229.00010681]
[104.75959015 243.98712158]
[105.38356781 258.97412109]
[120.13657379 262.10458374]
[133.64720154 268.80633545]
[145.06619263 278.65811157]
[153.67570496 291.04064941]
[158.93455505 305.17553711]
[160.51216125 320.17428589]
[158.30935669 335.09402466]
[152.46459961 348.99688721]
[143.34532166 361.00894165]
[131.52474976 370.37509155]
[117.74594116 376.50659180]
[102.87503815 379.01800537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 33]
[21 32]
[22 31]
[37 123]
[38 122]
[39 121]
[40 120]
[41 119]
[42 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
