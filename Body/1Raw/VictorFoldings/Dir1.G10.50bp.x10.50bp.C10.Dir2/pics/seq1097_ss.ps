%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGCAGUGAUGGGGGGGGGGUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGxxxxxxxxxxGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUCCCCCCCCCCAACAGCAGUAAU\
) } def
/len { sequence length } bind def

/coor [
[70.63236237 378.73800659]
[56.93021393 372.47711182]
[44.96509552 363.32376099]
[35.33718491 351.73709106]
[28.52940559 338.29827881]
[24.88323784 323.68139648]
[24.58156967 308.61962891]
[27.63953400 293.86846924]
[33.90374374 280.16781616]
[43.05998993 268.20492554]
[54.64899826 258.57983398]
[68.08946228 251.77529907]
[82.70722961 248.13267517]
[82.40322876 233.13575745]
[82.09922028 218.13883972]
[81.79521942 203.14192200]
[81.49121094 188.14500427]
[81.18721008 173.14808655]
[80.88320160 158.15116882]
[80.57920074 143.15425110]
[80.27519226 128.15731812]
[70.16315460 117.07821655]
[55.25625992 115.40953827]
[40.34936523 113.74085999]
[47.22820663 127.07058716]
[41.28570557 140.84326172]
[26.86868095 144.98445129]
[14.52291012 136.46495056]
[13.27908421 121.51660156]
[24.04657555 111.07400513]
[9.38498020 107.90578461]
[-5.27661514 104.73756409]
[-19.93820953 101.56934357]
[-36.14238358 113.35472107]
[-55.51102448 109.57541656]
[-65.77593231 93.07694244]
[-80.60295868 90.80551910]
[-95.42997742 88.53410339]
[-110.25700378 86.26268768]
[-125.08403015 83.99127197]
[-140.15919495 90.44661713]
[-153.12332153 80.40354156]
[-150.64004517 64.19350433]
[-135.26393127 58.49200058]
[-122.81261444 69.16424561]
[-107.98558807 71.43566132]
[-93.15856171 73.70708466]
[-78.33153534 75.97850037]
[-63.50451279 78.24991608]
[-57.10462952 70.09563446]
[-47.81103516 65.32409668]
[-37.29288483 64.86841583]
[-27.47131348 68.87963867]
[-20.16857338 76.68669128]
[-16.76998901 86.90774536]
[-2.10839415 90.07596588]
[12.55320072 93.24419403]
[27.21479607 96.41241455]
[42.01803970 98.83396912]
[56.92493820 100.50264740]
[71.83183289 102.17132568]
[85.10192108 79.60066986]
[108.38710785 79.37080383]
[118.38636017 68.18978882]
[104.01393127 72.48319244]
[89.07646942 73.85149384]
[74.16320038 72.24073029]
[59.86241150 67.71443176]
[46.73820877 60.45115280]
[35.30829239 50.73739624]
[26.02353668 38.95634079]
[19.25018883 25.57270241]
[15.25543499 11.11441898]
[14.19685268 -3.84818125]
[16.11620140 -18.72487831]
[20.93776703 -32.92884064]
[28.47135544 -45.89976883]
[38.41979599 -57.12601089]
[50.39065933 -66.16473389]
[63.91173553 -72.65938568]
[78.44966888 -76.35377502]
[93.43098450 -77.10218048]
[108.26473236 -74.87507629]
[122.36576843 -69.76030731]
[135.17785645 -61.95964050]
[146.19560242 -51.78078461]
[154.98440552 -39.62525177]
[161.19757080 -25.97254181]
[164.59002686 -11.36120033]
[165.02793884 3.63240671]
[162.49401855 18.41683388]
[157.08825684 32.40888977]
[149.02384949 45.05664062]
[138.61700439 55.86282730]
[153.13815308 52.10303879]
[167.65931702 48.34325409]
[182.18046570 44.58346558]
[196.70162964 40.82367706]
[200.88383484 26.11122131]
[211.79663086 15.53730679]
[226.43957520 11.86977482]
[240.85575867 15.99645233]
[251.20108032 26.71278954]
[265.72222900 22.95300102]
[280.24340820 19.19321251]
[294.76455688 15.43342495]
[309.28570557 11.67363739]
[318.63064575 -1.36675060]
[334.65927124 -2.04720354]
[345.07577515 10.15426350]
[341.88952637 25.87772942]
[327.54473877 33.06149673]
[313.04550171 26.19479370]
[298.52435303 29.95458221]
[284.00317383 33.71437073]
[269.48202515 37.47415924]
[254.96087646 41.23394775]
[251.11613464 55.62434387]
[240.51406860 66.22869873]
[225.93121338 70.12825012]
[211.25810242 66.17898560]
[200.46141052 55.34483337]
[185.94026184 59.10462189]
[171.41909790 62.86441040]
[156.89794922 66.62419891]
[142.37678528 70.38398743]
[129.56736755 78.18903351]
[119.56812286 89.37004852]
[123.43582916 98.81980896]
[122.74401855 109.53560638]
[117.17652130 119.32965851]
[107.45535278 126.00769806]
[95.27211761 127.85331726]
[95.57611847 142.85023499]
[95.88011932 157.84715271]
[96.18412781 172.84407043]
[96.48812866 187.84100342]
[96.79213715 202.83792114]
[97.09613800 217.83483887]
[97.40014648 232.83175659]
[97.70414734 247.82867432]
[112.45752716 250.87591553]
[126.16271210 257.13015747]
[138.13226318 266.27770996]
[147.76579285 277.85971069]
[154.58007812 291.29522705]
[158.23332214 305.91033936]
[158.54229736 320.97195435]
[155.49147034 335.72460938]
[149.23390198 349.42828369]
[140.08346558 361.39559937]
[128.49911499 371.02633667]
[115.06195068 377.83737183]
[100.44595337 381.48706055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 61]
[23 60]
[24 59]
[30 58]
[31 57]
[32 56]
[33 55]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[63 128]
[64 127]
[94 126]
[95 125]
[96 124]
[97 123]
[98 122]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
