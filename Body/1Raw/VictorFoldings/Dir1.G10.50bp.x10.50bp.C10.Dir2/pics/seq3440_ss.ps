%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAAACUCGGGGGGGGGGUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUxxxxxxxxxxACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCCCCCCCCCCCUAAAACUC\
) } def
/len { sequence length } bind def

/coor [
[84.96763611 366.85992432]
[71.12169647 360.84390259]
[59.41303253 351.31448364]
[50.71050644 338.97882080]
[45.65990448 324.75228882]
[44.63601303 309.69061279]
[47.71481323 294.91143799]
[54.66783524 281.51150513]
[64.97911835 270.48519897]
[77.88349915 262.65066528]
[92.42338562 258.58935547]
[92.42338562 243.58935547]
[92.42338562 228.58935547]
[92.42338562 213.58935547]
[92.42338562 198.58935547]
[92.42338562 183.58935547]
[92.42338562 168.58935547]
[92.42338562 153.58935547]
[92.42338562 138.58935547]
[92.42338562 123.58936310]
[92.42338562 108.58936310]
[81.54052734 118.91231537]
[66.57997894 119.99949646]
[54.31901550 111.35839081]
[50.31196594 96.90351105]
[56.37407303 83.18305206]
[69.75914001 76.41252899]
[84.40359497 79.65904236]
[93.67349243 91.45227814]
[95.85032654 76.61106873]
[98.02716827 61.76986694]
[100.20400238 46.92866135]
[85.53367615 43.77473450]
[71.10387421 39.65812683]
[56.97768784 34.59684372]
[43.21689224 28.61301422]
[29.88165855 21.73280716]
[17.03030014 13.98630428]
[4.71901369 5.40738153]
[-6.99836779 -3.96644711]
[-18.07060623 -14.09419250]
[-28.44928551 -24.93156815]
[-38.08902359 -36.43118668]
[-46.94766235 -48.54275894]
[-54.98646927 -61.21332550]
[-62.17029572 -74.38748169]
[-68.46772003 -88.00762177]
[-73.85121155 -102.01417542]
[-78.29722595 -116.34591675]
[-81.78632355 -130.94015503]
[-84.30325317 -145.73309326]
[-85.83699036 -160.66001892]
[-86.38085175 -175.65568542]
[-85.93244171 -190.65451050]
[-84.49372864 -205.59089661]
[-82.07100677 -220.39955139]
[-78.67485809 -235.01570129]
[-74.32014465 -249.37544250]
[-69.02590942 -263.41598511]
[-62.81529236 -277.07592773]
[-55.71545792 -290.29553223]
[-47.75745392 -303.01699829]
[-38.97607422 -315.18472290]
[-29.40972137 -326.74545288]
[-19.10022545 -337.64865112]
[-8.09266853 -347.84664917]
[3.56481791 -357.29486084]
[15.82125664 -365.95196533]
[28.62305260 -373.78012085]
[41.91422653 -380.74505615]
[55.63666153 -386.81634521]
[69.73034668 -391.96743774]
[84.13365936 -396.17578125]
[98.78361511 -399.42300415]
[113.61615753 -401.69491577]
[128.56640625 -402.98156738]
[143.56901550 -403.27731323]
[158.55838013 -402.58087158]
[173.46893311 -400.89532471]
[188.23547363 -398.22799683]
[202.79345703 -394.59054565]
[217.07920837 -389.99893188]
[231.03025818 -384.47317505]
[244.58560181 -378.03747559]
[257.68597412 -370.71997070]
[270.27407837 -362.55264282]
[282.29489136 -353.57119751]
[293.69580078 -343.81494141]
[304.42700195 -333.32650757]
[314.44155884 -322.15179443]
[323.69564819 -310.33963013]
[332.14886475 -297.94165039]
[339.76416016 -285.01214600]
[346.50833130 -271.60757446]
[352.35180664 -257.78662109]
[357.26907349 -243.60964966]
[361.23861694 -229.13870239]
[364.24310303 -214.43704224]
[366.26934814 -199.56895447]
[367.30856323 -184.59945679]
[367.35610962 -169.59400940]
[366.41186523 -154.61822510]
[364.47988892 -139.73759460]
[361.56869507 -125.01718140]
[357.69097900 -110.52135468]
[352.86367798 -96.31350708]
[347.10794067 -82.45575714]
[340.44891357 -69.00871277]
[332.91571045 -56.03116989]
[324.54129028 -43.57987213]
[315.36227417 -31.70927429]
[305.41876221 -20.47127724]
[294.75427246 -9.91502666]
[283.41543579 -0.08668075]
[271.45181274 8.97078323]
[258.91574097 17.21775818]
[245.86204529 24.61818314]
[232.34776306 31.13969803]
[218.43203735 36.75378418]
[204.17567444 41.43589401]
[189.64105225 45.16555023]
[174.89170837 47.92644501]
[159.99214172 49.70651245]
[145.00750732 50.49795914]
[130.00332642 50.29732895]
[115.04521179 49.10549927]
[112.86837006 63.94670105]
[110.69153595 78.78791046]
[108.51469421 93.62911224]
[107.42338562 108.58936310]
[107.42338562 123.58936310]
[107.42338562 138.58935547]
[107.42338562 153.58935547]
[107.42338562 168.58935547]
[107.42338562 183.58935547]
[107.42338562 198.58935547]
[107.42338562 213.58935547]
[107.42338562 228.58935547]
[107.42338562 243.58935547]
[107.42338562 258.58935547]
[121.96327209 262.65066528]
[134.86766052 270.48519897]
[145.17893982 281.51150513]
[152.13195801 294.91143799]
[155.21075439 309.69061279]
[154.18687439 324.75228882]
[149.13626099 338.97882080]
[140.43374634 351.31448364]
[128.72508240 360.84390259]
[114.87914276 366.85992432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 129]
[30 128]
[31 127]
[32 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
