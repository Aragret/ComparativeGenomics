%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAAUCCCCGGGGGGGGGGUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAxxxxxxxxxxAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGCCCCCCCCCCAAUUAAUUCCC\
) } def
/len { sequence length } bind def

/coor [
[76.65395355 453.36535645]
[62.63201141 447.81234741]
[50.43205643 438.94601440]
[40.82098389 427.32369995]
[34.40295792 413.67599487]
[31.58142281 398.86080933]
[32.53373718 383.80944824]
[37.20004272 369.46801758]
[45.28701019 356.73806763]
[56.28628540 346.41979980]
[69.50644684 339.16180420]
[84.11645508 335.42037964]
[84.11645508 320.42037964]
[84.11645508 305.42037964]
[84.11645508 290.42037964]
[84.11645508 275.42037964]
[84.11645508 260.42037964]
[84.11645508 245.42037964]
[84.11645508 230.42037964]
[84.11645508 215.42037964]
[84.11645508 200.42037964]
[82.73242950 185.48435974]
[79.97618866 170.73976135]
[77.21994781 155.99516296]
[71.78767395 169.97695923]
[63.69988251 182.60975647]
[53.27545929 193.39546204]
[40.92543411 201.90879822]
[27.13675880 207.81408691]
[12.45311451 210.87849426]
[-2.54653406 210.98118591]
[-17.27075958 208.11811829]
[-31.13899803 202.40217590]
[-43.60443115 194.05874634]
[-54.17556000 183.41677856]
[-62.43556595 170.89590454]
[-68.05876923 156.98980713]
[-70.82344055 142.24679565]
[-70.62058258 127.24816132]
[-67.45818329 112.58531189]
[-61.46094513 98.83638000]
[-52.86532593 86.54347992]
[-42.01025009 76.19131470]
[-29.32372284 68.18806458]
[-15.30596733 62.84928894]
[-0.50969368 60.38549423]
[14.48169041 60.89382172]
[29.07708549 64.35423279]
[42.70100403 70.63028717]
[54.81626511 79.47451782]
[64.94516754 90.53820801]
[72.68834686 103.38512421]
[77.74048615 117.50872040]
[79.90210724 132.34617615]
[85.89040375 118.59335327]
[91.87870026 104.84052277]
[74.90470886 99.38640594]
[66.05648041 77.45018768]
[62.99808502 62.76529312]
[59.93968964 48.08039474]
[44.87465286 47.23951721]
[30.54088211 42.52725220]
[17.91567993 34.26488495]
[7.85985279 23.01576424]
[1.05902267 9.54687023]
[-2.02311778 -5.22346592]
[-1.17642307 -20.28817749]
[3.54137754 -34.62012482]
[11.80861664 -47.24213791]
[23.06162071 -57.29362106]
[36.53313828 -64.08924866]
[51.30466461 -67.16568756]
[66.36904907 -66.31317902]
[80.69917297 -61.58984375]
[93.31799316 -53.31772995]
[103.36512756 -42.06084442]
[110.15555573 -28.58670425]
[113.22628784 -13.81399155]
[112.36796570 1.25006092]
[107.63909912 15.57836246]
[99.36211395 28.19398689]
[88.10134888 38.23677826]
[74.62458801 45.02199936]
[77.68298340 59.70689774]
[80.74137878 74.39179230]
[87.58669281 77.45638275]
[101.27731323 83.58555603]
[108.12262726 86.65014648]
[121.11300659 79.15014648]
[134.10339355 71.65014648]
[147.09376526 64.15014648]
[160.08415222 56.65014267]
[165.99694824 49.60494995]
[173.41914368 49.13265228]
[186.56077576 41.90095139]
[199.70240784 34.66925049]
[212.84403992 27.43754578]
[225.98567200 20.20584297]
[239.12730408 12.97414112]
[243.28906250 -2.27234387]
[257.05401611 -10.03777027]
[272.25564575 -5.71504831]
[279.87509155 8.13122749]
[275.39190674 23.28630829]
[261.46585083 30.75895119]
[246.35900879 26.11577225]
[233.21737671 33.34747696]
[220.07574463 40.57917786]
[206.93411255 47.81087875]
[193.79248047 55.04258347]
[180.65084839 62.27428436]
[167.58415222 69.64052582]
[154.59376526 77.14052582]
[141.60339355 84.64052582]
[128.61300659 92.14052582]
[115.62262726 99.64052582]
[105.63153076 110.82881927]
[99.64323425 124.58164978]
[93.65493774 138.33447266]
[91.96453857 153.23892212]
[94.72078705 167.98352051]
[97.47702789 182.72811890]
[104.96535492 169.73100281]
[118.22395325 162.71604919]
[133.18200684 163.83708191]
[145.24690247 172.74989319]
[150.71434021 186.71797180]
[147.90562439 201.45265198]
[137.68313599 212.42993164]
[123.18549347 216.27941895]
[108.86396027 211.81919861]
[99.11645508 200.42037964]
[99.11645508 215.42037964]
[99.11645508 230.42037964]
[99.11645508 245.42037964]
[99.11645508 260.42037964]
[99.11645508 275.42037964]
[99.11645508 290.42037964]
[99.11645508 305.42037964]
[99.11645508 320.42037964]
[99.11645508 335.42037964]
[113.72647095 339.16180420]
[126.94662476 346.41979980]
[137.94590759 356.73806763]
[146.03286743 369.46801758]
[150.69917297 383.80944824]
[151.65148926 398.86080933]
[148.82995605 413.67599487]
[142.41192627 427.32369995]
[132.80085754 438.94601440]
[120.60089874 447.81234741]
[106.57895660 453.36535645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 122]
[23 121]
[24 120]
[54 119]
[55 118]
[56 117]
[58 85]
[59 84]
[60 83]
[88 116]
[89 115]
[90 114]
[91 113]
[92 112]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
