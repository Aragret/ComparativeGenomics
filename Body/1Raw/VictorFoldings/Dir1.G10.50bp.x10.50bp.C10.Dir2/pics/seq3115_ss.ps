%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGAUAUCGGGGGGGGGGAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAxxxxxxxxxxCAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACCCCCCCCCCCAAAUGAUAAC\
) } def
/len { sequence length } bind def

/coor [
[86.78872681 528.28527832]
[73.56853485 521.01281738]
[62.68172836 510.56579590]
[54.87059784 497.65655518]
[50.66771698 483.16522217]
[50.35964584 468.07989502]
[53.96738434 453.42907715]
[61.24495697 440.21166992]
[71.69616699 429.32891846]
[84.60842896 421.52276611]
[99.10136414 417.32546997]
[98.78930664 402.32873535]
[98.47724915 387.33197021]
[98.16519928 372.33520508]
[97.85314178 357.33847046]
[97.54108429 342.34170532]
[97.22902679 327.34494019]
[96.91696930 312.34820557]
[96.60491180 297.35144043]
[96.29286194 282.35470581]
[81.96414948 278.08279419]
[69.64070129 269.57971191]
[60.53652954 257.66775513]
[55.55324173 243.50592041]
[55.19073486 228.47691345]
[59.49708557 214.05227661]
[68.06262207 201.64823914]
[80.05885315 192.48674011]
[94.31858063 187.47499084]
[94.00652313 172.47824097]
[93.69446564 157.48149109]
[93.38240814 142.48472595]
[93.07035065 127.48797607]
[81.65559387 123.58209229]
[72.37146759 114.93302917]
[67.17405701 102.67630768]
[67.42733002 88.74051666]
[73.59049988 75.54559326]
[85.05545807 65.58283997]
[72.27809906 57.72541428]
[59.50074387 49.86798859]
[46.72338486 42.01056290]
[35.04679108 51.65089035]
[20.87178230 56.97515488]
[5.73595476 57.40582657]
[-8.71886635 52.89618683]
[-20.92473221 43.93540955]
[-29.55764198 31.49548912]
[-33.68115997 16.92581749]
[-32.84800339 1.80680418]
[-27.14853859 -12.22155380]
[-17.20100594 -23.63756561]
[-4.08443975 -31.20290756]
[10.77837467 -34.09694672]
[25.77523041 -32.00576401]
[39.27938080 -25.15618896]
[49.82599258 -14.29121494]
[56.27105331 -0.58939391]
[57.91545105 14.46300411]
[54.58081055 29.23320770]
[67.35816956 37.09063339]
[80.13552856 44.94805908]
[92.91287994 52.80548477]
[107.13966370 48.05167007]
[112.62669373 34.09127808]
[118.11372375 20.13088989]
[123.60075378 6.17049980]
[129.08778381 -7.78989029]
[116.33422852 -15.76869106]
[105.26407623 -25.95527458]
[96.25439453 -38.00268936]
[89.61203766 -51.50060654]
[85.56324005 -65.98928833]
[84.24591064 -80.97525787]
[85.70491028 -95.94809723]
[89.89055634 -110.39784241]
[96.66027069 -123.83232880]
[105.78349304 -135.79399109]
[116.94948578 -145.87542725]
[129.77793884 -153.73326111]
[143.83192444 -159.09983826]
[158.63275146 -161.79240417]
[173.67633057 -161.71923828]
[188.45028687 -158.88282776]
[202.45140076 -153.37979126]
[215.20280457 -145.39755249]
[226.27021790 -135.20799255]
[235.27664185 -123.15814209]
[241.91537476 -109.65843964]
[245.96025085 -95.16867065]
[247.27354431 -80.18234253]
[245.81051636 -65.20989990]
[241.62097168 -50.76128387]
[234.84762573 -37.32861710]
[225.72119141 -25.36940956]
[214.55247498 -15.29098988]
[201.72190857 -7.43662119]
[187.66647339 -2.07382250]
[172.86491394 0.61475182]
[157.82136536 0.53752965]
[143.04817200 -2.30285859]
[137.56114197 11.65753078]
[132.07411194 25.61792183]
[126.58708191 39.57831192]
[121.10005188 53.53870010]
[130.24179077 65.43108368]
[145.14369202 63.71839142]
[160.04559326 62.00570297]
[172.88911438 51.80884933]
[188.04014587 58.08408356]
[189.91258240 74.37598419]
[176.58024597 83.92483521]
[161.75828552 76.90760040]
[146.85638428 78.62029266]
[131.95448303 80.33298492]
[130.76219177 111.76403046]
[108.06710815 127.17592621]
[108.37916565 142.17268372]
[108.69122314 157.16943359]
[109.00327301 172.16618347]
[109.31533051 187.16293335]
[123.77119446 191.57716370]
[136.13813782 200.23170471]
[145.21224976 212.26869202]
[150.11492920 226.50170898]
[150.37791443 241.53279114]
[145.98805237 255.88967896]
[137.38728333 268.17001343]
[125.42821503 277.17840576]
[111.28961182 282.04263306]
[111.60166931 297.03939819]
[111.91372681 312.03613281]
[112.22578430 327.03289795]
[112.53783417 342.02966309]
[112.84989166 357.02639771]
[113.16194916 372.02316284]
[113.47400665 387.01992798]
[113.78606415 402.01666260]
[114.09812164 417.01342773]
[128.75311279 420.60418701]
[141.97891235 427.86645508]
[152.87379456 438.30505371]
[160.69488525 451.20825195]
[164.90895081 465.69631958]
[165.22868347 480.78140259]
[161.63224792 495.43502808]
[154.36488342 508.65802002]
[143.92208862 519.54888916]
[131.01585388 527.36499023]
[116.52616882 531.57342529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 121]
[30 120]
[31 119]
[32 118]
[33 117]
[39 63]
[40 62]
[41 61]
[42 60]
[64 105]
[65 104]
[66 103]
[67 102]
[68 101]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
