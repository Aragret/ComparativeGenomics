%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAUCACCUUGGGGGGGGGGUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUxxxxxxxxxxUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACCCCCCCCCCCUUAUCAUCUU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 392.38436890]
[71.01555634 386.83135986]
[58.81560135 377.96502686]
[49.20452881 366.34271240]
[42.78650284 352.69500732]
[39.96496582 337.87982178]
[40.91728210 322.82843018]
[45.58358765 308.48703003]
[53.67055511 295.75704956]
[64.66983032 285.43878174]
[77.88998413 278.18081665]
[92.50000000 274.43936157]
[92.50000000 259.43936157]
[92.50000000 244.43937683]
[92.50000000 229.43937683]
[92.50000000 214.43937683]
[92.50000000 199.43937683]
[92.50000000 184.43937683]
[92.50000000 169.43937683]
[92.50000000 154.43937683]
[92.50000000 139.43937683]
[92.50000000 124.43937683]
[71.31570435 107.16187286]
[76.22501373 76.30635071]
[61.40253448 78.60723114]
[46.58005142 80.90810394]
[31.75757027 83.20897675]
[16.93508720 85.50984955]
[12.54974461 100.12940979]
[2.24915934 111.39265442]
[-11.92147923 117.06326294]
[-27.14857864 116.01532745]
[-40.40879059 108.45691681]
[-49.06928635 95.88876343]
[-51.41052246 80.80627441]
[-46.96763992 66.20410156]
[-36.62277985 54.98150253]
[-22.42992210 49.36674500]
[-7.20706654 50.47463608]
[6.02327681 58.08520889]
[14.63421345 70.68737030]
[29.45669556 68.38649750]
[44.27917862 66.08562469]
[59.10165787 63.78474808]
[73.92414093 61.48387146]
[59.81309128 56.39680099]
[44.81320953 56.33780670]
[32.12429428 48.33834076]
[25.60330772 34.82994461]
[27.23238945 19.91867065]
[36.51635361 8.13699150]
[50.63322830 3.06610060]
[65.29199982 6.24735975]
[76.03694916 16.71378517]
[79.60211182 31.28129005]
[87.84922028 43.81066513]
[86.61860657 28.86123085]
[85.38799286 13.91179657]
[84.15737915 -1.03763771]
[82.92677307 -15.98707199]
[81.69615936 -30.93650627]
[80.46554565 -45.88594055]
[65.58036804 -48.27234650]
[51.69910431 -54.15231323]
[39.62879562 -63.18398285]
[30.07119179 -74.84226990]
[23.58195877 -88.44937134]
[20.53837395 -103.21419525]
[21.11738586 -118.27833557]
[25.28533173 -132.76597595]
[32.79989243 -145.83482361]
[43.22418213 -156.72506714]
[55.95214844 -164.80358887]
[70.24379730 -169.60067749]
[85.26823425 -170.83746338]
[100.15196228 -168.44204712]
[114.02966309 -162.55366516]
[126.09449005 -153.51467896]
[135.64501953 -141.85060120]
[142.12600708 -128.23956299]
[145.16064453 -113.47289276]
[144.57249451 -98.40911102]
[140.39576721 -83.92400360]
[132.87329102 -70.85971069]
[122.44239807 -59.97578049]
[109.70953369 -51.90498734]
[95.41497803 -47.11655426]
[96.64559174 -32.16711807]
[97.87620544 -17.21768379]
[99.10681915 -2.26825023]
[100.33743286 12.68118477]
[101.56803894 27.63061905]
[102.79865265 42.58005524]
[104.37116241 27.66270638]
[115.54080200 17.65075874]
[130.54066467 17.71340179]
[141.62629700 27.81829262]
[143.07415771 42.74825287]
[134.13670349 54.79491043]
[119.42635345 57.73820496]
[134.42556763 57.58420944]
[149.42477417 57.43021011]
[152.87384033 42.75481033]
[159.73536682 29.33159065]
[169.61042786 17.94095421]
[181.92491150 9.24513912]
[195.96284485 3.74971080]
[210.90809631 1.77416480]
[225.89176941 3.43335700]
[240.04273987 8.63082409]
[252.53826904 17.06439209]
[262.65188599 28.24374580]
[269.79562378 41.51892853]
[273.55413818 56.11814499]
[273.70892334 71.19261169]
[270.25094604 85.86591339]
[263.38128662 99.28497314]
[253.49931335 110.66962433]
[241.17958069 119.35797119]
[227.13830566 124.84488678]
[212.19184875 126.81137085]
[197.20918274 125.14309692]
[183.06138611 119.93704987]
[170.57096863 111.49590302]
[160.46411133 100.31042480]
[153.32843018 87.03091431]
[149.57876587 72.42942047]
[134.57955933 72.58341980]
[119.58035278 72.73741150]
[129.17517090 104.78444672]
[107.50000000 124.43937683]
[107.50000000 139.43937683]
[107.50000000 154.43937683]
[107.50000000 169.43937683]
[107.50000000 184.43937683]
[107.50000000 199.43937683]
[107.50000000 214.43937683]
[107.50000000 229.43937683]
[107.50000000 244.43937683]
[107.50000000 259.43936157]
[107.50000000 274.43936157]
[122.11001587 278.18081665]
[135.33016968 285.43878174]
[146.32945251 295.75704956]
[154.41641235 308.48703003]
[159.08271790 322.82843018]
[160.03503418 337.87982178]
[157.21350098 352.69500732]
[150.79547119 366.34271240]
[141.18440247 377.96502686]
[128.98443604 386.83135986]
[114.96250153 392.38436890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[100 129]
[101 128]
[102 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
