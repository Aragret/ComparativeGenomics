%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUAACAGCCGGGGGGGGGGAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUxxxxxxxxxxUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUACCCCCCCCCCUAGCAACAGCC\
) } def
/len { sequence length } bind def

/coor [
[-30.67393684 254.96321106]
[-41.12014771 245.51419067]
[-50.88493347 235.36251831]
[-59.92114258 224.55723572]
[-68.18514252 213.15049744]
[-75.63702393 201.19738770]
[-82.24081421 188.75563049]
[-87.96461487 175.88529968]
[-92.78079987 162.64854431]
[-107.20818329 166.75347900]
[-121.63556671 170.85842896]
[-136.06295776 174.96337891]
[-150.49034119 179.06831360]
[-150.80448914 194.13931274]
[-165.17898560 207.65202332]
[-178.60643005 214.33808899]
[-192.03387451 221.02416992]
[-205.46133423 227.71025085]
[-218.88877869 234.39631653]
[-232.10395813 241.49272156]
[-245.09434509 248.99272156]
[-258.08471680 256.49273682]
[-271.07510376 263.99273682]
[-278.80163574 278.45761108]
[-295.19854736 278.72817993]
[-303.39810181 264.52612305]
[-294.96533203 250.46125793]
[-278.57510376 251.00234985]
[-265.58471680 243.50234985]
[-252.59434509 236.00234985]
[-239.60395813 228.50234985]
[-238.34747314 225.14549255]
[-235.36773682 222.24880981]
[-230.90791321 220.63156128]
[-225.57485962 220.96887207]
[-212.14739990 214.28279114]
[-198.71995544 207.59672546]
[-185.29251099 200.91064453]
[-171.86505127 194.22456360]
[-173.40234375 179.30355835]
[-187.91098022 175.49569702]
[-202.41960144 171.68783569]
[-218.08662415 176.53306580]
[-229.93070984 165.19068909]
[-225.76766968 149.32873535]
[-209.88008118 145.26466370]
[-198.61174011 157.17921448]
[-184.10311890 160.98707581]
[-169.59449768 164.79492188]
[-154.59527588 164.64093018]
[-140.16789246 160.53598022]
[-125.74051666 156.43104553]
[-111.31312561 152.32609558]
[-96.88574219 148.22114563]
[-99.83794403 133.97164917]
[-101.76022339 119.54705048]
[-102.64268494 105.02171326]
[-102.48077393 90.47049713]
[-101.27532959 75.96839905]
[-99.03255463 61.59014893]
[-95.76402283 47.40985870]
[-91.48656464 33.50059891]
[-86.22223663 19.93406487]
[-79.99816132 6.78016949]
[-72.84642029 -5.89329386]
[-64.80387878 -18.02100945]
[-55.91196823 -29.54047203]
[-46.21652985 -40.39231491]
[-35.76752472 -50.52061081]
[-24.61881065 -59.87316132]
[-12.82783985 -68.40176392]
[-0.45538226 -76.06246948]
[12.43479729 -82.81578827]
[25.77626801 -88.62691498]
[39.50026703 -93.46591187]
[53.53606796 -97.30783081]
[67.81133270 -100.13287354]
[82.25249481 -101.92647552]
[96.78511810 -102.67940521]
[111.33430481 -102.38777161]
[125.82508850 -101.05307770]
[140.18276978 -98.68221283]
[154.33335876 -95.28738403]
[168.20393372 -90.88609314]
[181.72299194 -85.50102234]
[194.82087708 -79.15991974]
[207.43006897 -71.89547729]
[219.48559570 -63.74512863]
[230.92533875 -54.75087357]
[241.03076172 -65.83600616]
[251.13619995 -76.92114258]
[261.24163818 -88.00627136]
[264.21948242 -104.13278961]
[279.76278687 -109.36140442]
[291.88189697 -98.31336975]
[288.10974121 -82.35395813]
[272.32678223 -77.90084076]
[262.22134399 -66.81570435]
[252.11590576 -55.73057175]
[242.01046753 -44.64543915]
[255.21876526 -30.37028694]
[266.99822998 -14.89503860]
[277.24041748 1.63785243]
[285.85104370 19.07619667]
[292.75088501 37.25946808]
[297.87637329 56.02028656]
[301.18035889 75.18595123]
[302.63241577 94.58003235]
[317.63162231 94.73403168]
[332.63085938 94.88802338]
[341.01818848 81.93982697]
[355.08380127 75.60247040]
[370.33938599 77.89819336]
[381.91696167 88.09443665]
[386.12216187 102.93761444]
[381.61309814 117.69132996]
[369.82861328 127.64771271]
[354.52911377 129.62973022]
[340.59658813 123.00491333]
[332.47683716 109.88723755]
[317.47763062 109.73323822]
[302.47842407 109.57923889]
[301.32434082 123.61759949]
[299.19808960 137.54191589]
[296.10998535 151.28494263]
[292.07495117 164.78034973]
[287.11242676 177.96293640]
[281.24639893 190.76907349]
[274.50515747 203.13690186]
[266.92132568 215.00672913]
[258.53146362 226.32121277]
[249.37611389 237.02574158]
[239.49946594 247.06860352]
[228.94921875 256.40133667]
[217.77632141 264.97882080]
[206.03471375 272.75970459]
[193.78108215 279.70639038]
[181.07463074 285.78530884]
[167.97668457 290.96713257]
[154.55050659 295.22683716]
[140.86093140 298.54385376]
[126.97403717 300.90216064]
[112.95689392 302.29037476]
[98.87718964 302.70178223]
[84.80290222 302.13442993]
[70.80200195 300.59100342]
[56.94208908 298.07901001]
[43.29008865 294.61053467]
[29.91192245 290.20236206]
[16.87219048 284.87576294]
[4.23385620 278.65643311]
[-7.94205284 271.57443237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 31]
[21 30]
[22 29]
[23 28]
[40 49]
[41 48]
[42 47]
[89 100]
[90 99]
[91 98]
[92 97]
[108 122]
[109 121]
[110 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
