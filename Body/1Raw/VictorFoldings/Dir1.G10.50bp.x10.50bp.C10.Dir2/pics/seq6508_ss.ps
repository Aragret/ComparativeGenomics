%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGCUCGCGGGGGGGGGGAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCxxxxxxxxxxAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUACCCCCCCCCCUCCUGCCCGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 366.33093262]
[71.19830322 360.31491089]
[59.48964310 350.78549194]
[50.78712082 338.44979858]
[45.73651886 324.22329712]
[44.71262741 309.16162109]
[47.79142761 294.38244629]
[54.74444962 280.98251343]
[65.05573273 269.95617676]
[77.96011353 262.12167358]
[92.50000000 258.06036377]
[92.50000000 243.06036377]
[92.50000000 228.06036377]
[92.50000000 213.06036377]
[92.50000000 198.06036377]
[92.50000000 183.06036377]
[92.50000000 168.06036377]
[92.50000000 153.06036377]
[92.50000000 138.06036377]
[92.50000000 123.06036377]
[78.02909851 114.14149475]
[72.16943359 96.85404205]
[79.11369324 78.62249756]
[64.25064087 80.64483643]
[49.38759613 82.66716766]
[34.52454758 84.68950653]
[19.66150284 86.71183777]
[15.82474041 101.42060089]
[6.64724874 113.53844452]
[-6.47147131 121.21748352]
[-21.53091049 123.28672028]
[-36.23461151 119.43061066]
[-48.34037018 110.23718262]
[-56.00214386 97.10837555]
[-58.05157089 82.04622650]
[-54.17612457 67.34761047]
[-44.96678162 55.25395584]
[-31.82790565 47.60945892]
[-16.76307487 45.57984924]
[-2.06956840 49.47462845]
[10.01196098 58.69986725]
[17.63916779 71.84879303]
[32.50221634 69.82645416]
[47.36526108 67.80412292]
[62.22830963 65.78178406]
[77.09135437 63.75945282]
[85.98370361 51.67946625]
[83.49858856 36.88675690]
[77.29318237 23.23051643]
[64.51815796 21.16832161]
[56.84003448 11.25543213]
[57.96433640 -0.82940429]
[48.69938660 -12.62604427]
[39.43443680 -24.42268372]
[24.82563400 -30.49668312]
[23.04940987 -45.28499985]
[13.78446007 -57.08163834]
[-1.62926757 -62.68066025]
[-4.22040844 -78.87380981]
[8.67658043 -89.00296021]
[23.79438400 -82.64810944]
[25.58110046 -66.34658813]
[34.84605026 -54.54994583]
[48.79216003 -49.31972504]
[51.23107910 -33.68763351]
[60.49602509 -21.89099312]
[69.76097870 -10.09435368]
[86.36077881 -4.48663139]
[88.89452362 13.72215843]
[86.81652832 -1.13320971]
[88.15491486 -16.07338142]
[92.84020233 -30.32287598]
[100.62919617 -43.14206314]
[111.11760712 -53.86555481]
[123.76102448 -61.93673706]
[137.90318298 -66.93666840]
[152.81002808 -68.60582733]
[167.70779419 -66.85757446]
[181.82321167 -61.78265381]
[194.42361450 -53.64447784]
[204.85496521 -42.86547470]
[212.57582092 -30.00512695]
[217.18540955 -15.73096561]
[218.44447327 -0.78390121]
[216.28767395 14.06022835]
[210.82693481 28.03092766]
[202.34573364 40.40303802]
[191.28427124 50.53437042]
[178.21669006 57.89905930]
[163.82130432 62.11483002]
[148.84529114 62.96285629]
[134.06600952 60.39912796]
[120.25057220 54.55671310]
[108.11609650 45.73886490]
[98.29129028 34.40163803]
[100.77641296 49.19434738]
[112.57305145 58.45929718]
[127.53330231 57.36798477]
[142.49354553 56.27667618]
[157.45379639 55.18536377]
[172.41404724 54.09405518]
[187.37429810 53.00274277]
[202.33454895 51.91143417]
[206.44505310 37.32104111]
[215.30038452 25.01824570]
[227.83123779 16.48867035]
[242.52442932 12.76230240]
[257.60571289 14.28911877]
[271.25390625 20.88474846]
[281.82095337 31.75273895]
[288.03082275 45.58072662]
[289.13366699 60.69891357]
[284.99627686 75.28170776]
[276.11828613 87.56816101]
[263.57174683 96.07463074]
[248.87170410 99.77391052]
[233.79327393 98.21930695]
[220.15724182 91.59853363]
[209.61024475 80.71109009]
[203.42585754 66.87168121]
[188.46560669 67.96298981]
[173.50535583 69.05430603]
[158.54510498 70.14561462]
[143.58485413 71.23692322]
[128.62461853 72.32823181]
[113.66436005 73.41954803]
[123.31463623 83.16145325]
[127.30056763 95.73336029]
[125.19676208 108.22237396]
[117.93529510 117.95303345]
[107.50000000 123.06036377]
[107.50000000 138.06036377]
[107.50000000 153.06036377]
[107.50000000 168.06036377]
[107.50000000 183.06036377]
[107.50000000 198.06036377]
[107.50000000 213.06036377]
[107.50000000 228.06036377]
[107.50000000 243.06036377]
[107.50000000 258.06036377]
[122.03988647 262.12167358]
[134.94427490 269.95617676]
[145.25555420 280.98251343]
[152.20857239 294.38244629]
[155.28736877 309.16162109]
[154.26348877 324.22329712]
[149.21287537 338.44979858]
[140.51036072 350.78549194]
[128.80169678 360.31491089]
[114.95575714 366.33093262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[47 96]
[48 95]
[49 69]
[52 67]
[53 66]
[54 65]
[56 63]
[57 62]
[97 126]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
