%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCUAACAACCGGGGGGGGGGUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGxxxxxxxxxxAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACCCCCCCCCCCACCGCUAACAAUC\
) } def
/len { sequence length } bind def

/coor [
[94.09131622 678.40069580]
[80.21718597 672.55242920]
[67.86238098 663.94702148]
[57.56700897 652.96075439]
[49.78113174 640.07379150]
[44.84511566 625.84948730]
[42.97475052 610.90979004]
[44.25178909 595.90771484]
[48.62041092 581.49902344]
[55.88964081 568.31378174]
[65.74169159 556.92822266]
[77.74588013 547.84014893]
[91.37743378 541.44683838]
[106.04044342 538.02777100]
[105.74031067 523.03076172]
[105.44017792 508.03375244]
[105.14004517 493.03677368]
[104.83991241 478.03976440]
[104.53977966 463.04278564]
[104.23964691 448.04577637]
[103.93952179 433.04876709]
[103.63938904 418.05178833]
[103.33925629 403.05477905]
[103.03912354 388.05780029]
[88.02525330 383.68652344]
[75.07604980 374.88598633]
[65.46132660 362.50469971]
[60.12834930 347.74304199]
[59.60857391 332.03680420]
[63.96465302 316.91754150]
[72.78318787 303.86340332]
[85.21392822 294.15435791]
[100.05172729 288.74688721]
[99.45158386 273.75888062]
[98.85144043 258.77090454]
[98.25129700 243.78291321]
[84.21143341 238.70240784]
[73.15636444 228.60632324]
[66.79171753 215.01014709]
[66.11556244 199.97251892]
[71.26205444 185.78352356]
[81.47621155 174.61598206]
[95.22454071 168.19265747]
[94.62439728 153.20466614]
[94.02424622 138.21667480]
[93.42410278 123.22869110]
[78.56798553 111.11230469]
[77.22646332 91.98872375]
[90.24547577 77.91689301]
[88.74721527 62.99190521]
[87.24895477 48.06691742]
[84.50262451 44.54003525]
[83.18974304 40.70482254]
[83.22727203 37.06092834]
[84.37505341 34.02705765]
[86.27703094 31.89581299]
[85.97689819 16.89881516]
[85.67676544 1.90181816]
[75.78299713 -13.59791088]
[84.77815247 -28.63843536]
[84.17800903 -43.62642288]
[83.57786560 -58.61441422]
[82.97772217 -73.60240173]
[82.37757874 -88.59039307]
[81.77743530 -103.57838440]
[67.00592041 -106.58934784]
[53.38451767 -113.04850006]
[41.70514679 -122.58032990]
[32.64683533 -134.63066101]
[26.73621941 -148.49890137]
[24.31693649 -163.37876892]
[25.52964211 -178.40516663]
[30.30382729 -192.70449829]
[38.36193085 -205.44538879]
[49.23546219 -215.88711548]
[62.29225159 -223.42262268]
[76.77319336 -227.61378479]
[91.83638000 -228.21693420]
[106.60606384 -225.19702148]
[120.22354889 -218.72959900]
[131.89714050 -209.19068909]
[140.94813538 -197.13487244]
[146.85034180 -183.26306152]
[149.26060486 -168.38172913]
[148.03878784 -153.35606384]
[143.25593567 -139.05963135]
[135.19010925 -126.32362366]
[124.31025696 -115.88848877]
[111.24890137 -108.36090851]
[96.76541901 -104.17852783]
[97.36557007 -89.19053650]
[97.96571350 -74.20254517]
[98.56585693 -59.21455765]
[99.16600037 -44.22657013]
[99.76614380 -29.23857880]
[108.45765686 -20.77495384]
[109.04861450 -8.25574780]
[100.67375946 1.60168612]
[100.97389221 16.59868240]
[101.27402496 31.59568024]
[102.17394257 46.56866074]
[103.67220306 61.49364853]
[105.17045593 76.41863251]
[114.49745941 80.69616699]
[121.20537567 88.46109009]
[124.08236694 98.31061554]
[122.60868073 108.46533966]
[117.05055237 117.09073639]
[108.41209412 122.62854767]
[109.01223755 137.61653137]
[109.61238098 152.60452271]
[110.21252441 167.59251404]
[124.43041992 172.89602661]
[135.50477600 183.21115112]
[141.76927185 196.94322205]
[142.29762268 211.98677063]
[137.04043579 226.04830933]
[126.82799530 236.99597168]
[113.23928833 243.18276978]
[113.83943176 258.17074585]
[114.43957520 273.15875244]
[115.03971863 288.14672852]
[128.99613953 291.79544067]
[141.34085083 299.22802734]
[151.07389832 309.83197021]
[157.40989685 322.73825073]
[159.84133911 336.89263916]
[158.17921448 351.14178467]
[152.56771851 364.32720947]
[143.47181702 375.37942505]
[131.63861084 383.40478516]
[118.03611755 387.75765991]
[118.33625031 402.75466919]
[118.63638306 417.75164795]
[118.93651581 432.74865723]
[119.23664856 447.74563599]
[119.53678131 462.74264526]
[119.83691406 477.73965454]
[120.13704681 492.73663330]
[120.43717957 507.73364258]
[120.73730469 522.73065186]
[121.03743744 537.72760010]
[135.82550049 540.55731201]
[149.70193481 546.40008545]
[162.06011963 555.00061035]
[172.35981750 565.98284912]
[180.15075684 578.86676025]
[185.09237671 593.08905029]
[186.96861267 608.02807617]
[185.69747925 623.03063965]
[181.33451843 637.44097900]
[174.07048035 650.62915039]
[164.22291565 662.01861572]
[152.22230530 671.11138916]
[138.59326172 677.51007080]
[123.93160248 680.93487549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[33 122]
[34 121]
[35 120]
[36 119]
[43 112]
[44 111]
[45 110]
[46 109]
[49 103]
[50 102]
[51 101]
[56 100]
[57 99]
[58 98]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
