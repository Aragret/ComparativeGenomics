%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCUUUCAGGGGGGGGGGUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGxxxxxxxxxxAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUCCCCCCCCCCUUACCUUUCA\
) } def
/len { sequence length } bind def

/coor [
[83.81272125 463.78945923]
[69.96678162 457.77343750]
[58.25812149 448.24401855]
[49.55559540 435.90835571]
[44.50499344 421.68182373]
[43.48110199 406.62014771]
[46.55990219 391.84100342]
[53.51292419 378.44107056]
[63.82420731 367.41473389]
[76.72859192 359.58023071]
[91.26847839 355.51892090]
[91.26847839 340.51892090]
[91.26847839 325.51892090]
[91.26847839 310.51892090]
[91.26847839 295.51892090]
[91.26847839 280.51892090]
[91.26847839 265.51892090]
[91.26847839 250.51892090]
[91.26847839 235.51892090]
[91.26847839 220.51892090]
[83.53117371 207.79164124]
[91.26847839 193.99147034]
[91.26847839 178.99147034]
[80.94749451 171.21495056]
[76.94952393 158.72132874]
[80.95564270 146.02571106]
[91.71071625 137.85342407]
[92.02276611 122.85667419]
[76.81094360 106.95207977]
[80.76383972 85.30191040]
[72.25275421 72.95033264]
[63.74166107 60.59876251]
[55.23057175 48.24718857]
[46.71948242 35.89561844]
[32.51799393 28.92222023]
[31.66765022 14.05190754]
[17.46616173 7.07850981]
[16.61581993 -7.79180241]
[8.10472965 -20.14337540]
[-0.40636075 -32.49494934]
[-8.91745090 -44.84651947]
[-22.44952583 -38.30561829]
[-36.82150650 -33.90714264]
[-51.69649506 -31.75419807]
[-66.72579956 -31.89725304]
[-81.55710602 -34.33295441]
[-95.84275818 -39.00420761]
[-109.24787903 -45.80150986]
[-121.45822144 -54.56552505]
[-132.18756104 -65.09080505]
[-141.18440247 -77.13063049]
[-148.23782349 -90.40277100]
[-153.18249512 -104.59609985]
[-155.90251160 -119.37791443]
[-156.33410645 -134.40170288]
[-154.46714783 -149.31527710]
[-150.34542847 -163.76905823]
[-144.06555176 -177.42422485]
[-135.77471924 -189.96067810]
[-125.66728973 -201.08454895]
[-113.98019409 -210.53506470]
[-100.98739624 -218.09069824]
[-86.99346924 -223.57434082]
[-72.32643890 -226.85745239]
[-57.33013535 -227.86305237]
[-42.35608292 -226.56758118]
[-27.75530243 -223.00140381]
[-13.87005138 -217.24812317]
[-1.02582252 -209.44261169]
[10.47629738 -199.76780701]
[20.36668205 -188.45053101]
[28.41348648 -175.75607300]
[34.42808533 -161.98199463]
[38.26948166 -147.45120239]
[39.84762955 -132.50430298]
[39.12553787 -117.49166870]
[36.12013245 -102.76523590]
[30.90186310 -88.67019653]
[23.59305382 -75.53696442]
[14.36503410 -63.67340469]
[3.43412161 -53.35760880]
[11.94521141 -41.00603867]
[20.45630264 -28.65446472]
[28.96739197 -16.30289268]
[42.56011200 -10.21296215]
[44.01922226 5.54081726]
[57.61194229 11.63074780]
[59.07105637 27.38452721]
[67.58214569 39.73609924]
[76.09323883 52.08767319]
[84.60432434 64.43924713]
[93.11541748 76.79081726]
[103.18099213 69.06455231]
[117.98873901 66.54074860]
[126.25924683 53.05337524]
[141.14393616 53.59693527]
[154.23709106 46.27782822]
[167.33024597 38.95872498]
[180.42340088 31.63961792]
[191.29875183 18.63335609]
[206.80732727 25.48321152]
[204.51837158 42.28193283]
[187.74249268 44.73277283]
[174.64933777 52.05187988]
[161.55618286 59.37098312]
[148.46304321 66.69008636]
[141.12902832 79.65395355]
[125.30783844 79.63390350]
[128.25346375 94.34251404]
[131.19880676 109.04982758]
[146.10070801 110.76251221]
[155.78887939 98.75655365]
[170.43716431 93.91600800]
[185.37138367 97.78547668]
[195.82606506 109.13021851]
[198.46514893 124.33017731]
[192.44653320 138.53509521]
[179.69071960 147.21224976]
[164.26805115 147.59275818]
[151.09983826 139.55523682]
[144.38801575 125.66441345]
[129.48611450 123.95172882]
[117.33792877 125.81698608]
[107.01952362 123.16873169]
[106.70746613 138.16548157]
[119.03731537 150.53125000]
[118.64923859 167.65238953]
[106.26847839 178.99147034]
[106.26847839 193.99147034]
[114.00577545 207.79164124]
[106.26847839 220.51892090]
[106.26847839 235.51892090]
[106.26847839 250.51892090]
[106.26847839 265.51892090]
[106.26847839 280.51892090]
[106.26847839 295.51892090]
[106.26847839 310.51892090]
[106.26847839 325.51892090]
[106.26847839 340.51892090]
[106.26847839 355.51892090]
[120.80836487 359.58023071]
[133.71273804 367.41473389]
[144.02403259 378.44107056]
[150.97705078 391.84100342]
[154.05584717 406.62014771]
[153.03195190 421.68182373]
[147.98135376 435.90835571]
[139.27883911 448.24401855]
[127.57016754 457.77343750]
[113.72422791 463.78945923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[27 125]
[28 124]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[36 86]
[38 84]
[39 83]
[40 82]
[41 81]
[94 108]
[96 106]
[97 105]
[98 104]
[99 103]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
