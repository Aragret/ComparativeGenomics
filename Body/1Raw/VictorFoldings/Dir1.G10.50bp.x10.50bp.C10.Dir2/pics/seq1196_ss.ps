%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGUCAAUAGGGGGGGGGGGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAxxxxxxxxxxAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACCCCCCCCCCCAAGUCAUUA\
) } def
/len { sequence length } bind def

/coor [
[80.79569244 517.30871582]
[66.94975281 511.29269409]
[55.24108887 501.76327515]
[46.53856659 489.42761230]
[41.48796463 475.20108032]
[40.46407318 460.13940430]
[43.54286957 445.36022949]
[50.49589157 431.96029663]
[60.80717850 420.93399048]
[73.71155548 413.09945679]
[88.25144196 409.03814697]
[88.25144196 394.03814697]
[88.25144196 379.03814697]
[88.25144196 364.03814697]
[88.25144196 349.03814697]
[88.25144196 334.03814697]
[88.25144196 319.03814697]
[88.25144196 304.03814697]
[88.25144196 289.03814697]
[88.25144196 274.03814697]
[74.04516602 270.98254395]
[60.78485870 265.02468872]
[49.05648422 256.42501831]
[39.37889099 245.56088257]
[32.18084717 232.90975952]
[27.78207397 219.02845764]
[26.37902260 204.52850342]
[28.03611374 190.04927063]
[32.68276978 176.22972107]
[40.11644363 163.68023682]
[50.01140976 152.95568848]
[61.93307114 144.53086853]
[75.35702515 138.77944946]
[89.69213867 135.95745850]
[90.00419617 120.96070862]
[90.31625366 105.96395874]
[86.76148987 91.39125061]
[79.57897949 78.22267151]
[72.39647675 65.05409241]
[65.21396637 51.88550568]
[58.03145599 38.71692276]
[50.84894562 25.54834175]
[43.66643906 12.37975883]
[36.48392868 -0.78882396]
[22.32498360 4.25803280]
[7.55083370 7.02768612]
[-7.47469473 7.45192957]
[-22.38158417 5.52031660]
[-36.80273819 1.28041446]
[-50.38302612 -5.16336489]
[-62.78801727 -13.65233803]
[-73.71223450 -23.97745705]
[-82.88665009 -35.88445282]
[-90.08533478 -49.08011246]
[-95.13102722 -63.23947144]
[-97.89945984 -78.01385498]
[-98.32246399 -93.03941345]
[-96.38961792 -107.94614410]
[-92.14852905 -122.36695099]
[-85.70362854 -135.94670105]
[-77.21363068 -148.35099792]
[-66.88761139 -159.27435303]
[-54.97985458 -168.44778442]
[-41.78360367 -175.64538574]
[-27.62382698 -180.68991089]
[-12.84921932 -183.45712280]
[2.17637873 -183.87889099]
[17.08294868 -181.94482422]
[31.50340462 -177.70252991]
[45.08263016 -171.25651550]
[57.48621750 -162.76548767]
[68.40872955 -152.43856812]
[77.58117676 -140.53005981]
[84.77768707 -127.33321381]
[89.82104492 -113.17302704]
[92.58703613 -98.39818573]
[93.00756073 -83.37255859]
[91.07225800 -68.46614075]
[86.82878876 -54.04603958]
[80.38164520 -40.46734619]
[71.88960266 -28.06445694]
[61.56177902 -17.14279938]
[49.65251160 -7.97133303]
[56.83502197 5.19724989]
[64.01753235 18.36583138]
[71.20003510 31.53441429]
[78.38254547 44.70299911]
[85.56505585 57.87157822]
[92.74756622 71.04016113]
[99.93007660 84.20874786]
[114.29825592 88.51632690]
[127.54084015 81.47119141]
[132.25270081 66.62409973]
[145.78291321 59.66797638]
[159.90832520 64.25150299]
[173.15090942 57.20637131]
[186.39349365 50.16123581]
[188.41606140 34.77653885]
[199.11964417 23.54209137]
[214.38850403 20.77776527]
[228.35145569 27.54649925]
[235.63945007 41.24557877]
[233.45010376 56.60742950]
[222.62527466 67.72510529]
[207.32731628 70.32363129]
[193.43862915 63.40382004]
[180.19604492 70.44895172]
[166.95344543 77.49408722]
[162.86114502 91.76954651]
[149.53164673 99.10295868]
[134.58598328 94.71378326]
[121.34339142 101.75891876]
[117.41823578 104.98501587]
[113.17693329 106.78092957]
[109.01773071 107.17055511]
[105.31300354 106.27601624]
[105.00095367 121.27276611]
[104.68889618 136.26951599]
[119.74309540 139.99348450]
[133.59196472 146.95695496]
[145.54862976 156.81109619]
[155.02081299 169.06378174]
[161.54017639 183.10418701]
[164.78550720 198.23321533]
[164.59854126 213.69833374]
[160.99165344 228.73097229]
[154.14709473 242.58473206]
[144.40777588 254.57247925]
[132.26014709 264.10037231]
[118.30982971 270.69726562]
[103.25144196 274.03814697]
[103.25144196 289.03814697]
[103.25144196 304.03814697]
[103.25144196 319.03814697]
[103.25144196 334.03814697]
[103.25144196 349.03814697]
[103.25144196 364.03814697]
[103.25144196 379.03814697]
[103.25144196 394.03814697]
[103.25144196 409.03814697]
[117.79132843 413.09945679]
[130.69570923 420.93399048]
[141.00700378 431.96029663]
[147.96002197 445.36022949]
[151.03881836 460.13940430]
[150.01492310 475.20108032]
[144.96432495 489.42761230]
[136.26179504 501.76327515]
[124.55313873 511.29269409]
[110.70719910 517.30871582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 118]
[35 117]
[36 116]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[91 112]
[92 111]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
