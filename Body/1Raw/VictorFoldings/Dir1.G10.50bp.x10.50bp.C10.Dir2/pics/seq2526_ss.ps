%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUCCUCGGGGGGGGGGCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAxxxxxxxxxxAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCCCCCCCCCCCAUACUCCUC\
) } def
/len { sequence length } bind def

/coor [
[108.66885376 413.41772461]
[94.82291412 407.40170288]
[83.11425781 397.87228394]
[74.41172791 385.53662109]
[69.36112976 371.31008911]
[68.33723450 356.24841309]
[71.41603851 341.46926880]
[78.36905670 328.06933594]
[88.68034363 317.04299927]
[101.58472443 309.20849609]
[116.12461090 305.14718628]
[116.12461090 290.14718628]
[116.12461090 275.14718628]
[116.12461090 260.14718628]
[116.12461090 245.14718628]
[116.12461090 230.14718628]
[116.12461090 215.14718628]
[116.12461090 200.14718628]
[116.12461090 185.14718628]
[116.12461090 170.14718628]
[116.12461090 155.14718628]
[114.72230530 140.21287537]
[111.92998505 125.47506714]
[98.37615967 126.95468140]
[86.29160309 121.94761658]
[78.45196533 112.17641449]
[76.37926483 100.38294220]
[80.06509399 89.57278442]
[69.85161591 78.58712006]
[59.63813400 67.60145569]
[49.42465591 56.61578751]
[39.21117783 45.63012314]
[28.99769592 34.64445877]
[16.38656807 26.52291679]
[2.15978885 21.76910210]
[-12.06698990 17.01528740]
[-26.29376984 12.26147175]
[-40.52054977 7.50765705]
[-50.46217346 19.00689888]
[-64.04984283 25.82184982]
[-79.21154785 26.91328049]
[-93.63523102 22.11475563]
[-105.12138367 12.15801334]
[-111.91845703 -1.43861377]
[-112.98993683 -16.60173798]
[-108.17244720 -31.01909637]
[-98.20059967 -42.49214172]
[-84.59504700 -49.27132034]
[-69.43052673 -50.32286072]
[-55.01951599 -45.48640060]
[-43.55959702 -35.49947739]
[-36.79832077 -21.88501358]
[-35.76673508 -6.71912193]
[-21.53995514 -1.96530712]
[-7.31317568 2.78850770]
[6.91360378 7.54232264]
[21.14038277 12.29613781]
[11.44923496 0.84704763]
[4.71863174 -12.55813694]
[1.32522035 -27.16925430]
[1.45889890 -42.16865921]
[5.11218643 -56.71697617]
[12.08064270 -70.00006866]
[21.97430992 -81.27461243]
[34.23953247 -89.90968323]
[48.18993759 -95.42204285]
[63.04486084 -97.50322723]
[77.97300720 -96.03676605]
[92.13898468 -91.10472870]
[104.75006104 -82.98310852]
[115.10052490 -72.12640381]
[122.61113739 -59.14216232]
[126.86161804 -44.75698090]
[127.61408997 -29.77586555]
[124.82646179 -15.03717041]
[118.65472412 -1.36568058]
[109.44425201 10.47354031]
[97.71046448 19.81796074]
[84.10999298 26.14466476]
[69.40392303 29.09960556]
[54.41522598 28.51742172]
[39.98336029 24.43097878]
[50.19684219 35.41664505]
[60.41032028 46.40230942]
[70.62380219 57.38797379]
[80.83728027 68.37363434]
[91.05075836 79.35929871]
[112.21044159 77.82595825]
[127.79296112 95.65777588]
[141.57534790 89.73781586]
[145.89805603 84.59761810]
[151.35556030 82.74099731]
[156.05635071 83.87152100]
[170.07305908 78.53001404]
[180.21333313 66.38565826]
[194.86157227 69.08356476]
[208.87828064 63.74205399]
[222.89498901 58.40054321]
[234.14331055 43.85904694]
[251.33486938 47.24292755]
[265.23742676 41.61096954]
[272.79119873 27.45752335]
[288.59207153 24.68057442]
[300.51901245 35.41036224]
[299.42263794 51.41590881]
[286.14401245 60.41912842]
[270.86938477 55.51352692]
[256.96682739 61.14548111]
[251.93635559 72.19091797]
[240.34698486 76.97689056]
[228.23651123 72.41725159]
[214.21978760 77.75876617]
[200.20307922 83.10028076]
[191.06536865 94.86257172]
[175.41456604 92.54672241]
[161.39785767 97.88823700]
[147.49530029 103.52019501]
[133.71292114 109.44015503]
[126.66778564 122.68273926]
[129.46011353 137.42054749]
[136.93986511 124.41850281]
[150.19288635 117.39299774]
[165.15196228 118.50008392]
[177.22637939 127.40000153]
[182.71063232 141.36148071]
[179.92167664 156.09992981]
[169.71540833 167.09230042]
[155.22399902 170.96516418]
[140.89468384 166.52999878]
[131.12460327 155.14718628]
[131.12460327 170.14718628]
[131.12460327 185.14718628]
[131.12460327 200.14718628]
[131.12460327 215.14718628]
[131.12460327 230.14718628]
[131.12460327 245.14718628]
[131.12460327 260.14718628]
[131.12460327 275.14718628]
[131.12460327 290.14718628]
[131.12460327 305.14718628]
[145.66448975 309.20849609]
[158.56887817 317.04299927]
[168.88015747 328.06933594]
[175.83319092 341.46926880]
[178.91198730 356.24841309]
[177.88809204 371.31008911]
[172.83749390 385.53662109]
[164.13496399 397.87228394]
[152.42630005 407.40170288]
[138.58036804 413.41772461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 120]
[23 119]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[89 118]
[90 117]
[93 116]
[94 115]
[96 113]
[97 112]
[98 111]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
