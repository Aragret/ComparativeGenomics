%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAGCAGGGGGGGGGGGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUxxxxxxxxxxACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 413.22463989]
[71.19830322 407.20861816]
[59.48964310 397.67919922]
[50.78712082 385.34353638]
[45.73651886 371.11700439]
[44.71262741 356.05532837]
[47.79142761 341.27615356]
[54.74444962 327.87625122]
[65.05573273 316.84991455]
[77.96011353 309.01541138]
[92.50000000 304.95407104]
[92.50000000 289.95407104]
[92.50000000 274.95407104]
[92.50000000 259.95407104]
[92.50000000 244.95408630]
[92.50000000 229.95408630]
[92.50000000 214.95408630]
[92.50000000 199.95408630]
[92.50000000 184.95408630]
[92.50000000 169.95408630]
[92.50000000 154.95408630]
[92.50000000 139.95408630]
[92.50000000 124.95408630]
[79.82122803 118.94106293]
[71.46811676 106.64162445]
[70.43397522 90.97203064]
[77.83937836 76.18241119]
[63.02162170 78.51351929]
[48.20386505 80.84461975]
[33.38610458 83.17572021]
[18.56834793 85.50682831]
[3.75058913 87.83792877]
[-10.95646286 96.27232361]
[-23.13255119 84.47489929]
[-15.16685295 69.50880432]
[1.41948521 73.02017212]
[16.23724365 70.68907166]
[31.05500221 68.35796356]
[45.87276077 66.02686310]
[60.69051743 63.69575882]
[75.50827789 61.36465454]
[61.38687897 56.30637741]
[46.52154160 58.31180954]
[32.08467865 54.24032974]
[20.45755959 44.76350784]
[13.55801487 31.44449043]
[12.52408028 16.48016548]
[17.52629852 2.33881497]
[27.73958206 -8.64703178]
[41.47931290 -14.66532421]
[56.47919846 -14.72338009]
[70.26509857 -8.81162357]
[80.56311798 2.09483552]
[85.67465210 16.19704247]
[84.75623322 31.17019272]
[90.82849884 44.88615799]
[92.07537079 29.93807030]
[93.32224274 14.98998356]
[94.56912231 0.04189622]
[95.81599426 -14.90619087]
[81.27300262 -18.73665428]
[67.61618042 -25.03445816]
[55.26054382 -33.60822296]
[44.58157349 -44.19740295]
[35.90378952 -56.48020172]
[29.49089241 -70.08335876]
[25.53777122 -84.59349060]
[24.16455269 -99.56965637]
[25.41296768 -114.55673218]
[29.24508095 -129.09928894]
[35.54443359 -142.75540161]
[44.11960220 -155.11006165]
[54.70999146 -165.78782654]
[66.99377441 -174.46421814]
[80.59765625 -180.87557983]
[95.10823822 -184.82705688]
[110.08455658 -186.19857788]
[125.07149506 -184.94845581]
[139.61361694 -181.11470032]
[153.26901245 -174.81379700]
[165.62269592 -166.23722839]
[176.29927063 -155.64562988]
[184.97427368 -143.36085510]
[191.38407898 -129.75624084]
[195.33390808 -115.24521637]
[196.70373535 -100.26874542]
[195.45191956 -85.28195190]
[191.61650085 -70.74025726]
[185.31405640 -57.08557892]
[176.73608398 -44.73286438]
[166.14328003 -34.05749893]
[153.85752869 -25.38389015]
[140.25218201 -18.97562408]
[125.74070740 -15.02743912]
[110.76408386 -13.65931606]
[109.51720428 1.28877079]
[108.27033234 16.23685837]
[107.02346039 31.18494415]
[105.77658081 46.13302994]
[116.10379028 57.01185608]
[131.09648132 56.54381561]
[146.08917236 56.07577133]
[154.63301086 52.66184998]
[161.39793396 55.75722504]
[176.39712524 55.60118866]
[191.39631653 55.44515228]
[197.40666199 41.45245361]
[208.59313965 31.11888695]
[223.01762390 26.23480225]
[238.18096924 27.64639664]
[251.45605469 35.10910416]
[260.54287720 47.32996750]
[263.86709595 62.19164276]
[260.85278320 77.11926270]
[252.02217102 89.52651978]
[238.90521240 97.26377869]
[223.77450562 98.99052429]
[209.25154114 94.40757751]
[197.85250854 84.30896759]
[191.55235291 70.44433594]
[176.55316162 70.60037231]
[161.55397034 70.75641632]
[146.55722046 71.06846619]
[131.56452942 71.53651428]
[116.57183075 72.00455475]
[129.31689453 92.05644989]
[124.66445923 113.70303345]
[107.50000000 124.95408630]
[107.50000000 139.95408630]
[107.50000000 154.95408630]
[107.50000000 169.95408630]
[107.50000000 184.95408630]
[107.50000000 199.95408630]
[107.50000000 214.95408630]
[107.50000000 229.95408630]
[107.50000000 244.95408630]
[107.50000000 259.95407104]
[107.50000000 274.95407104]
[107.50000000 289.95407104]
[107.50000000 304.95407104]
[122.03988647 309.01541138]
[134.94427490 316.84991455]
[145.25555420 327.87625122]
[152.20857239 341.27615356]
[155.28736877 356.05532837]
[154.26348877 371.11700439]
[149.21287537 385.34353638]
[140.51036072 397.67919922]
[128.80169678 407.20861816]
[114.95575714 413.22463989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
