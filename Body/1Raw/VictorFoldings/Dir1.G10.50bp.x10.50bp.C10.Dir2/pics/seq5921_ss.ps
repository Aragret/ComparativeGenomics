%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCUUUUAGGGGGGGGGGUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAxxxxxxxxxxCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCCCCCCCCCCCUACCCUUUUA\
) } def
/len { sequence length } bind def

/coor [
[87.12477875 426.39874268]
[73.10283661 420.84573364]
[60.90288162 411.97940063]
[51.29180908 400.35708618]
[44.87378311 386.70941162]
[42.05224609 371.89422607]
[43.00456238 356.84283447]
[47.67086792 342.50140381]
[55.75783539 329.77145386]
[66.75711060 319.45318604]
[79.97726440 312.19522095]
[94.58728027 308.45376587]
[94.58728027 293.45376587]
[94.58728027 278.45376587]
[94.58728027 263.45376587]
[94.58728027 248.45376587]
[94.58728027 233.45376587]
[94.58728027 218.45376587]
[94.58728027 203.45376587]
[94.58728027 188.45376587]
[94.58728027 173.45376587]
[94.58728027 158.45376587]
[94.27930450 143.45693970]
[93.66347504 128.46957397]
[93.04765320 113.48222351]
[81.45860291 103.95889282]
[66.63612366 106.25976562]
[51.81364059 108.56063843]
[43.55205536 118.51804352]
[31.11557388 120.10085297]
[21.27519798 112.99950409]
[6.40859842 114.99555969]
[-8.45800018 116.99161530]
[-23.35167885 125.09190369]
[-35.25838470 113.02265930]
[-26.95691490 98.24017334]
[-10.45405674 102.12501526]
[4.41254139 100.12895966]
[19.27914047 98.13290405]
[32.53755569 86.67607117]
[49.51276398 93.73815918]
[64.33524323 91.43727875]
[79.15773010 89.13640594]
[85.89082336 88.21646881]
[91.87279510 89.52049255]
[96.50084686 92.64969635]
[101.91947174 78.66261292]
[107.33809662 64.67552948]
[112.75672150 50.68844604]
[103.73316193 62.67074203]
[91.07640076 70.72098541]
[76.39869690 73.81371307]
[61.56973648 71.55496216]
[48.47847748 64.23246765]
[38.79252625 52.77898407]
[33.74570084 38.65349197]
[33.98088837 23.65533447]
[39.46812439 9.69502544]
[49.50843048 -1.44913113]
[62.82284546 -8.35756016]
[77.71533203 -10.15024471]
[92.28885651 -6.59882832]
[104.68698120 1.84429967]
[113.33041382 14.10362911]
[117.11793518 28.61516380]
[117.42591095 13.61832523]
[102.97247314 9.25933743]
[90.23167419 1.16152906]
[80.14894867 -10.07418823]
[73.47251892 -23.61404991]
[70.69781494 -38.45330811]
[72.03073120 -53.49079132]
[77.37236786 -67.61061859]
[86.32633209 -79.76500702]
[98.22817993 -89.05201721]
[112.19472504 -94.78248596]
[127.18954468 -96.53118896]
[142.09992981 -94.16835022]
[155.81942749 -87.86930847]
[167.32995605 -78.10150146]
[175.77737427 -65.58975983]
[180.53482056 -51.26253128]
[181.24925232 -36.18300629]
[177.86766052 -21.47017288]
[170.64097595 -8.21582794]
[160.10546875 2.59646940]
[147.04295349 10.16437626]
[132.42274475 13.92630291]
[132.11477661 28.92314148]
[132.19338989 30.23873520]
[132.12997437 31.51308060]
[142.32794189 19.41712570]
[156.96316528 22.18471909]
[171.00514221 16.90997696]
[185.04710388 11.63523674]
[199.08908081 6.36049461]
[213.13105774 1.08575320]
[219.18885803 -10.34695625]
[231.04136658 -14.43223000]
[242.12294006 -9.48643875]
[256.27026367 -14.47176075]
[270.41757202 -19.45708275]
[284.56488037 -24.44240570]
[291.16384888 -38.80308533]
[306.01336670 -44.21301651]
[320.30349731 -37.46258163]
[325.55612183 -22.55669785]
[318.65496826 -8.33875751]
[303.69439697 -3.24401426]
[289.55020142 -10.29508877]
[275.40289307 -5.30976629]
[261.25558472 -0.32444435]
[247.10826111 4.66087770]
[236.46432495 18.58033371]
[218.40580750 15.12772942]
[204.36383057 20.40247154]
[190.32185364 25.67721367]
[176.27987671 30.95195389]
[162.23789978 36.22669601]
[153.04431152 47.94536591]
[137.40472412 45.55505753]
[126.74380493 56.10707092]
[121.32518005 70.09415436]
[115.90655518 84.08123779]
[110.48793030 98.06832123]
[108.03500366 112.86640167]
[108.65083313 127.85375214]
[109.26665497 142.84111023]
[112.52501678 148.70845032]
[112.31549072 154.46553040]
[109.58728027 158.45376587]
[109.58728027 173.45376587]
[109.58728027 188.45376587]
[109.58728027 203.45376587]
[109.58728027 218.45376587]
[109.58728027 233.45376587]
[109.58728027 248.45376587]
[109.58728027 263.45376587]
[109.58728027 278.45376587]
[109.58728027 293.45376587]
[109.58728027 308.45376587]
[124.19729614 312.19522095]
[137.41744995 319.45318604]
[148.41673279 329.77145386]
[156.50369263 342.50140381]
[161.16999817 356.84283447]
[162.12231445 371.89422607]
[159.30078125 386.70941162]
[152.88275146 400.35708618]
[143.27168274 411.97940063]
[131.07171631 420.84573364]
[117.04978180 426.39874268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 128]
[24 127]
[25 126]
[26 43]
[27 42]
[28 41]
[31 39]
[32 38]
[33 37]
[46 125]
[47 124]
[48 123]
[49 122]
[65 89]
[66 88]
[91 121]
[93 119]
[94 118]
[95 117]
[96 116]
[97 115]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
