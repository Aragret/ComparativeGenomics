%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGAUCAAAGGGGGGGGGGAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGxxxxxxxxxxCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACCCCCCCCCCCACAAUCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.23980713]
[71.19830322 359.22375488]
[59.48964310 349.69433594]
[50.78712082 337.35867310]
[45.73651886 323.13217163]
[44.71262741 308.07046509]
[47.79142761 293.29132080]
[54.74444962 279.89138794]
[65.05573273 268.86505127]
[77.96011353 261.03054810]
[92.50000000 256.96923828]
[92.50000000 241.96923828]
[92.50000000 226.96923828]
[92.50000000 211.96923828]
[92.50000000 196.96923828]
[92.50000000 181.96923828]
[92.50000000 166.96923828]
[92.50000000 151.96923828]
[92.50000000 136.96923828]
[92.50000000 121.96923828]
[77.56645966 105.96938324]
[82.57326508 84.66356659]
[75.11835480 71.64725494]
[67.66344452 58.63094330]
[60.20853424 45.61463547]
[34.92815781 55.63131332]
[20.34009171 36.79889679]
[6.01749372 32.34208298]
[-8.30510330 27.88526726]
[-22.62770081 23.42845154]
[-35.20071793 35.62742996]
[-52.12483978 39.79558182]
[-68.75509644 34.88098907]
[-80.57350159 22.31202126]
[-84.41643524 5.58371830]
[-98.91203308 1.72655880]
[-113.40763092 -2.13060069]
[-124.97917175 3.66191936]
[-137.00285339 0.10524832]
[-143.15307617 -10.35811996]
[-157.56529236 -14.51600742]
[-171.97750854 -18.67389488]
[-187.75721741 -14.20925808]
[-199.32331848 -25.83498192]
[-194.77758789 -41.59151840]
[-178.79629517 -45.26989365]
[-167.81962585 -33.08610916]
[-153.40740967 -28.92822266]
[-138.99519348 -24.77033615]
[-122.24795532 -29.92107010]
[-109.55046844 -16.62619781]
[-95.05487061 -12.76903820]
[-80.55927277 -8.91187859]
[-72.60523987 -18.81808853]
[-61.44356537 -24.98330688]
[-48.73007584 -26.45224762]
[-36.36632919 -22.96935654]
[-26.21520805 -15.02241230]
[-19.82022476 -3.77455759]
[-18.17088509 9.10585403]
[-3.84828782 13.56266975]
[10.47430992 18.01948547]
[24.79690742 22.47630119]
[31.64025116 15.54622173]
[41.88902283 12.62648010]
[53.14958572 15.31075764]
[54.08521652 0.33996627]
[55.02084351 -14.63082504]
[55.95647049 -29.60161591]
[56.89210129 -44.57240677]
[43.37376022 -51.58485413]
[33.88143921 -63.49349594]
[30.05973816 -78.23508453]
[32.57078934 -93.25555420]
[40.97953415 -105.95252228]
[53.82911301 -114.12615204]
[68.89325714 -116.36031342]
[83.56201172 -112.26793671]
[95.29392242 -102.55803680]
[102.05637360 -88.91291809]
[102.67771912 -73.69668579]
[97.05031586 -59.54563522]
[86.14913940 -48.91152573]
[71.86289215 -43.63677979]
[70.92726135 -28.66598892]
[69.99163818 -13.69519711]
[69.05600739 1.27559471]
[68.12037659 16.24638557]
[72.77548218 1.98700285]
[82.98273468 -9.00444889]
[96.85919952 -14.70037746]
[111.84510040 -14.05005455]
[125.17597198 -7.17344522]
[134.39268494 4.66092253]
[137.79502869 19.26996422]
[134.75535583 33.95875168]
[125.83441925 46.01764297]
[112.67785645 53.22213745]
[97.71265411 54.24322510]
[83.69943237 48.89253998]
[73.22484589 38.15972519]
[80.67975616 51.17603302]
[88.13466644 64.19234467]
[95.58957672 77.20865631]
[107.70918274 78.10329437]
[117.71607971 84.99874115]
[122.86787415 96.00529480]
[137.68563843 98.33639526]
[152.50338745 100.66750336]
[160.09367371 87.52398682]
[171.92184448 78.01300049]
[186.38822937 73.42082214]
[201.53637695 74.36850739]
[215.31762695 80.72789764]
[225.86816406 91.63892365]
[231.76112366 105.62596893]
[232.19952393 120.79740143]
[227.12409973 135.10139465]
[217.22123718 146.60346985]
[203.83021545 153.74806213]
[188.76206970 155.56890869]
[174.05464172 151.81977844]
[161.69699097 143.00769043]
[153.36038208 130.32441711]
[150.17228699 115.48526001]
[135.35452271 113.15415192]
[120.53676605 110.82305145]
[118.13478088 114.49230957]
[115.08557129 117.64434052]
[111.49796295 120.16665649]
[107.50000000 121.96923828]
[107.50000000 136.96923828]
[107.50000000 151.96923828]
[107.50000000 166.96923828]
[107.50000000 181.96923828]
[107.50000000 196.96923828]
[107.50000000 211.96923828]
[107.50000000 226.96923828]
[107.50000000 241.96923828]
[107.50000000 256.96923828]
[122.03988647 261.03054810]
[134.94427490 268.86505127]
[145.25555420 279.89138794]
[152.20857239 293.29132080]
[155.28736877 308.07046509]
[154.26348877 323.13217163]
[149.21287537 337.35867310]
[140.51036072 349.69433594]
[128.80169678 359.22375488]
[114.95575714 365.23980713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 104]
[23 103]
[24 102]
[25 101]
[27 63]
[28 62]
[29 61]
[30 60]
[35 53]
[36 52]
[37 51]
[40 49]
[41 48]
[42 47]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[107 127]
[108 126]
[109 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
