%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAACUAUUUGGGGGGGGGGAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCAACUUAAACUCCAGCxxxxxxxxxxUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGCCCCCCCCCCUUUGACUAUUU\
) } def
/len { sequence length } bind def

/coor [
[27.16307640 503.95584106]
[13.14113235 498.40283203]
[0.94117522 489.53649902]
[-8.66989613 477.91418457]
[-15.08792114 464.26647949]
[-17.90945816 449.45129395]
[-16.95714188 434.39993286]
[-12.29083729 420.05850220]
[-4.20387077 407.32855225]
[6.79540396 397.01028442]
[20.01556206 389.75228882]
[34.62557602 386.01086426]
[34.62557602 371.01086426]
[34.62557602 356.01086426]
[34.62557602 341.01086426]
[34.62557602 326.01086426]
[34.62557602 311.01086426]
[34.62557602 296.01086426]
[34.62557602 281.01086426]
[34.62557602 266.01086426]
[34.62557602 251.01086426]
[26.77717400 263.79376221]
[15.41880608 273.59109497]
[1.62237787 279.47824097]
[-13.31012344 280.89962769]
[-27.96949768 277.72116089]
[-40.97232056 270.24273682]
[-51.09149551 259.17016602]
[-57.37206650 245.54832458]
[-59.22132111 230.66275024]
[-56.46474838 215.91821289]
[-49.36248779 202.70617676]
[-38.58478928 192.27348328]
[-25.14875793 185.60466003]
[-10.32237148 183.32907104]
[4.49518299 185.66146851]
[17.90555382 192.38174438]
[28.64318657 202.85566711]
[35.69475555 216.09483337]
[38.39473343 230.84764099]
[43.81335831 216.86054993]
[49.23198318 202.87347412]
[54.65060806 188.88638306]
[60.06923294 174.89930725]
[65.48786163 160.91221619]
[64.38459778 156.20774841]
[66.26892090 150.76374817]
[71.42678070 146.46966553]
[77.41507721 132.71684265]
[83.40337372 118.96401215]
[89.39167023 105.21118164]
[76.14663696 112.25171661]
[61.15169144 111.86223602]
[48.29001617 104.14360046]
[40.89234161 91.09468079]
[40.87441254 76.09468842]
[48.24087143 63.02811813]
[61.08405685 55.27875900]
[76.07802582 54.85343170]
[89.33985138 61.86228180]
[97.43517303 74.49025726]
[98.26778412 89.46617126]
[106.93438721 77.22322083]
[115.60099792 64.98026276]
[112.32504272 47.82639313]
[122.24833679 33.86717606]
[138.85943604 31.42292213]
[147.27285767 19.00460625]
[155.68626404 6.58629274]
[164.09967041 -5.83202171]
[153.86773682 -16.30212975]
[145.88937378 -28.57061386]
[140.47251892 -42.16038513]
[137.82553101 -56.54342651]
[138.04919434 -71.16131592]
[141.13288879 -85.44690704]
[146.95503235 -98.84631348]
[155.28796387 -110.84040833]
[165.80673218 -120.96494293]
[178.10185242 -128.82847595]
[191.69522095 -134.12753296]
[206.05868530 -136.65835571]
[220.63462830 -136.32463074]
[234.85749817 -133.14129639]
[248.17590332 -127.23375702]
[256.84249878 -139.47671509]
[265.50912476 -151.71966553]
[274.17572021 -163.96261597]
[282.84231567 -176.20556641]
[283.81585693 -192.57579041]
[298.59878540 -199.67486572]
[311.98373413 -190.19987488]
[310.20138550 -173.89787292]
[295.08529663 -167.53897095]
[286.41867065 -155.29600525]
[277.75207520 -143.05305481]
[269.08544922 -130.81010437]
[260.41885376 -118.56714630]
[270.91827393 -107.31328583]
[278.86431885 -94.12535095]
[283.91091919 -79.57314301]
[285.83740234 -64.28598022]
[284.55798340 -48.92546844]
[280.12576294 -34.15686417]
[272.73040771 -20.62029076]
[262.69006348 -8.90296459]
[250.43771362 0.48626438]
[236.50239563 7.13901377]
[221.48648071 10.76513004]
[206.03958130 11.20534229]
[190.83042908 8.43825722]
[176.51799011 2.58138847]
[168.10456848 14.99970245]
[159.69116211 27.41801643]
[151.27775574 39.83633041]
[155.46040344 52.06162643]
[151.76446533 64.64608765]
[141.32977295 72.91036987]
[127.84394836 73.64687347]
[119.17734528 85.88982391]
[110.51073456 98.13278198]
[103.14449310 111.19947815]
[97.15619659 124.95230865]
[91.16790009 138.70513916]
[85.17960358 152.45796204]
[79.47494507 166.33084106]
[74.05632019 180.31793213]
[68.63769531 194.30500793]
[63.21906662 208.29209900]
[57.80044174 222.27917480]
[52.38181686 236.26626587]
[49.62557602 251.01086426]
[49.62557602 266.01086426]
[49.62557602 281.01086426]
[49.62557602 296.01086426]
[49.62557602 311.01086426]
[49.62557602 326.01086426]
[49.62557602 341.01086426]
[49.62557602 356.01086426]
[49.62557602 371.01086426]
[49.62557602 386.01086426]
[64.23558807 389.75228882]
[77.45574951 397.01028442]
[88.45502472 407.32855225]
[96.54198456 420.05850220]
[101.20829010 434.39993286]
[102.16060638 449.45129395]
[99.33907318 464.26647949]
[92.92104340 477.91418457]
[83.30997467 489.53649902]
[71.11001587 498.40283203]
[57.08807373 503.95584106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[40 131]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
[48 125]
[49 124]
[50 123]
[51 122]
[62 121]
[63 120]
[64 119]
[67 115]
[68 114]
[69 113]
[70 112]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
