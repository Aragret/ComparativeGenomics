%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUAUCCCCAGGGGGGGGGGUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGxxxxxxxxxxAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACCCCCCCCCCCACUUAUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 394.70861816]
[70.87159729 389.55361938]
[58.28185654 381.27139282]
[47.94191742 370.30862427]
[40.40940475 357.25650024]
[36.09054184 342.81890869]
[35.21823120 327.77444458]
[37.83952332 312.93444824]
[43.81304932 299.09921265]
[52.81666565 287.01486206]
[64.36482239 277.33306885]
[77.83473969 270.57598877]
[92.50000000 267.10803223]
[92.50000000 252.10803223]
[92.50000000 237.10803223]
[92.50000000 222.10803223]
[92.50000000 207.10803223]
[92.50000000 192.10803223]
[92.50000000 177.10803223]
[92.50000000 162.10803223]
[92.50000000 147.10803223]
[92.50000000 132.10803223]
[92.50000000 117.10803223]
[85.50359344 111.78086853]
[81.71977234 103.84292603]
[81.98708344 95.05333710]
[86.24627686 87.35999298]
[93.55347443 82.46783447]
[94.46498871 67.49555206]
[95.37650299 52.52327347]
[93.22689819 48.59659195]
[92.54542542 44.59497070]
[93.16937256 41.00007629]
[94.79325104 38.18792343]
[97.01702118 36.39070129]
[99.13806152 21.54142189]
[101.25910950 6.69213915]
[103.38014984 -8.15714264]
[105.50119781 -23.00642586]
[90.84230804 -26.21956825]
[76.46075439 -30.50653839]
[62.43507767 -35.84392166]
[48.84188843 -42.20256424]
[35.75542068 -49.54774094]
[23.24715424 -57.83933258]
[11.38540459 -67.03205109]
[0.23495692 -77.07569885]
[-10.14328766 -87.91540527]
[-19.69264793 -99.49197388]
[-28.36096573 -111.74217987]
[-36.10089874 -124.59910583]
[-42.87017059 -137.99253845]
[-48.63181686 -151.84933472]
[-53.35435867 -166.09379578]
[-57.01201248 -180.64814758]
[-59.58479691 -195.43286133]
[-61.05865860 -210.36721802]
[-61.42555237 -225.36964417]
[-60.68346786 -240.35818481]
[-58.83646393 -255.25099182]
[-55.89462662 -269.96673584]
[-51.87402344 -284.42501831]
[-46.79661179 -298.54687500]
[-40.69012451 -312.25518799]
[-33.58791351 -325.47509766]
[-25.52877045 -338.13439941]
[-16.55671120 -350.16390991]
[-6.72073603 -361.49795532]
[3.92543054 -372.07464600]
[15.32364368 -381.83621216]
[27.41164970 -390.72930908]
[40.12342453 -398.70541382]
[53.38954544 -405.72088623]
[67.13755035 -411.73751831]
[81.29235840 -416.72235107]
[95.77665710 -420.64819336]
[110.51133728 -423.49362183]
[125.41592407 -425.24307251]
[140.40901184 -425.88702393]
[155.40870667 -425.42190552]
[170.33308411 -423.85028076]
[185.10064697 -421.18075562]
[199.63072205 -417.42788696]
[213.84396362 -412.61218262]
[227.66273499 -406.75994873]
[241.01156616 -399.90313721]
[253.81755066 -392.07919312]
[266.01074219 -383.33084106]
[277.52453613 -373.70590210]
[288.29605103 -363.25689697]
[298.26647949 -352.04092407]
[307.38134766 -340.11923218]
[315.59085083 -327.55694580]
[322.85018921 -314.42266846]
[329.11968994 -300.78814697]
[334.36514282 -286.72781372]
[338.55786133 -272.31851196]
[341.67495728 -257.63891602]
[343.69940186 -242.76918030]
[344.62014771 -227.79054260]
[344.43218994 -212.78482056]
[343.13650513 -197.83395386]
[340.74020386 -183.01959229]
[337.25634766 -168.42268372]
[332.70397949 -154.12290955]
[327.10797119 -140.19841003]
[320.49887085 -126.72520447]
[312.91281128 -113.77690125]
[304.39117432 -101.42420959]
[294.98052979 -89.73459625]
[284.73226929 -78.77191162]
[273.70239258 -68.59602356]
[261.95108032 -59.26252365]
[249.54257202 -50.82237244]
[236.54461670 -43.32167816]
[223.02821350 -36.80139923]
[209.06718445 -31.29715729]
[194.73776245 -26.83900833]
[180.11824036 -23.45130348]
[165.28843689 -21.15254402]
[150.32936096 -19.95528603]
[135.32272339 -19.86606979]
[120.35047913 -20.88538170]
[118.22943115 -6.03609991]
[116.10839081 8.81318188]
[113.98735046 23.66246414]
[111.86630249 38.51174545]
[110.34877777 53.43478775]
[109.43726349 68.40706635]
[108.52574921 83.37934113]
[118.67115784 100.56782532]
[107.50000000 117.10803223]
[107.50000000 132.10803223]
[107.50000000 147.10803223]
[107.50000000 162.10803223]
[107.50000000 177.10803223]
[107.50000000 192.10803223]
[107.50000000 207.10803223]
[107.50000000 222.10803223]
[107.50000000 237.10803223]
[107.50000000 252.10803223]
[107.50000000 267.10803223]
[122.16526031 270.57598877]
[135.63517761 277.33306885]
[147.18333435 287.01486206]
[156.18695068 299.09921265]
[162.16047668 312.93444824]
[164.78176880 327.77444458]
[163.90945435 342.81890869]
[159.59059143 357.25650024]
[152.05809021 370.30862427]
[141.71813965 381.27139282]
[129.12840271 389.55361938]
[114.96779633 394.70861816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[28 130]
[29 129]
[30 128]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
