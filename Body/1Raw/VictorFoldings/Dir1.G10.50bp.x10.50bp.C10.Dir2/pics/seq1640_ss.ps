%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAGAAAGGGGGGGGGGACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAxxxxxxxxxxGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAACCCCCCCCCCACCCCACAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.15258789]
[71.19830322 381.13653564]
[59.48964310 371.60711670]
[50.78712082 359.27145386]
[45.73651886 345.04495239]
[44.71262741 329.98324585]
[47.79142761 315.20410156]
[54.74444962 301.80416870]
[65.05573273 290.77783203]
[77.96011353 282.94332886]
[92.50000000 278.88201904]
[92.50000000 263.88201904]
[92.50000000 248.88201904]
[92.50000000 233.88201904]
[92.50000000 218.88201904]
[92.50000000 203.88201904]
[92.50000000 188.88201904]
[92.50000000 173.88201904]
[92.50000000 158.88201904]
[92.50000000 143.88201904]
[68.03343964 130.98420715]
[55.90532684 106.12710571]
[40.91263199 105.65906525]
[26.87775230 112.96199036]
[14.39810371 104.83132935]
[-0.59459227 104.36328888]
[-15.58728790 103.89524841]
[-20.29737663 106.43190765]
[-25.03012848 106.82362366]
[-28.94984818 105.43168640]
[-31.49234200 102.90122986]
[-46.42664719 101.49893188]
[-61.36095810 100.09662628]
[-76.29526520 98.69432068]
[-91.22956848 97.29201508]
[-106.16387939 95.88971710]
[-117.16352081 107.00465393]
[-132.73896790 108.39727020]
[-145.53598022 99.41001892]
[-149.51217651 84.28639984]
[-142.79014587 70.16732788]
[-128.54380798 63.71939087]
[-113.49984741 67.98711395]
[-104.76157379 80.95540619]
[-89.82727051 82.35771179]
[-74.89295959 83.76000977]
[-59.95865250 85.16231537]
[-45.02434540 86.56462097]
[-30.09003830 87.96692657]
[-15.11924648 88.90254974]
[-0.12655014 89.37059784]
[14.86614609 89.83863831]
[27.82864571 82.50222778]
[41.38067245 90.66636658]
[56.37337112 91.13440704]
[60.72716141 79.03513336]
[68.35748291 68.68494415]
[78.62773132 60.94737244]
[90.68106842 56.46795273]
[90.05709076 41.48093796]
[89.43311310 26.49392128]
[88.80913544 11.50690556]
[87.87350464 -3.46388626]
[86.62663269 -18.41197395]
[85.37975311 -33.36006165]
[84.13288116 -48.30814743]
[69.64348602 -52.90442276]
[58.01916504 -62.69950867]
[51.03255081 -76.19971466]
[49.74904633 -91.34636688]
[54.36437988 -105.82971191]
[64.17474365 -117.44113159]
[77.68413544 -124.40998077]
[92.83245850 -125.67356110]
[107.30971527 -121.03917694]
[118.90822601 -111.21354675]
[125.85929871 -97.69499969]
[127.10294342 -82.54502869]
[122.44952393 -68.07387543]
[112.60864258 -56.48830414]
[99.08097076 -49.55502319]
[100.32784271 -34.60693359]
[101.57471466 -19.65884781]
[102.82159424 -4.71076059]
[105.87419128 -0.96147287]
[106.56084442 4.76214552]
[103.79615021 10.88292789]
[104.42012787 25.86994362]
[105.04410553 40.85696030]
[105.66808319 55.84397507]
[115.31663513 58.19949341]
[124.20284271 62.63552475]
[131.88441467 68.93127441]
[137.97901917 76.77339172]
[142.18331909 85.77155304]
[157.00108337 83.44044495]
[171.81884766 81.10934448]
[186.63659668 78.77823639]
[199.06668091 68.99030304]
[212.84175110 74.65569305]
[227.65950012 72.32458496]
[230.54296875 57.44300461]
[238.34498596 44.44668961]
[250.12344360 34.90500641]
[264.45602417 29.97016335]
[279.61203003 30.23806572]
[293.76126099 35.67636490]
[305.19512939 45.62835312]
[312.53298950 58.89228821]
[314.88870239 73.86647797]
[311.97781372 88.74272156]
[304.15185547 101.72463989]
[292.35583496 111.24459839]
[278.01416016 116.15302277]
[262.85870361 115.85718536]
[248.71951294 110.39282227]
[237.30398560 100.41977692]
[229.99061584 87.14234161]
[215.17285156 89.47344971]
[203.80264282 99.09465027]
[188.96769714 93.59600067]
[174.14994812 95.92710114]
[159.33218384 98.25820923]
[144.51443481 100.58930969]
[143.52574158 109.34835815]
[140.83064270 117.74091339]
[136.53480530 125.43795013]
[130.80665588 132.13769531]
[123.87073517 137.57751465]
[115.99898529 141.54412842]
[107.50000000 143.88201904]
[107.50000000 158.88201904]
[107.50000000 173.88201904]
[107.50000000 188.88201904]
[107.50000000 203.88201904]
[107.50000000 218.88201904]
[107.50000000 233.88201904]
[107.50000000 248.88201904]
[107.50000000 263.88201904]
[107.50000000 278.88201904]
[122.03988647 282.94332886]
[134.94427490 290.77783203]
[145.25555420 301.80416870]
[152.20857239 315.20410156]
[155.28736877 329.98324585]
[154.26348877 345.04495239]
[149.21287537 359.27145386]
[140.51036072 371.60711670]
[128.80169678 381.13653564]
[114.95575714 387.15258789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 55]
[23 54]
[25 52]
[26 51]
[27 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[59 90]
[60 89]
[61 88]
[62 87]
[63 84]
[64 83]
[65 82]
[66 81]
[95 124]
[96 123]
[97 122]
[98 121]
[100 119]
[101 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
