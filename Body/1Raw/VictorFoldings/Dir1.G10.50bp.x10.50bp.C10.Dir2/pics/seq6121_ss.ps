%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGCACCCUAAGGGGGGGGGGUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAxxxxxxxxxxAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUACCCCCCCCCCUAACCACCCUAA\
) } def
/len { sequence length } bind def

/coor [
[78.48921204 399.15655518]
[64.32860565 394.00155640]
[51.73886108 385.71932983]
[41.39892578 374.75656128]
[33.86641312 361.70443726]
[29.54754829 347.26684570]
[28.67523956 332.22238159]
[31.29652977 317.38238525]
[37.27005768 303.54714966]
[46.27367401 291.46279907]
[57.82183075 281.78100586]
[71.29174805 275.02392578]
[85.95700836 271.55596924]
[85.95700836 256.55596924]
[85.95700836 241.55596924]
[85.95700836 226.55596924]
[85.95700836 211.55596924]
[85.95700836 196.55596924]
[85.95700836 181.55596924]
[85.95700836 166.55596924]
[85.95700836 151.55596924]
[85.95700836 136.55596924]
[85.95700836 121.55596924]
[84.90955353 96.17895508]
[74.24934387 85.62623596]
[63.58913422 75.07350922]
[45.69545364 70.84310913]
[41.67233658 53.78724670]
[29.36619186 62.44465637]
[15.61185455 68.53281403]
[0.93871117 71.81943512]
[-14.08888626 72.18004608]
[-28.89332771 69.60264587]
[-42.90594482 64.18814850]
[-55.58885193 56.14639664]
[-66.45561218 45.78804398]
[-75.08985138 33.51255798]
[-81.16127777 19.79280663]
[-84.43823242 5.15685034]
[-84.79662323 -9.83238888]
[-82.22452545 -24.59877396]
[-76.82265472 -38.57509995]
[-68.80036163 -51.22488403]
[-79.67225647 -61.55938721]
[-90.54414368 -71.89389038]
[-101.41603851 -82.22839355]
[-112.28792572 -92.56289673]
[-123.15982056 -102.89739990]
[-134.03170776 -113.23190308]
[-144.90361023 -123.56640625]
[-155.77549744 -133.90090942]
[-170.03144836 -128.44833374]
[-185.24067688 -129.72970581]
[-198.38339233 -137.49063110]
[-206.85009766 -150.19013977]
[-208.95970154 -165.30676270]
[-204.29336548 -179.83908081]
[-193.77758789 -190.90167236]
[-179.50027466 -196.29808044]
[-164.29620361 -194.95681763]
[-151.18415833 -187.14419556]
[-142.76753235 -174.41143799]
[-140.71746826 -159.28662109]
[-145.44099426 -144.77281189]
[-134.56910706 -134.43829346]
[-123.69721222 -124.10379791]
[-112.82531738 -113.76929474]
[-101.95342255 -103.43479156]
[-91.08153534 -93.10028839]
[-80.20964050 -82.76578522]
[-69.33775330 -72.43127441]
[-58.46585846 -62.09677505]
[-46.23863602 -70.74946594]
[-32.55384827 -76.85229492]
[-17.93668938 -80.16899872]
[-2.94853687 -80.57026672]
[11.83460999 -78.03881073]
[25.84426308 -72.67007446]
[38.54131317 -64.66865540]
[49.43676376 -54.34048843]
[58.11057281 -42.08116531]
[64.22785187 -28.36077309]
[67.55177307 -13.70587730]
[67.95275879 1.32069731]
[65.41353607 16.14147377]
[60.02983856 30.18651772]
[52.00683975 42.91535568]
[64.14018250 42.93285751]
[73.28576660 51.50509262]
[74.14185333 64.41329956]
[84.80206299 74.96602631]
[95.46227264 85.51874542]
[110.02079010 89.13117981]
[124.37764740 84.78600311]
[138.73451233 80.44082642]
[153.09136963 76.09564972]
[167.44822693 71.75047302]
[181.40603638 66.25688171]
[194.87310791 59.65097046]
[208.34017944 53.04505920]
[210.01069641 37.70840454]
[219.72540283 25.72391891]
[234.38438416 20.91580582]
[249.30999756 24.81831741]
[259.73953247 36.18617630]
[262.34497070 51.39193726]
[256.29492188 65.58350372]
[243.51994324 74.23239136]
[228.09648132 74.57877350]
[214.94609070 66.51212311]
[201.47901917 73.11803436]
[188.01194763 79.72395325]
[202.36363220 84.08621979]
[211.53453064 95.95611572]
[212.13328552 110.94416046]
[203.93847656 123.50779724]
[189.98051453 129.00100708]
[175.42105103 125.39241028]
[165.64414978 114.01645660]
[164.26530457 99.07996368]
[171.79341125 86.10733032]
[157.43653870 90.45250702]
[143.07968140 94.79768372]
[128.72282410 99.14286804]
[114.36596680 103.48804474]
[129.36582947 103.55225372]
[140.45039368 113.65830994]
[141.89668274 128.58842468]
[132.95797729 140.63414001]
[118.24933624 143.57624817]
[105.36487579 135.89570618]
[100.95700836 121.55596924]
[100.95700836 136.55596924]
[100.95700836 151.55596924]
[100.95700836 166.55596924]
[100.95700836 181.55596924]
[100.95700836 196.55596924]
[100.95700836 211.55596924]
[100.95700836 226.55596924]
[100.95700836 241.55596924]
[100.95700836 256.55596924]
[100.95700836 271.55596924]
[115.62226868 275.02392578]
[129.09217834 281.78100586]
[140.64033508 291.46279907]
[149.64396667 303.54714966]
[155.61749268 317.38238525]
[158.23876953 332.22238159]
[157.36647034 347.26684570]
[153.04760742 361.70443726]
[145.51509094 374.75656128]
[135.17515564 385.71932983]
[122.58541107 394.00155640]
[108.42480469 399.15655518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 92]
[25 91]
[26 90]
[28 87]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[98 112]
[99 111]
[100 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
