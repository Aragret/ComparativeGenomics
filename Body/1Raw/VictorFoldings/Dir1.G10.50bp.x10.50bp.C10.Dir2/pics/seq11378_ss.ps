%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCCCUGAGGGGGGGGGGCCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAxxxxxxxxxxACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCCCCCCCCCCCAACCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[60.03461838 179.71763611]
[62.89295959 164.99249268]
[68.87364197 151.23635864]
[77.69257355 139.10266113]
[88.93556213 129.16445923]
[94.12149811 115.08944702]
[82.82248688 124.95516968]
[71.52348328 134.82089233]
[60.22447968 144.68661499]
[48.92547607 154.55233765]
[37.62647247 164.41806030]
[26.32746696 174.28378296]
[15.34180164 184.49726868]
[4.68017530 195.04855347]
[-5.98145056 205.59983826]
[-16.64307785 216.15113831]
[-27.30470276 226.70242310]
[-34.30965042 242.14155579]
[-51.08458710 239.68435669]
[-53.36716461 222.88476562]
[-37.85599518 216.04080200]
[-27.19436646 205.48950195]
[-16.53274155 194.93821716]
[-5.87111473 184.38693237]
[4.79051161 173.83563232]
[5.15290022 170.26686096]
[7.30216742 166.70562744]
[11.21088791 164.00854492]
[16.46174431 162.98477173]
[27.76074791 153.11904907]
[39.05975342 143.25332642]
[50.35875702 133.38760376]
[61.65776062 123.52188873]
[72.95676422 113.65616608]
[84.25577545 103.79043579]
[82.69818878 88.87152863]
[69.60503387 81.55242157]
[56.51188278 74.23331451]
[43.41872787 66.91420746]
[30.32557297 59.59510422]
[31.46297264 74.55191803]
[20.62473106 84.92170715]
[5.73272610 83.12499237]
[-2.32819200 70.47502899]
[2.33385611 56.21791458]
[16.31063271 50.77440262]
[4.04826498 42.13528442]
[-8.21410275 33.49617004]
[-20.47647095 24.85705376]
[-32.73883820 16.21793747]
[-49.11120987 15.28114796]
[-56.24343109 0.51417738]
[-46.79848862 -12.89198112]
[-30.49252701 -11.14622116]
[-24.09972382 3.95556951]
[-11.83735561 12.59468555]
[0.42501298 21.23380280]
[12.68738079 29.87291718]
[24.94974899 38.51203537]
[37.64468002 46.50194931]
[50.73783493 53.82105637]
[63.83098602 61.14016342]
[76.92414093 68.45926666]
[90.01729584 75.77837372]
[82.03594208 63.07806015]
[71.93553162 51.98834610]
[63.71051788 39.44445801]
[57.56676865 25.76036644]
[53.65806198 11.27858448]
[52.08222961 -3.63841128]
[52.87871933 -18.61725044]
[56.02758789 -33.28301239]
[61.45002747 -47.26861954]
[69.01030731 -60.22400665]
[78.51920319 -71.82491302]
[89.73870087 -81.78096008]
[102.38798523 -89.84294891]
[116.15043640 -95.80908966]
[130.68159485 -99.53005981]
[145.61773682 -100.91271210]
[160.58500671 -99.92244720]
[175.20878601 -96.58404541]
[189.12304688 -90.98106384]
[201.97952271 -83.25375366]
[213.45639038 -73.59552765]
[223.26640320 -62.24812317]
[231.16401672 -49.49556732]
[236.95156860 -35.65705872]
[240.48416138 -21.07896805]
[241.67341614 -6.12618494]
[240.48953247 8.82702255]
[236.96215820 23.40637970]
[231.17958069 37.24696350]
[223.28652954 50.00234985]
[213.48059082 61.35327148]
[202.00718689 71.01561737]
[189.15348816 78.74753571]
[175.24124146 84.35550690]
[160.61865234 87.69915009]
[145.65173340 88.69478607]
[130.71537781 87.31753540]
[116.93698883 93.24678802]
[131.87129211 94.64909363]
[146.80560303 96.05139923]
[161.73991394 97.45369720]
[176.67422485 98.85600281]
[182.65682983 84.96127319]
[192.64187622 73.59667206]
[205.65109253 65.87557983]
[220.41000366 62.55443573]
[235.47265625 63.95860672]
[249.36337280 69.95053101]
[260.72128296 79.94318390]
[268.43365479 92.95758057]
[271.74490356 107.71870422]
[270.33062744 122.78041077]
[264.32940674 136.66711426]
[254.32914734 148.01832581]
[241.30958557 155.72196960]
[226.54624939 159.02333069]
[211.48548889 157.59898376]
[197.60281372 151.58843994]
[186.25831604 141.58058167]
[178.56338501 128.55586243]
[175.27191162 113.79031372]
[160.33761597 112.38800812]
[145.40330505 110.98570251]
[130.46899414 109.58340454]
[115.53468323 108.18109894]
[127.96847534 116.57162476]
[142.89402771 118.06427765]
[157.14169312 122.75512695]
[170.03466797 130.42134094]
[180.96052551 140.69877625]
[189.40025330 153.09921265]
[194.95295715 167.03361511]
[197.35485840 181.84007263]
[196.49185181 196.81521606]
[192.40495300 211.24772644]
[185.28829956 224.45201111]
[175.47993469 235.80084229]
[163.44577026 244.75512695]
[149.75747681 250.88949585]
[135.06527710 253.91258240]
[120.06706238 253.68077087]
[105.47530365 250.20507812]
[91.98313141 243.65058899]
[80.23145294 234.32867432]
[70.77850342 222.68214417]
[64.07331848 209.26423645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
