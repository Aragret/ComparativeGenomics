%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAACAAAAAAGGGGGGGGGGUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAxxxxxxxxxxCCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCCCCCCCCCCCUAACAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[-21.69080162 296.90255737]
[-30.89208221 290.90972900]
[-39.79879761 284.48727417]
[-48.39090347 277.64965820]
[-56.64906311 270.41223145]
[-64.55468750 262.79132080]
[-72.08999634 254.80404663]
[-79.23802185 246.46839905]
[-85.98268890 237.80313110]
[-92.30879974 228.82774353]
[-98.20214081 219.56243896]
[-103.64942932 210.02804565]
[-108.63842010 200.24606323]
[-122.36212921 206.30078125]
[-136.08584595 212.35551453]
[-149.74749756 218.54899597]
[-163.34567261 224.88061523]
[-176.94386292 231.21223450]
[-190.54205322 237.54385376]
[-204.14022827 243.87547302]
[-217.73841858 250.20709229]
[-231.33659363 256.53872681]
[-244.93478394 262.87033081]
[-258.53295898 269.20196533]
[-272.13113403 275.53356934]
[-278.95544434 290.05282593]
[-294.59469604 293.62966919]
[-307.05178833 283.52023315]
[-306.77072144 267.47964478]
[-293.96710205 257.81283569]
[-278.46276855 261.93539429]
[-264.86459351 255.60377502]
[-251.26640320 249.27215576]
[-237.66821289 242.94053650]
[-224.07003784 236.60891724]
[-210.47184753 230.27729797]
[-196.87367249 223.94567871]
[-183.27548218 217.61405945]
[-169.67729187 211.28244019]
[-156.07911682 204.95082092]
[-151.31488037 199.24278259]
[-142.14056396 198.63179016]
[-128.41685486 192.57707214]
[-114.69314575 186.52235413]
[-125.05592346 154.12110901]
[-130.55784607 120.55092621]
[-131.08009338 86.53688812]
[-126.61135864 52.81362152]
[-117.24818420 20.10951424]
[-103.19278717 -10.86908722]
[-84.74874115 -39.45309067]
[-96.42185974 -48.87319183]
[-108.09497833 -58.29329681]
[-124.37145233 -60.29537964]
[-130.52587891 -75.49588013]
[-120.22709656 -88.25782013]
[-104.06961823 -85.45281982]
[-98.67487335 -69.96641541]
[-87.00175476 -60.54631042]
[-75.32864380 -51.12620544]
[-67.96411133 -59.27121353]
[-60.22159195 -67.05778503]
[-52.11849976 -74.46840668]
[-43.67307281 -81.48638916]
[-34.90431976 -88.09595490]
[-25.83196640 -94.28221130]
[-16.47643852 -100.03125000]
[-6.85878420 -105.33013153]
[2.99934936 -110.16692352]
[13.07577801 -114.53074646]
[23.34782410 -118.41178131]
[33.79237366 -121.80129242]
[44.38592148 -124.69165039]
[55.10462189 -127.07634735]
[65.92436218 -128.95002747]
[76.82078552 -130.30845642]
[87.76937103 -131.14859009]
[98.74547577 -131.46855164]
[109.72441101 -131.26759338]
[120.68146515 -130.54617310]
[131.59196472 -129.30592346]
[142.43138123 -127.54964447]
[153.17530823 -125.28126526]
[163.79956055 -122.50590515]
[174.28022766 -119.22981262]
[184.59373474 -115.46035004]
[194.71687317 -111.20600128]
[204.62686157 -106.47634888]
[214.30139160 -101.28202820]
[223.71868896 -95.63473511]
[232.85755920 -89.54718018]
[241.69743347 -83.03305054]
[250.21844482 -76.10701752]
[258.40136719 -68.78466797]
[266.22784424 -61.08247757]
[273.68023682 -53.01777649]
[280.74176025 -44.60871887]
[287.39651489 -35.87422562]
[293.62957764 -26.83395195]
[299.42684937 -17.50824738]
[304.77536011 -7.91809654]
[309.66302490 1.91491842]
[314.07882690 11.96866894]
[318.01287842 22.22052956]
[321.45629883 32.64743042]
[324.40133667 43.22590256]
[326.84140015 53.93214035]
[328.77093506 64.74205780]
[330.18563843 75.63131714]
[331.08233643 86.57541656]
[331.45898438 97.54972839]
[331.31472778 108.52954865]
[330.64993286 119.49018097]
[329.46606445 130.40695190]
[327.76580811 141.25529480]
[325.55297852 152.01078796]
[322.83251953 162.64923096]
[319.61062622 173.14669800]
[315.89447021 183.47953796]
[311.69250488 193.62452698]
[307.01409912 203.55880737]
[301.86981201 213.26004028]
[296.27127075 222.70637512]
[290.23098755 231.87657166]
[283.76263428 240.75000000]
[276.88070679 249.30667114]
[269.60070801 257.52731323]
[261.93905640 265.39346313]
[253.91296387 272.88742065]
[245.54049683 279.99227905]
[236.84049988 286.69210815]
[227.83255005 292.97177124]
[218.53692627 298.81713867]
[208.97453308 304.21511841]
[199.16690063 309.15350342]
[189.13609314 313.62121582]
[178.90469360 317.60815430]
[168.49571228 321.10540771]
[157.93260193 324.10504150]
[147.23910522 326.60037231]
[136.43931580 328.58572388]
[125.55750275 330.05667114]
[114.61817932 331.00988770]
[103.64595795 331.44323730]
[92.66553497 331.35571289]
[81.70162201 330.74755859]
[70.77887726 329.62008667]
[59.92190170 327.97589111]
[49.15511703 325.81863403]
[38.50275803 323.15319824]
[27.98879242 319.98556519]
[17.63688660 316.32284546]
[7.47033358 312.17333984]
[-2.48798609 307.54632568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 44]
[14 43]
[15 42]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
