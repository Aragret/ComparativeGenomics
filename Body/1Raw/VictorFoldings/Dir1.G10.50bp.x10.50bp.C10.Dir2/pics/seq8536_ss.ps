%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUAGCCCGGGGGGGGGGACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUxxxxxxxxxxUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACACCCCCCCCCCGCCCUAGACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 444.89572144]
[71.19830322 438.87969971]
[59.48964310 429.35028076]
[50.78712082 417.01458740]
[45.73651886 402.78808594]
[44.71262741 387.72640991]
[47.79142761 372.94723511]
[54.74444962 359.54730225]
[65.05573273 348.52096558]
[77.96011353 340.68646240]
[92.50000000 336.62515259]
[92.50000000 321.62515259]
[92.50000000 306.62515259]
[92.50000000 291.62515259]
[92.50000000 276.62515259]
[92.50000000 261.62515259]
[92.50000000 246.62515259]
[92.50000000 231.62515259]
[92.50000000 216.62515259]
[92.50000000 201.62515259]
[81.81912994 191.30746460]
[81.60544586 176.09533691]
[92.50000000 164.96221924]
[92.50000000 149.96221924]
[84.47318268 148.07691956]
[76.85992432 144.91113281]
[69.86298370 140.54914856]
[63.66873550 135.10714722]
[58.44215012 128.73008728]
[54.32244492 121.58781433]
[51.41934204 113.87055969]
[49.81016159 105.78386688]
[49.53776932 97.54312897]
[34.82980728 94.59764099]
[20.12184715 91.65216064]
[5.41388559 88.70668030]
[-3.73876143 100.92108917]
[-17.28860092 107.94708252]
[-32.54529953 108.38964844]
[-46.47963333 102.16091919]
[-56.32492447 90.49759674]
[-60.12638855 75.71546173]
[-57.12923813 60.74950409]
[-47.92856216 48.57123184]
[-34.35116196 41.59864807]
[-19.09283638 41.21616364]
[-5.18314028 47.49972534]
[4.61614609 59.20172119]
[8.35936832 73.99871826]
[23.06732941 76.94419861]
[37.77529144 79.88967896]
[52.48325348 82.83516693]
[55.63039780 75.83781433]
[59.80083847 69.39770508]
[64.89839172 63.66338348]
[70.80548096 58.76708603]
[77.38588715 54.82174301]
[84.48784637 51.91834259]
[91.94755554 50.12384415]
[99.59297943 49.47963715]
[107.24778748 50.00057602]
[114.73544312 51.67464828]
[121.88325500 54.46324539]
[128.52636719 58.30205154]
[138.73985291 47.31638718]
[148.95333862 36.33072281]
[134.48904419 40.30367279]
[119.50121307 39.69961166]
[105.40356445 34.57552338]
[93.52585602 25.41473198]
[84.98845673 13.08132935]
[80.59664917 -1.26133597]
[80.76469421 -16.26039505]
[85.47674561 -30.50106239]
[94.28833008 -42.64008713]
[106.36830139 -51.53245926]
[120.57721710 -56.33940887]
[135.57481384 -56.60751343]
[149.94647217 -52.31149292]
[162.33654785 -43.85656357]
[171.57637024 -32.04023361]
[176.79440308 -17.97708321]
[177.49842834 -2.99361491]
[173.62207031 11.49685764]
[165.53082275 24.12766266]
[179.05500793 17.63949776]
[192.57919312 11.15133190]
[206.10339355 4.66316652]
[219.48966980 -2.10494804]
[232.73225403 -9.15008259]
[245.97483826 -16.19521713]
[248.24534607 -31.43171883]
[258.92736816 -42.28288651]
[273.77505493 -44.73440170]
[287.06021118 -38.05288315]
[300.30279541 -45.09801865]
[313.54537964 -52.14315414]
[326.78796387 -59.18828964]
[340.03057861 -66.23342133]
[348.25390625 -80.42175293]
[364.65036011 -80.12371063]
[372.35263062 -65.64590454]
[363.43731689 -51.88185501]
[347.07571411 -52.99083710]
[333.83309937 -45.94570160]
[320.59051514 -38.90056992]
[307.34793091 -31.85543251]
[294.10534668 -24.81029892]
[292.22244263 -10.05927753]
[281.89236450 0.88392925]
[266.92431641 3.67874861]
[253.01997375 -2.95263219]
[239.77738953 4.09250259]
[226.53480530 11.13763714]
[224.29461670 15.42215252]
[219.30661011 18.31197357]
[212.59155273 18.18735695]
[199.06736755 24.67552185]
[185.54318237 31.16368675]
[172.01898193 37.65185165]
[159.93899536 46.54420090]
[149.72550964 57.52986526]
[139.51203918 68.51553345]
[149.96104431 92.49224854]
[147.02046204 118.48105621]
[131.47834778 139.51692200]
[107.50000000 149.96221924]
[107.50000000 164.96221924]
[118.39455414 176.09533691]
[118.18087006 191.30746460]
[107.50000000 201.62515259]
[107.50000000 216.62515259]
[107.50000000 231.62515259]
[107.50000000 246.62515259]
[107.50000000 261.62515259]
[107.50000000 276.62515259]
[107.50000000 291.62515259]
[107.50000000 306.62515259]
[107.50000000 321.62515259]
[107.50000000 336.62515259]
[122.03988647 340.68646240]
[134.94427490 348.52096558]
[145.25555420 359.54730225]
[152.20857239 372.94723511]
[155.28736877 387.72640991]
[154.26348877 402.78808594]
[149.21287537 417.01458740]
[140.51036072 429.35028076]
[128.80169678 438.87969971]
[114.95575714 444.89572144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[33 52]
[34 51]
[35 50]
[36 49]
[64 123]
[65 122]
[66 121]
[85 120]
[86 119]
[87 118]
[88 117]
[89 114]
[90 113]
[91 112]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
