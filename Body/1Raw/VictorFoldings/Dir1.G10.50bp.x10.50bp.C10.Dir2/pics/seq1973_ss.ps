%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUACCCAAGGGGGGGGGGAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCxxxxxxxxxxCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUCCCCCCCCCCAUUUACCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 399.34652710]
[71.19830322 393.33047485]
[59.48964310 383.80105591]
[50.78712082 371.46539307]
[45.73651886 357.23889160]
[44.71262741 342.17718506]
[47.79142761 327.39804077]
[54.74444962 313.99810791]
[65.05573273 302.97177124]
[77.96011353 295.13726807]
[92.50000000 291.07595825]
[92.50000000 276.07595825]
[92.50000000 261.07595825]
[92.50000000 246.07595825]
[92.50000000 231.07595825]
[92.50000000 216.07595825]
[92.50000000 201.07595825]
[92.50000000 186.07595825]
[92.50000000 171.07595825]
[92.50000000 156.07595825]
[92.50000000 141.07595825]
[92.50000000 126.07595825]
[74.17749023 108.33088684]
[78.67493439 83.22361755]
[69.90872192 71.05178070]
[55.56523514 64.37533569]
[54.40571976 49.52593231]
[40.06223297 42.84948730]
[38.90271378 28.00008583]
[30.13650894 15.82824802]
[21.37030220 3.65641117]
[12.60409451 -8.51542568]
[3.71174431 -20.59541321]
[-5.30578518 -32.58224487]
[-14.32331562 -44.56908035]
[-23.34084511 -56.55591202]
[-36.39996338 -49.13379669]
[-50.30100250 -43.44263077]
[-64.81570435 -39.57587051]
[-79.70571136 -37.59700394]
[-94.72653198 -37.53853607]
[-109.63149261 -39.40142059]
[-124.17585754 -43.15506744]
[-138.12078857 -48.73783875]
[-151.23728943 -56.05806351]
[-163.30998230 -64.99552917]
[-174.14062500 -75.40348816]
[-183.55136108 -87.11102295]
[-191.38766479 -99.92588043]
[-197.52085876 -113.63763428]
[-201.85021973 -128.02113342]
[-204.30467224 -142.84017944]
[-204.84388733 -157.85142517]
[-203.45904541 -172.80838013]
[-200.17285156 -187.46543884]
[-195.03927612 -201.58190918]
[-188.14263916 -214.92599487]
[-179.59616089 -227.27856445]
[-169.54020691 -238.43679810]
[-158.13989258 -248.21745300]
[-145.58242798 -256.45989990]
[-132.07400513 -263.02883911]
[-117.83644867 -267.81637573]
[-103.10356140 -270.74389648]
[-88.11726379 -271.76330566]
[-73.12364197 -270.85791016]
[-58.36891556 -268.04254150]
[-44.09536362 -263.36343384]
[-30.53736687 -256.89746094]
[-17.91756439 -248.75073242]
[-6.44318485 -239.05708313]
[3.69735289 -227.97566223]
[12.33753204 -215.68844604]
[19.33547211 -202.39720154]
[24.57626152 -188.32019043]
[27.97384071 -173.68855286]
[29.47242165 -158.74255371]
[29.04739189 -143.72764587]
[26.70573235 -128.89036560]
[22.48589706 -114.47434998]
[16.45717621 -100.71633911]
[8.71856976 -87.84224701]
[-0.60284853 -76.06347656]
[-11.35401249 -65.57344055]
[-2.33648276 -53.58660889]
[6.68104696 -41.59977722]
[15.69857693 -29.61294365]
[22.27554893 -26.13600731]
[24.77593040 -17.28163338]
[33.54213715 -5.10979605]
[42.30834579 7.06204081]
[51.07455063 19.23387718]
[64.79102325 25.03971100]
[66.57756042 40.75972748]
[80.29402924 46.56555939]
[82.08055878 62.28557587]
[90.84677124 74.45741272]
[98.19907379 72.92672729]
[105.68933868 73.47007751]
[112.74375916 76.04583740]
[118.82189941 80.45668030]
[123.45813751 86.36470032]
[126.29727936 93.31729126]
[141.28997803 93.78533936]
[156.28266907 94.25337982]
[171.27537537 94.72142029]
[186.26806641 95.18946075]
[192.85528564 81.45890045]
[204.46194458 71.59961700]
[219.07710266 67.31979370]
[234.16860962 69.36094666]
[247.12176514 77.36941528]
[255.69236755 89.95769501]
[258.39547729 104.94479370]
[254.76280212 119.73409271]
[245.42370605 131.76327515]
[231.99624634 138.94819641]
[216.80679321 140.04402161]
[202.48704529 134.86091614]
[191.51797485 124.29686737]
[185.80001831 110.18215942]
[170.80732727 109.71411896]
[155.81463623 109.24607849]
[140.82192993 108.77803040]
[125.82923889 108.30998993]
[123.04418182 114.32379150]
[118.88430023 119.48303223]
[113.59777832 123.47990417]
[107.50000000 126.07595825]
[107.50000000 141.07595825]
[107.50000000 156.07595825]
[107.50000000 171.07595825]
[107.50000000 186.07595825]
[107.50000000 201.07595825]
[107.50000000 216.07595825]
[107.50000000 231.07595825]
[107.50000000 246.07595825]
[107.50000000 261.07595825]
[107.50000000 276.07595825]
[107.50000000 291.07595825]
[122.03988647 295.13726807]
[134.94427490 302.97177124]
[145.25555420 313.99810791]
[152.20857239 327.39804077]
[155.28736877 342.17718506]
[154.26348877 357.23889160]
[149.21287537 371.46539307]
[140.51036072 383.80105591]
[128.80169678 393.33047485]
[114.95575714 399.34652710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 97]
[25 96]
[27 94]
[29 92]
[30 91]
[31 90]
[32 89]
[33 87]
[34 86]
[35 85]
[36 84]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
