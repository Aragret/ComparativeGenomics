%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACCCAACGGGGGGGGGGCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGxxxxxxxxxxAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCCCCCCCCCCCAUACACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 381.60571289]
[71.01555634 376.05270386]
[58.81560135 367.18637085]
[49.20452881 355.56408691]
[42.78650284 341.91638184]
[39.96496582 327.10119629]
[40.91728210 312.04980469]
[45.58358765 297.70837402]
[53.67055511 284.97842407]
[64.66983032 274.66015625]
[77.88998413 267.40219116]
[92.50000000 263.66073608]
[92.50000000 248.66073608]
[92.50000000 233.66073608]
[92.50000000 218.66073608]
[92.50000000 203.66073608]
[92.50000000 188.66073608]
[92.50000000 173.66073608]
[92.50000000 158.66073608]
[92.50000000 143.66073608]
[92.50000000 128.66073608]
[82.97752380 124.24713135]
[75.59152222 116.79029846]
[71.26898956 107.22614288]
[70.55244446 96.75503540]
[73.53182983 86.69120026]
[79.83319855 78.29773712]
[72.73679352 65.08255768]
[65.64038849 51.86737061]
[58.54398727 38.65218735]
[51.44758224 25.43700600]
[37.62422562 31.28845787]
[23.31993103 35.83947372]
[8.65673637 39.05123138]
[-6.24025249 40.89632416]
[-21.24393845 41.35900879]
[-36.22631073 40.43534088]
[-51.05954361 38.13319778]
[-65.61708069 34.47222519]
[-79.77471924 29.48365402]
[-93.41167450 23.21004868]
[-106.41159821 15.70493317]
[-118.66356659 7.03233957]
[-130.06304932 -2.73373842]
[-140.51280212 -13.50997829]
[-149.92366028 -25.20443916]
[-158.21533203 -37.71734619]
[-165.31707764 -50.94194031]
[-171.16828918 -64.76539612]
[-175.71907043 -79.06976318]
[-178.93058777 -93.73301697]
[-180.77543640 -108.63003540]
[-181.23786926 -123.63372803]
[-180.31394958 -138.61608887]
[-178.01155090 -153.44927979]
[-174.35034180 -168.00675964]
[-169.36154175 -182.16430664]
[-163.08770752 -195.80116272]
[-155.58236694 -208.80094910]
[-146.90957642 -221.05278015]
[-137.14331055 -232.45210266]
[-126.36688995 -242.90168762]
[-114.67227173 -252.31234741]
[-102.15922546 -260.60379028]
[-88.93451691 -267.70532227]
[-75.11096191 -273.55630493]
[-60.80651855 -278.10687256]
[-46.14321518 -281.31811523]
[-31.24616432 -283.16271973]
[-16.24246407 -283.62490845]
[-1.26012290 -282.70074463]
[13.57303333 -280.39810181]
[28.13044930 -276.73663330]
[42.28792572 -271.74758911]
[55.92466736 -265.47354126]
[68.92433929 -257.96798706]
[81.17601776 -249.29499817]
[92.57518005 -239.52853394]
[103.02457428 -228.75193787]
[112.43504333 -217.05717468]
[120.72629547 -204.54399109]
[127.82759857 -191.31915283]
[133.67835999 -177.49551392]
[138.22865295 -163.19097900]
[141.43968201 -148.52763367]
[143.28402710 -133.63055420]
[143.74597168 -118.62683868]
[142.82154846 -103.64451599]
[140.51866150 -88.81139374]
[136.85696411 -74.25404358]
[131.86769104 -60.09664917]
[125.59339905 -46.46000671]
[118.08763123 -33.46046448]
[109.41442871 -21.20892906]
[99.64778137 -9.80992699]
[88.87101746 0.63928521]
[77.17608643 10.04955769]
[64.66276550 18.34060287]
[71.75917053 31.55578613]
[78.85557556 44.77096939]
[85.95197296 57.98615265]
[93.04837799 71.20133209]
[116.10984802 75.13716125]
[129.12528992 94.57733154]
[144.08657837 95.65440369]
[159.04785156 96.73147583]
[174.00914001 97.80854034]
[179.68804932 83.78694916]
[189.42349243 72.20780945]
[202.26165771 64.20552063]
[216.94480896 60.56407547]
[232.03445435 61.64022446]
[246.05223083 67.32852936]
[257.62484741 77.07172394]
[265.61853027 89.91525269]
[269.25012207 104.60084534]
[268.16387939 119.68975067]
[262.46618652 133.70372009]
[252.71524048 145.26980591]
[239.86634827 153.25488281]
[225.17832947 156.87664795]
[210.09014893 155.78027344]
[196.08000183 150.07319641]
[184.52044678 140.31449890]
[176.54399109 127.46027374]
[172.93206787 112.76982117]
[157.97079468 111.69275665]
[143.00950623 110.61568451]
[128.04823303 109.53861237]
[123.46172333 118.08966064]
[116.35829926 124.70008087]
[107.50000000 128.66073608]
[107.50000000 143.66073608]
[107.50000000 158.66073608]
[107.50000000 173.66073608]
[107.50000000 188.66073608]
[107.50000000 203.66073608]
[107.50000000 218.66073608]
[107.50000000 233.66073608]
[107.50000000 248.66073608]
[107.50000000 263.66073608]
[122.11001587 267.40219116]
[135.33016968 274.66015625]
[146.32945251 284.97842407]
[154.41641235 297.70837402]
[159.08271790 312.04980469]
[160.03503418 327.10119629]
[157.21350098 341.91638184]
[150.79547119 355.56408691]
[141.18440247 367.18637085]
[128.98443604 376.05270386]
[114.96250153 381.60571289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 102]
[28 101]
[29 100]
[30 99]
[31 98]
[104 129]
[105 128]
[106 127]
[107 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
