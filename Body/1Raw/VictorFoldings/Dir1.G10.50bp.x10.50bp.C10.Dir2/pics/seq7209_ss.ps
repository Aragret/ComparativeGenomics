%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCUAUCCGGGGGGGGGGGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUGAAAxxxxxxxxxxCCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCCCCCCCCCCCGGCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[63.45684052 386.79467773]
[49.61090088 380.77865601]
[37.90224075 371.24923706]
[29.19971657 358.91357422]
[24.14911461 344.68704224]
[23.12522316 329.62536621]
[26.20402336 314.84619141]
[33.15704346 301.44628906]
[43.46833038 290.41995239]
[56.37271118 282.58544922]
[70.91259766 278.52410889]
[70.91259766 263.52410889]
[70.91259766 248.52412415]
[70.91259766 233.52412415]
[70.91259766 218.52412415]
[70.91259766 203.52412415]
[70.91259766 188.52412415]
[70.91259766 173.52412415]
[70.91259766 158.52412415]
[70.91259766 143.52412415]
[70.91259766 128.52412415]
[87.21765137 91.25404358]
[81.44137573 77.41082764]
[67.09980011 71.33160400]
[61.43904114 57.21032333]
[67.32303619 43.57528687]
[61.54676056 29.73207092]
[55.77048874 15.88885307]
[49.99421692 2.04563522]
[44.21794510 -11.79758263]
[45.22045517 3.16887903]
[37.64028168 16.11264038]
[24.09692001 22.56069374]
[9.27058697 20.28477097]
[-1.71514809 10.07136726]
[-5.06391716 -4.55004692]
[0.38152182 -18.52671242]
[12.73937511 -27.02868080]
[27.73944664 -27.11780167]
[13.51266861 -31.87161636]
[-0.71411097 -36.62543106]
[-14.94089031 -41.37924576]
[-28.96813583 -34.09832001]
[-44.00986099 -38.94827271]
[-51.14207840 -53.05171204]
[-46.13336945 -68.04132080]
[-31.95530891 -75.02402496]
[-17.01949310 -69.85711670]
[-10.18707561 -55.60602570]
[4.03970385 -50.85221100]
[18.26648331 -46.09839630]
[32.49326324 -41.34458160]
[44.93270111 -49.72672653]
[45.86833191 -64.69751740]
[32.35429764 -69.75622559]
[20.83189201 -78.41612244]
[12.23386765 -89.96488953]
[7.25306702 -103.45684052]
[6.28658247 -117.79031372]
[9.40411854 -131.79765320]
[16.34304619 -144.34031677]
[26.53050613 -154.40142822]
[39.13069153 -161.16819763]
[53.11340714 -164.09759521]
[54.36028290 -179.04568481]
[55.60715485 -193.99375916]
[56.85403061 -208.94184875]
[42.75934219 -214.37475586]
[30.76704979 -223.55961609]
[21.84931755 -235.75184631]
[16.72906494 -249.96310425]
[15.82136917 -265.04132080]
[19.19981003 -279.76419067]
[26.59051514 -292.93820190]
[37.39435196 -303.49536133]
[50.73550415 -310.57986450]
[65.53246307 -313.61743164]
[80.58570099 -312.36178589]
[94.67492676 -306.91473389]
[106.65798187 -297.71783447]
[115.56346130 -285.51663208]
[120.66943359 -271.30023193]
[121.56198883 -256.22109985]
[118.16875458 -241.50164795]
[110.76481628 -228.33508301]
[99.95037842 -217.78877258]
[86.60211945 -210.71766663]
[71.80211639 -207.69497681]
[70.55524445 -192.74688721]
[69.30837250 -177.79879761]
[68.06149292 -162.85072327]
[82.54157257 -156.95776367]
[94.51327515 -146.87390137]
[102.80181122 -133.57299805]
[106.58900452 -118.34543610]
[105.49404907 -102.67279053]
[99.61174774 -88.08379364]
[89.50446320 -76.00515747]
[76.14836121 -67.62206268]
[60.83912277 -63.76188660]
[59.90349579 -48.79109573]
[58.06116104 -17.57385445]
[63.83743286 -3.73063731]
[69.61370850 10.11258030]
[75.38997650 23.95579720]
[81.16625214 37.79901505]
[94.99661255 43.20796967]
[101.05177307 57.16467285]
[95.28459167 71.63455200]
[101.06086731 85.47776794]
[112.56266785 95.10630035]
[127.20616913 98.35712433]
[141.84967041 101.60794830]
[152.16998291 90.23311615]
[166.79994202 85.55765533]
[181.80415344 88.83924103]
[193.14659119 99.19515228]
[197.77616882 113.83969116]
[194.44755554 128.83355713]
[184.05615234 140.14347839]
[169.39717102 144.72712708]
[154.41381836 141.35153198]
[143.13652039 130.92472839]
[138.59884644 116.25144958]
[123.95534515 113.00062561]
[109.31184387 109.74980164]
[103.46202850 114.44338226]
[105.74176788 129.26911926]
[91.76240540 123.83054352]
[85.91259766 128.52412415]
[85.91259766 143.52412415]
[85.91259766 158.52412415]
[85.91259766 173.52412415]
[85.91259766 188.52412415]
[85.91259766 203.52412415]
[85.91259766 218.52412415]
[85.91259766 233.52412415]
[85.91259766 248.52412415]
[85.91259766 263.52410889]
[85.91259766 278.52410889]
[100.45248413 282.58544922]
[113.35686493 290.41995239]
[123.66815186 301.44628906]
[130.62117004 314.84619141]
[133.69996643 329.62536621]
[132.67607117 344.68704224]
[127.62547302 358.91357422]
[118.92295074 371.24923706]
[107.21428680 380.77865601]
[93.36835480 386.79467773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 110]
[23 109]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[39 52]
[40 51]
[41 50]
[42 49]
[53 101]
[54 100]
[64 91]
[65 90]
[66 89]
[67 88]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
