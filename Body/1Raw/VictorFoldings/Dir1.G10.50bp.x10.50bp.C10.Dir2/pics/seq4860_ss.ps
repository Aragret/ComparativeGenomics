%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCUUCAAGGGGGGGGGGCAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUxxxxxxxxxxAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCCCCCCCCCCCAUACUCUUCAA\
) } def
/len { sequence length } bind def

/coor [
[79.18784332 158.47727966]
[65.79930115 151.79817200]
[54.39799881 142.10932922]
[45.64639664 129.97372437]
[40.05301285 116.09648895]
[37.94285202 101.28397369]
[39.43852615 86.39685059]
[44.45312119 72.30013275]
[52.69527435 59.81292725]
[63.68606567 49.66078568]
[76.78688049 42.43360901]
[91.23649597 38.55133057]
[90.92852020 23.55449295]
[90.62054443 8.55765438]
[90.31256866 -6.43918419]
[90.00458527 -21.43602180]
[89.69660950 -36.43286133]
[89.38863373 -51.42969894]
[89.08065796 -66.42653656]
[88.77267456 -81.42337036]
[88.46469879 -96.42021179]
[88.15672302 -111.41705322]
[87.84874725 -126.41388702]
[87.54076385 -141.41072083]
[87.23278809 -156.40756226]
[72.24037170 -157.01448059]
[57.31284332 -158.53425598]
[42.50573349 -160.96125793]
[27.87412453 -164.28645325]
[13.47244930 -168.49745178]
[-0.64571857 -173.57861328]
[-14.42785740 -179.51103210]
[-27.82269669 -186.27261353]
[-40.78040314 -193.83824158]
[-53.25278091 -202.17974854]
[-65.19342041 -211.26611328]
[-76.55791473 -221.06350708]
[-87.30397797 -231.53552246]
[-97.39163208 -242.64318848]
[-106.78335571 -254.34516907]
[-115.44420624 -266.59793091]
[-123.34197235 -279.35592651]
[-130.44726562 -292.57165527]
[-136.73365784 -306.19598389]
[-142.17776489 -320.17819214]
[-146.75932312 -334.46630859]
[-150.46130371 -349.00717163]
[-153.26992798 -363.74664307]
[-155.17474365 -378.62994385]
[-156.16867065 -393.60168457]
[-156.24800110 -408.60617065]
[-155.41246033 -423.58758545]
[-153.66513062 -438.49020386]
[-151.01254272 -453.25854492]
[-147.46453857 -467.83773804]
[-143.03433228 -482.17349243]
[-137.73838806 -496.21252441]
[-131.59643555 -509.90255737]
[-124.63128662 -523.19268799]
[-116.86888123 -536.03344727]
[-108.33808136 -548.37713623]
[-99.07063293 -560.17779541]
[-89.10100555 -571.39154053]
[-78.46628571 -581.97656250]
[-67.20603180 -591.89361572]
[-55.36214447 -601.10571289]
[-42.97867966 -609.57867432]
[-30.10169983 -617.28088379]
[-16.77911377 -624.18377686]
[-3.06048059 -630.26159668]
[11.00316525 -635.49176025]
[25.35950470 -639.85485840]
[39.95513153 -643.33453369]
[54.73574829 -645.91802979]
[69.64636993 -647.59558105]
[84.63153076 -648.36096191]
[99.63548279 -648.21142578]
[114.60240173 -647.14746094]
[129.47662354 -645.17297363]
[144.20280457 -642.29541016]
[158.72616577 -638.52545166]
[172.99267578 -633.87701416]
[186.94926453 -628.36755371]
[200.54402161 -622.01745605]
[213.72636414 -614.85040283]
[226.44723511 -606.89300537]
[238.65934753 -598.17492676]
[250.31724548 -588.72851562]
[261.37756348 -578.58898926]
[271.79916382 -567.79406738]
[281.54327393 -556.38385010]
[290.57366943 -544.40081787]
[298.85668945 -531.88952637]
[306.36160278 -518.89654541]
[313.06042480 -505.47018433]
[318.92828369 -491.66043091]
[323.94329834 -477.51864624]
[328.08685303 -463.09741211]
[331.34353638 -448.45040894]
[333.70120239 -433.63211060]
[335.15112305 -418.69763184]
[335.68786621 -403.70254517]
[335.30941772 -388.70260620]
[334.01724243 -373.75366211]
[331.81613159 -358.91128540]
[328.71426392 -344.23071289]
[324.72314453 -329.76657104]
[319.85766602 -315.57263184]
[314.13592529 -301.70169067]
[307.57919312 -288.20538330]
[300.21188354 -275.13391113]
[292.06137085 -262.53591919]
[283.15798950 -250.45822144]
[273.53485107 -238.94577026]
[263.22778320 -228.04141235]
[252.27510071 -217.78569031]
[240.71757507 -208.21678162]
[228.59817505 -199.37025452]
[215.96199036 -191.27902222]
[202.85604858 -183.97320557]
[189.32908630 -177.47996521]
[175.43142700 -171.82347107]
[161.21478271 -167.02474976]
[146.73202515 -163.10166931]
[132.03703308 -160.06880188]
[117.18448639 -157.93745422]
[102.22962952 -156.71554565]
[102.53760529 -141.71870422]
[102.84558105 -126.72186279]
[103.15355682 -111.72502899]
[103.46154022 -96.72818756]
[103.76951599 -81.73135376]
[104.07749176 -66.73451233]
[104.38546753 -51.73767471]
[104.69345093 -36.74083710]
[105.00142670 -21.74399948]
[105.30940247 -6.74716139]
[105.61737823 8.24967670]
[105.92536163 23.24651527]
[106.23333740 38.24335098]
[120.83015442 41.52912903]
[134.21664429 48.21236038]
[145.61495972 57.90471268]
[154.36282349 70.04301453]
[159.95193481 83.92196655]
[162.05754089 98.73513031]
[160.55728149 113.62179565]
[155.53834534 127.71695709]
[147.29235840 140.20162964]
[136.29843140 150.35038757]
[123.19539642 157.57353210]
[108.74458313 161.45137024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[25 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
