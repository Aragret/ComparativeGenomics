%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUUAAUGGGGGGGGGGCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUxxxxxxxxxxCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAACCCCCCCCCCACUAACUAAU\
) } def
/len { sequence length } bind def

/coor [
[219.89967346 138.43997192]
[209.99362183 132.52209473]
[200.45361328 126.03041077]
[191.31283569 118.98750305]
[182.60308838 111.41784668]
[174.35469055 103.34778595]
[166.59634399 94.80536652]
[159.35505676 85.82031250]
[152.65602112 76.42385864]
[139.87866211 84.28128815]
[127.10130310 92.13871002]
[114.32394409 99.99613953]
[107.50328827 112.20147705]
[93.53347778 112.78121948]
[80.75612640 120.63864136]
[67.97876740 128.49606323]
[59.63402939 144.87731934]
[42.11305618 144.75288391]
[29.50192833 152.87442017]
[16.89080048 160.99595642]
[4.27967215 169.11750793]
[-8.33145618 177.23904419]
[-18.37437057 190.89833069]
[-34.28000641 185.02917480]
[-33.04332733 168.12039185]
[-16.45299911 164.62791443]
[-3.84187007 156.50637817]
[8.76925850 148.38482666]
[21.38038635 140.26329041]
[33.99151611 132.14175415]
[36.87789536 120.35293579]
[47.37375259 113.49320221]
[60.12134171 115.71871185]
[72.89869690 107.86128998]
[85.67605591 100.00386047]
[92.49671173 87.79852295]
[106.46652222 87.21878052]
[119.24387360 79.36135864]
[132.02124023 71.50392914]
[144.79858398 63.64650345]
[134.97468567 43.59277725]
[127.50025177 22.55113602]
[122.47245789 0.79576796]
[119.95657349 -21.38985825]
[119.98516846 -43.71669769]
[122.55764771 -65.89389038]
[127.64028168 -87.63254547]
[135.16662598 -108.64952087]
[145.03845215 -128.67108154]
[157.12693787 -147.43652344]
[171.27442932 -164.70146179]
[187.29644775 -180.24116516]
[204.98410034 -193.85330200]
[224.10684204 -205.36074829]
[244.41545105 -214.61375427]
[265.64523315 -221.49200439]
[287.51959229 -225.90609741]
[285.96200562 -240.82501221]
[284.40441895 -255.74391174]
[282.84683228 -270.66284180]
[267.90075684 -272.58923340]
[253.80200195 -277.91107178]
[241.31092834 -286.34136963]
[231.10116577 -297.42547607]
[223.72329712 -310.56564331]
[219.57521057 -325.05322266]
[218.88059998 -340.10693359]
[221.67694092 -354.91494751]
[227.81341553 -368.67868042]
[236.95910645 -380.65588379]
[248.62077332 -390.20062256]
[262.16952515 -396.79818726]
[276.87472534 -400.09274292]
[291.94329834 -399.90664673]
[306.56265259 -396.24993896]
[319.94433594 -389.31979370]
[331.36676025 -379.48995972]
[340.21386719 -367.29055786]
[346.00854492 -353.37948608]
[348.43835449 -338.50692749]
[347.37219238 -323.47497559]
[342.86758423 -309.09423828]
[335.16748047 -296.14028931]
[324.68707275 -285.31170654]
[311.99163818 -277.19247437]
[297.76574707 -272.22039795]
[299.32333374 -257.30151367]
[300.88092041 -242.38258362]
[302.43850708 -227.46366882]
[313.96246338 -227.88258362]
[325.49121094 -227.62135315]
[336.98461914 -226.68086243]
[348.40270996 -225.06437683]
[359.70574951 -222.77749634]
[370.85440063 -219.82818604]
[381.80990601 -216.22666931]
[392.53411865 -211.98547363]
[402.98974609 -207.11935425]
[413.14041138 -201.64518738]
[422.95077515 -195.58204651]
[432.38671875 -188.95098877]
[441.41537476 -181.77508545]
[450.00534058 -174.07928467]
[458.12673950 -165.89033508]
[465.75131226 -157.23674011]
[472.85250854 -148.14857483]
[479.40557861 -138.65747070]
[485.38778687 -128.79640198]
[490.77822876 -118.59970856]
[495.55819702 -108.10283661]
[499.71102905 -97.34229279]
[503.22229004 -86.35552216]
[506.07968140 -75.18073273]
[508.27334595 -63.85680008]
[509.79556274 -52.42311478]
[510.64102173 -40.91945648]
[510.80682373 -29.38583946]
[510.29235840 -17.86239243]
[509.09936523 -6.38920259]
[507.23202515 4.99381304]
[504.69677734 16.24705124]
[501.50247192 27.33135986]
[497.66015625 38.20817566]
[493.18325806 48.83964920]
[488.08724976 59.18879318]
[482.38992310 69.21959686]
[476.11105347 78.89715576]
[469.27249146 88.18779755]
[461.89797974 97.05918884]
[454.01321411 105.48045349]
[445.64553833 113.42229462]
[436.82415771 120.85707092]
[427.57965088 127.75889587]
[417.94424438 134.10375977]
[407.95138550 139.86958313]
[397.63589478 145.03627014]
[387.03363037 149.58584595]
[376.18145752 153.50248718]
[365.11712646 156.77253723]
[353.87915039 159.38459778]
[342.50659180 161.32958984]
[331.03903198 162.60070801]
[319.51635742 163.19354248]
[307.97866821 163.10600281]
[296.46606445 162.33839417]
[285.01864624 160.89334106]
[273.67620850 158.77587891]
[262.47824097 155.99336243]
[251.46365356 152.55545044]
[240.67082214 148.47409058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 40]
[10 39]
[11 38]
[12 37]
[14 35]
[15 34]
[16 33]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[57 89]
[58 88]
[59 87]
[60 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
