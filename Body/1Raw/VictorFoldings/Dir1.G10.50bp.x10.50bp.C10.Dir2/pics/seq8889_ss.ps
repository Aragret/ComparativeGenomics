%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCAUACUAGGGGGGGGGGGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACxxxxxxxxxxACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCCCCCCCCCCCUCCUAAUACUA\
) } def
/len { sequence length } bind def

/coor [
[83.79631805 426.42462158]
[71.10083771 418.33029175]
[60.36596298 407.77301025]
[52.06098938 395.21429443]
[46.54896545 381.20318604]
[44.07085800 366.35217285]
[44.73499680 351.31045532]
[48.51235199 336.73565674]
[55.23778915 323.26486206]
[64.61730194 311.48696899]
[76.24085999 301.91690063]
[89.60032654 294.97296143]
[104.11169434 290.95874023]
[103.20018005 275.98645020]
[102.28866577 261.01419067]
[101.37715149 246.04190063]
[100.46564484 231.06962585]
[99.55413055 216.09733582]
[98.64261627 201.12506104]
[97.73110199 186.15278625]
[96.81958771 171.18051147]
[95.90807343 156.20822144]
[94.99655914 141.23594666]
[94.08504486 126.26366425]
[84.55011749 122.04695129]
[77.33225250 114.52378082]
[73.51394653 104.82243347]
[73.66783905 94.39785004]
[77.77084351 84.81343842]
[68.23293304 73.23638916]
[58.69501877 61.65933228]
[49.15710449 50.08227921]
[36.84564972 41.51325607]
[22.67667580 36.58982468]
[8.50770092 31.66639900]
[-7.06752157 34.44543076]
[-16.55007935 22.95933342]
[-30.71905327 18.03590584]
[-40.04729080 29.96330070]
[-52.74427414 38.21347046]
[-67.43273163 41.89149857]
[-82.51937103 40.59842300]
[-96.36770630 34.47450256]
[-107.47557068 24.18401718]
[-114.63806915 10.84320259]
[-117.07826233 -4.10083246]
[-114.53146362 -19.02706909]
[-107.27392578 -32.31642151]
[-96.09289551 -42.52735901]
[-82.20120239 -48.55227661]
[-67.10571289 -49.73763275]
[-52.44388580 -45.95485687]
[-39.80611038 -37.61426926]
[-30.56324768 -25.62059593]
[-25.71788979 -11.27482224]
[-25.79562569 3.86693096]
[-11.62665081 8.79035950]
[2.93511200 5.65917206]
[13.43112946 17.49742317]
[27.60010338 22.42085075]
[41.76908112 27.34428024]
[32.19578552 15.79646397]
[25.27553177 2.48819304]
[21.32012367 -11.98090363]
[20.50778008 -26.95889091]
[22.87510490 -41.77090454]
[28.31542969 -55.74956131]
[36.58363342 -68.26502228]
[47.30717468 -78.75338745]
[60.00288010 -86.74206543]
[74.09872437 -91.87112427]
[88.95958710 -93.90946198]
[103.91587830 -92.76522827]
[118.29371643 -88.48999023]
[131.44528198 -81.27636719]
[142.77799988 -71.44939423]
[151.78126526 -59.45183563]
[158.04939270 -45.82426834]
[161.29997253 -31.18071556]
[161.38655090 -16.18096542]
[158.30522156 -1.50086319]
[152.19480896 12.19814777]
[143.33064270 24.29883385]
[132.11212158 34.25597000]
[119.04470062 41.62092209]
[104.71716309 46.06184387]
[89.77507782 47.37864304]
[74.89167786 45.51198959]
[60.73415756 40.54436493]
[70.27207184 52.12141800]
[79.80998993 63.69847107]
[89.34790039 75.27552795]
[108.31919861 74.39614105]
[123.15041351 86.25862885]
[137.67156982 82.49884033]
[152.19271851 78.73905182]
[166.71388245 74.97926331]
[166.39526367 59.91290283]
[169.56036377 45.17930603]
[176.03849792 31.57304001]
[185.48030090 19.82786942]
[197.37660217 10.57719803]
[211.08583069 4.31990337]
[225.86866760 1.39343345]
[240.92790222 1.95560873]
[255.45141602 5.97611189]
[268.65594482 13.23812199]
[279.82943726 23.35000801]
[288.36926270 35.76644897]
[293.81491089 49.81784439]
[295.87268066 64.74641418]
[294.43164062 79.74708557]
[289.56948853 94.01088715]
[281.54840088 106.76859283]
[270.80096436 117.33219147]
[257.90679932 125.13200378]
[243.56124878 129.74740601]
[228.53796387 130.92947388]
[213.64710999 128.61447144]
[199.69174194 122.92724609]
[187.42445374 114.17450714]
[177.50682068 102.82826996]
[170.47366333 89.50041962]
[155.95251465 93.26020813]
[141.43135071 97.01999664]
[126.91020203 100.77978516]
[121.77994537 115.82405853]
[109.05732727 125.35214996]
[109.96884155 140.32443237]
[110.88035583 155.29670715]
[111.79187012 170.26899719]
[112.70337677 185.24127197]
[113.61489105 200.21354675]
[114.52640533 215.18582153]
[115.43791962 230.15811157]
[116.34943390 245.13038635]
[117.26094818 260.10266113]
[118.17246246 275.07495117]
[119.08397675 290.04721069]
[133.97512817 292.27142334]
[148.07830811 297.54342651]
[160.77697754 305.63278198]
[171.51600647 316.18582153]
[179.82591248 328.74127197]
[185.34344482 342.75021362]
[187.82739258 357.60025024]
[187.16917419 372.64221191]
[183.39755249 387.21850586]
[176.67742920 400.69195557]
[167.30253601 412.47351074]
[155.68275452 422.04818726]
[142.32601929 428.99737549]
[127.81623077 433.01730347]
[112.78770447 433.93222046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[29 92]
[30 91]
[31 90]
[32 89]
[33 61]
[34 60]
[35 59]
[37 57]
[38 56]
[94 126]
[95 125]
[96 124]
[97 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
