%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUUCCUCACGGGGGGGGGGUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUxxxxxxxxxxCCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUCCCCCCCCCCACCUUUCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[96.33895874 552.11657715]
[82.17835999 546.96160889]
[69.58861542 538.67938232]
[59.24867630 527.71661377]
[51.71616364 514.66448975]
[47.39729691 500.22689819]
[46.52499008 485.18243408]
[49.14628220 470.34243774]
[55.11980820 456.50720215]
[64.12342834 444.42285156]
[75.67158508 434.74105835]
[89.14149475 427.98397827]
[103.80675507 424.51602173]
[103.80675507 409.51602173]
[103.80675507 394.51602173]
[103.80675507 379.51602173]
[103.80675507 364.51602173]
[103.80675507 349.51602173]
[103.80675507 334.51602173]
[103.80675507 319.51602173]
[103.80675507 304.51602173]
[103.80675507 289.51602173]
[91.42521667 278.17385864]
[91.04176331 261.04986572]
[103.37907410 248.68757629]
[103.07506561 233.69065857]
[102.77106476 218.69372559]
[102.46705627 203.69680786]
[102.16305542 188.69989014]
[101.85905457 173.70297241]
[93.33550262 165.06773376]
[92.99356842 152.53744507]
[101.56491852 142.84793091]
[101.56491852 127.84792328]
[80.78604126 116.94815063]
[77.03327179 95.79022217]
[90.16573334 81.35665131]
[88.34607697 66.46743774]
[86.52642059 51.57821655]
[84.70676422 36.68899536]
[82.88710785 21.79977608]
[67.88270569 22.23866844]
[52.90181732 21.29124451]
[38.07225418 18.96558380]
[23.52053833 15.28152943]
[9.37082577 10.27051449]
[-4.25616264 3.97529221]
[-17.24416351 -3.55042887]
[-29.48236465 -12.24244022]
[-40.86635208 -22.02658272]
[-51.29900360 -32.81938171]
[-60.69130325 -44.52875137]
[-68.96311951 -57.05479050]
[-76.04388428 -70.29062653]
[-81.87317657 -84.12334442]
[-86.40126801 -98.43491364]
[-89.58952332 -113.10323334]
[-91.41074371 -128.00315857]
[-91.84938049 -143.00756836]
[-90.90171051 -157.98844910]
[-88.57579803 -172.81796265]
[-84.89150238 -187.36961365]
[-79.88025665 -201.51925659]
[-73.58480072 -215.14613342]
[-66.05886841 -228.13400269]
[-57.36665344 -240.37207031]
[-47.58232117 -251.75588989]
[-36.78934860 -262.18835449]
[-25.07982254 -271.58047485]
[-12.55364513 -279.85208130]
[0.68231326 -286.93261719]
[14.51512432 -292.76168823]
[28.82677078 -297.28952026]
[43.49514389 -300.47753906]
[58.39510345 -302.29852295]
[73.39951324 -302.73690796]
[88.38037109 -301.78897095]
[103.20986176 -299.46282959]
[117.76145172 -295.77828979]
[131.91099548 -290.76681519]
[145.53778076 -284.47113037]
[158.52552795 -276.94497681]
[170.76344299 -268.25256348]
[182.14709473 -258.46801758]
[192.57939148 -247.67488098]
[201.97129822 -235.96520996]
[210.24270630 -223.43888855]
[217.32302856 -210.20280457]
[223.15185547 -196.36990356]
[227.67947388 -182.05818176]
[230.86723328 -167.38975525]
[232.68795776 -152.48976135]
[233.12609863 -137.48535156]
[232.17793274 -122.50450134]
[229.85151672 -107.67505646]
[226.16674805 -93.12352753]
[221.15501404 -78.97406006]
[214.85911560 -65.34738922]
[207.33274841 -52.35976410]
[198.64012146 -40.12199783]
[188.85540771 -28.73849678]
[178.06208801 -18.30638695]
[166.35224915 -8.91467285]
[153.82580566 -0.64348090]
[140.58961487 6.43661928]
[126.75659943 12.26522160]
[112.44480896 16.79259682]
[97.77632141 19.98011971]
[99.59598541 34.86933899]
[101.41564178 49.75855637]
[103.23529816 64.64777374]
[105.05495453 79.53699493]
[119.91301727 85.75267029]
[127.78748322 102.41070557]
[142.78054810 102.86667633]
[158.79615784 97.30460358]
[168.57443237 111.15458679]
[157.97261047 124.38476562]
[142.32458496 117.85974121]
[127.33152008 117.40377808]
[116.56491852 127.84792328]
[116.56491852 142.84793091]
[126.14691925 158.54077148]
[116.85597229 173.39897156]
[117.15997314 188.39588928]
[117.46398163 203.39280701]
[117.76798248 218.38972473]
[118.07199097 233.38664246]
[118.37599182 248.38356018]
[129.12429810 256.55895996]
[133.12498474 269.25265503]
[129.12551880 281.74218750]
[118.80675507 289.51602173]
[118.80675507 304.51602173]
[118.80675507 319.51602173]
[118.80675507 334.51602173]
[118.80675507 349.51602173]
[118.80675507 364.51602173]
[118.80675507 379.51602173]
[118.80675507 394.51602173]
[118.80675507 409.51602173]
[118.80675507 424.51602173]
[133.47201538 427.98397827]
[146.94194031 434.74105835]
[158.49009705 444.42285156]
[167.49371338 456.50720215]
[173.46723938 470.34243774]
[176.08853149 485.18243408]
[175.21621704 500.22689819]
[170.89735413 514.66448975]
[163.36483765 527.71661377]
[153.02490234 538.67938232]
[140.43516541 546.96160889]
[126.27455902 552.11657715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 129]
[26 128]
[27 127]
[28 126]
[29 125]
[30 124]
[33 122]
[34 121]
[37 112]
[38 111]
[39 110]
[40 109]
[41 108]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
