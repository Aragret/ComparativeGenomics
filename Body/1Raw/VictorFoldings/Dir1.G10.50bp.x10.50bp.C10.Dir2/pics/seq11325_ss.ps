%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUCCUCCGGGGGGGGGGCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUxxxxxxxxxxAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCCCCCCCCCCCAGGAUACUCC\
) } def
/len { sequence length } bind def

/coor [
[85.05905151 350.13757324]
[71.21311188 344.12155151]
[59.50444794 334.59213257]
[50.80192184 322.25646973]
[45.75131989 308.02993774]
[44.72742844 292.96826172]
[47.80622864 278.18911743]
[54.75925064 264.78918457]
[65.07053375 253.76284790]
[77.97491455 245.92832947]
[92.51480103 241.86701965]
[92.51480103 226.86701965]
[92.51480103 211.86701965]
[92.51480103 196.86701965]
[92.51480103 181.86701965]
[92.51480103 166.86701965]
[92.51480103 151.86701965]
[92.51480103 136.86701965]
[92.51480103 121.86702728]
[92.51480103 106.86702728]
[89.34870911 99.39307404]
[92.67408752 91.55577850]
[92.98614502 76.55902863]
[82.32555389 65.20166016]
[82.85565948 49.99726868]
[93.74887085 39.90402222]
[94.06092834 24.90726662]
[79.10907745 23.64441490]
[64.26742554 21.43579865]
[49.59574127 18.29030991]
[35.15309143 14.22061539]
[20.99763870 9.24310207]
[7.18637848 3.37781191]
[-6.22507381 -3.35163641]
[-19.18271446 -10.91814613]
[-31.63436890 -19.29124832]
[-43.52989578 -28.43722916]
[-54.82139969 -38.31925964]
[-65.46340942 -48.89754486]
[-75.41307068 -60.12949753]
[-84.63032532 -71.96987915]
[-93.07805634 -84.37102509]
[-100.72225189 -97.28298950]
[-107.53211975 -110.65378571]
[-113.48025513 -124.42957306]
[-118.54268646 -138.55487061]
[-122.69905090 -152.97282410]
[-125.93259430 -167.62535095]
[-128.23030090 -182.45347595]
[-129.58293152 -197.39746094]
[-129.98501587 -212.39715576]
[-129.43495178 -227.39216614]
[-127.93495941 -242.32208252]
[-125.49105835 -257.12680054]
[-122.11310577 -271.74673462]
[-117.81469727 -286.12295532]
[-112.61314392 -300.19763184]
[-106.52939606 -313.91406250]
[-99.58793640 -327.21701050]
[-91.81671906 -340.05294800]
[-83.24704742 -352.37011719]
[-73.91342163 -364.11898804]
[-63.85342407 -375.25222778]
[-53.10756683 -385.72500610]
[-41.71911621 -395.49514771]
[-29.73393059 -404.52331543]
[-17.20027161 -412.77316284]
[-4.16860914 -420.21145630]
[9.30858421 -426.80825806]
[23.17704010 -432.53701782]
[37.38091660 -437.37463379]
[51.86301422 -441.30163574]
[66.56501770 -444.30221558]
[81.42774200 -446.36428833]
[96.39131927 -447.47955322]
[111.39550781 -447.64352417]
[126.37988281 -446.85556030]
[141.28411865 -445.11877441]
[156.04818726 -442.44021606]
[170.61265564 -438.83065796]
[184.91885376 -434.30462646]
[198.90919495 -428.88034058]
[212.52734375 -422.57965088]
[225.71846008 -415.42791748]
[238.42941284 -407.45397949]
[250.60903931 -398.68988037]
[262.20828247 -389.17095947]
[273.18045044 -378.93551636]
[283.48138428 -368.02481079]
[293.06951904 -356.48272705]
[301.90634155 -344.35577393]
[309.95623779 -331.69274902]
[317.18676758 -318.54467773]
[323.56881714 -304.96447754]
[329.07672119 -291.00683594]
[333.68829346 -276.72796631]
[337.38494873 -262.18536377]
[340.15182495 -247.43759155]
[341.97775269 -232.54402161]
[342.85537720 -217.56462097]
[342.78118896 -202.55972290]
[341.75549316 -187.58973694]
[339.78237915 -172.71495056]
[336.86984253 -157.99525452]
[333.02957153 -143.48991394]
[328.27703857 -129.25733948]
[322.63140869 -115.35485077]
[316.11535645 -101.83842468]
[308.75518799 -88.76248169]
[300.58047485 -76.17967987]
[291.62420654 -64.14068604]
[281.92239380 -52.69396973]
[271.51409912 -41.88563156]
[260.44125366 -31.75919342]
[248.74845886 -22.35542679]
[236.48275757 -13.71219921]
[223.69357300 -5.86431456]
[210.43240356 1.15662694]
[196.75262451 7.32235384]
[182.70933533 12.60803890]
[168.35906982 16.99239922]
[153.75962830 20.45777893]
[138.96978760 22.99022484]
[124.04911804 24.57954025]
[109.05767822 25.21932220]
[108.74562073 40.21607590]
[119.20953369 50.75372696]
[119.10670471 65.96701050]
[107.98289490 76.87107849]
[107.67083740 91.86783600]
[107.51480103 106.86702728]
[107.51480103 121.86702728]
[107.51480103 136.86701965]
[107.51480103 151.86701965]
[107.51480103 166.86701965]
[107.51480103 181.86701965]
[107.51480103 196.86701965]
[107.51480103 211.86701965]
[107.51480103 226.86701965]
[107.51480103 241.86701965]
[122.05468750 245.92832947]
[134.95907593 253.76284790]
[145.27035522 264.78918457]
[152.22337341 278.18911743]
[155.30216980 292.96826172]
[154.27828979 308.02993774]
[149.22767639 322.25646973]
[140.52516174 334.59213257]
[128.81649780 344.12155151]
[114.97055817 350.13757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[26 126]
[27 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
