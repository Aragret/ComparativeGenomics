%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACAGUGAAAUGGGGGGGGGGGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCxxxxxxxxxxCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACACCCCCCCCCCUUACAGUCAAAU\
) } def
/len { sequence length } bind def

/coor [
[253.51763916 237.01113892]
[243.67897034 226.54708862]
[234.66618347 215.36349487]
[226.53170776 203.52536011]
[219.32289124 191.10151672]
[213.08171082 178.16419983]
[207.84448242 164.78862000]
[203.64172363 151.05258179]
[200.49790955 137.03593445]
[198.43135071 122.82019043]
[197.45411682 108.48803711]
[182.45487976 108.33602905]
[167.45565796 108.18401337]
[152.45642090 108.03200531]
[137.45719910 107.87999725]
[122.45796204 107.72798920]
[107.45873260 107.57597351]
[92.48645782 108.48748779]
[77.61643982 110.45793915]
[64.95225525 119.94103241]
[51.31887817 113.94268036]
[36.44886398 115.91313171]
[21.57884979 117.88358307]
[6.70883465 119.85403442]
[-8.16117954 121.82448578]
[4.05243969 130.53237915]
[8.96311378 144.70578003]
[4.75488138 159.10337830]
[-7.01605797 168.40095520]
[-21.99682617 169.16029358]
[-34.64755630 161.10057068]
[-40.29001999 147.20227051]
[-36.83764648 132.60498047]
[-25.56834602 122.70727539]
[-40.56141281 122.25130463]
[-55.55448151 121.79534149]
[-70.54755402 121.33937073]
[-84.72827911 129.57582092]
[-98.81499481 121.17960358]
[-98.31649780 104.78803253]
[-83.74559021 97.26335144]
[-70.09158325 106.34630585]
[-55.09851456 106.80226898]
[-40.10544586 107.25823975]
[-25.11237907 107.71420288]
[-10.13163090 106.95446777]
[4.73838329 104.98401642]
[19.60839653 103.01356506]
[34.47841263 101.04311371]
[49.34842682 99.07266235]
[60.94900894 89.73051453]
[75.64598846 95.58792877]
[90.51600647 93.61747742]
[78.82540894 84.21907806]
[75.74394226 69.53900146]
[82.66873169 56.23308563]
[96.46011353 50.33412933]
[110.86519623 54.51667404]
[119.35281372 66.88439178]
[118.07475281 81.82984161]
[107.61074829 92.57674408]
[122.60997772 92.72875977]
[137.60920715 92.88076782]
[152.60842896 93.03277588]
[167.60766602 93.18478394]
[182.60688782 93.33679962]
[197.60612488 93.48880768]
[199.04864502 77.84423065]
[201.78979492 62.37462616]
[205.81044006 47.18760300]
[211.08256531 32.38879013]
[217.56941223 18.08111572]
[225.22584534 4.36408472]
[233.99850464 -8.66691017]
[243.82635498 -20.92125130]
[254.64094543 -32.31373215]
[266.36703491 -42.76514053]
[278.92300415 -52.20281601]
[292.22143555 -60.56114960]
[306.16986084 -67.78205872]
[320.67114258 -73.81534576]
[335.62445068 -78.61911774]
[350.92568970 -82.15999603]
[366.46841431 -84.41341400]
[382.14453125 -85.36375427]
[397.84497070 -85.00446320]
[413.46047974 -83.33809662]
[428.88247681 -80.37631989]
[444.00366211 -76.13977814]
[458.71890259 -70.65800476]
[472.92581177 -63.96918869]
[486.52557373 -56.11991882]
[499.42367554 -47.16484451]
[511.53039551 -37.16631317]
[522.76153564 -26.19392204]
[533.03900146 -14.32404232]
[542.29138184 -1.63928688]
[550.45434570 11.77206993]
[557.47113037 25.81669998]
[563.29296875 40.39688110]
[567.87951660 55.41115952]
[571.19879150 70.75507355]
[586.06884766 68.78462219]
[600.93884277 66.81417084]
[615.80883789 64.84371948]
[630.10699463 53.28328323]
[646.05694580 60.54189682]
[660.88397217 58.27047729]
[675.71099854 55.99906158]
[690.53802490 53.72764587]
[702.98931885 43.05540085]
[718.36541748 48.75690460]
[720.84869385 64.96694183]
[707.88458252 75.01001740]
[692.80938721 68.55467224]
[677.98236084 70.82608795]
[663.15533447 73.09750366]
[648.32836914 75.36891937]
[640.88763428 84.95295715]
[628.51080322 86.93795013]
[617.77929688 79.71372986]
[602.90930176 81.68418121]
[588.03930664 83.65463257]
[573.16925049 85.62508392]
[573.94396973 99.95848083]
[573.62408447 114.30950165]
[572.21142578 128.59468079]
[569.71423340 142.73092651]
[566.14697266 156.63603210]
[561.53033447 170.22911072]
[555.89111328 183.43109131]
[549.26208496 196.16517639]
[541.68176270 208.35726929]
[533.19421387 219.93647766]
[523.84875488 230.83540344]
[513.69970703 240.99063110]
[502.80606079 250.34309387]
[491.23117065 258.83834839]
[479.04229736 266.42694092]
[466.31036377 273.06475830]
[453.10931396 278.71307373]
[439.51599121 283.33908081]
[425.60937500 286.91577148]
[411.47036743 289.42233276]
[397.18121338 290.84417725]
[382.82495117 291.17291260]
[368.48513794 290.40667725]
[354.24514771 288.54983521]
[340.18780518 285.61312866]
[326.39486694 281.61364746]
[312.94656372 276.57458496]
[299.92114258 270.52520752]
[287.39437866 263.50067139]
[275.43911743 255.54177856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[16 62]
[17 61]
[18 53]
[19 52]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[34 45]
[35 44]
[36 43]
[37 42]
[102 124]
[103 123]
[104 122]
[105 121]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
