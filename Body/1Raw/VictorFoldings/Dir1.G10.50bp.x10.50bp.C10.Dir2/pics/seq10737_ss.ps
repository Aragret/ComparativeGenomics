%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCAUAAUGGGGGGGGGGAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACxxxxxxxxxxAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUACCCCCCCCCCUCUCCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[96.47644043 410.14288330]
[82.63050842 404.12686157]
[70.92184448 394.59744263]
[62.21931839 382.26177979]
[57.16871643 368.03524780]
[56.14482498 352.97357178]
[59.22362518 338.19442749]
[66.17664337 324.79449463]
[76.48793030 313.76815796]
[89.39231110 305.93365479]
[103.93219757 301.87234497]
[103.93219757 286.87234497]
[103.93219757 271.87234497]
[103.93219757 256.87234497]
[103.93219757 241.87232971]
[103.93219757 226.87232971]
[103.93219757 211.87232971]
[103.93219757 196.87232971]
[103.93219757 181.87232971]
[103.93219757 166.87232971]
[102.68532562 151.92425537]
[100.20020294 137.13154602]
[97.71508789 122.33883667]
[84.47250366 115.29370117]
[70.81626129 121.49910736]
[61.72392654 135.14686584]
[45.37800598 133.82667542]
[38.59378052 118.89663696]
[48.35028076 105.71548462]
[64.61085510 107.84286499]
[78.26709747 101.63745880]
[85.72200775 88.62114716]
[84.16442108 73.70223999]
[82.60684204 58.78332520]
[73.47837830 45.86118698]
[79.85226440 32.39928436]
[78.29468536 17.48037148]
[76.73710632 2.56145906]
[75.17952728 -12.35745335]
[73.62194061 -27.27636528]
[72.06436157 -42.19527817]
[68.03788757 -50.46808624]
[70.63288116 -57.44029236]
[69.38600922 -72.38838196]
[66.74714661 -87.15443420]
[62.73940659 -101.60912323]
[58.73166656 -116.06381226]
[54.42407990 -130.43199158]
[49.81851578 -144.70745850]
[45.21295166 -158.98291016]
[33.61220932 -169.74085999]
[37.06802750 -184.22901917]
[22.13330650 -182.39854431]
[7.12207556 -183.42784119]
[-7.42301846 -187.27969360]
[-20.97617912 -193.81484985]
[-33.04747009 -202.79707336]
[-43.20051956 -213.90167236]
[-51.06830215 -226.72721863]
[-56.36640549 -240.81005859]
[-58.90330124 -255.64114380]
[-58.58728409 -270.68429565]
[-55.42977524 -285.39575195]
[-49.54492569 -299.24365234]
[-41.14545822 -311.72747803]
[-30.53501511 -322.39587402]
[-18.09715462 -330.86325073]
[-4.28149796 -336.82345581]
[10.41252708 -340.06106567]
[25.45374107 -340.45904541]
[40.29841232 -338.00299072]
[54.40991974 -332.78167725]
[67.27813721 -324.98388672]
[78.43788147 -314.89151001]
[87.48574829 -302.86932373]
[94.09465027 -289.35195923]
[98.02568817 -274.82809448]
[99.13674927 -259.82269287]
[97.38768005 -244.87820435]
[92.84170532 -230.53489685]
[85.66314697 -217.31124878]
[76.11151886 -205.68528748]
[64.53210449 -196.07730103]
[51.34348679 -188.83457947]
[62.61480713 -179.09771729]
[59.48841095 -163.58848572]
[64.09397888 -149.31301880]
[68.69953918 -135.03755188]
[72.52313232 -132.07855225]
[74.49037170 -126.65995789]
[73.18635559 -120.07154846]
[77.19409180 -105.61685944]
[81.20183563 -91.16217804]
[87.57490540 -104.74098206]
[100.19805908 -112.84381866]
[115.19740295 -112.98403931]
[127.96983337 -105.11861420]
[134.59565735 -91.66132355]
[133.04148865 -76.74205780]
[123.78427887 -64.93933868]
[109.66495514 -59.87527466]
[95.01655579 -63.10396194]
[84.33409882 -73.63525391]
[85.58097076 -58.68716431]
[86.98327637 -43.75285721]
[88.54085541 -28.83394623]
[90.09843445 -13.91503429]
[91.65602112 1.00387812]
[93.21360016 15.92279053]
[94.77117920 30.84170341]
[103.78823853 42.69674301]
[97.52575684 57.22574234]
[99.08333588 72.14465332]
[100.64091492 87.06356812]
[106.67456818 86.89767456]
[112.81695557 89.67792511]
[117.61375427 95.38330078]
[119.68877411 103.28472137]
[118.07888031 112.02539062]
[112.50779724 119.85371399]
[114.99291229 134.64642334]
[117.47803497 149.43913269]
[125.79745483 136.95765686]
[139.80790710 131.59974670]
[154.33280945 135.34503174]
[164.00549316 146.80972290]
[165.25210571 161.75784302]
[157.61203003 174.66633606]
[143.90814209 180.76579285]
[129.20375061 177.80258179]
[118.93219757 166.87232971]
[118.93219757 181.87232971]
[118.93219757 196.87232971]
[118.93219757 211.87232971]
[118.93219757 226.87232971]
[118.93219757 241.87232971]
[118.93219757 256.87234497]
[118.93219757 271.87234497]
[118.93219757 286.87234497]
[118.93219757 301.87234497]
[133.47209167 305.93365479]
[146.37646484 313.76815796]
[156.68774414 324.79449463]
[163.64077759 338.19442749]
[166.71957397 352.97357178]
[165.69567871 368.03524780]
[160.64508057 382.26177979]
[151.94255066 394.59744263]
[140.23388672 404.12686157]
[126.38795471 410.14288330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 122]
[22 121]
[23 120]
[24 31]
[25 30]
[32 114]
[33 113]
[34 112]
[36 110]
[37 109]
[38 108]
[39 107]
[40 106]
[41 105]
[43 104]
[44 103]
[45 93]
[46 92]
[47 91]
[48 88]
[49 87]
[50 86]
[52 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
