%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUUCUAGGGGGGGGGGGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUxxxxxxxxxxCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUCCCCCCCCCCAAACAUUCUA\
) } def
/len { sequence length } bind def

/coor [
[88.34252930 360.38546753]
[74.49658966 354.36944580]
[62.78792953 344.84002686]
[54.08540726 332.50436401]
[49.03480530 318.27783203]
[48.01091385 303.21615601]
[51.08971024 288.43698120]
[58.04273224 275.03704834]
[68.35401917 264.01074219]
[81.25839996 256.17620850]
[95.79828644 252.11491394]
[95.79828644 237.11491394]
[95.79828644 222.11491394]
[95.79828644 207.11491394]
[95.79828644 192.11491394]
[95.79828644 177.11491394]
[95.79828644 162.11491394]
[95.79828644 147.11491394]
[95.79828644 132.11491394]
[95.79828644 117.11490631]
[85.81555939 105.91914368]
[70.91365814 104.20645142]
[56.01175308 102.49375916]
[41.10985184 100.78107452]
[36.20520401 102.91742706]
[31.45627022 102.91437531]
[27.66582108 101.20143127]
[25.34247208 98.46838379]
[10.57641602 95.82952118]
[-4.18963909 93.19065857]
[-18.95569420 90.55179596]
[-33.72174835 87.91293335]
[-48.48780441 85.27406311]
[-55.82867432 98.51757050]
[-67.07362366 108.65807343]
[-81.00288391 114.59561157]
[-96.10552216 115.68612671]
[-110.74330139 111.81132507]
[-123.32843781 103.39152527]
[-132.49577332 91.34002686]
[-137.25093079 76.96410370]
[-137.07807922 61.82313538]
[-131.99598694 47.55950928]
[-122.55591583 35.72043228]
[-109.78185272 27.59012413]
[-95.05942535 24.05049324]
[-79.98562622 25.48549652]
[-66.19554138 31.73947334]
[-55.18501282 42.13404083]
[-48.14838791 55.54167175]
[-45.84894180 70.50801086]
[-31.08288574 73.14687347]
[-16.31682968 75.78573608]
[-1.55077493 78.42460632]
[13.21528053 81.06346893]
[27.98133659 83.70233154]
[42.82254028 85.87916565]
[57.72444534 87.59185791]
[72.62634277 89.30455017]
[87.52825165 91.01723480]
[101.48863983 85.53020477]
[111.23628998 74.12918854]
[120.98394012 62.72816467]
[130.73159790 51.32714462]
[133.95933533 42.71125793]
[140.80256653 39.79306412]
[150.78529358 28.59729958]
[160.76802063 17.40153313]
[150.87030029 6.10487270]
[142.43585205 -6.32250643]
[135.59255981 -19.69220734]
[130.44415283 -33.80155182]
[127.06868744 -48.43664169]
[125.51733398 -63.37561417]
[125.81361389 -78.39199829]
[127.95303345 -93.25815582]
[131.90315247 -107.74871063]
[137.60411072 -121.64398956]
[144.96945190 -134.73335266]
[153.88752747 -146.81835938]
[164.22315979 -157.71580505]
[175.81965637 -167.26048279]
[188.50120544 -175.30772400]
[202.07556152 -181.73550415]
[216.33694458 -186.44638062]
[231.06916809 -189.36895752]
[246.04887390 -190.45892334]
[261.04898071 -189.69975281]
[275.84210205 -187.10295105]
[290.20394897 -182.70787048]
[303.91683960 -176.58117676]
[316.77285767 -168.81571960]
[328.57711792 -159.52922058]
[339.15069580 -148.86248779]
[348.33325195 -136.97718811]
[355.98562622 -124.05353546]
[361.99176025 -110.28742218]
[366.26065063 -95.88755798]
[368.72756958 -81.07222748]
[369.35510254 -66.06603241]
[368.13375854 -51.09646988]
[365.08203125 -36.39046478]
[360.24618530 -22.17095757]
[353.69955444 -8.65351582]
[345.54138184 3.95694017]
[335.89532471 15.46924019]
[324.90759277 25.70886040]
[312.74481201 34.52056885]
[299.59133911 41.77078629]
[285.64657593 47.34959793]
[271.12191772 51.17243195]
[256.23757935 53.18133545]
[241.21916199 53.34585190]
[226.29437256 51.66349030]
[211.68946838 48.15974808]
[197.62583923 42.88775253]
[184.31669617 35.92741776]
[171.96379089 27.38426018]
[161.98106384 38.58002472]
[151.99833679 49.77579117]
[142.13261414 61.07479477]
[132.38496399 72.47581482]
[122.63731384 83.87683868]
[112.88965607 95.27785492]
[125.67922211 87.44031525]
[140.41238403 90.25703430]
[149.40887451 102.25966644]
[147.97888184 117.19134521]
[136.86785889 127.26831055]
[121.86788940 127.23751831]
[110.79828644 117.11490631]
[110.79828644 132.11491394]
[110.79828644 147.11491394]
[110.79828644 162.11491394]
[110.79828644 177.11491394]
[110.79828644 192.11491394]
[110.79828644 207.11491394]
[110.79828644 222.11491394]
[110.79828644 237.11491394]
[110.79828644 252.11491394]
[125.33817291 256.17620850]
[138.24255371 264.01074219]
[148.55383301 275.03704834]
[155.50686646 288.43698120]
[158.58566284 303.21615601]
[157.56176758 318.27783203]
[152.51116943 332.50436401]
[143.80863953 344.84002686]
[132.09997559 354.36944580]
[118.25404358 360.38546753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 60]
[22 59]
[23 58]
[24 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[61 124]
[62 123]
[63 122]
[64 121]
[66 120]
[67 119]
[68 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
