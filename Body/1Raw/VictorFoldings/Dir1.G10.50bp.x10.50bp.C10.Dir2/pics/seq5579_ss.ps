%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCCCACCAUGGGGGGGGGGCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUxxxxxxxxxxAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACCCCCCCCCCCUUAUCCCCACCUU\
) } def
/len { sequence length } bind def

/coor [
[79.23696899 168.54400635]
[65.44042206 162.72973633]
[53.15410614 154.17422485]
[42.91491699 143.25134277]
[35.17030716 130.43840027]
[30.25871086 116.29531860]
[28.39475632 101.44014740]
[29.65990067 86.52204132]
[33.99885559 72.19291687]
[41.22201538 59.07893753]
[51.01372910 47.75318146]
[62.94610596 38.71057129]
[76.49771118 32.34626770]
[91.07635498 28.93838310]
[90.77622223 13.94138527]
[90.47608948 -1.05561161]
[90.17595673 -16.05260849]
[89.87582397 -31.04960632]
[89.57569122 -46.04660416]
[89.27556610 -61.04359818]
[88.97543335 -76.04059601]
[88.67530060 -91.03759766]
[88.37516785 -106.03459167]
[73.38116455 -106.58342743]
[58.44223404 -107.97968292]
[43.60622406 -110.21886444]
[28.92065620 -113.29381561]
[14.43257618 -117.19467926]
[0.18839239 -121.90895844]
[-13.76626492 -127.42155457]
[-27.38669586 -133.71481323]
[-40.62926865 -140.76856995]
[-53.45156479 -148.56022644]
[-65.81250763 -157.06483459]
[-77.67250824 -166.25512695]
[-88.99356842 -176.10169983]
[-99.73941803 -186.57298279]
[-109.87564850 -197.63545227]
[-119.36978149 -209.25364685]
[-128.19140625 -221.39038086]
[-136.31225586 -234.00674438]
[-143.70634460 -247.06234741]
[-150.34994507 -260.51538086]
[-156.22181702 -274.32269287]
[-161.30311584 -288.44012451]
[-165.57759094 -302.82241821]
[-169.03153992 -317.42349243]
[-171.65388489 -332.19659424]
[-173.43624878 -347.09439087]
[-174.37292480 -362.06915283]
[-174.46087646 -377.07293701]
[-173.69985962 -392.05767822]
[-172.09230042 -406.97534180]
[-169.64334106 -421.77816772]
[-166.36082458 -436.41873169]
[-162.25527954 -450.85015869]
[-157.33984375 -465.02618408]
[-151.63027954 -478.90139771]
[-145.14485168 -492.43139648]
[-137.90435791 -505.57281494]
[-129.93199158 -518.28350830]
[-121.25327301 -530.52282715]
[-111.89601898 -542.25158691]
[-101.89019012 -553.43212891]
[-91.26785278 -564.02868652]
[-80.06302643 -574.00732422]
[-68.31159973 -583.33605957]
[-56.05121994 -591.98498535]
[-43.32115936 -599.92645264]
[-30.16220284 -607.13500977]
[-16.61649513 -613.58752441]
[-2.72743225 -619.26336670]
[11.46049690 -624.14428711]
[25.90184402 -628.21478271]
[40.55035019 -631.46173096]
[55.35908508 -633.87469482]
[70.28062439 -635.44598389]
[85.26715088 -636.17059326]
[100.27067566 -636.04620361]
[115.24313354 -635.07312012]
[130.13655090 -633.25457764]
[144.90324402 -630.59631348]
[159.49588013 -627.10693359]
[173.86773682 -622.79748535]
[187.97276306 -617.68194580]
[201.76579285 -611.77655029]
[215.20262146 -605.10021973]
[228.24021912 -597.67443848]
[240.83682251 -589.52294922]
[252.95207214 -580.67187500]
[264.54718018 -571.14953613]
[275.58499146 -560.98645020]
[286.03012085 -550.21520996]
[295.84915161 -538.87023926]
[305.01058960 -526.98797607]
[313.48513794 -514.60638428]
[321.24563599 -501.76519775]
[328.26718140 -488.50552368]
[334.52731323 -474.86981201]
[340.00598145 -460.90182495]
[344.68563843 -446.64620972]
[348.55130005 -432.14871216]
[351.59054565 -417.45571899]
[353.79367065 -402.61428833]
[355.15362549 -387.67202759]
[355.66601562 -372.67672729]
[355.32925415 -357.67648315]
[354.14434814 -342.71929932]
[352.11517334 -327.85308838]
[349.24816895 -313.12551880]
[345.55255127 -298.58374023]
[341.04016113 -284.27432251]
[335.72540283 -270.24310303]
[329.62536621 -256.53506470]
[322.75958252 -243.19407654]
[315.14999390 -230.26287842]
[306.82101440 -217.78292847]
[297.79931641 -205.79417419]
[288.11380005 -194.33502197]
[277.79550171 -183.44218445]
[266.87747192 -173.15054321]
[255.39468384 -163.49308777]
[243.38389587 -154.50073242]
[230.88360596 -146.20230103]
[217.93385315 -138.62437439]
[204.57612610 -131.79119873]
[190.85319519 -125.72470093]
[176.80903625 -120.44429016]
[162.48863220 -115.96688843]
[147.93785095 -112.30683899]
[133.20330811 -109.47586060]
[118.33219910 -107.48302460]
[103.37216187 -106.33472443]
[103.67229462 -91.33772278]
[103.97242737 -76.34072876]
[104.27256012 -61.34373093]
[104.57269287 -46.34673309]
[104.87282562 -31.34973717]
[105.17295837 -16.35274124]
[105.47309113 -1.35574377]
[105.77322388 13.64125347]
[106.07334900 28.63825035]
[120.77666473 31.46012115]
[134.57205200 37.27713394]
[146.85667419 45.83509445]
[157.09368896 56.76002121]
[164.83573914 69.57450104]
[169.74453735 83.71855927]
[171.60552979 98.57409668]
[170.33741760 113.49195099]
[165.99560547 127.82021332]
[158.76983643 140.93275452]
[148.97587585 152.25656128]
[137.04170227 161.29679871]
[123.48882294 167.65840149]
[108.90950775 171.06338501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
