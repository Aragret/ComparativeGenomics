%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUCUUCGGGGGGGGGGUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCxxxxxxxxxxACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCCCCCCCCCCCUGCUUCAUC\
) } def
/len { sequence length } bind def

/coor [
[83.47795105 448.46905518]
[69.63201141 442.45303345]
[57.92334747 432.92361450]
[49.22082138 420.58792114]
[44.17021942 406.36141968]
[43.14632797 391.29974365]
[46.22512817 376.52056885]
[53.17815018 363.12063599]
[63.48943329 352.09429932]
[76.39381409 344.25979614]
[90.93370056 340.19848633]
[90.93370056 325.19848633]
[90.93370056 310.19848633]
[90.93370056 295.19848633]
[90.93370056 280.19848633]
[90.93370056 265.19848633]
[90.93370056 250.19848633]
[90.93370056 235.19848633]
[90.93370056 220.19848633]
[90.93370056 205.19848633]
[78.65375519 199.14353943]
[70.15071106 188.32792664]
[67.13636780 174.83641052]
[70.25746155 161.30113220]
[78.95796204 150.38818359]
[91.57714081 144.27244568]
[91.88919830 129.27569580]
[92.20125580 114.27893829]
[83.73101807 99.83075714]
[92.50000000 85.56190491]
[92.50000000 70.56190491]
[92.50000000 55.56190872]
[79.30548859 47.82548904]
[71.80444336 34.61068344]
[71.92427826 19.51591492]
[79.53267670 6.59429359]
[92.50000000 -0.73470026]
[92.50000000 -15.73470020]
[92.50000000 -30.73470116]
[92.50000000 -45.73469925]
[77.54743958 -47.04246902]
[62.76575851 -49.64847565]
[48.26745605 -53.53288269]
[34.16287613 -58.66613007]
[20.55936813 -65.00915527]
[7.56046200 -72.51367188]
[-4.73491192 -81.12256622]
[-16.23317528 -90.77033234]
[-26.84681892 -101.38352966]
[-36.49506378 -112.88138580]
[-45.10448074 -125.17639923]
[-52.60954285 -138.17498779]
[-58.95313644 -151.77822876]
[-64.08698273 -165.88258362]
[-67.97200012 -180.38072205]
[-70.57862854 -195.16230774]
[-71.88702393 -210.11480713]
[-71.88722992 -225.12445068]
[-70.57925415 -240.07699585]
[-67.97304535 -254.85864258]
[-64.08843231 -269.35687256]
[-58.95498276 -283.46139526]
[-52.61177444 -297.06481934]
[-45.10707474 -310.06359863]
[-36.49800110 -322.35885620]
[-26.85007858 -333.85699463]
[-16.23673248 -344.47048950]
[-4.73874044 -354.11856079]
[7.55639172 -362.72781372]
[20.55508804 -370.23269653]
[34.15842056 -376.57611084]
[48.26285172 -381.70974731]
[62.76104736 -385.59454346]
[77.54265594 -388.20098877]
[92.49517822 -389.50915527]
[107.50482178 -389.50915527]
[122.45734406 -388.20098877]
[137.23895264 -385.59454346]
[151.73715210 -381.70974731]
[165.84158325 -376.57611084]
[179.44491577 -370.23269653]
[192.44360352 -362.72781372]
[204.73873901 -354.11856079]
[216.23674011 -344.47048950]
[226.85008240 -333.85699463]
[236.49800110 -322.35885620]
[245.10707092 -310.06359863]
[252.61177063 -297.06481934]
[258.95498657 -283.46139526]
[264.08843994 -269.35687256]
[267.97305298 -254.85864258]
[270.57925415 -240.07699585]
[271.88723755 -225.12445068]
[271.88702393 -210.11480713]
[270.57861328 -195.16230774]
[267.97198486 -180.38072205]
[264.08697510 -165.88258362]
[258.95312500 -151.77822876]
[252.60954285 -138.17498779]
[245.10447693 -125.17639923]
[236.49505615 -112.88138580]
[226.84681702 -101.38352966]
[216.23316956 -90.77033234]
[204.73490906 -81.12256622]
[192.43954468 -72.51367188]
[179.44062805 -65.00915527]
[165.83712769 -58.66613007]
[151.73254395 -53.53288269]
[137.23423767 -49.64847565]
[122.45256042 -47.04246902]
[107.50000000 -45.73469925]
[107.50000000 -30.73470116]
[107.50000000 -15.73470020]
[107.50000000 -0.73470026]
[120.46732330 6.59429359]
[128.07571411 19.51591492]
[128.19555664 34.61068344]
[120.69451141 47.82548904]
[107.50000000 55.56190872]
[107.50000000 70.56190491]
[107.50000000 85.56190491]
[115.24423218 94.31477356]
[115.12266541 106.00113678]
[107.19801331 114.59099579]
[106.88595581 129.58775330]
[106.57389832 144.58450317]
[120.78454590 152.97712708]
[128.79446411 167.29972839]
[128.50904846 183.61378479]
[120.10015106 197.48722839]
[105.93370056 205.19848633]
[105.93370056 220.19848633]
[105.93370056 235.19848633]
[105.93370056 250.19848633]
[105.93370056 265.19848633]
[105.93370056 280.19848633]
[105.93370056 295.19848633]
[105.93370056 310.19848633]
[105.93370056 325.19848633]
[105.93370056 340.19848633]
[120.47358704 344.25979614]
[133.37797546 352.09429932]
[143.68925476 363.12063599]
[150.64227295 376.52056885]
[153.72106934 391.29974365]
[152.69718933 406.36141968]
[147.64657593 420.58792114]
[138.94406128 432.92361450]
[127.23539734 442.45303345]
[113.38945770 448.46905518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 126]
[27 125]
[28 124]
[30 121]
[31 120]
[32 119]
[37 114]
[38 113]
[39 112]
[40 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
