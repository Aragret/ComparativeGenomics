%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUAACUACGGGGGGGGGGUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUxxxxxxxxxxCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACCCCCCCCCCCAGUAAUUAC\
) } def
/len { sequence length } bind def

/coor [
[76.65994263 511.05300903]
[62.81400299 505.03695679]
[51.10534286 495.50753784]
[42.40281677 483.17187500]
[37.35221481 468.94537354]
[36.32832336 453.88366699]
[39.40712357 439.10452271]
[46.36014557 425.70458984]
[56.67142868 414.67825317]
[69.57581329 406.84375000]
[84.11569977 402.78244019]
[84.11569977 387.78244019]
[84.11569977 372.78244019]
[84.11569977 357.78244019]
[84.11569977 342.78244019]
[84.11569977 327.78244019]
[84.11569977 312.78244019]
[84.11569977 297.78244019]
[84.11569977 282.78244019]
[84.11569977 267.78244019]
[84.11569977 252.78244019]
[71.02254486 245.46333313]
[63.70021057 260.13696289]
[47.31710815 260.86224365]
[38.72676849 246.89305115]
[46.76619720 232.59971619]
[63.16511917 232.68597412]
[63.31308365 222.67697144]
[66.71755219 213.77003479]
[72.66596222 206.93467712]
[80.19081879 202.79656982]
[88.21453857 201.58467102]
[91.00685883 186.84686279]
[93.79918671 172.10905457]
[96.59150696 157.37126160]
[91.35869598 143.42611694]
[101.52972412 131.30749512]
[88.46714783 129.29716492]
[77.33796692 122.05977631]
[70.13864136 110.83561707]
[68.18444061 97.58520508]
[71.86938477 84.64685822]
[80.58798981 74.32408142]
[92.83415985 68.47543335]
[89.12799835 53.94050217]
[85.42183685 39.40556335]
[74.51470947 27.94496727]
[78.86750031 13.70058346]
[75.16133881 -0.83435255]
[71.45517731 -15.36928844]
[67.74901581 -29.90422440]
[52.76770782 -28.63530540]
[37.78187561 -29.84968567]
[23.20034790 -33.51424026]
[9.42092228 -39.52899170]
[-3.18049264 -47.72985840]
[-14.26011848 -57.89311218]
[-23.51569557 -69.74149323]
[-30.69472694 -82.95177460]
[-35.60136032 -97.16355896]
[-38.10174179 -111.98914337]
[-38.12765503 -127.02407074]
[-35.67839813 -141.85818481]
[-30.82078552 -156.08680725]
[-23.68733597 -169.32174683]
[-14.47265911 -181.20196533]
[-3.42813396 -191.40335083]
[9.14493465 -199.64761353]
[22.90354538 -205.70983887]
[37.47235107 -209.42463684]
[52.45390701 -210.69065857]
[67.43950653 -209.47338867]
[82.02032471 -205.80603027]
[95.79859161 -199.78862000]
[108.39842987 -191.58532715]
[119.47609711 -181.41993713]
[128.72938538 -169.56977844]
[135.90586853 -156.35812378]
[140.80976868 -142.14538574]
[143.30729675 -127.31932068]
[143.33030701 -112.28438568]
[140.87820435 -97.45074463]
[136.01783752 -83.22306061]
[128.88185120 -69.98949432]
[119.66487885 -58.11104965]
[108.61839294 -47.91178894]
[96.04373169 -39.66995621]
[82.28395081 -33.61038589]
[85.99011230 -19.07544899]
[89.69627380 -4.54051399]
[93.40243530 9.99442196]
[104.04447174 20.41538239]
[99.95677185 35.69940186]
[103.66293335 50.23434067]
[107.36909485 64.76927185]
[121.08914948 70.83229065]
[134.33172607 63.78715515]
[147.57431030 56.74201965]
[160.81690979 49.69688416]
[169.04025269 35.50855637]
[185.43669128 35.80659485]
[193.13896179 50.28440475]
[184.22364807 64.04845428]
[167.86204529 62.93946838]
[154.61944580 69.98460388]
[141.37686157 77.02973938]
[128.13427734 84.07487488]
[131.70013428 97.05325317]
[129.65666199 110.14798737]
[144.59097290 111.55029297]
[159.53906250 112.79716492]
[174.49931335 113.88847351]
[189.45956421 114.97978210]
[205.69660950 110.10182953]
[214.87879944 124.35398102]
[203.72550964 137.12271118]
[188.36825562 129.94003296]
[173.40800476 128.84872437]
[158.44775391 127.75741577]
[151.50291443 130.42478943]
[143.18867493 126.48459625]
[128.25436401 125.08229065]
[116.26753235 134.09982300]
[121.30061340 149.09910583]
[111.32931519 160.16357422]
[108.53699493 174.90138245]
[105.74466705 189.63919067]
[102.95233917 204.37699890]
[117.56891632 227.53501892]
[99.11569977 252.78244019]
[99.11569977 267.78244019]
[99.11569977 282.78244019]
[99.11569977 297.78244019]
[99.11569977 312.78244019]
[99.11569977 327.78244019]
[99.11569977 342.78244019]
[99.11569977 357.78244019]
[99.11569977 372.78244019]
[99.11569977 387.78244019]
[99.11569977 402.78244019]
[113.65558624 406.84375000]
[126.55996704 414.67825317]
[136.87124634 425.70458984]
[143.82426453 439.10452271]
[146.90307617 453.88366699]
[145.87918091 468.94537354]
[140.82858276 483.17187500]
[132.12605286 495.50753784]
[120.41738892 505.03695679]
[106.57144928 511.05300903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 27]
[32 128]
[33 127]
[34 126]
[35 125]
[37 123]
[44 95]
[45 94]
[46 93]
[48 91]
[49 90]
[50 89]
[51 88]
[96 107]
[97 106]
[98 105]
[99 104]
[109 122]
[110 121]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
