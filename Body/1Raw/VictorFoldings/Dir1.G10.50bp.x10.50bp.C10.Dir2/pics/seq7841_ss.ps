%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCAAACCGGGGGGGGGGACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUxxxxxxxxxxCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCACCCCCCCCCCAAACCAUACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.40353394]
[71.19830322 364.38751221]
[59.48964310 354.85809326]
[50.78712082 342.52243042]
[45.73651886 328.29589844]
[44.71262741 313.23422241]
[47.79142761 298.45504761]
[54.74444962 285.05511475]
[65.05573273 274.02877808]
[77.96011353 266.19427490]
[92.50000000 262.13296509]
[92.50000000 247.13296509]
[92.50000000 232.13296509]
[92.50000000 217.13296509]
[92.50000000 202.13296509]
[92.50000000 187.13296509]
[92.50000000 172.13296509]
[92.50000000 157.13296509]
[92.50000000 142.13296509]
[92.50000000 127.13297272]
[75.29760742 117.16905212]
[68.10379791 97.23920441]
[75.86754608 76.12346649]
[61.74274445 71.07471466]
[47.61794281 66.02595520]
[33.49313736 60.97719955]
[19.36833572 55.92844391]
[5.21785975 62.44010925]
[-9.03477764 57.11874008]
[-15.15545082 43.58829117]
[-29.28025436 38.53953552]
[-38.64385223 46.93236160]
[-50.62545013 50.50189972]
[-62.91231537 48.62369156]
[-73.16022491 41.71863937]
[-79.44075012 31.16071510]
[-80.60398865 19.00392914]
[-94.50654602 13.37197304]
[-108.40910339 7.74001598]
[-122.31166077 2.10805941]
[-136.21421814 -3.52389717]
[-151.90980530 -1.53414536]
[-160.80084229 -13.48399162]
[-174.70338440 -19.11594772]
[-189.97802734 -14.21034431]
[-203.25663757 -23.21356773]
[-204.35301208 -39.21911240]
[-192.42610168 -49.94889832]
[-176.62521362 -47.17195129]
[-169.07144165 -33.01850510]
[-155.16888428 -27.38654709]
[-140.46769714 -29.77913475]
[-130.58226013 -17.42645264]
[-116.67970276 -11.79449654]
[-102.77714539 -6.16253996]
[-88.87458801 -0.53058320]
[-74.97203827 5.10137367]
[-60.49758148 -4.92648745]
[-42.74341965 -4.30168962]
[-28.76569176 6.91461420]
[-24.23149681 24.41473389]
[-10.10669422 29.46348953]
[3.20399523 22.87857246]
[17.60047531 27.79751587]
[24.41709137 41.80363846]
[38.54189682 46.85239792]
[52.66669846 51.90115356]
[66.79150391 56.94990921]
[80.91630554 61.99866486]
[70.94112396 50.79617310]
[56.98784256 45.29109192]
[45.48447037 35.66444397]
[37.60635757 22.89982986]
[34.15845871 8.30147362]
[35.49305725 -6.63903666]
[41.47379684 -20.39515495]
[51.48958588 -31.56135178]
[64.51706696 -38.99671936]
[79.22515869 -41.94154739]
[94.11106110 -40.09495163]
[107.65380859 -33.64561081]
[118.46966553 -23.25247765]
[125.45352936 -9.97747707]
[127.89182281 4.82302141]
[125.53540802 19.63677597]
[118.62505341 32.95019150]
[107.87023926 43.40058136]
[102.97824860 57.58044052]
[114.06956482 47.48179245]
[125.16087341 37.38314438]
[121.80593872 22.39514923]
[126.40978241 7.74249792]
[137.73400879 -2.63332009]
[152.73243713 -5.94126320]
[167.37059021 -1.29151046]
[177.71086121 10.06517696]
[180.97177124 25.07390785]
[176.27615356 39.69741058]
[164.88711548 50.00203323]
[149.86824036 53.21588516]
[135.25952148 48.47445679]
[124.16821289 58.57310867]
[113.07689667 68.67176056]
[122.30488586 78.40034485]
[126.31298828 89.99626923]
[141.24729919 88.59396362]
[156.18161011 87.19165802]
[171.11592102 85.78936005]
[182.41600037 74.40130615]
[198.34880066 76.27890015]
[206.69203186 89.98181915]
[201.04550171 104.99834442]
[185.74072266 109.80908966]
[172.51821899 100.72366333]
[157.58390808 102.12596893]
[142.64959717 103.52827454]
[127.71529388 104.93057251]
[127.71141052 104.95234680]
[127.70751190 104.97412109]
[141.23170471 111.46228027]
[154.75588989 117.95044708]
[170.30677795 114.00715637]
[182.99795532 123.82110596]
[183.09384155 139.86387634]
[170.52087402 149.82881165]
[154.92396545 146.07168579]
[148.26773071 131.47463989]
[134.74353027 124.98647308]
[121.21934509 118.49830627]
[114.99465179 123.82453918]
[107.50000000 127.13297272]
[107.50000000 142.13296509]
[107.50000000 157.13296509]
[107.50000000 172.13296509]
[107.50000000 187.13296509]
[107.50000000 202.13296509]
[107.50000000 217.13296509]
[107.50000000 232.13296509]
[107.50000000 247.13296509]
[107.50000000 262.13296509]
[122.03988647 266.19427490]
[134.94427490 274.02877808]
[145.25555420 285.05511475]
[152.20857239 298.45504761]
[155.28736877 313.23422241]
[154.26348877 328.29589844]
[149.21287537 342.52243042]
[140.51036072 354.85809326]
[128.80169678 364.38751221]
[114.95575714 370.40353394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[30 62]
[31 61]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[43 51]
[44 50]
[88 103]
[89 102]
[90 101]
[105 117]
[106 116]
[107 115]
[108 114]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
