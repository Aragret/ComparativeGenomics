%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACUAUCGGGGGGGGGGUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCxxxxxxxxxxAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUACCCCCCCCCCUACUAGUAUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.91818237]
[71.19830322 359.90216064]
[59.48964310 350.37274170]
[50.78712082 338.03707886]
[45.73651886 323.81054688]
[44.71262741 308.74887085]
[47.79142761 293.96969604]
[54.74444962 280.56976318]
[65.05573273 269.54345703]
[77.96011353 261.70892334]
[92.50000000 257.64761353]
[92.50000000 242.64761353]
[92.50000000 227.64761353]
[92.50000000 212.64761353]
[92.50000000 197.64761353]
[92.50000000 182.64761353]
[92.50000000 167.64761353]
[92.50000000 152.64761353]
[92.50000000 137.64761353]
[92.50000000 122.64762115]
[92.50000000 107.64762115]
[90.47766876 92.78457642]
[86.46992493 78.32988739]
[75.61853027 71.27998352]
[72.60237885 59.10945129]
[78.51544952 48.51025391]
[74.80928802 33.97531891]
[71.10312653 19.44038200]
[56.32495117 22.05146790]
[41.39297104 23.55087280]
[26.39069557 23.93020821]
[11.40201950 23.18735695]
[-3.48922968 21.32647133]
[-18.19977570 18.35795784]
[-32.64734650 14.29841900]
[-46.75114822 9.17055607]
[-60.43230820 3.00304866]
[-73.61430359 -4.16961336]
[-86.22343445 -12.30731678]
[-98.18916321 -21.36455154]
[-109.44458008 -31.29066467]
[-119.92674255 -42.03014755]
[-129.57702637 -53.52293396]
[-138.34147644 -65.70475769]
[-146.17105103 -78.50748444]
[-153.02198792 -91.85952759]
[-158.85595703 -105.68620300]
[-163.64033508 -119.91019440]
[-167.34837341 -134.45195007]
[-169.95932007 -149.23014832]
[-171.45860291 -164.16213989]
[-171.83779907 -179.16442871]
[-171.09481812 -194.15309143]
[-169.23379517 -209.04432678]
[-166.26515198 -223.75483704]
[-162.20549011 -238.20237732]
[-157.07749939 -252.30613708]
[-150.90986633 -265.98724365]
[-143.73709106 -279.16918945]
[-135.59927368 -291.77822876]
[-126.54193878 -303.74386597]
[-116.61573029 -314.99920654]
[-105.87615204 -325.48129272]
[-94.38327789 -335.13146973]
[-82.20137787 -343.89581299]
[-69.39858246 -351.72525024]
[-56.04648209 -358.57608032]
[-42.21975327 -364.40991211]
[-27.99571991 -369.19418335]
[-13.45392990 -372.90209961]
[1.32429051 -375.51290894]
[16.25629616 -377.01205444]
[31.25857925 -377.39111328]
[46.24724197 -376.64801025]
[61.13845825 -374.78686523]
[75.84895325 -371.81808472]
[90.29645538 -367.75830078]
[104.40016174 -362.63018799]
[118.08121490 -356.46243286]
[131.26309204 -349.28955078]
[143.87207031 -341.15161133]
[155.83763123 -332.09417725]
[167.09288025 -322.16784668]
[177.57485962 -311.42819214]
[187.22494507 -299.93524170]
[195.98916626 -287.75326538]
[203.81851196 -274.95037842]
[210.66921997 -261.59823608]
[216.50294495 -247.77143860]
[221.28706360 -233.54737854]
[224.99484253 -219.00555420]
[227.60554504 -204.22731018]
[229.10455322 -189.29528809]
[229.48348999 -174.29299927]
[228.74024963 -159.30435181]
[226.87896729 -144.41314697]
[223.91006470 -129.70268250]
[219.85014343 -115.25521088]
[214.72190857 -101.15154266]
[208.55403137 -87.47055054]
[201.38102722 -74.28874207]
[193.24299622 -61.67983246]
[184.18544006 -49.71434021]
[174.25903320 -38.45918274]
[163.51927185 -27.97730446]
[152.02622986 -18.32732201]
[139.84417725 -9.56320381]
[127.04122925 -1.73396397]
[113.68901062 5.11661339]
[99.86218262 10.95021629]
[85.63806152 15.73422146]
[89.34422302 30.26915741]
[93.05038452 44.80409241]
[105.96707916 56.64296341]
[100.92461395 74.32214355]
[104.93235016 88.77683258]
[109.83151245 74.59944916]
[119.99058533 63.56345367]
[133.71481323 57.50989914]
[148.71469116 57.44865417]
[162.48789978 63.38993835]
[172.73675537 74.34260559]
[177.75151062 88.47951508]
[176.69561768 103.44230652]
[169.74519348 116.73484802]
[158.05975342 126.13964844]
[143.58866882 130.08778381]
[128.74604797 127.92060089]
[116.00798035 119.99964905]
[107.50000000 107.64762115]
[107.50000000 122.64762115]
[107.50000000 137.64761353]
[107.50000000 152.64761353]
[107.50000000 167.64761353]
[107.50000000 182.64761353]
[107.50000000 197.64761353]
[107.50000000 212.64761353]
[107.50000000 227.64761353]
[107.50000000 242.64761353]
[107.50000000 257.64761353]
[122.03988647 261.70892334]
[134.94427490 269.54345703]
[145.25555420 280.56976318]
[152.20857239 293.96969604]
[155.28736877 308.74887085]
[154.26348877 323.81054688]
[149.21287537 338.03707886]
[140.51036072 350.37274170]
[128.80169678 359.90216064]
[114.95575714 365.91818237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 116]
[23 115]
[26 113]
[27 112]
[28 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
