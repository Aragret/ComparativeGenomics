%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGUUCACCGGGGGGGGGGCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCxxxxxxxxxxUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCCCCCCCCCCCUGAGCUCACC\
) } def
/len { sequence length } bind def

/coor [
[83.37847137 397.54208374]
[70.82025146 389.19094849]
[60.73402786 377.97848511]
[53.75383377 364.60958862]
[50.31844711 349.92459106]
[50.64382553 334.84661865]
[54.70951080 320.32351685]
[62.25992966 307.26815796]
[72.82045746 296.50128174]
[85.72725677 288.69964600]
[100.16898346 284.35369873]
[99.54500580 269.36666870]
[98.92102814 254.37965393]
[98.29705048 239.39263916]
[97.67307281 224.40562439]
[97.04909515 209.41860962]
[96.42511749 194.43159485]
[95.80113983 179.44458008]
[95.17716217 164.45756531]
[94.55318451 149.47053528]
[87.08003235 148.06326294]
[79.90850830 145.53387451]
[73.20604706 141.94146729]
[67.12911987 137.36987305]
[61.81960297 131.92584229]
[57.40144730 125.73646545]
[53.97780609 118.94624329]
[39.40510559 122.50099945]
[24.83240128 126.05576324]
[15.30460930 138.96315002]
[-0.73200506 139.41764832]
[-10.97552395 127.07057953]
[-7.56799555 111.39358521]
[6.87661505 104.41269684]
[21.27763939 111.48306274]
[35.85034180 107.92829895]
[50.42304611 104.37353516]
[50.37635422 96.19264984]
[51.67050171 88.11463165]
[54.27052689 80.35776520]
[58.10617065 73.13162994]
[63.07379532 66.63148499]
[69.03916931 61.03297043]
[61.58426285 48.01665878]
[54.12935257 35.00035095]
[34.03437042 39.21411514]
[13.40367031 34.02733612]
[-3.44564557 19.86056519]
[-12.70372009 -0.92541933]
[-11.91730785 -24.40789604]
[-23.61693192 -33.79505920]
[-39.65694046 -33.48253632]
[-49.79076767 -45.91978455]
[-46.24460602 -61.56600571]
[-31.73877144 -68.41876221]
[-17.40089417 -61.22120667]
[-14.22976971 -45.49468231]
[-2.53014636 -36.10752106]
[3.41604352 -40.67838669]
[15.30842304 -49.82012177]
[21.25461388 -54.39098740]
[15.19159985 -68.11104584]
[9.12858677 -81.83109283]
[-4.42385769 -91.06491089]
[-2.93370104 -107.39620972]
[12.06611061 -114.02475739]
[25.14505768 -104.13167572]
[22.84864044 -87.89411163]
[28.91165352 -74.17405701]
[34.97466660 -60.45400238]
[47.03927231 -59.13433075]
[58.32189941 -55.15478516]
[68.25364685 -48.79925156]
[76.35294342 -40.46906662]
[82.24871063 -30.65844917]
[85.69705963 -19.92556000]
[86.59066010 -8.86097336]
[84.96052551 1.94475293]
[80.97033691 11.93258286]
[74.90374756 20.60391998]
[67.14566040 27.54544067]
[74.60057068 40.56174850]
[82.05548096 53.57806015]
[114.78756714 52.47810745]
[141.11628723 71.95623016]
[154.64047241 65.46806335]
[168.16467285 58.97990036]
[181.68885803 52.49173355]
[195.21304321 46.00357056]
[208.73724365 39.51540375]
[205.65052795 24.75953484]
[206.18553162 9.69377232]
[210.31114197 -4.80598068]
[217.78749084 -17.89672661]
[228.17991638 -28.81738663]
[240.88423157 -36.93304825]
[255.16180420 -41.77188110]
[270.18255615 -43.05255508]
[285.07321167 -40.70061493]
[298.96807861 -34.85280609]
[311.05926514 -25.84910393]
[320.64382935 -14.21297550]
[327.16455078 -0.62093139]
[330.24230957 14.13680649]
[329.69815063 29.20224190]
[325.56378174 43.69948959]
[318.07949829 56.78570175]
[307.68045044 67.70005798]
[294.97122192 75.80802155]
[280.69070435 80.63819122]
[265.66915894 81.90975952]
[250.77993774 79.54879761]
[236.88864136 73.69255829]
[224.80291748 64.68153381]
[215.22540283 53.03959274]
[201.70121765 59.52775955]
[188.17701721 66.01592255]
[174.65283203 72.50408936]
[161.12864685 78.99225616]
[147.60446167 85.48042297]
[149.46842957 94.53408051]
[149.62602234 103.77628326]
[148.07177734 112.88822937]
[144.85931396 121.55560303]
[140.09945679 129.47941589]
[133.95637512 136.38635254]
[126.64198303 142.03816223]
[118.40859222 146.23986816]
[109.54019928 148.84655762]
[110.16417694 163.83358765]
[110.78815460 178.82060242]
[111.41213226 193.80761719]
[112.03610992 208.79463196]
[112.66008759 223.78164673]
[113.28406525 238.76866150]
[113.90804291 253.75567627]
[114.53202057 268.74270630]
[115.15599823 283.72970581]
[129.90899658 286.86013794]
[143.41963196 293.56192017]
[154.83862305 303.41369629]
[163.44813538 315.79623413]
[168.70698547 329.93112183]
[170.28459167 344.92987061]
[168.08177185 359.84957886]
[162.23703003 373.75247192]
[153.11775208 385.76452637]
[141.29718018 395.13067627]
[127.51837158 401.26217651]
[112.64746857 403.77355957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[27 37]
[28 36]
[29 35]
[43 83]
[44 82]
[45 81]
[50 58]
[51 57]
[61 70]
[62 69]
[63 68]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
