%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGACCACCGGGGGGGGGGUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACxxxxxxxxxxAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCCCCCCCCCCCUUGACCACC\
) } def
/len { sequence length } bind def

/coor [
[83.34940338 362.99856567]
[70.12920380 355.72610474]
[59.24240112 345.27908325]
[51.43127060 332.36984253]
[47.22838974 317.87854004]
[46.92031860 302.79318237]
[50.52805710 288.14236450]
[57.80562973 274.92498779]
[68.25683594 264.04220581]
[81.16909790 256.23605347]
[95.66204071 252.03877258]
[95.34998322 237.04202271]
[95.03792572 222.04527283]
[94.72586823 207.04850769]
[94.41381073 192.05175781]
[94.10175323 177.05500793]
[93.78970337 162.05825806]
[93.47764587 147.06150818]
[93.16558838 132.06474304]
[92.85353088 117.06799316]
[80.59116364 108.42887878]
[66.36438751 113.18269348]
[59.88817596 124.38593292]
[47.89091492 128.03074646]
[36.99863434 122.67672729]
[22.67603493 127.13353729]
[17.82488441 141.87280273]
[5.21704340 150.91835022]
[-10.29951763 150.79199219]
[-22.75836372 141.54229736]
[-27.36881256 126.72597504]
[-22.35805511 112.04019928]
[-9.65282726 103.13195801]
[5.86144924 103.42664337]
[18.21921921 112.81094360]
[32.54181671 108.35412598]
[43.69314194 94.83940125]
[61.61056900 98.95590973]
[75.83734894 94.20209503]
[84.21949005 81.76265717]
[83.28386688 66.79186249]
[82.34823608 51.82107544]
[81.41260529 36.85028458]
[80.47697449 21.87949181]
[65.47585297 21.27097321]
[50.61680984 19.12322807]
[36.05735779 15.45902157]
[21.95183754 10.31719780]
[8.44977665 3.75226164]
[-4.30569601 -4.16619396]
[-16.17936516 -13.35422897]
[-27.04536438 -23.71444511]
[-36.78850937 -35.13702011]
[-45.30551147 -47.50086594]
[-52.50609207 -60.67491913]
[-58.31391907 -74.51952362]
[-62.66742325 -88.88793182]
[-65.52046204 -103.62781525]
[-66.84278107 -118.58293152]
[-66.62036896 -133.59474182]
[-64.85559082 -148.50411987]
[-61.56713867 -163.15301514]
[-56.78988266 -177.38613892]
[-50.57446289 -191.05262756]
[-42.98676682 -204.00758362]
[-34.10722351 -216.11367798]
[-24.02996445 -227.24259949]
[-12.86181545 -237.27636719]
[-0.72116387 -246.10861206]
[12.26329327 -253.64572144]
[25.95391273 -259.80776978]
[40.20556641 -264.52947998]
[54.86717987 -267.76074219]
[69.78332520 -269.46734619]
[84.79589844 -269.63119507]
[99.74574280 -268.25054932]
[114.47438049 -265.34002686]
[128.82569885 -260.93051147]
[142.64753723 -255.06872559]
[155.79339600 -247.81680298]
[168.12393188 -239.25163269]
[179.50840759 -229.46400452]
[189.82615662 -218.55766296]
[198.96780396 -206.64823914]
[206.83644104 -193.86198425]
[213.34864807 -180.33441162]
[218.43540955 -166.20893860]
[222.04278564 -151.63529968]
[224.13255310 -136.76799011]
[224.68254089 -121.76461029]
[223.68693542 -106.78419495]
[221.15628052 -91.98555756]
[217.11740112 -77.52555847]
[211.61312866 -63.55749130]
[204.70178223 -50.22941971]
[196.45664978 -37.68263626]
[186.96513367 -26.05013657]
[176.32783508 -15.45523453]
[164.65753174 -6.01024246]
[152.07791138 2.18471789]
[138.72235107 9.04277515]
[124.73241425 14.49123096]
[110.25640106 18.47232628]
[95.44776917 20.94386292]
[96.38339996 35.91465378]
[97.31902313 50.88544464]
[98.25465393 65.85623932]
[99.19028473 80.82702637]
[123.10466766 92.79607391]
[137.67736816 96.35083771]
[152.25007629 99.90559387]
[166.82278442 103.46035767]
[181.39547729 107.01512146]
[195.96818542 110.56988525]
[207.07579041 99.86359406]
[222.21279907 96.88453674]
[236.54902649 102.58332062]
[245.50984192 115.14147186]
[246.23588562 130.55174255]
[238.49548340 143.89675903]
[224.75856018 150.91819763]
[209.40852356 149.37551880]
[197.34350586 139.76098633]
[192.41342163 125.14258575]
[177.84071350 121.58782196]
[163.26802063 118.03305817]
[148.69531250 114.47830200]
[134.12260437 110.92353821]
[119.54991150 107.36877441]
[107.85028839 116.75593567]
[108.16233826 131.75268555]
[108.47439575 146.74945068]
[108.78645325 161.74620056]
[109.09851074 176.74295044]
[109.41056824 191.73970032]
[109.72262573 206.73646545]
[110.03467560 221.73321533]
[110.34673309 236.72996521]
[110.65879059 251.72671509]
[125.31378174 255.31748962]
[138.53959656 262.57974243]
[149.43446350 273.01834106]
[157.25555420 285.92153931]
[161.46963501 300.40960693]
[161.78935242 315.49472046]
[158.19291687 330.14831543]
[150.92555237 343.37133789]
[140.48275757 354.26214600]
[127.57653046 362.07827759]
[113.08683777 366.28674316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 39]
[22 38]
[25 36]
[26 35]
[40 108]
[41 107]
[42 106]
[43 105]
[44 104]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
