%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCCUACCGGGGGGGGGGCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCxxxxxxxxxxCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCCCCCCCCCCCACCCUACC\
) } def
/len { sequence length } bind def

/coor [
[245.32321167 216.03939819]
[234.45661926 206.29824829]
[224.23915100 195.87803650]
[214.71316528 184.82191467]
[205.91815186 173.17568970]
[197.89056396 160.98759460]
[190.66369629 148.30813599]
[184.26751709 135.18983459]
[178.72851562 121.68705750]
[174.06970215 107.85572815]
[170.31037903 93.75315857]
[155.59484863 96.66063690]
[140.87933350 99.56810760]
[126.16381073 102.47557831]
[111.44828796 105.38304901]
[96.82927704 108.74230957]
[82.32065582 112.55017090]
[67.81202698 116.35802460]
[53.30340576 120.16588593]
[38.87601852 124.27082825]
[24.53595924 128.67112732]
[10.19589710 133.07142639]
[-4.14416409 137.47172546]
[-18.48422623 141.87203979]
[-32.82428741 146.27233887]
[-35.58583832 161.32664490]
[-45.03628159 173.36607361]
[-59.00397873 179.62402344]
[-74.27925110 178.66249084]
[-87.35195923 170.70240784]
[-95.21808624 157.57293701]
[-96.07005310 142.29116821]
[-89.71208191 128.36871338]
[-77.60519409 119.00485229]
[-62.53145981 116.35133362]
[-47.95471573 121.01792908]
[-37.22458649 131.93226624]
[-22.88452530 127.53197479]
[-8.54446411 123.13166809]
[5.79559660 118.73136902]
[20.13565826 114.33106995]
[34.47571945 109.93077087]
[37.48816299 106.15262604]
[42.93049240 104.26345825]
[49.49554443 105.65726471]
[64.00417328 101.84940338]
[78.51279449 98.04154205]
[93.02142334 94.23368835]
[95.44946289 91.14909363]
[99.24589539 89.17453766]
[103.87223816 88.90511322]
[108.54081726 90.66752625]
[123.25634003 87.76005554]
[137.97186279 84.85258484]
[152.68737793 81.94511414]
[167.40290833 79.03764343]
[165.43455505 63.70835876]
[164.51510620 48.28079224]
[164.64881897 32.82662964]
[165.83500671 17.41767311]
[168.06817627 2.12552023]
[171.33789062 -12.97877693]
[175.62893677 -27.82504272]
[180.92137146 -42.34430313]
[187.19055176 -56.46909714]
[194.40734863 -70.13381195]
[202.53819275 -83.27496338]
[211.54527283 -95.83151245]
[221.38673401 -107.74511719]
[232.01679993 -118.96044922]
[243.38609314 -129.42541504]
[255.44174194 -139.09140015]
[268.12771606 -147.91351318]
[281.38507080 -155.85079956]
[295.15219116 -162.86639404]
[309.36508179 -168.92770386]
[323.95770264 -174.00660706]
[338.86221313 -178.07954407]
[354.00939941 -181.12759399]
[369.32882690 -183.13661194]
[384.74935913 -184.09732056]
[400.19931030 -184.00526428]
[415.60687256 -182.86088562]
[430.90051270 -180.66955566]
[446.00912476 -177.44146729]
[460.86254883 -173.19165039]
[475.39175415 -167.93986511]
[489.52923584 -161.71055603]
[503.20932007 -154.53268433]
[516.36846924 -146.43963623]
[528.94555664 -137.46902466]
[540.88214111 -127.66255188]
[552.12274170 -117.06581879]
[562.61517334 -105.72806549]
[572.31079102 -93.70201111]
[581.16442871 -81.04353333]
[589.13500977 -67.81147003]
[596.18560791 -54.06732559]
[602.28338623 -39.87496567]
[616.43072510 -44.86029053]
[630.57800293 -49.84561157]
[644.72534180 -54.83093262]
[658.87268066 -59.81625366]
[665.47161865 -74.17693329]
[680.32116699 -79.58686829]
[694.61126709 -72.83643341]
[699.86389160 -57.93054962]
[692.96276855 -43.71260834]
[678.00213623 -38.61786652]
[663.85797119 -45.66893768]
[649.71063232 -40.68361664]
[635.56335449 -35.69829559]
[621.41601562 -30.71297264]
[607.26873779 -25.72765160]
[611.21124268 -11.68332386]
[614.24200439 2.58571672]
[616.34844971 17.02034760]
[617.52191162 31.56075668]
[617.75738525 46.14669800]
[617.05395508 60.71773148]
[615.41448975 75.21347046]
[612.84576416 89.57386017]
[609.35839844 103.73937988]
[604.96679688 117.65133667]
[599.68920898 131.25205994]
[593.54742432 144.48521423]
[586.56683350 157.29592896]
[578.77648926 169.63111877]
[570.20849609 181.43966675]
[560.89843750 192.67262268]
[550.88488770 203.28343201]
[540.20922852 213.22810364]
[528.91577148 222.46542358]
[517.05126953 230.95709229]
[504.66485596 238.66790771]
[491.80789185 245.56591797]
[478.53359985 251.62248230]
[464.89697266 256.81253052]
[450.95455933 261.11450195]
[436.76406860 264.51058960]
[422.38433838 266.98666382]
[407.87493896 268.53244019]
[393.29595947 269.14151001]
[378.70788574 268.81134033]
[364.17108154 267.54327393]
[349.74581909 265.34252930]
[335.49191284 262.21823120]
[321.46838379 258.18328857]
[307.73336792 253.25437927]
[294.34375000 247.45195007]
[281.35507202 240.79998779]
[268.82113647 233.32606506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 48]
[17 47]
[18 46]
[19 45]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
