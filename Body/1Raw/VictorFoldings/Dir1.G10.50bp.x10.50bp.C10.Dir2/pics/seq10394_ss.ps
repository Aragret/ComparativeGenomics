%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCACUAUUAGGGGGGGGGGACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUxxxxxxxxxxAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCCCCCCCCCCCACCCCACUACUA\
) } def
/len { sequence length } bind def

/coor [
[137.73986816 546.49896240]
[123.46810150 541.68951416]
[110.56412506 533.92413330]
[99.63146973 523.56597900]
[91.18148041 511.09954834]
[85.60938263 497.10791016]
[83.17579651 482.24548340]
[83.99453735 467.20742798]
[88.02731323 452.69705200]
[95.08551025 439.39306641]
[104.83898926 427.91772461]
[116.83158112 418.80773926]
[130.50234985 412.48919678]
[145.21191406 409.25762939]
[145.21191406 394.25762939]
[145.21191406 379.25762939]
[145.21191406 364.25762939]
[145.21191406 349.25762939]
[145.21191406 334.25762939]
[145.21191406 319.25762939]
[145.21191406 304.25762939]
[145.21191406 289.25762939]
[145.21191406 274.25762939]
[145.21191406 259.25762939]
[135.62219238 244.58903503]
[144.88789368 228.70587158]
[144.58776855 213.70887756]
[122.74866486 200.57098389]
[114.98409271 176.10504150]
[125.39734650 152.44451904]
[117.17329407 139.89999390]
[108.94924927 127.35547638]
[100.72519684 114.81095123]
[87.42195892 107.88102722]
[72.42871857 108.33118439]
[57.43547440 108.78134918]
[43.77794647 117.85900879]
[29.20995903 110.32868195]
[28.71780777 93.93692780]
[42.80777740 85.54616547]
[56.98531342 93.78810120]
[71.97855377 93.33794403]
[86.97180176 92.88777924]
[90.10025787 78.21765137]
[76.59504700 71.69008636]
[63.08982849 65.16252136]
[49.47922134 72.61444092]
[34.09219742 70.60966492]
[22.84537888 59.91907883]
[20.06339645 44.65342331]
[26.81597710 30.68265915]
[40.50661850 23.37882805]
[55.87099075 25.55040359]
[67.00117493 36.36236954]
[69.61739349 51.65730286]
[83.12261200 58.18486786]
[96.62782288 64.71243286]
[102.85863495 60.53786087]
[115.32024384 52.18871689]
[121.55104828 48.01414490]
[120.65113831 33.04116440]
[119.75122070 18.06818390]
[118.85130310 3.09520245]
[110.30001068 -10.21591759]
[117.25980377 -23.38445854]
[116.35989380 -38.35743713]
[115.45997620 -53.33042145]
[100.77057648 -56.89594650]
[87.78559875 -64.63426971]
[77.65964508 -75.85731506]
[71.29312897 -89.56711578]
[69.25214386 -104.54463196]
[71.71817017 -119.45804596]
[78.47193909 -132.98129272]
[88.91290283 -143.91188049]
[102.11266327 -151.27786255]
[116.89749908 -154.42427063]
[131.95275879 -153.07133484]
[145.93974304 -147.33934021]
[157.61473083 -137.73797607]
[165.93960571 -125.12100983]
[170.17408752 -110.61030579]
[169.94169617 -95.49616241]
[165.26306152 -81.12250519]
[156.55422974 -68.76744843]
[144.58955383 -59.52958298]
[130.43295288 -54.23033524]
[131.33287048 -39.25735474]
[132.23278809 -24.28437424]
[140.71971130 -12.04422188]
[133.82427979 2.19528675]
[134.72419739 17.16826820]
[135.62411499 32.14124680]
[136.52403259 47.11422729]
[113.26972198 106.58689880]
[121.49376678 119.13142395]
[129.71781921 131.67594910]
[137.94186401 144.22045898]
[145.04101562 142.32264709]
[152.35664368 141.87925720]
[159.59466553 142.90042114]
[166.46557617 145.33746338]
[172.69615173 149.08529663]
[178.04029846 153.98686218]
[182.28868103 159.83969116]
[185.27702332 166.40432739]
[200.15032959 164.45883179]
[215.02362061 162.51333618]
[229.89692688 160.56784058]
[235.71215820 146.35240173]
[247.86584473 136.96179199]
[263.08868408 134.92202759]
[277.28582764 140.78179932]
[286.63830566 152.96484375]
[288.63034058 168.19400024]
[282.72610474 182.37271118]
[270.51379395 191.68695068]
[255.27845764 193.63124084]
[241.11833191 187.68258667]
[231.84242249 175.44114685]
[216.96911621 177.38662720]
[202.09580994 179.33212280]
[187.22251892 181.27761841]
[185.83465576 188.68893433]
[182.93164062 195.64782715]
[178.64115906 201.84826660]
[173.15190125 207.01756287]
[166.70526123 210.92839050]
[159.58476257 213.40873718]
[159.88490295 228.40574646]
[168.64743042 237.92021179]
[168.55784607 250.45303345]
[160.21191406 259.25762939]
[160.21191406 274.25762939]
[160.21191406 289.25762939]
[160.21191406 304.25762939]
[160.21191406 319.25762939]
[160.21191406 334.25762939]
[160.21191406 349.25762939]
[160.21191406 364.25762939]
[160.21191406 379.25762939]
[160.21191406 394.25762939]
[160.21191406 409.25762939]
[174.92147827 412.48919678]
[188.59225464 418.80773926]
[200.58483887 427.91772461]
[210.33831787 439.39306641]
[217.39651489 452.69705200]
[221.42929077 467.20742798]
[222.24803162 482.24548340]
[219.81443787 497.10791016]
[214.24234009 511.09954834]
[205.79235840 523.56597900]
[194.85971069 533.92413330]
[181.95571899 541.68951416]
[167.68394470 546.49896240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[26 130]
[27 129]
[30 98]
[31 97]
[32 96]
[33 95]
[34 43]
[35 42]
[36 41]
[44 57]
[45 56]
[46 55]
[60 94]
[61 93]
[62 92]
[63 91]
[65 89]
[66 88]
[67 87]
[106 123]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
