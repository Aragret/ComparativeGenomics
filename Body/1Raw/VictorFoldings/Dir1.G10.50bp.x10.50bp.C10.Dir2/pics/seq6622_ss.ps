%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUAUAAAAGGGGGGGGGGCCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUxxxxxxxxxxAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCCCCCCCCCCCAAUAUGAAA\
) } def
/len { sequence length } bind def

/coor [
[93.17653656 432.59936523]
[79.33059692 426.58331299]
[67.62193298 417.05389404]
[58.91941071 404.71823120]
[53.86880875 390.49172974]
[52.84491730 375.43002319]
[55.92371368 360.65087891]
[62.87673569 347.25094604]
[73.18801880 336.22460938]
[86.09239960 328.39010620]
[100.63228607 324.32879639]
[100.63228607 309.32879639]
[100.63228607 294.32879639]
[100.63228607 279.32879639]
[100.63228607 264.32879639]
[100.63228607 249.32879639]
[100.63228607 234.32879639]
[100.63228607 219.32879639]
[100.63228607 204.32879639]
[100.63228607 189.32879639]
[100.63228607 174.32879639]
[91.04118347 159.66555786]
[100.29544067 143.78038025]
[99.98338318 128.78363037]
[97.19105530 114.04582977]
[86.56269073 104.96125793]
[88.73742676 91.14958954]
[83.54200745 77.07807159]
[78.63350677 72.49395752]
[77.06312561 66.94731903]
[78.43651581 62.31166077]
[73.83094788 48.03620148]
[69.22538757 33.76073837]
[65.78186035 30.87913895]
[63.68553162 27.38966179]
[62.96029663 23.80414772]
[63.45685577 20.58740807]
[64.88421631 18.10346413]
[61.48123550 3.49457192]
[58.07825851 -11.11432076]
[54.67528152 -25.72321320]
[39.02814484 -32.06508255]
[30.31016731 -46.32966614]
[31.77399635 -62.81672668]
[42.64878464 -75.07414246]
[38.94262314 -89.60907745]
[35.23646164 -104.14402008]
[31.53030014 -118.67895508]
[27.82414055 -133.21388245]
[12.87095737 -131.71055603]
[-2.13926458 -132.45278931]
[-16.87119293 -135.42396545]
[-30.99571037 -140.55775452]
[-44.19726944 -147.73942566]
[-56.18094254 -156.80856323]
[-66.67900848 -167.56254578]
[-75.45693970 -179.76113892]
[-82.31863403 -193.13180542]
[-87.11080170 -207.37585449]
[-89.72637177 -222.17504883]
[-90.10692596 -237.19879150]
[-88.24394989 -252.11145020]
[-84.17907715 -266.57983398]
[-78.00310516 -280.28076172]
[-69.85401154 -292.90811157]
[-59.91385269 -304.17977905]
[-48.40469360 -313.84399414]
[-35.58365250 -321.68481445]
[-21.73715973 -327.52709961]
[-7.17454767 -331.24032593]
[7.77884865 -332.74151611]
[22.78896523 -331.99716187]
[37.52046967 -329.02386475]
[51.64425659 -323.88809204]
[64.84478760 -316.70452881]
[76.82717133 -307.63369751]
[87.32370758 -296.87820435]
[96.09990692 -284.67837524]
[102.95969391 -271.30673218]
[107.74983215 -257.06198120]
[110.36329651 -242.26242065]
[110.74170685 -227.23861694]
[108.87660980 -212.32624817]
[104.80966949 -197.85842896]
[98.63174438 -184.15838623]
[90.48085785 -171.53221130]
[80.53909302 -160.26193237]
[69.02855682 -150.59936523]
[56.20640182 -142.76036072]
[42.35907745 -136.92004395]
[46.06523895 -122.38511658]
[49.77139664 -107.85018158]
[53.47755814 -93.31523895]
[57.18371964 -78.78030396]
[70.02529907 -75.00012970]
[79.38534546 -65.27896118]
[82.73029327 -52.09329605]
[79.07830048 -38.87679291]
[69.28417206 -29.12619019]
[72.68714905 -14.51729870]
[76.09012604 0.09159402]
[79.49311066 14.70048618]
[83.50084686 29.15517426]
[88.10641479 43.43063736]
[92.71197510 57.70609665]
[97.61352539 71.88265228]
[102.80894470 85.95417023]
[113.43730927 95.03874207]
[111.26257324 108.85041046]
[114.43435669 94.18958282]
[122.34764099 81.44674683]
[134.08236694 72.10349274]
[148.27412415 67.24616241]
[163.27288818 67.43950653]
[177.33473206 72.66104889]
[188.82470703 82.30368805]
[196.40689087 95.24626923]
[199.19969177 109.98398590]
[196.87841797 124.80328369]
[189.71293640 137.98114014]
[178.53639221 147.98538208]
[164.64826965 153.65281677]
[149.66331482 154.32449341]
[135.32382202 149.92233276]
[123.29703522 140.95816040]
[114.98013306 128.47157288]
[115.29219055 143.46832275]
[124.06526947 152.98078918]
[123.98085022 165.51921082]
[115.63228607 174.32879639]
[115.63228607 189.32879639]
[115.63228607 204.32879639]
[115.63228607 219.32879639]
[115.63228607 234.32879639]
[115.63228607 249.32879639]
[115.63228607 264.32879639]
[115.63228607 279.32879639]
[115.63228607 294.32879639]
[115.63228607 309.32879639]
[115.63228607 324.32879639]
[130.17218018 328.39010620]
[143.07655334 336.22460938]
[153.38784790 347.25094604]
[160.34086609 360.65087891]
[163.41966248 375.43002319]
[162.39576721 390.49172974]
[157.34516907 404.71823120]
[148.64263916 417.05389404]
[136.93397522 426.58331299]
[123.08804321 432.59936523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 127]
[24 126]
[25 109]
[27 107]
[28 106]
[31 105]
[32 104]
[33 103]
[38 102]
[39 101]
[40 100]
[41 99]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
