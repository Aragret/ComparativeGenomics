%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGAAAUAAGGGGGGGGGGCUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUxxxxxxxxxxGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCCCCCCCCCCCUAGAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[71.73355103 355.86172485]
[59.17533112 347.51055908]
[49.08910751 336.29809570]
[42.10891342 322.92919922]
[38.67353058 308.24420166]
[38.99890900 293.16625977]
[43.06459045 278.64312744]
[50.61501312 265.58779907]
[61.17554092 254.82089233]
[74.08233643 247.01925659]
[88.52406311 242.67330933]
[87.90008545 227.68629456]
[87.27610779 212.69927979]
[86.65213013 197.71224976]
[86.02815247 182.72523499]
[85.40417480 167.73822021]
[84.78019714 152.75120544]
[84.15621948 137.76419067]
[83.53224182 122.77717590]
[71.26987457 114.13806152]
[56.94728088 118.59487915]
[42.62468338 123.05168915]
[28.30208397 127.50850677]
[13.97948742 131.96531677]
[-0.34311017 136.42213440]
[-3.64537144 151.42182922]
[-14.01689911 162.74996948]
[-28.66780472 167.35937500]
[-43.65707016 164.01011658]
[-54.95265198 153.60311890]
[-59.51610184 138.93783569]
[-56.11987305 123.95915222]
[-45.67753220 112.69624329]
[-30.99802017 108.17878723]
[-16.03004646 111.62194824]
[-4.79992580 122.09954071]
[9.52267170 117.64272308]
[23.84526825 113.18591309]
[38.16786575 108.72909546]
[52.49046326 104.27227783]
[66.81305695 99.81546021]
[96.73381042 84.02285767]
[99.83213806 69.34633636]
[102.93045807 54.66980743]
[90.15003204 62.52224350]
[75.28754425 60.49580383]
[65.07584381 49.50848007]
[64.14093781 34.53764725]
[72.90634155 22.36522865]
[87.40123749 18.50545692]
[101.05931091 24.70684242]
[107.69335175 38.16049957]
[112.88876343 24.08897972]
[118.08418274 10.01745987]
[123.27959442 -4.05405903]
[120.80106354 -19.67991829]
[132.46766663 -28.93948936]
[137.66308594 -43.01100922]
[142.85850525 -57.08252716]
[139.30307007 -75.11967468]
[153.15916443 -85.84387207]
[158.06071472 -100.02043152]
[162.96226501 -114.19699097]
[167.86381531 -128.37355042]
[172.76536560 -142.55010986]
[177.66691589 -156.72666931]
[164.52124023 -164.03161621]
[152.84388733 -173.50845337]
[142.98971558 -184.86918640]
[135.25817871 -197.76860046]
[129.88424683 -211.81465149]
[127.03121185 -226.58053589]
[126.78578186 -241.61752319]
[129.15541077 -256.46865845]
[134.06808472 -270.68261719]
[141.37452698 -283.82745361]
[150.85269165 -295.50375366]
[162.21453857 -305.35662842]
[175.11482239 -313.08670044]
[189.16149902 -318.45904541]
[203.92770386 -321.31039429]
[218.96472168 -321.55413818]
[233.81556702 -319.18280029]
[248.02897644 -314.26852417]
[261.17300415 -306.96060181]
[272.84820557 -297.48110962]
[282.69979858 -286.11813354]
[290.42840576 -273.21697998]
[295.79916382 -259.16970825]
[298.64883423 -244.40316772]
[298.89086914 -229.36611938]
[296.51785278 -214.51553345]
[291.60195923 -200.30268860]
[284.29254150 -187.15950012]
[274.81173706 -175.48536682]
[263.44763184 -165.63505554]
[250.54560852 -157.90791321]
[236.49771118 -152.53875732]
[221.73086548 -149.69075012]
[206.69380188 -149.45043945]
[191.84347534 -151.82511902]
[186.94192505 -137.64855957]
[182.04037476 -123.47200012]
[177.13882446 -109.29544067]
[172.23727417 -95.11888123]
[167.33572388 -80.94232178]
[172.34727478 -69.88829041]
[168.32987976 -58.01059341]
[156.93002319 -51.88711166]
[151.73460388 -37.81559372]
[146.53918457 -23.74407387]
[149.38932800 -9.12470341]
[137.35112000 1.14135623]
[132.15570068 15.21287537]
[126.96028137 29.28439522]
[121.76486969 43.35591507]
[117.60697937 57.76813126]
[114.50865936 72.44465637]
[111.41033936 87.12118530]
[117.89850616 100.64537048]
[131.28479004 107.41348267]
[144.67106628 114.18160248]
[161.00607300 112.73247528]
[170.20581055 126.30807495]
[162.80638123 140.94297791]
[146.41969299 141.58206177]
[137.90295410 127.56788635]
[124.51667023 120.79977417]
[111.13038635 114.03165436]
[98.51926422 122.15319824]
[99.14324188 137.14021301]
[99.76721191 152.12722778]
[100.39118958 167.11424255]
[101.01516724 182.10125732]
[101.63914490 197.08827209]
[102.26312256 212.07530212]
[102.88710022 227.06231689]
[103.51107788 242.04933167]
[118.26408386 245.17976379]
[131.77471924 251.88153076]
[143.19369507 261.73330688]
[151.80320740 274.11584473]
[157.06205750 288.25073242]
[158.63966370 303.24948120]
[156.43685913 318.16921997]
[150.59211731 332.07208252]
[141.47283936 344.08413696]
[129.65226746 353.45028687]
[115.87345123 359.58178711]
[101.00254822 362.09320068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[42 119]
[43 118]
[44 117]
[52 116]
[53 115]
[54 114]
[55 113]
[57 111]
[58 110]
[59 109]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[66 101]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
