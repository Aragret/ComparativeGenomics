%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACUACUCCGGGGGGGGGGGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCxxxxxxxxxxUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGCCCCCCCCCCUUUCUACUCC\
) } def
/len { sequence length } bind def

/coor [
[91.25785828 360.72442627]
[76.21195984 359.78408813]
[61.82850266 355.26968384]
[48.94373703 347.44369507]
[38.30675888 336.76107788]
[30.53599358 323.84295654]
[26.08321762 309.44030762]
[25.20731163 294.39050293]
[27.95919991 279.56854248]
[34.17889404 265.83615112]
[43.50478363 253.99168396]
[55.39467621 244.72378540]
[69.15731049 238.57127380]
[83.99254608 235.89186096]
[84.92816925 220.92106628]
[85.86380005 205.95027161]
[86.79943085 190.97949219]
[87.73505402 176.00869751]
[88.67068481 161.03790283]
[89.60631561 146.06710815]
[90.54194641 131.09631348]
[91.47756958 116.12552643]
[85.44242859 129.85786438]
[73.54583740 138.99412537]
[58.72126770 141.28149414]
[44.62414551 136.15594482]
[34.73053741 124.88134766]
[31.48000908 110.23777771]
[35.67406845 95.83605194]
[46.27854919 85.22732544]
[60.67860413 81.02751160]
[75.32347107 84.27218628]
[86.60133362 94.16027832]
[79.41882324 80.99169159]
[72.23631287 67.82311249]
[60.06848145 63.41883087]
[54.36990356 52.24989319]
[57.72420502 40.58558655]
[50.81720734 27.27043152]
[43.91020966 13.95527649]
[34.64525986 2.15863657]
[23.34625435 -7.70708656]
[12.04724979 -17.57280922]
[0.64622873 -27.32046127]
[-10.85557461 -36.94898605]
[-22.35737801 -46.57751465]
[-33.85918045 -56.20603943]
[-45.36098480 -65.83456421]
[-60.90936279 -68.76006317]
[-65.70188141 -82.86257935]
[-80.72039032 -78.96077728]
[-95.15170288 -84.66312408]
[-103.44668579 -97.77696991]
[-102.41574860 -113.25975800]
[-92.45531464 -125.15805054]
[-77.39536285 -128.89669800]
[-63.02676010 -123.03813171]
[-54.87452316 -109.83507538]
[-56.07335663 -94.36437988]
[-41.34766388 -92.12758636]
[-35.73246002 -77.33637238]
[-24.23065567 -67.70783997]
[-12.72885227 -58.07931900]
[-1.22704840 -48.45079041]
[10.27475452 -38.82226562]
[17.46903610 -36.92807007]
[21.91297340 -28.87181473]
[33.21197891 -19.00609207]
[44.51098251 -9.14036846]
[40.08864212 -23.47364807]
[40.22474289 -38.47303009]
[44.90645218 -52.72370148]
[53.69216537 -64.88146210]
[65.75316620 -73.79954529]
[79.95181274 -78.63674164]
[94.94881439 -78.93679047]
[109.32957458 -74.67138672]
[121.73764038 -66.24285889]
[131.00260925 -54.44623947]
[136.25057983 -40.39423370]
[136.98651123 -25.41230011]
[133.14102173 -10.91360378]
[125.07681274 1.73426354]
[113.55455017 11.33829403]
[99.66106415 16.99258804]
[84.70685577 18.16380692]
[70.10248566 14.74147224]
[57.22536469 7.04827785]
[64.13236237 20.36343384]
[71.03936005 33.67858887]
[86.30509949 42.27842712]
[85.40489960 60.64060211]
[92.58740997 73.80918121]
[99.76991272 86.97776794]
[105.54493713 85.78822327]
[112.06765747 87.34551239]
[118.00772095 91.96981049]
[133.00041199 92.43785095]
[147.99311829 92.90589905]
[162.98580933 93.37393951]
[176.89054871 76.09479523]
[202.66210938 77.78807831]
[216.88888550 73.03426361]
[227.34922791 60.40441513]
[243.46971130 63.41481018]
[248.66694641 78.96861267]
[237.59446716 91.06540680]
[221.64270020 87.26104736]
[207.41592407 92.01486206]
[208.66279602 106.96295166]
[223.48056030 109.29405212]
[238.29830933 111.62515259]
[253.11607361 113.95626068]
[267.93383789 116.28736115]
[281.69729614 108.04438019]
[296.67218018 113.80039978]
[301.37109375 129.13989258]
[292.18936157 142.29571533]
[276.17047119 143.17584229]
[265.60272217 131.10511780]
[250.78497314 128.77401733]
[235.96720886 126.44291687]
[221.14944458 124.11180878]
[206.33169556 121.78070831]
[192.49114990 128.47114563]
[178.22169495 127.26823425]
[167.42237854 119.55867767]
[162.51776123 108.36663055]
[147.52507019 107.89859009]
[132.53237915 107.43054962]
[117.53968048 106.96250916]
[106.44836426 117.06115723]
[105.51273346 132.03195190]
[104.57710266 147.00274658]
[103.64147949 161.97352600]
[102.70584869 176.94432068]
[101.77021790 191.91511536]
[100.83459473 206.88591003]
[99.89896393 221.85670471]
[98.96333313 236.82748413]
[113.34952545 241.33316040]
[126.23902893 249.15133667]
[136.88247681 259.82751465]
[144.66108704 272.74093628]
[149.12258911 287.14086914]
[150.00761414 302.19012451]
[147.26470947 317.01376343]
[141.05334473 330.74993896]
[131.73463440 342.60003662]
[119.85037231 351.87515259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[33 94]
[34 93]
[35 92]
[38 90]
[39 89]
[40 88]
[41 69]
[42 68]
[43 67]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[50 59]
[97 131]
[98 130]
[99 129]
[100 128]
[102 109]
[103 108]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
