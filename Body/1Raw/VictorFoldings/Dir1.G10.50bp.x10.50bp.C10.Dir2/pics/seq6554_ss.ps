%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUAGACCUGGGGGGGGGGAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAxxxxxxxxxxCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCCCCCCCCCCCUAGACCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 523.62145996]
[71.19830322 517.60546875]
[59.48964310 508.07601929]
[50.78712082 495.74035645]
[45.73651886 481.51382446]
[44.71262741 466.45214844]
[47.79142761 451.67300415]
[54.74444962 438.27307129]
[65.05573273 427.24673462]
[77.96011353 419.41223145]
[92.50000000 415.35092163]
[92.50000000 400.35092163]
[92.50000000 385.35092163]
[92.50000000 370.35092163]
[92.50000000 355.35092163]
[92.50000000 340.35092163]
[92.50000000 325.35092163]
[92.50000000 310.35092163]
[92.50000000 295.35092163]
[92.50000000 280.35092163]
[78.03514099 276.51458740]
[65.04627991 269.05895996]
[54.42181396 258.48706055]
[46.89020538 245.51527405]
[42.97005844 231.02482605]
[42.93439102 216.00192261]
[46.79164505 201.47059631]
[54.28468323 188.42295837]
[64.90794373 177.75138855]
[77.94152832 170.18759155]
[92.50000000 166.25234985]
[92.50000000 151.25234985]
[92.50000000 136.25234985]
[92.50000000 121.25234985]
[74.17117310 119.39989471]
[57.99889374 102.39094543]
[43.35539246 99.14012146]
[28.71189117 95.88928986]
[14.06838989 92.63846588]
[-0.57511175 89.38764191]
[-15.21861267 86.13681793]
[-31.99167633 88.60677338]
[-39.00835037 73.17295837]
[-26.12010384 62.15798950]
[-11.96778774 71.49331665]
[2.67571402 74.74414062]
[17.31921577 77.99496460]
[31.96271706 81.24578857]
[46.60621643 84.49662018]
[61.24971771 87.74744415]
[65.17842865 81.35876465]
[73.03585815 68.58140564]
[76.96456909 62.19272614]
[67.45621490 50.59138489]
[57.94785309 38.99004364]
[42.31027222 38.99023438]
[30.36435890 28.89918709]
[27.75061607 13.48158836]
[35.70316696 0.01715606]
[50.46706390 -5.13661623]
[65.07124329 0.45372534]
[72.62006378 14.14859200]
[69.54919434 29.48168564]
[79.05755615 41.08302689]
[88.56591034 52.68436813]
[103.55860901 52.21632767]
[112.32481384 40.04449081]
[98.50751495 45.88248825]
[83.61447144 47.67055130]
[68.80794525 45.26914215]
[55.24345016 38.86566162]
[43.97957611 28.95985031]
[35.89536285 16.32476044]
[31.62170792 1.94644725]
[31.49213409 -13.05299282]
[35.51675034 -27.50299263]
[43.38147354 -40.27585983]
[54.47253418 -50.37478638]
[67.92437744 -57.01165009]
[82.68720245 -59.66850281]
[97.60891724 -58.13799667]
[111.52501678 -52.53957748]
[123.34946442 -43.31014633]
[132.15948486 -31.16998482]
[137.26753235 -17.06651306]
[138.27496338 -2.10038280]
[135.10316467 12.56043911]
[127.99806213 25.77399254]
[140.93611145 18.18408394]
[153.87417603 10.59417534]
[155.50889587 -4.72358751]
[165.73027039 -16.00971985]
[180.46313477 -19.07675171]
[194.01473999 -12.95366096]
[206.95278931 -20.54356956]
[219.89085388 -28.13347816]
[232.82890320 -35.72338486]
[245.76696777 -43.31329346]
[253.39297485 -57.83141708]
[269.78762817 -58.21570206]
[278.08547974 -44.07083130]
[269.75045776 -29.94783211]
[253.35687256 -30.37523842]
[240.41880798 -22.78532982]
[227.48075867 -15.19542122]
[214.54270935 -7.60551310]
[201.60464478 -0.01560489]
[200.33697510 14.80097389]
[190.47108459 26.16442299]
[175.63224792 29.57947159]
[161.46408081 23.53223038]
[148.52601624 31.12213898]
[135.58796692 38.71204758]
[124.49665070 48.81069565]
[115.73044586 60.98253250]
[132.29519653 100.71017456]
[107.50000000 121.25234985]
[107.50000000 136.25234985]
[107.50000000 151.25234985]
[107.50000000 166.25234985]
[122.05847168 170.18759155]
[135.09205627 177.75138855]
[145.71531677 188.42295837]
[153.20835876 201.47059631]
[157.06561279 216.00192261]
[157.02993774 231.02482605]
[153.10978699 245.51527405]
[145.57818604 258.48706055]
[134.95372009 269.05895996]
[121.96485901 276.51458740]
[107.50000000 280.35092163]
[107.50000000 295.35092163]
[107.50000000 310.35092163]
[107.50000000 325.35092163]
[107.50000000 340.35092163]
[107.50000000 355.35092163]
[107.50000000 370.35092163]
[107.50000000 385.35092163]
[107.50000000 400.35092163]
[107.50000000 415.35092163]
[122.03988647 419.41223145]
[134.94427490 427.24673462]
[145.25555420 438.27307129]
[152.20857239 451.67300415]
[155.28736877 466.45214844]
[154.26348877 481.51382446]
[149.21287537 495.74035645]
[140.51036072 508.07601929]
[128.80169678 517.60546875]
[114.95575714 523.62145996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 120]
[32 119]
[33 118]
[34 117]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[53 65]
[54 64]
[55 63]
[66 115]
[67 114]
[88 113]
[89 112]
[90 111]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
