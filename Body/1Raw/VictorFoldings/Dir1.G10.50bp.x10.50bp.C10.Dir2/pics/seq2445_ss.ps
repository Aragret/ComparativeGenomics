%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUAUAACGGGGGGGGGGUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAxxxxxxxxxxUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACCCCCCCCCCCAACAUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[42.48789978 499.08911133]
[29.92967796 490.73794556]
[19.84345627 479.52551270]
[12.86326218 466.15658569]
[9.42787838 451.47161865]
[9.75325489 436.39364624]
[13.81893921 421.87051392]
[21.36935997 408.81518555]
[31.92988777 398.04827881]
[44.83668137 390.24664307]
[59.27841187 385.90069580]
[58.65443420 370.91369629]
[58.03045654 355.92666626]
[57.40647888 340.93963623]
[56.78250122 325.95263672]
[56.15852356 310.96560669]
[55.53454590 295.97860718]
[54.91056824 280.99157715]
[54.28659058 266.00457764]
[41.27028275 258.54965210]
[28.02769661 265.59478760]
[14.78511143 272.63992310]
[1.54252577 279.68505859]
[-4.50073957 294.54638672]
[-19.92785645 298.94906616]
[-32.90446091 289.51574707]
[-33.47601318 273.48287964]
[-21.20406723 263.14950562]
[-5.50260925 266.44247437]
[7.73997641 259.39733887]
[20.98256302 252.35220337]
[34.22514725 245.30706787]
[32.80435562 232.62197876]
[36.25386429 220.80081177]
[43.71057510 211.57289124]
[53.75377655 206.14907837]
[64.66467285 205.06680298]
[68.67240906 190.61212158]
[72.68015289 176.15742493]
[76.53730774 161.66183472]
[80.24346924 147.12689209]
[83.94963074 132.59196472]
[74.85189819 127.55727386]
[67.34046173 119.97690582]
[62.12725830 110.35278320]
[59.76493835 99.38512421]
[60.59210968 87.92188263]
[64.69454193 76.89322662]
[53.60322571 66.79457855]
[42.51190948 56.69593048]
[31.42059326 46.59727859]
[20.32927895 36.49863052]
[4.55601597 37.48845291]
[-7.24184799 26.97246742]
[-8.06485081 11.18962097]
[2.57528067 -0.49640208]
[18.36594582 -1.15249312]
[29.93882179 9.61059570]
[30.42792702 25.40731430]
[41.51924133 35.50596237]
[52.61055756 45.60461426]
[63.70187378 55.70326233]
[74.79319000 65.80191040]
[88.24915314 59.17341232]
[87.00228119 44.22532654]
[85.75540924 29.27724075]
[71.26600647 24.68096352]
[59.64168930 14.88587952]
[52.65507126 1.38567066]
[51.37157059 -13.76098061]
[55.98690414 -28.24432182]
[65.79727173 -39.85574341]
[79.30665588 -46.82459641]
[94.45498657 -48.08817291]
[108.93224335 -43.45378876]
[120.53074646 -33.62815857]
[127.48181915 -20.10961533]
[128.72546387 -4.95963907]
[124.07205200 9.51150799]
[114.23117065 21.09708214]
[100.70349121 28.03036499]
[101.95037079 42.97845078]
[103.19724274 57.92654037]
[114.80265045 60.47165298]
[125.24227142 66.15259552]
[136.12109375 55.82539368]
[146.99992371 45.49818802]
[141.20530701 31.47011566]
[140.87341309 16.29598427]
[146.04914856 2.02796865]
[156.03251648 -9.40429688]
[169.47337341 -16.45469284]
[184.55392456 -18.16971207]
[199.23466492 -14.31741238]
[211.53015137 -5.41878366]
[219.77751160 7.32270575]
[222.86134338 22.18387413]
[220.36460876 37.15487289]
[212.62496948 50.21099472]
[200.68913269 59.58650589]
[186.17132568 64.01345062]
[171.03497314 62.89311218]
[157.32713318 56.37701416]
[146.44830322 66.70421600]
[135.56947327 77.03142548]
[141.34574890 90.87464142]
[156.33845520 90.40660095]
[171.33114624 89.93856049]
[179.94401550 77.03126526]
[194.51031494 71.68315887]
[209.42903137 75.95069122]
[218.96359253 88.19290161]
[219.44776917 103.70242310]
[210.69538879 116.51551819]
[196.07191467 121.70529938]
[181.20037842 117.27617645]
[171.79917908 104.93125153]
[156.80648804 105.39929199]
[141.81379700 105.86734009]
[125.14704132 130.17079163]
[98.48456573 136.29812622]
[94.77841187 150.83305359]
[91.07225037 165.36799622]
[91.98410797 174.52334595]
[87.13484192 180.16517639]
[83.12709808 194.61985779]
[79.11936188 209.07453918]
[93.58531952 226.55548096]
[90.35420227 250.56652832]
[69.27360535 265.38058472]
[69.89758301 280.36761475]
[70.52156067 295.35461426]
[71.14553833 310.34164429]
[71.76951599 325.32864380]
[72.39349365 340.31567383]
[73.01747131 355.30270386]
[73.64144897 370.28970337]
[74.26542664 385.27673340]
[89.01843262 388.40716553]
[102.52906799 395.10891724]
[113.94804382 404.96069336]
[122.55756378 417.34323120]
[127.81640625 431.47814941]
[129.39401245 446.47686768]
[127.19120789 461.39660645]
[121.34646606 475.29946899]
[112.22718048 487.31152344]
[100.40660858 496.67770386]
[86.62779999 502.80917358]
[71.75689697 505.32058716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 32]
[21 31]
[22 30]
[23 29]
[37 127]
[38 126]
[39 125]
[40 123]
[41 122]
[42 121]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[64 83]
[65 82]
[66 81]
[85 105]
[86 104]
[87 103]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
