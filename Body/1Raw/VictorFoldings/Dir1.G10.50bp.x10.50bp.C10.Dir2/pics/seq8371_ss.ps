%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCUCAAGGGGGGGGGGAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUAxxxxxxxxxxGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCCCCCCCCCCCUAACCUGAA\
) } def
/len { sequence length } bind def

/coor [
[114.24687958 430.92529297]
[100.40093994 424.90924072]
[88.69228363 415.37985229]
[79.98975372 403.04415894]
[74.93915558 388.81765747]
[73.91526031 373.75598145]
[76.99406433 358.97680664]
[83.94708252 345.57687378]
[94.25836945 334.55053711]
[107.16275024 326.71603394]
[121.70263672 322.65472412]
[121.70263672 307.65472412]
[121.70263672 292.65472412]
[121.70263672 277.65472412]
[121.70263672 262.65472412]
[121.70263672 247.65472412]
[121.70263672 232.65472412]
[121.70263672 217.65472412]
[121.70263672 202.65472412]
[121.70263672 187.65472412]
[121.70263672 172.65472412]
[121.70263672 157.65472412]
[118.14787292 143.08201599]
[111.24087524 129.76686096]
[104.33387756 116.45171356]
[90.55149841 110.53174591]
[76.13928223 114.68963623]
[61.72706223 118.84751892]
[52.74444580 132.14007568]
[36.74061966 133.26127625]
[25.99234962 121.35102081]
[28.74478722 105.54583740]
[42.88650131 97.97012329]
[57.56917572 104.43530273]
[71.98139191 100.27742004]
[86.39360809 96.11952972]
[71.93199921 100.10221100]
[57.50153732 96.00808716]
[47.28615189 85.02420044]
[44.24765396 70.33516693]
[49.26702118 56.19989395]
[60.88894653 46.71670914]
[75.74381256 44.63513947]
[89.52465057 50.55870438]
[98.23587799 62.76994705]
[99.35227966 77.72598267]
[98.41665649 62.75518799]
[97.48102570 47.78439713]
[96.54539490 32.81360245]
[95.60977173 17.84281349]
[86.03926086 29.39293671]
[71.54818726 33.26705551]
[57.49071121 28.03376007]
[49.06079102 15.62664795]
[49.37311554 0.62989998]
[58.31228256 -11.41548347]
[72.57545471 -16.05897331]
[86.89266205 -11.58489323]
[95.97370148 0.35284966]
[97.53128815 -14.56606293]
[99.08886719 -29.48497391]
[100.64644623 -44.40388870]
[89.38717651 -57.75177765]
[91.19710541 -74.78141022]
[104.47757721 -85.05209351]
[105.72444916 -100.00017548]
[106.97132874 -114.94826508]
[108.21820068 -129.89634705]
[94.26199341 -135.73410034]
[82.79412842 -145.60038757]
[74.93813324 -158.52857971]
[71.46363831 -173.25213623]
[72.71104431 -188.32858276]
[78.55815125 -202.28088379]
[88.43210602 -213.74212646]
[101.36557007 -221.58946228]
[116.09145355 -225.05409241]
[131.16705322 -223.79656982]
[145.11543274 -217.94012451]
[156.57005310 -208.05848694]
[164.40872192 -195.11976624]
[167.86347961 -180.39157104]
[166.59587097 -165.31681824]
[160.73007202 -151.37236023]
[150.84075928 -139.92436218]
[137.89680481 -132.09436035]
[123.16629028 -128.64947510]
[121.91941071 -113.70139313]
[120.67253876 -98.75330353]
[119.42566681 -83.80521393]
[129.06449890 -75.19768524]
[132.01010132 -62.41497040]
[126.96252441 -50.09629059]
[115.56536102 -42.84630585]
[114.00778198 -27.92739296]
[112.45019531 -13.00848198]
[110.89261627 1.91043055]
[110.58055878 16.90718460]
[111.51618958 31.87797546]
[112.45182037 46.84876633]
[113.38744354 61.81955719]
[114.32307434 76.79035187]
[117.64903259 109.54470825]
[124.55603027 122.85987091]
[131.46302795 136.17501831]
[132.45739746 121.20801544]
[137.07537842 106.93656921]
[145.03755188 94.22422791]
[155.86215210 83.84019470]
[168.89418030 76.41279602]
[183.34509277 72.39144897]
[198.34046936 72.01948547]
[212.97299194 75.31941223]
[226.35723877 82.09156036]
[237.68334961 91.92613983]
[246.26602173 104.22808838]
[251.58589172 118.25302887]
[253.32109070 133.15232849]
[251.36662292 148.02444458]
[245.84072876 161.96949768]
[237.07778931 174.14369202]
[225.60803223 183.81037903]
[212.12547302 190.38462830]
[197.44593811 193.46865845]
[182.45765686 192.87585449]
[168.06755066 188.64207458]
[155.14634705 181.02352905]
[144.47589111 170.48117065]
[136.70263672 157.65472412]
[136.70263672 172.65472412]
[136.70263672 187.65472412]
[136.70263672 202.65472412]
[136.70263672 217.65472412]
[136.70263672 232.65472412]
[136.70263672 247.65472412]
[136.70263672 262.65472412]
[136.70263672 277.65472412]
[136.70263672 292.65472412]
[136.70263672 307.65472412]
[136.70263672 322.65472412]
[151.24252319 326.71603394]
[164.14691162 334.55053711]
[174.45819092 345.57687378]
[181.41120911 358.97680664]
[184.49000549 373.75598145]
[183.46612549 388.81765747]
[178.41551208 403.04415894]
[169.71299744 415.37985229]
[158.00433350 424.90924072]
[144.15838623 430.92529297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 105]
[24 104]
[25 103]
[26 36]
[27 35]
[28 34]
[46 102]
[47 101]
[48 100]
[49 99]
[50 98]
[59 97]
[60 96]
[61 95]
[62 94]
[65 90]
[66 89]
[67 88]
[68 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
