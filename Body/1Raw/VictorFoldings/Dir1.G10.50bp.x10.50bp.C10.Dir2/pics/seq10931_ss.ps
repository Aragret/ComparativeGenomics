%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAUAGCCCGGGGGGGGGGACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGxxxxxxxxxxUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACCCCCCCCCCCGAAAAUAACCC\
) } def
/len { sequence length } bind def

/coor [
[72.85112000 454.52246094]
[59.36224365 447.79092407]
[47.87674332 438.02636719]
[39.06237411 425.79644775]
[33.43159103 411.81225586]
[31.31176376 396.88677979]
[32.82613373 381.88778687]
[37.88665771 367.68728638]
[46.19911957 355.11087036]
[57.28025055 344.88970947]
[70.48580933 337.61807251]
[85.04803467 333.71868896]
[84.74005127 318.72186279]
[84.43207550 303.72500610]
[84.12409973 288.72817993]
[83.81612396 273.73135376]
[83.50814056 258.73449707]
[83.20016479 243.73767090]
[82.89218903 228.74082947]
[82.58421326 213.74398804]
[82.27622986 198.74716187]
[73.74948883 190.11251831]
[73.40592194 177.58042908]
[81.97822571 167.88923645]
[81.97822571 152.88923645]
[81.97822571 137.88923645]
[74.05639648 150.62677002]
[62.48515701 160.17173767]
[48.47360992 165.52677917]
[33.48583603 166.13233948]
[19.08793831 161.92515564]
[6.78437042 153.34480286]
[-2.13924742 141.28790283]
[-6.75047207 127.01426697]
[-6.56746960 112.01538086]
[-1.60936260 97.85850525]
[7.60576916 86.02291107]
[20.11502075 77.74531555]
[34.61128235 73.89065552]
[49.57981873 74.86171722]
[63.45653915 80.55702972]
[74.79145050 90.38147736]
[82.40014648 103.30850220]
[85.48755646 117.98681641]
[90.61785889 103.89142609]
[90.19882202 95.78795624]
[96.00090790 89.56112671]
[101.41953278 75.57404327]
[106.83815765 61.58696365]
[112.25678253 47.59988022]
[115.76594543 33.01612854]
[117.30323792 18.09511375]
[118.84053040 3.17409706]
[106.62086487 -2.57769680]
[96.79663849 -11.81193829]
[90.32200623 -23.61236572]
[87.81980133 -36.81445694]
[89.52160645 -50.12033081]
[95.24644470 -62.22637177]
[104.41986847 -71.95090485]
[116.13160706 -78.34957886]
[129.22584534 -80.80703735]
[131.37443542 -95.65235901]
[129.49998474 -104.65692902]
[133.72254944 -110.77919006]
[136.17547607 -125.57727051]
[138.62840271 -140.37535095]
[141.08132935 -155.17343140]
[143.53425598 -169.97151184]
[129.79029846 -176.19772339]
[118.12671661 -185.76972961]
[109.33877563 -198.03491211]
[104.02565002 -212.15698242]
[102.54959106 -227.17309570]
[105.01123810 -242.05941772]
[111.24275970 -255.80099487]
[120.81927490 -267.46087646]
[133.08784485 -276.24407959]
[147.21197510 -281.55175781]
[162.22865295 -283.02200317]
[177.11402893 -280.55459595]
[190.85317993 -274.31777954]
[202.50936890 -264.73675537]
[211.28782654 -252.46481323]
[216.59005737 -238.33863831]
[218.05451965 -223.32138062]
[215.58137512 -208.43696594]
[209.33923340 -194.70021057]
[199.75372314 -183.04772949]
[187.47837830 -174.27401733]
[173.35015869 -168.97724915]
[158.33233643 -167.51858521]
[155.87940979 -152.72050476]
[153.42648315 -137.92242432]
[150.97355652 -123.12434387]
[148.52062988 -108.32626343]
[146.21975708 -93.50377655]
[144.07116699 -78.65845490]
[158.54156494 -70.52796936]
[168.82234192 -57.45056152]
[173.32676697 -41.39932251]
[171.34228516 -24.80969810]
[163.14312744 -10.20997620]
[149.95278931 0.16403551]
[133.76155090 4.71138954]
[132.22425842 19.63240623]
[130.68696594 34.55342102]
[140.38981628 23.11424637]
[153.85772705 16.51007271]
[168.84289551 15.84314919]
[182.84425354 21.22478867]
[193.52494812 31.75678253]
[199.10232544 45.68132019]
[198.64553833 60.67436218]
[192.23081970 74.23354340]
[180.92878723 84.09579468]
[166.62577820 88.61509705]
[151.70901489 87.03716278]
[138.66810608 79.62535858]
[129.67964172 67.61672211]
[126.24386597 53.01850510]
[120.82524109 67.00558472]
[115.40661621 80.99266815]
[109.98799133 94.97975159]
[104.71324921 109.02172852]
[99.58294678 123.11711884]
[96.97822571 137.88923645]
[96.97822571 152.88923645]
[96.97822571 167.88923645]
[106.56058502 183.58029175]
[97.27307129 198.43917847]
[97.58104706 213.43601990]
[97.88902283 228.43284607]
[98.19700623 243.42968750]
[98.50498199 258.42654419]
[98.81295776 273.42337036]
[99.12093353 288.42019653]
[99.42891693 303.41705322]
[99.73689270 318.41387939]
[100.04486847 333.41070557]
[114.75490570 336.70895386]
[128.24786377 343.43231201]
[139.73928833 353.18991089]
[148.56106567 365.41445923]
[154.20031738 379.39523315]
[156.32919312 394.31942749]
[154.82392883 409.31933594]
[149.77201843 423.52291870]
[141.46717834 436.10437012]
[130.39224243 446.33224487]
[117.19109344 453.61187744]
[102.63124084 457.52008057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 129]
[25 128]
[26 127]
[44 126]
[45 125]
[47 124]
[48 123]
[49 122]
[50 121]
[51 107]
[52 106]
[53 105]
[62 98]
[63 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
