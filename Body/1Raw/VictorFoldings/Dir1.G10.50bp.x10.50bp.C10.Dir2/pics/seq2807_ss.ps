%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGCCCGUGGGGGGGGGGGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGAGCUUUAAxxxxxxxxxxUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAACCCCCCCCCCACCUGCCCCU\
) } def
/len { sequence length } bind def

/coor [
[83.48099518 452.72793579]
[68.99130249 448.51947021]
[56.08507156 440.70333862]
[45.64227295 429.81250000]
[38.37490845 416.58950806]
[34.77848053 401.93591309]
[35.09820175 386.85079956]
[39.31227493 372.36273193]
[47.13336945 359.45953369]
[58.02824020 349.02093506]
[71.25405121 341.75866699]
[85.90904236 338.16790771]
[86.22109985 323.17114258]
[86.53314972 308.17440796]
[86.84520721 293.17764282]
[87.15726471 278.18090820]
[87.46932220 263.18414307]
[87.78137970 248.18739319]
[88.09343719 233.19062805]
[88.40548706 218.19387817]
[88.71754456 203.19712830]
[77.35280609 196.12332153]
[70.93036652 184.25473022]
[71.23000336 170.65469360]
[78.28044891 158.89440918]
[90.32371521 152.11511230]
[90.94769287 137.12809753]
[91.57167053 122.14108276]
[85.82573700 118.98300934]
[81.16546631 114.37096405]
[77.94779205 108.65819550]
[62.96807861 109.43804169]
[54.62559509 122.52172089]
[40.17369843 128.17170715]
[25.16943932 124.21546173]
[15.38226223 112.17424774]
[14.57553482 96.67816162]
[23.05945969 83.68575287]
[37.57179642 78.19287872]
[52.53225708 82.31165314]
[62.18823242 94.45832825]
[77.16794586 93.67848206]
[79.73968506 87.72059631]
[83.83149719 82.68400574]
[89.13639069 78.94658661]
[95.25635529 76.78874969]
[101.73221588 76.37239838]
[107.50849152 62.52917862]
[112.99552155 48.56879044]
[118.19094086 34.49726868]
[123.38635254 20.42575073]
[128.58177185 6.35423183]
[133.77719116 -7.71728754]
[129.09182739 -19.77967644]
[133.75697327 -31.41820335]
[144.74948120 -36.56330490]
[150.23651123 -50.52369308]
[155.72354126 -64.48408508]
[161.21057129 -78.44447327]
[163.84944153 -93.21053314]
[163.53738403 -108.20728302]
[163.06933594 -123.19998169]
[162.44535828 -138.18699646]
[161.66551208 -153.16671753]
[160.72988892 -168.13749695]
[159.79426575 -183.10829163]
[145.31814575 -187.66969299]
[133.46977234 -197.15551758]
[125.85156250 -210.28286743]
[123.49379730 -225.27636719]
[126.71534729 -240.10829163]
[135.08052063 -252.77275085]
[147.45802307 -261.55694580]
[162.17385864 -265.27291870]
[177.23785400 -263.41809082]
[190.61273193 -256.24334717]
[200.48963928 -244.71896362]
[205.53280640 -230.40356445]
[205.06019592 -215.23315430]
[199.13571167 -201.25942993]
[188.56059265 -190.37222290]
[174.76506042 -184.04391479]
[175.70068359 -169.07313538]
[176.63630676 -154.10234070]
[180.21565247 -147.58053589]
[177.43237305 -138.81097412]
[178.05635071 -123.82395935]
[181.49925232 -117.22910309]
[178.53413391 -108.51934052]
[178.84619141 -93.52258301]
[186.41424561 -106.47343445]
[197.40681458 -116.67948914]
[210.88287354 -123.26705170]
[225.68878174 -125.67218781]
[240.55711365 -123.68901062]
[254.21502686 -117.48728943]
[265.49334717 -107.59792328]
[273.42657471 -94.86749268]
[277.33560181 -80.38579559]
[276.88577271 -65.39253998]
[272.11563110 -51.17123413]
[263.43347168 -38.93929291]
[251.58259583 -29.74383354]
[237.57745361 -24.37204170]
[222.61698914 -23.28376961]
[207.98188782 -26.57218170]
[194.92498779 -33.95576859]
[184.56402588 -44.80245590]
[177.78598022 -58.18371201]
[175.17095947 -72.95744324]
[169.68392944 -58.99705124]
[164.19689941 -45.03666306]
[158.70986938 -31.07627296]
[162.27239990 -13.92085648]
[147.84870911 -2.52187204]
[142.65328979 11.54964733]
[137.45787048 25.62116623]
[132.26245117 39.69268417]
[127.06703949 53.76420593]
[128.24641418 58.45298004]
[126.44665527 63.92949295]
[121.35170746 68.30545044]
[115.57543182 82.14866638]
[123.12796021 105.13435364]
[106.55868530 122.76506042]
[105.93470764 137.75207520]
[105.31072998 152.73908997]
[118.69458771 163.03105164]
[123.28438568 179.10635376]
[117.46871185 194.60292053]
[103.71430206 203.50918579]
[103.40224457 218.50593567]
[103.09018707 233.50268555]
[102.77812958 248.49945068]
[102.46607208 263.49618530]
[102.15402222 278.49295044]
[101.84196472 293.48971558]
[101.52990723 308.48645020]
[101.21784973 323.48321533]
[100.90579224 338.47998047]
[115.39872742 342.67724609]
[128.31098938 350.48339844]
[138.76220703 361.36618042]
[146.03977966 374.58355713]
[149.64750671 389.23437500]
[149.33944702 404.31973267]
[145.13656616 418.81103516]
[137.32542419 431.72027588]
[126.43862915 442.16729736]
[113.21842957 449.43975830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 127]
[27 126]
[28 125]
[31 42]
[32 41]
[47 123]
[48 122]
[49 119]
[50 118]
[51 117]
[52 116]
[53 115]
[56 113]
[57 112]
[58 111]
[59 110]
[60 90]
[61 89]
[62 87]
[63 86]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
