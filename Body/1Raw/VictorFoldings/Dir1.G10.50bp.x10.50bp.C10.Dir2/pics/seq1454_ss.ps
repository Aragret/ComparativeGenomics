%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACAAAACGGGGGGGGGGUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGxxxxxxxxxxCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUCCCCCCCCCCUAAACAAAAC\
) } def
/len { sequence length } bind def

/coor [
[92.50858307 383.85559082]
[78.66264343 377.83956909]
[66.95397949 368.31015015]
[58.25145340 355.97445679]
[53.20085144 341.74795532]
[52.17695999 326.68627930]
[55.25576019 311.90710449]
[62.20878220 298.50717163]
[72.52006531 287.48083496]
[85.42444611 279.64633179]
[99.96433258 275.58502197]
[99.96433258 260.58502197]
[99.96433258 245.58502197]
[99.96433258 230.58502197]
[99.96433258 215.58502197]
[99.96433258 200.58502197]
[99.96433258 185.58502197]
[99.96433258 170.58502197]
[99.96433258 155.58502197]
[99.96433258 140.58502197]
[81.54151154 130.56312561]
[72.73121643 114.37166595]
[58.15851212 117.92642975]
[43.58580780 121.48119354]
[29.01310539 125.03594971]
[14.44040298 128.59071350]
[7.05533838 139.21684265]
[-5.20337772 141.85177612]
[-15.61290836 135.61087036]
[-30.25640869 138.86169434]
[-41.97167969 150.33708191]
[-57.69240952 145.66902161]
[-61.24645996 129.65963745]
[-48.97772980 118.77798462]
[-33.50723648 124.21818542]
[-18.86373329 120.96736145]
[-6.62759066 108.42636108]
[10.88564110 114.01801300]
[25.45834351 110.46324921]
[40.03104782 106.90848541]
[54.60374832 103.35372925]
[69.17645264 99.79896545]
[72.57079315 85.93692017]
[81.84508514 75.08954620]
[95.01121521 69.58218384]
[96.25808716 54.63409805]
[97.50496674 39.68600845]
[98.59627533 24.72576141]
[99.53190613 9.75496960]
[96.89514160 3.57799625]
[97.70072174 -2.13009834]
[100.83065796 -5.81506920]
[102.38823700 -20.73398209]
[101.76425934 -35.72099686]
[98.97193909 -50.45880508]
[96.17961121 -65.19660950]
[93.38728333 -79.93441772]
[90.59496307 -94.67221832]
[75.54046631 -95.34956360]
[61.04813385 -99.48104095]
[47.89952469 -106.84383392]
[36.80372238 -117.04089355]
[28.35911369 -129.52229309]
[23.02110291 -143.61492920]
[21.07756233 -158.55879211]
[22.63330650 -173.54800415]
[27.60443306 -187.77420044]
[35.72285843 -200.47018433]
[46.55076599 -210.95126343]
[59.50421906 -218.65222168]
[73.88465118 -223.15776062]
[88.91654968 -224.22488403]
[103.78926086 -221.79606628]
[117.70071411 -216.00225830]
[129.90069580 -207.15594482]
[139.73126221 -195.73417664]
[146.66226196 -182.35292053]
[150.31991577 -167.73382568]
[150.50698853 -152.66525269]
[147.21337891 -137.95985413]
[140.61669922 -124.41065979]
[131.07270813 -112.74836731]
[119.09610748 -103.60191345]
[105.33277130 -97.46454620]
[108.12509155 -82.72673798]
[110.91741943 -67.98893738]
[113.70973969 -53.25112915]
[116.50206757 -38.51332092]
[122.35675049 -52.32355881]
[132.97550964 -62.91798782]
[146.79914856 -68.74098206]
[161.79785156 -68.93751526]
[175.76931763 -63.47873306]
[186.66203308 -53.16617966]
[192.87657166 -39.51409149]
[193.50041199 -24.52706909]
[188.44198608 -10.40573025]
[178.44400024 0.77642131]
[164.97454834 7.37745762]
[150.01138306 8.42811680]
[135.75164795 3.77412605]
[124.28913116 -5.90114737]
[117.30715179 -19.17640114]
[115.74956512 -4.25748825]
[114.50269318 10.69059849]
[113.56706238 25.66139030]
[116.30654907 32.57810211]
[112.45304871 40.93288422]
[111.20617676 55.88097000]
[109.95930481 70.82905579]
[130.56312561 81.54151154]
[140.09747314 106.27196503]
[154.91523743 108.60306549]
[169.73300171 110.93416595]
[183.49645996 102.69119263]
[198.47135925 108.44720459]
[203.17024231 123.78669739]
[193.98852539 136.94252014]
[177.96963501 137.82264709]
[167.40188599 125.75193024]
[152.58413696 123.42082214]
[137.76637268 121.08972168]
[132.06587219 125.96354675]
[143.95208740 135.11329651]
[157.14930725 142.24302673]
[158.73641968 157.15882874]
[147.33497620 166.90599060]
[132.84738159 163.01889038]
[127.85622406 148.87493896]
[120.66484833 135.71119690]
[114.96433258 140.58502197]
[114.96433258 155.58502197]
[114.96433258 170.58502197]
[114.96433258 185.58502197]
[114.96433258 200.58502197]
[114.96433258 215.58502197]
[114.96433258 230.58502197]
[114.96433258 245.58502197]
[114.96433258 260.58502197]
[114.96433258 275.58502197]
[129.50422668 279.64633179]
[142.40859985 287.48083496]
[152.71987915 298.50717163]
[159.67291260 311.90710449]
[162.75170898 326.68627930]
[161.72781372 341.74795532]
[156.67721558 355.97445679]
[147.97468567 368.31015015]
[136.26602173 377.83956909]
[122.42008972 383.85559082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[29 36]
[30 35]
[45 110]
[46 109]
[47 108]
[48 106]
[49 105]
[52 104]
[53 103]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
