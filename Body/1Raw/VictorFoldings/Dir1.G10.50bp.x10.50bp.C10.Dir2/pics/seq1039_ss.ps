%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAACAAGGGGGGGGGGGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCxxxxxxxxxxUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACCCCCCCCCCCAAUGAACAAG\
) } def
/len { sequence length } bind def

/coor [
[124.49435425 496.24533081]
[111.62108612 488.34243774]
[101.49678802 477.13192749]
[94.94220734 463.52261353]
[92.48868561 448.61767578]
[94.33512115 433.62542725]
[100.33183289 419.76123047]
[109.99269867 408.14898682]
[122.53454590 399.73001099]
[136.94065857 395.18685913]
[136.62861633 380.19009399]
[136.31655884 365.19335938]
[136.00450134 350.19659424]
[135.69244385 335.19982910]
[135.38038635 320.20309448]
[135.06832886 305.20632935]
[134.75627136 290.20959473]
[134.44421387 275.21282959]
[134.13215637 260.21606445]
[133.82009888 245.21931458]
[118.90254211 239.70515442]
[107.20090485 228.86853027]
[100.52231598 214.33641052]
[99.91597748 198.30995178]
[105.50846863 183.23109436]
[116.47924805 171.41047668]
[110.13211823 157.81951904]
[103.78498840 144.22857666]
[97.43785858 130.63761902]
[91.09072876 117.04666901]
[78.07442474 109.59175873]
[63.14011383 110.99406433]
[48.20580673 112.39636993]
[35.15292358 122.32382202]
[20.13573074 115.73474884]
[18.60262489 99.40741730]
[32.13073730 90.13799286]
[46.80350113 97.46205902]
[61.73781204 96.05976105]
[76.67211914 94.65745544]
[78.84895325 79.81624603]
[64.94639587 74.18428802]
[51.04384232 68.55233765]
[37.31561279 76.04030609]
[21.99629593 72.90142822]
[12.31920624 60.61778259]
[12.85356903 44.98933029]
[23.34707451 33.39535141]
[38.84500885 31.31016731]
[52.02972412 39.71833420]
[56.67580032 54.64978027]
[70.57835388 60.28173447]
[84.48091125 65.91368866]
[96.65274811 57.14748383]
[95.71711731 42.17669296]
[94.78149414 27.20590210]
[81.13011169 20.30755997]
[72.81939697 7.58636379]
[71.99745941 -7.48648596]
[78.78505707 -20.85752106]
[91.26998138 -28.98108292]
[90.33435059 -43.95187378]
[75.51940918 -46.77472305]
[61.87228012 -53.19395447]
[50.25081635 -62.80605316]
[41.38556290 -75.00679779]
[35.83379745 -89.02922821]
[33.94449997 -103.99189758]
[35.83644485 -118.95423126]
[41.39069366 -132.97567749]
[50.25810623 -145.17485046]
[61.88126755 -154.78489685]
[75.52953339 -161.20172119]
[90.34497070 -164.02194214]
[105.39626312 -163.06829834]
[119.73727417 -158.40072632]
[132.46650696 -150.31262207]
[142.78381348 -139.31243896]
[150.04061890 -126.09163666]
[153.78076172 -111.48129272]
[153.76913452 -96.39982605]
[150.00646973 -81.79526520]
[142.72927856 -68.58567047]
[132.39503479 -57.60140991]
[119.65333557 -49.53295517]
[105.30513763 -44.88750458]
[106.24076843 -29.91671181]
[119.63999176 -23.41082764]
[128.03956604 -10.98894501]
[129.10069275 4.06895542]
[122.43853760 17.72591019]
[109.75228119 26.27027321]
[110.68791199 41.24106598]
[111.62354279 56.21185684]
[124.68685150 68.90857697]
[130.11437988 84.01044464]
[128.40846252 97.82258606]
[121.61434937 107.52717590]
[112.68447113 111.73945618]
[104.68167877 110.69953918]
[111.02880859 124.29049683]
[117.37593842 137.88143921]
[123.72306824 151.47239685]
[130.07020569 165.06333923]
[148.23425293 164.63679504]
[164.75273132 172.02046204]
[176.45126343 185.72444153]
[181.11224365 203.05119324]
[195.97528076 205.07353210]
[210.83833313 207.09587097]
[219.21128845 194.33433533]
[232.29649353 186.47685242]
[247.49588013 185.08351135]
[261.79159546 190.43095398]
[272.34521484 201.45745850]
[277.06130981 215.97369385]
[275.00350952 231.09745789]
[266.58038330 243.82591248]
[253.46432495 251.63180542]
[238.25956726 252.96528625]
[223.98501587 247.56158447]
[213.47489929 236.49360657]
[208.81599426 221.95890808]
[193.95295715 219.93658447]
[179.08990479 217.91424561]
[175.59423828 225.63676453]
[170.57388306 232.46708679]
[164.24688721 238.10856628]
[156.88801575 242.31620789]
[148.81686401 244.90727234]
[149.12890625 259.90402222]
[149.44096375 274.90078735]
[149.75302124 289.89752197]
[150.06507874 304.89428711]
[150.37713623 319.89102173]
[150.68919373 334.88778687]
[151.00125122 349.88455200]
[151.31330872 364.88128662]
[151.62536621 379.87805176]
[151.93742371 394.87481689]
[166.52006531 398.81475830]
[179.40126038 406.70471191]
[189.53681946 417.90502930]
[196.10507202 431.50778198]
[198.57356262 446.41021729]
[196.74218750 461.40432739]
[190.75939941 475.27453613]
[181.11021423 486.89648438]
[168.57682800 495.32803345]
[154.17527771 499.88568115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[31 40]
[32 39]
[33 38]
[41 53]
[42 52]
[43 51]
[54 94]
[55 93]
[56 92]
[61 87]
[62 86]
[108 125]
[109 124]
[110 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
