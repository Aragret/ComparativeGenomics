%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUAACCCGGGGGGGGGGCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCxxxxxxxxxxUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCCCCCCCCCCCGGACUACCCC\
) } def
/len { sequence length } bind def

/coor [
[90.29589081 553.36737061]
[77.07569885 546.09484863]
[66.18889618 535.64788818]
[58.37776184 522.73864746]
[54.17488098 508.24731445]
[53.86680984 493.16195679]
[57.47455215 478.51113892]
[64.75212097 465.29376221]
[75.20333099 454.41098022]
[88.11559296 446.60482788]
[102.60852814 442.40756226]
[102.29647064 427.41079712]
[101.98442078 412.41406250]
[101.67236328 397.41729736]
[101.36030579 382.42053223]
[101.04824829 367.42379761]
[100.73619080 352.42703247]
[100.42413330 337.43026733]
[100.11208344 322.43353271]
[99.80002594 307.43676758]
[84.68797302 304.15341187]
[70.78628540 297.35879517]
[58.89816666 287.44082642]
[49.71157074 274.96804810]
[43.75941467 260.65704346]
[41.38865280 245.33116150]
[42.74004364 229.87322998]
[47.73983002 215.17472839]
[56.10372162 202.08428955]
[67.35307312 191.35874939]
[80.84227753 183.61941528]
[95.79578400 179.31600952]
[95.17180634 164.32899475]
[94.54783630 149.34197998]
[93.92385864 134.35496521]
[85.91474152 132.33682251]
[78.52071381 128.45838928]
[72.17202759 122.89785767]
[67.24900818 115.93245697]
[64.05942535 107.92474365]
[62.81947708 99.30387115]
[63.63964081 90.54255676]
[66.51625061 82.13119507]
[71.32939148 74.55039978]
[77.84735870 68.24357605]
[85.73756409 63.59106827]
[94.58339691 60.88735580]
[103.90615845 60.32273865]
[102.97052765 45.35194778]
[102.03489685 30.38115501]
[101.09926605 15.41036320]
[100.16364288 0.43957150]
[88.75662231 -4.85159540]
[80.74813080 -14.45182228]
[77.62469482 -26.48256493]
[79.92474365 -38.62378693]
[87.14693451 -48.56132507]
[97.85781097 -54.42798996]
[97.54575348 -69.42474365]
[97.23369598 -84.42149353]
[86.47863007 -92.59378052]
[82.47251129 -105.28940582]
[86.47048187 -117.78302765]
[96.79146576 -125.55953979]
[96.79146576 -140.55953979]
[96.79146576 -155.55953979]
[96.63542938 -170.55873108]
[96.32337189 -185.55548096]
[82.26890564 -191.41995239]
[71.81953430 -202.49832153]
[66.78565979 -216.87121582]
[68.03944397 -232.04843140]
[75.36365509 -245.40043640]
[87.48933411 -254.61389160]
[102.31562042 -258.09252930]
[117.27378845 -255.23365784]
[129.77223206 -246.53257751]
[137.64552307 -233.49681091]
[139.52957153 -218.38488770]
[135.09796143 -203.81504822]
[125.11846924 -192.31156921]
[111.32012177 -185.86753845]
[111.63217926 -170.87078857]
[114.93713379 -164.20573425]
[111.79146576 -155.55953979]
[111.79146576 -140.55953979]
[111.79146576 -125.55953979]
[124.17222595 -114.22046661]
[124.56029510 -97.09932709]
[112.23045349 -84.73355103]
[112.54251099 -69.73680115]
[112.85456848 -54.74004745]
[127.78096771 -45.39818573]
[134.21382141 -28.83862686]
[129.42449951 -11.56886005]
[115.13442993 -0.49605697]
[116.07006073 14.47473431]
[117.00569153 29.44552612]
[117.94131470 44.41631699]
[118.87694550 59.38710785]
[131.22851562 67.89820099]
[145.55111694 63.44138336]
[159.87371826 58.98456955]
[168.57785034 45.50801086]
[184.55488586 44.05412292]
[195.54861450 55.73819733]
[193.12557983 71.59721375]
[179.14453125 79.46549225]
[164.33053589 73.30716705]
[150.00793457 77.76398468]
[135.68533325 82.22079468]
[137.88952637 104.92884064]
[127.45467377 124.12531281]
[108.91087341 133.73098755]
[109.53485107 148.71800232]
[110.15882874 163.70501709]
[110.78280640 178.69203186]
[125.09748840 181.43470764]
[138.43041992 187.30375671]
[150.10867310 195.99929810]
[159.54360962 207.07884216]
[166.26065063 219.97987366]
[169.92308044 234.04837036]
[170.34890747 248.57202148]
[167.51998901 262.81616211]
[161.58267212 276.06109619]
[152.84030151 287.63833618]
[141.73771667 296.96441650]
[128.83857727 303.57022095]
[114.79677582 307.12472534]
[115.10883331 322.12145996]
[115.42089081 337.11822510]
[115.73294830 352.11499023]
[116.04500580 367.11172485]
[116.35705566 382.10848999]
[116.66911316 397.10522461]
[116.98117065 412.10198975]
[117.29322815 427.09875488]
[117.60528564 442.09548950]
[132.26026917 445.68627930]
[145.48608398 452.94851685]
[156.38095093 463.38711548]
[164.20205688 476.29034424]
[168.41612244 490.77841187]
[168.73583984 505.86349487]
[165.13941956 520.51708984]
[157.87205505 533.74011230]
[147.42924500 544.63092041]
[134.52302551 552.44708252]
[120.03333282 556.65551758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[32 117]
[33 116]
[34 115]
[35 114]
[48 100]
[49 99]
[50 98]
[51 97]
[52 96]
[58 92]
[59 91]
[60 90]
[64 87]
[65 86]
[66 85]
[67 83]
[68 82]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
