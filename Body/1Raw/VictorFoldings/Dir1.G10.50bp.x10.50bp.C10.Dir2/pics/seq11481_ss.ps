%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUUGGCGGGGGGGGGGGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACxxxxxxxxxxUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCCCCCCCCCCCUCCUAGGCG\
) } def
/len { sequence length } bind def

/coor [
[77.46499634 378.01702881]
[64.59172058 370.11413574]
[54.46742630 358.90362549]
[47.91284561 345.29428101]
[45.45932388 330.38937378]
[47.30575943 315.39712524]
[53.30247116 301.53292847]
[62.96333313 289.92065430]
[75.50518036 281.50170898]
[89.91130066 276.95855713]
[89.59925079 261.96179199]
[89.28719330 246.96504211]
[88.97513580 231.96829224]
[88.66307831 216.97154236]
[88.35102081 201.97477722]
[88.03896332 186.97802734]
[87.72691345 171.98127747]
[87.41485596 156.98452759]
[87.10279846 141.98777771]
[86.79074097 126.99102020]
[75.38971710 117.24336243]
[60.52667236 119.26570129]
[45.66362762 121.28803253]
[30.80057907 123.31037140]
[20.50119019 137.41213989]
[3.52775216 139.68952942]
[-9.59761620 129.22135925]
[-24.41537476 131.55245972]
[-39.23313141 133.88356018]
[-54.05089188 136.21466064]
[-61.96324921 149.70275879]
[-76.71170807 154.90054321]
[-91.33249664 149.35377502]
[-98.92212677 135.68148804]
[-95.89700317 120.33930206]
[-83.68550110 110.57133484]
[-68.05352020 110.98971558]
[-56.38199615 121.39690399]
[-41.56423569 119.06580353]
[-26.74647903 116.73469543]
[-11.92872047 114.40359497]
[-5.85063839 102.99948883]
[5.86987877 97.10848999]
[19.03384018 99.09294891]
[28.77824593 108.44731903]
[43.64129257 106.42498779]
[58.50433731 104.40264893]
[73.36738586 102.38031769]
[84.36028290 83.23486328]
[103.01859283 81.12359619]
[111.00851440 68.42867279]
[99.00013733 59.42580032]
[87.76554108 49.47408295]
[77.37948608 38.63975143]
[67.91110229 26.99490547]
[59.42338943 14.61704063]
[51.97283936 1.58852935]
[45.60903168 -12.00392342]
[40.37432098 -26.06986046]
[36.30353928 -40.51567459]
[33.42378235 -55.24522781]
[31.75420952 -70.16049957]
[31.30593491 -85.16223145]
[32.08193970 -100.15058136]
[34.07706451 -115.02580261]
[37.27802277 -129.68890381]
[41.66352081 -144.04231262]
[47.20437241 -157.99049377]
[53.86369705 -171.44062805]
[61.59718704 -184.30320740]
[70.35337067 -196.49263000]
[80.07397461 -207.92778015]
[90.69431305 -218.53256226]
[102.14369965 -228.23638916]
[114.34595490 -236.97468567]
[127.21986389 -244.68930054]
[140.67974854 -251.32888794]
[154.63604736 -256.84927368]
[168.99586487 -261.21371460]
[183.66365051 -264.39318848]
[198.54177856 -266.36648560]
[213.53125000 -267.12051392]
[228.53230286 -266.65023804]
[243.44511414 -264.95880127]
[258.17044067 -262.05743408]
[272.61026001 -257.96548462]
[286.66848755 -252.71014404]
[300.25161743 -246.32641602]
[313.26916504 -238.85676575]
[325.63458252 -230.35092163]
[337.26553345 -220.86546326]
[348.08462524 -210.46353149]
[358.01986694 -199.21435547]
[367.00509644 -187.19279480]
[374.98059082 -174.47883606]
[381.89321899 -161.15710449]
[387.69699097 -147.31626892]
[392.35327148 -133.04841614]
[395.83111572 -118.44849396]
[398.10733032 -103.61368561]
[399.16677856 -88.64270020]
[399.00244141 -73.63517761]
[397.61538696 -58.69098282]
[395.01483154 -43.90958023]
[391.21810913 -29.38932610]
[386.25048828 -15.22686195]
[380.14498901 -1.51643217]
[372.94229126 11.65071869]
[364.69030762 24.18696594]
[355.44393921 36.00888062]
[345.26473999 47.03778839]
[334.22045898 57.20029068]
[322.38458252 66.42876434]
[309.83587646 74.66178131]
[296.65783691 81.84456635]
[282.93820190 87.92930603]
[268.76821899 92.87551880]
[254.24224854 96.65027618]
[239.45693970 99.22846222]
[224.51066589 100.59291840]
[209.50289917 100.73457336]
[194.53353882 99.65247345]
[179.70219421 97.35382080]
[165.10754395 93.85391235]
[150.84675598 89.17604828]
[137.01469421 83.35134888]
[123.70343781 76.41858673]
[115.71352386 89.11351776]
[120.65490723 109.95214844]
[101.78749847 126.67896271]
[102.09954834 141.67572021]
[102.41160583 156.67247009]
[102.72366333 171.66921997]
[103.03572083 186.66596985]
[103.34777832 201.66273499]
[103.65983582 216.65948486]
[103.97188568 231.65623474]
[104.28394318 246.65298462]
[104.59600067 261.64974976]
[104.90805817 276.64648438]
[119.49069977 280.58645630]
[132.37190247 288.47640991]
[142.50746155 299.67672729]
[149.07571411 313.27947998]
[151.54420471 328.18191528]
[149.71282959 343.17602539]
[143.73004150 357.04623413]
[134.08085632 368.66818237]
[121.54747009 377.09973145]
[107.14591980 381.65737915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 48]
[22 47]
[23 46]
[24 45]
[27 41]
[28 40]
[29 39]
[30 38]
[50 128]
[51 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
