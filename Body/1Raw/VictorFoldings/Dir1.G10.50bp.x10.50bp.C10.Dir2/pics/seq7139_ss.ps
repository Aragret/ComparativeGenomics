%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACGCCAAAGGGGGGGGGGAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAxxxxxxxxxxCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCCCCCCCCCCCUACUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 380.10247803]
[71.19830322 374.08645630]
[59.48964310 364.55703735]
[50.78712082 352.22137451]
[45.73651886 337.99484253]
[44.71262741 322.93316650]
[47.79142761 308.15402222]
[54.74444962 294.75408936]
[65.05573273 283.72775269]
[77.96011353 275.89324951]
[92.50000000 271.83193970]
[92.50000000 256.83193970]
[92.50000000 241.83192444]
[92.50000000 226.83192444]
[92.50000000 211.83192444]
[92.50000000 196.83192444]
[92.50000000 181.83192444]
[92.50000000 166.83192444]
[92.50000000 151.83192444]
[92.50000000 136.83192444]
[92.50000000 121.83193207]
[78.60465240 108.66730499]
[79.41984558 89.54340363]
[68.98003387 78.77259827]
[58.54022217 68.00178528]
[46.80319214 77.36115265]
[34.21763611 85.54401398]
[20.90106773 92.47398376]
[6.97781849 98.08635712]
[-7.42210770 102.32872009]
[-22.16426086 105.16146851]
[-37.11099243 106.55815125]
[-52.12274551 106.50572205]
[-67.05935669 105.00468445]
[-81.78136444 102.06904602]
[-96.15131378 97.72621155]
[-110.03502655 92.01673889]
[-123.30287170 84.99393463]
[-135.83096313 76.72336578]
[-147.50234985 67.28225708]
[-158.20802307 56.75876617]
[-167.84803772 45.25113678]
[-176.33239746 32.86682892]
[-183.58187866 19.72146416]
[-189.52879333 5.93778515]
[-194.11759949 -8.35551167]
[-197.30546570 -23.02496910]
[-199.06263733 -37.93362045]
[-199.37268066 -52.94226456]
[-198.23272705 -67.91076660]
[-195.65341187 -82.69936371]
[-191.65879822 -97.16997528]
[-186.28620911 -111.18749237]
[-179.58581543 -124.62104034]
[-171.62014771 -137.34516907]
[-162.46359253 -149.24110413]
[-152.20166016 -160.19775391]
[-140.93014526 -170.11280823]
[-128.75428772 -178.89372253]
[-115.78780365 -186.45848083]
[-102.15172577 -192.73646545]
[-87.97339630 -197.66903687]
[-73.38518524 -201.21017456]
[-58.52330780 -203.32679749]
[-43.52652359 -203.99914551]
[-28.53486443 -203.22093201]
[-13.68830013 -200.99943542]
[0.87454486 -197.35537720]
[15.01769733 -192.32281494]
[28.60910416 -185.94871521]
[41.52186203 -178.29258728]
[53.63541031 -169.42593384]
[64.83663940 -159.43153381]
[75.02095795 -148.40270996]
[84.09329224 -136.44242859]
[91.96891785 -123.66236877]
[98.57431030 -110.18185425]
[103.84779358 -96.12674713]
[107.74012756 -81.62829590]
[110.21497345 -66.82185364]
[111.24921417 -51.84567642]
[110.83320618 -36.83959579]
[108.97081757 -21.94372368]
[105.67945862 -7.29713821]
[100.98983765 6.96340227]
[94.94576263 20.70475006]
[87.60365295 33.79859924]
[79.03206635 46.12269974]
[69.31102753 57.56197357]
[79.75083923 68.33278656]
[90.19065094 79.10359192]
[102.06317902 77.00812531]
[113.37296295 81.18386078]
[121.03516388 90.49184418]
[135.96946716 89.08954620]
[150.90377808 87.68724060]
[165.83808899 86.28493500]
[177.48324585 67.40899658]
[203.26509094 65.88036346]
[216.78927612 59.39219666]
[225.59571838 45.55822754]
[241.96557617 46.53807831]
[249.05892944 61.32375717]
[239.57876587 74.70502472]
[223.27745056 72.91638184]
[209.75326538 79.40454865]
[212.85157776 94.08107758]
[227.84428406 94.54911804]
[242.83697510 95.01715851]
[257.82968140 95.48519897]
[272.82235718 95.95324707]
[285.45242310 86.06075287]
[301.02746582 89.90749359]
[307.59967041 104.54257965]
[300.12738037 118.73921967]
[284.34274292 121.60697174]
[272.35430908 110.94593811]
[257.36163330 110.47789764]
[242.36892700 110.00985718]
[227.37623596 109.54181671]
[212.38354492 109.07376862]
[199.48370361 117.43540955]
[185.17550659 118.01850891]
[173.50033569 111.71353912]
[167.24038696 101.21924591]
[152.30607605 102.62154388]
[137.37178040 104.02384949]
[122.43746948 105.42615509]
[117.06898499 115.54132080]
[107.50000000 121.83193207]
[107.50000000 136.83192444]
[107.50000000 151.83192444]
[107.50000000 166.83192444]
[107.50000000 181.83192444]
[107.50000000 196.83192444]
[107.50000000 211.83192444]
[107.50000000 226.83192444]
[107.50000000 241.83192444]
[107.50000000 256.83193970]
[107.50000000 271.83193970]
[122.03988647 275.89324951]
[134.94427490 283.72775269]
[145.25555420 294.75408936]
[152.20857239 308.15402222]
[155.28736877 322.93316650]
[154.26348877 337.99484253]
[149.21287537 352.22137451]
[140.51036072 364.55703735]
[128.80169678 374.08645630]
[114.95575714 380.10247803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 91]
[24 90]
[25 89]
[94 128]
[95 127]
[96 126]
[97 125]
[99 106]
[100 105]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
