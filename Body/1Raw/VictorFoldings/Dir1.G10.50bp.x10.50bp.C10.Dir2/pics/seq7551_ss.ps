%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAACACUCAGGGGGGGGGGCAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCxxxxxxxxxxAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCCCCCCCCCCCUCACACUCA\
) } def
/len { sequence length } bind def

/coor [
[75.77986908 389.69500732]
[61.75792313 384.14199829]
[49.55796814 375.27566528]
[39.94689560 363.65335083]
[33.52886963 350.00564575]
[30.70733452 335.19046021]
[31.65964890 320.13906860]
[36.32595444 305.79766846]
[44.41292191 293.06768799]
[55.41219711 282.74942017]
[68.63235474 275.49145508]
[83.24237061 271.75000000]
[83.24237061 256.75000000]
[83.24237061 241.75001526]
[83.24237061 226.75001526]
[83.24237061 211.75001526]
[83.24237061 196.75001526]
[83.24237061 181.75001526]
[83.24237061 166.75001526]
[83.24237061 151.75001526]
[83.24237061 136.75001526]
[83.24237061 121.75001526]
[78.74314117 105.91436005]
[84.46609497 93.94659424]
[94.04453278 90.42132568]
[91.89595795 75.57600403]
[73.25422668 66.64629364]
[64.31871796 48.22859192]
[68.75582123 28.44859695]
[58.20380783 17.78768730]
[47.65179062 7.12677908]
[37.09977722 -3.53412962]
[25.23068047 5.66814756]
[12.33888817 13.37263203]
[-1.38759756 19.46696854]
[-15.74860573 23.86228371]
[-30.53470993 26.49448204]
[-45.53028870 27.32517624]
[-60.51665497 26.34225464]
[-75.27526855 23.56005096]
[-89.59090424 19.01913643]
[-103.25479889 12.78573036]
[-116.06769562 4.95073652]
[-127.84273529 -4.37158871]
[-138.40821838 -15.04529858]
[-147.61004639 -26.91473961]
[-155.31404114 -39.80681992]
[-161.40786743 -53.53353119]
[-165.80264282 -67.89470673]
[-168.43429565 -82.68090820]
[-169.26443481 -97.67651367]
[-168.28094482 -112.66284943]
[-165.49818420 -127.42135620]
[-160.95674133 -141.73683167]
[-154.72282410 -155.40048218]
[-146.88734436 -168.21308899]
[-137.56459045 -179.98777771]
[-126.89048004 -190.55285645]
[-115.02069855 -199.75424194]
[-102.12832642 -207.45776367]
[-88.40138245 -213.55107117]
[-74.04004669 -217.94531250]
[-59.25374603 -220.57641602]
[-44.25811005 -221.40597534]
[-29.27181435 -220.42193604]
[-14.51340866 -217.63862610]
[-0.19811137 -213.09664917]
[13.46531773 -206.86221313]
[26.27762413 -199.02626038]
[38.05196762 -189.70306396]
[48.61664581 -179.02856445]
[57.81759262 -167.15843201]
[65.52062988 -154.26577759]
[71.61342621 -140.53860474]
[76.00713348 -126.17710876]
[78.63767242 -111.39070892]
[79.46668243 -96.39503479]
[78.48207855 -81.40878296]
[75.69821930 -66.65047455]
[71.15570068 -52.33535004]
[64.92076111 -38.67215347]
[57.08433151 -25.86014175]
[47.76068497 -14.08614445]
[58.31270218 -3.42523599]
[68.86471558 7.23567295]
[79.41673279 17.89658165]
[87.38422394 14.61168098]
[95.95186615 13.68050194]
[104.43903351 15.17701817]
[112.17150116 18.98234558]
[118.53499603 24.79418755]
[132.09689331 18.38521194]
[145.65878296 11.97623634]
[159.22068787 5.56726027]
[172.78257751 -0.84171522]
[186.21003723 -7.52779055]
[199.49737549 -14.48814678]
[212.78471375 -21.44850349]
[214.04835510 -36.82402802]
[223.44216919 -49.06166458]
[237.96862793 -54.25642776]
[252.99238586 -50.75068665]
[263.71942139 -39.66311264]
[266.72677612 -24.53170776]
[261.05480957 -10.18484974]
[248.51342773 -1.20056880]
[233.10453796 -0.44571573]
[219.74507141 -8.16116142]
[206.45773315 -1.20080531]
[193.17037964 5.75955105]
[190.90347290 10.02690220]
[185.90093994 12.88392544]
[179.19155884 12.72018147]
[165.62965393 19.12915611]
[152.06776428 25.53813171]
[138.50587463 31.94710732]
[124.94396973 38.35608292]
[124.72832489 52.36975098]
[118.24738312 64.95175934]
[106.74127960 73.42742157]
[108.88985443 88.27275085]
[117.68170166 100.42607880]
[131.10914612 107.11215973]
[144.53660583 113.79823303]
[161.41029358 115.44587708]
[164.49813843 132.11625671]
[149.33404541 139.69825745]
[137.85052490 127.22567749]
[124.42307281 120.53960419]
[110.99562836 113.85353088]
[98.24237061 121.75001526]
[98.24237061 136.75001526]
[98.24237061 151.75001526]
[98.24237061 166.75001526]
[98.24237061 181.75001526]
[98.24237061 196.75001526]
[98.24237061 211.75001526]
[98.24237061 226.75001526]
[98.24237061 241.75001526]
[98.24237061 256.75000000]
[98.24237061 271.75000000]
[112.85237885 275.49145508]
[126.07254028 282.74942017]
[137.07180786 293.06768799]
[145.15878296 305.79766846]
[149.82508850 320.13906860]
[150.77740479 335.19046021]
[147.95587158 350.00564575]
[141.53784180 363.65335083]
[131.92677307 375.27566528]
[119.72681427 384.14199829]
[105.70486450 389.69500732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 121]
[26 120]
[29 86]
[30 85]
[31 84]
[32 83]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[96 110]
[97 109]
[98 108]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
