%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCGCCGGGGGGGGGGGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUxxxxxxxxxxUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCCCCCCCCCCCGCCGCAG\
) } def
/len { sequence length } bind def

/coor [
[125.96929932 439.67156982]
[114.65733337 429.68649292]
[106.31596375 417.11334229]
[101.51390076 402.80941772]
[100.57856750 387.74993896]
[103.57373810 372.96173096]
[110.29518890 359.45303345]
[120.28463745 348.14492798]
[132.86100769 339.80841064]
[147.16679382 335.01190186]
[146.23117065 320.04110718]
[145.29553223 305.07031250]
[144.35990906 290.09951782]
[143.42427063 275.12872314]
[142.48864746 260.15792847]
[141.55302429 245.18713379]
[140.61738586 230.21633911]
[137.36656189 215.57284546]
[131.87953186 201.61245728]
[126.39250183 187.65206909]
[120.90547180 173.69168091]
[115.41844177 159.73129272]
[103.56172943 150.71643066]
[105.71464539 135.04238892]
[100.22761536 121.08200073]
[85.32633972 115.13889313]
[78.92116547 100.43031311]
[64.79636383 95.38156128]
[50.67155838 90.33280182]
[32.38097000 101.79991150]
[9.22711849 91.53239441]
[-5.77207041 91.68843079]
[-20.77125931 91.84446716]
[-35.77044678 92.00050354]
[-46.64846420 103.46542358]
[-62.44927597 103.79689789]
[-73.79854584 92.79827881]
[-73.96294403 76.99484253]
[-62.84494781 65.76249695]
[-47.04065704 65.76518250]
[-35.92648315 77.00131989]
[-20.92729568 76.84528351]
[-5.92810678 76.68924713]
[9.07108116 76.53321075]
[13.52789688 62.21060944]
[1.26552904 53.57149506]
[-10.99683952 44.93237686]
[-23.25920677 36.29326248]
[-38.99695587 34.67034912]
[-44.94515991 21.01501656]
[-61.31752777 20.07822800]
[-68.44975281 5.31125641]
[-59.00481033 -8.09490204]
[-42.69884872 -6.34914207]
[-36.30604172 8.75264835]
[-21.44538116 9.75763226]
[-14.62009144 24.03089333]
[-2.35772300 32.67000961]
[9.90464497 41.30912399]
[22.16701317 49.94824219]
[40.57138824 50.64007568]
[53.13848114 61.55527496]
[55.72031403 76.20800018]
[69.84511566 81.25675201]
[83.96992493 86.30551147]
[92.08401489 80.45928192]
[101.97927094 79.00988770]
[108.60776520 65.55391693]
[115.23626709 52.09795380]
[101.85083771 58.86775970]
[86.85115051 58.77009964]
[73.55500793 51.82657242]
[64.90338898 39.57302475]
[62.80995178 24.71982384]
[67.73773956 10.55236626]
[78.59678650 0.20436035]
[92.98515320 -4.03530979]
[107.72027588 -1.22886872]
[119.54288483 8.00292492]
[125.83791351 21.61808395]
[125.21243286 36.60696411]
[134.72079468 25.00562477]
[144.22914124 13.40428257]
[153.73750305 1.80294168]
[163.12466431 -9.89668179]
[172.38961792 -21.69332123]
[181.65457153 -33.48996353]
[190.91950989 -45.28660202]
[188.78474426 -60.94604874]
[198.41452026 -73.47772980]
[214.09567261 -75.44681549]
[226.52482605 -65.68508911]
[228.32801819 -49.98400116]
[218.43542480 -37.65873718]
[202.71615601 -36.02165222]
[193.45120239 -24.22501183]
[184.18626404 -12.42837238]
[174.92131042 -0.63173270]
[173.25251770 6.61814928]
[165.33885193 11.31130028]
[155.83049011 22.91264153]
[146.32212830 34.51398087]
[136.81376648 46.11532211]
[128.69223022 58.72645187]
[122.06372833 72.18241882]
[115.43523407 85.63838196]
[121.06497955 100.87702942]
[114.18800354 115.59496307]
[119.67503357 129.55535889]
[131.92420959 139.56875610]
[129.37882996 154.24424744]
[134.86585999 168.20465088]
[140.35289001 182.16503906]
[145.83992004 196.12542725]
[151.32695007 210.08581543]
[154.33271790 195.39004517]
[162.35893250 182.71804810]
[174.36041260 173.72000122]
[188.77423096 169.56770325]
[203.72337341 170.80187988]
[217.26107788 177.26181030]
[227.62438965 188.10624695]
[233.46374512 201.92297363]
[234.01870728 216.91270447]
[229.21702576 231.12339783]
[219.68397522 242.70446777]
[206.66102600 250.14776611]
[191.84407043 252.48397827]
[177.16265869 249.40888977]
[164.52868652 241.32293701]
[155.58818054 229.28071594]
[156.52381897 244.25151062]
[157.45944214 259.22229004]
[158.39506531 274.19308472]
[159.33070374 289.16387939]
[160.26632690 304.13467407]
[161.20195007 319.10546875]
[162.13758850 334.07626343]
[176.92926025 337.05429077]
[190.44572449 343.76010132]
[201.76538086 353.73645020]
[210.11647034 366.30313110]
[214.92958069 380.60336304]
[215.87654114 395.66210938]
[212.89279175 410.45263672]
[206.18177795 423.96649170]
[196.20104980 435.28231812]
[183.63113403 443.62854004]
[169.32905579 448.43612671]
[154.26994324 449.37725830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 115]
[19 114]
[20 113]
[21 112]
[22 111]
[24 109]
[25 108]
[27 65]
[28 64]
[29 63]
[31 44]
[32 43]
[33 42]
[34 41]
[45 60]
[46 59]
[47 58]
[48 57]
[50 55]
[67 106]
[68 105]
[69 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
