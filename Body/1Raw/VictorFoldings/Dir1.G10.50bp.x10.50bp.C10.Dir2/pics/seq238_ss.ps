%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUCAUAAGGGGGGGGGGCAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUxxxxxxxxxxUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUCCCCCCCCCCGACAUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[30.77046776 239.46847534]
[20.65698624 233.97338867]
[10.97706413 227.74623108]
[1.78359199 220.82102966]
[-6.87319183 213.23561096]
[-14.94598484 205.03143311]
[-22.39067459 196.25334167]
[-29.16657829 186.94927979]
[-35.23667526 177.17010498]
[-40.56779099 166.96923828]
[-45.13079834 156.40243530]
[-59.35757446 161.15625000]
[-73.58435822 165.91006470]
[-87.76091003 170.81161499]
[-101.88571930 175.86036682]
[-116.01052094 180.90911865]
[-130.13531494 185.95788574]
[-144.26013184 191.00663757]
[-158.38493347 196.05538940]
[-172.50973511 201.10415649]
[-172.05091858 216.22515869]
[-176.28915405 230.74728394]
[-184.80921936 243.24783325]
[-196.77639771 252.50212097]
[-211.01828003 257.60348511]
[-226.13958740 258.05215454]
[-240.65888977 253.80419922]
[-253.15371704 245.27575684]
[-262.39999390 233.30238342]
[-267.49179077 219.05708313]
[-267.93035889 203.93548584]
[-263.67266846 189.41903687]
[-255.13584900 176.92991638]
[-243.15628052 167.69168091]
[-228.90756226 162.60940552]
[-213.78567505 162.18098450]
[-199.27207947 166.44841003]
[-186.78869629 174.99357605]
[-177.55848694 186.97933960]
[-163.43368530 181.93058777]
[-149.30888367 176.88183594]
[-135.18408203 171.83308411]
[-121.05927277 166.78431702]
[-106.93447113 161.73556519]
[-92.80966949 156.68681335]
[-87.53559113 151.43992615]
[-78.33817291 151.68328857]
[-64.11138916 146.92947388]
[-49.88461304 142.17565918]
[-54.81894302 116.59148407]
[-55.41795731 90.54270935]
[-51.66488647 64.75875854]
[-43.66481781 39.96165466]
[-31.64177513 16.84577370]
[-15.93243694 -3.94158196]
[3.02329826 -21.81831551]
[-5.74290895 -33.99015045]
[-14.50911617 -46.16198730]
[-29.67658997 -52.39735031]
[-31.59187889 -68.68427277]
[-18.28469467 -78.26815796]
[-3.44433045 -71.28993225]
[-2.33727932 -54.92819595]
[6.42892790 -42.75635910]
[15.19513512 -30.58452225]
[26.87803650 -37.46767044]
[39.11549377 -43.30826569]
[51.81470108 -48.06201172]
[64.87934113 -51.69285202]
[78.21034241 -54.17325592]
[91.70659637 -55.48440933]
[105.26573944 -55.61637115]
[118.78495789 -54.56813431]
[132.16169739 -52.34765244]
[145.29454041 -48.97176743]
[158.08386230 -44.46607971]
[170.43266296 -38.86476135]
[182.24731445 -32.21029282]
[193.43820190 -24.55313873]
[203.92045593 -15.95137501]
[213.61457825 -6.47023630]
[222.44703674 3.81837320]
[230.35086060 14.83642483]
[243.28892517 7.24651623]
[256.22698975 -0.34339213]
[269.16503906 -7.93330050]
[282.10308838 -15.52320862]
[284.16992188 -19.50939751]
[287.12213135 -22.31215286]
[290.46527100 -23.79721069]
[293.71316528 -24.00959015]
[296.44741821 -23.15447807]
[301.47833252 -35.07687759]
[312.92843628 -40.18708038]
[324.40258789 -36.23089218]
[338.05883789 -42.43629837]
[351.71505737 -48.64170456]
[365.30603027 -54.98883438]
[378.83020020 -61.47700119]
[392.35440063 -67.96516418]
[401.16082764 -81.79913330]
[417.53070068 -80.81928253]
[424.62405396 -66.03360748]
[415.14389038 -52.65233231]
[398.84255981 -54.44097519]
[385.31835938 -47.95280838]
[371.79418945 -41.46464539]
[367.09344482 -35.69847107]
[357.92047119 -34.98546219]
[344.26422119 -28.78005791]
[330.60800171 -22.57464981]
[321.22613525 -7.77665997]
[302.93557739 -9.63028812]
[289.69299316 -2.58515286]
[276.75494385 5.00475550]
[263.81689453 12.59466362]
[250.87882996 20.18457222]
[237.94076538 27.77448082]
[242.89924622 38.16158676]
[247.07685852 48.88660049]
[250.45080566 59.89091492]
[253.00262451 71.11440277]
[254.71839905 82.49571991]
[255.58872986 93.97269440]
[255.60888672 105.48260498]
[254.77873230 116.96255493]
[253.10281372 128.34982300]
[250.59028625 139.58216858]
[247.25488281 150.59822083]
[243.11483765 161.33779907]
[238.19276428 171.74220276]
[232.51554871 181.75457764]
[226.11424255 191.32022095]
[219.02378845 200.38685608]
[211.28294373 208.90495300]
[202.93402100 216.82794189]
[194.02264404 224.11254883]
[184.59747314 230.71897888]
[174.71005249 236.61109924]
[164.41436768 241.75672913]
[153.76672363 246.12776184]
[142.82527161 249.70030212]
[131.64981079 252.45481873]
[120.30139160 254.37628174]
[108.84204865 255.45417786]
[97.33438873 255.68261719]
[85.84129333 255.06034851]
[74.42556763 253.59078979]
[63.14959335 251.28195190]
[52.07497787 248.14646912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 49]
[12 48]
[13 47]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[56 65]
[57 64]
[58 63]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[92 113]
[95 111]
[96 110]
[97 109]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
