%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCUACUAGGGGGGGGGGUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUxxxxxxxxxxAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCCCCCCCCCCCUCUUAUACUA\
) } def
/len { sequence length } bind def

/coor [
[36.00306320 298.59756470]
[24.60010529 294.55450439]
[13.45064735 289.85733032]
[2.59217572 284.52185059]
[-7.93880272 278.56597900]
[-18.10688210 272.00976562]
[-27.87787437 264.87524414]
[-37.21893311 257.18640137]
[-46.09864807 248.96907043]
[-54.48716354 240.25090027]
[-62.35628510 231.06118774]
[-69.67955017 221.43084717]
[-82.18358612 229.71632385]
[-94.68762207 238.00178528]
[-107.19165802 246.28726196]
[-119.69569397 254.57273865]
[-132.19972229 262.85821533]
[-144.70376587 271.14367676]
[-157.20779419 279.42916870]
[-169.71183777 287.71463013]
[-182.21586609 296.00012207]
[-186.80258179 311.37350464]
[-201.73504639 317.23876953]
[-215.55834961 309.09655762]
[-217.66844177 293.19287109]
[-206.44664001 281.72766113]
[-190.50134277 283.49606323]
[-177.99731445 275.21060181]
[-165.49327087 266.92514038]
[-152.98924255 258.63964844]
[-140.48519897 250.35417175]
[-127.98116302 242.06871033]
[-115.47712708 233.78323364]
[-102.97309875 225.49775696]
[-90.46906281 217.21228027]
[-77.96502686 208.92680359]
[-88.87944031 188.66316223]
[-97.49562836 167.32069397]
[-103.70874786 145.15910339]
[-107.44320679 122.44801331]
[-108.65356445 99.46379089]
[-107.32509613 76.48609161]
[-103.47395325 53.79450226]
[-97.14701080 31.66512489]
[-88.42124176 10.36722660]
[-77.40282440 -9.84004974]
[-64.22582245 -28.71082687]
[-49.05057907 -46.01549149]
[-59.38148117 -56.89080429]
[-69.71238708 -67.76612091]
[-80.15439606 -78.53479767]
[-90.70640564 -89.19570923]
[-101.25842285 -99.85661316]
[-116.57575226 -97.37488556]
[-130.41125488 -104.40046692]
[-137.44487000 -118.23187256]
[-134.97206116 -133.55064392]
[-123.94364929 -144.46640015]
[-108.60029602 -146.78181458]
[-94.84183502 -139.60656738]
[-87.95866394 -125.69967651]
[-90.59751129 -110.40863037]
[-80.04550171 -99.74771881]
[-69.49348450 -89.08681488]
[-62.50975418 -86.52952576]
[-58.83707047 -78.09702301]
[-48.50616837 -67.22171021]
[-38.17526627 -56.34639359]
[-28.35116196 -64.50707245]
[-18.04619217 -72.05142975]
[-7.29896164 -78.95120239]
[3.85026383 -85.18052673]
[15.35971355 -90.71607208]
[27.18626785 -95.53710175]
[39.28561783 -99.62555695]
[51.61243820 -102.96611023]
[64.12053680 -105.54625702]
[76.76306152 -107.35632324]
[89.49263763 -108.38952637]
[102.26158905 -108.64199829]
[115.02206421 -108.11280060]
[127.72625732 -106.80390167]
[140.32656860 -104.72021484]
[152.77580261 -101.86954498]
[165.02731323 -98.26257324]
[177.03520203 -93.91281128]
[188.75447083 -88.83654785]
[200.14122009 -83.05281830]
[211.15280151 -76.58327484]
[221.74794006 -69.45217133]
[231.88694763 -61.68620682]
[241.53186035 -53.31449127]
[250.64649963 -44.36838150]
[259.19674683 -34.88139725]
[267.15057373 -24.88907814]
[279.48187256 -33.42953873]
[291.81314087 -41.96999741]
[296.08325195 -57.43433380]
[310.89215088 -63.60493851]
[324.87969971 -55.74824905]
[327.31588745 -39.89124298]
[316.33184814 -28.19806290]
[300.35360718 -29.63871193]
[288.02233887 -21.09825325]
[275.69104004 -12.55779457]
[282.84515381 -0.51988363]
[289.17572021 11.97077751]
[294.65423584 24.85792923]
[299.25598145 38.08352661]
[302.96029663 51.58800507]
[305.75042725 65.31053162]
[307.61386108 79.18930817]
[308.54217529 93.16181183]
[308.53118896 107.16511536]
[307.58096313 121.13614655]
[305.69580078 135.01197815]
[302.88412476 148.73011780]
[299.15869141 162.22877502]
[313.30599976 167.21409607]
[327.45330811 172.19941711]
[342.48565674 166.59513855]
[356.16503906 174.97689819]
[357.99783325 190.91491699]
[346.57803345 202.18292236]
[330.66595459 200.13705444]
[322.46798706 186.34672546]
[308.32067871 181.36140442]
[294.17333984 176.37608337]
[289.42025757 187.50181580]
[284.03030396 198.33335876]
[278.02160645 208.83428955]
[271.41442871 218.96929932]
[264.23089600 228.70434570]
[256.49523926 238.00666809]
[248.23341370 246.84500122]
[239.47322083 255.18962097]
[230.24411011 263.01248169]
[220.57710266 270.28729248]
[210.50469971 276.98956299]
[200.06077576 283.09680176]
[189.28044128 288.58843994]
[178.19993591 293.44604492]
[166.85652161 297.65325928]
[155.28831482 301.19592285]
[143.53424072 304.06216431]
[131.63378906 306.24234009]
[119.62698364 307.72909546]
[107.55419159 308.51745605]
[95.45600891 308.60476685]
[83.37309265 307.99072266]
[71.34608459 306.67739868]
[59.41541290 304.66921997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[48 68]
[49 67]
[50 66]
[51 64]
[52 63]
[53 62]
[95 105]
[96 104]
[97 103]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
