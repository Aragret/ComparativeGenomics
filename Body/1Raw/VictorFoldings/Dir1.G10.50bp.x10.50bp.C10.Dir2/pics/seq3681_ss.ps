%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGCCUCGGGGGGGGGGCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCxxxxxxxxxxUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCCCCCCCCCCCUAGUCCUC\
) } def
/len { sequence length } bind def

/coor [
[83.51310730 351.64895630]
[69.66716766 345.63293457]
[57.95850754 336.10351562]
[49.25598145 323.76785278]
[44.20537949 309.54132080]
[43.18148804 294.47964478]
[46.26028824 279.70046997]
[53.21331024 266.30056763]
[63.52459335 255.27423096]
[76.42897797 247.43971252]
[90.96886444 243.37840271]
[90.96886444 228.37840271]
[90.96886444 213.37840271]
[90.96886444 198.37840271]
[90.96886444 183.37840271]
[90.96886444 168.37840271]
[90.96886444 153.37840271]
[90.96886444 138.37840271]
[90.96886444 123.37840271]
[90.96886444 108.37840271]
[86.21504974 94.15162659]
[77.19751740 82.16478729]
[68.17998505 70.17795563]
[59.16245651 58.19112396]
[50.14492798 46.20429230]
[41.12739944 34.21746063]
[38.31222534 37.59040451]
[34.44799805 40.40540695]
[29.65725136 42.40592957]
[24.11866188 43.36331177]
[9.13894653 44.14315796]
[-5.84076738 44.92300415]
[-20.82048225 45.70284653]
[-31.21215820 57.61035156]
[-46.98550415 58.59883118]
[-58.78247452 48.08184052]
[-59.60413361 32.29892731]
[-48.96300888 20.61380768]
[-33.17228699 19.95906067]
[-21.60032654 30.72313309]
[-6.62061262 29.94328880]
[8.35910225 29.16344261]
[23.33881569 28.38359833]
[31.97793198 16.12122917]
[27.67034721 1.75304568]
[23.36276245 -12.61513805]
[18.90594673 -26.93773651]
[14.30038261 -41.21319580]
[9.69481850 -55.48865509]
[4.04638767 -62.75137711]
[5.14527941 -70.10923767]
[0.83769464 -84.47741699]
[-4.03011703 -70.28923798]
[-14.48595238 -59.53398514]
[-28.53107452 -54.26762772]
[-43.48062134 -55.49687958]
[-56.47683716 -62.98676300]
[-65.03536987 -75.30551147]
[-67.52016449 -90.09827423]
[-63.45624161 -104.53726196]
[-53.62044525 -115.86233521]
[-39.89299393 -121.90857697]
[-24.89802170 -121.52019501]
[-11.50196838 -114.77143860]
[-2.26625586 -102.95373535]
[-2.89023328 -117.94075012]
[-3.51421070 -132.92776489]
[-4.13818789 -147.91477966]
[-18.17368507 -153.91207886]
[-28.21063232 -165.41088867]
[-32.25618744 -180.12809753]
[-29.50710106 -195.14160156]
[-20.50920868 -207.47044373]
[-7.04904795 -214.66676331]
[8.20085812 -215.30168152]
[22.21262741 -209.24916077]
[32.20421600 -197.71092224]
[36.19178391 -182.97789001]
[33.38359833 -167.97532654]
[24.33722496 -155.68200684]
[10.84882832 -148.53875732]
[11.47280502 -133.55174255]
[12.09678268 -118.56472778]
[12.72076035 -103.57771301]
[15.20587921 -88.78500366]
[19.51346397 -74.41681671]
[23.97027969 -60.09422302]
[28.57584381 -45.81875992]
[33.18140793 -31.54330063]
[38.26116943 -26.10807610]
[37.73094559 -16.92272377]
[42.03853226 -2.55453897]
[46.34611511 11.81364536]
[53.11423111 25.19993019]
[62.13175964 37.18676376]
[71.14929199 49.17359543]
[80.16682434 61.16042709]
[89.18434906 73.14726257]
[98.20188141 85.13409424]
[94.58203888 70.57741547]
[99.76686859 56.50199509]
[111.96463776 47.77190018]
[126.96012115 47.40401840]
[139.57130432 55.52547073]
[145.44010925 69.32971954]
[142.53843689 84.04637909]
[131.86901855 94.58979797]
[117.11857605 97.31640625]
[131.76206970 100.56723022]
[146.40557861 103.81805420]
[154.53289795 91.02265167]
[166.54826355 81.78107452]
[181.00076294 77.20928192]
[196.14517212 77.85935211]
[210.15274048 83.65277863]
[221.33198547 93.88998413]
[228.33296204 107.33477020]
[230.31025696 122.36360931]
[227.02510071 137.16169739]
[218.87422180 149.94210815]
[206.84184265 159.16152954]
[192.38095093 163.70668030]
[177.23776245 163.02870178]
[163.24089050 157.20947266]
[152.08053589 146.95167542]
[145.10433960 133.49401855]
[143.15475464 118.46155548]
[128.51124573 115.21073151]
[113.86774445 111.95990753]
[109.63241577 110.56899261]
[105.96886444 108.37840271]
[105.96886444 123.37840271]
[105.96886444 138.37840271]
[105.96886444 153.37840271]
[105.96886444 168.37840271]
[105.96886444 183.37840271]
[105.96886444 198.37840271]
[105.96886444 213.37840271]
[105.96886444 228.37840271]
[105.96886444 243.37840271]
[120.50875092 247.43971252]
[133.41313171 255.27423096]
[143.72441101 266.30056763]
[150.67742920 279.70046997]
[153.75624084 294.47964478]
[152.73234558 309.54132080]
[147.68174744 323.76785278]
[138.97921753 336.10351562]
[127.27055359 345.63293457]
[113.42461395 351.64895630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 99]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[30 43]
[31 42]
[32 41]
[33 40]
[44 93]
[45 92]
[46 91]
[47 89]
[48 88]
[49 87]
[51 86]
[52 85]
[65 84]
[66 83]
[67 82]
[68 81]
[108 129]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
