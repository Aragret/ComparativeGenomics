%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCAUUCGGGGGGGGGGAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACxxxxxxxxxxUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACCCCCCCCCCCUACUCACUC\
) } def
/len { sequence length } bind def

/coor [
[94.74387360 507.59536743]
[80.89793396 501.57934570]
[69.18927002 492.04992676]
[60.48674774 479.71426392]
[55.43614578 465.48773193]
[54.41225433 450.42605591]
[57.49105453 435.64688110]
[64.44407654 422.24694824]
[74.75536346 411.22061157]
[87.65974426 403.38610840]
[102.19963074 399.32479858]
[102.19963074 384.32479858]
[102.19963074 369.32479858]
[102.19963074 354.32479858]
[102.19963074 339.32479858]
[102.19963074 324.32479858]
[102.19963074 309.32479858]
[102.19963074 294.32479858]
[102.19963074 279.32479858]
[102.19963074 264.32479858]
[90.69018555 257.48895264]
[84.02222443 245.75654602]
[84.03886414 232.15322876]
[90.84313202 220.24880981]
[102.74275208 213.22042847]
[103.05480957 198.22367859]
[103.36686707 183.22692871]
[102.43123627 168.25613403]
[100.25440216 153.41491699]
[98.07756042 138.57371521]
[95.90072632 123.73251343]
[83.22747040 125.20638275]
[69.24868011 119.60559845]
[57.82631302 106.43801117]
[42.84659576 105.65816498]
[27.86688232 104.87831879]
[15.03376579 114.50592041]
[-0.45788524 110.33599091]
[-6.72420216 95.56735229]
[1.04179716 81.52922821]
[16.88270187 78.99047852]
[28.64672852 89.89860535]
[43.62644196 90.67845154]
[58.60615540 91.45829773]
[61.63766098 84.59827423]
[46.71556091 83.07154846]
[43.55656433 68.40795898]
[56.52637100 60.87244034]
[67.70067596 70.87821960]
[70.73218536 64.01818848]
[60.07055664 53.46689987]
[45.27725601 57.59652328]
[30.40506744 53.76068878]
[19.45453835 42.99121857]
[15.37130547 28.18504715]
[19.25373650 13.32495594]
[30.05747986 2.40823770]
[44.87637711 -1.62856531]
[59.72422791 2.30042648]
[70.60702515 13.13833427]
[74.59735870 27.96981430]
[70.62184906 42.80527496]
[81.28347015 53.35656357]
[96.12467957 51.17972946]
[103.30718994 38.01114655]
[110.48969269 24.84256172]
[98.45544434 15.84492493]
[87.82423401 5.22615814]
[78.81251526 -6.79755449]
[71.60374451 -19.98142433]
[66.34469604 -34.05704498]
[63.14242554 -48.73785782]
[62.06212997 -63.72497559]
[63.12580490 -78.71328735]
[66.31179810 -93.39763641]
[71.55523682 -107.47908020]
[78.74938202 -120.67093658]
[87.74776459 -132.70463562]
[98.36718750 -143.33518982]
[110.39145660 -152.34616089]
[123.57577515 -159.55410767]
[137.65171814 -164.81228638]
[152.33273315 -168.01365662]
[167.31991577 -169.09301758]
[182.30815125 -168.02841187]
[196.99230957 -164.84152222]
[211.07344055 -159.59721375]
[224.26484680 -152.40225220]
[236.29798889 -143.40312195]
[246.92787170 -132.78303528]
[255.93811035 -120.75820923]
[263.14523315 -107.57344818]
[268.40255737 -93.49717712]
[271.60299683 -78.81596375]
[272.68145752 -63.82871628]
[271.61590576 -48.84053802]
[268.42810059 -34.15658188]
[263.18292236 -20.07578468]
[255.98715210 -6.88481951]
[246.98727417 5.14776421]
[236.36653137 15.77699852]
[224.34115601 24.78648567]
[211.15594482 31.99280548]
[197.07934570 37.24924469]
[182.39793396 40.44878769]
[167.41061401 41.52630234]
[152.42251587 40.45984268]
[137.73875427 37.27112579]
[123.65827942 32.02507019]
[116.47576904 45.19365311]
[109.29325867 58.36223602]
[133.12763977 95.95977020]
[110.74192810 121.55567932]
[112.91876984 136.39688110]
[115.09560394 151.23808289]
[117.27243805 166.07929993]
[125.84972382 153.77359009]
[139.96861267 148.70831299]
[154.41244507 152.75497437]
[163.84454346 164.41841125]
[164.77989197 179.38922119]
[156.87294006 192.13597107]
[143.04512024 197.94902039]
[128.40554810 194.68054199]
[118.36361694 183.53897095]
[118.05155945 198.53573608]
[117.73950195 213.53248596]
[131.33457947 223.54377747]
[136.25781250 239.52012634]
[130.76577759 255.13433838]
[117.19963074 264.32479858]
[117.19963074 279.32479858]
[117.19963074 294.32479858]
[117.19963074 309.32479858]
[117.19963074 324.32479858]
[117.19963074 339.32479858]
[117.19963074 354.32479858]
[117.19963074 369.32479858]
[117.19963074 384.32479858]
[117.19963074 399.32479858]
[131.73951721 403.38610840]
[144.64389038 411.22061157]
[154.95518494 422.24694824]
[161.90820312 435.64688110]
[164.98699951 450.42605591]
[163.96310425 465.48773193]
[158.91250610 479.71426392]
[150.20997620 492.04992676]
[138.50132751 501.57934570]
[124.65538025 507.59536743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 127]
[26 126]
[27 125]
[28 116]
[29 115]
[30 114]
[31 113]
[34 44]
[35 43]
[36 42]
[50 63]
[51 62]
[64 111]
[65 110]
[66 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
