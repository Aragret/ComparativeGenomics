%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCCACCCGGGGGGGGGGUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGxxxxxxxxxxUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCCCCCCCCCCCAACCACCC\
) } def
/len { sequence length } bind def

/coor [
[49.70915985 410.91687012]
[35.86322021 404.90084839]
[24.15455818 395.37142944]
[15.45203400 383.03576660]
[10.40143204 368.80923462]
[9.37754059 353.74755859]
[12.45633984 338.96838379]
[19.40936089 325.56848145]
[29.72064590 314.54214478]
[42.62502670 306.70764160]
[57.16491318 302.64630127]
[57.16491318 287.64630127]
[57.16491318 272.64630127]
[57.16491318 257.64630127]
[57.16491318 242.64631653]
[57.16491318 227.64631653]
[57.16491318 212.64631653]
[57.16491318 197.64631653]
[57.16491318 182.64631653]
[57.16491318 167.64631653]
[57.16491318 152.64631653]
[44.81333923 144.13522339]
[30.79662895 149.47674561]
[16.77991486 154.81825256]
[2.76320195 160.15975952]
[-11.25351143 165.50128174]
[-19.10009575 179.49450684]
[-34.95533752 181.94213867]
[-46.65644836 170.96655273]
[-45.22734070 154.98727417]
[-31.76430130 146.26225281]
[-16.59502411 151.48455811]
[-2.57831049 146.14305115]
[11.43840218 140.80154419]
[25.45511627 135.46002197]
[39.47182846 130.11851501]
[39.00401306 122.63311768]
[25.57097626 115.95827484]
[38.06838608 107.66232300]
[37.60057068 100.17693329]
[23.02786827 96.62216949]
[7.44754601 101.73934937]
[-4.59215069 90.60482025]
[-0.70581299 74.67282867]
[15.10862732 70.33283997]
[26.58263016 82.04946136]
[41.15533447 85.60422516]
[45.01737595 79.17502594]
[32.15897369 71.45094299]
[24.88504028 58.33263779]
[39.88306046 58.59253693]
[52.74146271 66.31661987]
[56.60350418 59.88742065]
[46.62077713 48.69165421]
[36.63805008 37.49589157]
[20.76793098 35.14667130]
[12.83468342 21.20238304]
[18.92401886 6.35989189]
[34.36471939 2.00508547]
[47.31200027 11.47859955]
[47.83381653 27.51316452]
[57.81654358 38.70893097]
[67.79927063 49.90469360]
[100.65923309 55.20641327]
[116.98256683 75.21504211]
[128.28157043 65.34931946]
[139.58058167 55.48359680]
[150.87957764 45.61787415]
[162.17858887 35.75215149]
[153.65499878 23.38905525]
[146.59628296 10.13491058]
[141.09446716 -3.83748412]
[137.22128296 -18.34597206]
[135.02722168 -33.20140457]
[134.54089355 -48.21010971]
[135.76863098 -63.17641830]
[138.69442749 -77.90522003]
[143.28013611 -92.20448303]
[149.46598816 -105.88779449]
[157.17132568 -118.77676392]
[166.29570007 -130.70335388]
[176.72015381 -141.51208496]
[188.30877686 -151.06204224]
[200.91049194 -159.22869873]
[214.36100769 -165.90562439]
[228.48498535 -171.00573730]
[243.09826660 -174.46257019]
[258.01034546 -176.23104858]
[273.02682495 -176.28810120]
[287.95193481 -174.63301086]
[302.59106445 -171.28733826]
[316.75338745 -166.29470825]
[330.25424194 -159.72021484]
[342.91766357 -151.64955139]
[354.57855225 -142.18794250]
[365.08483887 -131.45875549]
[374.29959106 -119.60185242]
[382.10266113 -106.77182007]
[388.39233398 -93.13591003]
[393.08657837 -78.87191010]
[396.12423706 -64.16577148]
[397.46566772 -49.20922852]
[397.09341431 -34.19725800]
[395.01232910 -19.32558060]
[391.24951172 -4.78807640]
[385.85403442 9.22572803]
[378.89627075 22.53313446]
[370.46688843 34.96065521]
[360.67578125 46.34626770]
[349.65060425 56.54153824]
[337.53512573 65.41355133]
[324.48724365 72.84664917]
[310.67712402 78.74391174]
[296.28472900 83.02846527]
[281.49777222 85.64445496]
[266.50900269 86.55776978]
[251.51380920 85.75650024]
[236.70770264 83.25109863]
[222.28370667 79.07422638]
[208.42987061 73.28033447]
[195.32682800 65.94496918]
[183.14535522 57.16374588]
[172.04431152 47.05115509]
[160.74530029 56.91687775]
[149.44630432 66.78260040]
[138.14729309 76.64832306]
[126.84829712 86.51404572]
[137.10348511 114.62175751]
[117.25864410 146.62451172]
[72.16491699 152.64631653]
[72.16491699 167.64631653]
[72.16491699 182.64631653]
[72.16491699 197.64631653]
[72.16491699 212.64631653]
[72.16491699 227.64631653]
[72.16491699 242.64631653]
[72.16491699 257.64630127]
[72.16491699 272.64630127]
[72.16491699 287.64630127]
[72.16491699 302.64630127]
[86.70480347 306.70764160]
[99.60918427 314.54214478]
[109.92046356 325.56848145]
[116.87348938 338.96838379]
[119.95228577 353.74755859]
[118.92839813 368.80923462]
[113.87779236 383.03576660]
[105.17527008 395.37142944]
[93.46660614 404.90084839]
[79.62066650 410.91687012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[40 47]
[41 46]
[53 63]
[54 62]
[55 61]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
