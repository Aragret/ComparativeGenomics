%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUCUUCGGGGGGGGGGGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCxxxxxxxxxxACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCCCCCCCCCCCUGCUUCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.33032227]
[71.19830322 349.31430054]
[59.48964310 339.78488159]
[50.78712082 327.44921875]
[45.73651886 313.22268677]
[44.71262741 298.16101074]
[47.79142761 283.38183594]
[54.74444962 269.98193359]
[65.05573273 258.95559692]
[77.96011353 251.12107849]
[92.50000000 247.05976868]
[92.50000000 232.05976868]
[92.50000000 217.05976868]
[92.50000000 202.05976868]
[92.50000000 187.05976868]
[92.50000000 172.05976868]
[92.50000000 157.05976868]
[92.50000000 142.05976868]
[92.50000000 127.05976105]
[92.50000000 112.05976105]
[79.80506897 104.06984711]
[66.28088379 110.55801392]
[52.75669098 117.04618073]
[39.23250198 123.53433990]
[25.70831108 130.02250671]
[14.04285812 142.32508850]
[-1.00825405 134.52122498]
[2.32407308 117.89798737]
[19.22014618 116.49832153]
[32.74433517 110.01015472]
[46.26852417 103.52198792]
[59.79271698 97.03382111]
[73.31690216 90.54566193]
[85.49839020 88.66712189]
[95.30865479 92.91097260]
[99.61623383 78.54279327]
[103.92382050 64.17460632]
[108.08171082 49.76239014]
[112.08944702 35.30770111]
[116.09719086 20.85301399]
[104.64392090 14.09195137]
[95.17036438 4.77195263]
[88.23400879 -6.55143356]
[84.24131012 -19.20497894]
[83.42388916 -32.43780518]
[85.82510376 -45.46593857]
[91.29776764 -57.51875305]
[99.51318359 -67.88456726]
[109.98084259 -75.95264435]
[122.07776642 -81.24919891]
[135.08551025 -83.46520996]
[148.23291016 -82.47441864]
[153.13447571 -96.65097809]
[158.03602600 -110.82753754]
[162.93757629 -125.00409698]
[167.83912659 -139.18064880]
[172.74067688 -153.35720825]
[177.64222717 -167.53376770]
[182.54377747 -181.71032715]
[187.44532776 -195.88688660]
[192.34687805 -210.06344604]
[182.63174438 -222.56971741]
[181.35540771 -238.20739746]
[188.77394104 -251.86569214]
[202.32792664 -259.16873169]
[203.26354980 -274.13952637]
[204.19918823 -289.11032104]
[205.13481140 -304.08111572]
[206.07043457 -319.05191040]
[207.00607300 -334.02267456]
[193.48773193 -341.03512573]
[183.99540710 -352.94378662]
[180.17370605 -367.68536377]
[182.68475342 -382.70584106]
[191.09350586 -395.40280151]
[203.94308472 -403.57641602]
[219.00723267 -405.81060791]
[233.67597961 -401.71820068]
[245.40789795 -392.00833130]
[252.17033386 -378.36318970]
[252.79168701 -363.14697266]
[247.16429138 -348.99591064]
[236.26310730 -338.36181641]
[221.97686768 -333.08706665]
[221.04122925 -318.11627197]
[220.10560608 -303.14547729]
[219.16998291 -288.17468262]
[218.23434448 -273.20388794]
[217.29872131 -258.23309326]
[220.56498718 -256.80545044]
[223.61326599 -254.95755005]
[235.31288147 -264.34469604]
[247.01251221 -273.73187256]
[247.17498779 -289.36862183]
[257.38977051 -301.20889282]
[272.83370972 -303.66210938]
[286.21469116 -295.56994629]
[291.21459961 -280.75323486]
[285.47265625 -266.20797729]
[271.69998169 -258.80203247]
[256.39965820 -262.03225708]
[244.70004272 -252.64508057]
[233.00042725 -243.25791931]
[234.31721497 -225.42172241]
[224.07185364 -210.48646545]
[206.52343750 -205.16189575]
[201.62188721 -190.98533630]
[196.72033691 -176.80877686]
[191.81878662 -162.63221741]
[186.91723633 -148.45565796]
[182.01568604 -134.27909851]
[177.11412048 -120.10253906]
[172.21257019 -105.92598724]
[167.31101990 -91.74942780]
[162.40946960 -77.57286835]
[176.04689026 -67.75148773]
[186.02969360 -54.20966339]
[191.38882446 -38.24354553]
[191.59841919 -21.38550949]
[186.62739563 -5.25704908]
[176.94352722 8.58716393]
[163.46936035 18.80914879]
[147.49446106 24.41692352]
[130.55187988 24.86075401]
[126.54413605 39.31544113]
[122.53639984 53.77013016]
[123.78812408 61.10353470]
[118.29200745 68.48219299]
[113.98442078 82.85037231]
[109.67683411 97.21855927]
[107.50000000 112.05976105]
[107.50000000 127.05976105]
[107.50000000 142.05976868]
[107.50000000 157.05976868]
[107.50000000 172.05976868]
[107.50000000 187.05976868]
[107.50000000 202.05976868]
[107.50000000 217.05976868]
[107.50000000 232.05976868]
[107.50000000 247.05976868]
[122.03988647 251.12107849]
[134.94427490 258.95559692]
[145.25555420 269.98193359]
[152.20857239 283.38183594]
[155.28736877 298.16101074]
[154.26348877 313.22268677]
[149.21287537 327.44921875]
[140.51036072 339.78488159]
[128.80169678 349.31430054]
[114.95575714 355.33032227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[35 130]
[36 129]
[37 128]
[38 126]
[39 125]
[40 124]
[52 115]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[91 103]
[92 102]
[93 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
