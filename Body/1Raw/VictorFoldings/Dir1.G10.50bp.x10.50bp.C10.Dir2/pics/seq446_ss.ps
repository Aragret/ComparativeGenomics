%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCCUAACAGGGGGGGGGGCCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAAxxxxxxxxxxCAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUCCCCCCCCCCGACCCCUAACA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 366.81286621]
[71.01555634 361.25985718]
[58.81560135 352.39352417]
[49.20452881 340.77120972]
[42.78650284 327.12350464]
[39.96496582 312.30831909]
[40.91728210 297.25692749]
[45.58358765 282.91549683]
[53.67055511 270.18554688]
[64.66983032 259.86727905]
[77.88998413 252.60929871]
[92.50000000 248.86787415]
[92.50000000 233.86787415]
[92.50000000 218.86787415]
[92.50000000 203.86787415]
[92.50000000 188.86787415]
[92.50000000 173.86787415]
[92.50000000 158.86787415]
[92.50000000 143.86787415]
[92.50000000 128.86787415]
[92.50000000 113.86786652]
[82.28129578 102.88706970]
[67.32001495 101.80999756]
[58.47328186 104.32617950]
[52.06362152 100.55411530]
[37.12760925 99.17008972]
[22.19159698 97.78606415]
[7.73638535 104.21704102]
[-4.22268629 95.33842468]
[-19.15869904 93.95439911]
[-25.40744972 96.40300751]
[-31.08544922 95.42925262]
[-34.67517853 92.19458771]
[-49.54177475 90.19852448]
[-64.40837860 88.20246887]
[-79.27497101 86.20641327]
[-88.59246063 98.41624451]
[-102.77272797 104.31671906]
[-118.00135803 102.32062531]
[-130.18193054 92.96491241]
[-136.03791809 78.76622009]
[-133.99411011 63.54392242]
[-124.60025787 51.39273834]
[-110.38327789 45.58127975]
[-95.16745758 47.67280197]
[-83.04578400 57.10469055]
[-77.27891541 71.33981323]
[-62.41231918 73.33586884]
[-47.54571915 75.33193207]
[-32.67911911 77.32798767]
[-17.77467346 79.01838684]
[-2.83866072 80.40241241]
[10.54822636 73.87243652]
[23.57562256 82.85005188]
[38.51163483 84.23407745]
[53.44764709 85.61810303]
[68.39707947 86.84871674]
[83.35836029 87.92578888]
[94.56384277 85.26074219]
[102.54375458 89.44297028]
[113.09577179 78.78206635]
[123.64778137 68.12115479]
[123.73651886 52.54457474]
[134.58963013 41.88321304]
[149.43898010 42.06380463]
[159.99099731 31.40289688]
[170.09642029 20.31776237]
[179.73823547 8.82709599]
[189.38005066 -2.66357040]
[199.02186584 -14.15423679]
[189.80287170 -26.69135857]
[183.84159851 -41.05664825]
[181.47790527 -56.42025757]
[182.84399414 -71.89573669]
[187.85694885 -86.59119415]
[196.22381592 -99.66067505]
[207.45869446 -110.35287476]
[220.91093445 -118.05432892]
[235.80288696 -122.32460022]
[251.27478027 -122.92146301]
[266.43438721 -119.81465912]
[280.40850830 -113.18739319]
[289.81234741 -124.87360382]
[299.21621704 -136.55981445]
[298.61334229 -149.48420715]
[306.73767090 -159.03233337]
[318.79394531 -160.41378784]
[328.43576050 -171.90444946]
[338.07757568 -183.39511108]
[334.19314575 -198.41812134]
[339.91217041 -212.84283447]
[353.03558350 -221.12265015]
[368.51718140 -220.07382202]
[380.40396118 -210.09963989]
[384.12518311 -195.03538513]
[378.25003052 -180.67355347]
[365.03753662 -172.53659058]
[349.56823730 -173.75329590]
[339.92642212 -162.26263428]
[330.28463745 -150.77197266]
[328.20495605 -133.37313843]
[310.90243530 -127.15595245]
[301.49856567 -115.46974182]
[292.09472656 -103.78353119]
[301.04412842 -92.39611053]
[307.22607422 -79.29012299]
[310.32492065 -65.12683105]
[310.18072510 -50.62168884]
[306.79736328 -36.50816727]
[300.34268188 -23.50069809]
[291.14001465 -12.25849724]
[279.65213013 -3.35215259]
[266.45779419 2.76532960]
[252.22280884 5.78156853]
[237.66622925 5.54075718]
[223.52418518 2.05170822]
[210.51254272 -4.51242304]
[200.87072754 6.97824383]
[191.22891235 18.46891022]
[181.58709717 29.95957756]
[181.73490906 32.81775284]
[180.72389221 35.90758896]
[178.45953369 38.77453995]
[175.01840210 40.93836594]
[170.65190125 41.95491028]
[160.09988403 52.61582184]
[160.43292236 67.46252441]
[149.88354492 78.42452240]
[134.30870056 78.67317200]
[123.75667572 89.33407593]
[113.20466614 99.99498749]
[107.50000000 113.86786652]
[107.50000000 128.86787415]
[107.50000000 143.86787415]
[107.50000000 158.86787415]
[107.50000000 173.86787415]
[107.50000000 188.86787415]
[107.50000000 203.86787415]
[107.50000000 218.86787415]
[107.50000000 233.86787415]
[107.50000000 248.86787415]
[122.11001587 252.60929871]
[135.33016968 259.86727905]
[146.32945251 270.18554688]
[154.41641235 282.91549683]
[159.08271790 297.25692749]
[160.03503418 312.30831909]
[157.21350098 327.12350464]
[150.79547119 340.77120972]
[141.18440247 352.39352417]
[128.98443604 361.25985718]
[114.96250153 366.81286621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 58]
[23 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[33 50]
[34 49]
[35 48]
[36 47]
[60 131]
[61 130]
[62 129]
[65 126]
[66 125]
[67 120]
[68 119]
[69 118]
[70 117]
[82 104]
[83 103]
[84 102]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
