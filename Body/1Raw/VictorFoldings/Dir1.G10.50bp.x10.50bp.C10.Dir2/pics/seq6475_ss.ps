%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCUCUGGGGGGGGGGCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUxxxxxxxxxxAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCCCCCCCCCCCUACCUCUCU\
) } def
/len { sequence length } bind def

/coor [
[81.60634613 366.08102417]
[67.76040649 360.06500244]
[56.05174637 350.53558350]
[47.34922409 338.19992065]
[42.29862213 323.97338867]
[41.27473068 308.91171265]
[44.35353088 294.13253784]
[51.30655289 280.73263550]
[61.61783600 269.70629883]
[74.52221680 261.87179565]
[89.06210327 257.81045532]
[89.06210327 242.81047058]
[89.06210327 227.81047058]
[89.06210327 212.81047058]
[89.06210327 197.81047058]
[89.06210327 182.81047058]
[89.06210327 167.81047058]
[89.06210327 152.81047058]
[89.06210327 137.81047058]
[89.06210327 122.81047058]
[80.04457092 110.82363892]
[65.63235474 106.66574860]
[51.22014236 102.50785828]
[37.50338745 109.88948822]
[22.94658089 105.46749115]
[15.99386120 92.34516907]
[1.58164477 88.18727875]
[-12.83057117 84.02939606]
[-27.24278641 79.87150574]
[-41.65500259 75.71362305]
[-56.06721878 71.55573273]
[-70.47943878 67.39784241]
[-84.89165497 63.23995590]
[-99.38724518 59.38279724]
[-113.95995331 55.82803726]
[-129.20062256 60.07450485]
[-139.73171997 49.54145432]
[-154.30442810 45.98669052]
[-168.87712097 42.43193054]
[-183.44982910 38.87716675]
[-198.02253723 35.32240677]
[-213.60285950 40.43959045]
[-225.64254761 29.30505943]
[-221.75621033 13.37306595]
[-205.94177246 9.03307724]
[-194.46777344 20.74970245]
[-179.89506531 24.30446434]
[-165.32237244 27.85922623]
[-150.74966431 31.41398811]
[-136.17695618 34.96875000]
[-121.97862244 30.46801949]
[-110.40518951 41.25533295]
[-95.83248901 44.81009674]
[-91.30903625 43.10308075]
[-85.66284180 44.26575851]
[-80.73376465 48.82773972]
[-66.32154846 52.98563004]
[-51.90933228 57.14351654]
[-37.49711609 61.30140305]
[-23.08489990 65.45928955]
[-8.67268372 69.61717987]
[5.73953199 73.77506256]
[20.15174866 77.93295288]
[33.02578354 70.53060150]
[47.70104980 74.54198456]
[55.37802887 88.09564209]
[69.79024506 92.25353241]
[84.20246124 96.41142273]
[73.54795074 85.85294342]
[62.89343643 75.29447174]
[52.23892593 64.73600006]
[40.94506836 54.86437988]
[34.92348480 41.12609482]
[35.31822205 26.13128853]
[42.05427933 12.72884369]
[53.85187149 3.46510434]
[68.46955872 0.10009822]
[83.13010406 3.27314591]
[95.04768372 12.38083649]
[93.81088257 27.32975960]
[92.57408142 42.27868271]
[91.33728027 57.22760773]
[99.58956909 44.70164490]
[107.84185791 32.17568588]
[116.09414673 19.64972305]
[110.50305939 5.17493963]
[114.52036285 -9.81308556]
[126.60132599 -19.55115128]
[142.10057068 -20.29477310]
[155.05831909 -11.75801468]
[160.49206543 2.77656889]
[156.31240845 17.72013092]
[144.12651062 27.32657051]
[128.62011719 27.90201187]
[120.36782074 40.42797470]
[112.11553192 52.95393372]
[103.86324310 65.47989655]
[111.31849670 78.49678040]
[118.77306366 91.51251984]
[133.75277710 90.73267365]
[147.13203430 82.28836823]
[160.24435425 89.35351562]
[175.22406006 88.57366943]
[181.05957031 85.24887085]
[186.82232666 85.39743805]
[190.84056091 88.08615875]
[205.83975220 87.93012238]
[220.83894348 87.77408600]
[235.83813477 87.61804962]
[245.62416077 75.42100525]
[260.97079468 72.41857910]
[274.63183594 80.02842712]
[280.15698242 94.65740204]
[274.93737793 109.39815521]
[261.43759155 117.29055786]
[246.03181458 114.60804749]
[235.99417114 102.61723328]
[220.99497986 102.77326965]
[205.99578857 102.92930603]
[190.99659729 103.08534241]
[176.00390625 103.55339050]
[161.02420044 104.33322906]
[148.71640015 112.72175598]
[134.53262329 105.71238708]
[119.55290985 106.49223328]
[134.07226562 110.25899506]
[141.08416748 123.51920319]
[136.02348328 137.63973999]
[122.18501282 143.42736816]
[108.57833862 137.11401367]
[104.06210327 122.81047058]
[104.06210327 137.81047058]
[104.06210327 152.81047058]
[104.06210327 167.81047058]
[104.06210327 182.81047058]
[104.06210327 197.81047058]
[104.06210327 212.81047058]
[104.06210327 227.81047058]
[104.06210327 242.81047058]
[104.06210327 257.81045532]
[118.60198975 261.87179565]
[131.50637817 269.70629883]
[141.81765747 280.73263550]
[148.77067566 294.13253784]
[151.84947205 308.91171265]
[150.82559204 323.97338867]
[145.77497864 338.19992065]
[137.07246399 350.53558350]
[125.36380005 360.06500244]
[111.51786041 366.08102417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 68]
[22 67]
[23 66]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[82 97]
[83 96]
[84 95]
[85 94]
[99 125]
[100 124]
[102 122]
[103 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
