%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGAGGCUUGGGGGGGGGGUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCxxxxxxxxxxUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCCCCCCCCCCCAUAGGAGGCUU\
) } def
/len { sequence length } bind def

/coor [
[101.59806061 577.86834717]
[88.10918427 571.13684082]
[76.62368011 561.37225342]
[67.80931091 549.14233398]
[62.17853165 535.15814209]
[60.05870438 520.23266602]
[61.57307053 505.23367310]
[66.63359833 491.03317261]
[74.94606018 478.45675659]
[86.02719116 468.23559570]
[99.23274231 460.96395874]
[113.79496765 457.06460571]
[113.48699188 442.06774902]
[113.17901611 427.07092285]
[112.87104034 412.07406616]
[112.56305695 397.07723999]
[112.25508118 382.08041382]
[111.94710541 367.08355713]
[111.63912964 352.08673096]
[111.33114624 337.08990479]
[111.02317047 322.09304810]
[110.56124878 307.10015869]
[109.94541931 292.11282349]
[109.32959747 277.12545776]
[108.71376801 262.13809204]
[108.09794617 247.15075684]
[107.48211670 232.16340637]
[96.85176086 224.81848145]
[92.34355927 212.50163269]
[95.82237244 199.65333557]
[106.22937012 191.04495239]
[105.92139435 176.04811096]
[102.61930847 169.38415527]
[105.76423645 160.74092102]
[105.76423645 145.74092102]
[105.76423645 130.74092102]
[103.80121613 145.61192322]
[96.44368744 158.68353271]
[84.74911499 168.07698059]
[70.39833832 172.44219971]
[55.45394516 171.15176392]
[42.06386185 164.39117432]
[32.15260696 153.13208008]
[27.14470100 138.99275208]
[27.75991249 124.00537109]
[33.90982437 110.32404327]
[44.71268082 99.91375732]
[32.74242020 90.87423706]
[20.77216339 81.83471680]
[8.80190468 72.79519653]
[-3.16835380 63.75567627]
[-19.19226646 64.53912354]
[-29.68697739 52.40485001]
[-26.60184288 36.66123199]
[-12.30351543 29.38542557]
[2.23955393 36.15880585]
[5.87116575 51.78541565]
[17.84142494 60.82493591]
[29.81168175 69.86445618]
[41.78194046 78.90397644]
[53.75220108 87.94349670]
[60.46592331 84.60045624]
[73.89337158 77.91438293]
[80.60710144 74.57134247]
[80.60710144 59.57134628]
[80.60710144 44.57134628]
[66.10958099 40.32886887]
[53.39530182 32.17265320]
[43.49495316 20.76389694]
[37.21110916 7.02744818]
[35.05317688 -7.92313719]
[37.19609070 -22.87588310]
[43.46612930 -36.61863708]
[53.35501099 -48.03733444]
[66.06108856 -56.20631790]
[80.55433655 -60.46335602]
[95.65985870 -60.46335602]
[110.15310669 -56.20631790]
[122.85918427 -48.03733444]
[132.74806213 -36.61863708]
[139.01811218 -22.87588310]
[141.16102600 -7.92313719]
[139.00308228 7.02744818]
[132.71923828 20.76389694]
[122.81889343 32.17265320]
[110.10461426 40.32886887]
[95.60710144 44.57134628]
[95.60710144 59.57134628]
[95.60710144 74.57134247]
[109.42067719 80.41813660]
[120.18936157 69.97612000]
[117.04183197 54.87325668]
[122.58052826 40.47442245]
[135.03805542 31.37423706]
[150.43928528 30.47653770]
[163.86972046 38.06777573]
[171.04376221 51.72561646]
[169.67221069 67.09188843]
[160.19271851 79.26327515]
[145.63014221 84.35592651]
[130.63136292 80.74480438]
[119.86269379 91.18681335]
[126.95909119 104.40199280]
[141.61181641 101.19300079]
[156.26454163 97.98400116]
[170.91726685 94.77500916]
[185.56999207 91.56600952]
[197.31797791 80.12412262]
[213.02531433 84.83704376]
[216.53364563 100.85652924]
[204.23388672 111.70309448]
[188.77899170 106.21873474]
[174.12626648 109.42773438]
[159.47354126 112.63672638]
[144.82081604 115.84572601]
[130.16809082 119.05471802]
[120.76423645 130.74092102]
[120.76423645 145.74092102]
[120.76423645 160.74092102]
[120.91822815 175.74014282]
[121.22620392 190.73696899]
[134.05703735 202.58421326]
[134.37460327 219.70819092]
[122.46947479 231.54757690]
[123.08529663 246.53492737]
[123.70112610 261.52227783]
[124.31694794 276.50964355]
[124.93276978 291.49697876]
[125.54859924 306.48434448]
[129.04571533 314.99114990]
[126.02001190 321.78506470]
[126.32798767 336.78192139]
[126.63596344 351.77874756]
[126.94393921 366.77557373]
[127.25192261 381.77243042]
[127.55989838 396.76925659]
[127.86787415 411.76611328]
[128.17585754 426.76293945]
[128.48382568 441.75976562]
[128.79180908 456.75662231]
[143.50184631 460.05484009]
[156.99479675 466.77819824]
[168.48622131 476.53579712]
[177.30799866 488.76034546]
[182.94726562 502.74111938]
[185.07614136 517.66528320]
[183.57086182 532.66522217]
[178.51895142 546.86883545]
[170.21411133 559.45025635]
[159.13917542 569.67816162]
[145.93803406 576.95776367]
[131.37817383 580.86596680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[31 121]
[32 120]
[34 119]
[35 118]
[36 117]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[64 89]
[65 88]
[66 87]
[90 102]
[91 101]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
