%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACCCAGCGGGGGGGGGGACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCAAAGxxxxxxxxxxCCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGACAAACCCCCCCCCCCCUACCGAGC\
) } def
/len { sequence length } bind def

/coor [
[74.68237305 484.43829346]
[60.83642960 478.42227173]
[49.12776947 468.89285278]
[40.42524338 456.55715942]
[35.37464142 442.33065796]
[34.35074997 427.26898193]
[37.42955017 412.48980713]
[44.38257217 399.08987427]
[54.69385529 388.06353760]
[67.59823608 380.22903442]
[82.13812256 376.16772461]
[82.13812256 361.16772461]
[82.13812256 346.16772461]
[82.13812256 331.16772461]
[82.13812256 316.16772461]
[82.13812256 301.16772461]
[82.13812256 286.16772461]
[82.13812256 271.16772461]
[82.13812256 256.16772461]
[82.13812256 241.16772461]
[71.46823120 237.82832336]
[62.02093124 231.82029724]
[54.45088577 223.55030823]
[49.28516388 213.58213806]
[46.88656235 202.59819031]
[47.42813492 191.35281372]
[50.88071823 180.62043762]
[57.01440430 171.14231873]
[65.41381073 163.57527161]
[75.50621033 158.44622803]
[86.60060883 156.11547852]
[88.15818787 141.19656372]
[89.71576691 126.27764893]
[91.27334595 111.35874176]
[85.75348663 98.51261902]
[93.80773926 87.08367920]
[95.36531830 72.16477203]
[96.92290497 57.24585724]
[90.66042328 42.71685410]
[99.67747498 30.86181450]
[99.67747498 15.86181545]
[98.11989594 0.94290304]
[96.56231689 -13.97600937]
[95.00473785 -28.89492226]
[79.99037933 -28.93124199]
[65.06495667 -30.56331062]
[50.39756393 -33.77263260]
[36.15440369 -38.52285004]
[22.49686432 -44.76013184]
[9.57969284 -52.41381073]
[-2.45074892 -61.39715958]
[-13.45814610 -71.60839081]
[-23.31777763 -82.93180847]
[-31.91792488 -95.23910522]
[-39.16114426 -108.39083099]
[-44.96535873 -122.23796844]
[-49.26480865 -136.62361145]
[-52.01077652 -151.38476562]
[-53.17214584 -166.35418701]
[-52.73575592 -181.36224365]
[-50.70655823 -196.23887634]
[-47.10754013 -210.81553650]
[-41.97948074 -224.92706299]
[-35.38048553 -238.41355896]
[-27.38533020 -251.12219238]
[-18.08460045 -262.90899658]
[-7.58368444 -273.64038086]
[3.99843645 -283.19479370]
[16.53052711 -291.46392822]
[29.87059021 -298.35412598]
[43.86746979 -303.78732300]
[58.36257553 -307.70190430]
[73.19165802 -310.05355835]
[88.18670654 -310.81564331]
[103.17780304 -309.97949219]
[117.99508667 -307.55459595]
[132.47067261 -303.56845093]
[146.44053650 -298.06619263]
[159.74639893 -291.11016846]
[172.23748779 -282.77920532]
[183.77226257 -273.16769409]
[194.22004700 -262.38455200]
[203.46241760 -250.55197144]
[211.39469910 -237.80398560]
[217.92698669 -224.28506470]
[222.98526001 -210.14837646]
[226.51222229 -195.55410767]
[228.46791077 -180.66761780]
[228.83015442 -165.65759277]
[227.59483337 -150.69410706]
[224.77598572 -135.94668579]
[220.40551758 -121.58245850]
[214.53295898 -107.76416779]
[207.22485352 -94.64838409]
[198.56401062 -82.38372803]
[188.64855957 -71.10915375]
[177.59085083 -60.95242691]
[165.51617432 -52.02862167]
[152.56135559 -44.43885040]
[138.87316895 -38.26911926]
[124.60671234 -33.58932495]
[109.92364502 -30.45250320]
[111.48123169 -15.53359032]
[113.03881073 -0.61467791]
[114.59638977 14.30423450]
[122.68426514 1.67148745]
[135.94110107 -5.34678411]
[150.93542480 -4.93392229]
[163.78598022 2.80320549]
[171.16645813 15.86186695]
[171.16642761 30.86186600]
[163.78590393 43.92050171]
[150.93531799 51.65758133]
[135.94100952 52.07038879]
[122.68418884 45.05207062]
[114.59638977 32.41939545]
[120.97028351 45.88129807]
[111.84181213 58.80343628]
[110.28423309 73.72235107]
[108.72665405 88.64125824]
[114.24651337 101.48738098]
[106.19226074 112.91632080]
[104.63468170 127.83522797]
[103.07709503 142.75415039]
[101.51951599 157.67304993]
[118.27380371 166.99555969]
[129.31303406 182.61264038]
[132.49543762 201.42161560]
[127.23508453 219.70785522]
[114.60926056 233.87834167]
[97.13812256 241.16772461]
[97.13812256 256.16772461]
[97.13812256 271.16772461]
[97.13812256 286.16772461]
[97.13812256 301.16772461]
[97.13812256 316.16772461]
[97.13812256 331.16772461]
[97.13812256 346.16772461]
[97.13812256 361.16772461]
[97.13812256 376.16772461]
[111.67800903 380.22903442]
[124.58238983 388.06353760]
[134.89367676 399.08987427]
[141.84669495 412.48980713]
[144.92549133 427.26898193]
[143.90161133 442.33065796]
[138.85099792 456.55715942]
[130.14848328 468.89285278]
[118.43981934 478.42227173]
[104.59387970 484.43829346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 125]
[32 124]
[33 123]
[34 122]
[36 120]
[37 119]
[38 118]
[40 116]
[41 105]
[42 104]
[43 103]
[44 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
