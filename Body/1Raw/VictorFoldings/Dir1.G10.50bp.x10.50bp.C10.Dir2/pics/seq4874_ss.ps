%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGGACAAGGGGGGGGGGUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUxxxxxxxxxxAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACCCCCCCCCCCUCCGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 412.58059692]
[71.19830322 406.56454468]
[59.48964310 397.03512573]
[50.78712082 384.69946289]
[45.73651886 370.47296143]
[44.71262741 355.41125488]
[47.79142761 340.63211060]
[54.74444962 327.23217773]
[65.05573273 316.20584106]
[77.96011353 308.37133789]
[92.50000000 304.31002808]
[92.50000000 289.31002808]
[92.50000000 274.31002808]
[92.50000000 259.31002808]
[92.50000000 244.31002808]
[92.50000000 229.31002808]
[92.50000000 214.31002808]
[92.50000000 199.31002808]
[92.50000000 184.31002808]
[92.50000000 169.31002808]
[92.50000000 154.31002808]
[78.66166687 150.50251770]
[66.28570557 143.23396301]
[56.22026062 133.00247192]
[49.15514374 120.50925446]
[45.57454300 106.61048889]
[45.72384262 92.25868988]
[49.59281540 78.43741608]
[56.91630936 66.09387970]
[67.19242859 56.07400894]
[79.71692657 49.06449127]
[93.63147736 45.54569626]
[93.94353485 30.54894447]
[94.25558472 15.55219078]
[94.56764221 0.55543685]
[94.87969971 -14.44131660]
[79.94462585 -15.91503048]
[65.16866302 -18.54167366]
[50.64067841 -22.30545235]
[36.44804764 -27.18372726]
[22.67613029 -33.14715958]
[9.40774727 -40.15988922]
[-3.27729869 -48.17973328]
[-15.30271912 -57.15846252]
[-26.59618950 -67.04207611]
[-37.08979034 -77.77113342]
[-46.72040939 -89.28111267]
[-55.43012619 -101.50277710]
[-63.16656113 -114.36263275]
[-69.88318634 -127.78333282]
[-75.53959656 -141.68417358]
[-80.10179138 -155.98153687]
[-83.54231262 -170.58944702]
[-85.84048462 -185.42005920]
[-86.98247528 -200.38415527]
[-86.96142578 -215.39173889]
[-85.77745819 -230.35258484]
[-83.43769073 -245.17666626]
[-79.95619202 -259.77487183]
[-75.35391235 -274.05938721]
[-69.65851593 -287.94430542]
[-62.90427017 -301.34609985]
[-55.13179016 -314.18420410]
[-46.38781738 -326.38140869]
[-36.72494507 -337.86431885]
[-26.20128632 -348.56387329]
[-14.88013172 -358.41577148]
[-2.82956910 -367.36071777]
[9.87792683 -375.34494019]
[23.16593170 -382.32043457]
[36.95452499 -388.24520874]
[51.16078568 -393.08364868]
[65.69927216 -396.80664062]
[80.48254395 -399.39181519]
[95.42169952 -400.82363892]
[110.42687988 -401.09344482]
[125.40785217 -400.19967651]
[140.27450562 -398.14767456]
[154.93743896 -394.94976807]
[169.30847168 -390.62518311]
[183.30116272 -385.19998169]
[196.83135986 -378.70675659]
[209.81770325 -371.18457031]
[222.18206787 -362.67861938]
[233.85009766 -353.24014282]
[244.75163269 -342.92581177]
[254.82109070 -331.79772949]
[263.99792480 -319.92282104]
[272.22695923 -307.37243652]
[279.45864868 -294.22213745]
[285.64956665 -280.55096436]
[290.76242065 -266.44113159]
[294.76651001 -251.97755432]
[297.63772583 -237.24716187]
[299.35882568 -222.33856201]
[299.91940308 -207.34143066]
[299.31616211 -192.34594727]
[297.55267334 -177.44230652]
[294.63955688 -162.72015381]
[290.59432983 -148.26800537]
[285.44134521 -134.17279053]
[279.21157837 -120.51928711]
[271.94247437 -107.38959503]
[263.67779541 -94.86269379]
[254.46722412 -83.01392365]
[244.36613464 -71.91452789]
[233.43530273 -61.63127899]
[221.74046326 -52.22600937]
[209.35195923 -43.75529099]
[196.34428406 -36.27006531]
[182.79565430 -29.81535339]
[168.78759766 -24.42997360]
[154.40431213 -20.14631271]
[139.73234558 -16.99013519]
[124.85990906 -14.98042202]
[109.87645721 -14.12926102]
[109.56439972 0.86749309]
[109.25234222 15.86424637]
[108.94028473 30.86100006]
[108.62822723 45.85775375]
[123.48450470 50.45903397]
[136.45095825 59.04690170]
[146.48420715 70.93029022]
[152.77682495 85.15292358]
[154.82247925 100.57032013]
[152.45652771 115.94181824]
[145.86938477 130.03047180]
[135.59109497 141.70254517]
[122.44878387 150.01881409]
[107.50000000 154.31002808]
[107.50000000 169.31002808]
[107.50000000 184.31002808]
[107.50000000 199.31002808]
[107.50000000 214.31002808]
[107.50000000 229.31002808]
[107.50000000 244.31002808]
[107.50000000 259.31002808]
[107.50000000 274.31002808]
[107.50000000 289.31002808]
[107.50000000 304.31002808]
[122.03988647 308.37133789]
[134.94427490 316.20584106]
[145.25555420 327.23217773]
[152.20857239 340.63211060]
[155.28736877 355.41125488]
[154.26348877 370.47296143]
[149.21287537 384.69946289]
[140.51036072 397.03512573]
[128.80169678 406.56454468]
[114.95575714 412.58059692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[32 120]
[33 119]
[34 118]
[35 117]
[36 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
