%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCAACCGGGGGGGGGGCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUxxxxxxxxxxAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACCCCCCCCCCCGCCUCAACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.37496948]
[71.19830322 364.35894775]
[59.48964310 354.82952881]
[50.78712082 342.49386597]
[45.73651886 328.26733398]
[44.71262741 313.20565796]
[47.79142761 298.42651367]
[54.74444962 285.02658081]
[65.05573273 274.00024414]
[77.96011353 266.16574097]
[92.50000000 262.10443115]
[92.50000000 247.10441589]
[92.50000000 232.10441589]
[92.50000000 217.10441589]
[92.50000000 202.10441589]
[92.50000000 187.10441589]
[92.50000000 172.10441589]
[92.50000000 157.10441589]
[92.50000000 142.10441589]
[92.50000000 127.10441589]
[82.18061066 121.75704193]
[74.90473938 112.69359589]
[71.91510010 101.46210480]
[73.72231293 89.98088837]
[80.01771545 80.21092224]
[89.72605896 73.82089233]
[88.16847229 58.90198135]
[86.45578766 44.00008011]
[84.58817291 29.11680031]
[82.72055817 14.23352051]
[80.85294342 -0.64975917]
[65.86466217 0.10101449]
[50.86219025 -0.27039304]
[35.92942047 -1.76190472]
[21.14986801 -4.36517906]
[6.60618591 -8.06565762]
[-7.62028933 -12.84264565]
[-21.44999695 -18.66942787]
[-34.80559540 -25.51341820]
[-47.61239243 -33.33634186]
[-59.79877090 -42.09445190]
[-71.29656982 -51.73876190]
[-82.04149628 -62.21534348]
[-91.97346497 -73.46559906]
[-101.03691101 -85.42662811]
[-109.18116760 -98.03151703]
[-116.36067963 -111.20978546]
[-122.53530121 -124.88774109]
[-127.67048645 -138.98887634]
[-131.73753357 -153.43434143]
[-134.71369934 -168.14334106]
[-136.58232117 -183.03361511]
[-137.33296204 -198.02189636]
[-136.96142578 -213.02436829]
[-135.46977234 -227.95713806]
[-132.86637878 -242.73666382]
[-129.16577148 -257.28030396]
[-124.38865662 -271.50674438]
[-118.56175232 -285.33639526]
[-111.71764374 -298.69192505]
[-103.89460754 -311.49865723]
[-95.13639069 -323.68496704]
[-85.49197388 -335.18267822]
[-75.01529694 -345.92752075]
[-63.76495361 -355.85937500]
[-51.80385208 -364.92272949]
[-39.19888687 -373.06686401]
[-26.02055168 -380.24627686]
[-12.34254742 -386.42077637]
[1.75863314 -391.55581665]
[16.20413017 -395.62274170]
[30.91315651 -398.59878540]
[45.80345535 -400.46728516]
[60.79174805 -401.21777344]
[75.79421234 -400.84609985]
[90.72695923 -399.35433960]
[105.50646973 -396.75079346]
[120.05007935 -393.05007935]
[134.27647400 -388.27282715]
[148.10607910 -382.44580078]
[161.46156311 -375.60156250]
[174.26821899 -367.77841187]
[186.45443726 -359.02011108]
[197.95207214 -349.37557983]
[208.69680786 -338.89880371]
[218.62857056 -327.64837646]
[227.69181824 -315.68719482]
[235.83584595 -303.08215332]
[243.01513672 -289.90377808]
[249.18949890 -276.22570801]
[254.32444763 -262.12448120]
[258.39123535 -247.67895508]
[261.36712646 -232.96989441]
[263.23550415 -218.07958984]
[263.98587036 -203.09127808]
[263.61407471 -188.08882141]
[262.12216187 -173.15608215]
[259.51849365 -158.37660217]
[255.81764221 -143.83302307]
[251.04028320 -129.60667419]
[245.21313477 -115.77711487]
[238.36878967 -102.42169952]
[230.54551697 -89.61510468]
[221.78709412 -77.42896271]
[212.14247131 -65.93141937]
[201.66560364 -55.18676758]
[190.41508484 -45.25510025]
[178.45382690 -36.19196701]
[165.84872437 -28.04804420]
[152.67025757 -20.86888123]
[138.99214172 -14.69462490]
[124.89087677 -9.55980682]
[110.44530487 -5.49314117]
[95.73622894 -2.51737237]
[97.60383606 12.36590767]
[99.47145081 27.24918747]
[101.33906555 42.13246918]
[105.31824493 48.41830826]
[103.08738708 57.34440231]
[104.64496613 72.26331329]
[123.48445129 84.52809143]
[127.31837463 106.67876434]
[140.41152954 113.99787140]
[156.79266357 113.22950745]
[165.41972351 127.17604828]
[157.41790771 141.49049377]
[141.01881409 141.44735718]
[133.09242249 127.09102631]
[119.99926758 119.77191925]
[114.23003387 124.25707245]
[107.50000000 127.10441589]
[107.50000000 142.10441589]
[107.50000000 157.10441589]
[107.50000000 172.10441589]
[107.50000000 187.10441589]
[107.50000000 202.10441589]
[107.50000000 217.10441589]
[107.50000000 232.10441589]
[107.50000000 247.10441589]
[107.50000000 262.10443115]
[122.03988647 266.16574097]
[134.94427490 274.00024414]
[145.25555420 285.02658081]
[152.20857239 298.42651367]
[155.28736877 313.20565796]
[154.26348877 328.26733398]
[149.21287537 342.49386597]
[140.51036072 354.82952881]
[128.80169678 364.35894775]
[114.95575714 370.37496948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 120]
[27 119]
[28 117]
[29 116]
[30 115]
[31 114]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
