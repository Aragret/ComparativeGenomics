%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAAUACUAACUAGGGGGGGGGGCCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUxxxxxxxxxxUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAACCCCCCCCCCUCCUAAUACCAACUA\
) } def
/len { sequence length } bind def

/coor [
[48.11994171 272.31057739]
[38.86404800 269.24795532]
[29.78760147 265.68853760]
[20.91724968 261.64279175]
[12.27902603 257.12258911]
[3.89828753 252.14117432]
[-4.20036697 246.71319580]
[-11.99316502 240.85456848]
[-19.45723343 234.58248901]
[-26.57066345 227.91537476]
[-33.31257629 220.87280273]
[-39.66317749 213.47543335]
[-45.60383224 205.74497986]
[-51.11709976 197.70414734]
[-56.18679810 189.37651062]
[-69.50507355 196.27749634]
[-82.82335663 203.17846680]
[-96.14163208 210.07943726]
[-109.45990753 216.98042297]
[-118.15322113 230.19923401]
[-133.01322937 229.18476868]
[-146.33151245 236.08573914]
[-159.64979553 242.98670959]
[-172.96807861 249.88769531]
[-186.28634644 256.78866577]
[-192.49057007 271.58349609]
[-207.96456909 275.81848145]
[-220.83801270 266.24487305]
[-221.23550415 250.20672607]
[-208.85211182 240.00715637]
[-193.18733215 243.47038269]
[-179.86904907 236.56941223]
[-166.55076599 229.66844177]
[-153.23248291 222.76745605]
[-139.91421509 215.86648560]
[-132.17352295 203.14128113]
[-116.36088562 203.66213989]
[-103.04261017 196.76115417]
[-89.72432709 189.86018372]
[-76.40605164 182.95921326]
[-63.08777237 176.05822754]
[-70.94454193 156.21780396]
[-76.39743805 135.58682251]
[-79.36978149 114.45539856]
[-79.81977844 93.12071228]
[-77.74109650 71.88275146]
[-73.16297150 51.04019547]
[-66.14978027 30.88611984]
[-56.80014038 11.70394421]
[-45.24553299 -6.23658657]
[-56.97300339 -15.58893394]
[-68.70047760 -24.94128036]
[-80.42794800 -34.29362869]
[-95.34944153 -30.03585625]
[-109.91225433 -35.39349365]
[-118.51667786 -48.30641174]
[-117.85414124 -63.80933762]
[-108.17939758 -75.94107819]
[-93.21259308 -80.03672791]
[-78.70876312 -74.52143097]
[-70.24492645 -61.51592636]
[-71.07559967 -46.02109909]
[-59.34812927 -36.66875458]
[-47.62065887 -27.31640625]
[-35.89318466 -17.96405983]
[-29.10744286 -25.35447884]
[-21.92035484 -32.35522079]
[-14.35426331 -38.94451904]
[-6.43268871 -45.10189438]
[1.81974351 -50.80820465]
[10.37738037 -56.04570770]
[19.21361923 -60.79812622]
[28.30099297 -65.05068970]
[37.61124802 -68.79016876]
[47.11544800 -72.00494385]
[56.78404617 -74.68502808]
[66.58698273 -76.82207489]
[76.49378967 -78.40946198]
[86.47367096 -79.44223785]
[96.49559784 -79.91719055]
[106.52841949 -79.83285522]
[116.54094696 -79.18949127]
[126.50205231 -77.98909760]
[136.38078308 -76.23539734]
[146.14640808 -73.93385315]
[155.76858521 -71.09162140]
[165.21739197 -67.71752167]
[174.46347046 -63.82206345]
[181.23417664 -77.20703125]
[188.00489807 -90.59201050]
[186.55892944 -106.92728424]
[200.13630676 -116.12438965]
[214.76979065 -108.72212982]
[215.40570068 -92.33531952]
[201.38986206 -83.82129669]
[194.61915588 -70.43632507]
[187.84844971 -57.05135345]
[218.16453552 -35.71890259]
[243.46633911 -8.62727547]
[262.68020630 23.07391167]
[276.49603271 17.23240852]
[290.31185913 11.39090633]
[304.12768555 5.54940367]
[317.94348145 -0.29209903]
[318.63632202 -15.53948402]
[325.88366699 -28.97222710]
[338.24658203 -37.92324829]
[353.27041626 -40.61531448]
[367.97216797 -36.51391220]
[379.43276978 -26.43338013]
[385.37673950 -12.37521648]
[384.62390137 2.86932230]
[377.32369995 16.27342224]
[364.92562866 25.17568779]
[349.89129639 27.80856895]
[335.20581055 23.64930344]
[323.78500366 13.52371979]
[309.96917725 19.36522293]
[296.15335083 25.20672417]
[282.33755493 31.04822731]
[268.52172852 36.88972855]
[271.69232178 46.10919189]
[274.35897827 55.48683548]
[276.51385498 64.99514008]
[278.15057373 74.60618591]
[279.26440430 84.29177856]
[279.85205078 94.02347565]
[279.91177368 103.77271271]
[279.44338989 113.51087952]
[278.44830322 123.20938873]
[276.92944336 132.83976746]
[274.89123535 142.37376404]
[272.33966064 151.78337097]
[269.28222656 161.04098511]
[265.72793579 170.11941528]
[261.68716431 178.99203491]
[257.17178345 187.63279724]
[252.19506836 196.01632690]
[246.77163696 204.11802673]
[240.91737366 211.91410828]
[234.64949036 219.38169861]
[227.98637390 226.49887085]
[220.94758606 233.24473572]
[213.55378723 239.59948730]
[205.82666016 245.54447937]
[197.78892517 251.06225586]
[189.46414185 256.13662720]
[180.87675476 260.75268555]
[172.05197144 264.89691162]
[163.01570129 268.55709839]
[153.79446411 271.72253418]
[144.41532898 274.38394165]
[134.90582275 276.53344727]
[125.29384613 278.16479492]
[115.60763550 279.27319336]
[105.87561035 279.85537720]
[96.12633514 279.90960693]
[86.38843536 279.43579102]
[76.69049072 278.43527222]
[67.06095886 276.91098022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[50 65]
[51 64]
[52 63]
[53 62]
[88 97]
[89 96]
[90 95]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
