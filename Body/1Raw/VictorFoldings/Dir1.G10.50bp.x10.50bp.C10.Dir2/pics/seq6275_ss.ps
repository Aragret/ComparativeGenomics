%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCACAAGGGGGGGGGGAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGxxxxxxxxxxUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCCCCCCCCCCCAAACAACAA\
) } def
/len { sequence length } bind def

/coor [
[83.96333313 392.50259399]
[70.74313354 385.23013306]
[59.85632706 374.78311157]
[52.04519653 361.87387085]
[47.84231567 347.38256836]
[47.53424454 332.29721069]
[51.14198685 317.64639282]
[58.41955948 304.42901611]
[68.87076569 293.54623413]
[81.78302765 285.74008179]
[96.27596283 281.54281616]
[95.96390533 266.54605103]
[95.65185547 251.54930115]
[95.33979797 236.55255127]
[95.02774048 221.55578613]
[94.71568298 206.55903625]
[94.40362549 191.56228638]
[94.09156799 176.56553650]
[93.77951813 161.56877136]
[93.46746063 146.57202148]
[93.15540314 131.57527161]
[85.79514313 129.01841736]
[79.26104736 124.77381897]
[73.93315125 119.08835602]
[70.12132263 112.29270172]
[55.30356216 114.62380981]
[42.87348175 124.41174316]
[29.09841156 118.74635315]
[14.28065300 121.07746124]
[8.15247726 135.23545837]
[-4.66998529 143.81381226]
[-20.09513474 144.07518005]
[-33.20086288 135.93617249]
[-39.80517578 121.99390411]
[-37.80066681 106.69731903]
[-27.82696152 94.92749786]
[-13.06663704 90.44013977]
[1.77034152 94.66715240]
[11.94954872 106.25970459]
[26.76730728 103.92859650]
[38.13751984 94.30739594]
[52.97245789 99.80605316]
[67.79021454 97.47494507]
[79.26104736 75.22618103]
[103.18080902 67.84835052]
[108.08235931 53.67179108]
[105.27928925 38.10087967]
[116.75073242 28.60060120]
[121.65228271 14.42404366]
[126.55384064 0.24748562]
[120.48470306 -10.50721836]
[121.63213348 -22.38553810]
[110.54082489 -32.48418808]
[94.41249084 -35.45217133]
[89.17436218 -50.99225235]
[100.21498108 -63.11812592]
[116.17669678 -59.35573578]
[120.63947296 -43.57550430]
[131.73078918 -33.47685242]
[136.99205017 -35.08850098]
[142.49400330 -35.17010498]
[149.94891357 -48.18641281]
[157.40382385 -61.20272446]
[162.00938416 -75.47818756]
[163.56697083 -90.39709473]
[165.12455750 -105.31600952]
[166.68212891 -120.23492432]
[168.23971558 -135.15383911]
[154.32987976 -141.07058716]
[142.78308105 -150.82572937]
[134.62606812 -163.55186462]
[130.58413696 -178.11738586]
[131.01670837 -193.22712708]
[135.88531494 -207.53755188]
[144.75703430 -219.77616882]
[156.84301758 -228.85475159]
[171.06855774 -233.96601868]
[186.16876221 -234.65550232]
[200.80091858 -230.86187744]
[213.66392517 -222.92247009]
[223.61404419 -211.54325867]
[229.76651001 -197.73605347]
[231.57423401 -182.72860718]
[228.87648010 -167.85536194]
[221.91314697 -154.43882751]
[211.30339050 -143.67199707]
[197.99063110 -136.51226807]
[183.15863037 -133.59625244]
[181.60104370 -118.67733765]
[180.04347229 -103.75843048]
[178.48588562 -88.83951569]
[176.92829895 -73.92060089]
[186.01687622 -85.85366821]
[198.05171204 -94.80702209]
[212.09362793 -100.08193970]
[227.04675293 -101.26676941]
[241.74415588 -98.26903534]
[255.03883362 -91.32269287]
[265.89324951 -80.96983337]
[273.46032715 -68.01840973]
[277.14950562 -53.47915649]
[276.67288208 -38.48673248]
[272.06768799 -24.21115303]
[263.69326782 -11.76650429]
[252.20321655 -2.12397432]
[238.49418640 3.96392608]
[223.63606262 6.02209139]
[208.78837585 3.88990092]
[195.10986328 -2.26624751]
[183.66798401 -11.96592331]
[175.35571289 -24.45215416]
[170.82171631 -38.75050735]
[170.42013550 -53.74781418]
[162.96522522 -40.73150253]
[155.51031494 -27.71519470]
[158.34342957 -7.15090990]
[140.73039246 5.14903641]
[135.82884216 19.32559395]
[130.92729187 33.50215149]
[134.08094788 48.05906296]
[122.25891876 58.57334137]
[117.35736847 72.74990082]
[125.27793121 79.87855530]
[130.44866943 89.19609070]
[132.30711365 99.68890381]
[130.65107727 110.21556854]
[125.66071320 119.63094330]
[117.87889862 126.91079712]
[108.15215302 131.26321411]
[108.46421051 146.25996399]
[108.77626801 161.25671387]
[109.08832550 176.25347900]
[109.40038300 191.25022888]
[109.71244049 206.24697876]
[110.02449036 221.24372864]
[110.33654785 236.24049377]
[110.64860535 251.23724365]
[110.96066284 266.23400879]
[111.27272034 281.23074341]
[125.92771149 284.82150269]
[139.15351868 292.08377075]
[150.04838562 302.52236938]
[157.86949158 315.42556763]
[162.08355713 329.91363525]
[162.40327454 344.99874878]
[158.80685425 359.65234375]
[151.53948975 372.87536621]
[141.09667969 383.76620483]
[128.19046021 391.58230591]
[113.70076752 395.79077148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 43]
[26 42]
[28 40]
[29 39]
[45 122]
[46 121]
[48 119]
[49 118]
[50 117]
[52 59]
[53 58]
[61 115]
[62 114]
[63 113]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
