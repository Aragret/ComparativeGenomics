%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCUCCAGGGGGGGGGGUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUxxxxxxxxxxGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCCCCCCCCCCCUUUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[63.72160339 625.91442871]
[49.87566376 619.89843750]
[38.16699982 610.36901855]
[29.46447754 598.03332520]
[24.41387558 583.80682373]
[23.38998413 568.74511719]
[26.46878242 553.96600342]
[33.42180634 540.56604004]
[43.73308945 529.53973389]
[56.63747025 521.70520020]
[71.17735291 517.64392090]
[71.17735291 502.64389038]
[71.17735291 487.64389038]
[71.17735291 472.64389038]
[71.17735291 457.64389038]
[71.17735291 442.64389038]
[71.17735291 427.64389038]
[71.17735291 412.64389038]
[71.17735291 397.64389038]
[71.17735291 382.64389038]
[71.17735291 367.64389038]
[63.87335968 362.40051270]
[59.77275848 354.24383545]
[59.92565918 344.97744751]
[64.42527771 336.71765137]
[72.35754395 331.41021729]
[73.29317474 316.43942261]
[74.22880554 301.46862793]
[67.30043793 288.28353882]
[75.88346100 274.99285889]
[76.81909180 260.02206421]
[77.75471497 245.05126953]
[78.69034576 230.08047485]
[70.03253937 214.84753418]
[80.25961304 199.57054138]
[80.88359070 184.58352661]
[68.04904938 192.34718323]
[53.90455627 187.35386658]
[48.78858948 173.25326538]
[56.44050980 160.35179138]
[71.26737976 158.07937622]
[82.43170929 168.09635925]
[84.60854340 153.25515747]
[86.78537750 138.41394043]
[88.96221924 123.57273865]
[77.14273834 112.45199585]
[74.20869446 96.49071503]
[81.30065155 81.89362335]
[95.66171265 74.33512115]
[97.52932739 59.45184326]
[98.77619934 44.50375366]
[99.40017700 29.51673889]
[100.02415466 14.52972317]
[100.64813232 -0.45729294]
[101.27210999 -15.44430923]
[101.74015045 -30.43700600]
[102.05220795 -45.43375778]
[102.36426544 -60.43051147]
[102.67632294 -75.42726898]
[92.01573944 -86.78462982]
[92.54583740 -101.98902130]
[103.43904877 -112.08226776]
[103.75110626 -127.07902527]
[104.06316376 -142.07577515]
[96.61463165 -156.03393555]
[104.61502838 -168.59748840]
[104.92708588 -183.59423828]
[90.70366669 -188.78778076]
[78.93881989 -198.32020569]
[70.90871429 -211.15750122]
[67.48439026 -225.90718079]
[69.03730011 -240.96928406]
[75.39899445 -254.71000671]
[85.87940216 -265.63885498]
[99.34168243 -272.57037354]
[114.32555389 -274.75262451]
[129.20567322 -271.94894409]
[142.36796570 -264.46343994]
[152.38467407 -253.10807800]
[158.16928101 -239.11460876]
[159.09428406 -224.00093079]
[155.05935669 -209.40647888]
[146.50219727 -196.91433716]
[134.35099792 -187.87956238]
[119.92384338 -183.28218079]
[119.61178589 -168.28543091]
[127.08263397 -155.39994812]
[119.05991364 -141.76371765]
[118.74785614 -126.76696777]
[118.43579865 -111.77021790]
[128.89971924 -101.23256683]
[128.79687500 -86.01927948]
[117.67307281 -75.11521149]
[117.36101532 -60.11845779]
[117.04896545 -45.12170410]
[116.73690796 -30.12494850]
[119.76174164 -23.32818413]
[116.25912476 -14.82033157]
[115.63514709 0.16668443]
[115.01116943 15.15370083]
[114.38719177 30.14071655]
[113.76321411 45.12773132]
[115.62802887 47.30254745]
[116.71471405 50.37062454]
[116.66962433 54.02846909]
[115.25951385 57.84719467]
[112.41260529 61.31945419]
[110.54499054 76.20273590]
[120.90699005 84.49501801]
[125.83374786 96.81816101]
[124.04445648 109.96849823]
[116.00427246 120.52729797]
[103.80342102 125.74957275]
[101.62658691 140.59077454]
[99.44974518 155.43199158]
[97.27291107 170.27319336]
[95.87060547 185.20750427]
[95.24662781 200.19451904]
[103.40928650 210.23567200]
[102.54293823 222.74441528]
[93.66114044 231.01609802]
[92.72550964 245.98689270]
[91.78987885 260.95767212]
[90.85424805 275.92846680]
[97.71569824 290.18438721]
[89.19959259 302.40426636]
[88.26396942 317.37506104]
[87.32833862 332.34585571]
[98.08615875 350.83010864]
[86.17735291 367.64389038]
[86.17735291 382.64389038]
[86.17735291 397.64389038]
[86.17735291 412.64389038]
[86.17735291 427.64389038]
[86.17735291 442.64389038]
[86.17735291 457.64389038]
[86.17735291 472.64389038]
[86.17735291 487.64389038]
[86.17735291 502.64389038]
[86.17735291 517.64392090]
[100.71724701 521.70520020]
[113.62162781 529.53973389]
[123.93290710 540.56604004]
[130.88592529 553.96600342]
[133.96473694 568.74511719]
[132.94084167 583.80682373]
[127.89023590 598.03332520]
[119.18771362 610.36901855]
[107.47904968 619.89843750]
[93.63311005 625.91442871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 128]
[27 127]
[28 126]
[30 124]
[31 123]
[32 122]
[33 121]
[35 118]
[36 117]
[42 116]
[43 115]
[44 114]
[45 113]
[49 108]
[50 107]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[56 96]
[57 95]
[58 94]
[59 93]
[62 90]
[63 89]
[64 88]
[66 86]
[67 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
