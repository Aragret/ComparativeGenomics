%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCCCCUGGGGGGGGGGGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAxxxxxxxxxxACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUCCCCCCCCCCUCCACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[78.68710327 362.77764893]
[64.84116364 356.76162720]
[53.13250351 347.23220825]
[44.42997742 334.89654541]
[39.37937546 320.67001343]
[38.35548401 305.60833740]
[41.43428421 290.82919312]
[48.38730621 277.42926025]
[58.69858932 266.40292358]
[71.60296631 258.56842041]
[86.14286041 254.50709534]
[86.14286041 239.50709534]
[86.14286041 224.50709534]
[86.14286041 209.50709534]
[86.14286041 194.50709534]
[86.14286041 179.50709534]
[86.14286041 164.50709534]
[86.14286041 149.50709534]
[86.14286041 134.50709534]
[86.14286041 119.50709534]
[82.55661774 103.60191345]
[90.00484467 93.92831421]
[82.54993439 80.91200256]
[75.09502411 67.89569092]
[74.64817047 82.88903809]
[70.93769836 97.42286682]
[64.14272308 110.79553986]
[54.59130478 122.36145782]
[42.74454880 131.56224060]
[29.17438889 137.95370483]
[14.53595734 141.22727966]
[-0.46404228 141.22492981]
[-15.10144997 137.94677734]
[-28.66961288 131.55108643]
[-40.51349258 122.34659576]
[-50.06130219 110.77770233]
[-56.85209274 97.40290833]
[-60.55803299 82.86791229]
[-61.00019836 67.87443542]
[-58.15725327 53.14630890]
[-52.16643906 39.39457703]
[-43.31698227 27.28313255]
[-32.03610611 17.39668465]
[-18.86842346 10.21252441]
[-4.44963551 6.07748413]
[10.52415752 5.19119310]
[25.33006096 7.59643793]
[39.25328827 13.17710114]
[51.62165833 21.66376114]
[61.83806229 32.64670944]
[69.40842438 45.59378815]
[69.72047424 30.59703445]
[70.03253174 15.60028172]
[70.34458923 0.60352802]
[70.65664673 -14.39322567]
[56.11213684 -21.61826897]
[46.19750595 -34.40740204]
[42.84938431 -50.18004608]
[46.68581009 -65.78131104]
[56.89290237 -78.11300659]
[71.39685822 -84.74893951]
[71.39685822 -99.74893951]
[71.39685822 -114.74893951]
[71.39685822 -129.74894714]
[56.81973648 -133.64381409]
[43.74787140 -141.17964172]
[33.07252121 -151.84263611]
[25.52155304 -164.90576172]
[21.60980034 -179.47836304]
[21.60397530 -194.56684875]
[25.50447273 -209.14245605]
[33.04535294 -222.21141052]
[43.71246338 -232.88264465]
[56.77850342 -240.42855835]
[71.35260773 -244.33468628]
[86.44110107 -244.33468628]
[101.01520538 -240.42855835]
[114.08124542 -232.88264465]
[124.74835968 -222.21141052]
[132.28923035 -209.14245605]
[136.18972778 -194.56684875]
[136.18391418 -179.47836304]
[132.27215576 -164.90576172]
[124.72118378 -151.84263611]
[114.04583740 -141.17964172]
[100.97397614 -133.64381409]
[86.39685822 -129.74894714]
[86.39685822 -114.74893951]
[86.39685822 -99.74893951]
[86.39685822 -84.74893951]
[99.20597076 -79.33346558]
[109.00597382 -69.40523529]
[114.28722382 -56.44641876]
[114.21821594 -42.40953445]
[108.77625275 -29.42322159]
[98.75595856 -19.46948242]
[85.65339661 -14.08116913]
[85.34134674 0.91558427]
[85.02928925 15.91233826]
[84.71723175 30.90909195]
[84.40517426 45.90584564]
[88.11133575 60.44078064]
[95.56624603 73.45709229]
[103.02115631 86.47340393]
[115.28352356 95.11251831]
[130.04957581 97.75138092]
[144.81564331 100.39024353]
[153.88037109 98.81471252]
[159.86006165 103.24066162]
[174.56802368 106.18614960]
[189.27598572 109.13162994]
[198.04698181 96.68215179]
[211.12666321 88.88204193]
[226.24891663 87.08273315]
[240.79370117 91.59594727]
[252.24104309 101.63975525]
[258.60763550 115.47400665]
[258.79043579 130.70182800]
[252.75773621 144.68490601]
[241.55476379 155.00059509]
[227.12251282 159.86163330]
[211.96142578 158.42581177]
[198.69827271 150.94190979]
[189.63098145 138.70655823]
[186.33050537 123.83959198]
[171.62254333 120.89410400]
[156.91458130 117.94862366]
[142.17677307 115.15630341]
[127.41071320 112.51743317]
[112.64466095 109.87857056]
[101.14286041 119.50709534]
[101.14286041 134.50709534]
[101.14286041 149.50709534]
[101.14286041 164.50709534]
[101.14286041 179.50709534]
[101.14286041 194.50709534]
[101.14286041 209.50709534]
[101.14286041 224.50709534]
[101.14286041 239.50709534]
[101.14286041 254.50709534]
[115.68274689 258.56842041]
[128.58712769 266.40292358]
[138.89840698 277.42926025]
[145.85142517 290.82919312]
[148.93023682 305.60833740]
[147.90634155 320.67001343]
[142.85574341 334.89654541]
[134.15321350 347.23220825]
[122.44454956 356.76162720]
[108.59860992 362.77764893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 104]
[23 103]
[24 102]
[51 101]
[52 100]
[53 99]
[54 98]
[55 97]
[61 90]
[62 89]
[63 88]
[64 87]
[105 130]
[106 129]
[107 128]
[109 127]
[110 126]
[111 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
