%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACGCCUAGGGGGGGGGGAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUxxxxxxxxxxAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCCCCCCCCCCCUAGGCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 374.29086304]
[71.19830322 368.27484131]
[59.48964310 358.74542236]
[50.78712082 346.40975952]
[45.73651886 332.18322754]
[44.71262741 317.12155151]
[47.79142761 302.34237671]
[54.74444962 288.94244385]
[65.05573273 277.91610718]
[77.96011353 270.08160400]
[92.50000000 266.02029419]
[92.50000000 251.02029419]
[92.50000000 236.02029419]
[92.50000000 221.02029419]
[92.50000000 206.02029419]
[92.50000000 191.02029419]
[92.50000000 176.02029419]
[92.50000000 161.02029419]
[92.50000000 146.02029419]
[92.50000000 131.02029419]
[92.50000000 116.02029419]
[85.59300232 102.70513916]
[73.33063507 94.06602478]
[61.06826401 85.42691040]
[51.14473343 96.69503784]
[40.06105423 106.82417297]
[27.94718361 115.69554901]
[14.94514370 123.20515442]
[1.20738053 129.26495361]
[-13.10503864 133.80387878]
[-27.82430840 136.76873779]
[-42.77785110 138.12474060]
[-57.79034805 137.85601807]
[-72.68578339 135.96569824]
[-87.28951263 132.47595215]
[-101.43031311 127.42769623]
[-114.94240570 120.88012695]
[-127.66735077 112.90999603]
[-139.45596313 103.61075592]
[-150.17002869 93.09143066]
[-159.68391418 81.47536469]
[-167.88610840 68.89874268]
[-174.68040466 55.50902176]
[-179.98718262 41.46318817]
[-183.74418640 26.92592239]
[-185.90739441 12.06766510]
[-186.45143127 -2.93737626]
[-185.36991882 -17.91327667]
[-182.67553711 -32.68444824]
[-178.39988708 -47.07771301]
[-172.59307861 -60.92430878]
[-165.32321167 -74.06189728]
[-156.67550659 -86.33644867]
[-146.75137329 -97.60404205]
[-135.66714478 -107.73258209]
[-123.55280304 -116.60330963]
[-110.55036163 -124.11221313]
[-96.81227112 -130.17126465]
[-82.49960327 -134.70942688]
[-67.78017426 -137.67349243]
[-52.82656097 -139.02868652]
[-37.81407928 -138.75915527]
[-22.91874695 -136.86804199]
[-8.31520462 -133.37750244]
[5.82532930 -128.32849121]
[19.33706474 -121.78018951]
[32.06158066 -113.80937958]
[43.84969330 -104.50949860]
[54.56319046 -93.98960876]
[64.07646179 -82.37302399]
[72.27796936 -69.79595947]
[79.07155609 -56.40587616]
[84.37756348 -42.35975647]
[88.13379669 -27.82228851]
[90.29619598 -12.96391487]
[90.83942413 2.04115558]
[89.75711060 17.01699638]
[87.06193542 31.78802490]
[82.78550720 46.18105698]
[76.97795868 60.02734375]
[69.70738220 73.16454315]
[81.96974945 81.80365753]
[94.23211670 90.44277191]
[98.05201721 85.57397461]
[104.86686707 82.72127533]
[113.47690582 83.44736481]
[127.13314819 77.24195862]
[140.78938293 71.03655243]
[154.31358337 64.54838562]
[167.69985962 57.78026962]
[181.08615112 51.01215363]
[194.47242737 44.24404144]
[207.85871887 37.47592545]
[221.24499512 30.70781136]
[234.56016541 23.80081177]
[247.80274963 16.75567818]
[261.04531860 9.71054268]
[274.28790283 2.66540790]
[278.66485596 -12.52069855]
[292.53823853 -20.09068871]
[307.67724609 -15.55342293]
[315.10012817 -1.60077977]
[310.40304565 13.48938465]
[296.37271118 20.76434326]
[281.33303833 15.90799332]
[268.09045410 22.95312881]
[254.84788513 29.99826241]
[241.60530090 37.04339981]
[237.14849854 43.00012207]
[228.01312256 44.09409714]
[214.62683105 50.86220932]
[201.24055481 57.63032532]
[187.85426331 64.39843750]
[174.46797180 71.16655731]
[161.08169556 77.93466949]
[158.75285339 82.17165375]
[153.70581055 84.95707703]
[146.99479675 84.69279480]
[133.33856201 90.89820099]
[119.68231201 97.10360718]
[133.96572876 92.52278900]
[148.55401611 96.01308441]
[159.21746826 106.56252289]
[162.86437988 121.11244202]
[158.43736267 135.44427490]
[147.21998596 145.40270996]
[132.46456909 148.10041809]
[118.44924927 142.75524902]
[109.23758698 130.91694641]
[107.50000000 116.02029419]
[107.50000000 131.02029419]
[107.50000000 146.02029419]
[107.50000000 161.02029419]
[107.50000000 176.02029419]
[107.50000000 191.02029419]
[107.50000000 206.02029419]
[107.50000000 221.02029419]
[107.50000000 236.02029419]
[107.50000000 251.02029419]
[107.50000000 266.02029419]
[122.03988647 270.08160400]
[134.94427490 277.91610718]
[145.25555420 288.94244385]
[152.20857239 302.34237671]
[155.28736877 317.12155151]
[154.26348877 332.18322754]
[149.21287537 346.40975952]
[140.51036072 358.74542236]
[128.80169678 368.27484131]
[114.95575714 374.29086304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 83]
[23 82]
[24 81]
[86 120]
[87 119]
[88 118]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
