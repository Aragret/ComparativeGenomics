%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGAGCAGAGGGGGGGGGGUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAxxxxxxxxxxCUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCAGA\
) } def
/len { sequence length } bind def

/coor [
[73.11827850 586.12329102]
[60.56005478 577.77215576]
[50.47383118 566.55969238]
[43.49363708 553.19079590]
[40.05825424 538.50579834]
[40.38363266 523.42785645]
[44.44931412 508.90472412]
[51.99973679 495.84936523]
[62.56026459 485.08245850]
[75.46705627 477.28085327]
[89.90879059 472.93487549]
[89.28481293 457.94787598]
[88.66083527 442.96084595]
[88.03685760 427.97384644]
[87.41287994 412.98681641]
[86.78890228 397.99981689]
[86.16492462 383.01278687]
[85.54094696 368.02578735]
[84.91696930 353.03875732]
[84.29299164 338.05175781]
[83.66901398 323.06472778]
[83.04503632 308.07769775]
[74.33723450 299.62304688]
[73.73130798 287.09899902]
[82.10108948 277.22979736]
[80.10425568 275.17553711]
[78.82830811 272.18124390]
[78.64515686 268.52767944]
[79.81432343 264.62844849]
[82.43910980 260.98538208]
[83.37473297 246.01458740]
[84.31036377 231.04379272]
[70.38634491 225.59561157]
[58.81236267 216.09754944]
[50.72988510 203.47006226]
[46.94104767 188.94299316]
[47.82907867 173.93586731]
[53.31957626 159.91911316]
[62.88655472 148.27001953]
[75.60281372 140.13740540]
[90.22978973 136.32833862]
[91.16542053 121.35755157]
[92.10104370 106.38676453]
[89.40731049 98.72988129]
[93.21506500 91.11526489]
[94.46193695 76.16718292]
[95.24178314 61.18746567]
[95.55384064 46.19071198]
[95.86589050 31.19395828]
[96.17794800 16.19720459]
[86.92369080 0.31203464]
[96.51480103 -14.35120487]
[96.51480103 -29.35120583]
[96.51480103 -44.35120392]
[96.51480103 -59.35120392]
[96.51480103 -74.35120392]
[96.51480103 -89.35120392]
[92.50705719 -103.80589294]
[84.78297424 -116.66429901]
[77.05889130 -129.52270508]
[62.46222305 -136.99728394]
[61.90741348 -153.38703918]
[75.96520233 -161.83160400]
[90.17414093 -153.64392090]
[89.91728973 -137.24678040]
[97.64138031 -124.38838196]
[105.36546326 -111.52997589]
[105.50029755 -126.52937317]
[108.90761566 -141.13725281]
[115.42291260 -154.64839172]
[124.73165894 -166.41050720]
[136.38442993 -175.85575867]
[149.81869507 -182.52813721]
[164.38584900 -186.10554504]
[179.38265991 -186.41526794]
[194.08509827 -183.44233704]
[207.78337097 -177.33029175]
[219.81617737 -168.37419128]
[229.60260010 -157.00642395]
[236.67016602 -143.77580261]
[240.67768860 -129.32106018]
[241.43167114 -114.34001923]
[238.89575195 -99.55593872]
[233.19232178 -85.68254852]
[224.59674072 -73.38961792]
[213.52397156 -63.27062988]
[200.50860596 -55.81408691]
[186.17895508 -51.37997818]
[171.22685242 -50.18236542]
[156.37411499 -52.27907181]
[142.33779907 -57.56887436]
[129.79554749 -65.79638672]
[119.35286713 -76.56441498]
[111.51480103 -89.35120392]
[111.51480103 -74.35120392]
[111.51480103 -59.35120392]
[111.51480103 -44.35120392]
[111.51480103 -29.35120583]
[111.51480103 -14.35120487]
[119.86335754 -5.54161453]
[119.94778442 6.99679995]
[111.17470551 16.50926018]
[110.86264801 31.50601387]
[110.55059052 46.50276947]
[110.23853302 61.49952316]
[112.46214294 64.31431580]
[113.39742279 68.36732483]
[112.46788788 73.02440643]
[109.41002655 77.41405487]
[108.16314697 92.36214447]
[107.07183838 107.32238770]
[106.13620758 122.29318237]
[105.20058441 137.26397705]
[119.23948669 142.86456299]
[130.84422302 152.51716614]
[138.88635254 165.26676941]
[142.58894348 179.85806274]
[141.60156250 194.85897827]
[136.03347778 208.80126953]
[126.44166565 220.32417297]
[113.77516937 228.30728149]
[99.28115845 231.97941589]
[98.34552765 246.95021057]
[97.40989685 261.92098999]
[97.09784698 276.91775513]
[107.00489044 292.40420532]
[98.03205109 307.45373535]
[98.65602875 322.44076538]
[99.28000641 337.42776489]
[99.90398407 352.41479492]
[100.52796173 367.40179443]
[101.15193939 382.38882446]
[101.77591705 397.37582397]
[102.39989471 412.36285400]
[103.02387238 427.34985352]
[103.64785004 442.33688354]
[104.27182770 457.32388306]
[104.89580536 472.31091309]
[119.64881134 475.44134521]
[133.15943909 482.14309692]
[144.57841492 491.99490356]
[153.18794250 504.37744141]
[158.44677734 518.51232910]
[160.02438354 533.51104736]
[157.82157898 548.43078613]
[151.97683716 562.33367920]
[142.85755920 574.34570312]
[131.03698730 583.71185303]
[117.25817871 589.84338379]
[102.38727570 592.35479736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[25 125]
[30 124]
[31 123]
[32 122]
[41 113]
[42 112]
[43 111]
[45 110]
[46 109]
[47 105]
[48 104]
[49 103]
[50 102]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
