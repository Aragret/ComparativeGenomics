%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUAAUAGCGGGGGGGGGGUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUAxxxxxxxxxxCAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACCCCCCCCCCCUUCUAACAGC\
) } def
/len { sequence length } bind def

/coor [
[82.39657593 385.17556763]
[68.37463379 379.62255859]
[56.17467499 370.75622559]
[46.56360626 359.13394165]
[40.14558029 345.48623657]
[37.32404327 330.67105103]
[38.27635956 315.61965942]
[42.94266510 301.27822876]
[51.02962875 288.54827881]
[62.02890396 278.23001099]
[75.24906158 270.97204590]
[89.85907745 267.23059082]
[89.85907745 252.23059082]
[89.85907745 237.23059082]
[89.85907745 222.23059082]
[89.85907745 207.23059082]
[89.85907745 192.23059082]
[89.85907745 177.23059082]
[89.85907745 162.23059082]
[89.85907745 147.23059082]
[89.85907745 132.23059082]
[89.85907745 117.23059845]
[84.67440033 105.34974670]
[88.35948944 95.52322388]
[76.23281097 104.36863708]
[63.37182617 112.10766602]
[49.87718201 118.67974854]
[35.85450363 124.03343964]
[21.41353035 128.12684631]
[6.66729212 130.92793274]
[-8.26880360 132.41476440]
[-23.27785873 132.57571411]
[-38.24240494 131.40951538]
[-53.04531860 128.92530823]
[-67.57074738 125.14252472]
[-81.70501709 120.09077454]
[-95.33748627 113.80958557]
[-108.36148071 106.34813690]
[-120.67505646 97.76480865]
[-132.18183899 88.12678528]
[-142.79177856 77.50949097]
[-152.42182922 65.99603271]
[-160.99662781 53.67652130]
[-168.44906616 40.64736557]
[-174.72080994 27.01054573]
[-179.76277161 12.87278748]
[-183.53549194 -1.65526056]
[-186.00944519 -16.45989418]
[-187.16528320 -31.42524338]
[-186.99394226 -46.43418121]
[-185.49676514 -61.36924362]
[-182.68547058 -76.11354065]
[-178.58206177 -90.55167389]
[-173.21865845 -104.57064056]
[-166.63723755 -118.06072998]
[-158.88929749 -130.91635132]
[-150.03549194 -143.03691101]
[-140.14509583 -154.32751465]
[-129.29554749 -164.69981384]
[-117.57172394 -174.07263184]
[-105.06540680 -182.37261963]
[-91.87447357 -189.53480530]
[-78.10215759 -195.50312805]
[-63.85625076 -200.23089600]
[-49.24824524 -203.68109131]
[-34.39247513 -205.82670593]
[-19.40520668 -206.65097046]
[-4.40373850 -206.14741516]
[10.49452114 -204.31999207]
[25.17296982 -201.18299866]
[39.51672745 -196.76097107]
[53.41353226 -191.08854675]
[66.75462341 -184.21011353]
[79.43558502 -176.17948914]
[91.35716248 -167.05953979]
[102.42606354 -156.92163086]
[112.55564880 -145.84512329]
[121.66664886 -133.91668701]
[129.68774414 -121.22970581]
[136.55616760 -107.88345337]
[142.21815491 -93.98239136]
[146.62939453 -79.63531494]
[149.75537109 -64.95452118]
[151.57160950 -50.05488968]
[152.06388855 -35.05304718]
[151.22837830 -20.06640244]
[149.07159424 -5.21224689]
[145.61042786 9.39316177]
[140.87196350 23.63551521]
[134.89329529 37.40334320]
[127.72121429 50.58889771]
[119.41184235 63.08897781]
[110.03022003 74.80574799]
[99.64977264 85.64751434]
[113.58048248 91.20944977]
[128.51649475 89.82542419]
[143.45251465 88.44139862]
[158.38851929 87.05737305]
[173.29296875 85.36698151]
[188.15957642 83.37091827]
[203.02616882 81.37486267]
[210.45733643 67.88101196]
[224.24800110 61.42572021]
[239.02070618 64.29473877]
[249.15007019 75.18206024]
[264.01666260 73.18600464]
[278.88327026 71.18994904]
[293.74987793 69.19388580]
[308.61648560 67.19783020]
[321.26354980 56.75833130]
[336.53128052 62.74401093]
[338.71353149 78.99731445]
[325.56536865 88.79823303]
[310.61251831 82.06443024]
[295.74594116 84.06048584]
[280.87933350 86.05654144]
[266.01272583 88.05260468]
[251.14613342 90.04866028]
[244.24728394 103.22226715]
[230.75454712 109.88632965]
[215.74954224 107.29727936]
[205.02223206 96.24146271]
[190.15562439 98.23751831]
[175.28903198 100.23357391]
[171.69929504 103.46824646]
[166.02130127 104.44200134]
[159.77255249 101.99338531]
[144.83653259 103.37741089]
[129.90052795 104.76143646]
[114.96450806 106.14546204]
[104.85907745 117.23059845]
[104.85907745 132.23059082]
[104.85907745 147.23059082]
[104.85907745 162.23059082]
[104.85907745 177.23059082]
[104.85907745 192.23059082]
[104.85907745 207.23059082]
[104.85907745 222.23059082]
[104.85907745 237.23059082]
[104.85907745 252.23059082]
[104.85907745 267.23059082]
[119.46908569 270.97204590]
[132.68925476 278.23001099]
[143.68852234 288.54827881]
[151.77548218 301.27822876]
[156.44178772 315.61965942]
[157.39410400 330.67105103]
[154.57257080 345.48623657]
[148.15454102 359.13394165]
[138.54347229 370.75622559]
[126.34352112 379.62255859]
[112.32157898 385.17556763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 94]
[95 130]
[96 129]
[97 128]
[98 127]
[99 124]
[100 123]
[101 122]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
