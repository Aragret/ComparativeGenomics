%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCGGACUGGGGGGGGGGCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAxxxxxxxxxxCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUCCCCCCCCCCUCCACGGACU\
) } def
/len { sequence length } bind def

/coor [
[87.78775024 457.42980957]
[74.56755066 450.15734863]
[63.68074417 439.71032715]
[55.86961365 426.80108643]
[51.66673279 412.30978394]
[51.35866165 397.22442627]
[54.96640396 382.57360840]
[62.24397659 369.35623169]
[72.69518280 358.47344971]
[85.60744476 350.66732788]
[100.10037994 346.47003174]
[99.78832245 331.47326660]
[99.47627258 316.47653198]
[99.16421509 301.47976685]
[98.85215759 286.48300171]
[98.54010010 271.48626709]
[98.22804260 256.48950195]
[97.91598511 241.49275208]
[97.60393524 226.49600220]
[97.13588715 211.50329590]
[96.51190948 196.51628113]
[95.88793182 181.52926636]
[95.26395416 166.54225159]
[94.63998413 151.55523682]
[85.75311279 149.83671570]
[77.30069733 146.59843445]
[69.54050446 141.93913269]
[62.70915985 136.00091553]
[57.01499939 128.96484375]
[52.63166046 121.04549408]
[49.69281387 112.48436737]
[48.28807831 103.54252625]
[48.46029282 94.49266052]
[50.20420074 85.61074066]
[36.54795837 79.40533447]
[22.89171982 73.19992828]
[9.23547745 66.99452209]
[-0.47706819 78.55172729]
[-12.94819355 87.05899048]
[-27.25245857 91.88502502]
[-42.32838821 92.67169952]
[-57.05725479 89.36064148]
[-70.34607697 82.19755554]
[-81.20872498 71.71398163]
[-88.83913422 58.68787384]
[-92.67107391 44.08585739]
[-92.42017365 28.99149895]
[-88.10507202 14.52490139]
[-80.04597473 1.75958002]
[-68.84090424 -8.35719299]
[-55.32136917 -15.07468510]
[-40.49060059 -17.89441490]
[-25.44914055 -16.60713959]
[-11.31316757 -11.30838203]
[0.86833769 -2.39134693]
[10.19142532 9.48226261]
[15.96426105 23.43134689]
[17.75846100 38.42079163]
[15.44088459 53.33827972]
[29.09712601 59.54368591]
[42.75336838 65.74909210]
[56.40960693 71.95449829]
[63.60674286 63.09196091]
[72.56948853 56.02001190]
[82.86302185 51.08173752]
[93.98794556 48.51672363]
[105.40454865 48.44940948]
[109.11071014 33.91447449]
[112.81687164 19.37953949]
[99.52090454 12.27456760]
[88.31208801 2.19359636]
[79.84210205 -10.27727890]
[74.60337067 -24.41301918]
[72.90047455 -39.39178848]
[74.83240509 -54.34274292]
[80.28685760 -68.39665222]
[88.94670868 -80.73645020]
[100.30847931 -90.64469910]
[113.71163177 -97.54535675]
[128.37690735 -101.03723145]
[143.45169067 -100.91730499]
[158.05953979 -97.19254303]
[171.35121155 -90.07951355]
[182.55390930 -79.99175262]
[191.01632690 -67.51573944]
[196.24649048 -53.37682724]
[197.94030762 -38.39702988]
[195.99931335 -23.44724655]
[190.53634644 -9.39664555]
[181.86901855 2.93789315]
[170.50123596 12.83925438]
[157.09390259 19.73178673]
[142.42651367 23.21476746]
[127.35180664 23.08570099]
[123.64564514 37.62063599]
[119.93948364 52.15557098]
[126.67718506 55.55902863]
[132.84910583 59.90500641]
[138.32434082 65.10133362]
[142.98678589 71.03781128]
[146.73754883 77.58853149]
[149.49707031 84.61455536]
[151.20684814 91.96688843]
[166.20603943 91.81085205]
[181.20523071 91.65481567]
[196.20442200 91.49877930]
[202.17318726 88.41960907]
[207.92475891 88.80776215]
[211.82768250 91.66130829]
[226.82037354 92.12934875]
[241.81307983 92.59738922]
[254.44313049 82.70490265]
[270.01815796 86.55164337]
[276.59036255 101.18672180]
[269.11810303 115.38336945]
[253.33343506 118.25112152]
[241.34503174 107.59008789]
[226.35234070 107.12204742]
[211.35963440 106.65400696]
[196.36045837 106.49797058]
[181.36126709 106.65400696]
[166.36207581 106.81004333]
[151.36288452 106.96607971]
[137.59222412 135.68608093]
[109.62699890 150.93125916]
[110.25097656 165.91827393]
[110.87495422 180.90528870]
[111.49893188 195.89230347]
[112.12290955 210.87931824]
[115.62551880 219.38717651]
[112.60068512 226.18394470]
[112.91274261 241.18069458]
[113.22480011 256.17745972]
[113.53685760 271.17419434]
[113.84890747 286.17095947]
[114.16096497 301.16772461]
[114.47302246 316.16445923]
[114.78507996 331.16122437]
[115.09713745 346.15795898]
[129.75212097 349.74874878]
[142.97793579 357.01098633]
[153.87280273 367.44958496]
[161.69390869 380.35281372]
[165.90797424 394.84088135]
[166.22769165 409.92596436]
[162.63127136 424.57955933]
[155.36390686 437.80258179]
[144.92109680 448.69342041]
[132.01487732 456.50952148]
[117.52518463 460.71801758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[34 62]
[35 61]
[36 60]
[37 59]
[67 96]
[68 95]
[69 94]
[103 123]
[104 122]
[105 121]
[106 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
