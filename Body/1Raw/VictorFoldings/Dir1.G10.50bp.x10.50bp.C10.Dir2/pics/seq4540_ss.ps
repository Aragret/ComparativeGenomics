%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUAUGAGGGGGGGGGGGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACxxxxxxxxxxCUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUCCCCCCCCCCGGCCUAUGAG\
) } def
/len { sequence length } bind def

/coor [
[73.35594940 421.57000732]
[60.48267746 413.66714478]
[50.35838318 402.45663452]
[43.80379868 388.84729004]
[41.35027695 373.94238281]
[43.19671631 358.95013428]
[49.19342804 345.08593750]
[58.85429001 333.47366333]
[71.39613342 325.05471802]
[85.80226135 320.51156616]
[85.49020386 305.51480103]
[85.17814636 290.51803589]
[84.86608887 275.52130127]
[84.55403137 260.52453613]
[84.24198151 245.52778625]
[83.92992401 230.53103638]
[83.61786652 215.53428650]
[83.30580902 200.53752136]
[82.99375153 185.54077148]
[82.52571106 170.54808044]
[81.90173340 155.56106567]
[73.64169312 143.16667175]
[80.79823303 129.05657959]
[70.35842133 118.28577423]
[55.39817047 117.19445801]
[66.69842529 127.05875397]
[72.23974609 140.99768066]
[70.79644775 155.92808533]
[62.68777084 168.54750061]
[49.70728683 176.06460571]
[34.72615433 176.81671143]
[21.05806351 170.63745117]
[11.72626686 158.89361572]
[8.79487514 144.18284607]
[12.91228485 129.75901794]
[23.16776085 118.81254578]
[37.29486084 113.76448822]
[22.97226143 109.30767059]
[8.64966488 104.85085297]
[-5.67293262 100.39403534]
[-19.99552917 95.93722534]
[-34.31812668 91.48040771]
[-49.13212585 97.63874054]
[-63.11317444 89.77045441]
[-65.53620911 73.91143799]
[-54.54248810 62.22736359]
[-38.56544876 63.68125534]
[-29.86131096 77.15780640]
[-15.53871441 81.61462402]
[-1.21611691 86.07144165]
[13.10648060 90.52825928]
[27.42907715 94.98506927]
[41.75167465 99.44188690]
[56.48948288 102.23421478]
[71.44972992 103.32552338]
[82.80891418 80.78971100]
[105.12988281 77.76904297]
[113.11979675 65.07411194]
[101.27316284 55.85262299]
[90.40357208 45.49739838]
[80.61906433 34.11135864]
[72.01686859 21.80766678]
[64.68248749 8.70860004]
[58.68882370 -5.05564976]
[54.09543991 -19.34828377]
[50.94798279 -34.02725220]
[49.27774048 -48.94666672]
[49.10131454 -63.95824432]
[50.42045593 -78.91279602]
[53.22204971 -93.66168213]
[57.47826004 -108.05831909]
[63.14677811 -121.95963287]
[70.17127228 -135.22746277]
[78.48192596 -147.72991943]
[87.99613953 -159.34277344]
[98.61935425 -169.95059204]
[110.24599457 -179.44796753]
[122.76049805 -187.74047852]
[136.03849792 -194.74572754]
[149.94801331 -200.39407349]
[164.35081482 -204.62940979]
[179.10374451 -207.40960693]
[194.06018066 -208.70706177]
[209.07148743 -208.50886536]
[223.98846436 -206.81698608]
[238.66285706 -203.64825439]
[252.94882202 -199.03414917]
[266.70437622 -193.02052307]
[279.79278564 -185.66716003]
[292.08398438 -177.04713440]
[303.45581055 -167.24612427]
[313.79528809 -156.36152649]
[322.99957275 -144.50152588]
[330.97723389 -131.78399658]
[337.64898682 -118.33535004]
[342.94851685 -104.28922272]
[346.82315063 -89.78522491]
[349.23437500 -74.96751404]
[350.15823364 -59.98335266]
[349.58554077 -44.98166656]
[347.52197266 -30.11154938]
[343.98806763 -15.52079582]
[339.01892090 -1.35441589]
[332.66397095 12.24679375]
[324.98629761 25.14765358]
[316.06225586 37.21994781]
[305.98056030 48.34368896]
[294.84136963 58.40832901]
[282.75540161 67.31382751]
[269.84277344 74.97168732]
[256.23184204 81.30579376]
[242.05784607 86.25318909]
[227.46168518 89.76470947]
[212.58842468 91.80545044]
[197.58587646 92.35513306]
[182.60314941 91.40829468]
[167.78915405 88.97434235]
[153.29110718 85.07746887]
[139.25312805 79.75640106]
[125.81472778 73.06402588]
[117.82481384 85.75895691]
[123.54271698 95.33331299]
[124.18647003 107.02636719]
[119.09471893 118.19000244]
[108.96236420 126.05956268]
[95.78524780 128.43260193]
[104.08992004 141.89897156]
[96.88874817 154.93708801]
[97.51272583 169.92410278]
[101.01534271 178.43194580]
[97.99050903 185.22871399]
[98.30255890 200.22547913]
[98.61461639 215.22222900]
[98.92667389 230.21897888]
[99.23873138 245.21572876]
[99.55078888 260.21249390]
[99.86284637 275.20922852]
[100.17489624 290.20599365]
[100.48695374 305.20275879]
[100.79901123 320.19949341]
[115.38165283 324.13946533]
[128.26286316 332.02938843]
[138.39840698 343.22973633]
[144.96665955 356.83245850]
[147.43515015 371.73492432]
[145.60377502 386.72903442]
[139.62100220 400.59924316]
[129.97181702 412.22119141]
[117.43842316 420.65274048]
[103.03687286 425.21038818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[23 126]
[24 55]
[25 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[57 121]
[58 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
