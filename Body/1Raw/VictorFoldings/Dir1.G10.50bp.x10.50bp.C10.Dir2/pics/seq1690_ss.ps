%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCACCCUCGGGGGGGGGGCUCAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUxxxxxxxxxxUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCCCCCCCCCCCAUCACCCUC\
) } def
/len { sequence length } bind def

/coor [
[87.34619141 600.66796875]
[73.32424927 595.11492920]
[61.12429047 586.24859619]
[51.51321793 574.62628174]
[45.09519196 560.97857666]
[42.27365494 546.16339111]
[43.22597122 531.11206055]
[47.89227676 516.77062988]
[55.97924423 504.04064941]
[66.97851562 493.72238159]
[80.19867706 486.46441650]
[94.80868530 482.72296143]
[94.80868530 467.72296143]
[94.80868530 452.72296143]
[94.80868530 437.72296143]
[94.80868530 422.72296143]
[94.80868530 407.72296143]
[94.80868530 392.72296143]
[94.80868530 377.72296143]
[94.80868530 362.72296143]
[94.80868530 347.72296143]
[81.32562256 341.34548950]
[71.90988922 329.69845581]
[68.47070312 315.05831909]
[71.74234009 300.31665039]
[81.12818909 288.40899658]
[94.80868530 281.73025513]
[94.80868530 266.73025513]
[79.83137512 262.48217773]
[66.63859558 254.18951416]
[56.29748154 242.51342773]
[49.64720154 228.38912964]
[47.23086166 212.95100403]
[49.25116730 197.44145203]
[55.55343246 183.11097717]
[65.63742065 171.11727905]
[78.69699860 162.43182373]
[93.68460846 157.76107788]
[93.37663269 142.76425171]
[93.06865692 127.76741028]
[79.06636810 119.51551819]
[71.81535339 104.96971130]
[73.65412140 88.82113647]
[83.98965454 76.27783203]
[79.14983368 62.08007812]
[74.31002045 47.88232803]
[69.47020721 33.68457413]
[54.70296097 36.46112442]
[39.69087601 37.10773087]
[24.73958015 35.61122894]
[10.15346146 32.00208664]
[-3.77052498 26.35377884]
[-16.74890518 18.78130150]
[-28.51745415 9.43881798]
[-38.83658218 -1.48347008]
[-47.49620438 -13.76319790]
[-54.32001877 -27.15036774]
[-59.16910553 -41.37243271]
[-61.94474030 -56.13985062]
[-62.59041977 -71.15196991]
[-61.09299088 -86.10317230]
[-57.48294449 -100.68907166]
[-51.83377838 -114.61270905]
[-44.26049805 -127.59062195]
[-34.91728592 -139.35859680]
[-23.99435806 -149.67704773]
[-11.71409416 -158.33590698]
[1.67349684 -165.15888977]
[15.89586163 -170.00709534]
[30.66345024 -172.78181458]
[45.67561340 -173.42655945]
[60.62672424 -171.92820740]
[75.21239471 -168.31726074]
[89.13568115 -162.66723633]
[102.11312866 -155.09315491]
[113.88051605 -145.74920654]
[124.19829559 -134.82565308]
[132.85639954 -122.54484558]
[139.67855835 -109.15683746]
[144.52587891 -94.93416595]
[147.29968262 -80.16640472]
[147.94351196 -65.15420532]
[146.44422913 -50.20318604]
[142.83238220 -35.61774063]
[137.18148804 -21.69480133]
[129.60659790 -8.71782780]
[120.26193237 3.04898715]
[109.33773041 13.36608696]
[97.05639648 22.02342796]
[83.66795349 28.84475899]
[88.50777435 43.04251099]
[93.34758759 57.24026489]
[98.18740845 71.43801880]
[110.06401062 73.20843506]
[120.16896057 79.69519043]
[133.15934753 72.19519043]
[146.14971924 64.69519043]
[159.14010620 57.19519043]
[172.13049316 49.69519043]
[177.65490723 34.63330460]
[192.92010498 29.69843483]
[206.21595764 38.67618942]
[207.34300232 54.67960739]
[195.43667603 65.43222809]
[179.63049316 62.68556976]
[166.64010620 70.18556976]
[153.64971924 77.68556976]
[140.65934753 85.18556976]
[127.66896057 92.68556976]
[127.68621826 107.24885559]
[120.53443146 119.93512726]
[108.06549072 127.45942688]
[108.37347412 142.45626831]
[108.68144989 157.45310974]
[122.71658325 161.03558350]
[135.32975769 168.13311768]
[145.65902710 178.25346375]
[153.00044250 190.69805908]
[156.85594177 204.61021423]
[156.96720886 219.03413391]
[153.33290100 232.98057556]
[146.20838928 245.49467468]
[136.08776855 255.72131348]
[123.66958618 262.96359253]
[109.80868530 266.73025513]
[109.80868530 281.73025513]
[123.48918915 288.40899658]
[132.87503052 300.31665039]
[136.14668274 315.05831909]
[132.70748901 329.69845581]
[123.29175568 341.34548950]
[109.80868530 347.72296143]
[109.80868530 362.72296143]
[109.80868530 377.72296143]
[109.80868530 392.72296143]
[109.80868530 407.72296143]
[109.80868530 422.72296143]
[109.80868530 437.72296143]
[109.80868530 452.72296143]
[109.80868530 467.72296143]
[109.80868530 482.72296143]
[124.41870117 486.46441650]
[137.63885498 493.72238159]
[148.63813782 504.04064941]
[156.72509766 516.77062988]
[161.39140320 531.11206055]
[162.34371948 546.16339111]
[159.52218628 560.97857666]
[153.10415649 574.62628174]
[143.49308777 586.24859619]
[131.29313660 595.11492920]
[117.27118683 600.66796875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 126]
[28 125]
[38 114]
[39 113]
[40 112]
[44 93]
[45 92]
[46 91]
[47 90]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
