%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACGGGGGGGGGGGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUxxxxxxxxxxCGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCCCCCCCCCCCUACGGG\
) } def
/len { sequence length } bind def

/coor [
[72.23462677 356.31002808]
[62.60124207 344.64584351]
[57.04566193 330.57492065]
[56.11216736 315.47579956]
[59.89221573 300.82769775]
[68.01547241 288.06573486]
[79.68610382 278.44015503]
[93.76074219 272.89401245]
[92.82511139 257.92321777]
[91.88948822 242.95243835]
[90.95385742 227.98164368]
[90.01822662 213.01084900]
[89.08259583 198.04005432]
[88.14697266 183.06927490]
[87.21134186 168.09848022]
[86.27571106 153.12768555]
[85.34008789 138.15689087]
[72.56272888 130.29946899]
[58.78034592 136.21943665]
[48.14666367 151.21624756]
[30.82923126 148.55044556]
[17.17298889 154.75585938]
[7.80996418 167.50906372]
[-6.97802210 165.73008728]
[-20.63426399 171.93550110]
[-29.72659683 185.58326721]
[-46.07251740 184.26307678]
[-52.85674286 169.33302307]
[-43.10024643 156.15187073]
[-26.83967018 158.27925110]
[-13.18342972 152.07385254]
[-4.79718971 139.76449585]
[10.96758270 141.09960938]
[24.62382317 134.89421082]
[29.19046974 123.64907074]
[40.57071686 118.38513947]
[52.86038208 122.43704987]
[66.64276886 116.51708984]
[64.70944977 98.34334564]
[71.55757904 82.42124176]
[84.58657837 72.47920227]
[80.57883453 58.02450943]
[76.57109833 43.56982040]
[72.56335449 29.11513329]
[59.10448074 37.38607788]
[45.27973557 31.88720322]
[41.66213226 18.40461159]
[29.76975441 9.26287746]
[17.87737465 0.12114284]
[5.98499489 -9.02059174]
[-5.90738487 -18.16232491]
[-22.22661209 -19.77936935]
[-28.73837852 -34.83024979]
[-18.74393463 -47.83190918]
[-2.52470994 -45.40935516]
[3.23434925 -30.05470467]
[15.12672901 -20.91297150]
[27.01910782 -11.77123642]
[38.91148758 -2.62950277]
[50.80386734 6.51223135]
[60.63876724 4.30350876]
[70.66765594 8.92621136]
[71.91452789 -6.02187586]
[73.16139984 -20.96996307]
[64.17249298 -8.96165276]
[51.82324600 -0.44719136]
[37.40340424 3.68417573]
[22.41897202 3.00097132]
[8.43491173 -2.42545128]
[-3.08828878 -12.02835941]
[-10.94715309 -24.80483246]
[-14.32090664 -39.42050171]
[-12.85719681 -54.34891510]
[-6.70889235 -68.03096008]
[3.48188210 -79.03768921]
[16.65080833 -86.21957397]
[31.42252922 -88.82653046]
[46.25429916 -86.58629608]
[59.59709167 -79.73284149]
[70.05739594 -68.98193359]
[76.54274750 -55.45639801]
[78.37570190 -40.56581497]
[84.72283173 -54.15676498]
[91.06996155 -67.74771881]
[92.29379272 -84.65743256]
[108.88146210 -88.16250610]
[116.84147644 -73.19338226]
[104.66091156 -61.40058517]
[98.31378174 -47.80963516]
[91.96665192 -34.21868515]
[88.10948944 -19.72308922]
[86.86261749 -4.77500153]
[85.61573792 10.17308521]
[87.01804352 25.10739326]
[91.02578735 39.56208038]
[95.03352356 54.01676941]
[99.04126740 68.47145844]
[113.25575256 71.37740326]
[124.66584015 80.33876038]
[130.85760498 93.45965576]
[145.85031128 93.92770386]
[160.84300232 94.39574432]
[175.83569336 94.86378479]
[190.82839966 95.33182526]
[205.82109070 95.79987335]
[211.16232300 81.63124084]
[220.81660461 69.96619415]
[233.73674011 62.07006073]
[248.52124023 58.79935837]
[263.56637573 60.50886917]
[277.24017334 67.01315308]
[288.05941772 77.60668182]
[294.85049438 91.14033508]
[296.87677002 106.14610291]
[293.91845703 120.99625397]
[286.29644775 134.07997131]
[274.83749390 143.97801208]
[260.78460693 149.61672974]
[245.66212463 150.38446045]
[231.11044312 146.19793701]
[218.70799255 137.51129150]
[209.80010986 125.26676178]
[205.35304260 110.79256439]
[190.36035156 110.32452393]
[175.36766052 109.85648346]
[160.37495422 109.38844299]
[145.38226318 108.92039490]
[130.38957214 108.45235443]
[125.53754425 121.58280945]
[115.00794220 131.98326111]
[100.31087494 137.22126770]
[101.24650574 152.19206238]
[102.18213654 167.16284180]
[103.11775970 182.13363647]
[104.05339050 197.10443115]
[104.98902130 212.07522583]
[105.92464447 227.04602051]
[106.86027527 242.01679993]
[107.79590607 256.98760986]
[108.73153687 271.95840454]
[123.38719177 275.70898438]
[136.16546631 283.80657959]
[145.81446838 295.45782471]
[151.38890076 309.52130127]
[152.34262085 324.61914062]
[148.58221436 339.27230835]
[140.47607422 352.04513550]
[128.81834412 361.68634033]
[114.75115204 367.25134277]
[99.65264893 368.19494629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 140]
[9 139]
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 38]
[19 37]
[21 34]
[22 33]
[24 31]
[25 30]
[41 97]
[42 96]
[43 95]
[44 94]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[62 93]
[63 92]
[64 91]
[82 90]
[83 89]
[84 88]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
