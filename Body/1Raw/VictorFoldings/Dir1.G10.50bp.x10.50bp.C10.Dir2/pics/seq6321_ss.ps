%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCACAUCGGGGGGGGGGUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUxxxxxxxxxxUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCCCCCCCCCCCGCCCACAUC\
) } def
/len { sequence length } bind def

/coor [
[77.84394073 393.73583984]
[63.99800491 387.71978760]
[52.28934097 378.19036865]
[43.58681870 365.85470581]
[38.53621674 351.62820435]
[37.51232529 336.56649780]
[40.59112167 321.78735352]
[47.54414368 308.38742065]
[57.85543060 297.36108398]
[70.75981140 289.52658081]
[85.29969788 285.46527100]
[85.29969788 270.46527100]
[85.29969788 255.46527100]
[85.29969788 240.46527100]
[85.29969788 225.46527100]
[85.29969788 210.46527100]
[85.29969788 195.46527100]
[85.29969788 180.46527100]
[85.29969788 165.46527100]
[85.29969788 150.46527100]
[79.16851044 146.14570618]
[70.52919006 158.40792847]
[58.26711273 149.76841736]
[66.90614319 137.50659180]
[60.77495956 133.18704224]
[46.65015793 138.23579407]
[32.52535629 143.28454590]
[22.33001900 156.12928772]
[6.15040922 153.45491028]
[0.63072264 138.01258850]
[11.44913864 125.68806458]
[27.47659874 129.15974426]
[41.60140228 124.11099243]
[55.72620392 119.06223297]
[55.18054962 111.58210754]
[40.22028351 112.67317200]
[39.12946701 97.71289062]
[54.08923721 96.62186432]
[53.54358292 89.14173889]
[38.83562088 86.19625092]
[23.48165321 91.95712280]
[10.98919773 81.33306885]
[14.20942497 65.25319672]
[29.82963943 60.25910950]
[41.78110504 71.48828888]
[56.48906708 74.43377686]
[76.04647064 65.55384827]
[94.15396118 67.06896973]
[106.31983185 75.87837219]
[114.30974579 63.18344116]
[122.29965973 50.48851013]
[110.29128265 41.48563766]
[99.05668640 31.53392410]
[88.67063904 20.69959259]
[79.20225525 9.05474567]
[70.71453857 -3.32311988]
[63.26399231 -16.35163116]
[56.90018463 -29.94408417]
[51.66547394 -44.01002121]
[47.59469223 -58.45583344]
[44.71493530 -73.18538666]
[43.04536057 -88.10066223]
[42.59708786 -103.10238647]
[43.37309265 -118.09073639]
[45.36821365 -132.96595764]
[48.56917572 -147.62907410]
[52.95467377 -161.98246765]
[58.49552155 -175.93064880]
[65.15485382 -189.38078308]
[72.88833618 -202.24337769]
[81.64451599 -214.43280029]
[91.36512756 -225.86795044]
[101.98545837 -236.47271729]
[113.43485260 -246.17654419]
[125.63710785 -254.91484070]
[138.51101685 -262.62945557]
[151.97090149 -269.26904297]
[165.92718506 -274.78942871]
[180.28701782 -279.15390015]
[194.95478821 -282.33334351]
[209.83293152 -284.30664062]
[224.82240295 -285.06066895]
[239.82345581 -284.59039307]
[254.73626709 -282.89895630]
[269.46157837 -279.99758911]
[283.90139771 -275.90563965]
[297.95965576 -270.65029907]
[311.54275513 -264.26657104]
[324.56033325 -256.79693604]
[336.92575073 -248.29107666]
[348.55667114 -238.80561829]
[359.37576294 -228.40370178]
[369.31100464 -217.15451050]
[378.29626465 -205.13294983]
[386.27172852 -192.41900635]
[393.18435669 -179.09727478]
[398.98812866 -165.25642395]
[403.64440918 -150.98857117]
[407.12225342 -136.38865662]
[409.39846802 -121.55384064]
[410.45794678 -106.58286285]
[410.29357910 -91.57534027]
[408.90652466 -76.63114166]
[406.30599976 -61.84973907]
[402.50927734 -47.32948685]
[397.54162598 -33.16702271]
[391.43615723 -19.45659256]
[384.23345947 -6.28944159]
[375.98144531 6.24680519]
[366.73510742 18.06871986]
[356.55590820 29.09762573]
[345.51162720 39.26013184]
[333.67572021 48.48860168]
[321.12701416 56.72162247]
[307.94900513 63.90440369]
[294.22933960 69.98914337]
[280.05938721 74.93535614]
[265.53341675 78.71011353]
[250.74807739 81.28829956]
[235.80181885 82.65276337]
[220.79405212 82.79441071]
[205.82469177 81.71231079]
[190.99334717 79.41365814]
[176.39869690 75.91374969]
[162.13790894 71.23588562]
[148.30584717 65.41119385]
[134.99459839 58.47842789]
[127.00467682 71.17335510]
[119.01476288 83.86828613]
[134.25862122 115.73880768]
[100.29969788 150.46527100]
[100.29969788 165.46527100]
[100.29969788 180.46527100]
[100.29969788 195.46527100]
[100.29969788 210.46527100]
[100.29969788 225.46527100]
[100.29969788 240.46527100]
[100.29969788 255.46527100]
[100.29969788 270.46527100]
[100.29969788 285.46527100]
[114.83958435 289.52658081]
[127.74396515 297.36108398]
[138.05525208 308.38742065]
[145.00827026 321.78735352]
[148.08706665 336.56649780]
[147.06318665 351.62820435]
[142.01257324 365.85470581]
[133.31005859 378.19036865]
[121.60139465 387.71978760]
[107.75545502 393.73583984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 34]
[26 33]
[27 32]
[39 46]
[40 45]
[49 129]
[50 128]
[51 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
