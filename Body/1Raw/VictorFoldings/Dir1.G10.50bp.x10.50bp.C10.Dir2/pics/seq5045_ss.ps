%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACAUCCGGCCUGGGGGGGGGGGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAxxxxxxxxxxAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAACCCCCCCCCCUGACCUCCGGCCU\
) } def
/len { sequence length } bind def

/coor [
[98.51043701 465.35705566]
[85.06777954 458.58358765]
[73.26399994 449.24249268]
[63.58245087 437.71633911]
[56.41958618 424.47708130]
[52.06872559 410.06683350]
[50.70803070 395.07571411]
[52.39322281 380.11761475]
[57.05529022 365.80502319]
[64.50333405 352.72406006]
[74.43234253 341.41036987]
[86.43575287 332.32723999]
[100.02201843 325.84664917]
[114.63478851 322.23391724]
[114.03464508 307.24594116]
[113.43450165 292.25793457]
[112.83435822 277.26995850]
[112.23420715 262.28195190]
[111.63406372 247.29397583]
[111.03392029 232.30598450]
[110.43377686 217.31799316]
[108.93552399 202.39300537]
[106.54454803 187.58479309]
[104.15357208 172.77658081]
[101.76259613 157.96836853]
[99.37162018 143.16014099]
[87.41264343 141.28863525]
[76.44352722 136.17022705]
[67.32686615 128.20742798]
[60.77958679 118.02642822]
[57.31656265 106.42784882]
[57.21012115 94.32378387]
[60.46863556 82.66609192]
[66.83585358 72.37152100]
[75.81107330 64.24963379]
[69.69174957 50.55459976]
[63.57242203 36.85956955]
[57.45309830 23.16453743]
[43.18887711 27.84812927]
[28.51868248 31.04021263]
[13.59802532 32.70695114]
[-1.41492617 32.83067703]
[-16.36102676 31.41007614]
[-31.08183861 28.46021080]
[-45.42131424 24.01235008]
[-59.22744751 18.11364174]
[-72.35388184 10.82661819]
[-84.66147614 2.22852468]
[-96.01975250 -7.58949375]
[-106.30831909 -18.52336121]
[-115.41810608 -30.45717239]
[-123.25254059 -43.26441956]
[-129.72857666 -56.80934525]
[-134.77757263 -70.94835663]
[-138.34599304 -85.53158569]
[-140.39601135 -100.40442657]
[-140.90591431 -115.40922546]
[-139.87026978 -130.38691711]
[-137.30007935 -145.17875671]
[-133.22257996 -159.62789917]
[-127.68098450 -173.58120728]
[-120.73405457 -186.89076233]
[-112.45542145 -199.41546631]
[-102.93284607 -211.02256775]
[-92.26727295 -221.58900452]
[-80.57176208 -231.00276184]
[-67.97029114 -239.16407776]
[-54.59645081 -245.98641968]
[-40.59200287 -251.39747620]
[-26.10540199 -255.33985901]
[-11.29022026 -257.77182007]
[3.69649768 -258.66754150]
[18.69588280 -258.01754761]
[33.54893112 -255.82873535]
[48.09819794 -252.12428284]
[62.18944550 -246.94348145]
[75.67330170 -240.34123230]
[88.40683746 -232.38754272]
[100.25505829 -223.16671753]
[111.09236908 -212.77650452]
[120.80389404 -201.32702637]
[129.28668213 -188.93968201]
[136.45080566 -175.74577332]
[142.22033691 -161.88516235]
[146.53408813 -147.50477600]
[149.34635925 -132.75704956]
[150.62733459 -117.79833984]
[150.36341858 -102.78720093]
[148.55741882 -87.88275909]
[145.22848511 -73.24301147]
[140.41189575 -59.02314758]
[134.15870667 -45.37390518]
[126.53521729 -32.43997955]
[117.62223816 -20.35847282]
[107.51425171 -9.25745487]
[96.31840515 0.74539447]
[84.15337372 9.54404068]
[71.14813232 17.04521370]
[77.26745605 30.74024391]
[83.38677979 44.43527603]
[89.50610352 58.13030624]
[116.81719971 60.24607086]
[137.35542297 78.37212372]
[151.44509888 73.22615051]
[165.53477478 68.08018494]
[179.62446594 62.93421555]
[193.71414185 57.78824615]
[206.51773071 46.67500305]
[220.74105835 55.90177917]
[215.81227112 72.12347412]
[198.86010742 71.87792206]
[184.77043152 77.02389526]
[170.68075562 82.16986084]
[156.59107971 87.31582642]
[142.50138855 92.46179962]
[143.16470337 100.03943634]
[142.48754883 107.61584473]
[140.49096680 114.95575714]
[137.23695374 121.83121490]
[132.82656860 128.02871704]
[127.39677429 133.35580444]
[121.11618042 137.64704895]
[114.17983246 140.76916504]
[116.57080841 155.57739258]
[118.96178436 170.38560486]
[121.35276031 185.19381714]
[123.74373627 200.00202942]
[133.66114807 188.74836731]
[148.61856079 187.61892700]
[160.11343384 197.25573730]
[161.61146545 212.18074036]
[152.26112366 223.90982056]
[137.37760925 225.77554321]
[125.42176819 216.71784973]
[126.02191162 231.70584106]
[126.62205505 246.69383240]
[127.22219849 261.68182373]
[127.82234192 276.66979980]
[128.42248535 291.65780640]
[129.02262878 306.64578247]
[129.62277222 321.63378906]
[144.47761536 324.06655884]
[158.53854370 329.44012451]
[171.22976685 337.53445435]
[182.03158569 348.01803589]
[190.50166321 360.46160889]
[196.29316711 374.35562134]
[199.16894531 389.13110352]
[199.01121521 404.18301392]
[195.82646179 418.89498901]
[189.74508667 432.66458130]
[181.01609802 444.92791748]
[169.99697876 455.18286133]
[157.13893127 463.00946045]
[142.96849060 468.08721924]
[128.06593323 470.20819092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 127]
[23 126]
[24 125]
[25 124]
[26 123]
[35 101]
[36 100]
[37 99]
[38 98]
[103 115]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
