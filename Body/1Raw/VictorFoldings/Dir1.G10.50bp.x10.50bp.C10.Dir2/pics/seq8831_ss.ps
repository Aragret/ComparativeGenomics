%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUxxxxxxxxxxCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCCCCCCCCCCCAACAGG\
) } def
/len { sequence length } bind def

/coor [
[86.75009155 422.46325684]
[71.86675262 420.10046387]
[57.92972565 414.36843872]
[45.69062042 405.57632446]
[35.80947876 394.19830322]
[28.81917191 380.84793091]
[25.09668350 366.24520874]
[24.84276199 351.17761230]
[28.07109833 336.45773315]
[34.60759354 322.87942505]
[44.09974670 311.17489624]
[56.03565216 301.97537231]
[69.77162170 295.77700806]
[84.56689453 292.91403198]
[85.18272400 277.92669678]
[85.79854584 262.93933105]
[86.41437531 247.95198059]
[87.03019714 232.96463013]
[87.64602661 217.97727966]
[88.26184845 202.98992920]
[88.87767792 188.00257874]
[89.49349976 173.01521301]
[90.10932159 158.02786255]
[90.72515106 143.04051208]
[91.34097290 128.05316162]
[81.46667480 122.77003479]
[74.28894043 114.17391205]
[70.85211182 103.51551819]
[71.65623474 92.34562683]
[76.58432007 82.28942871]
[84.91934204 74.81008148]
[95.44856262 70.99581146]
[96.98585510 56.07479477]
[98.52314758 41.15377808]
[100.06044006 26.23276329]
[101.59773254 11.31174660]
[103.13502502 -3.60926986]
[104.67231750 -18.53028679]
[106.20960999 -33.45130157]
[107.74690247 -48.37231827]
[109.28419495 -63.29333496]
[110.82148743 -78.21435547]
[96.07263947 -80.99610138]
[81.60829926 -85.00225830]
[67.52991486 -90.20471954]
[53.93623352 -96.56698608]
[40.92261887 -104.04444122]
[28.58034706 -112.58463287]
[16.99599266 -122.12765503]
[6.25081158 -132.60656738]
[-3.57982373 -143.94787598]
[-12.42695808 -156.07200623]
[-20.22853279 -168.89395142]
[-26.92982674 -182.32373047]
[-32.48383331 -196.26718140]
[-36.85159302 -210.62646484]
[-40.00247192 -225.30088806]
[-41.91436768 -240.18750000]
[-42.57386780 -255.18188477]
[-41.97634506 -270.17886353]
[-40.12599564 -285.07324219]
[-37.03579330 -299.76055908]
[-32.72742081 -314.13778687]
[-27.23109055 -328.10406494]
[-20.58536148 -341.56143188]
[-12.83684635 -354.41549683]
[-4.03989840 -366.57611084]
[5.74377823 -377.95794678]
[16.44555664 -388.48117065]
[27.99036980 -398.07199097]
[40.29723740 -406.66311646]
[53.27983856 -414.19430542]
[66.84710693 -420.61270142]
[80.90386963 -425.87332153]
[95.35153198 -429.93920898]
[110.08875275 -432.78189087]
[125.01216125 -434.38140869]
[140.01707458 -434.72656250]
[154.99824524 -433.81491089]
[169.85058594 -431.65286255]
[184.46990967 -428.25555420]
[198.75369263 -423.64685059]
[212.60173035 -417.85906982]
[225.91688538 -410.93280029]
[238.60575867 -402.91662598]
[250.57936096 -393.86679077]
[261.75366211 -383.84677124]
[272.05035400 -372.92681885]
[281.39712524 -361.18356323]
[289.72848511 -348.69937134]
[296.98596191 -335.56179810]
[303.11865234 -321.86303711]
[308.08355713 -307.69912720]
[311.84579468 -293.16943359]
[314.37905884 -278.37585449]
[315.66549683 -263.42221069]
[315.69613647 -248.41337585]
[314.47076416 -233.45458984]
[311.99795532 -218.65081787]
[308.29504395 -204.10588074]
[303.38806152 -189.92181396]
[297.31134033 -176.19810486]
[290.10757446 -163.03100586]
[281.82727051 -150.51290894]
[272.52850342 -138.73158264]
[262.27651978 -127.76967621]
[251.14321899 -117.70410156]
[239.20668030 -108.60543823]
[226.55064392 -100.53752136]
[213.26388550 -93.55693817]
[199.43959045 -87.71265411]
[185.17474365 -83.04565430]
[170.56941223 -79.58869171]
[155.72602844 -77.36600494]
[140.74870300 -76.39318848]
[125.74250031 -76.67706299]
[124.20520782 -61.75604248]
[122.66791534 -46.83502579]
[121.13062286 -31.91401100]
[119.59333038 -16.99299431]
[118.05603790 -2.07197738]
[116.51874542 12.84903908]
[114.98145294 27.77005577]
[113.44416046 42.69107056]
[111.90686798 57.61208725]
[110.36957550 72.53310394]
[124.73376465 84.18230438]
[129.28334045 102.10812378]
[122.21300507 119.19741821]
[106.32833099 128.66899109]
[105.71250153 143.65634155]
[105.09667969 158.64369202]
[104.48085022 173.63104248]
[103.86502838 188.61839294]
[103.24919891 203.60575867]
[102.63337708 218.59310913]
[102.01755524 233.58045959]
[101.40172577 248.56781006]
[100.78590393 263.55517578]
[100.17007446 278.54251099]
[99.55425262 293.52987671]
[114.06476593 297.59701538]
[127.24591827 304.90139771]
[138.38685608 315.04910278]
[146.88674927 327.49291992]
[152.28723145 341.56173706]
[154.29705811 356.49682617]
[152.80783081 371.49279785]
[147.89987183 385.74090576]
[139.83786011 398.47277832]
[129.05656433 409.00180054]
[116.13740540 416.76016235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[39 119]
[40 118]
[41 117]
[42 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
