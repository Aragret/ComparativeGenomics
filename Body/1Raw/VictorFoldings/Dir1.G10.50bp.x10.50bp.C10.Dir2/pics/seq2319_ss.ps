%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACACCCAGGGGGGGGGGUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACxxxxxxxxxxGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCACCCCCCCCCCUUAGCACCCA\
) } def
/len { sequence length } bind def

/coor [
[90.79795074 421.28161621]
[76.95201111 415.26559448]
[65.24334717 405.73617554]
[56.54082108 393.40051270]
[51.49021912 379.17398071]
[50.46633148 364.11230469]
[53.54512787 349.33312988]
[60.49814987 335.93319702]
[70.80943298 324.90689087]
[83.71381378 317.07235718]
[98.25370026 313.01104736]
[98.25370026 298.01104736]
[98.25370026 283.01104736]
[98.25370026 268.01104736]
[98.25370026 253.01106262]
[98.25370026 238.01106262]
[98.25370026 223.01106262]
[98.25370026 208.01106262]
[98.25370026 193.01106262]
[98.25370026 178.01106262]
[98.25370026 163.01106262]
[97.47385406 148.03134155]
[95.91627502 133.11242676]
[94.35869598 118.19351959]
[80.88555908 112.21069336]
[73.91751862 96.50584412]
[59.20955658 99.45132446]
[44.50159454 102.39680481]
[38.96767807 116.79747772]
[26.51315880 125.90178680]
[11.11223412 126.80459595]
[-2.32071900 119.21781158]
[-9.49929333 105.56234741]
[-8.13283253 90.19561768]
[1.34263062 78.02109528]
[15.90351105 72.92361450]
[30.90348434 76.52976227]
[41.55611420 87.68884277]
[56.26407623 84.74336243]
[70.97203827 81.79788208]
[55.98631668 82.45228577]
[42.53340530 75.81758881]
[33.93051147 63.52978134]
[32.29893875 48.61877823]
[38.04099655 34.76133347]
[49.74080658 25.37440872]
[64.51344299 22.77262878]
[78.71627045 27.59753799]
[88.84716034 38.65941238]
[92.40803528 53.23062134]
[88.52146912 67.71714020]
[94.58448792 53.99708176]
[100.64749908 40.27703094]
[106.71051025 26.55697632]
[97.86972046 7.05167055]
[111.54011536 -13.49226856]
[108.74778748 -28.23007393]
[105.95545959 -42.96788025]
[90.90096283 -43.64522552]
[76.40863037 -47.77669907]
[63.26002502 -55.13949585]
[52.16422272 -65.33654785]
[43.71961212 -77.81794739]
[38.38160324 -91.91058350]
[36.43806458 -106.85445404]
[37.99380875 -121.84366608]
[42.96493530 -136.06985474]
[51.08335876 -148.76583862]
[61.91126633 -159.24691772]
[74.86471558 -166.94789124]
[89.24515533 -171.45341492]
[104.27705383 -172.52053833]
[119.14975739 -170.09172058]
[133.06121826 -164.29791260]
[145.26118469 -155.45159912]
[155.09175110 -144.02983093]
[162.02276611 -130.64859009]
[165.68041992 -116.02947998]
[165.86749268 -100.96091461]
[162.57386780 -86.25550842]
[155.97720337 -72.70632172]
[146.43321228 -61.04402924]
[134.45660400 -51.89757156]
[120.69326782 -45.76020432]
[123.48559570 -31.02239990]
[126.27791595 -16.28459358]
[139.86886597 -9.93746376]
[152.96202087 -17.25656891]
[166.05517578 -24.57567406]
[179.14833069 -31.89478111]
[192.24148560 -39.21388626]
[205.33464050 -46.53299332]
[218.42779541 -53.85209656]
[216.27885437 -68.87696075]
[219.70643616 -83.66262817]
[228.24700928 -96.20947266]
[240.74551392 -104.82061768]
[255.51162720 -108.33149719]
[270.54837036 -106.26728058]
[283.82211304 -98.90713501]
[293.53775024 -87.24646759]
[298.38125610 -72.86228180]
[297.69763184 -57.69992447]
[291.57931519 -43.80997849]
[280.85375977 -33.07094193]
[266.97149658 -26.93518829]
[251.81001282 -26.23252106]
[237.41975403 -31.05797386]
[225.74690247 -40.75894165]
[212.65374756 -33.43983841]
[199.56059265 -26.12073135]
[186.46743774 -18.80162621]
[173.37428284 -11.48252010]
[160.28112793 -4.16341496]
[147.18797302 3.15569091]
[140.51185608 26.42829132]
[120.43056488 32.61998749]
[114.36755371 46.34004211]
[108.30453491 60.06009674]
[102.24152374 73.78015137]
[122.17530060 95.23358917]
[109.27761078 116.63593292]
[110.83518982 131.55485535]
[112.39276886 146.47375488]
[123.96475983 136.92970276]
[138.68415833 139.81748962]
[145.79228210 153.02636719]
[140.09365845 166.90173340]
[125.75352478 171.30180359]
[113.25370026 163.01106262]
[113.25370026 178.01106262]
[113.25370026 193.01106262]
[113.25370026 208.01106262]
[113.25370026 223.01106262]
[113.25370026 238.01106262]
[113.25370026 253.01106262]
[113.25370026 268.01104736]
[113.25370026 283.01104736]
[113.25370026 298.01104736]
[113.25370026 313.01104736]
[127.79358673 317.07235718]
[140.69796753 324.90689087]
[151.00926208 335.93319702]
[157.96228027 349.33312988]
[161.04107666 364.11230469]
[160.01718140 379.17398071]
[154.96658325 393.40051270]
[146.26405334 405.73617554]
[134.55538940 415.26559448]
[120.70945740 421.28161621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 124]
[23 123]
[24 122]
[26 40]
[27 39]
[28 38]
[51 120]
[52 119]
[53 118]
[54 117]
[56 86]
[57 85]
[58 84]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
