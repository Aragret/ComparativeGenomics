%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGACUUUCGGGGGGGGGGCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAxxxxxxxxxxUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACACCCCCCCCCCACAUGGCUUUC\
) } def
/len { sequence length } bind def

/coor [
[113.97570801 422.45956421]
[99.95376587 416.90655518]
[87.75380707 408.04022217]
[78.14273834 396.41790771]
[71.72470856 382.77020264]
[68.90317535 367.95501709]
[69.85549164 352.90365601]
[74.52179718 338.56222534]
[82.60876465 325.83227539]
[93.60803223 315.51400757]
[106.82819366 308.25601196]
[121.43820953 304.51458740]
[121.43820953 289.51458740]
[121.43820953 274.51458740]
[121.43820953 259.51458740]
[121.43820953 244.51458740]
[121.43820953 229.51458740]
[121.43820953 214.51458740]
[121.43820953 199.51458740]
[121.43820953 184.51458740]
[121.43820953 169.51458740]
[109.28487396 160.72274780]
[95.03818512 165.41654968]
[80.79148865 170.11035156]
[66.54479980 174.80415344]
[63.49182129 189.85655212]
[53.30964279 201.35519409]
[38.73722076 206.20700073]
[23.69445801 203.10685730]
[12.22778606 192.88868713]
[7.42168045 178.30113220]
[10.56896019 163.26815796]
[20.82302284 151.83357239]
[35.42557526 147.07321167]
[50.44860840 150.26760864]
[61.85099792 160.55744934]
[76.09768677 155.86366272]
[90.34438324 151.16986084]
[104.59107208 146.47605896]
[71.11923981 130.39286804]
[62.89124680 98.23771667]
[80.02326202 74.52348328]
[73.75385284 60.89650345]
[59.39149857 65.30174255]
[44.57011414 67.75328827]
[29.55421638 68.20740509]
[14.61177635 66.65598297]
[0.00946007 63.12670517]
[-13.99213696 57.68255997]
[-27.14313889 50.42070007]
[-39.20885086 41.47072983]
[-49.97394943 30.99236488]
[-59.24631500 19.17260551]
[-66.86047363 6.22239065]
[-72.68053436 -7.62716866]
[-76.60264587 -22.12891006]
[-78.55679321 -37.02403641]
[-78.50812531 -52.04671860]
[-76.45749664 -66.92887115]
[-72.44150543 -81.40489197]
[-66.53181458 -95.21644592]
[-58.83390808 -108.11705017]
[-49.48514938 -119.87648010]
[-38.65238190 -130.28486633]
[-26.52892685 -139.15647888]
[-13.33114529 -146.33296204]
[0.70543432 -151.68626404]
[15.33031273 -155.12084961]
[30.28249168 -156.57542419]
[45.29513550 -156.02401733]
[60.10031891 -153.47647095]
[74.43383026 -148.97827148]
[88.03987122 -142.60966492]
[100.67562866 -134.48432922]
[112.11559296 -124.74725342]
[122.15561676 -113.57221985]
[130.61651611 -101.15865326]
[137.34730530 -87.72808838]
[142.22784424 -73.52021790]
[145.17105103 -58.78858566]
[146.12440491 -43.79610062]
[145.07089233 -28.81032372]
[142.02929688 -14.09869099]
[137.05390930 0.07625151]
[130.23353577 13.46153450]
[121.68986511 25.81828308]
[111.57538605 36.92597198]
[100.07060242 46.58638000]
[87.38083649 54.62709808]
[93.65023804 68.25407410]
[122.90892792 67.77463531]
[146.26225281 93.60425568]
[158.59353638 85.06379700]
[170.92481995 76.52333832]
[168.99266052 61.34027863]
[174.34860229 47.00248337]
[185.76188660 36.80466843]
[200.60983276 33.09022141]
[215.48048401 36.71269226]
[226.95668030 46.83966827]
[232.40127563 61.14403915]
[230.56312561 76.33876801]
[221.86463928 88.93222046]
[208.30467224 96.03050232]
[192.99917603 96.00249481]
[179.46528625 88.85462189]
[167.13400269 97.39508057]
[154.80271912 105.93553925]
[156.48234558 113.24504852]
[171.10139465 109.88601685]
[174.46020508 124.50512695]
[159.84159851 127.86405182]
[161.52122498 135.17355347]
[176.34370422 137.47442627]
[191.16619873 139.77531433]
[205.98867798 142.07618713]
[221.07662964 135.65080261]
[234.02078247 145.71961975]
[231.50529480 161.92468262]
[216.11788940 167.59562683]
[203.68780518 156.89866638]
[188.86532593 154.59779358]
[174.04283142 152.29692078]
[159.22035217 149.99603271]
[153.52481079 154.87567139]
[168.25717163 157.69662476]
[175.23727417 170.97360229]
[169.20909119 184.70898438]
[154.71185303 188.55998230]
[142.66204834 179.62675476]
[142.13374329 164.63494873]
[136.43820190 169.51458740]
[136.43820190 184.51458740]
[136.43820190 199.51458740]
[136.43820190 214.51458740]
[136.43820190 229.51458740]
[136.43820190 244.51458740]
[136.43820190 259.51458740]
[136.43820190 274.51458740]
[136.43820190 289.51458740]
[136.43820190 304.51458740]
[151.04821777 308.25601196]
[164.26837158 315.51400757]
[175.26765442 325.83227539]
[183.35461426 338.56222534]
[188.02091980 352.90365601]
[188.97323608 367.95501709]
[186.15170288 382.77020264]
[179.73367310 396.41790771]
[170.12260437 408.04022217]
[157.92265320 416.90655518]
[143.90071106 422.45956421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 39]
[23 38]
[24 37]
[25 36]
[42 90]
[43 89]
[92 108]
[93 107]
[94 106]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
