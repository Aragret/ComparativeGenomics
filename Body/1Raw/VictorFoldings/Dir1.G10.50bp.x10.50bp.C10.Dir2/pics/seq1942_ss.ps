%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGACAACCGGGGGGGGGGUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCxxxxxxxxxxAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCCCCCCCCCCCAAACAACC\
) } def
/len { sequence length } bind def

/coor [
[77.59176636 457.75491333]
[64.37157440 450.48242188]
[53.48476791 440.03543091]
[45.67363739 427.12619019]
[41.47075653 412.63485718]
[41.16268158 397.54953003]
[44.77042389 382.89871216]
[52.04799652 369.68130493]
[62.49920654 358.79855347]
[75.41146851 350.99240112]
[89.90440369 346.79510498]
[89.59234619 331.79837036]
[89.28028870 316.80160522]
[88.96823120 301.80484009]
[88.65618134 286.80810547]
[88.34412384 271.81134033]
[88.03206635 256.81460571]
[87.72000885 241.81784058]
[87.40795135 226.82109070]
[87.09589386 211.82432556]
[86.78384399 196.82757568]
[86.47178650 181.83082581]
[75.24015045 166.13751221]
[85.05242920 148.57711792]
[84.11679840 133.60632324]
[82.39832306 148.50755310]
[71.13119507 158.40966797]
[56.13265610 158.20018005]
[45.14648819 147.98722839]
[43.84487534 133.04380798]
[52.89983749 121.08523560]
[67.63830566 118.28610229]
[52.63911438 118.44213867]
[37.63992691 118.59817505]
[22.64073753 118.75421143]
[8.80781078 127.56228638]
[-5.60969400 119.74771118]
[-5.78028536 103.34945679]
[8.47152710 95.23663330]
[22.48470116 103.75502777]
[37.48389053 103.59899139]
[52.48307800 103.44295502]
[67.48226929 103.28691864]
[69.20059204 90.79096985]
[75.45712280 80.07925415]
[85.16543579 72.69651794]
[96.75634003 69.63629913]
[93.05017853 55.10136032]
[82.14305115 43.64076614]
[86.49584198 29.39638138]
[82.78968048 14.86144543]
[79.08351898 0.32650891]
[75.37735748 -14.20842743]
[71.67119598 -28.74336433]
[67.96504211 -43.27830124]
[52.92108917 -42.66732025]
[38.07892227 -45.19789505]
[24.08737755 -50.75939560]
[11.55809879 -59.10869980]
[1.03881657 -69.88081360]
[-7.01061296 -82.60482025]
[-12.23830318 -96.72448730]
[-14.41572094 -111.62255859]
[-13.44768047 -126.64775085]
[-9.37649822 -141.14323425]
[-2.38015103 -154.47534180]
[7.23551226 -166.06121826]
[19.05013466 -175.39440918]
[32.54723358 -182.06689453]
[47.13677216 -185.78697205]
[62.18096161 -186.39202881]
[77.02213287 -183.85562134]
[91.01148987 -178.28862000]
[103.53748322 -169.93438721]
[114.05252838 -159.15814209]
[122.09694672 -146.43096924]
[127.31908417 -132.30923462]
[129.49064636 -117.41031647]
[128.51669312 -102.38549805]
[124.43980408 -87.89160919]
[117.43820953 -74.56227112]
[107.81799316 -62.98016739]
[95.99969482 -53.65163040]
[82.49997711 -46.98445892]
[86.20613861 -32.44952393]
[89.91230011 -17.91458893]
[93.61846161 -3.37965226]
[97.32462311 11.15528393]
[101.03077698 25.69021988]
[111.67281342 36.11117935]
[107.58511353 51.39519882]
[111.29127502 65.93013763]
[124.22933197 73.52004242]
[138.72492981 69.66288757]
[151.42240906 56.36801147]
[168.16964722 61.51874542]
[180.58781433 47.96259689]
[197.43856812 52.76380920]
[211.76116943 48.30699539]
[226.08377075 43.85017776]
[240.40637207 39.39336395]
[244.41502380 24.49590683]
[255.85682678 14.14754772]
[271.08074951 11.65041065]
[285.22888184 17.80132294]
[293.78662109 30.63755035]
[294.02322388 46.06309891]
[285.86315918 59.15573502]
[271.91030884 65.73764038]
[256.61697388 63.70856094]
[244.86317444 53.71596146]
[230.54058838 58.17277527]
[216.21798706 62.62959290]
[201.89538574 67.08641052]
[195.96417236 77.67546082]
[184.01707458 81.48149872]
[172.32754517 75.93096161]
[166.17732239 86.39433289]
[154.15362549 89.95100403]
[142.58209229 84.15848541]
[128.08648682 88.01564026]
[126.12969971 117.78841400]
[99.08759308 132.67070007]
[100.02321625 147.64149475]
[108.64136505 154.41001892]
[112.00749207 164.60671997]
[109.22896576 174.75062561]
[101.46853638 181.51876831]
[101.78059387 196.51551819]
[102.09265137 211.51226807]
[102.40470886 226.50903320]
[102.71676636 241.50578308]
[103.02881622 256.50253296]
[103.34087372 271.49929810]
[103.65293121 286.49603271]
[103.96498871 301.49279785]
[104.27704620 316.48956299]
[104.58910370 331.48629761]
[104.90115356 346.48306274]
[119.55615234 350.07382202]
[132.78195190 357.33609009]
[143.67681885 367.77468872]
[151.49792480 380.67788696]
[155.71199036 395.16595459]
[156.03172302 410.25103760]
[152.43528748 424.90466309]
[145.16792297 438.12765503]
[134.72512817 449.01849365]
[121.81889343 456.83462524]
[107.32920074 461.04309082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[24 124]
[25 123]
[32 43]
[33 42]
[34 41]
[35 40]
[47 92]
[48 91]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[93 121]
[94 120]
[96 117]
[98 114]
[99 113]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
