%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAACAGCUAGGGGGGGGGGAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAxxxxxxxxxxGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGCCCCCCCCCCGAUAACAGCUA\
) } def
/len { sequence length } bind def

/coor [
[102.19279480 389.47650146]
[88.17084503 383.92349243]
[75.97089386 375.05715942]
[66.35981750 363.43484497]
[59.94179535 349.78713989]
[57.12025833 334.97195435]
[58.07257462 319.92059326]
[62.73888016 305.57916260]
[70.82584381 292.84921265]
[81.82511902 282.53094482]
[95.04528046 275.27294922]
[109.65528870 271.53152466]
[109.65528870 256.53152466]
[109.65528870 241.53152466]
[109.65528870 226.53152466]
[109.65528870 211.53152466]
[109.65528870 196.53152466]
[109.65528870 181.53152466]
[109.65528870 166.53152466]
[109.65528870 151.53152466]
[109.65528870 136.53152466]
[75.44919586 119.21815491]
[78.44765472 88.20156097]
[68.11675262 77.32624817]
[57.78585052 66.45093536]
[59.53684616 81.34838867]
[54.28274155 95.39809418]
[43.18621063 105.49101257]
[28.70279884 109.39368439]
[14.03753567 106.24247742]
[2.43569016 96.73473358]
[-3.53537202 82.97441864]
[-2.55431700 68.00653076]
[5.16175795 55.14332199]
[17.90536690 47.23127747]
[32.85647964 46.02125168]
[46.70894623 51.78274536]
[39.07597733 38.87004852]
[30.79050255 26.36601067]
[21.87435150 14.30357933]
[7.81442308 20.74310875]
[-7.26829386 24.13227081]
[-22.72024345 24.32660294]
[-37.87236404 21.32002449]
[-52.06906128 15.24499798]
[-64.69657135 6.36670589]
[-75.20949554 -4.92853546]
[-83.15435028 -18.15007973]
[-88.18916321 -32.72426605]
[-90.09812164 -48.01930237]
[-88.80090332 -63.37266541]
[-84.35599518 -78.11978912]
[-76.95808411 -91.62283325]
[-66.92953491 -103.29826355]
[-76.09146881 -115.17508698]
[-85.25340271 -127.05191040]
[-94.41533661 -138.92874146]
[-103.57727051 -150.80555725]
[-118.94168854 -156.53851318]
[-121.39180756 -172.75360107]
[-108.40715790 -182.77012634]
[-93.34523010 -176.28395081]
[-91.70044708 -159.96749878]
[-82.53851318 -148.09066772]
[-73.37657928 -136.21385193]
[-64.21464539 -124.33702087]
[-55.05270767 -112.46019745]
[-41.98807526 -118.90954590]
[-27.90788078 -122.67411804]
[-13.35793877 -123.60596466]
[1.09732890 -121.66698456]
[14.89678955 -116.93045807]
[27.50438309 -109.57833862]
[38.42994308 -99.89418793]
[47.24825668 -88.25231171]
[53.61561584 -75.10323334]
[57.28319931 -60.95629120]
[58.10681534 -46.35990524]
[56.05255508 -31.88031769]
[51.19819641 -18.07961655]
[43.73024368 -5.49392509]
[33.93678284 5.38742876]
[42.85293579 17.44985962]
[47.96108246 3.34642673]
[62.10372543 -1.65213096]
[74.93971252 6.10915279]
[77.08330536 20.95519638]
[66.96711731 32.03050995]
[51.98867416 31.23707771]
[59.62164688 44.14977646]
[68.66116333 56.12003326]
[78.99206543 66.99534607]
[89.32296753 77.87065887]
[102.49241638 71.13179016]
[119.44385529 72.86676788]
[134.60359192 84.82212067]
[148.29421997 78.69294739]
[161.98484802 72.56377411]
[175.67546082 66.43459320]
[189.36608887 60.30542374]
[203.05671692 54.17625046]
[208.45527649 39.32259369]
[222.81091309 32.71263123]
[237.60665894 38.26793671]
[244.06446838 52.69264603]
[238.35304260 67.42883301]
[223.86087036 73.73377991]
[209.18589783 67.86687469]
[195.49526978 73.99604797]
[181.80464172 80.12522125]
[168.11401367 86.25439453]
[154.42338562 92.38356781]
[140.73275757 98.51274109]
[141.50242615 113.49298859]
[155.74911499 118.18678284]
[169.99580383 122.88058472]
[184.24250793 127.57438660]
[195.64489746 117.28453064]
[210.66792297 114.09014893]
[225.27047729 118.85050201]
[235.52453613 130.28509521]
[238.67181396 145.31805420]
[233.86570740 159.90562439]
[222.39904785 170.12379456]
[207.35627747 173.22393799]
[192.78385925 168.37213135]
[182.60166931 156.87348938]
[179.54870605 141.82107544]
[165.30200195 137.12727356]
[151.05531311 132.43347168]
[136.80862427 127.73967743]
[124.65528870 136.53152466]
[124.65528870 151.53152466]
[124.65528870 166.53152466]
[124.65528870 181.53152466]
[124.65528870 196.53152466]
[124.65528870 211.53152466]
[124.65528870 226.53152466]
[124.65528870 241.53152466]
[124.65528870 256.53152466]
[124.65528870 271.53152466]
[139.26530457 275.27294922]
[152.48545837 282.53094482]
[163.48474121 292.84921265]
[171.57170105 305.57916260]
[176.23800659 319.92059326]
[177.19032288 334.97195435]
[174.36878967 349.78713989]
[167.95075989 363.43484497]
[158.33969116 375.05715942]
[146.13973999 383.92349243]
[132.11778259 389.47650146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 93]
[24 92]
[25 91]
[37 90]
[38 89]
[39 83]
[40 82]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[114 131]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
