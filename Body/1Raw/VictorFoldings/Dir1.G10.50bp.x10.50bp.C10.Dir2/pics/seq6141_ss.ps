%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUCAAUCGGGGGGGGGGUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGxxxxxxxxxxCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGACCCCCCCCCCGGCUUCAUUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 388.62692261]
[71.19830322 382.61090088]
[59.48964310 373.08148193]
[50.78712082 360.74581909]
[45.73651886 346.51928711]
[44.71262741 331.45761108]
[47.79142761 316.67843628]
[54.74444962 303.27850342]
[65.05573273 292.25219727]
[77.96011353 284.41766357]
[92.50000000 280.35635376]
[92.50000000 265.35635376]
[92.50000000 250.35635376]
[92.50000000 235.35635376]
[92.50000000 220.35635376]
[92.50000000 205.35635376]
[92.50000000 190.35635376]
[92.50000000 175.35635376]
[92.50000000 160.35635376]
[92.50000000 145.35635376]
[92.50000000 130.35635376]
[77.09918976 121.29110718]
[69.17842865 105.27157593]
[54.21818161 104.18026733]
[39.25793457 103.08895874]
[24.29768372 101.99764252]
[9.33743572 100.90633392]
[-5.62281275 99.81502533]
[-20.58306122 98.72371674]
[-35.54331207 97.63240051]
[-50.50355911 96.54109192]
[-65.46380615 95.44978333]
[-80.42405701 94.35847473]
[-87.98469543 107.61740875]
[-100.55431366 116.27579498]
[-115.63719177 118.61448669]
[-130.23861694 114.16915131]
[-141.45947266 103.82240295]
[-147.07183838 89.62860107]
[-145.96139526 74.40592957]
[-138.34858704 61.17686844]
[-125.74497986 52.56805038]
[-110.65300751 50.28876877]
[-96.06919861 54.79157257]
[-84.88917542 65.18242645]
[-79.33274841 79.39822388]
[-64.37249756 80.48953247]
[-49.41224670 81.58084106]
[-34.45199966 82.67215729]
[-19.49175072 83.76346588]
[-4.53150225 84.85477448]
[10.42874622 85.94608307]
[25.38899422 87.03739929]
[40.34924316 88.12870789]
[55.30949402 89.22001648]
[70.26974487 90.31132507]
[72.76488495 84.63747406]
[76.33015442 79.56725311]
[80.82546997 75.29987335]
[86.07419586 72.00302124]
[91.87009430 69.80623627]
[91.55804443 54.80948257]
[83.53531647 41.17326355]
[91.00617218 28.28778076]
[90.69411469 13.29102612]
[76.15583801 9.15219593]
[63.48430634 0.91061473]
[53.80625916 -10.70088196]
[47.98226929 -24.64980888]
[46.53019714 -39.69583511]
[49.57915878 -54.50107574]
[56.85804749 -67.74906921]
[67.71962738 -78.26179504]
[81.19808960 -85.10449219]
[96.09494019 -87.66868591]
[111.08557129 -85.72639465]
[124.83701324 -79.45030975]
[136.12649536 -69.39850616]
[143.95018005 -56.46477509]
[147.61238098 -41.79917908]
[146.78746033 -26.70577049]
[141.54876709 -12.52665043]
[132.36212158 -0.52261215]
[120.04438782 8.23895168]
[105.69086456 12.97897053]
[106.00292206 27.97572327]
[114.00332642 40.53927612]
[106.55479431 54.49742508]
[106.86685181 69.49417877]
[120.07170868 76.02323914]
[128.82199097 87.87353516]
[143.63975525 85.54242706]
[158.45750427 83.21132660]
[173.27526855 80.88021851]
[188.09303284 78.54911804]
[202.41561890 74.09230042]
[215.93981934 67.60413361]
[229.46400452 61.11597061]
[242.98818970 54.62780380]
[256.51239014 48.13964081]
[265.31881714 34.30567551]
[281.68869019 35.28552246]
[288.78204346 50.07120132]
[279.30184937 63.45247269]
[263.00054932 61.66382980]
[249.47636414 68.15199280]
[235.95216370 74.64015961]
[222.42797852 81.12832642]
[208.90379333 87.61649323]
[211.69612122 102.35429382]
[226.65635681 103.44561005]
[237.42239380 92.10424042]
[252.96549988 90.38789368]
[265.94671631 99.10697937]
[270.23666382 114.14460754]
[263.80981445 128.40046692]
[249.70071411 135.14338684]
[234.57122803 131.18954468]
[225.56504822 118.40585327]
[210.60479736 117.31454468]
[201.23815918 113.43017578]
[194.57411194 107.35279083]
[190.98980713 100.26745605]
[190.42413330 93.36687469]
[175.60636902 95.69797516]
[160.78862000 98.02908325]
[145.97085571 100.36018372]
[131.15310669 102.69129181]
[123.76667023 120.32004547]
[107.50000000 130.35635376]
[107.50000000 145.35635376]
[107.50000000 160.35635376]
[107.50000000 175.35635376]
[107.50000000 190.35635376]
[107.50000000 205.35635376]
[107.50000000 220.35635376]
[107.50000000 235.35635376]
[107.50000000 250.35635376]
[107.50000000 265.35635376]
[107.50000000 280.35635376]
[122.03988647 284.41766357]
[134.94427490 292.25219727]
[145.25555420 303.27850342]
[152.20857239 316.67843628]
[155.28736877 331.45761108]
[154.26348877 346.51928711]
[149.21287537 360.74581909]
[140.51036072 373.08148193]
[128.80169678 382.61090088]
[114.95575714 388.62692261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[61 89]
[62 88]
[64 86]
[65 85]
[91 128]
[92 127]
[93 126]
[94 125]
[95 124]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
