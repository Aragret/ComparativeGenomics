%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUACUAAGGGGGGGGGGCAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAxxxxxxxxxxCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCCCCCCCCCCCUAAUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[83.15515137 415.73574829]
[69.93495941 408.46325684]
[59.04815292 398.01626587]
[51.23702240 385.10702515]
[47.03414154 370.61569214]
[46.72607040 355.53036499]
[50.33380890 340.87954712]
[57.61138153 327.66213989]
[68.06259155 316.77938843]
[80.97485352 308.97323608]
[95.46778870 304.77593994]
[95.15573120 289.77920532]
[94.84367371 274.78244019]
[94.53162384 259.78567505]
[94.21956635 244.78892517]
[93.90750885 229.79217529]
[93.59545135 214.79542542]
[93.28339386 199.79867554]
[92.97133636 184.80191040]
[92.65928650 169.80516052]
[89.35433197 163.14010620]
[92.50000000 154.49391174]
[92.50000000 139.49391174]
[70.55860138 127.37195587]
[60.06509018 104.60678101]
[45.10483932 103.51547241]
[30.14459229 102.42416382]
[15.18434334 101.33284760]
[0.22409426 100.24153900]
[-14.73615456 99.15023041]
[-29.69640350 98.05892181]
[-35.88078690 111.89832306]
[-46.42779541 122.78577423]
[-60.06381989 129.40653992]
[-75.14225006 130.96115112]
[-89.84228516 127.26186371]
[-102.38883209 118.75539398]
[-111.26683044 106.46894073]
[-115.40422058 91.88614655]
[-114.30138397 76.76796722]
[-108.09150696 62.93997574]
[-97.52445221 52.07198715]
[-83.87625122 45.47635651]
[-68.79498291 43.94953918]
[-54.10178757 47.67590714]
[-41.57093811 56.20548248]
[-32.71559906 68.50827789]
[-28.60509300 83.09867096]
[-13.64484406 84.18997955]
[1.31540477 85.28128815]
[16.27565384 86.37260437]
[31.23590279 87.46391296]
[46.19615173 88.55522156]
[61.15639877 89.64653015]
[64.83416748 80.52222443]
[70.61792755 72.56437683]
[78.16129303 66.24958801]
[87.01252747 61.95601273]
[96.64154053 59.94078827]
[98.19911957 45.02187729]
[99.75670624 30.10296631]
[85.31506348 25.89835739]
[71.85636139 19.18247604]
[59.81323624 10.17120552]
[49.57283020 -0.84577680]
[41.46433258 -13.51432037]
[35.74839020 -27.42718506]
[32.60875320 -42.13713074]
[32.14634323 -57.17128754]
[34.37602997 -72.04637909]
[39.22613144 -86.28422546]
[46.54074478 -99.42713928]
[56.08473206 -111.05263519]
[67.55129242 -120.78699493]
[80.57182312 -128.31730652]
[94.72776794 -133.40148926]
[109.56407166 -135.87612915]
[124.60381317 -135.66165161]
[139.36352539 -132.76496887]
[153.36872864 -127.27919769]
[166.16925049 -119.38066864]
[177.35356140 -109.32329559]
[186.56216431 -97.43038177]
[193.49903870 -84.08423615]
[197.94117737 -69.71388245]
[199.74578857 -54.78125763]
[198.85487366 -39.76639938]
[195.29705811 -25.15196228]
[189.18672180 -11.40774536]
[180.72027588 1.02443397]
[170.16989136 11.74493122]
[157.87471008 20.40912819]
[144.22996521 26.73850632]
[129.67430115 30.52960205]
[114.67561340 31.66054726]
[113.11803436 46.57946014]
[111.56045532 61.49837112]
[127.67673492 70.84493256]
[137.84854126 86.45349121]
[152.66629028 84.12239075]
[167.48405457 81.79128265]
[182.30180359 79.46018219]
[197.11956787 77.12907410]
[201.47508240 62.50060272]
[211.75267029 51.21636963]
[225.91171265 45.51687241]
[241.14091492 46.53374863]
[254.41651917 54.06509399]
[263.10263062 66.61556244]
[265.47463989 81.69323730]
[261.06155396 96.30444336]
[250.73959351 107.54811859]
[236.55821228 113.19181824]
[221.33312988 112.11497498]
[208.08729553 104.53141022]
[199.45066833 91.94683838]
[184.63291931 94.27793884]
[169.81515503 96.60903931]
[154.99739075 98.94014740]
[140.17964172 101.27124786]
[139.39390564 108.00875854]
[137.48654175 114.51824188]
[134.51185608 120.61435699]
[130.55455017 126.12354279]
[125.72728729 130.88893127]
[120.16751862 134.77485657]
[114.03353882 137.67066956]
[107.50000000 139.49391174]
[107.50000000 154.49391174]
[107.65603638 169.49310303]
[107.96809387 184.48985291]
[108.28015137 199.48661804]
[108.59220886 214.48336792]
[108.90425873 229.48011780]
[109.21631622 244.47686768]
[109.52837372 259.47363281]
[109.84043121 274.47036743]
[110.15248871 289.46713257]
[110.46454620 304.46389771]
[125.11953735 308.05465698]
[138.34533691 315.31692505]
[149.24021912 325.75552368]
[157.06130981 338.65872192]
[161.27537537 353.14678955]
[161.59510803 368.23187256]
[157.99867249 382.88549805]
[150.73130798 396.10848999]
[140.28851318 406.99932861]
[127.38227844 414.81542969]
[112.89258575 419.02392578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[59 97]
[60 96]
[61 95]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
