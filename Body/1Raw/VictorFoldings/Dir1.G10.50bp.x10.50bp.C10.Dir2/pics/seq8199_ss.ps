%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACAAUCCGGGGGGGGGGUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCxxxxxxxxxxUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCCCCCCCCCCCGCACAAUCC\
) } def
/len { sequence length } bind def

/coor [
[101.94763184 457.45144653]
[87.92568970 451.89843750]
[75.72573090 443.03210449]
[66.11466217 431.40982056]
[59.69663620 417.76211548]
[56.87509918 402.94692993]
[57.82741547 387.89553833]
[62.49371719 373.55410767]
[70.58068848 360.82415771]
[81.57996368 350.50588989]
[94.80011749 343.24792480]
[109.41013336 339.50646973]
[109.41013336 324.50646973]
[109.41013336 309.50646973]
[109.41013336 294.50646973]
[109.41013336 279.50646973]
[109.41013336 264.50646973]
[109.41013336 249.50648499]
[109.41013336 234.50648499]
[109.41013336 219.50648499]
[109.41013336 204.50648499]
[109.41013336 189.50648499]
[107.87284088 174.58546448]
[104.81444550 159.90055847]
[101.75605011 145.21566772]
[87.68965149 143.54302979]
[74.82968140 137.60313416]
[64.43643188 127.97807312]
[57.52845001 115.61113739]
[54.78273010 101.71429443]
[56.46835709 87.64944458]
[62.42013168 74.79496765]
[72.05477905 64.41060638]
[84.42808533 57.51405334]
[81.67184448 42.76945496]
[78.91560364 28.02486038]
[74.23603821 20.10668564]
[76.25739288 12.94942951]
[73.80446625 -1.84864998]
[71.35153961 -16.64672852]
[68.89861298 -31.44480896]
[53.91920471 -30.45277023]
[38.91469193 -30.93376541]
[24.02957535 -32.88316345]
[9.40721512 -36.28218842]
[-4.81156540 -41.09810638]
[-18.48982811 -47.28453445]
[-31.49584198 -54.78189468]
[-43.70434570 -63.51798248]
[-54.99776459 -73.40866089]
[-65.26733398 -84.35867310]
[-74.41414642 -96.26255798]
[-82.35012054 -109.00568390]
[-88.99880981 -122.46531677]
[-94.29619598 -136.51182556]
[-98.19125366 -151.00993347]
[-100.64647675 -165.82002258]
[-101.63822174 -180.79945374]
[-101.15692139 -195.80395508]
[-99.20722961 -210.68904114]
[-95.80790710 -225.31132507]
[-90.99170685 -239.53001404]
[-84.80500793 -253.20814514]
[-77.30738068 -266.21401978]
[-68.57105255 -278.42233276]
[-58.68015289 -289.71557617]
[-47.72993469 -299.98492432]
[-35.82586288 -309.13150024]
[-23.08258057 -317.06719971]
[-9.62281609 -323.71563721]
[4.42380142 -329.01272583]
[18.92199326 -332.90750122]
[33.73212814 -335.36242676]
[48.71157455 -336.35388184]
[63.71607208 -335.87228394]
[78.60110474 -333.92227173]
[93.22333527 -330.52267456]
[107.44191742 -325.70617676]
[121.11993408 -319.51919556]
[134.12565613 -312.02133179]
[146.33380127 -303.28475952]
[157.62683105 -293.39361572]
[167.89596558 -282.44320679]
[177.04229736 -270.53894043]
[184.97775269 -257.79550171]
[191.62591553 -244.33561707]
[196.92272949 -230.28887939]
[200.81721497 -215.79061890]
[203.27185059 -200.98043823]
[204.26298523 -186.00096130]
[203.78109741 -170.99647522]
[201.83079529 -156.11148071]
[198.43089294 -141.48931885]
[193.61412048 -127.27083588]
[187.42687988 -113.59294128]
[179.92874146 -100.58737946]
[171.19190979 -88.37939453]
[161.30056763 -77.08657074]
[150.34992981 -66.81765747]
[138.44549561 -57.67156219]
[125.70189667 -49.73635483]
[112.24186707 -43.08847046]
[98.19503784 -37.79192734]
[83.69669342 -33.89773560]
[86.14962006 -19.09965706]
[88.60254669 -4.30157804]
[91.05547333 10.49650097]
[93.66019440 25.26861763]
[96.41644287 40.01321411]
[99.17268372 54.75780869]
[114.67224884 57.19503403]
[128.40777588 64.77871704]
[138.72781372 76.59706879]
[144.39158630 91.22917175]
[144.71813965 106.91579437]
[139.66821289 121.77092743]
[129.84895325 134.00852966]
[116.44094849 142.15727234]
[119.49934387 156.84216309]
[122.55773926 171.52706909]
[129.30046082 158.12797546]
[141.76431274 149.78218079]
[156.72158813 148.65095520]
[170.29888916 155.02726746]
[178.98011780 167.25985718]
[180.51716614 182.18089294]
[174.51196289 195.92636108]
[162.51968384 204.93663025]
[147.64588928 206.87835693]
[133.74240112 201.24871826]
[124.41013336 189.50648499]
[124.41013336 204.50648499]
[124.41013336 219.50648499]
[124.41013336 234.50648499]
[124.41013336 249.50648499]
[124.41013336 264.50646973]
[124.41013336 279.50646973]
[124.41013336 294.50646973]
[124.41013336 309.50646973]
[124.41013336 324.50646973]
[124.41013336 339.50646973]
[139.02014160 343.24792480]
[152.24031067 350.50588989]
[163.23957825 360.82415771]
[171.32653809 373.55410767]
[175.99284363 387.89553833]
[176.94515991 402.94692993]
[174.12362671 417.76211548]
[167.70559692 431.40982056]
[158.09452820 443.03210449]
[145.89457703 451.89843750]
[131.87263489 457.45144653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 120]
[24 119]
[25 118]
[34 110]
[35 109]
[36 108]
[38 107]
[39 106]
[40 105]
[41 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
