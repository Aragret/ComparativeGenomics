%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUUAUAUAGGGGGGGGGGGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGxxxxxxxxxxAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCCCCCCCCCCCAUUUACAUA\
) } def
/len { sequence length } bind def

/coor [
[85.87864685 416.00335693]
[71.38895416 411.79486084]
[58.48272705 403.97875977]
[48.03992462 393.08792114]
[40.77256012 379.86489868]
[37.17613602 365.21130371]
[37.49585724 350.12622070]
[41.70992661 335.63815308]
[49.53102493 322.73492432]
[60.42589188 312.29632568]
[73.65170288 305.03408813]
[88.30669403 301.44329834]
[88.61875153 286.44656372]
[88.93080902 271.44979858]
[89.24285889 256.45306396]
[89.55491638 241.45629883]
[89.86697388 226.45954895]
[90.17903137 211.46278381]
[90.49108887 196.46603394]
[90.80314636 181.46928406]
[91.11519623 166.47253418]
[91.42725372 151.47576904]
[91.73931122 136.47901917]
[92.05136871 121.48226929]
[83.18305206 116.71240234]
[76.95836639 108.36262512]
[74.77795410 97.82613373]
[77.33491516 87.01968384]
[84.43267822 78.03500366]
[94.96992493 72.73464966]
[86.71763611 60.20868301]
[78.46534729 47.68272400]
[70.21305847 35.15676117]
[61.96076584 22.63079834]
[47.90742111 15.36346531]
[47.36662292 0.47868100]
[39.11433411 -12.04728127]
[30.73219109 -24.48672104]
[22.22109985 -36.83829498]
[13.71001053 -49.18986511]
[3.72728372 -60.38563156]
[-14.39357948 -63.48630905]
[-19.48060989 -80.25300598]
[-30.98241425 -89.88153076]
[-42.48421860 -99.51005554]
[-53.98602295 -109.13858032]
[-65.48782349 -118.76710510]
[-76.98963165 -128.39562988]
[-88.49143219 -138.02415466]
[-99.99323273 -147.65267944]
[-111.49504089 -157.28121948]
[-122.99684143 -166.90974426]
[-139.23468018 -169.20423889]
[-145.11471558 -184.51296997]
[-134.58807373 -197.08761597]
[-118.48365784 -193.99246216]
[-113.36831665 -178.41154480]
[-101.86650848 -168.78302002]
[-90.36470795 -159.15449524]
[-78.86290741 -149.52597046]
[-67.36109924 -139.89743042]
[-55.85929871 -130.26890564]
[-44.35749435 -120.64038086]
[-32.85569000 -111.01185608]
[-21.35388756 -101.38333130]
[-9.85208416 -91.75480652]
[2.26194859 -92.50148010]
[11.93043327 -84.51778412]
[13.59300709 -71.68463898]
[10.15528488 -86.28539276]
[13.27545166 -100.95729065]
[22.35705757 -112.89565277]
[35.66406250 -119.81833649]
[50.65270233 -120.40201569]
[64.45774841 -114.53510284]
[74.44023132 -103.33911896]
[78.69190216 -88.95429230]
[76.40001678 -74.13041687]
[68.00267792 -61.70122910]
[55.10512924 -54.04268646]
[40.17286301 -52.61879730]
[26.06158257 -57.70095825]
[34.57267380 -45.34938431]
[43.08376312 -32.99781036]
[49.51040649 -29.25029182]
[51.64029694 -20.29957008]
[59.89258575 -7.77360821]
[73.35566711 -1.40221584]
[74.48672485 14.37850857]
[82.73901367 26.90447044]
[90.99130249 39.43043137]
[99.24359894 51.95639420]
[107.49588776 64.48235321]
[121.21593475 70.54537201]
[136.03369141 68.21426392]
[150.85145569 65.88316345]
[165.66921997 63.55205917]
[180.37716675 60.60657501]
[194.94987488 57.05181503]
[209.52258301 53.49705124]
[224.09527588 49.94229126]
[231.74969482 44.83721924]
[239.00811768 46.46851349]
[253.65161133 43.21768951]
[268.29510498 39.96686172]
[282.93862915 36.71603775]
[297.09094238 27.38071442]
[309.97918701 38.39567947]
[302.96249390 53.82949066]
[286.18945312 51.35953903]
[271.54592896 54.61036301]
[256.90243530 57.86119080]
[242.25894165 61.11201477]
[227.65003967 64.51499176]
[213.07734680 68.06975555]
[198.50463867 71.62451935]
[183.93193054 75.17927551]
[182.35925293 77.57386017]
[179.71263123 79.46841431]
[176.18560791 80.43901062]
[172.12565613 80.14268494]
[168.00032043 78.36981964]
[153.18255615 80.70092010]
[138.36480713 83.03202057]
[123.54704285 85.36312866]
[126.08805084 101.26814270]
[119.46481323 114.89870453]
[107.04811859 121.79432678]
[106.73606873 136.79107666]
[106.42401123 151.78782654]
[106.11195374 166.78459167]
[105.79989624 181.78134155]
[105.48783875 196.77809143]
[105.17578125 211.77484131]
[104.86373138 226.77160645]
[104.55167389 241.76835632]
[104.23961639 256.76510620]
[103.92755890 271.76187134]
[103.61550140 286.75860596]
[103.30344391 301.75537109]
[117.79638672 305.95266724]
[130.70864868 313.75878906]
[141.15985107 324.64157104]
[148.43742371 337.85894775]
[152.04516602 352.50976562]
[151.73709106 367.59512329]
[147.53421021 382.08642578]
[139.72308350 394.99569702]
[128.83627319 405.44268799]
[115.61608124 412.71514893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[30 93]
[31 92]
[32 91]
[33 90]
[34 89]
[36 87]
[37 86]
[38 84]
[39 83]
[40 82]
[41 69]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[94 125]
[95 124]
[96 123]
[97 122]
[98 117]
[99 116]
[100 115]
[101 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
