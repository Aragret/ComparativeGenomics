%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCUUGUGGGGGGGGGGAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAxxxxxxxxxxGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGCCCCCCCCCCAAAACCUUUU\
) } def
/len { sequence length } bind def

/coor [
[54.91736603 408.15823364]
[41.07142639 402.14221191]
[29.36276436 392.61279297]
[20.66024017 380.27713013]
[15.60963821 366.05059814]
[14.58574677 350.98892212]
[17.66454506 336.20977783]
[24.61756706 322.80984497]
[34.92885208 311.78350830]
[47.83323288 303.94900513]
[62.37311935 299.88769531]
[62.37311935 284.88769531]
[62.37311935 269.88769531]
[62.37311935 254.88768005]
[62.37311935 239.88768005]
[62.37311935 224.88768005]
[62.37311935 209.88768005]
[62.37311935 194.88768005]
[62.37311935 179.88768005]
[62.37311935 164.88768005]
[54.58553696 177.70773315]
[44.00443268 188.33976746]
[31.22193336 196.18882751]
[16.95335388 200.81565857]
[1.99717128 201.96136475]
[-12.80965614 199.56181335]
[-26.63853073 193.75128174]
[-38.71557999 184.85493469]
[-48.36496735 173.37063599]
[-55.04670715 159.94102478]
[-58.38688278 145.31764221]
[-58.19857788 130.31883240]
[-54.49233246 115.78391266]
[-47.47554779 102.52628326]
[-37.54088593 91.28784180]
[-25.24429703 82.69750214]
[-11.27390671 77.23598480]
[3.58849549 75.20891571]
[18.51119995 76.72973633]
[32.65912628 81.71332550]
[45.24054337 89.88082123]
[55.55139160 100.77514648]
[63.01467133 113.78665924]
[67.21273041 128.18722534]
[67.91069794 143.17024231]
[75.09320831 130.00164795]
[82.27571869 116.83307648]
[76.94077301 108.11014557]
[75.64073181 97.96810150]
[78.60308075 88.18160248]
[85.30947113 80.46308899]
[80.40792084 66.28652954]
[75.50637054 52.10997391]
[70.60482025 37.93341446]
[55.62932968 39.57124710]
[40.66491699 37.83513641]
[26.46218681 32.81216812]
[13.73354340 24.75428772]
[3.11745167 14.06568050]
[-4.85359192 1.28248060]
[-9.77976227 -12.95411301]
[-11.41396427 -27.92999649]
[-9.67422771 -42.89398956]
[-4.64781761 -57.09550095]
[3.41314435 -69.82218933]
[14.10432339 -80.43569183]
[26.88945580 -88.40364075]
[41.12724304 -93.32636261]
[56.10352325 -94.95693207]
[71.06709290 -93.21356964]
[85.26738739 -88.18371582]
[97.99211884 -80.11967468]
[108.60303497 -69.42592621]
[116.56787872 -56.63886261]
[121.48715210 -42.39988327]
[123.11409760 -27.42320824]
[121.36711121 -12.46006107]
[116.33381653 1.73901331]
[108.26668549 14.46179485]
[97.57036591 25.07011414]
[84.78137207 33.03186417]
[89.68292236 47.20842361]
[94.58448029 61.38497925]
[99.48603058 75.56153870]
[111.02925873 78.18582916]
[119.98578644 85.92623138]
[134.30838013 81.46941376]
[148.63098145 77.01259613]
[152.85577393 59.40943527]
[165.90466309 47.04555893]
[183.46008301 43.82112122]
[199.81646729 50.64328003]
[211.70884705 41.50154495]
[223.60122681 32.35981369]
[235.49360657 23.21807861]
[241.25267029 7.86342812]
[257.47189331 5.44087553]
[267.46633911 18.44253540]
[260.95455933 33.49341202]
[244.63534546 35.11045837]
[232.74296570 44.25219345]
[220.85058594 53.39392471]
[208.95820618 62.53565979]
[209.62652588 64.19672394]
[210.19799805 65.89355469]
[225.17770386 65.11371613]
[240.15742493 64.33386993]
[255.13713074 63.55402374]
[264.40731812 50.96045685]
[279.61578369 47.32223129]
[293.58154297 54.35721207]
[299.71044922 68.74369049]
[295.10855103 83.68881226]
[281.94876099 92.13594818]
[266.44473267 90.09661865]
[255.91697693 78.53373718]
[240.93727112 79.31358337]
[225.95755005 80.09342957]
[210.97784424 80.87327576]
[204.89596558 94.44100952]
[193.14839172 103.69361115]
[178.36566162 106.45852661]
[163.90496826 102.02736664]
[153.08779907 91.33519745]
[138.76519775 95.79200745]
[124.44259644 100.24882507]
[115.49473572 118.90544128]
[95.44429779 124.01557922]
[88.26178741 137.18415833]
[81.07928467 150.35275269]
[77.37312317 164.88768005]
[77.37312317 179.88768005]
[77.37312317 194.88768005]
[77.37312317 209.88768005]
[77.37312317 224.88768005]
[77.37312317 239.88768005]
[77.37312317 254.88768005]
[77.37312317 269.88769531]
[77.37312317 284.88769531]
[77.37312317 299.88769531]
[91.91300964 303.94900513]
[104.81739044 311.78350830]
[115.12866974 322.80984497]
[122.08169556 336.20977783]
[125.16049194 350.98892212]
[124.13660431 366.05059814]
[119.08599854 380.27713013]
[110.38347626 392.61279297]
[98.67481232 402.14221191]
[84.82887268 408.15823364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[45 130]
[46 129]
[47 128]
[51 84]
[52 83]
[53 82]
[54 81]
[86 126]
[87 125]
[88 124]
[92 103]
[93 102]
[94 101]
[95 100]
[105 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
