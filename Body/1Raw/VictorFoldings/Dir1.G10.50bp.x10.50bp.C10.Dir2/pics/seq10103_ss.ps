%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACAACAGGGGGGGGGGCCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAxxxxxxxxxxACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUCCCCCCCCCCACUAACAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.20578003]
[71.19830322 351.18972778]
[59.48964310 341.66030884]
[50.78712082 329.32464600]
[45.73651886 315.09814453]
[44.71262741 300.03643799]
[47.79142761 285.25729370]
[54.74444962 271.85736084]
[65.05573273 260.83102417]
[77.96011353 252.99652100]
[92.50000000 248.93521118]
[92.50000000 233.93521118]
[92.50000000 218.93521118]
[92.50000000 203.93521118]
[92.50000000 188.93521118]
[92.50000000 173.93521118]
[92.50000000 158.93521118]
[92.50000000 143.93521118]
[92.50000000 128.93521118]
[92.50000000 113.93521118]
[82.66616821 93.61244202]
[104.45211792 79.35327148]
[101.65979004 64.61546326]
[98.86746979 49.87765884]
[95.16130829 35.34272003]
[90.55574036 21.06726074]
[85.95018005 6.79180002]
[81.34461212 -7.48366070]
[76.73905182 -21.75912094]
[73.28244781 -7.16282320]
[66.23072815 6.07625628]
[56.04669571 17.08922577]
[43.39873886 25.15329361]
[29.11695480 29.73921013]
[14.13866806 30.54599762]
[-0.55308485 27.52070427]
[-13.99407101 20.86188316]
[-25.30214691 11.00656033]
[-33.73515701 -1.39845383]
[-38.73963165 -15.53900623]
[-39.98712540 -30.48704147]
[-37.39576340 -45.26150894]
[-31.13561821 -58.89274216]
[-21.61754990 -70.48612213]
[-9.46623611 -79.28075409]
[4.52082062 -84.69944763]
[19.42564011 -86.38656616]
[34.27000427 -84.23138428]
[48.07966995 -78.37534332]
[59.94829178 -69.20278168]
[69.09692383 -57.31571198]
[74.92642975 -43.48960876]
[77.10326385 -58.33081436]
[79.28010559 -73.17201996]
[70.11655426 -85.76833344]
[72.53559113 -100.78841400]
[84.60072327 -109.44683838]
[86.77755737 -124.28804016]
[88.95439148 -139.12924194]
[91.13123322 -153.97045898]
[93.30806732 -168.81166077]
[79.01223755 -173.47398376]
[65.71005249 -180.48539734]
[53.78425217 -189.64416504]
[43.57795334 -200.68679810]
[35.38481903 -213.29554749]
[29.44058228 -227.10763550]
[25.91626740 -241.72569275]
[24.91327667 -256.72909546]
[26.46046829 -271.68615723]
[30.51332855 -286.16656494]
[36.95524597 -299.75369263]
[45.60087585 -312.05657959]
[56.20146561 -322.72128296]
[68.45201111 -331.44091797]
[82.00004578 -337.96463013]
[96.45576477 -342.10470581]
[111.40324402 -343.74203491]
[126.41242218 -342.82949829]
[141.05143738 -339.39337158]
[154.89912415 -333.53250122]
[167.55703735 -325.41552734]
[178.66098022 -315.27597046]
[187.89147949 -303.40560913]
[194.98297119 -290.14593506]
[199.73138428 -275.87847900]
[202.00012207 -261.01370239]
[201.72389221 -245.97937012]
[198.91065979 -231.20797729]
[193.64135742 -217.12457275]
[186.06758118 -204.13433838]
[176.40727234 -192.61105347]
[164.93835449 -182.88623047]
[151.99082947 -175.23970032]
[137.93721008 -169.89146423]
[123.18183899 -166.99539185]
[108.14927673 -166.63482666]
[105.97243500 -151.79360962]
[103.79560089 -136.95240784]
[101.61875916 -122.11120605]
[99.44192505 -107.26999664]
[108.51239777 -95.51150513]
[106.51619720 -80.42940521]
[94.12130737 -70.99518585]
[91.94447327 -56.15397644]
[89.76763916 -41.31277084]
[91.01451111 -26.36468506]
[95.62007141 -12.08922482]
[100.22563934 2.18623567]
[104.83120728 16.46169662]
[109.43676758 30.73715591]
[117.58418274 18.14272690]
[132.20932007 14.81024742]
[145.00869751 22.63174820]
[148.71542358 37.16654205]
[141.22497559 50.16243744]
[126.79010773 54.24096680]
[113.60527802 47.08533478]
[116.39759827 61.82313919]
[119.18992615 76.56094360]
[128.08227539 88.64093018]
[141.32485962 95.68606567]
[157.02632141 92.39308167]
[169.29826355 102.72647095]
[168.72671509 118.75933838]
[155.75010681 128.19264221]
[140.32298279 123.78996277]
[134.27972412 108.92864990]
[121.03713989 101.88352203]
[115.42000580 110.17280579]
[107.50000000 113.93521118]
[107.50000000 128.93521118]
[107.50000000 143.93521118]
[107.50000000 158.93521118]
[107.50000000 173.93521118]
[107.50000000 188.93521118]
[107.50000000 203.93521118]
[107.50000000 218.93521118]
[107.50000000 233.93521118]
[107.50000000 248.93521118]
[122.03988647 252.99652100]
[134.94427490 260.83102417]
[145.25555420 271.85736084]
[152.20857239 285.25729370]
[155.28736877 300.03643799]
[154.26348877 315.09814453]
[149.21287537 329.32464600]
[140.51036072 341.66030884]
[128.80169678 351.18972778]
[114.95575714 357.20578003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 120]
[23 119]
[24 118]
[25 111]
[26 110]
[27 109]
[28 108]
[29 107]
[52 106]
[53 105]
[54 104]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
