%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAGCAUAGGGGGGGGGGAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAxxxxxxxxxxGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUCAACAGACCCCCCCCCCAACAAAGCAUA\
) } def
/len { sequence length } bind def

/coor [
[105.63914490 368.73825073]
[91.61720276 363.18524170]
[79.41724396 354.31890869]
[69.80617523 342.69659424]
[63.38814926 329.04891968]
[60.56661224 314.23373413]
[61.51892853 299.18234253]
[66.18523407 284.84091187]
[74.27220154 272.11096191]
[85.27147675 261.79269409]
[98.49163055 254.53471375]
[113.10164642 250.79327393]
[113.10164642 235.79327393]
[113.10164642 220.79327393]
[113.10164642 205.79327393]
[113.10164642 190.79327393]
[113.10164642 175.79327393]
[113.10164642 160.79327393]
[113.10164642 145.79327393]
[113.10164642 130.79327393]
[113.10164642 115.79328156]
[97.71585083 118.58203125]
[86.36194611 110.02045441]
[71.58982849 112.62517548]
[56.81771469 115.22990417]
[42.04559708 117.83462524]
[27.27348137 120.43934631]
[23.63023376 135.22605896]
[14.28254032 147.24855042]
[0.84994578 154.42387390]
[-14.34027195 155.50886536]
[-28.65631485 150.31552124]
[-39.61784363 139.74363708]
[-45.32570648 125.62483978]
[-44.79098129 110.40531921]
[-38.10631180 96.72193146]
[-26.42985725 86.94541168]
[-11.78463650 82.76959991]
[3.29197907 84.91798401]
[16.18787384 93.01834106]
[24.66875839 105.66722870]
[39.44087601 103.06250763]
[54.21298981 100.45778656]
[68.98510742 97.85306549]
[83.75722504 95.24833679]
[89.17254639 85.84318542]
[99.63227844 81.28171539]
[111.29866028 83.95858765]
[119.45333099 93.46941376]
[127.34981537 80.71615601]
[135.24629211 67.96289825]
[143.14277649 55.20964050]
[131.06861877 46.29518890]
[119.76125336 36.42623901]
[109.29592133 25.66846275]
[99.74228668 14.09345627]
[91.16390991 1.77824914]
[83.61789703 -11.19520187]
[77.15444946 -24.74055862]
[71.81659698 -38.76767731]
[67.63984680 -53.18321228]
[64.65200806 -67.89122009]
[62.87295914 -82.79383087]
[62.31454086 -97.79186249]
[62.98046875 -112.78550720]
[64.86631012 -127.67498016]
[67.95951080 -142.36119080]
[72.23949432 -156.74641418]
[77.67777252 -170.73490906]
[84.23815918 -184.23358154]
[91.87698364 -197.15260315]
[100.54342651 -209.40599060]
[110.17980194 -220.91221619]
[120.72198486 -231.59468079]
[132.09980774 -241.38232422]
[144.23756409 -250.20999146]
[157.05447388 -258.01892090]
[170.46525574 -264.75717163]
[184.38063049 -270.37991333]
[198.70800781 -274.84967041]
[213.35205078 -278.13674927]
[228.21530151 -280.21923828]
[243.19882202 -281.08331299]
[258.20294189 -280.72320557]
[273.12774658 -279.14132690]
[287.87399292 -276.34817505]
[302.34347534 -272.36233521]
[316.43991089 -267.21038818]
[330.06954956 -260.92657471]
[343.14160156 -253.55270386]
[355.56915283 -245.13787842]
[367.26943970 -235.73808289]
[378.16461182 -225.41589355]
[388.18215942 -214.23995972]
[397.25546265 -202.28469849]
[405.32406616 -189.62965393]
[412.33432007 -176.35905457]
[418.23959351 -162.56118774]
[423.00051880 -148.32791138]
[426.58544922 -133.75392151]
[428.97055054 -118.93623352]
[430.13992310 -103.97343445]
[430.08578491 -88.96510315]
[428.80847168 -74.01113129]
[426.31655884 -59.21102905]
[422.62655640 -44.66328812]
[417.76306152 -30.46472740]
[411.75839233 -16.70983505]
[404.65258789 -3.49015021]
[396.49285889 9.10635281]
[387.33355713 20.99584389]
[377.23562622 32.09919739]
[366.26626587 42.34252548]
[354.49847412 51.65765762]
[342.01055908 59.98260117]
[328.88562012 67.26195526]
[315.21102905 73.44728088]
[301.07775879 78.49740601]
[286.57989502 82.37872314]
[271.81390381 85.06540680]
[256.87805176 86.53958130]
[241.87173462 86.79142761]
[226.89483643 85.81927490]
[212.04699707 83.62959290]
[197.42706299 80.23695374]
[183.13229370 75.66392517]
[169.25784302 69.94095612]
[155.89604187 63.10612488]
[147.99955750 75.85938263]
[140.10307312 88.61264038]
[132.20658875 101.36589050]
[128.10163879 115.79328156]
[128.10163879 130.79327393]
[128.10163879 145.79327393]
[128.10163879 160.79327393]
[128.10163879 175.79327393]
[128.10163879 190.79327393]
[128.10163879 205.79327393]
[128.10163879 220.79327393]
[128.10163879 235.79327393]
[128.10163879 250.79327393]
[142.71165466 254.53471375]
[155.93182373 261.79269409]
[166.93109131 272.11096191]
[175.01806641 284.84091187]
[179.68435669 299.18234253]
[180.63667297 314.23373413]
[177.81513977 329.04891968]
[171.39712524 342.69659424]
[161.78604126 354.31890869]
[149.58609009 363.18524170]
[135.56414795 368.73825073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[49 131]
[50 130]
[51 129]
[52 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
