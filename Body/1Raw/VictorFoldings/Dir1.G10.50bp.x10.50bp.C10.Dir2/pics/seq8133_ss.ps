%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCACCGGGGGGGGGGAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAAxxxxxxxxxxCUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCCCCCCCCCCCUCACUCACC\
) } def
/len { sequence length } bind def

/coor [
[85.28728485 333.17562866]
[71.44134521 327.15960693]
[59.73268509 317.63018799]
[51.03016281 305.29452515]
[45.97956085 291.06799316]
[44.95566940 276.00631714]
[48.03446960 261.22714233]
[54.98748779 247.82722473]
[65.29877472 236.80088806]
[78.20315552 228.96638489]
[92.74304199 224.90505981]
[92.74304199 209.90505981]
[92.74304199 194.90505981]
[92.74304199 179.90505981]
[92.74304199 164.90505981]
[92.74304199 149.90505981]
[92.74304199 134.90505981]
[92.74304199 119.90506744]
[92.74304199 104.90506744]
[90.71244812 102.53639221]
[89.52348328 99.35817719]
[89.48427582 95.69014740]
[90.77687073 91.96360016]
[93.41893005 88.67117310]
[94.66580963 73.72308350]
[95.91268158 58.77500153]
[97.15955353 43.82691193]
[82.31182098 41.66163635]
[67.62554169 38.58642578]
[53.15643692 34.61294556]
[38.95938492 29.75626564]
[25.08823967 24.03481102]
[11.59562588 17.47028542]
[-1.46727848 10.08759117]
[-14.05091953 1.91473210]
[-26.10756302 -7.01728821]
[-37.59147644 -16.67458725]
[-48.45909119 -27.02053070]
[-58.66918564 -38.01587677]
[-68.18302917 -49.61890793]
[-76.96453857 -61.78561783]
[-84.98039246 -74.46984863]
[-92.20018768 -87.62348938]
[-98.59653473 -101.19664001]
[-104.14517212 -115.13780975]
[-108.82505035 -129.39411926]
[-112.61842346 -143.91148376]
[-115.51089478 -158.63484192]
[-117.49149323 -173.50834656]
[-118.55270386 -188.47555542]
[-118.69050598 -203.47970581]
[-117.90437317 -218.46388245]
[-116.19728851 -233.37124634]
[-113.57572937 -248.14524841]
[-110.04963684 -262.72985840]
[-105.63239288 -277.06970215]
[-100.34075165 -291.11044312]
[-94.19477844 -304.79876709]
[-87.21778870 -318.08279419]
[-79.43626404 -330.91210938]
[-70.87969971 -343.23806763]
[-61.58057404 -355.01388550]
[-51.57415390 -366.19491577]
[-40.89839172 -376.73870850]
[-29.59379387 -386.60531616]
[-17.70323753 -395.75726318]
[-5.27183008 -404.15985107]
[7.65327311 -411.78125000]
[21.02304077 -418.59246826]
[34.78675842 -424.56771851]
[48.89221573 -429.68435669]
[63.28590012 -433.92291260]
[77.91321564 -437.26736450]
[92.71868134 -439.70495605]
[107.64611816 -441.22653198]
[122.63891602 -441.82623291]
[137.64019775 -441.50186157]
[152.59306335 -440.25457764]
[167.44076538 -438.08914185]
[182.12701416 -435.01379395]
[196.59608459 -431.04016113]
[210.79309082 -426.18334961]
[224.66418457 -420.46176147]
[238.15672302 -413.89709473]
[251.21955872 -406.51428223]
[263.80313110 -398.34130859]
[275.85968018 -389.40914917]
[287.34350586 -379.75173950]
[298.21099854 -369.40570068]
[308.42098999 -358.41024780]
[317.93472290 -346.80712891]
[326.71612549 -334.64031982]
[334.73184204 -321.95602417]
[341.95150757 -308.80230713]
[348.34771729 -295.22909546]
[353.89620972 -281.28787231]
[358.57595825 -267.03152466]
[362.36920166 -252.51411438]
[365.26150513 -237.79072571]
[367.24197388 -222.91720581]
[368.30303955 -207.94998169]
[368.44067383 -192.94583130]
[367.65441895 -177.96165466]
[365.94717407 -163.05430603]
[363.32546997 -148.28033447]
[359.79922485 -133.69578552]
[355.38186646 -119.35596466]
[350.09005737 -105.31528473]
[343.94396973 -91.62699890]
[336.96685791 -78.34304810]
[329.18518066 -65.51380157]
[320.62850952 -53.18793869]
[311.32925415 -41.41221619]
[301.32272339 -30.23129654]
[290.64688110 -19.68759727]
[279.34216309 -9.82111263]
[267.45153809 -0.66927266]
[255.02003479 7.73320818]
[242.09486389 15.35445595]
[228.72502136 22.16555977]
[214.96124268 28.14068413]
[200.85574341 33.25716400]
[186.46202087 37.49558640]
[171.83467102 40.83987808]
[157.02917480 43.27734756]
[142.10173035 44.79875565]
[127.10891724 45.39832687]
[112.10764313 45.07378769]
[110.86077118 60.02187347]
[109.61389160 74.96996307]
[108.36701965 89.91804504]
[107.74304199 104.90506744]
[107.74304199 119.90506744]
[107.74304199 134.90505981]
[107.74304199 149.90505981]
[107.74304199 164.90505981]
[107.74304199 179.90505981]
[107.74304199 194.90505981]
[107.74304199 209.90505981]
[107.74304199 224.90505981]
[122.28292847 228.96638489]
[135.18731689 236.80088806]
[145.49859619 247.82722473]
[152.45161438 261.22714233]
[155.53041077 276.00631714]
[154.50653076 291.06799316]
[149.45591736 305.29452515]
[140.75340271 317.63018799]
[129.04473877 327.15960693]
[115.19879913 333.17562866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[24 131]
[25 130]
[26 129]
[27 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
