%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUCACCGGGGGGGGGGUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUxxxxxxxxxxCUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACCCCCCCCCCCAAAACCCACC\
) } def
/len { sequence length } bind def

/coor [
[81.38880157 441.31130981]
[68.16860199 434.03881836]
[57.28179932 423.59182739]
[49.47066879 410.68258667]
[45.26778793 396.19125366]
[44.95971680 381.10592651]
[48.56745529 366.45510864]
[55.84503174 353.23770142]
[66.29623413 342.35494995]
[79.20849609 334.54879761]
[93.70143890 330.35150146]
[93.38938141 315.35476685]
[93.07732391 300.35800171]
[92.76526642 285.36123657]
[92.45320892 270.36450195]
[92.14115143 255.36773682]
[91.82910156 240.37098694]
[91.51704407 225.37423706]
[91.20498657 210.37748718]
[90.89292908 195.38072205]
[90.58087158 180.38397217]
[90.26881409 165.38722229]
[87.93004608 162.66735840]
[86.82697296 158.65676880]
[87.56197357 153.96505737]
[90.43459320 149.45199585]
[91.05857086 134.46498108]
[91.68254852 119.47796631]
[82.02863312 111.20719147]
[78.84914398 98.89888763]
[83.28952789 86.98726654]
[93.75007629 79.76365662]
[94.68570709 64.79286194]
[95.62133026 49.82207108]
[96.55696106 34.85128021]
[97.49259186 19.88048935]
[88.90714264 3.62410617]
[99.09991455 -10.62746525]
[99.72389221 -25.61448097]
[92.56735992 -39.72456741]
[100.82740021 -52.11896515]
[101.45137787 -67.10597992]
[86.57044983 -69.07176971]
[71.92564392 -72.36357117]
[57.63487625 -76.95487976]
[43.81320190 -82.80873871]
[30.57191467 -89.87800598]
[18.01762390 -98.10575867]
[6.25141096 -107.42576599]
[-4.63198662 -117.76297760]
[-14.54494095 -129.03416443]
[-23.40763664 -141.14855957]
[-31.14871597 -154.00865173]
[-37.70584869 -167.51089478]
[-43.02624512 -181.54653931]
[-47.06706238 -196.00262451]
[-49.79576492 -210.76271057]
[-51.19038773 -225.70799255]
[-51.23969650 -240.71810913]
[-49.94329834 -255.67222595]
[-47.31162643 -270.44992065]
[-43.36587906 -284.93225098]
[-38.13781357 -299.00256348]
[-31.66953278 -312.54757690]
[-24.01311493 -325.45825195]
[-15.23020267 -337.63061523]
[-5.39151621 -348.96670532]
[5.42372942 -359.37518311]
[17.12845421 -368.77227783]
[29.62841797 -377.08236694]
[42.82297516 -384.23846436]
[56.60588837 -390.18301392]
[70.86618042 -394.86810303]
[85.48904419 -398.25607300]
[100.35672760 -400.31958008]
[115.34954071 -401.04205322]
[130.34675598 -400.41763306]
[145.22761536 -398.45138550]
[159.87231445 -395.15914917]
[174.16294861 -390.56741333]
[187.98443604 -384.71313477]
[201.22550964 -377.64346313]
[213.77955627 -369.41531372]
[225.54548645 -360.09494019]
[236.42855835 -349.75741577]
[246.34117126 -338.48593140]
[255.20350647 -326.37124634]
[262.94418335 -313.51092529]
[269.50091553 -300.00848389]
[274.82086182 -285.97265625]
[278.86123657 -271.51647949]
[281.58950806 -256.75628662]
[282.98367310 -241.81097412]
[283.03253174 -226.80084229]
[281.73565674 -211.84677124]
[279.10354614 -197.06913757]
[275.15734863 -182.58695984]
[269.92886353 -168.51679993]
[263.46017456 -154.97198486]
[255.80334473 -142.06153870]
[247.02006531 -129.88943481]
[237.18103027 -118.55366516]
[226.36547852 -108.14550781]
[214.66046143 -98.74875641]
[202.16024780 -90.43907166]
[188.96546936 -83.28336334]
[175.18237305 -77.33924103]
[160.92193604 -72.65457153]
[146.29896545 -69.26706696]
[131.43121338 -67.20401001]
[116.43839264 -66.48200226]
[115.81441498 -51.49498749]
[123.01557922 -38.45687103]
[114.71091461 -24.99050522]
[114.08693695 -10.00348854]
[122.06179810 -0.85423583]
[121.62457275 11.67683792]
[112.46337891 20.81611633]
[111.52775574 35.78690720]
[110.59212494 50.75770187]
[109.65649414 65.72849274]
[108.72087097 80.69927979]
[119.91381073 92.78811646]
[119.05728912 109.24072266]
[106.66956329 120.10194397]
[106.04558563 135.08895874]
[105.42160797 150.07597351]
[105.26557159 165.07516479]
[105.57762909 180.07191467]
[105.88968658 195.06866455]
[106.20173645 210.06542969]
[106.51379395 225.06217957]
[106.82585144 240.05892944]
[107.13790894 255.05567932]
[107.44996643 270.05242920]
[107.76202393 285.04919434]
[108.07407379 300.04595947]
[108.38613129 315.04269409]
[108.69818878 330.03945923]
[123.35317993 333.63021851]
[136.57899475 340.89248657]
[147.47386169 351.33108521]
[155.29495239 364.23428345]
[159.50903320 378.72235107]
[159.82875061 393.80746460]
[156.23231506 408.46105957]
[148.96495056 421.68405151]
[138.52215576 432.57489014]
[125.61592865 440.39102173]
[111.12623596 444.59948730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[26 127]
[27 126]
[28 125]
[32 122]
[33 121]
[34 120]
[35 119]
[36 118]
[38 115]
[39 114]
[41 112]
[42 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
