%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAACGUAAAAGGGGGGGGGGAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUxxxxxxxxxxUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUCCCCCCCCCCUAACAACAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 523.36737061]
[70.75619507 518.55792236]
[57.85220718 510.79254150]
[46.91955185 500.43438721]
[38.46956635 487.96795654]
[32.89747238 473.97634888]
[30.46388245 459.11392212]
[31.28262329 444.07583618]
[35.31539917 429.56546021]
[42.37359238 416.26147461]
[52.12707901 404.78613281]
[64.11966705 395.67614746]
[77.79044342 389.35760498]
[92.50000000 386.12603760]
[92.50000000 371.12603760]
[92.50000000 356.12603760]
[92.50000000 341.12603760]
[92.50000000 326.12603760]
[92.50000000 311.12603760]
[92.50000000 296.12603760]
[92.50000000 281.12603760]
[92.50000000 266.12603760]
[92.50000000 251.12603760]
[92.50000000 236.12603760]
[92.50000000 221.12603760]
[79.53267670 213.79705811]
[71.92427826 200.87542725]
[71.80444336 185.78065491]
[79.30548859 172.56585693]
[92.50000000 164.82943726]
[92.50000000 149.82943726]
[75.62438965 144.10275269]
[61.79744339 132.86012268]
[52.74850082 117.50766754]
[49.60931015 99.96553040]
[34.77791595 97.72283173]
[19.94651985 95.48013306]
[5.11512375 93.23742676]
[-4.99477339 104.89048004]
[-19.80628204 109.20588684]
[-34.59310150 104.80663300]
[-44.63681412 93.09648895]
[-46.73250580 77.81213379]
[-40.21145248 63.83073807]
[-27.15449333 55.61371994]
[-11.72805977 55.78310013]
[1.14533031 64.28482819]
[7.35782433 78.40603638]
[22.18922043 80.64873505]
[37.02061462 82.89143372]
[51.85201263 85.13413239]
[59.73235321 69.70578766]
[72.37229156 57.85818481]
[88.27780151 50.99170685]
[105.56885529 49.91796112]
[109.42697906 35.42261887]
[113.28509521 20.92727852]
[117.14321899 6.43193865]
[121.00133514 -8.06340218]
[124.85945892 -22.55874443]
[128.71757507 -37.05408478]
[114.81475067 -42.74088669]
[101.75330353 -50.15889740]
[89.74771881 -59.18631363]
[78.99514008 -69.67489624]
[69.67212677 -81.45240784]
[61.93178177 -94.32545471]
[55.90120316 -108.08265686]
[51.67942047 -122.49809265]
[49.33575821 -137.33505249]
[48.90869904 -152.34991455]
[50.40525818 -167.29611206]
[53.80086136 -181.92820740]
[59.03974915 -196.00593567]
[66.03589630 -209.29812622]
[74.67441559 -221.58650208]
[84.81345367 -232.66928101]
[96.28652191 -242.36448669]
[108.90522766 -250.51290894]
[122.46234894 -256.98074341]
[136.73527527 -261.66177368]
[151.48962402 -264.47912598]
[166.48310852 -265.38656616]
[181.46954346 -264.36914062]
[196.20283508 -261.44363403]
[210.44102478 -256.65802002]
[223.95034790 -250.09091187]
[236.50892639 -241.85014343]
[247.91056824 -232.07104492]
[257.96801758 -220.91416931]
[266.51617432 -208.56274414]
[273.41461182 -195.21958923]
[278.55007935 -181.10380554]
[281.83825684 -166.44720459]
[283.22512817 -151.49043274]
[282.68792725 -136.47911072]
[280.23550415 -121.65973663]
[275.90808105 -107.27565765]
[269.77673340 -93.56307220]
[261.94216919 -80.74715424]
[252.53300476 -69.03835297]
[241.70376587 -58.62893295]
[229.63227844 -49.68983078]
[216.51675415 -42.36783600]
[202.57258606 -36.78318024]
[188.02873230 -33.02756882]
[173.12402344 -31.16267204]
[158.10319519 -31.21911240]
[143.21292114 -33.19596481]
[139.35479736 -18.70062447]
[135.49667358 -4.20528269]
[131.63856506 10.29005814]
[127.78044128 24.78539848]
[123.92231750 39.28073883]
[120.06420135 53.77608109]
[130.26713562 59.71199036]
[138.80920410 67.85862732]
[145.22171021 77.76895142]
[149.15277100 88.89916229]
[150.38665771 100.63851166]
[148.85568237 112.34281921]
[144.64384460 123.36984253]
[137.98226929 133.11450195]
[129.23649597 141.04205322]
[118.88642883 146.71751404]
[107.50000000 149.82943726]
[107.50000000 164.82943726]
[120.69451141 172.56585693]
[128.19555664 185.78065491]
[128.07571411 200.87542725]
[120.46732330 213.79705811]
[107.50000000 221.12603760]
[107.50000000 236.12603760]
[107.50000000 251.12603760]
[107.50000000 266.12603760]
[107.50000000 281.12603760]
[107.50000000 296.12603760]
[107.50000000 311.12603760]
[107.50000000 326.12603760]
[107.50000000 341.12603760]
[107.50000000 356.12603760]
[107.50000000 371.12603760]
[107.50000000 386.12603760]
[122.20955658 389.35760498]
[135.88034058 395.67614746]
[147.87292480 404.78613281]
[157.62640381 416.26147461]
[164.68460083 429.56546021]
[168.71737671 444.07583618]
[169.53611755 459.11392212]
[167.10252380 473.97634888]
[161.53042603 487.96795654]
[153.08044434 500.43438721]
[142.14779663 510.79254150]
[129.24380493 518.55792236]
[114.97203827 523.36737061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[30 127]
[31 126]
[35 51]
[36 50]
[37 49]
[38 48]
[55 115]
[56 114]
[57 113]
[58 112]
[59 111]
[60 110]
[61 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
