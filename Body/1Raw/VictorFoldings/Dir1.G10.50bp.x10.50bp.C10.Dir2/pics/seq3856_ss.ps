%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUACUAAUAGGGGGGGGGGAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUGxxxxxxxxxxCGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCCCCCCCCCCCAUUACUUAUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 360.50326538]
[71.01555634 354.95025635]
[58.81560135 346.08392334]
[49.20452881 334.46160889]
[42.78650284 320.81390381]
[39.96496582 305.99871826]
[40.91728210 290.94732666]
[45.58358765 276.60592651]
[53.67055511 263.87594604]
[64.66983032 253.55767822]
[77.88998413 246.29971313]
[92.50000000 242.55827332]
[92.50000000 227.55827332]
[92.50000000 212.55827332]
[92.50000000 197.55827332]
[92.50000000 182.55827332]
[92.50000000 167.55827332]
[92.50000000 152.55827332]
[92.50000000 137.55827332]
[92.50000000 122.55827332]
[92.50000000 107.55827332]
[91.26938629 92.60883331]
[88.81645966 77.81076050]
[86.36353302 63.01267624]
[83.91060638 48.21459961]
[81.45767212 33.41651917]
[66.52320862 34.87630081]
[51.52458954 35.33530426]
[36.52880478 34.79148102]
[21.60283279 33.24726105]
[6.81333542 30.70954132]
[-7.77363348 27.18965340]
[-22.09292412 22.70332146]
[-36.08058167 17.27058029]
[-49.67413712 10.91569614]
[-62.81287384 3.66704917]
[-75.43811035 -4.44298458]
[-87.49346161 -13.37818336]
[-98.92507935 -23.09864044]
[-109.68191528 -33.56094360]
[-119.71592712 -44.71836090]
[-128.98228455 -56.52106094]
[-137.43962097 -68.91633606]
[-145.05015564 -81.84881592]
[-151.77989197 -95.26074982]
[-157.59878540 -109.09222412]
[-162.48081970 -123.28147888]
[-166.40423584 -137.76513672]
[-169.35147095 -152.47850037]
[-171.30937195 -167.35585022]
[-172.26921082 -182.33076477]
[-172.22668457 -197.33634949]
[-171.18199158 -212.30557251]
[-169.13978577 -227.17160034]
[-166.10919189 -241.86802673]
[-162.10375977 -256.32919312]
[-157.14135742 -270.49057007]
[-151.24417114 -284.28881836]
[-144.43852234 -297.66241455]
[-136.75480652 -310.55154419]
[-128.22734070 -322.89868164]
[-118.89423370 -334.64865112]
[-108.79714966 -345.74902344]
[-97.98117828 -356.15017700]
[-86.49464417 -365.80569458]
[-74.38883972 -374.67242432]
[-61.71783829 -382.71075439]
[-48.53822708 -389.88482666]
[-34.90887070 -396.16253662]
[-20.89064407 -401.51593018]
[-6.54615402 -405.92102051]
[8.06053162 -409.35815430]
[22.86417580 -411.81201172]
[37.79866028 -413.27160645]
[52.79728699 -413.73040771]
[67.79306030 -413.18640137]
[82.71901703 -411.64199829]
[97.50848389 -409.10409546]
[112.09540558 -405.58401489]
[126.41464233 -401.09750366]
[140.40223694 -395.66461182]
[153.99571228 -389.30953979]
[167.13435364 -382.06072998]
[179.75949097 -373.95053101]
[191.81472778 -365.01519775]
[203.24623108 -355.29458618]
[214.00292969 -344.83215332]
[224.03678894 -333.67459106]
[233.30300903 -321.87179565]
[241.76019287 -309.47640991]
[249.37055969 -296.54382324]
[256.10012817 -283.13180542]
[261.91882324 -269.30026245]
[266.80072021 -255.11094666]
[270.72393799 -240.62724304]
[273.67098999 -225.91384888]
[275.62869263 -211.03646851]
[276.58834839 -196.06153870]
[276.54562378 -181.05595398]
[275.50076294 -166.08674622]
[273.45834351 -151.22074890]
[270.42758179 -136.52435303]
[266.42196655 -122.06323242]
[261.45938110 -107.90193939]
[255.56202698 -94.10373688]
[248.75621033 -80.73025513]
[241.07232666 -67.84121704]
[232.54472351 -55.49418640]
[223.21145630 -43.74431229]
[213.11422729 -32.64407730]
[202.29814148 -22.24304962]
[190.81147766 -12.58769035]
[178.70556641 -3.72111821]
[166.03445435 4.31706381]
[152.85475159 11.49095631]
[139.22532654 17.76851654]
[125.20703125 23.12170982]
[110.86248016 27.52662659]
[96.25575256 30.96359253]
[98.70867920 45.76166916]
[101.16161346 60.55974960]
[103.61454010 75.35782623]
[106.06746674 90.15590668]
[114.39356995 77.67888641]
[128.40763855 72.33042908]
[142.92947388 76.08753967]
[152.59124756 87.56143951]
[153.82151794 102.51090240]
[146.16557312 115.40998840]
[132.45333862 121.49066162]
[117.75342560 118.50524902]
[107.50000000 107.55827332]
[107.50000000 122.55827332]
[107.50000000 137.55827332]
[107.50000000 152.55827332]
[107.50000000 167.55827332]
[107.50000000 182.55827332]
[107.50000000 197.55827332]
[107.50000000 212.55827332]
[107.50000000 227.55827332]
[107.50000000 242.55827332]
[122.11001587 246.29971313]
[135.33016968 253.55767822]
[146.32945251 263.87594604]
[154.41641235 276.60592651]
[159.08271790 290.94732666]
[160.03503418 305.99871826]
[157.21350098 320.81390381]
[150.79547119 334.46160889]
[141.18440247 346.08392334]
[128.98443604 354.95025635]
[114.96250153 360.50326538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
