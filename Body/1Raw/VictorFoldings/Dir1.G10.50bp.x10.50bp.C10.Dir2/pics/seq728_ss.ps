%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCCCAUAGGGGGGGGGGCCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUAxxxxxxxxxxCCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACCCCCCCCCCCUAACCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 381.78991699]
[71.01555634 376.23690796]
[58.81560135 367.37057495]
[49.20452881 355.74826050]
[42.78650284 342.10055542]
[39.96496582 327.28536987]
[40.91728210 312.23400879]
[45.58358765 297.89257812]
[53.67055511 285.16262817]
[64.66983032 274.84436035]
[77.88998413 267.58636475]
[92.50000000 263.84494019]
[92.50000000 248.84494019]
[92.50000000 233.84494019]
[92.50000000 218.84494019]
[92.50000000 203.84494019]
[92.50000000 188.84494019]
[92.50000000 173.84494019]
[92.50000000 158.84494019]
[92.50000000 143.84494019]
[92.50000000 128.84494019]
[80.75140381 122.75460815]
[72.79760742 112.17827606]
[70.20667267 99.20103455]
[73.48940277 86.38130951]
[62.30110550 76.39021301]
[51.11280823 66.39911652]
[39.45933914 75.30445099]
[26.36544800 81.90272522]
[12.28223705 85.96833038]
[-2.30543399 87.36289215]
[-16.89562607 86.03995514]
[-30.98659706 82.04653931]
[-44.09405899 75.52149200]
[-55.76781082 66.69061279]
[-65.60722351 55.85890579]
[-73.27495575 43.39997482]
[-78.50856018 29.74319649]
[-81.12942505 15.35888577]
[-81.04889679 0.74211246]
[-78.27128601 -13.60433769]
[-72.89361572 -27.18726158]
[-65.10230255 -39.53998566]
[-76.08310699 -49.75869370]
[-87.06391144 -59.97740173]
[-98.25220490 -69.96849823]
[-109.64328003 -79.72777557]
[-121.03435516 -89.48704529]
[-134.57322693 -82.57564545]
[-149.72677612 -81.37643433]
[-164.18421936 -86.07227325]
[-175.74089050 -95.94708252]
[-182.63447571 -109.49503326]
[-183.81375122 -124.65015411]
[-179.09889221 -139.10140991]
[-169.20889282 -150.64506531]
[-155.65188599 -157.52082825]
[-140.49522400 -158.68017578]
[-126.05019379 -153.94630432]
[-114.51954651 -144.04112244]
[-107.66162872 -130.47508240]
[-106.52222443 -115.31691742]
[-111.27507782 -100.87812042]
[-99.88400269 -91.11884308]
[-88.49293518 -81.35957336]
[-83.68921661 -80.83656311]
[-79.18093872 -77.25001526]
[-76.84519958 -70.95820618]
[-65.86440277 -60.73949432]
[-54.88359833 -50.52079010]
[-42.46968079 -59.56775284]
[-28.53137970 -66.03451538]
[-13.59831524 -69.67337036]
[1.76170909 -70.34411621]
[16.96429253 -68.01941681]
[31.43067741 -62.78596115]
[44.60977936 -54.84119415]
[55.99917603 -44.48589325]
[65.16427612 -32.11276627]
[71.75487518 -18.19155312]
[75.51856995 -3.25122118]
[76.31040192 12.14016533]
[74.09842682 27.39702797]
[68.96504974 41.93855667]
[61.10390854 55.21081924]
[72.29220581 65.20191956]
[83.48049927 75.19301605]
[106.37606812 70.88597870]
[125.37573242 84.36820984]
[139.71578979 79.96791077]
[154.05584717 75.56761169]
[168.39591980 71.16731262]
[182.73597717 66.76700592]
[197.07603455 62.36670685]
[211.22335815 57.38138580]
[225.15406799 51.81945038]
[239.08477783 46.25751114]
[238.59317017 31.10712814]
[243.31587219 16.70324707]
[252.68263245 4.78520727]
[265.56234741 -3.20783019]
[280.39974976 -6.31066751]
[295.40313721 -4.14862156]
[308.76074219 3.01723027]
[318.85964966 14.32157612]
[324.48031616 28.39936066]
[324.94400024 43.55062485]
[320.19476318 57.94577789]
[310.80606079 69.84653473]
[297.91162109 77.81582642]
[283.06854248 80.89131165]
[268.06915283 78.70162201]
[254.72476196 71.51116180]
[244.64672852 60.18822861]
[230.71600342 65.75016785]
[216.78529358 71.31210327]
[215.56333923 73.90012360]
[213.21083069 76.14399719]
[209.85957336 77.59856415]
[205.80419922 77.87694550]
[201.47633362 76.70677185]
[187.13627625 81.10707092]
[172.79621887 85.50737000]
[158.45614624 89.90766907]
[144.11608887 94.30796814]
[129.77603149 98.70827484]
[129.30488586 105.43178558]
[127.33505249 111.87751770]
[123.96727753 117.71582031]
[119.37378693 122.64810944]
[113.78949738 126.42215729]
[107.50000000 128.84494019]
[107.50000000 143.84494019]
[107.50000000 158.84494019]
[107.50000000 173.84494019]
[107.50000000 188.84494019]
[107.50000000 203.84494019]
[107.50000000 218.84494019]
[107.50000000 233.84494019]
[107.50000000 248.84494019]
[107.50000000 263.84494019]
[122.11001587 267.58636475]
[135.33016968 274.84436035]
[146.32945251 285.16262817]
[154.41641235 297.89257812]
[159.08271790 312.23400879]
[160.03503418 327.28536987]
[157.21350098 342.10055542]
[150.79547119 355.74826050]
[141.18440247 367.37057495]
[128.98443604 376.23690796]
[114.96250153 381.78991699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 87]
[26 86]
[27 85]
[43 70]
[44 69]
[45 68]
[46 65]
[47 64]
[48 63]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
[94 121]
[95 116]
[96 115]
[97 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
