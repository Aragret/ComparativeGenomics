%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAACAACCCGGGGGGGGGGCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCxxxxxxxxxxCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCCCCCCCCCCCAAACAACCC\
) } def
/len { sequence length } bind def

/coor [
[77.80408478 392.14630127]
[63.64347839 386.99130249]
[51.05373383 378.70907593]
[40.71379471 367.74630737]
[33.18128586 354.69418335]
[28.86241913 340.25659180]
[27.99011040 325.21212769]
[30.61140060 310.37213135]
[36.58492661 296.53689575]
[45.58854675 284.45254517]
[57.13670349 274.77075195]
[70.60662079 268.01367188]
[85.27188110 264.54571533]
[85.27188110 249.54571533]
[85.27188110 234.54571533]
[85.27188110 219.54571533]
[85.27188110 204.54571533]
[85.27188110 189.54571533]
[85.27188110 174.54571533]
[85.27188110 159.54571533]
[85.27188110 144.54571533]
[85.27188110 129.54571533]
[79.57469177 122.74632263]
[76.31604004 115.17589569]
[75.46500397 107.60583496]
[76.76664734 100.72868347]
[79.78321075 95.09762573]
[83.95040894 91.08247375]
[88.64311218 88.84562683]
[93.24378204 88.33949280]
[97.20713043 89.32496643]
[92.71668243 75.01287842]
[88.22624207 60.70078659]
[76.71251678 49.84976196]
[80.28489685 35.38991165]
[75.79445648 21.07782173]
[71.30400848 6.76573229]
[66.81356049 -7.54635668]
[62.32311249 -21.85844612]
[58.50840759 -7.35161829]
[50.03927994 5.02876472]
[37.90136337 13.84187889]
[23.50726509 18.06205750]
[8.53216362 17.19815636]
[-5.28114367 11.35071564]
[-16.32506752 1.20026064]
[-23.31432152 -12.07190323]
[-25.43549728 -26.92116737]
[-22.44173241 -41.61937714]
[-14.68144226 -54.45595932]
[-3.05776572 -63.93700027]
[11.07653713 -68.95909882]
[26.07652283 -68.93778229]
[40.19649506 -63.87553406]
[51.79317856 -54.36149597]
[59.51723862 -41.50217819]
[59.82124329 -56.49909592]
[46.78623581 -64.50133514]
[39.55455780 -77.86545563]
[39.98029327 -92.95469666]
[47.84901047 -105.71945953]
[60.96220398 -112.78414154]
[61.26620865 -127.78105927]
[50.59952927 -139.13270569]
[51.12146759 -154.33737183]
[62.00925446 -164.43646240]
[62.31325912 -179.43339539]
[62.61726379 -194.43031311]
[62.92126846 -209.42723083]
[48.69505692 -214.61314392]
[36.92509460 -224.13925171]
[28.88809967 -236.97222900]
[25.45586014 -251.72006226]
[27.00068283 -266.78298950]
[33.35499573 -280.52713013]
[43.82953262 -291.46160889]
[57.28809357 -298.40032959]
[72.27079010 -300.59066772]
[87.15242004 -297.79495239]
[100.31872559 -290.31652832]
[110.34152985 -278.96655273]
[116.13363647 -264.97616577]
[117.06675720 -249.86300659]
[113.03967285 -235.26638794]
[104.48921204 -222.76965332]
[92.34287262 -213.72834778]
[77.91819000 -209.12322998]
[77.61418152 -194.12629700]
[77.31018066 -179.12937927]
[77.00617218 -164.13246155]
[87.47574615 -153.60043335]
[87.38108063 -138.38710022]
[76.26313019 -127.47705841]
[75.95912170 -112.48014069]
[88.77524567 -104.88983917]
[96.12019348 -91.81667328]
[95.93408203 -76.72257996]
[88.16675568 -63.66250992]
[74.81816101 -56.19509506]
[74.51416016 -41.19817352]
[76.63520050 -26.34889221]
[81.12564850 -12.03680325]
[85.61609650 2.27528548]
[90.10654449 16.58737373]
[94.59698486 30.89946365]
[105.78952789 40.72679138]
[102.53833008 56.21033859]
[107.02877045 70.52243042]
[111.51921844 84.83451843]
[123.28720093 94.13584137]
[138.24948120 95.19903564]
[153.21174622 96.26222992]
[161.21296692 83.21466064]
[174.36714172 75.38993073]
[189.65151978 74.58609772]
[203.55387878 80.98788452]
[212.87956238 93.12420654]
[215.48558044 108.20622253]
[210.77310181 122.76819611]
[199.82502747 133.46389771]
[185.15711975 137.83552551]
[170.13996887 134.87852478]
[158.22441101 125.27236938]
[152.14855957 111.22450256]
[137.18627930 110.16130829]
[122.22400665 109.09811401]
[116.73597717 114.21001434]
[131.07809448 118.60357666]
[134.44432068 133.22097778]
[123.46844482 143.44497681]
[109.12623596 139.05168152]
[105.75991058 124.43380737]
[100.27188110 129.54571533]
[100.27188110 144.54571533]
[100.27188110 159.54571533]
[100.27188110 174.54571533]
[100.27188110 189.54571533]
[100.27188110 204.54571533]
[100.27188110 219.54571533]
[100.27188110 234.54571533]
[100.27188110 249.54571533]
[100.27188110 264.54571533]
[114.93714142 268.01367188]
[128.40705872 274.77075195]
[139.95521545 284.45254517]
[148.95883179 296.53689575]
[154.93235779 310.37213135]
[157.55364990 325.21212769]
[156.68133545 340.25659180]
[152.36247253 354.69418335]
[144.82995605 367.74630737]
[134.49002075 378.70907593]
[121.90027618 386.99130249]
[107.73967743 392.14630127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[31 109]
[32 108]
[33 107]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[56 100]
[57 99]
[62 94]
[63 93]
[66 90]
[67 89]
[68 88]
[69 87]
[110 126]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
