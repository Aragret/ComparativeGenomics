%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAAUUAGGGGGGGGGGUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUxxxxxxxxxxUAGCUAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAACCCCCCCCCCAGCCUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[76.47574615 520.78216553]
[62.62980270 514.76611328]
[50.92114258 505.23669434]
[42.21861649 492.90103149]
[37.16801453 478.67449951]
[36.14412308 463.61282349]
[39.22292328 448.83364868]
[46.17594528 435.43374634]
[56.48722839 424.40740967]
[69.39160919 416.57290649]
[83.93149567 412.51156616]
[83.93149567 397.51156616]
[83.93149567 382.51156616]
[83.93149567 367.51156616]
[83.93149567 352.51156616]
[83.93149567 337.51156616]
[83.93149567 322.51156616]
[83.93149567 307.51156616]
[83.93149567 292.51156616]
[83.93149567 277.51156616]
[83.93149567 262.51156616]
[83.93149567 247.51158142]
[83.93149567 232.51158142]
[74.30434418 228.35914612]
[66.60190582 221.18945312]
[61.73586273 211.81590271]
[60.29396057 201.31465149]
[62.46913147 190.90121460]
[68.03413391 181.78964233]
[76.36499786 175.05104065]
[86.51090240 171.48768616]
[87.75778198 156.53959656]
[89.00465393 141.59150696]
[90.25152588 126.64342499]
[79.14981842 119.23992157]
[72.66055298 107.58020020]
[72.21927643 94.24359131]
[77.92360687 82.18041229]
[69.15740204 70.00857544]
[60.39119339 57.83673477]
[46.27782822 63.15163040]
[31.28126144 64.63095093]
[16.42434692 62.17982864]
[2.71885276 55.97127914]
[-8.90344143 46.43398285]
[-17.65409279 34.22271729]
[-22.94148254 20.17337227]
[-24.41080856 5.24576569]
[-21.96788597 -9.54195213]
[-15.78516865 -23.18273163]
[-6.28958225 -34.74920273]
[-15.05578899 -46.92103958]
[-23.82199669 -59.09287643]
[-32.58820343 -71.26471710]
[-47.60817337 -68.55117798]
[-62.31576538 -72.63156128]
[-73.79077148 -82.69570160]
[-79.75482941 -96.74536133]
[-79.02376556 -111.99095917]
[-71.74272919 -125.40547943]
[-59.35738754 -134.32545471]
[-44.32684708 -136.97982788]
[-29.63543892 -132.84155273]
[-18.20015144 -122.73229980]
[-12.29146957 -108.65926361]
[-13.08256531 -93.41666412]
[-20.41636658 -80.03092194]
[-11.65015984 -67.85908508]
[-2.88395238 -55.68724823]
[5.88225460 -43.51541138]
[19.86184883 -48.85586166]
[34.75890732 -50.39682388]
[49.55855942 -48.02727890]
[63.25101852 -41.90282059]
[74.90045929 -32.43545532]
[83.70899200 -20.26587486]
[89.07131195 -6.22011900]
[90.61626434 8.74650288]
[88.23256683 23.61438370]
[82.07677460 37.36907959]
[72.56303406 49.07052994]
[81.32923889 61.24236679]
[90.09544373 73.41419983]
[98.63084412 71.66220856]
[107.29539490 72.58317566]
[115.27179718 76.09023285]
[121.80770111 81.85256958]
[135.46394348 75.64716339]
[149.12017822 69.44175720]
[162.77642822 63.23635101]
[176.30061340 56.74818802]
[189.68688965 49.98007202]
[203.07318115 43.21195602]
[216.45947266 36.44384003]
[229.55262756 29.12473679]
[242.32997131 21.26731110]
[255.10733032 13.40988445]
[260.21185303 -1.79943573]
[275.33432007 -7.15581417]
[288.87405396 1.44970441]
[290.44454956 17.41570282]
[278.84103394 28.49443245]
[262.96475220 26.18724251]
[250.18740845 34.04466629]
[237.41004944 41.90209198]
[236.64855957 44.66387939]
[234.71147156 47.27953720]
[231.65283203 49.28617859]
[227.69799805 50.25072479]
[223.22758484 49.83012772]
[209.84129333 56.59823990]
[196.45501709 63.36635590]
[183.06872559 70.13446808]
[180.73988342 74.37145233]
[175.69284058 77.15688324]
[168.98182678 76.89259338]
[155.32559204 83.09799957]
[141.66934204 89.30340576]
[128.01310730 95.50881195]
[123.19291687 116.33993530]
[105.19961548 127.89029694]
[103.95274353 142.83839417]
[102.70586395 157.78646851]
[101.45899200 172.73455811]
[117.25315857 184.86567688]
[122.57834625 203.90783691]
[115.47142029 222.20634460]
[98.93149567 232.51158142]
[98.93149567 247.51158142]
[98.93149567 262.51156616]
[98.93149567 277.51156616]
[98.93149567 292.51156616]
[98.93149567 307.51156616]
[98.93149567 322.51156616]
[98.93149567 337.51156616]
[98.93149567 352.51156616]
[98.93149567 367.51156616]
[98.93149567 382.51156616]
[98.93149567 397.51156616]
[98.93149567 412.51156616]
[113.47138214 416.57290649]
[126.37576294 424.40740967]
[136.68704224 435.43374634]
[143.64007568 448.83364868]
[146.71887207 463.61282349]
[145.69497681 478.67449951]
[140.64437866 492.90103149]
[131.94184875 505.23669434]
[120.23319244 514.76611328]
[106.38725281 520.78216553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[31 124]
[32 123]
[33 122]
[34 121]
[38 83]
[39 82]
[40 81]
[51 70]
[52 69]
[53 68]
[54 67]
[87 119]
[88 118]
[89 117]
[90 116]
[91 113]
[92 112]
[93 111]
[94 110]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
