%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCCCAGGGGGGGGGGAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGxxxxxxxxxxCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUCCCCCCCCCCACUAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[90.09501648 571.66699219]
[76.07307434 566.11395264]
[63.87311554 557.24761963]
[54.26204300 545.62530518]
[47.84401703 531.97760010]
[45.02248001 517.16241455]
[45.97479630 502.11105347]
[50.64110184 487.76962280]
[58.72806931 475.03967285]
[69.72734070 464.72140503]
[82.94750214 457.46343994]
[97.55751801 453.72198486]
[97.55751801 438.72198486]
[97.55751801 423.72198486]
[97.55751801 408.72198486]
[97.55751801 393.72198486]
[97.55751801 378.72198486]
[97.55751801 363.72198486]
[97.55751801 348.72198486]
[97.55751801 333.72198486]
[97.55751801 318.72198486]
[97.55751801 303.72198486]
[82.11784363 300.77728271]
[67.53347015 294.90429688]
[54.35427475 286.32260132]
[43.07749557 275.35391235]
[34.12900925 262.41003418]
[27.84721947 247.97746277]
[24.47027779 232.59898376]
[24.12704659 216.85336304]
[26.83218002 201.33351135]
[32.48551559 186.62417603]
[40.87577057 173.27989197]
[51.68845749 161.80412292]
[64.51764679 152.63018799]
[78.88121796 146.10499573]
[94.23899078 142.47583008]
[93.62316132 127.48847961]
[93.00733948 112.50112152]
[85.68813324 100.58807373]
[92.00531006 88.11470032]
[91.38948059 73.12734985]
[90.77365875 58.13999557]
[90.15782928 43.15264130]
[75.29560852 40.80609512]
[61.18131256 35.60666656]
[48.35675812 27.75595093]
[37.31385422 17.55727196]
[28.47575951 5.40397930]
[22.18063354 -8.23572731]
[18.66872215 -22.83683968]
[18.07318115 -37.83774567]
[20.41502762 -52.66183090]
[25.60240555 -66.73964691]
[33.43418503 -79.53076935]
[43.60776901 -90.54457855]
[55.73077011 -99.35903168]
[69.33615875 -105.63688660]
[83.90023804 -109.13854980]
[83.28440857 -124.12590027]
[82.66858673 -139.11325073]
[82.05275726 -154.10061646]
[67.23920441 -156.84036255]
[53.40691376 -162.80824280]
[41.24971390 -171.70487976]
[31.37740326 -183.08404541]
[24.28517151 -196.37493896]
[20.32876587 -210.91091919]
[19.70663261 -225.96284485]
[22.44998169 -240.77574158]
[28.42120552 -254.60658264]
[37.32079315 -266.76162720]
[48.70234299 -276.63119507]
[61.99495697 -283.72018433]
[76.53189087 -287.67306519]
[91.58397675 -288.29156494]
[106.39620209 -285.54461670]
[120.22560120 -279.57003784]
[132.37847900 -270.66751099]
[142.24528503 -259.28356934]
[149.33106995 -245.98924255]
[153.28042603 -231.45135498]
[153.89527893 -216.39912415]
[151.14474487 -201.58755493]
[145.16682434 -187.75961304]
[136.26133728 -175.60888672]
[124.87501526 -165.74484253]
[111.57896423 -158.66227722]
[97.04011536 -154.71643066]
[97.65593719 -139.72908020]
[98.27176666 -124.74172974]
[98.88758850 -109.75437164]
[113.68985748 -107.45936584]
[127.76441956 -102.31887054]
[140.56970215 -94.52870941]
[151.61256409 -84.38668060]
[160.46734619 -72.28120422]
[166.79219055 -58.67642212]
[170.34231567 -44.09443665]
[170.97947693 -29.09523773]
[168.67729187 -14.25522614]
[163.52239990 -0.14504252]
[155.71115112 12.69236469]
[145.54219055 23.76263237]
[133.40493774 32.63902283]
[119.76479340 38.97887039]
[105.14518738 42.53681564]
[105.76100922 57.52416992]
[106.37683868 72.51152039]
[106.99266052 87.49887848]
[114.31186676 99.41192627]
[107.99468994 111.88529968]
[108.61051941 126.87265015]
[109.22634125 141.86000061]
[123.40518951 143.87057495]
[137.00808716 148.33602905]
[149.61358643 155.11672974]
[160.83139038 164.00125122]
[170.31437683 174.71310425]
[177.76943970 186.91926575]
[182.96643066 200.24055481]
[185.74539185 214.26341248]
[186.02136230 228.55270386]
[183.78704834 242.66531372]
[179.11297607 256.16375732]
[172.14529419 268.62988281]
[163.10116577 279.67767334]
[152.26203918 288.96536255]
[139.96487427 296.20584106]
[126.59164429 301.17572021]
[112.55751801 303.72198486]
[112.55751801 318.72198486]
[112.55751801 333.72198486]
[112.55751801 348.72198486]
[112.55751801 363.72198486]
[112.55751801 378.72198486]
[112.55751801 393.72198486]
[112.55751801 408.72198486]
[112.55751801 423.72198486]
[112.55751801 438.72198486]
[112.55751801 453.72198486]
[127.16752625 457.46343994]
[140.38768005 464.72140503]
[151.38696289 475.03967285]
[159.47392273 487.76962280]
[164.14022827 502.11105347]
[165.09254456 517.16241455]
[162.27101135 531.97760010]
[155.85298157 545.62530518]
[146.24191284 557.24761963]
[134.04196167 566.11395264]
[120.02001190 571.66699219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[37 114]
[38 113]
[39 112]
[41 110]
[42 109]
[43 108]
[44 107]
[59 92]
[60 91]
[61 90]
[62 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
