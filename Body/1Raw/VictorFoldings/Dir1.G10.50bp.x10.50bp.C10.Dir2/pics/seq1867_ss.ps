%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCCCAGGGGGGGGGGAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAxxxxxxxxxxAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCCCCCCCCCCCUAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[79.80171204 423.11895752]
[65.95577240 417.10290527]
[54.24711227 407.57348633]
[45.54458618 395.23782349]
[40.49398422 381.01132202]
[39.47009277 365.94961548]
[42.54889297 351.17047119]
[49.50191498 337.77053833]
[59.81319809 326.74420166]
[72.71758270 318.90969849]
[87.25746918 314.84838867]
[87.25746918 299.84838867]
[87.25746918 284.84838867]
[87.25746918 269.84838867]
[87.25746918 254.84838867]
[87.25746918 239.84838867]
[87.25746918 224.84838867]
[87.25746918 209.84838867]
[87.25746918 194.84838867]
[87.25746918 179.84838867]
[84.52709198 175.85832214]
[84.31858826 170.09744263]
[87.58250427 164.22766113]
[88.20648193 149.24064636]
[88.83045959 134.25361633]
[89.45443726 119.26660919]
[83.36659241 110.30135345]
[82.84696960 100.66954041]
[86.87760162 93.22702789]
[93.23394012 89.64645386]
[89.22619629 75.19177246]
[75.95896149 71.32142639]
[66.42434692 61.46728134]
[63.04714966 48.28983688]
[66.60955811 35.27366638]
[76.07318115 25.80604172]
[72.36701965 11.27110481]
[68.66085815 -3.26383138]
[64.95469666 -17.79876709]
[49.00852966 -20.87511063]
[36.03730392 -30.55028725]
[28.59671974 -44.85497284]
[28.12529182 -60.91408920]
[34.66649628 -75.52464294]
[46.87016296 -85.79453278]
[42.86242294 -100.24922180]
[38.85468292 -114.70391083]
[35.03311157 -118.44759369]
[33.25289154 -122.85022736]
[33.41733170 -127.00650787]
[35.07808304 -130.18603516]
[31.97976303 -144.86256409]
[28.88144112 -159.53907776]
[25.63061523 -174.18258667]
[22.07585335 -188.75529480]
[18.36969185 -203.29022217]
[14.66353130 -217.82516479]
[-0.41117537 -217.69609070]
[-15.07856369 -221.17907715]
[-28.48589134 -228.07160950]
[-39.85367203 -237.97296143]
[-48.52100372 -250.30751038]
[-53.98397064 -264.35809326]
[-55.92496872 -279.30789185]
[-54.23115158 -294.28768921]
[-49.00099182 -308.42660522]
[-40.53856659 -320.90261841]
[-29.33586693 -330.99038696]
[-16.04420662 -338.10339355]
[-1.43634510 -341.82815552]
[13.63843727 -341.94808960]
[28.30371094 -338.45620728]
[41.70685577 -331.55557251]
[53.06863403 -321.64730835]
[61.72848511 -309.30752563]
[67.18292999 -295.25360107]
[69.11486816 -280.30264282]
[67.41196442 -265.32388306]
[62.17323685 -251.18814087]
[53.70324707 -238.71726990]
[42.49443817 -228.63629150]
[29.19846725 -221.53132629]
[32.90462875 -206.99638367]
[36.61079025 -192.46145630]
[41.34163666 -186.71995544]
[40.23950958 -177.58555603]
[44.84988785 -171.74688721]
[43.55796814 -162.63740540]
[46.65628815 -147.96087646]
[49.75461197 -133.28434753]
[53.30937195 -118.71165466]
[57.31711197 -104.25696564]
[61.32485199 -89.80227661]
[75.11522675 -88.00605011]
[87.21160889 -81.05713654]
[95.76323700 -69.98049164]
[99.44715118 -56.43546295]
[97.67274475 -42.46726227]
[90.67619324 -30.19813156]
[79.48963165 -21.50492859]
[83.19579315 -6.96999264]
[86.90195465 7.56494379]
[90.60811615 22.09988022]
[106.02442169 27.65351677]
[115.20408630 41.42666626]
[114.38088989 58.12408829]
[103.68088531 71.18402863]
[107.68862915 85.63871765]
[118.77994537 95.73736572]
[133.54600525 98.37622833]
[148.31205750 101.01509857]
[163.07810974 103.65396118]
[172.14285278 102.07842255]
[178.12252808 106.50437927]
[192.83049011 109.44985962]
[207.53845215 112.39533997]
[224.25650024 109.57698059]
[231.59274292 124.86148071]
[218.93643188 136.14218140]
[204.59297180 127.10330200]
[189.88500977 124.15782166]
[175.17704773 121.21234131]
[160.43923950 118.42001343]
[145.67318726 115.78115082]
[130.90713501 113.14228821]
[116.14107513 110.50342560]
[104.44145203 119.89058685]
[103.81747437 134.87759399]
[103.19349670 149.86460876]
[102.56951904 164.85163879]
[102.25746918 179.84838867]
[102.25746918 194.84838867]
[102.25746918 209.84838867]
[102.25746918 224.84838867]
[102.25746918 239.84838867]
[102.25746918 254.84838867]
[102.25746918 269.84838867]
[102.25746918 284.84838867]
[102.25746918 299.84838867]
[102.25746918 314.84838867]
[116.79735565 318.90969849]
[129.70173645 326.74420166]
[140.01301575 337.77053833]
[146.96603394 351.17047119]
[150.04484558 365.94961548]
[149.02095032 381.01132202]
[143.97035217 395.23782349]
[135.26782227 407.57348633]
[123.55915833 417.10290527]
[109.71321869 423.11895752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[25 128]
[26 127]
[30 108]
[31 107]
[36 103]
[37 102]
[38 101]
[39 100]
[45 93]
[46 92]
[47 91]
[51 90]
[52 89]
[53 88]
[54 86]
[55 84]
[56 83]
[57 82]
[109 126]
[110 125]
[111 124]
[112 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
