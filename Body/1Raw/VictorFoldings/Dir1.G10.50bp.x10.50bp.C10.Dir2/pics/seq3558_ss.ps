%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUACUAUGGGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCxxxxxxxxxxACAUAAUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCCCCCCCCCCCUCUACUAU\
) } def
/len { sequence length } bind def

/coor [
[13.01570606 273.98031616]
[2.40180755 268.25576782]
[-7.83696032 261.88455200]
[-17.66124344 254.89108276]
[-27.03328133 247.30227661]
[-35.91705322 239.14729309]
[-44.27840805 230.45748901]
[-52.08521271 221.26625061]
[-64.16519928 230.15859985]
[-76.24518585 239.05094910]
[-88.32518005 247.94329834]
[-100.40516663 256.83566284]
[-112.48515320 265.72799683]
[-124.56513977 274.62036133]
[-136.55197144 283.63787842]
[-148.44435120 292.77960205]
[-160.33673096 301.92135620]
[-172.22911072 311.06307983]
[-184.12149048 320.20480347]
[-196.01387024 329.34655762]
[-204.88659668 343.79339600]
[-221.22506714 339.26669312]
[-221.39820862 322.31362915]
[-205.15560913 317.45416260]
[-193.26322937 308.31243896]
[-181.37084961 299.17071533]
[-169.47846985 290.02896118]
[-157.58609009 280.88723755]
[-145.69371033 271.74548340]
[-142.28536987 265.13272095]
[-133.45748901 262.54037476]
[-121.37750244 253.64801025]
[-109.29751587 244.75566101]
[-97.21752930 235.86331177]
[-85.13753510 226.97096252]
[-73.05754852 218.07861328]
[-60.97756195 209.18626404]
[-75.17600250 184.55047607]
[-85.63105011 158.10791016]
[-92.11928558 130.42361450]
[-94.50205994 102.08917999]
[-92.72845459 73.71010590]
[-86.83637238 45.89282608]
[-76.95172119 19.23178482]
[-63.28572845 -5.70329618]
[-46.13042831 -28.37956810]
[-57.00925446 -38.70677185]
[-67.88807678 -49.03397751]
[-78.87374115 -59.24745560]
[-89.96505737 -69.34610748]
[-101.05637360 -79.44475555]
[-116.22418976 -76.17107391]
[-130.40580750 -82.46881104]
[-138.14808655 -95.91636658]
[-136.47398376 -111.34286499]
[-126.02722168 -122.81652069]
[-110.82478333 -125.92546844]
[-96.71232605 -119.47425079]
[-89.11637115 -105.94350433]
[-90.95772552 -90.53607178]
[-79.86640930 -80.43742371]
[-68.77509308 -70.33877563]
[-61.66583633 -68.14694977]
[-57.56087494 -59.91280365]
[-46.68204880 -49.58559799]
[-35.80322266 -39.25839233]
[-28.19882965 -46.28901291]
[-20.23101425 -52.90493393]
[-11.92236805 -59.08739471]
[-3.29644156 -64.81887054]
[5.62231112 -70.08312225]
[14.80860710 -74.86521149]
[24.23640633 -79.15159607]
[33.87897873 -82.93011475]
[43.70899582 -86.19005585]
[53.69858551 -88.92218781]
[63.81942749 -91.11876678]
[74.04283905 -92.77355194]
[84.33983612 -93.88185883]
[94.68122101 -94.44054413]
[105.03768921 -94.44802856]
[115.37987518 -93.90428925]
[125.67845917 -92.81087494]
[135.90425110 -91.17086792]
[146.02825928 -88.98892975]
[156.02178955 -86.27124023]
[165.85650635 -83.02550507]
[175.50453186 -79.26092529]
[184.93852234 -74.98818207]
[194.13171387 -70.21937561]
[203.05807495 -64.96802521]
[211.69227600 -59.24902344]
[220.00985718 -53.07857895]
[227.98721313 -46.47418594]
[235.60177612 -39.45456314]
[242.83190918 -32.03961563]
[249.65715027 -24.25035858]
[256.05813599 -16.10887527]
[262.01675415 -7.63824320]
[267.51605225 1.13752258]
[272.54046631 10.19354534]
[277.07577515 19.50415230]
[281.10913086 29.04295158]
[284.62902832 38.78290176]
[287.62557983 48.69638824]
[290.09020996 58.75531006]
[292.01599121 68.93115997]
[293.39743042 79.19507599]
[294.23065186 89.51797485]
[294.51324463 99.87059021]
[294.24441528 110.22356415]
[293.42495728 120.54756165]
[292.05715942 130.81330872]
[306.76513672 133.75878906]
[321.47308350 136.70428467]
[336.18106079 139.64976501]
[352.89910889 136.83139038]
[360.23535156 152.11590576]
[347.57904053 163.39660645]
[333.23556519 154.35772705]
[318.52761841 151.41224670]
[303.81964111 148.46675110]
[289.11169434 145.52127075]
[285.92742920 157.15251160]
[282.02853394 168.56405640]
[277.42999268 179.71208191]
[272.14947510 190.55372620]
[266.20727539 201.04731750]
[259.62622070 211.15251160]
[252.43165588 220.83049011]
[244.65118408 230.04402161]
[236.31474304 238.75773621]
[227.45434570 246.93809509]
[218.10406494 254.55369568]
[208.29983521 261.57525635]
[198.07934570 267.97576904]
[187.48187256 273.73065186]
[176.54815674 278.81777954]
[165.32020569 283.21759033]
[153.84120178 286.91317749]
[142.15525818 289.89035034]
[130.30726624 292.13766479]
[118.34279633 293.64648438]
[106.30782318 294.41098022]
[94.24860382 294.42822266]
[82.21149445 293.69818115]
[70.24275208 292.22363281]
[58.38838959 290.01022339]
[46.69396210 287.06652832]
[35.20442581 283.40377808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[46 66]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
