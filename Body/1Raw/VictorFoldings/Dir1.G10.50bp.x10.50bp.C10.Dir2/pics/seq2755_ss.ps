%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAACCGUGGGGGGGGGGGCAAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGGCxxxxxxxxxxUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCCCCCCCCCCCACCCUAACCCUG\
) } def
/len { sequence length } bind def

/coor [
[87.84707642 519.12945557]
[74.93203735 511.36425781]
[64.15631866 500.82949829]
[56.10105133 488.09335327]
[51.20064163 473.84265137]
[49.71936417 458.84591675]
[51.73710251 443.91186523]
[57.14503860 429.84591675]
[65.65153503 417.40661621]
[76.79784393 407.26480103]
[89.98286438 399.96740723]
[104.49553680 395.90795898]
[103.88764954 380.92028809]
[103.27976990 365.93258667]
[102.67188263 350.94491577]
[102.06400299 335.95724487]
[101.45611572 320.96957397]
[100.84822845 305.98190308]
[100.24034882 290.99420166]
[99.63246155 276.00653076]
[99.02458191 261.01885986]
[98.41669464 246.03117371]
[85.16301727 239.23371887]
[77.03721619 226.63104248]
[76.30575562 211.55352783]
[83.26509857 198.04559326]
[96.13524628 189.78082275]
[95.52735901 174.79313660]
[94.91947937 159.80546570]
[94.31159210 144.81779480]
[93.70371246 129.83010864]
[87.86512756 127.96826172]
[82.51686096 124.97635651]
[77.87499237 120.97528839]
[74.12708282 116.12671661]
[71.42456818 110.62654114]
[69.87664032 104.69699860]
[69.54584503 98.57768250]
[70.44554138 92.51583099]
[57.25724411 85.36958313]
[42.27843857 89.64428711]
[29.00543213 82.20910645]
[25.02246475 67.90275574]
[11.83416843 60.75651169]
[-1.35412824 53.61026764]
[-14.54242516 46.46401978]
[-27.73072052 39.31777573]
[-40.91901779 32.17152786]
[-56.64521027 35.34428787]
[-68.83773804 24.91731071]
[-68.14353943 8.88928509]
[-55.09513855 -0.44446275]
[-39.70215607 4.07612133]
[-33.77276993 18.98323059]
[-20.58447456 26.12947845]
[-7.39617825 33.27572250]
[5.79211807 40.42197037]
[18.98041534 47.56821823]
[32.16871262 54.71446228]
[46.32876205 50.23913956]
[59.80537415 57.29858017]
[64.40349579 72.18128967]
[77.59178925 79.32753754]
[92.65775299 70.40996552]
[110.14491272 71.25005341]
[118.46266174 58.76745987]
[119.67631531 42.99287415]
[133.17256165 36.69204712]
[141.49031067 24.20945549]
[149.80805969 11.72686481]
[158.12580872 -0.75572646]
[147.78399658 -11.70346355]
[140.14149475 -24.67190552]
[135.57881165 -39.00901794]
[134.32171631 -53.99478531]
[136.43005371 -68.87736511]
[141.79490662 -82.91081238]
[150.14419556 -95.39244843]
[161.05651855 -105.69809723]
[173.98239136 -113.31322479]
[188.27189636 -117.85868835]
[203.20742798 -119.10959625]
[218.03965759 -117.00640106]
[232.02516174 -111.65778351]
[240.34289551 -124.14037323]
[248.66064453 -136.62295532]
[256.97839355 -149.10554504]
[265.29614258 -161.58815002]
[260.72793579 -176.54359436]
[266.88922119 -190.91622925]
[280.87078857 -197.91973877]
[296.07104492 -194.24726868]
[305.31280518 -181.63285828]
[304.23245239 -166.03263855]
[293.34008789 -154.81256104]
[277.77874756 -153.27040100]
[269.46099854 -140.78781128]
[261.14324951 -128.30522156]
[252.82550049 -115.82262421]
[244.50775146 -103.34003448]
[254.82876587 -92.49205780]
[262.48056030 -79.61307526]
[267.07659912 -65.34734344]
[268.38336182 -50.40933609]
[266.33206177 -35.54796600]
[261.02239990 -21.50899696]
[252.71768188 -8.99765968]
[241.83169556 1.35679150]
[228.90821838 9.03272533]
[214.59373474 13.64240932]
[199.60517883 14.95159435]
[184.69396973 12.89141941]
[170.60839844 7.56202126]
[162.29064941 20.04461288]
[153.97290039 32.52720261]
[145.65515137 45.00979233]
[145.03643799 59.89154434]
[130.94525146 67.08521271]
[122.62750244 79.56780243]
[130.42800903 98.09867859]
[124.99501038 117.45646667]
[108.69139099 129.22222900]
[109.29927063 144.20989990]
[109.90715790 159.19758606]
[110.51503754 174.18525696]
[111.12292480 189.17294312]
[124.62011719 196.36828613]
[132.65052795 209.26824951]
[133.14251709 224.35546875]
[126.06403351 237.57481384]
[113.40437317 245.42329407]
[114.01226044 260.41098022]
[114.62014008 275.39865112]
[115.22802734 290.38632202]
[115.83590698 305.37399292]
[116.44379425 320.36169434]
[117.05167389 335.34936523]
[117.65956116 350.33703613]
[118.26744080 365.32470703]
[118.87532806 380.31240845]
[119.48321533 395.30007935]
[134.27696228 398.17086792]
[148.00965881 404.37652588]
[159.94067383 413.58236694]
[169.42662048 425.29190063]
[175.95593262 438.87368774]
[179.17646790 453.59527588]
[178.91455078 468.66271973]
[175.18432617 483.26348877]
[168.18695068 496.61013794]
[158.29978943 507.98294067]
[146.05601501 516.76855469]
[132.11596680 522.49316406]
[117.23136902 524.84814453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 126]
[28 125]
[29 124]
[30 123]
[31 122]
[39 63]
[40 62]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[65 119]
[66 118]
[68 116]
[69 115]
[70 114]
[71 113]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
