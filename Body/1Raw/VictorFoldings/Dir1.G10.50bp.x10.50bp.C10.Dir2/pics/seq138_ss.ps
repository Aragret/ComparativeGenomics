%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAUAUUAGGGGGGGGGGCAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACxxxxxxxxxxAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAACCCCCCCCCCUUCAAUAUGA\
) } def
/len { sequence length } bind def

/coor [
[80.76660919 358.25799561]
[66.92066956 352.24197388]
[55.21200562 342.71255493]
[46.50948334 330.37689209]
[41.45888138 316.15036011]
[40.43498993 301.08868408]
[43.51379013 286.30950928]
[50.46680832 272.90957642]
[60.77809525 261.88323975]
[73.68247223 254.04873657]
[88.22235870 249.98742676]
[88.22235870 234.98742676]
[88.22235870 219.98742676]
[88.22235870 204.98742676]
[88.22235870 189.98742676]
[88.22235870 174.98742676]
[88.22235870 159.98742676]
[88.22235870 144.98742676]
[88.22235870 129.98742676]
[88.22235870 114.98742676]
[78.71400452 103.38608551]
[64.00604248 100.44060516]
[49.29808044 97.49512482]
[34.59011841 94.54964447]
[19.88215828 91.60415649]
[5.17419577 88.65867615]
[-9.76011181 87.25637054]
[-24.75930023 87.41240692]
[-39.75848770 87.56844330]
[-54.75767517 87.72447968]
[-69.75686646 87.88051605]
[-84.75605011 88.03655243]
[-99.75524139 88.19258881]
[-114.75443268 88.34863281]
[-129.75361633 88.50466919]
[-143.58654785 97.31274414]
[-158.00404358 89.49816895]
[-158.17463684 73.09990692]
[-143.92283630 64.98708344]
[-129.90965271 73.50547791]
[-114.91046906 73.34944153]
[-99.91127777 73.19340515]
[-84.91208649 73.03736877]
[-69.91290283 72.88133240]
[-54.91371155 72.72529602]
[-39.91452408 72.56925964]
[-24.91533661 72.41322327]
[-9.91614819 72.25718689]
[-21.73745918 63.02373505]
[-27.48565292 49.16883469]
[-25.67282677 34.27878189]
[-16.76822472 22.20782280]
[-3.07677722 16.08048630]
[11.85752773 17.48281670]
[24.16899109 26.05182457]
[30.67082596 39.56944656]
[29.68005371 54.53668976]
[21.45313263 67.07933044]
[8.11967850 73.95071411]
[22.82764053 76.89619446]
[37.53560257 79.84168243]
[52.24356461 82.78716278]
[66.95152283 85.73264313]
[81.65948486 88.67813110]
[70.16417694 79.04185486]
[58.66886520 69.40557098]
[44.60249710 64.19622803]
[32.74188232 55.01331711]
[24.17579269 42.69982529]
[19.69057846 28.38609505]
[19.69797516 13.38609695]
[24.19729805 -0.92320335]
[32.77552414 -13.22824478]
[44.64519119 -22.39945221]
[58.71668625 -27.59492874]
[73.69828033 -28.33774185]
[88.21469879 -24.55970383]
[100.93337250 -16.60762978]
[110.68674469 -5.21150017]
[116.57947540 8.58254337]
[118.07064056 23.50824165]
[115.02334595 38.19544601]
[107.71706390 51.29624557]
[105.24191284 66.09062195]
[102.76676178 80.88500214]
[112.03171539 69.08836365]
[121.29666138 57.29172516]
[130.56161499 45.49508286]
[128.42684937 29.83563614]
[138.05662537 17.30395699]
[153.73776245 15.33486938]
[166.16693115 25.09659958]
[167.97012329 40.79768372]
[158.07752991 53.12294769]
[142.35824585 54.76003265]
[133.09330750 66.55667114]
[123.82835388 78.35331726]
[114.56340790 90.14995575]
[121.05156708 103.67414093]
[136.05076599 103.83017731]
[151.04994202 103.98621368]
[166.04913330 104.14225006]
[181.04832458 104.29828644]
[196.04751587 104.45432281]
[211.04670715 104.61035919]
[226.04588318 104.76640320]
[241.04507446 104.92243958]
[256.04428101 105.07847595]
[271.04345703 105.23451233]
[286.04263306 105.39054871]
[297.15682983 94.15441132]
[312.96112061 94.15172577]
[324.07910156 105.38407135]
[323.91470337 121.18750763]
[312.56542969 132.18612671]
[296.76461792 131.85464478]
[285.88659668 120.38973236]
[270.88742065 120.23369598]
[255.88822937 120.07765961]
[240.88903809 119.92162323]
[225.88984680 119.76558685]
[210.89067078 119.60955048]
[195.89147949 119.45351410]
[180.89228821 119.29747772]
[165.89309692 119.14144135]
[150.89390564 118.98540497]
[135.89472961 118.82936859]
[120.89553070 118.67333221]
[114.04772186 119.20248413]
[108.00636292 117.84756470]
[103.22235870 114.98742676]
[103.22235870 129.98742676]
[103.22235870 144.98742676]
[103.22235870 159.98742676]
[103.22235870 174.98742676]
[103.22235870 189.98742676]
[103.22235870 204.98742676]
[103.22235870 219.98742676]
[103.22235870 234.98742676]
[103.22235870 249.98742676]
[117.76225281 254.04873657]
[130.66662598 261.88323975]
[140.97792053 272.90957642]
[147.93093872 286.30950928]
[151.00973511 301.08868408]
[149.98583984 316.15036011]
[144.93524170 330.37689209]
[136.23271179 342.71255493]
[124.52405548 352.24197388]
[110.67811584 358.25799561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[85 98]
[86 97]
[87 96]
[88 95]
[99 128]
[100 127]
[101 126]
[102 125]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
