%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUAGGAGGAGGGGGGGGGGCUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUxxxxxxxxxxAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCCCAUAAAUAGGAGAA\
) } def
/len { sequence length } bind def

/coor [
[61.28142166 207.71707153]
[55.38417053 193.82876587]
[53.28338623 178.88725281]
[55.12229538 163.91123962]
[60.77552414 149.92182922]
[69.85762024 137.87284851]
[81.74935913 128.58581543]
[95.63993073 122.69393158]
[93.54573059 107.84084320]
[89.37044525 100.88900757]
[91.56130981 92.66992950]
[89.76472473 77.77790833]
[85.60932922 69.57908630]
[88.08425140 62.57032776]
[86.58599091 47.64534378]
[85.08773041 32.72035599]
[83.58947754 17.79536819]
[82.09121704 2.87038255]
[80.59295654 -12.05460358]
[79.09469604 -26.97958946]
[77.59644318 -41.90457535]
[76.09818268 -56.82956314]
[74.59992218 -71.75454712]
[59.60839462 -71.13448334]
[44.60631180 -71.39530182]
[29.64539528 -72.53610992]
[14.77721691 -74.55297089]
[0.05303044 -77.43894196]
[-14.47640610 -81.18406677]
[-28.76100540 -85.77543640]
[-42.75152588 -91.19722748]
[-56.39974213 -97.43074036]
[-69.65859985 -104.45449829]
[-82.48239899 -112.24427795]
[-94.82692719 -120.77323151]
[-106.64963531 -130.01196289]
[-117.90976715 -139.92860413]
[-128.56849670 -150.48899841]
[-138.58909607 -161.65672302]
[-147.93701172 -173.39329529]
[-156.58003235 -185.65823364]
[-164.48834229 -198.40927124]
[-171.63468933 -211.60246277]
[-177.99444580 -225.19230652]
[-183.54568481 -239.13197327]
[-188.26925659 -253.37339783]
[-192.14889526 -267.86749268]
[-195.17121887 -282.56430054]
[-197.32582092 -297.41314697]
[-198.60525513 -312.36285400]
[-199.00511169 -327.36187744]
[-198.52403259 -342.35848999]
[-197.16366577 -357.30105591]
[-194.92868042 -372.13803101]
[-191.82681274 -386.81823730]
[-187.86874390 -401.29110718]
[-183.06811523 -415.50674438]
[-177.44146729 -429.41613770]
[-171.00820923 -442.97137451]
[-163.79052734 -456.12564087]
[-155.81327820 -468.83367920]
[-147.10397339 -481.05163574]
[-137.69264221 -492.73742676]
[-127.61170959 -503.85070801]
[-116.89594269 -514.35321045]
[-105.58227539 -524.20874023]
[-93.70970917 -533.38330078]
[-81.31917572 -541.84527588]
[-68.45338440 -549.56555176]
[-55.15668106 -556.51739502]
[-41.47491074 -562.67687988]
[-27.45523262 -568.02282715]
[-13.14597797 -572.53680420]
[1.40352643 -576.20318604]
[16.14312553 -579.00933838]
[31.02200699 -580.94567871]
[45.98888397 -582.00543213]
[60.99215698 -582.18499756]
[75.98011017 -581.48376465]
[90.90107727 -579.90411377]
[105.70361328 -577.45153809]
[120.33670807 -574.13446045]
[134.74990845 -569.96429443]
[148.89350891 -564.95538330]
[162.71879578 -559.12512207]
[176.17807007 -552.49353027]
[189.22496033 -545.08343506]
[201.81448364 -536.92047119]
[213.90322876 -528.03265381]
[225.44955444 -518.45074463]
[236.41362000 -508.20773315]
[246.75764465 -497.33889771]
[256.44598389 -485.88174438]
[265.44522095 -473.87573242]
[273.72433472 -461.36227417]
[281.25482178 -448.38449097]
[288.01068115 -434.98715210]
[293.96862793 -421.21640015]
[299.10812378 -407.11975098]
[303.41146851 -392.74575806]
[306.86380005 -378.14398193]
[309.45324707 -363.36477661]
[311.17086792 -348.45904541]
[312.01077271 -333.47824097]
[311.97000122 -318.47393799]
[311.04876709 -303.49789429]
[309.25018311 -288.60174561]
[306.58047485 -273.83679199]
[303.04885864 -259.25399780]
[298.66751099 -244.90359497]
[293.45150757 -230.83505249]
[287.41882324 -217.09687805]
[280.59030151 -203.73643494]
[272.98944092 -190.79975891]
[264.64245605 -178.33146667]
[255.57814026 -166.37452698]
[245.82771301 -154.97015381]
[235.42478943 -144.15768433]
[224.40524292 -133.97436523]
[212.80703735 -124.45530701]
[200.67018127 -115.63333130]
[188.03649902 -107.53885651]
[174.94955444 -100.19976807]
[161.45445251 -93.64137268]
[147.59770203 -87.88627625]
[133.42709351 -82.95433044]
[118.99144745 -78.86251831]
[104.34056091 -75.62496185]
[89.52490997 -73.25280762]
[91.02317047 -58.32781982]
[92.52143097 -43.40283585]
[94.01968384 -28.47784805]
[95.51794434 -13.55286217]
[97.01620483 1.37212431]
[98.51445770 16.29711151]
[100.01271820 31.22209740]
[101.51097870 46.14708328]
[103.00923157 61.07207108]
[104.65673828 75.98132324]
[106.45333099 90.87333679]
[108.39882660 105.74664307]
[110.49302673 120.59973145]
[125.47115326 122.42129517]
[139.46710205 128.05831909]
[151.52658081 137.12644958]
[160.82739258 149.00741577]
[166.73536682 162.89115906]
[168.84768677 177.83105469]
[167.02033997 192.80848694]
[161.37791443 206.80224609]
[152.30513000 218.85823059]
[140.42056274 228.15444946]
[126.53454590 234.05706787]
[111.59383392 236.16362000]
[96.61711884 234.33049011]
[82.62553406 228.68266296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 142]
[9 141]
[11 140]
[12 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
