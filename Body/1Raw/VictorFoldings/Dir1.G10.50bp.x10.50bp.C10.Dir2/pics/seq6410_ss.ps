%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUUCCCCGGGGGGGGGGUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCxxxxxxxxxxUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCCCCCCCCCCCUAAUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.78816986 377.18032837]
[85.22994995 368.82916260]
[75.14372253 357.61672974]
[68.16352844 344.24780273]
[64.72814941 329.56280518]
[65.05352783 314.48486328]
[69.11920929 299.96173096]
[76.66963196 286.90640259]
[87.23015594 276.13949585]
[100.13695526 268.33786011]
[114.57868195 263.99191284]
[113.95470428 249.00489807]
[113.33072662 234.01788330]
[112.70674896 219.03086853]
[112.08277130 204.04385376]
[111.45879364 189.05682373]
[110.83481598 174.06980896]
[110.21083832 159.08279419]
[109.58686066 144.09577942]
[108.96288300 129.10876465]
[103.06456757 124.47628784]
[97.89841461 138.55857849]
[82.90893555 137.99691772]
[78.81111908 123.56751251]
[91.26792145 115.21134186]
[85.36960602 110.57886505]
[70.66164398 113.52435303]
[55.95368195 116.46983337]
[41.24571991 119.41531372]
[26.53775787 122.36079407]
[16.48128510 134.86067200]
[0.43964595 134.64767456]
[-9.28138638 121.88518524]
[-5.22466898 106.36350250]
[9.49783325 99.98953247]
[23.59227562 107.65283203]
[38.30023575 104.70735168]
[53.00819778 101.76187134]
[67.71616364 98.81639099]
[82.42411804 95.87090302]
[85.82710266 81.26201630]
[73.93472290 72.12027740]
[62.04233932 62.97854614]
[46.57604218 64.83094788]
[34.64570618 55.39052200]
[32.97503281 40.63435364]
[21.08265305 31.49262047]
[9.19027424 22.35088730]
[-2.70210576 13.20915222]
[-17.54530334 17.73232841]
[-32.20133209 12.63523102]
[-41.03465271 -0.12220078]
[-40.64867401 -15.63447475]
[-31.19180870 -27.93680573]
[-16.30041695 -32.29869461]
[-1.70054209 -27.04290771]
[6.99386501 -14.19040108]
[6.43962860 1.31677282]
[18.33200836 10.45850658]
[30.22438812 19.60024071]
[42.11676788 28.74197578]
[56.80633163 26.56200981]
[68.99712372 35.66361618]
[71.18407440 51.08616638]
[83.07645416 60.22789764]
[94.96883392 69.36963654]
[109.96883392 69.36963654]
[121.86121368 60.22789764]
[133.75358582 51.08616638]
[125.94282532 38.26278305]
[119.56431580 24.67006874]
[114.69286346 10.46738720]
[111.38556671 -4.17874002]
[109.68121338 -19.09659576]
[109.59978485 -34.11127472]
[111.14222717 -49.04674149]
[114.29047394 -63.72787857]
[119.00759125 -77.98255920]
[125.23828888 -91.64366150]
[132.90951538 -104.55101013]
[141.93132019 -116.55326843]
[152.19792175 -127.50972748]
[163.58897400 -137.29191589]
[175.97090149 -145.78515625]
[189.19854736 -152.88986206]
[203.11680603 -158.52272034]
[217.56250000 -162.61772156]
[232.36627197 -165.12683105]
[247.35455322 -166.02062988]
[262.35159302 -165.28863525]
[277.18157959 -162.93945312]
[291.67065430 -159.00061035]
[305.64889526 -153.51828003]
[318.95242310 -146.55674744]
[331.42532349 -138.19764709]
[342.92126465 -128.53895569]
[353.30554199 -117.69394684]
[362.45635986 -105.78975677]
[370.26641846 -92.96595001]
[376.64419556 -79.37289429]
[381.51489258 -65.16995239]
[384.82141113 -50.52364731]
[386.52496338 -35.60570145]
[386.60556030 -20.59101486]
[385.06231689 -5.65563440]
[381.91329956 9.02533436]
[377.19540405 23.27976418]
[370.96395874 36.94052887]
[363.29205322 49.84746170]
[354.26959229 61.84923935]
[344.00241089 72.80514526]
[332.61083984 82.58672333]
[320.22845459 91.07929230]
[307.00042725 98.18328094]
[293.08184814 103.81539917]
[278.63592529 107.90962219]
[263.83203125 110.41793060]
[248.84370422 111.31092072]
[233.84669495 110.57813263]
[219.01683044 108.22814178]
[204.52799988 104.28852081]
[190.55004883 98.80544281]
[177.24687195 91.84320068]
[164.77444458 83.48342133]
[153.27900696 73.82411957]
[142.89532471 62.97854614]
[131.00294495 72.12027740]
[119.11056519 81.26201630]
[123.94989777 128.48478699]
[124.57387543 143.47180176]
[125.19785309 158.45881653]
[125.82183075 173.44583130]
[126.44580841 188.43284607]
[127.06978607 203.41987610]
[127.69376373 218.40689087]
[128.31774902 233.39390564]
[128.94172668 248.38092041]
[129.56568909 263.36791992]
[144.31869507 266.49838257]
[157.82933044 273.20013428]
[169.24832153 283.05191040]
[177.85783386 295.43444824]
[183.11668396 309.56933594]
[184.69429016 324.56808472]
[182.49147034 339.48782349]
[176.64672852 353.39068604]
[167.52745056 365.40274048]
[155.70687866 374.76889038]
[141.92807007 380.90039062]
[127.05716705 383.41180420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[41 66]
[42 65]
[43 64]
[46 61]
[47 60]
[48 59]
[49 58]
[67 128]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
