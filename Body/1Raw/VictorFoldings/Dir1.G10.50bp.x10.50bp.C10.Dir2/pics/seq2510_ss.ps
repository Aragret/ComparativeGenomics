%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGAAAACAUUGGGGGGGGGGCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACxxxxxxxxxxAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGCCCCCCCCCCAGAUGAAAACCUU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 436.18655396]
[70.75619507 431.37710571]
[57.85220718 423.61172485]
[46.91955185 413.25357056]
[38.46956635 400.78717041]
[32.89747238 386.79553223]
[30.46388245 371.93310547]
[31.28262329 356.89501953]
[35.31539917 342.38464355]
[42.37359238 329.08065796]
[52.12707901 317.60531616]
[64.11966705 308.49533081]
[77.79044342 302.17678833]
[92.50000000 298.94522095]
[92.50000000 283.94522095]
[92.50000000 268.94522095]
[92.50000000 253.94523621]
[92.50000000 238.94523621]
[92.50000000 223.94523621]
[92.50000000 208.94523621]
[92.50000000 193.94523621]
[92.50000000 178.94523621]
[92.50000000 163.94523621]
[92.50000000 148.94523621]
[92.50000000 133.94523621]
[82.30531311 132.03518677]
[72.65096283 126.99877167]
[64.50727844 119.01158905]
[58.78060913 108.55149841]
[56.21949768 96.37394714]
[41.31024551 98.02145386]
[26.40099716 99.66895294]
[11.49174786 101.31645966]
[1.80832624 113.80673218]
[-13.88111591 115.70856476]
[-26.26831055 105.89363098]
[-28.00415421 90.18495941]
[-18.05880356 77.90222168]
[-2.33265662 76.33255768]
[9.84424114 86.40721130]
[24.75349045 84.75970459]
[39.66274261 83.11219788]
[54.57199097 81.46469116]
[57.55352020 66.76399994]
[44.46424866 59.43795395]
[31.37497520 52.11190796]
[18.28570366 44.78586197]
[4.71747255 52.12797928]
[-10.66456318 50.94623947]
[-22.95205307 41.61772537]
[-28.22410393 27.11913872]
[-24.79842377 12.07692337]
[-13.76813412 1.29099488]
[1.34703994 -1.79689550]
[15.72390079 3.79858685]
[24.77484512 16.29194450]
[25.61174774 31.69659042]
[38.70101929 39.02263641]
[51.79029465 46.34867859]
[64.87957001 53.67472458]
[79.29480743 49.52734375]
[86.48953247 36.36542892]
[93.68424988 23.20351410]
[100.87897491 10.04160023]
[105.74199677 -4.14822102]
[108.13296509 -18.95643616]
[110.52394104 -33.76465225]
[112.91491699 -48.57286835]
[103.19762421 -37.14595795]
[90.46905518 -29.20974922]
[75.93150330 -25.51387024]
[60.95813751 -26.40742302]
[46.96330643 -31.80600548]
[35.26891327 -41.19968414]
[26.97957802 -53.70116043]
[22.87828255 -68.12957764]
[23.35242462 -83.12208557]
[28.35721588 -97.26252747]
[37.41992188 -109.21524048]
[49.68450546 -117.85121155]
[63.99249268 -122.35470581]
[78.99239349 -122.30034637]
[93.26736450 -117.69326782]
[105.46903992 -108.96863556]
[114.44487762 -96.95054626]
[119.34704590 -82.77420807]
[119.71255493 -67.77898407]
[127.16918945 -80.79430389]
[134.62582397 -93.80962372]
[134.03009033 -110.19795227]
[148.06674194 -118.67759705]
[162.29608154 -110.52542877]
[162.08018494 -94.12770844]
[147.64114380 -86.35298920]
[140.18450928 -73.33766937]
[132.72787476 -60.32234955]
[127.72313690 -46.18189240]
[125.33216095 -31.37367630]
[122.94118500 -16.56546211]
[120.55020905 -1.75724626]
[131.76480103 -3.95725560]
[141.00733948 0.90505075]
[154.99122620 -4.52180529]
[168.97511292 -9.94866085]
[182.95901489 -15.37551689]
[189.10404968 -29.93622017]
[203.77647400 -35.80951309]
[218.27139282 -29.51087761]
[223.98922729 -14.77717972]
[217.53768921 -0.34966227]
[202.74436951 5.21208429]
[188.38586426 -1.39162505]
[174.40197754 4.03523064]
[160.41809082 9.46208668]
[146.43418884 14.88894272]
[139.37458801 26.66110992]
[124.85612488 28.34736824]
[114.04088593 17.23632240]
[106.84616852 30.39823532]
[99.65144348 43.56015015]
[92.45672607 56.72206497]
[104.68630981 57.15845871]
[116.08666992 60.91745758]
[125.79235077 67.57721710]
[133.10502625 76.50139618]
[137.54331970 86.89807892]
[138.87322998 97.88912201]
[137.11750793 108.58401489]
[132.54382324 118.15197754]
[125.63349152 125.88645172]
[117.03401184 131.25706482]
[107.50000000 133.94523621]
[107.50000000 148.94523621]
[107.50000000 163.94523621]
[107.50000000 178.94523621]
[107.50000000 193.94523621]
[107.50000000 208.94523621]
[107.50000000 223.94523621]
[107.50000000 238.94523621]
[107.50000000 253.94523621]
[107.50000000 268.94522095]
[107.50000000 283.94522095]
[107.50000000 298.94522095]
[122.20955658 302.17678833]
[135.88034058 308.49533081]
[147.87292480 317.60531616]
[157.62640381 329.08065796]
[164.68460083 342.38464355]
[168.71737671 356.89501953]
[169.53611755 371.93310547]
[167.10252380 386.79553223]
[161.53042603 400.78717041]
[153.08044434 413.25357056]
[142.14779663 423.61172485]
[129.24380493 431.37710571]
[114.97203827 436.18655396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[30 43]
[31 42]
[32 41]
[33 40]
[44 60]
[45 59]
[46 58]
[47 57]
[61 121]
[62 120]
[63 119]
[64 118]
[65 100]
[66 99]
[67 98]
[68 97]
[87 96]
[88 95]
[89 94]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
