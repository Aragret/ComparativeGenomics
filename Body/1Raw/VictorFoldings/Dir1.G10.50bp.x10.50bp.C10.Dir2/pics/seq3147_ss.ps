%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACCCACACCGGGGGGGGGGCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAxxxxxxxxxxCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCCCCCCCCCCCUAUACCAACACC\
) } def
/len { sequence length } bind def

/coor [
[62.97505569 510.71453857]
[48.81445312 505.55953979]
[36.22470856 497.27731323]
[25.88477135 486.31454468]
[18.35225868 473.26242065]
[14.03339386 458.82482910]
[13.16108513 443.78036499]
[15.78237629 428.94036865]
[21.75590324 415.10513306]
[30.75952148 403.02078247]
[42.30767822 393.33898926]
[55.77759171 386.58190918]
[70.44285583 383.11395264]
[70.44285583 368.11395264]
[70.44285583 353.11395264]
[70.44285583 338.11395264]
[70.44285583 323.11395264]
[70.44285583 308.11395264]
[70.44285583 293.11395264]
[70.44285583 278.11395264]
[70.44285583 263.11395264]
[70.44285583 248.11395264]
[59.59017944 258.46862793]
[44.63252640 259.59497070]
[32.35158157 250.98228455]
[28.31542969 236.53549194]
[34.35403061 222.80468750]
[47.72953033 216.01527405]
[62.37757874 219.24554443]
[71.65676880 231.03062439]
[73.77780914 216.18135071]
[75.89885712 201.33206177]
[66.78424835 189.60774231]
[68.72375488 174.51824951]
[81.08309937 165.03750610]
[83.20413971 150.18823242]
[85.32518768 135.33894348]
[87.44622803 120.48966217]
[89.56726837 105.64038086]
[87.29585266 90.81335449]
[80.82675934 77.28003693]
[74.35765839 63.74671555]
[67.88855743 50.21339417]
[62.58635330 46.10656738]
[60.51093292 40.73643875]
[61.44402313 35.99798584]
[55.52868652 22.21361732]
[40.72484589 34.19491959]
[17.06074524 33.86423492]
[4.49450302 25.67341042]
[-8.07173920 17.48258972]
[-24.64259529 13.89887333]
[-25.78620338 -3.01646042]
[-9.84850883 -8.79800415]
[0.11908308 4.91634750]
[12.68532467 13.10716915]
[25.25156784 21.29799080]
[31.49286270 17.13911819]
[50.21674728 4.66249609]
[47.49567413 -10.08863068]
[44.77459717 -24.83975792]
[29.72826958 -25.86878586]
[15.41082096 -30.60813713]
[2.72225356 -38.75989151]
[-7.53981638 -49.81162262]
[-14.73030758 -63.06860733]
[-18.39721870 -77.69750214]
[-18.31004715 -92.77872467]
[-14.47426796 -107.36425018]
[-7.13100576 -120.53722382]
[3.25813746 -131.46958923]
[16.04009056 -139.47412109]
[30.41137123 -144.04763794]
[45.46858597 -144.90266418]
[60.26522827 -141.98544312]
[73.87117004 -135.47933960]
[85.43112183 -125.79336548]
[94.21842957 -113.53636169]
[99.68070221 -99.47882080]
[101.47457886 -84.50441742]
[99.48730469 -69.55445099]
[93.84378815 -55.56868744]
[84.89879608 -43.42628479]
[73.21461487 -33.89052582]
[59.52572250 -27.56083488]
[62.24679947 -12.80970669]
[64.96787262 1.94141972]
[69.31305695 16.29828072]
[75.22839355 30.08264732]
[81.42188263 43.74429703]
[87.89097595 57.27761841]
[94.36007690 70.81093597]
[100.82917786 84.34426117]
[105.49486542 70.08833313]
[120.34558868 67.97744751]
[128.79891968 80.36862946]
[121.41474152 93.42634583]
[135.77160645 89.08116913]
[150.12846375 84.73599243]
[164.48532104 80.39081573]
[178.84217834 76.04563904]
[193.19905090 71.70046234]
[207.55590820 67.35527802]
[221.91276550 63.01010513]
[236.26962280 58.66492462]
[242.25344849 44.21751022]
[256.14773560 37.04236984]
[271.39205933 40.52738953]
[280.78845215 53.02704620]
[279.90029907 68.63938904]
[269.14691162 79.99273682]
[253.60571289 81.72640228]
[240.61480713 73.02178955]
[226.25794983 77.36696625]
[211.90107727 81.71214294]
[197.54421997 86.05731964]
[183.18736267 90.40249634]
[168.83050537 94.74767303]
[154.47364807 99.09284973]
[140.11677551 103.43802643]
[125.75992584 107.78320312]
[114.00778961 111.17633057]
[104.41654968 107.76142883]
[102.29550934 122.61071014]
[100.17446899 137.45999146]
[98.05342102 152.30926514]
[95.93238068 167.15855408]
[105.14321136 179.72033691]
[102.78063965 194.74940491]
[90.74813843 203.45310974]
[88.62709045 218.30238342]
[86.50605011 233.15167236]
[85.44285583 248.11395264]
[85.44285583 263.11395264]
[85.44285583 278.11395264]
[85.44285583 293.11395264]
[85.44285583 308.11395264]
[85.44285583 323.11395264]
[85.44285583 338.11395264]
[85.44285583 353.11395264]
[85.44285583 368.11395264]
[85.44285583 383.11395264]
[100.10811615 386.58190918]
[113.57803345 393.33898926]
[125.12619019 403.02078247]
[134.12980652 415.10513306]
[140.10333252 428.94036865]
[142.72462463 443.78036499]
[141.85231018 458.82482910]
[137.53344727 473.26242065]
[130.00093079 486.31454468]
[119.66099548 497.27731323]
[107.07125092 505.55953979]
[92.91065216 510.71453857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[30 132]
[31 131]
[32 130]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
[40 93]
[41 92]
[42 91]
[43 90]
[46 89]
[47 88]
[49 57]
[50 56]
[51 55]
[59 87]
[60 86]
[61 85]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
