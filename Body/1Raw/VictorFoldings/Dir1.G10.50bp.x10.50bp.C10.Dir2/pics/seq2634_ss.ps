%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUACCCUCAGGGGGGGGGGCUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAxxxxxxxxxxCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCCCCCCCCCCCUAUUACUCUCA\
) } def
/len { sequence length } bind def

/coor [
[73.09732056 394.18316650]
[59.60844421 387.45162964]
[48.12294388 377.68707275]
[39.30857468 365.45718384]
[33.67779160 351.47299194]
[31.55796432 336.54751587]
[33.07233429 321.54849243]
[38.13285446 307.34799194]
[46.44532013 294.77157593]
[57.52645111 284.55041504]
[70.73200989 277.27877808]
[85.29422760 273.37942505]
[84.98625183 258.38256836]
[84.67827606 243.38574219]
[84.37030029 228.38890076]
[84.06231689 213.39205933]
[83.75434113 198.39521790]
[83.44636536 183.39839172]
[83.13838959 168.40155029]
[82.83040619 153.40470886]
[82.52243042 138.40786743]
[70.19114685 129.86741638]
[56.04383087 134.85273743]
[41.89651489 139.83805847]
[27.74919891 144.82337952]
[24.29621696 159.85934448]
[13.24636555 170.62524414]
[-1.87438917 173.68568420]
[-16.24106789 168.06411743]
[-25.26931763 155.55435181]
[-26.07825470 140.14820862]
[-18.40975189 126.76173401]
[-4.71079874 119.66650391]
[10.64731693 121.12658691]
[22.76387787 130.67605591]
[36.91119385 125.69074249]
[51.05850983 120.70542145]
[65.20582581 115.72009277]
[62.91062164 100.36932373]
[66.90261841 85.83321381]
[76.15214539 74.50170135]
[88.79793549 68.08573914]
[102.51229858 67.36273956]
[107.05958557 53.06860733]
[111.60688019 38.77447891]
[116.15416718 24.48034859]
[120.70145416 10.18621922]
[106.82962036 4.45571852]
[93.48595428 -2.41545892]
[80.76405334 -10.37911606]
[68.75315857 -19.37939262]
[57.53751755 -29.35315704]
[47.19580460 -40.23044968]
[37.80055618 -51.93497086]
[29.41767502 -64.38462067]
[22.10596275 -77.49208069]
[15.91670609 -91.16539764]
[10.89332008 -105.30867004]
[7.07103968 -119.82268524]
[4.47667551 -134.60565186]
[3.12842655 -149.55384827]
[3.03574944 -164.56243896]
[4.19929409 -179.52615356]
[6.61089897 -194.34002686]
[10.25364780 -208.90014648]
[15.10198975 -223.10437012]
[21.12191582 -236.85307312]
[28.27120209 -250.04983521]
[36.49969864 -262.60205078]
[45.74968338 -274.42172241]
[55.95628357 -285.42590332]
[67.04789734 -295.53741455]
[78.94672394 -304.68533325]
[91.56930542 -312.80548096]
[104.82710266 -319.84091187]
[118.62711334 -325.74227905]
[132.87254333 -330.46820068]
[147.46347046 -333.98550415]
[162.29754639 -336.26953125]
[177.27072144 -337.30422974]
[192.27796936 -337.08239746]
[207.21400452 -335.60552979]
[221.97409058 -332.88403320]
[236.45468140 -328.93698120]
[250.55418396 -323.79205322]
[264.17373657 -317.48535156]
[277.21777344 -310.06109619]
[289.59481812 -301.57138062]
[301.21804810 -292.07571411]
[312.00592041 -281.64077759]
[321.88278198 -270.33972168]
[330.77935791 -258.25180054]
[338.63323975 -245.46183777]
[345.38931274 -232.05952454]
[351.00021362 -218.13888550]
[355.42657471 -203.79754639]
[358.63732910 -189.13610840]
[360.61001587 -174.25743103]
[361.33071899 -159.26586914]
[360.79446411 -144.26657104]
[359.00494385 -129.36474609]
[355.97473145 -114.66493988]
[351.72512817 -100.27024841]
[346.28585815 -86.28163910]
[339.69512939 -72.79724884]
[331.99917603 -59.91164398]
[323.25195312 -47.71522141]
[313.51483154 -36.29352570]
[302.85614014 -25.72667885]
[291.35058594 -16.08879471]
[279.07888794 -7.44748163]
[266.12716675 0.13664888]
[252.58621216 6.61039829]
[238.55104065 11.92835712]
[224.12010193 16.05322456]
[209.39460754 18.95606422]
[194.47785950 20.61651611]
[179.47448730 21.02293396]
[164.48971558 20.17246628]
[149.62867737 18.07107735]
[134.99559021 14.73350906]
[130.44830322 29.02763939]
[125.90100861 43.32176971]
[121.35371399 57.61589813]
[116.80642700 71.91002655]
[128.00927734 81.36568451]
[134.19932556 95.09416199]
[133.85150146 110.54930878]
[126.69026184 124.69902802]
[113.80978394 134.62007141]
[97.51927185 138.09989929]
[97.82724762 153.09672546]
[98.13522339 168.09356689]
[98.44320679 183.09040833]
[98.75118256 198.08724976]
[99.05915833 213.08409119]
[99.36713409 228.08091736]
[99.67511749 243.07775879]
[99.98309326 258.07458496]
[100.29106903 273.07144165]
[115.00110626 276.36965942]
[128.49406433 283.09301758]
[139.98547363 292.85061646]
[148.80726624 305.07516479]
[154.44651794 319.05593872]
[156.57539368 333.98013306]
[155.07012939 348.98004150]
[150.01820374 363.18362427]
[141.71337891 375.76507568]
[130.63844299 385.99295044]
[117.43729401 393.27261353]
[102.87744141 397.18078613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 38]
[23 37]
[24 36]
[25 35]
[43 125]
[44 124]
[45 123]
[46 122]
[47 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
