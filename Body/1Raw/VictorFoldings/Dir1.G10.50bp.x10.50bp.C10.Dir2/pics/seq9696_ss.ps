%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUCCAACGGGGGGGGGGACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAAxxxxxxxxxxGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCACCCCCCCCCCAAUCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[78.71269226 411.81643677]
[64.86675262 405.80038452]
[53.15808868 396.27096558]
[44.45556641 383.93530273]
[39.40496445 369.70880127]
[38.38107300 354.64709473]
[41.45987320 339.86795044]
[48.41289520 326.46801758]
[58.72417831 315.44168091]
[71.62855530 307.60717773]
[86.16844940 303.54586792]
[86.16844940 288.54586792]
[86.16844940 273.54586792]
[86.16844940 258.54586792]
[86.16844940 243.54586792]
[86.16844940 228.54586792]
[86.16844940 213.54586792]
[86.16844940 198.54586792]
[86.16844940 183.54586792]
[86.16844940 168.54586792]
[73.66796875 176.83671570]
[59.32800293 172.43609619]
[53.62990570 158.56051636]
[60.73851776 145.35189819]
[75.45803070 142.46467590]
[87.02938080 152.00857544]
[88.58695984 137.08966064]
[90.14453888 122.17074585]
[76.26065826 105.01155090]
[82.02407074 83.70465851]
[74.56916046 70.68835449]
[67.11425018 57.67204285]
[59.65933609 44.65573502]
[45.93346024 50.73884964]
[31.65485191 55.37839508]
[16.97487450 58.52518463]
[2.04914379 60.14586639]
[-12.96411800 60.22325516]
[-27.90576363 58.75653458]
[-42.61740112 55.76124954]
[-56.94308090 51.26914978]
[-70.73094177 45.32786179]
[-83.83482361 38.00035858]
[-96.11582184 29.36432076]
[-107.44374847 19.51129341]
[-117.69851685 8.54572487]
[-126.77143097 -3.41614532]
[-134.56629944 -16.24751282]
[-141.00050354 -29.81235886]
[-146.00582886 -43.96688843]
[-149.52922058 -58.56105804]
[-151.53334045 -73.44015503]
[-151.99691772 -88.44645691]
[-150.91505432 -103.42089081]
[-148.29922485 -118.20471191]
[-144.17713928 -132.64120483]
[-138.59251404 -146.57734680]
[-131.60453796 -159.86540222]
[-123.28729248 -172.36448669]
[-113.72894287 -183.94213867]
[-103.03080750 -194.47561646]
[-91.30629730 -203.85324097]
[-78.67970276 -211.97561646]
[-65.28486633 -218.75665283]
[-51.26378250 -224.12445068]
[-36.76508331 -228.02212524]
[-21.94246674 -230.40834045]
[-6.95305490 -231.25779724]
[8.04425240 -230.56152344]
[22.89047623 -228.32687378]
[37.42823792 -224.57752991]
[51.50342941 -219.35327148]
[64.96685028 -212.70944214]
[77.67576599 -204.71649170]
[89.49547577 -195.45913696]
[100.30066681 -185.03550720]
[109.97680664 -173.55612183]
[118.42132568 -161.14265442]
[125.54470062 -147.92669678]
[131.27142334 -134.04833984]
[135.54077148 -119.65471649]
[138.30751038 -104.89838409]
[139.54231262 -89.93579102]
[139.23207092 -74.92553711]
[137.38008118 -60.02673721]
[134.00596619 -45.39733124]
[129.14552307 -31.19240379]
[122.85023499 -17.56252861]
[115.18686676 -4.65219212]
[106.23664093 7.40174913]
[96.09443665 18.47151566]
[84.86776733 28.43976402]
[72.67564392 37.20082474]
[80.13055420 50.21713257]
[87.58546448 63.23344421]
[95.04037476 76.24974823]
[102.14913177 75.83280182]
[109.07275391 77.49761200]
[115.21485138 81.10078430]
[120.04634094 86.33192444]
[123.15104675 92.74043274]
[138.15023804 92.89646912]
[153.14941406 93.05250549]
[168.13644409 92.42852783]
[183.07073975 91.02622986]
[198.00505066 89.62392426]
[205.00440979 75.87574005]
[218.33697510 68.11389923]
[233.74838257 68.81518555]
[246.32092285 77.75582123]
[252.04272461 92.08287811]
[249.08799744 107.22463989]
[238.39956665 118.34943390]
[223.38807678 121.90737915]
[208.84365845 116.76313782]
[199.40734863 104.55822754]
[184.47305298 105.96053314]
[169.53874207 107.36283875]
[178.96189880 119.03348541]
[175.92115784 133.72204590]
[162.63905334 140.69238281]
[148.82371521 134.84973145]
[144.57305908 120.46459961]
[152.99337769 108.05169678]
[137.99420166 107.89566040]
[122.99501038 107.73962402]
[116.14710236 118.10919952]
[105.06345367 123.72832489]
[103.50587463 138.64724731]
[101.94828796 153.56614685]
[101.16844940 168.54586792]
[101.16844940 183.54586792]
[101.16844940 198.54586792]
[101.16844940 213.54586792]
[101.16844940 228.54586792]
[101.16844940 243.54586792]
[101.16844940 258.54586792]
[101.16844940 273.54586792]
[101.16844940 288.54586792]
[101.16844940 303.54586792]
[115.70833588 307.60717773]
[128.61271667 315.44168091]
[138.92399597 326.46801758]
[145.87701416 339.86795044]
[148.95582581 354.64709473]
[147.93193054 369.70880127]
[142.88133240 383.93530273]
[134.17880249 396.27096558]
[122.47013855 405.80038452]
[108.62419891 411.81643677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 130]
[27 129]
[28 128]
[30 96]
[31 95]
[32 94]
[33 93]
[101 126]
[102 125]
[103 124]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
