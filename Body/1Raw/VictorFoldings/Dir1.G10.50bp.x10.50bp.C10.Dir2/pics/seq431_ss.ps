%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGAACCCUGGGGGGGGGGAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUxxxxxxxxxxGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAAAUUUGCCCCCCCCCCCCCACAGAACCCU\
) } def
/len { sequence length } bind def

/coor [
[99.60338593 400.28591919]
[86.68423462 392.52755737]
[75.90293121 381.99853516]
[67.84091949 369.26666260]
[62.93296051 355.01855469]
[61.44373703 340.02258301]
[63.45355988 325.08749390]
[68.85404205 311.01867676]
[77.35395050 298.57485962]
[88.49488068 288.42715454]
[101.67602539 281.12274170]
[116.18654633 277.05563354]
[115.57072449 262.06826782]
[114.95489502 247.08091736]
[114.33907318 232.09356689]
[113.72324371 217.10620117]
[113.10742188 202.11885071]
[112.49159241 187.13150024]
[111.87577057 172.14414978]
[111.25994110 157.15679932]
[110.64411926 142.16944885]
[72.55163574 119.96856689]
[79.33345795 87.03850555]
[69.69164276 75.54783630]
[60.04983139 64.05717468]
[50.29055786 52.66609573]
[40.41484833 41.37581635]
[30.53914452 30.08553696]
[5.75630379 31.29232597]
[-8.75232124 27.48446846]
[-23.26094627 23.67660904]
[-38.57321930 27.65717506]
[-48.91939545 16.94242477]
[-63.42802429 13.13456631]
[-69.99307251 14.52836800]
[-75.43540192 12.63920307]
[-78.44784546 8.86105728]
[-92.78791046 4.46075726]
[-107.12796783 0.06045685]
[-121.46803284 -4.33984327]
[-132.65675354 6.18195343]
[-147.61102295 9.68411636]
[-162.30824280 5.22458029]
[-172.79492188 -5.99706125]
[-176.25018311 -20.96224403]
[-171.74459839 -35.64540863]
[-160.49014282 -46.09685516]
[-145.51420593 -49.50519943]
[-130.84524536 -44.95361710]
[-120.42911530 -33.66645432]
[-117.06773376 -18.67990494]
[-102.72766876 -14.27960396]
[-88.38761139 -9.87930393]
[-74.04754639 -5.47900391]
[-59.62016296 -1.37405896]
[-45.11153793 2.43379974]
[-30.83702087 -1.81912947]
[-19.45308876 9.16798401]
[-4.94446278 12.97584248]
[9.56416225 16.78370094]
[21.15321159 7.26036358]
[12.58103466 -6.03731871]
[19.52015686 -19.21676636]
[18.59674454 -34.18831635]
[17.67333031 -49.15986633]
[14.00228882 -57.59309006]
[16.88786697 -64.44769287]
[16.27204132 -79.43505096]
[15.65621567 -94.42240143]
[1.62398374 -100.42733765]
[-8.40670776 -111.93159485]
[-12.44425678 -126.65100098]
[-9.68700600 -141.66300964]
[-0.68240905 -153.98696899]
[12.78166485 -161.17594910]
[28.03191376 -161.80258179]
[42.04039001 -155.74243164]
[52.02569962 -144.19876099]
[56.00525284 -129.46357727]
[53.18890762 -114.46253967]
[44.13584900 -102.17413330]
[30.64356995 -95.03823090]
[31.25939560 -80.05087280]
[31.87521935 -65.06352234]
[32.64487839 -50.08327866]
[33.56829453 -35.11172867]
[34.49170685 -20.14018059]
[42.99783325 -7.91336298]
[36.12475967 6.33695030]
[41.82942581 20.20983124]
[51.70513153 31.50011063]
[61.58083725 42.79039001]
[68.39389038 45.77275085]
[71.54049683 54.41535568]
[81.18231201 65.90602112]
[90.82412720 77.39669037]
[101.76721954 69.29025269]
[117.81859589 67.42915344]
[135.21708679 74.47911835]
[149.03067017 68.63232422]
[162.84425354 62.78553772]
[176.65783691 56.93875122]
[190.47142029 51.09196472]
[202.70098877 39.34998703]
[217.36956787 47.85111237]
[213.26133728 64.29978180]
[196.31820679 64.90554810]
[182.50462341 70.75233459]
[168.69104004 76.59912109]
[154.87745667 82.44590759]
[141.06387329 88.29270172]
[141.37179565 95.78637695]
[156.35916138 95.17078400]
[156.97451782 110.15814972]
[141.98762512 110.77372742]
[142.29553223 118.26740265]
[156.54222107 122.96120453]
[170.78890991 127.65500641]
[183.30065918 118.47699738]
[198.81768799 118.43972015]
[211.37339783 127.55751038]
[216.13983154 142.32438660]
[211.28424072 157.06217957]
[198.67366028 166.10392761]
[183.15713501 165.97286987]
[170.70108032 156.71940613]
[166.09510803 141.90170288]
[151.84841919 137.20790100]
[137.60173035 132.51409912]
[125.63146973 141.55361938]
[126.24729919 156.54096985]
[126.86312103 171.52832031]
[127.47895050 186.51567078]
[128.09477234 201.50303650]
[128.71060181 216.49038696]
[129.32643127 231.47773743]
[129.94224548 246.46508789]
[130.55807495 261.45245361]
[131.17390442 276.43978882]
[145.96917725 279.30276489]
[159.70513916 285.50112915]
[171.64105225 294.70065308]
[181.13320923 306.40515137]
[187.66969299 319.98348999]
[190.89804077 334.70336914]
[190.64411926 349.77093506]
[186.92163086 364.37368774]
[179.93132019 377.72406006]
[170.05017090 389.10208130]
[157.81106567 397.89419556]
[143.87405396 403.62619019]
[128.99070740 405.98901367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 96]
[24 95]
[25 94]
[26 92]
[27 91]
[28 90]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[37 54]
[38 53]
[39 52]
[40 51]
[61 89]
[63 87]
[64 86]
[65 85]
[67 84]
[68 83]
[69 82]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
