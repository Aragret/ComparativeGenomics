%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUCGAAGGGGGGGGGGACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCxxxxxxxxxxAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCCCCCCCCCCCUUCUUCAAA\
) } def
/len { sequence length } bind def

/coor [
[21.05398560 221.52775574]
[22.83445740 206.63378906]
[26.44942856 192.07591248]
[31.84301186 178.07914734]
[38.93182755 164.85989380]
[47.60629272 152.62251282]
[57.73229980 141.55616760]
[69.15331268 131.83193970]
[81.69276428 123.60017395]
[95.15681458 116.98810577]
[109.33731842 112.09797668]
[124.02168274 109.00438690]
[109.04196930 108.22454071]
[94.39846802 111.47537231]
[81.15588379 118.52050781]
[72.60657501 131.83290100]
[57.73641586 130.97979736]
[44.49383163 138.02493286]
[31.25124550 145.07006836]
[18.00866127 152.11520386]
[4.76607466 159.16033936]
[3.60072374 174.54362488]
[-5.71468973 186.84104919]
[-20.20765114 192.12854004]
[-35.25350952 188.71890259]
[-46.05118561 177.70010376]
[-49.15517807 162.58822632]
[-43.57501984 148.20541382]
[-31.09131432 139.14115906]
[-15.68756771 138.28784180]
[-2.27906013 145.91775513]
[10.96352577 138.87261963]
[24.20611191 131.82748413]
[37.44869614 124.78234863]
[50.69128418 117.73721313]
[58.29339218 104.92873383]
[74.11074829 105.27791595]
[87.35333252 98.23278046]
[87.97731018 83.24576569]
[75.36618042 75.12422180]
[62.75505066 67.00268555]
[46.96341705 66.03584290]
[40.45232010 52.63976669]
[27.84119034 44.51822281]
[21.16287041 43.80579758]
[16.57348061 40.31741714]
[14.88417721 35.78731918]
[2.62180877 27.14820480]
[-9.64055920 18.50908852]
[-21.90292740 9.86997223]
[-38.27529526 8.93318272]
[-45.40752029 -5.83378792]
[-35.96257782 -19.23994637]
[-19.65661621 -17.49418640]
[-13.26381111 -2.39239573]
[-1.00144327 6.24672031]
[11.26092529 14.88583660]
[23.52329254 23.52495193]
[35.96273422 31.90709496]
[48.57386017 40.02863693]
[63.46346664 40.41456985]
[70.87659454 54.39155579]
[83.48772430 62.51309586]
[96.09885406 70.63463593]
[109.82181549 93.24482727]
[124.80152893 94.02467346]
[114.73384094 84.18318176]
[107.00672913 71.88393402]
[107.94235229 56.91314316]
[108.87798309 41.94235229]
[95.35964966 34.92990494]
[85.86732483 23.02126503]
[82.04562378 8.27967358]
[84.55667114 -6.74079609]
[92.96541595 -19.43775940]
[105.81499481 -27.61138725]
[120.87914276 -29.84555435]
[135.54789734 -25.75317383]
[147.27980042 -16.04327583]
[154.04225159 -2.39816070]
[154.66360474 12.81807423]
[149.03619385 26.96912384]
[138.13502502 37.60323334]
[123.84877777 42.87797928]
[122.91314697 57.84877396]
[121.97751617 72.81956482]
[127.52317810 77.86888885]
[135.52165222 65.17934418]
[143.52011108 52.48980713]
[151.51858521 39.80026245]
[159.51705933 27.11072350]
[161.58993530 12.25463963]
[171.03735352 0.60362065]
[185.14450073 -4.49427748]
[199.85749817 -1.57411301]
[210.94842529 8.52497005]
[215.23014832 22.90088081]
[211.47227478 37.42253494]
[200.75466919 47.91695786]
[186.15934753 51.36854553]
[174.27313232 60.51829529]
[162.38691711 69.66804504]
[150.50070190 78.81778717]
[138.61448669 87.96753693]
[144.16015625 93.01686096]
[158.97790527 90.68576050]
[173.79566956 88.35465240]
[186.20390320 77.63235474]
[201.60284424 83.27189636]
[204.15139771 99.47180939]
[191.22779846 109.56700134]
[176.12677002 103.17241669]
[161.30900574 105.50351715]
[146.49125671 107.83461761]
[161.41085815 109.38556671]
[176.02267456 112.77597046]
[190.10081482 117.95341492]
[203.42764282 124.83786774]
[215.79713440 133.32289124]
[227.01806641 143.27731323]
[236.91697693 154.54725647]
[245.34083557 166.95848083]
[252.15942383 180.31913757]
[257.26730347 194.42266846]
[260.58554077 209.05104065]
[262.06280518 223.97811890]
[261.67630005 238.97314453]
[259.43197632 253.80429077]
[255.36451721 268.24227905]
[249.53683472 282.06393433]
[242.03900146 295.05557251]
[232.98692322 307.01635742]
[222.52055359 317.76135254]
[210.80169678 327.12448120]
[198.01148987 334.96096802]
[184.34768677 341.14971924]
[170.02151489 345.59500122]
[155.25442505 348.22814941]
[140.27473450 349.00839233]
[125.31401062 347.92373657]
[110.60351562 344.99090576]
[96.37068939 340.25524902]
[82.83553314 333.78997803]
[70.20731354 325.69503784]
[58.68124390 316.09558105]
[48.43550491 305.13998413]
[39.62849426 292.99765015]
[32.39635849 279.85623169]
[26.85090065 265.91894531]
[23.07785225 251.40124512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 66]
[13 65]
[14 38]
[15 37]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[47 58]
[48 57]
[49 56]
[50 55]
[68 86]
[69 85]
[70 84]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
