%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACAAACGGGGGGGGGGACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCxxxxxxxxxxACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUCCCCCCCCCCACCAACAAAC\
) } def
/len { sequence length } bind def

/coor [
[54.56669998 377.26663208]
[40.72076035 371.25061035]
[29.01210022 361.72119141]
[20.30957603 349.38552856]
[15.25897312 335.15899658]
[14.23508167 320.09732056]
[17.31388092 305.31814575]
[24.26690292 291.91824341]
[34.57818604 280.89190674]
[47.48256683 273.05737305]
[62.02245331 268.99606323]
[62.02245331 253.99607849]
[62.02245331 238.99607849]
[62.02245331 223.99607849]
[62.02245331 208.99607849]
[62.02245331 193.99607849]
[62.02245331 178.99607849]
[62.02245331 163.99607849]
[62.02245331 148.99607849]
[62.02245331 133.99607849]
[62.02245331 118.99607086]
[49.85061646 110.22986603]
[35.62384033 114.98368073]
[21.39706039 119.73749542]
[7.17028046 124.49131012]
[-7.05649853 129.24513245]
[-21.28327751 133.99894714]
[-29.70516777 147.65365601]
[-45.64850235 149.43962097]
[-56.88291931 137.98678589]
[-54.79033279 122.08078766]
[-40.97600174 113.92335510]
[-26.03709221 119.77216339]
[-11.81031322 115.01834869]
[2.41646576 110.26453400]
[16.64324570 105.51071930]
[30.87002373 100.75690460]
[45.09680176 96.00308990]
[30.77759171 100.47077179]
[15.85644054 98.93479156]
[2.74767900 91.64367676]
[-6.42761803 79.77716827]
[-10.18483353 65.25534821]
[-7.91602755 50.42792511]
[0.01169358 37.69406128]
[12.31557751 29.11417580]
[27.00478363 26.07654381]
[41.70251465 29.07266998]
[54.03058624 37.61776733]
[61.99424362 50.32918167]
[64.30492401 65.15013885]
[60.58761215 79.68485260]
[64.59535217 65.23016357]
[68.60308838 50.77547455]
[72.61083221 36.32078552]
[76.61856842 21.86609650]
[80.62631226 7.41140842]
[66.75541687 1.65138316]
[53.69751740 -5.76959515]
[41.65057373 -14.73902607]
[30.79720497 -25.12093544]
[21.30195427 -36.75793839]
[13.30876160 -49.47361755]
[6.93880367 -63.07520676]
[2.28864789 -77.35651398]
[-0.57121116 -92.10102844]
[-1.59741879 -107.08523560]
[-0.77441776 -122.08198547]
[1.88531542 -136.86390686]
[6.34145975 -151.20693970]
[12.52646160 -164.89363098]
[20.34655762 -177.71647644]
[29.68319702 -189.48112488]
[40.39483643 -200.00920105]
[52.31909561 -209.14109802]
[65.27519989 -216.73840332]
[79.06674194 -222.68591309]
[93.48464966 -226.89349365]
[108.31034088 -229.29733276]
[123.31906891 -229.86100769]
[138.28329468 -228.57597351]
[152.97618103 -225.46170044]
[167.17498779 -220.56539917]
[180.66444397 -213.96130371]
[193.24006653 -205.74952698]
[204.71121216 -196.05455017]
[214.90399170 -185.02337646]
[223.66386414 -172.82319641]
[230.85803223 -159.63897705]
[236.37745667 -145.67060852]
[240.13844299 -131.12982178]
[242.08399963 -116.23705292]
[242.18460083 -101.21807861]
[240.43873596 -86.30058289]
[236.87287903 -71.71071625]
[231.54109192 -57.66965103]
[224.52416992 -44.39024353]
[215.92852783 -32.07381058]
[205.88446045 -20.90706825]
[194.54421997 -11.05929756]
[182.07972717 -2.67978907]
[168.67994690 4.10442591]
[154.54801941 9.19050026]
[139.89817810 12.50133038]
[124.95249939 13.98672485]
[109.93756866 13.62416553]
[95.08100128 11.41914845]
[91.07325745 25.87383652]
[87.06552124 40.32852554]
[83.05777740 54.78321457]
[79.05004120 69.23789978]
[75.04229736 83.69258881]
[96.40704346 72.35536957]
[117.36779785 80.73069000]
[123.99746704 100.61292267]
[138.12226868 105.66167450]
[152.24707031 110.71043396]
[164.98452759 101.84832001]
[180.49763489 102.19925690]
[192.82128906 111.62831116]
[197.21679688 126.50981140]
[191.99400330 141.12152100]
[179.16117859 149.84494019]
[163.65278625 149.32572937]
[151.43214417 139.76354980]
[147.19831848 124.83523560]
[133.07351685 119.78647614]
[118.94871521 114.73772430]
[100.40075684 126.90618896]
[77.02245331 118.99607086]
[77.02245331 133.99607849]
[77.02245331 148.99607849]
[77.02245331 163.99607849]
[77.02245331 178.99607849]
[77.02245331 193.99607849]
[77.02245331 208.99607849]
[77.02245331 223.99607849]
[77.02245331 238.99607849]
[77.02245331 253.99607849]
[77.02245331 268.99606323]
[91.56233978 273.05737305]
[104.46672058 280.89190674]
[114.77800751 291.91824341]
[121.73102570 305.31814575]
[124.80982971 320.09732056]
[123.78593445 335.15899658]
[118.73533630 349.38552856]
[110.03280640 361.72119141]
[98.32415009 371.25061035]
[84.47821045 377.26663208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[52 112]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
