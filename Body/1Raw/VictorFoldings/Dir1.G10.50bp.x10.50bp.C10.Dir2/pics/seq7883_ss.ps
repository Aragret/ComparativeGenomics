%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAAAAAGGGGGGGGGGUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCxxxxxxxxxxGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[207.42691040 200.84654236]
[202.57057190 191.96118164]
[198.27386475 182.79193115]
[194.55332947 173.37399292]
[191.42326355 163.74351501]
[188.89570618 153.93751526]
[186.98039246 143.99362183]
[185.68467712 133.95001221]
[185.01358032 123.84529114]
[184.96968079 113.71823883]
[170.00944519 112.62693024]
[155.04919434 111.53562164]
[140.08894348 110.44431305]
[125.12869263 109.35299683]
[110.16844177 108.26168823]
[95.17575073 107.79364777]
[80.17655945 107.94968414]
[65.17736816 108.10572052]
[50.17818069 108.26175690]
[35.17899323 108.41779327]
[20.17980576 108.57382965]
[5.18305206 108.88588715]
[-9.80964375 109.35392761]
[-1.13278735 121.58962250]
[-5.08381033 136.05992126]
[-18.77483559 142.18820190]
[-32.19882965 135.49519348]
[-35.54394150 120.87294006]
[-26.36575127 109.00942230]
[-41.32600021 107.91811371]
[-56.28624725 106.82680511]
[-71.24649811 105.73549652]
[-86.20674896 104.64418030]
[-101.16699219 103.55287170]
[-109.72730255 116.30500031]
[-123.52386475 123.05410004]
[-138.84548950 121.98469543]
[-151.57070923 113.38446045]
[-158.27653503 99.56680298]
[-157.15911865 84.24861908]
[-148.51902771 71.55040741]
[-134.68041992 64.88793182]
[-119.36581421 66.05335999]
[-106.69474792 74.73320007]
[-100.07568359 88.59262085]
[-85.11543274 89.68393707]
[-70.15518951 90.77524567]
[-55.19493866 91.86655426]
[-40.23468781 92.95786285]
[-25.27444077 94.04917908]
[-10.27768612 94.36122894]
[4.71500969 93.89318848]
[11.34532356 90.51908112]
[20.02376938 93.57463837]
[35.02295685 93.41860199]
[50.02214432 93.26256561]
[65.02133179 93.10652924]
[80.02052307 92.95049286]
[95.01971436 92.79445648]
[97.36713409 90.73933411]
[100.53280640 89.51737213]
[104.20022583 89.44001007]
[107.94001770 90.69377136]
[111.25975800 93.30143738]
[126.22000122 94.39275360]
[141.18025208 95.48406219]
[156.14050293 96.57537079]
[171.10075378 97.66667938]
[186.06100464 98.75799561]
[191.09936523 73.62084961]
[200.00659180 49.58322906]
[212.56274414 27.23656464]
[228.45816040 7.13057375]
[247.30101013 -10.24027920]
[268.62701416 -24.44893074]
[291.91082764 -35.14622879]
[316.57907104 -42.06949615]
[342.02432251 -45.04899597]
[367.62017822 -44.01209641]
[392.73660278 -38.98501587]
[416.75555420 -30.09218788]
[423.66256714 -43.40734100]
[430.56954956 -56.72249985]
[437.47656250 -70.03765106]
[434.02041626 -85.70401001]
[444.22558594 -98.08278656]
[460.26351929 -97.67803955]
[469.83129883 -84.80027008]
[465.58935547 -69.32818604]
[450.79171753 -63.13065720]
[443.88470459 -49.81549835]
[436.97772217 -36.50034332]
[430.07070923 -23.18518829]
[438.66766357 -17.85239029]
[446.91790771 -11.99722004]
[454.78973389 -5.64215326]
[462.25289917 1.18842030]
[469.27874756 8.46828079]
[475.84027100 16.16948128]
[481.91226196 24.26246071]
[487.47134399 32.71614456]
[492.49621582 41.49807739]
[496.96752930 50.57454300]
[500.86807251 59.91069031]
[504.18289185 69.47066498]
[506.89920044 79.21776581]
[509.00656128 89.11456299]
[510.49688721 99.12303925]
[511.36437988 109.20476532]
[511.60574341 119.32102966]
[511.21997070 129.43296814]
[510.20858765 139.50175476]
[508.57543945 149.48872375]
[506.32675171 159.35548401]
[503.47116089 169.06417847]
[500.01962280 178.57748413]
[495.98538208 187.85885620]
[491.38388062 196.87266541]
[486.23281860 205.58427429]
[480.55191040 213.96020508]
[474.36300659 221.96827698]
[467.68981934 229.57774353]
[460.55801392 236.75933838]
[452.99490356 243.48548889]
[445.02957153 249.73034668]
[436.69259644 255.46989441]
[428.01596069 260.68209839]
[419.03298950 265.34689331]
[409.77816772 269.44635010]
[400.28701782 272.96475220]
[390.59603882 275.88851929]
[380.74240112 278.20642090]
[370.76394653 279.90954590]
[360.69900513 280.99130249]
[350.58624268 281.44754028]
[340.46444702 281.27648926]
[330.37255859 280.47879028]
[320.34930420 279.05749512]
[310.43316650 277.01800537]
[300.66226196 274.36813354]
[291.07409668 271.11810303]
[281.70553589 267.28030396]
[272.59252930 262.86950684]
[263.77011108 257.90261841]
[255.27217102 252.39871216]
[247.13134766 246.37887573]
[239.37893677 239.86622620]
[232.04469299 232.88577271]
[225.15681458 225.46430969]
[218.74179077 217.63032532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 52]
[23 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
