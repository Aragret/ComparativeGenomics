%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACACUCAUCACGGGGGGGGGGAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAxxxxxxxxxxUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUACCCCCCCCCCGCAAACUCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[89.28261566 382.62487793]
[75.40848541 376.77661133]
[63.05368042 368.17123413]
[52.75830460 357.18493652]
[44.97242737 344.29797363]
[40.03641510 330.07373047]
[38.16604614 315.13400269]
[39.44308472 300.13189697]
[43.81171036 285.72326660]
[51.08093643 272.53796387]
[60.93299103 261.15240479]
[72.93717957 252.06434631]
[86.56873322 245.67103577]
[101.23174286 242.25196838]
[100.93161011 227.25497437]
[100.63147736 212.25798035]
[100.33134460 197.26098633]
[100.03121185 182.26399231]
[99.73107910 167.26698303]
[99.43094635 152.26998901]
[99.13081360 137.27299500]
[98.83068085 122.27600098]
[86.20450592 114.17787170]
[72.44894409 120.15986633]
[58.69337082 126.14186859]
[44.93780136 132.12387085]
[37.74464417 146.46395874]
[22.01909447 149.63990784]
[9.82445145 139.21540833]
[10.51539993 123.18724060]
[23.56190300 113.85084534]
[38.95580292 118.36830139]
[52.71137238 112.38629913]
[66.46694183 106.40429688]
[80.22251129 100.42230225]
[89.42322540 88.57549286]
[91.81420135 73.76728058]
[94.20517731 58.95906448]
[88.76652527 44.10202408]
[98.43360901 32.77079010]
[100.82458496 17.96257591]
[88.98547363 27.17319489]
[73.99944305 27.82040596]
[61.41032410 19.66478348]
[55.87525940 5.72336912]
[59.44185257 -8.84644222]
[70.79070282 -18.65478897]
[85.72348785 -20.07323265]
[98.71606445 -12.57704449]
[104.96234894 1.06310582]
[109.68315125 -13.17465973]
[106.68222809 -28.70865440]
[118.03189087 -38.35409546]
[112.94596863 -50.24697113]
[117.21199799 -62.03173828]
[128.01733398 -67.54718781]
[133.02207947 -81.68764496]
[138.02682495 -95.82810211]
[143.03157043 -109.96855927]
[148.03631592 -124.10901642]
[153.04106140 -138.24946594]
[145.13362122 -145.54331970]
[141.84266663 -157.32041931]
[145.54791260 -170.51942444]
[148.52944946 -185.22012329]
[151.51097107 -199.92082214]
[154.49250793 -214.62152100]
[148.22163391 -231.90747070]
[160.28369141 -244.62112427]
[162.97047424 -259.37854004]
[165.65727234 -274.13595581]
[151.95370483 -280.43380737]
[140.24739075 -289.94238281]
[131.27421570 -302.06396484]
[125.59821320 -316.03659058]
[123.57620239 -330.98190308]
[125.33528137 -345.96041870]
[130.76487732 -360.03063965]
[139.52366638 -372.30801392]
[151.06108093 -382.02084351]
[164.65187073 -388.55853271]
[179.44169617 -391.51013184]
[194.50085449 -390.69009399]
[208.88272095 -386.14999390]
[221.68324280 -378.17517090]
[232.09776306 -367.26699829]
[239.47161865 -354.11111450]
[243.34127808 -339.53454590]
[243.46350098 -324.45355225]
[239.83059692 -309.81619263]
[232.67092896 -296.54251099]
[222.43457031 -285.46697998]
[209.76496887 -277.28576660]
[195.45857239 -272.51315308]
[180.41468811 -271.44915771]
[177.72789001 -256.69174194]
[175.04110718 -241.93434143]
[181.67498779 -231.77722168]
[179.51824951 -219.43103027]
[169.19320679 -211.63998413]
[166.21166992 -196.93928528]
[163.23014832 -182.23858643]
[160.24861145 -167.53790283]
[171.81396484 -157.98579407]
[185.68646240 -163.69136047]
[199.55897522 -169.39692688]
[211.90768433 -181.01354980]
[226.48878479 -172.36322021]
[222.21296692 -155.95732117]
[205.26454163 -155.52442932]
[191.39202881 -149.81884766]
[177.51953125 -144.11328125]
[167.18151855 -133.24472046]
[162.17677307 -119.10427094]
[157.17202759 -104.96381378]
[152.16728210 -90.82335663]
[147.16253662 -76.68289948]
[142.15779114 -62.54244232]
[146.30381775 -45.51479721]
[132.26965332 -33.63328552]
[135.60824585 -19.11767006]
[123.92092133 -8.45384979]
[119.20011139 5.78391504]
[115.63279724 20.35354996]
[113.24182129 35.16176605]
[118.85149384 48.95962524]
[109.01338959 61.35004044]
[106.62242126 76.15825653]
[104.23144531 90.96646881]
[110.03839111 91.46978760]
[115.75151062 95.53916931]
[119.34191895 102.97087860]
[119.03350830 112.49157715]
[113.82768250 121.97586823]
[114.12781525 136.97286987]
[114.42794037 151.96986389]
[114.72807312 166.96685791]
[115.02820587 181.96385193]
[115.32833862 196.96084595]
[115.62847137 211.95785522]
[115.92860413 226.95484924]
[116.22873688 241.95184326]
[131.01679993 244.78150940]
[144.89323425 250.62429810]
[157.25141907 259.22482300]
[167.55111694 270.20706177]
[175.34205627 283.09097290]
[180.28367615 297.31329346]
[182.15991211 312.25225830]
[180.88877869 327.25488281]
[176.52581787 341.66522217]
[169.26177979 354.85336304]
[159.41421509 366.24279785]
[147.41358948 375.33560181]
[133.78456116 381.73428345]
[119.12290192 385.15908813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 35]
[24 34]
[25 33]
[26 32]
[36 129]
[37 128]
[38 127]
[40 125]
[41 124]
[50 123]
[51 122]
[53 120]
[56 118]
[57 117]
[58 116]
[59 115]
[60 114]
[61 113]
[64 103]
[65 102]
[66 101]
[67 100]
[69 97]
[70 96]
[71 95]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
