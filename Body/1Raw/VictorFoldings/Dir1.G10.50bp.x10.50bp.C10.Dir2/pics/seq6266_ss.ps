%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACAAACCGGGGGGGGGGACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCxxxxxxxxxxCUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUACCCCCCCCCCUCUAUAAACC\
) } def
/len { sequence length } bind def

/coor [
[92.35243225 543.01574707]
[78.50649261 536.99969482]
[66.79783630 527.47027588]
[58.09531021 515.13464355]
[53.04470825 500.90811157]
[52.02081680 485.84643555]
[55.09961319 471.06726074]
[62.05263519 457.66735840]
[72.36392212 446.64102173]
[85.26830292 438.80648804]
[99.80818939 434.74517822]
[99.80818939 419.74517822]
[99.80818939 404.74517822]
[99.80818939 389.74517822]
[99.80818939 374.74517822]
[99.80818939 359.74517822]
[99.80818939 344.74517822]
[99.80818939 329.74517822]
[99.80818939 314.74517822]
[99.80818939 299.74517822]
[84.27614594 295.43255615]
[70.56044006 286.93722534]
[59.76179886 274.93182373]
[52.74941635 260.37109375]
[50.09098434 244.41581726]
[52.00672531 228.34042358]
[58.35119247 213.43118286]
[68.62427521 200.88317871]
[82.01059723 191.70462036]
[97.44426727 186.63581848]
[96.82028961 171.64880371]
[96.19631195 156.66178894]
[95.57233429 141.67477417]
[94.48102570 126.71452332]
[92.92343903 111.79561615]
[86.52645111 125.36316681]
[76.89220428 136.86018372]
[64.65300751 145.53208923]
[50.61212921 150.80976868]
[35.69108963 152.34681702]
[20.86916161 150.04235840]
[7.11912537 144.04766846]
[-4.65659523 134.75613403]
[-13.68514919 122.77760315]
[-19.37398529 108.89823151]
[-21.34973907 94.02891541]
[-19.48274231 79.14556122]
[-13.89552689 65.22496033]
[-4.95478487 53.18074799]
[6.75269365 43.80338287]
[20.45853806 37.70831680]
[35.26322174 35.29557419]
[50.19510269 36.72349930]
[64.27418518 41.89838028]
[76.57645416 50.48058701]
[86.29448700 61.90686035]
[92.79050446 75.42728424]
[95.63845062 90.15933990]
[100.83386230 76.08781433]
[106.02928162 62.01630020]
[111.22469330 47.94477844]
[115.68151093 33.62218094]
[119.38767242 19.08724594]
[115.29997253 3.80322528]
[125.94200134 -6.61773491]
[129.64816284 -21.15267181]
[133.35432434 -35.68760681]
[137.06048584 -50.22254181]
[140.76664734 -64.75747681]
[144.47280884 -79.29241943]
[131.30998230 -86.66820526]
[120.50533295 -97.20015717]
[112.79554749 -110.17018890]
[108.70629120 -124.69397736]
[108.51638031 -139.78126526]
[112.23876190 -154.40338135]
[119.61962891 -167.56336975]
[130.15576172 -178.36395264]
[143.12875366 -186.06872559]
[157.65412903 -190.15235901]
[172.74148560 -190.33645630]
[187.36216736 -186.60842896]
[200.51930237 -179.22247314]
[211.31581116 -168.68218994]
[219.01557922 -155.70620728]
[223.09361267 -141.17926025]
[223.27188110 -126.09182739]
[219.53820801 -111.47258759]
[212.14717102 -98.31831360]
[201.60270691 -87.52587128]
[188.62376404 -79.83111572]
[174.09524536 -75.75868988]
[159.00775146 -75.58625793]
[155.30158997 -61.05131912]
[151.59542847 -46.51638412]
[147.88926697 -31.98144531]
[144.18310547 -17.44651031]
[140.47694397 -2.91157389]
[144.82972717 11.33281040]
[133.92260742 22.79340744]
[130.21644592 37.32834244]
[144.37783813 32.38313675]
[157.18591309 40.19039154]
[159.27900696 55.04364014]
[149.12722778 66.08635712]
[134.15072632 65.24720764]
[125.29621124 53.14019394]
[120.10079956 67.21171570]
[114.90538025 81.28323364]
[109.70996857 95.35475159]
[107.84235382 110.23802948]
[109.39993286 125.15694427]
[112.54846191 129.48202515]
[113.57467651 134.11875916]
[112.72391510 138.19035339]
[110.55934906 141.05079651]
[111.18332672 156.03781128]
[111.80730438 171.02482605]
[112.43128204 186.01184082]
[126.06127930 188.97187805]
[138.56744385 195.12471008]
[149.21484375 204.10340881]
[157.37908936 215.37516785]
[162.58290100 228.27288818]
[164.52404785 242.03465271]
[163.09284973 255.84877014]
[158.37844849 268.90161133]
[150.66317749 280.42553711]
[140.40571594 289.74404907]
[128.21379089 296.31155396]
[114.80818939 299.74517822]
[114.80818939 314.74517822]
[114.80818939 329.74517822]
[114.80818939 344.74517822]
[114.80818939 359.74517822]
[114.80818939 374.74517822]
[114.80818939 389.74517822]
[114.80818939 404.74517822]
[114.80818939 419.74517822]
[114.80818939 434.74517822]
[129.34806824 438.80648804]
[142.25245667 446.64102173]
[152.56373596 457.66735840]
[159.51676941 471.06726074]
[162.59556580 485.84643555]
[161.57167053 500.90811157]
[156.52107239 515.13464355]
[147.81854248 527.47027588]
[136.10987854 536.99969482]
[122.26394653 543.01574707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 119]
[31 118]
[32 117]
[33 116]
[34 112]
[35 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 101]
[63 100]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
[70 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
