%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCUUCUGGGGGGGGGGUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCxxxxxxxxxxUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCCCCCCCCCCCAUAAUCCUCU\
) } def
/len { sequence length } bind def

/coor [
[83.42084503 366.43209839]
[70.20065308 359.15963745]
[59.31384659 348.71261597]
[51.50271606 335.80337524]
[47.29983521 321.31207275]
[46.99176407 306.22671509]
[50.59950256 291.57589722]
[57.87707901 278.35852051]
[68.32828522 267.47573853]
[81.24054718 259.66958618]
[95.73348236 255.47230530]
[95.42142487 240.47555542]
[95.10936737 225.47880554]
[94.79731750 210.48205566]
[94.48526001 195.48529053]
[94.17320251 180.48854065]
[93.86114502 165.49179077]
[93.54908752 150.49504089]
[93.23703003 135.49827576]
[92.92498016 120.50152588]
[83.34424591 115.05465698]
[77.40432739 105.32409668]
[76.90476990 93.55490875]
[82.33650208 82.67623138]
[92.66887665 75.57224274]
[105.52665710 74.32061768]
[101.82049561 59.78568268]
[96.83862305 73.93421936]
[86.90137482 85.17036438]
[73.46786499 91.84426880]
[58.51062012 92.97596741]
[44.22587204 88.39929199]
[32.71112061 78.78625488]
[25.65713310 65.54837799]
[24.09967995 50.62945557]
[28.26744652 36.22009277]
[37.54846191 24.43608856]
[50.57995224 17.00774574]
[65.44844055 15.02580166]
[79.97071075 18.78127480]
[92.01439667 27.72273254]
[99.81083679 40.53663254]
[100.43481445 25.54961777]
[101.05878448 10.56260109]
[93.90225220 -3.54748631]
[102.16229248 -15.94188118]
[102.78627014 -30.92889786]
[102.00642395 -45.90861130]
[99.82958221 -60.74981689]
[97.65274811 -75.59102631]
[87.76355743 -83.93714905]
[86.28620148 -96.38851166]
[93.47293854 -106.16900635]
[91.60532379 -121.05228424]
[89.73770905 -135.93556213]
[87.87009430 -150.81884766]
[84.63227081 -155.07749939]
[83.50981903 -159.69187927]
[84.27568817 -163.78028870]
[86.38027954 -166.68513489]
[85.44465637 -181.65592957]
[76.86163330 -194.94660950]
[83.79000092 -208.13171387]
[82.85437012 -223.10250854]
[81.91873932 -238.07330322]
[80.98311615 -253.04409790]
[66.50699615 -257.60549927]
[54.65863037 -267.09130859]
[47.04041290 -280.21865845]
[44.68264771 -295.21218872]
[47.90419769 -310.04409790]
[56.26937866 -322.70855713]
[68.64686584 -331.49273682]
[83.36270905 -335.20870972]
[98.42671204 -333.35391235]
[111.80158234 -326.17913818]
[121.67848969 -314.65475464]
[126.72165680 -300.33935547]
[126.24904633 -285.16894531]
[120.32456207 -271.19525146]
[109.74945068 -260.30801392]
[95.95390320 -253.97972107]
[96.88953400 -239.00892639]
[97.82516479 -224.03814697]
[98.76078796 -209.06735229]
[107.27689362 -196.84747314]
[100.41544342 -182.59155273]
[101.35107422 -167.62077332]
[102.75337982 -152.68646240]
[104.62098694 -137.80317688]
[106.48860168 -122.91989899]
[108.35621643 -108.03662109]
[119.69837952 -94.68164825]
[112.49394989 -77.76786041]
[114.67079163 -62.92665482]
[116.84762573 -48.08544922]
[124.86177063 -60.76509476]
[138.39556885 -67.23320770]
[153.29565430 -65.50480652]
[164.98939514 -56.11031723]
[169.88812256 -41.93278503]
[166.48847961 -27.32311249]
[155.83378601 -16.76482773]
[141.19381714 -13.49812984]
[127.06139374 -18.52552795]
[117.77328491 -30.30492020]
[117.14930725 -15.31790447]
[124.35047150 -2.27978897]
[116.04580688 11.18657780]
[115.42182922 26.17359352]
[114.79785156 41.16061020]
[116.35543060 56.07952118]
[120.06159210 70.61445618]
[130.38879395 81.49328613]
[144.71139526 85.95009613]
[159.07957458 90.25768280]
[173.49179077 94.41557312]
[187.90400696 98.57345581]
[204.79847717 97.15454102]
[210.83880615 112.99596405]
[197.28858948 123.18557739]
[183.74612427 112.98567200]
[169.33390808 108.82778931]
[154.92169189 104.66989899]
[147.57566833 105.84527588]
[140.25457764 100.27269745]
[125.93198395 95.81587982]
[123.69138336 107.12957001]
[117.07095337 115.73191071]
[107.92173004 120.18946838]
[108.23378754 135.18621826]
[108.54584503 150.18298340]
[108.85790253 165.17973328]
[109.16995239 180.17648315]
[109.48200989 195.17323303]
[109.79406738 210.16999817]
[110.10612488 225.16674805]
[110.41818237 240.16349792]
[110.73023987 255.16024780]
[125.38523102 258.75103760]
[138.61103821 266.01327515]
[149.50590515 276.45187378]
[157.32701111 289.35507202]
[161.54107666 303.84313965]
[161.86079407 318.92825317]
[158.26437378 333.58184814]
[150.99700928 346.80487061]
[140.55419922 357.69570923]
[127.64797211 365.51181030]
[113.15828705 369.72027588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 113]
[27 112]
[42 111]
[43 110]
[44 109]
[46 107]
[47 106]
[48 96]
[49 95]
[50 94]
[53 92]
[54 91]
[55 90]
[56 89]
[60 88]
[61 87]
[63 85]
[64 84]
[65 83]
[66 82]
[114 127]
[115 126]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
