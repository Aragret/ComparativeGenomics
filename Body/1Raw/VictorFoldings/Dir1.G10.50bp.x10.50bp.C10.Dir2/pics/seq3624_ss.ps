%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCAACCCCGGGGGGGGGGCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUxxxxxxxxxxAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCCCCCCCCCCCUAGCCAACCCC\
) } def
/len { sequence length } bind def

/coor [
[95.71899414 428.37893677]
[83.38587952 419.72781372]
[73.28743744 408.54885864]
[65.93018341 395.40280151]
[61.68315887 380.94906616]
[60.75940323 365.91262817]
[63.20524216 351.04769897]
[68.89799500 337.09994507]
[77.55211639 324.76892090]
[88.73352051 314.67318726]
[101.88134766 307.31912231]
[116.33611298 303.07559204]
[115.41270447 288.10406494]
[114.48928833 273.13250732]
[113.56587219 258.16094971]
[112.64246368 243.18940735]
[111.71904755 228.21784973]
[110.79563141 213.24630737]
[109.87222290 198.27474976]
[108.94880676 183.30320740]
[108.02539062 168.33164978]
[105.72451782 153.50917053]
[102.06581116 138.96221924]
[98.40710449 124.41526031]
[94.74839783 109.86830902]
[90.94054413 95.35968018]
[86.98393250 80.89091492]
[76.15893555 73.80408478]
[73.18470001 61.62520218]
[79.13187408 51.04723740]
[75.47316742 36.50028229]
[71.81446075 21.95332909]
[62.87378311 33.99759293]
[48.06416321 36.37987137]
[35.79736328 27.74705124]
[33.04083252 13.00250912]
[41.36025620 0.52103633]
[56.03026962 -2.60798168]
[68.71886444 5.39335060]
[66.87554169 -9.49295712]
[65.03221130 -24.37926483]
[50.02662659 -23.95846748]
[35.04898453 -24.96596527]
[20.23493767 -27.39263344]
[5.71864176 -31.21649361]
[-8.36843681 -36.40291595]
[-21.89871979 -42.90493011]
[-34.74967194 -50.66365433]
[-46.80491257 -59.60881805]
[-57.95526123 -69.65941620]
[-68.09973907 -80.72441864]
[-77.14646912 -92.70362091]
[-85.01352692 -105.48854065]
[-91.62966919 -118.96338654]
[-96.93496704 -133.00613403]
[-100.88137817 -147.48959351]
[-103.43316650 -162.28259277]
[-104.56721497 -177.25119019]
[-104.27325439 -192.25979614]
[-102.55395508 -207.17250061]
[-99.42488098 -221.85424805]
[-94.91436768 -236.17207336]
[-89.06327057 -249.99630737]
[-81.92457581 -263.20175171]
[-73.56293488 -275.66882324]
[-64.05406952 -287.28457642]
[-53.48410416 -297.94387817]
[-41.94876099 -307.55017090]
[-29.55250168 -316.01641846]
[-16.40759850 -323.26599121]
[-2.63309526 -329.23321533]
[11.64626312 -333.86404419]
[26.30115700 -337.11657715]
[41.19886398 -338.96130371]
[56.20446777 -339.38156128]
[71.18206787 -338.37350464]
[85.99603271 -335.94631958]
[100.51219177 -332.12191772]
[114.59907532 -326.93499756]
[128.12911987 -320.43246460]
[140.97979736 -312.67327881]
[153.03469849 -303.72769165]
[164.18469238 -293.67666626]
[174.32876587 -282.61129761]
[183.37506104 -270.63177490]
[191.24165344 -257.84655762]
[197.85729980 -244.37147522]
[203.16207886 -230.32853699]
[207.10797119 -215.84494019]
[209.65921021 -201.05183411]
[210.79272461 -186.08320618]
[210.49821472 -171.07460022]
[208.77836609 -156.16197205]
[205.64875793 -141.48033142]
[201.13772583 -127.16267395]
[195.28613281 -113.33865356]
[188.14694214 -100.13346863]
[179.78485107 -87.66670990]
[170.27557373 -76.05127716]
[159.70521545 -65.39237213]
[148.16950989 -55.78651428]
[135.77294922 -47.32070541]
[122.62778473 -40.07161331]
[108.85305786 -34.10489273]
[94.57353210 -29.47457123]
[79.91852570 -26.22258949]
[81.76184845 -11.33628178]
[83.60517120 3.55002642]
[86.36141205 18.29462242]
[90.02011871 32.84157562]
[93.67882538 47.38853073]
[106.55680847 59.27138519]
[101.45269775 76.93430328]
[105.40930939 91.40306854]
[110.43330383 97.77499390]
[109.29535675 106.20960236]
[112.95406342 120.75655365]
[116.61277008 135.30351257]
[120.27146912 149.85046387]
[126.94548035 136.41700745]
[139.74708557 128.59915161]
[154.74577332 128.79722595]
[167.33647156 136.95039368]
[173.65342712 150.55540466]
[171.75712585 165.43505859]
[162.22978210 177.02082825]
[147.99662781 181.75549316]
[133.42767334 178.18537903]
[122.99694061 167.40823364]
[123.92035675 182.37979126]
[124.84377289 197.35133362]
[125.76718140 212.32289124]
[126.69059753 227.29443359]
[127.61401367 242.26599121]
[128.53742981 257.23754883]
[129.46084595 272.20907593]
[130.38424683 287.18063354]
[131.30766296 302.15219116]
[146.17434692 304.58721924]
[160.12625122 310.26983643]
[172.46356201 318.91497803]
[182.56742859 330.08905029]
[189.93104553 343.23153687]
[194.18507385 357.68319702]
[195.11611938 372.71920776]
[192.67747498 387.58529663]
[186.99148560 401.53582764]
[178.34333801 413.87103271]
[167.16683960 423.97219849]
[154.02256775 431.33261108]
[139.56985474 435.58312988]
[124.53364563 436.51055908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 119]
[23 118]
[24 117]
[25 116]
[26 114]
[27 113]
[30 111]
[31 110]
[32 109]
[39 108]
[40 107]
[41 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
