%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAUCCUAGGGGGGGGGGACUACUACCGCAUUCCUACUACUCAACUUAAACUCCAGCACCACGACCCUxxxxxxxxxxAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUCCCCCCCCCCUCUUAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[83.41447449 399.74765015]
[69.56853485 393.73159790]
[57.85987473 384.20217896]
[49.15734863 371.86651611]
[44.10674667 357.64001465]
[43.08285522 342.57830811]
[46.16165543 327.79916382]
[53.11467743 314.39923096]
[63.42596054 303.37289429]
[76.33034515 295.53839111]
[90.87023163 291.47708130]
[90.87023163 276.47708130]
[90.87023163 261.47708130]
[90.87023163 246.47708130]
[90.87023163 231.47708130]
[90.87023163 216.47708130]
[90.87023163 201.47708130]
[90.87023163 186.47708130]
[90.87023163 171.47708130]
[90.87023163 156.47708130]
[90.87023163 141.47708130]
[87.70465088 134.74472046]
[91.02951050 126.16583252]
[91.34156799 111.16908264]
[83.28896332 123.82434082]
[72.48896790 134.23394775]
[59.54594040 141.81538391]
[45.18419647 146.14437866]
[30.20741463 146.97868347]
[15.45371151 144.27162170]
[1.74871075 138.17465210]
[-10.14064884 129.02899170]
[-19.54903030 117.34642792]
[-25.94993591 103.78072357]
[-28.98516846 89.09101868]
[-28.48487473 74.09936523]
[-24.47704887 59.64469910]
[-17.18597412 46.53591537]
[-7.01966047 35.50658798]
[5.45297766 27.17392159]
[19.53396416 22.00422096]
[34.43532181 20.28678513]
[49.32315826 22.11771965]
[63.36434174 27.39456749]
[75.77312469 35.82202911]
[85.85510254 46.92850494]
[93.04607391 60.09246445]
[96.94364166 74.57724762]
[97.32975006 89.57154083]
[104.78466034 76.55522919]
[112.23957062 63.53892136]
[119.69448090 50.52260971]
[127.14939117 37.50630188]
[134.60430908 24.48999214]
[134.74884033 8.66944599]
[147.78828430 1.47069752]
[155.24319458 -11.54561234]
[162.69810486 -24.56192207]
[156.19563293 -34.13587189]
[153.77716064 -45.40101242]
[155.75918579 -56.69875717]
[161.81315613 -66.38055420]
[171.01927185 -73.04843903]
[182.00602722 -75.75685120]
[193.15446472 -74.14656830]
[201.40675354 -86.67253113]
[209.65904236 -99.19849396]
[217.91133118 -111.72445679]
[206.66665649 -121.69129944]
[196.95492554 -133.15704346]
[188.97386169 -145.88822937]
[182.88595581 -159.62570190]
[178.81513977 -174.08976746]
[176.84429932 -188.98596191]
[177.01354980 -204.01101685]
[179.31944275 -218.85902405]
[183.71504211 -233.22772217]
[190.11085510 -246.82458496]
[198.37667847 -259.37277222]
[208.34420776 -270.61682129]
[219.81054688 -280.32785034]
[232.54225159 -288.30810547]
[246.28009033 -294.39517212]
[260.74441528 -298.46508789]
[275.64071655 -300.43502808]
[290.66577148 -300.26483154]
[305.51364136 -297.95803833]
[319.88204956 -293.56155396]
[333.47851562 -287.16488647]
[346.02618408 -278.89828491]
[357.26962280 -268.93005371]
[366.97994995 -257.46310425]
[374.95944214 -244.73092651]
[381.04565430 -230.99270630]
[385.11465454 -216.52813721]
[387.08367920 -201.63169861]
[386.91256714 -186.60667419]
[384.60482788 -171.75894165]
[380.20745850 -157.39077759]
[373.80993652 -143.79472351]
[365.54257202 -131.24755859]
[355.57363892 -120.00473785]
[344.10610962 -110.29513550]
[331.37341309 -102.31643677]
[317.63482666 -96.23107910]
[303.17001343 -92.16294861]
[288.27343750 -90.19487000]
[273.24844360 -90.36690521]
[258.40084839 -92.67556000]
[244.03295898 -97.07382965]
[230.43730164 -103.47216797]
[222.18501282 -90.94620514]
[213.93272400 -78.42024231]
[205.68043518 -65.89427948]
[213.28509521 -48.89348602]
[209.14833069 -30.58195305]
[194.74728394 -18.30814552]
[175.71441650 -17.10701180]
[168.25950623 -4.09070158]
[160.80459595 8.92560768]
[161.19328308 23.81513977]
[147.62062073 31.94490242]
[140.16571045 44.96121216]
[132.71080017 57.97751999]
[125.25588226 70.99382782]
[117.80097198 84.01013947]
[110.34606171 97.02645111]
[106.33832550 111.48114014]
[106.02626801 126.47789001]
[105.87023163 141.47708130]
[105.87023163 156.47708130]
[105.87023163 171.47708130]
[105.87023163 186.47708130]
[105.87023163 201.47708130]
[105.87023163 216.47708130]
[105.87023163 231.47708130]
[105.87023163 246.47708130]
[105.87023163 261.47708130]
[105.87023163 276.47708130]
[105.87023163 291.47708130]
[120.41011810 295.53839111]
[133.31449890 303.37289429]
[143.62577820 314.39923096]
[150.57879639 327.79916382]
[153.65760803 342.57830811]
[152.63371277 357.64001465]
[147.58311462 371.86651611]
[138.88058472 384.20217896]
[127.17192078 393.73159790]
[113.32598114 399.74765015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[24 128]
[49 127]
[50 126]
[51 125]
[52 124]
[53 123]
[54 122]
[56 120]
[57 119]
[58 118]
[65 114]
[66 113]
[67 112]
[68 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
