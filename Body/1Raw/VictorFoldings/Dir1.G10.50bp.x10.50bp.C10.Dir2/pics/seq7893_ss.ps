%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAAUCUUGGGGGGGGGGUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAxxxxxxxxxxUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCACCCCCCCCCCUAAAAUUCUU\
) } def
/len { sequence length } bind def

/coor [
[8.51765442 211.77688599]
[-0.35702425 203.88243103]
[-8.55305862 195.28549194]
[-16.01502609 186.04420471]
[-22.69246483 176.22105408]
[-28.54022217 165.88249207]
[-33.51875305 155.09840393]
[-37.59439087 143.94172668]
[-40.73957443 132.48789978]
[-42.93303680 120.81437683]
[-44.15994263 109.00009918]
[-59.15913391 109.15613556]
[-74.15831757 109.31217194]
[-89.15750885 109.46820831]
[-104.15670013 109.62424469]
[-119.13641357 110.40409088]
[-134.07072449 111.80639648]
[-149.00502014 113.20870209]
[-163.93933105 114.61100769]
[-178.87364197 116.01330566]
[-193.80795288 117.41561127]
[-208.74226379 118.81791687]
[-218.80812073 130.70555115]
[-233.97361755 131.91494751]
[-245.24462891 122.24542236]
[-260.17892456 123.64772034]
[-275.11325073 125.05002594]
[-290.04754639 126.45233154]
[-304.98187256 127.85463715]
[-319.91616821 129.25694275]
[-326.24548340 143.25105286]
[-338.73321533 152.19262695]
[-354.02026367 153.67640686]
[-367.99450684 147.30326843]
[-376.89688110 134.78755188]
[-378.33273315 119.49592590]
[-371.91583252 105.54175568]
[-359.37225342 96.67864990]
[-344.07620239 95.29073334]
[-330.14221191 101.75135040]
[-321.31848145 114.32263184]
[-306.38415527 112.92032623]
[-291.44985962 111.51802063]
[-276.51556396 110.11572266]
[-261.58123779 108.71341705]
[-246.64694214 107.31111145]
[-237.37295532 95.71244812]
[-222.24742126 94.07756805]
[-210.14456177 103.88360596]
[-195.21025085 102.48130035]
[-180.27593994 101.07900238]
[-165.34164429 99.67669678]
[-150.40733337 98.27439117]
[-135.47302246 96.87208557]
[-120.53871155 95.46978760]
[-118.63517761 93.32878876]
[-115.74162292 91.83837128]
[-112.11109161 91.38990021]
[-108.13711548 92.27228546]
[-104.31273651 94.62506104]
[-89.31354523 94.46902466]
[-74.31435394 94.31298828]
[-59.31517029 94.15695190]
[-44.31597900 94.00091553]
[-42.23089218 74.83127594]
[-37.61096191 56.11020279]
[-30.53852654 38.17133331]
[-21.13963127 21.33437157]
[-9.58178234 5.89939308]
[3.92903519 -7.85852289]
[19.15203094 -19.69418144]
[35.81590271 -29.39664841]
[53.62366486 -36.79300690]
[72.25794220 -41.75143433]
[91.38664246 -44.18356705]
[110.66885376 -44.04605865]
[129.76092529 -41.34135437]
[148.32258606 -36.11766434]
[166.02305603 -28.46808243]
[182.54684448 -18.52894020]
[197.59948730 -6.47737074]
[210.91271973 7.47183990]
[222.24925232 23.07008934]
[235.34240723 15.75098419]
[248.43556213 8.43187809]
[256.70608521 -5.05549431]
[271.59075928 -4.51193285]
[279.86126709 -17.99930573]
[294.74594116 -17.45574379]
[307.83911133 -24.77484894]
[320.93225098 -32.09395599]
[334.02542114 -39.41305923]
[331.30807495 -54.30919647]
[333.57720947 -69.28015900]
[340.58666992 -82.70201874]
[351.57611084 -93.11885834]
[365.35351562 -99.40075684]
[380.42437744 -100.86627960]
[395.15393066 -97.35647583]
[407.94445801 -89.25205231]
[417.40847778 -77.43212128]
[422.51943970 -63.17881775]
[422.72296143 -48.03823090]
[417.99691772 -33.65270615]
[408.85400391 -21.58266830]
[396.28594971 -13.13739204]
[381.65606689 -9.23295498]
[366.55123901 -10.29288101]
[352.60998535 -16.20219803]
[341.34451294 -26.31990623]
[328.25137329 -19.00080109]
[315.15820312 -11.68169498]
[302.06506348 -4.36258936]
[294.73104858 8.60127163]
[278.90985107 8.58122158]
[271.57586670 21.54508209]
[255.75466919 21.52503204]
[242.66151428 28.84413910]
[229.56835938 36.16324234]
[234.37533569 47.02489090]
[238.27362061 58.24477005]
[241.23684692 69.74700928]
[243.24501038 81.45383453]
[244.28448486 93.28607178]
[244.34828186 105.16370392]
[243.43595886 117.00642395]
[241.55366516 128.73414612]
[238.71415710 140.26754761]
[234.93661499 151.52865601]
[230.24659729 162.44131470]
[224.67579651 172.93171692]
[218.26191711 182.92893982]
[211.04832458 192.36537170]
[203.08377075 201.17720032]
[194.42214966 209.30484009]
[185.12200928 216.69332886]
[175.24624634 223.29270935]
[164.86166382 229.05834961]
[154.03845215 233.95124817]
[142.84982300 237.93833923]
[131.37142944 240.99264526]
[119.68088531 243.09352112]
[107.85726166 244.22674561]
[95.98050690 244.38467407]
[84.13092804 243.56623840]
[72.38866425 241.77696228]
[60.83311081 239.02894592]
[49.54241943 235.34077454]
[38.59293747 230.73738098]
[28.05870438 225.24990845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[83 119]
[84 118]
[85 117]
[87 115]
[89 113]
[90 112]
[91 111]
[92 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
