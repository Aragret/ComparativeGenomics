%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAAUCCCCGGGGGGGGGGACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCAxxxxxxxxxxCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGCCCCCCCCCCAUAAAAUCACC\
) } def
/len { sequence length } bind def

/coor [
[85.55022430 368.49465942]
[71.52828217 362.94165039]
[59.32832718 354.07531738]
[49.71725464 342.45300293]
[43.29922867 328.80529785]
[40.47769165 313.99011230]
[41.43000793 298.93875122]
[46.09631348 284.59732056]
[54.18328094 271.86737061]
[65.18255615 261.54907227]
[78.40270996 254.29110718]
[93.01272583 250.54966736]
[93.01272583 235.54966736]
[93.01272583 220.54966736]
[93.01272583 205.54966736]
[93.01272583 190.54966736]
[93.01272583 175.54966736]
[93.01272583 160.54966736]
[93.01272583 145.54966736]
[93.01272583 130.54966736]
[93.01272583 115.54966736]
[89.52698517 111.91706085]
[87.49127197 107.68856812]
[86.92752838 103.37207794]
[87.69511414 99.43076324]
[89.52011108 96.23493195]
[78.53930664 86.01622009]
[67.55850983 75.79751587]
[56.57770538 65.57881165]
[45.18221664 75.35750580]
[32.76350021 83.79879761]
[19.47772598 90.79653168]
[5.49198294 96.26269531]
[-9.01784611 100.12855530]
[-23.86928368 102.34549713]
[-38.87555695 102.88562775]
[-53.84794998 101.74215698]
[-68.59815979 98.92947388]
[-82.94070435 94.48294067]
[-96.69519043 88.45848846]
[-109.68865204 80.93186951]
[-121.75768280 71.99774933]
[-132.75048828 61.76847458]
[-142.52885437 50.37269592]
[-150.96977234 37.95372391]
[-157.96710205 24.66774178]
[-163.43286133 10.68183613]
[-167.29827881 -3.82810879]
[-169.51477051 -18.67961311]
[-170.05445862 -33.68590164]
[-168.91053772 -48.65826035]
[-166.09741211 -63.40839005]
[-161.65045166 -77.75079346]
[-155.62559509 -91.50510406]
[-148.09858704 -104.49833679]
[-139.16410828 -116.56710052]
[-128.93449402 -127.55960846]
[-117.53842926 -137.33763123]
[-105.11920166 -145.77818298]
[-91.83301544 -152.77511597]
[-77.84694672 -158.24044800]
[-63.33688354 -162.10543823]
[-48.48531342 -164.32148743]
[-33.47900772 -164.86071777]
[-18.50668335 -163.71635437]
[-3.75663805 -160.90278625]
[10.58563328 -156.45539856]
[24.33976173 -150.43013000]
[37.33277512 -142.90272522]
[49.40126801 -133.96788025]
[60.39347076 -123.73795319]
[70.17114258 -112.34159088]
[78.61132812 -99.92211151]
[85.60786438 -86.63571167]
[91.07277679 -72.64948273]
[94.93733978 -58.13930511]
[97.15293884 -43.28766632]
[97.69172668 -28.28134537]
[96.54691315 -13.30905628]
[93.73290253 1.44090521]
[89.28508759 15.78304386]
[83.25939941 29.53699112]
[75.73161316 42.52977753]
[66.79640961 54.59800720]
[77.77721405 64.81671143]
[88.75801849 75.03542328]
[99.73881531 85.25412750]
[114.20758820 89.21073914]
[128.86030579 86.00173950]
[143.47932434 82.64247894]
[158.06306458 79.13331604]
[165.47988892 68.53169250]
[177.74459839 65.93391418]
[188.13439941 72.20401764]
[202.78712463 68.99501801]
[217.43984985 65.78602600]
[232.09257507 62.57702637]
[233.67849731 48.30532074]
[239.59391785 35.24439621]
[249.24609375 24.67084312]
[261.67770386 17.61360359]
[275.66186523 14.75385666]
[289.82327271 16.35929108]
[302.77328491 22.25909805]
[313.24621582 31.86204720]
[320.22305298 44.21569824]
[334.93856812 41.30822372]
[345.02731323 28.83437347]
[361.06835938 29.08882332]
[370.75637817 41.87638474]
[366.65957642 57.38753128]
[351.92065430 63.72344208]
[337.84603882 56.02374649]
[323.13052368 58.93122101]
[320.92178345 74.49143219]
[313.51550293 88.38344574]
[301.78744507 98.92564392]
[287.13781738 104.83483124]
[271.32397461 105.38239288]
[256.24978638 100.48409271]
[243.73622131 90.71242523]
[235.30155945 77.22975159]
[220.64883423 80.43875122]
[205.99612427 83.64774323]
[191.34339905 86.85674286]
[179.06959534 99.36267853]
[161.57223511 93.71706390]
[146.98847961 97.22623444]
[141.18522644 101.87751007]
[132.06930542 100.65446472]
[117.41658020 103.86346436]
[108.01272583 115.54966736]
[108.01272583 130.54966736]
[108.01272583 145.54966736]
[108.01272583 160.54966736]
[108.01272583 175.54966736]
[108.01272583 190.54966736]
[108.01272583 205.54966736]
[108.01272583 220.54966736]
[108.01272583 235.54966736]
[108.01272583 250.54966736]
[122.62274170 254.29110718]
[135.84289551 261.54907227]
[146.84217834 271.86737061]
[154.92913818 284.59732056]
[159.59544373 298.93875122]
[160.54776001 313.99011230]
[157.72622681 328.80529785]
[151.30819702 342.45300293]
[141.69712830 354.07531738]
[129.49716187 362.94165039]
[115.47522736 368.49465942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 87]
[27 86]
[28 85]
[29 84]
[88 131]
[89 130]
[90 128]
[91 127]
[94 125]
[95 124]
[96 123]
[97 122]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
