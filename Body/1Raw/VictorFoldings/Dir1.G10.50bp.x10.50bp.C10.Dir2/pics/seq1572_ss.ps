%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCACCUCGGGGGGGGGGUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAxxxxxxxxxxAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCACCCCCCCCCCUCAUCACCUC\
) } def
/len { sequence length } bind def

/coor [
[109.21839905 437.05355835]
[95.37245941 431.03753662]
[83.66379547 421.50811768]
[74.96127319 409.17245483]
[69.91067505 394.94592285]
[68.88677979 379.88424683]
[71.96557617 365.10507202]
[78.91860199 351.70513916]
[89.22988892 340.67883301]
[102.13426971 332.84429932]
[116.67415619 328.78298950]
[116.67415619 313.78298950]
[116.67415619 298.78298950]
[116.67415619 283.78298950]
[116.67415619 268.78298950]
[116.67415619 253.78300476]
[116.67415619 238.78300476]
[116.67415619 223.78300476]
[116.67415619 208.78300476]
[116.67415619 193.78300476]
[116.67415619 178.78300476]
[114.18903351 163.99029541]
[109.28748322 149.81373596]
[104.38593292 135.63717651]
[99.48438263 121.46061707]
[77.33872223 111.10234833]
[76.66206360 82.78070831]
[62.75950623 77.14875031]
[48.85695267 71.51679230]
[34.95439529 65.88483429]
[21.05183983 60.25288010]
[28.77754974 73.11030579]
[29.77143478 88.07734680]
[23.81365776 101.84342194]
[12.22202110 111.36360931]
[-2.43950891 114.53212738]
[-16.92793846 110.64813232]
[-28.03856087 100.57073212]
[-33.31380844 86.52894592]
[-31.58684349 71.62869263]
[-23.23965645 59.16576385]
[-10.11856842 51.89685822]
[4.87609816 51.43018341]
[-7.38627005 42.79106903]
[-23.12401962 41.16815567]
[-29.07222176 27.51282310]
[-41.33459091 18.87370682]
[-53.59695816 10.23459053]
[-65.85932922 1.59547424]
[-81.38661194 4.54148483]
[-94.40199280 -4.42374897]
[-97.18367767 -19.98131371]
[-88.08133698 -32.90118027]
[-72.49523163 -35.51822281]
[-59.67232132 -26.27979469]
[-57.22021103 -10.66689396]
[-44.95784378 -2.02777767]
[-32.69547272 6.61133814]
[-20.43310738 15.25045490]
[-5.57244444 16.25543785]
[1.25284600 30.52869987]
[13.51521397 39.16781616]
[26.68379593 46.35032272]
[40.58635330 51.98228073]
[54.48890686 57.61423874]
[68.39146423 63.24619293]
[82.29402161 68.87815094]
[72.79348755 57.27040482]
[59.75056076 49.86215591]
[50.67663574 37.91795731]
[47.03675842 23.36628151]
[49.41860962 8.55659580]
[57.43762589 -4.11997271]
[69.79907990 -12.61670399]
[84.50713348 -15.56174278]
[99.18705750 -12.47959137]
[111.46869659 -3.86788583]
[119.36907196 8.88295555]
[121.61263275 23.71422195]
[117.83713531 38.23130035]
[108.65386200 50.08884430]
[104.35596466 64.45993042]
[115.01758575 53.90863800]
[125.67921448 43.35734558]
[136.34083557 32.80605698]
[129.52679443 19.29961395]
[127.22197723 4.34825945]
[129.65219116 -10.58322620]
[136.57934570 -24.03200722]
[147.32479858 -34.68051147]
[160.83580017 -41.48550034]
[175.78869629 -43.78030014]
[190.71855164 -41.34008408]
[204.16268921 -34.40391922]
[214.80398560 -23.65134048]
[221.59991455 -10.13577938]
[223.88470459 4.81865072]
[221.43447876 19.74686623]
[214.48930359 33.18635178]
[203.72959900 43.82044601]
[190.20948792 50.60732269]
[175.25352478 52.88208008]
[160.32696533 50.42185974]
[146.89213562 43.46768188]
[136.23049927 54.01897430]
[125.56887817 64.57026672]
[114.90725708 75.12155151]
[124.46477509 89.83939362]
[123.27037811 105.78558350]
[113.66094208 116.55906677]
[118.56249237 130.73562622]
[123.46404266 144.91218567]
[128.36558533 159.08874512]
[131.84169006 144.49707031]
[140.01835632 131.92161560]
[151.94491577 122.82451630]
[166.23466492 118.26348114]
[181.22615051 118.76881409]
[195.17631531 124.28176117]
[206.46321106 134.16134644]
[213.77449036 147.25886536]
[216.26010132 162.05149841]
[213.63102722 176.81929016]
[206.19294739 189.84523010]
[194.81069946 199.61479187]
[180.80766296 204.99208069]
[165.81198120 205.35186768]
[151.56718445 200.65234375]
[139.72949219 191.43989563]
[131.67414856 178.78300476]
[131.67414856 193.78300476]
[131.67414856 208.78300476]
[131.67414856 223.78300476]
[131.67414856 238.78300476]
[131.67414856 253.78300476]
[131.67414856 268.78298950]
[131.67414856 283.78298950]
[131.67414856 298.78298950]
[131.67414856 313.78298950]
[131.67414856 328.78298950]
[146.21403503 332.84429932]
[159.11842346 340.67883301]
[169.42970276 351.70513916]
[176.38272095 365.10507202]
[179.46153259 379.88424683]
[178.43763733 394.94592285]
[173.38703918 409.17245483]
[164.68450928 421.50811768]
[152.97584534 431.03753662]
[139.12991333 437.05355835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 113]
[23 112]
[24 111]
[25 110]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[43 62]
[44 61]
[46 59]
[47 58]
[48 57]
[49 56]
[82 107]
[83 106]
[84 105]
[85 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
