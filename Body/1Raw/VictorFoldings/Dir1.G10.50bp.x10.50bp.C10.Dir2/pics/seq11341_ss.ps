%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUUAUUCGGGGGGGGGGAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUxxxxxxxxxxAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUCCCCCCCCCCUAAACUAUUC\
) } def
/len { sequence length } bind def

/coor [
[107.51682281 454.90414429]
[93.67088318 448.88812256]
[81.96221924 439.35870361]
[73.25969696 427.02304077]
[68.20909882 412.79650879]
[67.18520355 397.73483276]
[70.26399994 382.95565796]
[77.21702576 369.55572510]
[87.52831268 358.52941895]
[100.43269348 350.69488525]
[114.97257996 346.63357544]
[114.97257996 331.63357544]
[114.97257996 316.63357544]
[114.97257996 301.63357544]
[114.97257996 286.63357544]
[114.97257996 271.63357544]
[114.97257996 256.63357544]
[114.97257996 241.63359070]
[114.97257996 226.63359070]
[114.97257996 211.63359070]
[114.97257996 196.63359070]
[113.10496521 181.75030518]
[109.39880371 167.21536255]
[105.69264221 152.68043518]
[101.98648071 138.14549255]
[87.25082397 136.00671387]
[74.45254517 128.39634705]
[65.53645325 116.47085571]
[61.85746002 102.04245758]
[63.97461319 87.30368042]
[71.56619263 74.49423981]
[83.47858429 65.56066132]
[79.77242279 51.02572632]
[76.06626129 36.49079132]
[71.01750183 22.36598969]
[64.67037201 8.77503777]
[58.32324600 -4.81591272]
[51.97611618 -18.40686417]
[45.62898636 -31.99781418]
[39.28185654 -45.58876419]
[24.99591827 -40.95286560]
[10.24855328 -38.10772324]
[-4.73667288 -37.09647369]
[-19.73258591 -37.93444061]
[-34.51185226 -40.60892868]
[-48.85042572 -45.07938766]
[-62.53092957 -51.27804565]
[-75.34597778 -59.11093521]
[-87.10129547 -68.45931244]
[-97.61867523 -79.18145752]
[-106.73867035 -91.11482239]
[-114.32303619 -104.07850647]
[-120.25678253 -117.87597656]
[-124.44996643 -132.29808044]
[-126.83901215 -147.12615967]
[-127.38770294 -162.13543701]
[-126.08773041 -177.09838867]
[-122.95878601 -191.78814697]
[-118.04831696 -205.98205566]
[-111.43076324 -219.46492004]
[-103.20644379 -232.03234863]
[-93.50003052 -243.49380493]
[-82.45867157 -253.67556763]
[-70.24976349 -262.42324829]
[-57.05837631 -269.60427856]
[-43.08449554 -275.10974121]
[-28.53996086 -278.85623169]
[-13.64525986 -280.78689575]
[1.37380397 -280.87252808]
[16.28954697 -279.11175537]
[30.87585068 -275.53134155]
[44.91158676 -270.18554688]
[58.18398285 -263.15539551]
[70.49182892 -254.54743958]
[81.64854431 -244.49223328]
[91.48499298 -233.14216614]
[99.85205078 -220.66932678]
[106.62289429 -207.26278687]
[111.69485474 -193.12577820]
[114.99106598 -178.47264099]
[116.46154022 -163.52548218]
[116.08399200 -148.51092529]
[113.86415100 -133.65657043]
[109.83566284 -119.18759918]
[104.05959320 -105.32337952]
[96.62351990 -92.27407074]
[87.64015961 -80.23751068]
[77.24570465 -69.39615631]
[65.59772491 -59.91437531]
[52.87280655 -51.93589401]
[59.21993637 -38.34494400]
[65.56707001 -24.75399399]
[71.91419983 -11.16304207]
[78.26132965 2.42790842]
[84.60845947 16.01885986]
[88.64379120 1.57185113]
[99.75006104 -8.51034927]
[114.51889038 -11.13364220]
[128.41792297 -5.49297380]
[137.18170166 6.68060732]
[138.12075806 21.65118408]
[130.94688416 34.82447815]
[117.86167908 42.15777206]
[102.88079834 41.40057373]
[90.60119629 32.78462982]
[94.30735779 47.31956863]
[98.01351929 61.85450363]
[112.74917603 63.99328232]
[125.54745483 71.60365295]
[134.46354675 83.52914429]
[138.14254761 97.95754242]
[136.02539062 112.69631958]
[128.43380737 125.50576019]
[116.52141571 134.43933105]
[120.22757721 148.97427368]
[123.93373871 163.50920105]
[127.63990021 178.04414368]
[133.09370422 164.07073975]
[143.98788452 153.75973511]
[158.23992920 149.08219910]
[173.12539673 150.93226624]
[185.79879761 158.95628357]
[193.83747864 171.62039185]
[195.70477295 186.50372314]
[191.04371643 200.76115417]
[180.74533081 211.66726685]
[166.77825928 217.13723755]
[151.81242371 216.12542725]
[138.70869446 208.82525635]
[129.97257996 196.63359070]
[129.97257996 211.63359070]
[129.97257996 226.63359070]
[129.97257996 241.63359070]
[129.97257996 256.63357544]
[129.97257996 271.63357544]
[129.97257996 286.63357544]
[129.97257996 301.63357544]
[129.97257996 316.63357544]
[129.97257996 331.63357544]
[129.97257996 346.63357544]
[144.51246643 350.69488525]
[157.41683960 358.52941895]
[167.72813416 369.55572510]
[174.68115234 382.95565796]
[177.75994873 397.73483276]
[176.73605347 412.79650879]
[171.68545532 427.02304077]
[162.98292542 439.35870361]
[151.27427673 448.88812256]
[137.42832947 454.90414429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 117]
[23 116]
[24 115]
[25 114]
[32 107]
[33 106]
[34 105]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
