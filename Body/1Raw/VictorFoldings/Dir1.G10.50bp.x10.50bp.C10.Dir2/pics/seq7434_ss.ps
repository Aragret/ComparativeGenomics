%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUAACUUGGGGGGGGGGUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCxxxxxxxxxxAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCCCCCCCCCCCUUCAUAAAUU\
) } def
/len { sequence length } bind def

/coor [
[100.03374481 500.52365112]
[87.47552490 492.17248535]
[77.38929749 480.96005249]
[70.40910339 467.59112549]
[66.97372437 452.90612793]
[67.29909515 437.82818604]
[71.36478424 423.30505371]
[78.91519928 410.24972534]
[89.47573090 399.48281860]
[102.38252258 391.68118286]
[116.82425690 387.33523560]
[116.20027924 372.34823608]
[115.57630157 357.36120605]
[114.95232391 342.37417603]
[114.32834625 327.38717651]
[113.70436859 312.40014648]
[113.08039093 297.41314697]
[112.45641327 282.42611694]
[111.83243561 267.43911743]
[111.20845795 252.45208740]
[102.94841766 240.05769348]
[110.10495758 225.94761658]
[108.70265198 211.01330566]
[106.52581787 196.17210388]
[104.34897614 181.33088684]
[92.28385162 172.67247009]
[89.86480713 157.65238953]
[99.02836609 145.05607605]
[96.85152435 130.21487427]
[94.67469025 115.37366486]
[85.74219513 107.83732605]
[84.16653442 96.25703430]
[90.76071167 86.60806274]
[88.89309692 71.72478485]
[87.02548218 56.84150314]
[71.64953613 45.86063385]
[69.15791321 27.45168686]
[80.66158295 13.27201843]
[78.17646790 -1.52068925]
[75.69134521 -16.31339645]
[72.70246124 -19.66422462]
[71.13472748 -23.42098427]
[70.93750763 -27.07379150]
[71.89562988 -30.18441391]
[73.66835785 -32.43492126]
[72.42147827 -47.38300705]
[71.17460632 -62.33109283]
[69.92773438 -77.27918243]
[68.68085480 -92.22726440]
[67.43398285 -107.17535400]
[66.18711090 -122.12344360]
[51.95370483 -124.82006073]
[38.91958237 -131.11459351]
[27.97606087 -140.56958008]
[19.86966705 -152.53170776]
[15.15122414 -166.17691040]
[14.13842297 -180.56712341]
[16.89443779 -194.71482849]
[23.22402573 -207.65080261]
[32.68734360 -218.49049377]
[44.63051605 -226.49449158]
[58.23079300 -231.11903381]
[57.29516220 -246.08982849]
[56.35953522 -261.06060791]
[41.66167450 -264.59109497]
[28.65827179 -272.29843140]
[18.50558281 -283.49728394]
[12.10637856 -297.19186401]
[10.02967072 -312.16445923]
[12.46011829 -327.08370972]
[19.18160820 -340.62304688]
[29.59647179 -351.57849121]
[42.77862167 -358.97595215]
[57.55591583 -362.15762329]
[72.61436462 -360.84057617]
[86.61498260 -355.14196777]
[98.31283569 -345.56848145]
[106.66777039 -332.97140503]
[110.93686676 -318.47085571]
[110.74052429 -303.35620117]
[106.09619141 -288.97143555]
[97.41684723 -276.59564209]
[85.47425079 -267.32925415]
[71.33032990 -261.99624634]
[72.26595306 -247.02545166]
[73.20158386 -232.05467224]
[88.41342926 -228.74957275]
[102.09689331 -221.29718018]
[113.14595032 -210.29058838]
[120.66493988 -196.61051941]
[124.04110718 -181.35491943]
[122.99458313 -165.75076294]
[117.60152435 -151.05541992]
[108.28866577 -138.45530701]
[95.79956055 -128.97010803]
[81.13519287 -123.37031555]
[82.38207245 -108.42222595]
[83.62894440 -93.47414398]
[84.87581635 -78.52605438]
[86.12269592 -63.57796860]
[87.36956787 -48.62988281]
[88.61643982 -33.68179321]
[90.48405457 -18.79851532]
[92.96917725 -4.00580788]
[95.45429230 10.78689957]
[106.02591705 15.27368355]
[113.16934204 24.41912651]
[115.00022125 36.00021744]
[110.94396210 47.12926483]
[101.90876007 54.97388840]
[103.77637482 69.85717010]
[105.64398956 84.74044800]
[116.12131500 97.80645752]
[109.51589203 113.19683075]
[111.69273376 128.03804016]
[113.86956787 142.87924194]
[126.26445770 152.31346130]
[128.26066589 167.39556885]
[119.19018555 179.15405273]
[121.36701965 193.99525452]
[123.54386139 208.83647156]
[134.70881653 198.81929016]
[149.53559875 201.09226990]
[157.18704224 213.99403381]
[152.07054138 228.09443665]
[137.92585754 233.08723450]
[125.09197235 225.32363892]
[133.39663696 238.78999329]
[126.19547272 251.82810974]
[126.81945038 266.81512451]
[127.44342804 281.80215454]
[128.06741333 296.78915405]
[128.69139099 311.77618408]
[129.31536865 326.76318359]
[129.93933105 341.75021362]
[130.56330872 356.73721313]
[131.18728638 371.72424316]
[131.81126404 386.71127319]
[146.56427002 389.84170532]
[160.07490540 396.54345703]
[171.49389648 406.39523315]
[180.10340881 418.77777100]
[185.36224365 432.91268921]
[186.93984985 447.91140747]
[184.73704529 462.83114624]
[178.89230347 476.73400879]
[169.77302551 488.74606323]
[157.95245361 498.11221313]
[144.17364502 504.24371338]
[129.30274963 506.75512695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 127]
[23 121]
[24 120]
[25 119]
[28 116]
[29 115]
[30 114]
[33 112]
[34 111]
[35 110]
[38 105]
[39 104]
[40 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 98]
[50 97]
[51 96]
[62 86]
[63 85]
[64 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
