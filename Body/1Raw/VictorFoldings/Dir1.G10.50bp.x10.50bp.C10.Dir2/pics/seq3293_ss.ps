%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUGGGGGGGGGGCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAxxxxxxxxxxGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUCCCCCCCCCCUCCUAGUCCU\
) } def
/len { sequence length } bind def

/coor [
[50.72109222 381.69812012]
[36.87515259 375.68206787]
[25.16649055 366.15264893]
[16.46396637 353.81698608]
[11.41336536 339.59048462]
[10.38947392 324.52877808]
[13.46827221 309.74963379]
[20.42129517 296.34970093]
[30.73257828 285.32336426]
[43.63695908 277.48886108]
[58.17684555 273.42755127]
[58.17684555 258.42755127]
[58.17684555 243.42755127]
[58.17684555 228.42755127]
[58.17684555 213.42755127]
[58.17684555 198.42755127]
[58.17684555 183.42755127]
[58.17684555 168.42755127]
[58.17684555 153.42755127]
[58.17684555 138.42755127]
[46.57550430 128.91918945]
[31.86754417 131.86466980]
[17.15958214 134.81015015]
[2.45162082 137.75563049]
[-12.25634098 140.70112610]
[-26.96430206 143.64660645]
[-30.26478386 158.51356506]
[-39.33208084 170.74893188]
[-52.59523010 178.23283386]
[-67.75630951 179.66864014]
[-82.18856812 174.80760193]
[-93.39154053 164.49191284]
[-99.42423248 150.50883484]
[-99.24144745 135.28102112]
[-92.87484741 121.44676971]
[-81.42749786 111.40296173]
[-66.88271332 106.88973999]
[-51.76047134 108.68905640]
[-38.68078232 116.48915863]
[-29.90978432 128.93864441]
[-15.20182323 125.99315643]
[-0.49386176 123.04767609]
[14.21409988 120.10219574]
[28.92206192 117.15670776]
[43.63002396 114.21122742]
[46.57550430 99.50326538]
[34.13606644 91.12112427]
[21.69662476 82.73898315]
[9.25718403 74.35683441]
[-3.18225598 65.97469330]
[-19.69633675 62.13784027]
[-20.58098221 45.20698929]
[-4.55668974 39.66999054]
[5.19988728 53.53525162]
[17.63932800 61.91739655]
[30.07876778 70.29953766]
[42.51820755 78.68168640]
[54.95764923 87.06382751]
[61.92660141 75.25701141]
[71.75694275 66.32492828]
[83.40175629 60.88092804]
[95.71261597 59.18597031]
[107.55136871 61.14453125]
[117.89501190 66.33423615]
[127.40337372 54.73289490]
[136.91172791 43.13155365]
[133.36663818 22.20923424]
[151.92924500 5.73082161]
[155.33222961 -8.87807083]
[158.73519897 -23.48696327]
[145.49580383 -30.74097633]
[134.70526123 -41.29876328]
[127.16432190 -54.37686920]
[123.43257141 -69.00480652]
[123.78692627 -84.09709167]
[128.20109558 -98.53377533]
[136.34750366 -111.24355316]
[147.62165833 -121.28327942]
[161.18692017 -127.90794373]
[176.03666687 -130.62594604]
[191.06895447 -129.23559570]
[205.16827393 -123.84006500]
[217.28837585 -114.83973694]
[226.52984619 -102.90249634]
[232.20692444 -88.91416931]
[233.89834595 -73.91278076]
[231.47856140 -59.01153183]
[225.12716675 -45.31619263]
[215.31546021 -33.84305191]
[202.77153015 -25.44348907]
[188.42623901 -20.74081039]
[173.34410095 -20.08398628]
[169.94111633 -5.47509289]
[166.53814697 9.13379955]
[177.62945557 19.23244858]
[191.85623169 14.47863483]
[206.08302307 9.72481918]
[220.30979919 4.97100496]
[234.53657532 0.21718988]
[236.40832520 -14.93072319]
[244.67437744 -27.76174927]
[257.69348145 -35.72827530]
[272.88070679 -37.24854660]
[287.22058105 -32.02070618]
[297.86596680 -21.08275223]
[302.70315552 -6.60641909]
[300.77175903 8.53400612]
[292.45526123 21.33238029]
[279.40487671 29.24757767]
[264.21179199 30.70802879]
[249.89260864 25.42376137]
[239.29039001 14.44396877]
[225.06361389 19.19778442]
[210.83683777 23.95159912]
[196.61004639 28.70541382]
[182.38327026 33.45922852]
[168.73745728 52.77047348]
[148.51307678 52.63991165]
[139.00471497 64.24124908]
[129.49635315 75.84259033]
[135.44795227 83.92974091]
[139.17509460 93.47470856]
[140.32438660 103.86397552]
[138.71194458 114.39974976]
[134.34297180 124.34685516]
[127.41847992 132.98393250]
[118.32795715 139.65557861]
[107.62841797 143.82138062]
[96.01060486 145.09855652]
[84.25447083 143.29461670]
[73.17684937 138.42755127]
[73.17684937 153.42755127]
[73.17684937 168.42755127]
[73.17684937 183.42755127]
[73.17684937 198.42755127]
[73.17684937 213.42755127]
[73.17684937 228.42755127]
[73.17684937 243.42755127]
[73.17684937 258.42755127]
[73.17684937 273.42755127]
[87.71673584 277.48886108]
[100.62111664 285.32336426]
[110.93239594 296.34970093]
[117.88542175 309.74963379]
[120.96421814 324.52877808]
[119.94033051 339.59048462]
[114.88972473 353.81698608]
[106.18720245 366.15264893]
[94.47853851 375.68206787]
[80.63259888 381.69812012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[64 120]
[65 119]
[66 118]
[68 94]
[69 93]
[70 92]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
