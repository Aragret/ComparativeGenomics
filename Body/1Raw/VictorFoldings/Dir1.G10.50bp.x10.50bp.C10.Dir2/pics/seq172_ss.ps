%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAGGACAUAAGGGGGGGGGGUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACxxxxxxxxxxUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCCCCCCCCCCCUGUAGUACAUAA\
) } def
/len { sequence length } bind def

/coor [
[93.85704041 415.76824951]
[80.64895630 408.53216553]
[69.30551910 398.62561035]
[60.35726166 386.51184082]
[54.22272491 372.75753784]
[51.18882751 358.00592041]
[51.39746857 342.94702148]
[54.83889008 328.28515625]
[61.35213470 314.70605469]
[70.63256073 302.84487915]
[82.24610901 293.25634766]
[95.64958954 286.38900757]
[110.21610260 282.56396484]
[109.60822296 267.57629395]
[109.00033569 252.58862305]
[108.39245605 237.60093689]
[107.78456879 222.61326599]
[107.17668915 207.62557983]
[106.56880188 192.63790894]
[105.96092224 177.65023804]
[105.35303497 162.66255188]
[104.74515533 147.67488098]
[104.13726807 132.68719482]
[87.92859650 129.36007690]
[75.96121216 118.83952332]
[70.98552704 104.34793854]
[73.74070740 89.89838409]
[82.90712738 79.18724823]
[76.99179077 65.40287781]
[71.07644653 51.61851501]
[65.16110992 37.83414459]
[59.24577332 24.04977798]
[46.78088760 23.95919800]
[35.15872955 18.29179192]
[26.83130264 7.79912615]
[23.74146652 -5.71304131]
[26.88290215 -19.69075203]
[13.69460678 -26.83699799]
[0.50630987 -33.98324585]
[-12.68198681 -41.12948990]
[-25.87028313 -48.27573776]
[-39.05857849 -55.42198181]
[-50.18998337 -45.15696335]
[-64.05230713 -39.06477737]
[-79.14186859 -37.80625534]
[-93.82186127 -41.51791382]
[-106.49991608 -49.79714203]
[-115.80081177 -61.74586868]
[-120.71566010 -76.06798553]
[-120.71131897 -91.20993805]
[-115.78827667 -105.52923584]
[-106.48054504 -117.47263336]
[-93.79775238 -125.74460602]
[-79.11563110 -129.44786072]
[-64.02679443 -128.18069458]
[-50.16796112 -122.08057404]
[-39.04243851 -111.80918121]
[-31.85703659 -98.48069000]
[-29.39117622 -83.54087067]
[-31.91233253 -68.61028290]
[-18.72403717 -61.46403503]
[-5.53574038 -54.31778717]
[7.65255594 -47.17153931]
[20.84085274 -40.02529526]
[34.02914810 -32.87904739]
[47.69079971 -39.07253647]
[51.00743866 -53.70127487]
[54.32407761 -68.33000946]
[57.64071655 -82.95874786]
[44.00976181 -89.36273956]
[32.07443619 -98.54762268]
[22.39298058 -110.08380890]
[15.41821003 -123.43171692]
[11.47634792 -137.96704102]
[10.75176239 -153.00994873]
[13.27834415 -167.85685730]
[18.93791962 -181.81332397]
[27.46578026 -194.22660828]
[38.46306610 -204.51611328]
[51.41540527 -212.20057678]
[65.71700287 -216.92057800]
[80.69894409 -218.45535278]
[95.66049194 -216.73312378]
[109.90187836 -211.83444214]
[122.75699615 -203.98841858]
[133.62458801 -193.56204224]
[141.99636841 -181.04295349]
[147.48077393 -167.01672363]
[149.82127380 -152.13934326]
[148.90841675 -137.10668945]
[144.78488159 -122.62185669]
[137.64353943 -109.36231232]
[127.81840515 -97.94824982]
[115.76902008 -88.91351318]
[102.05895996 -82.68067932]
[87.32946014 -79.54125977]
[72.26945496 -79.64210510]
[68.95281219 -65.01337433]
[65.63617706 -50.38463593]
[62.31953430 -35.75589752]
[81.16294861 -21.42395401]
[84.81506348 0.65401822]
[73.03014374 18.13444138]
[78.94548035 31.91880798]
[84.86081696 45.70317459]
[90.77615356 59.48754120]
[96.69149017 73.27191162]
[114.22404480 74.79982758]
[128.25454712 87.38529968]
[132.17449951 107.09725952]
[147.04452515 109.06771088]
[161.91453552 111.03816223]
[169.49580383 97.86270142]
[181.54507446 88.59535217]
[196.22489929 84.64932251]
[211.29670715 86.62634277]
[224.46218872 94.22493744]
[233.71368408 106.28637695]
[237.64039612 120.97138214]
[235.64355469 136.04058838]
[228.02764893 149.19606018]
[215.95404053 158.43167114]
[201.26388550 162.33908081]
[186.19731140 160.32240295]
[173.05187988 152.68919373]
[163.83215332 140.60345459]
[159.94407654 125.90818024]
[145.07406616 123.93772888]
[130.20405579 121.96726990]
[119.12494659 132.07931519]
[119.73283386 147.06698608]
[120.34071350 162.05467224]
[120.94860077 177.04234314]
[121.55648041 192.03002930]
[122.16436768 207.01770020]
[122.77224731 222.00538635]
[123.38013458 236.99305725]
[123.98801422 251.98072815]
[124.59590149 266.96841431]
[125.20378113 281.95608521]
[140.03221130 284.58889771]
[153.94783020 290.34820557]
[166.29974365 298.96472168]
[176.51026917 310.03536987]
[184.10180664 323.04238892]
[188.71931458 337.37741089]
[190.14682007 352.36993408]
[188.31753540 367.31878662]
[183.31703186 381.52474976]
[175.37919617 394.32336426]
[164.87528992 405.11605835]
[152.29661560 413.39801025]
[138.23146057 418.78186035]
[123.33772278 421.01580811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[28 107]
[29 106]
[30 105]
[31 104]
[32 103]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[66 100]
[67 99]
[68 98]
[69 97]
[110 129]
[111 128]
[112 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
