%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAAUAAUCGGGGGGGGGGUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUxxxxxxxxxxGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACCCCCCCCCCCUACUACUAAUC\
) } def
/len { sequence length } bind def

/coor [
[79.18784332 158.47727966]
[65.79930115 151.79817200]
[54.39799881 142.10932922]
[45.64639664 129.97372437]
[40.05301285 116.09648895]
[37.94285202 101.28397369]
[39.43852615 86.39685059]
[44.45312119 72.30013275]
[52.69527435 59.81292725]
[63.68606567 49.66078568]
[76.78688049 42.43360901]
[91.23649597 38.55133057]
[90.92852020 23.55449295]
[90.62054443 8.55765438]
[90.31256866 -6.43918419]
[90.00458527 -21.43602180]
[89.69660950 -36.43286133]
[89.38863373 -51.42969894]
[89.08065796 -66.42653656]
[88.77267456 -81.42337036]
[88.46469879 -96.42021179]
[88.15672302 -111.41705322]
[87.84874725 -126.41388702]
[87.54076385 -141.41072083]
[72.54783630 -142.00021362]
[57.61699295 -143.48529053]
[42.80168915 -145.86064148]
[28.15495682 -149.11776733]
[13.72923279 -153.24499512]
[-0.42384538 -158.22755432]
[-14.25361252 -164.04760742]
[-27.71056175 -170.68432617]
[-40.74652100 -178.11395264]
[-53.31482315 -186.30987549]
[-65.37047577 -195.24278259]
[-76.87032318 -204.88067627]
[-87.77320862 -215.18905640]
[-98.04008484 -226.13102722]
[-107.63420868 -237.66741943]
[-116.52123260 -249.75692749]
[-124.66934967 -262.35629272]
[-132.04937744 -275.42037964]
[-138.63491821 -288.90243530]
[-144.40237427 -302.75424194]
[-149.33111572 -316.92614746]
[-153.40350342 -331.36743164]
[-156.60493469 -346.02645874]
[-158.92396545 -360.85067749]
[-160.35231018 -375.78704834]
[-160.88482666 -390.78210449]
[-160.51960754 -405.78219604]
[-159.25799561 -420.73358154]
[-157.10446167 -435.58273315]
[-154.06675720 -450.27655029]
[-150.15573120 -464.76235962]
[-145.38539124 -478.98837280]
[-139.77279663 -492.90365601]
[-133.33807373 -506.45834351]
[-126.10423279 -519.60394287]
[-118.09717560 -532.29339600]
[-109.34556580 -544.48132324]
[-99.88072968 -556.12402344]
[-89.73655701 -567.17980957]
[-78.94934845 -577.60919189]
[-67.55772400 -587.37475586]
[-55.60247040 -596.44158936]
[-43.12638092 -604.77722168]
[-30.17411232 -612.35180664]
[-16.79203606 -619.13824463]
[-3.02805328 -625.11218262]
[11.06856251 -630.25231934]
[25.44734955 -634.54022217]
[40.05683517 -637.96051025]
[54.84471893 -640.50097656]
[69.75806427 -642.15252686]
[84.74348450 -642.90924072]
[99.74734497 -642.76843262]
[114.71591949 -641.73052979]
[129.59564209 -639.79931641]
[144.33322144 -636.98168945]
[158.87593079 -633.28771973]
[173.17169189 -628.73065186]
[187.16932678 -623.32684326]
[200.81874084 -617.09552002]
[214.07106018 -610.05908203]
[226.87884521 -602.24267578]
[239.19625854 -593.67431641]
[250.97920227 -584.38464355]
[262.18548584 -574.40698242]
[272.77502441 -563.77691650]
[282.70986938 -552.53265381]
[291.95446777 -540.71429443]
[300.47573853 -528.36425781]
[308.24319458 -515.52673340]
[315.22897339 -502.24765015]
[321.40811157 -488.57452393]
[326.75848389 -474.55636597]
[331.26092529 -460.24331665]
[334.89932251 -445.68661499]
[337.66067505 -430.93838501]
[339.53506470 -416.05139160]
[340.51577759 -401.07894897]
[340.59933472 -386.07467651]
[339.78543091 -371.09225464]
[338.07696533 -356.18533325]
[335.48004150 -341.40725708]
[332.00399780 -326.81091309]
[327.66122437 -312.44860840]
[322.46731567 -298.37173462]
[316.44085693 -284.63064575]
[309.60339355 -271.27456665]
[301.97940063 -258.35131836]
[293.59619141 -245.90715027]
[284.48379517 -233.98660278]
[274.67480469 -222.63235474]
[264.20431519 -211.88504028]
[253.10984802 -201.78314209]
[241.43110657 -192.36282349]
[229.20988464 -183.65782166]
[216.48992920 -175.69926453]
[203.31680298 -168.51567078]
[189.73764038 -162.13273621]
[175.80105591 -156.57331848]
[161.55693054 -151.85733032]
[147.05627441 -148.00163269]
[132.35098267 -145.02005005]
[117.49369812 -142.92323303]
[102.53760529 -141.71870422]
[102.84558105 -126.72186279]
[103.15355682 -111.72502899]
[103.46154022 -96.72818756]
[103.76951599 -81.73135376]
[104.07749176 -66.73451233]
[104.38546753 -51.73767471]
[104.69345093 -36.74083710]
[105.00142670 -21.74399948]
[105.30940247 -6.74716139]
[105.61737823 8.24967670]
[105.92536163 23.24651527]
[106.23333740 38.24335098]
[120.83015442 41.52912903]
[134.21664429 48.21236038]
[145.61495972 57.90471268]
[154.36282349 70.04301453]
[159.95193481 83.92196655]
[162.05754089 98.73513031]
[160.55728149 113.62179565]
[155.53834534 127.71695709]
[147.29235840 140.20162964]
[136.29843140 150.35038757]
[123.19539642 157.57353210]
[108.74458313 161.45137024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
