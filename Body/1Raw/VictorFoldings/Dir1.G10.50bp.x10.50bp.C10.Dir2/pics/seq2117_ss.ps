%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACUAGAAAGGGGGGGGGGUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUAxxxxxxxxxxUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCCCCCCCCCCCUGACUAGAAA\
) } def
/len { sequence length } bind def

/coor [
[83.90015411 535.91937256]
[71.34193420 527.56817627]
[61.25571060 516.35577393]
[54.27551651 502.98684692]
[50.84013367 488.30184937]
[51.16550827 473.22387695]
[55.23119354 458.70077515]
[62.78161240 445.64541626]
[73.34214020 434.87854004]
[86.24893951 427.07690430]
[100.69066620 422.73095703]
[100.06668854 407.74392700]
[99.44271088 392.75692749]
[98.81873322 377.76989746]
[98.19475555 362.78289795]
[97.57077789 347.79586792]
[96.94680023 332.80883789]
[96.32282257 317.82183838]
[95.69884491 302.83480835]
[95.07486725 287.84780884]
[94.45088959 272.86077881]
[81.35934448 269.42687988]
[69.75881195 262.42227173]
[60.60126495 252.41056824]
[54.64134216 240.20271301]
[52.37416840 226.79109192]
[53.99423599 213.26904297]
[59.37876511 200.74159241]
[68.09693909 190.23521423]
[79.44436646 182.61370850]
[92.50000000 178.50720215]
[92.50000000 163.50720215]
[92.50000000 148.50720215]
[92.50000000 133.50720215]
[92.50000000 118.50719452]
[82.51727295 107.31143188]
[67.61537170 105.59873962]
[52.71347046 103.88604736]
[37.89151001 110.90328217]
[24.55916595 101.35443115]
[26.43160820 85.06253052]
[41.58263016 78.78729248]
[54.42615891 88.98414612]
[69.32806396 90.69683838]
[84.22996521 92.40952301]
[93.85848999 80.90772247]
[89.55090332 66.53953552]
[85.24331665 52.17135620]
[80.93573761 37.80316925]
[68.70101929 35.15273666]
[58.86824417 27.54900742]
[53.30521393 16.53285789]
[53.02694702 4.28361225]
[58.01131058 -6.81196356]
[48.74636078 -18.60860443]
[33.24579239 -17.89308357]
[20.30353928 -26.45332336]
[14.89616203 -40.99773407]
[19.10290718 -55.93369675]
[31.30619812 -65.51802063]
[46.81361771 -66.06534576]
[59.66224670 -57.36521530]
[64.91152954 -42.76300049]
[60.54300308 -27.87355232]
[69.80795288 -16.07691383]
[71.52603149 -16.71547890]
[73.28288269 -17.23804474]
[73.59493256 -32.23479843]
[73.90699005 -47.23155212]
[60.10865021 -53.67558670]
[50.12916183 -65.17905426]
[45.69754028 -79.74890900]
[47.58158875 -94.86083221]
[55.45487976 -107.89659119]
[67.95332336 -116.59767151]
[82.91149139 -119.45655060]
[97.73778534 -115.97791290]
[109.86345673 -106.76445007]
[117.18766785 -93.41245270]
[118.44145203 -78.23522949]
[113.40758514 -63.86233902]
[102.95820618 -52.78396225]
[88.90374756 -46.91949463]
[88.59169006 -31.92274284]
[88.27963257 -16.92598915]
[104.47969055 -4.26741171]
[107.49011230 16.32216644]
[95.30391693 33.49558640]
[99.61150360 47.86376953]
[103.91909027 62.23195648]
[108.22667694 76.60013580]
[110.72473145 81.99917603]
[111.48900604 87.33032990]
[110.66957855 92.13890839]
[124.68628693 86.79739380]
[138.70300293 81.45588684]
[138.45040894 66.29962921]
[143.39973450 51.97203445]
[152.95330811 40.20322037]
[165.95750427 32.41433334]
[180.84199524 29.54591751]
[195.80940247 31.94434547]
[209.05235291 39.31999969]
[218.97167969 50.78223038]
[224.36958313 64.94692230]
[224.59423828 80.10361481]
[219.61851501 94.42206573]
[210.04327393 106.17325592]
[197.02474976 113.93816376]
[182.13499451 116.77914429]
[167.17202759 114.35313416]
[153.94270325 106.95308685]
[144.04450989 95.47259521]
[130.02780151 100.81410980]
[116.01109314 106.15562439]
[107.50000000 118.50719452]
[107.50000000 133.50720215]
[107.50000000 148.50720215]
[107.50000000 163.50720215]
[107.50000000 178.50720215]
[123.15725708 183.96644592]
[135.99468994 194.42143250]
[144.48446655 208.60537720]
[147.62387085 224.80911255]
[145.05368042 241.08695984]
[137.09918213 255.49038696]
[124.72917175 266.30126953]
[109.43791199 272.23681641]
[110.06188965 287.22381592]
[110.68585968 302.21084595]
[111.30983734 317.19784546]
[111.93381500 332.18487549]
[112.55779266 347.17187500]
[113.18177032 362.15890503]
[113.80574799 377.14593506]
[114.42972565 392.13293457]
[115.05370331 407.11996460]
[115.67768097 422.10696411]
[130.43067932 425.23742676]
[143.94132996 431.93917847]
[155.36030579 441.79095459]
[163.96981812 454.17349243]
[169.22866821 468.30838013]
[170.80627441 483.30712891]
[168.60346985 498.22686768]
[162.75871277 512.12969971]
[153.63943481 524.14178467]
[141.81886292 533.50793457]
[128.04005432 539.63940430]
[113.16915131 542.15081787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[31 120]
[32 119]
[33 118]
[34 117]
[35 116]
[36 45]
[37 44]
[38 43]
[46 91]
[47 90]
[48 89]
[49 88]
[54 65]
[55 64]
[67 85]
[68 84]
[69 83]
[94 115]
[95 114]
[96 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
