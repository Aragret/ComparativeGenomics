%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUAAACGGGGGGGGGGCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGxxxxxxxxxxUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACCCCCCCCCCCAGCCCUAUAC\
) } def
/len { sequence length } bind def

/coor [
[61.13329315 387.04608154]
[47.91309738 379.77362061]
[37.02629471 369.32659912]
[29.21516228 356.41735840]
[25.01228142 341.92605591]
[24.70420837 326.84069824]
[28.31195068 312.18988037]
[35.58952332 298.97250366]
[46.04072952 288.08972168]
[58.95299149 280.28356934]
[73.44593048 276.08630371]
[73.13387299 261.08953857]
[72.82181549 246.09278870]
[72.50975800 231.09603882]
[72.19770813 216.09927368]
[71.88565063 201.10252380]
[71.57359314 186.10577393]
[71.26153564 171.10902405]
[70.94947815 156.11225891]
[70.63742065 141.11550903]
[65.03954315 136.12414551]
[61.99202347 150.81130981]
[47.74877548 155.51554871]
[36.55322647 145.53257751]
[39.60106659 130.84548950]
[53.84377289 126.14141846]
[48.24589157 121.15005493]
[33.31158447 122.55236053]
[18.37727547 123.95466614]
[3.44296861 125.35697174]
[-2.88633680 139.35108948]
[-15.37408638 148.29266357]
[-30.66113853 149.77644348]
[-44.63535309 143.40330505]
[-53.53773499 130.88758850]
[-54.97359085 115.59595490]
[-48.55668259 101.64178467]
[-36.01312256 92.77867889]
[-20.71706963 91.39076233]
[-6.78308201 97.85137939]
[2.04066515 110.42266083]
[16.97497368 109.02035522]
[31.90928078 107.61804962]
[46.84358978 106.21575165]
[51.44915390 91.94029236]
[40.15014648 82.07456970]
[28.85114288 72.20883942]
[17.55213737 62.34312057]
[6.25313330 52.47739792]
[-6.68699789 52.56019592]
[-15.90132713 44.05636978]
[-16.79471207 31.95227051]
[-27.88602638 21.85362053]
[-44.01435852 18.88563728]
[-49.25248337 3.34555769]
[-38.21186829 -8.78031635]
[-22.25015068 -5.01792574]
[-17.78737831 10.76230526]
[-6.69606209 20.86095428]
[10.60339451 23.64101601]
[16.11885643 41.17839050]
[27.41786194 51.04411697]
[38.71686554 60.90983963]
[50.01586914 70.77555847]
[61.31487656 80.64128113]
[91.50314331 65.08441925]
[116.84163666 76.87145996]
[128.54125977 67.48429871]
[121.98928070 53.92415619]
[118.62088013 39.25302124]
[118.60186005 24.20740509]
[121.92995453 9.54189205]
[128.43511963 -4.00871944]
[137.78820801 -15.76622391]
[149.51760864 -25.14295387]
[163.03308105 -31.67115402]
[177.65534973 -35.02631760]
[192.65039062 -35.04330444]
[207.26614380 -31.72448158]
[220.77030945 -25.23943138]
[232.48701477 -15.91629505]
[244.18663025 -25.30345726]
[255.88626099 -34.69061661]
[267.58587646 -44.07778168]
[279.28549194 -53.46494293]
[273.06063843 -67.20181274]
[270.44836426 -82.05532837]
[271.61288452 -97.09177399]
[276.48101807 -111.36595154]
[284.74673462 -123.98056793]
[295.89047241 -134.14266968]
[309.21170044 -141.21343994]
[323.87301636 -144.74841309]
[338.95285034 -144.52539062]
[353.50323486 -140.55838013]
[366.60952759 -133.09674072]
[377.44784546 -122.60954285]
[385.33691406 -109.75599670]
[389.78079224 -95.34410095]
[390.50012207 -80.27979279]
[387.44973755 -65.51003265]
[380.82135010 -51.96325302]
[371.03161621 -40.49102402]
[358.69595337 -31.81449127]
[344.58978271 -26.47907448]
[329.59982300 -24.82016182]
[314.66836548 -26.94203377]
[300.73400879 -32.71130753]
[288.67266846 -41.76531982]
[276.97305298 -32.37815475]
[265.27340698 -22.99099541]
[253.57379150 -13.60383320]
[241.87417603 -4.21667099]
[248.43646240 9.24208736]
[251.84074402 23.83075523]
[251.91314697 38.81840515]
[248.64680481 53.45338058]
[242.20242310 67.00100708]
[232.90028381 78.78044891]
[221.20437622 88.19894409]
[207.69929504 94.78163147]
[193.06092834 98.19548035]
[178.02268982 98.26614380]
[163.33877563 94.98686218]
[149.74633789 88.51896667]
[137.92842102 79.18392181]
[126.22879791 88.57109070]
[131.31683350 111.87667084]
[116.16835785 134.80364990]
[85.63417816 140.80345154]
[85.94623566 155.80020142]
[86.25829315 170.79696655]
[86.57034302 185.79371643]
[86.88240051 200.79046631]
[87.19445801 215.78721619]
[87.50651550 230.78398132]
[87.81857300 245.78073120]
[88.13063049 260.77749634]
[88.44268036 275.77423096]
[103.09767151 279.36499023]
[116.32348633 286.62725830]
[127.21835327 297.06585693]
[135.03944397 309.96905518]
[139.25352478 324.45712280]
[139.57324219 339.54223633]
[135.97682190 354.19583130]
[128.70945740 367.41885376]
[118.26664734 378.30969238]
[105.36042023 386.12579346]
[90.87072754 390.33425903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 44]
[28 43]
[29 42]
[30 41]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[52 59]
[53 58]
[67 127]
[68 126]
[81 113]
[82 112]
[83 111]
[84 110]
[85 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
