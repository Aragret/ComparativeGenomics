%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAGCCAGGGGGGGGGGCACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUxxxxxxxxxxUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUACCCCCCCCCCAACCUAGCCA\
) } def
/len { sequence length } bind def

/coor [
[124.90647888 651.99908447]
[111.06053925 645.98309326]
[99.35187531 636.45367432]
[90.64935303 624.11798096]
[85.59874725 609.89147949]
[84.57485962 594.82977295]
[87.65365601 580.05065918]
[94.60668182 566.65069580]
[104.91796112 555.62438965]
[117.82234192 547.78985596]
[132.36222839 543.72857666]
[132.36222839 528.72857666]
[132.36222839 513.72857666]
[132.36222839 498.72854614]
[132.36222839 483.72854614]
[132.36222839 468.72854614]
[132.36222839 453.72854614]
[132.36222839 438.72854614]
[132.36222839 423.72854614]
[132.36222839 408.72854614]
[116.83019257 404.41592407]
[103.11448669 395.92059326]
[92.31584167 383.91519165]
[85.30345917 369.35446167]
[82.64502716 353.39916992]
[84.56076813 337.32379150]
[90.90523529 322.41455078]
[101.17831421 309.86654663]
[114.56464386 300.68798828]
[129.99830627 295.61917114]
[129.37432861 280.63217163]
[128.75035095 265.64514160]
[126.57351685 250.80393982]
[122.86735535 236.26901245]
[119.16119385 221.73406982]
[108.89482880 215.26036072]
[105.71505737 203.13154602]
[111.86582184 191.74638367]
[107.25544739 185.90771484]
[108.54736328 176.79823303]
[105.44904327 162.12170410]
[102.35072327 147.44517517]
[99.25240326 132.76864624]
[96.15407562 118.09212494]
[80.76596069 112.72019196]
[72.88835907 94.70905304]
[59.79520798 87.38994598]
[46.70205307 80.07084656]
[29.92618561 77.62000275]
[27.63722610 60.82128143]
[43.14579773 53.97142410]
[54.02116013 66.97769165]
[67.11431122 74.29679108]
[80.20746613 81.61589813]
[93.06587219 73.89181519]
[92.75381470 58.89506149]
[92.44175720 43.89830780]
[77.60928345 37.28454590]
[67.17122650 24.91891861]
[63.16988754 9.29920292]
[66.35400391 -6.44814396]
[76.03927612 -19.19377136]
[90.25463104 -26.42729950]
[89.63065338 -41.41431427]
[89.00667572 -56.40133286]
[74.43222046 -60.45600510]
[61.82517242 -68.81767273]
[52.42064285 -80.66714478]
[47.13999176 -94.84353638]
[46.50056458 -109.95797729]
[50.56500244 -124.52970886]
[58.93511581 -137.13114929]
[70.79088593 -146.52774048]
[84.97080994 -151.79888916]
[100.08567810 -152.42819214]
[114.65468597 -148.35398865]
[127.25051880 -139.97543335]
[136.63916016 -128.11337280]
[141.90080261 -113.92991638]
[142.51997375 -98.81463623]
[138.43601990 -84.24835968]
[130.04902649 -71.65814209]
[118.18066406 -62.27745438]
[103.99369812 -57.02531052]
[104.61766815 -42.03829193]
[105.24164581 -27.05127716]
[118.26495361 -22.17333412]
[128.46946716 -12.66135693]
[134.28521729 0.06654779]
[134.80018616 14.09415531]
[129.90313721 27.29560280]
[120.30558014 37.65755463]
[107.43850708 43.58625031]
[107.75056458 58.58300400]
[108.06262207 73.57975769]
[122.74774170 96.21955109]
[110.83060455 114.99380493]
[113.92892456 129.67033386]
[117.02724457 144.34684753]
[120.12557220 159.02337646]
[123.22389221 173.69990540]
[126.47471619 188.34339905]
[139.36691284 201.44955444]
[133.69613647 218.02790833]
[137.40229797 232.56285095]
[141.10845947 247.09777832]
[147.27740479 233.42503357]
[159.37539673 224.55720520]
[174.27090454 222.78967285]
[188.10824585 228.58000183]
[197.30569458 240.42933655]
[199.48251343 255.27055359]
[194.07522583 269.26202393]
[182.48350525 278.78210449]
[167.70782471 281.36654663]
[153.57283020 276.34640503]
[143.73736572 265.02117920]
[144.36134338 280.00817871]
[144.98532104 294.99520874]
[158.61532593 297.95526123]
[171.12147522 304.10806274]
[181.76889038 313.08676147]
[189.93313599 324.35852051]
[195.13694763 337.25625610]
[197.07807922 351.01800537]
[195.64689636 364.83212280]
[190.93249512 377.88497925]
[183.21722412 389.40890503]
[172.95976257 398.72741699]
[160.76782227 405.29492188]
[147.36222839 408.72854614]
[147.36222839 423.72854614]
[147.36222839 438.72854614]
[147.36222839 453.72854614]
[147.36222839 468.72854614]
[147.36222839 483.72854614]
[147.36222839 498.72854614]
[147.36222839 513.72857666]
[147.36222839 528.72857666]
[147.36222839 543.72857666]
[161.90211487 547.78985596]
[174.80650330 555.62438965]
[185.11778259 566.65069580]
[192.07080078 580.05065918]
[195.14961243 594.82977295]
[194.12571716 609.89147949]
[189.07511902 624.11798096]
[180.37258911 636.45367432]
[168.66392517 645.98309326]
[154.81799316 651.99908447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 119]
[31 118]
[32 117]
[33 106]
[34 105]
[35 104]
[38 102]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[46 54]
[47 53]
[48 52]
[55 95]
[56 94]
[57 93]
[63 86]
[64 85]
[65 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
