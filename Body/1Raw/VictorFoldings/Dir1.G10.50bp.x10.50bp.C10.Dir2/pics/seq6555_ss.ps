%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUAGACCUGGGGGGGGGGAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAxxxxxxxxxxACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCCCCCCCCCCCGCAGACCU\
) } def
/len { sequence length } bind def

/coor [
[93.70285034 352.56469727]
[80.48265076 345.29223633]
[69.59584808 334.84524536]
[61.78471756 321.93597412]
[57.58183670 307.44467163]
[57.27376556 292.35934448]
[60.88150406 277.70849609]
[68.15908051 264.49111938]
[78.61028290 253.60835266]
[91.52254486 245.80220032]
[106.01548767 241.60491943]
[105.70343018 226.60816956]
[105.39137268 211.61141968]
[105.07931519 196.61465454]
[104.76725769 181.61790466]
[104.45520020 166.62115479]
[104.14315033 151.62440491]
[103.83109283 136.62763977]
[103.51903534 121.63088989]
[90.42588043 114.31178284]
[77.48782349 121.90169525]
[64.54976654 129.49160767]
[59.12994385 144.59143066]
[43.89932251 149.63204956]
[30.54154015 140.74671936]
[29.30353928 124.75150299]
[41.13500977 113.91656494]
[56.95986176 116.55354309]
[69.89791870 108.96363831]
[82.83597565 101.37373352]
[81.67041779 93.96485138]
[68.29823303 100.76078033]
[57.70270538 90.14311218]
[64.52652740 76.78514099]
[79.33931732 79.14709473]
[78.17376709 71.73821259]
[63.53026199 68.48738861]
[48.88676071 65.23656464]
[34.24325943 61.98573685]
[19.59976006 58.73490906]
[4.95625782 55.48408508]
[-11.81680584 57.95404053]
[-18.83347893 42.52022552]
[-5.94523382 31.50526047]
[8.20708370 40.84058380]
[22.85058594 44.09140778]
[37.49408722 47.34223557]
[52.13758850 50.59305954]
[66.78108978 53.84388733]
[81.42459106 57.09471130]
[70.48162842 46.83549118]
[70.67527771 31.83674240]
[81.87946320 21.86346817]
[96.79965210 23.40881538]
[105.72197723 35.46667862]
[102.83778381 50.18636703]
[112.82051086 38.99060059]
[122.80323792 27.79483414]
[123.11431122 2.80253792]
[144.57041931 -8.84055710]
[149.47196960 -23.01711464]
[154.37351990 -37.19367218]
[159.27507019 -51.37023163]
[164.17663574 -65.54679108]
[168.93045044 -79.77356720]
[173.53601074 -94.04902649]
[178.14157104 -108.32448578]
[182.74713135 -122.59995270]
[169.64262390 -130.00646973]
[158.29750061 -139.89955139]
[149.17634583 -151.87408447]
[142.65267944 -165.43972778]
[138.99362183 -180.04096985]
[138.34902954 -195.07989502]
[140.74528503 -209.94067383]
[146.08425903 -224.01477051]
[154.14733887 -236.72586060]
[164.60433960 -247.55342102]
[177.02705383 -256.05407715]
[190.90676880 -261.87973022]
[205.67514038 -264.79183960]
[220.72738647 -264.67111206]
[235.44714355 -261.52255249]
[249.23165894 -255.47503662]
[261.51644897 -246.77624512]
[271.79843140 -235.78237915]
[279.65661621 -222.94361877]
[284.76919556 -208.78570557]
[286.92681885 -193.88839722]
[286.04110718 -178.86174011]
[282.14837646 -164.32106018]
[275.40798950 -150.86178589]
[266.09594727 -139.03507996]
[254.59362793 -129.32521057]
[241.37202454 -122.12981415]
[226.97251892 -117.74353790]
[211.98480225 -116.34598541]
[197.02259827 -117.99438477]
[192.41703796 -103.71892548]
[187.81146240 -89.44346619]
[183.20590210 -75.16800690]
[184.15148926 -67.78887939]
[178.35317993 -60.64523697]
[173.45162964 -46.46868134]
[168.55007935 -32.29212189]
[163.64852905 -18.11556435]
[158.74697876 -3.93900585]
[164.30589294 2.08831191]
[167.49357605 9.64269447]
[182.42788696 11.04499722]
[197.36218262 12.44730091]
[212.29649353 13.84960461]
[224.30621338 3.57622504]
[240.05603027 4.88727570]
[250.20185852 17.00493431]
[248.72436523 32.74000931]
[236.50010681 42.75715637]
[220.78153992 41.11338425]
[210.89419556 28.78391266]
[195.95988464 27.38160896]
[181.02557373 25.97930527]
[166.09126282 24.57700157]
[162.99307251 30.04975128]
[158.54029846 34.56186295]
[153.02198792 37.78307343]
[146.80625916 39.46810532]
[140.31576538 39.47518158]
[133.99899292 37.77756119]
[124.01627350 48.97332764]
[114.03354645 60.16909027]
[118.51578522 121.31883240]
[118.82784271 136.31558228]
[119.13990021 151.31234741]
[119.45195770 166.30909729]
[119.76401520 181.30584717]
[120.07607269 196.30259705]
[120.38812256 211.29936218]
[120.70018005 226.29611206]
[121.01223755 241.29286194]
[135.66723633 244.88363647]
[148.89303589 252.14588928]
[159.78790283 262.58447266]
[167.60900879 275.48770142]
[171.82307434 289.97576904]
[172.14279175 305.06085205]
[168.54637146 319.71447754]
[161.27900696 332.93746948]
[150.83621216 343.82830811]
[137.92997742 351.64440918]
[123.44028473 355.85290527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 30]
[21 29]
[22 28]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[56 130]
[57 129]
[58 128]
[60 107]
[61 106]
[62 105]
[63 104]
[64 103]
[65 101]
[66 100]
[67 99]
[68 98]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
