%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAAUCUCGGGGGGGGGGAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAAxxxxxxxxxxACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUACCCCCCCCCCUACUAAUCUC\
) } def
/len { sequence length } bind def

/coor [
[13.55042458 282.06668091]
[4.06638956 277.25277710]
[-5.15049648 271.94528198]
[-14.07456684 266.15896606]
[-22.68097115 259.90994263]
[-30.94574356 253.21560669]
[-38.84586716 246.09460449]
[-46.35934448 238.56677246]
[-53.46525192 230.65307617]
[-60.14379883 222.37554932]
[-66.37638855 213.75723267]
[-72.14566803 204.82212830]
[-85.23882294 212.14123535]
[-98.33197784 219.46034241]
[-106.60248566 232.94770813]
[-121.48716736 232.40414429]
[-134.58032227 239.72325134]
[-147.67347717 247.04235840]
[-160.76663208 254.36146545]
[-173.85978699 261.68057251]
[-173.99258423 277.03887939]
[-181.80056763 290.26504517]
[-195.18342590 297.80123901]
[-210.54125977 297.62033081]
[-223.74285889 289.77090454]
[-231.23709106 276.36450195]
[-231.00801086 261.00729370]
[-223.11727905 247.83036804]
[-209.68742371 240.37820435]
[-194.33103943 240.65541077]
[-181.17889404 248.58741760]
[-168.08573914 241.26831055]
[-154.99258423 233.94920349]
[-141.89942932 226.63009644]
[-128.80627441 219.31098938]
[-121.47227478 206.34713745]
[-105.65108490 206.36718750]
[-92.55792999 199.04808044]
[-79.46477509 191.72897339]
[-90.33506012 166.29008484]
[-97.61949921 139.60231018]
[-101.18086243 112.16845703]
[-100.95204926 84.50534058]
[-96.93737030 57.13414383]
[-89.21246338 30.57052231]
[-77.92286682 5.31492758]
[-63.28126526 -18.15683556]
[-45.56350708 -39.40256500]
[-56.00331879 -50.17337418]
[-66.44313049 -60.94418335]
[-76.88294220 -71.71498871]
[-91.54654694 -67.32897186]
[-106.56658936 -70.27124023]
[-118.49156952 -79.86568451]
[-124.58121490 -93.90758514]
[-123.43616486 -109.17019653]
[-115.31955719 -122.14630127]
[-102.09651184 -129.85406494]
[-86.80559540 -130.52232361]
[-72.96055603 -123.99749756]
[-63.74287033 -111.77894592]
[-61.27070236 -96.67441559]
[-66.11213684 -82.15480042]
[-55.67232132 -71.38399506]
[-45.23250961 -60.61318588]
[-34.79269791 -49.84237671]
[-23.89589310 -58.97049332]
[-12.38280010 -67.30784607]
[-0.31068766 -74.81297302]
[12.26039410 -81.44853210]
[25.26791382 -87.18152618]
[38.64717102 -91.98343658]
[52.33161163 -95.83036804]
[66.25316620 -98.70319366]
[80.34258270 -100.58762360]
[94.52978516 -101.47428131]
[108.74419403 -101.35875702]
[122.91510773 -100.24162292]
[136.97203064 -98.12844086]
[150.84506226 -95.02971649]
[164.46516418 -90.96086884]
[177.76460266 -85.94213104]
[190.67721558 -79.99847412]
[203.13879395 -73.15946198]
[215.08732605 -65.45911407]
[224.10485840 -77.44594574]
[233.12237549 -89.43277740]
[242.13990784 -101.41960907]
[241.32705688 -117.44205475]
[253.44203186 -127.95902252]
[269.19128418 -124.90280151]
[276.49334717 -110.61785126]
[269.74667358 -96.06237030]
[254.12673950 -92.40207672]
[245.10922241 -80.41524506]
[236.09169006 -68.42841339]
[227.07415771 -56.44158173]
[235.14984131 -49.52032852]
[242.84918213 -42.18270111]
[250.15072632 -34.44913101]
[257.03414917 -26.34116173]
[263.48025513 -17.88136482]
[269.47113037 -9.09330177]
[274.99005127 -0.00144379]
[280.02169800 9.36889076]
[284.55203247 18.99160767]
[288.56842041 28.83991241]
[292.05972290 38.88637543]
[295.01617432 49.10302734]
[297.42956543 59.46141052]
[299.29315186 69.93267822]
[300.60180664 80.48768616]
[301.35180664 91.09702301]
[301.54110718 101.73114777]
[301.16915894 112.36045837]
[300.23699951 122.95535278]
[298.74725342 133.48631287]
[296.70407104 143.92402649]
[294.11309814 154.23942566]
[290.98156738 164.40377808]
[287.31823730 174.38879395]
[283.13323975 184.16665649]
[278.43829346 193.71012878]
[273.24642944 202.99264526]
[267.57211304 211.98835754]
[261.43118286 220.67221069]
[254.84069824 229.02003479]
[247.81901550 237.00856018]
[240.38571167 244.61557007]
[232.56146240 251.81985474]
[224.36807251 258.60134888]
[215.82835388 264.94122314]
[206.96607971 270.82174683]
[197.80592346 276.22659302]
[188.37342834 281.14068604]
[178.69482422 285.55035400]
[168.79707336 289.44332886]
[158.70774841 292.80874634]
[148.45494080 295.63723755]
[138.06718445 297.92092896]
[127.57343292 299.65347290]
[117.00289917 300.83004761]
[106.38501740 301.44735718]
[95.74935150 301.50369263]
[85.12551880 300.99890137]
[74.54311371 299.93438721]
[64.03159332 298.31307983]
[53.62023926 296.13955688]
[43.33803940 293.41983032]
[33.21362686 290.16146851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 39]
[13 38]
[14 37]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[48 66]
[49 65]
[50 64]
[51 63]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
