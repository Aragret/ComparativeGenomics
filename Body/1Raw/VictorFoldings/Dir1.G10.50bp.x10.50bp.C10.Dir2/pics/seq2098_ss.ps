%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAUACCGGGGGGGGGGUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUxxxxxxxxxxUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCCCCCCCCCCCUCUACC\
) } def
/len { sequence length } bind def

/coor [
[79.84452820 433.41867065]
[66.62432861 426.14620972]
[55.73752594 415.69918823]
[47.92639542 402.78994751]
[43.72351456 388.29864502]
[43.41544342 373.21328735]
[47.02318573 358.56246948]
[54.30075836 345.34509277]
[64.75196838 334.46231079]
[77.66423035 326.65615845]
[92.15716553 322.45889282]
[91.84510803 307.46212769]
[91.53305054 292.46539307]
[91.22099304 277.46862793]
[90.90893555 262.47186279]
[90.59688568 247.47511292]
[90.28482819 232.47836304]
[89.97277069 217.48161316]
[89.66071320 202.48486328]
[89.34865570 187.48809814]
[87.00988007 184.76824951]
[85.90681458 180.75764465]
[86.64181519 176.06593323]
[89.51443481 171.55288696]
[90.13841248 156.56587219]
[90.76239014 141.57885742]
[77.30858612 136.04489136]
[66.50186920 126.30607605]
[59.60291290 113.49850464]
[57.41651535 99.11625671]
[60.19773102 84.83709717]
[67.62211609 72.32678223]
[58.11375809 60.72544098]
[48.60540009 49.12409973]
[39.09704208 37.52275848]
[29.58868217 25.92141724]
[20.08032417 14.32007694]
[6.05527592 21.05987167]
[-9.16349983 24.26061440]
[-24.69784737 23.74185562]
[-39.65241241 19.53764915]
[-53.16625214 11.89434910]
[-64.46238708 1.25617301]
[-72.89249420 -11.76060867]
[-77.97409058 -26.40337372]
[-79.41817474 -41.82666779]
[-77.14562988 -57.14101028]
[-71.29155731 -71.46420288]
[-62.19727707 -83.97214508]
[-71.94493103 -95.37316132]
[-81.69258118 -106.77418518]
[-91.44023132 -118.17520142]
[-101.18788910 -129.57623291]
[-116.27326965 -126.69058990]
[-130.77513123 -131.74938965]
[-140.79254150 -143.39186096]
[-143.63088989 -158.48620605]
[-138.52664185 -172.97213745]
[-126.85284424 -182.95301819]
[-111.74967194 -185.74403381]
[-97.27980804 -180.59440613]
[-87.33557129 -168.88937378]
[-84.59191132 -153.77752686]
[-89.78686523 -139.32388306]
[-80.03921509 -127.92285919]
[-70.29156494 -116.52183533]
[-60.54391098 -105.12081146]
[-50.79625702 -93.71979523]
[-37.95011520 -100.41181183]
[-23.92612457 -104.06590271]
[-9.43268585 -104.49401093]
[4.79730701 -101.67111206]
[18.04353142 -95.73667145]
[29.63469696 -86.98775482]
[38.98256302 -75.86414337]
[45.61179352 -62.92622757]
[49.18412399 -48.82680511]
[49.51563263 -34.27810669]
[46.58618164 -20.01585197]
[40.54063034 -6.76201057]
[31.68166542 4.81171799]
[41.19002533 16.41305923]
[50.69838333 28.01440048]
[60.20674133 39.61574173]
[69.71510315 51.21708298]
[79.22345734 62.81842422]
[88.36808014 59.02643967]
[98.14108276 57.44792938]
[108.01450348 58.16817093]
[117.45496368 61.14825058]
[125.95247650 66.22718048]
[137.04379272 56.12853241]
[148.13510132 46.02988434]
[152.59788513 30.24965286]
[168.55960083 26.48726082]
[179.60021973 38.61313629]
[174.36209106 54.15321732]
[158.23376465 57.12120056]
[147.14244080 67.21984863]
[136.05113220 77.31849670]
[138.30726624 81.38045502]
[140.10752869 85.66400146]
[141.43046570 90.11816406]
[142.26034546 94.68991852]
[157.24006653 95.46976471]
[172.21978760 96.24961090]
[187.19949341 97.02945709]
[202.17921448 97.80930328]
[217.15892029 98.58914948]
[225.45208740 85.66169739]
[239.10525513 78.62703705]
[254.44581604 79.37745667]
[267.34719849 87.71109772]
[274.33901978 101.38626099]
[273.54052734 116.72438049]
[265.16647339 129.59959412]
[251.46948242 136.54852295]
[236.13394165 135.70193481]
[223.28503418 127.28758240]
[216.37907410 113.56886292]
[201.39936829 112.78901672]
[186.41964722 112.00917053]
[171.43994141 111.22932434]
[156.46022034 110.44947815]
[141.48049927 109.66963196]
[128.67521667 131.49391174]
[105.74940491 142.20281982]
[105.12542725 157.18984985]
[104.50144958 172.17686462]
[104.34541321 187.17604065]
[104.65747070 202.17280579]
[104.96952057 217.16955566]
[105.28157806 232.16630554]
[105.59363556 247.16305542]
[105.90569305 262.15982056]
[106.21775055 277.15655518]
[106.52980804 292.15332031]
[106.84185791 307.15008545]
[107.15391541 322.14682007]
[121.80890656 325.73760986]
[135.03471375 332.99984741]
[145.92958069 343.43844604]
[153.75068665 356.34167480]
[157.96475220 370.82974243]
[158.28446960 385.91482544]
[154.68804932 400.56842041]
[147.42068481 413.79144287]
[136.97789001 424.68228149]
[124.07165527 432.49838257]
[109.58196259 436.70684814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 129]
[25 128]
[26 127]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[37 81]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[91 100]
[92 99]
[93 98]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
