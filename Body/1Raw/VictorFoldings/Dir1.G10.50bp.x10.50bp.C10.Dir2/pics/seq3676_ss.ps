%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUAGGCCGGGGGGGGGGUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAxxxxxxxxxxGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCACCCCCCCCCCAACCUACGCC\
) } def
/len { sequence length } bind def

/coor [
[89.32434082 552.05377197]
[75.47840118 546.03771973]
[63.76973724 536.50830078]
[55.06721115 524.17266846]
[50.01661301 509.94613647]
[48.99272156 494.88446045]
[52.07151794 480.10528564]
[59.02453995 466.70535278]
[69.33582306 455.67901611]
[82.24020386 447.84451294]
[96.78009033 443.78320312]
[96.78009033 428.78320312]
[96.78009033 413.78320312]
[96.78009033 398.78320312]
[96.78009033 383.78320312]
[96.78009033 368.78320312]
[96.78009033 353.78320312]
[96.78009033 338.78320312]
[96.78009033 323.78320312]
[96.78009033 308.78320312]
[96.78009033 293.78320312]
[82.23770142 290.23254395]
[68.95974731 283.30029297]
[57.72006607 273.38558960]
[49.17488480 261.06149292]
[43.82448578 247.04188538]
[41.98393631 232.14018250]
[43.76453018 217.22206116]
[49.06708145 203.15521240]
[57.58742523 190.75883484]
[68.83385468 180.75599670]
[82.15552521 173.73136902]
[96.78009033 170.09712219]
[96.78009033 155.09712219]
[96.78009033 140.09712219]
[96.78009033 125.09712982]
[96.78009033 110.09712982]
[92.84776306 110.66852570]
[88.44210052 109.70198822]
[84.14539337 107.01254272]
[80.59472656 102.62680054]
[78.40821838 96.79544067]
[78.10951233 89.98101807]
[80.05878448 82.82124329]
[73.99577332 69.10118866]
[67.93275452 55.38113403]
[61.86974335 41.66107941]
[55.80673218 27.94102669]
[41.20520020 31.54192162]
[26.20019913 32.55239487]
[11.24771214 30.94173241]
[-3.19787312 26.75888824]
[-16.69757080 20.13097000]
[-28.84113884 11.25939560]
[-39.25955200 0.41375899]
[-47.63619995 -12.07635117]
[-53.71653366 -25.83137512]
[-57.31577301 -40.43331528]
[-58.32453918 -55.43843079]
[-56.71218491 -70.39073181]
[-52.52770233 -84.83584595]
[-45.89825439 -98.33479309]
[-37.02529907 -110.47735596]
[-26.17848396 -120.89453888]
[-13.68742275 -129.26977539]
[0.06829077 -135.34854126]
[14.67063713 -138.94612122]
[29.67586708 -139.95318604]
[44.62799072 -138.33914185]
[59.07262421 -134.15301514]
[72.57081604 -127.52204132]
[84.71237946 -118.64771271]
[95.12832642 -107.79971313]
[103.50214386 -95.30770111]
[109.57935333 -81.55130005]
[113.17528534 -66.94853973]
[114.18064880 -51.94319916]
[112.56490326 -36.99126053]
[108.37714386 -22.54709816]
[101.74462891 -9.04965687]
[92.86892700 3.09089327]
[82.01974487 13.50561428]
[69.52678680 21.87801361]
[75.58979797 35.59806824]
[81.65280914 49.31812286]
[87.71582794 63.03817368]
[93.77883911 76.75823212]
[108.59659576 79.08933258]
[118.57932281 67.89356995]
[128.56204224 56.69779968]
[129.08386230 40.66323471]
[142.03114319 31.18972206]
[157.47184753 35.54452896]
[163.56118774 50.38702011]
[155.62792969 64.33130646]
[139.75781250 66.68052673]
[129.77508545 77.87628937]
[119.79235840 89.07205963]
[130.70301819 78.77848816]
[144.53363037 72.97210693]
[159.52243042 72.39257050]
[173.76010132 77.11368561]
[185.43298340 86.53406525]
[193.05418396 99.45371246]
[195.65286255 114.22689819]
[192.89801025 128.97175598]
[185.14054871 141.81004333]
[173.36862183 151.10638428]
[159.08180237 155.67658997]
[144.09997559 154.93847656]
[130.33157349 148.98608398]
[119.53044128 138.57763672]
[113.07247925 125.03900909]
[111.78009033 110.09712982]
[111.78009033 125.09712982]
[111.78009033 140.09712219]
[111.78009033 155.09712219]
[111.78009033 170.09712219]
[126.40465546 173.73136902]
[139.72633362 180.75599670]
[150.97276306 190.75883484]
[159.49310303 203.15521240]
[164.79565430 217.22206116]
[166.57624817 232.14018250]
[164.73570251 247.04188538]
[159.38529968 261.06149292]
[150.84011841 273.38558960]
[139.60043335 283.30029297]
[126.32248688 290.23254395]
[111.78009033 293.78320312]
[111.78009033 308.78320312]
[111.78009033 323.78320312]
[111.78009033 338.78320312]
[111.78009033 353.78320312]
[111.78009033 368.78320312]
[111.78009033 383.78320312]
[111.78009033 398.78320312]
[111.78009033 413.78320312]
[111.78009033 428.78320312]
[111.78009033 443.78320312]
[126.31997681 447.84451294]
[139.22436523 455.67901611]
[149.53564453 466.70535278]
[156.48866272 480.10528564]
[159.56745911 494.88446045]
[158.54357910 509.94613647]
[153.49296570 524.17266846]
[144.79045105 536.50830078]
[133.08178711 546.03771973]
[119.23584747 552.05377197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[33 118]
[34 117]
[35 116]
[36 115]
[37 114]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
