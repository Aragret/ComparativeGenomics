%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGAGCCCAGGGGGGGGGGCUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCxxxxxxxxxxAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCCCCCCCCCCCUAAAGCCCA\
) } def
/len { sequence length } bind def

/coor [
[111.34653473 383.79199219]
[97.50059509 377.77597046]
[85.79193878 368.24655151]
[77.08940887 355.91088867]
[72.03881073 341.68435669]
[71.01491547 326.62268066]
[74.09371948 311.84353638]
[81.04673767 298.44360352]
[91.35802460 287.41726685]
[104.26240540 279.58276367]
[118.80229187 275.52145386]
[118.80229187 260.52145386]
[118.80229187 245.52145386]
[118.80229187 230.52145386]
[118.80229187 215.52145386]
[118.80229187 200.52145386]
[118.80229187 185.52145386]
[118.80229187 170.52145386]
[118.80229187 155.52145386]
[118.80229187 140.52145386]
[96.47400665 142.46882629]
[77.09503937 133.47196960]
[65.38777161 116.86524963]
[63.62803650 97.67370605]
[71.25567627 81.12038422]
[60.81586456 70.34957886]
[50.37604904 59.57876968]
[39.93623734 48.80796051]
[29.49642563 38.03715515]
[19.05661392 27.26634407]
[5.88803101 20.08383560]
[-8.81993103 17.13835335]
[-23.52789307 14.19287109]
[-38.23585510 11.24738884]
[-52.94381714 8.30190563]
[-67.65177917 5.35642385]
[-76.80442047 17.57083321]
[-90.35426331 24.59683037]
[-105.61096191 25.03939629]
[-119.54529572 18.81066132]
[-129.39059448 7.14734364]
[-133.19204712 -7.63479519]
[-130.19490051 -22.60075188]
[-120.99422455 -34.77902222]
[-107.41682434 -41.75160599]
[-92.15850067 -42.13409042]
[-78.24880219 -35.85052872]
[-68.44951630 -24.14853287]
[-64.70629120 -9.35153770]
[-49.99833298 -6.40605545]
[-35.29037094 -3.46057296]
[-20.58240891 -0.51509047]
[-5.87444830 2.43039203]
[8.83351326 5.37587452]
[-2.06317043 -4.93248510]
[-10.70883846 -17.19023514]
[-16.76276588 -30.91430092]
[-19.98637009 -45.56381989]
[-20.25260925 -60.56145477]
[-17.55098915 -75.31615448]
[-11.98798370 -89.24644470]
[-3.78282714 -101.80333710]
[6.74111700 -112.49195099]
[19.16910362 -120.89106750]
[33.01134491 -126.66967773]
[47.72232819 -129.60003662]
[62.72229004 -129.56668091]
[77.42008972 -126.57089996]
[91.23648834 -120.73077393]
[103.62699127 -112.27645111]
[114.10327911 -101.54112244]
[122.25249481 -88.94786072]
[127.75347900 -74.99296570]
[130.38943481 -60.22638702]
[130.05648804 -45.23008347]
[126.76773834 -30.59505081]
[120.65281677 -16.89805222]
[111.95271301 -4.67888355]
[101.01027679 5.58090019]
[88.25675964 13.47696400]
[74.19477081 18.69812584]
[59.37849808 21.03862000]
[44.39183426 20.40620995]
[29.82742119 16.82653236]
[40.26723480 27.59734154]
[50.70704651 38.36814880]
[61.14685822 49.13895798]
[71.58666992 59.90976715]
[82.02648163 70.68057251]
[93.64006805 64.11292267]
[107.61688995 62.25843430]
[122.01242065 65.93441772]
[134.61961365 75.15012360]
[143.30415344 89.03347778]
[156.82833862 82.54531860]
[170.35252380 76.05715179]
[183.87672424 69.56898499]
[197.40090942 63.08081818]
[210.92509460 56.59265518]
[224.44929504 50.10448837]
[233.25573730 36.27052307]
[249.62557983 37.25037003]
[256.71893311 52.03604889]
[247.23876953 65.41732025]
[230.93745422 63.62868118]
[217.41326904 70.11684418]
[203.88906860 76.60501099]
[190.36488342 83.09317780]
[176.84069824 89.58133698]
[163.31649780 96.06950378]
[149.79231262 102.55767059]
[150.72793579 117.52846527]
[164.95472717 122.28227997]
[179.18150330 127.03609467]
[190.49693298 119.65920258]
[203.80021667 120.15996552]
[214.21922302 128.12982178]
[218.06813049 140.46604919]
[232.19293213 145.51481628]
[248.22039795 142.04313660]
[259.03881836 154.36766052]
[253.51913452 169.80996704]
[237.33952332 172.48434448]
[227.14418030 159.63961792]
[213.01937866 154.59086609]
[198.17472839 162.43269348]
[181.92193604 157.03543091]
[174.42768860 141.26286316]
[160.20091248 136.50904846]
[145.97412109 131.75523376]
[133.80229187 140.52145386]
[133.80229187 155.52145386]
[133.80229187 170.52145386]
[133.80229187 185.52145386]
[133.80229187 200.52145386]
[133.80229187 215.52145386]
[133.80229187 230.52145386]
[133.80229187 245.52145386]
[133.80229187 260.52145386]
[133.80229187 275.52145386]
[148.34217834 279.58276367]
[161.24656677 287.41726685]
[171.55784607 298.44360352]
[178.51086426 311.84353638]
[181.58966064 326.62268066]
[180.56578064 341.68435669]
[175.51516724 355.91088867]
[166.81265259 368.24655151]
[155.10398865 377.77597046]
[141.25804138 383.79199219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[112 130]
[113 129]
[114 128]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
