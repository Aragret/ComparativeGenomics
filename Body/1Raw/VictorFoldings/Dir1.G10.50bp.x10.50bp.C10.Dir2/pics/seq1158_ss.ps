%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAACCCGGGGGGGGGGCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAxxxxxxxxxxCCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCCCCCCCCCCCAUCCUAACCC\
) } def
/len { sequence length } bind def

/coor [
[101.09807587 374.30276489]
[87.87787628 367.03030396]
[76.99107361 356.58331299]
[69.17994690 343.67404175]
[64.97706604 329.18273926]
[64.66899109 314.09741211]
[68.27673340 299.44656372]
[75.55430603 286.22918701]
[86.00551605 275.34640503]
[98.91777802 267.54028320]
[113.41071320 263.34298706]
[113.09865570 248.34623718]
[112.78659821 233.34947205]
[112.47454071 218.35272217]
[112.16248322 203.35597229]
[111.85043335 188.35922241]
[111.53837585 173.36245728]
[111.22631836 158.36570740]
[110.91426086 143.36895752]
[110.60220337 128.37220764]
[89.38542175 125.93807220]
[76.65013123 110.88755798]
[77.61740875 92.83659363]
[65.53741455 83.94424438]
[53.45742798 75.05189514]
[40.51937103 67.46199036]
[26.86313248 61.25658035]
[13.20689011 55.05117416]
[-0.44935063 48.84576416]
[-10.97496033 58.32851410]
[-24.28359795 63.05750275]
[-38.34611130 62.34688950]
[-51.03179550 56.33753586]
[-60.43125153 45.97062683]
[-65.14373779 32.84042358]
[-64.48588562 18.94912910]
[-78.01007843 12.46096420]
[-91.53426361 5.97279882]
[-105.05845642 -0.51536614]
[-118.58264160 -7.00353146]
[-132.30270386 -13.06654453]
[-146.20526123 -18.69850159]
[-155.39994812 -19.02931023]
[-160.33647156 -24.59494781]
[-174.11886597 -30.51491165]
[-190.33166504 -28.04970741]
[-200.36026001 -41.02503586]
[-193.88810730 -56.09298706]
[-177.57318115 -57.75294876]
[-168.19889832 -44.29729080]
[-154.41651917 -38.37733078]
[-140.57330322 -32.60105896]
[-126.67073822 -26.96910095]
[-123.24864197 -28.04459572]
[-119.12825775 -27.47528267]
[-115.10746765 -24.94829559]
[-112.09448242 -20.52772141]
[-98.57028961 -14.03955650]
[-85.04609680 -7.55139112]
[-71.52191162 -1.06322587]
[-57.99771881 5.42493916]
[-45.74107742 -4.78167486]
[-30.20764160 -8.65050793]
[-14.48192120 -5.36124325]
[-1.70931602 4.47983646]
[5.53301048 18.95085907]
[5.75605631 35.18952560]
[19.41229820 41.39493179]
[33.06853867 47.60033798]
[46.72478104 53.80574417]
[39.92098236 40.43756104]
[40.57534409 25.45184135]
[48.51848602 12.72759247]
[61.69434738 5.55844927]
[76.69240570 5.80012083]
[89.63044739 13.39005280]
[97.15950012 26.36361313]
[97.33070374 41.36263657]
[90.09973145 54.50466919]
[77.33830261 62.38793945]
[62.34977722 62.97190857]
[74.42976379 71.86425781]
[86.50975800 80.75660706]
[101.68069458 74.29143524]
[118.93854523 79.34123230]
[129.93869019 95.41047668]
[143.18127441 88.36534119]
[156.42385864 81.32020569]
[169.66644287 74.27507019]
[165.96858215 59.66037750]
[165.87640381 44.58539963]
[169.39527893 29.92658043]
[176.32060242 16.53615952]
[186.24975586 5.19264269]
[198.60546875 -3.44447470]
[212.66938782 -8.87304211]
[227.62387085 -10.77744865]
[242.59948730 -9.04697609]
[256.72555542 -3.78223014]
[269.18081665 4.71070242]
[279.24114990 15.93805408]
[286.32162476 29.24708176]
[290.01062012 43.86401367]
[290.09365845 58.93904495]
[286.56588745 73.59573364]
[279.63247681 86.98194885]
[269.69644165 98.31944275]
[257.33547974 106.94906616]
[243.26826477 112.36911011]
[228.31263733 114.26445007]
[213.33807373 112.52489471]
[199.21519470 107.25158691]
[186.76509094 98.75110626]
[176.71157837 87.51765442]
[163.46899414 94.56278992]
[150.22640991 101.60792542]
[136.98382568 108.65306091]
[151.98289490 108.81920624]
[166.67248535 105.78337097]
[181.17897034 109.59934235]
[192.47337341 119.47032928]
[198.19738770 133.33523560]
[197.15579224 148.29904175]
[189.56610107 161.23721313]
[177.01304626 169.44824219]
[162.11778259 171.21763611]
[147.99044800 166.17593384]
[137.58091736 155.37586975]
[133.06263733 141.07142639]
[125.59896088 128.06015015]
[125.91101837 143.05690002]
[126.22306824 158.05364990]
[126.53512573 173.05041504]
[126.84718323 188.04716492]
[127.15924072 203.04391479]
[127.47129822 218.04066467]
[127.78335571 233.03742981]
[128.09541321 248.03417969]
[128.40747070 263.03094482]
[143.06245422 266.62170410]
[156.28826904 273.88394165]
[167.18313599 284.32254028]
[175.00422668 297.22576904]
[179.21830750 311.71383667]
[179.53802490 326.79891968]
[175.94158936 341.45251465]
[168.67424011 354.67553711]
[158.23143005 365.56637573]
[145.32519531 373.38247681]
[130.83551025 377.59097290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 83]
[24 82]
[25 81]
[26 70]
[27 69]
[28 68]
[29 67]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 53]
[42 52]
[44 51]
[45 50]
[86 117]
[87 116]
[88 115]
[89 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
