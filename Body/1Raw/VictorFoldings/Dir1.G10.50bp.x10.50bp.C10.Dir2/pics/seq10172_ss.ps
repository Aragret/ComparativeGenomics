%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUACGCCGGGGGGGGGGUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUxxxxxxxxxxUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCAGUUGCCCCCCCCCCAUGAUACGCC\
) } def
/len { sequence length } bind def

/coor [
[45.59587860 489.13018799]
[31.74994087 483.11416626]
[20.04127884 473.58474731]
[11.33875561 461.24908447]
[6.28815317 447.02255249]
[5.26426220 431.96087646]
[8.34306049 417.18173218]
[15.29608250 403.78179932]
[25.60736656 392.75546265]
[38.51174927 384.92095947]
[53.05163574 380.85964966]
[53.05163574 365.85964966]
[53.05163574 350.85964966]
[53.05163574 335.85964966]
[53.05163574 320.85964966]
[53.05163574 305.85964966]
[53.05163574 290.85964966]
[53.05163574 275.85964966]
[53.05163574 260.85964966]
[53.05163574 245.85963440]
[44.54262924 258.21264648]
[31.80425072 266.13311768]
[16.96154785 268.29971313]
[2.49061656 264.35101318]
[-9.19446754 254.94577026]
[-16.14436913 241.65295410]
[-17.19968987 226.69012451]
[-12.18437862 212.55342102]
[-1.93510115 201.60113525]
[11.83833313 195.66038513]
[26.83820534 195.72221375]
[40.56220245 201.77630615]
[50.72084808 212.81268311]
[55.61928177 226.98884583]
[59.62702179 212.53416443]
[63.63476181 198.07948303]
[67.64250183 183.62478638]
[58.37789536 173.96232605]
[55.08703613 160.87486267]
[58.73764420 147.77053833]
[68.47519684 138.11688232]
[81.82008362 134.52337646]
[86.12767029 120.15519714]
[90.43525696 105.78701019]
[94.59313965 91.37479401]
[98.60088348 76.92010498]
[102.60861969 62.46541977]
[87.81399536 53.67389297]
[76.04975891 41.13071823]
[68.23520660 25.82653046]
[64.97809601 8.96729183]
[66.52737427 -8.12071800]
[72.75415039 -24.09524345]
[83.16242981 -37.70348740]
[96.92855835 -47.88036346]
[112.96645355 -53.83184814]
[130.01324463 -55.09693909]
[132.80555725 -69.83474731]
[135.59788513 -84.57255554]
[138.39021301 -99.31035614]
[141.18254089 -114.04816437]
[143.82139587 -128.81422424]
[146.30651855 -143.60693359]
[148.79164124 -158.39962769]
[151.27676392 -173.19233704]
[153.76187134 -187.98504639]
[143.61784363 -176.93522644]
[130.21223450 -170.20545959]
[115.29081726 -168.67211914]
[100.79671478 -172.53491211]
[88.61743164 -181.29077148]
[80.33902740 -193.79948425]
[77.03954315 -208.43209839]
[79.14865875 -223.28308105]
[86.39172363 -236.41845703]
[97.82550049 -246.12767029]
[111.96102142 -251.14633179]
[126.95748901 -250.82089233]
[140.86198425 -245.19374084]
[151.86380005 -234.99765015]
[158.53021240 -221.56044006]
[159.99324036 -206.63371277]
[166.90023804 -219.94886780]
[173.80723572 -233.26402283]
[170.35110474 -248.93037415]
[180.55627441 -261.30914307]
[196.59420776 -260.90441895]
[206.16200256 -248.02662659]
[201.92002869 -232.55455017]
[187.12239075 -226.35702515]
[180.21539307 -213.04187012]
[173.30839539 -199.72671509]
[168.55458069 -185.49992371]
[166.06945801 -170.70722961]
[163.58435059 -155.91452026]
[161.09922791 -141.12181091]
[158.61410522 -126.32910156]
[160.62055969 -119.16531372]
[155.92034912 -111.25583649]
[153.12802124 -96.51803589]
[150.33569336 -81.78022766]
[147.54336548 -67.04241943]
[144.75105286 -52.30461502]
[156.60375977 -47.08983612]
[167.09350586 -39.48543930]
[175.74537659 -29.83206749]
[182.16688538 -18.56320381]
[186.06582642 -6.18570995]
[187.26350403 6.74296713]
[185.70297241 19.63990593]
[181.45170593 31.92298889]
[174.69866943 43.03718567]
[165.74597168 52.47961426]
[154.99531555 59.82231903]
[142.92999268 64.73164368]
[130.09313965 66.98342133]
[117.06330872 66.47315979]
[113.05557251 80.92784882]
[109.04782867 95.38253784]
[110.10191345 103.43070221]
[104.80343628 110.09459686]
[100.49584961 124.46278381]
[96.18827057 138.83096313]
[106.61426544 152.11067200]
[107.08990479 168.82160950]
[97.62569427 182.40080261]
[82.09719086 187.63252258]
[78.08944702 202.08721924]
[74.08171082 216.54190063]
[70.07396698 230.99659729]
[68.05163574 245.85963440]
[68.05163574 260.85964966]
[68.05163574 275.85964966]
[68.05163574 290.85964966]
[68.05163574 305.85964966]
[68.05163574 320.85964966]
[68.05163574 335.85964966]
[68.05163574 350.85964966]
[68.05163574 365.85964966]
[68.05163574 380.85964966]
[82.59152222 384.92095947]
[95.49590302 392.75546265]
[105.80718994 403.78179932]
[112.76020813 417.18173218]
[115.83900452 431.96087646]
[114.81511688 447.02255249]
[109.76451111 461.24908447]
[101.06198883 473.58474731]
[89.35332489 483.11416626]
[75.50739288 489.13018799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 130]
[35 129]
[36 128]
[37 127]
[42 123]
[43 122]
[44 121]
[45 119]
[46 118]
[47 117]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
