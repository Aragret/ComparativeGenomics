%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACACCAGGGGGGGGGGCCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAxxxxxxxxxxUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACCCCCCCCCCCUCAAAACCA\
) } def
/len { sequence length } bind def

/coor [
[91.72087097 362.91607666]
[77.87493134 356.90002441]
[66.16626740 347.37060547]
[57.46374130 335.03494263]
[52.41313934 320.80844116]
[51.38924789 305.74673462]
[54.46804810 290.96759033]
[61.42107010 277.56765747]
[71.73235321 266.54132080]
[84.63673401 258.70681763]
[99.17662048 254.64550781]
[99.17662048 239.64550781]
[99.17662048 224.64550781]
[99.17662048 209.64550781]
[99.17662048 194.64550781]
[99.17662048 179.64550781]
[99.17662048 164.64550781]
[99.17662048 149.64550781]
[99.17662048 134.64550781]
[99.17662048 119.64550781]
[87.57527924 110.13714600]
[72.86731720 113.08263397]
[58.15935898 116.02811432]
[43.45139694 118.97359467]
[28.74343491 121.91907501]
[14.03547382 124.86456299]
[-0.67248809 127.81004333]
[-15.38044930 130.75552368]
[-30.08841133 133.70100403]
[-37.43283844 147.50656128]
[-51.95231247 153.31336975]
[-66.79118347 148.37960815]
[-74.94298553 135.03486633]
[-72.55869293 119.58012390]
[-60.76409531 109.31262970]
[-45.12823486 109.08038330]
[-33.03389359 118.99304962]
[-18.32593155 116.04756165]
[-3.61797047 113.10208130]
[11.08999062 110.15660095]
[25.79795265 107.21112061]
[40.50591278 104.26563263]
[55.21387482 101.32015228]
[69.92183685 98.37467194]
[84.62979889 95.42918396]
[96.70978546 86.53683472]
[103.89229584 73.36825562]
[103.70766449 57.54812622]
[116.59453583 50.07966614]
[123.77704620 36.91108322]
[130.82217407 23.66849709]
[137.72917175 10.35334206]
[144.49729919 -3.03294325]
[151.12579346 -16.48890877]
[157.75428772 -29.94487381]
[145.00213623 -37.86632538]
[133.08784485 -46.99957657]
[122.12613678 -57.25666809]
[112.22261047 -68.53881836]
[103.47262573 -80.73736572]
[95.96045685 -93.73483276]
[89.75845337 -107.40603638]
[84.92634583 -121.61932373]
[81.51066589 -136.23780823]
[79.54431915 -151.12069702]
[79.04623413 -166.12464905]
[80.02121735 -181.10517883]
[82.45986938 -195.91799927]
[86.33870697 -210.42045593]
[91.62036896 -224.47288513]
[98.25399780 -237.93995667]
[106.17570496 -250.69194031]
[115.30919647 -262.60604858]
[125.56650543 -273.56756592]
[136.84884644 -283.47085571]
[149.04757690 -292.22061157]
[162.04519653 -299.73251343]
[175.71652222 -305.93423462]
[189.92990112 -310.76605225]
[204.54846191 -314.18145752]
[219.43138123 -316.14749146]
[234.43534851 -316.64529419]
[249.41586304 -315.67001343]
[264.22863770 -313.23104858]
[278.73101807 -309.35192871]
[292.78335571 -304.06997681]
[306.25027466 -297.43609619]
[319.00210571 -289.51412964]
[330.91604614 -280.38040161]
[341.87731934 -270.12286377]
[351.78039551 -258.84033203]
[360.52990723 -246.64141846]
[368.04156494 -233.64366150]
[374.24301147 -219.97219849]
[379.07455444 -205.75871277]
[382.48965454 -191.14010620]
[384.45538330 -176.25714111]
[384.95288086 -161.25315857]
[383.97729492 -146.27267456]
[381.53805542 -131.45994568]
[377.65863037 -116.95764160]
[372.37640381 -102.90541840]
[365.74224854 -89.43862152]
[357.82003784 -76.68695068]
[348.68606567 -64.77319336]
[338.42831421 -53.81211090]
[327.14556885 -43.90925598]
[314.94650269 -35.16000366]
[301.94857788 -27.64861679]
[288.27700806 -21.44743538]
[274.06341553 -16.61618042]
[259.44473267 -13.20138073]
[244.56173706 -11.23592472]
[229.55773926 -10.73874187]
[214.57727051 -11.71461964]
[199.76460266 -14.15415859]
[185.26237488 -18.03386497]
[171.21025085 -23.31637573]
[164.58175659 -9.86040974]
[157.95326233 3.59555554]
[157.81794739 11.03379059]
[151.04432678 17.26033974]
[144.13732910 30.57549667]
[143.84732056 38.00930786]
[136.94563293 44.09359360]
[129.76312256 57.26217270]
[130.46148682 72.14039612]
[117.06087494 80.55076599]
[109.87837219 93.71934509]
[117.64394379 103.38760376]
[114.17662048 119.64550781]
[114.17662048 134.64550781]
[114.17662048 149.64550781]
[114.17662048 164.64550781]
[114.17662048 179.64550781]
[114.17662048 194.64550781]
[114.17662048 209.64550781]
[114.17662048 224.64550781]
[114.17662048 239.64550781]
[114.17662048 254.64550781]
[128.71650696 258.70681763]
[141.62089539 266.54132080]
[151.93217468 277.56765747]
[158.88519287 290.96759033]
[161.96398926 305.74673462]
[160.94010925 320.80844116]
[155.88949585 335.03494263]
[147.18698120 347.37060547]
[135.47831726 356.90002441]
[121.63237762 362.91607666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[46 129]
[47 128]
[49 126]
[50 125]
[51 123]
[52 122]
[53 120]
[54 119]
[55 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
