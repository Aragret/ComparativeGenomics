%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGAAUUGGGGGGGGGGAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCxxxxxxxxxxCUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCACCCCCCCCCCUCAUAGAAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 379.11914062]
[71.19830322 373.10308838]
[59.48964310 363.57366943]
[50.78712082 351.23800659]
[45.73651886 337.01150513]
[44.71262741 321.94979858]
[47.79142761 307.17065430]
[54.74444962 293.77072144]
[65.05573273 282.74438477]
[77.96011353 274.90988159]
[92.50000000 270.84857178]
[92.50000000 255.84857178]
[92.50000000 240.84857178]
[92.50000000 225.84857178]
[92.50000000 210.84857178]
[92.50000000 195.84857178]
[92.50000000 180.84857178]
[92.50000000 165.84857178]
[92.50000000 150.84857178]
[92.50000000 135.84857178]
[79.53376007 130.37272644]
[69.59019470 120.41111755]
[55.68763733 126.04307556]
[41.78508377 131.67503357]
[38.17592239 146.76654053]
[26.36362457 156.82881165]
[10.89026070 157.99269104]
[-2.29434657 149.81065369]
[-8.12044621 135.42884827]
[-4.34778452 120.37738800]
[7.57297373 110.44384766]
[23.05805397 109.44789124]
[36.15312576 117.77247620]
[50.05568314 112.14051819]
[63.95823669 106.50856018]
[63.39189148 98.89704895]
[64.41544342 91.33342743]
[66.98443604 84.14620972]
[70.98730469 77.64751434]
[76.25019836 72.11959839]
[69.06768799 58.95101547]
[61.88517761 45.78243256]
[52.13752747 34.38141251]
[40.24514771 25.23967743]
[28.35276794 16.09794235]
[16.46038818 6.95620823]
[4.56800795 -2.18552589]
[-7.32437181 -11.32726002]
[-21.48839188 -5.38789320]
[-36.72244644 -7.34217930]
[-48.92864227 -16.66442490]
[-54.82358551 -30.84699440]
[-52.82155609 -46.07484436]
[-43.46109390 -58.25176239]
[-29.26011848 -64.10221863]
[-14.03861809 -62.05247116]
[-1.89109969 -52.65388489]
[3.91481447 -38.43464279]
[1.81736255 -23.21964073]
[13.70974255 -14.07790565]
[25.60212135 -4.93617153]
[37.49450302 4.20556259]
[49.38688278 13.34729671]
[61.27926254 22.48903084]
[55.87524414 8.49629688]
[54.55275345 -6.44529009]
[57.41500092 -21.16967583]
[64.23861694 -34.52775574]
[74.49106598 -45.47705841]
[87.37225342 -53.16308594]
[101.87691498 -56.98601532]
[116.87310028 -56.64749908]
[131.19047546 -52.17396164]
[143.71173096 -43.91452026]
[153.45967102 -32.51374435]
[159.67356873 -18.86136436]
[161.86846924 -4.02282143]
[159.87312317 10.84387112]
[153.84320068 24.57850266]
[144.24931335 36.10921478]
[131.84016418 44.53613663]
[117.58417511 49.20162201]
[102.59389496 49.74158096]
[88.03918457 46.11386871]
[75.05376434 38.59992218]
[82.23626709 51.76850510]
[89.41877747 64.93708801]
[114.80374146 66.50045776]
[133.04998779 84.21810913]
[147.62269592 80.66334534]
[162.19538879 77.10858154]
[148.17778015 71.76943207]
[137.46415710 61.27095032]
[131.84178162 47.36451721]
[132.24861145 32.37003326]
[138.61676025 18.78892136]
[149.88389587 8.88681221]
[164.17037964 4.31560040]
[179.09294128 5.83786678]
[192.16213989 13.19966316]
[201.19775391 25.17287636]
[204.69241333 39.76010895]
[202.06315613 54.52787781]
[193.74859619 67.01258850]
[181.13711548 75.13101196]
[196.12980652 75.59905243]
[211.12249756 76.06709290]
[226.11520386 76.53513336]
[241.10789490 77.00317383]
[256.10058594 77.47122192]
[266.38552856 65.69181824]
[281.84378052 63.33039093]
[295.17645264 71.50193024]
[300.08825684 86.34807587]
[294.25997925 100.85894775]
[280.44357300 108.18294525]
[265.16271973 104.86190033]
[255.63255310 92.46391296]
[240.63986206 91.99587250]
[225.64715576 91.52783203]
[210.65446472 91.05979156]
[195.66177368 90.59174347]
[180.66906738 90.12370300]
[165.75015259 91.68128204]
[151.17745972 95.23604584]
[136.60475159 98.79080963]
[135.51770020 108.93663788]
[131.67369080 118.38878632]
[125.37111664 126.41356659]
[117.09918976 132.38807678]
[107.50000000 135.84857178]
[107.50000000 150.84857178]
[107.50000000 165.84857178]
[107.50000000 180.84857178]
[107.50000000 195.84857178]
[107.50000000 210.84857178]
[107.50000000 225.84857178]
[107.50000000 240.84857178]
[107.50000000 255.84857178]
[107.50000000 270.84857178]
[122.03988647 274.90988159]
[134.94427490 282.74438477]
[145.25555420 293.77072144]
[152.20857239 307.17065430]
[155.28736877 321.94979858]
[154.26348877 337.01150513]
[149.21287537 351.23800659]
[140.51036072 363.57366943]
[128.80169678 373.10308838]
[114.95575714 379.11914062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 35]
[23 34]
[24 33]
[40 87]
[41 86]
[42 85]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[89 126]
[90 125]
[91 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
