%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAGCCAGGGGGGGGGGGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCxxxxxxxxxxCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCCCCCCCCCCCAAUCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[85.85870361 416.96185303]
[71.36901093 412.75338745]
[58.46278000 404.93728638]
[48.01998138 394.04644775]
[40.75261688 380.82342529]
[37.15618896 366.16983032]
[37.47591019 351.08471680]
[41.68998337 336.59667969]
[49.51107788 323.69345093]
[60.40594864 313.25485229]
[73.63175964 305.99261475]
[88.28675079 302.40182495]
[88.59880066 287.40509033]
[88.91085815 272.40832520]
[89.22291565 257.41156006]
[89.53497314 242.41482544]
[89.84703064 227.41806030]
[90.15908813 212.42131042]
[90.47113800 197.42456055]
[90.78319550 182.42781067]
[91.09525299 167.43104553]
[91.40731049 152.43429565]
[91.71936798 137.43754578]
[76.31731415 130.15408325]
[65.59130096 116.91684723]
[51.09570312 120.77400970]
[36.60010529 124.63117218]
[22.10450935 128.48832703]
[7.60891294 132.34548950]
[-3.61885691 144.29827881]
[-19.52016258 140.28822327]
[-23.73710442 124.44053650]
[-11.93165398 113.05794525]
[3.75175357 117.84989166]
[18.24735069 113.99272919]
[32.74294662 110.13557434]
[47.23854446 106.27841187]
[61.73413849 102.42125702]
[60.51375580 94.48367310]
[60.98380280 86.16346741]
[63.24520493 77.82830811]
[49.12040329 72.77955627]
[34.99559784 67.73079681]
[19.93824577 73.26755524]
[6.29660749 64.82450104]
[4.53537989 48.87841415]
[16.00562668 37.66177368]
[31.90835571 39.77902603]
[40.04435349 53.60599518]
[54.16915894 58.65475082]
[68.29396057 63.70350647]
[80.98889160 55.71359253]
[82.54647064 40.79467773]
[84.10404968 25.87576675]
[71.05219269 19.88503456]
[60.51078415 10.16383171]
[53.50576401 -2.32363510]
[50.71327972 -16.34484100]
[52.39445496 -30.52058601]
[58.37102127 -43.46066666]
[68.04412079 -53.90019989]
[80.45429993 -60.82327271]
[94.37664032 -63.56180191]
[96.24425507 -78.44508362]
[98.11186981 -93.32836151]
[99.97948456 -108.21163940]
[101.84709167 -123.09491730]
[103.71470642 -137.97819519]
[89.85822296 -143.99272156]
[78.25838470 -153.66848755]
[69.85555267 -166.22113037]
[65.33089447 -180.63308716]
[65.05121613 -195.73600769]
[69.03918457 -210.30560303]
[76.97151184 -223.16075134]
[88.20515442 -233.25935364]
[101.82946777 -239.78276062]
[116.73997498 -242.20216370]
[131.72795105 -240.32141113]
[145.57838440 -234.29296875]
[157.16850281 -224.60556030]
[165.55871582 -212.04447937]
[170.06889343 -197.62799072]
[170.33340454 -182.52478027]
[166.33079529 -167.95921326]
[158.38555908 -155.11204529]
[147.14176941 -145.02471924]
[133.51092529 -138.51499939]
[118.59799194 -136.11058044]
[116.73037720 -121.22731018]
[114.86276245 -106.34402466]
[112.99514771 -91.46074677]
[111.12753296 -76.57746887]
[109.25992584 -61.69418716]
[123.33504486 -54.70515442]
[134.19288635 -43.30755234]
[140.51283264 -28.86110306]
[141.51716614 -13.09791470]
[137.06669617 2.08519149]
[127.67973328 14.85492706]
[114.47176361 23.66289902]
[99.02296448 27.43334770]
[97.46538544 42.35226059]
[95.90780640 57.27117157]
[105.88581085 58.14201355]
[115.23770142 61.27483749]
[123.46682739 66.42794800]
[130.15397644 73.25457764]
[134.97862244 81.32544708]
[137.73385620 90.15532684]
[138.33468628 99.23202515]
[153.10075378 101.87088776]
[162.16549683 100.29535675]
[168.14517212 104.72130585]
[182.85313416 107.66679382]
[196.94757080 100.00348663]
[211.67007446 106.37745667]
[215.72679138 121.89913940]
[206.00576782 134.66162109]
[189.96412659 134.87463379]
[179.90765381 122.37475586]
[165.19969177 119.42926788]
[150.46188354 116.63694763]
[135.69583130 113.99808502]
[132.11558533 120.94583130]
[127.20082855 127.02320099]
[121.15577698 131.97767639]
[114.23163605 135.60336304]
[106.71611786 137.74960327]
[106.40406036 152.74635315]
[106.09201050 167.74310303]
[105.77995300 182.73985291]
[105.46789551 197.73661804]
[105.15583801 212.73336792]
[104.84378052 227.73011780]
[104.53172302 242.72686768]
[104.21967316 257.72363281]
[103.90761566 272.72036743]
[103.59555817 287.71713257]
[103.28350067 302.71389771]
[117.77643585 306.91116333]
[130.68870544 314.71731567]
[141.13990784 325.60009766]
[148.41748047 338.81747437]
[152.02522278 353.46829224]
[151.71714783 368.55364990]
[147.51426697 383.04495239]
[139.70314026 395.95419312]
[128.81632996 406.40121460]
[115.59613800 413.67367554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[41 51]
[42 50]
[43 49]
[52 104]
[53 103]
[54 102]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[111 124]
[112 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
