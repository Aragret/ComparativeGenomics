%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACCAAGGGGGGGGGGAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGxxxxxxxxxxACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCCCCCCCCCCCUCACCCA\
) } def
/len { sequence length } bind def

/coor [
[83.29785919 360.52157593]
[70.07765961 353.24908447]
[59.19086075 342.80209351]
[51.37973022 329.89285278]
[47.17684937 315.40151978]
[46.86877441 300.31619263]
[50.47651672 285.66537476]
[57.75408936 272.44796753]
[68.20529938 261.56521606]
[81.11756134 253.75906372]
[95.61049652 249.56178284]
[95.29843903 234.56503296]
[94.98638153 219.56826782]
[94.67432404 204.57151794]
[94.36227417 189.57476807]
[94.05021667 174.57801819]
[93.73815918 159.58125305]
[93.42610168 144.58450317]
[93.11404419 129.58775330]
[92.80198669 114.59099579]
[83.73806000 100.50766754]
[91.90589142 85.88639069]
[91.28191376 70.89937592]
[76.27996063 70.61737061]
[61.32240295 69.43008423]
[46.46382141 67.34184265]
[31.75843430 64.36027527]
[17.25990105 60.49625015]
[3.02112436 55.76387405]
[-10.90594006 50.18041611]
[-24.47047424 43.76624298]
[-37.62297821 36.54476547]
[-50.31546783 28.54233360]
[-62.50162125 19.78814507]
[-74.13697052 10.31414509]
[-85.17906952 0.15490250]
[-95.58762360 -10.65251255]
[-105.32464600 -22.06866455]
[-114.35461426 -34.05189514]
[-122.64457703 -46.55848312]
[-130.16427612 -59.54278946]
[-136.88629150 -72.95743561]
[-142.78607178 -86.75347137]
[-147.84211731 -100.88056183]
[-152.03594971 -115.28715515]
[-155.35227966 -129.92068481]
[-157.77902222 -144.72773743]
[-159.30728149 -159.65431213]
[-159.93153381 -174.64591980]
[-159.64945984 -189.64787292]
[-158.46209717 -204.60542297]
[-156.37379456 -219.46400452]
[-153.39215088 -234.16937256]
[-149.52806091 -248.66789246]
[-144.79560852 -262.90664673]
[-139.21209717 -276.83367920]
[-132.79785156 -290.39819336]
[-125.57631683 -303.55065918]
[-117.57382965 -316.24310303]
[-108.81958008 -328.42922974]
[-99.34552765 -340.06454468]
[-89.18623352 -351.10659790]
[-78.37876892 -361.51507568]
[-66.96257782 -371.25204468]
[-54.97930145 -380.28195190]
[-42.47267532 -388.57186890]
[-29.48833466 -396.09152222]
[-16.07365799 -402.81344604]
[-2.27759242 -408.71319580]
[11.84951973 -413.76916504]
[26.25613022 -417.96292114]
[40.88967133 -421.27920532]
[55.69674683 -423.70584106]
[70.62332153 -425.23406982]
[85.61494446 -425.85821533]
[100.61688995 -425.57608032]
[115.57444000 -424.38867188]
[130.43299866 -422.30029297]
[145.13835144 -419.31857300]
[159.63685608 -415.45440674]
[173.87559509 -410.72189331]
[187.80259705 -405.13830566]
[201.36708069 -398.72402954]
[214.51951599 -391.50241089]
[227.21192932 -383.49987793]
[239.39799500 -374.74557495]
[251.03326416 -365.27145386]
[262.07525635 -355.11212158]
[272.48373413 -344.30459595]
[282.22064209 -332.88836670]
[291.25048828 -320.90505981]
[299.54034424 -308.39837646]
[307.05990601 -295.41400146]
[313.78179932 -281.99929810]
[319.68145752 -268.20321655]
[324.73736572 -254.07606506]
[328.93106079 -239.66943359]
[332.24728394 -225.03588867]
[334.67385864 -210.22880554]
[336.20199585 -195.30221558]
[336.82611084 -180.31059265]
[336.54388428 -165.30863953]
[335.35638428 -150.35110474]
[333.26794434 -135.49255371]
[330.28616333 -120.78720856]
[326.42193604 -106.28872681]
[321.68936157 -92.05001831]
[316.10571289 -78.12303162]
[309.69134521 -64.55858612]
[302.46969604 -51.40618134]
[294.46710205 -38.71380615]
[285.71273804 -26.52777290]
[276.23855591 -14.89255142]
[266.07916260 -3.85059428]
[255.27162170 6.55780602]
[243.85533142 16.29467010]
[231.87196350 25.32447052]
[219.36526489 33.61425781]
[206.38085938 41.13378143]
[192.96612549 47.85560608]
[179.16999817 53.75519943]
[165.04283142 58.81103897]
[150.63618469 63.00467682]
[136.00262451 66.32080841]
[121.19551849 68.74733734]
[106.26892853 70.27539825]
[106.89290619 85.26241302]
[114.99454498 93.68555450]
[115.35920715 105.36685944]
[107.79874420 114.27893829]
[108.11080170 129.27569580]
[108.42285919 144.27244568]
[108.73490906 159.26919556]
[109.04696655 174.26596069]
[109.35902405 189.26271057]
[109.67108154 204.25946045]
[109.98313904 219.25621033]
[110.29519653 234.25297546]
[110.60724640 249.24972534]
[125.26224518 252.84048462]
[138.48805237 260.10275269]
[149.38291931 270.54135132]
[157.20401001 283.44454956]
[161.41809082 297.93261719]
[161.73780823 313.01773071]
[158.14138794 327.67132568]
[150.87402344 340.89431763]
[140.43121338 351.78515625]
[127.52498627 359.60128784]
[113.03529358 363.80975342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 127]
[23 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
