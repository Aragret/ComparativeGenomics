%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACACCAUAGGGGGGGGGGUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUxxxxxxxxxxGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGCCCCCCCCCCGCCCACCAUA\
) } def
/len { sequence length } bind def

/coor [
[77.86259460 605.91235352]
[64.01665497 599.89636230]
[52.30799103 590.36694336]
[43.60546875 578.03125000]
[38.55486679 563.80474854]
[37.53097534 548.74304199]
[40.60977554 533.96392822]
[47.56279755 520.56396484]
[57.87408066 509.53762817]
[70.77845764 501.70312500]
[85.31835175 497.64181519]
[85.31835175 482.64181519]
[85.31835175 467.64181519]
[85.31835175 452.64181519]
[85.31835175 437.64181519]
[85.31835175 422.64181519]
[85.31835175 407.64181519]
[85.31835175 392.64181519]
[85.31835175 377.64181519]
[85.31835175 362.64181519]
[85.31835175 347.64181519]
[85.31835175 332.64181519]
[85.31835175 317.64181519]
[82.58797455 313.65176392]
[82.37947083 307.89086914]
[85.64338684 302.02108765]
[86.26736450 287.03408813]
[79.06620026 273.99597168]
[87.37086487 260.52960205]
[87.99484253 245.54257202]
[88.61882019 230.55555725]
[89.24279785 215.56854248]
[82.04163361 202.53042603]
[90.34629822 189.06405640]
[81.37346649 174.01454163]
[91.28050995 158.52807617]
[91.59256744 143.53132629]
[91.90462494 128.53457642]
[75.75263977 117.08281708]
[70.40554810 98.01876831]
[56.17876434 93.26495361]
[41.95198822 88.51113892]
[27.92473984 95.79206848]
[12.88301468 90.94211578]
[5.75079823 76.83867645]
[10.75950909 61.84906387]
[24.93756866 54.86635590]
[39.87338257 60.03326797]
[46.70580292 74.28435516]
[60.93257904 79.03816986]
[75.15936279 83.79198456]
[85.25881195 74.26181030]
[98.58920288 70.37287140]
[101.68752289 55.69634628]
[104.78584290 41.01982117]
[103.07341766 34.52558517]
[104.69883728 28.99482536]
[108.33041382 25.80308914]
[112.03657532 11.26815319]
[115.74273682 -3.26678324]
[119.44889832 -17.80171967]
[123.15505981 -32.33665466]
[126.86122131 -46.87159348]
[113.10144043 -52.93115997]
[100.52678680 -61.17299652]
[89.48029327 -71.37225342]
[80.26332855 -83.25070190]
[73.12732697 -96.48426819]
[68.26697540 -110.71194458]
[65.81485748 -125.54559326]
[65.83787537 -140.58053589]
[68.33540344 -155.40660095]
[73.23929596 -169.61932373]
[80.41577911 -182.83097839]
[89.66907501 -194.68115234]
[100.74674225 -204.84654236]
[113.34658051 -213.04983521]
[127.12484741 -219.06724548]
[141.70567322 -222.73460388]
[156.69126892 -223.95187378]
[171.67282104 -222.68583679]
[186.24162292 -218.97103882]
[200.00024414 -212.90881348]
[212.57330322 -204.66456604]
[223.61782837 -194.46316528]
[232.83250427 -182.58294678]
[239.96595764 -169.34800720]
[244.82356262 -155.11940002]
[247.27282715 -140.28527832]
[247.24691772 -125.25034332]
[244.74653625 -110.42475891]
[239.83990479 -96.21297455]
[232.66087341 -83.00270081]
[223.40528870 -71.15431976]
[212.32566833 -60.99106598]
[199.72424316 -52.79019928]
[185.94482422 -46.77544403]
[171.36329651 -43.11088943]
[156.37747192 -41.89651108]
[141.39614868 -43.16543198]
[137.68998718 -28.63049507]
[133.98382568 -14.09555817]
[130.27766418 0.43937802]
[126.57151031 14.97431374]
[122.86534882 29.50925064]
[119.46237183 44.11814117]
[116.36405182 58.79467010]
[113.26572418 73.47119141]
[122.68709564 80.89365387]
[128.39874268 91.44031525]
[129.46672058 103.38663483]
[125.71639252 114.77918243]
[117.76099396 123.75508881]
[106.90137482 128.84663391]
[106.58931732 143.84338379]
[106.27725983 158.84013367]
[114.64704895 168.70930481]
[114.04111481 181.23336792]
[105.33332062 189.68803406]
[112.48985291 203.79812622]
[104.22981262 216.19252014]
[103.60583496 231.17953491]
[102.98185730 246.16654968]
[102.35787964 261.15356445]
[109.51441956 275.26364136]
[101.25437927 287.65805054]
[100.63040161 302.64508057]
[100.31835175 317.64181519]
[100.31835175 332.64181519]
[100.31835175 347.64181519]
[100.31835175 362.64181519]
[100.31835175 377.64181519]
[100.31835175 392.64181519]
[100.31835175 407.64181519]
[100.31835175 422.64181519]
[100.31835175 437.64181519]
[100.31835175 452.64181519]
[100.31835175 467.64181519]
[100.31835175 482.64181519]
[100.31835175 497.64181519]
[114.85823822 501.70312500]
[127.76261902 509.53762817]
[138.07389832 520.56396484]
[145.02691650 533.96392822]
[148.10572815 548.74304199]
[147.08183289 563.80474854]
[142.03123474 578.03125000]
[133.32870483 590.36694336]
[121.62004089 599.89636230]
[107.77410126 605.91235352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 127]
[27 126]
[29 124]
[30 123]
[31 122]
[32 121]
[34 119]
[36 116]
[37 115]
[38 114]
[40 51]
[41 50]
[42 49]
[53 108]
[54 107]
[55 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
