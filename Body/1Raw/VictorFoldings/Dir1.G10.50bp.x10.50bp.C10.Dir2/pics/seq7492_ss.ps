%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCCUCAUGGGGGGGGGGAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACxxxxxxxxxxCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAACCCCCCCCCCACACCCUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.83489990]
[71.19830322 354.81887817]
[59.48964310 345.28945923]
[50.78712082 332.95379639]
[45.73651886 318.72726440]
[44.71262741 303.66558838]
[47.79142761 288.88641357]
[54.74444962 275.48651123]
[65.05573273 264.46017456]
[77.96011353 256.62567139]
[92.50000000 252.56434631]
[92.50000000 237.56434631]
[92.50000000 222.56434631]
[92.50000000 207.56434631]
[92.50000000 192.56434631]
[92.50000000 177.56434631]
[92.50000000 162.56434631]
[92.50000000 147.56434631]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[92.50000000 67.43565369]
[77.52276611 66.52983093]
[62.62754440 64.72135925]
[47.86869049 62.01683426]
[33.30006409 58.42612457]
[18.97481728 53.96232605]
[4.94522429 48.64173508]
[-8.73752117 42.48376465]
[-22.02349281 35.51088333]
[-34.86421204 27.74853134]
[-47.21282196 19.22503662]
[-59.02426910 9.97150040]
[-70.25544739 0.02168765]
[-80.86537933 -10.58809566]
[-90.81534576 -21.81913567]
[-100.06904602 -33.63045120]
[-108.59271240 -45.97894287]
[-116.35523987 -58.81955338]
[-123.32830811 -72.10543060]
[-129.48646545 -85.78809357]
[-134.80725098 -99.81761169]
[-139.27125549 -114.14279175]
[-142.86216736 -128.71136475]
[-145.56689453 -143.47018433]
[-147.37557983 -158.36538696]
[-148.28160095 -173.34260559]
[-148.28167725 -188.34721375]
[-147.37579346 -203.32444763]
[-145.56724548 -218.21965027]
[-142.86265564 -232.97848511]
[-139.27186584 -247.54710388]
[-134.80801392 -261.87231445]
[-129.48735046 -275.90188599]
[-123.32931519 -289.58462524]
[-116.35637665 -302.87054443]
[-108.59396362 -315.71124268]
[-100.07041168 -328.05981445]
[-90.81681824 -339.87121582]
[-80.86695862 -351.10235596]
[-70.25712585 -361.71221924]
[-59.02603531 -371.66213989]
[-47.21467972 -380.91580200]
[-34.86614609 -389.43939209]
[-22.02549934 -397.20187378]
[-8.73959160 -404.17486572]
[4.94309664 -410.33297729]
[18.97263908 -415.65368652]
[33.29784393 -420.11761475]
[47.86643982 -423.70846558]
[62.62526703 -426.41311646]
[77.52046967 -428.22174072]
[92.49769592 -429.12768555]
[107.50230408 -429.12768555]
[122.47953033 -428.22174072]
[137.37474060 -426.41311646]
[152.13356018 -423.70846558]
[166.70214844 -420.11761475]
[181.02735901 -415.65368652]
[195.05690002 -410.33297729]
[208.73959351 -404.17486572]
[222.02549744 -397.20187378]
[234.86614990 -389.43939209]
[247.21467590 -380.91580200]
[259.02603149 -371.66213989]
[270.25711060 -361.71221924]
[280.86694336 -351.10235596]
[290.81683350 -339.87121582]
[300.07040405 -328.05981445]
[308.59396362 -315.71124268]
[316.35638428 -302.87054443]
[323.32931519 -289.58462524]
[329.48736572 -275.90188599]
[334.80801392 -261.87231445]
[339.27188110 -247.54710388]
[342.86264038 -232.97848511]
[345.56726074 -218.21965027]
[347.37579346 -203.32444763]
[348.28167725 -188.34721375]
[348.28161621 -173.34260559]
[347.37557983 -158.36538696]
[345.56689453 -143.47018433]
[342.86218262 -128.71136475]
[339.27124023 -114.14279175]
[334.80725098 -99.81761169]
[329.48648071 -85.78809357]
[323.32830811 -72.10543060]
[316.35525513 -58.81955338]
[308.59271240 -45.97894287]
[300.06906128 -33.63045120]
[290.81533813 -21.81913567]
[280.86538696 -10.58809566]
[270.25543213 0.02168765]
[259.02426147 9.97150040]
[247.21282959 19.22503662]
[234.86421204 27.74853134]
[222.02349854 35.51088333]
[208.73751831 42.48376465]
[195.05477905 48.64173508]
[181.02517700 53.96232605]
[166.69993591 58.42612457]
[152.13130188 62.01683426]
[137.37245178 64.72135925]
[122.47723389 66.52983093]
[107.50000000 67.43565369]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[107.50000000 147.56434631]
[107.50000000 162.56434631]
[107.50000000 177.56434631]
[107.50000000 192.56434631]
[107.50000000 207.56434631]
[107.50000000 222.56434631]
[107.50000000 237.56434631]
[107.50000000 252.56434631]
[122.03988647 256.62567139]
[134.94427490 264.46017456]
[145.25555420 275.48651123]
[152.20857239 288.88641357]
[155.28736877 303.66558838]
[154.26348877 318.72726440]
[149.21287537 332.95379639]
[140.51036072 345.28945923]
[128.80169678 354.81887817]
[114.95575714 360.83489990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
