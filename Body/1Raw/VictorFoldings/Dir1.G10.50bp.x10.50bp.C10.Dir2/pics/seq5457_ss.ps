%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAUGACUAGGGGGGGGGGACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUxxxxxxxxxxCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCCCCCCCCCCCUAACCUGACUA\
) } def
/len { sequence length } bind def

/coor [
[82.61563873 404.37829590]
[68.91348267 398.11740112]
[56.94837189 388.96405029]
[47.32045746 377.37738037]
[40.51268005 363.93856812]
[36.86651230 349.32168579]
[36.56484222 334.25991821]
[39.62280655 319.50875854]
[45.88701630 305.80810547]
[55.04326248 293.84521484]
[66.63227081 284.22012329]
[80.07273865 277.41558838]
[94.69050598 273.77297974]
[94.38649750 258.77606201]
[94.08249664 243.77912903]
[93.77848816 228.78221130]
[93.47448730 213.78529358]
[93.17047882 198.78837585]
[92.86647797 183.79145813]
[92.56246948 168.79454041]
[92.25846863 153.79762268]
[91.95446777 138.80070496]
[83.96080780 126.23284912]
[91.41683197 112.27870178]
[83.82630920 125.21640015]
[73.82862854 136.39880371]
[61.81815720 145.38482666]
[48.26866913 151.81999207]
[33.71464157 155.45045471]
[18.73017883 156.13301086]
[3.90636420 153.84074402]
[-10.17205524 148.66404724]
[-22.94973755 140.80715942]
[-33.92264557 130.57997131]
[-42.65794373 118.38593292]
[-48.81105042 104.70604706]
[-52.13925171 90.07994080]
[-52.51125717 75.08454895]
[-49.91239548 60.31140137]
[-44.44518661 46.34323883]
[-36.32528305 33.73105621]
[-25.87299156 22.97235489]
[-13.50061798 14.49153233]
[0.30379349 8.62312412]
[14.99570847 5.59861851]
[29.99558258 5.53732061]
[44.71172714 8.44164944]
[58.56364059 14.19703865]
[71.00491333 22.57645988]
[81.54478455 33.24937439]
[89.76749420 45.79477310]
[95.34868622 59.71778488]
[98.06819916 74.46920013]
[97.81846619 89.46966553]
[105.88152313 76.82106781]
[113.94458008 64.17246246]
[122.00762939 51.52386093]
[130.07069397 38.87525940]
[133.97743225 24.39294815]
[133.36955261 9.40527153]
[132.76167297 -5.58240604]
[132.15379333 -20.57008362]
[131.54589844 -35.55776215]
[128.22926331 -50.18649673]
[122.31392670 -63.97086334]
[108.86141968 -73.34967041]
[110.52685547 -89.66403198]
[125.59697723 -96.13112640]
[138.56893921 -86.09817505]
[136.09829712 -69.88619995]
[142.01362610 -56.10183334]
[144.13981628 -70.95037842]
[150.67390442 -84.45244598]
[160.99900818 -95.33326721]
[174.14030457 -102.56557465]
[188.85710144 -105.46654510]
[203.75997925 -103.76229858]
[217.44190979 -97.61373138]
[228.61114502 -87.60134125]
[236.21321106 -74.67041779]
[239.53036499 -60.04180145]
[238.24942017 -45.09659576]
[232.49131775 -31.24580765]
[222.79969788 -19.79711914]
[210.08955383 -11.83141994]
[195.56088257 -8.10076618]
[180.58535767 -8.95737743]
[166.57685852 -14.32037735]
[154.85794067 -23.68343735]
[146.53358459 -36.16564560]
[147.14146423 -21.17796707]
[147.74934387 -6.19028997]
[148.35723877 8.79738808]
[148.96511841 23.78506470]
[156.34370422 10.72533607]
[166.08700562 -0.67939836]
[177.83427429 -10.00686264]
[191.15055847 -16.91169548]
[205.54278564 -21.13823509]
[220.47808838 -22.52998924]
[235.40344238 -21.03542709]
[249.76623535 -16.70988274]
[263.03463745 -9.71352005]
[274.71740723 -0.30538657]
[284.38195801 11.16616917]
[291.67044067 24.27639580]
[296.31298828 38.53987122]
[298.13769531 53.42847061]
[297.07705688 68.39092255]
[293.17025757 82.87322235]
[286.56201172 96.33914948]
[277.49697876 108.29010010]
[266.31082153 118.28357697]
[253.41767883 125.94956207]
[239.29498291 131.00421143]
[224.46563721 133.26036072]
[209.47869873 132.63449097]
[194.88908386 129.14974976]
[181.23701477 122.93518829]
[169.02795410 114.22090149]
[158.71395874 103.32955170]
[150.67694092 90.66439056]
[145.21444702 76.69437408]
[142.52876282 61.93676376]
[142.71928406 46.93831253]
[134.65623474 59.58691406]
[126.59317780 72.23551941]
[118.53012085 84.88411713]
[110.46707153 97.53272247]
[106.41374969 111.97470093]
[114.42915344 125.61522675]
[106.95138550 138.49668884]
[107.25538635 153.49360657]
[107.55939484 168.49052429]
[107.86339569 183.48745728]
[108.16740417 198.48437500]
[108.47140503 213.48129272]
[108.77540588 228.47821045]
[109.07941437 243.47512817]
[109.38341522 258.47204590]
[109.68742371 273.46896362]
[124.44079590 276.51620483]
[138.14598083 282.77044678]
[150.11553955 291.91799927]
[159.74905396 303.50000000]
[166.56335449 316.93551636]
[170.21659851 331.55062866]
[170.52557373 346.61224365]
[167.47474670 361.36489868]
[161.21717834 375.06857300]
[152.06674194 387.03588867]
[140.48239136 396.66662598]
[127.04521942 403.47766113]
[112.42922974 407.12734985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 130]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[59 94]
[60 93]
[61 92]
[62 91]
[63 90]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
