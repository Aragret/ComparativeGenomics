%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAUAACCGGGGGGGGGGAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAxxxxxxxxxxCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACCCCCCCCCCCAAUUAUACCC\
) } def
/len { sequence length } bind def

/coor [
[117.07078552 366.74328613]
[103.85058594 359.47079468]
[92.96378326 349.02380371]
[85.15264893 336.11456299]
[80.94976807 321.62322998]
[80.64170074 306.53790283]
[84.24943542 291.88708496]
[91.52701569 278.66967773]
[101.97821808 267.78692627]
[114.89048004 259.98077393]
[129.38342285 255.78349304]
[129.07136536 240.78672791]
[128.75930786 225.78997803]
[128.44725037 210.79322815]
[128.13519287 195.79647827]
[127.82313538 180.79971313]
[127.51107788 165.80296326]
[127.19902802 150.80621338]
[126.88697052 135.80946350]
[126.57491302 120.81270599]
[104.16815186 130.75492859]
[83.15756226 122.76400757]
[74.73719025 104.13173676]
[59.87414551 102.10939789]
[45.01110077 100.08706665]
[30.29376411 105.89315033]
[18.72585487 96.51057434]
[3.86280894 94.48824310]
[-11.03909302 92.77555084]
[-25.97340202 91.37324524]
[-40.90770721 89.97093964]
[-55.84201813 88.56864166]
[-70.77632141 87.16633606]
[-78.20716858 100.45928192]
[-90.40619659 109.57540131]
[-105.25985718 112.93526459]
[-120.19466400 109.95675659]
[-132.62306213 101.15592194]
[-140.39176941 88.05755615]
[-142.15480042 72.93103790]
[-137.60670471 58.39712143]
[-127.53547668 46.97389603]
[-113.68599701 40.64050674]
[-98.45777893 40.49425125]
[-84.48921204 46.56046677]
[-74.20042419 57.78814697]
[-69.37402344 72.23202515]
[-54.43971252 73.63433075]
[-39.50540543 75.03663635]
[-24.57109833 76.43894196]
[-9.63679028 77.84123993]
[-5.40895081 75.49584198]
[0.34619945 75.82682037]
[5.88514328 79.62519073]
[20.74818993 81.64752960]
[34.40242004 75.69679260]
[47.03343201 85.22401428]
[61.89648056 87.24635315]
[76.75952911 89.26868439]
[95.22770691 70.70954132]
[124.56875610 76.85327911]
[125.81563568 61.90519333]
[127.06250763 46.95710373]
[128.30938721 32.00901794]
[129.55625916 17.06093216]
[121.31085968 0.62945759]
[131.79791260 -13.40698147]
[132.73355103 -28.37777328]
[133.66917419 -43.34856415]
[134.60479736 -58.31935501]
[121.08646393 -65.33180237]
[111.59413910 -77.24044800]
[107.77243805 -91.98203278]
[110.28348541 -107.00250244]
[118.69223785 -119.69947052]
[131.54180908 -127.87310028]
[146.60595703 -130.10726929]
[161.27470398 -126.01488495]
[173.00662231 -116.30498505]
[179.76907349 -102.65986633]
[180.39042664 -87.44363403]
[174.76301575 -73.29258728]
[163.86184692 -62.65847397]
[149.57559204 -57.38372803]
[148.63996887 -42.41293716]
[147.70433044 -27.44214439]
[146.76870728 -12.47135353]
[154.55151367 -3.15817404]
[153.85368347 9.36109161]
[144.50434875 18.30780602]
[143.25746155 33.25589371]
[142.01058960 48.20397949]
[140.76371765 63.15206528]
[139.51684570 78.10015106]
[141.59461975 63.24475479]
[152.33105469 52.76959610]
[167.23312378 51.05835342]
[180.06454468 58.82716370]
[185.45559692 72.82489777]
[181.15019226 87.19374084]
[168.95008850 95.92055511]
[153.95964050 95.35285950]
[168.89393616 96.75516510]
[183.82824707 98.15746307]
[190.13281250 85.34913635]
[200.41653442 75.49051666]
[213.42469788 69.75610352]
[227.57981873 68.81891632]
[241.17297363 72.77159119]
[252.57009888 81.11764526]
[260.40841675 92.83375549]
[263.75939941 106.49519348]
[278.66131592 108.20788574]
[293.56320190 109.92057037]
[309.98910522 105.72227478]
[318.57049561 120.34405518]
[306.89569092 132.63777161]
[291.85052490 124.82247162]
[276.94860840 123.10978699]
[262.04672241 121.39709473]
[254.58479309 135.34358215]
[242.32083130 145.39337158]
[227.10626221 149.99121094]
[211.25254822 148.40783691]
[197.18009949 140.85536194]
[187.04866028 128.45948792]
[182.42594910 113.09177399]
[167.49163818 111.68946838]
[152.55732727 110.28716278]
[141.57167053 120.50064850]
[141.88372803 135.49740601]
[142.19578552 150.49415588]
[142.50782776 165.49090576]
[142.81988525 180.48765564]
[143.13194275 195.48442078]
[143.44400024 210.48117065]
[143.75605774 225.47792053]
[144.06811523 240.47467041]
[144.38017273 255.47143555]
[159.03517151 259.06219482]
[172.26097107 266.32446289]
[183.15583801 276.76306152]
[190.97694397 289.66625977]
[195.19100952 304.15432739]
[195.51072693 319.23941040]
[191.91430664 333.89303589]
[184.64694214 347.11602783]
[174.20413208 358.00686646]
[161.29791260 365.82299805]
[146.80821228 370.03146362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 59]
[24 58]
[25 57]
[27 55]
[28 54]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[67 87]
[68 86]
[69 85]
[70 84]
[102 129]
[103 128]
[104 127]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
