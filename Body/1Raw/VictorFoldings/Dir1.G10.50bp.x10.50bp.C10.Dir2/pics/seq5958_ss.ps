%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCUUAUGGGGGGGGGGAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUxxxxxxxxxxCAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGCCCCCCCCCCAUAAUCCUAU\
) } def
/len { sequence length } bind def

/coor [
[106.68865204 353.81439209]
[92.19895935 349.60589600]
[79.29273224 341.78979492]
[68.84992981 330.89895630]
[61.58256912 317.67596436]
[57.98614120 303.02233887]
[58.30586243 287.93725586]
[62.51993179 273.44918823]
[70.34103394 260.54595947]
[81.23590088 250.10737610]
[94.46170807 242.84512329]
[109.11669922 239.25434875]
[109.42875671 224.25759888]
[109.74081421 209.26084900]
[110.05287170 194.26409912]
[110.36492157 179.26733398]
[110.67697906 164.27058411]
[110.98903656 149.27383423]
[111.30109406 134.27708435]
[111.61315155 119.28032684]
[93.81472778 119.43309784]
[83.25261688 107.32617950]
[68.25342560 107.17014313]
[53.25423813 107.01410675]
[38.39119339 109.03644562]
[23.97897720 113.19432831]
[9.56676006 117.35221863]
[-4.84545565 121.51010895]
[-19.25767136 125.66799164]
[-32.80013657 135.86788940]
[-46.35034943 125.67828369]
[-40.31002426 109.83685303]
[-23.41555977 111.25577545]
[-9.00334263 107.09789276]
[5.40887308 102.94000244]
[19.82108879 98.78211212]
[34.23330688 94.62422943]
[19.93621254 90.08625793]
[8.39546776 80.50444031]
[1.30565023 67.28572845]
[-0.29220679 52.37107468]
[3.83651733 37.95047760]
[13.08558273 26.14137840]
[26.09690475 18.67776680]
[40.95996857 16.65555763]
[55.49235916 20.37168312]
[67.56021881 29.28048706]
[75.39156342 42.07384491]
[77.83647919 56.87324905]
[74.53597260 71.50563049]
[65.97466278 83.82245636]
[53.41027451 92.01492310]
[68.40946198 92.17095947]
[83.40865326 92.32699585]
[90.47883606 83.16979980]
[102.19739532 79.72502899]
[114.31676483 84.02619171]
[121.97857666 95.14836884]
[132.64019775 84.59708405]
[143.30183411 74.04579163]
[153.96345520 63.49449921]
[164.29066467 52.61567688]
[174.27339172 41.41991043]
[173.77143860 24.94990730]
[185.07688904 13.72967720]
[184.76483154 -1.26707685]
[184.45277405 -16.26383018]
[170.17893982 -21.42347336]
[158.73542786 -31.39395142]
[151.66987610 -44.82684326]
[149.93786621 -59.90545273]
[153.77360535 -74.59053040]
[162.65837097 -86.89603424]
[175.39054871 -95.15775299]
[190.24822998 -98.25834656]
[205.22204590 -95.77848816]
[218.28688049 -88.05356598]
[227.67584229 -76.12830353]
[232.11914062 -61.61550140]
[231.01586914 -46.47789383]
[224.51522827 -32.76271439]
[213.49638367 -22.32483292]
[199.44952393 -16.57588768]
[199.76158142 -1.57913315]
[200.07363892 13.41762066]
[203.76759338 15.32481480]
[206.97784424 17.96620750]
[220.88040161 12.33425140]
[234.78295898 6.70229435]
[248.68550110 1.07033777]
[262.58807373 -4.56161880]
[276.49063110 -10.19357586]
[277.24389648 -27.29330444]
[285.34100342 -42.31071091]
[299.12420654 -52.27227020]
[315.81536865 -55.22932053]
[332.07586670 -50.63909149]
[344.67446899 -39.46358109]
[358.33071899 -45.66898727]
[371.98696899 -51.87439728]
[378.94543457 -66.32981873]
[394.61712646 -69.76165771]
[406.98007202 -59.53729630]
[406.55044556 -43.50000000]
[393.65783691 -33.95219803]
[378.19235229 -38.21815491]
[364.53613281 -32.01274872]
[350.87988281 -25.80734062]
[351.64694214 -12.77115440]
[347.91003418 -0.22507808]
[340.09689331 10.31831169]
[329.12799072 17.58011055]
[316.30822754 20.67020226]
[303.17169189 19.19631386]
[291.29803467 13.31367588]
[282.12258911 3.70898056]
[268.22003174 9.34093761]
[254.31745911 14.97289371]
[240.41490173 20.60485077]
[226.51235962 26.23680687]
[212.60980225 31.86876297]
[204.44717407 48.53050613]
[185.46914673 51.40263748]
[175.48641968 62.59840393]
[175.34735107 66.18283081]
[173.42439270 69.87118530]
[169.69151306 72.80683136]
[164.51473999 74.15612793]
[153.85311890 84.70742035]
[143.19149780 95.25870514]
[132.52986145 105.80999756]
[126.60990143 119.59237671]
[126.29784393 134.58912659]
[125.98579407 149.58589172]
[125.67373657 164.58264160]
[125.36167908 179.57939148]
[125.04962158 194.57614136]
[124.73756409 209.57290649]
[124.42550659 224.56965637]
[124.11345673 239.56640625]
[138.60638428 243.76368713]
[151.51864624 251.56983948]
[161.96986389 262.45260620]
[169.24743652 275.66998291]
[172.85517883 290.32083130]
[172.54710388 305.40615845]
[168.34422302 319.89746094]
[160.53309631 332.80673218]
[149.64628601 343.25372314]
[136.42608643 350.52618408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 54]
[23 53]
[24 52]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[58 131]
[59 130]
[60 129]
[61 128]
[62 124]
[63 123]
[65 85]
[66 84]
[67 83]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
