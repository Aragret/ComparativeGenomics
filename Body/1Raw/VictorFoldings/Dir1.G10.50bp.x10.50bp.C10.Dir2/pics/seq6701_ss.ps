%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCCUACUGGGGGGGGGGUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGxxxxxxxxxxAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCCCCCCCCCCCAGCCCUACU\
) } def
/len { sequence length } bind def

/coor [
[122.87357330 451.86254883]
[121.13851929 436.91342163]
[122.35353088 421.91311646]
[126.47190857 407.43811035]
[133.33535767 394.04486084]
[142.68005371 382.24813843]
[154.14683533 372.50137329]
[167.29492188 365.17919922]
[162.68934631 350.90374756]
[158.08378601 336.62829590]
[153.47822571 322.35281372]
[148.87266541 308.07736206]
[144.26708984 293.80191040]
[139.66152954 279.52645874]
[128.39021301 269.78958130]
[131.51660156 254.28034973]
[126.91104126 240.00488281]
[122.30547333 225.72943115]
[117.69991302 211.45396423]
[115.19725800 210.05966187]
[113.11517334 207.55789185]
[111.89054108 204.11083984]
[111.89070892 200.04008484]
[113.35874176 195.79669189]
[109.95576477 181.18778992]
[106.55278778 166.57890320]
[101.94240570 160.74023438]
[103.23432922 151.63075256]
[100.13600159 136.95422363]
[97.03768158 122.27769470]
[91.77364349 120.91406250]
[86.99121857 118.32601166]
[82.97039795 114.66505432]
[79.94658661 110.14552307]
[78.09680939 105.03202057]
[63.19490433 103.31932831]
[48.29300308 101.60663605]
[33.39110184 99.89395142]
[18.56914139 106.91117859]
[5.23679781 97.36232758]
[7.10924101 81.07042694]
[22.26026344 74.79518890]
[35.10379028 84.99204254]
[50.00569534 86.70473480]
[64.90759277 88.41742706]
[79.80950165 90.13011169]
[86.11876678 82.32566071]
[95.19609833 78.04564667]
[97.06371307 63.16236877]
[98.93132782 48.27908707]
[100.79894257 33.39580917]
[86.20259857 29.87062645]
[72.09275055 24.73330879]
[58.64682388 18.04846191]
[46.03393173 9.90015602]
[34.41268539 0.39086309]
[23.92923546 -10.35982609]
[14.71542549 -22.21671104]
[6.88712740 -35.03067780]
[0.54279000 -48.64057922]
[-4.23779964 -62.87525177]
[-7.39452124 -77.55568695]
[-8.88767433 -92.49725342]
[-8.69848251 -107.51205444]
[-6.82932377 -122.41126251]
[-3.30370522 -137.00749207]
[1.83403480 -151.11718750]
[8.51928329 -164.56291199]
[16.66796684 -177.17556763]
[26.17760658 -188.79652405]
[36.92861176 -199.27966309]
[48.78577042 -208.49311829]
[61.59997177 -216.32102966]
[75.21006012 -222.66496277]
[89.44487762 -227.44511414]
[104.12540436 -230.60140991]
[119.06702423 -232.09411621]
[134.08181763 -231.90446472]
[148.98095703 -230.03486633]
[163.57708740 -226.50880432]
[177.68663025 -221.37065125]
[191.13215637 -214.68499756]
[203.74456787 -206.53593445]
[215.36524963 -197.02595520]
[225.84805298 -186.27462769]
[235.06115723 -174.41719055]
[242.88868713 -161.60276794]
[249.23220825 -147.99247742]
[254.01194763 -133.75752258]
[257.16778564 -119.07689667]
[258.66003418 -104.13523865]
[258.46997070 -89.12045288]
[256.59991455 -74.22135925]
[253.07341003 -59.62533569]
[247.93482971 -45.51594543]
[241.24877930 -32.07062149]
[233.09934998 -19.45845795]
[223.58900452 -7.83806467]
[212.83737183 2.64441943]
[200.97966003 11.85716629]
[188.16499329 19.68431473]
[174.55453491 26.02743149]
[160.31942749 30.80674362]
[145.63870239 33.96214676]
[130.69700623 35.45396042]
[115.68222046 35.26342010]
[113.81460571 50.14670181]
[111.94699097 65.02998352]
[110.07938385 79.91326141]
[122.45433044 99.06512451]
[111.71421051 119.17937469]
[114.81253052 133.85589600]
[117.91085052 148.53242493]
[121.16167450 163.17591858]
[124.56465149 177.78482056]
[127.96763611 192.39370728]
[131.97537231 206.84840393]
[136.58093262 221.12385559]
[141.18650818 235.39932251]
[145.79206848 249.67477417]
[157.39280701 260.43273926]
[153.93699646 274.92086792]
[158.54255676 289.19635010]
[163.14811707 303.47180176]
[167.75367737 317.74725342]
[172.35925293 332.02273560]
[176.96481323 346.29818726]
[181.57037354 360.57363892]
[196.51864624 358.83132935]
[211.51956177 360.03906250]
[225.99653625 364.15042114]
[239.39312744 371.00735474]
[251.19439697 380.34631348]
[260.94671631 391.80834961]
[268.27526855 404.95288086]
[272.89834595 419.27465820]
[274.63824463 434.22320557]
[273.42807007 449.22393799]
[269.31439209 463.70025635]
[262.45526123 477.09573364]
[253.11439514 488.89547729]
[241.65077209 498.64596558]
[228.50506592 505.97238159]
[214.18252563 510.59313965]
[199.23370361 512.33062744]
[184.23316956 511.11801147]
[169.75752258 507.00198364]
[156.36315918 500.14071655]
[144.56491089 490.79791260]
[134.81629944 479.33273315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 128]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[16 120]
[17 119]
[18 118]
[19 117]
[24 116]
[25 115]
[26 114]
[28 113]
[29 112]
[30 111]
[35 46]
[36 45]
[37 44]
[38 43]
[48 109]
[49 108]
[50 107]
[51 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
