%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCUACGGGGGGGGGGAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCxxxxxxxxxxUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCCCCCCCCCCCUCUAC\
) } def
/len { sequence length } bind def

/coor [
[87.03658295 375.97616577]
[73.19064331 369.96014404]
[61.48198318 360.43072510]
[52.77946091 348.09506226]
[47.72885895 333.86853027]
[46.70496750 318.80685425]
[49.78376389 304.02770996]
[56.73678589 290.62777710]
[67.04807281 279.60144043]
[79.95245361 271.76693726]
[94.49234009 267.70562744]
[94.49234009 252.70561218]
[94.49234009 237.70561218]
[94.49234009 222.70561218]
[94.49234009 207.70561218]
[94.49234009 192.70561218]
[94.49234009 177.70561218]
[94.49234009 162.70561218]
[94.49234009 147.70561218]
[94.49234009 132.70561218]
[75.03887177 109.81277466]
[83.76010132 87.53002167]
[76.03601837 74.67161560]
[68.31192780 61.81321716]
[54.86648178 68.48152161]
[40.92805481 74.04627991]
[26.58704567 78.47141266]
[11.93646431 81.72821808]
[-2.92867541 83.79557037]
[-17.91196442 84.66005707]
[-32.91623306 84.31608582]
[-47.84416580 82.76587677]
[-62.59894943 80.01948547]
[-77.08489227 76.09472656]
[-91.20804596 71.01705170]
[-104.87682343 64.81939697]
[-118.00256348 57.54194641]
[-130.50015259 49.23190689]
[-142.28851318 39.94316864]
[-153.29121399 29.73597717]
[-163.43690491 18.67652702]
[-172.65975952 6.83654690]
[-180.89999390 -5.70717716]
[-188.10414124 -18.87329292]
[-194.22547913 -32.57641220]
[-199.22433472 -46.72766113]
[-203.06825256 -61.23526382]
[-205.73233032 -76.00513458]
[-207.19927979 -90.94147491]
[-207.45957947 -105.94742584]
[-206.51155090 -120.92566681]
[-204.36134338 -135.77905273]
[-201.02290344 -150.41123962]
[-196.51788330 -164.72735596]
[-190.87548828 -178.63453674]
[-184.13230896 -192.04258728]
[-176.33210754 -204.86456299]
[-167.52543640 -217.01730347]
[-157.76943970 -228.42198181]
[-147.12736511 -239.00463867]
[-135.66824341 -248.69664001]
[-123.46640778 -257.43515015]
[-110.60096741 -265.16345215]
[-97.15537262 -271.83145142]
[-83.21681976 -277.39590454]
[-68.87571716 -281.82073975]
[-54.22506332 -285.07720947]
[-39.35987854 -287.14422607]
[-24.37656784 -288.00839233]
[-9.37230968 -287.66409302]
[5.55558872 -286.11355591]
[20.31031227 -283.36685181]
[34.79616928 -279.44177246]
[48.91921616 -274.36376953]
[62.58785248 -268.16580200]
[75.71343231 -260.88809204]
[88.21083069 -252.57775879]
[99.99899292 -243.28877258]
[111.00148010 -233.08132935]
[121.14691925 -222.02165222]
[130.36952209 -210.18147278]
[138.60946655 -197.63757324]
[145.81332397 -184.47129822]
[151.93437195 -170.76803589]
[156.93290710 -156.61668396]
[160.77650452 -142.10899353]
[163.44024658 -127.33906555]
[164.90687561 -112.40268707]
[165.16683960 -97.39672852]
[164.21849060 -82.41851807]
[162.06796265 -67.56517792]
[158.72918701 -52.93305969]
[154.22384644 -38.61705017]
[148.58114624 -24.70999146]
[141.83767700 -11.30208302]
[134.03718567 1.51971889]
[125.23025513 13.67226028]
[115.47399902 25.07672501]
[104.83169556 35.65914917]
[93.37236786 45.35090637]
[81.17033386 54.08913040]
[88.89441681 66.94753265]
[96.61849976 79.80593872]
[116.56758881 78.90821838]
[133.07727051 97.57400513]
[148.01158142 98.97631073]
[162.94589233 100.37861633]
[177.88020325 101.78091431]
[192.81449890 103.18321991]
[207.74880981 104.58552551]
[216.57255554 92.01424408]
[230.50654602 85.55362701]
[245.80259705 86.94154358]
[258.34616089 95.80464935]
[264.76306152 109.75881958]
[263.32720947 125.05045319]
[254.42483521 137.56616211]
[240.45062256 143.93930054]
[225.16355896 142.45552063]
[212.67581177 133.51396179]
[206.34651184 119.51982880]
[191.41220093 118.11753082]
[176.47789001 116.71522522]
[161.54357910 115.31291962]
[146.60928345 113.91061401]
[131.67497253 112.50831604]
[126.12931061 117.55764008]
[136.22778320 128.64910889]
[125.13616180 138.74742126]
[115.03799438 127.65628815]
[109.49234009 132.70561218]
[109.49234009 147.70561218]
[109.49234009 162.70561218]
[109.49234009 177.70561218]
[109.49234009 192.70561218]
[109.49234009 207.70561218]
[109.49234009 222.70561218]
[109.49234009 237.70561218]
[109.49234009 252.70561218]
[109.49234009 267.70562744]
[124.03222656 271.76693726]
[136.93659973 279.60144043]
[147.24789429 290.62777710]
[154.20091248 304.02770996]
[157.27970886 318.80685425]
[156.25581360 333.86853027]
[151.20521545 348.09506226]
[142.50270081 360.43072510]
[130.79403687 369.96014404]
[116.94809723 375.97616577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 103]
[23 102]
[24 101]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
