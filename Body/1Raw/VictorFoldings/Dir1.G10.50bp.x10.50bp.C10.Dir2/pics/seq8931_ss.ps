%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACACACUGGGGGGGGGGAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGxxxxxxxxxxCCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCCCCCCCCCCCAACAUACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.44656372]
[71.19830322 384.43054199]
[59.48964310 374.90112305]
[50.78712082 362.56542969]
[45.73651886 348.33892822]
[44.71262741 333.27725220]
[47.79142761 318.49807739]
[54.74444962 305.09814453]
[65.05573273 294.07180786]
[77.96011353 286.23730469]
[92.50000000 282.17599487]
[92.50000000 267.17599487]
[92.50000000 252.17599487]
[92.50000000 237.17599487]
[92.50000000 222.17599487]
[92.50000000 207.17599487]
[92.50000000 192.17599487]
[92.50000000 177.17599487]
[92.50000000 162.17599487]
[92.50000000 147.17599487]
[92.50000000 132.17599487]
[78.30553436 129.05714417]
[65.67694855 119.52191162]
[51.26473236 123.67979431]
[36.85251617 127.83768463]
[22.44029808 131.99557495]
[18.12258720 146.80641174]
[6.46796894 156.91448975]
[-8.80460930 159.09437561]
[-22.82172394 152.65046692]
[-31.11056519 139.63897705]
[-31.02619171 124.21184540]
[-22.59552956 111.29180908]
[-8.50876999 105.00159454]
[6.73905182 107.34839630]
[18.28241158 117.58335114]
[32.69462585 113.42546844]
[47.10684204 109.26757812]
[61.51905823 105.10969543]
[62.45468903 90.13890076]
[46.72110367 91.80169678]
[38.08059692 79.66947174]
[24.29821587 73.74950409]
[11.03279591 81.79985809]
[-4.42821264 80.48197174]
[-16.13973618 70.30258942]
[-19.59845543 55.17589188]
[-13.47442055 40.91840744]
[-0.12244947 33.01243210]
[15.32335281 34.49796677]
[26.92375946 44.80379868]
[30.21817970 59.96712494]
[44.00056076 65.88708496]
[58.74833679 63.80085754]
[68.37464905 76.35652161]
[80.79598999 69.24007416]
[93.84496307 67.53986359]
[94.46894073 52.55284882]
[95.09291840 37.56583405]
[80.40317535 34.34365463]
[66.49619293 28.61940193]
[53.79460144 20.56703377]
[42.68437958 10.43124962]
[33.50315857 -1.47993386]
[26.52994347 -14.80455017]
[21.97664261 -29.13767815]
[19.98162651 -44.04375076]
[20.60552216 -59.06979370]
[23.82936859 -73.75917053]
[29.55519676 -87.66550446]
[37.60900497 -100.36618805]
[47.74604797 -111.47525787]
[59.65827560 -120.65512848]
[72.98368073 -127.62683105]
[87.31732941 -132.17849731]
[102.22362518 -134.17182922]
[117.24959564 -133.54623413]
[131.93861389 -130.32072449]
[145.84429932 -124.59331512]
[158.54405212 -116.53806305]
[169.65197754 -106.39975739]
[178.83050537 -94.48649597]
[185.80068970 -81.16029358]
[190.35073853 -66.82613373]
[192.34237671 -51.91960907]
[191.71507263 -36.89371109]
[188.48789978 -22.20506096]
[182.75891113 -8.30003071]
[174.70222473 4.39882278]
[164.56265259 15.50559521]
[152.64834595 24.68276405]
[139.32136536 31.65144348]
[124.98668671 36.19986725]
[110.07993317 38.18981171]
[109.45595551 53.17682648]
[108.83197784 68.16384125]
[123.72344971 77.00559235]
[132.09623718 92.16569519]
[147.09542847 92.00965881]
[162.09461975 91.85362244]
[177.09379578 91.69758606]
[192.09298706 91.54154968]
[207.09217834 91.38551331]
[222.09136963 91.22947693]
[237.09056091 91.07344055]
[252.08973694 90.91740417]
[258.10009766 76.92470551]
[269.28656006 66.59114075]
[283.71105957 61.70705414]
[298.87438965 63.11864853]
[312.14947510 70.58135986]
[321.23632812 82.80222321]
[324.56054688 97.66389465]
[321.54620361 112.59151459]
[312.71560669 124.99877167]
[299.59863281 132.73603821]
[284.46792603 134.46278381]
[269.94497681 129.87983704]
[258.54592896 119.78122711]
[252.24578857 105.91659546]
[237.24659729 106.07263184]
[222.24740601 106.22866821]
[207.24821472 106.38470459]
[192.24902344 106.54074097]
[177.24983215 106.69677734]
[162.25065613 106.85281372]
[147.25146484 107.00885010]
[132.25227356 107.16488647]
[123.48296356 123.23994446]
[107.50000000 132.17599487]
[107.50000000 147.17599487]
[107.50000000 162.17599487]
[107.50000000 177.17599487]
[107.50000000 192.17599487]
[107.50000000 207.17599487]
[107.50000000 222.17599487]
[107.50000000 237.17599487]
[107.50000000 252.17599487]
[107.50000000 267.17599487]
[107.50000000 282.17599487]
[122.03988647 286.23730469]
[134.94427490 294.07180786]
[145.25555420 305.09814453]
[152.20857239 318.49807739]
[155.28736877 333.27725220]
[154.26348877 348.33892822]
[149.21287537 362.56542969]
[140.51036072 374.90112305]
[128.80169678 384.43054199]
[114.95575714 390.44656372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 39]
[24 38]
[25 37]
[26 36]
[40 55]
[42 53]
[43 52]
[57 96]
[58 95]
[59 94]
[98 128]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
