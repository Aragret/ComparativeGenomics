%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUACCAAAUGGGGGGGGGGCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAxxxxxxxxxxAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUCCCCCCCCCCAUUUACCAAAU\
) } def
/len { sequence length } bind def

/coor [
[76.20858765 402.99227905]
[62.18664169 397.43927002]
[49.98668289 388.57293701]
[40.37561417 376.95062256]
[33.95758820 363.30291748]
[31.13605118 348.48773193]
[32.08836746 333.43634033]
[36.75467300 319.09494019]
[44.84164047 306.36499023]
[55.84091187 296.04669189]
[69.06107330 288.78872681]
[83.67108154 285.04730225]
[83.67108154 270.04730225]
[83.67108154 255.04728699]
[83.67108154 240.04728699]
[83.67108154 225.04728699]
[83.67108154 210.04728699]
[83.67108154 195.04728699]
[83.67108154 180.04728699]
[83.67108154 165.04728699]
[83.67108154 150.04728699]
[85.91448212 97.13087463]
[73.76114655 88.33903503]
[63.77669525 99.55071259]
[52.70918655 109.69474030]
[40.67219543 118.66702271]
[27.78924179 126.37548828]
[14.19252300 132.74104309]
[0.02156532 137.69836426]
[-14.57821369 141.19656372]
[-29.45699692 143.19976807]
[-44.46210480 143.68740845]
[-59.43955612 142.65449524]
[-74.23566437 140.11160278]
[-88.69858551 136.08485413]
[-102.67992401 130.61553955]
[-116.03619385 123.75981140]
[-128.63034058 115.58800507]
[-140.33312988 106.18397522]
[-151.02447510 95.64423370]
[-160.59465027 84.07692719]
[-168.94548035 71.60075378]
[-175.99124146 58.34374619]
[-181.65963745 44.44194031]
[-185.89251709 30.03799248]
[-188.64643860 15.27970886]
[-189.89312744 0.31853333]
[-189.61981201 -14.69200611]
[-187.82928467 -29.59787750]
[-184.53991699 -44.24612427]
[-179.78547668 -58.48642731]
[-173.61473083 -72.17266083]
[-166.09101868 -85.16437531]
[-157.29153442 -97.32826996]
[-147.30659485 -108.53950500]
[-136.23863220 -118.68304443]
[-124.20124817 -127.65480042]
[-111.31795502 -135.36270142]
[-97.72095490 -141.72764587]
[-83.54978180 -146.68434143]
[-68.94985199 -150.18191528]
[-54.07098007 -152.18446350]
[-39.06585312 -152.67144775]
[-24.08844376 -151.63786316]
[-9.29245090 -149.09432983]
[5.17029858 -145.06692505]
[19.15139198 -139.59701538]
[32.50735855 -132.74069214]
[45.10114670 -124.56832886]
[56.80352402 -115.16378784]
[67.49440002 -104.62357330]
[77.06407928 -93.05583954]
[85.41435242 -80.57930756]
[92.45952606 -67.32199097]
[98.12731934 -53.41993332]
[102.35956573 -39.01579666]
[105.11283112 -24.25739288]
[106.35887146 -9.29616165]
[106.08489227 5.71436596]
[104.29370117 20.62015915]
[101.00369263 35.26826096]
[96.24861908 49.50835419]
[90.07727814 63.19431305]
[82.55299377 76.18569946]
[94.70632172 84.97754669]
[109.68656921 85.74720764]
[122.67694855 78.24720764]
[135.66732788 70.74720764]
[148.65771484 63.24720383]
[161.64808655 55.74720383]
[160.05569458 41.67130661]
[163.94783020 28.09594727]
[172.70259094 17.07008553]
[184.96673584 10.24468422]
[198.86485291 8.62555122]
[212.28607178 12.42523384]
[223.20468140 21.03578949]
[236.34631348 13.80408669]
[249.48794556 6.57238388]
[262.62957764 -0.65931880]
[270.65145874 -14.96251774]
[287.05047607 -14.89638138]
[294.95672607 -0.52894473]
[286.23693848 13.35980511]
[269.86129761 12.48231316]
[256.71966553 19.71401596]
[243.57801819 26.94571686]
[230.43638611 34.17742157]
[231.61483765 50.08513260]
[225.73036194 64.97380066]
[213.90928650 75.85609436]
[198.47448730 80.52492523]
[182.48896790 78.00097656]
[169.14808655 68.73758698]
[156.15771484 76.23758698]
[143.16732788 83.73758698]
[130.17694092 91.23758698]
[117.18656921 98.73758698]
[117.41752625 106.23403168]
[117.87945557 121.22691345]
[118.11042023 128.72335815]
[131.53787231 135.40943909]
[144.96531677 142.09550476]
[158.39276123 148.78158569]
[175.26646423 150.42922974]
[178.35430908 167.09960938]
[163.19021606 174.68161011]
[151.70669556 162.20903015]
[138.27923584 155.52296448]
[124.85179138 148.83688354]
[111.42433929 142.15080261]
[98.67108154 150.04728699]
[98.67108154 165.04728699]
[98.67108154 180.04728699]
[98.67108154 195.04728699]
[98.67108154 210.04728699]
[98.67108154 225.04728699]
[98.67108154 240.04728699]
[98.67108154 255.04728699]
[98.67108154 270.04730225]
[98.67108154 285.04730225]
[113.28109741 288.78872681]
[126.50125885 296.04669189]
[137.50053406 306.36499023]
[145.58749390 319.09494019]
[150.25379944 333.43634033]
[151.20611572 348.48773193]
[148.38458252 363.30291748]
[141.96655273 376.95062256]
[132.35548401 388.57293701]
[120.15552521 397.43927002]
[106.13358307 402.99227905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 85]
[23 84]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
[97 108]
[98 107]
[99 106]
[100 105]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
