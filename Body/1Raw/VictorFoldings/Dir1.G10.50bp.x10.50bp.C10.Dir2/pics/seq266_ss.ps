%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAAAUUUGGGGGGGGGGCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUxxxxxxxxxxUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCCCCCCCCCCCAAAAAUUUU\
) } def
/len { sequence length } bind def

/coor [
[75.26309967 485.45187378]
[63.37882614 476.17678833]
[54.06011963 464.32666016]
[47.84875107 450.59051514]
[45.10585022 435.76687622]
[45.99087906 420.71762085]
[50.45238495 406.31768799]
[58.23098373 393.40423584]
[68.87443542 382.72808838]
[81.76394653 374.90988159]
[96.15013123 370.40423584]
[95.21450043 355.43344116]
[94.27887726 340.46264648]
[93.34324646 325.49185181]
[92.40761566 310.52105713]
[91.47199249 295.55026245]
[90.53636169 280.57946777]
[89.60073090 265.60867310]
[88.66510773 250.63789368]
[87.72947693 235.66709900]
[86.79384613 220.69630432]
[85.85821533 205.72552490]
[84.30063629 190.80661011]
[82.12380219 175.96540833]
[79.94696045 161.12419128]
[77.77012634 146.28298950]
[75.59329224 131.44178772]
[70.38838959 145.50979614]
[68.57470703 160.39974976]
[61.11404800 173.41276550]
[49.18059540 182.50080872]
[34.65247345 186.23359680]
[19.81616402 184.02363586]
[7.00665140 176.21875000]
[-1.76006258 164.04727173]
[-5.10424566 149.42480469]
[-2.49957991 134.65267944]
[5.64400482 122.05577850]
[18.04484558 113.61663055]
[32.75125885 110.66342926]
[47.45160294 113.66217804]
[62.44398117 113.18402863]
[49.05769348 106.41591644]
[35.67140961 99.64779663]
[22.42453384 107.55500031]
[7.00637007 107.02232361]
[-5.66320372 98.21974182]
[-11.54137230 83.95613098]
[-8.75243282 68.78295135]
[1.81367397 57.54191208]
[16.78534126 53.81999207]
[31.38516617 58.80483627]
[40.95439529 70.90579987]
[42.43952560 86.26151276]
[55.82580948 93.02963257]
[69.21209717 99.79774475]
[74.36788940 86.83789825]
[84.21837616 78.29069519]
[96.01977539 75.45581055]
[98.19661713 60.61460495]
[100.37345123 45.77339935]
[102.55028534 30.93219376]
[104.72712708 16.09098816]
[90.52083588 11.13338280]
[77.50964355 3.57657790]
[66.16388702 -6.30625343]
[56.89371490 -18.15785217]
[50.03423691 -31.54979324]
[45.83341599 -45.99796295]
[44.44311523 -60.98007202]
[45.91358566 -75.95452118]
[50.19167709 -90.38000488]
[57.12273407 -103.73503876]
[66.45620728 -115.53684998]
[77.85469818 -125.35881042]
[90.90615082 -132.84587097]
[105.13877106 -137.72737122]
[120.03805542 -139.82684326]
[135.06541443 -139.06838989]
[149.67759705 -135.47946167]
[163.34638977 -129.18974304]
[175.57769775 -120.42665100]
[185.92933655 -109.50694275]
[194.02709961 -96.82536316]
[199.57829285 -82.84033966]
[202.38220215 -68.05742645]
[202.33750916 -53.01101303]
[199.44578552 -38.24502182]
[193.81159973 -24.29323196]
[185.63861084 -11.65999317]
[175.22225952 -0.80198783]
[162.93911743 7.88827324]
[149.23318481 14.09664249]
[134.59992981 17.59869194]
[119.56832886 18.26782417]
[117.39149475 33.10903168]
[115.21466064 47.95023727]
[113.03781891 62.79144287]
[110.86098480 77.63264465]
[116.93042755 81.78955841]
[121.51789856 87.54048157]
[136.16139221 84.28965759]
[150.80490112 81.03883362]
[165.44839478 77.78800964]
[180.09190369 74.53717804]
[189.88615417 61.83079910]
[205.92875671 61.71002960]
[215.91319275 74.26752472]
[212.18025208 89.87023926]
[197.59355164 96.54911041]
[183.34272766 89.18067932]
[168.69923401 92.43151093]
[154.05572510 95.68233490]
[139.41223145 98.93315887]
[124.76872253 102.18398285]
[115.33032990 123.22296143]
[90.43449402 129.26495361]
[92.61133575 144.10615540]
[94.78816986 158.94735718]
[96.96500397 173.78855896]
[99.14184570 188.62977600]
[102.06037140 192.04205322]
[103.54961395 195.83061218]
[103.67079926 199.48674011]
[102.64817047 202.57675171]
[100.82901001 204.78988647]
[101.76464081 219.76068115]
[102.70026398 234.73147583]
[103.63589478 249.70227051]
[104.57152557 264.67306519]
[105.50715637 279.64385986]
[106.44277954 294.61465454]
[107.37841034 309.58541870]
[108.31404114 324.55621338]
[109.24966431 339.52700806]
[110.18529510 354.49780273]
[111.12092590 369.46859741]
[125.95615387 372.14801025]
[139.71879578 378.30053711]
[151.60868835 387.56842041]
[160.93457031 399.41287231]
[167.15426636 413.14529419]
[169.90615845 427.96725464]
[169.03024292 443.01702881]
[164.57746887 457.41967773]
[156.80670166 470.33782959]
[146.16972351 481.02044678]
[133.28495789 488.84643555]
[118.90151215 493.36083984]
[103.85560608 494.30114746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[42 56]
[43 55]
[44 54]
[59 99]
[60 98]
[61 97]
[62 96]
[63 95]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
