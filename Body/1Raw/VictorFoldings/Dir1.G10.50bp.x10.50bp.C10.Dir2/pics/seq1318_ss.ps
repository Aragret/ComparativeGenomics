%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACGAAAGGGGGGGGGGGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUUAxxxxxxxxxxGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUACCCCAGAAACCCCCCCCCCACUACGAUAG\
) } def
/len { sequence length } bind def

/coor [
[91.88053894 374.27175903]
[79.00726318 366.36889648]
[68.88297272 355.15838623]
[62.32838821 341.54904175]
[59.87486649 326.64410400]
[61.72130585 311.65185547]
[67.71801758 297.78765869]
[77.37887573 286.17541504]
[89.92072296 277.75646973]
[104.32685089 273.21328735]
[104.01479340 258.21655273]
[103.70273590 243.21978760]
[103.39067841 228.22303772]
[103.07862091 213.22628784]
[102.76656342 198.22953796]
[102.45451355 183.23277283]
[102.14245605 168.23602295]
[101.83039856 153.23927307]
[101.51834106 138.24252319]
[81.55444336 135.24015808]
[65.17386627 122.16027832]
[57.26108170 101.91595459]
[60.66024780 79.66439819]
[45.68053055 80.44424438]
[30.70081711 81.22408295]
[27.56907463 95.98398590]
[20.72303581 109.42995453]
[10.62947369 120.64523315]
[-2.02341413 128.86514282]
[-16.37293434 133.52922058]
[-31.44071007 134.31948853]
[-46.19939804 131.18205261]
[-59.64272690 124.33081818]
[-70.85410309 114.23292542]
[-79.06912231 101.57686615]
[-83.72766876 87.22554779]
[-84.51211548 72.15746307]
[-81.36897278 57.39999008]
[-74.51255798 43.95930862]
[-64.41033173 32.75182724]
[-51.75110245 24.54169655]
[-37.39798737 19.88869286]
[-22.32960320 19.11006546]
[-7.57334328 22.25890350]
[5.86468983 29.12051201]
[17.06826782 39.22705841]
[25.27350998 51.88945770]
[29.92097282 66.24436951]
[44.90068817 65.46452332]
[59.88040161 64.68468475]
[66.36856842 51.16049194]
[57.60235977 38.98865509]
[48.83615112 26.81681824]
[36.21463394 23.96179390]
[29.16978073 13.58928204]
[31.04568863 1.59810615]
[22.53459930 -10.75346661]
[14.02350903 -23.10503960]
[5.51241827 -35.45661163]
[-8.45358753 -45.06842804]
[-3.08357930 -61.14945221]
[13.85555935 -60.44097900]
[17.86399078 -43.96770096]
[26.37508202 -31.61612892]
[34.88617325 -19.26455688]
[43.39726257 -6.91298389]
[59.61495590 -0.28076479]
[61.00798798 18.05061150]
[69.77419281 30.22244835]
[78.54040527 42.39428329]
[85.94927979 43.55983734]
[84.09169769 28.67530060]
[76.06615448 16.00286674]
[77.41635132 1.06375873]
[87.58396912 -9.96437168]
[102.36445618 -12.52114868]
[115.64576721 -5.54928780]
[121.93577576 8.06819248]
[118.63343048 22.70016098]
[107.10501099 32.29571533]
[100.76703644 45.89094162]
[108.17591858 47.05649185]
[120.25590515 38.16414261]
[132.33589172 29.27179337]
[144.41587830 20.37944412]
[156.49586487 11.48709393]
[168.57586670 2.59474397]
[180.65585327 -6.29760551]
[192.73583984 -15.18995571]
[204.81582642 -24.08230591]
[216.89581299 -32.97465515]
[213.59542847 -47.84164047]
[216.63366699 -62.76440811]
[225.48417664 -75.15749359]
[238.61352539 -82.87371826]
[253.74697876 -84.57620239]
[268.26257324 -79.96997833]
[279.64541626 -69.85311127]
[285.92330933 -55.97839355]
[286.00863647 -40.74971771]
[279.88656616 -26.80553627]
[268.61779785 -16.56176758]
[254.15472412 -11.79320240]
[239.00314331 -13.32602596]
[225.78816223 -20.89466667]
[213.70817566 -12.00231647]
[201.62818909 -3.10996699]
[189.54820251 5.78238249]
[177.46821594 14.67473221]
[165.38822937 23.56708145]
[153.30822754 32.45943069]
[141.22824097 41.35177994]
[129.14825439 50.24412918]
[117.06826782 59.13648224]
[138.40602112 84.87006378]
[134.87449646 115.76593781]
[148.65687561 121.68589783]
[162.43925476 127.60586548]
[176.22164917 133.52581787]
[190.00402832 139.44578552]
[205.37741089 134.85900879]
[218.46585083 144.13653564]
[219.22900391 160.16142273]
[207.08145142 170.64076233]
[191.34175110 167.53570557]
[184.08406067 153.22816467]
[170.30168152 147.30821228]
[156.51930237 141.38824463]
[142.73692322 135.46827698]
[128.95452881 129.54830933]
[116.51509857 137.93046570]
[116.82714844 152.92721558]
[117.13920593 167.92396545]
[117.45126343 182.92071533]
[117.76332092 197.91748047]
[118.07537842 212.91423035]
[118.38743591 227.91098022]
[118.69948578 242.90773010]
[119.01154327 257.90447998]
[119.32360077 272.90124512]
[133.90625000 276.84118652]
[146.78744507 284.73114014]
[156.92300415 295.93145752]
[163.49125671 309.53421021]
[165.95974731 324.43667603]
[164.12837219 339.43075562]
[158.14558411 353.30099487]
[148.49639893 364.92294312]
[135.96301270 373.35449219]
[121.56146240 377.91210938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[23 50]
[24 49]
[25 48]
[51 70]
[52 69]
[53 68]
[56 66]
[57 65]
[58 64]
[59 63]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
