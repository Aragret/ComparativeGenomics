%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAACUCAGGGGGGGGGGUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCxxxxxxxxxxACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCCCCCCCCCCCUCCAAAUCA\
) } def
/len { sequence length } bind def

/coor [
[58.66290665 362.71987915]
[46.10468292 354.36871338]
[36.01845932 343.15628052]
[29.03826523 329.78738403]
[25.60288239 315.10238647]
[25.92825890 300.02441406]
[29.99394417 285.50131226]
[37.54436493 272.44595337]
[48.10489273 261.67907715]
[61.01168823 253.87742615]
[75.45341492 249.53147888]
[74.82943726 234.54446411]
[74.20545959 219.55744934]
[73.58148193 204.57043457]
[72.95750427 189.58341980]
[72.33352661 174.59638977]
[71.70954895 159.60937500]
[71.08557129 144.62236023]
[70.46159363 129.63534546]
[83.15072632 87.95384979]
[76.80359650 74.36289978]
[70.45646667 60.77194977]
[64.10934448 47.18099976]
[57.76221085 33.59004593]
[51.25347137 27.08711433]
[51.42770004 19.64968872]
[45.36468887 5.92963600]
[31.19361115 10.87199020]
[16.67078781 14.65801144]
[1.89040947 17.26314545]
[-13.05166817 18.67049789]
[-28.05853844 18.87094116]
[-43.03287506 17.86317253]
[-57.87755966 15.65373230]
[-72.49632263 12.25694656]
[-86.79434967 7.69484520]
[-100.67890930 1.99701715]
[-114.05995941 -4.79958534]
[-126.85071564 -12.65088367]
[-138.96821594 -21.50595665]
[-150.33389282 -31.30737686]
[-160.87402344 -41.99157715]
[-170.52023315 -53.48926163]
[-179.20999146 -65.72586823]
[-186.88691711 -78.62203217]
[-193.50123596 -92.09412384]
[-199.01004028 -106.05475616]
[-203.37760925 -120.41339874]
[-206.57562256 -135.07693481]
[-208.58332825 -149.95024109]
[-209.38771057 -164.93687439]
[-208.98356628 -179.93965149]
[-207.37348938 -194.86123657]
[-204.56793213 -209.60488892]
[-200.58509827 -224.07498169]
[-195.45082092 -238.17764282]
[-189.19837952 -251.82145691]
[-181.86834717 -264.91790771]
[-173.50823975 -277.38204956]
[-164.17228699 -289.13305664]
[-153.92105103 -300.09472656]
[-142.82098389 -310.19598389]
[-130.94410706 -319.37127686]
[-118.36743164 -327.56112671]
[-105.17252350 -334.71240234]
[-91.44496155 -340.77871704]
[-77.27378082 -345.72076416]
[-62.75087357 -349.50646973]
[-47.97043610 -352.11126709]
[-33.02832794 -353.51831055]
[-18.02145386 -353.71841431]
[-3.04713988 -352.71032715]
[11.79749680 -350.50054932]
[26.41618347 -347.10342407]
[40.71410751 -342.54101562]
[54.59854507 -336.84289551]
[67.97944641 -330.04598999]
[80.77002716 -322.19439697]
[92.88734436 -313.33908081]
[104.25279999 -303.53738403]
[114.79268646 -292.85296631]
[124.43865204 -281.35507202]
[133.12812805 -269.11825562]
[140.80477905 -256.22192383]
[147.41879272 -242.74969482]
[152.92729187 -228.78894043]
[157.29455566 -214.43020630]
[160.49223328 -199.76660156]
[162.49961853 -184.89324951]
[163.30366516 -169.90660095]
[162.89918518 -154.90383911]
[161.28878784 -139.98228455]
[158.48291016 -125.23869324]
[154.49975586 -110.76869202]
[149.36515808 -96.66613007]
[143.11242676 -83.02246857]
[135.78208923 -69.92618561]
[127.42171478 -57.46221924]
[118.08551025 -45.71140671]
[107.83402252 -34.74995804]
[96.73374176 -24.64896393]
[84.85666656 -15.47392941]
[72.27980804 -7.28436327]
[59.08474350 -0.13337728]
[65.14775848 13.58667660]
[71.35316467 27.24291801]
[77.70029449 40.83386993]
[84.04742432 54.42481995]
[90.39455414 68.01576996]
[96.74168396 81.60671997]
[99.90119934 66.94324493]
[112.85825348 59.38581085]
[127.17707825 63.85471344]
[133.53535461 77.44045258]
[127.79348755 91.29797363]
[113.69018555 96.40530396]
[128.01278687 100.86212158]
[142.33538818 105.31893921]
[158.20455933 101.18354034]
[169.52629089 113.04737091]
[164.65374756 128.70593262]
[148.59939575 132.05104065]
[137.87857056 119.64153290]
[123.55596924 115.18471527]
[109.23337555 110.72790527]
[103.28718567 115.29876709]
[112.42871857 127.19129944]
[100.53603363 136.33264160]
[91.39480591 124.44050598]
[85.44861603 129.01136780]
[86.07258606 143.99838257]
[86.69656372 158.98539734]
[87.32054138 173.97242737]
[87.94451904 188.95944214]
[88.56849670 203.94645691]
[89.19247437 218.93347168]
[89.81645203 233.92048645]
[90.44042969 248.90750122]
[105.19343567 252.03794861]
[118.70407104 258.73968506]
[130.12304688 268.59149170]
[138.73255920 280.97402954]
[143.99140930 295.10891724]
[145.56901550 310.10763550]
[143.36621094 325.02737427]
[137.52146912 338.93026733]
[128.40219116 350.94232178]
[116.58161163 360.30847168]
[102.80280304 366.43997192]
[87.93190002 368.95135498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[26 105]
[27 104]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
