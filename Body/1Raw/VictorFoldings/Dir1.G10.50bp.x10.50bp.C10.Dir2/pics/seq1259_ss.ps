%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUAAAACUGGGGGGGGGGCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGxxxxxxxxxxAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGCCCCCCCCCCAGCUAAACCU\
) } def
/len { sequence length } bind def

/coor [
[93.08473969 412.85940552]
[79.23880005 406.84338379]
[67.53014374 397.31396484]
[58.82761765 384.97830200]
[53.77701569 370.75177002]
[52.75312424 355.69009399]
[55.83192062 340.91091919]
[62.78494263 327.51101685]
[73.09622955 316.48468018]
[86.00061035 308.65017700]
[100.54049683 304.58886719]
[100.54049683 289.58886719]
[100.54049683 274.58886719]
[100.54049683 259.58886719]
[100.54049683 244.58885193]
[100.54049683 229.58885193]
[100.54049683 214.58885193]
[100.54049683 199.58885193]
[100.54049683 184.58885193]
[100.54049683 169.58885193]
[100.54049683 154.58885193]
[100.54049683 139.58885193]
[80.50600433 133.17115784]
[67.11778259 117.73048401]
[63.80556107 98.17280579]
[70.92070770 80.30143738]
[85.81063080 69.09595490]
[82.71230316 54.41942978]
[79.61398315 39.74290466]
[76.51566315 25.06637955]
[73.41734314 10.38985443]
[69.83672333 6.41508865]
[68.33458710 1.90998530]
[68.75795746 -2.22794151]
[70.61380005 -5.29768610]
[68.43695831 -20.13889122]
[66.26012421 -34.98009872]
[56.60201645 -47.51132202]
[62.41039658 -61.22671509]
[60.23355865 -76.06791687]
[58.05672073 -90.90912628]
[55.87988281 -105.75032806]
[52.47690582 -120.35922241]
[47.87134171 -134.63468933]
[43.26577759 -148.91014099]
[38.66021347 -163.18560791]
[34.05464935 -177.46105957]
[19.23419189 -174.97673035]
[4.20994759 -174.67683411]
[-10.69784164 -176.56777954]
[-25.17141533 -180.60925293]
[-38.90227127 -186.71511841]
[-51.59772873 -194.75521851]
[-62.98719025 -204.55816650]
[-72.82788086 -215.91503906]
[-80.91005707 -228.58375549]
[-87.06143951 -242.29428101]
[-91.15090942 -256.75436401]
[-93.09130096 -271.65579224]
[-92.84125519 -286.68096924]
[-90.40610504 -301.50958252]
[-85.83775330 -315.82559204]
[-79.23357391 -329.32382202]
[-70.73433685 -341.71661377]
[-60.52120209 -352.73974609]
[-48.81186295 -362.15829468]
[-35.85590744 -369.77151489]
[-21.92948723 -375.41711426]
[-7.32945156 -378.97476196]
[7.63300228 -380.36859131]
[22.63894844 -379.56896973]
[37.36853409 -376.59286499]
[51.50779724 -371.50375366]
[64.75536346 -364.41009521]
[76.82884979 -355.46310425]
[87.47091675 -344.85345459]
[96.45471954 -332.80734253]
[103.58878326 -319.58148193]
[108.72103119 -305.45782471]
[111.74207306 -290.73739624]
[112.58752441 -275.73397827]
[111.23934937 -260.76733398]
[107.72628784 -246.15649414]
[102.12322998 -232.21290588]
[94.54959869 -219.23377991]
[85.16682434 -207.49574280]
[74.17490387 -197.24900818]
[61.80813599 -188.71197510]
[48.33010864 -182.06663513]
[52.93567276 -167.79116821]
[57.54123688 -153.51570129]
[62.14680099 -139.24024963]
[66.75236511 -124.96479034]
[73.17237091 -138.52146912]
[86.25695801 -145.85588074]
[101.17161560 -144.25813293]
[112.40569305 -134.31852722]
[115.80841064 -119.70957947]
[110.12253571 -105.82898712]
[97.44889069 -97.80535889]
[82.47012329 -98.60326385]
[70.72109222 -107.92716980]
[72.89792633 -93.08596039]
[75.07476044 -78.24475861]
[77.25160217 -63.40354919]
[86.75400543 -51.93386841]
[81.10132599 -37.15693283]
[83.27816772 -22.31572914]
[85.45500183 -7.47452307]
[88.09386444 7.29153252]
[91.19219208 21.96805763]
[94.29051208 36.64458466]
[97.38883209 51.32110977]
[100.48715210 65.99763489]
[110.46809387 66.80761719]
[120.00477600 70.54978943]
[128.23637390 77.02876282]
[134.38003540 85.79707336]
[137.80430603 96.18460083]
[138.09196472 107.34925842]
[135.08596802 118.34513855]
[148.47225952 125.11325836]
[164.80725098 123.66413116]
[174.00698853 137.23973083]
[166.60755920 151.87463379]
[150.22087097 152.51371765]
[141.70413208 138.49954224]
[128.31785583 131.73143005]
[115.54049683 139.58885193]
[115.54049683 154.58885193]
[115.54049683 169.58885193]
[115.54049683 184.58885193]
[115.54049683 199.58885193]
[115.54049683 214.58885193]
[115.54049683 229.58885193]
[115.54049683 244.58885193]
[115.54049683 259.58886719]
[115.54049683 274.58886719]
[115.54049683 289.58886719]
[115.54049683 304.58886719]
[130.08038330 308.65017700]
[142.98475647 316.48468018]
[153.29605103 327.51101685]
[160.24906921 340.91091919]
[163.32786560 355.69009399]
[162.30397034 370.75177002]
[157.25337219 384.97830200]
[148.55085754 397.31396484]
[136.84219360 406.84338379]
[122.99625397 412.85940552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[35 109]
[36 108]
[37 107]
[39 105]
[40 104]
[41 103]
[42 102]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
