%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAACUAAGGGGGGGGGGUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCxxxxxxxxxxUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCCCCCCCCCCCAACUACCUAA\
) } def
/len { sequence length } bind def

/coor [
[84.62022400 424.07144165]
[71.40002441 416.79898071]
[60.51322174 406.35195923]
[52.70209122 393.44271851]
[48.49921036 378.95141602]
[48.19113541 363.86605835]
[51.79887772 349.21524048]
[59.07645035 335.99786377]
[69.52765656 325.11508179]
[82.43991852 317.30892944]
[96.93285370 313.11166382]
[96.62080383 298.11489868]
[96.30874634 283.11816406]
[95.99668884 268.12139893]
[95.68463135 253.12464905]
[95.37257385 238.12788391]
[95.06051636 223.13113403]
[94.74846649 208.13438416]
[94.43640900 193.13763428]
[94.12435150 178.14086914]
[82.01094818 176.26869202]
[70.33767700 172.53044128]
[59.39015579 167.01760864]
[49.43622971 159.86505127]
[40.71944809 151.24778748]
[33.45307541 141.37663269]
[27.81490326 130.49313354]
[23.94287872 118.86355591]
[21.93173981 106.77244568]
[21.83069038 94.51563263]
[23.64220428 82.39300537]
[9.41542435 77.63919067]
[-4.81135464 72.88537598]
[-19.03813362 68.13156128]
[-33.26491165 63.37774658]
[-47.49169159 58.62393188]
[-61.71847153 53.87011719]
[-71.13051605 65.75241852]
[-84.04056549 73.69638062]
[-98.88965607 76.74272919]
[-113.88469696 74.52359772]
[-127.21496582 67.30695343]
[-137.27075195 55.96425629]
[-142.83779907 41.86518097]
[-143.24382019 26.71226501]
[-138.43981934 12.33529091]
[-129.00588989 0.47035116]
[-116.08123016 -7.44980478]
[-101.22654724 -10.46877956]
[-86.23562622 -8.22201729]
[-72.91867828 -0.98082614]
[-62.88380814 10.38038540]
[-57.34276199 24.48969650]
[-56.96465683 39.64333725]
[-42.73787689 44.39715195]
[-28.51109886 49.15096664]
[-14.28431892 53.90478134]
[-0.05753996 58.65859604]
[14.16923904 63.41241074]
[28.39601898 68.16622925]
[34.86114120 56.44028854]
[43.22823715 45.98624039]
[53.25299454 37.10932541]
[64.64270782 30.06873894]
[77.06480408 25.07005692]
[90.15658569 22.25923538]
[103.53578186 21.71834373]
[116.81173706 23.46317863]
[121.41729736 9.18771839]
[109.52645874 18.33145905]
[94.97150421 21.95818138]
[80.18051147 19.46286583]
[67.62095642 11.26178741]
[59.38806152 -1.27692938]
[56.85525131 -16.06154633]
[60.44506073 -30.62565613]
[69.55862427 -42.53963852]
[82.67559052 -49.81597519]
[97.60776520 -51.24081039]
[111.86412048 -46.57644653]
[123.06638336 -36.60100555]
[129.34574890 -22.97861862]
[129.65496826 -7.98319578]
[137.90725708 -20.50915718]
[146.15954590 -33.03511810]
[154.41183472 -45.56108093]
[162.66412354 -58.08704376]
[163.08958435 -74.48067474]
[177.62683105 -82.07019043]
[191.32116699 -73.04815674]
[190.08505249 -56.69566345]
[175.19007874 -49.83475494]
[166.93778992 -37.30879211]
[158.68550110 -24.78283119]
[150.43321228 -12.25686836]
[142.18092346 0.26909319]
[135.69276428 13.79328346]
[131.08718872 28.06874466]
[143.88584900 35.08042145]
[155.16241455 44.34367371]
[164.52581787 55.53723145]
[171.65130615 68.27287292]
[176.29173279 82.10889435]
[178.28616333 96.56542969]
[193.26586914 97.34527588]
[208.24559021 98.12511444]
[223.22531128 98.90496063]
[238.20501709 99.68480682]
[245.48818970 86.27144623]
[257.87496948 77.35344696]
[272.90591431 74.70147705]
[287.59664917 78.84208679]
[299.03033447 88.95315552]
[304.93676758 103.02713013]
[304.14324951 118.26960754]
[296.80731201 131.65417480]
[284.38552856 140.52333069]
[269.34423828 143.11608887]
[254.66992188 138.91766357]
[243.27613831 128.76164246]
[237.42517090 114.66452026]
[222.44546509 113.88467407]
[207.46574402 113.10483551]
[192.48603821 112.32498932]
[177.50631714 111.54514313]
[171.89430237 131.17256165]
[161.40312195 148.68444824]
[146.74479675 162.89231873]
[128.91407776 172.83197021]
[109.12110138 177.82881165]
[109.43315887 192.82557678]
[109.74521637 207.82232666]
[110.05727386 222.81907654]
[110.36933136 237.81582642]
[110.68138885 252.81259155]
[110.99343872 267.80932617]
[111.30549622 282.80609131]
[111.61755371 297.80285645]
[111.92961121 312.79959106]
[126.58460236 316.39038086]
[139.81040955 323.65261841]
[150.70527649 334.09121704]
[158.52638245 346.99444580]
[162.74044800 361.48248291]
[163.06016541 376.56759644]
[159.46374512 391.22119141]
[152.19638062 404.44421387]
[141.75358582 415.33505249]
[128.84735107 423.15115356]
[114.35765839 427.35961914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[68 98]
[69 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
