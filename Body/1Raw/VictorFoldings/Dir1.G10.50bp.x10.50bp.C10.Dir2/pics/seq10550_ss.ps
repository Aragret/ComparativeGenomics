%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACGACCCGGGGGGGGGGCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCxxxxxxxxxxUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCCCCCCCCCCCUUACGAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 401.81173706]
[71.19830322 395.79571533]
[59.48964310 386.26629639]
[50.78712082 373.93063354]
[45.73651886 359.70410156]
[44.71262741 344.64242554]
[47.79142761 329.86328125]
[54.74444962 316.46334839]
[65.05573273 305.43701172]
[77.96011353 297.60250854]
[92.50000000 293.54119873]
[92.50000000 278.54119873]
[92.50000000 263.54119873]
[92.50000000 248.54118347]
[92.50000000 233.54118347]
[92.50000000 218.54118347]
[92.50000000 203.54118347]
[92.50000000 188.54118347]
[92.50000000 173.54118347]
[92.50000000 158.54118347]
[79.19085693 155.22952271]
[67.00541687 148.93544006]
[56.60169220 139.99884033]
[48.54148865 128.90228271]
[43.26006317 116.24500275]
[41.04261017 102.71047974]
[42.00887680 89.02958679]
[46.10667801 75.94110870]
[53.11473846 64.15180969]
[42.45311356 53.60052109]
[31.79148674 43.04922867]
[21.12985992 32.49794006]
[9.43023682 23.11077881]
[-3.18089128 14.98923588]
[-13.53022766 32.42861557]
[-40.24978256 37.80064774]
[-54.74538040 33.94348526]
[-69.24097443 30.08632660]
[-79.55248260 41.39700699]
[-93.94315338 46.60921860]
[-109.10611725 44.52523804]
[-121.55704498 35.62394333]
[-128.43479919 21.95079041]
[-128.15892029 6.64776850]
[-120.79280090 -6.76859951]
[-108.02912903 -15.21533108]
[-92.80090332 -16.75142860]
[-78.60744476 -11.02390766]
[-68.71032715 0.65108782]
[-65.38381958 15.59073067]
[-50.88822174 19.44788933]
[-36.39262390 23.30504990]
[-31.88385963 17.31163406]
[-43.87054062 8.29390430]
[-34.85261536 -3.69262886]
[-22.86632919 5.32480049]
[-18.35756302 -0.66861558]
[-26.08164978 -13.52701759]
[-33.80573273 -26.38541985]
[-41.52981949 -39.24382401]
[-56.12648773 -46.71840286]
[-56.68129730 -63.10816193]
[-42.62350845 -71.55271912]
[-28.41456795 -63.36504364]
[-28.67141724 -46.96790695]
[-20.94733238 -34.10950470]
[-13.22324657 -21.25110245]
[-5.49916172 -8.39270020]
[4.94065094 2.37810802]
[17.55177879 10.49965000]
[12.76003265 -3.71439791]
[15.58223152 -18.44651222]
[25.28785896 -29.88332939]
[39.36464310 -35.06446457]
[54.16884995 -32.64879608]
[65.86845398 -23.26161385]
[71.43505859 -9.33276081]
[69.42774963 5.53232336]
[60.36612320 17.48585510]
[46.59574890 23.43370056]
[31.68115044 21.83631325]
[42.34277725 32.38760376]
[53.00440216 42.93889618]
[63.66603088 53.49018478]
[75.82826996 46.15719223]
[89.39011383 41.94183350]
[103.56629944 41.08818436]
[117.53598022 43.64567947]
[130.49029541 49.46622467]
[141.67913818 58.21280289]
[150.45465088 69.37895966]
[156.30873108 82.31815338]
[171.07478333 79.67929077]
[185.84083557 77.04042816]
[200.60688782 74.40156555]
[215.37295532 71.76269531]
[216.20686340 56.71606064]
[220.48886108 42.26749039]
[227.98803711 29.19618416]
[238.29997253 18.20705795]
[250.86853027 9.89274311]
[265.01593018 4.70161867]
[279.97921753 2.91363668]
[294.95144653 4.62522030]
[309.12515259 9.74406624]
[321.73599243 17.99412155]
[332.10388184 28.93047142]
[339.66967773 41.96332932]
[344.02536011 56.38985443]
[344.93606567 71.43203735]
[342.35266113 86.27867889]
[336.41445923 100.12911224]
[327.44171143 112.23640442]
[315.91830444 121.94762421]
[302.46566772 128.73905945]
[287.80929565 132.24444580]
[272.73962402 132.27474976]
[258.06927490 128.82833862]
[244.58943176 122.09107971]
[233.02705383 112.42629242]
[224.00567627 100.35519409]
[218.01181030 86.52875519]
[203.24575806 89.16761780]
[188.47970581 91.80648041]
[173.71365356 94.44535065]
[158.94758606 97.08421326]
[157.19747925 114.55229187]
[150.38665771 130.73280334]
[139.11772156 144.19415283]
[124.38774872 153.74530029]
[107.50000000 158.54118347]
[107.50000000 173.54118347]
[107.50000000 188.54118347]
[107.50000000 203.54118347]
[107.50000000 218.54118347]
[107.50000000 233.54118347]
[107.50000000 248.54118347]
[107.50000000 263.54119873]
[107.50000000 278.54119873]
[107.50000000 293.54119873]
[122.03988647 297.60250854]
[134.94427490 305.43701172]
[145.25555420 316.46334839]
[152.20857239 329.86328125]
[155.28736877 344.64242554]
[154.26348877 359.70410156]
[149.21287537 373.93063354]
[140.51036072 386.26629639]
[128.80169678 395.79571533]
[114.95575714 401.81173706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 84]
[30 83]
[31 82]
[32 81]
[33 70]
[34 69]
[36 52]
[37 51]
[38 50]
[57 68]
[58 67]
[59 66]
[60 65]
[92 126]
[93 125]
[94 124]
[95 123]
[96 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
