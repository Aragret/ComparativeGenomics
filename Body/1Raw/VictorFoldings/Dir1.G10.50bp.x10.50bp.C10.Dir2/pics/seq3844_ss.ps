%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAUCAACAUUGGGGGGGGGGACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACxxxxxxxxxxAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUCCCCCCCCCCUACUAACAACAUU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 412.36389160]
[70.75619507 407.55444336]
[57.85220718 399.78906250]
[46.91955185 389.43090820]
[38.46956635 376.96447754]
[32.89747238 362.97286987]
[30.46388245 348.11044312]
[31.28262329 333.07235718]
[35.31539917 318.56198120]
[42.37359238 305.25799561]
[52.12707901 293.78265381]
[64.11966705 284.67266846]
[77.79044342 278.35412598]
[92.50000000 275.12255859]
[92.50000000 260.12255859]
[92.50000000 245.12255859]
[92.50000000 230.12255859]
[92.50000000 215.12255859]
[92.50000000 200.12255859]
[92.50000000 185.12255859]
[92.50000000 170.12255859]
[92.50000000 155.12255859]
[92.50000000 140.12255859]
[92.50000000 125.12256622]
[84.53999329 121.79745483]
[77.95185089 115.97743225]
[73.50717926 108.20354462]
[71.77082062 99.25144958]
[73.03112030 90.05432892]
[77.25831604 81.60562897]
[84.09671021 74.85177612]
[92.89261627 70.58649445]
[102.75614166 69.35845184]
[98.03533173 55.12068558]
[93.31452179 40.88292313]
[88.59371185 26.64515686]
[83.87290192 12.40739155]
[79.00988007 -1.78242970]
[74.00513458 -15.92288685]
[68.29956818 -29.79539490]
[61.90744781 -43.36524200]
[55.51532745 -56.93509293]
[49.12320709 -70.50494385]
[42.73108292 -84.07479095]
[28.42262268 -79.50062561]
[13.63951492 -76.83329010]
[-1.36528337 -76.11840820]
[-16.33501816 -77.36822510]
[-31.01354027 -80.56134796]
[-45.14967728 -85.64313507]
[-58.50154495 -92.52664185]
[-70.84067535 -101.09407806]
[-81.95592499 -111.19884491]
[-91.65709686 -122.66802979]
[-99.77819824 -135.30538940]
[-106.18026733 -148.89466858]
[-110.75374603 -163.20333862]
[-113.42037964 -177.98657227]
[-114.13455200 -192.99140930]
[-112.88401794 -207.96109009]
[-109.69020081 -222.63945007]
[-104.60773468 -236.77534485]
[-97.72358704 -250.12689209]
[-89.15557098 -262.46560669]
[-79.05027771 -273.58038330]
[-67.58062744 -283.28100586]
[-54.94288635 -291.40151978]
[-41.35330200 -297.80291748]
[-27.04440498 -302.37573242]
[-12.26104259 -305.04165649]
[2.74382377 -305.75512695]
[17.71343994 -304.50387573]
[32.39165878 -301.30935669]
[46.52730942 -296.22622681]
[59.87852097 -289.34143066]
[72.21683502 -280.77282715]
[83.33112335 -270.66699219]
[93.03120422 -259.19689941]
[101.15110779 -246.55876160]
[107.55187988 -232.96887207]
[112.12399292 -218.65975952]
[114.78922272 -203.87626648]
[115.50196075 -188.87136841]
[114.25000763 -173.90180969]
[111.05478668 -159.22375488]
[105.97097778 -145.08833313]
[99.08556366 -131.73745728]
[90.51636505 -119.39955139]
[80.41001892 -108.28574371]
[68.93944550 -98.58620453]
[56.30093384 -90.46691132]
[62.69305420 -76.89706421]
[69.08517456 -63.32721329]
[75.47729492 -49.75736237]
[81.86941528 -36.18751526]
[89.60208130 -49.04075623]
[104.44407654 -51.21219635]
[115.53479004 -41.11287689]
[114.75859070 -26.13297462]
[102.68347168 -17.23401451]
[88.14559174 -20.92763138]
[93.15033722 -6.78717470]
[98.37601471 -1.50132382]
[98.11067200 7.68658209]
[102.83147430 21.92434692]
[107.55228424 36.16211319]
[112.27309418 50.39987946]
[116.99390411 64.63764191]
[129.02243042 73.59947968]
[144.01567078 74.04963684]
[159.00892639 74.49980164]
[173.03507996 67.18013763]
[185.52441406 75.29590607]
[200.51765442 75.74607086]
[215.51091003 76.19622803]
[226.84329224 65.18022156]
[242.64459229 65.48748016]
[253.54017639 76.93570709]
[253.06587219 92.73287201]
[241.50309753 103.50680542]
[225.71182251 102.86551666]
[215.06074524 91.18947601]
[200.06750488 90.73931122]
[185.07424927 90.28915405]
[172.12051392 97.64101410]
[158.55876160 89.49304199]
[143.56552124 89.04288483]
[128.57226562 88.59272003]
[129.82180786 98.57503510]
[127.78396606 108.12075043]
[122.87611389 116.20980072]
[115.81108093 122.04351044]
[107.50000000 125.12256622]
[107.50000000 140.12255859]
[107.50000000 155.12255859]
[107.50000000 170.12255859]
[107.50000000 185.12255859]
[107.50000000 200.12255859]
[107.50000000 215.12255859]
[107.50000000 230.12255859]
[107.50000000 245.12255859]
[107.50000000 260.12255859]
[107.50000000 275.12255859]
[122.20955658 278.35412598]
[135.88034058 284.67266846]
[147.87292480 293.78265381]
[157.62640381 305.25799561]
[164.68460083 318.56198120]
[168.71737671 333.07235718]
[169.53611755 348.11044312]
[167.10252380 362.97286987]
[161.53042603 376.96447754]
[153.08044434 389.43090820]
[142.14779663 399.78906250]
[129.24380493 407.55444336]
[114.97203827 412.36389160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[33 108]
[34 107]
[35 106]
[36 105]
[37 104]
[38 102]
[39 101]
[40 95]
[41 94]
[42 93]
[43 92]
[44 91]
[109 128]
[110 127]
[111 126]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
