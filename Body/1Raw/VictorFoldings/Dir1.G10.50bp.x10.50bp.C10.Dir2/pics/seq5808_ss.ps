%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCCCAUUCGGGGGGGGGGCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUxxxxxxxxxxGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[79.20739746 163.52899170]
[65.59318542 157.30999756]
[53.70401001 148.21769714]
[44.13594818 136.70793152]
[37.36870193 123.35775757]
[33.74156570 108.83651733]
[33.43638611 93.87224579]
[36.46846390 79.21519470]
[42.68578339 65.60022736]
[51.77662659 53.70993042]
[63.28521729 44.14045334]
[76.63455200 37.37157059]
[91.15534973 33.74264908]
[90.85134125 18.74573135]
[90.54734039 3.74881244]
[90.24333954 -11.24810696]
[89.93933105 -26.24502563]
[89.63533020 -41.24194336]
[89.33132172 -56.23886490]
[89.02732086 -71.23578644]
[88.72331238 -86.23270416]
[88.41931152 -101.22962189]
[73.42517090 -101.77458954]
[58.48587799 -103.16698456]
[43.64928818 -105.40233612]
[28.96292877 -108.47349548]
[14.47384071 -112.37061310]
[0.22844097 -117.08122253]
[-13.72763920 -122.59021759]
[-27.34969521 -128.87995911]
[-40.59408951 -135.93028259]
[-53.41839600 -143.71862793]
[-65.78153992 -152.22004700]
[-77.64390564 -161.40728760]
[-88.96750641 -171.25093079]
[-99.71606445 -181.71943665]
[-109.85514832 -192.77928162]
[-119.35227966 -204.39503479]
[-128.17703247 -216.52947998]
[-136.30114746 -229.14376831]
[-143.69859314 -242.19746399]
[-150.34568787 -255.64875793]
[-156.22111511 -269.45455933]
[-161.30606079 -283.57067871]
[-165.58424377 -297.95187378]
[-169.04196167 -312.55203247]
[-171.66813660 -327.32446289]
[-173.45434570 -342.22180176]
[-174.39486694 -357.19635010]
[-174.48670959 -372.20010376]
[-173.72955322 -387.18502808]
[-172.12583923 -402.10311890]
[-169.68070984 -416.90655518]
[-166.40197754 -431.54797363]
[-162.30015564 -445.98046875]
[-157.38838196 -460.15774536]
[-151.68238831 -474.03445435]
[-145.20046997 -487.56613159]
[-137.96337891 -500.70938110]
[-129.99427795 -513.42218018]
[-121.31872559 -525.66375732]
[-111.96450043 -537.39489746]
[-101.96155548 -548.57800293]
[-91.34195709 -559.17730713]
[-80.13970184 -569.15881348]
[-68.39068604 -578.49060059]
[-56.13253784 -587.14270020]
[-43.40453339 -595.08746338]
[-30.24743652 -602.29937744]
[-16.70339584 -608.75543213]
[-2.81579828 -614.43481445]
[11.37087059 -619.31945801]
[25.81116676 -623.39367676]
[40.45883179 -626.64434814]
[55.26694489 -629.06115723]
[70.18807220 -630.63635254]
[85.17441559 -631.36480713]
[100.17797089 -631.24426270]
[115.15068054 -630.27508545]
[130.04457092 -628.46038818]
[144.81193542 -625.80596924]
[159.40548706 -622.32031250]
[173.77845764 -618.01458740]
[187.88479614 -612.90264893]
[201.67935181 -607.00079346]
[215.11790466 -600.32800293]
[228.15742493 -592.90557861]
[240.75613403 -584.75732422]
[252.87367249 -575.90936279]
[264.47122192 -566.39001465]
[275.51165771 -556.22979736]
[285.95956421 -545.46124268]
[295.78152466 -534.11883545]
[304.94604492 -522.23889160]
[313.42379761 -509.85952759]
[321.18759155 -497.02032471]
[328.21255493 -483.76245117]
[334.47622681 -470.12838745]
[339.95849609 -456.16180420]
[344.64184570 -441.90740967]
[348.51123047 -427.41088867]
[351.55426025 -412.71868896]
[353.76123047 -397.87783813]
[355.12503052 -382.93591309]
[355.64129639 -367.94076538]
[355.30841064 -352.94042969]
[354.12738037 -337.98294067]
[352.10202026 -323.11621094]
[349.23883057 -308.38790894]
[345.54696655 -293.84515381]
[341.03826904 -279.53457642]
[335.72714233 -265.50198364]
[329.63064575 -251.79237366]
[322.76828003 -238.44961548]
[315.16204834 -225.51646423]
[306.83630371 -213.03434753]
[297.81768799 -201.04327393]
[288.13516235 -189.58161926]
[277.81967163 -178.68611145]
[266.90429688 -168.39166260]
[255.42398071 -158.73124695]
[243.41552734 -149.73579407]
[230.91737366 -141.43412781]
[217.96958923 -133.85284424]
[204.61361694 -127.01623535]
[190.89225769 -120.94618988]
[176.84945679 -115.66214752]
[162.53021240 -111.18105316]
[147.98037720 -107.51724243]
[133.24655151 -104.68246460]
[118.37596893 -102.68579102]
[103.41622925 -101.53362274]
[103.72023010 -86.53670502]
[104.02423859 -71.53978729]
[104.32823944 -56.54286957]
[104.63224792 -41.54594803]
[104.93624878 -26.54903030]
[105.24025726 -11.55211067]
[105.54425812 3.44480824]
[105.84826660 18.44172668]
[106.15226746 33.43864822]
[120.80819702 36.47612381]
[134.42088318 42.69845581]
[146.30783081 51.79367828]
[155.87306213 63.30579376]
[162.63702393 76.65762329]
[166.26060486 91.17974854]
[166.56210327 106.14409637]
[163.52642822 120.80039978]
[157.30577087 134.41384888]
[148.21200562 146.30191040]
[136.70106506 155.86856079]
[123.35006714 162.63417053]
[108.82838440 166.25952148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
