%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAAAAAGGGGGGGGGGGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCxxxxxxxxxxUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCCCCCCCCCCCUUAAAAACAG\
) } def
/len { sequence length } bind def

/coor [
[77.17759705 350.38647461]
[65.86563873 340.40139771]
[57.52426529 327.82824707]
[52.72220612 313.52432251]
[51.78687286 298.46484375]
[54.78203964 283.67663574]
[61.50348663 270.16793823]
[71.49294281 258.85983276]
[84.06930542 250.52331543]
[98.37509155 245.72679138]
[97.43946838 230.75599670]
[96.50383759 215.78520203]
[95.56820679 200.81440735]
[94.63258362 185.84361267]
[93.69695282 170.87283325]
[92.76132202 155.90203857]
[91.82569885 140.93124390]
[90.89006805 125.96045685]
[80.11925507 115.52063751]
[65.12656403 115.05259705]
[50.13386536 114.58455658]
[35.14117050 114.11651611]
[20.14847374 113.64847565]
[5.15577793 113.18042755]
[-9.84097576 112.86837769]
[-24.84016418 112.71234131]
[-39.83935165 112.55630493]
[-43.66373825 114.90908051]
[-47.63771057 115.79145813]
[-51.26824188 115.34298706]
[-54.16179276 113.85256958]
[-56.06533432 111.71157837]
[-70.99964142 110.30927277]
[-85.93395233 108.90696716]
[-94.22905731 121.76969147]
[-107.55732727 129.29403687]
[-122.85601807 129.75097656]
[-136.60958862 123.03549957]
[-145.65759277 110.69077301]
[-147.92085266 95.55352020]
[-142.87927246 81.10218811]
[-131.69140625 70.65756989]
[-116.92810822 66.61976624]
[-101.98190308 69.91664124]
[-90.28730011 79.79059601]
[-84.53164673 93.97266388]
[-69.59733582 95.37496185]
[-54.66302872 96.77726746]
[-39.68331528 97.55711365]
[-24.68412781 97.71315002]
[-9.68493938 97.86918640]
[-2.92000699 94.77381134]
[5.62382030 98.18773651]
[20.61651611 98.65577698]
[35.60921097 99.12381744]
[50.60190964 99.59185791]
[65.59460449 100.05990601]
[80.58730316 100.52794647]
[78.50971985 85.48485565]
[88.70622253 69.58282471]
[86.83861542 54.69954681]
[71.88998413 52.64994431]
[57.98156738 46.80029678]
[46.06166458 37.54944229]
[36.94299316 25.52811623]
[31.24728203 11.55595589]
[29.36287117 -3.41439557]
[31.41824341 -18.36223412]
[37.27326202 -32.26839066]
[46.52872086 -44.18471909]
[58.55356598 -53.29874802]
[72.52792358 -58.98906326]
[87.49900055 -60.86769485]
[102.44604492 -58.80654907]
[116.34993744 -52.94616318]
[128.26269531 -43.68610382]
[137.37208557 -31.65774155]
[143.05699158 -17.68118668]
[144.92985535 -2.70938516]
[142.86293030 12.23686123]
[136.99717712 26.13849258]
[127.73252106 38.04767227]
[115.70063782 47.15240860]
[101.72189331 52.83193207]
[103.58950806 67.71520996]
[116.90466309 74.62221527]
[130.14724731 67.57707977]
[143.38983154 60.53194427]
[156.48298645 53.21283722]
[169.42103577 45.62292862]
[182.35910034 38.03302002]
[194.79853821 29.65087700]
[206.69091797 20.50914192]
[218.58329773 11.36740875]
[230.47567749 2.22567439]
[236.23474121 -13.12897587]
[252.45396423 -15.55152798]
[262.44839478 -2.54986882]
[255.93664551 12.50100994]
[239.61741638 14.11805439]
[227.72503662 23.25978851]
[215.83265686 32.40152359]
[203.94027710 41.54325485]
[218.54214478 44.97621536]
[226.60276794 57.62636566]
[223.54570007 72.31153870]
[211.10658264 80.69416046]
[196.34777832 78.01497650]
[187.64868164 65.79508972]
[189.94900513 50.97107697]
[177.01095581 58.56098557]
[164.07289124 66.15089417]
[162.01287842 70.52488708]
[157.14939880 73.61970520]
[150.43496704 73.77452850]
[137.19238281 80.81966400]
[123.94979858 87.86479950]
[124.41783905 102.85749054]
[138.07408142 109.06290436]
[151.50410461 101.29026031]
[166.93435669 102.92951202]
[178.43156433 113.35033417]
[181.57484436 128.54571533]
[175.15553284 142.67269897]
[161.64198303 150.29919434]
[146.23042297 148.49266052]
[134.84692383 137.94772339]
[131.86866760 122.71913910]
[118.21243286 116.51373291]
[105.86085510 125.02482605]
[106.79648590 139.99562073]
[107.73211670 154.96641541]
[108.66774750 169.93719482]
[109.60337067 184.90798950]
[110.53900146 199.87878418]
[111.47463226 214.84957886]
[112.41025543 229.82037354]
[113.34588623 244.79115295]
[128.13755798 247.76919556]
[141.65402222 254.47499084]
[152.97369385 264.45132446]
[161.32476807 277.01803589]
[166.13787842 291.31826782]
[167.08483887 306.37701416]
[164.10108948 321.16754150]
[157.39007568 334.68139648]
[147.40936279 345.99722290]
[134.83943176 354.34344482]
[120.53735352 359.15103149]
[105.47824860 360.09216309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 51]
[26 50]
[27 49]
[32 48]
[33 47]
[34 46]
[60 85]
[61 84]
[86 117]
[87 116]
[88 115]
[89 112]
[90 111]
[91 110]
[92 103]
[93 102]
[94 101]
[95 100]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
