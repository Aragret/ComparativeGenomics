%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCACCACUGGGGGGGGGGACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACxxxxxxxxxxGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCCCCCCCCCCCUCCCUCACCAUU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 575.40020752]
[70.75619507 570.59075928]
[57.85220718 562.82537842]
[46.91955185 552.46722412]
[38.46956635 540.00079346]
[32.89747238 526.00915527]
[30.46388245 511.14675903]
[31.28262329 496.10867310]
[35.31539917 481.59829712]
[42.37359238 468.29431152]
[52.12707901 456.81896973]
[64.11966705 447.70898438]
[77.79044342 441.39044189]
[92.50000000 438.15887451]
[92.50000000 423.15887451]
[92.50000000 408.15887451]
[92.50000000 393.15887451]
[92.50000000 378.15887451]
[92.50000000 363.15887451]
[92.50000000 348.15887451]
[92.50000000 333.15887451]
[92.50000000 318.15887451]
[92.50000000 303.15887451]
[77.95760345 299.60821533]
[64.67964935 292.67599487]
[53.43997574 282.76126099]
[44.89479446 270.43716431]
[39.54439163 256.41757202]
[37.70384216 241.51586914]
[39.48443985 226.59774780]
[44.78699112 212.53089905]
[53.30733109 200.13452148]
[64.55376434 190.13166809]
[77.87543488 183.10704041]
[92.50000000 179.47280884]
[92.50000000 164.47280884]
[92.50000000 149.47280884]
[78.84436798 145.34587097]
[66.90824890 137.53326416]
[57.66181183 126.66996002]
[51.85658646 113.63894653]
[49.96442795 99.49937439]
[52.13912582 85.40048981]
[58.20392227 72.48824310]
[67.66587067 61.81212997]
[79.75592041 54.23990250]
[93.49139404 50.38702774]
[93.79152679 35.39002991]
[94.09165955 20.39303207]
[80.21755981 14.24607849]
[69.78199768 3.28514338]
[64.35263824 -10.79802704]
[64.72776794 -25.84617996]
[70.81909943 -39.56698608]
[81.66993713 -49.88224792]
[95.60533905 -55.24264908]
[95.90547180 -70.23964691]
[96.20560455 -85.23664093]
[96.50573730 -100.23364258]
[88.56884003 -87.50549316]
[78.04217529 -76.81955719]
[65.43464661 -68.69242859]
[51.35575867 -63.51701355]
[36.48614883 -61.54351425]
[21.54467773 -62.86734390]
[7.25368929 -67.42449188]
[-5.69592905 -74.99465942]
[-16.67813492 -85.21186066]
[-25.16199875 -97.58214569]
[-30.73737144 -111.50749207]
[-33.13471603 -126.31467438]
[-32.23813248 -141.28785706]
[-28.09096718 -155.70315552]
[-20.89371300 -168.86369324]
[-10.99431515 -180.13320923]
[1.12864280 -188.96688843]
[14.88908386 -194.93766785]
[29.62176514 -197.75691223]
[44.61444473 -197.28829956]
[59.14230347 -193.55450439]
[72.50300598 -186.73602295]
[84.05063629 -177.16250610]
[93.22692108 -165.29676819]
[99.58824921 -151.71246338]
[102.82707977 -137.06629944]
[102.78659821 -122.06431580]
[110.50215912 -134.92782593]
[118.21772766 -147.79135132]
[125.93328857 -160.65486145]
[123.45056915 -176.50465393]
[134.40022278 -188.23002625]
[150.38262939 -186.83628845]
[159.13743591 -173.39260864]
[153.94871521 -158.21180725]
[138.79681396 -152.93930054]
[131.08123779 -140.07579041]
[123.36567688 -127.21226501]
[115.65011597 -114.34874725]
[111.50273132 -99.93350983]
[111.20259857 -84.93650818]
[110.90247345 -69.93951416]
[110.60234070 -54.94251633]
[124.31211090 -49.02885818]
[134.74156189 -38.28771973]
[140.27905273 -24.33418465]
[140.05180359 -9.28307343]
[134.06332397 4.57159376]
[123.19758606 15.10622978]
[109.08865356 20.69316483]
[108.78852081 35.69016266]
[108.48838806 50.68715668]
[123.27819824 55.70626831]
[135.80017090 65.04063416]
[144.83435059 77.78086090]
[149.50061035 92.68575287]
[149.34436035 108.30323029]
[144.38079834 123.11177063]
[135.09350586 135.66868591]
[122.38727570 144.75062561]
[107.50000000 149.47280884]
[107.50000000 164.47280884]
[107.50000000 179.47280884]
[122.12456512 183.10704041]
[135.44624329 190.13166809]
[146.69267273 200.13452148]
[155.21301270 212.53089905]
[160.51556396 226.59774780]
[162.29615784 241.51586914]
[160.45561218 256.41757202]
[155.10520935 270.43716431]
[146.56002808 282.76126099]
[135.32034302 292.67599487]
[122.04239655 299.60821533]
[107.50000000 303.15887451]
[107.50000000 318.15887451]
[107.50000000 333.15887451]
[107.50000000 348.15887451]
[107.50000000 363.15887451]
[107.50000000 378.15887451]
[107.50000000 393.15887451]
[107.50000000 408.15887451]
[107.50000000 423.15887451]
[107.50000000 438.15887451]
[122.20955658 441.39044189]
[135.88034058 447.70898438]
[147.87292480 456.81896973]
[157.62640381 468.29431152]
[164.68460083 481.59829712]
[168.71737671 496.10867310]
[169.53611755 511.14675903]
[167.10252380 526.00915527]
[161.53042603 540.00079346]
[153.08044434 552.46722412]
[142.14779663 562.82537842]
[129.24380493 570.59075928]
[114.97203827 575.40020752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[35 122]
[36 121]
[37 120]
[47 111]
[48 110]
[49 109]
[56 102]
[57 101]
[58 100]
[59 99]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
