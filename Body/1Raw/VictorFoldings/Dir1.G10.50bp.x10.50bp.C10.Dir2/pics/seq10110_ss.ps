%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGCUCACUGGGGGGGGGGAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGxxxxxxxxxxCUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUCCCCCCCCCCUCGGCUCACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 388.71304321]
[71.19830322 382.69699097]
[59.48964310 373.16757202]
[50.78712082 360.83190918]
[45.73651886 346.60540771]
[44.71262741 331.54370117]
[47.79142761 316.76455688]
[54.74444962 303.36462402]
[65.05573273 292.33828735]
[77.96011353 284.50378418]
[92.50000000 280.44247437]
[92.50000000 265.44247437]
[92.50000000 250.44247437]
[92.50000000 235.44247437]
[92.50000000 220.44247437]
[92.50000000 205.44247437]
[92.50000000 190.44247437]
[92.50000000 175.44247437]
[92.50000000 160.44247437]
[92.50000000 145.44247437]
[92.50000000 130.44247437]
[80.18708801 127.03238678]
[69.53425598 118.56889343]
[62.62054825 105.89596558]
[61.09024811 90.70513916]
[65.81409454 75.31354523]
[50.87978745 73.91123962]
[35.94548035 72.50893402]
[21.01117134 71.10662842]
[15.60835552 85.20316315]
[6.60176754 97.31860352]
[-5.34024477 106.55390930]
[-19.33150482 112.22376251]
[-34.33376694 113.90742493]
[-49.23376465 111.47994232]
[-62.92581940 105.12146759]
[-74.39389038 95.30383301]
[-82.78696442 82.75557709]
[-87.48223114 68.40785217]
[-88.13126373 53.32537079]
[-84.68589783 38.62734222]
[-77.40180206 25.40446091]
[-66.81951141 14.63795280]
[-53.72430038 7.12676382]
[-39.08791351 3.42827487]
[-23.99647522 3.81693769]
[-9.56986809 8.26391125]
[3.12135839 16.43919945]
[13.13543034 27.73614311]
[19.72923660 41.31643295]
[22.41347504 56.17232513]
[37.34778214 57.57462692]
[52.28208923 58.97692871]
[67.21640015 60.37923431]
[72.76205444 55.32991028]
[60.32826996 46.93938446]
[47.89448166 38.54885864]
[33.69209290 33.72266388]
[25.83391762 20.94576645]
[27.93341637 6.09342289]
[39.02516556 -4.00474930]
[54.00880051 -4.70526361]
[65.99433136 4.31400061]
[69.47060394 18.90378380]
[76.66198730 32.06752014]
[83.85337067 45.23125839]
[89.39903259 40.18193436]
[89.39903259 25.18193436]
[89.39903259 10.18193531]
[89.39903259 -4.81806517]
[76.05789948 -12.42791843]
[68.32292938 -25.69689751]
[68.27478790 -41.05571365]
[75.92642212 -54.37292480]
[89.21958160 -62.06626511]
[104.57847595 -62.06626511]
[117.87163544 -54.37292480]
[125.52326965 -41.05571365]
[125.47512817 -25.69689751]
[117.74015808 -12.42791843]
[104.39903259 -4.81806517]
[104.39903259 10.18193531]
[104.39903259 25.18193436]
[104.39903259 40.18193436]
[116.47901917 49.07428360]
[130.80162048 44.61746979]
[145.12420654 40.16065216]
[159.44680786 35.70383835]
[173.76940918 31.24702263]
[188.09201050 26.79020691]
[202.41459656 22.33339119]
[200.92193604 7.35484505]
[202.47531128 -7.61752510]
[207.01115417 -21.97061157]
[214.34368896 -35.11666489]
[224.17268372 -46.51736069]
[236.09562683 -55.70584869]
[249.62428284 -62.30586624]
[264.20468140 -66.04714203]
[279.23974609 -66.77648926]
[294.11376953 -64.46401978]
[308.21774292 -59.20444107]
[320.97406006 -51.21312714]
[331.86038208 -40.81731415]
[340.43090820 -28.44270897]
[346.33471680 -14.59604073]
[349.32998657 0.15567689]
[349.29409790 15.20837116]
[346.22854614 29.94564247]
[340.25881958 43.76401138]
[331.62939453 56.09762192]
[320.69363403 66.44142151]
[307.89938354 74.37183380]
[293.77050781 79.56412506]
[278.88558960 81.80565643]
[263.85418701 81.00465393]
[249.29179382 77.19391632]
[235.79475403 70.52948761]
[223.91574097 61.28426361]
[214.14120483 49.83684540]
[206.87141418 36.65598679]
[192.54881287 41.11280441]
[178.22622681 45.56961823]
[163.90362549 50.02643585]
[149.58102417 54.48324966]
[135.25842285 58.94006729]
[120.93582916 63.39688110]
[137.28871155 90.17023468]
[130.05967712 117.84527588]
[107.50000000 130.44247437]
[107.50000000 145.44247437]
[107.50000000 160.44247437]
[107.50000000 175.44247437]
[107.50000000 190.44247437]
[107.50000000 205.44247437]
[107.50000000 220.44247437]
[107.50000000 235.44247437]
[107.50000000 250.44247437]
[107.50000000 265.44247437]
[107.50000000 280.44247437]
[122.03988647 284.50378418]
[134.94427490 292.33828735]
[145.25555420 303.36462402]
[152.20857239 316.76455688]
[155.28736877 331.54370117]
[154.26348877 346.60540771]
[149.21287537 360.83190918]
[140.51036072 373.16757202]
[128.80169678 382.69699097]
[114.95575714 388.71304321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 54]
[27 53]
[28 52]
[29 51]
[67 84]
[68 83]
[69 82]
[70 81]
[85 127]
[86 126]
[87 125]
[88 124]
[89 123]
[90 122]
[91 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
