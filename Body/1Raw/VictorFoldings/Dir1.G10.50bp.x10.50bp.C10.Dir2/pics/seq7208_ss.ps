%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACACUUUGGGGGGGGGGCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUAxxxxxxxxxxUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAACCCCCCCCCCACAUCACUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.80145264]
[71.19830322 352.78543091]
[59.48964310 343.25601196]
[50.78712082 330.92034912]
[45.73651886 316.69381714]
[44.71262741 301.63214111]
[47.79142761 286.85296631]
[54.74444962 273.45306396]
[65.05573273 262.42672729]
[77.96011353 254.59220886]
[92.50000000 250.53089905]
[92.50000000 235.53089905]
[92.50000000 220.53089905]
[92.50000000 205.53089905]
[92.50000000 190.53089905]
[92.50000000 175.53089905]
[92.50000000 160.53089905]
[92.50000000 145.53089905]
[92.50000000 130.53089905]
[92.50000000 115.53089905]
[80.79368591 104.50127411]
[82.46382141 86.37612915]
[67.82032013 83.12530518]
[53.17681503 79.87448120]
[38.53331375 76.62365723]
[27.51360321 88.90960693]
[11.89698315 93.95111084]
[-4.04341125 90.46773529]
[-15.99553204 79.49829102]
[-20.77485085 64.09342957]
[-35.48281097 61.14794540]
[-50.19077301 58.20246124]
[-64.89873505 55.25698090]
[-79.60669708 52.31149673]
[-94.37274933 49.67263412]
[-109.19051361 47.34152985]
[-124.00827026 45.01042557]
[-138.82603455 42.67932129]
[-151.45315552 52.18358612]
[-167.09053040 49.89269257]
[-176.46076965 37.16577911]
[-174.00466919 21.55350494]
[-161.17939758 12.31835175]
[-145.59396362 14.93937302]
[-136.49491882 27.86156273]
[-121.67716217 30.19266701]
[-106.85940552 32.52376938]
[-92.04164886 34.85487366]
[-87.67575073 32.77775574]
[-81.95244598 33.46706772]
[-76.66121674 37.60353470]
[-61.95325470 40.54901886]
[-47.24529266 43.49449921]
[-32.53733063 46.43998337]
[-17.82936859 49.38546371]
[-9.48094845 38.53358459]
[2.79379177 32.31990051]
[16.61456490 32.01351166]
[29.27344704 37.73170090]
[38.26544189 48.40573883]
[41.78413773 61.98015213]
[56.42763901 65.23097992]
[71.07114410 68.48180389]
[85.71464539 71.73262787]
[100.32353973 68.32965088]
[112.02316284 58.94248962]
[103.84016418 46.35610199]
[96.95104980 33.01748276]
[91.42428589 19.05920601]
[87.31479645 4.61999893]
[84.66342926 -10.15663338]
[83.49653625 -25.12383080]
[83.82571411 -40.13283539]
[85.64768982 -55.03448105]
[88.94435883 -69.68066406]
[93.68295288 -83.92581177]
[99.81637573 -97.62835693]
[107.28366852 -110.65210724]
[116.01062012 -122.86763000]
[125.91049194 -134.15351868]
[136.88488770 -144.39758301]
[148.82475281 -153.49804688]
[161.61140442 -161.36444092]
[175.11776733 -167.91857910]
[189.20960999 -173.09533691]
[203.74685669 -176.84326172]
[218.58503723 -179.12509155]
[233.57669067 -179.91816711]
[248.57281494 -179.21458435]
[263.42434692 -177.02134705]
[277.98373413 -173.36026001]
[292.10620117 -168.26770020]
[305.65142822 -161.79428101]
[318.48480225 -154.00434875]
[330.47875977 -144.97531128]
[341.51412964 -134.79690552]
[351.48117065 -123.57031250]
[360.28088379 -111.40709686]
[367.82577515 -98.42814636]
[374.04086304 -84.76245117]
[378.86437988 -70.54582977]
[382.24841309 -55.91958618]
[384.15930176 -41.02908325]
[384.57803345 -26.02230835]
[383.50048828 -11.04841423]
[380.93737793 3.74377942]
[376.91412354 18.20725632]
[371.47076416 32.19826889]
[364.66137695 45.57776642]
[356.55364990 58.21276855]
[347.22814941 69.97770691]
[336.77758789 80.75564575]
[325.30578613 90.43946838]
[312.92678833 98.93293762]
[299.76361084 106.15162659]
[285.94708252 112.02379608]
[271.61453247 116.49108887]
[256.90841675 119.50910187]
[241.97486877 121.04784393]
[226.96231079 121.09201050]
[212.01997375 119.64117432]
[197.29634094 116.70974731]
[182.93774414 112.32687378]
[169.08691406 106.53610229]
[155.88148499 99.39499664]
[143.45272827 90.97452545]
[131.92414856 81.35836792]
[121.41032410 70.64211273]
[109.71070099 80.02927399]
[119.72671509 100.02666473]
[107.50000000 115.53089905]
[107.50000000 130.53089905]
[107.50000000 145.53089905]
[107.50000000 160.53089905]
[107.50000000 175.53089905]
[107.50000000 190.53089905]
[107.50000000 205.53089905]
[107.50000000 220.53089905]
[107.50000000 235.53089905]
[107.50000000 250.53089905]
[122.03988647 254.59220886]
[134.94427490 262.42672729]
[145.25555420 273.45306396]
[152.20857239 286.85296631]
[155.28736877 301.63214111]
[154.26348877 316.69381714]
[149.21287537 330.92034912]
[140.51036072 343.25601196]
[128.80169678 352.78543091]
[114.95575714 358.80145264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 64]
[23 63]
[24 62]
[25 61]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 48]
[36 47]
[37 46]
[38 45]
[65 129]
[66 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
