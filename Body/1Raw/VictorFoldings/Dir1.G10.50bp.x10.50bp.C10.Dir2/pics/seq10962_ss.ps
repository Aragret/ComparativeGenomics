%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUCUCCAGGGGGGGGGGCUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCAxxxxxxxxxxCAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACCCCCCCCCCCGCCUUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[105.16371918 372.12054443]
[91.31777954 366.10452271]
[79.60912323 356.57510376]
[70.90659332 344.23944092]
[65.85599518 330.01290894]
[64.83209991 314.95123291]
[67.91090393 300.17208862]
[74.86392212 286.77215576]
[85.17520905 275.74581909]
[98.07958984 267.91131592]
[112.61947632 263.85000610]
[112.61947632 248.84999084]
[112.61947632 233.84999084]
[112.61947632 218.84999084]
[112.61947632 203.84999084]
[112.61947632 188.84999084]
[112.61947632 173.84999084]
[112.61947632 158.84999084]
[112.61947632 143.84999084]
[112.61947632 128.84999084]
[106.76966095 124.15641785]
[101.45730591 138.18420410]
[86.47447205 137.46664429]
[82.52698517 122.99539185]
[95.07003784 114.76925659]
[89.22023010 110.07567596]
[74.57672882 113.32649994]
[59.93322754 116.57732391]
[45.28972626 119.82815552]
[37.01442719 133.29273987]
[21.62282753 136.88079834]
[8.24648762 128.46360779]
[4.82135534 113.03492737]
[13.37949944 99.74832916]
[28.84352493 96.48651123]
[42.03889847 105.18465424]
[56.68239975 101.93382263]
[71.32590485 98.68299866]
[85.96940613 95.43217468]
[71.30454254 92.27911377]
[61.63825607 80.80902100]
[61.01573944 65.82194519]
[69.69749451 53.58973312]
[84.05036163 49.23136520]
[98.06788635 54.57075119]
[105.88396454 67.37344360]
[104.22715759 82.28285980]
[111.95124054 69.42446136]
[119.27034760 56.33130646]
[126.17734528 43.01615143]
[133.08435059 29.70099449]
[139.99134827 16.38583946]
[146.75946045 2.99955392]
[153.38795471 -10.45641136]
[148.53457642 -25.25784302]
[155.44850159 -38.80968094]
[169.58930969 -43.34542847]
[176.21780396 -56.80139542]
[182.84629822 -70.25736237]
[170.20317078 -78.35866547]
[158.54661560 -87.82464600]
[148.02322388 -98.53624725]
[138.76535034 -110.35875702]
[130.88941956 -123.14350128]
[124.49447632 -136.72969055]
[119.66094971 -150.94648743]
[116.44961548 -165.61506653]
[114.90086365 -180.55097961]
[115.03417206 -195.56637573]
[116.84786987 -210.47242737]
[120.31914520 -225.08168030]
[125.40433502 -239.21040344]
[132.03950500 -252.68092346]
[140.14118958 -265.32382202]
[149.60751343 -276.98007202]
[160.31942749 -287.50314331]
[172.14221191 -296.76065063]
[184.92720032 -304.63623047]
[198.51358032 -311.03076172]
[212.73051453 -315.86386108]
[227.39918518 -319.07476807]
[242.33514404 -320.62304688]
[257.35055542 -320.48928833]
[272.25653076 -318.67517090]
[286.86569214 -315.20346069]
[300.99426270 -310.11782837]
[314.46456909 -303.48226929]
[327.10723877 -295.38018799]
[338.76321411 -285.91351318]
[349.28594971 -275.20129395]
[358.54312134 -263.37823486]
[366.41830444 -250.59301758]
[372.81243896 -237.00643921]
[377.64511108 -222.78936768]
[380.85556030 -208.12059021]
[382.40341187 -193.18458557]
[382.26922607 -178.16918945]
[380.45462036 -163.26324463]
[376.98248291 -148.65420532]
[371.89645386 -134.52578735]
[365.26046753 -121.05567169]
[357.15802002 -108.41326904]
[347.69100952 -96.75756073]
[336.97845459 -86.23513031]
[325.15512085 -76.97832489]
[312.36965942 -69.10353851]
[298.78289795 -62.70980835]
[284.56567383 -57.87755203]
[269.89682007 -54.66753387]
[254.96075439 -53.12012482]
[239.94537354 -53.25478363]
[225.03947449 -55.06981659]
[210.43054199 -58.54240036]
[196.30227661 -63.62886047]
[189.67376709 -50.17289352]
[183.04527283 -36.71693039]
[188.06732178 -22.74142838]
[181.53675842 -9.00074100]
[166.84391785 -3.82791305]
[160.21542358 9.62805271]
[160.08012390 17.06628799]
[153.30650330 23.29283714]
[146.39950562 36.60799408]
[139.49250793 49.92314911]
[132.58551025 63.23830414]
[133.33636475 66.74596405]
[132.38435364 70.79508209]
[129.49253845 74.56201935]
[124.80964661 77.14854431]
[117.08556366 90.00695038]
[127.61947632 128.84999084]
[127.61947632 143.84999084]
[127.61947632 158.84999084]
[127.61947632 173.84999084]
[127.61947632 188.84999084]
[127.61947632 203.84999084]
[127.61947632 218.84999084]
[127.61947632 233.84999084]
[127.61947632 248.84999084]
[127.61947632 263.85000610]
[142.15936279 267.91131592]
[155.06375122 275.74581909]
[165.37503052 286.77215576]
[172.32804871 300.17208862]
[175.40684509 314.95123291]
[174.38296509 330.01290894]
[169.33235168 344.23944092]
[160.62983704 356.57510376]
[148.92117310 366.10452271]
[135.07522583 372.12054443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 39]
[27 38]
[28 37]
[29 36]
[47 130]
[48 129]
[49 125]
[50 124]
[51 123]
[52 122]
[53 120]
[54 119]
[57 116]
[58 115]
[59 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
