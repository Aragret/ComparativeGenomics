%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUCCUAGGGGGGGGGGGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCxxxxxxxxxxUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCCCCCCCCCCCAUCAUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[104.91425323 443.63198853]
[91.06831360 437.61596680]
[79.35965729 428.08654785]
[70.65712738 415.75088501]
[65.60652924 401.52435303]
[64.58263397 386.46267700]
[67.66143799 371.68353271]
[74.61445618 358.28359985]
[84.92574310 347.25726318]
[97.83012390 339.42276001]
[112.37001038 335.36145020]
[112.37001038 320.36145020]
[112.37001038 305.36145020]
[112.37001038 290.36145020]
[112.37001038 275.36145020]
[112.37001038 260.36145020]
[112.37001038 245.36143494]
[112.37001038 230.36143494]
[112.37001038 215.36143494]
[112.37001038 200.36143494]
[112.37001038 185.36143494]
[112.37001038 170.36143494]
[110.03890228 155.54368591]
[105.43334198 141.26821899]
[100.82777405 126.99275970]
[83.25809479 123.87293243]
[70.24842834 109.75888062]
[68.29089355 89.30524445]
[54.16608810 84.25648499]
[40.04128265 79.20772552]
[25.91648102 74.15897369]
[11.79167843 69.11021423]
[3.79766917 81.87383270]
[-6.75356722 92.62024689]
[-19.36853027 100.84683990]
[-33.45719910 106.16882324]
[-48.36061478 108.33729553]
[-63.38172150 107.25081635]
[-77.81795502 102.96021271]
[-90.99410248 95.66616821]
[-102.29389954 85.70982361]
[-111.18881989 73.55686951]
[-117.26284790 59.77571487]
[-120.23188782 45.01092911]
[-119.95706177 29.95308876]
[-116.45123291 15.30647755]
[-109.87837219 1.75614238]
[-100.54590607 -10.06414223]
[-88.89032745 -19.60151863]
[-75.45679474 -26.40991020]
[-60.87360764 -30.17087173]
[-45.82286072 -30.70849991]
[-31.00849724 -27.99764633]
[-17.12341499 -22.16510391]
[-4.81704235 -13.48367119]
[5.33502722 -2.35939336]
[12.85796452 10.68742561]
[17.39990807 25.04656219]
[18.74842262 40.04641724]
[16.84043503 54.98541260]
[30.96523666 60.03416824]
[45.09004211 65.08292389]
[59.21484375 70.13168335]
[73.33964539 75.18043518]
[85.60201263 66.54132080]
[85.60201263 51.54132080]
[85.60201263 36.54132080]
[85.60201263 21.54132271]
[85.60201263 6.54132271]
[71.82814789 -0.03464092]
[62.27822113 -11.94101143]
[58.84838104 -26.81377029]
[62.21962357 -41.69992065]
[71.72258759 -53.64380646]
[85.47045898 -60.27396011]
[100.73357391 -60.27396011]
[114.48143768 -53.64380646]
[123.98440552 -41.69992065]
[127.35565186 -26.81377029]
[123.92581177 -11.94101143]
[114.37588501 -0.03464092]
[100.60201263 6.54132271]
[100.60201263 21.54132271]
[100.60201263 36.54132080]
[100.60201263 51.54132080]
[100.60201263 66.54132080]
[110.27664948 71.56530762]
[116.88869476 78.92712402]
[129.15106201 70.28800201]
[141.41343689 61.64888763]
[153.67579651 53.00977325]
[165.93817139 44.37065506]
[163.38102722 29.32327271]
[167.61418152 14.65892315]
[177.79714966 3.28922653]
[191.90808105 -2.52835608]
[207.14524841 -1.63873947]
[220.48330688 5.78144217]
[229.27395630 18.25890732]
[231.77183533 33.31624222]
[227.48095703 47.96380997]
[217.25329590 59.29331589]
[203.11956787 65.05528259]
[187.88601685 64.10567474]
[174.57728577 56.63302231]
[162.31491089 65.27214050]
[150.05255127 73.91125488]
[137.79017639 82.55036926]
[125.52780914 91.18949127]
[125.61337280 108.55859375]
[115.10324097 122.38719940]
[119.70880127 136.66265869]
[124.31436920 150.93811035]
[128.23092651 136.45845032]
[137.03193665 124.31175995]
[149.57128906 116.07984161]
[164.21604919 112.83469391]
[179.05909729 114.99892426]
[192.16749573 122.29068756]
[201.83419800 133.76042175]
[206.80036926 147.91447449]
[206.41926575 162.90963745]
[200.74053955 176.79315186]
[190.50369263 187.75703430]
[177.04180908 194.37353516]
[162.10798645 195.78099060]
[147.64697266 191.79612732]
[135.54196167 182.93788147]
[127.37001038 170.36143494]
[127.37001038 185.36143494]
[127.37001038 200.36143494]
[127.37001038 215.36143494]
[127.37001038 230.36143494]
[127.37001038 245.36143494]
[127.37001038 260.36145020]
[127.37001038 275.36145020]
[127.37001038 290.36145020]
[127.37001038 305.36145020]
[127.37001038 320.36145020]
[127.37001038 335.36145020]
[141.90989685 339.42276001]
[154.81427002 347.25726318]
[165.12556458 358.28359985]
[172.07858276 371.68353271]
[175.15737915 386.46267700]
[174.13348389 401.52435303]
[169.08288574 415.75088501]
[160.38037109 428.08654785]
[148.67170715 437.61596680]
[134.82575989 443.63198853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 113]
[24 112]
[25 111]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
