%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAUAAAUAGGGGGGGGGGUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCAxxxxxxxxxxCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGCCCCCCCCCCUACAUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[88.63604736 377.25170898]
[74.79010773 371.23568726]
[63.08144379 361.70626831]
[54.37891769 349.37060547]
[49.32831573 335.14407349]
[48.30442429 320.08239746]
[51.38322449 305.30322266]
[58.33624649 291.90332031]
[68.64752960 280.87698364]
[81.55191040 273.04248047]
[96.09179688 268.98114014]
[96.09179688 253.98115540]
[96.09179688 238.98115540]
[96.09179688 223.98115540]
[96.09179688 208.98115540]
[96.09179688 193.98115540]
[96.09179688 178.98115540]
[96.09179688 163.98115540]
[96.09179688 148.98115540]
[96.09179688 133.98115540]
[96.09179688 118.98115540]
[86.58344269 107.37981415]
[71.87548065 104.43433380]
[57.16751862 101.48884583]
[42.45955658 98.54336548]
[27.75159454 95.59788513]
[13.04363251 92.65239716]
[-1.66432929 89.70691681]
[-16.37229156 86.76143646]
[-31.42312241 91.63822174]
[-42.38326645 81.55236053]
[-57.09122849 78.60688019]
[-71.79918671 75.66139221]
[-78.27526093 77.44129181]
[-83.82263184 75.87348938]
[-87.05197144 72.27531433]
[-101.62467194 68.72055054]
[-111.27749634 80.54364777]
[-125.10787964 86.99990845]
[-140.36978149 86.80744171]
[-154.03294373 80.00444794]
[-163.38453674 67.94168091]
[-166.56779480 53.01419830]
[-162.95068359 38.18587494]
[-153.25137329 26.40087700]
[-139.39567566 19.99912834]
[-124.13465118 20.25170135]
[-110.49838257 27.10844421]
[-101.19435883 39.20794678]
[-98.06990814 54.14784622]
[-83.49720764 57.70260620]
[-68.85370636 60.95343399]
[-54.14574432 63.89891815]
[-39.43778229 66.84439850]
[-25.43896294 61.75693512]
[-13.42680836 72.05347443]
[1.28115320 74.99895477]
[15.98911476 77.94443512]
[30.69707680 80.88992310]
[45.40503693 83.83540344]
[60.11299896 86.78088379]
[74.82096100 89.72637177]
[89.52892303 92.67185211]
[83.19246674 84.87128448]
[78.71138763 75.51404572]
[76.35796356 64.94878387]
[76.35796356 49.94878387]
[76.35796356 34.94878387]
[62.30077744 29.16398430]
[51.53090668 18.43652916]
[45.69067383 4.40228128]
[45.67067719 -10.79864120]
[51.47396469 -24.84820747]
[62.21557999 -35.60395813]
[76.25749969 -41.42572403]
[91.45843506 -41.42572403]
[105.50035095 -35.60395813]
[116.24196625 -24.84820747]
[122.04524994 -10.79864120]
[122.02525330 4.40228128]
[116.18502808 18.43652916]
[105.41515350 29.16398430]
[91.35796356 34.94878387]
[91.35796356 49.94878387]
[91.35796356 64.94878387]
[105.42948151 70.14420319]
[115.17713928 58.74317932]
[109.98218536 44.28952789]
[112.72584534 29.17768097]
[122.67007446 17.47265053]
[137.13993835 12.32302856]
[152.24311829 15.11404037]
[163.91691589 25.09491539]
[169.02116394 39.58085251]
[166.18281555 54.67520142]
[156.16540527 66.31766510]
[141.66354370 71.37647247]
[126.57815552 68.49082947]
[116.83050537 79.89185333]
[122.75046539 93.67423248]
[137.73017883 94.45407867]
[152.70989990 95.23392487]
[167.69691467 95.85790253]
[182.68960571 96.32594299]
[197.68231201 96.79398346]
[203.02352905 82.62535858]
[212.67782593 70.96031189]
[225.59796143 63.06417847]
[240.38244629 59.79347610]
[255.42759705 61.50298691]
[269.10140991 68.00727081]
[279.92065430 78.60079956]
[286.71173096 92.13445282]
[288.73800659 107.14022064]
[285.77969360 121.99037170]
[278.15765381 135.07408142]
[266.69869995 144.97212219]
[252.64582825 150.61083984]
[237.52334595 151.37857056]
[222.97164917 147.19206238]
[210.56919861 138.50540161]
[201.66131592 126.26087952]
[197.21426392 111.78668213]
[182.22157288 111.31864166]
[167.22886658 110.85060120]
[160.40100098 113.80456543]
[151.93005371 110.21363831]
[136.95033264 109.43379211]
[121.97062683 108.65394592]
[111.09179688 118.98115540]
[111.09179688 133.98115540]
[111.09179688 148.98115540]
[111.09179688 163.98115540]
[111.09179688 178.98115540]
[111.09179688 193.98115540]
[111.09179688 208.98115540]
[111.09179688 223.98115540]
[111.09179688 238.98115540]
[111.09179688 253.98115540]
[111.09179688 268.98114014]
[125.63168335 273.04248047]
[138.53607178 280.87698364]
[148.84735107 291.90332031]
[155.80036926 305.30322266]
[158.87916565 320.08239746]
[157.85528564 335.14407349]
[152.80467224 349.37060547]
[144.10215759 361.70626831]
[132.39349365 371.23568726]
[118.54755402 377.25170898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[31 54]
[32 53]
[33 52]
[36 51]
[37 50]
[66 85]
[67 84]
[68 83]
[86 99]
[87 98]
[100 129]
[101 128]
[102 127]
[103 125]
[104 124]
[105 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
