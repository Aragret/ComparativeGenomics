%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUAACCAAGGGGGGGGGGGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACxxxxxxxxxxAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUCCCCCCCCCCUUUUAACCAA\
) } def
/len { sequence length } bind def

/coor [
[77.78974915 486.03076172]
[63.30005646 481.82229614]
[50.39382553 474.00619507]
[39.95102692 463.11535645]
[32.68366241 449.89233398]
[29.08723640 435.23873901]
[29.40695763 420.15365601]
[33.62102890 405.66558838]
[41.44212341 392.76235962]
[52.33699417 382.32376099]
[65.56280518 375.06152344]
[80.21779633 371.47073364]
[80.52985382 356.47399902]
[80.84190369 341.47723389]
[81.15396118 326.48046875]
[81.46601868 311.48373413]
[81.77807617 296.48696899]
[82.09013367 281.49023438]
[82.40219116 266.49346924]
[82.71424103 251.49671936]
[83.02629852 236.49996948]
[80.80268860 233.68516541]
[79.86741638 229.63215637]
[80.79694366 224.97508240]
[83.85481262 220.58543396]
[85.10168457 205.63734436]
[86.34856415 190.68925476]
[87.59543610 175.74116516]
[88.68674469 160.78091431]
[89.62237549 145.81013489]
[90.55800629 130.83934021]
[74.22640991 119.38912201]
[67.75186920 100.52357483]
[53.10836792 97.27275085]
[38.46486664 94.02191925]
[23.82136726 90.77109528]
[14.79327297 103.03540802]
[1.55414367 110.56172180]
[-13.60226345 112.04604340]
[-28.05000877 107.23121643]
[-39.28593063 96.95143890]
[-45.36334229 82.98773956]
[-45.22929382 67.75940704]
[-38.90700531 53.90485764]
[-27.49185944 43.82446671]
[-12.96159267 39.26472473]
[2.16633558 41.01563263]
[15.27092075 48.77383804]
[24.08171463 61.19518280]
[27.07219315 76.12759399]
[41.71569443 79.37841797]
[56.35919571 82.62924957]
[71.00269318 85.88007355]
[84.85184479 71.52633667]
[104.49436951 68.06230164]
[109.98139954 54.10190964]
[115.46842957 40.14152145]
[115.70357513 30.94388199]
[121.21755981 25.94972420]
[126.99383545 12.10650635]
[132.77011108 -1.73671103]
[138.54638672 -15.57992840]
[138.97282410 -24.77068520]
[144.58950806 -29.64905167]
[150.65252686 -43.36910629]
[156.71553040 -57.08915710]
[162.77854919 -70.80921173]
[168.84155273 -84.52926636]
[156.34860229 -92.90166473]
[145.49942017 -103.31638336]
[136.62371826 -115.45693970]
[129.99119568 -128.95437622]
[125.80344391 -143.39854431]
[124.18769836 -158.35047913]
[125.19306183 -173.35581970]
[128.78898621 -187.95857239]
[134.86619568 -201.71498108]
[143.24002075 -214.20698547]
[153.65597534 -225.05499268]
[165.79753113 -233.92932129]
[179.29571533 -240.56030273]
[193.74035645 -244.74641418]
[208.69247437 -246.36047363]
[223.69770813 -245.35340881]
[238.30004883 -241.75581360]
[252.05577087 -235.67704773]
[264.54681396 -227.30181885]
[275.39364624 -216.88462830]
[284.26660156 -204.74206543]
[290.89605713 -191.24311829]
[295.08053589 -176.79801941]
[296.69287109 -161.84570312]
[295.68411255 -146.84059143]
[292.08486938 -132.23866272]
[286.00454712 -118.48362732]
[277.62789917 -105.99352264]
[267.20947266 -95.14788055]
[255.06591797 -86.27630615]
[241.56622314 -79.64839172]
[227.12063599 -75.46554565]
[212.16813660 -73.85488892]
[197.16314697 -74.86535645]
[182.56161499 -78.46625519]
[176.49859619 -64.74620056]
[170.43559265 -51.02614594]
[164.37257385 -37.30609131]
[158.30955505 -23.58603859]
[152.38960266 -9.80365658]
[146.61332703 4.03956127]
[140.83705139 17.88277817]
[135.06077576 31.72599602]
[129.42881775 45.62855148]
[123.94179535 59.58894348]
[118.45475769 73.54933167]
[124.68096161 79.23786163]
[129.21958923 86.34600830]
[131.76033020 94.38774872]
[132.12945557 102.81323242]
[130.30171204 111.04635620]
[126.40209961 118.52418518]
[120.69722748 124.73541260]
[113.57717896 129.25535583]
[105.52879333 131.77496338]
[104.59317017 146.74575806]
[103.65753937 161.71655273]
[106.25777435 170.54211426]
[102.54352570 176.98803711]
[101.29664612 191.93612671]
[100.04977417 206.88421631]
[98.80290222 221.83230591]
[98.02305603 236.81201172]
[97.71099854 251.80877686]
[97.39894104 266.80551147]
[97.08688354 281.80227661]
[96.77482605 296.79904175]
[96.46277618 311.79577637]
[96.15071869 326.79254150]
[95.83866119 341.78930664]
[95.52660370 356.78604126]
[95.21454620 371.78280640]
[109.70748138 375.98007202]
[122.61974335 383.78622437]
[133.07095337 394.66900635]
[140.34852600 407.88638306]
[143.95626831 422.53720093]
[143.64819336 437.62255859]
[139.44531250 452.11386108]
[131.63418579 465.02310181]
[120.74738312 475.47012329]
[107.52718353 482.74258423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 125]
[30 124]
[31 123]
[33 53]
[34 52]
[35 51]
[36 50]
[55 114]
[56 113]
[57 112]
[59 111]
[60 110]
[61 109]
[62 108]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
