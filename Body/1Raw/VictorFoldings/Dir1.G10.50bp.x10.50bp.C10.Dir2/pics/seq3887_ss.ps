%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCACCCUGGGGGGGGGGUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGxxxxxxxxxxCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUCCCCCCCCCCUCUACACCCU\
) } def
/len { sequence length } bind def

/coor [
[96.44065094 389.29254150]
[82.59471130 383.27648926]
[70.88605499 373.74707031]
[62.18352890 361.41140747]
[57.13292694 347.18490601]
[56.10903549 332.12319946]
[59.18783188 317.34405518]
[66.14085388 303.94412231]
[76.45214081 292.91778564]
[89.35652161 285.08328247]
[103.89640808 281.02197266]
[103.89640808 266.02197266]
[103.89640808 251.02197266]
[103.89640808 236.02197266]
[103.89640808 221.02197266]
[103.89640808 206.02197266]
[103.89640808 191.02197266]
[103.89640808 176.02197266]
[103.89640808 161.02197266]
[103.89640808 146.02197266]
[87.44506073 142.80715942]
[73.78398895 134.12689209]
[64.56993866 121.52787781]
[50.55322266 126.86939240]
[47.48160553 141.98788452]
[36.70755386 153.02976990]
[21.66903496 156.47164917]
[7.16478205 151.21520996]
[-2.17695093 138.93775940]
[-3.37525010 123.55700684]
[3.95225739 109.98088074]
[17.46739006 102.54148102]
[32.85752106 103.61268616]
[45.21170807 112.85268402]
[59.22842407 107.51116943]
[58.59098053 97.99198151]
[60.14648056 88.57913971]
[63.81254578 79.77112579]
[69.39503479 72.03439331]
[76.59830475 65.77866364]
[85.04088593 61.33523560]
[82.24855804 46.59743118]
[79.45623016 31.85962486]
[76.66390991 17.12181854]
[63.30689240 15.10251045]
[51.25059128 9.05965519]
[41.67195892 -0.40101480]
[35.50116730 -12.34089947]
[33.33129120 -25.58164215]
[35.36134720 -38.82141876]
[41.37810135 -50.76292419]
[50.77840042 -60.24050903]
[62.62959290 -66.33393097]
[60.45275497 -81.17513275]
[58.27591705 -96.01633453]
[56.09907913 -110.85754395]
[51.73195648 -118.95569611]
[54.03467178 -126.02981567]
[52.16705704 -140.91310120]
[50.29944611 -155.79637146]
[48.43183136 -170.67965698]
[33.48320007 -172.72924805]
[19.57478523 -178.57890320]
[7.65488338 -187.82975769]
[-1.46378708 -199.85108948]
[-7.15949917 -213.82324219]
[-9.04391003 -228.79359436]
[-6.98853683 -243.74143982]
[-1.13351917 -257.64758301]
[8.12193871 -269.56393433]
[20.14678383 -278.67794800]
[34.12114334 -284.36825562]
[49.09222031 -286.24688721]
[64.03926086 -284.18576050]
[77.94316101 -278.32537842]
[89.85591125 -269.06530762]
[98.96529388 -257.03695679]
[104.65021515 -243.06039429]
[106.52307129 -228.08859253]
[104.45615387 -213.14233398]
[98.59040070 -199.24070740]
[89.32573700 -187.33152771]
[77.29386139 -178.22679138]
[63.31511307 -172.54727173]
[65.18272400 -157.66398621]
[67.05033875 -142.78070068]
[68.91795349 -127.89743042]
[70.94028473 -113.03437805]
[73.11712646 -98.19317627]
[75.29396057 -83.35196686]
[77.47079468 -68.51076508]
[93.65724945 -64.84870911]
[107.24127960 -55.25173950]
[116.14001465 -41.15710831]
[118.97590637 -24.69427299]
[115.28990936 -8.36318207]
[105.61550140 5.34533930]
[91.40171814 14.32949352]
[94.19403839 29.06729889]
[96.98636627 43.80510712]
[99.77868652 58.54291153]
[116.95250702 62.16679382]
[131.08770752 72.57202911]
[139.65063477 87.89354706]
[154.55253601 86.18085480]
[169.45443726 84.46816254]
[184.35633850 82.75547791]
[199.25823975 81.04278564]
[212.10177612 70.84593201]
[227.25279236 77.12116241]
[229.12524414 93.41306305]
[215.79289246 102.96192169]
[200.97093201 95.94468689]
[186.06903076 97.65737915]
[171.16712952 99.37006378]
[156.26522827 101.08275604]
[141.36332703 102.79544830]
[141.83996582 110.06684113]
[141.00581360 117.56707764]
[138.79994202 125.05529785]
[152.04252625 132.10043335]
[165.28511047 139.14556885]
[180.98657227 135.85258484]
[193.25851440 146.18597412]
[192.68696594 162.21884155]
[179.71035767 171.65214539]
[164.28324890 167.24946594]
[158.23997498 152.38815308]
[144.99739075 145.34301758]
[131.75480652 138.29788208]
[118.89640808 146.02197266]
[118.89640808 161.02197266]
[118.89640808 176.02197266]
[118.89640808 191.02197266]
[118.89640808 206.02197266]
[118.89640808 221.02197266]
[118.89640808 236.02197266]
[118.89640808 251.02197266]
[118.89640808 266.02197266]
[118.89640808 281.02197266]
[133.43629456 285.08328247]
[146.34066772 292.91778564]
[156.65196228 303.94412231]
[163.60498047 317.34405518]
[166.68377686 332.12319946]
[165.65988159 347.18490601]
[160.60928345 361.41140747]
[151.90676880 373.74707031]
[140.19810486 383.27648926]
[126.35216522 389.29254150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 35]
[24 34]
[41 101]
[42 100]
[43 99]
[44 98]
[53 91]
[54 90]
[55 89]
[56 88]
[58 87]
[59 86]
[60 85]
[61 84]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
