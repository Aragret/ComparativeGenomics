%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCACACGGGGGGGGGGCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAAxxxxxxxxxxCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCCCCCCCCCCCUAGCAACAC\
) } def
/len { sequence length } bind def

/coor [
[83.79259491 390.80047607]
[70.30371094 384.06893921]
[58.81821060 374.30438232]
[50.00384140 362.07449341]
[44.37306213 348.09030151]
[42.25323105 333.16482544]
[43.76760101 318.16580200]
[48.82812500 303.96530151]
[57.14059067 291.38888550]
[68.22171783 281.16772461]
[81.42727661 273.89608765]
[95.98950195 269.99670410]
[95.68152618 254.99987793]
[95.37354279 240.00303650]
[95.06556702 225.00621033]
[94.75759125 210.00936890]
[94.44961548 195.01252747]
[94.14163208 180.01568604]
[93.83365631 165.01885986]
[93.52568054 150.02201843]
[93.21770477 135.02517700]
[92.90972137 120.02833557]
[84.77613068 122.16580200]
[75.27201843 121.14255524]
[65.55324554 116.46216583]
[50.90052414 119.67115784]
[36.24779892 122.88015747]
[24.42238808 133.39064026]
[10.33450985 128.55525208]
[3.23905826 142.49041748]
[-11.17385197 148.55688477]
[-26.09888649 143.89025879]
[-34.48889923 130.69398499]
[-32.38238525 115.19892883]
[-20.77397156 104.72138977]
[-5.14480066 104.20854187]
[7.12551308 113.90253448]
[17.90286255 103.62157440]
[33.03880310 108.22743225]
[47.69152832 105.01844025]
[62.34425354 101.80944061]
[63.03626633 94.34143066]
[64.42028809 79.40541840]
[65.11230469 71.93741608]
[51.29872131 66.09062958]
[37.48513794 60.24383926]
[20.54201508 59.63807678]
[16.43378067 43.18940735]
[31.10235786 34.68827820]
[43.33192444 46.43025589]
[57.14550781 52.27704239]
[70.95909119 58.12383270]
[85.29914856 53.72353363]
[93.45581818 41.13509369]
[101.61248016 28.54665375]
[109.76914978 15.95821381]
[117.92581177 3.36977482]
[126.08248138 -9.21866417]
[134.23915100 -21.80710411]
[132.31488037 -34.60166550]
[139.41787720 -44.93213654]
[151.26908875 -47.54191971]
[159.68251038 -59.96023560]
[168.09591675 -72.37854767]
[156.70442200 -82.16281128]
[146.50254822 -93.18185425]
[137.62326050 -105.29201508]
[130.18234253 -118.33542633]
[124.27678680 -132.14202881]
[119.98358917 -146.53182983]
[117.35873413 -161.31721497]
[116.43642426 -176.30545044]
[117.22869110 -191.30111694]
[119.72521210 -206.10871887]
[123.89342499 -220.53521729]
[129.67900085 -234.39251709]
[137.00650024 -247.49998474]
[145.78041077 -259.68670654]
[155.88633728 -270.79382324]
[167.19253540 -280.67651367]
[179.55158997 -289.20596313]
[192.80238342 -296.27096558]
[206.77217102 -301.77938843]
[221.27882385 -305.65945435]
[236.13320923 -307.86056519]
[251.14169312 -308.35400391]
[266.10858154 -307.13336182]
[280.83874512 -304.21453857]
[295.14019775 -299.63558960]
[308.82644653 -293.45623779]
[321.71905518 -285.75701904]
[333.64996338 -276.63827515]
[344.46362305 -266.21896362]
[354.01907349 -254.63485718]
[362.19171143 -242.03701782]
[368.87500000 -228.58966064]
[373.98181152 -214.46810913]
[377.44555664 -199.85646057]
[379.22109985 -184.94520569]
[379.28527832 -169.92877197]
[377.63726807 -155.00288391]
[374.29852295 -140.36216736]
[369.31262207 -126.19748688]
[362.74450684 -112.69348907]
[354.67984009 -100.02625275]
[345.22378540 -88.36090088]
[334.49957275 -77.84952545]
[322.64703369 -68.62915802]
[309.82067871 -60.82000732]
[296.18777466 -54.52388763]
[281.92599487 -49.82287216]
[267.22128296 -46.77825546]
[252.26538086 -45.42972946]
[237.25323486 -45.79486847]
[222.38056946 -47.86891937]
[207.84129333 -51.62483978]
[193.82493591 -57.01366425]
[180.51423645 -63.96513748]
[172.10081482 -51.54682541]
[163.68740845 -39.12850952]
[163.40182495 -21.60815239]
[146.82759094 -13.65043831]
[138.67091370 -1.06199872]
[130.51425171 11.52644062]
[122.35758972 24.11487961]
[114.20092010 36.70331955]
[106.04425812 49.29175949]
[97.88758850 61.88019943]
[129.00692749 93.56418610]
[107.90656281 119.72035980]
[108.21453857 134.71719360]
[108.52251434 149.71403503]
[108.83049774 164.71087646]
[109.13847351 179.70771790]
[109.44644928 194.70454407]
[109.75442505 209.70138550]
[110.06240845 224.69822693]
[110.37038422 239.69506836]
[110.67835999 254.69190979]
[110.98633575 269.68875122]
[125.69637299 272.98696899]
[139.18933105 279.71032715]
[150.68075562 289.46792603]
[159.50253296 301.69247437]
[165.14178467 315.67324829]
[167.27067566 330.59744263]
[165.76539612 345.59735107]
[160.71348572 359.80093384]
[152.40864563 372.38238525]
[141.33370972 382.61026001]
[128.13256836 389.88989258]
[113.57270813 393.79809570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[25 41]
[26 40]
[27 39]
[29 37]
[44 52]
[45 51]
[46 50]
[53 128]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
[62 120]
[63 119]
[64 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
