%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGCUAUCCCCACGGGGGGGGGGCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAxxxxxxxxxxACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCCCCCCCCCCCAUCGCUAACCCCAC\
) } def
/len { sequence length } bind def

/coor [
[77.25889587 642.95611572]
[63.12780380 637.79595947]
[50.18561935 630.12689209]
[38.87314606 620.21014404]
[29.57567787 608.38336182]
[22.60988426 595.04949951]
[18.21302032 580.66265869]
[16.53483963 565.71276855]
[17.63250160 550.70910645]
[21.46862030 536.16265869]
[27.91253662 522.56890869]
[36.74477386 510.39080811]
[47.66451263 500.04315186]
[60.29982758 491.87838745]
[74.22036743 486.17459106]
[88.95199585 483.12603760]
[88.65931702 468.12887573]
[88.36664581 453.13174438]
[88.07396698 438.13458252]
[87.78128815 423.13745117]
[87.48861694 408.14031982]
[87.19593811 393.14315796]
[86.90325928 378.14602661]
[86.61058807 363.14886475]
[86.31790924 348.15173340]
[78.33374786 335.57785034]
[85.80031586 321.62933350]
[85.50763702 306.63220215]
[72.63917542 304.12716675]
[60.51700211 299.11981201]
[49.62268448 291.80657959]
[40.38948822 282.47570801]
[33.18515015 271.49554443]
[28.29723930 259.30035400]
[25.92166519 246.37286377]
[26.15483475 233.22534180]
[28.98974419 220.37918091]
[34.31616211 208.34428406]
[41.92491150 197.59881592]
[51.51610184 188.57017517]
[62.71091843 181.61802673]
[75.06661224 177.01998901]
[88.09400177 174.96046448]
[88.97158813 159.98616028]
[89.84916687 145.01185608]
[90.72675323 130.03755188]
[76.67617035 123.14591217]
[67.16680145 109.86159515]
[64.99253082 92.97628784]
[71.31307983 76.42987823]
[59.22964859 67.54221344]
[45.19467163 73.78040314]
[29.92262650 72.14938354]
[17.52161598 63.08789825]
[11.32745266 49.03343582]
[13.00633240 33.76657867]
[22.10664558 21.39403152]
[36.18045425 15.24395275]
[51.44197464 16.97067833]
[63.78593445 26.10972786]
[69.89186859 40.20274734]
[68.11731720 55.45877838]
[80.20075226 64.34644318]
[94.42998505 59.59998322]
[98.75798798 45.23793793]
[103.08599091 30.87589073]
[92.68486023 19.66144562]
[89.31575775 4.84436321]
[93.78584290 -9.57384396]
[104.79897308 -19.75062752]
[119.32945251 -23.02640915]
[123.65746307 -37.38845444]
[127.98546600 -51.75049973]
[132.31346130 -66.11254883]
[136.64147949 -80.47459412]
[123.60055542 -88.02649689]
[112.65316010 -98.38271332]
[104.38967133 -110.98475647]
[99.25572205 -125.15300751]
[97.52817535 -140.12338257]
[99.30020905 -155.08856201]
[104.47624969 -169.24148560]
[112.77716827 -181.81890869]
[123.75529480 -192.14254761]
[136.81860352 -199.65565491]
[151.26260376 -203.95304871]
[166.30833435 -204.80300903]
[181.14442444 -202.15965271]
[194.97076416 -196.16557312]
[207.04171753 -187.14401245]
[216.70632935 -175.58148193]
[223.44337463 -162.10153198]
[226.88955688 -147.43113708]
[226.85900879 -132.36143494]
[223.35337830 -117.70513153]
[216.56173706 -104.25260925]
[206.85032654 -92.72935486]
[194.74290466 -83.75679779]
[180.89236450 -77.81882477]
[166.04568481 -75.23564911]
[151.00352478 -76.14659119]
[146.67552185 -61.78454208]
[142.34750366 -47.42249680]
[138.01950073 -33.06045151]
[133.69149780 -18.69840431]
[143.99266052 -7.93960619]
[147.54914856 6.62773323]
[143.30853271 21.11509323]
[132.31359863 31.60356903]
[117.44803619 35.20389557]
[113.12003326 49.56594086]
[108.79203033 63.92798996]
[123.09738159 72.15289307]
[132.09658813 85.47350311]
[134.26843262 100.97199249]
[129.54028320 115.44348145]
[119.22884369 126.05840302]
[105.70105743 130.91513062]
[104.82347107 145.88943481]
[103.94589233 160.86375427]
[103.06830597 175.83805847]
[119.31848145 180.92106628]
[133.72718811 189.97398376]
[145.34475708 202.39411926]
[153.40696716 217.35707092]
[157.38539124 233.87139893]
[157.02200317 250.84432983]
[152.34591675 267.15411377]
[143.67105103 281.72409058]
[131.57521057 293.59378052]
[116.86141968 301.98226929]
[100.50478363 306.33950806]
[100.79745483 321.33666992]
[108.80255127 334.98324585]
[101.31505585 347.85903931]
[101.60772705 362.85620117]
[101.90040588 377.85333252]
[102.19308472 392.85049438]
[102.48575592 407.84762573]
[102.77843475 422.84478760]
[103.07111359 437.84191895]
[103.36378479 452.83905029]
[103.65646362 467.83621216]
[103.94914246 482.83334351]
[118.78849792 485.30480957]
[132.92097473 490.46115112]
[145.86523438 498.12670898]
[157.18037415 508.04043579]
[166.48103333 519.86468506]
[173.45042419 533.19665527]
[177.85116577 547.58239746]
[179.53337097 562.53179932]
[178.43975830 577.53570557]
[174.60755920 592.08319092]
[168.16729736 605.67871094]
[159.33834839 617.85919189]
[148.42140198 628.20977783]
[135.78828430 636.37799072]
[121.86928558 642.08551025]
[107.13848114 645.13806152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[27 133]
[28 132]
[43 121]
[44 120]
[45 119]
[46 118]
[50 63]
[51 62]
[64 112]
[65 111]
[66 110]
[71 105]
[72 104]
[73 103]
[74 102]
[75 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
