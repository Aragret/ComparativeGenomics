%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAGCAGGGGGGGGGGGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAxxxxxxxxxxUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCCCCCCCCCCCUAGCAGCAG\
) } def
/len { sequence length } bind def

/coor [
[84.08766937 395.00082397]
[71.21439362 387.09793091]
[61.09010315 375.88745117]
[54.53551865 362.27810669]
[52.08199692 347.37316895]
[53.92843628 332.38092041]
[59.92514801 318.51672363]
[69.58600616 306.90447998]
[82.12785339 298.48550415]
[96.53398132 293.94235229]
[96.22192383 278.94558716]
[95.90986633 263.94885254]
[95.59780884 248.95208740]
[95.28575134 233.95533752]
[94.97369385 218.95858765]
[94.66164398 203.96183777]
[94.34958649 188.96507263]
[94.03752899 173.96832275]
[93.72547150 158.97157288]
[93.41341400 143.97482300]
[75.15233612 136.87493896]
[61.71553421 122.61563873]
[47.69881821 127.95715332]
[37.55854034 140.10150146]
[22.91031456 137.40359497]
[8.89360237 142.74511719]
[-5.12311077 148.08662415]
[-17.77084351 159.37693787]
[-32.12117004 150.34895325]
[-27.41856766 134.06025696]
[-10.46462345 134.06991577]
[3.55208945 128.72839355]
[17.56880188 123.38688660]
[26.70651054 111.62459564]
[42.35730743 113.94044495]
[56.37401962 108.59893036]
[56.04973221 93.25154877]
[60.96362305 78.70848083]
[70.53002930 66.70302582]
[83.60879517 58.66604233]
[80.51047516 43.98951721]
[77.41215515 29.31299019]
[74.31383514 14.63646412]
[67.44636536 19.53227425]
[58.31576538 21.88289642]
[47.78639603 20.96331787]
[36.92135620 16.32203484]
[25.02897453 7.18030071]
[13.13659573 -1.96143365]
[1.24421573 -11.10316753]
[-10.64816380 -20.24490166]
[-26.96739197 -21.86194611]
[-33.47915649 -36.91282654]
[-23.48471451 -49.91448593]
[-7.26548910 -47.49193192]
[-1.50642979 -32.13728333]
[10.38595009 -22.99554825]
[22.27832985 -13.85381317]
[34.17070770 -4.71207905]
[46.06308746 4.42965508]
[53.07144547 1.75889874]
[67.08815765 -3.58261371]
[74.09651184 -6.25337029]
[76.88883972 -20.99117661]
[79.68116760 -35.72898102]
[82.47348785 -50.46678925]
[68.62261963 -56.38011932]
[56.36703110 -65.13309479]
[46.27993774 -76.31632996]
[38.83313370 -89.40674591]
[34.37491608 -103.79209900]
[33.11380768 -118.79955292]
[35.10879135 -133.72718811]
[40.26655579 -147.87680054]
[48.34586716 -160.58659363]
[58.96883774 -171.26210022]
[71.63861084 -179.40402222]
[85.76260376 -184.63153076]
[100.68021393 -186.70014954]
[115.69370270 -185.51309204]
[130.10087585 -181.12590027]
[143.22789001 -173.74377441]
[154.46073914 -163.71197510]
[163.27407837 -151.49972534]
[169.25567627 -137.67819214]
[172.12576294 -122.89385986]
[171.75010681 -107.83819580]
[168.14625549 -93.21539307]
[161.48278809 -79.70938110]
[152.07136536 -67.95186615]
[140.35218811 -58.49276352]
[126.87335205 -51.77449036]
[112.26530457 -48.11128235]
[97.21129608 -47.67446518]
[94.41896820 -32.93665695]
[91.62664795 -18.19885063]
[88.83432007 -3.46104550]
[88.99035645 11.53814316]
[92.08867645 26.21466827]
[95.18700409 40.89119339]
[98.28532410 55.56771851]
[114.59378052 57.99774933]
[128.89552307 66.20330811]
[139.22396851 79.05608368]
[144.15892029 94.78875732]
[159.13864136 95.56860352]
[174.11834717 96.34844971]
[189.09806824 97.12829590]
[196.38124084 83.71493530]
[208.76800537 74.79693604]
[223.79896545 72.14496613]
[238.48971558 76.28557587]
[249.92338562 86.39664459]
[255.82983398 100.47061920]
[255.03630066 115.71309662]
[247.70037842 129.09767151]
[235.27857971 137.96682739]
[220.23728943 140.55958557]
[205.56295776 136.36116028]
[194.16918945 126.20513153]
[188.31822205 112.10800934]
[173.33850098 111.32816315]
[158.35879517 110.54831696]
[143.37907410 109.76847839]
[140.69700623 117.91428375]
[136.50105286 125.39370728]
[130.94732666 131.92852783]
[124.24240875 137.27563477]
[116.63569641 141.23616028]
[108.41017151 143.66276550]
[108.72222900 158.65951538]
[109.03427887 173.65626526]
[109.34633636 188.65301514]
[109.65839386 203.64978027]
[109.97045135 218.64653015]
[110.28250885 233.64328003]
[110.59456635 248.64002991]
[110.90661621 263.63677979]
[111.21867371 278.63354492]
[111.53073120 293.63031006]
[126.11337280 297.57025146]
[138.99458313 305.46020508]
[149.13012695 316.66052246]
[155.69837952 330.26327515]
[158.16687012 345.16574097]
[156.33549500 360.15982056]
[150.35272217 374.03002930]
[140.70352173 385.65197754]
[128.17015076 394.08352661]
[113.76859283 398.64117432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 36]
[23 35]
[25 33]
[26 32]
[27 31]
[40 101]
[41 100]
[42 99]
[43 98]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[63 97]
[64 96]
[65 95]
[66 94]
[105 124]
[106 123]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
