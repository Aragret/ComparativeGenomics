%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCGAAACCACAGGGGGGGGGGCUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGxxxxxxxxxxAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACACCCCCCCCCCUCAUCGAAACCGCA\
) } def
/len { sequence length } bind def

/coor [
[149.41854858 602.67913818]
[135.05628967 598.17236328]
[121.89540100 590.86651611]
[110.47480774 581.06066895]
[101.26216888 569.15637207]
[94.63474274 555.64111328]
[90.86390686 541.06835938]
[90.10409546 526.03479004]
[92.38640594 511.15606689]
[97.61737823 497.04147339]
[105.58281708 484.26898193]
[115.95654297 473.36160278]
[128.31375122 464.76602173]
[142.14842224 458.83416748]
[156.89402771 455.80899048]
[156.89402771 440.80899048]
[156.89402771 425.80899048]
[156.89402771 410.80899048]
[156.89402771 395.80899048]
[156.89402771 380.80899048]
[156.89402771 365.80899048]
[156.89402771 350.80899048]
[156.89402771 335.80899048]
[156.89402771 320.80899048]
[147.60537720 317.75979614]
[139.37287903 312.45275879]
[132.73573303 305.22433472]
[128.13145447 296.53723145]
[125.86705780 286.95068359]
[126.09854889 277.08453369]
[128.82026672 267.57916260]
[133.86459351 259.05383301]
[140.91229248 252.06649780]
[149.51269531 247.07710266]
[146.56817627 232.36894226]
[143.62365723 217.66079712]
[140.67913818 202.95263672]
[137.58946228 188.27429199]
[134.35491943 173.62718201]
[115.90856934 149.73454285]
[108.53726959 136.67070007]
[101.16596222 123.60685730]
[93.79466248 110.54301453]
[82.72716522 100.41827393]
[69.06038666 94.23610687]
[55.39360809 88.05393219]
[41.72683334 81.87176514]
[28.06005478 75.68959808]
[11.80312347 77.84464264]
[2.02421641 64.68010712]
[8.78303528 49.73853683]
[25.12668610 48.39054489]
[34.24222183 62.02282333]
[47.90900040 68.20498657]
[61.57577896 74.38716125]
[75.24255371 80.56932831]
[88.90933228 86.75149536]
[98.24511719 75.01083374]
[89.14311981 63.08801651]
[80.04111481 51.16520309]
[64.39572144 47.61536789]
[57.54637146 33.10792542]
[64.74729919 18.77173805]
[80.47456360 15.60430527]
[92.66355896 26.03540802]
[91.96392822 42.06319809]
[101.06593323 53.98601532]
[110.16793823 65.90883636]
[117.22403717 63.36690521]
[138.39234924 55.74111938]
[123.94690704 51.14709854]
[111.94577789 41.88704300]
[103.83815002 29.07914734]
[100.60305786 14.27002811]
[102.63116455 -0.75204194]
[109.67755890 -14.17307472]
[120.89135742 -24.37241554]
[134.91844177 -30.11844444]
[150.06495667 -30.71729851]
[164.50190735 -26.09666634]
[176.48596191 -16.81451035]
[184.56997681 -3.99169493]
[187.77775574 10.82336140]
[185.72196960 25.84166908]
[178.65086365 39.24969101]
[167.41828918 49.42835236]
[153.38064575 55.14851761]
[146.48985291 84.51772308]
[128.23414612 101.57832336]
[106.85850525 103.17171478]
[114.22980499 116.23555756]
[121.60110474 129.29939270]
[128.97241211 142.36323547]
[143.76135254 144.87060547]
[155.02673340 134.96650696]
[166.29211426 125.06240082]
[177.55747986 115.15829468]
[188.82286072 105.25418854]
[191.28311157 89.40090179]
[205.28260803 81.56546021]
[220.08210754 87.75855255]
[224.32870483 103.22936249]
[214.76478577 116.11000824]
[198.72695923 116.51956177]
[187.46159363 126.42366791]
[176.19621277 136.32777405]
[164.93084717 146.23187256]
[153.66546631 156.13598633]
[149.00202942 170.39265442]
[152.23657227 185.03974915]
[157.16738892 192.79367065]
[155.38729858 200.00811768]
[158.33181763 214.71627808]
[161.27633667 229.42442322]
[164.22085571 244.13258362]
[191.02890015 255.11598206]
[202.69404602 281.33862305]
[217.52964783 283.55331421]
[232.36524963 285.76800537]
[243.95471191 275.26950073]
[259.58291626 274.72842407]
[271.87072754 284.40020752]
[275.01620483 299.71817017]
[267.53414917 313.44961548]
[252.95736694 319.11099243]
[238.16856384 314.02917480]
[230.15054321 300.60360718]
[215.31494141 298.38891602]
[200.47933960 296.17422485]
[197.73684692 302.14166260]
[194.01628113 307.55361938]
[189.42677307 312.25128174]
[184.10295105 316.09689331]
[178.20100403 318.97763062]
[171.89402771 320.80899048]
[171.89402771 335.80899048]
[171.89402771 350.80899048]
[171.89402771 365.80899048]
[171.89402771 380.80899048]
[171.89402771 395.80899048]
[171.89402771 410.80899048]
[171.89402771 425.80899048]
[171.89402771 440.80899048]
[171.89402771 455.80899048]
[186.63964844 458.83416748]
[200.47431946 464.76602173]
[212.83152771 473.36160278]
[223.20524597 484.26898193]
[231.17068481 497.04147339]
[236.40167236 511.15606689]
[238.68397522 526.03479004]
[237.92416382 541.06835938]
[234.15333557 555.64111328]
[227.52589417 569.15637207]
[218.31326294 581.06066895]
[206.89266968 590.86651611]
[193.73178101 598.17236328]
[179.36952209 602.67913818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[34 115]
[35 114]
[36 113]
[37 112]
[38 110]
[39 109]
[40 93]
[41 92]
[42 91]
[43 90]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[58 68]
[59 67]
[60 66]
[70 87]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
