%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAACCCCAGGGGGGGGGGGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUxxxxxxxxxxCAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCCCCCCCCCCCACAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[84.85813904 487.99758911]
[71.63794708 480.72512817]
[60.75114059 470.27813721]
[52.94001007 457.36886597]
[48.73712921 442.87756348]
[48.42905807 427.79220581]
[52.03679657 413.14138794]
[59.31436920 399.92401123]
[69.76557922 389.04122925]
[82.67784119 381.23510742]
[97.17077637 377.03781128]
[96.85871887 362.04104614]
[96.54666138 347.04431152]
[96.23461151 332.04754639]
[95.92255402 317.05078125]
[95.61049652 302.05404663]
[95.29843903 287.05728149]
[94.98638153 272.06054688]
[94.67432404 257.06378174]
[94.36227417 242.06703186]
[94.05021667 227.07026672]
[93.73815918 212.07351685]
[93.42610168 197.07676697]
[93.11404419 182.08001709]
[92.80198669 167.08325195]
[84.27196503 158.44924927]
[83.92671204 145.91531372]
[92.50000000 136.22239685]
[92.50000000 121.22239685]
[78.72697449 107.35515594]
[80.99338531 87.94227600]
[71.72843933 76.14563751]
[62.46348572 64.34899902]
[50.38349915 55.45664597]
[36.36678696 50.11513519]
[22.35007286 44.77362061]
[8.33335972 39.43210983]
[-5.68335390 34.09059906]
[-19.85991096 29.18904686]
[-34.18251038 24.73223114]
[-43.37288284 25.16687584]
[-48.75497055 20.03084755]
[-62.98174667 15.27703381]
[-78.93351746 19.08139420]
[-90.00598907 6.98460007]
[-84.80875397 -8.56920338]
[-68.68828583 -11.57959652]
[-58.22793198 1.05025434]
[-44.00115585 5.80406904]
[-29.72569275 10.40963364]
[-15.40309620 14.86644936]
[-12.08223629 13.51021290]
[-7.92878866 13.73504925]
[-3.71186280 15.91906357]
[-0.34184116 20.07388496]
[13.67487144 25.41539764]
[27.69158554 30.75691032]
[41.70829773 36.09842300]
[55.72500992 41.43993378]
[46.56647873 29.56048775]
[40.22338486 15.96765137]
[37.00196075 1.31765425]
[37.05772400 -13.68224239]
[40.38798523 -28.30788231]
[46.83196640 -41.85317993]
[56.07857132 -53.66420364]
[67.68139648 -63.17074966]
[81.08029175 -69.91387177]
[95.62839508 -73.56801605]
[110.62335205 -73.95678711]
[125.34126282 -71.06140137]
[139.07156372 -65.02165222]
[151.15141296 -56.12911606]
[160.99763489 -44.81310272]
[168.13484192 -31.61992073]
[172.21850586 -17.18649673]
[173.05146790 -2.20964193]
[170.59350586 12.58760262]
[164.96330261 26.49086380]
[156.43264771 38.82892990]
[145.41337585 49.00615692]
[132.43750000 56.53120804]
[118.13142395 61.04079819]
[103.18582916 62.31721497]
[88.32225037 60.29883575]
[74.26012421 55.08404922]
[83.52507782 66.88069153]
[92.79002380 78.67733002]
[106.01392365 78.30961609]
[117.16046143 85.43433380]
[131.17716980 80.09281921]
[145.19387817 74.75130463]
[159.21060181 69.40979004]
[169.35087585 57.26543808]
[183.99909973 59.96334839]
[198.01582336 54.62183380]
[197.76322937 39.46558380]
[202.71255493 25.13798523]
[212.26612854 13.36917305]
[225.27032471 5.58028460]
[240.15480042 2.71186757]
[255.12222290 5.11029673]
[268.36517334 12.48595047]
[278.28448486 23.94818306]
[283.68240356 38.11287308]
[283.90704346 53.26956558]
[278.93133545 67.58801270]
[269.35607910 79.33920288]
[256.33755493 87.10411072]
[241.44781494 89.94509888]
[226.48484802 87.51908875]
[213.25550842 80.11904144]
[203.35733032 68.63854980]
[189.34062195 73.98006439]
[180.20291138 85.74235535]
[164.55210876 83.42650604]
[150.53540039 88.76802063]
[136.51869202 94.10952759]
[122.50196838 99.45104218]
[120.78317261 108.64291382]
[115.47724915 116.34303284]
[107.50000000 121.22239685]
[107.50000000 136.22239685]
[117.08272552 151.91160583]
[107.79874420 166.77119446]
[108.11080170 181.76795959]
[108.42285919 196.76470947]
[108.73490906 211.76145935]
[109.04696655 226.75820923]
[109.35902405 241.75497437]
[109.67108154 256.75170898]
[109.98313904 271.74847412]
[110.29519653 286.74523926]
[110.60724640 301.74197388]
[110.91930389 316.73873901]
[111.23136139 331.73550415]
[111.54341888 346.73223877]
[111.85547638 361.72900391]
[112.16753387 376.72573853]
[126.82252502 380.31652832]
[140.04832458 387.57876587]
[150.94320679 398.01736450]
[158.76429749 410.92059326]
[162.97836304 425.40866089]
[163.29809570 440.49374390]
[159.70166016 455.14733887]
[152.43429565 468.37036133]
[141.99150085 479.26119995]
[129.08526611 487.07730103]
[114.59557343 491.28579712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[25 125]
[28 123]
[29 122]
[31 88]
[32 87]
[33 86]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 51]
[40 50]
[42 49]
[43 48]
[90 119]
[91 118]
[92 117]
[93 116]
[95 114]
[96 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
