%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACAAUGGGGGGGGGGCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAxxxxxxxxxxCCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCCCCCCCCCCCAAAAU\
) } def
/len { sequence length } bind def

/coor [
[85.19730377 348.55923462]
[71.35136414 342.54321289]
[59.64270401 333.01379395]
[50.94018173 320.67813110]
[45.88957977 306.45159912]
[44.86568832 291.38992310]
[47.94448853 276.61077881]
[54.89751053 263.21084595]
[65.20879364 252.18450928]
[78.11317444 244.35000610]
[92.65306091 240.28869629]
[92.65306091 225.28869629]
[92.65306091 210.28869629]
[92.65306091 195.28869629]
[92.65306091 180.28869629]
[92.65306091 165.28869629]
[92.65306091 150.28869629]
[92.65306091 135.28869629]
[92.65306091 120.28868866]
[92.65306091 105.28868866]
[90.28324890 102.15493774]
[89.33691406 97.97760010]
[90.25396729 93.43037415]
[93.15031433 89.36036682]
[94.08593750 74.38957214]
[95.02156830 59.41878128]
[80.13098907 57.57177734]
[65.38070679 54.82041550]
[50.82559204 51.17493057]
[36.51979446 46.64888763]
[22.51653481 41.25912476]
[8.86790276 35.02568817]
[-4.37532473 27.97176933]
[-17.16388321 20.12360954]
[-29.45019913 11.51040268]
[-41.18856430 2.16419196]
[-52.33531189 -7.88025331]
[-62.84897232 -18.58556747]
[-72.69043732 -29.91192627]
[-81.82309723 -41.81719589]
[-90.21297455 -54.25708389]
[-97.82885742 -67.18531036]
[-104.64241791 -80.55379486]
[-110.62830353 -94.31278992]
[-115.76425171 -108.41111755]
[-120.03115845 -122.79633331]
[-123.41313934 -137.41491699]
[-125.89762115 -152.21249390]
[-127.47536469 -167.13400269]
[-128.14048767 -182.12396240]
[-127.89053345 -197.12657166]
[-126.72641754 -212.08602905]
[-124.65247345 -226.94671631]
[-121.67642212 -241.65330505]
[-117.80932617 -256.15112305]
[-113.06558228 -270.38619995]
[-107.46282959 -284.30560303]
[-101.02191162 -297.85757446]
[-93.76679230 -310.99163818]
[-85.72446442 -323.65899658]
[-76.92483521 -335.81250000]
[-67.40064240 -347.40692139]
[-57.18732834 -358.39913940]
[-46.32287598 -368.74829102]
[-34.84770966 -378.41583252]
[-22.80451012 -387.36581421]
[-10.23808479 -395.56494141]
[2.80482006 -402.98272705]
[16.27568436 -409.59155273]
[30.12439346 -415.36685181]
[44.29942703 -420.28713989]
[58.74805832 -424.33410645]
[73.41653442 -427.49270630]
[88.25028992 -429.75115967]
[103.19413757 -431.10107422]
[118.19248199 -431.53747559]
[133.18952942 -431.05868530]
[148.12950134 -429.66650391]
[162.95681763 -427.36608887]
[177.61630249 -424.16604614]
[192.05342102 -420.07824707]
[206.21449280 -415.11791992]
[220.04681396 -409.30346680]
[233.49894714 -402.65658569]
[246.52082825 -395.20193481]
[259.06402588 -386.96731567]
[271.08184814 -377.98330688]
[282.52963257 -368.28335571]
[293.36477661 -357.90353394]
[303.54699707 -346.88247681]
[313.03836060 -335.26116943]
[321.80358887 -323.08285522]
[329.81005859 -310.39282227]
[337.02801514 -297.23828125]
[343.43060303 -283.66815186]
[348.99395752 -269.73297119]
[353.69744873 -255.48451233]
[357.52352905 -240.97583008]
[360.45797729 -226.26087952]
[362.48989868 -211.39439392]
[363.61169434 -196.43170166]
[363.81924438 -181.42843628]
[363.11172485 -166.44042969]
[361.49182129 -151.52343750]
[358.96548462 -136.73295593]
[355.54220581 -122.12398529]
[351.23464966 -107.75089264]
[346.05883789 -93.66714478]
[340.03408813 -79.92512512]
[333.18273926 -66.57596588]
[325.53033447 -53.66931915]
[317.10531616 -41.25320435]
[307.93902588 -29.37380600]
[298.06558228 -18.07531929]
[287.52169800 -7.39977598]
[276.34658813 2.61311197]
[264.58184814 11.92609406]
[252.27122498 20.50452614]
[239.46052551 28.31649590]
[226.19740295 35.33294296]
[212.53120422 41.52775955]
[198.51275635 46.87791061]
[184.19422913 51.36348343]
[169.62886047 54.96779633]
[154.87084961 57.67744064]
[139.97511292 59.48233414]
[124.99703979 60.37576675]
[109.99236298 60.35440826]
[109.05673218 75.32520294]
[108.12110138 90.29598999]
[107.65306091 105.28868866]
[107.65306091 120.28868866]
[107.65306091 135.28869629]
[107.65306091 150.28869629]
[107.65306091 165.28869629]
[107.65306091 180.28869629]
[107.65306091 195.28869629]
[107.65306091 210.28869629]
[107.65306091 225.28869629]
[107.65306091 240.28869629]
[122.19294739 244.35000610]
[135.09733582 252.18450928]
[145.40861511 263.21084595]
[152.36163330 276.61077881]
[155.44042969 291.38992310]
[154.41654968 306.45159912]
[149.36593628 320.67813110]
[140.66342163 333.01379395]
[128.95475769 342.54321289]
[115.10881805 348.55923462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[26 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
