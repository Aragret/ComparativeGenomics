%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUACGGUGGGGGGGGGGCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUxxxxxxxxxxUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAACCCCCCCCCCAUACUACCGU\
) } def
/len { sequence length } bind def

/coor [
[41.89428329 321.04617310]
[33.27909088 308.62564087]
[28.70925140 294.21704102]
[28.59111404 279.10156250]
[32.93518448 264.62329102]
[41.35518646 252.06961060]
[53.10242462 242.55677795]
[67.13233948 236.93069458]
[65.88545990 221.98260498]
[62.17121124 215.53666687]
[64.77144623 206.71110535]
[63.83581924 191.74031067]
[62.90019226 176.76951599]
[61.96456146 161.79873657]
[61.02893448 146.82794189]
[60.09330750 131.85714722]
[59.15767670 116.88636017]
[48.71786499 106.11554718]
[33.78355789 104.71324158]
[18.84924889 103.31094360]
[3.91494203 101.90863800]
[-11.01936531 100.50633240]
[-2.66277432 112.96295166]
[-5.37282562 127.71611023]
[-17.61087608 136.38963318]
[-32.42872620 134.05911255]
[-41.41347885 122.04769135]
[-39.46400452 107.17491150]
[-27.68564606 97.88442230]
[-42.32914734 94.63359833]
[-56.97264862 91.38277435]
[-71.61614990 88.13194275]
[-86.25965118 84.88111877]
[-95.38208771 86.07820892]
[-101.17247772 81.40734100]
[-115.74518585 77.85258484]
[-130.31788635 74.29782104]
[-144.89059448 70.74305725]
[-159.46328735 67.18829346]
[-174.03599548 63.63353348]
[-187.40946960 72.05527496]
[-202.80229187 68.47245789]
[-211.08216858 55.01068878]
[-207.33680725 39.65660858]
[-193.78825378 31.51951790]
[-178.47462463 35.42700577]
[-170.48123169 49.06083298]
[-155.90852356 52.61559296]
[-141.33583069 56.17035675]
[-126.76312256 59.72511673]
[-112.19042206 63.27988052]
[-97.61772156 66.83464050]
[-83.00882721 70.23761749]
[-68.36532593 73.48844147]
[-53.72182465 76.73927307]
[-39.07832336 79.99009705]
[-24.43482018 83.24092102]
[-9.61706161 85.57202911]
[5.31724548 86.97432709]
[20.25155258 88.37663269]
[35.18585968 89.77893829]
[50.12016678 91.18124390]
[61.21148300 81.08258820]
[61.21148300 66.08258820]
[61.21148300 51.08259201]
[46.71396637 46.84011459]
[33.99968719 38.68390274]
[24.09933662 27.27514267]
[17.81549454 13.53869438]
[15.65756321 -1.41189110]
[17.80047417 -16.36463737]
[24.07051277 -30.10739136]
[33.95939636 -41.52608871]
[46.66547394 -49.69507217]
[61.15872574 -53.95211029]
[76.26424408 -53.95211029]
[90.75749207 -49.69507217]
[103.46356964 -41.52608871]
[113.35245514 -30.10739136]
[119.62248993 -16.36463737]
[121.76540375 -1.41189110]
[119.60747528 13.53869438]
[113.32363129 27.27514267]
[103.42327881 38.68390274]
[90.70899963 46.84011459]
[76.21148682 51.08259201]
[76.21148682 66.08258820]
[76.21148682 81.08258820]
[94.23983002 66.34420776]
[120.12885284 67.89077759]
[132.56829834 59.50863266]
[145.00773621 51.12649155]
[157.44717407 42.74434662]
[169.88661194 34.36220551]
[169.44828796 18.94106865]
[177.43638611 5.74282265]
[191.30195618 -1.02102184]
[206.62052917 0.80785346]
[218.50401306 10.64586067]
[223.16043091 25.35372925]
[219.10392761 40.23822784]
[207.62892151 50.54977036]
[192.39706421 52.99798203]
[178.26875305 46.80164337]
[165.82931519 55.18378830]
[153.38987732 63.56592941]
[140.95043945 71.94807434]
[128.51098633 80.33021545]
[129.67654419 87.73909760]
[143.67475891 93.12889099]
[132.00764465 102.55685425]
[133.17320251 109.96573639]
[147.58541870 114.12361908]
[161.99763489 118.28150940]
[172.54220581 107.18779755]
[187.03820801 102.27609253]
[202.15452576 104.67506409]
[214.41758728 113.83345795]
[221.00939941 127.64673615]
[220.41520691 142.94070435]
[212.77157593 156.20092773]
[199.83494568 164.38029480]
[184.57806396 165.59925842]
[170.50683594 159.57769775]
[160.85473633 147.69934082]
[157.83975220 132.69372559]
[143.42753601 128.53584290]
[129.01531982 124.37795258]
[108.47966003 134.36500549]
[87.54885101 130.44705200]
[74.12847137 115.95072937]
[75.06409454 130.92152405]
[75.99972534 145.89231873]
[76.93535614 160.86309814]
[77.87097931 175.83389282]
[78.80661011 190.80468750]
[79.74224091 205.77548218]
[80.83354950 220.73573303]
[82.08042145 235.68380737]
[96.84854889 238.90776062]
[110.00948334 246.34289551]
[120.39295197 257.32812500]
[127.07566833 270.88659668]
[129.46340942 285.81277466]
[127.34386444 300.77935791]
[120.90550232 314.45556641]
[110.72080994 325.62533569]
[97.69540405 333.29541016]
[82.98749542 336.78381348]
[67.90490723 335.78033447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 139]
[9 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[63 88]
[64 87]
[65 86]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
[112 128]
[113 127]
[114 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
