%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAAAAAGGGGGGGGGGGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGxxxxxxxxxxAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACCCCCCCCCCCUACAAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[85.20379639 368.83666992]
[72.33052063 360.93380737]
[62.20623016 349.72329712]
[55.65164566 336.11395264]
[53.19812393 321.20904541]
[55.04456329 306.21679688]
[61.04127502 292.35260010]
[70.70213318 280.74032593]
[83.24398041 272.32138062]
[97.65010834 267.77822876]
[97.33805084 252.78146362]
[97.02599335 237.78471375]
[96.71393585 222.78796387]
[96.40187836 207.79121399]
[96.08982086 192.79444885]
[95.77777100 177.79769897]
[95.46571350 162.80094910]
[95.15365601 147.80419922]
[94.84159851 132.80743408]
[94.52954102 117.81068420]
[86.06132507 113.41873932]
[80.60997772 105.15801239]
[65.67567444 103.75570679]
[50.74136353 102.35340881]
[35.80705643 100.95110321]
[20.85897064 99.70422363]
[5.89872169 98.61291504]
[1.93502843 100.72256470]
[-2.08624434 101.35535431]
[-5.68173218 100.68129730]
[-8.47668457 99.01329803]
[-10.24297428 96.75773621]
[-25.06073189 94.42663574]
[-34.09073639 96.19040680]
[-40.16120148 91.88980865]
[-54.92725372 89.25094604]
[-69.69331360 86.61208344]
[-84.45936584 83.97322083]
[-96.34487152 94.13534546]
[-111.98217773 94.22843170]
[-123.98782349 84.20853424]
[-126.69312286 68.80673218]
[-118.82070160 55.29529572]
[-104.08767700 50.05390167]
[-89.45054626 55.55738449]
[-81.82050323 69.20716095]
[-67.05444336 71.84602356]
[-52.28839111 74.48489380]
[-37.52233505 77.12375641]
[-22.72962761 79.60887146]
[-7.91187000 81.93997955]
[6.99003220 83.65266418]
[21.95028114 84.74398041]
[28.89511490 82.07659912]
[37.20936203 86.01679230]
[52.14366913 87.41909790]
[67.07798004 88.82140350]
[82.01228333 90.22370148]
[93.31128693 80.35797882]
[93.93526459 65.37096405]
[79.27458954 61.99765396]
[65.48348236 55.98766327]
[53.03165817 47.54570389]
[42.34322357 36.95929337]
[33.78222656 24.58900833]
[27.64024544 10.85617447]
[24.12647820 -3.77147317]
[23.36060143 -18.79572296]
[25.36870003 -33.70485306]
[30.08237839 -47.99106598]
[37.34109116 -61.16777802]
[46.89760971 -72.78619385]
[58.42644119 -82.45059967]
[71.53491974 -89.83181763]
[85.77657318 -94.67845917]
[100.66633606 -96.82544708]
[115.69707489 -96.19964600]
[130.35684204 -92.82238007]
[144.14633179 -86.80867767]
[156.59587097 -78.36335754]
[167.28146362 -67.77407074]
[175.83912659 -55.40147781]
[181.97740173 -41.66698837]
[185.48722839 -27.03839493]
[186.24905396 -12.01393890]
[184.23693848 2.89465046]
[179.51940918 17.17959213]
[172.25714111 30.35434723]
[162.69749451 41.97018814]
[151.16604614 51.63148117]
[138.05558777 59.00917053]
[123.81262207 63.85197067]
[108.92227936 65.99494171]
[108.29830170 80.98195648]
[118.95993042 91.53324890]
[133.93965149 90.75340271]
[148.91935730 89.97355652]
[163.89015198 89.03793335]
[178.85040283 87.94661713]
[193.81065369 86.85530853]
[208.77090454 85.76399994]
[214.68859863 75.36429596]
[224.80445862 69.20164490]
[236.51959229 68.72274780]
[246.88970947 73.93125153]
[253.36503601 83.41600800]
[268.35772705 82.94795990]
[283.35043335 82.47991943]
[291.96328735 69.57263184]
[306.52960205 64.22452545]
[321.44830322 68.49205017]
[330.98287964 80.73426819]
[331.46704102 96.24378967]
[322.71466064 109.05688477]
[308.09118652 114.24665833]
[293.21966553 109.81754303]
[283.81848145 97.47261810]
[268.82577515 97.94065857]
[253.83308411 98.40869904]
[242.18840027 112.47280121]
[223.64859009 113.64456940]
[209.86221313 100.72425079]
[194.90196228 101.81555939]
[179.94171143 102.90686798]
[164.98146057 103.99817657]
[158.49723816 107.64517212]
[149.69920349 104.95326996]
[134.71949768 105.73311615]
[119.73977661 106.51296234]
[109.52629852 117.49862671]
[109.83835602 132.49537659]
[110.15040588 147.49214172]
[110.46246338 162.48889160]
[110.77452087 177.48564148]
[111.08657837 192.48239136]
[111.39863586 207.47915649]
[111.71069336 222.47590637]
[112.02274323 237.47265625]
[112.33480072 252.46940613]
[112.64685822 267.46615601]
[127.22949982 271.40612793]
[140.11070251 279.29605103]
[150.24626160 290.49639893]
[156.81451416 304.09915161]
[159.28300476 319.00158691]
[157.45162964 333.99569702]
[151.46884155 347.86590576]
[141.81965637 359.48785400]
[129.28627014 367.91940308]
[114.88471985 372.47705078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 58]
[23 57]
[24 56]
[25 55]
[26 53]
[27 52]
[32 51]
[33 50]
[35 49]
[36 48]
[37 47]
[38 46]
[59 94]
[60 93]
[95 129]
[96 128]
[97 127]
[98 125]
[99 124]
[100 123]
[101 122]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
