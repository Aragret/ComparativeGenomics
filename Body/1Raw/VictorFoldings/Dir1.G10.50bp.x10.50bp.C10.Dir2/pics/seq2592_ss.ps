%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUACAAUCAGGGGGGGGGGACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAxxxxxxxxxxUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACCCCCCCCCCCAUCUACCAUCA\
) } def
/len { sequence length } bind def

/coor [
[82.82246399 369.68441772]
[69.33358002 362.95288086]
[57.84807968 353.18832397]
[49.03371048 340.95843506]
[43.40293121 326.97424316]
[41.28310013 312.04876709]
[42.79747009 297.04974365]
[47.85799408 282.84924316]
[56.17045975 270.27282715]
[67.25158691 260.05166626]
[80.45714569 252.78002930]
[95.01937103 248.88066101]
[94.71138763 233.88381958]
[94.40341187 218.88697815]
[94.09543610 203.89015198]
[93.78746033 188.89331055]
[93.47947693 173.89646912]
[93.17150116 158.89962769]
[92.86352539 143.90278625]
[92.55554962 128.90596008]
[92.24757385 113.90911865]
[86.32546997 127.69058228]
[73.68299103 135.76324463]
[58.68904114 135.33741760]
[46.52510071 126.56024933]
[41.39470291 112.46489716]
[45.07076645 97.92231750]
[56.28294754 87.95803070]
[71.15662384 86.01541901]
[84.55211639 92.76603699]
[75.14826202 81.07982635]
[65.74440002 69.39361572]
[56.34054565 57.70740891]
[58.99053955 72.47147369]
[61.23773575 87.30218506]
[57.21372223 101.75234985]
[47.62445450 113.28690338]
[34.15222168 119.88227844]
[19.16053009 120.38142395]
[5.27944279 114.69675446]
[-5.05581093 103.82557678]
[-10.03206539 89.67507172]
[-8.77631187 74.72772217]
[-1.50885344 61.60583496]
[10.49556446 52.61133194]
[25.33423233 54.80540848]
[13.36397266 45.76588821]
[1.39371455 36.72636795]
[-10.57654381 27.68684959]
[-25.01787186 33.11378098]
[-40.09589386 29.84929657]
[-50.99926376 18.93508148]
[-54.24875641 3.85382438]
[-48.80747604 -10.58210278]
[-36.41170883 -19.76624680]
[-21.01690102 -20.76798248]
[-7.53548098 -13.26765728]
[-0.26932043 0.34140083]
[-1.53702426 15.71659088]
[10.43323421 24.75611115]
[22.40349197 33.79563141]
[34.37375259 42.83514786]
[47.51538086 35.60344696]
[46.28477097 20.65401268]
[31.48806572 17.61522484]
[18.14750481 10.52959728]
[7.34454679 -0.02846889]
[-0.04506194 -13.20307922]
[-3.42227793 -27.92622757]
[-2.51332593 -43.00437546]
[2.60810971 -57.21519852]
[11.52685738 -69.40670013]
[23.51991272 -78.59056091]
[37.61505508 -84.02228546]
[52.66965103 -85.26155090]
[67.46329498 -82.20790100]
[80.79673004 -75.10887909]
[91.58908081 -64.53996277]
[98.96544647 -51.35793686]
[102.32787323 -36.63140488]
[101.40377045 -21.55417824]
[96.26805878 -7.34850407]
[87.33707428 4.83402824]
[75.33479309 14.00583553]
[61.23420334 19.42340088]
[62.46481705 34.37283325]
[68.02675629 48.30355072]
[77.43061066 59.98975754]
[86.83446503 71.67596436]
[96.23832703 83.36217499]
[110.38564301 88.34749603]
[125.03836823 85.13850403]
[126.88521576 66.96858215]
[134.74877930 50.50977325]
[147.69163513 37.68859863]
[164.18281555 30.00003242]
[182.27893066 28.33322144]
[199.85311890 32.86866760]
[214.84510803 43.05882263]
[225.50265503 57.69415283]
[239.74934387 53.00035095]
[253.99604797 48.30654907]
[268.24273682 43.61275101]
[282.48944092 38.91894913]
[290.96881104 25.29985428]
[306.91952515 23.58112144]
[318.10556030 35.08121109]
[315.94595337 50.97824478]
[302.09735107 59.07737350]
[287.18322754 53.16564178]
[272.93652344 57.85943985]
[258.68984985 62.55324173]
[244.44314575 67.24703979]
[230.19645691 71.94084167]
[230.97879028 83.91738129]
[229.03538513 95.77044678]
[224.46249390 106.88724518]
[217.49237061 116.69209290]
[208.48158264 124.67621613]
[197.89268494 130.42416382]
[186.27050781 133.63543701]
[174.21415710 134.14013672]
[162.34603882 131.90805054]
[151.27984619 127.05032349]
[141.58872986 119.81398010]
[133.77568054 110.56938171]
[128.24736023 99.79122925]
[113.59463501 103.00022125]
[112.61629486 106.97886658]
[110.46186066 110.62908173]
[107.24440765 113.60114288]
[107.55238342 128.59797668]
[107.86036682 143.59481812]
[108.16834259 158.59165955]
[108.47631836 173.58848572]
[108.78429413 188.58532715]
[109.09227753 203.58216858]
[109.40025330 218.57901001]
[109.70822906 233.57585144]
[110.01620483 248.57267761]
[124.72624207 251.87091064]
[138.21920776 258.59426880]
[149.71061707 268.35186768]
[158.53239441 280.57641602]
[164.17166138 294.55718994]
[166.30053711 309.48138428]
[164.79525757 324.48129272]
[159.74334717 338.68487549]
[151.43850708 351.26632690]
[140.36357117 361.49420166]
[127.16242981 368.77383423]
[112.60257721 372.68203735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[30 90]
[31 89]
[32 88]
[33 87]
[46 62]
[47 61]
[48 60]
[49 59]
[63 86]
[64 85]
[91 128]
[92 127]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
