%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCCGGGGGGGGGGAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACxxxxxxxxxxAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCCCCCCCCCCCACCCUAACC\
) } def
/len { sequence length } bind def

/coor [
[102.16330719 685.38104248]
[88.94311523 678.10858154]
[78.05630493 667.66156006]
[70.24517822 654.75231934]
[66.04229736 640.26098633]
[65.73422241 625.17565918]
[69.34196472 610.52484131]
[76.61953735 597.30743408]
[87.07074738 586.42468262]
[99.98300934 578.61853027]
[114.47594452 574.42126465]
[114.16388702 559.42449951]
[113.85182953 544.42773438]
[113.53977966 529.43096924]
[113.22772217 514.43420410]
[112.91566467 499.43746948]
[112.60360718 484.44070435]
[112.29154968 469.44396973]
[111.97949219 454.44720459]
[111.66744232 439.45046997]
[96.95195770 436.66650391]
[83.13155365 430.88140869]
[70.81125641 422.34579468]
[60.53098679 411.43078613]
[52.74186707 398.61178589]
[47.78644943 384.44787598]
[45.88362885 369.55737305]
[47.11899185 354.59082031]
[51.44096756 340.20263672]
[58.66296387 327.02243042]
[68.47144318 315.62750244]
[80.43949890 306.51748657]
[94.04548645 300.09252930]
[108.69571686 296.63571167]
[108.38365936 281.63894653]
[93.36974335 269.31201172]
[92.14126587 249.62171936]
[105.92274475 235.08496094]
[104.67587280 220.13688660]
[103.42899323 205.18879700]
[102.18212128 190.24070740]
[100.93524933 175.29261780]
[99.68836975 160.34452820]
[88.18680573 150.95040894]
[86.70935822 135.80868530]
[96.64076996 123.80847931]
[95.39389038 108.86038971]
[77.78315735 111.19995880]
[60.71801758 93.76079559]
[51.45306778 81.96414948]
[42.18811798 70.16751099]
[32.92316818 58.37087250]
[18.29493904 62.50406647]
[3.19909668 60.71969223]
[-10.06235027 53.28985977]
[-19.46712875 41.34755325]
[-23.58107567 26.71389961]
[-21.77684593 11.62041759]
[-14.32957172 -1.63124430]
[-2.37490797 -11.02030373]
[12.26414680 -15.11499786]
[27.35524178 -13.29091549]
[40.59709549 -5.82621574]
[49.97042084 6.14078903]
[54.04585648 20.78521729]
[52.20192337 35.87390137]
[44.71981049 49.10592270]
[53.98476028 60.90256500]
[63.24971008 72.69920349]
[72.51465607 84.49584198]
[80.01425171 84.41782379]
[77.53910828 69.62344360]
[75.06395721 54.82906723]
[66.47622681 42.53065491]
[68.17890167 27.62760544]
[79.31929779 17.58312798]
[94.31848907 17.42733765]
[105.66511536 27.23825264]
[107.67696381 42.10272217]
[99.34710693 54.57645035]
[97.18027496 69.41912079]
[95.01344299 84.26178741]
[102.51303101 84.18376923]
[111.53056335 72.19693756]
[120.54809570 60.21010590]
[129.56562805 48.22327042]
[138.58316040 36.23643875]
[134.87710571 21.04436111]
[141.84971619 7.04732895]
[156.20869446 0.85431439]
[171.17420959 5.38946962]
[179.67997742 18.51143265]
[177.70983887 34.02441406]
[166.19404602 44.60365677]
[150.56999207 45.25397110]
[141.55245972 57.24080276]
[132.53492737 69.22763824]
[123.51739502 81.21446991]
[114.49987030 93.20130157]
[110.34197998 107.61351776]
[111.58885193 122.56159973]
[123.37114716 132.75059509]
[124.42271423 147.92784119]
[114.63645935 159.09765625]
[115.88333130 174.04574585]
[117.13021088 188.99383545]
[118.37708282 203.94192505]
[119.62395477 218.88999939]
[120.87083435 233.83808899]
[130.57595825 238.53396606]
[137.37742615 246.79460144]
[140.08174133 257.06375122]
[138.25909424 267.44308472]
[132.31016541 276.04306030]
[123.38040924 281.32690430]
[123.69246674 296.32363892]
[138.47381592 299.16806030]
[152.33528137 305.02145386]
[164.67195129 313.62573242]
[174.94595337 324.60278320]
[182.70997620 337.47116089]
[187.62673950 351.66711426]
[189.48361206 366.56930542]
[188.20185852 381.52609253]
[183.83993530 395.88388062]
[176.59080505 409.01577759]
[166.77348328 420.34899902]
[154.81892395 429.38970947]
[141.25112915 435.74472046]
[126.66419220 439.13839722]
[126.97624969 454.13516235]
[127.28830719 469.13189697]
[127.60036469 484.12866211]
[127.91241455 499.12542725]
[128.22447205 514.12219238]
[128.53652954 529.11889648]
[128.84858704 544.11566162]
[129.16064453 559.11242676]
[129.47270203 574.10919189]
[144.12768555 577.69995117]
[157.35350037 584.96221924]
[168.24836731 595.40081787]
[176.06945801 608.30401611]
[180.28353882 622.79205322]
[180.60325623 637.87719727]
[177.00683594 652.53076172]
[169.73947144 665.75378418]
[159.29666138 676.64465332]
[146.39044189 684.46075439]
[131.90074158 688.66918945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[34 116]
[35 115]
[38 109]
[39 108]
[40 107]
[41 106]
[42 105]
[43 104]
[46 101]
[47 100]
[49 70]
[50 69]
[51 68]
[52 67]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
