%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAAACUGGGGGGGGGGCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAxxxxxxxxxxUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCCCCCCCCCCCAUAAACCU\
) } def
/len { sequence length } bind def

/coor [
[56.85662460 376.97012329]
[44.29840088 368.61895752]
[34.21217728 357.40652466]
[27.23198509 344.03759766]
[23.79660034 329.35263062]
[24.12197685 314.27465820]
[28.18766212 299.75152588]
[35.73808289 286.69619751]
[46.29861069 275.92929077]
[59.20540619 268.12765503]
[73.64713287 263.78170776]
[73.02315521 248.79469299]
[72.39917755 233.80767822]
[71.77519989 218.82066345]
[71.15122223 203.83364868]
[70.52724457 188.84663391]
[69.90326691 173.85961914]
[69.27928925 158.87260437]
[76.81745148 64.23875427]
[65.31565094 54.61022949]
[53.81384659 44.98170471]
[42.31204605 35.35317993]
[30.81024170 25.72465134]
[19.30843735 16.09612656]
[6.37282944 16.44811249]
[-3.01641703 8.13781548]
[-4.16141939 -3.94507694]
[-15.46042442 -13.81079960]
[-26.75942802 -23.67652321]
[-39.28538895 -31.92881203]
[-52.80958176 -38.41697693]
[-66.33377075 -44.90514374]
[-79.85796356 -51.39330673]
[-88.88592529 -39.35245514]
[-100.08967590 -29.30446053]
[-113.03857422 -21.63554192]
[-127.23488617 -16.64046860]
[-142.13296509 -14.51124096]
[-157.16015625 -15.32970047]
[-171.73884583 -19.06438637]
[-185.30868530 -25.57174873]
[-197.34806824 -34.60166168]
[-207.39425659 -45.80703735]
[-215.06108093 -58.75717545]
[-220.05384827 -72.95429993]
[-222.18066406 -87.85272217]
[-221.35977173 -102.87977600]
[-217.62272644 -117.45786285]
[-211.11317444 -131.02664185]
[-202.08131409 -143.06457520]
[-190.87431335 -153.10894775]
[-177.92292786 -160.77366638]
[-163.72499084 -165.76414490]
[-148.82623291 -167.88854980]
[-133.79931641 -167.06523132]
[-119.22182465 -163.32582092]
[-105.65409851 -156.81407166]
[-93.61763000 -147.78025818]
[-83.57508087 -136.57164001]
[-75.91244507 -123.61901855]
[-70.92427063 -109.42027283]
[-68.80227661 -94.52116394]
[-69.62802887 -79.49437714]
[-73.36979675 -64.91749573]
[-59.84560394 -58.42933273]
[-46.32141495 -51.94116592]
[-32.79722595 -45.45300293]
[-40.25433350 -58.46805191]
[-41.88560867 -73.37908936]
[-37.41891861 -87.69860840]
[-27.59941101 -99.03780365]
[-14.06519794 -105.50502777]
[0.92591095 -106.02142334]
[14.87306118 -100.50082397]
[25.44955635 -89.86419678]
[30.89099884 -75.88597870]
[30.28963280 -60.89803696]
[23.74578285 -47.40070343]
[12.35110664 -37.64563370]
[-1.99350667 -33.26019669]
[-16.89370537 -34.97552872]
[-5.59470081 -25.10980415]
[5.70430374 -15.24408150]
[23.05785179 -12.82451534]
[28.93696404 4.59432268]
[40.43876648 14.22284889]
[51.94057083 23.85137558]
[63.44237518 33.47990036]
[74.94417572 43.10842896]
[86.44598389 52.73695374]
[101.43299866 53.36093140]
[113.69536591 44.72181320]
[125.95773315 36.08269882]
[138.22010803 27.44358253]
[150.48246765 18.80446625]
[162.74484253 10.16535091]
[169.13764954 -4.93644047]
[185.44360352 -6.68220043]
[194.88854980 6.72395849]
[187.75631714 21.49092865]
[171.38395691 22.42771912]
[159.12158203 31.06683540]
[146.85922241 39.70595169]
[134.59684753 48.34506607]
[122.33448029 56.98418427]
[110.07211304 65.62329865]
[111.84949493 72.90965271]
[124.61057281 65.02581787]
[136.05181885 74.72623444]
[130.36154175 88.60501862]
[115.40425873 87.48235321]
[117.18164062 94.76870728]
[132.04467773 96.79103851]
[146.90773010 98.81337738]
[161.87246704 92.10601044]
[175.00328064 101.93016052]
[172.79229736 118.17958069]
[157.51400757 124.13825989]
[144.88539124 113.67642212]
[130.02235413 111.65408325]
[115.15930176 109.63175201]
[110.11032867 123.75718689]
[105.06179047 137.88136292]
[117.83914948 145.73878479]
[134.23806763 145.65251160]
[142.27749634 159.94586182]
[133.68716431 173.91503906]
[117.30405426 173.18977356]
[109.98171997 158.51614380]
[97.20436096 150.65872192]
[84.26631165 158.24862671]
[84.89028931 173.23564148]
[85.51425934 188.22265625]
[86.13823700 203.20967102]
[86.76221466 218.19668579]
[87.38619232 233.18370056]
[88.01016998 248.17071533]
[88.63414764 263.15774536]
[103.38715363 266.28817749]
[116.89778900 272.98992920]
[128.31677246 282.84173584]
[136.92628479 295.22424316]
[142.18513489 309.35916138]
[143.76274109 324.35787964]
[141.55993652 339.27761841]
[135.71517944 353.18048096]
[126.59590149 365.19253540]
[114.77532959 374.55871582]
[100.99652100 380.69018555]
[86.12562561 383.20159912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[27 83]
[28 82]
[29 81]
[30 67]
[31 66]
[32 65]
[33 64]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[112 121]
[113 120]
[114 119]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
