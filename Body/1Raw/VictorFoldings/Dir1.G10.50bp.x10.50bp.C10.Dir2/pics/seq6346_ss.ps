%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCUUCGGGGGGGGGGUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCxxxxxxxxxxAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUCCCCCCCCCCUAAUAAUUUUC\
) } def
/len { sequence length } bind def

/coor [
[76.25087738 503.13943481]
[62.22893524 497.58642578]
[50.02898026 488.72009277]
[40.41790771 477.09777832]
[33.99988174 463.45007324]
[31.17834663 448.63488770]
[32.13066101 433.58349609]
[36.79696655 419.24209595]
[44.88393402 406.51214600]
[55.88320923 396.19384766]
[69.10336304 388.93588257]
[83.71337891 385.19445801]
[83.71337891 370.19445801]
[83.71337891 355.19445801]
[83.71337891 340.19445801]
[83.71337891 325.19445801]
[83.71337891 310.19445801]
[83.71337891 295.19445801]
[83.71337891 280.19445801]
[83.71337891 265.19445801]
[83.71337891 250.19444275]
[81.43450165 247.42787170]
[80.41576385 243.39900208]
[81.24510193 238.72804260]
[84.20375824 234.27815247]
[85.12716675 219.30659485]
[86.05058289 204.33505249]
[79.11145782 191.15559387]
[87.68363953 177.85791016]
[88.60704803 162.88636780]
[81.66793060 149.70692444]
[90.24010468 136.40924072]
[82.86531067 133.57514954]
[76.24324036 129.26609802]
[70.66481018 123.67138672]
[66.37506866 117.03678894]
[63.56248093 109.65376282]
[62.35059357 101.84664917]
[62.79264450 93.95841217]
[64.86921692 86.33558655]
[68.48908997 79.31303406]
[73.49324036 73.19926453]
[79.66182709 68.26284790]
[74.24320221 54.27576447]
[62.04318619 44.20252228]
[64.66038513 29.53966141]
[59.24176025 15.55257797]
[53.82313538 1.56549430]
[41.62311935 -8.50774765]
[44.24031448 -23.17061043]
[38.18547058 -30.09409714]
[38.85726929 -37.50091171]
[33.72696686 -51.59629822]
[28.59666443 -65.69168854]
[22.04879379 -79.18707275]
[14.15231133 -91.94033051]
[6.92837572 -97.63335419]
[6.22773504 -105.03749847]
[-1.40523493 -117.95019531]
[-9.03820515 -130.86288452]
[-16.67117500 -143.77558899]
[-31.21462440 -151.35319519]
[-31.65352821 -167.74647522]
[-17.53637886 -176.09141541]
[-3.38568997 -167.80346680]
[-3.75847697 -151.40855408]
[3.87449312 -138.49586487]
[11.50746346 -125.58316040]
[19.14043236 -112.67046356]
[26.90556908 -99.83681488]
[34.80205154 -87.08355713]
[36.55537033 -101.98072815]
[45.41313553 -114.08610535]
[59.08148956 -120.26479340]
[74.02079010 -118.91672516]
[86.36227417 -110.39101410]
[92.90991974 -96.89552307]
[91.96810913 -81.92511749]
[83.78073883 -69.35662079]
[70.46805573 -62.44485474]
[55.47759628 -62.97972107]
[42.69205475 -70.82199097]
[47.82235718 -56.72660065]
[52.95265961 -42.63121414]
[58.22739792 -28.58923531]
[70.03984070 -19.51644325]
[67.81021881 -3.85313082]
[73.22884369 10.13395309]
[78.64746857 24.12103653]
[90.45990753 33.19382858]
[88.23028564 48.85713959]
[93.64891052 62.84422302]
[105.87957764 62.76670074]
[117.49121857 66.60920715]
[127.26133728 73.96718597]
[134.16131592 84.06597900]
[148.74505615 80.55681610]
[163.32881165 77.04764557]
[177.91255188 73.53848267]
[178.84945679 58.45161057]
[184.19320679 44.31174850]
[193.46867371 32.37620544]
[205.85107422 23.70628166]
[220.23937988 19.07289696]
[235.35417175 18.88805008]
[249.85148621 23.16817856]
[262.44219971 31.53269577]
[272.00677490 43.23783493]
[277.69473267 57.24278259]
[279.00030518 72.30223083]
[275.80740356 87.07709503]
[268.39990234 100.25361633]
[257.43652344 110.66014099]
[243.89210510 117.37132263]
[228.97100830 119.79042053]
[214.00000000 117.70232391]
[200.31028748 111.29269409]
[189.11915588 101.13149261]
[181.42172241 88.12223053]
[166.83796692 91.63139343]
[152.25422668 95.14056396]
[137.67047119 98.64972687]
[128.87579346 124.22966766]
[105.21165466 137.33264160]
[112.08472443 151.58296204]
[103.57859802 163.80978394]
[102.65518951 178.78132629]
[109.52825928 193.03164673]
[101.02213287 205.25845337]
[100.09871674 220.23001099]
[99.17530823 235.20155334]
[98.71337891 250.19444275]
[98.71337891 265.19445801]
[98.71337891 280.19445801]
[98.71337891 295.19445801]
[98.71337891 310.19445801]
[98.71337891 325.19445801]
[98.71337891 340.19445801]
[98.71337891 355.19445801]
[98.71337891 370.19445801]
[98.71337891 385.19445801]
[113.32339478 388.93588257]
[126.54354858 396.19384766]
[137.54283142 406.51214600]
[145.62979126 419.24209595]
[150.29609680 433.58349609]
[151.24841309 448.63488770]
[148.42687988 463.45007324]
[142.00885010 477.09777832]
[132.39778137 488.72009277]
[120.19782257 497.58642578]
[106.17588043 503.13943481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 131]
[26 130]
[27 129]
[29 127]
[30 126]
[32 124]
[43 92]
[44 91]
[46 89]
[47 88]
[48 87]
[50 85]
[52 84]
[53 83]
[54 82]
[55 71]
[56 70]
[58 69]
[59 68]
[60 67]
[61 66]
[96 122]
[97 121]
[98 120]
[99 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
