%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCUACAAGGGGGGGGGGUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCxxxxxxxxxxCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCCCCCCCCCCCACAUCUACAA\
) } def
/len { sequence length } bind def

/coor [
[84.38347626 421.68081665]
[71.82525635 413.32965088]
[61.73902893 402.11718750]
[54.75883484 388.74829102]
[51.32345200 374.06329346]
[51.64883041 358.98535156]
[55.71451187 344.46221924]
[63.26493454 331.40686035]
[73.82546234 320.63998413]
[86.73225403 312.83834839]
[101.17398834 308.49240112]
[100.55001068 293.50537109]
[99.92603302 278.51837158]
[99.30205536 263.53134155]
[98.67807770 248.54432678]
[98.05410004 233.55731201]
[97.43012238 218.57029724]
[96.80614471 203.58328247]
[96.18216705 188.59626770]
[95.55818939 173.60925293]
[94.93421173 158.62223816]
[94.31023407 143.63522339]
[77.23107147 137.65609741]
[64.00215149 125.30929565]
[56.86049652 108.68267059]
[57.01376724 90.58779907]
[64.43605042 74.08454132]
[53.99623489 63.31373215]
[38.83568954 58.78953171]
[35.53346634 44.26559830]
[25.09365273 33.49478912]
[14.65384102 22.72398186]
[2.23364210 30.41798782]
[-11.51389694 35.34613037]
[-25.98151207 37.29341507]
[-40.53069687 36.17646408]
[-54.51987076 32.04708481]
[-67.33269501 25.08985710]
[-78.40520477 15.61390018]
[-87.25063324 4.03912926]
[-93.48082733 -9.12234497]
[-96.82327271 -23.28888130]
[-97.13301086 -37.83500671]
[-94.39890289 -52.11903381]
[-88.74405670 -65.51136780]
[-80.42024994 -77.42226410]
[-90.63372803 -88.40792847]
[-101.18502045 -99.06954956]
[-112.06384277 -109.39675903]
[-122.94267273 -119.72396088]
[-133.82148743 -130.05116272]
[-148.78112793 -126.28115845]
[-163.39689636 -131.21907043]
[-173.00495911 -143.28923035]
[-174.53941345 -158.64009094]
[-167.51062012 -172.37326050]
[-154.16146851 -180.10650635]
[-138.75158691 -179.37222290]
[-126.19822693 -170.40467834]
[-120.50712585 -156.06539917]
[-123.49428558 -140.92999268]
[-112.61546326 -130.60278320]
[-101.73664093 -120.27558136]
[-90.85781097 -109.94837952]
[-87.27946472 -109.69751740]
[-83.65291595 -107.66042328]
[-80.83517456 -103.83776093]
[-79.64806366 -98.62140656]
[-69.43458557 -87.63574219]
[-56.13136292 -95.44219208]
[-41.42262650 -100.10951233]
[-26.03845406 -101.40280914]
[-10.74316216 -99.25473785]
[3.70265627 -93.76900482]
[16.57996559 -85.21536255]
[27.24706841 -74.01635742]
[35.17159271 -60.72644806]
[39.95705032 -46.00453949]
[41.36268234 -30.58135796]
[39.31555557 -15.22313309]
[33.91436386 -0.69356465]
[25.42465019 12.28416920]
[35.86445999 23.05497742]
[46.30427551 33.82578659]
[60.71809387 37.57958984]
[64.76704407 52.87392044]
[75.20685577 63.64472961]
[90.12042999 57.11877060]
[106.38605499 56.46123505]
[121.77773285 61.76211166]
[134.18905640 72.29595947]
[147.28221130 64.97685242]
[160.37536621 57.65774536]
[164.77732849 42.71583939]
[178.15991211 35.47974396]
[192.37759399 39.76841736]
[205.47074890 32.44931030]
[218.56390381 25.13020515]
[231.65705872 17.81110001]
[242.53242493 4.80483723]
[258.04098511 11.65469265]
[255.75204468 28.45341301]
[238.97616577 30.90425491]
[225.88301086 38.22335815]
[212.78985596 45.54246521]
[199.69670105 52.86157227]
[195.90226746 67.21907043]
[182.72821045 74.82820129]
[167.69447327 70.75090027]
[154.60131836 78.07000732]
[141.50816345 85.38911438]
[143.46997070 93.16137695]
[143.98930359 101.16057587]
[158.69726562 104.10605621]
[173.40522766 107.05154419]
[188.11318970 109.99702454]
[204.83123779 107.17866516]
[212.16748047 122.46316528]
[199.51116943 133.74386597]
[185.16770935 124.70498657]
[170.45974731 121.75950623]
[155.75178528 118.81401825]
[141.04382324 115.86853790]
[135.91206360 125.43087769]
[128.59611511 133.44650269]
[119.54092407 139.42788696]
[109.29724884 143.01124573]
[109.92122650 157.99826050]
[110.54520416 172.98527527]
[111.16918182 187.97229004]
[111.79315948 202.95930481]
[112.41713715 217.94631958]
[113.04111481 232.93333435]
[113.66509247 247.92034912]
[114.28907013 262.90737915]
[114.91304779 277.89437866]
[115.53702545 292.88140869]
[116.16100311 307.86840820]
[130.91400146 310.99887085]
[144.42463684 317.70062256]
[155.84362793 327.55239868]
[164.45314026 339.93493652]
[169.71197510 354.06982422]
[171.28958130 369.06857300]
[169.08677673 383.98831177]
[163.24203491 397.89117432]
[154.12275696 409.90322876]
[142.30218506 419.26937866]
[128.52337646 425.40087891]
[113.65247345 427.91229248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[27 87]
[28 86]
[30 84]
[31 83]
[32 82]
[46 69]
[47 68]
[48 64]
[49 63]
[50 62]
[51 61]
[91 111]
[92 110]
[93 109]
[96 106]
[97 105]
[98 104]
[99 103]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
