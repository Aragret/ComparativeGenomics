%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCUGGGGGGGGGGGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCxxxxxxxxxxUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUCCCCCCCCCCAAUCCCCUGG\
) } def
/len { sequence length } bind def

/coor [
[139.29553223 494.44396973]
[128.71366882 483.66433716]
[121.59863281 470.33941650]
[118.52721405 455.54946899]
[119.74839783 440.49337769]
[125.16318512 426.39172363]
[134.33262634 414.38763428]
[146.51341248 405.45425415]
[160.71807861 400.31576538]
[159.78244019 385.34497070]
[158.84681702 370.37417603]
[157.91119385 355.40338135]
[156.97555542 340.43258667]
[156.03993225 325.46179199]
[155.10430908 310.49099731]
[154.16867065 295.52023315]
[153.23304749 280.54943848]
[150.13471985 265.87289429]
[144.93930054 251.80137634]
[139.74389648 237.72985840]
[134.54847717 223.65834045]
[120.47227478 213.22473145]
[123.65169525 195.11750793]
[118.16466522 181.15711975]
[112.67763519 167.19673157]
[107.19060516 153.23634338]
[103.18989563 150.52160645]
[100.88849640 145.23625183]
[101.77902222 138.57934570]
[96.87747192 124.40278625]
[91.97592163 110.22622681]
[82.34738922 98.72442627]
[69.25423431 91.40531921]
[56.16108322 84.08621216]
[43.06792831 76.76710510]
[29.97477341 69.44800568]
[16.88162041 62.12889481]
[6.69873190 73.23770142]
[-5.77188015 81.69822693]
[-19.85769272 87.05422211]
[-34.79907227 89.01682281]
[-49.79025650 87.48020935]
[-64.02278137 82.52723694]
[-76.72911072 74.42502594]
[-87.22400665 63.61050034]
[-94.94149017 50.66688538]
[-99.46537018 36.29220963]
[-100.55167389 21.26168823]
[-98.14183044 6.38589001]
[-92.36578369 -7.53294802]
[-83.53504181 -19.74420166]
[-72.12583160 -29.58933258]
[-58.75343323 -36.53740311]
[-44.13900757 -40.21371841]
[-29.07069016 -40.42001343]
[-14.36109924 -37.14516830]
[-0.80350113 -30.56578636]
[10.87095833 -21.03668785]
[20.03269005 -9.07176399]
[26.18761444 4.68373013]
[29.00380325 19.48797989]
[28.32938385 34.54261017]
[24.20072556 49.03574371]
[37.29388046 56.35484695]
[50.38703537 63.67395401]
[63.48019028 70.99305725]
[76.57334137 78.31216431]
[89.66649628 85.63127136]
[81.68514252 72.93096161]
[73.70378113 60.23064423]
[62.28372192 50.50530624]
[56.17076492 36.80743027]
[56.55888367 21.81245422]
[63.37226868 8.44915390]
[75.28015137 -0.67238224]
[89.95670319 -3.77055979]
[104.53535461 -0.24025075]
[116.16862488 9.22901440]
[122.58434296 22.78772163]
[122.52940369 37.78762054]
[116.01495361 51.29845047]
[113.84812164 66.14112091]
[111.68128204 80.98378754]
[120.69881439 68.99695587]
[129.71633911 57.01012421]
[138.73387146 45.02328873]
[147.75140381 33.03645706]
[144.04536438 17.84437752]
[151.01795959 3.84734631]
[165.37695312 -2.34566808]
[180.34245300 2.18948722]
[188.84822083 15.31145000]
[186.87809753 30.82443237]
[175.36228943 41.40367508]
[159.73823547 42.05398560]
[150.72070312 54.04082108]
[141.70317078 66.02764893]
[132.68565369 78.01448822]
[123.66812134 90.00131989]
[121.83517456 96.09226990]
[118.65138245 100.84981537]
[114.61760712 104.01649475]
[110.27317047 105.48982239]
[106.15247345 105.32467651]
[111.05402374 119.50123596]
[115.95557404 133.67779541]
[121.15099335 147.74931335]
[126.63802338 161.70970154]
[132.12506104 175.67008972]
[137.61209106 189.63047791]
[149.13687134 195.51548767]
[153.40049744 207.30702209]
[148.61999512 218.46292114]
[153.81541443 232.53445435]
[159.01083374 246.60597229]
[164.20623779 260.67749023]
[167.69201660 246.08813477]
[176.40879822 233.88084412]
[189.07667542 225.84811401]
[203.83555603 223.16938782]
[218.51831055 226.23800659]
[230.96902466 234.60340881]
[239.35948181 247.03723145]
[242.45768738 261.71377563]
[239.80870056 276.47802734]
[231.80148315 289.16204834]
[219.61178589 297.90341187]
[205.02947998 301.41857910]
[190.19575500 299.19137573]
[177.28871155 291.54885864]
[168.20384216 279.61380005]
[169.13946533 294.58459473]
[170.07508850 309.55538940]
[171.01072693 324.52618408]
[171.94635010 339.49697876]
[172.88197327 354.46774292]
[173.81761169 369.43853760]
[174.75323486 384.40933228]
[175.68885803 399.38012695]
[190.42277527 402.71005249]
[203.62104797 410.05734253]
[214.21374512 420.82635498]
[221.34216309 434.14407349]
[224.42843628 448.93096924]
[223.22238159 463.98825073]
[217.82176208 478.09533691]
[208.66436768 490.10861206]
[196.49258423 499.05426025]
[182.29309082 504.20700073]
[167.21697998 505.14923096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 139]
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 116]
[19 115]
[20 114]
[21 113]
[23 110]
[24 109]
[25 108]
[26 107]
[29 106]
[30 105]
[31 104]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
