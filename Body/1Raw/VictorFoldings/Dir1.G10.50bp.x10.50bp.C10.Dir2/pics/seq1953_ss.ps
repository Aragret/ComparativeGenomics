%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAGCCAAGGGGGGGGGGACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAxxxxxxxxxxCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCCCCCCCCCCCUGAGCCAA\
) } def
/len { sequence length } bind def

/coor [
[76.63799286 388.95547485]
[62.79205704 382.93945312]
[51.08339310 373.41003418]
[42.38087082 361.07437134]
[37.33026886 346.84783936]
[36.30637741 331.78616333]
[39.38517380 317.00698853]
[46.33819580 303.60708618]
[56.64948273 292.58074951]
[69.55386353 284.74624634]
[84.09375000 280.68493652]
[84.09375000 265.68493652]
[84.09375000 250.68492126]
[84.09375000 235.68492126]
[84.09375000 220.68492126]
[84.09375000 205.68492126]
[84.09375000 190.68492126]
[84.09375000 175.68492126]
[84.09375000 160.68492126]
[84.09375000 145.68492126]
[84.09375000 130.68492126]
[72.59194183 121.05639648]
[57.82588959 123.69525909]
[43.33029175 127.55242157]
[29.20549011 132.60118103]
[15.08068752 137.64993286]
[0.95588446 142.69868469]
[-9.23945236 155.54342651]
[-25.41906166 152.86904907]
[-30.93874741 137.42672729]
[-20.12033272 125.10220337]
[-4.09287167 128.57388306]
[10.03193092 123.52513123]
[24.15673447 118.47637177]
[38.28153610 113.42761230]
[24.53113747 107.43373871]
[16.79201126 94.58438873]
[17.92361069 79.62712860]
[27.50783348 68.08838654]
[42.00349808 64.23148346]
[56.05474854 69.48147583]
[64.46992493 81.89859009]
[64.13978577 96.89495850]
[55.18702698 108.92920685]
[69.95307922 106.29033661]
[79.80915070 81.47079468]
[102.90054321 76.06459045]
[109.24767303 62.47363663]
[115.59480286 48.88268661]
[121.94193268 35.29173279]
[128.28906250 21.70078278]
[120.94377136 8.15999985]
[122.95662689 -6.93310499]
[133.34797668 -17.81813240]
[147.98115540 -20.46540260]
[154.32827759 -34.05635452]
[160.67541504 -47.64730453]
[146.13290405 -43.97098541]
[133.15269470 -51.48859024]
[129.10437012 -65.93196106]
[136.28636169 -79.10082245]
[150.62107849 -83.51850128]
[163.96992493 -76.67683411]
[168.75393677 -62.45867538]
[176.74386597 -75.15360260]
[184.73377991 -87.84853363]
[173.19865417 -97.47269440]
[163.04928589 -108.54850769]
[154.46678162 -120.87831116]
[147.60430908 -134.24206543]
[142.58435059 -148.40129089]
[139.49649048 -163.10327148]
[138.39582825 -178.08566284]
[139.30200195 -193.08106995]
[142.19885254 -207.82189941]
[147.03466797 -222.04505920]
[153.72315979 -235.49671936]
[162.14495850 -247.93684387]
[172.14976501 -259.14343262]
[183.55905151 -268.91644287]
[196.16917419 -277.08148193]
[209.75511169 -283.49288940]
[224.07440186 -288.03616333]
[238.87149048 -290.63027954]
[253.88232422 -291.22891235]
[268.83901978 -289.82138062]
[283.47460938 -286.43283081]
[297.52798462 -281.12371826]
[310.74826050 -273.98880005]
[322.89956665 -265.15539551]
[333.76504517 -254.78112793]
[343.15075684 -243.05117798]
[350.88922119 -230.17485046]
[356.84231567 -216.38195801]
[360.90383911 -201.91864014]
[363.00128174 -187.04301453]
[363.09722900 -172.02055359]
[361.18994141 -157.11935425]
[357.31347656 -142.60534668]
[351.53701782 -128.73754883]
[343.96365356 -115.76344299]
[334.72851562 -103.91456604]
[323.99645996 -93.40238190]
[311.95895386 -84.41448975]
[298.83087158 -77.11128998]
[284.84646606 -71.62311554]
[270.25534058 -68.04791260]
[255.31784058 -66.44948578]
[240.30058289 -66.85635376]
[225.47157288 -69.26126099]
[211.09541321 -73.62128448]
[197.42871094 -79.85861969]
[189.43879700 -67.16368866]
[181.44886780 -54.46875763]
[174.26635742 -41.30017471]
[167.91923523 -27.70922470]
[161.57209778 -14.11827374]
[168.93527222 -1.19845533]
[167.25900269 13.75661469]
[156.97787476 24.98833656]
[141.88002014 28.04791260]
[135.53288269 41.63886261]
[129.18576050 55.22981262]
[122.83862305 68.82076263]
[116.49149323 82.41171265]
[124.02295685 91.66425323]
[126.44696045 103.98588562]
[122.62338257 116.60496521]
[112.88672638 126.40379333]
[99.09375000 130.68492126]
[99.09375000 145.68492126]
[99.09375000 160.68492126]
[99.09375000 175.68492126]
[99.09375000 190.68492126]
[99.09375000 205.68492126]
[99.09375000 220.68492126]
[99.09375000 235.68492126]
[99.09375000 250.68492126]
[99.09375000 265.68493652]
[99.09375000 280.68493652]
[113.63363647 284.74624634]
[126.53801727 292.58074951]
[136.84930420 303.60708618]
[143.80232239 317.00698853]
[146.88111877 331.78616333]
[145.85722351 346.84783936]
[140.80662537 361.07437134]
[132.10411072 373.41003418]
[120.39543915 382.93945312]
[106.54950714 388.95547485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 45]
[23 44]
[24 35]
[25 34]
[26 33]
[27 32]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[55 117]
[56 116]
[57 115]
[64 114]
[65 113]
[66 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
