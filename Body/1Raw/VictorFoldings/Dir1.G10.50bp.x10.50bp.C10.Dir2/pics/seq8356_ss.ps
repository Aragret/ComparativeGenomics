%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUCAAAGGGGGGGGGGCUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGxxxxxxxxxxAUACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGACCCCCCCCCCACUAAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 351.56054688]
[71.19830322 345.54452515]
[59.48964310 336.01510620]
[50.78712082 323.67944336]
[45.73651886 309.45291138]
[44.71262741 294.39123535]
[47.79142761 279.61206055]
[54.74444962 266.21212769]
[65.05573273 255.18580627]
[77.96011353 247.35130310]
[92.50000000 243.28999329]
[92.50000000 228.28999329]
[92.50000000 213.28999329]
[92.50000000 198.28999329]
[92.50000000 183.28999329]
[92.50000000 168.28999329]
[92.50000000 153.28999329]
[92.50000000 138.28999329]
[92.50000000 123.28998566]
[92.50000000 108.28998566]
[92.34396362 93.29080200]
[92.03190613 78.29404449]
[77.03833771 77.72540283]
[62.10398483 76.27779388]
[47.28032684 73.95622253]
[32.61846924 70.76868439]
[18.16895294 66.72616577]
[3.98158813 61.84260941]
[-9.89471817 56.13484192]
[-23.41213036 49.62254333]
[-36.52405167 42.32816315]
[-49.18528366 34.27684784]
[-61.35217667 25.49634743]
[-72.98279572 16.01693535]
[-84.03703308 5.87128544]
[-94.47679901 -4.90562534]
[-104.26609802 -16.27664757]
[-113.37117767 -28.20258141]
[-121.76066589 -40.64231873]
[-129.40562439 -53.55297470]
[-136.27972412 -66.89004517]
[-142.35923767 -80.60754395]
[-147.62322998 -94.65820312]
[-152.05354309 -108.99356842]
[-155.63490295 -123.56423950]
[-158.35498047 -138.31997681]
[-160.20437622 -153.20989990]
[-161.17674255 -168.18270874]
[-161.26870728 -183.18678284]
[-160.47994995 -198.17037964]
[-158.81320190 -213.08186340]
[-156.27421570 -227.86984253]
[-152.87171936 -242.48330688]
[-148.61746216 -256.87191772]
[-143.52610779 -270.98602295]
[-137.61518860 -284.77703857]
[-130.90510559 -298.19735718]
[-123.41897583 -311.20074463]
[-115.18260193 -323.74240112]
[-106.22439575 -335.77905273]
[-96.57521820 -347.26919556]
[-86.26834106 -358.17327881]
[-75.33929443 -368.45367432]
[-63.82574844 -378.07492065]
[-51.76739883 -387.00390625]
[-39.20581055 -395.20983887]
[-26.18428993 -402.66439819]
[-12.74771976 -409.34188843]
[1.05757892 -415.21932983]
[15.18401623 -420.27642822]
[29.58289337 -424.49575806]
[44.20457840 -427.86279297]
[58.99866104 -430.36587524]
[73.91414642 -431.99645996]
[88.89962006 -432.74884033]
[103.90341949 -432.62048340]
[118.87382507 -431.61178589]
[133.75923157 -429.72625732]
[148.50831604 -426.97039795]
[163.07025146 -423.35366821]
[177.39483643 -418.88858032]
[191.43267822 -413.59051514]
[205.13539124 -407.47775269]
[218.45573425 -400.57131958]
[231.34780884 -392.89505005]
[243.76715088 -384.47540283]
[255.67095947 -375.34140015]
[267.01818848 -365.52456665]
[277.76974487 -355.05868530]
[287.88854980 -343.97982788]
[297.33969116 -332.32626343]
[306.09063721 -320.13809204]
[314.11123657 -307.45736694]
[321.37377930 -294.32778931]
[327.85324097 -280.79461670]
[333.52734375 -266.90451050]
[338.37646484 -252.70532227]
[342.38388062 -238.24604797]
[345.53585815 -223.57649231]
[347.82144165 -208.74725342]
[349.23281860 -193.80941772]
[349.76507568 -178.81451416]
[349.41641235 -163.81422424]
[348.18798828 -148.86024475]
[346.08410645 -134.00413513]
[343.11193848 -119.29709625]
[339.28179932 -104.78984070]
[334.60684204 -90.53237915]
[329.10321045 -76.57384491]
[322.78988647 -62.96237183]
[315.68859863 -49.74487305]
[307.82385254 -36.96691513]
[299.22274780 -24.67254448]
[289.91494751 -12.90414524]
[279.93252563 -1.70228469]
[269.30990601 8.89442253]
[258.08367920 18.84944534]
[246.29257202 28.12846947]
[233.97721863 36.69950485]
[221.18008423 44.53300858]
[207.94526672 51.60197449]
[194.31840515 57.88203049]
[180.34646606 63.35153580]
[166.07762146 67.99163055]
[151.56105042 71.78632355]
[136.84680176 74.72252655]
[121.98559570 76.79012299]
[107.02866364 77.98198700]
[107.34071350 92.97874451]
[110.66161346 100.38520813]
[107.50000000 108.28998566]
[107.50000000 123.28998566]
[107.50000000 138.28999329]
[107.50000000 153.28999329]
[107.50000000 168.28999329]
[107.50000000 183.28999329]
[107.50000000 198.28999329]
[107.50000000 213.28999329]
[107.50000000 228.28999329]
[107.50000000 243.28999329]
[122.03988647 247.35130310]
[134.94427490 255.18580627]
[145.25555420 266.21212769]
[152.20857239 279.61206055]
[155.28736877 294.39123535]
[154.26348877 309.45291138]
[149.21287537 323.67944336]
[140.51036072 336.01510620]
[128.80169678 345.54452515]
[114.95575714 351.56054688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
