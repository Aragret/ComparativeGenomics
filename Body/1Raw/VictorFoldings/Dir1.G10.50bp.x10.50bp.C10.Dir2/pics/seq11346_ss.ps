%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACACUAUUGGGGGGGGGGAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAxxxxxxxxxxCCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCCCCCCCCCCCUACACAAUU\
) } def
/len { sequence length } bind def

/coor [
[97.06974030 391.25518799]
[83.04779053 385.70217896]
[70.84783936 376.83584595]
[61.23676300 365.21353149]
[54.81874084 351.56582642]
[51.99720383 336.75064087]
[52.94951630 321.69927979]
[57.61582184 307.35784912]
[65.70278931 294.62789917]
[76.70206451 284.30963135]
[89.92222595 277.05163574]
[104.53223419 273.31021118]
[104.53223419 258.31021118]
[104.53223419 243.31021118]
[104.53223419 228.31021118]
[104.53223419 213.31021118]
[104.53223419 198.31021118]
[104.53223419 183.31021118]
[104.53223419 168.31021118]
[104.53223419 153.31021118]
[104.53223419 138.31021118]
[83.78156281 133.54382324]
[69.40354156 118.85660553]
[65.38236237 99.45306396]
[72.21453857 81.63997650]
[61.88363266 70.76466370]
[51.55273056 59.88934708]
[41.22182846 49.01403427]
[30.89092445 38.13871765]
[18.96813202 47.26445770]
[6.14286518 55.07115936]
[-7.43955755 61.47037125]
[-21.62523651 66.38957977]
[-36.25343704 69.77304840]
[-51.15840912 71.58244324]
[-66.17126465 71.79726410]
[-81.12191010 70.41506958]
[-95.84092712 67.45152283]
[-110.16154480 62.94020462]
[-123.92150116 56.93223190]
[-136.96487427 49.49567795]
[-149.14389038 40.71480942]
[-160.32054138 30.68911552]
[-170.36819458 19.53219604]
[-179.17298889 7.37046814]
[-186.63517761 -5.65826654]
[-192.67019653 -19.40638351]
[-197.20965576 -33.71810532]
[-200.20213318 -48.43126678]
[-201.61372375 -63.37916183]
[-201.42842102 -78.39241028]
[-199.64833069 -93.30091095]
[-196.29362488 -107.93573761]
[-191.40231323 -122.13105774]
[-185.02983093 -135.72604370]
[-177.24835205 -148.56663513]
[-168.14607239 -160.50733948]
[-157.82612610 -171.41287231]
[-146.40542603 -181.15966797]
[-134.01339722 -189.63726807]
[-120.79045105 -196.74963379]
[-106.88640594 -202.41616821]
[-92.45880890 -206.57266235]
[-77.67112732 -209.17201233]
[-62.69092941 -210.18479919]
[-47.68794632 -209.59951782]
[-32.83217239 -207.42279053]
[-18.29193497 -203.67932129]
[-4.23198986 -198.41148376]
[9.18835640 -191.67900085]
[21.81703949 -183.55813599]
[33.51096725 -174.14091492]
[44.13763809 -163.53402710]
[53.57664490 -151.85766602]
[61.72103500 -139.24414062]
[68.47852325 -125.83637238]
[73.77255249 -111.78627014]
[77.54312897 -97.25303650]
[79.74752808 -82.40134430]
[80.36077118 -67.39947510]
[79.37591553 -52.41741562]
[76.80412292 -37.62491989]
[72.67453003 -23.18959618]
[67.03392029 -9.27501297]
[59.94621658 3.96117043]
[51.49172211 16.36897659]
[41.76623917 27.80781555]
[52.09714127 38.68312836]
[62.42804337 49.55844498]
[72.75894928 60.43375778]
[83.08985138 71.30907440]
[91.50434113 67.79834747]
[100.55558777 66.70114136]
[109.56519318 68.09969330]
[117.85788727 71.88917542]
[124.81212616 77.78556824]
[137.95375061 70.55386353]
[138.18887329 55.19676971]
[146.08480835 42.02294159]
[159.51759338 34.57607269]
[174.87387085 34.85932922]
[188.02288818 42.79652023]
[195.42762756 56.25257874]
[195.09623718 71.60789490]
[187.11785889 84.73196411]
[173.63865662 92.09448242]
[158.28445435 91.71495819]
[145.18545532 83.69549561]
[132.04382324 90.92720032]
[135.01351929 98.16741180]
[136.28031921 106.27751923]
[135.60743713 114.84330750]
[150.03482056 118.94824982]
[164.46220398 123.05319977]
[178.88958740 127.15814209]
[193.31697083 131.26309204]
[204.28730774 120.51378632]
[219.16651917 116.70532227]
[233.95219421 120.86215210]
[244.66706848 131.86611938]
[248.42887878 146.75720215]
[244.22570801 161.52978516]
[233.18821716 172.21009827]
[218.28541565 175.92521667]
[203.52607727 171.67576599]
[192.88041687 160.60484314]
[189.21203613 145.69047546]
[174.78465271 141.58552551]
[160.35726929 137.48057556]
[145.92988586 133.37564087]
[131.50248718 129.27069092]
[119.53223419 138.31021118]
[119.53223419 153.31021118]
[119.53223419 168.31021118]
[119.53223419 183.31021118]
[119.53223419 198.31021118]
[119.53223419 213.31021118]
[119.53223419 228.31021118]
[119.53223419 243.31021118]
[119.53223419 258.31021118]
[119.53223419 273.31021118]
[134.14224243 277.05163574]
[147.36241150 284.30963135]
[158.36167908 294.62789917]
[166.44865417 307.35784912]
[171.11495972 321.69927979]
[172.06727600 336.75064087]
[169.24572754 351.56582642]
[162.82771301 365.21353149]
[153.21662903 376.83584595]
[141.01667786 385.70217896]
[126.99473572 391.25518799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 91]
[26 90]
[27 89]
[28 88]
[29 87]
[96 109]
[97 108]
[112 131]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
