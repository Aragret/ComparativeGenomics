%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGUCCUGGGGGGGGGGGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUxxxxxxxxxxAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCACCCCCCCCCCUCCUAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[102.39192200 420.41937256]
[87.90223694 416.21090698]
[74.99600220 408.39477539]
[64.55319977 397.50393677]
[57.28583908 384.28094482]
[53.68941116 369.62734985]
[54.00913239 354.54223633]
[58.22320557 340.05416870]
[66.04430389 327.15097046]
[76.93917084 316.71237183]
[90.16497803 309.45010376]
[104.81996918 305.85934448]
[105.13202667 290.86257935]
[105.44408417 275.86584473]
[105.75614166 260.86907959]
[106.06819916 245.87232971]
[106.38024902 230.87556458]
[106.69230652 215.87881470]
[107.00436401 200.88206482]
[107.31642151 185.88531494]
[107.62847900 170.88854980]
[107.94053650 155.89179993]
[105.60942841 141.07405090]
[100.70787811 126.89748383]
[95.80632782 112.72093201]
[92.62088776 127.37879181]
[85.50509644 140.58354187]
[75.01428223 151.30468750]
[61.96714401 158.70550537]
[47.38190079 162.20846558]
[32.39679718 161.54016113]
[18.18127823 156.75277710]
[5.84473991 148.21990967]
[-3.65006471 136.60748291]
[-9.56215382 122.82171631]
[-11.43014240 107.93848419]
[-9.10825157 93.11927795]
[-2.77768254 79.52060699]
[7.06752014 68.20372009]
[19.65902901 60.05179214]
[34.01419449 55.70101166]
[49.01272202 55.49091721]
[63.48411942 59.43790436]
[76.29901886 67.23394775]
[86.45734406 78.27063751]
[93.16718292 91.68922424]
[94.41406250 76.74113464]
[95.66093445 61.79304886]
[89.09754944 47.39747620]
[97.86602783 35.35741425]
[99.11289978 20.40932655]
[100.35977936 5.46123934]
[101.60665131 -9.48684788]
[102.85352325 -24.43493462]
[88.17446136 -27.62555504]
[74.03746033 -32.70494080]
[60.68441772 -39.58617020]
[48.34383011 -48.15150070]
[37.22685623 -58.25436783]
[27.52372551 -69.72190094]
[19.40046883 -82.35787201]
[12.99608803 -95.94606018]
[8.42016792 -110.25395966]
[5.75101042 -125.03674316]
[5.03428745 -140.04145813]
[6.28226328 -155.01133728]
[9.47358322 -169.69024658]
[14.55363941 -183.82701111]
[21.43550491 -197.17973328]
[30.00142479 -209.51991272]
[40.10482025 -220.63639832]
[51.57281494 -230.33898926]
[64.20916748 -238.46163940]
[77.79766846 -244.86537170]
[92.10578156 -249.44061279]
[106.88868713 -252.10906982]
[121.89343262 -252.82507324]
[136.86326599 -251.57638550]
[151.54202271 -248.38436890]
[165.67854309 -243.30363464]
[179.03092957 -236.42114258]
[191.37069702 -227.85462952]
[202.48670959 -217.75070190]
[212.18875122 -206.28225708]
[220.31080627 -193.64550781]
[226.71389771 -180.05670166]
[231.28845215 -165.74836731]
[233.95620728 -150.96533203]
[234.67149353 -135.96055603]
[233.42208862 -120.99079132]
[230.22938538 -106.31217957]
[225.14797974 -92.17590332]
[218.26483154 -78.82384491]
[209.69773865 -66.48448181]
[199.59329224 -55.36894989]
[188.12437439 -45.66745758]
[175.48724365 -37.54600525]
[161.89813232 -31.14356422]
[147.58958435 -26.56968689]
[132.80642700 -23.90264130]
[117.80161285 -23.18806076]
[116.55474091 -8.23997307]
[115.30786133 6.70811367]
[114.06098938 21.65620041]
[112.81411743 36.60428619]
[119.46668243 49.93067551]
[110.60902405 63.03992462]
[109.36214447 77.98801422]
[108.11527252 92.93609619]
[109.98288727 107.81937408]
[114.88443756 121.99593353]
[119.78598785 136.17250061]
[123.15410614 121.55552673]
[131.00804138 108.77602386]
[142.52754211 99.16867065]
[156.50950623 93.73686218]
[171.49366760 93.04787445]
[185.91511536 97.17368317]
[198.26763916 105.68338013]
[207.26118469 117.68822479]
[211.95643616 131.93443298]
[211.86306763 146.93414307]
[206.99079895 161.12078857]
[197.84849548 173.01274109]
[185.39097595 181.36798096]
[170.91929626 185.31393433]
[155.94487000 184.43844604]
[142.03161621 178.83297729]
[130.63261414 169.08294678]
[122.93728638 156.20385742]
[122.62522888 171.20060730]
[122.31317139 186.19737244]
[122.00112152 201.19412231]
[121.68906403 216.19087219]
[121.37700653 231.18762207]
[121.06494904 246.18438721]
[120.75289154 261.18112183]
[120.44083405 276.17788696]
[120.12878418 291.17465210]
[119.81672668 306.17138672]
[134.30966187 310.36868286]
[147.22192383 318.17483521]
[157.67312622 329.05758667]
[164.95069885 342.27499390]
[168.55844116 356.92581177]
[168.25036621 372.01113892]
[164.04748535 386.50247192]
[156.23635864 399.41171265]
[145.34956360 409.85870361]
[132.12936401 417.13119507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 112]
[24 111]
[25 110]
[46 109]
[47 108]
[48 107]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
