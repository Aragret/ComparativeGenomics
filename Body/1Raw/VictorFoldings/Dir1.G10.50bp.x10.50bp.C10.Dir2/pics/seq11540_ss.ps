%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUAUUCUCGGGGGGGGGGACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAxxxxxxxxxxGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUCCCCCCCCCCAAACUAUUCUC\
) } def
/len { sequence length } bind def

/coor [
[-9.23680782 476.06317139]
[-23.25875092 470.51016235]
[-35.45870972 461.64382935]
[-45.06977844 450.02151489]
[-51.48780441 436.37380981]
[-54.30934143 421.55862427]
[-53.35702515 406.50726318]
[-48.69071960 392.16583252]
[-40.60375595 379.43588257]
[-29.60448074 369.11758423]
[-16.38432121 361.85961914]
[-1.77430832 358.11819458]
[-1.77430832 343.11819458]
[-1.77430832 328.11819458]
[-1.77430832 313.11819458]
[-1.77430832 298.11819458]
[-1.77430832 283.11819458]
[-1.77430832 268.11819458]
[-1.77430832 253.11817932]
[-1.77430832 238.11817932]
[-1.77430832 223.11817932]
[-1.77430832 208.11817932]
[-9.51112175 220.96893311]
[-20.05067253 231.64216614]
[-32.80289078 239.54032898]
[-47.05382538 244.22122192]
[-62.00562286 245.42280579]
[-76.82118225 243.07777405]
[-90.67104340 237.31744385]
[-102.77980042 228.46430969]
[-112.46952057 217.01400757]
[-119.19772339 203.60762024]
[-122.58771515 188.99571228]
[-122.44971466 173.99633789]
[-118.79142761 159.44927979]
[-111.81768799 146.16896057]
[-101.91891479 134.89889526]
[-89.64931488 126.27005768]
[-75.69580841 120.76554108]
[-60.83960724 118.69352722]
[-45.91245270 120.17001343]
[-31.75005722 125.11234283]
[-19.14532471 133.24380493]
[-8.80394745 144.10916138]
[-1.30489886 157.10008240]
[2.93197632 171.48928833]
[3.66921473 186.47482300]
[10.76561832 173.25964355]
[17.86202049 160.04446411]
[24.95842552 146.82928467]
[32.05482864 133.61408997]
[19.02662277 141.04820251]
[4.81598520 145.85005188]
[-10.05117130 147.84194946]
[-25.02463913 146.95016479]
[-39.55027390 143.20773315]
[-53.09051132 136.75311279]
[-65.14424133 127.82520294]
[-75.26538849 116.75440979]
[-83.07936859 103.95043945]
[-88.29701996 89.88715363]
[-90.72522736 75.08499908]
[-90.27413940 60.09178162]
[-86.96044159 45.46237946]
[-80.90677643 31.73819733]
[-72.33717346 19.42714882]
[-61.56878281 8.98484230]
[-49.00012207 0.79773074]
[-35.09634018 -4.83119488]
[-20.37198830 -7.69361782]
[-5.37199068 -7.68360424]
[9.34852600 -4.80152512]
[23.24478149 0.84595901]
[35.80249786 9.04984379]
[46.55693817 19.50651932]
[55.11009598 31.82899857]
[61.14543533 45.56124878]
[64.43959045 60.19506073]
[64.87066650 75.18886566]
[62.42269516 89.98777008]
[57.18627548 104.04408264]
[49.35261536 116.84104156]
[62.78006363 110.15496826]
[76.20751190 103.46888733]
[74.76229858 86.70996094]
[85.44860840 70.37908173]
[106.44632721 63.07730103]
[115.36248016 51.01486969]
[124.27863312 38.95243835]
[123.33071899 22.93741417]
[135.35661316 12.31867981]
[151.13107300 15.24201965]
[158.55328369 29.46489906]
[151.92956543 44.07674026]
[136.34106445 47.86859131]
[127.42491150 59.93102264]
[118.50876617 71.99345398]
[122.25876617 78.48863983]
[135.24914551 70.98863983]
[148.23965454 63.48885727]
[155.73921204 76.47949219]
[142.74914551 83.97902679]
[129.75875854 91.47902679]
[133.50875854 97.97421265]
[148.41320801 96.28382111]
[163.31765747 94.59342194]
[178.22210693 92.90302277]
[193.12655640 91.21262360]
[201.61280823 78.07803345]
[216.57154846 73.52062988]
[230.93972778 79.69229126]
[237.93313599 93.67893982]
[234.24967957 108.87651062]
[221.62858582 118.10917664]
[206.02915955 117.01755524]
[194.81695557 106.11707306]
[179.91250610 107.80747223]
[165.00805664 109.49787140]
[150.10360718 111.18826294]
[135.19915771 112.87866211]
[117.23587036 128.14367676]
[96.55611420 128.31442261]
[82.89358521 116.89633942]
[69.46614075 123.58241272]
[56.03868866 130.26849365]
[45.27001190 140.71049500]
[38.17360687 153.92568970]
[31.07720375 167.14086914]
[23.98080063 180.35604858]
[16.88439751 193.57122803]
[13.22569180 208.11817932]
[13.22569180 223.11817932]
[13.22569180 238.11817932]
[13.22569180 253.11817932]
[13.22569180 268.11819458]
[13.22569180 283.11819458]
[13.22569180 298.11819458]
[13.22569180 313.11819458]
[13.22569180 328.11819458]
[13.22569180 343.11819458]
[13.22569180 358.11819458]
[27.83570480 361.85961914]
[41.05586243 369.11758423]
[52.05513763 379.43588257]
[60.14210510 392.16583252]
[64.80841064 406.50726318]
[65.76072693 421.55862427]
[62.93918991 436.37380981]
[56.52116394 450.02151489]
[46.91009140 461.64382935]
[34.71013641 470.51016235]
[20.68819046 476.06317139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[47 130]
[48 129]
[49 128]
[50 127]
[51 126]
[82 125]
[83 124]
[84 123]
[87 97]
[88 96]
[89 95]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
