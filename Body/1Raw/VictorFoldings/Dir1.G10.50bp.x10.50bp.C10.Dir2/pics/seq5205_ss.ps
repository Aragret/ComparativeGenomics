%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAACCAAGGGGGGGGGGACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGxxxxxxxxxxCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCCCCCCCCCCCAUUCAACCAA\
) } def
/len { sequence length } bind def

/coor [
[83.88475037 388.72607422]
[70.66455078 381.45361328]
[59.77774429 371.00662231]
[51.96661758 358.09735107]
[47.76373291 343.60604858]
[47.45566177 328.52072144]
[51.06340408 313.86987305]
[58.34097672 300.65249634]
[68.79218292 289.76974487]
[81.70444489 281.96359253]
[96.19738007 277.76629639]
[95.88532257 262.76953125]
[95.57327271 247.77279663]
[95.26121521 232.77603149]
[94.94915771 217.77928162]
[94.63710022 202.78253174]
[94.32504272 187.78578186]
[94.01298523 172.78901672]
[93.70093536 157.79226685]
[93.38887787 142.79551697]
[93.07682037 127.79875946]
[80.13043213 120.63739014]
[72.48357391 107.97170258]
[72.17578125 93.17984009]
[79.28914642 80.20701599]
[91.92642975 72.51329803]
[91.61437225 57.51654053]
[91.30231476 42.51978683]
[76.31220245 41.83994675]
[61.39979172 40.17087936]
[46.63029861 37.51988983]
[32.06830215 33.89857101]
[17.77747917 29.32275200]
[3.82032156 23.81244659]
[-9.74213886 17.39174652]
[-22.85059738 10.08873177]
[-35.44773102 1.93533528]
[-47.47846222 -7.03279018]
[-58.89017487 -16.77642822]
[-69.63297272 -27.25297356]
[-79.65988159 -38.41661453]
[-88.92704773 -50.21853256]
[-97.39395905 -62.60712051]
[-105.02358246 -75.52821350]
[-111.78256226 -88.92529297]
[-117.64133453 -102.73979950]
[-122.57428741 -116.91130829]
[-126.55985260 -131.37785339]
[-129.58059692 -146.07618713]
[-131.62330627 -160.94201660]
[-132.67906189 -175.91035461]
[-132.74322510 -190.91574097]
[-131.81553650 -205.89256287]
[-129.90005493 -220.77531433]
[-127.00513458 -235.49894714]
[-123.14345551 -249.99905396]
[-118.33188629 -264.21224976]
[-112.59148407 -278.07635498]
[-105.94734192 -291.53076172]
[-98.42850494 -304.51663208]
[-90.06787109 -316.97717285]
[-80.90197754 -328.85791016]
[-70.97092438 -340.10690308]
[-60.31812668 -350.67495728]
[-48.99016571 -360.51583862]
[-37.03658295 -369.58654785]
[-24.50964546 -377.84738159]
[-11.46412945 -385.26226807]
[2.04291868 -391.79870605]
[15.95243549 -397.42819214]
[30.20359802 -402.12606812]
[44.73408890 -405.87182617]
[59.48036575 -408.64904785]
[74.37795258 -410.44558716]
[89.36170959 -411.25360107]
[104.36609650 -411.06958008]
[119.32552338 -409.89431763]
[134.17457581 -407.73291016]
[148.84829712 -404.59487915]
[163.28254700 -400.49386597]
[177.41419983 -395.44787598]
[191.18147278 -389.47894287]
[204.52413940 -382.61318970]
[217.38388062 -374.88058472]
[229.70443726 -366.31500244]
[241.43196106 -356.95385742]
[252.51515198 -346.83810425]
[262.90554810 -336.01196289]
[272.55773926 -324.52276611]
[281.42947388 -312.42080688]
[289.48199463 -299.75894165]
[296.68005371 -286.59255981]
[302.99221802 -272.97924805]
[308.39086914 -258.97851562]
[312.85238647 -244.65161133]
[316.35726929 -230.06115723]
[318.89022827 -215.27095032]
[320.44012451 -200.34568787]
[321.00018311 -185.35063171]
[320.56802368 -170.35133362]
[319.14547729 -155.41339111]
[316.73876953 -140.60212708]
[313.35845947 -125.98230743]
[309.01928711 -111.61785889]
[303.74023438 -97.57160187]
[297.54440308 -83.90494537]
[290.45889282 -70.67765808]
[282.51464844 -57.94758606]
[273.74645996 -45.77038193]
[264.19259644 -34.19929886]
[253.89491272 -23.28493881]
[242.89840698 -13.07502460]
[231.25114441 -3.61420202]
[219.00408936 5.05615902]
[206.21076965 12.89814472]
[192.92713928 19.87746429]
[179.21128845 25.96359634]
[165.12318420 31.12993050]
[150.72442627 35.35387421]
[136.07800293 38.61695862]
[121.24792480 40.90491104]
[106.29906464 42.20772934]
[106.61112213 57.20448303]
[106.92317963 72.20124054]
[119.86956787 79.36260986]
[127.51642609 92.02829742]
[127.82421875 106.82015991]
[120.71085358 119.79298401]
[108.07357025 127.48670197]
[108.38562775 142.48345947]
[108.69768524 157.48020935]
[109.00974274 172.47695923]
[109.32180023 187.47372437]
[109.63385773 202.47047424]
[109.94590759 217.46722412]
[110.25796509 232.46397400]
[110.57002258 247.46073914]
[110.88208008 262.45748901]
[111.19413757 277.45425415]
[125.84912872 281.04501343]
[139.07493591 288.30728149]
[149.96980286 298.74584961]
[157.79090881 311.64907837]
[162.00497437 326.13714600]
[162.32469177 341.22222900]
[158.72827148 355.87585449]
[151.46090698 369.09884644]
[141.01809692 379.98968506]
[128.11187744 387.80578613]
[113.62218475 392.01428223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 124]
[27 123]
[28 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
