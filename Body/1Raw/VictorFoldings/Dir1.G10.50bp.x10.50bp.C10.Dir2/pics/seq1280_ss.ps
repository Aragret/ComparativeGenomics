%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACCUGAGUUGGGGGGGGGGGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUxxxxxxxxxxCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCCCCCCCCCCCAAUCACCUGAGCU\
) } def
/len { sequence length } bind def

/coor [
[33.76066589 583.97564697]
[19.48889542 579.16625977]
[6.58491278 571.40081787]
[-4.34774208 561.04272461]
[-12.79772854 548.57629395]
[-18.36982346 534.58465576]
[-20.80341339 519.72222900]
[-19.98467255 504.68414307]
[-15.95189571 490.17376709]
[-8.89370251 476.86978149]
[0.85978240 465.39443970]
[12.85237026 456.28445435]
[26.52314758 449.96591187]
[41.23270416 446.73434448]
[41.23270416 431.73434448]
[41.23270416 416.73434448]
[41.23270416 401.73434448]
[41.23270416 386.73434448]
[41.23270416 371.73434448]
[41.23270416 356.73434448]
[41.23270416 341.73434448]
[41.23270416 326.73434448]
[41.23270416 311.73434448]
[41.23270416 296.73434448]
[39.28846359 294.64157104]
[38.08021164 291.63128662]
[37.96977997 287.98886108]
[39.20566177 284.12814331]
[41.88087082 280.54702759]
[35.18595505 267.24185181]
[44.00187683 254.10450745]
[45.20120239 239.15254211]
[46.40053177 224.20056152]
[47.59985733 209.24858093]
[48.79918671 194.29660034]
[39.95814133 182.17901611]
[25.35354424 178.75764465]
[10.74894810 175.33628845]
[1.57845092 187.49449158]
[-11.74754524 194.86589050]
[-26.92023087 196.17338562]
[-41.31084442 191.19039917]
[-52.42612839 180.78028870]
[-58.34029388 166.74667358]
[-58.02867126 151.52095032]
[-51.54525375 137.74105835]
[-40.01333237 127.79447174]
[-25.43087959 123.40447998]
[-10.32439899 125.33168030]
[2.68882489 133.24217224]
[11.35417080 145.76541138]
[14.17031479 160.73168945]
[28.77491188 164.15304565]
[43.37950897 167.57441711]
[54.33213806 147.13438416]
[75.13280487 142.01435852]
[80.69929504 128.08546448]
[86.26578522 114.15657043]
[80.63128662 96.27307892]
[92.50000000 81.75754547]
[92.50000000 66.75754547]
[92.50000000 51.75754929]
[92.50000000 36.75754929]
[92.50000000 21.75754738]
[92.19986725 6.76055050]
[91.59972382 -8.22743893]
[90.99958038 -23.21542740]
[76.34392548 -26.87446976]
[63.31350327 -34.51545715]
[52.96462250 -45.51897049]
[46.13622284 -58.99300766]
[43.38185120 -73.84528351]
[44.92479324 -88.87179565]
[50.63996887 -102.85440826]
[60.06407547 -114.65961456]
[72.43314362 -123.33041382]
[86.74446869 -128.16390991]
[101.83789062 -128.76828003]
[116.48985291 -125.09452057]
[129.51260376 -117.44044495]
[139.85041809 -106.42654419]
[146.66528320 -92.94565582]
[149.40472412 -78.09061432]
[147.84669495 -63.06566238]
[142.11747742 -49.08879852]
[132.68151855 -37.29306793]
[120.30374146 -28.63469315]
[105.98757172 -23.81557274]
[106.58771515 -8.82758331]
[107.18785858 6.16040659]
[110.06916046 10.03297424]
[110.51052856 15.76967049]
[107.50000000 21.75754738]
[107.50000000 36.75754929]
[107.50000000 51.75754929]
[107.50000000 66.75754547]
[107.50000000 81.75754547]
[109.86124420 82.91805267]
[112.04702759 84.38249969]
[114.01845551 86.12483978]
[127.89096069 80.41926575]
[141.76347351 74.71369934]
[147.46321106 63.10249710]
[159.17947388 58.65176392]
[170.40711975 63.24692154]
[184.39100647 57.82006454]
[194.23716736 44.70574570]
[210.48284912 46.94395828]
[216.41590881 62.23221970]
[205.93290710 74.84327698]
[189.81787109 71.80395508]
[175.83396912 77.23081207]
[165.62850952 91.47787476]
[147.46903992 88.58620453]
[133.59652710 94.29177856]
[119.72402191 99.99734497]
[114.01658630 113.87704468]
[100.19468689 119.72306061]
[94.62818909 133.65196228]
[89.06169891 147.58085632]
[96.85062408 156.48472595]
[99.90175629 168.26220703]
[97.27549744 180.48597717]
[89.23557281 190.49618530]
[77.25472260 195.97866821]
[63.75116348 195.49592590]
[62.55183411 210.44790649]
[61.35250854 225.39988708]
[60.15318298 240.35186768]
[58.95385361 255.30383301]
[65.56298828 269.67846680]
[56.83284760 281.74636841]
[56.23270416 296.73434448]
[56.23270416 311.73434448]
[56.23270416 326.73434448]
[56.23270416 341.73434448]
[56.23270416 356.73434448]
[56.23270416 371.73434448]
[56.23270416 386.73434448]
[56.23270416 401.73434448]
[56.23270416 416.73434448]
[56.23270416 431.73434448]
[56.23270416 446.73434448]
[70.94226074 449.96591187]
[84.61303711 456.28445435]
[96.60562897 465.39443970]
[106.35910797 476.86978149]
[113.41730499 490.17376709]
[117.45008087 504.68414307]
[118.26882172 519.72222900]
[115.83523560 534.58465576]
[110.26313782 548.57629395]
[101.81314850 561.04272461]
[90.88049316 571.40081787]
[77.97650909 579.16625977]
[63.70474243 583.97564697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[29 132]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[36 54]
[37 53]
[38 52]
[56 120]
[57 119]
[58 118]
[60 97]
[61 96]
[62 95]
[63 94]
[64 93]
[65 90]
[66 89]
[67 88]
[100 116]
[101 115]
[102 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
