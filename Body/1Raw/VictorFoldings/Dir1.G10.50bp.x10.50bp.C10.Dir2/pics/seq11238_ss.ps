%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUCCCCUAGGGGGGGGGGUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAAxxxxxxxxxxUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAACCCCCCCCCCACAACCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 409.31967163]
[71.01555634 403.76666260]
[58.81560135 394.90032959]
[49.20452881 383.27801514]
[42.78650284 369.63034058]
[39.96496582 354.81515503]
[40.91728210 339.76376343]
[45.58358765 325.42233276]
[53.67055511 312.69238281]
[64.66983032 302.37411499]
[77.88998413 295.11614990]
[92.50000000 291.37469482]
[92.50000000 276.37469482]
[92.50000000 261.37469482]
[92.50000000 246.37469482]
[92.50000000 231.37469482]
[92.50000000 216.37469482]
[92.50000000 201.37469482]
[92.50000000 186.37469482]
[92.50000000 171.37469482]
[92.50000000 156.37469482]
[92.50000000 141.37469482]
[82.33375549 138.15782166]
[73.30356598 132.48716736]
[65.99011993 124.72738647]
[60.86371231 115.37747955]
[46.14819336 118.28495026]
[31.43266869 121.19242859]
[26.55306816 135.75556946]
[15.03501797 145.91578674]
[-0.02318531 148.94003296]
[-14.57095909 144.01481628]
[-24.69502640 132.46496582]
[-27.67206383 117.39736176]
[-22.70126152 102.86509705]
[-11.11974335 92.77728271]
[3.95712233 89.84749603]
[18.47373390 94.86382294]
[28.52519608 106.47690582]
[43.24071884 103.56942749]
[57.95624161 100.66195679]
[58.42538834 93.70178986]
[60.03879929 86.91496277]
[62.75206757 80.48828125]
[66.49051666 74.59861755]
[71.15124512 69.40808868]
[76.60598755 65.05953979]
[70.61769104 51.30670929]
[64.62939453 37.55387878]
[58.64109802 23.80105019]
[43.98029709 27.17382812]
[28.94937134 27.79502487]
[14.06026459 25.64348221]
[-0.17990538 20.79248238]
[-13.28612328 13.40724850]
[-24.81199646 3.73931766]
[-34.36495972 -7.88202333]
[-41.61963654 -21.06095695]
[-46.32894516 -35.34860992]
[-48.33247757 -50.25835800]
[-47.56200409 -65.28237152]
[-44.04375839 -79.90894318]
[-37.89757538 -93.63989258]
[-29.33279037 -106.00756073]
[-18.64111710 -116.59069824]
[-6.18671036 -125.02884674]
[7.60623837 -131.03460693]
[22.26794624 -134.40344238]
[37.29903793 -135.02058411]
[52.18756485 -132.86503601]
[66.42642975 -128.01019287]
[79.53065491 -120.62142181]
[91.05392456 -110.95038605]
[100.60375214 -99.32646942]
[107.85487366 -86.14558411]
[112.56033325 -71.85665894]
[114.55984497 -56.94637299]
[113.78532410 -41.92256927]
[110.26313782 -27.29694557]
[104.11325073 -13.56764889]
[95.54513550 -1.20229423]
[84.85060883 9.37796021]
[72.39392853 17.81275368]
[78.38222504 31.56558228]
[84.37052155 45.31841278]
[90.35881805 59.07123947]
[117.18169403 61.62155533]
[136.94993591 79.92967987]
[151.19664001 75.23587799]
[145.87744141 62.44771957]
[150.04231262 45.59848785]
[165.51414490 31.07810020]
[179.07604980 24.66912460]
[192.63793945 18.26014900]
[206.19984436 11.85117245]
[204.50489807 -3.19561720]
[207.78991699 -17.97693634]
[215.69854736 -30.88941765]
[227.37294006 -40.53241348]
[241.54673767 -45.85992050]
[256.68246460 -46.29405212]
[271.13830566 -41.78771591]
[283.34622192 -32.82973099]
[291.98199463 -20.39178467]
[296.10882568 -5.82305670]
[295.27911377 9.29614639]
[289.58288574 23.32580757]
[279.63793945 34.74409485]
[266.52310181 42.31243515]
[251.66096497 45.20987320]
[236.66363525 43.12211609]
[223.15791321 36.27563095]
[212.60881042 25.41306877]
[199.04692078 31.82204437]
[185.48501587 38.23102188]
[171.92312622 44.63999557]
[172.61514282 52.10800171]
[174.69117737 74.51202393]
[189.19979858 78.31987762]
[206.05497742 76.49248505]
[212.47692871 92.18308258]
[199.17730713 102.69765472]
[185.39193726 92.82850647]
[170.88331604 89.02064514]
[155.89042664 89.48257446]
[141.64373779 94.17637634]
[141.46299744 106.99539948]
[137.42794800 119.16415405]
[129.91366577 129.55145264]
[119.61869049 137.19169617]
[107.50000000 141.37469482]
[107.50000000 156.37469482]
[107.50000000 171.37469482]
[107.50000000 186.37469482]
[107.50000000 201.37469482]
[107.50000000 216.37469482]
[107.50000000 231.37469482]
[107.50000000 246.37469482]
[107.50000000 261.37469482]
[107.50000000 276.37469482]
[107.50000000 291.37469482]
[122.11001587 295.11614990]
[135.33016968 302.37411499]
[146.32945251 312.69238281]
[154.41641235 325.42233276]
[159.08271790 339.76376343]
[160.03503418 354.81515503]
[157.21350098 369.63034058]
[150.79547119 383.27801514]
[141.18440247 394.90032959]
[128.98443604 403.76666260]
[114.96250153 409.31967163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[26 41]
[27 40]
[28 39]
[47 86]
[48 85]
[49 84]
[50 83]
[88 126]
[89 125]
[92 116]
[93 115]
[94 114]
[95 113]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
