%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAAUAUUGGGGGGGGGGAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACAxxxxxxxxxxGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCCCCCCCCCCCAUAAAUACU\
) } def
/len { sequence length } bind def

/coor [
[84.47259521 359.94067383]
[70.62665558 353.92465210]
[58.91799164 344.39523315]
[50.21546936 332.05957031]
[45.16486740 317.83303833]
[44.14097595 302.77136230]
[47.21977615 287.99221802]
[54.17279434 274.59228516]
[64.48407745 263.56594849]
[77.38845825 255.73144531]
[91.92834473 251.67013550]
[91.92834473 236.67013550]
[91.92834473 221.67013550]
[91.92834473 206.67013550]
[91.92834473 191.67013550]
[91.92834473 176.67013550]
[91.92834473 161.67013550]
[91.92834473 146.67013550]
[91.92834473 131.67013550]
[91.92834473 116.67012787]
[81.94562531 105.47436523]
[67.04371643 103.76167297]
[52.14181900 102.04898834]
[37.23991394 100.33629608]
[22.33801270 98.62360382]
[7.43611002 96.91091919]
[-7.46579218 95.19822693]
[-22.05915260 101.30923462]
[-33.81975174 92.16934204]
[-48.72165298 90.45664978]
[-63.62355423 88.74396515]
[-69.92926025 91.05601501]
[-75.58775330 89.95476532]
[-79.10501862 86.63748169]
[-93.92277527 84.30638123]
[-102.55940247 96.89095306]
[-115.80523682 104.47451782]
[-131.03031921 105.55136108]
[-145.21170044 99.90766144]
[-155.53364563 88.66399384]
[-159.94673157 74.05278015]
[-157.57473755 58.97510147]
[-148.88862610 46.42463684]
[-135.61302185 38.89329147]
[-120.38381958 37.87641525]
[-106.22477722 43.57591629]
[-95.94718933 54.86014557]
[-91.59167480 69.48862457]
[-76.77391052 71.81972504]
[-61.91086578 73.84205627]
[-47.00896454 75.55474854]
[-32.10706329 77.26744080]
[-18.57958412 71.03392792]
[-5.75310278 80.29632568]
[9.14879990 82.00901031]
[24.05070114 83.72170258]
[38.95260620 85.43439484]
[53.85450745 87.14707947]
[68.75640869 88.85977173]
[83.65830994 90.57246399]
[94.31993866 80.02117157]
[92.76235962 65.10225677]
[83.63388824 52.18012238]
[90.00778198 38.71821976]
[88.45020294 23.79930687]
[73.79686737 19.84403419]
[61.56415939 10.85930347]
[53.40645981 -1.93977392]
[50.42702484 -16.82222748]
[53.02880478 -31.77532768]
[60.85992050 -44.77679062]
[72.86128998 -54.06827545]
[87.40981293 -58.39318085]
[102.53793335 -57.16660690]
[116.19968414 -50.55443192]
[126.54743958 -39.45090103]
[132.18174744 -25.35767365]
[132.34060669 -10.18074417]
[127.00253296 4.02733278]
[116.88946533 15.34503174]
[103.36911011 22.24172592]
[104.92668915 37.16063690]
[113.94374847 49.01567841]
[107.68126678 63.54467773]
[109.23885345 78.46359253]
[121.41069031 87.22979736]
[136.05418396 83.97897339]
[150.69769287 80.72814941]
[165.34118652 77.47731781]
[170.54522705 73.23167419]
[176.25294495 72.42343903]
[180.66111755 74.40928650]
[195.42716980 71.77042389]
[210.19322205 69.13155365]
[224.95927429 66.49269104]
[239.72534180 63.85382843]
[254.49139404 61.21496201]
[255.60421753 46.17460251]
[260.42324829 31.88377571]
[268.64556885 19.24081421]
[279.75427246 9.04046535]
[293.05111694 1.92393315]
[307.70019531 -1.66143262]
[322.78070068 -1.49025249]
[337.34463501 2.42671323]
[350.47650146 9.84324074]
[361.35083008 20.29312134]
[369.28402710 33.11946487]
[373.77743530 47.51599884]
[374.54855347 62.57774353]
[371.54895020 77.35790253]
[364.96719360 90.92739105]
[355.21694946 102.43321228]
[342.91119385 111.15210724]
[328.82345581 116.53598785]
[313.83929443 118.24642181]
[298.90060425 116.17590332]
[284.94650269 110.45456696]
[272.85412598 101.44207764]
[263.38360596 89.70496368]
[257.13024902 75.98101807]
[242.36419678 78.61988068]
[227.59814453 81.25875092]
[212.83209229 83.89761353]
[198.06604004 86.53647614]
[183.29997253 89.17533875]
[168.59201050 92.12081909]
[153.94851685 95.37165070]
[139.30500793 98.62247467]
[124.66151428 101.87329865]
[106.92834473 116.67012787]
[106.92834473 131.67013550]
[106.92834473 146.67013550]
[106.92834473 161.67013550]
[106.92834473 176.67013550]
[106.92834473 191.67013550]
[106.92834473 206.67013550]
[106.92834473 221.67013550]
[106.92834473 236.67013550]
[106.92834473 251.67013550]
[121.46823883 255.73144531]
[134.37261963 263.56594849]
[144.68389893 274.59228516]
[151.63691711 287.99221802]
[154.71571350 302.77136230]
[153.69183350 317.83303833]
[148.64123535 332.05957031]
[139.93870544 344.39523315]
[128.23004150 353.92465210]
[114.38410187 359.94067383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[31 50]
[34 49]
[35 48]
[61 85]
[62 84]
[64 82]
[65 81]
[86 130]
[87 129]
[88 128]
[89 127]
[92 126]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
