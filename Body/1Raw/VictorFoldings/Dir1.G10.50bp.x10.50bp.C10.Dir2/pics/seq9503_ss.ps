%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCCUGGGGGGGGGGAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGxxxxxxxxxxAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCCCCCCCCCCCUCCUAUCCCU\
) } def
/len { sequence length } bind def

/coor [
[82.50775909 376.62884521]
[69.94953156 368.27767944]
[59.86331177 357.06521606]
[52.88311768 343.69631958]
[49.44773483 329.01132202]
[49.77311325 313.93338013]
[53.83879471 299.41024780]
[61.38921738 286.35491943]
[71.94974518 275.58801270]
[84.85653687 267.78637695]
[99.29827118 263.44042969]
[98.67429352 248.45341492]
[98.05031586 233.46640015]
[97.42633820 218.47938538]
[96.80236053 203.49235535]
[96.17838287 188.50534058]
[95.55440521 173.51832581]
[94.93042755 158.53131104]
[94.30644989 143.54429626]
[93.68247223 128.55728149]
[93.05849457 113.57026672]
[82.73129272 102.69143677]
[67.79698181 101.28913879]
[52.86267471 99.88683319]
[37.92836761 98.48452759]
[22.99405861 97.08222198]
[8.05975056 95.67992401]
[-8.45660591 103.75394440]
[-22.38319588 93.12144470]
[-37.34344482 92.03013611]
[-52.30369186 90.93881989]
[-60.97956085 103.53550720]
[-74.70507812 110.05524445]
[-89.75112915 108.83752441]
[-102.08496094 100.30918884]
[-108.45111084 86.84301758]
[-123.41135406 85.75170898]
[-137.92857361 93.37943268]
[-151.64660645 84.39345551]
[-150.45349121 68.03776550]
[-135.57662964 61.13770294]
[-122.32004547 70.79145813]
[-107.35980225 71.88276672]
[-99.10680389 59.48302460]
[-85.66588593 52.83489227]
[-70.60240173 53.81357956]
[-57.96834183 62.25617599]
[-51.21238327 75.97857666]
[-36.25213242 77.06988525]
[-21.29188538 78.16119385]
[-11.89824867 70.47569275]
[0.61308002 71.30371094]
[9.46205425 80.74561310]
[24.39636230 82.14791870]
[39.33066940 83.55022430]
[54.26497650 84.95252228]
[69.19928741 86.35482788]
[84.13359070 87.75713348]
[76.20832825 75.02174377]
[80.63431549 60.68958664]
[94.36050415 54.64048767]
[107.92481232 61.04436874]
[111.97671509 75.48674011]
[103.72312927 88.01175690]
[114.81444550 77.91310120]
[125.90576172 67.81445312]
[136.99708557 57.71580505]
[141.99212646 42.70380783]
[156.61203003 39.85638046]
[167.70333862 29.75773239]
[159.95555115 16.85953712]
[154.87471008 2.70211816]
[152.65434265 -12.16976929]
[153.37792969 -27.18426704]
[157.01579285 -41.76440430]
[163.42630005 -55.35026550]
[172.36137390 -67.42049408]
[183.47610474 -77.51229858]
[196.34205627 -85.23921204]
[210.46377563 -90.30584717]
[225.29786682 -92.51925659]
[240.27394104 -91.79621887]
[254.81651306 -88.16638184]
[268.36709595 -81.77108765]
[280.40567017 -72.85781097]
[291.49697876 -82.95645905]
[302.58831787 -93.05510712]
[307.58334351 -108.06710815]
[322.20324707 -110.91453552]
[333.29455566 -121.01318359]
[344.38589478 -131.11183167]
[342.54452515 -146.51927185]
[350.14047241 -160.05001831]
[364.25296021 -166.50122070]
[379.45538330 -163.39227295]
[389.90216064 -151.91862488]
[391.57626343 -136.49212646]
[383.83395386 -123.04457092]
[369.65234375 -116.74683380]
[354.48452759 -120.02051544]
[343.39321899 -109.92186737]
[332.30191040 -99.82321930]
[328.10018921 -85.53354645]
[312.68695068 -81.96379089]
[301.59564209 -71.86514282]
[290.50433350 -61.76649475]
[298.25311279 -48.94735336]
[303.35360718 -34.85824585]
[305.60800171 -20.04003143]
[304.92779541 -5.06194448]
[301.33731079 9.50026512]
[294.97265625 23.08646965]
[286.07678223 35.17370605]
[274.99008179 45.29631042]
[262.13742065 53.06384659]
[248.01174927 58.17618179]
[233.15538025 60.43506241]
[218.13899231 59.75182343]
[203.53981018 56.15085220]
[189.91938782 49.76873016]
[177.80198669 40.84904861]
[166.71067810 50.94769669]
[162.50895691 65.23737335]
[147.09573364 68.80712128]
[136.00440979 78.90576935]
[124.91310120 89.00441742]
[113.82178497 99.10307312]
[108.04550934 112.94628906]
[108.66948700 127.93330383]
[109.29346466 142.92031860]
[109.91744232 157.90733337]
[110.54141998 172.89434814]
[111.16539764 187.88136292]
[111.78937531 202.86837769]
[112.41335297 217.85540771]
[113.03733063 232.84242249]
[113.66130829 247.82943726]
[114.28528595 262.81643677]
[129.03828430 265.94689941]
[142.54891968 272.64865112]
[153.96791077 282.50042725]
[162.57742310 294.88296509]
[167.83625793 309.01785278]
[169.41386414 324.01660156]
[167.21105957 338.93634033]
[161.36631775 352.83920288]
[152.24703979 364.85125732]
[140.42646790 374.21740723]
[126.64765930 380.34890747]
[111.77675629 382.86032104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[29 50]
[30 49]
[31 48]
[36 43]
[37 42]
[64 127]
[65 126]
[66 125]
[67 124]
[69 122]
[70 121]
[85 106]
[86 105]
[87 104]
[89 102]
[90 101]
[91 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
