%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCACCCUAGGGGGGGGGGUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUxxxxxxxxxxACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUCCCCCCCCCCUCUCACCCUA\
) } def
/len { sequence length } bind def

/coor [
[90.48387146 499.10067749]
[76.63793182 493.08465576]
[64.92927551 483.55523682]
[56.22674942 471.21957397]
[51.17614746 456.99304199]
[50.15225601 441.93136597]
[53.23105240 427.15222168]
[60.18407440 413.75228882]
[70.49536133 402.72595215]
[83.39974213 394.89144897]
[97.93962860 390.83013916]
[97.93962860 375.83013916]
[97.93962860 360.83013916]
[97.93962860 345.83013916]
[97.93962860 330.83013916]
[97.93962860 315.83013916]
[97.93962860 300.83013916]
[97.93962860 285.83013916]
[97.93962860 270.83013916]
[97.93962860 255.83012390]
[94.77404785 249.09776306]
[98.09890747 240.51887512]
[98.41096497 225.52212524]
[98.72302246 210.52537537]
[97.78739166 195.55458069]
[95.61055756 180.71337891]
[83.54542542 172.05496216]
[81.12638855 157.03486633]
[90.28993988 144.43856812]
[88.11310577 129.59735107]
[85.93627167 114.75614929]
[75.27464294 104.20486450]
[60.41159439 102.18252563]
[45.54854965 100.16019440]
[30.68550110 98.13785553]
[15.82245445 96.11552429]
[0.95940721 94.09319305]
[-13.75792694 99.89927673]
[-25.32583618 90.51670074]
[-41.83553696 94.37236786]
[-50.11086273 79.57522583]
[-38.18283844 67.52704620]
[-23.30350113 75.65364838]
[-9.64927197 69.70291138]
[2.98174167 79.23014069]
[17.84478951 81.25247955]
[32.70783615 83.27481079]
[47.57088089 85.29714203]
[62.43392944 87.31948090]
[77.29697418 89.34181213]
[83.64410400 75.75086212]
[72.55278778 65.65221405]
[61.46147537 55.55356598]
[45.33314133 52.58558273]
[40.09501648 37.04550171]
[51.13563156 24.91962814]
[67.09735107 28.68201828]
[71.56012726 44.46224976]
[82.65144348 54.56089783]
[93.74275208 64.65954590]
[101.12578583 63.34011459]
[94.05313110 50.11220551]
[104.44807434 39.29808426]
[117.94511414 45.84253311]
[115.89183807 60.70125198]
[123.27486420 59.38182068]
[130.18186951 46.06666565]
[137.08886719 32.75150681]
[125.02597046 23.78029251]
[114.55846405 12.99013138]
[105.95748901 0.66051579]
[99.44583130 -12.88918686]
[95.19215393 -27.30800819]
[93.30663300 -42.22246170]
[93.83811951 -57.24623489]
[96.77283478 -71.99016571]
[102.03477478 -86.07236481]
[109.48763275 -99.12805176]
[118.93836212 -110.81906891]
[130.14216614 -120.84258270]
[142.80885315 -128.93896484]
[156.61030579 -134.89848328]
[171.18905640 -138.56680298]
[186.16744995 -139.84887695]
[201.15753174 -138.71150208]
[215.77101135 -135.18415833]
[229.62937927 -129.35818481]
[242.37365723 -121.38450623]
[253.67375183 -111.46965790]
[263.23693848 -99.87045288]
[270.81552124 -86.88734436]
[276.21322632 -72.85662079]
[279.29019165 -58.14171982]
[279.96673584 -43.12377930]
[278.22531128 -28.19181061]
[274.11108398 -13.73258495]
[267.73059082 -0.12063030]
[259.24908447 12.29147053]
[248.88626099 23.18221474]
[236.91056824 32.26950455]
[223.63218689 39.31795883]
[209.39505005 44.14500427]
[194.56796265 46.62561035]
[179.53495789 46.69551849]
[164.68542480 44.35292816]
[150.40402222 39.65850830]
[143.49702454 52.97366333]
[136.59002686 66.28881836]
[140.50932312 87.74530792]
[134.46374512 105.45376587]
[122.54672241 115.67969513]
[109.82224274 117.45989227]
[100.77747345 112.57931519]
[102.95430756 127.42051697]
[105.13114929 142.26171875]
[117.52603149 151.69595337]
[119.52223969 166.77804565]
[110.45176697 178.53654480]
[112.62860107 193.37774658]
[121.20587921 181.07205200]
[135.32476807 176.00675964]
[149.76861572 180.05342102]
[159.20069885 191.71685791]
[160.13606262 206.68766785]
[152.22909546 219.43443298]
[138.40129089 225.24748230]
[123.76171112 221.97900391]
[113.71977997 210.83743286]
[113.40772247 225.83418274]
[113.09566498 240.83093262]
[112.93962860 255.83012390]
[112.93962860 270.83013916]
[112.93962860 285.83013916]
[112.93962860 300.83013916]
[112.93962860 315.83013916]
[112.93962860 330.83013916]
[112.93962860 345.83013916]
[112.93962860 360.83013916]
[112.93962860 375.83013916]
[112.93962860 390.83013916]
[127.47951508 394.89144897]
[140.38389587 402.72595215]
[150.69517517 413.75228882]
[157.64820862 427.15222168]
[160.72700500 441.93136597]
[159.70310974 456.99304199]
[154.65251160 471.21957397]
[145.94998169 483.55523682]
[134.24131775 493.08465576]
[120.39538574 499.10067749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[25 119]
[26 118]
[29 115]
[30 114]
[31 113]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[39 43]
[51 60]
[52 59]
[53 58]
[66 108]
[67 107]
[68 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
