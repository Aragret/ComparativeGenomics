%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUUACUAAGGGGGGGGGGUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCxxxxxxxxxxUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUCCCCCCCCCCAACAUGACUAA\
) } def
/len { sequence length } bind def

/coor [
[84.99699402 361.23336792]
[70.97505188 355.68035889]
[58.77509308 346.81402588]
[49.16402435 335.19171143]
[42.74599838 321.54400635]
[39.92446136 306.72882080]
[40.87677765 291.67742920]
[45.54308319 277.33602905]
[53.63004684 264.60607910]
[64.62932587 254.28779602]
[77.84947968 247.02981567]
[92.45949554 243.28837585]
[92.45949554 228.28837585]
[92.45949554 213.28837585]
[92.45949554 198.28837585]
[92.45949554 183.28837585]
[92.45949554 168.28837585]
[92.45949554 153.28837585]
[92.45949554 138.28837585]
[92.45949554 123.28837585]
[92.45949554 108.28837585]
[79.96849060 116.59349060]
[65.62432098 112.20661163]
[59.91549301 98.33544159]
[67.01633453 85.12264252]
[81.73467255 82.22946167]
[93.30813599 91.77084351]
[94.84542847 76.84983063]
[96.38272095 61.92881393]
[97.92001343 47.00779724]
[83.12149811 44.52656555]
[68.51015472 41.11174393]
[54.14480209 36.77708817]
[40.08329391 31.54005051]
[26.38225555 25.42171669]
[13.09684944 18.44672585]
[0.28057402 10.64316082]
[-12.01496315 2.04244637]
[-23.74025345 -7.32078600]
[-34.84807968 -17.40883255]
[-45.29371643 -28.18107414]
[-55.03510666 -39.59413147]
[-64.03302002 -51.60205078]
[-72.25122070 -64.15647888]
[-79.65662384 -77.20686340]
[-86.21940613 -90.70065308]
[-91.91314697 -104.58351135]
[-96.71491241 -118.79954529]
[-100.60537720 -133.29150391]
[-103.56886292 -148.00103760]
[-105.59344482 -162.86891174]
[-106.67097473 -177.83525085]
[-106.79709625 -192.83979797]
[-105.97132111 -207.82214355]
[-104.19696045 -222.72195435]
[-101.48117065 -237.47921753]
[-97.83487701 -252.03453064]
[-93.27277374 -266.32928467]
[-87.81321716 -280.30587769]
[-81.47820282 -293.90811157]
[-74.29322815 -307.08111572]
[-66.28723145 -319.77194214]
[-57.49245834 -331.92941284]
[-47.94430923 -343.50463867]
[-37.68123245 -354.45092773]
[-26.74456406 -364.72430420]
[-15.17833328 -374.28332520]
[-3.02911735 -383.08950806]
[9.65416336 -391.10742188]
[22.82043839 -398.30474854]
[36.41668701 -404.65255737]
[50.38816833 -410.12524414]
[64.67861938 -414.70077515]
[79.23049927 -418.36074829]
[93.98521423 -421.09039307]
[108.88334656 -422.87875366]
[123.86490631 -423.71859741]
[138.86956787 -423.60656738]
[153.83691406 -422.54309082]
[168.70668030 -420.53247070]
[183.41899109 -417.58282471]
[197.91459656 -413.70596313]
[212.13513184 -408.91757202]
[226.02334595 -403.23687744]
[239.52328491 -396.68676758]
[252.58062744 -389.29360962]
[265.14276123 -381.08721924]
[277.15911865 -372.10058594]
[288.58132935 -362.36993408]
[299.36337280 -351.93441772]
[309.46185303 -340.83605957]
[318.83612061 -329.11956787]
[327.44836426 -316.83212280]
[335.26397705 -304.02319336]
[342.25143433 -290.74432373]
[348.38262939 -277.04904175]
[353.63287354 -262.99246216]
[357.98104858 -248.63119507]
[361.40957642 -234.02307129]
[363.90472412 -219.22688293]
[365.45639038 -204.30224609]
[366.05834961 -189.30924988]
[365.70819092 -174.30824280]
[364.40731812 -159.35966492]
[362.16094971 -144.52368164]
[358.97814941 -129.86004639]
[354.87170410 -115.42779541]
[349.85821533 -101.28504944]
[343.95779419 -87.48875427]
[337.19427490 -74.09445953]
[329.59481812 -61.15610886]
[321.19006348 -48.72579575]
[312.01385498 -36.85357666]
[302.10311890 -25.58724785]
[291.49780273 -14.97218418]
[280.24057007 -5.05112457]
[268.37680054 4.13598061]
[255.95419312 12.55213833]
[243.02282715 20.16345787]
[229.63475037 26.93929482]
[215.84387207 32.85235977]
[201.70573425 37.87884903]
[187.27726746 41.99851608]
[172.61654663 45.19477463]
[157.78263855 47.45475769]
[142.83525085 48.76936340]
[127.83457947 49.13329315]
[112.84103394 48.54508972]
[111.30374146 63.46610641]
[109.76644897 78.38712311]
[108.22915649 93.30813599]
[107.45949554 108.28837585]
[107.45949554 123.28837585]
[107.45949554 138.28837585]
[107.45949554 153.28837585]
[107.45949554 168.28837585]
[107.45949554 183.28837585]
[107.45949554 198.28837585]
[107.45949554 213.28837585]
[107.45949554 228.28837585]
[107.45949554 243.28837585]
[122.06950378 247.02981567]
[135.28967285 254.28779602]
[146.28894043 264.60607910]
[154.37590027 277.33602905]
[159.04220581 291.67742920]
[159.99452209 306.72882080]
[157.17298889 321.54400635]
[150.75495911 335.19171143]
[141.14389038 346.81402588]
[128.94393921 355.68035889]
[114.92199707 361.23336792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 131]
[28 130]
[29 129]
[30 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
