%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGACCCUGGGGGGGGGGAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUxxxxxxxxxxACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCCCCCCCCCCCUUCCACCCU\
) } def
/len { sequence length } bind def

/coor [
[38.75547409 303.90808105]
[26.87011719 299.95355225]
[15.23788452 295.30688477]
[3.89904189 289.98422241]
[-7.10716295 284.00393677]
[-17.74263382 277.38677979]
[-27.97055817 270.15560913]
[-37.75553513 262.33547974]
[-47.06369400 253.95346069]
[-55.86281586 245.03855896]
[-64.12244415 235.62161255]
[-76.01482391 244.76335144]
[-87.90720367 253.90509033]
[-94.13283539 268.44992065]
[-108.93883514 270.07220459]
[-120.83121490 279.21392822]
[-132.72358704 288.35568237]
[-144.61596680 297.49740601]
[-156.50834656 306.63912964]
[-160.00596619 322.29629517]
[-174.49046326 329.19400024]
[-188.85060120 322.04095459]
[-192.07049561 306.32434082]
[-181.68011475 294.10061646]
[-165.65008545 294.74676514]
[-153.75770569 285.60504150]
[-141.86532593 276.46328735]
[-129.97294617 267.32156372]
[-118.08056641 258.17984009]
[-112.70555115 244.28887939]
[-97.04893494 242.01271057]
[-85.15655518 232.87097168]
[-73.26417542 223.72923279]
[-79.82448578 213.98487854]
[-85.83737183 203.89353943]
[-91.28454590 193.48593140]
[-96.14942169 182.79374695]
[-100.41718292 171.84950256]
[-104.07484436 160.68655396]
[-107.11126709 149.33886719]
[-109.51720428 137.84097290]
[-111.28534698 126.22789001]
[-112.41029358 114.53496552]
[-112.88863373 102.79779053]
[-112.71891022 91.05210114]
[-111.90162659 79.33365631]
[-110.43929291 67.67811584]
[-108.33633423 56.12097168]
[-105.59917450 44.69739914]
[-102.23613739 33.44218063]
[-98.25746155 22.38957214]
[-93.67525482 11.57322407]
[-88.50347137 1.02606094]
[-82.75785065 -9.21980953]
[-76.45588684 -19.13319778]
[-69.61676025 -28.68392563]
[-62.26129913 -37.84291840]
[-54.41188431 -46.58229446]
[-46.09241486 -54.87545013]
[-37.32821655 -62.69713974]
[-28.14596939 -70.02355194]
[-18.57362366 -76.83238983]
[-8.64032269 -83.10292053]
[1.62369740 -88.81605530]
[12.18719101 -93.95439911]
[23.01800156 -98.50231934]
[34.08315659 -102.44596100]
[45.34897232 -105.77333069]
[56.78115845 -108.47428894]
[68.34490967 -110.54061890]
[80.00502014 -111.96603394]
[91.72599792 -112.74618530]
[103.47216797 -112.87870789]
[115.20776367 -112.36318207]
[126.89706421 -111.20120239]
[138.50448608 -109.39627838]
[149.99470520 -106.95392609]
[161.33271790 -103.88157654]
[172.48402405 -100.18856812]
[183.41468811 -95.88616180]
[194.09141541 -90.98744202]
[204.48171997 -85.50733185]
[214.55395508 -79.46250153]
[223.06504822 -91.81407166]
[231.57614136 -104.16564941]
[225.52709961 -118.35764313]
[228.13363647 -133.56321716]
[238.56398010 -144.93032837]
[253.48988342 -148.83177185]
[268.14849854 -144.02261353]
[277.86236572 -132.03744507]
[279.53179932 -116.70066833]
[272.62408447 -102.90621185]
[259.34344482 -95.05583191]
[243.92770386 -95.65455627]
[235.41662598 -83.30298615]
[226.90553284 -70.95140839]
[252.00082397 -49.08100510]
[273.38043213 -23.56627655]
[290.52169800 4.96905994]
[303.00561523 35.82745361]
[310.52700806 68.25456238]
[325.42892456 66.54187012]
[340.33081055 64.82917786]
[355.23272705 63.11648941]
[370.13461304 61.40380096]
[377.64477539 47.82523727]
[391.71609497 41.28481293]
[406.93792725 44.29745483]
[417.45712280 55.70474243]
[419.22885132 71.12033844]
[411.57183838 84.61663055]
[397.43038940 91.00402832]
[382.24215698 87.82643127]
[371.84732056 76.30570221]
[356.94540405 78.01839447]
[342.04351807 79.73107910]
[327.14160156 81.44377136]
[312.23971558 83.15646362]
[312.86291504 95.66693115]
[312.74932861 108.19239044]
[311.89938354 120.68949890]
[310.31594849 133.11499023]
[308.00454712 145.42587280]
[304.97317505 157.57951355]
[301.23229980 169.53384399]
[296.79492188 181.24749756]
[291.67636108 192.67993164]
[285.89434814 203.79156494]
[279.46890259 214.54394531]
[272.42224121 224.89985657]
[264.77874756 234.82344055]
[256.56494141 244.28034973]
[247.80918884 253.23786926]
[238.54182434 261.66497803]
[228.79490662 269.53250122]
[218.60220337 276.81323242]
[207.99897766 283.48193359]
[197.02192688 289.51556396]
[185.70904541 294.89318848]
[174.09950256 299.59625244]
[162.23348999 303.60842896]
[150.15203857 306.91586304]
[137.89701843 309.50708008]
[125.51081085 311.37310791]
[113.03630829 312.50753784]
[100.51667786 312.90640259]
[87.99526215 312.56829834]
[75.51539612 311.49444580]
[63.12028503 309.68853760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 33]
[12 32]
[13 31]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[83 97]
[84 96]
[85 95]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
