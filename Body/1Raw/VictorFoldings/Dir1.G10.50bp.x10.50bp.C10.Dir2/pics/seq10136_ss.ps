%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCCUGAGGGGGGGGGGGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUAxxxxxxxxxxUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCCCCCCCCCCCAACUCAUGAG\
) } def
/len { sequence length } bind def

/coor [
[83.28459167 390.89401245]
[71.18965149 381.85989380]
[61.98151779 369.89691162]
[56.34348297 355.89279175]
[54.69393539 340.88674927]
[57.15528107 325.99230957]
[63.54486465 312.31475830]
[73.38854218 300.86901855]
[85.95585632 292.50448608]
[100.31420898 287.84185791]
[99.69023132 272.85482788]
[99.06625366 257.86782837]
[98.44227600 242.88081360]
[97.81829834 227.89379883]
[97.19432068 212.90678406]
[96.57034302 197.91975403]
[95.94636536 182.93273926]
[95.32238770 167.94572449]
[94.69841003 152.95870972]
[94.07444000 137.97169495]
[87.43474579 136.31909180]
[81.19334412 133.51524353]
[75.54807281 129.64903259]
[70.67787933 124.84301758]
[66.73713684 119.24951935]
[63.85075760 113.04586029]
[62.11023331 106.42866516]
[61.57073975 99.60770416]
[62.24937057 92.79917145]
[48.34681320 87.16721344]
[34.44425583 81.53525543]
[18.74866867 83.52500916]
[9.85763836 71.57516479]
[-4.04491806 65.94320679]
[-17.94747353 60.31124878]
[-31.85003090 54.67929459]
[-45.75258636 49.04733658]
[-57.95529938 53.35403824]
[-69.44258881 48.32800293]
[-74.24218750 37.18030548]
[-88.02457428 31.26034355]
[-101.80695343 25.34037971]
[-115.58933258 19.42041588]
[-128.85475159 27.47077370]
[-144.31576538 26.15288162]
[-156.02728271 15.97349930]
[-159.48600769 0.84680444]
[-153.36196899 -13.41067886]
[-140.00999451 -21.31665802]
[-124.56420135 -19.83112144]
[-112.96379089 -9.52528954]
[-109.66937256 5.63803530]
[-95.88699341 11.55799866]
[-82.10460663 17.47796059]
[-68.32222748 23.39792442]
[-51.06400299 20.37242699]
[-40.12062836 35.14477921]
[-26.21807289 40.77673721]
[-12.31551743 46.40869522]
[1.58703876 52.04064941]
[15.48959446 57.67260742]
[30.19077873 55.28002167]
[40.07621384 67.63270569]
[53.97877121 73.26465607]
[67.88132477 78.89661407]
[92.06183624 62.39750290]
[120.84799194 67.71496582]
[131.28779602 56.94415665]
[141.72761536 46.17334747]
[152.16741943 35.40254211]
[144.30119324 23.13246536]
[139.37828064 9.42195797]
[137.64451599 -5.03444910]
[139.18423462 -19.50523567]
[143.91622925 -33.25891495]
[151.59797668 -45.60099792]
[161.83813477 -55.90907669]
[174.11643982 -63.66419983]
[187.81011963 -68.47700500]
[202.22552490 -70.10726166]
[216.63320923 -68.47587585]
[230.30493164 -63.66868591]
[242.55033875 -55.93199158]
[253.21195984 -66.48328400]
[263.87359619 -77.03456879]
[274.53521729 -87.58586121]
[285.19683838 -98.13715363]
[286.21469116 -102.51042175]
[288.38287354 -105.95570374]
[291.25543213 -108.22072601]
[294.35015869 -109.22901154]
[297.21090698 -109.07598114]
[308.71270752 -118.70450592]
[309.85852051 -134.46720886]
[321.86911011 -144.73956299]
[337.61880493 -143.42716980]
[347.76361084 -131.30865479]
[346.28479004 -115.57369995]
[334.05969238 -105.55759430]
[318.34124756 -107.20270538]
[306.83944702 -97.57417297]
[295.74813843 -87.47552490]
[285.08651733 -76.92423248]
[274.42486572 -66.37294769]
[263.76324463 -55.82165527]
[253.10162354 -45.27036667]
[261.12469482 -32.04975128]
[265.76791382 -17.28951073]
[266.75958252 -1.83926368]
[264.03842163 13.41061211]
[257.75723267 27.58029175]
[248.27429199 39.85127258]
[236.13294983 49.51364136]
[222.03053284 56.00714874]
[206.77824402 58.95370865]
[191.25454712 58.17937851]
[176.35449219 53.72465515]
[162.93823242 45.84235382]
[152.49842834 56.61316299]
[142.05860901 67.38397217]
[131.61880493 78.15477753]
[135.93486023 86.37472534]
[138.15374756 95.38984680]
[138.14598083 104.67401123]
[135.91200256 113.68540192]
[131.58218384 121.89811707]
[125.40923309 128.83283997]
[117.75338745 134.08488464]
[109.06145477 137.34771729]
[109.68543243 152.33473206]
[110.30941010 167.32174683]
[110.93338776 182.30876160]
[111.55736542 197.29579163]
[112.18133545 212.28280640]
[112.80531311 227.26982117]
[113.42929077 242.25683594]
[114.05326843 257.24383545]
[114.67724609 272.23086548]
[115.30122375 287.21789551]
[129.99746704 290.67083740]
[143.21658325 297.96176147]
[153.97763062 308.54962158]
[161.48204041 321.64871216]
[165.17297363 336.28701782]
[164.77650452 351.37823486]
[160.32208252 365.80255127]
[152.14022827 378.48956299]
[140.83811951 388.49777222]
[127.25441742 395.08456421]
[112.39714813 397.76113892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[29 65]
[30 64]
[31 63]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[40 55]
[41 54]
[42 53]
[43 52]
[67 121]
[68 120]
[69 119]
[70 118]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
