%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAGAACGGGGGGGGGGCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCAxxxxxxxxxxUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUCCCCCCCCCCAACAAUGAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 392.61318970]
[71.19830322 386.59716797]
[59.48964310 377.06774902]
[50.78712082 364.73208618]
[45.73651886 350.50555420]
[44.71262741 335.44387817]
[47.79142761 320.66473389]
[54.74444962 307.26480103]
[65.05573273 296.23846436]
[77.96011353 288.40396118]
[92.50000000 284.34265137]
[92.50000000 269.34265137]
[92.50000000 254.34263611]
[92.50000000 239.34263611]
[92.50000000 224.34263611]
[92.50000000 209.34263611]
[92.50000000 194.34263611]
[92.50000000 179.34263611]
[92.50000000 164.34263611]
[92.50000000 149.34263611]
[81.43263245 146.32708740]
[71.34606171 140.86437988]
[62.77308273 133.24308777]
[56.16655350 123.86577606]
[51.87545776 113.22779846]
[50.12646103 101.89108276]
[51.01195145 90.45446777]
[36.88714600 85.40571594]
[22.76234436 80.35695648]
[13.56184673 80.40892029]
[8.39806843 75.05345154]
[-5.61864471 69.71193695]
[-19.63535881 64.37042999]
[-35.28615570 66.68627167]
[-44.42386246 54.92398071]
[-58.44057465 49.58246994]
[-65.12203217 50.26484299]
[-70.33299255 47.79965210]
[-72.92158508 43.71618271]
[-86.70396423 37.79621887]
[-100.48634338 31.87625504]
[-114.26873016 25.95629120]
[-126.52612305 35.21112061]
[-141.77070618 37.08141708]
[-155.90177917 31.06407738]
[-165.11814880 18.77773476]
[-166.94064331 3.52735615]
[-160.87904358 -10.58478451]
[-148.56387329 -19.76259232]
[-133.30786133 -21.53728294]
[-119.21478271 -15.43147182]
[-110.07562256 -3.08759451]
[-108.34876251 12.17391014]
[-94.56638336 18.09387398]
[-80.78400421 24.01383591]
[-67.00161743 29.93379974]
[-53.09906387 35.56575775]
[-39.08235168 40.90726852]
[-24.43412399 38.20935822]
[-14.29384518 50.35371399]
[-0.27713233 55.69522476]
[13.73958111 61.03673935]
[27.81110001 66.23215485]
[41.93590164 71.28091431]
[56.06070709 76.32966614]
[72.11016083 58.61035156]
[94.55907440 50.38808060]
[95.18305206 35.40106583]
[81.15740967 29.65151978]
[69.94616699 19.44936752]
[62.90314102 6.02656794]
[60.87880325 -8.99600983]
[64.11759949 -23.80431747]
[72.22843933 -36.61017990]
[84.23189545 -45.86722565]
[98.67848969 -50.45762253]
[113.82372284 -49.82705688]
[127.83874512 -44.05167389]
[139.03115845 -33.82888031]
[146.04943848 -20.39312363]
[148.04609680 -5.36684084]
[144.78001404 9.43547344]
[136.64558411 22.22636604]
[124.62509155 31.46127510]
[110.17006683 36.02504349]
[109.54608917 51.01205826]
[122.98159790 55.69659042]
[134.54922485 63.98199081]
[146.44160461 54.84025574]
[158.33398438 45.69852066]
[170.13063049 36.43357086]
[181.83024597 27.04640961]
[193.52987671 17.65924835]
[205.22949219 8.27208614]
[208.40061951 -7.45443630]
[222.73849487 -14.65199566]
[237.24433899 -7.79923916]
[240.79049683 7.84698439]
[230.65666199 20.28423119]
[214.61665344 19.97171021]
[202.91703796 29.35887146]
[191.21740723 38.74603271]
[179.51779175 48.13319397]
[176.24777222 54.81545639]
[167.47572327 57.59090042]
[155.58334351 66.73263550]
[143.69096375 75.87436676]
[146.86489868 82.83528900]
[148.93768311 90.19951630]
[149.86061096 97.79402924]
[149.61198425 105.44036102]
[164.10757446 109.29752350]
[178.60317993 113.15468597]
[188.49987793 101.53495789]
[202.46157837 95.36781311]
[217.71617126 95.87774658]
[231.23484802 102.96351624]
[240.33348083 115.21822357]
[243.20549011 130.20869446]
[239.28067017 144.95855713]
[229.33828735 156.53923035]
[215.35241699 162.65133667]
[200.09994507 162.08132935]
[186.60926819 154.94238281]
[177.55897522 142.65194702]
[174.74601746 127.65027618]
[160.25041199 123.79312134]
[145.75482178 119.93595886]
[136.61131287 133.91987610]
[123.36487579 144.10247803]
[107.50000000 149.34263611]
[107.50000000 164.34263611]
[107.50000000 179.34263611]
[107.50000000 194.34263611]
[107.50000000 209.34263611]
[107.50000000 224.34263611]
[107.50000000 239.34263611]
[107.50000000 254.34263611]
[107.50000000 269.34265137]
[107.50000000 284.34265137]
[122.03988647 288.40396118]
[134.94427490 296.23846436]
[145.25555420 307.26480103]
[152.20857239 320.66473389]
[155.28736877 335.44387817]
[154.26348877 350.50555420]
[149.21287537 364.73208618]
[140.51036072 377.06774902]
[128.80169678 386.59716797]
[114.95575714 392.61318970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 65]
[28 64]
[29 63]
[31 62]
[32 61]
[33 60]
[35 58]
[36 57]
[39 56]
[40 55]
[41 54]
[42 53]
[67 86]
[68 85]
[88 107]
[89 106]
[90 105]
[91 103]
[92 102]
[93 101]
[94 100]
[111 128]
[112 127]
[113 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
