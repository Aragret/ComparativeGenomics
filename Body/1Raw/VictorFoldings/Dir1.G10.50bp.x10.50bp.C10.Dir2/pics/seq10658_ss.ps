%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAAAAAGGGGGGGGGGACUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCxxxxxxxxxxGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACCCCCCCCCCCAUCAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[61.27684784 573.86065674]
[47.43090820 567.84460449]
[35.72224808 558.31518555]
[27.01972198 545.97955322]
[21.96912193 531.75299072]
[20.94523048 516.69134521]
[24.02402878 501.91217041]
[30.97705078 488.51223755]
[41.28833389 477.48590088]
[54.19271469 469.65139771]
[68.73260498 465.59008789]
[68.73260498 450.59008789]
[68.73260498 435.59008789]
[68.73260498 420.59008789]
[68.73260498 405.59008789]
[68.73260498 390.59008789]
[68.73260498 375.59008789]
[68.73260498 360.59008789]
[68.73260498 345.59008789]
[68.73260498 330.59008789]
[60.38404465 321.78048706]
[60.29961777 309.24206543]
[69.07270050 299.72961426]
[69.38475800 284.73284912]
[69.69681549 269.73611450]
[70.00886536 254.73934937]
[58.91361237 264.83367920]
[43.93368149 265.60937500]
[31.85513496 256.71505737]
[28.14967155 242.17994690]
[34.49590302 228.58857727]
[48.01892471 222.09797668]
[62.59267044 225.64845276]
[71.61521912 237.63197327]
[74.10033417 222.83927917]
[67.07109833 206.78967285]
[78.82923889 192.65722656]
[81.00607300 177.81600952]
[83.18290710 162.97480774]
[85.35974884 148.13360596]
[87.53658295 133.29240417]
[73.55053711 123.75176239]
[65.56367493 108.82382202]
[65.38755798 91.89449310]
[73.06213379 76.80362701]
[86.84667206 66.97409058]
[84.36155701 52.18138504]
[71.77308655 43.00706482]
[69.46354675 27.96975708]
[78.28743744 16.02511024]
[75.80232239 1.23240387]
[72.09616089 -13.30253220]
[67.19461060 -27.47908974]
[62.29305649 -41.65564728]
[47.31756973 -40.01781845]
[32.35315704 -41.75392914]
[18.15042686 -46.77689743]
[5.42178488 -54.83477402]
[-5.19430780 -65.52338409]
[-13.16535091 -78.30657959]
[-18.09152031 -92.54317474]
[-19.72572327 -107.51905823]
[-17.98598671 -122.48305511]
[-12.95957661 -136.68457031]
[-4.89861488 -149.41125488]
[5.79256439 -160.02474976]
[18.57769585 -167.99270630]
[32.81548309 -172.91542053]
[47.79176331 -174.54598999]
[62.75533295 -172.80262756]
[76.95562744 -167.77278137]
[89.68035889 -159.70874023]
[100.29127502 -149.01498413]
[108.25611877 -136.22792053]
[113.17539215 -121.98894501]
[114.80233765 -107.01226807]
[113.05535126 -92.04912567]
[108.02205658 -77.85005188]
[99.95492554 -65.12726593]
[89.25860596 -54.51894760]
[76.46961975 -46.55719757]
[81.37117004 -32.38064194]
[86.27272034 -18.20408249]
[92.40930176 -31.89138794]
[105.33847046 -39.49642944]
[120.28314209 -38.20930099]
[131.72157288 -28.50556564]
[135.42747498 -13.97056389]
[130.03160095 0.02531191]
[117.52761078 8.31086349]
[102.53549194 7.82474566]
[90.59502411 -1.25271463]
[93.08014679 13.53999233]
[105.32279205 21.94553947]
[108.05377960 36.91204834]
[99.15426636 49.69626617]
[101.63938141 64.48897552]
[113.51105499 67.11882019]
[123.80195618 73.59569550]
[131.30809021 83.16181946]
[145.72030640 79.00392914]
[160.13252258 74.84604645]
[174.54473877 70.68815613]
[188.95695496 66.53027344]
[199.93362427 54.34648514]
[215.91491699 58.02486038]
[220.46063232 73.78139496]
[208.89454651 85.40711975]
[193.11483765 80.94248962]
[178.70262146 85.10037231]
[164.29040527 89.25826263]
[149.87818909 93.41614532]
[135.46597290 97.57403564]
[133.69081116 111.34238434]
[126.77777100 123.38100433]
[115.78109741 131.85400391]
[102.37779236 135.46923828]
[100.20095062 150.31044006]
[98.02411652 165.15164185]
[95.84727478 179.99284363]
[93.67044067 194.83406067]
[100.74630737 205.66853333]
[98.58575439 218.01968384]
[88.89304352 225.32438660]
[86.40792847 240.11709595]
[85.00562286 255.05140686]
[84.69356537 270.04815674]
[84.38150787 285.04492188]
[84.06945038 300.04165649]
[93.32370758 315.92684937]
[83.73260498 330.59008789]
[83.73260498 345.59008789]
[83.73260498 360.59008789]
[83.73260498 375.59008789]
[83.73260498 390.59008789]
[83.73260498 405.59008789]
[83.73260498 420.59008789]
[83.73260498 435.59008789]
[83.73260498 450.59008789]
[83.73260498 465.59008789]
[98.27249146 469.65139771]
[111.17687225 477.48590088]
[121.48815155 488.51223755]
[128.44117737 501.91217041]
[131.51997375 516.69134521]
[130.49607849 531.75299072]
[125.44548035 545.97955322]
[116.74295807 558.31518555]
[105.03429413 567.84460449]
[91.18835449 573.86065674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[26 126]
[34 125]
[35 124]
[37 121]
[38 120]
[39 119]
[40 118]
[41 117]
[46 97]
[47 96]
[50 93]
[51 92]
[52 83]
[53 82]
[54 81]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
