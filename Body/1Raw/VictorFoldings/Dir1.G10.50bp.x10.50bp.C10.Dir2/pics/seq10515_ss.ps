%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCUCCUGGGGGGGGGGAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUxxxxxxxxxxUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACCCCCCCCCCCUUCUCUUCCU\
) } def
/len { sequence length } bind def

/coor [
[84.08550262 398.37393188]
[70.86530304 391.10147095]
[59.97850037 380.65447998]
[52.16736984 367.74523926]
[47.96448898 353.25390625]
[47.65641785 338.16857910]
[51.26416016 323.51776123]
[58.54173279 310.30035400]
[68.99294281 299.41760254]
[81.90520477 291.61145020]
[96.39813995 287.41415405]
[96.08608246 272.41741943]
[95.77402496 257.42065430]
[95.46196747 242.42390442]
[95.14990997 227.42713928]
[94.83786011 212.43038940]
[94.52580261 197.43363953]
[94.21374512 182.43688965]
[93.90168762 167.44012451]
[93.58963013 152.44337463]
[84.81749725 150.60525513]
[76.48227692 147.31085205]
[68.82382965 142.65496826]
[62.06255341 136.77159119]
[56.39300919 129.83003235]
[51.97836304 122.03004456]
[48.94564819 113.59608459]
[47.38214111 104.77086639]
[32.40242386 103.99102020]
[17.42271042 103.21117401]
[2.44299650 102.43132782]
[-12.53671741 101.65148926]
[-19.40816307 115.24204254]
[-31.21741486 124.85772705]
[-45.91845322 128.83256531]
[-60.96422958 126.47790527]
[-73.74797821 118.20169067]
[-82.05483246 105.43783569]
[-84.44557953 90.39775085]
[-80.50601196 75.68721771]
[-70.91867828 63.85493469]
[-57.34465027 56.95090866]
[-42.13570023 56.17130661]
[-27.92687798 61.65120316]
[-17.17994499 72.44116211]
[-11.75687313 86.67176819]
[3.22284150 87.45161438]
[18.20255661 88.23146057]
[33.18227005 89.01130676]
[48.16198349 89.79115295]
[51.65750885 78.68324280]
[57.50148010 68.61089325]
[65.40999603 60.06340027]
[74.99887085 53.45599747]
[85.80228424 49.10967255]
[97.29541016 47.23556519]
[108.91992950 47.92471695]
[113.52548981 33.64925385]
[118.13105774 19.37379456]
[122.73661804 5.09833336]
[109.18122864 -1.37736881]
[96.60993958 -9.60210323]
[85.24711609 -19.42908859]
[75.29553223 -30.68295288]
[66.93279266 -43.16285706]
[60.30813599 -56.64608002]
[55.53978348 -70.89199829]
[52.71283722 -85.64638519]
[51.87774658 -100.64591980]
[53.04941559 -115.62292480]
[56.20693207 -130.31011963]
[61.29394531 -144.44537354]
[68.21967316 -157.77645874]
[76.86051941 -170.06544495]
[87.06227875 -181.09303284]
[98.64288330 -190.66239929]
[111.39567566 -198.60279846]
[125.09304810 -204.77250671]
[139.49057007 -209.06143188]
[154.33129883 -211.39300537]
[169.35037231 -211.72564697]
[184.27978516 -210.05340576]
[198.85307312 -206.40612793]
[212.81018066 -200.84889221]
[225.90200806 -193.48089600]
[237.89492798 -184.43362427]
[248.57490540 -173.86851501]
[257.75137329 -161.97413635]
[265.26052856 -148.96275330]
[270.96835327 -135.06657410]
[274.77304077 -120.53358459]
[276.60662842 -105.62313843]
[276.43646240 -90.60134125]
[274.26550293 -75.73626709]
[270.13253784 -61.29320145]
[264.11132812 -47.52989960]
[256.30932617 -34.69198227]
[246.86575317 -23.00856209]
[235.94914246 -12.68813992]
[223.75433350 -3.91489434]
[210.49893188 3.15460396]
[196.41950989 8.39419174]
[181.76731873 11.71036243]
[166.80386353 13.04393578]
[151.79617310 12.37111187]
[137.01208496 9.70389748]
[132.40652466 23.97935867]
[127.80095673 38.25481796]
[123.19538879 52.53028107]
[136.90797424 62.19520950]
[146.89926147 75.67184448]
[152.16189575 91.60139465]
[152.16525269 108.37773895]
[166.48785400 112.83454895]
[180.81045532 117.29136658]
[196.28631592 114.00380707]
[206.13990784 125.17322540]
[220.46250916 129.63005066]
[236.33168030 125.49465179]
[247.65341187 137.35847473]
[242.78088379 153.01704407]
[226.72653198 156.36215210]
[216.00569153 143.95263672]
[201.68309021 139.49581909]
[187.23167419 143.10217285]
[176.35363770 131.61396790]
[162.03103638 127.15715027]
[147.70843506 122.70033264]
[131.76196289 142.22058105]
[108.58638763 152.13131714]
[108.89844513 167.12806702]
[109.21049500 182.12483215]
[109.52255249 197.12158203]
[109.83460999 212.11833191]
[110.14666748 227.11508179]
[110.45872498 242.11184692]
[110.77078247 257.10858154]
[111.08283234 272.10534668]
[111.39488983 287.10211182]
[126.04988098 290.69287109]
[139.27569580 297.95513916]
[150.17056274 308.39373779]
[157.99165344 321.29693604]
[162.20573425 335.78500366]
[162.52545166 350.87008667]
[158.92901611 365.52371216]
[151.66166687 378.74670410]
[141.21885681 389.63754272]
[128.31262207 397.45364380]
[113.82293701 401.66213989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[57 109]
[58 108]
[59 107]
[60 106]
[113 128]
[114 127]
[115 126]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
