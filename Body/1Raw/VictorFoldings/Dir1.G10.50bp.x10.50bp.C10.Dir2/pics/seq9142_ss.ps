%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAAGCCUCAGGGGGGGGGGGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACxxxxxxxxxxCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAACCCCCCCCCCUCCAAGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[74.54980469 361.60705566]
[61.63064957 353.84872437]
[50.84935379 343.31967163]
[42.78733444 330.58779907]
[37.87937546 316.33969116]
[36.39015198 301.34375000]
[38.39997482 286.40863037]
[43.80046082 272.33981323]
[52.30036545 259.89602661]
[63.44129944 249.74829102]
[76.62244415 242.44390869]
[91.13296509 238.37677002]
[90.51713562 223.38941956]
[89.90131378 208.40206909]
[89.28548431 193.41470337]
[88.66966248 178.42735291]
[88.05384064 163.44000244]
[87.43801117 148.45265198]
[86.82218933 133.46530151]
[74.31815338 125.17981720]
[60.27617264 130.45455933]
[46.23419952 135.72930908]
[32.19222260 141.00404358]
[18.15024567 146.27879333]
[11.16496181 152.26223755]
[3.76543617 151.51443481]
[-10.38188076 156.49975586]
[-24.52919769 161.48507690]
[-37.45841599 172.45191956]
[-51.57583237 163.06390381]
[-46.46279526 146.89933777]
[-29.51451874 147.33775330]
[-15.36720276 142.35243225]
[-1.21988595 137.36711121]
[12.87550354 132.23681641]
[26.91748047 126.96206665]
[40.95945740 121.68732452]
[55.00143433 116.41258240]
[69.04341125 111.13784790]
[67.29969788 100.44434357]
[69.12442780 89.83002472]
[74.27690887 80.44621277]
[82.15782166 73.29680634]
[91.87869263 69.13091278]
[102.36192322 68.36447144]
[112.46023560 71.03910065]
[114.30356598 56.15279388]
[116.14688873 41.26648712]
[117.99021149 26.38017845]
[113.15039825 12.18242645]
[102.59838104 1.52151763]
[92.04636383 -9.13939095]
[77.21117401 -5.16286898]
[62.37942505 -9.15219402]
[51.54077530 -20.03425598]
[47.61077499 -34.88183594]
[51.64656830 -49.70101166]
[62.56255341 -60.50549698]
[77.42237854 -64.38893890]
[92.22882843 -60.30671310]
[102.99904633 -49.35691452]
[106.83589172 -34.48498917]
[102.70727539 -19.69140625]
[113.25928497 -9.03049755]
[123.81130219 1.63041139]
[138.31993103 -2.17744732]
[142.27653503 -16.64621544]
[146.23315430 -31.11498260]
[150.18975830 -45.58375168]
[136.85354614 -52.58086395]
[125.33359528 -62.28162384]
[116.16870880 -74.23231506]
[109.78755188 -87.87397003]
[106.48857117 -102.56855774]
[106.42607880 -117.62876892]
[109.60298157 -132.35023499]
[115.87071228 -146.04437256]
[124.93609619 -158.07072449]
[136.37513733 -167.86676025]
[149.65281677 -174.97430420]
[164.14811707 -179.06094360]
[179.18304443 -179.93553162]
[194.05439758 -177.55715942]
[208.06663513 -172.03706360]
[220.56436157 -163.63343811]
[230.96302795 -152.73931885]
[238.77629089 -139.86427307]
[243.63870239 -125.61045837]
[245.32283020 -110.64456940]
[243.74990845 -95.66658783]
[238.99351501 -81.37705231]
[231.27609253 -68.44432068]
[220.95863342 -57.47327042]
[208.52366638 -48.97704697]
[194.55282593 -43.35302353]
[179.69953918 -40.86425400]
[164.65852356 -41.62714005]
[160.70191956 -27.15837288]
[156.74530029 -12.68960476]
[152.78869629 1.77916288]
[167.74113464 0.58557802]
[181.37220764 6.84607363]
[190.20997620 18.96605110]
[192.00338745 33.85845566]
[186.29563904 47.73006821]
[174.54055786 57.04767990]
[159.73223877 59.43801880]
[145.64248657 54.29224777]
[135.86007690 42.92103577]
[132.87652588 28.22350311]
[131.03318787 43.10980988]
[129.18986511 57.99612045]
[127.34654236 72.88242340]
[135.63201904 85.38645935]
[150.05940247 89.49140930]
[164.48678589 93.59635162]
[175.45712280 82.84704590]
[190.33633423 79.03858185]
[205.12200928 83.19541931]
[215.83688354 94.19938660]
[219.59867859 109.09046936]
[215.39552307 123.86304474]
[204.35803223 134.54336548]
[189.45523071 138.25846863]
[174.69589233 134.00903320]
[164.05023193 122.93811035]
[160.38185120 108.02373505]
[145.95446777 103.91879272]
[131.52706909 99.81385040]
[128.04908752 115.37136078]
[117.29467773 127.44779205]
[101.80953979 132.84947205]
[102.42536163 147.83682251]
[103.04119110 162.82417297]
[103.65701294 177.81152344]
[104.27284241 192.79888916]
[104.88866425 207.78623962]
[105.50449371 222.77359009]
[106.12031555 237.76094055]
[120.91558838 240.62391663]
[134.65156555 246.82228088]
[146.58746338 256.02178955]
[156.07962036 267.72631836]
[162.61611938 281.30462646]
[165.84445190 296.02450562]
[165.59053040 311.09210205]
[161.86804199 325.69482422]
[154.87773132 339.04519653]
[144.99659729 350.42321777]
[132.75749207 359.21533203]
[118.82046509 364.94735718]
[103.93712616 367.31018066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[26 34]
[27 33]
[28 32]
[46 113]
[47 112]
[48 111]
[49 110]
[50 65]
[51 64]
[52 63]
[66 100]
[67 99]
[68 98]
[69 97]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
