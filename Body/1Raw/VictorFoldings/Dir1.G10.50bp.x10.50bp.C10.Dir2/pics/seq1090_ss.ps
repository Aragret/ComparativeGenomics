%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCCCCAGGGGGGGGGGCGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGxxxxxxxxxxCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCCCCCCCCCCCAUACCCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.16964722]
[71.19830322 352.15362549]
[59.48964310 342.62420654]
[50.78712082 330.28854370]
[45.73651886 316.06201172]
[44.71262741 301.00033569]
[47.79142761 286.22116089]
[54.74444962 272.82125854]
[65.05573273 261.79492188]
[77.96011353 253.96040344]
[92.50000000 249.89909363]
[92.50000000 234.89909363]
[92.50000000 219.89909363]
[92.50000000 204.89909363]
[92.50000000 189.89909363]
[92.50000000 174.89909363]
[92.50000000 159.89909363]
[92.50000000 144.89909363]
[92.50000000 129.89909363]
[92.50000000 114.89908600]
[82.06018829 104.12828064]
[67.06748962 103.66024017]
[48.01280212 128.18237305]
[33.36930084 131.43319702]
[20.12975502 144.18836975]
[3.61127949 138.34542847]
[-10.96142387 141.90019226]
[-25.49635887 145.60635376]
[-39.99195480 149.46351624]
[-51.21972656 161.41630554]
[-67.12103271 157.40625000]
[-71.33797455 141.55856323]
[-59.53252411 130.17596436]
[-43.84911728 134.96792603]
[-29.35351944 131.11076355]
[-23.66155052 126.32044220]
[-14.51618576 127.32749176]
[0.05651746 123.77272797]
[6.63667774 113.57425690]
[18.79790878 110.52083588]
[30.11847496 116.78969574]
[44.76197433 113.53887177]
[46.47466660 98.63697052]
[32.95047760 92.14880371]
[19.42628670 85.66063690]
[5.90209579 79.17247772]
[-10.39921665 80.96112061]
[-19.87938690 67.57984924]
[-12.78602886 52.79416656]
[3.58381939 51.81431961]
[12.39026070 65.64828491]
[25.91445160 72.13645172]
[39.43864059 78.62461853]
[52.96282959 85.11277771]
[67.53553009 88.66754150]
[82.52822876 89.13558197]
[90.59972382 85.78217316]
[97.92855835 86.64509583]
[102.72498322 90.39424896]
[113.38661194 79.84295654]
[124.04823303 69.29166412]
[134.70985413 58.74037552]
[145.37149048 48.18908310]
[135.90786743 36.53546906]
[127.63209534 24.01036072]
[120.62386322 10.73438931]
[114.95066071 -3.16458988]
[110.66713715 -17.55271721]
[107.81454468 -32.29142380]
[106.42034912 -47.23876572]
[106.49797821 -62.25078583]
[108.04669189 -77.18290710]
[111.05156708 -91.89132690]
[115.48367310 -106.23438263]
[121.30031586 -120.07394409]
[128.44548035 -133.27671814]
[136.85035706 -145.71556091]
[146.43399048 -157.27067566]
[157.10409546 -167.83078003]
[168.75790405 -177.29415894]
[181.28317261 -185.56968689]
[194.55928040 -192.57766724]
[208.45837402 -198.25057983]
[222.84658813 -202.53381348]
[237.58535767 -205.38612366]
[252.53273010 -206.78001404]
[267.54473877 -206.70208740]
[282.47683716 -205.15307617]
[297.18518066 -202.14790344]
[311.52816772 -197.71551514]
[325.36761475 -191.89859009]
[338.57025146 -184.75315857]
[351.00891113 -176.34803772]
[362.56384277 -166.76416016]
[373.12371826 -156.09385681]
[382.58688354 -144.43986511]
[390.86215210 -131.91442871]
[397.86987305 -118.63816833]
[403.54251099 -104.73896027]
[407.82543945 -90.35066223]
[410.67745972 -75.61184692]
[412.07104492 -60.66444778]
[411.99282837 -45.65242767]
[410.44351196 -30.72036934]
[407.43804932 -16.01207352]
[403.00537109 -1.66919410]
[397.18817139 12.17013454]
[390.04248047 25.37262726]
[381.63711548 37.81113815]
[372.05300903 49.36587143]
[361.38247681 59.92554474]
[349.72830200 69.38845825]
[337.20269775 77.66348267]
[323.92630005 84.67092133]
[310.02697754 90.34328461]
[295.63861084 94.62594604]
[280.89971924 97.47766113]
[265.95230103 98.87095642]
[250.94027710 98.79242706]
[236.00825500 97.24282074]
[221.30001831 94.23706055]
[206.95722961 89.80409241]
[193.11801147 83.98661804]
[179.91566467 76.84066010]
[167.47732544 68.43504333]
[155.92277527 58.85071182]
[145.26115417 69.40200043]
[134.59951782 79.95329285]
[123.93789673 90.50457764]
[113.27627563 101.05587006]
[107.50000000 114.89908600]
[107.50000000 129.89909363]
[107.50000000 144.89909363]
[107.50000000 159.89909363]
[107.50000000 174.89909363]
[107.50000000 189.89909363]
[107.50000000 204.89909363]
[107.50000000 219.89909363]
[107.50000000 234.89909363]
[107.50000000 249.89909363]
[122.03988647 253.96040344]
[134.94427490 261.79492188]
[145.25555420 272.82125854]
[152.20857239 286.22116089]
[155.28736877 301.00033569]
[154.26348877 316.06201172]
[149.21287537 330.28854370]
[140.51036072 342.62420654]
[128.80169678 352.15362549]
[114.95575714 358.16964722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 56]
[22 55]
[23 42]
[24 41]
[26 38]
[27 37]
[28 35]
[29 34]
[43 54]
[44 53]
[45 52]
[46 51]
[59 130]
[60 129]
[61 128]
[62 127]
[63 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
