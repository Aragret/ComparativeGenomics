%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCCUCCCUUAGGGGGGGGGGGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCxxxxxxxxxxAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCCCCCCCCCCCUACCCACCCUUA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 426.94589233]
[70.75619507 422.13644409]
[57.85220718 414.37106323]
[46.91955185 404.01290894]
[38.46956635 391.54650879]
[32.89747238 377.55487061]
[30.46388245 362.69244385]
[31.28262329 347.65435791]
[35.31539917 333.14398193]
[42.37359238 319.83999634]
[52.12707901 308.36465454]
[64.11966705 299.25466919]
[77.79044342 292.93612671]
[92.50000000 289.70455933]
[92.50000000 274.70455933]
[92.50000000 259.70455933]
[92.50000000 244.70457458]
[92.50000000 229.70457458]
[92.50000000 214.70457458]
[92.50000000 199.70457458]
[92.50000000 184.70457458]
[92.50000000 169.70457458]
[92.50000000 154.70457458]
[92.50000000 139.70457458]
[80.54099274 135.41256714]
[70.50605774 127.61902618]
[63.38744736 117.09455109]
[48.85422897 120.80745697]
[34.32101440 124.52035522]
[19.78779793 128.23326111]
[10.40082359 141.24342346]
[-5.62990475 141.87213135]
[-16.00698471 129.63711548]
[-12.77000713 113.92401886]
[1.59789455 106.78658295]
[16.07489586 113.70004272]
[30.60811234 109.98714447]
[45.14132690 106.27423859]
[59.67454529 102.56134033]
[61.19047928 88.75171661]
[67.29412842 76.27176666]
[77.26398468 66.59676361]
[89.92148590 60.87038803]
[103.77037811 59.76957321]
[107.91776276 45.35433197]
[112.06514740 30.93908882]
[116.06809235 16.48307419]
[112.14062500 1.15709805]
[122.89116669 -9.15188313]
[126.74928284 -23.64722443]
[130.60740662 -38.14256668]
[116.51293945 -43.30600739]
[102.94640350 -49.72975159]
[90.02023315 -57.36056137]
[77.84152985 -66.13520813]
[66.51120758 -75.98097992]
[56.12317276 -86.81628418]
[46.76349258 -98.55134583]
[38.50972748 -111.08891296]
[31.43027306 -124.32509613]
[25.58379555 -138.15022278]
[21.01873779 -152.44970703]
[17.77292824 -167.10508728]
[15.87326717 -181.99490356]
[15.33549309 -196.99575806]
[16.16406250 -211.98338318]
[18.35210991 -226.83355713]
[21.88150406 -241.42323303]
[26.72299767 -255.63151550]
[32.83647537 -269.34066772]
[40.17127228 -282.43707275]
[48.66661072 -294.81222534]
[58.25209808 -306.36358643]
[68.84830475 -316.99539185]
[80.36741638 -326.61959839]
[92.71398926 -335.15643311]
[105.78570557 -342.53512573]
[119.47425842 -348.69458008]
[133.66619873 -353.58374023]
[148.24395752 -357.16207886]
[163.08670044 -359.39996338]
[178.07145691 -360.27883911]
[193.07403564 -359.79141235]
[207.97013855 -357.94174194]
[222.63633728 -354.74511719]
[236.95106506 -350.22808838]
[250.79573059 -344.42803955]
[264.05560303 -337.39306641]
[276.62078857 -329.18142700]
[288.38720703 -319.86117554]
[299.25732422 -309.50955200]
[309.14105225 -298.21234131]
[317.95654297 -286.06317139]
[325.63067627 -273.16268921]
[332.09991455 -259.61779785]
[337.31063843 -245.54072571]
[341.21966553 -231.04814148]
[343.79458618 -216.26014709]
[345.01409912 -201.29925537]
[344.86807251 -186.28945923]
[343.35772705 -171.35514832]
[340.49557495 -156.62004089]
[336.30532837 -142.20625305]
[330.82171631 -128.23323059]
[324.09017944 -114.81677246]
[316.16647339 -102.06802368]
[307.11630249 -90.09265137]
[297.01464844 -78.98988342]
[285.94519043 -68.85171509]
[273.99966431 -59.76215744]
[261.27709961 -51.79653931]
[247.88285828 -45.02086258]
[233.92797852 -39.49127197]
[219.52806091 -35.25358963]
[204.80247498 -32.34293365]
[189.87319946 -30.78342247]
[174.86396790 -30.58797646]
[159.89913940 -31.75821686]
[145.10275269 -34.28444672]
[141.24462891 -19.78910446]
[137.38650513 -5.29376316]
[141.58993530 8.99540901]
[130.56343079 20.34119415]
[131.88952637 27.65483665]
[126.48038483 35.08647156]
[122.33300781 49.50171280]
[118.18562317 63.91695786]
[131.18197632 74.30199432]
[138.89276123 89.04301453]
[140.01097107 105.64131927]
[134.34706116 121.28338623]
[122.86108398 133.31776428]
[107.50000000 139.70457458]
[107.50000000 154.70457458]
[107.50000000 169.70457458]
[107.50000000 184.70457458]
[107.50000000 199.70457458]
[107.50000000 214.70457458]
[107.50000000 229.70457458]
[107.50000000 244.70457458]
[107.50000000 259.70455933]
[107.50000000 274.70455933]
[107.50000000 289.70455933]
[122.20955658 292.93612671]
[135.88034058 299.25466919]
[147.87292480 308.36465454]
[157.62640381 319.83999634]
[164.68460083 333.14398193]
[168.71737671 347.65435791]
[169.53611755 362.69244385]
[167.10252380 377.55487061]
[161.53042603 391.54650879]
[153.08044434 404.01290894]
[142.14779663 414.37106323]
[129.24380493 422.13644409]
[114.97203827 426.94589233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[27 39]
[28 38]
[29 37]
[30 36]
[44 127]
[45 126]
[46 125]
[47 123]
[49 121]
[50 120]
[51 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
