%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAAGUAGGGGGGGGGGUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGAxxxxxxxxxxGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCACCCCCCCCCCUCCUAAAGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 388.29977417]
[71.19830322 382.28375244]
[59.48964310 372.75433350]
[50.78712082 360.41867065]
[45.73651886 346.19213867]
[44.71262741 331.13046265]
[47.79142761 316.35131836]
[54.74444962 302.95138550]
[65.05573273 291.92504883]
[77.96011353 284.09054565]
[92.50000000 280.02923584]
[92.50000000 265.02923584]
[92.50000000 250.02923584]
[92.50000000 235.02923584]
[92.50000000 220.02923584]
[92.50000000 205.02923584]
[92.50000000 190.02923584]
[92.50000000 175.02923584]
[92.50000000 160.02923584]
[92.50000000 145.02923584]
[92.50000000 130.02923584]
[82.99034882 126.54376984]
[74.95407867 120.07877350]
[69.31275177 111.22335052]
[66.76103973 100.84712219]
[67.68304443 90.01518250]
[72.09986877 79.87884521]
[79.65502930 71.55327606]
[89.64067078 65.99507904]
[80.87446594 53.82324219]
[72.10826111 41.65140533]
[59.07505035 49.10480499]
[45.33413696 55.15501404]
[31.03607178 59.73574066]
[16.33751297 62.79679108]
[1.39950287 64.30463409]
[-13.61428642 64.24274445]
[-28.53935814 62.61180115]
[-43.21218109 59.42967224]
[-57.47199631 54.73122406]
[-71.16255951 48.56793976]
[-84.13388062 41.00733948]
[-96.24382782 32.13227081]
[-107.35971832 22.03996468]
[-117.35976410 10.84100151]
[-126.13440704 -1.34191489]
[-133.58749390 -14.37530422]
[-139.63735962 -28.11636353]
[-144.21774292 -42.41453934]
[-147.27844238 -57.11317444]
[-148.78591919 -72.05122375]
[-148.72366333 -87.06501007]
[-147.09236145 -101.99004364]
[-143.90986633 -116.66278839]
[-139.21107483 -130.92248535]
[-133.04745483 -144.61289978]
[-125.48654938 -157.58403015]
[-116.61118317 -169.69377136]
[-106.51860809 -180.80941772]
[-95.31939697 -190.80918884]
[-83.13626862 -199.58352661]
[-70.10269928 -207.03630066]
[-56.36149216 -213.08584595]
[-42.06320572 -217.66587830]
[-27.36449623 -220.72621155]
[-12.42641354 -222.23332214]
[2.58737278 -222.17071533]
[17.51236343 -220.53903198]
[32.18503571 -217.35620117]
[46.44462204 -212.65705872]
[60.13488770 -206.49310303]
[73.10583496 -198.93188477]
[85.21535492 -190.05621338]
[96.33075714 -179.96337891]
[106.33026123 -168.76393127]
[115.10430145 -156.58058167]
[122.55675507 -143.54682922]
[128.60595703 -129.80548096]
[133.18563843 -115.50708008]
[136.24562073 -100.80829620]
[137.75238037 -85.87017822]
[137.68939209 -70.85639191]
[136.05735779 -55.93144226]
[132.87417603 -41.25885010]
[128.17468262 -26.99937630]
[122.01039886 -13.30925846]
[114.44885254 -0.33849263]
[105.57289886 11.77080727]
[95.47978973 22.88596535]
[84.28009796 32.88519669]
[93.04630280 45.05703354]
[101.81250763 57.22887039]
[116.45600891 60.47969437]
[129.54916382 53.16059113]
[142.64231873 45.84148407]
[155.73547363 38.52238083]
[168.82862854 31.20327377]
[181.92178345 23.88416862]
[187.65457153 8.90035343]
[202.98675537 4.17768240]
[216.15679932 13.33898544]
[217.06176758 29.35649300]
[205.00746155 39.94294739]
[189.24089050 36.97732162]
[176.14773560 44.29642868]
[163.05458069 51.61553574]
[149.96142578 58.93463898]
[136.86827087 66.25374603]
[123.77511597 73.57285309]
[130.19183350 86.07162476]
[130.94094849 99.18623352]
[145.58445740 102.43706512]
[160.22795105 105.68788910]
[170.54826355 94.31304932]
[185.17822266 89.63759613]
[200.18243408 92.91918182]
[211.52487183 103.27509308]
[216.15444946 117.91963196]
[212.82583618 132.91349792]
[202.43443298 144.22340393]
[187.77545166 148.80706787]
[172.79209900 145.43147278]
[161.51481628 135.00466919]
[156.97712708 120.33139038]
[142.33363342 117.08056641]
[127.69012451 113.82973480]
[124.08825684 119.43606567]
[119.36987305 124.14151001]
[113.75368500 127.72798157]
[107.50000000 130.02923584]
[107.50000000 145.02923584]
[107.50000000 160.02923584]
[107.50000000 175.02923584]
[107.50000000 190.02923584]
[107.50000000 205.02923584]
[107.50000000 220.02923584]
[107.50000000 235.02923584]
[107.50000000 250.02923584]
[107.50000000 265.02923584]
[107.50000000 280.02923584]
[122.03988647 284.09054565]
[134.94427490 291.92504883]
[145.25555420 302.95138550]
[152.20857239 316.35131836]
[155.28736877 331.13046265]
[154.26348877 346.19213867]
[149.21287537 360.41867065]
[140.51036072 372.75433350]
[128.80169678 382.28375244]
[114.95575714 388.29977417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 92]
[30 91]
[31 90]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
