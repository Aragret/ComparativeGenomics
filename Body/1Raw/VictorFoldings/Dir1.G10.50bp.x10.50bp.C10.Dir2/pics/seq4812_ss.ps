%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCUCACGGGGGGGGGGGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAxxxxxxxxxxCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCACCCCCCCCCCAUUUCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[81.33855438 408.59060669]
[66.84886169 404.38211060]
[53.94263077 396.56600952]
[43.49982834 385.67517090]
[36.23246384 372.45217896]
[32.63603973 357.79855347]
[32.95576096 342.71347046]
[37.16983032 328.22540283]
[44.99092865 315.32220459]
[55.88579559 304.88360596]
[69.11160278 297.62133789]
[83.76659393 294.03057861]
[84.07865143 279.03381348]
[84.39070892 264.03704834]
[84.70276642 249.04031372]
[85.01482391 234.04354858]
[85.32688141 219.04679871]
[85.63893127 204.05004883]
[85.95098877 189.05329895]
[86.26304626 174.05653381]
[86.57510376 159.05978394]
[64.63394928 113.84037781]
[87.30946350 91.29489899]
[77.09598541 80.30923462]
[66.88250732 69.32357025]
[54.96693802 78.45395660]
[42.23741531 86.41033936]
[28.80922318 93.12065887]
[14.80397224 98.52414703]
[0.34850025 102.57187653]
[-14.42628002 105.22717285]
[-29.38656235 106.46600342]
[-44.39686203 106.27713776]
[-59.32123947 104.66229248]
[-74.02453613 101.63609314]
[-88.37358856 97.22593689]
[-102.23844910 91.47177887]
[-115.49355316 84.42572021]
[-128.01885986 76.15157318]
[-139.70092773 66.72427368]
[-150.43397522 56.22920227]
[-160.12077332 44.76139832]
[-168.67362976 32.42472076]
[-176.01506042 19.33090019]
[-182.07858276 5.59851456]
[-186.80928040 -8.64806938]
[-190.16433716 -23.27983093]
[-192.11332703 -38.16425705]
[-192.63864136 -53.16654968]
[-191.73548889 -68.15084839]
[-189.41206360 -82.98143768]
[-185.68940735 -97.52401733]
[-180.60122681 -111.64687347]
[-174.19361877 -125.22212219]
[-166.52458191 -138.12680054]
[-157.66360474 -150.24404907]
[-147.69091797 -161.46414185]
[-136.69683838 -171.68544006]
[-124.78093719 -180.81538391]
[-112.05112457 -188.77130127]
[-98.62269592 -195.48114014]
[-84.61724854 -200.88412476]
[-70.16162872 -204.93132019]
[-55.38674927 -207.58607483]
[-40.42641830 -208.82435608]
[-25.41612816 -208.63494873]
[-10.49180889 -207.01956177]
[4.21137476 -203.99282837]
[18.56026649 -199.58215332]
[32.42491913 -193.82748413]
[45.67976761 -186.78094482]
[58.20476913 -178.50633240]
[69.88649750 -169.07861328]
[80.61915588 -158.58314514]
[90.30554199 -147.11499023]
[98.85794067 -134.77799988]
[106.19889832 -121.68391418]
[112.26191711 -107.95130920]
[116.99210358 -93.70455170]
[120.34661865 -79.07266998]
[122.29507446 -64.18817139]
[122.81983185 -49.18585968]
[121.91613770 -34.20159912]
[119.59217072 -19.37109184]
[115.86898804 -4.82864857]
[110.78029633 9.29402733]
[104.37218475 22.86903572]
[96.70269012 35.77343750]
[87.84127045 47.89036942]
[77.86817169 59.11008835]
[88.08164978 70.09574890]
[98.29512787 81.08142090]
[113.15818024 83.10375214]
[125.93553162 75.24632263]
[138.71289062 67.38890076]
[151.49024963 59.53147507]
[164.26760864 51.67404938]
[177.04496765 43.81662369]
[187.36987305 30.36922073]
[203.14996338 36.56801224]
[201.56178284 53.44741058]
[184.90238953 56.59397888]
[172.12503052 64.45140839]
[159.34767151 72.30883026]
[146.57031250 80.16625977]
[133.79295349 88.02368164]
[121.01560211 95.88111115]
[122.48834229 103.23509216]
[125.43383026 117.94305420]
[126.90657043 125.29703522]
[141.72431946 127.62813568]
[156.54208374 129.95924377]
[171.35984802 132.29034424]
[186.17759705 134.62144470]
[200.99536133 136.95254517]
[217.58169556 133.44117737]
[225.54739380 148.40727234]
[213.37130737 160.20469666]
[198.66426086 151.77030945]
[183.84649658 149.43920898]
[169.02873230 147.10810852]
[154.21098328 144.77699280]
[139.39321899 142.44589233]
[124.57546234 140.11479187]
[118.82456207 144.92904663]
[132.91404724 150.07556152]
[135.50187683 164.85064697]
[124.00024414 174.47938538]
[109.91066742 169.33312988]
[107.32276154 154.55758667]
[101.57185364 159.37184143]
[101.25980377 174.36859131]
[100.94774628 189.36535645]
[100.63568878 204.36210632]
[100.32363129 219.35885620]
[100.01157379 234.35560608]
[99.69951630 249.35237122]
[99.38746643 264.34912109]
[99.07540894 279.34588623]
[98.76335144 294.34262085]
[113.25628662 298.53991699]
[126.16854858 306.34606934]
[136.61975098 317.22882080]
[143.89732361 330.44622803]
[147.50506592 345.09704590]
[147.19700623 360.18237305]
[142.99412537 374.67370605]
[135.18298340 387.58294678]
[124.29618073 398.02993774]
[111.07598877 405.30239868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 92]
[24 91]
[25 90]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
[98 102]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
