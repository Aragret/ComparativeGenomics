%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCAACAGGGGGGGGGGCCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCxxxxxxxxxxUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCCCCCCCCCCCACCCUUAACA\
) } def
/len { sequence length } bind def

/coor [
[82.89646149 395.82656860]
[71.01218414 386.55148315]
[61.69348145 374.70135498]
[55.48211288 360.96520996]
[52.73921204 346.14157104]
[53.62424088 331.09231567]
[58.08574677 316.69238281]
[65.86434937 303.77893066]
[76.50779724 293.10278320]
[89.39730835 285.28457642]
[103.78349304 280.77893066]
[102.84786224 265.80813599]
[101.91223907 250.83734131]
[100.97660828 235.86654663]
[100.04097748 220.89575195]
[99.10535431 205.92495728]
[98.16972351 190.95417786]
[97.23409271 175.98338318]
[96.29846954 161.01258850]
[95.36283875 146.04179382]
[78.17396545 140.80410767]
[64.27620697 129.41362000]
[55.76517868 113.58789825]
[40.90213394 115.61023712]
[26.03908539 117.63256836]
[23.36468887 132.52226257]
[16.21823311 145.85580444]
[5.29985619 156.32691956]
[-8.32077217 162.90974426]
[-23.30924034 164.95938110]
[-38.19713211 162.27500916]
[-51.52588272 155.11961365]
[-61.98967743 144.19422913]
[-68.56338501 130.56918335]
[-70.60296631 115.57934570]
[-67.90862274 100.69326019]
[-60.74430466 87.36930084]
[-49.81190109 76.91283417]
[-36.18246460 70.34825897]
[-21.19126129 68.31871796]
[-6.30698061 71.02304077]
[7.01216936 78.19628143]
[17.46131325 89.13568878]
[24.01675034 102.76952362]
[38.87979889 100.74718475]
[53.74284363 98.72485352]
[57.07293701 82.71944427]
[65.76077271 68.87082672]
[78.72201538 58.90744781]
[94.33896637 54.07284927]
[110.66248322 54.97043228]
[116.43875122 41.12721634]
[122.21502686 27.28399658]
[116.44784546 12.81411934]
[122.50300598 -1.14258707]
[136.33337402 -6.55153942]
[142.10963440 -20.39475632]
[140.28326416 -36.11019516]
[152.32495117 -44.87643433]
[158.10122681 -58.71965408]
[163.87750244 -72.56287384]
[169.65377808 -86.40608978]
[175.43005371 -100.24930573]
[179.28720093 -114.74490356]
[181.15481567 -129.62818909]
[183.02243042 -144.51145935]
[184.89004517 -159.39474487]
[186.75765991 -174.27803040]
[172.90116882 -180.29254150]
[161.30133057 -189.96830750]
[152.89849854 -202.52096558]
[148.37384033 -216.93290710]
[148.09416199 -232.03582764]
[152.08213806 -246.60542297]
[160.01446533 -259.46057129]
[171.24810791 -269.55917358]
[184.87242126 -276.08258057]
[199.78292847 -278.50198364]
[214.77090454 -276.62124634]
[228.62133789 -270.59280396]
[240.21144104 -260.90539551]
[248.60166931 -248.34429932]
[253.11184692 -233.92781067]
[253.37634277 -218.82461548]
[249.37374878 -204.25903320]
[241.42851257 -191.41186523]
[230.18472290 -181.32455444]
[216.55386353 -174.81481934]
[201.64094543 -172.41041565]
[199.77333069 -157.52713013]
[197.90571594 -142.64384460]
[196.03810120 -127.76056671]
[194.17048645 -112.87728882]
[204.15132141 -124.07473755]
[217.77673340 -130.34754944]
[232.77369690 -130.64926147]
[246.64038086 -124.92955780]
[257.06350708 -114.14260864]
[262.30429077 -100.08792114]
[261.48840332 -85.11012268]
[254.75199890 -71.70785522]
[243.21884155 -62.11692047]
[228.81291199 -57.93729401]
[213.93745422 -59.86623383]
[201.07402039 -67.58194733]
[192.36854553 -79.79728699]
[189.27326965 -94.47303772]
[183.49699402 -80.62981415]
[177.72071838 -66.78659821]
[171.94444275 -52.94338226]
[166.16816711 -39.10016251]
[168.40769958 -24.37488747]
[155.95285034 -14.61848450]
[150.17658997 -0.77526695]
[156.06057739 12.85976887]
[150.39982605 26.98104477]
[136.05824280 33.06026840]
[130.28196716 46.90348816]
[124.50569916 60.74670410]
[133.83753967 68.43464661]
[140.85932922 78.27752686]
[145.09169006 89.60337067]
[146.24569702 101.63897705]
[144.24255371 113.56269836]
[139.21902466 124.56050873]
[131.51805115 133.88160706]
[121.66537476 140.88963318]
[110.33363342 145.10617065]
[111.26925659 160.07696533]
[112.20488739 175.04774475]
[113.14051819 190.01853943]
[114.07614136 204.98933411]
[115.01177216 219.96012878]
[115.94740295 234.93092346]
[116.88302612 249.90170288]
[117.81865692 264.87249756]
[118.75428772 279.84329224]
[133.58952332 282.52270508]
[147.35215759 288.67523193]
[159.24205017 297.94311523]
[168.56793213 309.78756714]
[174.78762817 323.51998901]
[177.53952026 338.34194946]
[176.66360474 353.39172363]
[172.21083069 367.79437256]
[164.44006348 380.71252441]
[153.80308533 391.39514160]
[140.91831970 399.22113037]
[126.53487396 403.73553467]
[111.48896790 404.67584229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[23 46]
[24 45]
[25 44]
[51 119]
[52 118]
[53 117]
[56 114]
[57 113]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
