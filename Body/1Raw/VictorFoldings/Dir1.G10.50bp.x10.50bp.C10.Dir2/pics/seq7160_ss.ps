%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUAUUCAUCGGGGGGGGGGGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUxxxxxxxxxxCAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCCCCCCCCCCCAUAAUAUUCAUC\
) } def
/len { sequence length } bind def

/coor [
[90.31836700 593.26959229]
[76.15776062 588.11456299]
[63.56801605 579.83233643]
[53.22807693 568.86956787]
[45.69556808 555.81744385]
[41.37670135 541.37988281]
[40.50439453 526.33538818]
[43.12568283 511.49539185]
[49.09920883 497.66015625]
[58.10282898 485.57580566]
[69.65098572 475.89404297]
[83.12090302 469.13696289]
[97.78616333 465.66897583]
[97.78616333 450.66897583]
[97.78616333 435.66897583]
[97.78616333 420.66897583]
[97.78616333 405.66897583]
[97.78616333 390.66897583]
[97.78616333 375.66897583]
[97.78616333 360.66897583]
[97.78616333 345.66897583]
[97.78616333 330.66897583]
[97.78616333 315.66897583]
[97.78616333 300.66897583]
[82.29832458 294.69348145]
[70.24990082 283.22036743]
[63.49467468 267.97625732]
[63.08679962 251.27082825]
[69.11638641 235.64691162]
[80.69152069 223.49345398]
[96.07009125 216.68025208]
[95.46221161 201.69256592]
[94.85432434 186.70489502]
[94.24644470 171.71722412]
[85.54963684 163.25650024]
[84.95381927 150.73571777]
[93.32703400 140.87446594]
[93.02302551 125.87754822]
[92.71902466 110.88063049]
[91.80751038 95.90834808]
[90.28998566 80.98530579]
[88.77246094 66.06227112]
[74.61731720 63.27528381]
[61.83933258 56.61205292]
[51.47435760 46.62288666]
[44.35975647 34.12729645]
[41.06676865 20.14676476]
[41.85464478 5.82124710]
[46.65027237 -7.68378448]
[55.05484009 -19.27215576]
[66.37700653 -28.00596428]
[79.68974304 -33.18148804]
[78.47497559 -48.13221741]
[73.40821075 -62.25057220]
[64.83918762 -74.56202698]
[56.27016449 -86.87347412]
[48.75358200 -92.16896057]
[47.65520859 -99.52240753]
[39.33745956 -112.00499725]
[31.01971245 -124.48758698]
[15.63450909 -129.03457642]
[9.73070526 -143.95182800]
[17.83719444 -157.79612732]
[33.73537064 -159.94729614]
[45.22951508 -148.75514221]
[43.50230408 -132.80534363]
[51.82004929 -120.32274628]
[60.13779831 -107.84015656]
[68.58161926 -95.44249725]
[77.15064240 -83.13105011]
[85.71966553 -70.81959534]
[84.72332764 -85.78646851]
[87.02123260 -100.60941315]
[92.50233459 -114.57212830]
[100.90177155 -126.99990082]
[111.81365967 -137.29216003]
[124.71068573 -144.95158386]
[138.96963501 -149.60800171]
[153.90147400 -151.03643799]
[168.78462219 -149.16783142]
[182.89990234 -144.09249878]
[195.56520081 -136.05570984]
[206.16850281 -125.44580078]
[214.19740295 -112.77548981]
[219.26393127 -98.65705109]
[221.12326050 -83.77273560]
[219.68553162 -68.84179688]
[215.02021790 -54.58575058]
[207.35276794 -41.69349670]
[197.05369568 -30.78802681]
[184.62069702 -22.39633560]
[170.65457153 -16.92393494]
[155.83020020 -14.63527012]
[140.86395264 -15.64093494]
[126.47903442 -19.89233398]
[113.37059784 -27.18402672]
[102.17206573 -37.16365051]
[93.42570496 -49.34698486]
[94.64047241 -34.39625549]
[109.89190674 -30.94987869]
[123.35327148 -22.95723343]
[133.70564270 -11.18750381]
[139.93045044 3.21938276]
[141.40963745 18.86315918]
[137.98704529 34.21931076]
[129.98477173 47.78765106]
[118.17291260 58.23886108]
[103.69549561 64.54474640]
[105.21302032 79.46778107]
[106.73054504 94.39082336]
[108.98398590 96.53907013]
[110.48500824 99.57352448]
[110.89704895 103.20922852]
[109.99658966 107.03852081]
[107.71594238 110.57662201]
[108.01994324 125.57353973]
[108.32395172 140.57046509]
[118.22203064 156.06588745]
[109.23412323 171.10932922]
[109.84200287 186.09701538]
[110.44989014 201.08468628]
[111.05776978 216.07237244]
[123.97041321 220.02018738]
[135.01010132 227.75518799]
[143.10226440 238.50723267]
[147.46458435 251.21334839]
[147.68261719 264.62280273]
[143.74911499 277.42034912]
[136.06335449 288.35501099]
[125.39064026 296.36254883]
[112.78616333 300.66897583]
[112.78616333 315.66897583]
[112.78616333 330.66897583]
[112.78616333 345.66897583]
[112.78616333 360.66897583]
[112.78616333 375.66897583]
[112.78616333 390.66897583]
[112.78616333 405.66897583]
[112.78616333 420.66897583]
[112.78616333 435.66897583]
[112.78616333 450.66897583]
[112.78616333 465.66897583]
[127.45142365 469.13696289]
[140.92134094 475.89404297]
[152.46949768 485.57580566]
[161.47311401 497.66015625]
[167.44664001 511.49539185]
[170.06793213 526.33538818]
[169.19561768 541.37988281]
[164.87675476 555.81744385]
[157.34423828 568.86956787]
[147.00430298 579.83233643]
[134.41456604 588.11456299]
[120.25395966 593.26959229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[31 122]
[32 121]
[33 120]
[34 119]
[37 117]
[38 116]
[39 115]
[40 110]
[41 109]
[42 108]
[52 99]
[53 98]
[54 71]
[55 70]
[56 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
