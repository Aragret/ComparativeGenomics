%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGAAAUCGGGGGGGGGGGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUAxxxxxxxxxxCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCCCCCCCCCCCUAGAAGUC\
) } def
/len { sequence length } bind def

/coor [
[96.81555176 473.15795898]
[83.59535217 465.88549805]
[72.70854950 455.43850708]
[64.89741516 442.52923584]
[60.69453812 428.03793335]
[60.38646317 412.95260620]
[63.99420547 398.30175781]
[71.27178192 385.08438110]
[81.72298431 374.20162964]
[94.63524628 366.39547729]
[109.12818909 362.19818115]
[108.81613159 347.20141602]
[108.50407410 332.20468140]
[108.19201660 317.20791626]
[107.87995911 302.21118164]
[107.56790161 287.21441650]
[107.25585175 272.21765137]
[106.94379425 257.22091675]
[106.63173676 242.22415161]
[106.31967926 227.22740173]
[106.00762177 212.23065186]
[120.88355255 173.63591003]
[115.39652252 159.67552185]
[109.90949249 145.71511841]
[104.42245483 131.75473022]
[86.74907684 130.67353821]
[71.64161682 120.11074829]
[63.97254562 102.55092621]
[66.68653870 82.84777832]
[52.66982269 77.50626373]
[38.65311050 72.16474915]
[24.63639641 66.82323456]
[8.98560143 69.13908386]
[-0.15210766 57.37679291]
[-14.43498802 63.59266663]
[-28.57383728 57.97594070]
[-34.41170120 44.32109070]
[-48.42841339 38.97957611]
[-62.44512558 33.63806534]
[-72.85649872 44.71379471]
[-86.71590424 50.95762253]
[-101.90988159 51.41740417]
[-116.12146759 46.02302551]
[-127.18349457 35.59709549]
[-133.40908813 21.72949219]
[-133.84887695 6.53491926]
[-128.43580627 -7.66955757]
[-117.99533844 -18.71785927]
[-104.11955261 -24.92519951]
[-88.92441559 -25.34500694]
[-74.72707367 -19.91325951]
[-63.69251251 -9.45826244]
[-57.50343323 4.42567444]
[-57.10361481 19.62135124]
[-43.08690262 24.96286392]
[-29.07018852 30.30437660]
[-15.62538910 23.99779510]
[-1.33435667 29.21517563]
[5.18940496 43.36008072]
[19.83763123 40.66217041]
[29.97790909 52.80652618]
[43.99462128 58.14803696]
[58.01133728 63.48954773]
[72.02804565 68.83106232]
[84.80540466 60.97363663]
[86.36298370 46.05472565]
[87.92057037 31.13581085]
[73.88100433 25.58665085]
[61.85990524 16.45451927]
[52.74932480 4.41708279]
[47.22532272 -9.63239956]
[45.69781494 -24.65136528]
[48.28015518 -39.52530289]
[54.78071976 -53.15047455]
[64.71711731 -64.51579285]
[77.35200500 -72.77788544]
[91.74779510 -77.32364655]
[106.83621216 -77.81575012]
[121.49760437 -74.21767426]
[134.64399719 -66.79642487]
[145.29985046 -56.10270691]
[152.67440796 -42.93006897]
[156.22044373 -28.25600243]
[155.67480469 -13.16942310]
[151.07800293 1.21014416]
[142.77113342 13.81564140]
[131.37063599 23.71165466]
[117.72248840 30.16383743]
[102.83947754 32.69339371]
[101.28189850 47.61230469]
[99.72431946 62.53121567]
[112.14230347 67.42385864]
[121.16298676 75.91578674]
[133.42535400 67.27667236]
[145.68772888 58.63755417]
[157.95008850 49.99843979]
[164.34289551 34.89664841]
[180.64884949 33.15088654]
[190.09379578 46.55704498]
[182.96157837 61.32401657]
[166.58920288 62.26080704]
[154.32684326 70.89992523]
[142.06446838 79.53903961]
[129.80210876 88.17815399]
[132.03132629 98.61592865]
[130.71075439 109.20709229]
[125.98676300 118.77790070]
[118.38285065 126.26770020]
[123.86988068 140.22808838]
[129.35690308 154.18847656]
[134.84394836 168.14888000]
[146.44528198 177.65722656]
[161.21133423 180.29609680]
[172.30453491 169.44618225]
[187.66139221 167.22213745]
[201.37690735 174.47917175]
[208.17715454 188.42678833]
[205.44732666 203.70185852]
[194.23709106 214.43080139]
[178.85699463 216.48811340]
[165.22102356 209.08271790]
[158.57247925 195.06214905]
[143.80641174 192.42329407]
[138.10591125 197.29711914]
[150.89949036 205.12809753]
[147.40502930 219.71537781]
[132.45184326 220.89949036]
[126.70488739 207.04476929]
[121.00437927 211.91859436]
[121.31643677 226.91534424]
[121.62848663 241.91209412]
[121.94054413 256.90884399]
[122.25260162 271.90560913]
[122.56465912 286.90237427]
[122.87671661 301.89910889]
[123.18877411 316.89587402]
[123.50082397 331.89260864]
[123.81288147 346.88937378]
[124.12493896 361.88613892]
[138.77993774 365.47689819]
[152.00573730 372.73916626]
[162.90060425 383.17773438]
[170.72171021 396.08096313]
[174.93577576 410.56903076]
[175.25549316 425.65411377]
[171.65907288 440.30773926]
[164.39170837 453.53073120]
[153.94891357 464.42156982]
[141.04267883 472.23767090]
[126.55298615 476.44616699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 111]
[23 110]
[24 109]
[25 108]
[29 64]
[30 63]
[31 62]
[32 61]
[34 59]
[37 56]
[38 55]
[39 54]
[65 91]
[66 90]
[67 89]
[93 104]
[94 103]
[95 102]
[96 101]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
