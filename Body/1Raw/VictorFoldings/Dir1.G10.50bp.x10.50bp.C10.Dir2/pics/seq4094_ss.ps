%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAUUAUAAGGGGGGGGGGUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCxxxxxxxxxxCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCCCCCCCCCCCAUAAUUAUAA\
) } def
/len { sequence length } bind def

/coor [
[84.96269989 361.52117920]
[70.94075012 355.96817017]
[58.74079514 347.10183716]
[49.12972260 335.47952271]
[42.71169662 321.83181763]
[39.89016342 307.01663208]
[40.84247589 291.96527100]
[45.50878143 277.62384033]
[53.59574890 264.89389038]
[64.59502411 254.57560730]
[77.81518555 247.31762695]
[92.42519379 243.57618713]
[92.42519379 228.57618713]
[92.42519379 213.57618713]
[92.42519379 198.57618713]
[92.42519379 183.57618713]
[92.42519379 168.57618713]
[92.42519379 153.57618713]
[92.42519379 138.57618713]
[92.42519379 123.57618713]
[92.42519379 108.57618713]
[81.55751801 118.91512299]
[66.59839630 120.02185822]
[54.32754135 111.39480591]
[50.30627441 96.94387054]
[56.35709763 83.21843719]
[69.73768616 76.43907166]
[84.38376617 79.67828369]
[93.65694427 91.46633148]
[95.80551910 76.62100983]
[97.95410156 61.77568436]
[100.10267639 46.93036270]
[102.25125885 32.08504105]
[87.57495880 28.95904732]
[73.13733673 24.86991882]
[59.00154495 19.83553696]
[45.22938156 13.87791634]
[31.88107491 7.02310753]
[19.01499367 -0.69891489]
[6.68739653 -9.25438404]
[-5.04780960 -18.60588837]
[-16.13930893 -28.71253777]
[-26.53860092 -39.53013611]
[-36.20021057 -51.01137924]
[-45.08189392 -63.10606766]
[-53.14480972 -75.76130676]
[-60.35369873 -88.92176056]
[-66.67704773 -102.52988434]
[-72.08718872 -116.52616882]
[-76.56048584 -130.84941101]
[-80.07735443 -145.43699646]
[-82.62243652 -160.22509766]
[-84.18460083 -175.14909363]
[-84.75700378 -190.14369202]
[-84.33715057 -205.14334106]
[-82.92687225 -220.08244324]
[-80.53234100 -234.89567566]
[-77.16403198 -249.51826477]
[-72.83666229 -263.88626099]
[-67.56916046 -277.93685913]
[-61.38456345 -291.60861206]
[-54.30990982 -304.84170532]
[-46.37613678 -317.57830811]
[-37.61793900 -329.76269531]
[-28.07361221 -341.34164429]
[-17.78489113 -352.26446533]
[-6.79676867 -362.48339844]
[4.84270954 -371.95379639]
[17.08264542 -380.63421631]
[29.86951447 -388.48669434]
[43.14740753 -395.47692871]
[56.85825729 -401.57434082]
[70.94211578 -406.75222778]
[85.33738708 -410.98800659]
[99.98113251 -414.26312256]
[114.80931854 -416.56326294]
[129.75709534 -417.87835693]
[144.75912476 -418.20266724]
[159.74977112 -417.53479004]
[174.66351318 -415.87759399]
[189.43510437 -413.23840332]
[203.99998474 -409.62869263]
[218.29444885 -405.06423950]
[232.25599670 -399.56506348]
[245.82357788 -393.15518188]
[258.93783569 -385.86264038]
[271.54147339 -377.71926880]
[283.57934570 -368.76074219]
[294.99884033 -359.02621460]
[305.74996948 -348.55822754]
[315.78576660 -337.40258789]
[325.06234741 -325.60806274]
[333.53915405 -313.22622681]
[341.17907715 -300.31121826]
[347.94873047 -286.91952515]
[353.81851196 -273.10971069]
[358.76275635 -258.94213867]
[362.75985718 -244.47875977]
[365.79229736 -229.78285217]
[367.84686279 -214.91865540]
[368.91455078 -199.95115662]
[368.99069214 -184.94583130]
[368.07495117 -169.96827698]
[366.17132568 -155.08398438]
[363.28814697 -140.35806274]
[359.43801880 -125.85488129]
[354.63778687 -111.63786316]
[348.90844727 -97.76918793]
[342.27502441 -84.30948639]
[334.76654053 -71.31762695]
[326.41583252 -58.85041046]
[317.25942993 -46.96236038]
[307.33734131 -35.70545197]
[296.69296265 -25.12891960]
[285.37286377 -15.27900410]
[273.42651367 -6.19878101]
[260.90615845 2.07204533]
[247.86656189 9.49730778]
[234.36473083 16.04453850]
[220.45970154 21.68510628]
[206.21229553 26.39434624]
[191.68478394 30.15166664]
[176.94073486 32.94063950]
[162.04457092 34.74906540]
[147.06147766 35.56903839]
[132.05694580 35.39697266]
[117.09658051 34.23361969]
[114.94800568 49.07894135]
[112.79942322 63.92426300]
[110.65084076 78.76958466]
[108.50226593 93.61490631]
[107.42519379 108.57618713]
[107.42519379 123.57618713]
[107.42519379 138.57618713]
[107.42519379 153.57618713]
[107.42519379 168.57618713]
[107.42519379 183.57618713]
[107.42519379 198.57618713]
[107.42519379 213.57618713]
[107.42519379 228.57618713]
[107.42519379 243.57618713]
[122.03520966 247.31762695]
[135.25537109 254.57560730]
[146.25463867 264.89389038]
[154.34161377 277.62384033]
[159.00791931 291.96527100]
[159.96023560 307.01663208]
[157.13868713 321.83181763]
[150.72067261 335.47952271]
[141.10958862 347.10183716]
[128.90963745 355.96817017]
[114.88769531 361.52117920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[29 131]
[30 130]
[31 129]
[32 128]
[33 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
