%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCAAUCGGGGGGGGGGACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCxxxxxxxxxxGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCCCCCCCCCCCACUAAUC\
) } def
/len { sequence length } bind def

/coor [
[84.58271027 373.02932739]
[70.73677063 367.01330566]
[59.02811050 357.48388672]
[50.32558441 345.14822388]
[45.27498245 330.92169189]
[44.25109100 315.86001587]
[47.32989120 301.08087158]
[54.28291321 287.68093872]
[64.59420013 276.65460205]
[77.49858093 268.82009888]
[92.03846741 264.75878906]
[92.03846741 249.75877380]
[92.03846741 234.75877380]
[92.03846741 219.75877380]
[92.03846741 204.75877380]
[92.03846741 189.75877380]
[92.03846741 174.75877380]
[92.03846741 159.75877380]
[92.03846741 144.75877380]
[92.03846741 129.75877380]
[88.87288666 123.02641296]
[92.19774628 114.44753265]
[86.71071625 100.48714447]
[76.27090454 89.71633148]
[61.11035919 85.19213104]
[57.80813599 70.66819763]
[47.36832428 59.89739227]
[36.92850876 49.12658310]
[24.02627945 48.13344955]
[15.55072117 38.89310837]
[15.66658115 26.75663948]
[2.94704771 34.78469467]
[-11.02740288 40.33725739]
[-25.78030396 43.22658539]
[-40.80893326 43.35571671]
[-55.60145569 40.72172165]
[-69.65433502 35.41574478]
[-82.48948669 27.61986542]
[-93.67055511 17.60083771]
[-102.81771851 5.70097208]
[-109.62062073 -7.67356634]
[-113.84887695 -22.06661797]
[-115.35990143 -36.98758316]
[-114.10367584 -51.92815781]
[-110.12445831 -66.37963104]
[-103.55917358 -79.85021973]
[-94.63273621 -91.88180542]
[-104.84621429 -102.86746979]
[-115.05970001 -113.85313416]
[-125.27317810 -124.83879852]
[-140.33631897 -129.67741394]
[-143.33567810 -144.26690674]
[-153.54916382 -155.25256348]
[-168.93659973 -153.25103760]
[-182.54563904 -160.70582581]
[-189.14329529 -174.75041199]
[-186.19267273 -189.98437500]
[-174.82830811 -200.54992676]
[-159.42005920 -202.38441467]
[-145.89268494 -194.78242493]
[-139.44776917 -180.66709900]
[-142.56349182 -165.46604919]
[-132.35000610 -154.48037720]
[-118.01740265 -150.42753601]
[-114.28751373 -135.05227661]
[-104.07403564 -124.06661224]
[-93.86054993 -113.08094788]
[-83.64707184 -102.09528351]
[-70.99794006 -110.12271881]
[-57.08539963 -115.69055939]
[-42.38272095 -118.60783386]
[-27.39034462 -118.77374268]
[-12.61885166 -116.18115997]
[1.42843318 -110.91696167]
[14.27258968 -103.15903473]
[25.47542572 -93.17034149]
[34.65443420 -81.28998566]
[41.49584579 -67.92166138]
[45.76535797 -53.51999283]
[47.31615829 -38.57504272]
[46.09397125 -23.59563255]
[42.13896942 -9.09203911]
[35.58442307 4.44140720]
[26.65224648 16.54315948]
[43.66073990 20.75161552]
[47.69931793 38.68677139]
[58.13912964 49.45757675]
[68.57894135 60.22838593]
[82.99276733 63.98218918]
[87.04170990 79.27651978]
[97.48152924 90.04733276]
[105.26715851 82.80591583]
[119.17711639 82.89199829]
[133.94317627 80.25313568]
[148.70922852 77.61427307]
[163.47528076 74.97541046]
[150.55174255 67.36080933]
[143.66448975 54.03542709]
[144.92712402 39.08866501]
[153.95216370 27.10748482]
[167.96994019 21.76876259]
[182.67857361 24.71088219]
[193.56417847 35.03094482]
[197.28608704 49.56185532]
[192.70211792 63.84426117]
[181.21827698 73.49539948]
[196.21745300 73.65143585]
[211.21664429 73.80747223]
[218.96487427 60.54623032]
[232.31359863 52.94970703]
[247.67207336 53.06133652]
[260.90896606 60.85108948]
[268.46362305 74.22355652]
[268.30383301 89.58161926]
[260.47265625 102.79402924]
[247.07655334 110.30671692]
[231.71907043 110.09880829]
[218.53126526 102.22622681]
[211.06060791 88.80666351]
[196.06141663 88.65062714]
[181.06224060 88.49459076]
[166.11415100 89.74146271]
[151.34809875 92.38032532]
[136.58203125 95.01919556]
[121.81597900 97.65805817]
[135.79019165 103.10979462]
[139.43910217 117.65921021]
[129.69148254 129.06025696]
[114.75176239 127.71682739]
[107.19450378 114.75959015]
[107.03846741 129.75877380]
[107.03846741 144.75877380]
[107.03846741 159.75877380]
[107.03846741 174.75877380]
[107.03846741 189.75877380]
[107.03846741 204.75877380]
[107.03846741 219.75877380]
[107.03846741 234.75877380]
[107.03846741 249.75877380]
[107.03846741 264.75878906]
[121.57835388 268.82009888]
[134.48272705 276.65460205]
[144.79402161 287.68093872]
[151.74703979 301.08087158]
[154.82583618 315.86001587]
[153.80194092 330.92169189]
[148.75134277 345.14822388]
[140.04882812 357.48388672]
[128.34016418 367.01330566]
[114.49421692 373.02932739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 91]
[24 90]
[26 88]
[27 87]
[28 86]
[31 84]
[47 68]
[48 67]
[49 66]
[50 65]
[52 63]
[53 62]
[93 125]
[94 124]
[95 123]
[96 122]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
