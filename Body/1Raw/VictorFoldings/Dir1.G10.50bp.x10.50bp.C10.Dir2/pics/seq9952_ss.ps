%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUUAUCCGGGGGGGGGGAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUxxxxxxxxxxCCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCCCCCCCCCCCACUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[88.90020752 382.80303955]
[75.68000793 375.53057861]
[64.79320526 365.08355713]
[56.98207474 352.17431641]
[52.77919388 337.68301392]
[52.47111893 322.59765625]
[56.07886124 307.94683838]
[63.35643387 294.72946167]
[73.80764008 283.84667969]
[86.71990204 276.04052734]
[101.21283722 271.84326172]
[100.90078735 256.84649658]
[100.58872986 241.84974670]
[100.27667236 226.85299683]
[99.96461487 211.85623169]
[99.65255737 196.85948181]
[99.34049988 181.86273193]
[99.02845001 166.86598206]
[98.71639252 151.86921692]
[98.40433502 136.87246704]
[98.09227753 121.87571716]
[85.65283966 113.49357605]
[71.63612366 118.83508301]
[57.61941147 124.17659760]
[43.60269928 129.51811218]
[38.64699936 144.34967041]
[25.29021645 152.48171997]
[9.83901501 150.07456970]
[-0.41102108 138.26480103]
[-0.62013751 122.62861633]
[9.31040382 110.54895020]
[24.69170570 107.72944641]
[38.26118851 115.50139618]
[52.27790070 110.15988159]
[66.29460907 104.81837463]
[80.31132507 99.47686005]
[90.05897522 88.07583618]
[93.15730286 73.39931488]
[96.25562286 58.72278976]
[99.35394287 44.04626083]
[84.95045471 39.83173752]
[70.91184998 34.52699280]
[57.32051086 28.16316605]
[44.25620270 20.77759743]
[31.79559326 12.41363049]
[20.01180458 3.12034917]
[8.97398949 -7.04770899]
[-1.25307536 -18.03087234]
[-10.60937405 -29.76468849]
[-19.03999901 -42.18029785]
[-26.49547386 -55.20483780]
[-32.93204880 -68.76187134]
[-38.31195068 -82.77185059]
[-42.60360718 -97.15254211]
[-45.78182983 -111.81957245]
[-47.82797241 -126.68685150]
[-48.73002625 -141.66714478]
[-48.48269653 -156.67253113]
[-47.08743286 -171.61494446]
[-44.55242538 -186.40672302]
[-40.89254761 -200.96102905]
[-36.12928391 -215.19247437]
[-30.29058266 -229.01754761]
[-23.41070938 -242.35508728]
[-15.53003788 -255.12684631]
[-6.69481611 -267.25787354]
[3.04310751 -278.67694092]
[13.62658596 -289.31710815]
[24.99350929 -299.11587524]
[37.07717514 -308.01574707]
[49.80666351 -315.96450806]
[63.10727692 -322.91549683]
[76.90096283 -328.82794189]
[91.10676575 -333.66714478]
[105.64133453 -337.40469360]
[120.41935730 -340.01864624]
[135.35411072 -341.49368286]
[150.35795593 -341.82113647]
[165.34284973 -340.99911499]
[180.22085571 -339.03237915]
[194.90463257 -335.93252563]
[209.30804443 -331.71774292]
[223.34655762 -326.41271973]
[236.93777466 -320.04864502]
[250.00193787 -312.66281128]
[262.46240234 -304.29861450]
[274.24600220 -295.00512695]
[285.28363037 -284.83685303]
[295.51046753 -273.85348511]
[304.86654663 -262.11950684]
[313.29693604 -249.70372009]
[320.75216675 -236.67904663]
[327.18850708 -223.12188721]
[332.56811523 -209.11181641]
[336.85949707 -194.73103333]
[340.03744507 -180.06394958]
[342.08331299 -165.19662476]
[342.98507690 -150.21632385]
[342.73745728 -135.21093750]
[341.34191895 -120.26854706]
[338.80664062 -105.47682190]
[335.14648438 -90.92257690]
[330.38296509 -76.69122314]
[324.54397583 -62.86626816]
[317.66384888 -49.52885437]
[309.78295898 -36.75724792]
[300.94750977 -24.62639809]
[291.20935059 -13.20749283]
[280.62567139 -2.56754637]
[269.25857544 7.23100281]
[257.17474365 16.13065147]
[244.44509888 24.07917213]
[231.14434814 31.02992058]
[217.35055542 36.94210434]
[203.14465332 41.78103256]
[188.61001587 45.51830292]
[173.83193970 48.13198090]
[158.89715576 49.60673904]
[143.89331055 49.93391418]
[128.90843201 49.11158752]
[114.03047180 47.14458466]
[110.93214417 61.82110977]
[107.83382416 76.49763489]
[104.73550415 91.17416382]
[110.33462524 92.01856995]
[115.65003967 96.22150421]
[118.81909943 103.49871826]
[118.25180817 112.60854340]
[113.08903503 121.56365967]
[113.40108490 136.56040955]
[113.71314240 151.55717468]
[114.02519989 166.55392456]
[114.33725739 181.55067444]
[114.64931488 196.54742432]
[114.96137238 211.54418945]
[115.27342224 226.54093933]
[115.58547974 241.53768921]
[115.89753723 256.53445435]
[116.20959473 271.53118896]
[130.86459351 275.12197876]
[144.09039307 282.38421631]
[154.98526001 292.82281494]
[162.80636597 305.72604370]
[167.02043152 320.21408081]
[167.34014893 335.29919434]
[163.74372864 349.95278931]
[156.47636414 363.17581177]
[146.03356934 374.06665039]
[133.12733459 381.88275146]
[118.63764191 386.09121704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 36]
[23 35]
[24 34]
[25 33]
[37 124]
[38 123]
[39 122]
[40 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
