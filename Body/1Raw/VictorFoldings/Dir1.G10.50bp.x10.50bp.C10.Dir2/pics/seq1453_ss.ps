%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAAACUGGGGGGGGGGGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGxxxxxxxxxxCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACCCCCCCCCCCAACAAAACU\
) } def
/len { sequence length } bind def

/coor [
[83.10533905 351.26925659]
[69.88513947 343.99676514]
[58.99833298 333.54977417]
[51.18720245 320.64053345]
[46.98432159 306.14920044]
[46.67625046 291.06387329]
[50.28399277 276.41305542]
[57.56156540 263.19564819]
[68.01277161 252.31288147]
[80.92503357 244.50674438]
[95.41796875 240.30944824]
[95.10591125 225.31269836]
[94.79386139 210.31594849]
[94.48180389 195.31919861]
[94.16974640 180.32243347]
[93.85768890 165.32568359]
[93.54563141 150.32893372]
[93.23357391 135.33218384]
[92.92152405 120.33542633]
[80.84152985 111.44307709]
[66.42931366 115.60095978]
[52.01710129 119.75885010]
[37.60488510 123.91674042]
[23.19266891 128.07463074]
[8.78045273 132.23251343]
[1.84381127 143.15664673]
[-10.29468441 146.29924011]
[-20.95481682 140.49674988]
[-35.45041275 144.35391235]
[-46.67818451 156.30670166]
[-62.57949066 152.29666138]
[-66.79643250 136.44895935]
[-54.99098206 125.06636810]
[-39.30757523 129.85832214]
[-24.81197739 126.00115967]
[-13.10811138 112.96200562]
[4.62256479 117.82029724]
[19.03478050 113.66240692]
[33.44699860 109.50452423]
[47.85921478 105.34663391]
[62.27143097 101.18874359]
[76.68364716 97.03086090]
[85.82537842 85.13848114]
[86.13743591 70.14172363]
[86.44949341 55.14497375]
[86.76155090 40.14822006]
[86.76155090 25.14821815]
[86.44949341 10.15146446]
[77.33951569 22.06818771]
[63.54515839 27.96019554]
[48.63705063 26.30235863]
[36.47411728 17.52380753]
[30.20468712 3.89683843]
[31.45158958 -11.05124664]
[39.89206314 -23.45118141]
[53.34132004 -30.09328079]
[68.31806183 -29.25825882]
[80.94560242 -21.16225624]
[87.95531464 -7.90100288]
[90.74764252 -22.63880920]
[93.53996277 -37.37661362]
[96.33229065 -52.11442184]
[94.55842590 -57.16149902]
[94.90697479 -61.89762497]
[96.89115143 -65.55340576]
[99.78598022 -67.67176056]
[103.49214172 -82.20669556]
[107.19830322 -96.74163055]
[110.90446472 -111.27656555]
[97.60849762 -118.38153839]
[86.39968872 -128.46250916]
[77.92969513 -140.93338013]
[72.69096375 -155.06912231]
[70.98806763 -170.04789734]
[72.91999817 -184.99885559]
[78.37445068 -199.05276489]
[87.03430176 -211.39254761]
[98.39608002 -221.30081177]
[111.79922485 -228.20146179]
[126.46450043 -231.69334412]
[141.53927612 -231.57341003]
[156.14714050 -227.84864807]
[169.43879700 -220.73562622]
[180.64149475 -210.64785767]
[189.10392761 -198.17184448]
[194.33409119 -184.03292847]
[196.02790833 -169.05313110]
[194.08689880 -154.10334778]
[188.62393188 -140.05274963]
[179.95660400 -127.71821594]
[168.58882141 -117.81684875]
[155.18150330 -110.92431641]
[140.51411438 -107.44133759]
[125.43939972 -107.57040405]
[121.73323822 -93.03546906]
[118.02708435 -78.50053406]
[114.32092285 -63.96559906]
[111.07009125 -49.32209778]
[108.27777100 -34.58428955]
[105.48544312 -19.84648514]
[102.69312286 -5.10867834]
[101.44624329 9.83940887]
[101.75830078 24.83616257]
[104.57109070 28.76855659]
[104.89939880 34.52386093]
[101.75830078 40.46027374]
[101.44624329 55.45702744]
[101.13418579 70.45378113]
[100.82213593 85.45053864]
[115.07636261 79.09365845]
[134.37178040 86.36315155]
[149.01528931 89.61397552]
[158.42005920 77.59262085]
[172.11312866 70.85002899]
[187.37573242 70.72495270]
[201.17747498 77.24223328]
[210.77798462 89.10784149]
[214.27110291 103.96586609]
[210.96325684 118.86623383]
[201.51121521 130.85046387]
[187.79170227 137.53907776]
[172.52871704 137.60404968]
[158.75276184 131.03247070]
[149.19903564 119.12914276]
[145.76446533 104.25747681]
[131.12095642 101.00665283]
[125.32028961 105.76083374]
[134.82846069 117.36231995]
[123.22682953 126.87031555]
[113.71894836 115.26918793]
[107.91827393 120.02336884]
[108.23033142 135.02012634]
[108.54238892 150.01687622]
[108.85444641 165.01362610]
[109.16649628 180.01037598]
[109.47855377 195.00714111]
[109.79061127 210.00389099]
[110.10266876 225.00064087]
[110.41472626 239.99739075]
[125.06971741 243.58816528]
[138.29553223 250.85041809]
[149.19039917 261.28903198]
[157.01148987 274.19223022]
[161.22555542 288.68029785]
[161.54528809 303.76538086]
[157.94885254 318.41900635]
[150.68148804 331.64199829]
[140.23869324 342.53283691]
[127.33245850 350.34893799]
[112.84277344 354.55743408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[28 35]
[29 34]
[43 109]
[44 108]
[45 107]
[46 106]
[47 103]
[48 102]
[59 101]
[60 100]
[61 99]
[62 98]
[66 97]
[67 96]
[68 95]
[69 94]
[111 126]
[112 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
