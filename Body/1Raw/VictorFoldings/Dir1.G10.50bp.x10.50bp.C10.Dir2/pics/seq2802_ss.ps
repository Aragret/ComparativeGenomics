%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUGAAAGGGGGGGGGGUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCxxxxxxxxxxGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACUUCCCCCCCCCCCACCAGUCAAA\
) } def
/len { sequence length } bind def

/coor [
[83.59052277 374.58627319]
[70.37032318 367.31381226]
[59.48352051 356.86679077]
[51.67238998 343.95755005]
[47.46950912 329.46624756]
[47.16143799 314.38088989]
[50.76918030 299.73007202]
[58.04675293 286.51269531]
[68.49796295 275.62991333]
[81.41022491 267.82376099]
[95.90316010 263.62649536]
[95.59110260 248.62973022]
[95.27904510 233.63298035]
[94.96698761 218.63623047]
[94.65493011 203.63948059]
[94.34288025 188.64271545]
[94.03082275 173.64596558]
[93.71876526 158.64921570]
[93.40670776 143.65246582]
[93.09465027 128.65570068]
[79.92984772 121.58754730]
[71.92263031 108.97187042]
[56.94291306 109.75170898]
[48.43848801 122.59619904]
[34.16831589 127.90803528]
[19.67802238 123.84658051]
[10.46806145 112.17119598]
[-4.51165295 112.95104218]
[-19.49136734 113.73088837]
[-34.47108078 114.51073456]
[-49.45079422 115.29057312]
[-64.43051147 116.07041931]
[-79.41022491 116.85026550]
[-89.80190277 128.75776672]
[-105.57524872 129.74624634]
[-117.37221527 119.22926331]
[-118.19387817 103.44634247]
[-107.55274963 91.76123047]
[-91.76203156 91.10647583]
[-80.19007111 101.87055206]
[-65.21035767 101.09070587]
[-50.23064041 100.31085968]
[-35.25092697 99.53102112]
[-20.27121162 98.75117493]
[-5.29149818 97.97132874]
[9.68821621 97.19148254]
[17.63603401 84.62286377]
[31.62625694 79.07870483]
[46.37086105 82.88003540]
[56.16306686 94.77199554]
[71.14278412 93.99214935]
[84.29929352 75.05363464]
[107.06527710 71.38330841]
[114.24778748 58.21472168]
[121.43029022 45.04614258]
[128.61280823 31.87755775]
[128.42817688 16.05742836]
[141.31504822 8.58896923]
[133.73585510 -10.42070007]
[146.87142944 -30.14815331]
[144.69459534 -44.98935699]
[129.71923828 -46.89761353]
[115.81450653 -52.77647018]
[104.01220703 -62.18967438]
[95.18816376 -74.43870544]
[89.99716949 -88.61460876]
[88.82443237 -103.66542816]
[91.75698090 -118.47430420]
[98.57719421 -131.94230652]
[108.77897644 -143.07003784]
[121.60527039 -151.03173828]
[136.10429382 -155.23658752]
[151.20013428 -155.37255859]
[165.77255249 -151.42958069]
[178.74020386 -143.70024109]
[189.14077759 -132.75808716]
[196.20249939 -119.41513062]
[199.40133667 -104.66148376]
[198.49992371 -89.59197998]
[193.56513977 -75.32486725]
[184.96318054 -62.91886520]
[173.33236694 -53.29457855]
[159.53579712 -47.16619492]
[161.71263123 -32.32498932]
[175.30358887 -25.97786140]
[188.08094788 -33.83528519]
[200.69206238 -41.95682907]
[213.13151550 -50.33897018]
[225.57095337 -58.72111511]
[238.01039124 -67.10325623]
[250.44982910 -75.48540497]
[262.88928223 -83.86754608]
[275.32870483 -92.24968719]
[273.59078979 -107.45620728]
[279.12954712 -121.72437286]
[290.67224121 -131.77546692]
[305.56646729 -135.29983521]
[320.38958740 -131.48757935]
[331.73541260 -121.21473694]
[336.99670410 -106.84194183]
[334.96450806 -91.67195129]
[326.10574341 -79.19071198]
[312.45617676 -72.26632690]
[297.15228271 -72.48996735]
[283.71084595 -79.81024933]
[271.27142334 -71.42810059]
[258.83197021 -63.04595947]
[246.39253235 -54.66381836]
[233.95309448 -46.28167343]
[221.51365662 -37.89953232]
[209.07421875 -29.51738739]
[207.29103088 -25.02341652]
[202.63006592 -21.63126755]
[195.93836975 -21.05792809]
[183.16101074 -13.20050335]
[175.55390930 10.72253799]
[154.48362732 15.77147770]
[155.18199158 30.64970207]
[141.78138733 39.06006622]
[134.59887695 52.22864914]
[127.41636658 65.39723206]
[120.23385620 78.56581116]
[125.11615753 84.57236481]
[128.26641846 91.64281464]
[129.46742249 99.28958130]
[128.63630676 106.98533630]
[125.83042145 114.19938660]
[121.24324799 120.43422699]
[115.19112396 125.25991058]
[108.09140778 128.34364319]
[108.40346527 143.34040833]
[108.71551514 158.33715820]
[109.02757263 173.33390808]
[109.33963013 188.33065796]
[109.65168762 203.32742310]
[109.96374512 218.32417297]
[110.27580261 233.32092285]
[110.58785248 248.31767273]
[110.89990997 263.31442261]
[125.55490112 266.90521240]
[138.78071594 274.16744995]
[149.67558289 284.60604858]
[157.49667358 297.50927734]
[161.71075439 311.99731445]
[162.03047180 327.08242798]
[158.43403625 341.73602295]
[151.16668701 354.95904541]
[140.72387695 365.84988403]
[127.81764984 373.66598511]
[113.32795715 377.87445068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 51]
[23 50]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[53 122]
[54 121]
[55 120]
[56 119]
[58 117]
[60 84]
[61 83]
[85 115]
[86 114]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
