%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCCCUCUGGGGGGGGGGAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUxxxxxxxxxxCCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUCCCCCCCCCCAUAUCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[87.81822968 374.98684692]
[73.97229004 368.97082520]
[62.26362610 359.44140625]
[53.56110382 347.10574341]
[48.51050186 332.87921143]
[47.48661041 317.81753540]
[50.56540680 303.03836060]
[57.51842880 289.63845825]
[67.82971191 278.61212158]
[80.73409271 270.77761841]
[95.27397919 266.71627808]
[95.27397919 251.71629333]
[95.27397919 236.71629333]
[95.27397919 221.71629333]
[95.27397919 206.71629333]
[95.27397919 191.71629333]
[95.27397919 176.71629333]
[95.27397919 161.71629333]
[95.27397919 146.71629333]
[95.27397919 131.71629333]
[95.27397919 116.71629333]
[85.52632904 105.31526947]
[70.70857239 102.98416901]
[55.89081192 100.65306091]
[41.07305527 98.32196045]
[24.08524132 105.35004425]
[10.84897518 93.86957550]
[21.51193428 104.41951752]
[26.17302132 118.67694855]
[23.80124664 133.48825073]
[14.92122459 145.57730103]
[1.49713421 152.27011108]
[-13.50173950 152.08630371]
[-26.75778389 145.06652832]
[-35.33888245 132.76348877]
[-37.34698105 117.89851379]
[-32.33789825 103.75959778]
[-21.41960335 93.47412872]
[-7.00513935 89.31707764]
[-21.02185249 83.97557068]
[-35.03856659 78.63405609]
[-49.05527878 73.29254150]
[-61.97433472 81.88774872]
[-77.47678375 81.21415710]
[-89.60161591 71.53076935]
[-93.68658447 56.56104279]
[-88.16094208 42.06114960]
[-75.14940643 33.60659409]
[-59.65517807 34.44832230]
[-47.63610458 44.26267242]
[-43.71376419 59.27582932]
[-29.69705200 64.61734009]
[-15.68033981 69.95885468]
[-1.66362679 75.30036926]
[12.87130928 79.00653076]
[22.72603798 71.92192078]
[35.16135788 73.52872467]
[43.40415955 83.50419617]
[58.22191620 85.83530426]
[73.03967285 88.16640472]
[87.85743713 90.49751282]
[101.92895508 85.30209351]
[111.67660522 73.90107727]
[110.63079071 58.35938644]
[120.67871094 46.93598938]
[135.50177002 46.03474426]
[145.24943542 34.63372421]
[154.99708557 23.23270226]
[164.74473572 11.83168221]
[174.49238586 0.43066117]
[159.84928894 3.68333793]
[145.33879089 -0.11737801]
[134.17048645 -10.13080311]
[128.81466675 -24.14205933]
[130.45602417 -39.05198669]
[138.73149109 -51.56264877]
[151.81062317 -58.90679932]
[166.80041504 -59.45998001]
[180.38528442 -53.09983444]
[189.56036377 -41.23316574]
[192.29623413 -26.48477364]
[187.98672485 -12.11515522]
[199.97355652 -21.13268471]
[211.86593628 -30.27441978]
[223.75831604 -39.41615295]
[235.26011658 -49.04467773]
[246.35142517 -59.14332962]
[257.44274902 -69.24198151]
[268.53405762 -79.34062958]
[264.12329102 -93.95253754]
[266.49771118 -109.02983856]
[275.18582153 -121.57891846]
[288.46261597 -129.10815430]
[303.69198608 -130.12260437]
[317.85012817 -124.42084503]
[328.12591553 -113.13497925]
[332.47909546 -98.50580597]
[330.04534912 -83.43797302]
[321.30786133 -70.92320251]
[308.00152588 -63.44631577]
[292.76828003 -62.49184799]
[278.63272095 -68.24931335]
[267.54141235 -58.15066147]
[256.45007324 -48.05201340]
[245.35876465 -37.95336533]
[245.12471008 -35.09809875]
[243.70838928 -32.16756058]
[241.07676697 -29.62661362]
[237.37062073 -27.94271660]
[232.90005493 -27.52377319]
[221.00767517 -18.38204002]
[209.11529541 -9.24030495]
[205.70695496 -2.62752056]
[196.87907410 -0.03516662]
[185.89340210 10.17831326]
[176.14575195 21.57933426]
[166.39810181 32.98035431]
[156.65045166 44.38137436]
[146.90280151 55.78239822]
[148.31611633 70.56542969]
[138.59301758 82.26654816]
[123.07762909 83.64872742]
[113.32997131 95.04975128]
[126.44858551 87.77635956]
[141.04386902 91.23720551]
[149.50007629 103.62641907]
[147.40478516 118.47935486]
[135.85130310 128.04580688]
[120.86819458 127.33403015]
[110.27397919 116.71629333]
[110.27397919 131.71629333]
[110.27397919 146.71629333]
[110.27397919 161.71629333]
[110.27397919 176.71629333]
[110.27397919 191.71629333]
[110.27397919 206.71629333]
[110.27397919 221.71629333]
[110.27397919 236.71629333]
[110.27397919 251.71629333]
[110.27397919 266.71627808]
[124.81386566 270.77761841]
[137.71824646 278.61212158]
[148.02954102 289.63845825]
[154.98255920 303.03836060]
[158.06135559 317.81753540]
[157.03746033 332.87921143]
[151.98686218 347.10574341]
[143.28433228 359.44140625]
[131.57566833 368.97082520]
[117.72973633 374.98684692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 61]
[23 60]
[24 59]
[25 58]
[27 55]
[39 54]
[40 53]
[41 52]
[42 51]
[62 123]
[63 122]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
[82 114]
[83 112]
[84 111]
[85 110]
[86 105]
[87 104]
[88 103]
[89 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
