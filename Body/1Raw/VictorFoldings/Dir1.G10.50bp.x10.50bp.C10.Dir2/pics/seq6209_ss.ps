%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAUUUACAGUGGGGGGGGGGCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACxxxxxxxxxxUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCACCCCCCCCCCUAUAUUUACAGU\
) } def
/len { sequence length } bind def

/coor [
[17.06982231 214.81391907]
[7.08615589 206.89559937]
[-2.14541721 198.11199951]
[-10.55017090 188.53422546]
[-18.06007195 178.23982239]
[-24.61433220 167.31210327]
[-30.15989876 155.83950806]
[-34.65188217 143.91493225]
[-38.05392075 131.63488770]
[-52.83186340 134.20632935]
[-67.60980988 136.77778625]
[-82.38775635 139.34922791]
[-97.16569519 141.92068481]
[-111.94364166 144.49212646]
[-126.72158813 147.06358337]
[-141.49952698 149.63502502]
[-156.27748108 152.20646667]
[-168.54695129 162.19499207]
[-182.41221619 156.75407410]
[-197.19017029 159.32551575]
[-211.96810913 161.89697266]
[-226.74604797 164.46841431]
[-236.51901245 178.94340515]
[-253.39990234 181.84390259]
[-266.90182495 171.86163330]
[-281.62460327 174.73205566]
[-296.34741211 177.60247803]
[-311.07019043 180.47290039]
[-325.76315308 183.49238586]
[-340.42474365 186.66059875]
[-348.77581787 200.07832336]
[-364.18740845 203.57955933]
[-377.51608276 195.08709717]
[-380.85415649 179.63934326]
[-372.22125244 166.40121460]
[-356.73907471 163.22662354]
[-343.59295654 171.99900818]
[-328.93136597 168.83079529]
[-323.02294922 164.31744385]
[-313.94061279 165.75010681]
[-299.21783447 162.87968445]
[-284.49502563 160.00926208]
[-269.77224731 157.13883972]
[-264.11669922 145.52316284]
[-252.62332153 139.20759583]
[-239.39862061 140.70526123]
[-229.31750488 149.69047546]
[-214.53955078 147.11901855]
[-199.76161194 144.54757690]
[-184.98367310 141.97612000]
[-173.77120972 132.17153931]
[-158.84892273 137.42852783]
[-144.07098389 134.85708618]
[-129.29302979 132.28562927]
[-114.51509094 129.71418762]
[-99.73714447 127.14273834]
[-84.95920563 124.57128906]
[-70.18125916 121.99983978]
[-55.40331268 119.42839050]
[-40.62537003 116.85694122]
[-41.58329391 103.71774292]
[-41.31623840 90.54637146]
[-39.82651520 77.45680237]
[-37.12701416 64.56227112]
[-33.24108887 51.97434998]
[-28.20235825 39.80194473]
[-22.05442238 28.15037537]
[-14.85047054 17.12044907]
[-6.65283203 6.80759716]
[2.46756721 -2.69895411]
[12.43181801 -11.31695366]
[23.15370941 -18.97183800]
[34.54047394 -25.59737778]
[46.49359512 -31.13624763]
[58.90965652 -35.54052734]
[71.68122864 -38.77210617]
[84.69781494 -40.80303192]
[97.84679413 -41.61572647]
[111.01441193 -41.20316315]
[124.08672333 -39.56890869]
[136.95063782 -36.72710419]
[149.49485779 -32.70233536]
[161.61085510 -27.52942467]
[173.19378662 -21.25312805]
[184.14343262 -13.92774963]
[193.68135071 -25.50480461]
[203.21926880 -37.08185959]
[212.75718689 -48.65891266]
[206.30786133 -62.49253082]
[206.50799561 -77.75433350]
[213.31784058 -91.41408539]
[225.38529968 -100.75962830]
[240.31436157 -103.93539429]
[255.14088440 -100.31084442]
[266.92102051 -90.60562134]
[273.31579590 -76.74671173]
[273.05557251 -61.48581314]
[266.19198608 -47.85298538]
[254.08782959 -38.55503845]
[239.14636230 -35.43808365]
[224.33424377 -39.12099838]
[214.79632568 -27.54394341]
[205.25840759 -15.96688938]
[195.72048950 -4.38983488]
[212.13249207 13.47858143]
[225.25404358 33.88589478]
[234.70013428 56.23327637]
[240.19354248 79.86495209]
[241.57310486 104.08747864]
[238.79830933 128.19006348]
[253.31947327 131.94984436]
[267.84063721 135.70962524]
[282.36178589 139.46942139]
[290.92871094 130.27395630]
[302.53396606 125.64237213]
[314.93356323 126.40368652]
[325.75814819 132.35050964]
[332.96572876 142.29051208]
[335.22689819 154.28497314]
[349.58377075 158.63015747]
[363.94061279 162.97532654]
[379.77713013 158.71652222]
[391.19085693 170.49185181]
[386.44039917 186.18786621]
[370.41256714 189.65785217]
[359.59545898 177.33218384]
[345.23858643 172.98701477]
[330.88171387 168.64183044]
[317.37310791 179.94445801]
[299.63046265 180.92866516]
[284.69381714 171.01643372]
[278.60198975 153.99057007]
[264.08084106 150.23078918]
[249.55967712 146.47100830]
[235.03852844 142.71121216]
[230.65316772 154.67541504]
[225.21023560 166.19705200]
[218.75378418 177.18284607]
[211.33607483 187.54388428]
[203.01715088 197.19628906]
[193.86434937 206.06193542]
[183.95176697 214.06906128]
[173.35961914 221.15286255]
[162.17367554 227.25598145]
[150.48446655 232.32902527]
[138.38659668 236.33091736]
[125.97801208 239.22927856]
[113.35914612 241.00065613]
[100.63214874 241.63069153]
[87.90003204 241.11428833]
[75.26585388 239.45562744]
[62.83189011 236.66815186]
[50.69878769 232.77439880]
[38.96475220 227.80590820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[16 53]
[17 52]
[19 50]
[20 49]
[21 48]
[22 47]
[25 43]
[26 42]
[27 41]
[28 40]
[29 38]
[30 37]
[85 104]
[86 103]
[87 102]
[88 101]
[110 135]
[111 134]
[112 133]
[113 132]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
