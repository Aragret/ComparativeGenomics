%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCCCCCUCGGGGGGGGGGCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCCCCCCCCCCCGAACCCCCUUC\
) } def
/len { sequence length } bind def

/coor [
[90.37152100 386.41873169]
[77.45236206 378.66036987]
[66.67106628 368.13134766]
[58.60905075 355.39947510]
[53.70108795 341.15136719]
[52.21186447 326.15542603]
[54.22168732 311.22030640]
[59.62217331 297.15148926]
[68.12207794 284.70770264]
[79.26300812 274.55996704]
[92.44416046 267.25558472]
[106.95467377 263.18844604]
[106.33885193 248.20109558]
[105.72303009 233.21372986]
[105.10720062 218.22637939]
[104.49137878 203.23902893]
[103.87554932 188.25167847]
[103.25972748 173.26432800]
[102.64389801 158.27697754]
[102.02807617 143.28961182]
[101.41224670 128.30226135]
[83.07264709 119.72458649]
[76.47714996 102.41921234]
[83.12754822 86.99690247]
[75.23106384 74.24364471]
[67.33457947 61.49039078]
[59.43809891 48.73713303]
[45.09086609 53.34608459]
[30.06656265 54.38658142]
[15.23883247 51.80247498]
[1.46884513 45.74824905]
[-10.44471931 36.57980347]
[-19.81199074 24.83352661]
[-26.09185600 11.19492149]
[-28.92322350 -3.54140615]
[-28.14577103 -18.51803398]
[-23.80902863 -32.86462021]
[-16.16923904 -45.74847412]
[-5.67422771 -56.42288971]
[-13.57071018 -69.17614746]
[-21.46719360 -81.92940521]
[-29.36367607 -94.68266296]
[-37.26015854 -107.43591309]
[-51.09609222 -101.56502533]
[-65.66609192 -97.87509918]
[-80.62860870 -96.45262909]
[-95.63291168 -97.33095551]
[-110.32726288 -100.48949432]
[-124.36721802 -105.85420227]
[-137.42366028 -113.29933167]
[-149.19052124 -122.65034485]
[-159.39196777 -133.68804932]
[-167.78886414 -146.15370178]
[-174.18438721 -159.75509644]
[-178.42858887 -174.17338562]
[-180.42201233 -189.07058716]
[-180.11791992 -204.09748840]
[-177.52342224 -218.90185547]
[-172.69935608 -233.13662720]
[-165.75878906 -246.46813965]
[-156.86444092 -258.58386230]
[-146.22477722 -269.19979858]
[-134.08923340 -278.06710815]
[-120.74227905 -284.97790527]
[-106.49678040 -289.77020264]
[-91.68666840 -292.33166504]
[-76.65911865 -292.60223389]
[-61.76639938 -290.57556152]
[-47.35761261 -286.29919434]
[-33.77052689 -279.87335205]
[-21.32364273 -271.44863892]
[-10.30872726 -261.22259521]
[-0.98399061 -249.43490601]
[6.43198395 -236.36189270]
[11.76535416 -222.30999756]
[14.89109993 -207.60862732]
[15.73594761 -192.60241699]
[14.28009319 -177.64311218]
[10.55766487 -163.08137512]
[4.65592051 -149.25857544]
[-3.28679419 -136.49871826]
[-13.08429050 -125.10093689]
[-24.50690079 -115.33239746]
[-16.61041832 -102.57913971]
[-8.71393585 -89.82588196]
[-0.81745327 -77.07262421]
[7.07902908 -64.31937408]
[21.31240273 -68.95612335]
[36.25090027 -70.05215454]
[51.02649307 -67.53942108]
[64.77955627 -61.55971146]
[76.70893097 -52.45663071]
[86.11853027 -40.75587463]
[92.45801544 -27.13487244]
[95.35494232 -12.38355923]
[94.63665009 2.64142871]
[90.34056091 17.06650352]
[82.71223450 30.05191803]
[72.19136047 40.84064865]
[80.08783722 53.59390640]
[87.98432159 66.34716034]
[95.88080597 79.10041809]
[116.52229309 81.47908020]
[128.24534607 102.28314972]
[143.20663452 103.36022186]
[155.09329224 93.29319763]
[170.25082397 94.59862518]
[179.77493286 105.99279022]
[194.73622131 107.06985474]
[209.69749451 108.14692688]
[224.65878296 109.22399902]
[233.20693970 96.46372986]
[246.99707031 89.70149994]
[262.31970215 90.75631714]
[275.05310059 99.34443665]
[281.77209473 113.15570068]
[280.66925049 128.47494507]
[272.04125977 141.18138123]
[258.20898438 147.85702515]
[242.89328003 146.70617676]
[230.21395874 138.03839111]
[223.58171082 124.18527985]
[208.62042236 123.10820770]
[193.65914917 122.03113556]
[178.69786072 120.95407104]
[167.63987732 130.86651611]
[152.45167542 129.98733521]
[142.12956238 118.32150269]
[127.16828156 117.24443054]
[116.39960480 127.68643951]
[117.01542664 142.67379761]
[117.63125610 157.66114807]
[118.24707794 172.64849854]
[118.86290741 187.63584900]
[119.47872925 202.62319946]
[120.09455109 217.61056519]
[120.71038055 232.59791565]
[121.32620239 247.58526611]
[121.94203186 262.57263184]
[136.73730469 265.43557739]
[150.47328186 271.63397217]
[162.40917969 280.83346558]
[171.90133667 292.53799438]
[178.43783569 306.11630249]
[181.66616821 320.83618164]
[181.41224670 335.90377808]
[177.68975830 350.50650024]
[170.69944763 363.85687256]
[160.81831360 375.23489380]
[148.57920837 384.02700806]
[134.64218140 389.75903320]
[119.75883484 392.12185669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 102]
[25 101]
[26 100]
[27 99]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[104 129]
[105 128]
[108 125]
[109 124]
[110 123]
[111 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
