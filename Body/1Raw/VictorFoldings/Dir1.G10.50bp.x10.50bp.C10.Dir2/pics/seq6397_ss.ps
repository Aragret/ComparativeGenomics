%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUCGGAGGGGGGGGGGGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCxxxxxxxxxxACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACCCCCCCCCCCAUACUCGGA\
) } def
/len { sequence length } bind def

/coor [
[77.69759369 439.16424561]
[63.85165405 433.14822388]
[52.14299393 423.61880493]
[43.44046783 411.28314209]
[38.38986588 397.05661011]
[37.36597443 381.99493408]
[40.44477463 367.21578979]
[47.39779663 353.81585693]
[57.70907974 342.78952026]
[70.61346436 334.95501709]
[85.15335083 330.89370728]
[85.15335083 315.89370728]
[85.15335083 300.89370728]
[85.15335083 285.89370728]
[85.15335083 270.89370728]
[85.15335083 255.89369202]
[85.15335083 240.89369202]
[85.15335083 225.89369202]
[85.15335083 210.89369202]
[85.15335083 195.89369202]
[83.19968414 193.79833984]
[81.98630524 190.77812195]
[81.87920380 187.12156677]
[83.12923431 183.24748230]
[85.82923889 179.65980530]
[87.07611084 164.71171570]
[88.32299042 149.76362610]
[89.56986237 134.81553650]
[70.80947113 129.11772156]
[55.79084015 113.12407684]
[40.85653305 114.52638245]
[25.92222595 115.92868042]
[10.98791885 117.33098602]
[-2.06496239 127.25843811]
[-17.08215714 120.66936493]
[-18.61526299 104.34204102]
[-5.08715153 95.07261658]
[9.58561516 102.39668274]
[24.51992226 100.99437714]
[39.45423126 99.59207153]
[54.38853836 98.18976593]
[57.13205338 91.20957184]
[43.17166519 85.72254181]
[29.21127510 80.23551178]
[14.23857975 79.33084869]
[10.47233200 64.81136322]
[23.11744690 56.74283981]
[34.69830704 66.27512360]
[48.65869522 71.76215363]
[62.61908722 77.24918365]
[65.36260223 70.26898956]
[55.37987518 59.07322311]
[45.39714813 47.87745667]
[35.41442108 36.68169022]
[25.43169594 25.48592567]
[9.56157494 23.13670731]
[1.62832832 9.19241905]
[7.71766329 -5.65007210]
[23.15836334 -10.00487900]
[36.10564423 -0.53136498]
[36.62746048 15.50319958]
[46.61018753 26.69896507]
[56.59291458 37.89472961]
[66.57563782 49.09049606]
[76.55836487 60.28626251]
[89.47631073 55.68405533]
[103.00824738 55.12009430]
[103.00824738 40.12009430]
[103.00824738 25.12009430]
[89.23438263 18.54413033]
[79.68445587 6.63776064]
[76.25461578 -8.23499870]
[79.62586212 -23.12114906]
[89.12882233 -35.06503296]
[102.87669373 -41.69518661]
[118.13980865 -41.69518661]
[131.88768005 -35.06503296]
[141.39064026 -23.12114906]
[144.76188660 -8.23499870]
[141.33204651 6.63776064]
[131.78211975 18.54413033]
[118.00824738 25.12009430]
[118.00824738 40.12009430]
[118.00824738 55.12009430]
[123.75914764 59.93435669]
[130.95053101 46.77061844]
[133.27566528 31.95192337]
[145.90161133 23.85342598]
[160.33992004 27.91975212]
[166.88372803 41.41710663]
[161.13362122 55.27121353]
[146.95425415 60.16783905]
[135.26095581 69.56288147]
[141.01185608 74.37714386]
[155.77790833 71.73828125]
[170.54396057 69.09941864]
[185.31002808 66.46055603]
[200.07608032 63.82168961]
[214.84213257 61.18282700]
[229.60818481 58.54396057]
[244.37425232 55.90509796]
[259.14028931 53.26623154]
[262.74935913 38.47114563]
[272.06924438 26.42706871]
[285.48519897 19.22070885]
[300.67288208 18.10061646]
[315.00088501 23.26084900]
[325.98681641 33.80736923]
[331.72729492 47.91292572]
[331.22775269 63.13364410]
[324.57473755 76.83245087]
[312.92092896 86.63593292]
[298.28540039 90.84558868]
[283.20385742 88.73206329]
[270.28927612 80.66154480]
[261.77917480 68.03228760]
[247.01310730 70.67115021]
[232.24705505 73.31002045]
[217.48100281 75.94888306]
[202.71493530 78.58774567]
[187.94888306 81.22660828]
[173.18283081 83.86547089]
[158.41677856 86.50434113]
[143.65072632 89.14320374]
[139.97067261 113.22541809]
[124.90472412 130.30191040]
[104.51795197 136.06242371]
[103.27107239 151.01049805]
[102.02420044 165.95858765]
[100.77732849 180.90667725]
[100.15335083 195.89369202]
[100.15335083 210.89369202]
[100.15335083 225.89369202]
[100.15335083 240.89369202]
[100.15335083 255.89369202]
[100.15335083 270.89370728]
[100.15335083 285.89370728]
[100.15335083 300.89370728]
[100.15335083 315.89370728]
[100.15335083 330.89370728]
[114.69323730 334.95501709]
[127.59761810 342.78952026]
[137.90890503 353.81585693]
[144.86192322 367.21578979]
[147.94071960 381.99493408]
[146.91682434 397.05661011]
[141.86622620 411.28314209]
[133.16369629 423.61880493]
[121.45503998 433.14822388]
[107.60910034 439.16424561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[27 128]
[28 127]
[30 41]
[31 40]
[32 39]
[33 38]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[67 84]
[68 83]
[69 82]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
