%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAAAACGGGGGGGGGGGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCxxxxxxxxxxUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCACCCCCCCCCCAGCUCAACAC\
) } def
/len { sequence length } bind def

/coor [
[152.12097168 506.29177856]
[138.27502441 500.27575684]
[126.56636810 490.74633789]
[117.86383820 478.41067505]
[112.81324005 464.18414307]
[111.78934479 449.12246704]
[114.86814880 434.34329224]
[121.82116699 420.94338989]
[132.13244629 409.91705322]
[145.03683472 402.08251953]
[159.57672119 398.02120972]
[159.57672119 383.02120972]
[159.57672119 368.02120972]
[159.57672119 353.02120972]
[159.57672119 338.02120972]
[159.57672119 323.02120972]
[159.57672119 308.02120972]
[159.57672119 293.02120972]
[159.57672119 278.02120972]
[159.57672119 263.02120972]
[155.87055969 248.48628235]
[148.68804932 235.31770325]
[141.50553894 222.14912415]
[134.32302856 208.98052979]
[126.86811829 195.96423340]
[119.14403534 183.10581970]
[111.28661346 170.32846069]
[103.29669189 157.63354492]
[95.30677795 144.93861389]
[87.31686401 132.24368286]
[74.87741852 123.86153412]
[60.11136627 121.22267151]
[49.61227036 133.95639038]
[34.21888733 139.64315796]
[18.14738846 136.82589722]
[5.74930096 126.36313629]
[0.33329982 111.17041779]
[-14.48445797 108.83931732]
[-29.30221558 106.50821686]
[-44.40325165 112.90280151]
[-57.32683945 102.80760956]
[-54.77829742 86.60769653]
[-39.37934875 80.96815491]
[-26.97111320 91.69045258]
[-12.15335464 94.02156067]
[2.66440368 96.35266113]
[10.55417538 85.16289520]
[22.55981064 78.44397736]
[36.35587692 77.56292725]
[49.24166870 82.74958038]
[58.66990280 93.04032135]
[62.75022888 106.45661926]
[77.51628876 109.09548187]
[78.86640930 93.26651764]
[89.15822601 83.06643677]
[86.36589813 68.32862854]
[83.57357025 53.59082031]
[78.87335968 45.68134308]
[80.87980652 38.51755905]
[78.39469147 23.72485352]
[75.90956879 8.93214512]
[73.42445374 -5.86056185]
[58.45856476 -8.06905556]
[44.90852737 -14.79598713]
[34.10182953 -25.38232040]
[27.09720039 -38.79091263]
[24.58088493 -53.70812988]
[26.79940796 -68.67253113]
[33.53541565 -82.21806335]
[44.12899017 -93.01766205]
[57.54227448 -100.01330566]
[72.46117401 -102.51962280]
[87.42408752 -100.29107666]
[100.96509552 -93.54598999]
[111.75759888 -82.94518280]
[118.74424744 -69.52721405]
[121.24057007 -54.60664368]
[119.00199890 -39.64522552]
[112.24784088 -26.10873604]
[101.63980865 -15.32333946]
[88.21716309 -8.34568024]
[90.70227814 6.44702673]
[93.18739319 21.23973465]
[95.67251587 36.03244019]
[98.31137848 50.79849625]
[101.10370636 65.53630066]
[103.89602661 80.27410889]
[111.95739746 83.10372162]
[118.32691193 89.16194153]
[121.74414825 97.52843475]
[121.42095184 106.80725861]
[117.21245575 115.35930634]
[109.67751312 121.59180450]
[100.01179504 124.25376129]
[108.00170898 136.94869995]
[115.99162292 149.64361572]
[123.98153687 162.33854675]
[131.24929810 167.98049927]
[132.00244141 175.38174438]
[139.72651672 188.24014282]
[145.40258789 191.83038330]
[147.97804260 196.98773193]
[147.49160767 201.79803467]
[154.67411804 214.96661377]
[161.85662842 228.13519287]
[169.03913879 241.30377197]
[180.36193848 230.80628967]
[199.19706726 228.42672729]
[214.06010437 230.44906616]
[221.68731689 217.30014038]
[233.76884460 208.07490540]
[248.46235657 204.18011475]
[263.52719116 206.20973206]
[276.66607666 213.85423279]
[285.87539673 225.94787598]
[289.75085449 240.64649963]
[287.70141602 255.70864868]
[280.03964233 268.83746338]
[267.93389893 278.03088379]
[253.23019409 281.88699341]
[238.17074585 279.81774902]
[225.05203247 272.13870239]
[215.87454224 260.02087402]
[212.03778076 245.31210327]
[197.17472839 243.28977966]
[191.52522278 248.22264099]
[204.39958191 255.92012024]
[201.05705261 270.54296875]
[186.11698914 271.88253784]
[180.22622681 258.08834839]
[174.57672119 263.02120972]
[174.57672119 278.02120972]
[174.57672119 293.02120972]
[174.57672119 308.02120972]
[174.57672119 323.02120972]
[174.57672119 338.02120972]
[174.57672119 353.02120972]
[174.57672119 368.02120972]
[174.57672119 383.02120972]
[174.57672119 398.02120972]
[189.11660767 402.08251953]
[202.02098083 409.91705322]
[212.33227539 420.94338989]
[219.28529358 434.34329224]
[222.36408997 449.12246704]
[221.34019470 464.18414307]
[216.28959656 478.41067505]
[207.58708191 490.74633789]
[195.87841797 500.27575684]
[182.03247070 506.29177856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 106]
[22 105]
[23 104]
[24 103]
[25 100]
[26 99]
[27 97]
[28 96]
[29 95]
[30 94]
[31 53]
[32 52]
[37 46]
[38 45]
[39 44]
[55 87]
[56 86]
[57 85]
[59 84]
[60 83]
[61 82]
[62 81]
[108 125]
[109 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
