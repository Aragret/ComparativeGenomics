%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCUUCCUAGGGGGGGGGGAUUACCAUACUAAUCUUAGUUACCGCUAACAACCUAUUCCAACUGUUCAUxxxxxxxxxxCCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUCCCCCCCCCCUCAGCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[50.80772781 498.29623413]
[36.78578568 492.74322510]
[24.58582687 483.87689209]
[14.97475624 472.25457764]
[8.55673122 458.60687256]
[5.73519421 443.79168701]
[6.68751001 428.74032593]
[11.35381508 414.39889526]
[19.44078255 401.66894531]
[30.44005585 391.35067749]
[43.66021347 384.09268188]
[58.27022934 380.35125732]
[58.27022934 365.35125732]
[58.27022934 350.35125732]
[58.27022934 335.35125732]
[58.27022934 320.35125732]
[58.27022934 305.35125732]
[58.27022934 290.35125732]
[58.27022934 275.35125732]
[58.27022934 260.35125732]
[58.27022934 245.35125732]
[58.27022934 230.35125732]
[58.27022934 215.35125732]
[48.52119064 226.75109863]
[34.19935226 231.21034241]
[19.70197678 227.35986328]
[9.48023033 216.38189697]
[6.67251873 201.64701843]
[12.14090061 187.67930603]
[24.20640564 178.76731873]
[39.16453171 177.64730835]
[52.42265320 184.66316223]
[59.90965652 197.65899658]
[62.66590118 182.91439819]
[65.42214203 168.16981506]
[63.54816437 160.97256470]
[68.38931274 153.15213013]
[71.44770813 138.46723938]
[74.50610352 123.78234100]
[66.87313843 110.86963654]
[52.53307343 106.46933746]
[38.19301224 102.06903839]
[23.85295105 97.66873932]
[8.00021172 101.86667633]
[-3.36821818 90.04759216]
[1.44252682 74.36994171]
[17.48356438 70.96154785]
[28.25325203 83.32867432]
[42.59331131 87.72898102]
[56.93337250 92.12928009]
[71.27343750 96.52957916]
[74.48886871 84.51090240]
[82.64215088 74.61180115]
[94.50984955 68.81516266]
[91.45145416 54.13026428]
[88.39305878 39.44536591]
[85.33466339 24.76046944]
[82.27626801 10.07557106]
[79.21787262 -4.60932636]
[64.15225220 -5.14843082]
[49.65362549 -9.27798367]
[36.56491852 -16.75789833]
[25.64708900 -27.15330315]
[17.53488731 -39.85982132]
[12.69994640 -54.13871384]
[11.42336369 -69.15982819]
[13.77935791 -84.04985046]
[19.63095474 -97.94309235]
[28.63794899 -110.03182983]
[40.27668762 -119.61322784]
[53.87050629 -126.13024139]
[68.62908173 -129.20397949]
[83.69436646 -128.65574646]
[98.19049072 -124.51740265]
[111.27466583 -117.02954865]
[122.18618774 -106.62753296]
[130.29067993 -93.91609192]
[135.11697388 -79.63427734]
[136.38444519 -64.61238861]
[134.01942444 -49.72380066]
[128.15940857 -35.83410645]
[119.14508057 -23.75083542]
[107.50054169 -14.17649460]
[93.90277100 -7.66772175]
[96.96116638 7.01717567]
[100.01956177 21.70207405]
[103.07795715 36.38697052]
[106.13635254 51.07186890]
[109.19474792 65.75676727]
[113.55106354 51.40328217]
[115.30275726 36.50591660]
[126.02861023 26.01991653]
[140.96177673 24.60552406]
[153.46559143 32.89133453]
[157.98304749 47.19491959]
[152.50646973 61.15941620]
[139.47096252 68.57843018]
[127.95079803 78.18497467]
[142.66632080 75.27750397]
[157.38185120 72.37003326]
[171.76632690 68.11718750]
[185.69703674 62.55524826]
[199.62776184 56.99331284]
[209.34652710 43.78431702]
[225.61312866 45.86520004]
[231.69386292 61.09532547]
[221.33340454 73.80724335]
[205.18969727 70.92402649]
[191.25898743 76.48596191]
[177.32826233 82.04790497]
[191.53036499 86.87496185]
[200.98220825 98.52239227]
[202.78178406 113.41404724]
[196.37655640 126.97772217]
[183.73315430 135.04891968]
[168.73348999 135.14952087]
[155.98295593 127.24863434]
[149.39637756 113.77210236]
[150.99604797 98.85764313]
[160.28932190 87.08555603]
[145.57379150 89.99302673]
[130.85827637 92.90049744]
[119.68253326 123.03657532]
[89.19100189 126.84073639]
[86.13260651 141.52563477]
[83.07421112 156.21052551]
[80.16674042 170.92605591]
[77.41049957 185.67065430]
[74.65425110 200.41523743]
[73.27022552 215.35125732]
[73.27022552 230.35125732]
[73.27022552 245.35125732]
[73.27022552 260.35125732]
[73.27022552 275.35125732]
[73.27022552 290.35125732]
[73.27022552 305.35125732]
[73.27022552 320.35125732]
[73.27022552 335.35125732]
[73.27022552 350.35125732]
[73.27022552 365.35125732]
[73.27022552 380.35125732]
[87.88024139 384.09268188]
[101.10040283 391.35067749]
[112.09967041 401.66894531]
[120.18663788 414.39889526]
[124.85294342 428.74032593]
[125.80525970 443.79168701]
[122.98372650 458.60687256]
[116.56569672 472.25457764]
[106.95462799 483.87689209]
[94.75466919 492.74322510]
[80.73272705 498.29623413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[33 129]
[34 128]
[35 127]
[37 126]
[38 125]
[39 124]
[40 51]
[41 50]
[42 49]
[43 48]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[98 122]
[99 121]
[100 120]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
