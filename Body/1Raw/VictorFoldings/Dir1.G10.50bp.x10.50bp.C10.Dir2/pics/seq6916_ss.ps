%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAUCAUGGGGGGGGGGCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGxxxxxxxxxxUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCCCCCCCCCCCAUAAUCAU\
) } def
/len { sequence length } bind def

/coor [
[83.53717041 416.62252808]
[70.31697083 409.35006714]
[59.43016434 398.90304565]
[51.61903381 385.99380493]
[47.41615295 371.50250244]
[47.10808182 356.41714478]
[50.71582413 341.76632690]
[57.99339676 328.54895020]
[68.44460297 317.66616821]
[81.35686493 309.86001587]
[95.84980011 305.66275024]
[95.53774261 290.66598511]
[95.22569275 275.66921997]
[94.91363525 260.67248535]
[94.60157776 245.67572021]
[94.28952026 230.67897034]
[93.97746277 215.68222046]
[93.66540527 200.68545532]
[93.35335541 185.68870544]
[93.04129791 170.69195557]
[92.72924042 155.69520569]
[92.41718292 140.69844055]
[85.50121307 154.00894165]
[74.35316467 164.04493713]
[60.03643036 168.52055359]
[45.15718460 166.62106323]
[32.42399597 158.69227600]
[24.15476990 146.17747498]
[21.85481262 131.35485840]
[25.94280243 116.92266083]
[35.67457199 105.50807953]
[49.27858353 99.18898773]
[64.27655792 99.11530304]
[79.17730713 97.39257050]
[65.27474976 91.76061249]
[51.37219238 86.12865448]
[37.46963882 80.49669647]
[23.45292473 75.15518188]
[9.32812214 70.10643005]
[-4.79668093 65.05767059]
[-16.01269722 75.47206116]
[-30.78683090 79.47001648]
[-45.72409058 76.13282013]
[-57.39200592 66.22734833]
[-63.10937500 52.02980804]
[-61.56238556 36.80268097]
[-53.10652924 24.04505157]
[-39.68489456 16.68853378]
[-24.38168144 16.42359924]
[-10.71344948 23.31112671]
[-1.82106268 35.76841354]
[0.25207546 50.93286896]
[14.37687874 55.98162460]
[28.50168228 61.03038406]
[33.17793274 59.80230713]
[38.67287445 61.54499054]
[43.10159302 66.59413910]
[57.00415039 72.22609711]
[70.90670776 77.85805511]
[84.80926514 83.49001312]
[98.19554901 76.72190094]
[101.90171051 62.18696213]
[105.60787201 47.65202332]
[91.84809113 41.59245682]
[79.27343750 33.35062027]
[68.22694397 23.15135956]
[59.00997925 11.27291775]
[51.87398148 -1.96065331]
[47.01362610 -16.18833160]
[44.56151199 -31.02197456]
[44.58452988 -46.05691147]
[47.08205414 -60.88297653]
[51.98595047 -75.09571075]
[59.16243362 -88.30736542]
[68.41572571 -100.15753174]
[79.49340057 -110.32292175]
[92.09323120 -118.52621460]
[105.87149811 -124.54362488]
[120.45231628 -128.21098328]
[135.43791199 -129.42825317]
[150.41947937 -128.16221619]
[164.98828125 -124.44741821]
[178.74688721 -118.38520050]
[191.31996155 -110.14094543]
[202.36448669 -99.93955231]
[211.57916260 -88.05933380]
[218.71261597 -74.82439423]
[223.57022095 -60.59577560]
[226.01948547 -45.76166153]
[225.99356079 -30.72672844]
[223.49317932 -15.90114403]
[218.58654785 -1.68936002]
[211.40751648 11.52091599]
[202.15194702 23.36929703]
[191.07231140 33.53255081]
[178.47090149 41.73341751]
[164.69148254 47.74817276]
[150.10995483 51.41272736]
[135.12411499 52.62710571]
[120.14280701 51.35818481]
[116.43664551 65.89311981]
[112.73048401 80.42805481]
[117.11358643 86.51397705]
[123.27170563 72.83634186]
[138.19595337 71.33071899]
[146.96188354 83.50274658]
[140.80348206 97.18024445]
[125.87979126 98.68581390]
[130.26289368 104.77172852]
[145.22314453 105.86304474]
[160.18339539 106.95435333]
[175.14364624 108.04566193]
[188.17427063 98.68712616]
[203.57582092 103.17843628]
[209.53353882 118.07424164]
[201.47717285 131.94776917]
[185.58688354 134.15641785]
[174.05233765 123.00591278]
[159.09208679 121.91460419]
[144.13183594 120.82328796]
[129.17158508 119.73197937]
[123.73217773 124.89558411]
[138.11517334 129.15342712]
[141.61917114 143.73841858]
[130.74012756 154.06538391]
[116.35721588 149.80723572]
[112.85334778 135.22279358]
[107.41394043 140.38639832]
[107.72599030 155.38314819]
[108.03804779 170.37989807]
[108.35010529 185.37664795]
[108.66216278 200.37339783]
[108.97422028 215.37016296]
[109.28627777 230.36691284]
[109.59832764 245.36366272]
[109.91038513 260.36041260]
[110.22244263 275.35717773]
[110.53450012 290.35391235]
[110.84655762 305.35067749]
[125.50154877 308.94143677]
[138.72735596 316.20370483]
[149.62222290 326.64230347]
[157.44332886 339.54550171]
[161.65739441 354.03356934]
[161.97711182 369.11868286]
[158.38069153 383.77227783]
[151.11332703 396.99526978]
[140.67051697 407.88610840]
[127.76428986 415.70223999]
[113.27460480 419.91070557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[34 60]
[35 59]
[36 58]
[37 57]
[38 54]
[39 53]
[40 52]
[61 102]
[62 101]
[63 100]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
