%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCAGCAAAGGGGGGGGGGCCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGxxxxxxxxxxCGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACCCCCCCCCCCUCUUCACCAAA\
) } def
/len { sequence length } bind def

/coor [
[47.45923233 646.25256348]
[33.97035217 639.52105713]
[22.48484993 629.75646973]
[13.67048168 617.52661133]
[8.03969955 603.54235840]
[5.91987133 588.61688232]
[7.43424034 573.61791992]
[12.49476337 559.41741943]
[20.80722809 546.84100342]
[31.88835907 536.61981201]
[45.09391403 529.34820557]
[59.65613937 525.44879150]
[59.34815979 510.45196533]
[59.04018402 495.45513916]
[58.73220444 480.45831299]
[58.42422867 465.46145630]
[58.11624908 450.46463013]
[57.80827332 435.46777344]
[57.50029373 420.47094727]
[57.19231796 405.47412109]
[56.88433838 390.47726440]
[45.20193481 387.24221802]
[34.75323105 381.06805420]
[26.26366043 372.37469482]
[20.32490349 361.75723267]
[17.35367203 349.94522095]
[17.56247520 337.75256348]
[20.94443703 326.02139282]
[27.27324867 315.56396484]
[36.11829758 307.10635376]
[46.87395859 301.23809814]
[58.80106735 298.37109375]
[59.72448349 283.39956665]
[60.64789581 268.42800903]
[48.47669601 277.19509888]
[33.64179611 274.97570801]
[24.56930923 263.03039551]
[26.41234016 248.14405823]
[38.12406158 238.77200317]
[53.05230331 240.23747253]
[62.71817398 251.70886230]
[65.47441864 236.96426392]
[60.20748901 223.03198242]
[70.34882355 210.88850403]
[73.10506439 196.14390564]
[75.86130524 181.39930725]
[78.61754608 166.65470886]
[76.74356842 159.45747375]
[81.58471680 151.63703918]
[84.64311218 136.95214844]
[87.70151520 122.26724243]
[79.83346558 118.42969513]
[73.27413940 111.76481628]
[69.04063416 102.76039124]
[67.95645142 92.26618195]
[70.52508545 81.41481018]
[76.83612823 71.49958801]
[68.67946625 58.91114807]
[60.52280045 46.32270813]
[52.36613464 33.73426819]
[37.52384567 26.76013184]
[36.41228485 10.39870071]
[50.17493057 1.48120940]
[64.65395355 9.18121052]
[64.95457458 25.57760239]
[73.11123657 38.16604233]
[81.26790619 50.75448227]
[89.42456818 63.34291840]
[96.86772156 64.26457977]
[95.74479675 49.30667496]
[94.62186432 34.34876633]
[93.49893951 19.39085579]
[88.86299133 5.12523222]
[94.07961273 -8.93844128]
[106.89720917 -16.73004723]
[121.78350067 -14.88660049]
[132.31332397 -4.20376158]
[133.94180298 10.70757771]
[125.96638489 23.41119766]
[121.22893524 37.64343262]
[116.49148560 51.87567139]
[111.75402832 66.10791016]
[119.19718170 67.02957153]
[130.17799377 56.81085968]
[141.15878296 46.59215546]
[152.13958740 36.37344742]
[163.12039185 26.15473938]
[174.10119629 15.93603230]
[185.08200073 5.71732569]
[195.85067749 -4.72468376]
[206.40269470 -15.38559246]
[216.95471191 -26.04650116]
[227.50672913 -36.70740891]
[231.14413452 -52.69807053]
[246.88897705 -57.28414917]
[258.54431152 -45.74787903]
[254.12010193 -29.95678711]
[238.16763306 -26.15539551]
[227.61561584 -15.49448586]
[217.06359863 -4.83357763]
[206.51158142 5.82733154]
[205.64500427 10.58109283]
[201.74400330 14.82019997]
[195.30070496 16.69812775]
[184.31990051 26.91683578]
[173.33909607 37.13554382]
[162.35830688 47.35424805]
[151.37750244 57.57295609]
[140.39669800 67.79166412]
[129.41589355 78.01036835]
[128.41290283 112.60193634]
[102.38640594 125.32563782]
[99.32801056 140.01054382]
[96.26961517 154.69543457]
[93.36214447 169.41096497]
[90.60590363 184.15554810]
[87.84966278 198.90014648]
[85.09341431 213.64474487]
[90.16320038 228.63166809]
[80.21900940 239.72052002]
[77.46276855 254.46510315]
[75.61944580 269.35140991]
[74.69602966 284.32296753]
[73.77262115 299.29452515]
[90.29180908 306.72912598]
[102.71182251 319.87005615]
[109.17948914 336.71926880]
[108.74396515 354.72827148]
[101.49649811 371.18362427]
[88.55274963 383.61566162]
[71.88117981 390.16931152]
[72.18915558 405.16613770]
[72.49713135 420.16296387]
[72.80510712 435.15982056]
[73.11309052 450.15664673]
[73.42106628 465.15347290]
[73.72904205 480.15032959]
[74.03701782 495.14715576]
[74.34500122 510.14401245]
[74.65297699 525.14086914]
[89.36301422 528.43908691]
[102.85597229 535.16241455]
[114.34738922 544.92004395]
[123.16917419 557.14459229]
[128.80842590 571.12536621]
[130.93730164 586.04956055]
[129.43203735 601.04943848]
[124.38011932 615.25305176]
[116.07527924 627.83447266]
[105.00034332 638.06237793]
[91.79920197 645.34197998]
[77.23934174 649.25018311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[32 124]
[33 123]
[34 122]
[41 121]
[42 120]
[44 118]
[45 117]
[46 116]
[47 115]
[49 114]
[50 113]
[51 112]
[57 68]
[58 67]
[59 66]
[60 65]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
