%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCCCCACGGGGGGGGGGCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGxxxxxxxxxxCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUCCCCCCCCCCUACCCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[89.31977081 567.53802490]
[75.47383881 561.52197266]
[63.76517487 551.99255371]
[55.06264877 539.65692139]
[50.01204681 525.43035889]
[48.98815536 510.36868286]
[52.06695557 495.58953857]
[59.01997757 482.18960571]
[69.33126068 471.16326904]
[82.23564148 463.32876587]
[96.77552795 459.26745605]
[96.77552795 444.26745605]
[96.77552795 429.26745605]
[96.77552795 414.26745605]
[96.77552795 399.26745605]
[96.77552795 384.26745605]
[96.77552795 369.26745605]
[96.77552795 354.26745605]
[96.77552795 339.26745605]
[96.77552795 324.26745605]
[82.56924438 321.21185303]
[69.30894470 315.25396729]
[57.58057022 306.65432739]
[47.90297318 295.79016113]
[40.70492935 283.13903809]
[36.30615616 269.25775146]
[34.90310669 254.75779724]
[36.56019592 240.27856445]
[41.20685577 226.45901489]
[48.64052582 213.90953064]
[58.53549194 203.18498230]
[70.45715332 194.76016235]
[83.88111115 189.00872803]
[98.21622467 186.18675232]
[98.52828217 171.19000244]
[98.84033966 156.19325256]
[97.90470886 141.22245789]
[95.72787476 126.38124847]
[93.55103302 111.54004669]
[87.65435028 125.33240509]
[78.01805115 136.82769775]
[65.46705627 145.04187012]
[51.07580566 149.27174377]
[36.07625961 149.15521240]
[21.75245857 144.70225525]
[9.33060169 136.29408264]
[-0.12593514 124.65045929]
[-5.80762243 110.76815033]
[-7.22807693 95.83556366]
[-4.26569986 81.13098907]
[2.82591343 67.91323853]
[13.43968201 57.31380844]
[26.66701126 50.24007034]
[41.37557220 47.29757690]
[56.30622864 48.73822021]
[70.18083954 54.43866730]
[81.81166840 63.91093826]
[90.20304871 76.34415436]
[94.63714600 90.67733765]
[98.34330750 76.14239502]
[94.25560760 60.85837936]
[104.89764404 50.43741608]
[108.60380554 35.90248108]
[112.00678253 21.29358864]
[115.10510254 6.61706305]
[118.20342255 -8.05946255]
[121.30175018 -22.73598862]
[124.40007019 -37.41251373]
[127.49839020 -52.08903885]
[114.04013062 -58.91088867]
[102.80672455 -68.98426819]
[94.56407928 -81.62235260]
[89.87419891 -95.96346283]
[89.05683899 -111.02980042]
[92.16773987 -125.79410553]
[98.99478912 -139.24972534]
[109.07250214 -150.47924805]
[121.71376801 -158.71701050]
[136.05668640 -163.40135193]
[151.12333679 -164.21289062]
[165.88644409 -161.09629822]
[179.33943176 -154.26405334]
[190.56504822 -144.18200684]
[198.79792786 -131.53755188]
[203.47674561 -117.19282532]
[204.28245544 -102.12586212]
[201.16015625 -87.36396790]
[194.32272339 -73.91362000]
[184.23634338 -62.69188690]
[171.58871460 -54.46388626]
[157.24218750 -49.79061890]
[142.17491150 -48.99071884]
[139.07659912 -34.31418991]
[135.97827148 -19.63766670]
[132.87994385 -4.96114063]
[129.78163147 9.71538448]
[126.68330383 24.39191055]
[128.53063965 28.85989571]
[127.54470062 34.53961945]
[123.13874054 39.60864258]
[119.43257904 54.14357758]
[123.78536987 68.38796234]
[112.87825012 79.84855652]
[109.17208862 94.38349915]
[108.39224243 109.36321259]
[110.56907654 124.20441437]
[112.74591064 139.04562378]
[121.32319641 126.73992157]
[135.44207764 121.67463684]
[149.88592529 125.72129822]
[159.31800842 137.38473511]
[160.25337219 152.35554504]
[152.34642029 165.10231018]
[138.51860046 170.91534424]
[123.87902832 167.64686584]
[113.83708954 156.50531006]
[113.52503204 171.50205994]
[113.21297455 186.49880981]
[128.26718140 190.22277832]
[142.11605835 197.18624878]
[154.07272339 207.04037476]
[163.54489136 219.29307556]
[170.06425476 233.33348083]
[173.30958557 248.46250916]
[173.12263489 263.92761230]
[169.51574707 278.96026611]
[162.67117310 292.81402588]
[152.93186951 304.80178833]
[140.78424072 314.32965088]
[126.83390808 320.92657471]
[111.77552795 324.26745605]
[111.77552795 339.26745605]
[111.77552795 354.26745605]
[111.77552795 369.26745605]
[111.77552795 384.26745605]
[111.77552795 399.26745605]
[111.77552795 414.26745605]
[111.77552795 429.26745605]
[111.77552795 444.26745605]
[111.77552795 459.26745605]
[126.31541443 463.32876587]
[139.21980286 471.16326904]
[149.53108215 482.18960571]
[156.48410034 495.58953857]
[159.56289673 510.36868286]
[158.53901672 525.43035889]
[153.48840332 539.65692139]
[144.78588867 551.99255371]
[133.07722473 561.52197266]
[119.23128510 567.53802490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 118]
[35 117]
[36 116]
[37 107]
[38 106]
[39 105]
[59 104]
[60 103]
[62 101]
[63 100]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
