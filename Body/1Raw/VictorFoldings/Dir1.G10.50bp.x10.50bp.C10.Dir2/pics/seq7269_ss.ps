%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAAUAAUUGGGGGGGGGGUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAxxxxxxxxxxAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACCCCCCCCCCCUACUAAUAAUU\
) } def
/len { sequence length } bind def

/coor [
[123.00793457 512.92236328]
[109.51905060 506.19085693]
[98.03355408 496.42630005]
[89.21918488 484.19638062]
[83.58840179 470.21218872]
[81.46857452 455.28671265]
[82.98294067 440.28771973]
[88.04346466 426.08721924]
[96.35592651 413.51077271]
[107.43705750 403.28964233]
[120.64261627 396.01800537]
[135.20483398 392.11862183]
[134.89686584 377.12179565]
[134.58888245 362.12493896]
[134.28091431 347.12811279]
[133.97293091 332.13128662]
[133.66494751 317.13442993]
[133.35697937 302.13760376]
[133.04899597 287.14077759]
[132.74101257 272.14392090]
[132.43304443 257.14709473]
[132.12506104 242.15025330]
[129.82418823 227.32775879]
[116.65630341 220.46174622]
[112.13839722 205.93441772]
[119.42939758 192.16928101]
[115.17655182 177.78479004]
[110.92370605 163.40031433]
[106.67086029 149.01583862]
[102.41801453 134.63134766]
[89.44016266 133.07063293]
[77.95940399 126.82143402]
[69.60337830 116.76969910]
[65.55674744 104.34049225]
[50.62073898 102.95646667]
[35.68472672 101.57244110]
[20.74871254 100.18841553]
[5.81270027 98.80438995]
[-8.85109234 106.14640808]
[-22.39053726 96.89354706]
[-20.87741470 80.56435394]
[-5.86829519 73.95690918]
[7.19672585 83.86837769]
[22.13273811 85.25240326]
[37.06875229 86.63642883]
[52.00476456 88.02045441]
[66.94077301 89.40447998]
[70.22546387 82.14910889]
[75.07720947 75.83325195]
[81.24066925 70.78930664]
[88.39144897 67.28274536]
[86.54811859 52.39643860]
[84.70479584 37.51013184]
[82.86147308 22.62382317]
[76.67333984 36.28790283]
[67.74114227 48.33845520]
[56.46716309 58.23276138]
[43.35914230 65.52520752]
[29.00743294 69.88736725]
[14.05839348 71.12277985]
[-0.81471163 69.17579651]
[-14.94204140 64.13411713]
[-27.68733978 56.22479630]
[-38.47659683 45.80404663]
[-46.82389069 33.34119797]
[-52.35328674 19.39753151]
[-54.81575394 4.60103703]
[-54.10039139 -10.38189507]
[-50.23941803 -24.87647629]
[-43.40671921 -38.22991180]
[-33.91001892 -49.84079742]
[-22.17702484 -59.18621826]
[-8.73615742 -65.84527588]
[5.80724621 -69.51807404]
[20.79819107 -70.03918457]
[35.56152725 -67.38515472]
[49.43235779 -61.67551041]
[61.78598022 -53.16739273]
[72.06601715 -42.24398422]
[79.80948639 -29.39724731]
[84.66764832 -15.20576286]
[86.42167664 -0.31138927]
[92.69107819 -13.93836880]
[98.96048737 -27.56534767]
[94.76713562 -43.05067444]
[104.37531281 -55.89833832]
[120.41445160 -56.25271225]
[130.58068848 -43.84194946]
[127.07537079 -28.18652534]
[112.58746338 -21.29594231]
[106.31806183 -7.66896296]
[100.04865265 5.95801592]
[97.74777985 20.78049850]
[99.59110260 35.66680527]
[101.43442535 50.55311203]
[103.27775574 65.43942261]
[115.79232788 69.08431244]
[126.08058167 77.08754730]
[139.22221375 69.85584259]
[152.36384583 62.62414169]
[160.38572693 48.32094193]
[176.78474426 48.38707733]
[184.69099426 62.75451660]
[175.97120667 76.64326477]
[159.59555054 75.76576996]
[146.45391846 82.99747467]
[133.31228638 90.22917938]
[132.10708618 113.20274353]
[116.80249023 130.37850952]
[121.05533600 144.76298523]
[125.30818176 159.14746094]
[129.56103516 173.53195190]
[133.81387329 187.91642761]
[147.41787720 195.50386047]
[151.52595520 210.15234375]
[144.20866394 223.07492065]
[148.83198547 208.80520630]
[158.77627563 197.57527161]
[172.38179016 191.25944519]
[187.37776184 190.91183472]
[201.26132202 196.59045410]
[211.71527100 207.34754944]
[216.99482727 221.38771057]
[216.21882629 236.36763000]
[209.51676941 249.78710938]
[198.00724792 259.40640259]
[183.61123657 263.62005615]
[168.73144531 261.72476196]
[155.85136414 254.03689575]
[147.12190247 241.84226990]
[147.42988586 256.83911133]
[147.73785400 271.83593750]
[148.04583740 286.83279419]
[148.35380554 301.82962036]
[148.66178894 316.82644653]
[148.96977234 331.82330322]
[149.27774048 346.82012939]
[149.58572388 361.81698608]
[149.89370728 376.81381226]
[150.20167542 391.81063843]
[164.91171265 395.10888672]
[178.40467834 401.83224487]
[189.89608765 411.58984375]
[198.71786499 423.81439209]
[204.35713196 437.79516602]
[206.48600769 452.71932983]
[204.98072815 467.71926880]
[199.92881775 481.92285156]
[191.62397766 494.50430298]
[180.54904175 504.73217773]
[167.34790039 512.01184082]
[152.78804016 515.91998291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 116]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[51 96]
[52 95]
[53 94]
[54 93]
[82 92]
[83 91]
[84 90]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
