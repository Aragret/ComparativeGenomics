%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCCCCCGGGGGGGGGGAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGxxxxxxxxxxAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCCCCCCCCCCCUAAUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.57714081 390.71716309]
[70.69286346 381.44207764]
[61.37415695 369.59194946]
[55.16279221 355.85580444]
[52.41989136 341.03216553]
[53.30492020 325.98291016]
[57.76642609 311.58294678]
[65.54502106 298.66952515]
[76.18847656 287.99337769]
[89.07798767 280.17517090]
[103.46417236 275.66952515]
[102.52854156 260.69873047]
[101.59291840 245.72793579]
[100.65728760 230.75714111]
[99.72165680 215.78634644]
[98.78602600 200.81555176]
[97.85040283 185.84475708]
[96.91477203 170.87397766]
[95.97914124 155.90318298]
[95.04351807 140.93238831]
[94.10788727 125.96159363]
[89.69039154 124.54451752]
[85.58598328 122.38208008]
[81.91929626 119.53994751]
[78.80167389 116.10442352]
[64.78496552 121.44593811]
[50.76824951 126.78745270]
[38.12051773 138.07775879]
[23.77019119 129.04978943]
[28.47279167 112.76107788]
[45.42673874 112.77073669]
[59.44345093 107.42922211]
[73.46016693 102.08771515]
[79.23564911 83.33977509]
[96.28633881 73.63847351]
[98.46317291 58.79726791]
[100.64000702 43.95606232]
[102.81684875 29.11485481]
[88.17565155 25.82050133]
[73.82553864 21.42828178]
[59.84870148 15.96335220]
[46.32520294 9.45701885]
[33.33250427 1.94654810]
[20.94502640 -6.52504015]
[9.23372746 -15.90922070]
[-1.73431385 -26.15224075]
[-11.89627075 -37.19543076]
[-21.19393730 -48.97552872]
[-29.57405663 -61.42506790]
[-36.98862457 -74.47273254]
[-43.39517593 -88.04378510]
[-48.75700760 -102.06049347]
[-53.04341507 -116.44257355]
[-56.22983932 -131.10763550]
[-58.29803085 -145.97167969]
[-59.23614502 -160.94958496]
[-59.03880310 -175.95552063]
[-57.70714188 -190.90356445]
[-55.24878311 -205.70809937]
[-51.67781448 -220.28428650]
[-47.01468277 -234.54867554]
[-41.28610611 -248.41954041]
[-34.52489471 -261.81741333]
[-26.76977348 -274.66558838]
[-18.06516647 -286.89044189]
[-8.46093464 -298.42196655]
[1.98791158 -309.19412231]
[13.22152042 -319.14517212]
[25.17554665 -328.21813965]
[37.78151703 -336.36105347]
[50.96722412 -343.52725220]
[64.65714264 -349.67568970]
[78.77285767 -354.77117920]
[93.23351288 -358.78451538]
[107.95627594 -361.69271851]
[122.85681915 -363.47912598]
[137.84979248 -364.13348389]
[152.84931946 -363.65206909]
[167.76947021 -362.03762817]
[182.52479553 -359.29940796]
[197.03076172 -355.45309448]
[211.20429993 -350.52072144]
[224.96421814 -344.53054810]
[238.23168945 -337.51687622]
[250.93072510 -329.51989746]
[262.98858643 -320.58538818]
[274.33621216 -310.76455688]
[284.90856934 -300.11361694]
[294.64517212 -288.69363403]
[303.49017334 -276.56994629]
[311.39294434 -263.81207275]
[318.30819702 -250.49304199]
[324.19635010 -236.68917847]
[329.02368164 -222.47950745]
[332.76251221 -207.94546509]
[335.39141846 -193.17027283]
[336.89538574 -178.23858643]
[337.26577759 -163.23591614]
[336.50042725 -148.24819946]
[334.60379028 -133.36128235]
[331.58670044 -118.66044617]
[327.46643066 -104.22989655]
[322.26660156 -90.15228271]
[316.01699829 -76.50825500]
[308.75338745 -63.37594986]
[300.51739502 -50.83060074]
[291.35620117 -38.94406128]
[281.32226562 -27.78441620]
[270.47308350 -17.41559219]
[258.87075806 -7.89698029]
[246.58180237 0.71689826]
[233.67658997 8.37670326]
[220.22901917 15.03855896]
[206.31613159 20.66430664]
[192.01762390 25.22172165]
[177.41539001 28.68470001]
[162.59307861 31.03340721]
[147.63558960 32.25438690]
[132.62858582 32.34064484]
[117.65805054 31.29169273]
[115.48121643 46.13289642]
[113.30437469 60.97410202]
[111.12754059 75.81530762]
[122.70994568 86.10828400]
[126.59877777 101.10742950]
[121.47660065 115.73140717]
[109.07868195 125.02597046]
[110.01430511 139.99676514]
[110.94993591 154.96754456]
[111.88556671 169.93833923]
[112.82118988 184.90913391]
[113.75682068 199.87992859]
[114.69245148 214.85072327]
[115.62807465 229.82150269]
[116.56370544 244.79229736]
[117.49933624 259.76309204]
[118.43496704 274.73388672]
[133.27020264 277.41329956]
[147.03283691 283.56579590]
[158.92272949 292.83370972]
[168.24861145 304.67816162]
[174.46830750 318.41055298]
[177.22019958 333.23251343]
[176.34428406 348.28231812]
[171.89151001 362.68496704]
[164.12074280 375.60311890]
[153.48376465 386.28573608]
[140.59899902 394.11172485]
[126.21555328 398.62609863]
[111.16964722 399.56643677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[25 33]
[26 32]
[27 31]
[35 123]
[36 122]
[37 121]
[38 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
