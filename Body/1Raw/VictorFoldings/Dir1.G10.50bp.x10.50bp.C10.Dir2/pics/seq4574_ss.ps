%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACCUAUCGGGGGGGGGGACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCxxxxxxxxxxCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACCCCCCCCCCCGCCACUUAUC\
) } def
/len { sequence length } bind def

/coor [
[83.73742676 381.64630127]
[70.51723480 374.37384033]
[59.63042831 363.92681885]
[51.81929779 351.01757812]
[47.61641693 336.52627563]
[47.30834579 321.44091797]
[50.91608429 306.79010010]
[58.19365692 293.57272339]
[68.64486694 282.68994141]
[81.55712891 274.88378906]
[96.05006409 270.68652344]
[95.73800659 255.68975830]
[95.42594910 240.69300842]
[95.11389923 225.69624329]
[94.80184174 210.69949341]
[94.48978424 195.70274353]
[94.17772675 180.70599365]
[93.86566925 165.70922852]
[93.55361176 150.71247864]
[93.24156189 135.71572876]
[82.37615204 131.79135132]
[73.29085541 124.65585327]
[66.90333557 115.02997589]
[52.25983047 118.28079987]
[37.61632919 121.53163147]
[35.01551056 136.50842285]
[26.87707710 149.34719849]
[14.44207954 158.09014893]
[-0.39323574 161.40405273]
[-15.36658955 158.78352356]
[-28.19465446 150.62821960]
[-36.92124557 138.18171692]
[-40.21561813 123.34206390]
[-37.57540512 108.37216949]
[-29.40322113 95.55484009]
[-16.94526482 86.84463501]
[-2.10128260 83.56978607]
[12.86512470 86.22968292]
[25.67168999 94.41872406]
[34.36550522 106.88813019]
[49.00900650 103.63729858]
[63.65250778 100.38647461]
[64.03525543 94.72486115]
[65.29448700 89.19181061]
[52.20133209 81.87270355]
[39.10817719 74.55359650]
[26.01502419 67.23448944]
[10.24845695 70.20011902]
[-1.80586100 59.61366272]
[-0.90088856 43.59615326]
[12.26915646 34.43485260]
[27.60134315 39.15752411]
[33.33412933 54.14133835]
[46.42728424 61.46044159]
[59.52043915 68.77954865]
[72.61359406 76.09865570]
[80.37844849 69.40123749]
[89.70478821 65.13887024]
[99.85041809 63.65076065]
[110.00795746 65.05532074]
[119.36905670 69.24078369]
[129.80886841 58.46997833]
[140.24868774 47.69916916]
[150.34733582 36.60785294]
[160.09498596 25.20683289]
[169.84263611 13.80581188]
[179.59028625 2.40479112]
[169.43399048 -8.65897942]
[160.68537903 -20.86631393]
[153.47201538 -34.03919220]
[147.89909363 -47.98551941]
[144.04789734 -62.50191116]
[141.97457886 -77.37667847]
[141.70938110 -92.39290619]
[143.25616455 -107.33160400]
[146.59237671 -121.97493744]
[151.66935730 -136.10934448]
[158.41307068 -149.52871704]
[166.72518921 -162.03736877]
[176.48448181 -173.45286560]
[187.54862976 -183.60874939]
[199.75628662 -192.35690308]
[212.92944336 -199.56977844]
[226.87597656 -205.14216614]
[241.39251709 -208.99282837]
[256.26736450 -211.06558228]
[271.28359985 -211.33021545]
[286.22222900 -209.78288269]
[300.86544800 -206.44612122]
[314.99966431 -201.36862183]
[328.41879272 -194.62438965]
[340.92712402 -186.31181335]
[352.34225464 -176.55209351]
[362.49771118 -165.48756409]
[371.24542236 -153.27957153]
[378.45779419 -140.10615540]
[384.02966309 -126.15941620]
[387.87979126 -111.64273834]
[389.95199585 -96.76781464]
[390.21606445 -81.75157166]
[388.66815186 -66.81298065]
[385.33087158 -52.16990280]
[380.25283813 -38.03586960]
[373.50808716 -24.61700058]
[365.19506836 -12.10897923]
[355.43490601 -0.69421059]
[344.36999512 9.46084404]
[332.16168213 18.20809364]
[318.98800659 25.41997910]
[305.04104614 30.99132919]
[290.52423096 34.84089661]
[275.64923096 36.91254425]
[260.63296509 37.17605972]
[245.69444275 35.62760162]
[231.05148315 32.28974915]
[216.91763306 27.21118355]
[203.49902344 20.46595955]
[190.99130249 12.15244293]
[181.24365234 23.55346489]
[171.49600220 34.95448685]
[161.74835205 46.35550690]
[161.68386841 49.94205475]
[159.83807373 53.66961288]
[156.16706848 56.68228149]
[151.01948547 58.13898087]
[140.57968140 68.90979004]
[130.13986206 79.68059540]
[136.30053711 101.88702393]
[127.87056732 123.33497620]
[108.23831177 135.40367126]
[108.55036926 150.40042114]
[108.86242676 165.39717102]
[109.17448425 180.39393616]
[109.48653412 195.39068604]
[109.79859161 210.38743591]
[110.11064911 225.38418579]
[110.42270660 240.38095093]
[110.73476410 255.37770081]
[111.04682159 270.37445068]
[125.70181274 273.96520996]
[138.92761230 281.22747803]
[149.82249451 291.66607666]
[157.64358521 304.56927490]
[161.85765076 319.05734253]
[162.17738342 334.14245605]
[158.58094788 348.79605103]
[151.31358337 362.01904297]
[140.87078857 372.90988159]
[127.96455383 380.72601318]
[113.47486115 384.93447876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 42]
[24 41]
[25 40]
[44 56]
[45 55]
[46 54]
[47 53]
[61 127]
[62 126]
[63 125]
[64 121]
[65 120]
[66 119]
[67 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
