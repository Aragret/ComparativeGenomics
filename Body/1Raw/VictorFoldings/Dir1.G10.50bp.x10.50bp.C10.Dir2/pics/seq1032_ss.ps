%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAAGGAAGGGGGGGGGGCAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACAxxxxxxxxxxUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCCCCCCCCCCCUCAUAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[73.17680359 402.84664917]
[59.95660782 395.57418823]
[49.06980515 385.12716675]
[41.25867462 372.21792603]
[37.05578995 357.72662354]
[36.74771881 342.64126587]
[40.35546112 327.99044800]
[47.63303375 314.77307129]
[58.08423996 303.89028931]
[70.99650574 296.08413696]
[85.48944092 291.88687134]
[85.17738342 276.89010620]
[84.86532593 261.89334106]
[84.55326843 246.89659119]
[84.24121094 231.89984131]
[83.92916107 216.90309143]
[83.61710358 201.90634155]
[83.30504608 186.90957642]
[82.99298859 171.91282654]
[82.68093109 156.91607666]
[82.36887360 141.91932678]
[82.05682373 126.92256927]
[71.84333801 115.93690491]
[56.90903473 114.53459930]
[41.97472763 113.13229370]
[32.19260406 127.66522217]
[16.49440002 135.23924255]
[-0.79235905 133.86569214]
[-14.95208073 124.00892639]
[-22.16745186 108.43514252]
[-37.14716721 107.65529633]
[-52.12688065 106.87545013]
[-62.25240707 114.93321228]
[-74.75144958 113.93679047]
[-82.93030548 104.96942139]
[-97.89055634 103.87811279]
[-112.85080719 102.78680420]
[-127.36802673 110.41453552]
[-141.08604431 101.42855072]
[-139.89294434 85.07286072]
[-125.01607513 78.17279816]
[-111.75949097 87.82655334]
[-96.79924774 88.91786194]
[-81.83899689 90.00917816]
[-66.51682281 81.51029205]
[-51.34703445 91.89573669]
[-36.36732101 92.67558289]
[-21.38760567 93.45542908]
[-15.65127563 82.11990356]
[-6.00375605 73.78213501]
[6.13215208 69.71884155]
[18.94868088 70.57283783]
[30.52237320 76.25164032]
[39.10274887 85.93601990]
[43.37702942 98.19799042]
[58.31133652 99.60028839]
[73.24564362 101.00259399]
[79.90194702 85.80108643]
[93.29896545 78.58142853]
[106.93970490 80.94755554]
[116.92243195 69.75179291]
[126.90515900 58.55602646]
[136.88787842 47.36026001]
[126.76831818 36.26979446]
[117.84274292 24.19758797]
[110.20577240 11.27161980]
[103.93835449 -2.37109089]
[99.10694122 -16.58592224]
[95.76273346 -31.22218895]
[93.94119263 -46.12474060]
[93.66162109 -61.13559723]
[94.92698669 -76.09564209]
[97.72387695 -90.84628296]
[102.02263641 -105.23116302]
[107.77770233 -119.09778595]
[114.92806244 -132.29916382]
[123.39792633 -144.69534302]
[133.09750366 -156.15493774]
[143.92398071 -166.55645752]
[155.76257324 -175.78964233]
[168.48780823 -183.75660706]
[181.96476746 -190.37290955]
[196.05059814 -195.56840515]
[210.59599304 -199.28802490]
[225.44676208 -201.49234009]
[240.44544983 -202.15797424]
[255.43310547 -201.27787781]
[270.25082397 -198.86137390]
[284.74151611 -194.93409729]
[298.75158691 -189.53764343]
[312.13253784 -182.72926331]
[324.74252319 -174.58110046]
[336.44784546 -165.17953491]
[347.12442017 -154.62422180]
[356.65911865 -143.02706909]
[364.95080566 -130.51100159]
[371.91162109 -117.20870209]
[377.46774292 -103.26118469]
[381.56033325 -88.81629181]
[384.14593506 -74.02715302]
[385.19720459 -59.05054092]
[384.70294189 -44.04521942]
[382.66845703 -29.17024612]
[379.11523438 -14.58330917]
[374.08099365 -0.43903694]
[367.61907959 13.11263371]
[359.79800415 25.92804718]
[350.70068359 37.87135315]
[340.42352295 48.81594467]
[329.07546997 58.64580536]
[316.77685547 67.25672913]
[303.65805054 74.55744171]
[289.85806274 80.47054291]
[275.52322388 84.93335724]
[260.80551147 87.89857483]
[245.86090088 89.33476257]
[230.84782410 89.22669220]
[215.92543030 87.57551575]
[201.25192261 84.39873505]
[186.98281860 79.73002625]
[173.26940918 73.61887360]
[160.25703430 66.13006592]
[148.08364868 57.34298706]
[138.10092163 68.53875732]
[128.11819458 79.73451996]
[118.13546753 90.93028259]
[119.30018616 113.45104218]
[97.05357361 126.61051178]
[97.36563110 141.60726929]
[97.67768860 156.60401917]
[97.98974609 171.60076904]
[98.30179596 186.59751892]
[98.61385345 201.59428406]
[98.92591095 216.59103394]
[99.23796844 231.58778381]
[99.55002594 246.58453369]
[99.86208344 261.58129883]
[100.17413330 276.57803345]
[100.48619080 291.57479858]
[115.14118195 295.16555786]
[128.36698914 302.42782593]
[139.26185608 312.86642456]
[147.08296204 325.76962280]
[151.29702759 340.25769043]
[151.61674500 355.34280396]
[148.02032471 369.99639893]
[140.75296021 383.21939087]
[130.31016541 394.11022949]
[117.40393066 401.92636108]
[102.91423798 406.13482666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 57]
[24 56]
[25 55]
[30 48]
[31 47]
[32 46]
[35 44]
[36 43]
[37 42]
[60 126]
[61 125]
[62 124]
[63 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
