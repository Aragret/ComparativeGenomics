%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACACUGAAGGGGGGGGGGAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAxxxxxxxxxxAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUCCCCCCCCCCAAAACACUGAA\
) } def
/len { sequence length } bind def

/coor [
[85.18851471 429.75857544]
[71.16657257 424.20556641]
[58.96661758 415.33923340]
[49.35554504 403.71691895]
[42.93751907 390.06921387]
[40.11598206 375.25402832]
[41.06829834 360.20266724]
[45.73460388 345.86123657]
[53.82157135 333.13128662]
[64.82084656 322.81301880]
[78.04100800 315.55502319]
[92.65101624 311.81359863]
[92.65101624 296.81359863]
[92.65101624 281.81359863]
[92.65101624 266.81359863]
[92.65101624 251.81359863]
[92.65101624 236.81359863]
[92.65101624 221.81359863]
[92.65101624 206.81359863]
[92.65101624 191.81359863]
[92.65101624 176.81359863]
[92.65101624 161.81359863]
[92.65101624 146.81359863]
[92.65101624 131.81359863]
[84.91371918 119.08632660]
[92.65101624 105.28614807]
[90.28384399 102.15460205]
[89.33773041 97.98127747]
[90.25155640 93.43809509]
[93.14139557 89.36985016]
[94.06480408 74.39830017]
[94.98822021 59.42675018]
[95.91163635 44.45520020]
[96.52745819 29.46784782]
[96.83543396 14.47101021]
[97.14341736 -0.52582759]
[97.45139313 -15.52266598]
[82.51591492 -16.99231720]
[67.73924255 -19.61494255]
[53.21023560 -23.37476921]
[39.01627731 -28.24918365]
[25.24273682 -34.20887375]
[11.97244835 -41.21799088]
[-0.71477878 -49.23438644]
[-12.74264050 -58.20984650]
[-24.03879929 -68.09038544]
[-34.53531647 -78.81658936]
[-44.16906357 -90.32394409]
[-52.88210678 -102.54324341]
[-60.62203598 -115.40099335]
[-67.34230804 -128.81987000]
[-73.00250244 -142.71916199]
[-77.56858063 -157.01528931]
[-81.01308441 -171.62226868]
[-83.31528473 -186.45223999]
[-84.46134949 -201.41603088]
[-84.44438171 -216.42362976]
[-83.26448059 -231.38478088]
[-80.92874146 -246.20951843]
[-77.45121765 -260.80865479]
[-72.85282135 -275.09442139]
[-67.16120148 -288.98089600]
[-60.41059875 -302.38452148]
[-52.64160919 -315.22476196]
[-43.90095520 -327.42431641]
[-34.24120712 -338.90985107]
[-23.72045898 -349.61227417]
[-12.40198421 -359.46725464]
[-0.35385504 -368.41549683]
[12.35146904 -376.40316772]
[25.63757515 -383.38226318]
[39.42456055 -389.31079102]
[53.62950134 -394.15307617]
[68.16697693 -397.88003540]
[82.94954681 -400.46923828]
[97.88830566 -401.90512085]
[112.89341736 -402.17901611]
[127.87462616 -401.28930664]
[142.74183655 -399.24133301]
[157.40565491 -396.04742432]
[171.77786255 -391.72677612]
[185.77201843 -386.30535889]
[199.30398560 -379.81582642]
[212.29235840 -372.29714966]
[224.65904236 -363.79458618]
[236.32963562 -354.35925293]
[247.23397827 -344.04791260]
[257.30645752 -332.92257690]
[266.48654175 -321.05014038]
[274.71896362 -308.50201416]
[281.95425415 -295.35366821]
[288.14886475 -281.68417358]
[293.26559448 -267.57574463]
[297.27359009 -253.11325073]
[300.14883423 -238.38363647]
[301.87396240 -223.47550964]
[302.43862915 -208.47853088]
[301.83944702 -193.48289490]
[300.08001709 -178.57878113]
[297.17089844 -163.85581970]
[293.12963867 -149.40257263]
[287.98046875 -135.30595398]
[281.75442505 -121.65076447]
[274.48889160 -108.51909637]
[266.22760010 -95.98995209]
[257.02026367 -84.13867188]
[246.92219543 -73.03652954]
[235.99415588 -62.75030518]
[224.30187988 -53.34185791]
[211.91566467 -44.86777115]
[198.91003418 -37.37900925]
[185.36317444 -30.92061234]
[171.35656738 -25.53142166]
[156.97445679 -21.24384880]
[142.30334473 -18.08368111]
[127.43144989 -16.06992340]
[112.44822693 -15.21468830]
[112.14025116 -0.21784995]
[111.83227539 14.77898788]
[111.52429962 29.77582550]
[114.17005157 33.81924057]
[114.26132202 39.57941055]
[110.88318634 45.37861633]
[109.95977020 60.35016632]
[109.03635406 75.32171631]
[108.11294556 90.29326630]
[107.65101624 105.28614807]
[115.38832092 119.08632660]
[107.65101624 131.81359863]
[107.65101624 146.81359863]
[107.65101624 161.81359863]
[107.65101624 176.81359863]
[107.65101624 191.81359863]
[107.65101624 206.81359863]
[107.65101624 221.81359863]
[107.65101624 236.81359863]
[107.65101624 251.81359863]
[107.65101624 266.81359863]
[107.65101624 281.81359863]
[107.65101624 296.81359863]
[107.65101624 311.81359863]
[122.26103210 315.55502319]
[135.48118591 322.81301880]
[146.48046875 333.13128662]
[154.56742859 345.86123657]
[159.23373413 360.20266724]
[160.18605042 375.25402832]
[157.36451721 390.06921387]
[150.94648743 403.71691895]
[141.33541870 415.33923340]
[129.13546753 424.20556641]
[115.11351776 429.75857544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[26 127]
[30 126]
[31 125]
[32 124]
[33 123]
[34 120]
[35 119]
[36 118]
[37 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
