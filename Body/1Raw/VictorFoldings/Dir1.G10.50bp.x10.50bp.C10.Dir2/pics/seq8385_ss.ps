%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUAACCAUACACAGGGGGGGGGGACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUxxxxxxxxxxUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGCCCCCCCCCCUAAUAACCAUGCACA\
) } def
/len { sequence length } bind def

/coor [
[89.67256165 427.84045410]
[75.23568726 423.60098267]
[61.86215210 416.70568848]
[50.03540421 407.40380859]
[40.18297195 396.03164673]
[32.66101074 383.00030518]
[27.74144363 368.78079224]
[25.60210419 353.88717651]
[26.32032776 338.85784912]
[29.87015343 324.23611450]
[36.12325668 310.55050659]
[44.85358810 298.29580688]
[55.74555588 287.91497803]
[68.40542603 279.78329468]
[82.37554169 274.19473267]
[97.15089417 271.35125732]
[97.15089417 256.35125732]
[97.15089417 241.35124207]
[97.15089417 226.35124207]
[97.15089417 211.35124207]
[97.15089417 196.35124207]
[97.15089417 181.35124207]
[97.15089417 166.35124207]
[97.15089417 151.35124207]
[97.15089417 136.35124207]
[93.99015045 129.62841797]
[97.30009460 121.05928802]
[88.57570648 133.26112366]
[73.57577515 133.21565247]
[64.92554474 120.96112061]
[69.90578461 106.81201935]
[84.32479095 102.67745972]
[70.09555817 97.93099976]
[55.86632156 93.18453979]
[41.63708496 88.43807983]
[27.40785217 83.69161987]
[19.36096191 96.43959808]
[8.49662018 106.89089203]
[-4.55353260 114.43787384]
[-19.03077888 118.64177704]
[-34.09342957 119.25818634]
[-48.86576462 116.25125885]
[-62.48893738 109.79582977]
[-74.17091370 100.26719666]
[-83.23252106 88.21934509]
[-89.14692688 74.35272217]
[-91.57028198 59.47351456]
[-90.36168671 44.44678116]
[-85.59141541 30.14615631]
[-77.53679657 17.40305710]
[-66.66612244 6.95835161]
[-53.61139297 -0.58071727]
[-39.13160324 -4.77583885]
[-24.06857872 -5.38311434]
[-9.29807091 -2.36723709]
[4.32118559 4.09645319]
[15.99738407 13.63216591]
[25.05168533 25.68550873]
[30.95768547 39.55571365]
[33.37201691 54.43638611]
[32.15431213 69.46238708]
[46.38354492 74.20884705]
[60.61278152 78.95530701]
[74.84201813 83.70176697]
[89.07125092 88.44822693]
[79.40010834 76.98223114]
[81.34252167 62.10853195]
[93.63388062 53.51071548]
[108.27183533 56.78642654]
[115.72628021 69.80300140]
[111.14425659 84.08560944]
[122.49790955 74.28282166]
[133.85156250 64.48004150]
[145.20521545 54.67725372]
[130.28186035 56.19181061]
[116.14118195 51.18771362]
[105.49221039 40.62364578]
[100.37509155 26.52346802]
[101.77014923 11.58848095]
[109.41011810 -1.32007504]
[121.83134460 -9.72918606]
[136.65417480 -12.02783871]
[151.03884888 -7.77565765]
[162.22956848 2.21272540]
[168.08242798 16.02374077]
[167.47612000 31.01148224]
[160.52801514 44.30317688]
[173.84629822 37.40219879]
[176.70785522 32.91595078]
[180.62542725 30.27332497]
[184.70582581 29.56620789]
[188.15184021 30.51301193]
[201.85104370 24.40304947]
[215.55026245 18.29308891]
[229.24946594 12.18312740]
[234.97944641 -2.30152202]
[248.95944214 -8.30274105]
[262.73303223 -2.75081563]
[276.43225098 -8.86077690]
[280.66900635 -14.04242611]
[286.08032227 -15.97714806]
[290.78720093 -14.93023586]
[304.71435547 -20.50105476]
[314.65399170 -32.81018448]
[329.34451294 -30.35302925]
[343.27166748 -35.92384720]
[357.19885254 -41.49466705]
[371.12600708 -47.06548691]
[385.05316162 -52.63630676]
[397.51391602 -64.13265991]
[412.01046753 -55.34139633]
[407.57580566 -38.97771072]
[390.62399292 -38.70914078]
[376.69683838 -33.13832092]
[362.76965332 -27.56750107]
[348.84249878 -21.99668121]
[334.91531372 -16.42586136]
[325.97189331 -4.51519489]
[310.28518677 -6.57388830]
[296.35803223 -1.00306892]
[282.54220581 4.83843374]
[268.84298706 10.94839478]
[263.77069092 24.90573883]
[249.96478271 31.29725838]
[235.35943604 25.88233757]
[221.66021729 31.99230003]
[207.96101379 38.10226059]
[194.26179504 44.21222305]
[180.74726868 50.72047806]
[167.42898560 57.62145233]
[155.00799561 66.03090668]
[143.65434265 75.83368683]
[132.30068970 85.63647461]
[120.94704437 95.43926239]
[112.29724121 121.35195923]
[112.15089417 136.35124207]
[112.15089417 151.35124207]
[112.15089417 166.35124207]
[112.15089417 181.35124207]
[112.15089417 196.35124207]
[112.15089417 211.35124207]
[112.15089417 226.35124207]
[112.15089417 241.35124207]
[112.15089417 256.35125732]
[112.15089417 271.35125732]
[126.92625427 274.19473267]
[140.89636230 279.78329468]
[153.55622864 287.91497803]
[164.44819641 298.29580688]
[173.17854309 310.55050659]
[179.43164062 324.23611450]
[182.98146057 338.85784912]
[183.69969177 353.88717651]
[181.56034851 368.78079224]
[176.64077759 383.00030518]
[169.11882019 396.03164673]
[159.26638794 407.40380859]
[147.43963623 416.70568848]
[134.06610107 423.60098267]
[119.62922668 427.84045410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[27 135]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[71 134]
[72 133]
[73 132]
[74 131]
[87 130]
[88 129]
[92 128]
[93 127]
[94 126]
[95 125]
[98 122]
[99 121]
[102 120]
[103 119]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
