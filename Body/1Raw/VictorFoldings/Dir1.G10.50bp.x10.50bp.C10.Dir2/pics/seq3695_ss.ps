%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUCCUAGGGGGGGGGGUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGxxxxxxxxxxGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCCCCCCCCCCCAGCCCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[84.28167725 407.80187988]
[71.06148529 400.52938843]
[60.17467880 390.08239746]
[52.36354828 377.17315674]
[48.16066742 362.68182373]
[47.85259628 347.59649658]
[51.46033859 332.94567871]
[58.73791122 319.72827148]
[69.18911743 308.84552002]
[82.10137939 301.03936768]
[96.59431458 296.84207153]
[96.28225708 281.84533691]
[95.97020721 266.84857178]
[95.65814972 251.85182190]
[95.34609222 236.85507202]
[95.03403473 221.85832214]
[94.72197723 206.86155701]
[94.40991974 191.86480713]
[94.09786987 176.86805725]
[93.78581238 161.87130737]
[82.66459656 159.71731567]
[72.11868286 155.58152771]
[62.49805450 149.60119629]
[54.12197876 141.97476196]
[47.26842880 132.95535278]
[42.16484833 122.84226990]
[38.98060989 111.97113037]
[24.02036095 113.06243896]
[9.06011200 114.15375519]
[-5.90013647 115.24506378]
[-11.94958687 129.30432129]
[-23.84707069 138.93284607]
[-38.85863495 141.91806030]
[-53.53472900 137.57400513]
[-64.50289917 126.89890289]
[-69.24272919 112.34580994]
[-66.66505432 97.25891876]
[-57.36219788 85.10509491]
[-43.47188950 78.67720032]
[-28.18601990 79.45230103]
[-15.01717091 87.25230408]
[-6.99144697 100.28481293]
[7.96880150 99.19350433]
[22.92905045 98.10219574]
[37.88929749 97.01087952]
[42.08259964 77.36708832]
[52.31920624 60.08488846]
[67.53099823 46.96757507]
[86.13072205 39.38385391]
[84.57314301 24.46494293]
[83.01555634 9.54603004]
[81.45797729 -5.37288237]
[79.90039825 -20.29179382]
[78.34281921 -35.21070480]
[66.35110474 -45.15237045]
[64.98402405 -60.30445862]
[74.53578186 -71.67545319]
[62.96379471 -62.13139343]
[48.24439240 -65.01917267]
[41.13627625 -78.22805786]
[46.83489609 -92.10342407]
[61.17502594 -96.50349426]
[73.67485046 -88.21274567]
[73.67485046 -103.21274567]
[73.67485046 -118.21274567]
[73.67485046 -133.21275330]
[70.52918243 -141.85893250]
[73.83413696 -148.52398682]
[74.14618683 -163.52075195]
[74.45824432 -178.51750183]
[61.02610397 -185.85481262]
[52.55200958 -198.60032654]
[50.98324203 -213.82522583]
[56.68029785 -228.03094482]
[68.33403778 -237.95309448]
[83.26650238 -241.31164551]
[98.04634094 -237.33482361]
[109.27724457 -226.93649292]
[114.37843323 -212.50608826]
[112.17768860 -197.35961914]
[103.18073273 -184.97764587]
[89.45500183 -178.20544434]
[89.14294434 -163.20869446]
[88.83088684 -148.21192932]
[88.67485046 -133.21275330]
[88.67485046 -118.21274567]
[88.67485046 -103.21274567]
[88.67485046 -88.21274567]
[89.45469666 -73.23303223]
[101.14920044 -64.08021545]
[102.94133759 -48.97250366]
[93.26172638 -36.76828766]
[94.81931305 -21.84937477]
[96.37689209 -6.93046331]
[97.93447113 7.98844910]
[99.49205017 22.90736198]
[101.04963684 37.82627487]
[115.83259583 39.86679077]
[129.70368958 45.37065887]
[141.86401367 54.02088928]
[151.61318970 65.31926727]
[158.38970947 78.61507416]
[161.80331421 93.14253235]
[176.80250549 93.29856873]
[191.80168152 93.45460510]
[206.80087280 93.61064148]
[220.68078613 86.01731873]
[233.32688904 93.88659668]
[248.32608032 94.04263306]
[257.46841431 81.50479889]
[272.24459839 76.76725006]
[286.97283936 81.65167999]
[295.98989868 94.27992249]
[295.82849121 109.79615784]
[286.55068970 122.23408508]
[271.72396851 126.81105042]
[257.04956055 121.76713562]
[248.17002869 109.04181671]
[233.17085266 108.88578033]
[220.36378479 116.49027252]
[206.64483643 108.60983276]
[191.64564514 108.45379639]
[176.64646912 108.29776001]
[161.64727783 108.14172363]
[158.46351624 121.18232727]
[152.55525208 133.23580933]
[144.19783020 143.74043274]
[133.78071594 152.20668030]
[121.78934479 158.24000549]
[108.78256226 161.55924988]
[109.09461975 176.55599976]
[109.40667725 191.55274963]
[109.71873474 206.54949951]
[110.03079224 221.54626465]
[110.34284210 236.54301453]
[110.65489960 251.53976440]
[110.96695709 266.53652954]
[111.27901459 281.53326416]
[111.59107208 296.53002930]
[126.24606323 300.12078857]
[139.47187805 307.38305664]
[150.36674500 317.82165527]
[158.18783569 330.72485352]
[162.40190125 345.21292114]
[162.72163391 360.29803467]
[159.12519836 374.95162964]
[151.85783386 388.17462158]
[141.41503906 399.06546021]
[128.50880432 406.88159180]
[114.01911926 411.09005737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 45]
[28 44]
[29 43]
[30 42]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 92]
[57 89]
[63 88]
[64 87]
[65 86]
[66 85]
[68 84]
[69 83]
[70 82]
[103 124]
[104 123]
[105 122]
[106 121]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
