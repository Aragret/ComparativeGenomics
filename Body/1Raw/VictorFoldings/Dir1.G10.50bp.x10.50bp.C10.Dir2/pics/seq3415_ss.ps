%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUACAACCGGGGGGGGGGCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCAxxxxxxxxxxGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACCCCCCCCCCCUACUAUAACC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 384.43606567]
[71.01555634 378.88305664]
[58.81560135 370.01672363]
[49.20452881 358.39440918]
[42.78650284 344.74670410]
[39.96496582 329.93151855]
[40.91728210 314.88015747]
[45.58358765 300.53872681]
[53.67055511 287.80877686]
[64.66983032 277.49050903]
[77.88998413 270.23251343]
[92.50000000 266.49108887]
[92.50000000 251.49108887]
[92.50000000 236.49108887]
[92.50000000 221.49108887]
[92.50000000 206.49108887]
[92.50000000 191.49108887]
[92.50000000 176.49108887]
[92.50000000 161.49108887]
[92.50000000 146.49108887]
[92.50000000 131.49108887]
[87.11103058 129.69534302]
[82.11890411 126.98527527]
[77.67733765 123.44434357]
[73.92308044 119.18157196]
[60.10949707 125.02835846]
[50.66397858 138.43411255]
[34.35809326 136.68765259]
[27.96593475 121.58558655]
[38.06320953 108.66362762]
[54.26270676 111.21477509]
[68.07628632 105.36798859]
[67.67185974 98.31771088]
[68.80588531 91.34748840]
[71.42440033 84.78903198]
[75.40278625 78.95443726]
[80.55171967 74.12137604]
[74.56342316 60.36854935]
[68.57512665 46.61572266]
[62.58683014 32.86289215]
[51.92592239 22.31087685]
[38.11233902 16.46408844]
[24.29875755 10.61730099]
[10.48517418 4.77051306]
[-3.32840872 -1.07627499]
[-18.67725563 3.59196210]
[-31.81471062 -5.61601496]
[-32.66284180 -21.63663292]
[-20.57103539 -32.18024826]
[-4.81509161 -29.15869713]
[2.51837921 -14.88985729]
[16.33196259 -9.04306984]
[30.14554405 -3.19628143]
[43.95912933 2.65050650]
[57.77270889 8.49729443]
[63.98186874 4.29058981]
[54.66240692 -7.46303415]
[45.34294891 -19.21665764]
[36.02348709 -30.97028160]
[23.82472992 -39.69898605]
[24.01651573 -54.69776154]
[36.43447495 -63.11169434]
[50.43561935 -57.72951508]
[54.01975250 -43.16275406]
[61.47989655 -30.14944267]
[68.94004059 -17.13613129]
[76.40018463 -4.12282038]
[82.60933685 -8.32952595]
[82.30136108 -23.32636452]
[81.99338531 -38.32320023]
[68.26949310 -45.09914017]
[59.27590179 -57.48356628]
[57.07928085 -72.63062286]
[62.18439484 -87.05963898]
[73.41812134 -97.45491791]
[88.19904327 -101.42771912]
[103.13059998 -98.06510162]
[114.78163147 -88.13978577]
[120.47482300 -73.93252563]
[118.90191650 -58.70805359]
[110.42435455 -45.96483994]
[96.99021912 -38.63117981]
[97.29820251 -23.63434219]
[97.60617828 -8.63750362]
[112.60244751 -8.30295944]
[125.43457031 -0.53529322]
[132.68435669 12.59636688]
[132.42063904 27.59404945]
[124.71366882 40.46271515]
[111.61639404 47.77444458]
[96.61763763 47.58156586]
[83.71271515 39.93545151]
[76.33966064 26.87459564]
[82.32795715 40.62742615]
[88.31625366 54.38025284]
[94.30455017 68.13307953]
[117.32326508 72.65328217]
[131.24519348 91.53379059]
[146.23806763 91.07186127]
[161.23095703 90.60993195]
[176.22384644 90.14801025]
[191.21673584 89.68608093]
[206.12118530 87.99568939]
[220.83670044 85.08821106]
[235.55223083 82.18074036]
[241.12333679 67.79441833]
[253.60133362 58.72231293]
[269.00454712 57.85930252]
[282.41784668 65.48076630]
[289.56112671 79.15473175]
[288.15496826 94.51787567]
[278.64807129 106.66788483]
[264.07406616 111.72772217]
[249.08346558 108.08282471]
[238.45970154 96.89626312]
[223.74417114 99.80373383]
[209.02865601 102.71121216]
[221.75616455 110.64913177]
[227.53364563 124.49184418]
[224.22550964 139.12249756]
[213.05459595 149.13302612]
[198.15010071 150.82308960]
[185.02137756 143.56799316]
[178.52131653 130.04951477]
[181.05262756 115.26464081]
[191.67866516 104.67897034]
[176.68577576 105.14089203]
[161.69288635 105.60282135]
[146.69999695 106.06475067]
[131.70710754 106.52667236]
[123.24015808 122.53516388]
[107.50000000 131.49108887]
[107.50000000 146.49108887]
[107.50000000 161.49108887]
[107.50000000 176.49108887]
[107.50000000 191.49108887]
[107.50000000 206.49108887]
[107.50000000 221.49108887]
[107.50000000 236.49108887]
[107.50000000 251.49108887]
[107.50000000 266.49108887]
[122.11001587 270.23251343]
[135.33016968 277.49050903]
[146.32945251 287.80877686]
[154.41641235 300.53872681]
[159.08271790 314.88015747]
[160.03503418 329.93151855]
[157.21350098 344.74670410]
[150.79547119 358.39440918]
[141.18440247 370.01672363]
[128.98443604 378.88305664]
[114.96250153 384.43606567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 32]
[26 31]
[37 96]
[38 95]
[39 94]
[40 93]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[68 84]
[69 83]
[70 82]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
