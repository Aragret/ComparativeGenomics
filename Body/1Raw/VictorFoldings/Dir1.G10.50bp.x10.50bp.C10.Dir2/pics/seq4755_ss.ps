%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAUGCUAGGGGGGGGGGGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCxxxxxxxxxxCUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGCCCCCCCCCCAAACAAGCUA\
) } def
/len { sequence length } bind def

/coor [
[91.34217834 156.63787842]
[76.97994232 152.46792603]
[64.18609619 144.72326660]
[53.83230591 133.93154907]
[46.62398148 120.82803345]
[43.05223846 106.30547333]
[43.36042786 91.35330963]
[47.52754974 76.99025726]
[55.26969147 64.19489288]
[66.05937195 53.83897781]
[79.16147614 46.62807846]
[93.68333435 43.05348206]
[93.99539185 28.05672646]
[94.30744934 13.05997276]
[94.61949921 -1.93678057]
[94.93155670 -16.93353462]
[95.24361420 -31.93028831]
[95.55567169 -46.92704010]
[95.86772919 -61.92379379]
[96.17978668 -76.92054749]
[96.49183655 -91.91730499]
[96.80389404 -106.91405487]
[81.84584045 -108.08979797]
[66.98036957 -110.12535095]
[52.25686264 -113.01395416]
[37.72423172 -116.74600983]
[23.43074608 -121.30912781]
[9.42389393 -126.68814087]
[-4.24979734 -132.86518860]
[-17.54490471 -139.81974792]
[-30.41726303 -147.52870178]
[-42.82410812 -155.96647644]
[-54.72423172 -165.10501099]
[-66.07810211 -174.91395569]
[-76.84799194 -185.36073303]
[-86.99813843 -196.41062927]
[-96.49481201 -208.02694702]
[-105.30648041 -220.17109680]
[-113.40385437 -232.80271912]
[-120.76004791 -245.87988281]
[-127.35061646 -259.35913086]
[-133.15367126 -273.19567871]
[-138.14993286 -287.34359741]
[-142.32281494 -301.75582886]
[-145.65843201 -316.38455200]
[-148.14572144 -331.18115234]
[-149.77642822 -346.09646606]
[-150.54510498 -361.08093262]
[-150.44923401 -376.08480835]
[-149.48910522 -391.05825806]
[-147.66792297 -405.95150757]
[-144.99172974 -420.71511841]
[-141.46942139 -435.29998779]
[-137.11270142 -449.65774536]
[-131.93603516 -463.74063110]
[-125.95661926 -477.50189209]
[-119.19432068 -490.89581299]
[-111.67160034 -503.87789917]
[-103.41345215 -516.40502930]
[-94.44730377 -528.43554688]
[-84.80294800 -539.92956543]
[-74.51241302 -550.84881592]
[-63.60988998 -561.15710449]
[-52.13159180 -570.82012939]
[-40.11565018 -579.80584717]
[-27.60198021 -588.08435059]
[-14.63215256 -595.62817383]
[-1.24925148 -602.41229248]
[12.50226593 -608.41406250]
[26.57671928 -613.61364746]
[40.92735291 -617.99371338]
[55.50649643 -621.53973389]
[70.26571655 -624.23992920]
[85.15599060 -626.08532715]
[100.12784576 -627.06982422]
[115.13155365 -627.19012451]
[130.11727905 -626.44580078]
[145.03521729 -624.83935547]
[159.83583069 -622.37609863]
[174.46995544 -619.06433105]
[188.88897705 -614.91485596]
[203.04498291 -609.94165039]
[216.89096069 -604.16107178]
[230.38090515 -597.59246826]
[243.47001648 -590.25756836]
[256.11480713 -582.18072510]
[268.27325439 -573.38879395]
[279.90499878 -563.91107178]
[290.97140503 -553.77886963]
[301.43569946 -543.02600098]
[311.26309204 -531.68811035]
[320.42095947 -519.80285645]
[328.87890625 -507.40975952]
[336.60879517 -494.54995728]
[343.58496094 -481.26617432]
[349.78424072 -467.60256958]
[355.18603516 -453.60446167]
[359.77239990 -439.31842041]
[363.52807617 -424.79190063]
[366.44064331 -410.07308960]
[368.50036621 -395.21096802]
[369.70043945 -380.25482178]
[370.03686523 -365.25442505]
[369.50851440 -350.25952148]
[368.11715698 -335.32000732]
[365.86743164 -320.48541260]
[362.76675415 -305.80511475]
[358.82550049 -291.32781982]
[354.05670166 -277.10162354]
[348.47622681 -263.17379761]
[342.10263062 -249.59063721]
[334.95703125 -236.39721680]
[327.06323242 -223.63737488]
[318.44738770 -211.35351562]
[309.13818359 -199.58642578]
[299.16650391 -188.37521362]
[288.56549072 -177.75711060]
[277.37036133 -167.76739502]
[265.61828613 -158.43923950]
[253.34829712 -149.80363464]
[240.60119629 -141.88928223]
[227.41929626 -134.72247314]
[213.84640503 -128.32698059]
[199.92759705 -122.72409058]
[185.70910645 -117.93239594]
[171.23817444 -113.96781921]
[156.56286621 -110.84352875]
[141.73194885 -108.56990051]
[126.79466248 -107.15448761]
[111.80065155 -106.60199738]
[111.48859406 -91.60524750]
[111.17653656 -76.60848999]
[110.86447906 -61.61174011]
[110.55242157 -46.61498642]
[110.24037170 -31.61823082]
[109.92831421 -16.62147713]
[109.61625671 -1.62472427]
[109.30419922 13.37202930]
[108.99214172 28.36878395]
[108.68008423 43.36553574]
[123.04067993 47.54112625]
[135.83148193 55.29081345]
[146.18103027 66.08659363]
[153.38420105 79.19294739]
[156.95024109 93.71691132]
[156.63616943 108.66895294]
[152.46339417 123.03036499]
[144.71623230 135.82269287]
[133.92248535 146.17436218]
[120.81754303 153.38011169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
