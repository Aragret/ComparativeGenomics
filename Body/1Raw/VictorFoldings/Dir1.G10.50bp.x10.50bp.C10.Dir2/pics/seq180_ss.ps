%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUAAUAACAAGGGGGGGGGGUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUxxxxxxxxxxCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCCCCCCCCCCCAUAAUUAUAACAA\
) } def
/len { sequence length } bind def

/coor [
[90.42030334 418.84701538]
[76.05805206 414.34027100]
[62.89716721 407.03439331]
[51.47657013 397.22854614]
[42.26392746 385.32424927]
[35.63650131 371.80899048]
[31.86567116 357.23620605]
[31.10585403 342.20266724]
[33.38816452 327.32397461]
[38.61914062 313.20938110]
[46.58457947 300.43685913]
[56.95830154 289.52951050]
[69.31550598 280.93389893]
[83.15017700 275.00204468]
[97.89579773 271.97686768]
[97.89579773 256.97686768]
[97.89579773 241.97688293]
[97.89579773 226.97688293]
[97.89579773 211.97688293]
[97.89579773 196.97688293]
[97.89579773 181.97688293]
[97.89579773 166.97688293]
[97.89579773 151.97688293]
[97.89579773 136.97688293]
[97.89579773 121.97688293]
[90.26159668 134.88885498]
[75.31414795 136.14338684]
[65.63452148 124.68455505]
[69.36991882 110.15710449]
[83.37639618 104.78859711]
[68.58744049 102.28122711]
[53.79849243 99.77384949]
[39.00954056 97.26647186]
[24.22059059 94.75910187]
[9.43163967 92.25172424]
[2.20889711 105.56002045]
[-8.94538021 115.80017853]
[-22.82126045 121.86141968]
[-37.91359329 123.08627319]
[-52.58526993 119.34186554]
[-65.24482727 111.03437042]
[-74.51903534 99.06492615]
[-79.40191650 84.73188019]
[-79.36379242 69.58997345]
[-74.40881348 55.28169250]
[-65.07445526 43.35908890]
[-52.37323761 35.11544037]
[-37.68289185 31.44495392]
[-22.59691811 32.74577713]
[-8.75173092 38.87680817]
[2.35084772 49.17299652]
[9.50649357 62.51748657]
[11.93901443 77.46276855]
[26.72796631 79.97014618]
[41.51691818 82.47752380]
[56.30586624 84.98490143]
[71.09481812 87.49227142]
[85.88376617 89.99964905]
[99.78411102 84.36223602]
[108.64878082 72.26191711]
[117.51344299 60.16159821]
[126.37810516 48.06127930]
[135.24276733 35.96096039]
[143.12442017 23.19853401]
[149.97386169 9.85367680]
[156.82330322 -3.49117947]
[163.67274475 -16.83603668]
[151.27430725 -25.31436157]
[140.03628540 -35.27980423]
[130.13591003 -46.57519913]
[121.72934723 -59.02239990]
[114.94915771 -72.42510223]
[109.90228271 -86.57190704]
[106.66831970 -101.23972321]
[105.29827118 -116.19720459]
[105.81375122 -131.20845032]
[108.20661926 -146.03671265]
[112.43914032 -160.44813538]
[118.44456482 -174.21542358]
[126.12817383 -187.12142944]
[135.36878967 -198.96264648]
[146.02067566 -209.55229187]
[157.91583252 -218.72335815]
[170.86666870 -226.33120728]
[184.66889954 -232.25584412]
[199.10487366 -236.40383911]
[213.94691467 -238.70977783]
[228.96092224 -239.13728333]
[243.91011047 -237.67959595]
[258.55871582 -234.35974121]
[272.67572021 -229.23004150]
[286.03845215 -222.37142944]
[298.43615723 -213.89205933]
[309.67337036 -203.92567444]
[319.57278442 -192.62944031]
[327.97830200 -180.18153381]
[334.75735474 -166.77827454]
[339.80303955 -152.63102722]
[343.03576660 -137.96295166]
[344.40454102 -123.00535583]
[343.88781738 -107.99414825]
[341.49371338 -93.16608429]
[337.25994873 -78.75502777]
[331.25338745 -64.98824310]
[323.56869507 -52.08287430]
[314.32705688 -40.24244308]
[303.67428589 -29.65369415]
[291.77835083 -20.48362732]
[278.82690430 -12.87686920]
[265.02416992 -6.95338821]
[250.58782959 -2.80660558]
[235.74560547 -0.50192285]
[220.73156738 -0.07568794]
[205.78248596 -1.53462327]
[191.13415527 -4.85571909]
[177.01759338 -9.98659706]
[170.16816711 3.35825896]
[163.31872559 16.70311546]
[156.46928406 30.04797173]
[170.56732178 24.92495155]
[185.02545166 28.92023468]
[194.49269104 40.55515289]
[195.46519470 55.52359390]
[187.58302307 68.28569794]
[173.76338196 74.11817932]
[159.12098694 70.86241150]
[149.07499695 59.72337723]
[147.34309387 44.82562256]
[138.47842407 56.92594147]
[129.61375427 69.02626038]
[120.74909973 81.12657928]
[111.88442993 93.22689819]
[118.91653442 105.05392456]
[112.89579773 121.97688293]
[112.89579773 136.97688293]
[112.89579773 151.97688293]
[112.89579773 166.97688293]
[112.89579773 181.97688293]
[112.89579773 196.97688293]
[112.89579773 211.97688293]
[112.89579773 226.97688293]
[112.89579773 241.97688293]
[112.89579773 256.97686768]
[112.89579773 271.97686768]
[127.64141083 275.00204468]
[141.47608948 280.93389893]
[153.83328247 289.52951050]
[164.20701599 300.43685913]
[172.17245483 313.20938110]
[177.40342712 327.32397461]
[179.68572998 342.20266724]
[178.92591858 357.23620605]
[175.15509033 371.80899048]
[168.52766418 385.32424927]
[159.31501770 397.22854614]
[147.89442444 407.03439331]
[134.73353577 414.34027100]
[120.37128448 418.84701538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[59 132]
[60 131]
[61 130]
[62 129]
[63 128]
[64 119]
[65 118]
[66 117]
[67 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
