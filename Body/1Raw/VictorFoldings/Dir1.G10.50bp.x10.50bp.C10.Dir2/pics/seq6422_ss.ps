%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAAUAAGGGGGGGGGGUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGAxxxxxxxxxxGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[89.34011078 367.20639038]
[75.49417114 361.19036865]
[63.78550720 351.66094971]
[55.08298492 339.32528687]
[50.03238297 325.09875488]
[49.00849152 310.03707886]
[52.08728790 295.25793457]
[59.04030991 281.85800171]
[69.35159302 270.83166504]
[82.25597382 262.99716187]
[96.79586029 258.93585205]
[96.79586029 243.93585205]
[96.79586029 228.93585205]
[96.79586029 213.93585205]
[96.79586029 198.93585205]
[96.79586029 183.93585205]
[96.79586029 168.93585205]
[96.79586029 153.93585205]
[96.79586029 138.93585205]
[96.79586029 123.93584442]
[84.10093689 115.94593048]
[70.57674408 122.43409729]
[57.05255508 128.92225647]
[43.52836227 135.41043091]
[36.87211990 150.00747681]
[21.27521324 153.76460266]
[8.70225143 143.79965210]
[8.79813671 127.75688934]
[21.48931503 117.94293976]
[37.04019928 121.88623047]
[50.56438828 115.39807129]
[64.08857727 108.90990448]
[77.61277008 102.42173767]
[77.30071259 87.42498779]
[63.51832962 81.50502014]
[49.73595047 75.58506012]
[35.95356750 69.66509247]
[21.42448044 75.28144073]
[7.53151751 69.08142090]
[2.26672721 55.19554520]
[-11.51565456 49.27558136]
[-25.29803467 43.35562134]
[-39.08041763 37.43565750]
[-52.34583664 45.48601151]
[-67.80684662 44.16812134]
[-79.51837158 33.98873901]
[-82.97708893 18.86204338]
[-76.85305023 4.60456085]
[-63.50108337 -3.30141783]
[-48.05528259 -1.81588185]
[-36.45487213 8.48995018]
[-33.16045380 23.65327454]
[-19.37807274 29.57323837]
[-5.59569120 35.49320221]
[8.18669033 41.41316605]
[21.88219643 35.67132568]
[35.94382477 41.47867584]
[41.87353134 55.88271332]
[55.65591431 61.80267715]
[69.43829346 67.72264099]
[83.22067261 73.64260101]
[97.95848083 70.85028076]
[108.62010956 60.29898834]
[112.98635864 45.09220123]
[127.47515106 41.63907242]
[138.13677979 31.08778191]
[142.06954956 22.77001953]
[149.13166809 20.43076897]
[160.01049805 10.10356426]
[145.19313049 12.43716812]
[130.67864990 8.65167809]
[118.88840485 -0.62140107]
[111.78926086 -13.83511162]
[110.56552124 -28.78511047]
[115.42132568 -42.97740173]
[125.54663086 -54.04439163]
[139.25228882 -60.13986206]
[154.25190735 -60.24694824]
[168.04321289 -54.34778595]
[178.32548523 -43.42648697]
[183.38343811 -29.30497169]
[182.37326050 -14.33902550]
[175.46440125 -1.02640295]
[188.70698547 -8.07153797]
[201.94958496 -15.11667252]
[215.19216919 -22.16180801]
[228.43475342 -29.20694351]
[241.67733765 -36.25207901]
[254.61538696 -43.84198761]
[267.22653198 -51.96352768]
[279.83764648 -60.08507156]
[276.45989990 -74.86230469]
[278.34307861 -89.90323639]
[285.25970459 -103.39159393]
[296.37463379 -113.69859314]
[310.34567261 -119.57961273]
[325.48571777 -120.32449341]
[339.96655273 -115.84329224]
[352.03955078 -106.67712402]
[360.24682617 -93.93286133]
[363.59732056 -79.14942169]
[361.68646240 -64.11199188]
[354.74496460 -50.63640594]
[343.61105347 -40.34990692]
[329.62921143 -34.49464035]
[314.48782349 -33.77766037]
[300.01525879 -38.28554535]
[287.95919800 -47.47394180]
[275.34805298 -39.35239792]
[262.73693848 -31.23085785]
[262.03305054 -28.45382690]
[260.15081787 -25.79843712]
[257.13458252 -23.72859764]
[253.20066833 -22.68198586]
[248.72247314 -23.00949097]
[235.47988892 -15.96435738]
[222.23730469 -8.91922188]
[208.99470520 -1.87408721]
[195.75212097 5.17104769]
[182.50953674 12.21618271]
[170.33770752 20.98238945]
[159.45887756 31.30959511]
[148.68806458 41.74940872]
[138.02644348 52.30069733]
[134.42279053 66.75278473]
[119.17139435 70.96061707]
[108.50977325 81.51190186]
[118.39215851 88.04605865]
[123.51649475 99.68830109]
[121.40192413 113.11666107]
[111.79586029 123.93584442]
[111.79586029 138.93585205]
[111.79586029 153.93585205]
[111.79586029 168.93585205]
[111.79586029 183.93585205]
[111.79586029 198.93585205]
[111.79586029 213.93585205]
[111.79586029 228.93585205]
[111.79586029 243.93585205]
[111.79586029 258.93585205]
[126.33574677 262.99716187]
[139.24012756 270.83166504]
[149.55142212 281.85800171]
[156.50444031 295.25793457]
[159.58323669 310.03707886]
[158.55934143 325.09875488]
[153.50874329 339.32528687]
[144.80621338 351.66094971]
[133.09754944 361.19036865]
[119.25161743 367.20639038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 33]
[22 32]
[23 31]
[24 30]
[34 61]
[35 60]
[36 59]
[37 58]
[40 55]
[41 54]
[42 53]
[43 52]
[62 127]
[63 126]
[65 124]
[66 123]
[68 122]
[69 121]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[88 115]
[89 110]
[90 109]
[91 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
