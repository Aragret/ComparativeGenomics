%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAUAAACCUGGGGGGGGGGGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGxxxxxxxxxxCUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUACCCCCCCCCCUCUAUAAACCU\
) } def
/len { sequence length } bind def

/coor [
[86.89285278 371.12783813]
[72.33299255 367.21963501]
[59.13185120 359.94000244]
[48.05691910 349.71212769]
[39.75207901 337.13067627]
[34.70016861 322.92709351]
[33.19489288 307.92718506]
[35.32376862 293.00299072]
[40.96302795 279.02221680]
[49.78480911 266.79766846]
[61.27622604 257.04006958]
[74.76918793 250.31671143]
[89.47922516 247.01847839]
[89.78720093 232.02163696]
[90.09517670 217.02481079]
[90.40315247 202.02796936]
[90.71113586 187.03112793]
[91.01911163 172.03428650]
[91.32708740 157.03744507]
[91.63506317 142.04061890]
[91.94304657 127.04377747]
[92.25102234 112.04693604]
[85.67907715 99.70590210]
[92.75214386 87.64508057]
[93.06011963 72.64824677]
[93.36809540 57.65140915]
[82.29042816 67.76502991]
[67.31174469 68.56439209]
[55.22060394 59.68721390]
[51.49688721 45.15676498]
[57.82824326 31.55845833]
[71.34520721 25.05524826]
[85.92168427 28.59448624]
[94.95088196 40.57044601]
[97.40380859 25.77236557]
[99.85673523 10.97428703]
[85.25977325 7.49384928]
[70.94115448 3.00365210]
[56.97063828 -2.47442794]
[43.41628647 -8.91370201]
[30.34413528 -16.28279877]
[17.81787109 -24.54581451]
[5.89852238 -33.66249466]
[-5.35584068 -43.58842468]
[-15.89038754 -54.27523804]
[-25.65379524 -65.67088318]
[-34.59849548 -77.71982574]
[-42.68091202 -90.36337280]
[-49.86166382 -103.53992462]
[-56.10577011 -117.18527985]
[-61.38281250 -131.23297119]
[-65.66707611 -145.61454773]
[-68.93769073 -160.25994873]
[-71.17872620 -175.09782410]
[-72.37924957 -190.05587769]
[-72.53343201 -205.06124878]
[-71.64051056 -220.04081726]
[-69.70483398 -234.92160034]
[-66.73583984 -249.63111877]
[-62.74799347 -264.09768677]
[-57.76071548 -278.25085449]
[-51.79830551 -292.02163696]
[-44.88981628 -305.34295654]
[-37.06890488 -318.14990234]
[-28.37367249 -330.38009644]
[-18.84648132 -341.97393799]
[-8.53374863 -352.87496948]
[2.51428270 -363.03005981]
[14.24378777 -372.38970947]
[26.59762001 -380.90838623]
[39.51559448 -388.54452515]
[52.93477249 -395.26095581]
[66.78977966 -401.02493286]
[81.01310730 -405.80841064]
[95.53547668 -409.58804321]
[110.28611755 -412.34542847]
[125.19317627 -414.06716919]
[140.18402100 -414.74481201]
[155.18562317 -414.37512207]
[170.12489319 -412.95983887]
[184.92904663 -410.50592041]
[199.52595520 -407.02526855]
[213.84451294 -402.53485107]
[227.81495667 -397.05657959]
[241.36921692 -390.61712646]
[254.44125366 -383.24783325]
[266.96740723 -374.98464966]
[278.88662720 -365.86779785]
[290.14083862 -355.94168091]
[300.67523193 -345.25473022]
[310.43847656 -333.85894775]
[319.38299561 -321.80987549]
[327.46524048 -309.16619873]
[334.64581299 -295.98956299]
[340.88970947 -282.34411621]
[346.16656494 -268.29635620]
[350.45062256 -253.91470337]
[353.72100830 -239.26925659]
[355.96185303 -224.43135071]
[357.16217041 -209.47328186]
[357.31613159 -194.46791077]
[356.42297363 -179.48835754]
[354.48709106 -164.60758972]
[351.51788330 -149.89811707]
[347.52984619 -135.43161011]
[342.54235840 -121.27851868]
[336.57974243 -107.50782776]
[329.67108154 -94.18660736]
[321.84997559 -81.37976837]
[313.15457153 -69.14969635]
[303.62719727 -57.55598068]
[293.31433105 -46.65510941]
[282.26614380 -36.50018311]
[270.53649902 -27.14067841]
[258.18255615 -18.62219810]
[245.26446533 -10.98623848]
[231.84519958 -4.27000475]
[217.99009705 1.49378300]
[203.76670837 6.27704382]
[189.24427795 10.05647373]
[174.49360657 12.81365967]
[159.58651733 14.53516960]
[144.59565735 15.21261501]
[129.59407043 14.84269619]
[114.65481567 13.42721558]
[112.20188904 28.22529411]
[109.74896240 43.02337265]
[108.36493683 57.95938492]
[108.05695343 72.95622253]
[107.74897766 87.95306396]
[114.32092285 100.29409790]
[107.24785614 112.35491943]
[106.93988037 127.35175323]
[106.63190460 142.34858704]
[106.32392883 157.34542847]
[106.01594543 172.34226990]
[105.70796967 187.33911133]
[105.39999390 202.33593750]
[105.09201813 217.33277893]
[104.78403473 232.32962036]
[104.47605896 247.32646179]
[119.03828430 251.22583008]
[132.24383545 258.49746704]
[143.32496643 268.71862793]
[151.63743591 281.29504395]
[156.69795227 295.49554443]
[158.21232605 310.49456787]
[156.09249878 325.42001343]
[150.46171570 339.40423584]
[141.64735413 351.63412476]
[130.16184998 361.39868164]
[116.67296600 368.13021851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 130]
[25 129]
[26 128]
[34 127]
[35 126]
[36 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
