%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAACCUACGGGGGGGGGGGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCxxxxxxxxxxCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCCCCCCCCCCCUAAACCUAC\
) } def
/len { sequence length } bind def

/coor [
[91.58950806 475.73925781]
[77.74356842 469.72323608]
[66.03491211 460.19381714]
[57.33238602 447.85815430]
[52.28178406 433.63162231]
[51.25789261 418.56994629]
[54.33668900 403.79077148]
[61.28971100 390.39086914]
[71.60099792 379.36453247]
[84.50537872 371.53002930]
[99.04526520 367.46868896]
[99.04526520 352.46868896]
[99.04526520 337.46868896]
[99.04526520 322.46868896]
[99.04526520 307.46868896]
[99.04526520 292.46868896]
[99.04526520 277.46868896]
[99.04526520 262.46868896]
[99.04526520 247.46870422]
[99.04526520 232.46870422]
[99.04526520 217.46870422]
[98.73320770 202.47195435]
[97.95336151 187.49223328]
[97.01773834 172.52143860]
[96.08210754 157.55064392]
[95.14647675 142.57986450]
[74.23656464 134.24684143]
[60.43401718 116.46614838]
[45.79051590 119.71697998]
[31.14701462 122.96780396]
[19.43174553 134.44319153]
[3.71101475 129.77514648]
[0.15696345 113.76574707]
[12.42569447 102.88409424]
[27.89618874 108.32430267]
[42.53969193 105.07347870]
[57.18319321 101.82264709]
[59.03196335 87.42140198]
[65.58323669 74.46398926]
[76.08503723 64.43772125]
[70.02202606 50.71766663]
[63.95901108 36.99761200]
[57.89599991 23.27755928]
[51.83298492 9.55750561]
[37.36516571 13.61496735]
[22.46716118 15.57205963]
[7.44227457 15.38894081]
[-7.40360689 13.06933784]
[-21.76823997 8.66047478]
[-35.35918045 2.25211096]
[-47.89973068 -6.02528811]
[-59.13458633 -16.00320435]
[-68.83501434 -27.47850227]
[-76.80352783 -40.21755600]
[-82.87790680 -53.96101761]
[-86.93447113 -68.42908478]
[-88.89064026 -83.32721710]
[-88.70658875 -98.35208893]
[-86.38607025 -113.19783020]
[-81.97631836 -127.56218719]
[-75.56711578 -141.15272522]
[-67.28894043 -153.69276428]
[-57.31032562 -164.92700195]
[-45.83442688 -174.62672424]
[-33.09487915 -182.59445190]
[-19.35104370 -188.66796875]
[-4.88272238 -192.72364807]
[10.01552486 -194.67889404]
[25.04038811 -194.49391174]
[39.88598251 -192.17247009]
[54.25007248 -187.76184082]
[67.84021759 -181.35179138]
[80.37974548 -173.07283020]
[91.61336517 -163.09353638]
[101.31237030 -151.61703491]
[109.27931213 -138.87699890]
[115.35198212 -125.13278198]
[119.40676117 -110.66420746]
[121.36108398 -95.76583862]
[121.17517853 -80.74098969]
[118.85281372 -65.89553833]
[114.44128418 -51.53171921]
[108.03040314 -37.94197083]
[99.75067139 -25.40295792]
[89.77066803 -14.16995621]
[78.29357147 -4.47165775]
[65.55303955 3.49449277]
[71.61605072 17.21454620]
[77.67906189 30.93460083]
[83.74208069 44.65465546]
[89.80509186 58.37470627]
[101.31324768 57.16454315]
[112.72566223 59.07740784]
[123.21028137 63.97384262]
[132.00268555 71.49685669]
[138.46185303 81.09797668]
[152.87406921 76.94008636]
[167.28628540 72.78219604]
[181.56175232 68.17663574]
[195.68655396 63.12788010]
[209.81135559 58.07912064]
[215.07453918 43.35387421]
[228.59761047 35.50144577]
[243.99539185 38.22951889]
[253.99751282 50.24997711]
[253.88130188 65.88713074]
[243.70159912 77.75759125]
[228.26496887 80.25648499]
[214.86010742 72.20392609]
[200.73530579 77.25267792]
[186.61050415 82.30143738]
[184.77206421 85.38162994]
[181.31777954 87.69888306]
[176.63497925 88.48867035]
[171.44418335 87.19441223]
[157.03196716 91.35230255]
[142.61975098 95.51019287]
[142.14367676 107.77893066]
[138.20845032 119.40917206]
[131.13705444 129.44630432]
[121.50993347 137.06648254]
[110.11727142 141.64422607]
[111.05289459 156.61502075]
[111.98852539 171.58581543]
[112.92415619 186.55661011]
[116.60300446 194.98974609]
[113.72022247 201.84797668]
[116.98413849 207.71775818]
[116.77563477 213.47863770]
[114.04526520 217.46870422]
[114.04526520 232.46870422]
[114.04526520 247.46870422]
[114.04526520 262.46868896]
[114.04526520 277.46868896]
[114.04526520 292.46868896]
[114.04526520 307.46868896]
[114.04526520 322.46868896]
[114.04526520 337.46868896]
[114.04526520 352.46868896]
[114.04526520 367.46868896]
[128.58514404 371.53002930]
[141.48953247 379.36453247]
[151.80081177 390.39086914]
[158.75384521 403.79077148]
[161.83264160 418.56994629]
[160.80874634 433.63162231]
[155.75814819 447.85815430]
[147.05561829 460.19381714]
[135.34695435 469.72323608]
[121.50102234 475.73925781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 125]
[24 124]
[25 123]
[26 122]
[28 37]
[29 36]
[30 35]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[96 117]
[97 116]
[98 115]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
