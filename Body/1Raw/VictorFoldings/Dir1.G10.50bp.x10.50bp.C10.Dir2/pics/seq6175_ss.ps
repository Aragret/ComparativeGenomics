%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCAAUAUGGGGGGGGGGGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUxxxxxxxxxxCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGUGCCCCCCCCCCAAAUCAAUAU\
) } def
/len { sequence length } bind def

/coor [
[66.78277588 464.73452759]
[52.29308701 460.52606201]
[39.38685989 452.70993042]
[28.94405746 441.81909180]
[21.67669487 428.59609985]
[18.08026695 413.94250488]
[18.39999008 398.85739136]
[22.61405945 384.36932373]
[30.43515778 371.46612549]
[41.33002472 361.02752686]
[54.55583572 353.76525879]
[69.21082306 350.17449951]
[69.52288055 335.17773438]
[69.83493805 320.18099976]
[70.14699554 305.18423462]
[70.45905304 290.18750000]
[70.77111053 275.19073486]
[71.08316040 260.19396973]
[71.39521790 245.19721985]
[71.70727539 230.20046997]
[72.01933289 215.20372009]
[61.52184296 225.91831970]
[46.75888443 228.57446289]
[33.18507767 222.19075012]
[25.81567383 209.12583923]
[27.37351990 194.20695496]
[37.28302383 182.94633484]
[51.88282013 179.50453186]
[65.77857208 185.15324402]
[73.83586121 197.80453491]
[68.60305023 183.85939026]
[78.77407837 171.74078369]
[81.56639862 157.00297546]
[84.35872650 142.26516724]
[87.15104675 127.52736664]
[89.94337463 112.78955841]
[83.98388672 97.13773346]
[94.99567413 84.51887512]
[97.48078918 69.72616577]
[99.96591187 54.93346024]
[102.45102692 40.14075470]
[90.45273590 28.26248932]
[87.90015411 11.74081039]
[95.60001373 -2.91108894]
[110.35629272 -10.03551388]
[112.53313446 -24.87671852]
[114.70996857 -39.71792603]
[112.85235596 -48.72909164]
[117.08956909 -54.84396362]
[119.57469177 -69.63667297]
[117.84483337 -73.78022766]
[117.59075165 -77.84304810]
[118.59799194 -81.35977173]
[120.51997375 -83.98654938]
[122.93077850 -85.53424072]
[126.63694000 -100.06917572]
[130.34310913 -114.60411072]
[134.04927063 -129.13905334]
[137.75543213 -143.67398071]
[141.46159363 -158.20892334]
[145.16775513 -172.74385071]
[148.87391663 -187.27879333]
[152.58007812 -201.81373596]
[156.28623962 -216.34866333]
[142.57882690 -222.53559875]
[130.15412903 -231.00895691]
[119.38969421 -241.51124573]
[110.61265564 -253.72332764]
[104.08974457 -267.27407837]
[100.01916504 -281.75170898]
[98.52463531 -296.71624756]
[99.65156555 -311.71295166]
[103.36570740 -326.28607178]
[109.55419159 -339.99276733]
[118.02896118 -352.41653442]
[128.53247070 -363.17974854]
[140.74554443 -371.95541382]
[154.29702759 -378.47680664]
[168.77511597 -382.54571533]
[183.73982239 -384.03854370]
[198.73640442 -382.90994263]
[213.30911255 -379.19412231]
[227.01512146 -373.00408936]
[239.43789673 -364.52792358]
[250.19995117 -354.02319336]
[258.97421265 -341.80911255]
[265.49404907 -328.25689697]
[269.56134033 -313.77835083]
[271.05249023 -298.81347656]
[269.92214966 -283.81701660]
[266.20471191 -269.24472046]
[260.01312256 -255.53942871]
[251.53552246 -243.11759949]
[241.02957153 -232.35675049]
[228.81451416 -223.58386230]
[215.26155090 -217.06556702]
[200.78253174 -212.99990845]
[185.81748962 -211.51046753]
[170.82116699 -212.64250183]
[167.11500549 -198.10757446]
[163.40884399 -183.57263184]
[159.70268250 -169.03768921]
[155.99652100 -154.50276184]
[152.29035950 -139.96781921]
[148.58419800 -125.43288422]
[144.87803650 -110.89794922]
[141.17187500 -96.36301422]
[137.46571350 -81.82807922]
[134.36740112 -67.15155029]
[131.88227844 -52.35884476]
[129.55117798 -37.54108810]
[127.37433624 -22.69988251]
[125.19750214 -7.85867643]
[135.59306335 0.57507795]
[140.48780823 13.15096855]
[138.49719238 26.60786057]
[130.03735352 37.39879608]
[117.24373627 42.62587357]
[114.75861359 57.41857910]
[112.27349854 72.21128845]
[109.78837585 87.00399017]
[115.97546387 96.91892242]
[113.91944122 108.42364502]
[104.68118286 115.58188629]
[101.88885498 130.31968689]
[99.09653473 145.05749512]
[96.30420685 159.79530334]
[93.51187897 174.53311157]
[98.54496765 189.53239441]
[88.57366943 200.59686279]
[87.01608276 215.51577759]
[86.70403290 230.51252747]
[86.39197540 245.50927734]
[86.07991791 260.50604248]
[85.76786041 275.50277710]
[85.45580292 290.49954224]
[85.14374542 305.49630737]
[84.83169556 320.49304199]
[84.51963806 335.48980713]
[84.20758057 350.48657227]
[98.70051575 354.68383789]
[111.61277771 362.48999023]
[122.06398773 373.37277222]
[129.34155273 386.59014893]
[132.94929504 401.24096680]
[132.64123535 416.32632446]
[128.43833923 430.81762695]
[120.62721252 443.72686768]
[109.74040985 454.17388916]
[96.52021790 461.44635010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[30 130]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[38 121]
[39 120]
[40 119]
[41 118]
[45 113]
[46 112]
[47 111]
[49 110]
[50 109]
[55 108]
[56 107]
[57 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
