%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUACCUCGGGGGGGGGGAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCxxxxxxxxxxUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGCCCCCCCCCCUUAUUAUCUC\
) } def
/len { sequence length } bind def

/coor [
[93.59082031 382.84671021]
[79.74488068 376.83068848]
[68.03622437 367.30126953]
[59.33369827 354.96560669]
[54.28309631 340.73907471]
[53.25920486 325.67739868]
[56.33800507 310.89822388]
[63.29102707 297.49832153]
[73.60231018 286.47198486]
[86.50669098 278.63748169]
[101.04657745 274.57617188]
[101.04657745 259.57617188]
[101.04657745 244.57615662]
[101.04657745 229.57615662]
[101.04657745 214.57615662]
[101.04657745 199.57615662]
[101.04657745 184.57615662]
[101.04657745 169.57615662]
[101.04657745 154.57615662]
[101.04657745 139.57615662]
[83.02636719 132.67533875]
[71.63243103 118.83649445]
[57.61571884 124.17800903]
[43.59900665 129.51951599]
[29.58229446 134.86102295]
[24.62659454 149.69258118]
[11.26981163 157.82464600]
[-4.18139029 155.41749573]
[-14.43142605 143.60772705]
[-14.64054298 127.97153473]
[-4.71000099 115.89186859]
[10.67129993 113.07236481]
[24.24078178 120.84431458]
[38.25749588 115.50280762]
[52.27420807 110.16129303]
[66.29092407 104.81977844]
[66.37143707 94.64726257]
[69.45324707 84.95246887]
[75.26131439 76.60063934]
[83.27728271 70.33718109]
[78.96969604 55.96899414]
[74.66210938 41.60081100]
[59.63990402 39.13206100]
[47.22984314 30.42130280]
[39.86260986 17.24010086]
[38.95270157 2.22900343]
[44.62713242 -11.63138294]
[55.71083450 -21.61221695]
[51.40324783 -35.98040009]
[47.09566498 -50.34858322]
[42.78807831 -64.71676636]
[27.85182953 -62.96189499]
[12.83777618 -63.82752228]
[-1.79782236 -67.28734589]
[-15.61020565 -73.23622894]
[-28.17963219 -81.49338531]
[-39.12413025 -91.80789185]
[-48.11110687 -103.86631012]
[-54.86746216 -117.30218506]
[-59.18787766 -131.70722961]
[-60.94105911 -146.64367676]
[-60.07372665 -161.65762329]
[-56.61224365 -176.29283142]
[-50.66179657 -190.10453796]
[-42.40321350 -202.67303467]
[-32.08746338 -213.61636353]
[-20.02803040 -222.60197449]
[-6.59138823 -229.35679626]
[7.81414080 -233.67558289]
[22.75078773 -235.42706299]
[37.76464462 -234.55802917]
[52.39945602 -231.09489441]
[66.21049500 -225.14288330]
[78.77804565 -216.88287354]
[89.72019958 -206.56587219]
[98.70444489 -194.50543213]
[105.45775604 -181.06802368]
[109.77490234 -166.66200256]
[111.52469635 -151.72515869]
[110.65395355 -136.71139526]
[107.18915558 -122.07697296]
[101.23557281 -108.26661682]
[92.97413635 -95.69999695]
[82.65590668 -84.75901031]
[70.59443665 -75.77613831]
[57.15626144 -69.02435303]
[61.46384811 -54.65616989]
[65.77143097 -40.28798294]
[70.07901764 -25.91979980]
[84.82559967 -23.68289185]
[97.18943787 -15.23038197]
[104.68800354 -2.19456434]
[105.78756714 12.86568642]
[100.21661377 26.96715736]
[89.03029633 37.29322433]
[93.33788300 51.66141129]
[97.64546204 66.02959442]
[116.92359161 70.45132446]
[130.49211121 84.84205627]
[145.06481934 81.28729248]
[159.63752747 77.73252869]
[174.21022034 74.17777252]
[178.44166565 59.41326904]
[189.49958801 48.75410461]
[204.40948486 45.06753922]
[219.16064453 49.34523773]
[229.78509521 60.43652344]
[233.42491150 75.35789490]
[229.10099792 90.09557343]
[217.97645569 100.68521118]
[203.04376221 104.27823639]
[188.31970215 99.90814209]
[177.76498413 88.75047302]
[163.19227600 92.30523682]
[148.61958313 95.86000061]
[134.04687500 99.41475677]
[135.86569214 108.33274078]
[135.22967529 118.06204987]
[148.75386047 124.55021667]
[161.83337402 116.36914062]
[177.25927734 116.58094788]
[190.10923767 125.11804962]
[196.28286743 139.25628662]
[193.81019592 154.48420715]
[183.48022461 165.94262695]
[168.58923340 169.97520447]
[153.88887024 165.29516602]
[144.06996155 153.39590454]
[142.26570129 138.07440186]
[128.74150085 131.58624268]
[116.04657745 139.57615662]
[116.04657745 154.57615662]
[116.04657745 169.57615662]
[116.04657745 184.57615662]
[116.04657745 199.57615662]
[116.04657745 214.57615662]
[116.04657745 229.57615662]
[116.04657745 244.57615662]
[116.04657745 259.57617188]
[116.04657745 274.57617188]
[130.58647156 278.63748169]
[143.49084473 286.47198486]
[153.80212402 297.49832153]
[160.75515747 310.89822388]
[163.83395386 325.67739868]
[162.81005859 340.73907471]
[157.75946045 354.96560669]
[149.05693054 367.30126953]
[137.34826660 376.83068848]
[123.50233459 382.84671021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 36]
[23 35]
[24 34]
[25 33]
[40 97]
[41 96]
[42 95]
[48 89]
[49 88]
[50 87]
[51 86]
[99 116]
[100 115]
[101 114]
[102 113]
[118 130]
[119 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
