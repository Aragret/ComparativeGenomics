%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGAAAACGGGGGGGGGGAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUxxxxxxxxxxGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCCCCCCCCCCCACAUCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.78350067 431.28884888]
[72.22528076 422.93768311]
[62.13905716 411.72525024]
[55.15886307 398.35632324]
[51.72347641 383.67132568]
[52.04885483 368.59338379]
[56.11454010 354.07025146]
[63.66495895 341.01492310]
[74.22548676 330.24801636]
[87.13228607 322.44638062]
[101.57401276 318.10043335]
[100.95003510 303.11340332]
[100.32605743 288.12640381]
[99.70207977 273.13937378]
[99.07810211 258.15237427]
[98.45412445 243.16534424]
[97.83014679 228.17832947]
[97.20616913 213.19131470]
[96.58219147 198.20429993]
[95.95821381 183.21728516]
[95.33423615 168.23027039]
[94.71025848 153.24325562]
[94.08628082 138.25624084]
[85.13741302 137.10871887]
[76.42560577 133.83544922]
[68.46163940 128.49127197]
[61.74182510 121.25460052]
[56.71805191 112.42330170]
[53.76901627 102.40318298]
[53.17452621 91.68961334]
[38.19481277 92.46945953]
[23.21509743 93.24930573]
[8.23538303 94.02914429]
[-2.15629339 105.93665314]
[-17.92963982 106.92513275]
[-29.72660828 96.40814209]
[-30.54826927 80.62522888]
[-19.90714264 68.94010925]
[-4.11642218 68.28536224]
[7.45553827 79.04943085]
[22.43525314 78.26958466]
[37.41496658 77.48974609]
[52.39468002 76.70989990]
[56.40242004 62.25521088]
[43.96298218 53.87306595]
[31.52354050 45.49092484]
[19.08410072 37.10877991]
[4.95579767 43.30511856]
[-10.27607059 40.85690689]
[-21.75107002 30.54536438]
[-25.80757141 15.66086483]
[-21.15115929 0.95299715]
[-9.26767635 -8.88501072]
[6.05089951 -10.71388626]
[19.91646576 -3.95004153]
[27.90457344 9.24820423]
[27.46624374 24.66934013]
[39.90568542 33.05148315]
[52.34512329 41.43362808]
[64.78456116 49.81576920]
[79.31950378 46.10960770]
[86.22650146 32.79445267]
[93.13349915 19.47929764]
[94.32244110 10.35579586]
[100.32520294 5.96120071]
[107.50771332 -7.20738173]
[114.69022369 -20.37596512]
[101.61456299 -13.02564526]
[86.87752533 -10.22929764]
[72.01821899 -12.27897167]
[58.58855820 -18.96059990]
[47.99111938 -29.57635498]
[41.33269501 -43.01753998]
[39.30868912 -57.88035583]
[42.13048172 -72.61254883]
[49.50337219 -85.67549133]
[60.65733719 -95.70490265]
[74.42746735 -101.65331268]
[89.37561035 -102.89947510]
[103.94060516 -99.31324005]
[116.60127258 -91.26914978]
[126.03536224 -79.60733032]
[131.25756836 -65.54573059]
[131.72248840 -50.55293655]
[127.38024139 -36.19208527]
[138.67924500 -46.05780792]
[149.97825623 -55.92353058]
[144.24264526 -69.93714905]
[143.37052917 -85.05396271]
[147.45646667 -99.63421631]
[156.05728149 -112.09635162]
[168.24002075 -121.08856201]
[182.68316650 -125.63544464]
[197.82005310 -125.24378967]
[212.00874329 -119.95607758]
[223.71014404 -110.34587860]
[231.65498352 -97.45564270]
[234.98146057 -82.68360138]
[233.32875061 -67.63211060]
[226.87612915 -53.93385315]
[216.32351685 -43.07470703]
[202.81558228 -36.23259354]
[187.81758118 -34.14969254]
[172.95635986 -37.05194092]
[159.84397888 -44.62452698]
[148.54496765 -34.75880051]
[137.24597168 -24.89307976]
[127.85880280 -13.19345570]
[120.67630005 -0.02487279]
[113.49378967 13.14371014]
[106.44865417 26.38629532]
[99.54165649 39.70145035]
[92.63465881 53.01660538]
[103.74258423 53.27294540]
[114.32759857 56.08180618]
[123.82036591 61.21511078]
[131.72846985 68.32198334]
[137.66186523 76.95182800]
[141.35180664 86.58242798]
[142.66242981 96.65129852]
[141.59458923 106.58841705]
[138.28170776 115.84851074]
[132.97828674 123.94094086]
[126.04202271 130.45567322]
[117.91033173 135.08390808]
[109.07329559 137.63226318]
[109.69727325 152.61927795]
[110.32125092 167.60629272]
[110.94522858 182.59330750]
[111.56920624 197.58032227]
[112.19318390 212.56733704]
[112.81716156 227.55435181]
[113.44113922 242.54136658]
[114.06511688 257.52838135]
[114.68909454 272.51541138]
[115.31307220 287.50241089]
[115.93704987 302.48944092]
[116.56102753 317.47644043]
[131.31402588 320.60690308]
[144.82466125 327.30865479]
[156.24365234 337.16043091]
[164.85316467 349.54296875]
[170.11201477 363.67785645]
[171.68962097 378.67660522]
[169.48681641 393.59634399]
[163.64205933 407.49920654]
[154.52278137 419.51126099]
[142.70220947 428.87741089]
[128.92340088 435.00891113]
[114.05249786 437.52032471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[30 43]
[31 42]
[32 41]
[33 40]
[44 60]
[45 59]
[46 58]
[47 57]
[61 113]
[62 112]
[63 111]
[65 110]
[66 109]
[67 108]
[85 107]
[86 106]
[87 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
