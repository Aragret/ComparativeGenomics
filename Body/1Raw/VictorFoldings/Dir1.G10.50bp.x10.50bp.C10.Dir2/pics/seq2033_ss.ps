%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAAUUAUAACCAAGGGGGGGGGGGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACxxxxxxxxxxAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAACCCCCCCCCCAUAAAAAAUUAUAACAAA\
) } def
/len { sequence length } bind def

/coor [
[70.79405975 451.24932861]
[55.99448776 448.61889648]
[41.78865051 443.70556641]
[28.52638435 436.63037109]
[16.53428268 427.56747437]
[6.10766077 416.74008179]
[-2.49671555 404.41485596]
[-9.06695652 390.89529419]
[-13.44126320 376.51434326]
[-15.51191425 361.62612915]
[-15.22791958 346.59729004]
[-12.59627056 331.79794312]
[-7.68177605 317.59252930]
[-0.60545856 304.33084106]
[8.45842075 292.33947754]
[19.28665543 281.91375732]
[31.61259270 273.31039429]
[45.13269043 266.74127197]
[59.51400757 262.36816406]
[74.40239716 260.29873657]
[74.68455505 245.30137634]
[74.96672058 230.30403137]
[75.24887848 215.30668640]
[75.53104401 200.30934143]
[75.81320190 185.31199646]
[76.09536743 170.31465149]
[76.37753296 155.31730652]
[76.65969086 140.31996155]
[76.94185638 125.32260895]
[68.33178711 113.03983307]
[54.13731003 108.19041443]
[39.94283676 103.34099579]
[33.32428360 104.25103760]
[28.05015373 101.99323273]
[25.31159973 98.03297424]
[11.30957890 92.65306091]
[-2.69244170 87.27315521]
[-11.86933136 87.11118317]
[-16.90567780 81.65810394]
[-30.80401993 76.01575470]
[-44.70236206 70.37340546]
[-58.70438385 64.99349976]
[-72.80512238 59.87792969]
[-86.90586853 54.76236343]
[-97.44287872 65.75741577]
[-111.54346466 71.51010132]
[-126.76461792 71.02372742]
[-140.46916199 64.38256073]
[-150.28273010 52.73722076]
[-154.50503540 38.10533905]
[-152.40457153 23.02197647]
[-144.34521484 10.10041332]
[-131.72332764 1.57939100]
[-116.72571564 -1.06477249]
[-101.95081329 2.62604046]
[-89.95845795 12.01237392]
[-82.82639313 25.46798897]
[-81.79029846 40.66162109]
[-67.68955994 45.77718735]
[-53.58881378 50.89275742]
[-48.92470932 49.69715118]
[-43.46173859 51.44931030]
[-39.06001663 56.47506714]
[-25.16167259 62.11741257]
[-11.26333046 67.75975800]
[2.68746805 73.27113342]
[16.68948746 78.65103912]
[30.69150925 84.03095245]
[44.79225159 89.14652252]
[58.98672867 93.99593353]
[73.18120575 98.84535217]
[80.91442871 83.86019135]
[95.17735291 77.36152649]
[109.24556732 80.81359100]
[120.09863281 70.45931244]
[130.95169067 60.10503769]
[121.80031586 48.20190811]
[113.96603394 35.39346695]
[107.53761292 21.82484436]
[102.58789062 7.64978361]
[99.17295837 -6.97110176]
[97.33149719 -21.87214661]
[97.08437347 -36.88451004]
[98.43439484 -51.83808899]
[101.36626434 -66.56344604]
[105.84676361 -80.89373779]
[111.82511139 -94.66658783]
[119.23358154 -107.72594452]
[127.98822784 -119.92382050]
[137.98985291 -131.12202454]
[149.12512207 -141.19364929]
[161.26788330 -150.02459717]
[174.28051758 -157.51480103]
[188.01562500 -163.57937622]
[202.31755066 -168.14962769]
[217.02423096 -171.17376709]
[231.96905518 -172.61750793]
[246.98266602 -172.46450806]
[261.89495850 -170.71650696]
[276.53698730 -167.39329529]
[290.74279785 -162.53254700]
[304.35144043 -156.18931580]
[317.20874023 -148.43550110]
[329.16903687 -139.35893250]
[340.09674072 -129.06246948]
[349.86807251 -117.66277313]
[358.37231445 -105.28901672]
[365.51312256 -92.08139801]
[371.20956421 -78.18957520]
[375.39709473 -63.77095413]
[378.02825928 -48.98890305]
[379.07327271 -34.01091766]
[378.52026367 -19.00670815]
[376.37551880 -4.14628506]
[372.66333008 10.40197182]
[367.42578125 24.47321892]
[360.72216797 37.90802002]
[352.62850952 50.55414963]
[343.23645020 62.26831055]
[332.65246582 72.91777802]
[320.99645996 82.38188934]
[308.40048218 90.55339813]
[295.00726318 97.33972931]
[280.96859741 102.66397095]
[266.44351196 106.46580505]
[251.59660339 108.70215607]
[236.59608459 109.34768677]
[221.61193848 108.39506531]
[206.81394958 105.85511017]
[192.36976624 101.75658417]
[178.44308472 96.14592743]
[165.19168091 89.08672333]
[152.76570129 80.65894318]
[141.30596924 70.95809937]
[130.45291138 81.31237793]
[119.59984589 91.66665649]
[121.68502045 108.09432220]
[110.96811676 122.46002197]
[91.93920135 125.60477448]
[91.65703583 140.60212708]
[91.37487793 155.59947205]
[91.09271240 170.59681702]
[90.81055450 185.59416199]
[90.52838898 200.59150696]
[90.24622345 215.58885193]
[89.96406555 230.58619690]
[89.68190002 245.58354187]
[89.39974213 260.58090210]
[104.19974518 263.20886230]
[118.40639496 268.11984253]
[131.66983032 275.19287109]
[143.66342163 284.25378418]
[154.09182739 295.07943726]
[162.69824219 307.40325928]
[169.27070618 320.92172241]
[173.64739990 335.30197144]
[175.72050476 350.18984985]
[175.43898010 365.21871948]
[172.80978394 380.01849365]
[167.89762878 394.22473145]
[160.82350159 407.48760986]
[151.76159668 419.48043823]
[140.93508911 429.90795898]
[128.61056519 438.51336670]
[115.09155273 445.08471680]
[100.71096039 449.46020508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 148]
[21 147]
[22 146]
[23 145]
[24 144]
[25 143]
[26 142]
[27 141]
[28 140]
[29 139]
[30 71]
[31 70]
[32 69]
[35 68]
[36 67]
[37 66]
[39 65]
[40 64]
[41 63]
[42 60]
[43 59]
[44 58]
[74 136]
[75 135]
[76 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
