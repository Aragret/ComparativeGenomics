%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUACCAUGGGGGGGGGGCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGxxxxxxxxxxUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCCCCCCCCCCCUACCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 453.89578247]
[71.19830322 447.87976074]
[59.48964310 438.35034180]
[50.78712082 426.01467896]
[45.73651886 411.78814697]
[44.71262741 396.72647095]
[47.79142761 381.94732666]
[54.74444962 368.54739380]
[65.05573273 357.52105713]
[77.96011353 349.68655396]
[92.50000000 345.62524414]
[92.50000000 330.62524414]
[92.50000000 315.62524414]
[92.50000000 300.62524414]
[92.50000000 285.62524414]
[92.50000000 270.62524414]
[92.50000000 255.62522888]
[92.50000000 240.62522888]
[92.50000000 225.62522888]
[92.50000000 210.62522888]
[84.76270294 197.89796448]
[92.50000000 184.09779358]
[92.50000000 169.09779358]
[92.50000000 154.09779358]
[77.60203552 149.81117249]
[64.50865936 141.51127625]
[54.27481079 129.86683655]
[47.72501755 115.81604767]
[32.90726089 118.14715576]
[18.08950233 120.47825623]
[3.27174473 122.80936432]
[-11.54601383 125.14046478]
[-26.25306511 133.57485962]
[-38.42915344 121.77743530]
[-30.46345520 106.81134033]
[-13.87711716 110.32270813]
[0.94064075 107.99160767]
[15.75839901 105.66049957]
[30.57615662 103.32939911]
[45.39391327 100.99829102]
[46.44810486 89.27545929]
[49.98949814 78.05072021]
[37.21214294 70.19329071]
[24.43478394 62.33586884]
[11.65742683 54.47844315]
[-1.11993039 46.62101746]
[-14.97824574 53.39970779]
[-30.29877090 51.58723831]
[-42.19278336 41.76196289]
[-46.86494446 27.05909157]
[-42.82438660 12.17025566]
[-31.36043930 1.84642923]
[-16.13120079 -0.61809266]
[-1.99626982 5.56311035]
[6.53394985 18.41763878]
[6.73749542 33.84365845]
[19.51485252 41.70108414]
[32.29220963 49.55850983]
[45.06956863 57.41593552]
[57.84692383 65.27336121]
[63.12396240 59.71378708]
[69.12738800 54.94777679]
[75.73894501 51.06921005]
[82.82839966 48.15448761]
[90.25610352 46.26102448]
[89.63212585 31.27400780]
[89.00814819 16.28699112]
[88.38417053 1.29997480]
[74.34867859 -4.69732428]
[64.31172943 -16.19612694]
[60.26617432 -30.91333580]
[63.01525879 -45.92683792]
[72.01315308 -58.25569534]
[85.47331238 -65.45200348]
[100.72322083 -66.08692169]
[114.73499298 -60.03439713]
[124.72657776 -48.49616241]
[128.71414185 -33.76313400]
[125.90596008 -18.76057243]
[116.85958862 -6.46724606]
[103.37119293 0.67599750]
[103.99516296 15.66301346]
[104.61914062 30.65003014]
[105.24311829 45.63704681]
[128.60899353 53.47746277]
[146.14880371 70.79196167]
[159.80503845 64.58654785]
[169.16806030 51.83334351]
[183.95605469 53.61231232]
[197.61228943 47.40690613]
[211.26852417 41.20149612]
[213.73811340 37.45147324]
[216.96540833 34.97042465]
[220.44467163 33.84054184]
[223.69706726 33.96656799]
[226.32774353 35.10097885]
[240.45254517 30.05222321]
[254.57734680 25.00346565]
[255.68534851 9.81491089]
[262.88104248 -3.60678935]
[274.91769409 -12.93624496]
[289.70989990 -16.55706978]
[304.69482422 -13.84193611]
[317.27624512 -5.26125526]
[325.27432251 7.69831657]
[327.30337524 22.79145622]
[323.01184082 37.40318298]
[313.14324951 49.00193405]
[299.40740967 55.57814789]
[284.18414307 55.99245834]
[270.11093140 50.17308426]
[259.62609863 39.12826920]
[245.50129700 44.17702484]
[231.37649536 49.22578049]
[217.47393799 54.85773849]
[203.81770325 61.06314468]
[190.16145325 67.26855469]
[181.77522278 79.57791138]
[166.01043701 78.24279022]
[152.35420227 84.44819641]
[154.56524658 97.66434479]
[153.49165344 111.02108765]
[149.19804382 123.71440125]
[141.94290161 134.98019409]
[132.16294861 144.14030457]
[120.44688416 150.64332581]
[107.50000000 154.09779358]
[107.50000000 169.09779358]
[107.50000000 184.09779358]
[115.23729706 197.89796448]
[107.50000000 210.62522888]
[107.50000000 225.62522888]
[107.50000000 240.62522888]
[107.50000000 255.62522888]
[107.50000000 270.62524414]
[107.50000000 285.62524414]
[107.50000000 300.62524414]
[107.50000000 315.62524414]
[107.50000000 330.62524414]
[107.50000000 345.62524414]
[122.03988647 349.68655396]
[134.94427490 357.52105713]
[145.25555420 368.54739380]
[152.20857239 381.94732666]
[155.28736877 396.72647095]
[154.26348877 411.78814697]
[149.21287537 426.01467896]
[140.51036072 438.35034180]
[128.80169678 447.87976074]
[114.95575714 453.89578247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[65 84]
[66 83]
[67 82]
[68 81]
[86 120]
[87 119]
[89 117]
[90 116]
[91 115]
[96 114]
[97 113]
[98 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
