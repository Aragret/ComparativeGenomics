%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAACCUGCGGGGGGGGGGAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCxxxxxxxxxxACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCCCCCCCCCCCAAAACCUGC\
) } def
/len { sequence length } bind def

/coor [
[84.30033112 372.38452148]
[71.08013153 365.11203003]
[60.19332886 354.66503906]
[52.38219833 341.75579834]
[48.17931747 327.26446533]
[47.87124634 312.17913818]
[51.47898483 297.52832031]
[58.75656128 284.31091309]
[69.20776367 273.42816162]
[82.12002563 265.62200928]
[96.61296844 261.42471313]
[96.30091095 246.42796326]
[95.98885345 231.43121338]
[95.67679596 216.43446350]
[95.36473846 201.43771362]
[95.05268097 186.44094849]
[94.74063110 171.44419861]
[94.42857361 156.44744873]
[94.11651611 141.45069885]
[93.80445862 126.45394135]
[80.71130371 119.13483429]
[67.77324677 126.72473907]
[54.83519363 134.31465149]
[44.23276520 147.54434204]
[28.58504677 141.01861572]
[30.52403450 124.17590332]
[47.24528503 121.37659454]
[60.18334198 113.78668213]
[73.12139893 106.19677734]
[80.30874634 88.01091766]
[95.40983582 82.05353546]
[97.89495850 67.26082611]
[100.38007355 52.46812057]
[99.75609589 37.48110199]
[96.04993439 22.94616699]
[92.34377289 8.41123104]
[88.63761902 -6.12370491]
[77.93523407 -13.39783192]
[75.17292786 -25.62847519]
[81.30522156 -36.10236359]
[77.90224457 -50.71125412]
[74.49926758 -65.32015228]
[70.26586151 -68.84698486]
[67.92265320 -73.37015533]
[67.56358337 -78.03618622]
[57.12377167 -88.80699921]
[46.68395996 -99.57780457]
[36.24414825 -110.34860992]
[25.80433464 -121.11942291]
[15.36452293 -131.89022827]
[4.92470980 -142.66104126]
[-9.73889732 -138.27500916]
[-24.75893974 -141.21728516]
[-36.68391800 -150.81173706]
[-42.77356339 -164.85362244]
[-41.62851715 -180.11624146]
[-33.51190186 -193.09234619]
[-20.28886032 -200.80010986]
[-4.99794626 -201.46836853]
[8.84709740 -194.94354248]
[18.06478119 -182.72499084]
[20.53695107 -167.62046814]
[15.69551849 -153.10084534]
[26.13533020 -142.33004761]
[36.57514191 -131.55923462]
[47.01495743 -120.78842926]
[57.45476913 -110.01761627]
[67.89457703 -99.24681091]
[78.33439636 -88.47599792]
[74.74700165 -103.04070282]
[74.21437836 -118.03124237]
[76.75904846 -132.81382751]
[82.27342224 -146.76344299]
[90.52435303 -159.29029846]
[101.16299438 -169.86476135]
[113.73954010 -178.03974915]
[127.72225952 -183.46963501]
[142.51995850 -185.92481995]
[157.50700378 -185.30151367]
[172.04974365 -181.62606812]
[185.53329468 -175.05387878]
[197.38760376 -165.86280823]
[207.11143494 -154.44148254]
[214.29370117 -141.27276611]
[218.63072205 -126.91343689]
[219.93911743 -111.97060394]
[218.16358948 -97.07605743]
[213.37919617 -82.85953522]
[205.78822327 -69.92210388]
[195.71160889 -58.81076050]
[183.57540894 -49.99529266]
[169.89273071 -43.84841156]
[155.24206543 -40.63001251]
[140.24284363 -40.47616577]
[125.52925873 -43.39337540]
[111.72336578 -49.25830460]
[99.40888977 -57.82298660]
[89.10815430 -68.72312927]
[92.51113129 -54.11423492]
[95.91411591 -39.50534058]
[108.58171844 -27.40031624]
[103.17255402 -9.82986641]
[106.87871552 4.70507002]
[110.58487701 19.24000549]
[114.29103851 33.77494431]
[119.29256439 29.79676437]
[125.13839722 26.88274002]
[131.65324402 25.16195679]
[146.64595032 24.69391632]
[161.63864136 24.22587395]
[175.28533936 15.13192749]
[189.86228943 22.64487267]
[190.37399292 39.03603363]
[176.29403687 47.44359207]
[162.10668945 39.21857071]
[147.11398315 39.68661118]
[132.12129211 40.15465546]
[147.11094666 40.71166229]
[159.19761658 49.59492111]
[164.20448303 63.73462677]
[160.40132141 78.24448395]
[149.10238647 88.11028290]
[134.21228027 89.92267609]
[120.87661743 83.05535889]
[113.70383453 69.88147736]
[115.17278290 54.95323944]
[112.68766785 69.74594879]
[110.20254517 84.53865051]
[122.86157990 102.97181702]
[108.80121613 126.14188385]
[109.11326599 141.13864136]
[109.42532349 156.13539124]
[109.73738098 171.13214111]
[110.04943848 186.12889099]
[110.36149597 201.12565613]
[110.67355347 216.12240601]
[110.98560333 231.11915588]
[111.29766083 246.11590576]
[111.60971832 261.11267090]
[126.26470947 264.70343018]
[139.49052429 271.96569824]
[150.38539124 282.40429688]
[158.20648193 295.30749512]
[162.42056274 309.79556274]
[162.74028015 324.88064575]
[159.14384460 339.53427124]
[151.87648010 352.75726318]
[141.43368530 363.64810181]
[128.52745056 371.46423340]
[114.03776550 375.67269897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 29]
[22 28]
[23 27]
[31 128]
[32 127]
[33 126]
[34 105]
[35 104]
[36 103]
[37 102]
[40 100]
[41 99]
[42 98]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
