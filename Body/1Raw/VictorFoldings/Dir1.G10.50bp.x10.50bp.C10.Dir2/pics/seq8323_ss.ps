%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCACCACCCGGGGGGGGGGAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACxxxxxxxxxxUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAACCCCCCCCCCUAAUCAACACCC\
) } def
/len { sequence length } bind def

/coor [
[64.20274353 398.76031494]
[50.04214096 393.60531616]
[37.45239639 385.32312012]
[27.11245918 374.36032104]
[19.57994843 361.30819702]
[15.26108265 346.87060547]
[14.38877392 331.82614136]
[17.01006508 316.98614502]
[22.98359108 303.15090942]
[31.98720932 291.06655884]
[43.53536606 281.38479614]
[57.00528336 274.62771606]
[71.67053986 271.15972900]
[71.67053986 256.15972900]
[71.67053986 241.15974426]
[71.67053986 226.15974426]
[71.67053986 211.15974426]
[71.67053986 196.15974426]
[71.67053986 181.15974426]
[71.67053986 166.15974426]
[71.67053986 151.15974426]
[71.67053986 136.15974426]
[65.73972321 131.56893921]
[60.67278290 145.68724060]
[45.67972946 145.23089600]
[41.48080444 130.83058167]
[53.87808990 122.38735199]
[47.94726944 117.79656219]
[33.42611313 121.55635071]
[18.90495682 125.31613922]
[7.59722042 137.19329834]
[-8.27681446 133.07662964]
[-12.38730240 117.20098877]
[-0.50572538 105.89788055]
[15.14516926 110.79498291]
[29.66632652 107.03519440]
[44.18748093 103.27540588]
[50.92953110 89.87596893]
[45.29477310 75.97454834]
[31.13533974 75.60868073]
[18.22839355 69.88094330]
[8.51687431 59.68981552]
[3.44881964 46.60288620]
[3.76152301 32.61577988]
[9.37445641 19.84786415]
[19.40649986 10.22111130]
[14.05464077 -3.79165483]
[8.70278168 -17.80442047]
[3.35092235 -31.81718636]
[-2.00093651 -45.82995224]
[-7.35279560 -59.84271622]
[-12.70465469 -73.85548401]
[-27.50459480 -71.15799713]
[-42.54819870 -71.22616577]
[-57.32308578 -74.05766296]
[-71.32602692 -79.55604553]
[-84.08009338 -87.53404236]
[-95.15087891 -97.71993256]
[-104.16132355 -109.76677704]
[-110.80453491 -123.26427460]
[-114.85424042 -137.75270081]
[-116.17250824 -152.73858643]
[-114.71445465 -167.71151733]
[-110.52971649 -182.16152954]
[-103.76084137 -195.59645081]
[-94.63837433 -207.55868530]
[-83.47301483 -217.64082336]
[-70.64505768 -225.49945068]
[-56.59141541 -230.86692810]
[-41.79074860 -233.56040955]
[-26.74716377 -233.48818970]
[-11.97303963 -230.65272522]
[2.02842116 -225.15055847]
[14.78033543 -217.16912842]
[25.84837723 -206.98025513]
[34.85557556 -194.93098450]
[41.49514389 -181.43168640]
[45.54094315 -166.94216919]
[46.85517502 -151.95593262]
[45.39308167 -136.98339844]
[41.20445251 -122.53451538]
[34.43195724 -109.10142517]
[25.30626297 -97.14163971]
[14.13818836 -87.06251526]
[1.30811155 -79.20734406]
[6.65997028 -65.19458008]
[12.01182938 -51.18181229]
[17.36368752 -37.16904449]
[22.71554756 -23.15627861]
[28.06740570 -9.14351368]
[33.41926575 4.86925220]
[49.33892059 5.89453125]
[63.27533722 13.77608204]
[72.42422485 26.98604774]
[74.91941833 42.91868210]
[70.21334839 58.40428543]
[59.19619751 70.33979034]
[64.83095551 84.24121857]
[101.32068634 67.60408783]
[124.80335999 91.23247528]
[139.78410339 90.47274017]
[154.76484680 89.71300507]
[169.74560547 88.95326233]
[184.70787048 87.89006805]
[199.64552307 86.52384949]
[214.58317566 85.15763855]
[229.45318604 83.18718719]
[244.23114014 80.61573792]
[259.00909424 78.04428864]
[269.37939453 65.80352783]
[285.41046143 66.42337799]
[294.80462646 79.42834473]
[290.35549927 94.84213257]
[275.47604370 100.84059143]
[261.58053589 92.82223511]
[246.80258179 95.39367676]
[232.02464294 97.96512604]
[230.29585266 100.24250793]
[227.53436279 101.95111847]
[223.96009827 102.68405151]
[219.93960571 102.12453461]
[215.94940186 100.09529114]
[201.01174927 101.46150208]
[186.07409668 102.82772064]
[182.35247803 105.90558624]
[176.64219666 106.63925934]
[170.50534058 103.93401337]
[155.52459717 104.69374847]
[140.54383850 105.45349121]
[125.56309509 106.21322632]
[121.16293335 121.80223846]
[107.13909912 133.71372986]
[86.67053986 136.15974426]
[86.67053986 151.15974426]
[86.67053986 166.15974426]
[86.67053986 181.15974426]
[86.67053986 196.15974426]
[86.67053986 211.15974426]
[86.67053986 226.15974426]
[86.67053986 241.15974426]
[86.67053986 256.15972900]
[86.67053986 271.15972900]
[101.33580017 274.62771606]
[114.80571747 281.38479614]
[126.35387421 291.06655884]
[135.35749817 303.15090942]
[141.33102417 316.98614502]
[143.95231628 331.82614136]
[143.08000183 346.87060547]
[138.76113892 361.30819702]
[131.22862244 374.36032104]
[120.88868713 385.32312012]
[108.29894257 393.60531616]
[94.13833618 398.76031494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[28 37]
[29 36]
[30 35]
[38 98]
[39 97]
[46 91]
[47 90]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[100 130]
[101 129]
[102 128]
[103 127]
[104 124]
[105 123]
[106 122]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
