%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCAAAAACGGGGGGGGGGAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGxxxxxxxxxxCCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGACCCCCCCCCCAAACCCCACAAAC\
) } def
/len { sequence length } bind def

/coor [
[60.89867783 581.07995605]
[46.62691116 576.27056885]
[33.72292709 568.50512695]
[22.79027176 558.14703369]
[14.34028530 545.68060303]
[8.76818943 531.68896484]
[6.33459997 516.82653809]
[7.15334129 501.78845215]
[11.18611813 487.27807617]
[18.24431229 473.97409058]
[27.99779701 462.49874878]
[39.99038315 453.38876343]
[53.66115952 447.07022095]
[68.37071991 443.83865356]
[68.37071991 428.83865356]
[68.37071991 413.83865356]
[68.37071991 398.83865356]
[68.37071991 383.83865356]
[68.37071991 368.83865356]
[68.37071991 353.83865356]
[68.37071991 338.83865356]
[68.37071991 323.83865356]
[68.37071991 308.83865356]
[57.91075516 304.91915894]
[49.13626862 297.96362305]
[42.90334702 288.62979126]
[39.82649994 277.80838013]
[40.21810913 266.53814697]
[44.05679703 255.90614319]
[50.98790741 246.94293213]
[60.35621262 240.52261353]
[71.26782990 237.27766418]
[72.46715546 222.32569885]
[73.66648102 207.37371826]
[60.56747818 214.68234253]
[46.60981369 209.18838501]
[42.00699615 194.91203308]
[50.12713623 182.30000305]
[65.02832794 180.58113098]
[75.80654144 191.01295471]
[78.49333191 176.25553894]
[81.18012238 161.49813843]
[83.86691284 146.74072266]
[86.55370331 131.98330688]
[75.62658691 124.69152832]
[68.19373322 113.85987854]
[65.32073975 101.04122162]
[67.41950989 88.07328796]
[74.18913269 76.81521606]
[84.65911102 68.88100433]
[81.09179688 54.31136703]
[77.52448273 39.74172974]
[73.95716858 25.17209625]
[51.45365143 14.46729565]
[48.21700668 -13.81067371]
[39.25516891 -25.83920288]
[30.29333115 -37.86772919]
[21.33149529 -49.89625931]
[5.81773901 -49.57531357]
[-6.90254784 -58.46203995]
[-11.93815517 -73.13931274]
[-7.35279083 -87.96341705]
[5.09038067 -97.23418427]
[20.60670471 -97.38681030]
[33.22983932 -88.36261749]
[38.10593033 -73.63158417]
[33.36002350 -58.85809326]
[42.32186127 -46.82956696]
[51.28369522 -34.80104065]
[60.24553299 -22.77251053]
[74.52981567 -27.35063744]
[74.82994843 -42.34763336]
[75.13008118 -57.34463120]
[61.69211197 -64.67126465]
[53.20788193 -77.41004181]
[51.62701416 -92.63368988]
[57.31277084 -106.84391785]
[68.95861053 -116.77532959]
[83.88841248 -120.14575958]
[98.67140198 -116.18069458]
[109.91056824 -105.79129028]
[115.02323151 -91.36495209]
[112.83453369 -76.21674347]
[103.84742737 -63.82761383]
[90.12707520 -57.04449844]
[89.82694244 -42.04750061]
[89.52681732 -27.05050468]
[98.86354065 -17.88967514]
[103.28149414 -6.24782944]
[102.45320892 5.54711151]
[97.04975128 15.35350513]
[88.52680206 21.60478210]
[92.09411621 36.17441940]
[95.66143036 50.74405289]
[99.22874451 65.31369019]
[110.67485809 66.98814392]
[120.93426514 72.33248138]
[128.86643982 80.75257111]
[138.93249512 68.54662323]
[153.59690857 71.15518951]
[167.58079529 65.72834015]
[181.56468201 60.30148315]
[182.71192932 45.08154297]
[190.35668945 31.87092209]
[202.98107910 23.29260063]
[218.07852173 21.04980850]
[232.65139771 25.58785439]
[243.80627441 36.00570679]
[249.32832336 50.23489380]
[248.12113953 65.45019531]
[240.42442322 78.63060760]
[227.76635742 87.15914917]
[212.66020203 89.34246826]
[198.10530090 84.74707031]
[186.99154663 74.28536987]
[173.00764465 79.71222687]
[159.02375793 85.13908386]
[149.95791626 96.95686340]
[134.29328918 94.73645782]
[131.82676697 113.81275940]
[119.57771301 128.64346313]
[101.31111908 134.67010498]
[98.62432861 149.42750549]
[95.93753815 164.18492126]
[93.25074005 178.94233704]
[90.56394958 193.69973755]
[88.61846161 208.57304382]
[87.41913605 223.52502441]
[86.21980286 238.47698975]
[102.46924591 248.62295532]
[111.33722687 265.51220703]
[110.47059631 284.48730469]
[100.18807983 300.36196899]
[83.37071991 308.83865356]
[83.37071991 323.83865356]
[83.37071991 338.83865356]
[83.37071991 353.83865356]
[83.37071991 368.83865356]
[83.37071991 383.83865356]
[83.37071991 398.83865356]
[83.37071991 413.83865356]
[83.37071991 428.83865356]
[83.37071991 443.83865356]
[98.08027649 447.07022095]
[111.75105286 453.38876343]
[123.74363708 462.49874878]
[133.49713135 473.97409058]
[140.55531311 487.27807617]
[144.58808899 501.78845215]
[145.40682983 516.82653809]
[142.97325134 531.68896484]
[137.40115356 545.68060303]
[128.95117188 558.14703369]
[118.01850891 568.50512695]
[105.11452484 576.27056885]
[90.84275818 581.07995605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[32 129]
[33 128]
[34 127]
[40 126]
[41 125]
[42 124]
[43 123]
[44 122]
[50 95]
[51 94]
[52 93]
[53 92]
[55 70]
[56 69]
[57 68]
[58 67]
[71 87]
[72 86]
[73 85]
[98 119]
[100 117]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
