%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAUUAACCGGGGGGGGGGCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAxxxxxxxxxxCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCACCCCCCCCCCACCAUUAACC\
) } def
/len { sequence length } bind def

/coor [
[84.77655792 625.23077393]
[70.93061829 619.21472168]
[59.22195435 609.68530273]
[50.51942825 597.34967041]
[45.46882629 583.12310791]
[44.44493484 568.06146240]
[47.52373505 553.28228760]
[54.47675705 539.88232422]
[64.78804016 528.85601807]
[77.69242096 521.02148438]
[92.23230743 516.96020508]
[92.23230743 501.96020508]
[92.23230743 486.96020508]
[92.23230743 471.96020508]
[92.23230743 456.96020508]
[92.23230743 441.96020508]
[92.23230743 426.96020508]
[92.23230743 411.96020508]
[92.23230743 396.96020508]
[92.23230743 381.96020508]
[77.31249237 377.29129028]
[64.54399872 368.23745728]
[55.17851257 355.67160034]
[50.13863373 340.81152344]
[49.92701721 325.10211182]
[54.57624817 310.07464600]
[63.64451599 297.19763184]
[76.25755310 287.73333740]
[91.19293213 282.61395264]
[90.88087463 267.61718750]
[90.56881714 252.62043762]
[82.03879547 243.98643494]
[81.69354248 231.45248413]
[90.26683044 221.75956726]
[81.91826630 212.94998169]
[81.83384705 200.41156006]
[90.60692596 190.89910889]
[90.91898346 175.90234375]
[91.23104095 160.90559387]
[91.54309082 145.90884399]
[91.85514832 130.91209412]
[75.83668518 120.92916107]
[68.24195099 103.64997864]
[71.71861267 85.09835815]
[85.05464172 71.74169159]
[81.34848022 57.20675278]
[77.64231873 42.67181778]
[73.93615723 28.13688278]
[58.99605942 29.74132156]
[43.97969437 29.20314789]
[29.19278336 26.53331757]
[14.93636513 21.78618622]
[1.50068021 15.05839634]
[-10.84073639 6.48691988]
[-21.83662796 -3.75373983]
[-31.26313400 -15.45509624]
[-38.92834473 -28.37892532]
[-44.67620087 -42.26211166]
[-48.38968658 -56.82201385]
[-49.99320221 -71.76221466]
[-49.45410156 -86.77854156]
[-46.78335571 -101.56528473]
[-42.03533936 -115.82141113]
[-35.30672073 -129.25668335]
[-26.73447990 -141.59756470]
[-16.49313927 -152.59281921]
[-4.79119921 -162.01861572]
[8.13310337 -169.68301392]
[22.01664734 -175.43000793]
[36.57677841 -179.14260864]
[51.51707458 -180.74519348]
[66.53337097 -180.20515442]
[81.31995392 -177.53349304]
[95.57578278 -172.78460693]
[109.01063538 -166.05514526]
[121.35099030 -157.48214722]
[132.34561157 -147.24012756]
[141.77067566 -135.53759766]
[149.43428040 -122.61282349]
[155.18041992 -108.72892761]
[158.89210510 -94.16856384]
[160.49377441 -79.22816467]
[159.95280457 -64.21190643]
[157.28024292 -49.42549133]
[152.53045654 -35.16995239]
[145.80017090 -21.73551750]
[137.22640991 -9.39569283]
[126.98370361 1.59829831]
[115.28060150 11.02263165]
[102.35534668 18.68544197]
[88.47109222 24.43072128]
[92.17725372 38.96565628]
[95.88341522 53.50059509]
[99.58957672 68.03553009]
[104.69743347 68.37991333]
[109.68481445 69.53526306]
[114.42380524 71.47194672]
[118.79286194 74.14029694]
[122.67993927 77.47187805]
[125.98533630 81.38124084]
[139.88789368 75.74929047]
[147.44166565 61.59584045]
[163.24255371 58.81889343]
[175.16946411 69.54867554]
[174.07310486 85.55422211]
[160.79449463 94.55744934]
[145.51985168 89.65184021]
[131.61729431 95.28379822]
[129.99736023 111.04779816]
[121.00567627 124.09683228]
[106.85190582 131.22415161]
[106.53984833 146.22090149]
[106.22779083 161.21765137]
[105.91573334 176.21440125]
[105.60367584 191.21116638]
[114.85793304 207.09632874]
[105.26683044 221.75956726]
[114.84955597 237.44877625]
[105.56557465 252.30838013]
[105.87762451 267.30511475]
[106.18968201 282.30187988]
[120.07745361 286.21972656]
[132.27983093 293.89184570]
[141.80809021 304.68594360]
[147.89317322 317.71716309]
[150.04777527 331.92071533]
[148.10539246 346.13870239]
[142.23309326 359.21475220]
[132.91722107 370.08789062]
[120.92312622 377.87863159]
[107.23230743 381.96020508]
[107.23230743 396.96020508]
[107.23230743 411.96020508]
[107.23230743 426.96020508]
[107.23230743 441.96020508]
[107.23230743 456.96020508]
[107.23230743 471.96020508]
[107.23230743 486.96020508]
[107.23230743 501.96020508]
[107.23230743 516.96020508]
[121.77219391 521.02148438]
[134.67657471 528.85601807]
[144.98785400 539.88232422]
[151.94088745 553.28228760]
[155.01968384 568.06146240]
[153.99578857 583.12310791]
[148.94519043 597.34967041]
[140.24266052 609.68530273]
[128.53399658 619.21472168]
[114.68806458 625.23077393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 121]
[30 120]
[31 119]
[34 117]
[37 115]
[38 114]
[39 113]
[40 112]
[41 111]
[45 94]
[46 93]
[47 92]
[48 91]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
