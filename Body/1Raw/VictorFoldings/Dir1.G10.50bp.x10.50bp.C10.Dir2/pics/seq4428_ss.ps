%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUCUCCAGGGGGGGGGGUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGxxxxxxxxxxCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUCCCCCCCCCCUAGGUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[83.98458099 563.11505127]
[70.13864899 557.09906006]
[58.42998505 547.56964111]
[49.72745895 535.23394775]
[44.67685699 521.00744629]
[43.65296555 505.94573975]
[46.73176575 491.16659546]
[53.68478775 477.76666260]
[63.99607086 466.74032593]
[76.90045166 458.90582275]
[91.44033813 454.84451294]
[91.44033813 439.84451294]
[91.44033813 424.84451294]
[91.44033813 409.84451294]
[91.44033813 394.84451294]
[91.44033813 379.84451294]
[91.44033813 364.84451294]
[91.44033813 349.84451294]
[91.44033813 334.84451294]
[91.44033813 319.84451294]
[77.08832550 317.13253784]
[63.48020935 311.81509399]
[51.08473587 304.07369995]
[40.32917786 294.17343140]
[31.58460808 282.45376587]
[25.15310287 269.31698608]
[21.25730896 255.21440125]
[20.03273010 240.63079834]
[21.52301979 226.06779480]
[25.67841911 212.02659607]
[32.35743332 198.99069214]
[41.33162308 187.40928650]
[52.29344559 177.68177795]
[64.86677551 170.14396667]
[78.61981201 165.05650330]
[93.07992554 162.59584045]
[93.39197540 147.59909058]
[85.92112732 134.71360779]
[93.94384766 121.07739258]
[94.25590515 106.08063507]
[79.59370422 110.19825745]
[62.97714233 104.20374298]
[50.36601257 96.08220673]
[37.75488663 87.96066284]
[25.28029060 96.64702606]
[10.43007278 99.89347839]
[-4.53121996 97.20495605]
[-17.32209778 88.99143982]
[-25.99204636 76.50543213]
[-29.21896172 61.65095139]
[-26.51075935 46.69321060]
[-18.28042412 33.91314697]
[-5.78301954 25.25963020]
[9.07568836 22.05225945]
[24.02985573 24.78013611]
[36.79907990 33.02727509]
[45.43614960 45.53605270]
[48.62397385 60.39896774]
[45.87642670 75.34953308]
[58.48755646 83.47107697]
[71.09868622 91.59262085]
[78.38503265 89.81523895]
[82.59284210 75.41751862]
[92.95774078 86.26047516]
[100.24408722 84.48309326]
[107.69899750 71.46678162]
[109.26644135 62.40063858]
[115.44681549 58.25955582]
[123.17089844 45.40114975]
[130.89498901 32.54274750]
[117.61078644 39.50910568]
[102.91791534 42.52896500]
[87.96302032 41.36665726]
[73.91317749 36.11288834]
[61.86486816 27.17766762]
[52.75834274 15.25830555]
[47.30428314 1.28500199]
[45.92832947 -13.65175629]
[48.73786163 -28.38629150]
[55.51362228 -41.76870728]
[65.72682190 -52.75463104]
[78.58042145 -60.48670959]
[93.07131195 -64.36152649]
[108.06860352 -64.07668304]
[122.40190887 -59.65441132]
[134.95263672 -51.43983459]
[144.74130249 -40.07401657]
[151.00402832 -26.44396400]
[153.25202942 -11.61337090]
[151.30989075 3.26036716]
[145.32774353 17.01880074]
[157.59011841 8.37968540]
[169.85249329 -0.25943097]
[182.11485291 -8.89854717]
[194.37722778 -17.53766251]
[196.82933044 -33.15056610]
[209.65223694 -42.38899231]
[225.23834229 -39.77194977]
[234.34068298 -26.85208130]
[231.55900574 -11.29451847]
[218.54362488 -2.32928467]
[203.01634216 -5.27529526]
[190.75396729 3.36382103]
[178.49160767 12.00293732]
[166.22923279 20.64205360]
[153.96687317 29.28116989]
[143.75338745 40.26683426]
[136.02929688 53.12523651]
[128.30522156 65.98364258]
[120.71530914 78.92169189]
[113.26039886 91.93800354]
[109.25265503 106.39269257]
[108.94060516 121.38945007]
[116.38912964 135.34759521]
[108.38873291 147.91114807]
[108.07667542 162.90789795]
[123.14587402 166.19848633]
[137.28540039 172.34986877]
[149.95803833 181.12638855]
[160.68267822 192.19264221]
[169.05259705 205.12638855]
[174.75086975 219.43457031]
[177.56237793 234.57217407]
[177.38194275 249.96295166]
[174.21821594 265.02142334]
[168.19331360 279.17501831]
[159.53811646 291.88598633]
[148.58340454 302.67175293]
[135.74720764 311.12326050]
[121.51884460 316.92047119]
[106.44033813 319.84451294]
[106.44033813 334.84451294]
[106.44033813 349.84451294]
[106.44033813 364.84451294]
[106.44033813 379.84451294]
[106.44033813 394.84451294]
[106.44033813 409.84451294]
[106.44033813 424.84451294]
[106.44033813 439.84451294]
[106.44033813 454.84451294]
[120.98022461 458.90582275]
[133.88461304 466.74032593]
[144.19589233 477.76666260]
[151.14891052 491.16659546]
[154.22770691 505.94573975]
[153.20382690 521.00744629]
[148.15321350 535.23394775]
[139.45069885 547.56964111]
[127.74203491 557.09906006]
[113.89609528 563.11505127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 116]
[37 115]
[39 113]
[40 112]
[42 61]
[43 60]
[44 59]
[65 111]
[66 110]
[68 109]
[69 108]
[70 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
