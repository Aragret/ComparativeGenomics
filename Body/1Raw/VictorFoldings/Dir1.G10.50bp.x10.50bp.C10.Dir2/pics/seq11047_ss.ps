%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUAGCAGGGGGGGGGGGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACxxxxxxxxxxAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCCCCCCCCCCCACCAUUAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 427.06124878]
[71.19830322 421.04519653]
[59.48964310 411.51577759]
[50.78712082 399.18011475]
[45.73651886 384.95361328]
[44.71262741 369.89190674]
[47.79142761 355.11276245]
[54.74444962 341.71282959]
[65.05573273 330.68649292]
[77.96011353 322.85198975]
[92.50000000 318.79067993]
[92.50000000 303.79067993]
[92.50000000 288.79067993]
[92.50000000 273.79067993]
[92.50000000 258.79067993]
[92.50000000 243.79067993]
[92.50000000 228.79067993]
[92.50000000 213.79067993]
[92.50000000 198.79067993]
[92.50000000 183.79067993]
[92.50000000 168.79067993]
[92.50000000 153.79067993]
[92.50000000 138.79067993]
[80.08436584 134.12234497]
[69.91348267 125.60797119]
[63.13374710 114.20725250]
[48.36769104 116.84611511]
[33.60163498 119.48497772]
[18.83557892 122.12384033]
[12.18702698 136.14440918]
[-1.44894814 143.54980469]
[-16.82903481 141.49249268]
[-28.03927803 130.76354980]
[-30.76910782 115.48848724]
[-23.96885109 101.54086304]
[-10.25334454 94.28383636]
[5.10352039 96.50787354]
[16.19671440 107.35778809]
[30.96277046 104.71892548]
[45.72882462 102.08005524]
[60.49488068 99.44119263]
[61.28353500 92.12585449]
[63.41492462 85.08360291]
[66.81512451 78.55867004]
[71.36621094 72.77734375]
[76.91035461 67.94013214]
[83.25527191 64.21479797]
[90.18091583 61.73052979]
[97.44709778 60.57349396]
[104.80181122 60.78381348]
[111.98999786 62.35419464]
[119.17250824 49.18561172]
[126.35501862 36.01703262]
[133.53752136 22.84844780]
[140.72003174 9.67986584]
[147.90254211 -3.48871660]
[141.63768005 -5.60080242]
[135.71414185 -10.02970028]
[130.88285828 -16.68206787]
[127.85795593 -25.23978806]
[127.25305176 -35.17487335]
[126.00617218 -50.12295914]
[124.75930023 -65.07104492]
[123.51242828 -80.01913452]
[122.26554871 -94.96722412]
[107.63318634 -98.92572784]
[95.23894501 -107.65261078]
[86.57947540 -120.09405518]
[82.70046997 -134.74769592]
[84.07032013 -149.84402466]
[90.52362061 -163.56010437]
[101.28109741 -174.23963928]
[115.04373932 -180.59301758]
[130.14962769 -181.85305786]
[144.77467346 -177.86759949]
[157.15281677 -169.11788940]
[165.78933716 -156.66050720]
[169.64134216 -141.99974060]
[168.24366760 -126.90596008]
[161.76510620 -113.20179749]
[150.98796082 -102.54210663]
[137.21363831 -96.21409607]
[138.46051025 -81.26600647]
[139.70738220 -66.31792450]
[140.95426941 -51.36983490]
[142.20114136 -36.42174530]
[148.50669861 -32.36097717]
[152.33370972 -46.86455917]
[167.31005859 -47.70668030]
[172.73889160 -33.72355270]
[161.11782837 -24.23943329]
[167.42338562 -20.17866325]
[181.54820251 -25.22741890]
[195.67300415 -30.27617455]
[209.79780579 -35.32493210]
[223.92260742 -40.37368774]
[238.04740906 -45.42244339]
[238.41740417 -60.59569550]
[244.24723816 -74.60916901]
[254.74845886 -85.56766510]
[268.50088501 -91.98912811]
[283.64459229 -93.00511932]
[298.13156128 -88.47821808]
[310.00250244 -79.02066803]
[317.65197754 -65.91151428]
[320.04547119 -50.92366028]
[316.85925293 -36.08409882]
[308.52429199 -23.39975548]
[296.16775513 -14.58608150]
[281.46081543 -10.83505630]
[266.39242554 -12.65397263]
[253.00050354 -19.79683876]
[243.09616089 -31.29764175]
[228.97135925 -26.24888611]
[214.84655762 -21.20012856]
[200.72175598 -16.15137291]
[186.59695435 -11.10261631]
[172.47215271 -6.05385971]
[161.07112122 3.69379234]
[153.88862610 16.86237526]
[146.70611572 30.03095818]
[139.52360535 43.19953918]
[132.34109497 56.36812210]
[125.15858459 69.53670502]
[137.56007385 87.74406433]
[138.28411865 109.76180267]
[127.10563660 128.74458313]
[107.50000000 138.79067993]
[107.50000000 153.79067993]
[107.50000000 168.79067993]
[107.50000000 183.79067993]
[107.50000000 198.79067993]
[107.50000000 213.79067993]
[107.50000000 228.79067993]
[107.50000000 243.79067993]
[107.50000000 258.79067993]
[107.50000000 273.79067993]
[107.50000000 288.79067993]
[107.50000000 303.79067993]
[107.50000000 318.79067993]
[122.03988647 322.85198975]
[134.94427490 330.68649292]
[145.25555420 341.71282959]
[152.20857239 355.11276245]
[155.28736877 369.89190674]
[154.26348877 384.95361328]
[149.21287537 399.18011475]
[140.51036072 411.51577759]
[128.80169678 421.04519653]
[114.95575714 427.06124878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 41]
[27 40]
[28 39]
[29 38]
[51 124]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
