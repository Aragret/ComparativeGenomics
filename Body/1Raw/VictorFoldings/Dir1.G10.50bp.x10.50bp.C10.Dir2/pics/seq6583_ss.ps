%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAGCAGGGGGGGGGGGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUxxxxxxxxxxAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCCCCCCCCCCCUCCUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[64.32174683 380.49777222]
[51.44847488 372.59487915]
[41.32418060 361.38439941]
[34.76959991 347.77505493]
[32.31607819 332.87011719]
[34.16251373 317.87786865]
[40.15922928 304.01367188]
[49.82008743 292.40142822]
[62.36193466 283.98248291]
[76.76805878 279.43930054]
[76.45600128 264.44256592]
[76.14394379 249.44580078]
[75.83188629 234.44905090]
[75.51983643 219.45228577]
[75.20777893 204.45553589]
[74.89572144 189.45878601]
[74.58366394 174.46203613]
[74.27160645 159.46527100]
[73.95954895 144.46852112]
[73.64749908 129.47177124]
[82.93228912 92.12974548]
[73.91475677 80.14291382]
[64.89722443 68.15608215]
[55.87969971 56.16924667]
[55.45164871 71.16313934]
[47.70151138 84.00585175]
[34.63537979 91.37310028]
[19.63538742 91.35787964]
[6.58423567 83.96413422]
[-1.13982606 71.10572052]
[-1.53744721 56.11098862]
[5.49429560 42.86128998]
[18.13525581 34.78625870]
[33.11336136 33.97609711]
[46.55149460 40.64044571]
[40.20436478 27.04949379]
[33.85723495 13.45854282]
[27.51010513 -0.13240780]
[20.88160706 -13.58837318]
[13.97460842 -26.90352821]
[7.06761026 -40.21868515]
[0.16061172 -53.53384018]
[-14.00911522 -48.53734589]
[-28.73633575 -45.56159592]
[-43.73438263 -44.66451263]
[-58.71131134 -45.86356735]
[-73.37559509 -49.13541031]
[-87.44178772 -54.41635895]
[-100.63607788 -61.60361481]
[-112.70165253 -70.55728149]
[-123.40364075 -81.10306549]
[-132.53372192 -93.03569794]
[-139.91418457 -106.12290192]
[-145.40136719 -120.10993195]
[-148.88844299 -134.72453308]
[-150.30755615 -149.68220520]
[-149.63107300 -164.69181824]
[-146.87216187 -179.46119690]
[-142.08453369 -193.70285034]
[-135.36137390 -207.13957214]
[-126.83354187 -219.50978088]
[-116.66704559 -230.57272339]
[-105.05978394 -240.11302185]
[-92.23767853 -247.94500732]
[-78.45033264 -253.91619873]
[-63.96611404 -257.91036987]
[-49.06695938 -259.84979248]
[-34.04288864 -259.69671631]
[-19.18634796 -257.45410156]
[-4.78652716 -253.16558838]
[8.87627983 -246.91467285]
[21.53612137 -238.82304382]
[32.94657135 -229.04818726]
[42.88551712 -217.78038025]
[51.15950012 -205.23895264]
[57.60746384 -191.66802979]
[62.10389328 -177.33177185]
[64.56127167 -162.50924683]
[64.93175507 -147.48896790]
[63.20813370 -132.56330872]
[59.42396545 -118.02280426]
[53.65290833 -104.15048981]
[46.00729370 -91.21640015]
[36.63594818 -79.47229767]
[25.72128677 -69.14678192]
[13.47576714 -60.44083786]
[20.38276672 -47.12568283]
[27.28976440 -33.81052780]
[34.19676208 -20.49537277]
[38.45774078 -18.21073341]
[41.29552078 -13.19293404]
[41.10105515 -6.47953749]
[47.44818497 7.11141348]
[53.79531479 20.70236397]
[60.14244461 34.29331589]
[67.86653137 47.15171814]
[76.88406372 59.13854980]
[85.90158844 71.12538147]
[94.91912079 83.11221313]
[90.99723053 68.63399506]
[95.88811493 54.45375824]
[107.90161896 45.47179413]
[122.88621521 44.79202652]
[135.66362000 52.64936447]
[141.81832886 66.32852936]
[139.22344971 81.10237122]
[128.77568054 91.86547089]
[114.08515930 94.89835358]
[128.85121155 97.53721619]
[143.61726379 100.17608643]
[158.38331604 102.81494904]
[167.27987671 90.41277313]
[180.68061829 83.10640717]
[195.92481995 82.34654236]
[209.98571777 88.28404236]
[220.07151794 99.74001312]
[224.17967224 114.43987274]
[221.49452209 129.46493530]
[212.54919434 141.83198547]
[199.11978149 149.08552551]
[183.87272644 149.78535461]
[169.83531189 143.79252625]
[159.79470825 132.29692078]
[155.74446106 117.58100128]
[140.97840881 114.94213867]
[126.21234894 112.30327606]
[111.44628906 109.66441345]
[105.74578094 114.53823853]
[94.34475708 124.28588867]
[88.64424896 129.15971375]
[88.95630646 144.15646362]
[89.26836395 159.15322876]
[89.58042145 174.14997864]
[89.89247131 189.14672852]
[90.20452881 204.14347839]
[90.51658630 219.14024353]
[90.82864380 234.13699341]
[91.14070129 249.13374329]
[91.45275879 264.13049316]
[91.76480865 279.12725830]
[106.34745026 283.06719971]
[119.22866058 290.95715332]
[129.36421204 302.15747070]
[135.93246460 315.76022339]
[138.40095520 330.66268921]
[136.56958008 345.65676880]
[130.58680725 359.52697754]
[120.93760681 371.14895630]
[108.40422821 379.58050537]
[94.00267792 384.13812256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 99]
[22 98]
[23 97]
[24 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 89]
[40 88]
[41 87]
[42 86]
[108 127]
[109 126]
[110 125]
[111 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
