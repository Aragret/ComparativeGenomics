%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUUACCCGGGGGGGGGGCGCCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACxxxxxxxxxxAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCCCCCCCCCCCAAUCUUAUCC\
) } def
/len { sequence length } bind def

/coor [
[83.39677429 365.27529907]
[70.17658234 358.00283813]
[59.28977585 347.55581665]
[51.47864532 334.64657593]
[47.27576447 320.15524292]
[46.96769333 305.06991577]
[50.57543182 290.41909790]
[57.85300446 277.20172119]
[68.30421448 266.31893921]
[81.21647644 258.51278687]
[95.70941162 254.31550598]
[95.39735413 239.31875610]
[95.08529663 224.32200623]
[94.77324677 209.32524109]
[94.46118927 194.32849121]
[94.14913177 179.33174133]
[93.83707428 164.33499146]
[93.52501678 149.33822632]
[93.21295929 134.34147644]
[92.90090942 119.34472656]
[86.95471954 114.77385712]
[77.81278229 126.66608429]
[65.92070770 117.52395630]
[75.06233978 105.63211823]
[69.11614990 101.06125641]
[54.54344559 104.61601257]
[39.97074127 108.17077637]
[25.39803886 111.72554016]
[10.82533550 115.28030396]
[1.29754364 128.18769836]
[-14.73907089 128.64218140]
[-24.98258972 116.29512024]
[-21.57506180 100.61811829]
[-7.13045073 93.63723755]
[7.27057362 100.70759583]
[21.84327698 97.15283966]
[36.41597748 93.59807587]
[50.98868179 90.04331207]
[65.56138611 86.48854828]
[67.33876801 79.20220184]
[56.49560165 68.83756256]
[70.89352417 64.62949371]
[72.67090607 57.34314728]
[61.37190247 47.47742462]
[50.07289886 37.61169815]
[38.77389526 27.74597740]
[27.47488976 17.88025284]
[16.17588425 8.01453114]
[2.37750220 14.45848274]
[-12.84905529 14.72652721]
[-26.86569405 8.77222252]
[-37.24394608 -2.37281060]
[-42.18571472 -16.77762794]
[-40.83481598 -31.94651031]
[-33.42529297 -45.25135422]
[-21.24089432 -54.38701630]
[-6.39263916 -57.77068710]
[8.54692078 -54.81612396]
[20.98941803 -46.03522873]
[28.77911377 -32.94933701]
[30.56639671 -17.82566261]
[26.04160881 -3.28447413]
[37.34061432 6.58124876]
[48.63961792 16.44697189]
[59.93862152 26.31269455]
[71.23762512 36.17841721]
[82.53662872 46.04413986]
[107.35708618 67.82617950]
[106.42251587 93.27806854]
[99.35691071 80.03113556]
[93.69083405 66.12791443]
[89.48435211 51.71578217]
[86.78205872 36.94751740]
[85.61260223 21.97967339]
[85.98837280 6.97091436]
[87.90538788 -7.91965580]
[91.34333038 -22.53418922]
[96.26574707 -36.71776199]
[102.62047577 -50.32002640]
[110.34013367 -63.19678497]
[119.34289551 -75.21153259]
[129.53332520 -86.23692322]
[140.80340576 -96.15605927]
[153.03366089 -104.86380768]
[166.09445190 -112.26786041]
[179.84730530 -118.28971863]
[194.14645386 -122.86556244]
[208.84031677 -125.94687653]
[223.77313232 -127.50099945]
[238.78659058 -127.51145935]
[253.72154236 -125.97814178]
[268.41967773 -122.91729736]
[282.72518921 -118.36138153]
[296.48641968 -112.35868073]
[309.55752563 -104.97283173]
[321.79989624 -96.28212738]
[333.08377075 -86.37870026]
[343.28955078 -75.36752319]
[352.30905151 -63.36532211]
[360.04663086 -50.49933243]
[366.42031860 -36.90593719]
[371.36248779 -22.72923279]
[374.82077026 -8.11950302]
[376.75854492 6.76838255]
[377.15521240 21.77660370]
[376.00662231 36.74606323]
[373.32489014 51.51807785]
[369.13848877 65.93605804]
[363.49179077 79.84716034]
[356.44464111 93.10391998]
[348.07174683 105.56581116]
[338.46188354 117.10073090]
[327.71688843 127.58640289]
[315.95068359 136.91166687]
[303.28802490 144.97767639]
[289.86306763 151.69892883]
[275.81820679 157.00416565]
[261.30227661 160.83715820]
[246.46916199 163.15727234]
[231.47612000 163.93991089]
[216.48207092 163.17677307]
[201.64595032 160.87594604]
[187.12504578 157.06184387]
[173.07328796 151.77487183]
[159.63961792 145.07109070]
[146.96646118 137.02156067]
[135.18814087 127.71160889]
[124.42952728 117.23992157]
[114.80465698 105.71751404]
[107.89765930 119.03266907]
[108.20971680 134.02941895]
[108.52177429 149.02616882]
[108.83383179 164.02293396]
[109.14588165 179.01968384]
[109.45793915 194.01643372]
[109.76999664 209.01318359]
[110.08205414 224.00994873]
[110.39411163 239.00669861]
[110.70616913 254.00344849]
[125.36116028 257.59420776]
[138.58695984 264.85647583]
[149.48184204 275.29507446]
[157.30293274 288.19827271]
[161.51699829 302.68634033]
[161.83673096 317.77145386]
[158.24029541 332.42504883]
[150.97293091 345.64804077]
[140.53013611 356.53887939]
[127.62390137 364.35501099]
[113.13421631 368.56347656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[69 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
