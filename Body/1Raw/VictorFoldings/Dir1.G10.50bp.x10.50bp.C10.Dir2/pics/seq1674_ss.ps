%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAGAGUAGAGGGGGGGGGGGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUxxxxxxxxxxUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCCCCCCCCCCCUAAUAGUAGA\
) } def
/len { sequence length } bind def

/coor [
[85.61198425 400.42456055]
[71.59004211 394.87155151]
[59.39008331 386.00521851]
[49.77901077 374.38290405]
[43.36098480 360.73519897]
[40.53944778 345.92001343]
[41.49176407 330.86862183]
[46.15806961 316.52722168]
[54.24503708 303.79724121]
[65.24430847 293.47897339]
[78.46446991 286.22100830]
[93.07448578 282.47955322]
[93.07448578 267.47955322]
[93.07448578 252.47956848]
[93.07448578 237.47956848]
[93.07448578 222.47956848]
[93.07448578 207.47956848]
[93.07448578 192.47956848]
[93.07448578 177.47956848]
[93.07448578 162.47956848]
[93.07448578 147.47956848]
[93.07448578 132.47956848]
[74.43657684 107.65334320]
[85.65330505 85.83776855]
[79.66500854 72.08493805]
[73.67671204 58.33211136]
[67.68841553 44.57928467]
[52.57368851 45.45701599]
[38.09781265 41.11869812]
[26.00238800 32.10643387]
[17.73572350 19.52341652]
[14.27942181 4.89893532]
[16.03185081 -9.99748993]
[22.76233864 -23.37021065]
[33.64131165 -33.61389923]
[27.65301704 -47.36672974]
[18.24915886 -59.05293655]
[6.09582663 -67.84477997]
[-6.05750656 -76.63661957]
[-11.37393093 -77.17595673]
[-15.50926113 -79.50074768]
[-17.97519302 -82.84571075]
[-18.66582489 -86.36284637]
[-30.25487328 -95.88617706]
[-41.84392166 -105.40951538]
[-57.41830826 -108.19323730]
[-62.33911133 -122.25150299]
[-77.91349792 -125.03522491]
[-82.83429718 -139.09349060]
[-94.42334747 -148.61683655]
[-106.01239777 -158.14016724]
[-121.34944916 -155.08911133]
[-135.03454590 -162.65560913]
[-140.60601807 -177.26699829]
[-135.43318176 -192.02423096]
[-121.95848846 -199.95938110]
[-106.54427338 -197.32572937]
[-96.46866608 -185.36679077]
[-96.48905945 -169.72921753]
[-84.90000916 -160.20587158]
[-73.31095886 -150.68254089]
[-58.56550217 -148.58000183]
[-52.81577301 -133.84056091]
[-38.07031250 -131.73800659]
[-32.32058334 -116.99856567]
[-20.73153687 -107.47522736]
[-9.14248753 -97.95188904]
[2.73433614 -88.78995514]
[14.88766956 -79.99811554]
[27.04100227 -71.20626831]
[21.21579361 -85.02896881]
[18.55068779 -99.79030609]
[19.17440414 -114.77733612]
[23.05682182 -129.26618958]
[30.01041985 -142.55706787]
[39.69934464 -154.00804138]
[51.65563583 -163.06602478]
[65.30181122 -169.29353333]
[79.97877502 -172.38978577]
[94.97763824 -172.20524597]
[109.57397461 -168.74880981]
[123.06278992 -162.18742371]
[134.79258728 -152.83799744]
[144.19683838 -141.15209961]
[150.82131958 -127.69414520]
[154.34605408 -113.11415863]
[154.60084534 -98.11631775]
[151.57333374 -83.42502594]
[145.40979004 -69.74983978]
[136.40788269 -57.75126648]
[125.00241089 -48.00882721]
[111.74423981 -40.99307251]
[97.27371979 -37.04285812]
[82.28977966 -36.34897232]
[67.51612091 -38.94493103]
[53.66630173 -44.70535278]
[41.40584564 -53.35502625]
[47.39414215 -39.60219574]
[62.30434418 -40.58770370]
[76.67901611 -36.40465164]
[88.77783203 -27.53937912]
[97.12914276 -15.04629421]
[100.70893860 -0.42250854]
[99.06642914 14.57156944]
[92.38065338 28.12415123]
[81.44124603 38.59098816]
[87.42954254 52.34381485]
[93.41783905 66.09664154]
[99.40613556 79.84947205]
[118.04472351 80.34165955]
[133.15750122 98.13853455]
[147.97998047 100.43941498]
[162.80247498 102.74028778]
[177.62495422 105.04116058]
[192.44743347 107.34203339]
[207.26991272 109.64291382]
[222.35787964 103.21753693]
[235.30203247 113.28634644]
[232.78652954 129.49142456]
[217.39912415 135.16235352]
[204.96903992 124.46539307]
[190.14656067 122.16452026]
[175.32408142 119.86364746]
[160.50158691 117.56276703]
[145.67910767 115.26189423]
[130.85662842 112.96102142]
[125.16109467 117.84066010]
[134.92018127 129.23188782]
[123.52877808 138.99078369]
[113.77001953 127.59992981]
[108.07448578 132.47956848]
[108.07448578 147.47956848]
[108.07448578 162.47956848]
[108.07448578 177.47956848]
[108.07448578 192.47956848]
[108.07448578 207.47956848]
[108.07448578 222.47956848]
[108.07448578 237.47956848]
[108.07448578 252.47956848]
[108.07448578 267.47955322]
[108.07448578 282.47955322]
[122.68449402 286.22100830]
[135.90464783 293.47897339]
[146.90393066 303.79724121]
[154.99089050 316.52722168]
[159.65719604 330.86862183]
[160.60951233 345.92001343]
[157.78797913 360.73519897]
[151.36994934 374.38290405]
[141.75888062 386.00521851]
[129.55892944 394.87155151]
[115.53697968 400.42456055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 109]
[25 108]
[26 107]
[27 106]
[35 98]
[36 97]
[37 70]
[38 69]
[39 68]
[43 67]
[44 66]
[45 65]
[47 63]
[49 61]
[50 60]
[51 59]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
