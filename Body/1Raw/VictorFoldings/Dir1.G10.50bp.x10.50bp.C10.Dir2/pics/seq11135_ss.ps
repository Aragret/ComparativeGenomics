%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCCCAUGGGGGGGGGGUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAxxxxxxxxxxCAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAACCCCCCCCCCUAAUCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[79.80842590 375.10205078]
[65.96248627 369.08602905]
[54.25382233 359.55661011]
[45.55130005 347.22094727]
[40.50069809 332.99441528]
[39.47680664 317.93273926]
[42.55560303 303.15359497]
[49.50862503 289.75366211]
[59.81990814 278.72732544]
[72.72428894 270.89282227]
[87.26417542 266.83151245]
[87.26417542 251.83149719]
[87.26417542 236.83149719]
[87.26417542 221.83149719]
[87.26417542 206.83149719]
[87.26417542 191.83149719]
[87.26417542 176.83149719]
[87.26417542 161.83149719]
[87.26417542 146.83149719]
[87.26417542 131.83149719]
[87.26417542 116.83150482]
[77.05069733 105.84584045]
[62.09045029 104.75452423]
[47.13019943 103.66321564]
[36.83923340 111.50858307]
[24.36362076 110.25234985]
[16.37309456 101.11677551]
[1.43878603 99.71446991]
[-13.49552155 98.31216431]
[-28.49227524 98.00011444]
[-43.47198868 98.77995300]
[-58.45170212 99.55979919]
[-66.79418945 112.64347839]
[-81.24608612 118.29346466]
[-96.25034332 114.33721924]
[-106.03752136 102.29601288]
[-106.84424591 86.79991913]
[-98.36032104 73.80751038]
[-83.84798431 68.31463623]
[-68.88752747 72.43341064]
[-59.23154831 84.58008575]
[-44.25183487 83.80023956]
[-29.27211952 83.02039337]
[-40.14691162 72.68894196]
[-42.01041412 57.80514908]
[-34.01843643 45.11151505]
[-19.79142952 40.35838318]
[-5.77436399 45.69897079]
[1.68289304 58.71393585]
[-0.79786974 73.50737000]
[-12.09321785 83.37786102]
[2.84108973 84.78016663]
[17.77539635 86.18246460]
[33.27106094 78.00418854]
[48.22151184 88.70296478]
[63.18175888 89.79428101]
[78.14200592 90.88558960]
[83.36191559 85.50018311]
[72.59127808 75.06019592]
[83.03144836 64.28973389]
[93.80172729 74.72937775]
[99.02163696 69.34397125]
[97.46405029 54.42506027]
[82.63204956 51.50904846]
[69.31929016 44.34930801]
[58.70953369 33.58248520]
[51.74619675 20.16595459]
[49.04844666 5.29270458]
[50.85617447 -9.71474457]
[57.00863266 -23.52194214]
[66.95874786 -34.90115738]
[79.82176971 -42.84056473]
[94.45391846 -46.63419342]
[109.55411530 -45.94471359]
[123.77966309 -40.83343887]
[135.86564636 -31.75485802]
[144.73736572 -19.51623344]
[149.60597229 -5.20581341]
[150.03852844 9.90392780]
[145.99661255 24.46944427]
[137.83958435 37.19557571]
[126.29280090 46.95072937]
[112.38296509 52.86747742]
[113.94054413 67.78639221]
[126.46650696 76.03868103]
[140.78910828 71.58186340]
[155.11170959 67.12504578]
[169.43429565 62.66823196]
[183.75689697 58.21141815]
[198.07949829 53.75460052]
[211.24807739 46.57209396]
[222.74987793 36.94356537]
[234.25167847 27.31504059]
[245.75349426 17.68651390]
[250.86883545 2.10558677]
[266.97323608 -0.98956406]
[277.49987793 11.58508778]
[271.61984253 26.89381790]
[255.38201904 29.18831825]
[243.88020325 38.81684494]
[232.37840271 48.44536972]
[220.87660217 58.07389450]
[235.71411133 55.87200546]
[250.55384827 58.05887222]
[264.12542725 64.44728851]
[275.26708984 74.49037933]
[283.02502441 87.32839203]
[286.73510742 101.86232758]
[286.07974243 116.84799957]
[281.11502075 131.00256348]
[272.26596069 143.11430359]
[260.29010010 152.14639282]
[246.21263123 157.32565308]
[231.23864746 158.20867920]
[216.65000916 154.71989441]
[203.69557190 147.15797424]
[193.48432922 136.17022705]
[186.89039612 122.69728851]
[184.47825623 107.89250183]
[186.45440674 93.02324677]
[192.64967346 79.36240387]
[202.53631592 68.07720184]
[188.21371460 72.53401184]
[173.89111328 76.99082947]
[159.56851196 81.44764709]
[145.24592590 85.90446472]
[130.92332458 90.36127472]
[126.21147156 107.46889496]
[114.47586823 116.72417450]
[102.26417542 116.83150482]
[102.26417542 131.83149719]
[102.26417542 146.83149719]
[102.26417542 161.83149719]
[102.26417542 176.83149719]
[102.26417542 191.83149719]
[102.26417542 206.83149719]
[102.26417542 221.83149719]
[102.26417542 236.83149719]
[102.26417542 251.83149719]
[102.26417542 266.83151245]
[116.80406189 270.89282227]
[129.70845032 278.72732544]
[140.01972961 289.75366211]
[146.97274780 303.15359497]
[150.05154419 317.93273926]
[149.02766418 332.99441528]
[143.97705078 347.22094727]
[135.27453613 359.55661011]
[123.56587219 369.08602905]
[109.71993256 375.10205078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 57]
[23 56]
[24 55]
[27 53]
[28 52]
[29 51]
[30 43]
[31 42]
[32 41]
[62 84]
[63 83]
[85 127]
[86 126]
[87 125]
[88 124]
[89 123]
[90 122]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
