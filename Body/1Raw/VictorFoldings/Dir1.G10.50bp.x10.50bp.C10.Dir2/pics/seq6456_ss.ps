%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACUCUUACCGGGGGGGGGGUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGxxxxxxxxxxCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCCCCCCCCCCCUGACUCCUACC\
) } def
/len { sequence length } bind def

/coor [
[145.08920288 397.94409180]
[139.62130737 383.95770264]
[135.81414795 369.43112183]
[133.71920776 354.56072998]
[133.36480713 339.54772949]
[134.75573730 324.59506226]
[137.87319946 309.90499878]
[142.67503357 295.67620850]
[149.09629822 282.10107422]
[157.05015564 269.36322021]
[166.42903137 257.63491821]
[177.10607910 247.07475281]
[188.93692017 237.82556152]
[181.13188171 225.01614380]
[173.32682800 212.20672607]
[165.52177429 199.39730835]
[157.71672058 186.58789062]
[149.14770508 174.27644348]
[139.84637451 162.50845337]
[130.54505920 150.74047852]
[121.24372864 138.97248840]
[111.94240570 127.20451355]
[102.64108276 115.43653107]
[103.18479919 130.42668152]
[93.53625488 141.91169739]
[78.67701721 143.96185303]
[66.27894592 135.51863098]
[62.74319077 120.94131470]
[69.89526367 107.75617981]
[84.04459381 102.77080536]
[69.68773651 98.42562866]
[55.33087540 94.08045197]
[40.97401428 89.73527527]
[31.79334450 90.24173737]
[26.37184906 85.15381622]
[12.10600090 80.51855469]
[-2.15984702 75.88330078]
[-14.69936466 84.83129883]
[-29.92536163 84.68163300]
[-42.00083160 75.70127106]
[-46.41991425 61.50233459]
[-60.68576050 56.86708069]
[-73.15971375 66.09638977]
[-88.67646027 66.19738770]
[-101.26949310 57.13124466]
[-106.09654236 42.38406754]
[-101.30150604 27.62644958]
[-88.72816467 18.53300095]
[-73.21123505 18.60033417]
[-60.71729279 27.80255890]
[-56.05050659 42.60123444]
[-41.78466034 47.23648834]
[-29.86362267 38.34677887]
[-14.81583500 38.17929459]
[-2.40977263 47.00782776]
[2.47540784 61.61745453]
[16.74125481 66.25270844]
[31.00710297 70.88796234]
[45.31919098 75.37841034]
[59.67605209 79.72358704]
[74.03291321 84.06876373]
[88.38977051 88.41394806]
[91.08666992 88.19223022]
[93.59982300 88.47106171]
[95.84603119 89.19249725]
[98.26758575 74.38925171]
[100.68914032 59.58600616]
[103.11070251 44.78276062]
[105.53225708 29.97951508]
[91.66616821 24.06386375]
[79.61912537 15.00117588]
[70.09154510 3.31834364]
[63.63733292 -10.30540752]
[60.63173676 -25.07801247]
[61.24949646 -40.14060974]
[65.45469666 -54.61747742]
[73.00284576 -67.66695404]
[83.45511627 -78.53035736]
[96.20381927 -86.57610321]
[110.50775909 -91.33642578]
[125.53533173 -92.53456116]
[140.41284180 -90.10085297]
[154.27534485 -84.17679596]
[166.31689453 -75.10680389]
[175.83738708 -63.41820145]
[182.28334045 -49.79053879]
[185.27998352 -35.01611328]
[184.65309143 -19.95389557]
[180.43911743 -5.47957897]
[172.88305664 7.56531858]
[162.42419434 18.42238235]
[149.67062378 26.46039963]
[135.36380005 31.21204758]
[120.33550262 32.40107346]
[117.91394806 47.20431900]
[115.49238586 62.00756073]
[113.07083130 76.81080627]
[110.64927673 91.61405182]
[114.40906525 106.13520813]
[123.71038818 117.90319061]
[133.01170349 129.67117310]
[142.31303406 141.43914795]
[151.61436462 153.20713806]
[160.91567993 164.97511292]
[164.11347961 150.31994629]
[176.63520813 142.06123352]
[191.36570740 144.89178467]
[199.93475342 157.20323181]
[197.47319031 171.99987793]
[185.37974548 180.87390137]
[170.52613831 178.78283691]
[178.33119202 191.59225464]
[186.13624573 204.40167236]
[193.94129944 217.21109009]
[201.74633789 230.02050781]
[215.39048767 223.74725342]
[229.67066956 219.10043335]
[244.39376831 216.14291382]
[259.36065674 214.91465759]
[274.36895752 215.43229675]
[289.21563721 217.68884277]
[303.69998169 221.65374756]
[317.62606812 227.27340698]
[330.80557251 234.47183228]
[343.06027222 243.15165710]
[354.22439575 253.19549561]
[364.14697266 264.46752930]
[372.69384766 276.81530762]
[379.74938965 290.07183838]
[385.21823120 304.05786133]
[389.02636719 318.58419800]
[391.12228394 333.45440674]
[391.47769165 348.46740723]
[390.08776855 363.42016602]
[386.97128296 378.11044312]
[382.17037964 392.33956909]
[375.75003052 405.91510010]
[367.79702759 418.65347290]
[358.41894531 430.38241577]
[347.74258423 440.94329834]
[335.91235352 450.19326782]
[323.08825684 458.00729370]
[309.44369507 464.27963257]
[295.16317749 468.92550659]
[280.43991089 471.88204956]
[265.47293091 473.10928345]
[250.46467590 472.59063721]
[235.61811829 470.33312988]
[221.13404846 466.36724854]
[207.20834351 460.74664307]
[194.02931213 453.54736328]
[181.77522278 444.86669922]
[170.61175537 434.82211304]
[160.68991089 423.54943848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 115]
[14 114]
[15 113]
[16 112]
[17 111]
[18 104]
[19 103]
[20 102]
[21 101]
[22 100]
[23 99]
[30 62]
[31 61]
[32 60]
[33 59]
[35 58]
[36 57]
[37 56]
[41 52]
[42 51]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
