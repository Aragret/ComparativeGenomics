%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGGAAAAAACGGGGGGGGGGCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAGCAGCxxxxxxxxxxGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCCCCCCCCCCCUAUGAAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[83.56412506 385.53167725]
[69.86196899 379.27081299]
[57.89685822 370.11746216]
[48.26894379 358.53079224]
[41.46116638 345.09194946]
[37.81499863 330.47506714]
[37.51332855 315.41333008]
[40.57129288 300.66217041]
[46.83550262 286.96151733]
[55.99174881 274.99862671]
[67.58075714 265.37353516]
[81.02122498 258.56900024]
[95.63899231 254.92637634]
[95.33498383 239.92945862]
[95.03098297 224.93254089]
[94.72697449 209.93562317]
[94.42297363 194.93869019]
[94.11896515 179.94177246]
[93.81496429 164.94485474]
[93.51096344 149.94793701]
[93.20695496 134.95101929]
[92.90295410 119.95410156]
[80.74901581 108.82801819]
[80.24813843 92.35813141]
[91.70350647 80.51404572]
[91.09561920 65.52636719]
[90.48773956 50.53868866]
[89.87985229 35.55101395]
[80.92287445 26.21681023]
[80.75673676 13.68296146]
[88.92333221 4.70939064]
[88.61932373 -10.28752899]
[88.31532288 -25.28444672]
[73.32801819 -26.03916740]
[58.43128204 -27.84920120]
[43.69933319 -30.70553017]
[29.20556450 -34.59392548]
[15.02218533 -39.49501801]
[1.21985698 -45.38438416]
[-12.13265800 -52.23268890]
[-24.96883774 -60.00580978]
[-37.22473145 -68.66502380]
[-48.83928299 -78.16718292]
[-59.75462723 -88.46496582]
[-69.91638184 -99.50704956]
[-79.27391815 -111.23843384]
[-87.78063202 -123.60066986]
[-95.39411926 -136.53216553]
[-102.07646942 -149.96850586]
[-107.79438782 -163.84274292]
[-112.51937866 -178.08573914]
[-116.22791290 -192.62657166]
[-118.90150452 -207.39277649]
[-120.52684021 -222.31079102]
[-121.09582520 -237.30630493]
[-120.60561371 -252.30459595]
[-119.05865479 -267.23092651]
[-116.46266174 -282.01098633]
[-112.83055878 -296.57107544]
[-108.18044281 -310.83871460]
[-102.53547668 -324.74279785]
[-95.92379761 -338.21405029]
[-88.37832642 -351.18536377]
[-79.93666840 -363.59210205]
[-70.64087677 -375.37246704]
[-60.53726196 -386.46777344]
[-49.67615891 -396.82275391]
[-38.11167908 -406.38580322]
[-25.90143776 -415.10925293]
[-13.10626316 -422.94970703]
[0.21009766 -429.86804199]
[13.98130226 -435.82983398]
[28.13874245 -440.80532837]
[42.61188507 -444.76980591]
[57.32862854 -447.70349121]
[72.21565247 -449.59173584]
[87.19878387 -450.42517090]
[102.20338440 -450.19961548]
[117.15470123 -448.91622925]
[131.97824097 -446.58135986]
[146.60015869 -443.20669556]
[160.94760132 -438.80899048]
[174.94909668 -433.41018677]
[188.53489685 -427.03720093]
[201.63729858 -419.72171021]
[214.19102478 -411.50024414]
[226.13356018 -402.41372681]
[237.40538025 -392.50741577]
[247.95033264 -381.83068848]
[257.71591187 -370.43670654]
[266.65341187 -358.38223267]
[274.71835327 -345.72738647]
[281.87054443 -332.53512573]
[288.07434082 -318.87124634]
[293.29882812 -304.80377197]
[297.51800537 -290.40283203]
[300.71084595 -275.74014282]
[302.86141968 -260.88873291]
[303.95904541 -245.92263794]
[303.99822998 -230.91639709]
[302.97879028 -215.94476318]
[300.90579224 -201.08233643]
[297.78958130 -186.40316772]
[293.64569092 -171.98037720]
[288.49472046 -157.88581848]
[282.36239624 -144.18971252]
[275.27920532 -130.96029663]
[267.28048706 -118.26348114]
[258.40603638 -106.16251373]
[248.70011902 -94.71768188]
[238.21107483 -83.98601532]
[226.99113464 -74.02097321]
[215.09623718 -64.87219238]
[202.58560181 -56.58526611]
[189.52159119 -49.20146942]
[175.96926880 -42.75759506]
[161.99617004 -37.28573990]
[147.67189026 -32.81317139]
[133.06779480 -29.36216545]
[118.25664520 -26.94992065]
[103.31224060 -25.58845139]
[103.61624146 -10.59153271]
[103.92024994 4.40538645]
[113.80570221 18.87486267]
[104.86753082 34.94313049]
[105.47541809 49.93080521]
[106.08329773 64.91847992]
[106.69118500 79.90615845]
[116.98886108 87.35433197]
[121.16883850 99.35621643]
[117.72591400 111.58992767]
[107.89987183 119.65010071]
[108.20387268 134.64701843]
[108.50788116 149.64393616]
[108.81188202 164.64085388]
[109.11589050 179.63777161]
[109.41989136 194.63468933]
[109.72389221 209.63160706]
[110.02790070 224.62852478]
[110.33190155 239.62544250]
[110.63591003 254.62237549]
[125.38928223 257.66961670]
[139.09446716 263.92385864]
[151.06402588 273.07141113]
[160.69754028 284.65341187]
[167.51184082 298.08892822]
[171.16508484 312.70404053]
[171.47406006 327.76565552]
[168.42323303 342.51831055]
[162.16566467 356.22195435]
[153.01522827 368.18930054]
[141.43087769 377.82000732]
[127.99370575 384.63104248]
[113.37771606 388.28076172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[25 128]
[26 127]
[27 126]
[28 125]
[31 123]
[32 122]
[33 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
