%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUACUAGUGGGGGGGGGGCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUxxxxxxxxxxACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAACCCCCCCCCCGCCAUACUAUU\
) } def
/len { sequence length } bind def

/coor [
[73.90628815 443.62686157]
[59.88434219 438.07385254]
[47.68438339 429.20751953]
[38.07331467 417.58523560]
[31.65528870 403.93753052]
[28.83375168 389.12234497]
[29.78606796 374.07095337]
[34.45237350 359.72952271]
[42.53934097 346.99957275]
[53.53861237 336.68130493]
[66.75877380 329.42333984]
[81.36878204 325.68188477]
[81.36878204 310.68188477]
[81.36878204 295.68188477]
[81.36878204 280.68188477]
[81.36878204 265.68188477]
[81.36878204 250.68188477]
[81.36878204 235.68188477]
[81.36878204 220.68188477]
[81.36878204 205.68188477]
[81.36878204 190.68188477]
[78.20422363 183.95153809]
[81.52594757 175.37471008]
[81.83392334 160.37786865]
[82.14189911 145.38102722]
[82.44987488 130.38418579]
[71.36474609 120.27875519]
[56.46029663 121.96915436]
[41.55584717 123.65955353]
[26.65140152 125.34995270]
[18.41765022 129.44886780]
[11.42401218 126.91880798]
[-3.51200032 128.30282593]
[-18.44801331 129.68685913]
[-33.66169357 137.16885376]
[-45.06285858 124.62095642]
[-36.16149139 110.19174957]
[-19.83203888 114.75084686]
[-4.89602566 113.36682129]
[10.03998661 111.98279572]
[24.96100235 110.44550323]
[39.86545181 108.75510406]
[54.76989746 107.06470490]
[69.67434692 105.37430573]
[72.40436554 99.50612640]
[76.14022827 94.88481140]
[63.14984894 87.38481140]
[50.15946579 79.88481140]
[37.16908646 72.38481140]
[20.42882538 69.70152283]
[18.37307739 52.87267303]
[33.97516251 46.23857880]
[44.66908646 59.39442825]
[57.65946579 66.89442444]
[70.64984894 74.39442444]
[83.64022827 81.89442444]
[88.07293701 78.71153259]
[93.10213470 76.59330750]
[98.47631073 75.64569092]
[103.92668915 75.91608429]
[109.18068695 77.39095306]
[118.82250214 65.90029144]
[108.32326508 55.17029190]
[98.92632294 43.46284485]
[90.72217560 30.89070320]
[83.78984070 17.57494164]
[78.19607544 3.64380574]
[73.99475098 -10.76853848]
[71.22633362 -25.52328873]
[69.91748047 -40.47834396]
[70.08080292 -55.48967743]
[71.71472931 -70.41271973]
[74.80351257 -85.10374451]
[79.31742096 -99.42126465]
[85.21296692 -113.22739410]
[92.43338013 -126.38917542]
[100.90911865 -138.77984619]
[110.55856323 -150.28005981]
[121.28877258 -160.77908325]
[132.99639893 -170.17579651]
[145.56871033 -178.37968445]
[158.88461304 -185.31175232]
[172.81585693 -190.90524292]
[187.22828674 -195.10627747]
[201.98309326 -197.87440491]
[216.93817139 -199.18295288]
[231.94950867 -199.01933289]
[246.87251282 -197.38511658]
[261.56347656 -194.29602051]
[275.88092041 -189.78184509]
[289.68692017 -183.88601685]
[302.84854126 -176.66532898]
[315.23904419 -168.18934631]
[326.73907471 -158.53967285]
[337.23788452 -147.80926514]
[346.63436890 -136.10144043]
[354.83801270 -123.52896881]
[361.76980591 -110.21292877]
[367.36300659 -96.28157043]
[371.56375122 -81.86905670]
[374.33160400 -67.11419678]
[375.63983154 -52.15908813]
[375.47592163 -37.14776230]
[373.84140015 -22.22478676]
[370.75201416 -7.53388691]
[366.23754883 6.78345537]
[360.34146118 20.58935165]
[353.12051392 33.75084305]
[344.64425659 46.14117050]
[334.99438477 57.64100647]
[324.26373291 68.13959503]
[312.55572510 77.53583527]
[299.98309326 85.73922729]
[286.66693115 92.67076874]
[272.73544312 98.26369476]
[258.32284546 102.46415710]
[243.56793213 105.23168945]
[228.61280823 106.53964233]
[213.60148621 106.37541962]
[198.67854309 104.74060059]
[183.98770142 101.65093231]
[169.67045593 97.13616943]
[155.86466980 91.23979187]
[142.70332336 84.01858521]
[130.31317139 75.54210663]
[120.67135620 87.03276825]
[123.57619476 114.35012817]
[97.44671631 130.69216919]
[97.13874054 145.68901062]
[96.83075714 160.68585205]
[96.52278137 175.68267822]
[96.36878204 190.68188477]
[96.36878204 205.68188477]
[96.36878204 220.68188477]
[96.36878204 235.68188477]
[96.36878204 250.68188477]
[96.36878204 265.68188477]
[96.36878204 280.68188477]
[96.36878204 295.68188477]
[96.36878204 310.68188477]
[96.36878204 325.68188477]
[110.97879791 329.42333984]
[124.19895935 336.68130493]
[135.19822693 346.99957275]
[143.28520203 359.72952271]
[147.95150757 374.07095337]
[148.90382385 389.12234497]
[146.08227539 403.93753052]
[139.66426086 417.58523560]
[130.05319214 429.20751953]
[117.85322571 438.07385254]
[103.83128357 443.62686157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 44]
[28 43]
[29 42]
[30 41]
[32 40]
[33 39]
[34 38]
[46 56]
[47 55]
[48 54]
[49 53]
[61 126]
[62 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
