%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCCUAAGGGGGGGGGGGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCxxxxxxxxxxUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCCCCCCCCCCCUCUCCUUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 499.55508423]
[71.19830322 493.53906250]
[59.48964310 484.00964355]
[50.78712082 471.67398071]
[45.73651886 457.44744873]
[44.71262741 442.38577271]
[47.79142761 427.60659790]
[54.74444962 414.20666504]
[65.05573273 403.18035889]
[77.96011353 395.34582520]
[92.50000000 391.28451538]
[92.50000000 376.28451538]
[92.50000000 361.28451538]
[92.50000000 346.28451538]
[92.50000000 331.28451538]
[92.50000000 316.28451538]
[92.50000000 301.28451538]
[92.50000000 286.28451538]
[92.50000000 271.28451538]
[92.50000000 256.28451538]
[78.03514099 252.44819641]
[65.04627991 244.99256897]
[54.42181396 234.42066956]
[46.89020538 221.44888306]
[42.97005844 206.95843506]
[42.93439102 191.93553162]
[46.79164505 177.40420532]
[54.28468323 164.35656738]
[64.90794373 153.68499756]
[77.94152832 146.12120056]
[92.50000000 142.18595886]
[92.50000000 127.18595886]
[76.28978729 115.26933289]
[72.14675903 95.58145905]
[58.49052048 89.37605286]
[44.83427811 83.17063904]
[31.17803574 76.96523285]
[21.46549034 88.52244568]
[8.99436474 97.02970886]
[-5.30989933 101.85574341]
[-20.38583183 102.64241791]
[-35.11469650 99.33135986]
[-48.40351486 92.16826630]
[-59.26617050 81.68469238]
[-66.89657593 68.65859222]
[-70.72850800 54.05657196]
[-70.47761536 38.96221542]
[-66.16251373 24.49561691]
[-58.10341263 11.73029613]
[-46.89834595 1.61352372]
[-33.37881088 -5.10396862]
[-18.54804230 -7.92369843]
[-3.50658250 -6.63642263]
[10.62939167 -1.33766556]
[22.81089592 7.57936954]
[32.13398361 19.45298004]
[37.90681839 33.40206528]
[39.70101929 48.39150620]
[37.38344193 63.30899429]
[51.03968430 69.51440430]
[64.69592285 75.71981049]
[78.35216522 81.92521667]
[87.80158997 74.57314301]
[99.44956970 71.80384064]
[103.15573120 57.26890182]
[106.86189270 42.73396683]
[110.56805420 28.19902992]
[114.27421570 13.66409397]
[100.86766052 6.79298353]
[89.32654572 -2.88949084]
[80.22975159 -14.89766121]
[74.03358459 -28.62920189]
[71.04883575 -43.39534378]
[71.42520905 -58.45542908]
[75.14384460 -73.05403900]
[82.01819611 -86.45892334]
[91.70346832 -97.99769592]
[103.71384430 -107.09157562]
[117.44688416 -113.28442383]
[132.21374512 -116.26559448]
[147.27374268 -115.88556671]
[161.87145996 -112.16339874]
[175.27467346 -105.28579712]
[186.81109619 -95.59772491]
[195.90206909 -83.58515167]
[202.09158325 -69.85060883]
[205.06918335 -55.08302307]
[204.68550110 -40.02312469]
[200.95979309 -25.42631340]
[194.07894897 -12.02476120]
[184.38809204 -0.49068350]
[172.37330627 8.59737587]
[158.63726807 14.78356266]
[143.86895752 17.75757980]
[128.80914307 17.37025452]
[125.10298920 31.90519142]
[121.39682770 46.44012833]
[117.69066620 60.97506332]
[113.98450470 75.51000214]
[118.75952148 78.94277191]
[122.71878052 83.29121399]
[125.69011688 88.36623383]
[140.50787354 86.03513336]
[155.32563782 83.70402527]
[167.75570679 73.91608429]
[181.53077698 79.58147430]
[196.34854126 77.25037384]
[208.75677490 66.52807617]
[224.15573120 72.16761780]
[226.70426941 88.36752319]
[213.78068542 98.46272278]
[198.67964172 92.06813049]
[183.86187744 94.39923859]
[172.49166870 104.02043915]
[157.65673828 98.52178192]
[142.83897400 100.85289001]
[128.02122498 103.18399048]
[121.43508148 118.32658386]
[107.50000000 127.18595886]
[107.50000000 142.18595886]
[122.05847168 146.12120056]
[135.09205627 153.68499756]
[145.71531677 164.35656738]
[153.20835876 177.40420532]
[157.06561279 191.93553162]
[157.02993774 206.95843506]
[153.10978699 221.44888306]
[145.57818604 234.42066956]
[134.95372009 244.99256897]
[121.96485901 252.44819641]
[107.50000000 256.28451538]
[107.50000000 271.28451538]
[107.50000000 286.28451538]
[107.50000000 301.28451538]
[107.50000000 316.28451538]
[107.50000000 331.28451538]
[107.50000000 346.28451538]
[107.50000000 361.28451538]
[107.50000000 376.28451538]
[107.50000000 391.28451538]
[122.03988647 395.34582520]
[134.94427490 403.18035889]
[145.25555420 414.20666504]
[152.20857239 427.60659790]
[155.28736877 442.38577271]
[154.26348877 457.44744873]
[149.21287537 471.67398071]
[140.51036072 484.00964355]
[128.80169678 493.53906250]
[114.95575714 499.55508423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 120]
[32 119]
[34 62]
[35 61]
[36 60]
[37 59]
[64 99]
[65 98]
[66 97]
[67 96]
[68 95]
[102 117]
[103 116]
[104 115]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
