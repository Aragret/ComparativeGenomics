%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAACUGAAGGGGGGGGGGCGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACxxxxxxxxxxCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACCCCCCCCCCCAUCAACUGCA\
) } def
/len { sequence length } bind def

/coor [
[94.23410797 392.90524292]
[80.21216583 387.35223389]
[68.01220703 378.48590088]
[58.40113449 366.86358643]
[51.98310852 353.21588135]
[49.16157150 338.40069580]
[50.11388779 323.34930420]
[54.78019333 309.00790405]
[62.86716080 296.27792358]
[73.86643219 285.95965576]
[87.08659363 278.70169067]
[101.69660187 274.96026611]
[101.69660187 259.96026611]
[101.69660187 244.96025085]
[101.69660187 229.96025085]
[101.69660187 214.96025085]
[101.69660187 199.96025085]
[101.69660187 184.96025085]
[101.69660187 169.96025085]
[101.69660187 154.96025085]
[101.69660187 139.96025085]
[85.68295288 132.15962219]
[76.56038666 119.37221527]
[62.99848938 125.78118896]
[57.90603256 140.74255371]
[43.68915176 147.64587402]
[28.78246117 142.39552307]
[22.02984047 128.10644531]
[27.43750000 113.25609589]
[41.79716873 106.65493011]
[56.58951187 112.21929169]
[70.15140533 105.81031799]
[72.24559021 87.57459259]
[84.45249176 73.86624146]
[80.19964600 59.48176575]
[75.94680023 45.09728241]
[71.69394684 30.71280289]
[64.20354462 43.70872116]
[50.17205811 49.01129532]
[35.95875931 44.21732330]
[28.00533295 31.49950027]
[29.91638374 16.62173653]
[40.82579803 6.32685089]
[55.78926849 5.28064013]
[68.02410889 13.95580959]
[65.87553406 -0.88951308]
[63.72695541 -15.73483562]
[61.12223053 -30.50695229]
[58.06383514 -45.19184875]
[55.00543976 -59.87674713]
[51.94704437 -74.56164551]
[46.16860962 -60.71932983]
[35.33653641 -50.34309769]
[21.25872231 -45.16476440]
[6.28478384 -46.04860687]
[-7.08609438 -52.84710693]
[-16.62228394 -64.42558289]
[-20.73217392 -78.85156250]
[-18.72981453 -93.71730804]
[-10.94940281 -106.54170990]
[1.31049168 -115.18433380]
[16.00366592 -118.20272064]
[30.67779732 -115.09307861]
[42.88374329 -106.37442017]
[50.58332443 -93.50473785]
[51.50673676 -108.47628784]
[52.43014908 -123.44783783]
[53.35356522 -138.41938782]
[54.27697754 -153.39093018]
[40.27719879 -159.16024780]
[28.91090393 -169.16455078]
[21.41102791 -182.31864929]
[18.59109688 -197.19570923]
[20.75699615 -212.18194580]
[27.67378807 -225.65179443]
[38.59119034 -236.14413452]
[52.32496262 -242.52082825]
[67.38536835 -244.09017944]
[82.13877106 -240.68197632]
[94.98482513 -232.66589355]
[104.53009033 -220.91146851]
[109.73917389 -206.69372559]
[110.04701996 -191.55490112]
[105.42024994 -177.13714600]
[96.36073303 -165.00437927]
[83.85117340 -156.47268677]
[69.24852753 -152.46751404]
[68.32511139 -137.49597168]
[67.40170288 -122.52442169]
[66.47828674 -107.55287170]
[65.55487061 -92.58132172]
[66.63194275 -77.62004089]
[69.69033813 -62.93514252]
[72.74873352 -48.25024414]
[75.80712891 -33.56534576]
[78.60221863 -31.32153511]
[80.42101288 -27.58501434]
[80.56147003 -22.84308624]
[78.57228088 -17.88341522]
[80.72085571 -3.03809214]
[82.86943817 11.80723095]
[86.07843018 26.45995522]
[90.33127594 40.84443665]
[94.58412170 55.22891617]
[98.83697510 69.61339569]
[117.16754913 71.11145782]
[132.97265625 83.65750122]
[139.73527527 104.56156158]
[154.69656372 105.63862610]
[161.47579956 92.03310394]
[172.94889832 82.06130981]
[187.36627197 77.24388123]
[202.52938843 78.31542969]
[216.12599182 85.11256409]
[226.08267212 96.59876251]
[230.88113403 111.02246094]
[229.78964233 126.18415833]
[222.97462463 139.77180481]
[211.47534180 149.71337891]
[197.04533386 154.49285889]
[181.88508606 153.38142395]
[168.30642700 146.54853821]
[158.37998962 135.03617859]
[153.61949158 120.59990692]
[138.65820312 119.52283478]
[133.16781616 124.63219452]
[147.50790405 129.03240967]
[150.86734009 143.65136719]
[139.88671875 153.87028503]
[125.54655457 149.47033691]
[122.18700409 134.85090637]
[116.69660187 139.96025085]
[116.69660187 154.96025085]
[116.69660187 169.96025085]
[116.69660187 184.96025085]
[116.69660187 199.96025085]
[116.69660187 214.96025085]
[116.69660187 229.96025085]
[116.69660187 244.96025085]
[116.69660187 259.96026611]
[116.69660187 274.96026611]
[131.30662537 278.70169067]
[144.52677917 285.95965576]
[155.52604675 296.27792358]
[163.61302185 309.00790405]
[168.27932739 323.34930420]
[169.23164368 338.40069580]
[166.41009521 353.21588135]
[159.99208069 366.86358643]
[150.38101196 378.48590088]
[138.18104553 387.35223389]
[124.15910339 392.90524292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 32]
[24 31]
[34 105]
[35 104]
[36 103]
[37 102]
[45 101]
[46 100]
[47 99]
[48 95]
[49 94]
[50 93]
[51 92]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[108 125]
[109 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
