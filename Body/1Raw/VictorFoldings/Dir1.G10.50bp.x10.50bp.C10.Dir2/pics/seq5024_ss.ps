%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCACUUCGGGGGGGGGGUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUxxxxxxxxxxAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCCCCCCCCCCCUUUCACUUC\
) } def
/len { sequence length } bind def

/coor [
[64.46385956 385.09085083]
[50.44191360 379.53784180]
[38.24195480 370.67150879]
[28.63088417 359.04922485]
[22.21285820 345.40151978]
[19.39132118 330.58633423]
[20.34363747 315.53494263]
[25.00994301 301.19351196]
[33.09690857 288.46356201]
[44.09618378 278.14529419]
[57.31634140 270.88732910]
[71.92635345 267.14587402]
[71.92635345 252.14587402]
[71.92635345 237.14587402]
[71.92635345 222.14587402]
[71.92635345 207.14587402]
[71.92635345 192.14587402]
[71.92635345 177.14587402]
[71.92635345 162.14587402]
[71.92635345 147.14587402]
[71.92635345 132.14587402]
[71.92635345 117.14588165]
[67.23255157 102.89919281]
[58.31640244 90.83675385]
[49.40025330 78.77432251]
[40.48410034 66.71189117]
[24.22694588 70.02908325]
[7.43844509 61.63728714]
[-1.62692511 42.74543762]
[-16.49352455 40.74938202]
[-31.36012268 38.75332260]
[-46.22672272 36.75726700]
[-61.09331894 34.76121140]
[-75.95991516 32.76515198]
[-83.56386566 45.92753983]
[-95.62907410 55.17412186]
[-110.31567383 59.09487152]
[-125.38406372 57.09189606]
[-138.53643799 49.47063446]
[-147.76713562 37.39328003]
[-151.66856384 22.70153618]
[-149.64576721 7.63578939]
[-142.00721741 -5.50654411]
[-129.91772461 -14.72135448]
[-115.22086334 -18.60344887]
[-100.15779114 -16.56083679]
[-87.02552032 -8.90500164]
[-77.82662201 3.19659781]
[-73.96385956 17.89855576]
[-59.09726334 19.89461136]
[-44.23066330 21.89066887]
[-29.36406517 23.88672638]
[-14.49746704 25.88278198]
[0.36913186 27.87883949]
[6.16365623 23.11717033]
[-8.50767899 19.99436188]
[-15.21375370 6.57689047]
[-8.90487862 -7.03186035]
[5.66834879 -10.58447075]
[17.53225708 -1.40581787]
[17.75270462 13.59383297]
[23.54722786 8.83216476]
[24.47064209 -6.13938570]
[25.39405632 -21.11093521]
[26.31746864 -36.08248520]
[19.44439507 -50.33279800]
[27.95052338 -62.55961609]
[28.87393570 -77.53116608]
[14.72566891 -82.85262299]
[2.77551484 -92.10925293]
[-5.91392469 -104.47796631]
[-10.56999111 -118.85894775]
[-10.77866936 -133.97343445]
[-6.52140570 -148.47747803]
[1.82324851 -161.08137512]
[13.51329136 -170.66438293]
[27.50925255 -176.37442017]
[42.56661987 -177.70373535]
[57.34650421 -174.53411865]
[70.53469086 -167.14743042]
[80.95848846 -156.20046997]
[87.69101715 -142.66665649]
[90.13363647 -127.74937439]
[88.06914520 -112.77509308]
[81.68112183 -99.07529449]
[71.53757477 -87.86815643]
[58.54046249 -80.15022278]
[43.84548569 -76.60774994]
[42.92207336 -61.63620377]
[49.86119461 -48.45675278]
[41.28902054 -35.15907288]
[40.36560440 -20.18752098]
[39.44219208 -5.21597195]
[38.51877975 9.75557804]
[59.98580551 32.58591080]
[52.54653549 57.79574203]
[61.46268463 69.85817719]
[70.37883759 81.92060852]
[79.29498291 93.98303986]
[87.12572479 83.89707184]
[98.80293274 80.36448669]
[109.83084869 84.06069946]
[116.34667206 93.00007629]
[131.33955383 93.46200562]
[146.33244324 93.92392731]
[151.01936340 79.56393433]
[159.56324768 67.10685730]
[171.27146912 57.56253433]
[185.19491577 51.70468903]
[200.20486450 50.00818253]
[215.08453369 52.61054993]
[228.62768555 59.30082321]
[239.73643494 69.53665924]
[247.51025391 82.48827362]
[251.31895447 97.10574341]
[250.85377502 112.20410156]
[246.15243530 126.55937958]
[237.59605408 139.00787354]
[225.87823486 148.54042053]
[211.94891357 154.38427734]
[196.93727112 156.06570435]
[182.06022644 153.44839478]
[168.52380371 146.74450684]
[157.42533875 136.49752808]
[149.66453552 123.53810120]
[145.87051392 108.91681671]
[130.87763977 108.45488739]
[115.88475037 107.99296570]
[109.44929504 116.53216553]
[98.65905762 120.25750732]
[86.92635345 117.14588165]
[86.92635345 132.14587402]
[86.92635345 147.14587402]
[86.92635345 162.14587402]
[86.92635345 177.14587402]
[86.92635345 192.14587402]
[86.92635345 207.14587402]
[86.92635345 222.14587402]
[86.92635345 237.14587402]
[86.92635345 252.14587402]
[86.92635345 267.14587402]
[101.53636932 270.88732910]
[114.75653076 278.14529419]
[125.75579834 288.46356201]
[133.84277344 301.19351196]
[138.50907898 315.53494263]
[139.46139526 330.58633423]
[136.63984680 345.40151978]
[130.22183228 359.04922485]
[120.61075592 370.67150879]
[108.41079712 379.53784180]
[94.38885498 385.09085083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 99]
[24 98]
[25 97]
[26 96]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[62 94]
[63 93]
[64 92]
[65 91]
[67 89]
[68 88]
[103 128]
[104 127]
[105 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
