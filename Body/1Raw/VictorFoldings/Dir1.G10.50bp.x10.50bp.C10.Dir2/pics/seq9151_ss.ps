%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCCUUCAGGGGGGGGGGCCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCxxxxxxxxxxAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCCCCCCCCCCCUCUCACUUCA\
) } def
/len { sequence length } bind def

/coor [
[88.98315430 451.48223877]
[76.42492676 443.13107300]
[66.33870697 431.91864014]
[59.35851288 418.54971313]
[55.92313004 403.86474609]
[56.24850464 388.78677368]
[60.31418991 374.26364136]
[67.86460876 361.20831299]
[78.42514038 350.44140625]
[91.33193207 342.63977051]
[105.77365875 338.29382324]
[105.14968109 323.30682373]
[104.52571106 308.31979370]
[103.90173340 293.33279419]
[103.27775574 278.34576416]
[102.65377808 263.35876465]
[102.02980042 248.37173462]
[101.40582275 233.38471985]
[100.78184509 218.39770508]
[100.15786743 203.41069031]
[85.04035187 194.38137817]
[78.26438904 177.95922852]
[82.69338989 160.59356689]
[96.75001526 149.22586060]
[95.50313568 134.27778625]
[94.25626373 119.32969666]
[82.55664062 109.94252777]
[67.69359589 111.96486664]
[52.83054733 113.98719788]
[47.08885574 128.23249817]
[34.98386765 137.68580627]
[19.77177238 139.80421448]
[5.54454041 134.01789856]
[-3.87077141 121.88333893]
[-5.94149256 106.66468048]
[-0.11060926 92.45565796]
[12.05340004 83.07842255]
[27.27847862 81.05541992]
[41.46915436 86.93080902]
[50.80821228 99.12415314]
[65.67125702 97.10182190]
[80.53430939 95.07948303]
[90.40003204 83.78047943]
[90.40003204 68.78047943]
[88.00759888 64.98077393]
[87.08392334 61.01619720]
[87.49460602 57.38119888]
[88.95484161 54.47229767]
[91.07592010 52.54658890]
[92.32279205 37.59850311]
[93.56967163 22.65041542]
[94.81654358 7.70232821]
[96.06341553 -7.24575901]
[97.31029510 -22.19384575]
[63.30223465 -48.11544037]
[59.59607315 -62.65037918]
[55.88991165 -77.18531036]
[50.25795364 -91.08786774]
[42.80304337 -104.10417938]
[35.34813309 -117.12049103]
[27.89322472 -130.13679504]
[14.77453518 -140.87626648]
[21.46269226 -156.45526123]
[38.28431320 -154.34117126]
[40.90953445 -137.59170532]
[48.36444473 -124.57540131]
[55.81935501 -111.55908966]
[63.27426529 -98.54277802]
[64.51861572 -113.49108124]
[71.63597107 -126.69498444]
[83.43899536 -135.95179749]
[97.95867920 -139.71728516]
[112.77281189 -137.36325073]
[125.41006470 -129.28240967]
[133.76226807 -116.82285309]
[136.43606567 -102.06307983]
[132.98542786 -87.46537018]
[123.98600006 -75.46495056]
[110.93907166 -68.06375122]
[96.02117920 -66.49645996]
[81.72094727 -71.02454376]
[70.42485046 -80.89147186]
[74.13101196 -66.35653687]
[77.83717346 -51.82160187]
[85.12351990 -50.04422379]
[106.98257446 -44.71207809]
[116.96530151 -55.90784454]
[126.94802856 -67.10360718]
[136.93075562 -78.29937744]
[134.50038147 -93.74694061]
[142.61235046 -107.11593628]
[157.43643188 -112.09392548]
[171.97315979 -106.33045959]
[179.35873413 -92.54686737]
[176.10591125 -77.25134277]
[163.75056458 -67.66596222]
[148.12652588 -68.31665039]
[138.14379883 -57.12088394]
[128.16107178 -45.92511749]
[118.17834473 -34.72935104]
[112.25837708 -20.94697189]
[111.01150513 -5.99888420]
[109.76463318 8.94920254]
[108.51775360 23.89728928]
[107.27088165 38.84537506]
[106.02400970 53.79346466]
[105.40003204 68.78047943]
[105.40003204 83.78047943]
[115.83984375 94.55128479]
[130.83253479 95.01933289]
[145.82522583 95.48737335]
[158.45527649 85.59487915]
[174.03033447 89.44161987]
[180.60253906 104.07670593]
[173.13026428 118.27334595]
[157.34559631 121.14109802]
[145.35719299 110.48007202]
[130.36450195 110.01202393]
[115.37179565 109.54398346]
[112.98345947 114.13390350]
[109.20435333 118.08281708]
[110.45122528 133.03089905]
[111.69809723 147.97898865]
[123.21272278 153.03170776]
[131.41920471 162.46324158]
[134.79225159 174.42640686]
[132.74528503 186.61285400]
[125.73139191 196.69848633]
[115.14488220 202.78671265]
[115.76885986 217.77372742]
[116.39283752 232.76074219]
[117.01681519 247.74775696]
[117.64079285 262.73477173]
[118.26477051 277.72180176]
[118.88874817 292.70880127]
[119.51272583 307.69583130]
[120.13670349 322.68283081]
[120.76068115 337.66986084]
[135.51368713 340.80029297]
[149.02432251 347.50204468]
[160.44329834 357.35385132]
[169.05281067 369.73635864]
[174.31166077 383.87127686]
[175.88926697 398.86999512]
[173.68646240 413.78973389]
[167.84172058 427.69259644]
[158.72242737 439.70465088]
[146.90185547 449.07083130]
[133.12304688 455.20230103]
[118.25215149 457.71371460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 123]
[25 122]
[26 121]
[27 42]
[28 41]
[29 40]
[43 108]
[44 107]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[55 84]
[56 83]
[57 82]
[58 68]
[59 67]
[60 66]
[61 65]
[86 100]
[87 99]
[88 98]
[89 97]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
