%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGCCAACAGGGGGGGGGGCAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCxxxxxxxxxxUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGCCCCCCCCCCGAUACCAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 375.10919189]
[71.19830322 369.09317017]
[59.48964310 359.56375122]
[50.78712082 347.22808838]
[45.73651886 333.00155640]
[44.71262741 317.93988037]
[47.79142761 303.16070557]
[54.74444962 289.76080322]
[65.05573273 278.73446655]
[77.96011353 270.89996338]
[92.50000000 266.83862305]
[92.50000000 251.83863831]
[92.50000000 236.83863831]
[92.50000000 221.83863831]
[92.50000000 206.83863831]
[92.50000000 191.83863831]
[92.50000000 176.83863831]
[92.50000000 161.83863831]
[92.50000000 146.83863831]
[92.50000000 131.83863831]
[92.50000000 116.83863831]
[78.56708527 96.51375580]
[97.59082794 75.12056732]
[89.86674500 62.26216888]
[82.14265442 49.40376663]
[74.41857147 36.54536057]
[54.74221420 36.42955780]
[38.80249023 25.11713219]
[32.28625870 6.82801294]
[37.41250992 -11.76274681]
[26.97269630 -22.53355408]
[14.70698166 -14.48981285]
[1.17051709 -8.85133171]
[-13.17039299 -5.81069231]
[-27.82203865 -5.47101545]
[-42.28029633 -7.84246063]
[-56.04798126 -12.84193325]
[-68.65194702 -20.29599380]
[-79.65932465 -29.94687462]
[-88.69242859 -41.46139145]
[-95.44166565 -54.44244766]
[-99.67618561 -68.44273376]
[-101.25177002 -82.98012543]
[-100.11572266 -97.55431366]
[-96.30865479 -111.66398621]
[-89.96301270 -124.82411194]
[-81.29850006 -136.58256531]
[-91.51197815 -147.56823730]
[-101.72546387 -158.55390930]
[-111.93894196 -169.53956604]
[-122.15242004 -180.52523804]
[-132.47962952 -191.40405273]
[-142.91943359 -202.17486572]
[-153.35925293 -212.94567871]
[-163.79905701 -223.71647644]
[-179.16450500 -230.88165283]
[-176.53291321 -247.63012695]
[-159.71049500 -249.73782349]
[-153.02825928 -234.15629578]
[-142.58843994 -223.38548279]
[-132.14863586 -212.61466980]
[-121.70881653 -201.84387207]
[-114.75011444 -199.21287537]
[-111.16675568 -190.73870850]
[-100.95327759 -179.75305176]
[-90.73979950 -168.76737976]
[-80.52631378 -157.78172302]
[-70.31283569 -146.79605103]
[-57.27870560 -154.92149353]
[-42.91086197 -160.36381531]
[-27.75528908 -162.91426086]
[-12.38828373 -162.47406006]
[2.60546923 -159.05813599]
[16.65513611 -152.79470825]
[29.22546577 -143.92041016]
[39.83718491 -132.77139282]
[48.08526611 -119.77059937]
[53.65439987 -105.41165924]
[56.33102417 -90.24021149]
[56.01153946 -74.83313751]
[52.70630264 -59.77663422]
[46.53929901 -45.64391327]
[37.74350357 -32.97336578]
[48.18331909 -22.20255852]
[57.45901489 -25.86400223]
[67.41179657 -26.48602104]
[77.07119751 -24.00796318]
[86.08872223 -35.99479675]
[85.27586365 -52.01724243]
[97.39084625 -62.53421021]
[113.14010620 -59.47798538]
[120.44214630 -45.19303513]
[113.69547272 -30.63755798]
[98.07555389 -26.97726440]
[89.05802917 -14.99043274]
[94.95582581 -4.70845175]
[96.72353363 7.09362841]
[94.06143188 18.80903244]
[87.27697754 28.82127762]
[95.00106049 41.67967987]
[102.72514343 54.53808212]
[110.44922638 67.39648438]
[107.89804077 52.61502838]
[114.09317017 38.95412445]
[126.89376068 31.13460159]
[141.87628174 31.85867500]
[153.86317444 40.87612152]
[158.71211243 55.07076263]
[154.74742126 69.53732300]
[143.33920288 79.27655029]
[128.42947388 80.92278290]
[142.92507935 84.77993774]
[152.13006592 72.68297577]
[165.26620483 65.03376007]
[180.33030701 62.99874115]
[195.02520752 66.88824463]
[207.11004639 76.10914612]
[214.74197388 89.25532532]
[216.75718689 104.32209015]
[212.84835815 119.01187134]
[203.61155701 131.08456421]
[190.45535278 138.69920349]
[175.38595581 140.69458008]
[160.70132446 136.76643372]
[148.64079285 127.51376343]
[141.04347229 114.34754944]
[139.06791687 99.27553558]
[124.57231903 95.41837311]
[119.22333527 110.09886169]
[107.50000000 116.83863831]
[107.50000000 131.83863831]
[107.50000000 146.83863831]
[107.50000000 161.83863831]
[107.50000000 176.83863831]
[107.50000000 191.83863831]
[107.50000000 206.83863831]
[107.50000000 221.83863831]
[107.50000000 236.83863831]
[107.50000000 251.83863831]
[107.50000000 266.83862305]
[122.03988647 270.89996338]
[134.94427490 278.73446655]
[145.25555420 289.76080322]
[152.20857239 303.16070557]
[155.28736877 317.93988037]
[154.26348877 333.00155640]
[149.21287537 347.22808838]
[140.51036072 359.56375122]
[128.80169678 369.09317017]
[114.95575714 375.10919189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 102]
[24 101]
[25 100]
[26 99]
[30 84]
[31 83]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 62]
[53 61]
[54 60]
[55 59]
[87 95]
[88 94]
[111 128]
[112 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
