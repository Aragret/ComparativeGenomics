%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUCAACUGGGGGGGGGGUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGxxxxxxxxxxUCUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCACCCCCCCCCCUUUCUCUACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 377.60995483]
[71.19830322 371.59393311]
[59.48964310 362.06451416]
[50.78712082 349.72885132]
[45.73651886 335.50231934]
[44.71262741 320.44064331]
[47.79142761 305.66149902]
[54.74444962 292.26156616]
[65.05573273 281.23522949]
[77.96011353 273.40072632]
[92.50000000 269.33941650]
[92.50000000 254.33940125]
[92.50000000 239.33940125]
[92.50000000 224.33940125]
[92.50000000 209.33940125]
[92.50000000 194.33940125]
[92.50000000 179.33940125]
[92.50000000 164.33940125]
[92.50000000 149.33940125]
[92.50000000 134.33940125]
[92.50000000 119.33940887]
[88.37515259 117.17922211]
[84.83607483 114.15338135]
[82.06110382 110.41436005]
[67.24334717 112.74546051]
[54.81327057 122.53340149]
[41.03820038 116.86801147]
[26.22043991 119.19911194]
[11.40268230 121.53022003]
[-3.41507530 123.86132050]
[-18.23283386 126.19242859]
[-28.80057716 138.26315308]
[-44.81946945 137.38302612]
[-54.00119019 124.22719574]
[-49.30230331 108.88770294]
[-34.32739639 103.13168335]
[-20.56393814 111.37466431]
[-5.74617910 109.04356384]
[9.07157898 106.71245575]
[23.88933754 104.38135529]
[38.70709610 102.05025482]
[50.07730865 92.42904663]
[64.91224670 97.92770386]
[79.73000336 95.59659576]
[87.87763214 83.16815186]
[102.24757385 79.37934875]
[109.15457153 66.06419373]
[116.06156921 52.74903870]
[122.96856689 39.43388367]
[129.03158569 25.71383095]
[134.22700500 11.64231205]
[139.42240906 -2.42920756]
[144.61782837 -16.50072670]
[149.81324768 -30.57224655]
[155.00866699 -44.64376450]
[153.45108032 -59.56267929]
[145.46116638 -72.25760651]
[137.47125244 -84.95253754]
[129.48132324 -97.64746857]
[121.49141693 -110.34239960]
[107.93733215 -120.52685547]
[113.97164154 -136.37057495]
[130.86663818 -134.95806885]
[134.18634033 -118.33231354]
[142.17625427 -105.63738251]
[150.16618347 -92.94245148]
[158.15609741 -80.24752045]
[166.14601135 -67.55259705]
[173.46775818 -65.92717743]
[172.54222107 -80.89859772]
[171.61668396 -95.87001801]
[170.69114685 -110.84143829]
[163.72657776 -124.12657166]
[163.30015564 -139.12051392]
[169.49844360 -152.77998352]
[181.06340027 -162.33256531]
[195.64770508 -165.83941650]
[210.29124451 -162.58874512]
[222.02185059 -153.24034119]
[228.45861816 -139.69161987]
[228.29508972 -124.69250488]
[221.56445312 -111.28733826]
[209.63215637 -102.19661713]
[202.45852661 -89.02319336]
[195.28489685 -75.84977722]
[188.11126709 -62.67635727]
[195.43301392 -61.05094147]
[208.04414368 -69.17248535]
[213.61016846 -76.49854279]
[221.00318909 -77.32862854]
[233.78054810 -85.18605804]
[246.55790710 -93.04347992]
[243.78581238 -107.96594238]
[246.59536743 -122.88140106]
[254.60661316 -135.77265930]
[266.73608398 -144.89627075]
[281.34338379 -149.01835632]
[296.45297241 -147.58142090]
[310.02139282 -140.77983093]
[320.21368408 -129.53340149]
[325.65136719 -115.36315155]
[325.59906006 -100.18548584]
[320.06384277 -86.05304718]
[309.79428101 -74.87714386]
[296.17929077 -68.16921997]
[281.06015015 -66.83646393]
[266.48162842 -71.05912781]
[254.41532898 -80.26612091]
[241.63796997 -72.40869904]
[228.86061096 -64.55126953]
[216.16567993 -56.56135559]
[203.55455017 -48.43981552]
[169.08018494 -39.44834900]
[163.88476562 -25.37683105]
[158.68934631 -11.30531120]
[153.49392700 2.76620793]
[148.29852295 16.83772659]
[143.10310364 30.90924644]
[157.28968811 26.03680611]
[170.84986877 32.44941330]
[176.08479309 46.50628281]
[170.02230835 60.22657013]
[156.10443115 65.82052612]
[142.23306274 60.11216736]
[136.28372192 46.34088516]
[129.37672424 59.65604019]
[122.46972656 72.97119141]
[115.56272888 86.28635406]
[120.15188599 104.91571045]
[107.50000000 119.33940887]
[107.50000000 134.33940125]
[107.50000000 149.33940125]
[107.50000000 164.33940125]
[107.50000000 179.33940125]
[107.50000000 194.33940125]
[107.50000000 209.33940125]
[107.50000000 224.33940125]
[107.50000000 239.33940125]
[107.50000000 254.33940125]
[107.50000000 269.33941650]
[122.03988647 273.40072632]
[134.94427490 281.23522949]
[145.25555420 292.26156616]
[152.20857239 305.66149902]
[155.28736877 320.44064331]
[154.26348877 335.50231934]
[149.21287537 349.72885132]
[140.51036072 362.06451416]
[128.80169678 371.59393311]
[114.95575714 377.60995483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 44]
[25 43]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[46 128]
[47 127]
[48 126]
[49 125]
[50 118]
[51 117]
[52 116]
[53 115]
[54 114]
[55 113]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[87 112]
[88 111]
[90 110]
[91 109]
[92 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
