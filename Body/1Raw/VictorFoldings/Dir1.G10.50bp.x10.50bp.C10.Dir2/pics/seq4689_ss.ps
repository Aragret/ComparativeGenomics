%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCAUCAGGGGGGGGGGCAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACxxxxxxxxxxUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCACCCCCCCCCCAUACUCAUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 356.58276367]
[71.19830322 350.56674194]
[59.48964310 341.03732300]
[50.78712082 328.70166016]
[45.73651886 314.47512817]
[44.71262741 299.41345215]
[47.79142761 284.63430786]
[54.74444962 271.23437500]
[65.05573273 260.20803833]
[77.96011353 252.37351990]
[92.50000000 248.31221008]
[92.50000000 233.31221008]
[92.50000000 218.31221008]
[92.50000000 203.31221008]
[92.50000000 188.31221008]
[92.50000000 173.31221008]
[92.50000000 158.31221008]
[92.50000000 143.31221008]
[92.50000000 128.31221008]
[92.50000000 113.31221008]
[86.32421112 109.05666351]
[73.97264099 100.54557800]
[67.79685211 96.29003143]
[53.78014374 101.63154602]
[39.76342773 106.97305298]
[34.80772781 121.80461121]
[21.45094681 129.93667603]
[5.99974442 127.52951813]
[-4.25029135 115.71974182]
[-4.45940781 100.08355713]
[5.47113371 88.00389099]
[20.85243607 85.18439484]
[34.42191696 92.95634460]
[48.43862915 87.61483002]
[62.45534134 82.27331543]
[75.72659302 81.94080353]
[87.29911804 85.88259888]
[96.06734467 93.35073853]
[101.26276398 79.27922058]
[106.45817566 65.20770264]
[111.65359497 51.13618088]
[98.23116302 57.83232880]
[83.41069031 55.51856613]
[72.66803741 45.04978180]
[69.97240448 30.29398537]
[76.31977081 16.70314598]
[89.36492157 9.29881191]
[104.28791809 10.81673527]
[115.57501984 20.69607353]
[119.05593109 35.28573608]
[126.51084137 22.26942635]
[128.07827759 13.20328140]
[134.25865173 9.06219578]
[141.98274231 -3.79620624]
[149.70683289 -16.65460777]
[157.43090820 -29.51301003]
[145.35539246 -38.43078613]
[134.18226624 -48.45604706]
[124.01269531 -59.49799347]
[114.93878937 -71.45663452]
[107.04273224 -84.22366333]
[100.39602661 -97.68345642]
[95.05886078 -111.71411896]
[91.07958221 -126.18857574]
[88.49422455 -140.97575378]
[87.32620239 -155.94174194]
[87.58609009 -170.95097351]
[89.27153015 -185.86753845]
[92.36727142 -200.55635071]
[96.84526825 -214.88438416]
[102.66497040 -228.72186279]
[109.77367401 -241.94346619]
[118.10699463 -254.42948914]
[127.58946228 -266.06680298]
[138.13520813 -276.75009155]
[149.64871216 -286.38250732]
[162.02572632 -294.87689209]
[175.15412903 -302.15628052]
[188.91505432 -308.15475464]
[203.18386841 -312.81799316]
[217.83134460 -316.10379028]
[232.72482300 -317.98233032]
[247.72943115 -318.43664551]
[262.70928955 -317.46258545]
[277.52871704 -315.06903076]
[292.05352783 -311.27758789]
[306.15216064 -306.12265015]
[319.69692993 -299.65087891]
[332.56515503 -291.92086792]
[344.64035034 -283.00265503]
[355.81314087 -272.97698975]
[365.98229980 -261.93466187]
[375.05575562 -249.97569275]
[382.95135498 -237.20838928]
[389.59756470 -223.74835205]
[394.93423462 -209.71749878]
[398.91296387 -195.24288940]
[401.49780273 -180.45561218]
[402.66528320 -165.48959351]
[402.40484619 -150.48036194]
[400.71884155 -135.56385803]
[397.62255859 -120.87516022]
[393.14404297 -106.54729462]
[387.32385254 -92.71002960]
[380.21466064 -79.48867035]
[371.88088989 -67.00296021]
[362.39797974 -55.36597443]
[351.85186768 -44.68309784]
[340.33801270 -35.05108261]
[327.96069336 -26.55715561]
[314.83200073 -19.27824402]
[301.07086182 -13.28026676]
[286.80187988 -8.61754417]
[272.15429688 -5.33230400]
[257.26074219 -3.45429826]
[242.25611877 -3.00053477]
[227.27629089 -3.97512317]
[212.45695496 -6.36923695]
[197.93228149 -10.16119385]
[183.83384705 -15.31665421]
[170.28930664 -21.78892517]
[162.56523132 -8.93052387]
[154.84114075 3.92787886]
[147.11706543 16.78628159]
[139.52714539 29.72433662]
[132.07223511 42.74064636]
[125.72511292 56.33159637]
[120.52969360 70.40311432]
[115.33428192 84.47463989]
[110.13886261 98.54615784]
[107.50000000 113.31221008]
[107.50000000 128.31221008]
[107.50000000 143.31221008]
[107.50000000 158.31221008]
[107.50000000 173.31221008]
[107.50000000 188.31221008]
[107.50000000 203.31221008]
[107.50000000 218.31221008]
[107.50000000 233.31221008]
[107.50000000 248.31221008]
[122.03988647 252.37351990]
[134.94427490 260.20803833]
[145.25555420 271.23437500]
[152.20857239 284.63430786]
[155.28736877 299.41345215]
[154.26348877 314.47512817]
[149.21287537 328.70166016]
[140.51036072 341.03732300]
[128.80169678 350.56674194]
[114.95575714 356.58276367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 35]
[24 34]
[25 33]
[38 130]
[39 129]
[40 128]
[41 127]
[50 126]
[51 125]
[53 124]
[54 123]
[55 122]
[56 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
