%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUCAUAGUAGGGGGGGGGGAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUxxxxxxxxxxAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAACCCCCCCCCCUUCUUCUUAGUA\
) } def
/len { sequence length } bind def

/coor [
[78.50217438 600.37304688]
[64.34157562 595.21807861]
[51.75182724 586.93585205]
[41.41188812 575.97308350]
[33.87937927 562.92095947]
[29.56051254 548.48333740]
[28.68820381 533.43890381]
[31.30949402 518.59887695]
[37.28302002 504.76367188]
[46.28664017 492.67932129]
[57.83479691 482.99752808]
[71.30471039 476.24044800]
[85.96997070 472.77249146]
[85.96997070 457.77249146]
[85.96997070 442.77249146]
[85.96997070 427.77249146]
[85.96997070 412.77249146]
[85.96997070 397.77249146]
[85.96997070 382.77249146]
[85.96997070 367.77249146]
[85.96997070 352.77249146]
[85.96997070 337.77249146]
[71.62062836 335.06124878]
[58.01482010 329.74548340]
[45.62104416 322.00662231]
[34.86635971 312.10946655]
[26.12167358 300.39334106]
[19.68896103 287.26022339]
[15.79082584 273.16116333]
[14.56280613 258.58062744]
[16.04865456 244.01995850]
[20.19878769 229.98007202]
[26.87193680 216.94429016]
[35.83995438 205.36160278]
[46.79561615 195.63133240]
[59.36314774 188.08923340]
[73.11110687 182.99603271]
[87.56719208 180.52830505]
[87.87120056 165.53138733]
[88.17520142 150.53446960]
[80.69743347 137.65299988]
[88.71283722 124.01247406]
[89.01683807 109.01555634]
[82.82334900 95.35390472]
[71.34354401 85.69915771]
[55.80188370 82.73819733]
[51.04155731 68.62477875]
[39.56175613 58.97003174]
[21.38425064 56.20263672]
[15.99308681 39.52860641]
[4.31997013 30.10850334]
[-7.35314655 20.68840027]
[-19.02626419 11.26829815]
[-35.30274200 9.26621437]
[-41.45716095 -5.93428421]
[-31.15838242 -18.69622803]
[-15.00090790 -15.89122391]
[-9.60616016 -0.40481904]
[2.06695628 9.01528358]
[13.74007320 18.43538666]
[25.41319084 27.85548973]
[37.50809479 26.89032173]
[47.31785965 34.69374466]
[49.21650314 47.49022675]
[60.69630432 57.14497375]
[75.41685486 59.41536713]
[80.99829102 74.21936035]
[92.47809601 83.87410736]
[87.03235626 69.89756012]
[81.58660889 55.92100906]
[70.31726837 46.02141953]
[63.38127136 32.72134399]
[61.71393967 17.81429863]
[65.54011536 3.31049132]
[74.34383392 -8.83424282]
[86.93791199 -16.98218918]
[101.62405396 -20.03460312]
[116.42183685 -17.57986450]
[129.33576965 -9.94899464]
[138.62443542 1.82898486]
[143.03524780 16.16581726]
[141.97340393 31.12818718]
[135.58209229 44.69842148]
[124.72319794 55.04658127]
[119.84833527 69.23233795]
[114.97347260 83.41809845]
[126.05258179 73.30606079]
[137.13168335 63.19401550]
[148.21080017 53.08197403]
[142.16812134 39.19799805]
[140.96345520 24.10404396]
[144.72749329 9.43738651]
[153.05191040 -3.21104169]
[165.03375244 -12.46923447]
[179.37332153 -17.33293152]
[194.51515198 -17.27455711]
[208.81680298 -12.30044174]
[220.72689819 -2.95014071]
[228.95355225 9.76209545]
[232.60438538 24.45733833]
[231.28338623 39.54155731]
[225.13383484 53.37852859]
[214.82279968 64.46732330]
[201.46875000 71.60511017]
[186.52023315 74.01763916]
[171.59872437 71.44320679]
[158.32283020 64.16108704]
[147.24372864 74.27312469]
[136.16462708 84.38516235]
[125.08551788 94.49720764]
[119.89596558 104.95500946]
[111.68093109 109.92090607]
[104.01375580 109.31956482]
[103.70975494 124.31648254]
[111.16577911 138.27062988]
[103.17211914 150.83847046]
[102.86811829 165.83538818]
[102.56411743 180.83232117]
[117.63763428 184.11564636]
[131.78259277 190.26127625]
[144.46134949 199.03364563]
[155.19239807 210.09741211]
[163.56863403 223.03025818]
[169.27276611 237.33897400]
[172.08937073 252.47836304]
[171.91304016 267.87185669]
[168.75227356 282.93368530]
[162.72912598 297.09091187]
[154.07447815 309.80551147]
[143.11921692 320.59451294]
[130.28155518 329.04864502]
[116.05104065 334.84765625]
[100.96997070 337.77249146]
[100.96997070 352.77249146]
[100.96997070 367.77249146]
[100.96997070 382.77249146]
[100.96997070 397.77249146]
[100.96997070 412.77249146]
[100.96997070 427.77249146]
[100.96997070 442.77249146]
[100.96997070 457.77249146]
[100.96997070 472.77249146]
[115.63523102 476.24044800]
[129.10514832 482.99752808]
[140.65330505 492.67932129]
[149.65692139 504.76367188]
[155.63044739 518.59887695]
[158.25173950 533.43890381]
[157.37942505 548.48333740]
[153.06056213 562.92095947]
[145.52806091 575.97308350]
[135.18812561 586.93585205]
[122.59837341 595.21807861]
[108.43776703 600.37304688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[38 118]
[39 117]
[40 116]
[42 114]
[43 113]
[44 68]
[45 67]
[47 65]
[48 64]
[50 61]
[51 60]
[52 59]
[53 58]
[86 110]
[87 109]
[88 108]
[89 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
