%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUUACCGGGGGGGGGGCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACxxxxxxxxxxUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCCCCCCCCCCCAUAUUUACC\
) } def
/len { sequence length } bind def

/coor [
[12.18986511 509.15066528]
[-1.65607321 503.13464355]
[-13.36473465 493.60522461]
[-22.06725883 481.26956177]
[-27.11786079 467.04302979]
[-28.14175224 451.98135376]
[-25.06295395 437.20220947]
[-18.10993195 423.80227661]
[-7.79864740 412.77593994]
[5.10573339 404.94143677]
[19.64562035 400.88012695]
[19.64562035 385.88012695]
[19.64562035 370.88012695]
[19.64562035 355.88012695]
[19.64562035 340.88012695]
[19.64562035 325.88012695]
[19.64562035 310.88012695]
[19.64562035 295.88012695]
[19.64562035 280.88012695]
[19.64562035 265.88012695]
[11.68601131 278.59408569]
[0.08726580 288.10559082]
[-13.93924999 293.42132568]
[-28.92861557 293.98605347]
[-43.31534958 289.74084473]
[-55.59691238 281.12902832]
[-64.49062347 269.05004883]
[-69.06762695 254.76539612]
[-68.84990692 239.76698303]
[-63.86019897 225.62121582]
[-54.61962891 213.80546570]
[-42.09327316 205.55377197]
[-27.58937645 201.72793579]
[-12.62271881 202.72752380]
[1.24359083 208.44815063]
[12.56136417 218.29232788]
[20.14858055 231.23196411]
[23.21296501 245.91865540]
[28.40838051 231.84713745]
[33.60379791 217.77561951]
[28.82330132 206.61970520]
[33.08692169 194.82817078]
[44.61170578 188.94316101]
[50.09873581 174.98277283]
[55.58576965 161.02238464]
[61.07279968 147.06199646]
[48.48102951 155.21351624]
[33.61498642 157.21372986]
[19.31646729 152.68025208]
[8.31877136 142.47973633]
[2.72421861 128.56208801]
[3.60226226 113.58779907]
[10.78505611 100.41937256]
[22.89953804 91.57407379]
[37.62990189 88.74276733]
[52.16030121 92.46668243]
[63.71310043 102.03396606]
[70.07986450 115.61573029]
[70.04386139 130.61424255]
[78.81006622 118.44239807]
[87.57627869 106.27056122]
[72.79724121 94.37146759]
[73.32341766 68.02552032]
[74.57028961 53.07743454]
[75.81716919 38.12934875]
[77.06404114 23.18126297]
[78.31091309 8.23317528]
[79.55779266 -6.71491146]
[65.60157776 -12.55266476]
[54.13372040 -22.41894150]
[46.27772141 -35.34714508]
[42.80322647 -50.07070160]
[44.05063629 -65.14714050]
[49.89773941 -79.09944153]
[59.77169800 -90.56068420]
[72.70516205 -98.40802002]
[87.43104553 -101.87265015]
[102.50664520 -100.61513519]
[116.45502472 -94.75868225]
[127.90964508 -84.87705231]
[135.74832153 -71.93833160]
[139.20307922 -57.21013260]
[137.93545532 -42.13537216]
[132.06967163 -28.19092560]
[122.18035889 -16.74292374]
[109.23638916 -8.91292667]
[94.50587463 -5.46803713]
[93.25900269 9.48005009]
[92.01213074 24.42813683]
[90.76525116 39.37622452]
[89.51837921 54.32431030]
[88.27150726 69.27239990]
[94.26492310 73.78116608]
[96.08082581 58.89148331]
[109.88357544 53.01918030]
[121.87057495 62.03648758]
[120.05494690 76.92620087]
[106.25175476 82.79869080]
[112.24517059 87.30745697]
[126.26187897 81.96594238]
[140.27859497 76.62443542]
[154.29530334 71.28292084]
[164.22122192 58.22886658]
[180.45297241 60.56606674]
[186.29270935 75.89021301]
[175.73303223 88.43713379]
[159.63682556 85.29962921]
[145.62010193 90.64114380]
[131.60339355 95.98265839]
[117.58668518 101.32417297]
[132.57853699 101.81819916]
[145.14086914 110.01502228]
[151.63137817 123.53808594]
[150.16824341 138.46655273]
[141.17565918 150.47212219]
[127.26093292 156.07392883]
[112.45843506 153.64779663]
[101.05995941 143.89717102]
[96.37034607 129.64909363]
[99.74811554 115.03677368]
[90.98190308 127.20861053]
[82.21569824 139.38044739]
[75.03318787 152.54902649]
[69.54615784 166.50941467]
[64.05912781 180.46980286]
[58.57209396 194.43019104]
[61.75152206 212.53741455]
[47.67531586 222.97102356]
[42.47990036 237.04254150]
[37.28448486 251.11405945]
[34.64561844 265.88012695]
[34.64561844 280.88012695]
[34.64561844 295.88012695]
[34.64561844 310.88012695]
[34.64561844 325.88012695]
[34.64561844 340.88012695]
[34.64561844 355.88012695]
[34.64561844 370.88012695]
[34.64561844 385.88012695]
[34.64561844 400.88012695]
[49.18550873 404.94143677]
[62.08988953 412.77593994]
[72.40116882 423.80227661]
[79.35419464 437.20220947]
[82.43299103 451.98135376]
[81.40910339 467.04302979]
[76.35849762 481.26956177]
[67.65597534 493.60522461]
[55.94731522 503.13464355]
[42.10137558 509.15066528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[38 130]
[39 129]
[40 128]
[43 126]
[44 125]
[45 124]
[46 123]
[59 122]
[60 121]
[61 120]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
