%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCUAGUCGGGGGGGGGGCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAAxxxxxxxxxxGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACCCCCCCCCCCAUACUAGUC\
) } def
/len { sequence length } bind def

/coor [
[29.95526314 223.32153320]
[21.82546043 218.33514404]
[14.04916382 212.81364441]
[6.66153669 206.78199768]
[-0.30401319 200.26748657]
[-6.81598759 193.29957581]
[-12.84493923 185.90974426]
[-18.36360550 178.13143921]
[-31.30166245 185.72134399]
[-39.28979492 199.37785339]
[-54.18256378 199.14407349]
[-67.12062073 206.73397827]
[-80.05867767 214.32388306]
[-92.83603668 222.18132019]
[-105.44716644 230.30285645]
[-118.05828857 238.42439270]
[-130.66941833 246.54594421]
[-143.28054810 254.66748047]
[-155.89167786 262.78903198]
[-168.50280762 270.91055298]
[-181.11393738 279.03210449]
[-185.90093994 294.34432983]
[-200.90869141 300.01416016]
[-214.62452698 291.69216919]
[-216.52684021 275.76229858]
[-205.15632629 264.44458008]
[-189.23547363 266.42098999]
[-176.62434387 258.29943848]
[-164.01321411 250.17790222]
[-151.40208435 242.05635071]
[-138.79095459 233.93481445]
[-126.17983246 225.81326294]
[-113.56870270 217.69172668]
[-100.95758057 209.57019043]
[-99.08129120 205.11428833]
[-94.35076141 201.81983948]
[-87.64858246 201.38583374]
[-74.71053314 193.79592896]
[-61.77247238 186.20600891]
[-54.70975494 173.09239197]
[-38.89157104 172.78329468]
[-25.95351410 165.19337463]
[-32.09397125 151.62991333]
[-36.77867889 137.49743652]
[-39.95600128 122.95172882]
[-41.59093094 108.15308380]
[-41.66544724 93.26457977]
[-40.17872620 78.45030212]
[-37.14715576 63.87351990]
[-32.60414124 49.69487381]
[-26.59975624 36.07061386]
[-19.20016670 23.15089607]
[-10.48692322 11.07809925]
[-0.55604887 -0.01472738]
[10.48301125 -10.00533295]
[22.50860023 -18.78361702]
[35.38819122 -26.25283623]
[48.97983932 -32.33067703]
[63.13375854 -36.95015335]
[77.69396973 -40.06036377]
[92.50000000 -41.62702560]
[92.50000000 -56.62702560]
[92.50000000 -71.62702942]
[84.76270294 -85.42720032]
[92.50000000 -98.15447235]
[92.50000000 -113.15447235]
[92.50000000 -128.15446472]
[78.24732971 -133.31559753]
[66.62139893 -143.04254150]
[59.02610016 -156.16075134]
[56.37859344 -171.08610535]
[58.99858856 -186.01632690]
[66.56970215 -199.14851379]
[78.17768860 -208.89686584]
[92.42082214 -214.08424377]
[107.57917786 -214.08424377]
[121.82231140 -208.89686584]
[133.43029785 -199.14851379]
[141.00140381 -186.01632690]
[143.62139893 -171.08610535]
[140.97390747 -156.16075134]
[133.37860107 -143.04254150]
[121.75267029 -133.31559753]
[107.50000000 -128.15446472]
[107.50000000 -113.15447235]
[107.50000000 -98.15447235]
[115.23729706 -85.42720032]
[107.50000000 -71.62702942]
[107.50000000 -56.62702560]
[107.50000000 -41.62702560]
[130.81912231 -38.43643570]
[153.28947449 -31.43324089]
[174.29220581 -20.81031609]
[193.24890137 -6.86022186]
[209.63748169 10.03285122]
[223.00659180 29.40365982]
[236.39286804 22.63554382]
[249.77915955 15.86742973]
[263.16543579 9.09931564]
[269.51657104 -5.63305473]
[285.03195190 -9.71384144]
[297.80947876 -0.01261492]
[298.04736328 16.02867508]
[285.56311035 26.10452271]
[269.93356323 22.48559952]
[256.54727173 29.25371552]
[243.16099548 36.02183151]
[229.77470398 42.78994370]
[236.68644714 62.16774750]
[240.72187805 82.34165955]
[241.79608154 102.88716125]
[239.88644409 123.37190247]
[254.52995300 126.62272644]
[269.17346191 129.87355042]
[283.81695557 133.12437439]
[297.01232910 124.42623901]
[312.47634888 127.68805695]
[321.03448486 140.97465515]
[317.60937500 156.40333557]
[304.23303223 164.82052612]
[288.84143066 161.23246765]
[280.56613159 147.76788330]
[265.92263794 144.51705933]
[251.27912903 141.26623535]
[236.63562012 138.01539612]
[233.77175903 147.11244202]
[230.30297852 155.99642944]
[226.24496460 164.62719727]
[221.61605835 172.96572876]
[216.43722534 180.97430420]
[210.73184204 188.61671448]
[204.52574158 195.85839844]
[197.84696960 202.66662598]
[190.72573853 209.01057434]
[183.19424438 214.86158752]
[175.28654480 220.19319153]
[167.03839111 224.98127747]
[158.48709106 229.20419312]
[149.67131042 232.84286499]
[140.63092041 235.88079834]
[131.40679932 238.30429077]
[122.04065704 240.10237122]
[112.57484436 241.26690674]
[103.05216980 241.79263306]
[93.51569366 241.67716980]
[84.00853729 240.92103577]
[74.57369232 239.52766418]
[65.25382996 237.50334167]
[56.09108734 234.85722351]
[47.12690353 231.60128784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 42]
[9 41]
[11 39]
[12 38]
[13 37]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[61 90]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[96 108]
[97 107]
[98 106]
[99 105]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
