%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCUAACCGGGGGGGGGGGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUAGxxxxxxxxxxGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCCCCCCCCCCCUCGCUAACC\
) } def
/len { sequence length } bind def

/coor [
[85.67416382 448.64816284]
[70.79082489 446.28533936]
[56.85379791 440.55331421]
[44.61469269 431.76123047]
[34.73354721 420.38317871]
[27.74324417 407.03280640]
[24.02075577 392.43008423]
[23.76683426 377.36248779]
[26.99517059 362.64260864]
[33.53166580 349.06430054]
[43.02381897 337.35977173]
[54.95972443 328.16027832]
[68.69569397 321.96188354]
[83.49096680 319.09893799]
[84.10679626 304.11157227]
[84.72261810 289.12423706]
[85.33844757 274.13687134]
[85.95426941 259.14950562]
[86.57009888 244.16215515]
[87.18592072 229.17480469]
[87.80174255 214.18745422]
[88.41757202 199.20010376]
[89.03339386 184.21275330]
[89.64922333 169.22540283]
[90.26504517 154.23803711]
[90.88087463 139.25068665]
[81.07570648 135.57592773]
[72.54840088 129.49890137]
[65.87476349 121.42996216]
[61.50542450 111.91397095]
[46.60097504 113.60437012]
[31.69652939 115.29476166]
[16.79208183 116.98516083]
[3.93331504 127.16279602]
[-11.20830345 120.86489868]
[-13.05637550 104.57022095]
[0.29023725 95.04132080]
[15.10168362 102.08071136]
[30.00613022 100.39031982]
[44.91057968 98.69992065]
[59.81502533 97.00952148]
[60.98103333 89.93544769]
[63.38222122 83.17996979]
[66.94258118 76.95694733]
[71.54940796 71.46337891]
[77.05686188 66.87316132]
[83.29059601 63.33160782]
[90.05329132 60.95082474]
[97.13085938 59.80617905]
[104.29924774 59.93391037]
[111.33154297 61.32997131]
[118.15512085 47.97187042]
[124.97869110 34.61376953]
[131.80226135 21.25567245]
[131.18966675 5.44633007]
[143.86973572 -2.36807752]
[150.69331360 -15.72617722]
[157.51689148 -29.08427620]
[164.20295715 -42.51172638]
[170.75083923 -56.00711060]
[177.29870605 -69.50249481]
[183.84657288 -82.99787903]
[190.39443970 -96.49326324]
[196.94232178 -109.98864746]
[184.39808655 -118.25286102]
[173.03990173 -128.08377075]
[163.06213379 -139.31315613]
[154.63549805 -151.74885559]
[147.90419006 -165.17810059]
[142.98339844 -179.37109375]
[139.95732117 -194.08496094]
[138.87773132 -209.06793213]
[139.76310730 -224.06362915]
[142.59829712 -238.81547546]
[147.33479309 -253.07101440]
[153.89155579 -266.58633423]
[162.15635681 -279.13018799]
[171.98780823 -290.48788452]
[183.21766663 -300.46511841]
[195.65377808 -308.89117432]
[209.08334351 -315.62182617]
[223.27656555 -320.54196167]
[237.99057007 -323.56732178]
[252.97360229 -324.64620972]
[267.96926880 -323.76013184]
[282.72094727 -320.92422485]
[296.97628784 -316.18704224]
[310.49130249 -309.62963867]
[323.03472900 -301.36422729]
[334.39199829 -291.53225708]
[344.36868286 -280.30191040]
[352.79412842 -267.86541748]
[359.52416992 -254.43553162]
[364.44360352 -240.24206543]
[367.46829224 -225.52792358]
[368.54644775 -210.54484558]
[367.65963745 -195.54922485]
[364.82302856 -180.79765320]
[360.08517456 -166.54255676]
[353.52716064 -153.02786255]
[345.26113892 -140.48480225]
[335.42861938 -129.12803650]
[324.19781494 -119.15186310]
[311.76089478 -110.72699738]
[298.33068848 -103.99761200]
[284.13699341 -99.07884979]
[269.42269897 -96.05487061]
[254.43957520 -94.97742462]
[239.44400024 -95.86494446]
[224.69256592 -98.70223999]
[210.43769836 -103.44077301]
[203.88983154 -89.94538879]
[197.34196472 -76.45000458]
[190.79408264 -62.95462418]
[184.24621582 -49.45923996]
[177.69834900 -35.96385574]
[177.60751343 -28.52719307]
[170.87498474 -22.26070023]
[164.05140686 -8.90260124]
[157.22782898 4.45549774]
[158.32850647 19.30937958]
[145.16036987 28.07924652]
[138.33679199 41.43734741]
[131.51321411 54.79544449]
[124.68964386 68.15354156]
[138.15660095 87.04434204]
[138.97605896 110.22945404]
[126.87641144 130.02388000]
[105.86822510 139.86651611]
[105.25240326 154.85386658]
[104.63657379 169.84121704]
[104.02075195 184.82856750]
[103.40492249 199.81593323]
[102.78910065 214.80328369]
[102.17327118 229.79063416]
[101.55744934 244.77798462]
[100.94161987 259.76535034]
[100.32579803 274.75268555]
[99.70996857 289.74005127]
[99.09414673 304.72738647]
[98.47832489 319.71475220]
[112.98883820 323.78189087]
[126.16999054 331.08627319]
[137.31092834 341.23400879]
[145.81082153 353.67779541]
[151.21130371 367.74661255]
[153.22113037 382.68173218]
[151.73190308 397.67767334]
[146.82394409 411.92581177]
[138.76193237 424.65768433]
[127.98063660 435.18670654]
[115.06147766 442.94503784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[30 41]
[31 40]
[32 39]
[33 38]
[51 125]
[52 124]
[53 123]
[54 122]
[56 120]
[57 119]
[58 118]
[59 116]
[60 115]
[61 114]
[62 113]
[63 112]
[64 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
