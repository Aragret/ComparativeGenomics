%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACCUCAGGGGGGGGGGCCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAxxxxxxxxxxCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCCCCCCCCCCCAUCAAACUCA\
) } def
/len { sequence length } bind def

/coor [
[85.11936951 408.69638062]
[71.89917755 401.42391968]
[61.01237106 390.97689819]
[53.20124054 378.06765747]
[48.99835968 363.57635498]
[48.69028473 348.49099731]
[52.29802704 333.84017944]
[59.57559967 320.62280273]
[70.02680969 309.74002075]
[82.93907166 301.93386841]
[97.43200684 297.73660278]
[97.11994934 282.73983765]
[96.80789185 267.74307251]
[96.49583435 252.74632263]
[96.18378448 237.74957275]
[95.87172699 222.75282288]
[95.55966949 207.75607300]
[95.24761200 192.75930786]
[94.93555450 177.76255798]
[94.62349701 162.76580811]
[94.31144714 147.76905823]
[92.31461334 145.71478271]
[91.03866577 142.72047424]
[90.85551453 139.06694031]
[92.02468109 135.16769409]
[94.64945984 131.52461243]
[95.58509064 116.55382538]
[86.69274139 104.47383118]
[72.12004089 100.91907501]
[57.54733658 97.36431122]
[42.97463226 93.80954742]
[28.40192986 90.25478363]
[10.88869762 95.84644318]
[-1.34744549 83.30543518]
[-15.99094677 80.05461121]
[-24.38628387 92.69908905]
[-36.78466797 101.45377350]
[-51.50932312 105.13465881]
[-66.56886292 103.24394989]
[-79.92659760 96.03733826]
[-89.77601624 84.48946381]
[-94.78505707 70.16207886]
[-94.27629089 54.99284363]
[-88.31852722 41.03327942]
[-77.71749878 30.17129707]
[-63.90691376 23.87589073]
[-48.75453568 22.99846458]
[-34.30960083 27.65768051]
[-22.52566910 37.22341919]
[-14.99641991 50.40199661]
[-12.74012089 65.41110992]
[1.90338027 68.66193390]
[12.31291103 62.42102432]
[24.57162666 65.05595398]
[31.95669174 75.68208313]
[46.52939606 79.23684692]
[61.10209656 82.79161072]
[75.67479706 86.34636688]
[90.24750519 89.90113068]
[104.57009888 85.44431305]
[114.55282593 74.24855042]
[124.53555298 63.05278397]
[134.51828003 51.85701752]
[144.50100708 40.66125107]
[154.48373413 29.46548653]
[164.46646118 18.26972198]
[174.44918823 7.07395506]
[164.50009155 -4.17557144]
[155.95137024 -16.52287292]
[148.92304993 -29.79461098]
[143.51379395 -43.80447388]
[139.79953003 -58.35578156]
[137.83239746 -73.24426270]
[137.64002991 -88.26089478]
[139.22511292 -103.19487762]
[142.56539917 -117.83656311]
[147.61399841 -131.98039246]
[154.30003357 -145.42782593]
[162.52963257 -157.99006653]
[172.18728638 -169.49076843]
[183.13740540 -179.76847839]
[195.22625732 -188.67890930]
[208.28416443 -196.09696960]
[222.12777710 -201.91854858]
[236.56277466 -206.06187439]
[251.38650513 -208.46882629]
[266.39086914 -209.10559082]
[281.36523438 -207.96322632]
[296.09936523 -205.05776978]
[310.38641357 -200.43002319]
[324.02584839 -194.14495850]
[336.82617188 -186.29077148]
[348.60769653 -176.97776794]
[359.20501709 -166.33665466]
[368.46936035 -154.51681519]
[376.27066040 -141.68421936]
[382.49945068 -128.01896667]
[387.06820679 -113.71293640]
[389.91287231 -98.96694183]
[390.99346924 -83.98800659]
[390.29483032 -68.98639679]
[387.82675171 -54.17271805]
[383.62393188 -39.75493240]
[377.74530029 -25.93544579]
[370.27343750 -12.90825748]
[361.31323242 -0.85625046]
[350.99044800 10.05138397]
[339.45001221 19.66152000]
[326.85394287 27.83924484]
[313.37902832 34.46975708]
[299.21450806 39.45997620]
[284.55917358 42.73984528]
[269.61877441 44.26332092]
[254.60305786 44.00901413]
[239.72282410 41.98049927]
[225.18696594 38.20624924]
[211.19952393 32.73925018]
[197.95689392 25.65624809]
[185.64495850 17.05668259]
[175.66223145 28.25244713]
[165.67950439 39.44821167]
[155.69677734 50.64397812]
[145.71405029 61.83974457]
[135.73132324 73.03550720]
[125.74859619 84.23127747]
[115.76586914 95.42704010]
[110.55588531 117.48944855]
[109.62025452 132.46023560]
[109.30819702 147.45700073]
[109.62025452 162.45375061]
[109.93231201 177.45050049]
[110.24436951 192.44725037]
[110.55641937 207.44401550]
[110.86847687 222.44076538]
[111.18053436 237.43751526]
[111.49259186 252.43426514]
[111.80464935 267.43103027]
[112.11670685 282.42776489]
[112.42875671 297.42453003]
[127.08375549 301.01528931]
[140.30955505 308.27755737]
[151.20442200 318.71615601]
[159.02552795 331.61935425]
[163.23959351 346.10742188]
[163.55931091 361.19253540]
[159.96289062 375.84613037]
[152.69552612 389.06912231]
[142.25273132 399.95996094]
[129.34649658 407.77609253]
[114.85680389 411.98455811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 128]
[27 127]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[34 52]
[35 51]
[60 126]
[61 125]
[62 124]
[63 123]
[64 122]
[65 121]
[66 120]
[67 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
