%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAACAGCUGGGGGGGGGGAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAxxxxxxxxxxAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACCCCCCCCCCCAAGAACACCU\
) } def
/len { sequence length } bind def

/coor [
[165.33779907 501.58514404]
[152.11759949 494.31265259]
[141.23080444 483.86566162]
[133.41966248 470.95642090]
[129.21678162 456.46508789]
[128.90872192 441.37976074]
[132.51644897 426.72894287]
[139.79402161 413.51153564]
[150.24523926 402.62878418]
[163.15750122 394.82263184]
[177.65043640 390.62533569]
[177.33837891 375.62860107]
[177.02632141 360.63183594]
[176.71426392 345.63507080]
[176.40220642 330.63833618]
[176.09014893 315.64157104]
[175.77809143 300.64480591]
[175.46603394 285.64807129]
[175.15399170 270.65130615]
[174.84193420 255.65455627]
[170.83418274 241.19987488]
[163.37927246 228.18356323]
[155.92436218 215.16725159]
[142.88491821 207.96850586]
[142.74038696 192.14796448]
[135.28547668 179.13165283]
[127.83056641 166.11534119]
[120.37565613 153.09902954]
[114.28276825 148.83026123]
[112.90427399 139.73347473]
[105.72177124 126.56488800]
[98.53926086 113.39630890]
[86.83963776 104.00914764]
[72.42742157 99.85125732]
[58.71066284 107.23288727]
[44.15385818 102.81089020]
[37.20113754 89.68856812]
[22.78892326 85.53067780]
[8.37670708 81.37279510]
[-6.03550911 77.21490479]
[-18.19537735 86.85426331]
[-33.70016479 87.47164154]
[-46.58796692 78.82963562]
[-51.90316010 64.25128937]
[-47.60194397 49.34225845]
[-35.33822250 39.83537674]
[-19.82764816 39.38623428]
[-7.03435421 48.16753387]
[-1.87762165 62.80268860]
[12.53459454 66.96057892]
[26.94680977 71.11846161]
[41.35902786 75.27635193]
[54.23306274 67.87400055]
[68.90832520 71.88538361]
[76.58530426 85.43904114]
[90.99752045 89.59693146]
[97.21724701 85.40586090]
[85.40136719 76.16545105]
[90.53823090 62.07245636]
[105.52884674 62.60295105]
[109.65668488 77.02371216]
[115.87640381 72.83264160]
[117.43398285 57.91373062]
[118.99156189 42.99481964]
[120.54914856 28.07590675]
[114.28666687 13.54690552]
[123.30372620 1.69186664]
[124.86130524 -13.22704601]
[126.41888428 -28.14595795]
[127.97646332 -43.06486893]
[114.45610809 -49.96156311]
[104.34304047 -61.27926254]
[99.00497437 -75.48734283]
[99.16383362 -90.66426849]
[104.79813385 -104.75749969]
[115.14588928 -115.86103058]
[128.80764771 -122.47320557]
[143.93576050 -123.69977570]
[158.48429871 -119.37487030]
[170.48565674 -110.08338928]
[178.31677246 -97.08192444]
[180.91854858 -82.12882233]
[177.93911743 -67.24636841]
[169.78141785 -54.44729233]
[157.54870605 -45.46256256]
[142.89537048 -41.50728989]
[141.33779907 -26.58837700]
[139.78021240 -11.66946507]
[138.22264099 3.24944758]
[144.59652710 16.71134949]
[135.46806335 29.63348770]
[133.91047668 44.55239868]
[132.35289001 59.47131348]
[130.79531860 74.39022827]
[111.70783997 106.21379852]
[118.89035034 119.38238525]
[126.07286072 132.55096436]
[133.39196777 145.64411926]
[140.84687805 158.66043091]
[148.30178833 171.67674255]
[155.75669861 184.69305420]
[169.32937622 192.82281494]
[168.94067383 207.71234131]
[176.39558411 220.72865295]
[183.85049438 233.74496460]
[184.23672485 218.74993896]
[188.13446045 204.26519775]
[195.32557678 191.10131836]
[205.40768433 179.99496460]
[217.81657410 171.56764221]
[231.85781860 166.29096985]
[246.74568176 164.46020508]
[261.64700317 166.17781067]
[275.72793579 171.34768677]
[288.20046997 179.68049622]
[298.36666870 190.70994568]
[305.65759277 203.81881714]
[309.66525269 218.27352905]
[310.16534424 233.26518250]
[307.12994385 247.95484924]
[300.72888184 261.52047729]
[291.32037354 273.20294189]
[279.43090820 282.34844971]
[265.72583008 288.44525146]
[250.97209167 291.15216064]
[235.99531555 290.31768799]
[221.63362122 285.98852539]
[208.69068909 278.40692139]
[197.89080811 267.99719238]
[189.83868408 255.34249878]
[190.15074158 270.33926392]
[190.46279907 285.33599854]
[190.77485657 300.33276367]
[191.08691406 315.32952881]
[191.39895630 330.32626343]
[191.71101379 345.32302856]
[192.02307129 360.31979370]
[192.33512878 375.31652832]
[192.64718628 390.31329346]
[207.30218506 393.90405273]
[220.52798462 401.16632080]
[231.42285156 411.60491943]
[239.24395752 424.50811768]
[243.45802307 438.99618530]
[243.77774048 454.08126831]
[240.18132019 468.73489380]
[232.91395569 481.95788574]
[222.47116089 492.84872437]
[209.56492615 500.66485596]
[195.07524109 504.87332153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 105]
[22 104]
[23 103]
[25 101]
[26 100]
[27 99]
[28 98]
[30 97]
[31 96]
[32 95]
[33 56]
[34 55]
[37 52]
[38 51]
[39 50]
[40 49]
[62 94]
[63 93]
[64 92]
[65 91]
[67 89]
[68 88]
[69 87]
[70 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
