%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGUCCUGGGGGGGGGGAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUxxxxxxxxxxCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCACCCCCCCCCCUCCUAGUCCU\
) } def
/len { sequence length } bind def

/coor [
[77.51793671 471.43521118]
[63.67199707 465.41918945]
[51.96333694 455.88977051]
[43.26081085 443.55410767]
[38.21020889 429.32757568]
[37.18631744 414.26589966]
[40.26511765 399.48672485]
[47.21813965 386.08679199]
[57.52942276 375.06048584]
[70.43380737 367.22595215]
[84.97369385 363.16464233]
[84.97369385 348.16464233]
[84.97369385 333.16464233]
[84.97369385 318.16464233]
[84.97369385 303.16464233]
[84.97369385 288.16464233]
[84.97369385 273.16464233]
[84.97369385 258.16464233]
[84.97369385 243.16465759]
[84.97369385 228.16465759]
[82.69200897 225.39672852]
[81.67261505 221.36404419]
[82.50505829 216.68864441]
[85.47093964 212.23632812]
[86.40657043 197.26553345]
[79.47820282 184.08042908]
[88.06122589 170.78974915]
[88.99685669 155.81895447]
[89.93247986 140.84815979]
[90.86811066 125.87737274]
[73.88410187 108.42553711]
[77.46678162 84.33846283]
[67.95842743 72.73712158]
[55.29941559 80.81708527]
[41.77359772 87.34307861]
[27.57085228 92.22348785]
[12.89056587 95.38980103]
[-2.06117487 96.79756927]
[-17.07447052 96.42702484]
[-31.93855858 94.28337097]
[-46.44477081 90.39669800]
[-60.38945770 84.82157898]
[-73.57686615 77.63626862]
[-85.82186127 68.94164276]
[-96.95253754 58.85976028]
[-106.81264496 47.53215408]
[-115.26376343 35.11784744]
[-122.18724060 21.79111862]
[-127.48590088 7.73905087]
[-131.08534241 -6.84108496]
[-132.93504333 -21.74460602]
[-133.00903320 -36.76229095]
[-131.30627441 -51.68331909]
[-127.85067749 -66.29821014]
[-122.69074249 -80.40180969]
[-115.89891052 -93.79611206]
[-107.57053375 -106.29309082]
[-97.82251740 -117.71730804]
[-86.79172516 -127.90837097]
[-74.63299561 -136.72323608]
[-61.51703262 -144.03813171]
[-47.62795639 -149.75039673]
[-33.16074753 -153.77981567]
[-18.31850243 -156.06982422]
[-3.30958724 -156.58828735]
[11.65529919 -155.32792664]
[26.36607361 -152.30641174]
[40.61621857 -147.56619263]
[54.20568466 -141.17379761]
[66.94369507 -133.21894836]
[78.65142822 -123.81335449]
[89.16453552 -113.08903503]
[98.33541107 -101.19654846]
[106.03532410 -88.30284119]
[112.15618134 -74.58892059]
[116.61204529 -60.24731827]
[119.34037018 -45.47935867]
[120.30284882 -30.49236488]
[119.48596954 -15.49673080]
[116.90121460 -0.70296937]
[112.58484650 13.68123627]
[106.59748077 27.45395470]
[99.02315521 40.42183685]
[89.96821594 52.40283585]
[79.55976868 63.22875977]
[89.06812286 74.83010101]
[96.34754944 72.80277252]
[103.90392303 72.83772278]
[111.16428375 74.93231964]
[117.57807922 78.92772675]
[122.65898895 84.52098083]
[136.88575745 79.76716614]
[151.11254883 75.01335144]
[165.33932495 70.25953674]
[179.56610107 65.50572205]
[184.30114746 60.74264145]
[189.89408875 59.34609985]
[194.48463440 60.86346817]
[208.89685059 56.70557785]
[223.30906677 52.54769135]
[225.80932617 37.49075317]
[234.60197449 25.01468849]
[247.94120789 17.59663200]
[263.17852783 16.70944405]
[277.28851318 22.52927399]
[287.46966553 33.90059280]
[291.70050049 48.56561661]
[289.14096069 63.61259460]
[280.29925537 76.05393219]
[266.93090820 83.41940308]
[251.69021606 84.24658203]
[237.60324097 78.37123108]
[227.46694946 66.95990753]
[213.05473328 71.11779785]
[198.64251709 75.27568054]
[184.31991577 79.73249817]
[170.09313965 84.48631287]
[155.86636353 89.24012756]
[141.63957214 93.99394226]
[127.41280365 98.74775696]
[126.17605591 108.23674774]
[121.75622559 116.72412109]
[114.69078064 123.17780304]
[105.83890533 126.81300354]
[104.90327454 141.78379822]
[103.96764374 156.75457764]
[103.03202057 171.72537231]
[109.89346313 185.98129272]
[101.37736511 198.20115662]
[100.44173431 213.17195129]
[99.97369385 228.16465759]
[99.97369385 243.16465759]
[99.97369385 258.16464233]
[99.97369385 273.16464233]
[99.97369385 288.16464233]
[99.97369385 303.16464233]
[99.97369385 318.16464233]
[99.97369385 333.16464233]
[99.97369385 348.16464233]
[99.97369385 363.16464233]
[114.51358032 367.22595215]
[127.41796112 375.06048584]
[137.72924805 386.08679199]
[144.68226624 399.48672485]
[147.76106262 414.26589966]
[146.73716736 429.32757568]
[141.68656921 443.55410767]
[132.98403931 455.88977051]
[121.27538300 465.41918945]
[107.42944336 471.43521118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[27 127]
[28 126]
[29 125]
[30 124]
[32 86]
[33 85]
[91 120]
[92 119]
[93 118]
[94 117]
[95 116]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
