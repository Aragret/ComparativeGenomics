%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGCGACUGGGGGGGGGGCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAxxxxxxxxxxUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCUACAAACAACUACCCCCCCCCCACCUGCCACU\
) } def
/len { sequence length } bind def

/coor [
[89.98466492 517.24023438]
[76.13872528 511.22418213]
[64.43006134 501.69476318]
[55.72753906 489.35910034]
[50.67693710 475.13256836]
[49.65304565 460.07089233]
[52.73184586 445.29174805]
[59.68486786 431.89181519]
[69.99614716 420.86547852]
[82.90053558 413.03097534]
[97.44042206 408.96966553]
[97.44042206 393.96966553]
[97.44042206 378.96966553]
[97.44042206 363.96966553]
[97.44042206 348.96966553]
[97.44042206 333.96966553]
[97.44042206 318.96966553]
[97.44042206 303.96966553]
[97.44042206 288.96966553]
[97.44042206 273.96966553]
[85.05965424 262.63058472]
[84.67158508 245.50942993]
[97.00142670 233.14366150]
[96.68936920 218.14691162]
[96.37731934 203.15016174]
[83.76333618 192.07110596]
[83.01916504 174.96173096]
[95.08908844 162.34213257]
[94.46511078 147.35511780]
[86.20507050 134.96072388]
[93.36161041 120.85063934]
[82.93267059 113.69392395]
[78.20622253 101.96183014]
[63.71062851 98.10467529]
[49.21503448 94.24751282]
[34.71943665 90.39035797]
[20.22383881 86.53319550]
[5.72824287 82.67603302]
[-8.84445953 79.12127686]
[-23.48796082 75.87044525]
[-38.13146210 72.61962128]
[-54.90452576 75.08957672]
[-61.92119980 59.65576172]
[-49.03295517 48.64079666]
[-34.88063812 57.97612000]
[-20.23713493 61.22694778]
[-5.59363413 64.47777557]
[-1.10667348 62.67702103]
[4.56248474 63.72198486]
[9.58540249 68.18044281]
[24.08099937 72.03759766]
[38.57659531 75.89476013]
[53.07219315 79.75191498]
[67.56778717 83.60907745]
[82.06338501 87.46623993]
[87.68612671 81.91172028]
[94.91537476 78.71704865]
[102.80797577 78.29901886]
[109.71497345 64.98386383]
[97.22717285 56.64612198]
[85.73239899 46.98519897]
[75.37019348 36.11837387]
[66.26634216 24.17755890]
[58.53136063 11.30770111]
[52.25914001 -2.33497000]
[47.52582550 -16.58484459]
[44.38887024 -31.26893997]
[42.88635635 -46.20900726]
[43.03651810 -61.22369003]
[44.83753967 -76.13072205]
[48.26755524 -90.74913788]
[53.28492355 -104.90149689]
[59.82874680 -118.41599274]
[67.81958008 -131.12857056]
[77.16043091 -142.88491821]
[87.73789978 -153.54232788]
[99.42359924 -162.97142029]
[112.07566071 -171.05772400]
[125.54051208 -177.70310974]
[139.65469360 -182.82687378]
[154.24687195 -186.36685181]
[169.13992310 -188.28004456]
[184.15304565 -188.54322815]
[199.10400391 -187.15322876]
[213.81130981 -184.12690735]
[228.09640503 -179.50100708]
[241.78590393 -173.33166504]
[254.71363831 -165.69380188]
[266.72265625 -156.68009949]
[277.66717529 -146.39999390]
[287.41436768 -134.97827148]
[295.84588623 -122.55359650]
[302.85937500 -109.27677155]
[308.36972046 -95.30897522]
[312.31002808 -80.81977081]
[314.63244629 -65.98502350]
[315.30880737 -50.98483658]
[314.33087158 -36.00128174]
[311.71054077 -21.21625519]
[307.47961426 -6.80922937]
[301.68942261 7.04490662]
[294.41030884 20.17797661]
[285.73059082 32.43055725]
[275.75564575 43.65391159]
[264.60656738 53.71179962]
[252.41867065 62.48212814]
[239.33993530 69.85843658]
[225.52911377 75.75117493]
[211.15385437 80.08882141]
[196.38867188 82.81871033]
[181.41278076 83.90770721]
[166.40798950 83.34259796]
[151.55642700 81.13024139]
[137.03840637 77.29748535]
[123.03012848 71.89086151]
[116.12313080 85.20601654]
[121.36183929 104.74227905]
[108.34862518 120.22666168]
[116.65329742 133.69302368]
[109.45212555 146.73114014]
[110.07610321 161.71815491]
[120.99885559 169.66493225]
[125.26822662 182.27445984]
[121.53103638 194.84855652]
[111.37406921 202.83810425]
[111.68612671 217.83485413]
[111.99818420 232.83160400]
[122.75325012 241.00389099]
[126.75936890 253.69952393]
[122.76139832 266.19314575]
[112.44042206 273.96966553]
[112.44042206 288.96966553]
[112.44042206 303.96966553]
[112.44042206 318.96966553]
[112.44042206 333.96966553]
[112.44042206 348.96966553]
[112.44042206 363.96966553]
[112.44042206 378.96966553]
[112.44042206 393.96966553]
[112.44042206 408.96966553]
[126.98030853 413.03097534]
[139.88468933 420.86547852]
[150.19596863 431.89181519]
[157.14898682 445.29174805]
[160.22779846 460.07089233]
[159.20390320 475.13256836]
[154.15330505 489.35910034]
[145.45077515 501.69476318]
[133.74211121 511.22418213]
[119.89617157 517.24023438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 127]
[24 126]
[25 125]
[28 121]
[29 120]
[31 118]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 47]
[40 46]
[41 45]
[58 116]
[59 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
