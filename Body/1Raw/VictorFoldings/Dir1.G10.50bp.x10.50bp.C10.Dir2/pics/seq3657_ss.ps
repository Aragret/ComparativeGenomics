%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCAACGGGGGGGGGGCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUxxxxxxxxxxCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCCCCCCCCCCCAACCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[54.99580765 372.11840820]
[41.14986801 366.10238647]
[29.44120789 356.57296753]
[20.73868370 344.23730469]
[15.68808174 330.01077271]
[14.66419029 314.94909668]
[17.74298859 300.16995239]
[24.69601059 286.77001953]
[35.00729370 275.74368286]
[47.91167450 267.90917969]
[62.45156479 263.84786987]
[62.45156479 248.84785461]
[62.45156479 233.84785461]
[62.45156479 218.84785461]
[62.45156479 203.84785461]
[62.45156479 188.84785461]
[62.45156479 173.84785461]
[62.45156479 158.84785461]
[62.45156479 143.84785461]
[62.45156479 128.84785461]
[62.45156479 113.84786224]
[52.12435913 102.96903992]
[37.14464188 102.18919373]
[22.16492844 101.40934753]
[7.18521500 100.62950134]
[-7.79449940 99.84965515]
[-12.02022552 114.31478882]
[-19.46846008 127.41518402]
[-29.73752975 138.44436646]
[-42.27363586 146.80755615]
[-56.40071869 152.05371094]
[-71.35692596 153.89993286]
[-86.33569336 152.24664307]
[-100.52922821 147.18301392]
[-113.17208862 138.98211670]
[-123.58246613 128.08621216]
[-131.19894409 115.08290100]
[-135.61076355 100.67343903]
[-136.58001709 85.63491821]
[-134.05442810 70.77832794]
[-128.17018127 56.90488434]
[-119.24463654 44.76275635]
[-107.75912476 35.00675201]
[-94.33303070 28.16300392]
[-79.69042969 24.60058594]
[-64.62096405 24.51161385]
[-49.93731308 27.90088463]
[-36.43135071 34.58562088]
[-24.83143616 44.20532608]
[-15.76313782 56.24121857]
[-9.71549606 70.04421234]
[-7.01465416 84.86994171]
[7.96506023 85.64978790]
[22.94477463 86.42963409]
[37.92448807 87.20948029]
[52.90420151 87.98931885]
[65.07604218 79.22311401]
[69.08377838 64.76842499]
[73.09152222 50.31373978]
[76.94867706 35.81814194]
[66.04403687 46.11808395]
[53.36924744 54.13990784]
[39.39317322 59.58686829]
[24.63282585 62.25747681]
[9.63422108 62.05293274]
[-5.04781055 58.98080826]
[-18.87014771 53.15474701]
[-31.32147217 44.79026794]
[-41.94118118 34.19679260]
[-50.33642960 21.76619148]
[-56.19665909 7.95830584]
[-59.30508804 -6.71608305]
[-59.54672241 -21.71413612]
[-56.91263199 -36.48104477]
[-51.50025177 -50.47054672]
[-43.50979996 -63.16513824]
[-33.23685837 -74.09522247]
[-21.06145096 -82.85646820]
[-7.43396854 -89.12477875]
[7.14147758 -92.66827393]
[22.12570953 -93.35587311]
[36.96442795 -91.16214752]
[51.10871506 -86.16823578]
[64.03533936 -78.55888367]
[75.26612854 -68.61557007]
[84.38562012 -56.70612335]
[91.05646515 -43.27109909]
[95.03189850 -28.80749321]
[96.16485596 -13.85034084]
[94.41342926 1.04705834]
[89.84500885 15.32756996]
[101.34680939 5.69904375]
[112.84860992 -3.92948270]
[124.35041809 -13.55800915]
[129.46575928 -29.13893700]
[145.57017517 -32.23408890]
[156.09681702 -19.65943527]
[150.21678162 -4.35070562]
[133.97894287 -2.05620551]
[122.47714233 7.57232046]
[110.97533417 17.20084763]
[99.47353363 26.82937241]
[91.48361969 39.52430344]
[92.88763428 46.83008194]
[87.54621124 54.32147980]
[83.53846741 68.77616882]
[79.53073120 83.23085785]
[106.27318573 76.82420349]
[121.29096985 96.61490631]
[135.99893188 99.56038666]
[144.12939453 86.74399567]
[156.34297180 77.73327637]
[170.98786926 73.74685669]
[186.08348083 75.32386017]
[199.58824158 82.25102234]
[209.67576599 93.59149170]
[214.98179626 107.81156921]
[214.78871155 122.98810577]
[209.12265015 137.06858826]
[198.74989319 148.14875793]
[185.07325745 154.73011780]
[169.94241333 155.92257690]
[155.40367126 151.56488037]
[143.42329407 142.24636841]
[135.62150574 129.22727966]
[133.05345154 114.26834869]
[118.34548950 111.32286835]
[107.70240021 121.87630463]
[91.70285034 123.39944458]
[77.45156097 113.84786224]
[77.45156097 128.84785461]
[77.45156097 143.84785461]
[77.45156097 158.84785461]
[77.45156097 173.84785461]
[77.45156097 188.84785461]
[77.45156097 203.84785461]
[77.45156097 218.84785461]
[77.45156097 233.84785461]
[77.45156097 248.84785461]
[77.45156097 263.84786987]
[91.99144745 267.90917969]
[104.89582825 275.74368286]
[115.20711517 286.77001953]
[122.16013336 300.16995239]
[125.23893738 314.94909668]
[124.21504211 330.01077271]
[119.16444397 344.23730469]
[110.46192169 356.57296753]
[98.75325775 366.10238647]
[84.90731812 372.11840820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[57 107]
[58 106]
[59 105]
[60 103]
[91 102]
[92 101]
[93 100]
[94 99]
[109 127]
[110 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
