%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUACACCAACCAGGGGGGGGGGCCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAxxxxxxxxxxCCCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUCCCCCCCCCCAUAUACACCAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 430.55664062]
[70.66226196 426.04989624]
[57.50136948 418.74401855]
[46.08077240 408.93817139]
[36.86813354 397.03387451]
[30.24070549 383.51861572]
[26.46987534 368.94583130]
[25.71005821 353.91229248]
[27.99236870 339.03359985]
[33.22334671 324.91900635]
[41.18878555 312.14648438]
[51.56250763 301.23913574]
[63.91971207 292.64352417]
[77.75438690 286.71166992]
[92.50000000 283.68649292]
[92.50000000 268.68649292]
[92.50000000 253.68650818]
[92.50000000 238.68650818]
[92.50000000 223.68650818]
[92.50000000 208.68650818]
[92.50000000 193.68650818]
[92.50000000 178.68650818]
[92.50000000 163.68650818]
[92.50000000 148.68650818]
[66.03819275 135.68223572]
[51.74319839 109.89479828]
[36.76149750 110.63543701]
[21.77979279 111.37607574]
[18.25831985 126.06539154]
[10.73983574 139.16688538]
[-0.16616680 149.61846924]
[-13.57558918 156.57290649]
[-28.40138817 159.46640015]
[-43.44170380 158.06440735]
[-57.47728729 152.48059082]
[-69.37033081 143.16757202]
[-78.15672302 130.88034058]
[-83.12419128 116.61496735]
[-83.87004089 101.52787781]
[-80.33380890 86.84210968]
[-72.80216980 73.74817657]
[-61.88567352 63.30754471]
[-48.46927261 56.36659241]
[-33.64057159 53.48798752]
[-18.60167313 54.90508652]
[-4.57170773 60.50301361]
[7.31197500 69.82796478]
[16.08601952 82.12401581]
[21.03915215 96.39437866]
[36.02085495 95.65373230]
[51.00255966 94.91309357]
[52.42522812 87.22240448]
[55.04716873 79.85381317]
[58.80228806 72.99307251]
[63.59592056 66.81311798]
[69.30723572 61.46975327]
[75.79225922 57.09766006]
[82.88751221 53.80705261]
[90.41413879 51.68088531]
[98.18240356 50.77275085]
[105.99649048 51.10554504]
[113.65941620 52.67087555]
[120.97801208 55.42928696]
[129.35771179 42.98820114]
[137.73741150 30.54711533]
[146.11712646 18.10602951]
[153.74508667 5.19037533]
[160.59452820 -8.15448093]
[167.44396973 -21.49933815]
[174.29339600 -34.84419250]
[162.03692627 -43.53668213]
[151.14231873 -53.88503647]
[141.83139038 -65.67857361]
[134.29371643 -78.67719269]
[128.68273926 -92.61626434]
[125.11268616 -107.21199799]
[123.65624237 -122.16725159]
[124.34306335 -137.17755127]
[127.15917206 -151.93730164]
[132.04722595 -166.14602661]
[138.90769958 -179.51443481]
[147.60095215 -191.77038574]
[157.94998169 -202.66433716]
[169.74409485 -211.97453308]
[182.74317932 -219.51141357]
[196.68260193 -225.12152100]
[211.27854919 -228.69067383]
[226.23390198 -230.14619446]
[241.24415588 -229.45843506]
[256.00372314 -226.64141846]
[270.21215820 -221.75248718]
[283.58013916 -214.89117432]
[295.83554077 -206.19717407]
[306.72888184 -195.84747314]
[316.03833008 -184.05278015]
[323.57440186 -171.05322266]
[329.18365479 -157.11346436]
[332.75189209 -142.51728821]
[334.20648193 -127.56185913]
[333.51782227 -112.55164337]
[330.69989014 -97.79223633]
[325.81005859 -83.58412170]
[318.94793701 -70.21656036]
[310.25317383 -57.96168900]
[299.90280151 -47.06900787]
[288.10751343 -37.76027679]
[275.10751343 -30.22501183]
[261.16738892 -24.61661720]
[246.57099915 -21.04927635]
[231.61547852 -19.59561157]
[216.60530090 -20.28522301]
[201.84606934 -23.10406685]
[187.63825989 -27.99475479]
[180.78881836 -14.64989853]
[173.93937683 -1.30504251]
[167.08995056 12.03981400]
[181.74343872 8.83432007]
[194.46926880 16.77491379]
[198.03063965 31.34600258]
[190.40228271 44.26142883]
[175.92224121 48.17655182]
[162.82489014 40.86495590]
[158.55821228 26.48573112]
[150.17849731 38.92681503]
[141.79879761 51.36790085]
[133.41909790 63.80898666]
[141.31356812 73.17063904]
[146.65490723 84.19031525]
[149.11300659 96.18701935]
[148.53596497 108.41936493]
[144.95945740 120.13139343]
[138.60449219 130.59931946]
[129.86381531 139.17625427]
[119.27757263 145.33212280]
[107.50000000 148.68650818]
[107.50000000 163.68650818]
[107.50000000 178.68650818]
[107.50000000 193.68650818]
[107.50000000 208.68650818]
[107.50000000 223.68650818]
[107.50000000 238.68650818]
[107.50000000 253.68650818]
[107.50000000 268.68649292]
[107.50000000 283.68649292]
[122.24561310 286.71166992]
[136.08029175 292.64352417]
[148.43750000 301.23913574]
[158.81121826 312.14648438]
[166.77665710 324.91900635]
[172.00762939 339.03359985]
[174.28994751 353.91229248]
[173.53012085 368.94583130]
[169.75929260 383.51861572]
[163.13186646 397.03387451]
[153.91921997 408.93817139]
[142.49862671 418.74401855]
[129.33773804 426.04989624]
[114.97548676 430.55664062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[26 51]
[27 50]
[28 49]
[63 126]
[64 125]
[65 124]
[66 123]
[67 116]
[68 115]
[69 114]
[70 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
