%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUCCCUCGGGGGGGGGGUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGxxxxxxxxxxCCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUCCCCCCCCCCACCUUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[41.21638870 471.49359131]
[27.37045097 465.47756958]
[15.66178989 455.94815063]
[6.95926571 443.61248779]
[1.90866363 429.38595581]
[0.88477236 414.32427979]
[3.96357131 399.54513550]
[10.91659260 386.14520264]
[21.22787666 375.11886597]
[34.13225937 367.28436279]
[48.67214584 363.22305298]
[48.67214584 348.22305298]
[48.67214584 333.22305298]
[48.67214584 318.22305298]
[48.67214584 303.22305298]
[48.67214584 288.22305298]
[48.67214584 273.22305298]
[48.67214584 258.22305298]
[48.67214584 243.22303772]
[48.67214584 228.22303772]
[40.83630371 241.01365662]
[29.63379288 250.98880005]
[16.02360916 257.29458618]
[1.17085576 259.39117432]
[-13.65299129 257.09912109]
[-27.17893028 250.61460876]
[-38.24906921 240.49275208]
[-45.91574860 227.60003662]
[-49.52265167 213.04014587]
[-48.76101303 198.05949402]
[-43.69603348 183.94050598]
[-34.76130295 171.89183044]
[-22.72167969 162.94490051]
[-8.60781956 157.86563110]
[6.37205267 157.08883667]
[20.93558121 160.68099976]
[33.83604813 168.33462524]
[43.96910858 179.39450073]
[50.46731186 192.91387939]
[52.77441025 207.73881531]
[58.55068207 193.89559937]
[64.32695770 180.05236816]
[70.10322571 166.20915222]
[75.29864502 152.13763428]
[79.90420532 137.86218262]
[84.50977325 123.58671570]
[89.11533356 109.31125641]
[86.36794281 95.60201263]
[96.60919952 86.08317566]
[101.21476746 71.80771637]
[105.82033539 57.53225708]
[110.12791443 43.16407394]
[114.13565826 28.70938492]
[118.14339447 14.25469685]
[114.37454987 -1.11105490]
[125.23107147 -11.30836582]
[111.33493042 -17.00341034]
[98.20990753 -24.30205917]
[86.04027557 -33.10184860]
[74.99685669 -43.27924347]
[65.23470306 -54.69137192]
[56.89084625 -67.17801666]
[50.08242416 -80.56389618]
[44.90502167 -94.66109467]
[41.43131638 -109.27169800]
[39.71007156 -124.19059753]
[39.76545715 -139.20835876]
[41.59669113 -154.11416626]
[45.17807007 -168.69874573]
[50.45930862 -182.75737000]
[57.36627579 -196.09266663]
[65.80200195 -208.51744080]
[75.64807129 -219.85725403]
[86.76625061 -229.95291138]
[99.00046539 -238.66270447]
[112.17895508 -245.86434937]
[126.11672974 -251.45674133]
[140.61811829 -255.36137390]
[155.47953796 -257.52343750]
[170.49235535 -257.91259766]
[185.44583130 -256.52334595]
[200.13003540 -253.37522888]
[214.33880615 -248.51242065]
[227.87269592 -242.00318909]
[240.54171753 -233.93891907]
[252.16798401 -224.43280029]
[262.58831787 -213.61831665]
[271.65640259 -201.64726257]
[279.24496460 -188.68769836]
[285.24743652 -174.92156982]
[289.57958984 -160.54209900]
[292.18060303 -145.75119019]
[293.01391602 -130.75645447]
[292.06790161 -115.76841736]
[289.35577393 -100.99747467]
[284.91567993 -86.65098572]
[278.80987549 -72.93035889]
[271.12411499 -60.02820587]
[261.96630859 -48.12565613]
[251.46498108 -37.38980484]
[239.76756287 -27.97135925]
[227.03829956 -20.00254440]
[213.45585632 -13.59523010]
[199.21092224 -8.83936501]
[184.50347900 -5.80171251]
[169.53997803 -4.52491760]
[154.53050232 -5.02690411]
[139.68576050 -7.30062532]
[143.74127197 7.03123093]
[132.59808350 18.26243782]
[128.59034729 32.71712494]
[124.58260345 47.17181396]
[126.14764404 51.74632645]
[124.80935669 57.35349274]
[120.09579468 62.13782120]
[115.49022675 76.41328430]
[110.88466644 90.68874359]
[113.63205719 104.39798737]
[103.39080048 113.91682434]
[98.78523254 128.19227600]
[94.17966461 142.46774292]
[89.57410431 156.74320984]
[90.68432617 161.09393311]
[90.34610748 165.15061951]
[88.83917999 168.48394775]
[86.55633545 170.80398560]
[83.94644165 171.98542786]
[78.17017365 185.82864380]
[72.39389801 199.67185974]
[66.61763000 213.51507568]
[63.67214584 228.22303772]
[63.67214584 243.22303772]
[63.67214584 258.22305298]
[63.67214584 273.22305298]
[63.67214584 288.22305298]
[63.67214584 303.22305298]
[63.67214584 318.22305298]
[63.67214584 333.22305298]
[63.67214584 348.22305298]
[63.67214584 363.22305298]
[78.21202850 367.28436279]
[91.11640930 375.11886597]
[101.42769623 386.14520264]
[108.38072205 399.54513550]
[111.45951843 414.32427979]
[110.43562317 429.38595581]
[105.38502502 443.61248779]
[96.68250275 455.94815063]
[84.97383881 465.47756958]
[71.12789917 471.49359131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[40 130]
[41 129]
[42 128]
[43 127]
[44 122]
[45 121]
[46 120]
[47 119]
[49 117]
[50 116]
[51 115]
[52 112]
[53 111]
[54 110]
[56 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
