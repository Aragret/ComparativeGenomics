%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUAGCAGGGGGGGGGGGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACxxxxxxxxxxCCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGACCCCCCCCCCAUAAUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[63.78749466 396.27987671]
[49.94155502 390.26385498]
[38.23289490 380.73443604]
[29.53037071 368.39877319]
[24.47976875 354.17224121]
[23.45587730 339.11056519]
[26.53467560 324.33142090]
[33.48769760 310.93148804]
[43.79898071 299.90515137]
[56.70336151 292.07064819]
[71.24324799 288.00933838]
[71.24324799 273.00933838]
[71.24324799 258.00933838]
[71.24324799 243.00932312]
[71.24324799 228.00932312]
[71.24324799 213.00932312]
[71.24324799 198.00932312]
[71.24324799 183.00932312]
[71.24324799 168.00932312]
[71.24324799 153.00932312]
[63.50595093 140.28205872]
[71.24324799 126.48188019]
[71.24324799 111.48188019]
[69.22091675 96.61883545]
[65.21317291 82.16414642]
[61.20543671 67.70945740]
[57.19769669 53.25477219]
[53.18995285 38.80008316]
[49.18221283 24.34539413]
[45.17447281 9.89070511]
[27.98997498 -15.97608852]
[17.77649689 -26.96175385]
[7.56301594 -37.94741821]
[-5.15651703 -29.91936302]
[-19.13096809 -24.36680222]
[-33.88386917 -21.47747231]
[-48.91249847 -21.34834099]
[-63.70502090 -23.98233604]
[-77.75789642 -29.28831291]
[-90.59304810 -37.08419418]
[-101.77411652 -47.10321808]
[-110.92128754 -59.00308609]
[-117.72418976 -72.37762451]
[-121.95244598 -86.77067566]
[-123.46346283 -101.69164276]
[-122.20724487 -116.63221741]
[-118.22801971 -131.08369446]
[-111.66274261 -144.55427551]
[-102.73630524 -156.58586121]
[-112.94978333 -167.57151794]
[-123.16326141 -178.55718994]
[-133.37673950 -189.54284668]
[-148.32902527 -186.03218079]
[-163.02877808 -190.48335266]
[-173.52183533 -201.69903564]
[-176.98561096 -216.66224670]
[-172.48838806 -231.34797668]
[-161.23988342 -241.80581665]
[-146.26588440 -245.22268677]
[-131.59432983 -240.67944336]
[-121.17178345 -229.39820862]
[-117.80187225 -214.41357422]
[-122.39107513 -199.75633240]
[-112.17759705 -188.77067566]
[-101.96411896 -177.78500366]
[-91.75064087 -166.79933167]
[-79.10150909 -174.82678223]
[-65.18896484 -180.39462280]
[-50.48628616 -183.31188965]
[-35.49390793 -183.47779846]
[-20.72241783 -180.88522339]
[-6.67513180 -175.62101746]
[6.16902447 -167.86308289]
[17.37186050 -157.87440491]
[26.55086899 -145.99403381]
[33.39228058 -132.62571716]
[37.66179276 -118.22405243]
[39.21259308 -103.27909851]
[37.99040985 -88.29969025]
[34.03540421 -73.79609680]
[27.48085785 -60.26264954]
[18.54868126 -48.16090012]
[28.76216125 -37.17523193]
[38.97563934 -26.18956947]
[53.97563934 -26.18956947]
[64.18911743 -37.17523193]
[74.40260315 -48.16090012]
[84.61608124 -59.14656448]
[80.02687836 -73.80380249]
[83.39678955 -88.78843689]
[93.81932831 -100.06967163]
[108.49088287 -104.61291504]
[123.46488190 -101.19605255]
[134.71339417 -90.73819733]
[139.21061707 -76.05247498]
[135.74682617 -61.08926010]
[125.25377655 -49.87358856]
[110.55403137 -45.42241287]
[95.60174561 -48.93308258]
[85.38826752 -37.94741821]
[75.17478180 -26.96175385]
[64.96130371 -15.97608852]
[79.43258667 -19.92349434]
[92.10743713 -11.90176582]
[94.73384094 2.86651134]
[85.60186005 14.76638317]
[70.65692139 16.05038261]
[59.62916183 5.88296509]
[63.63690186 20.33765411]
[67.64464569 34.79234314]
[71.65238190 49.24703217]
[75.66012573 63.70171738]
[79.66786194 78.15641022]
[83.67560577 92.61109924]
[91.66521454 84.91566467]
[102.24645233 83.60422516]
[111.12443542 88.69003296]
[115.00252533 97.69105530]
[129.01924133 103.03256989]
[144.18852234 97.81025696]
[157.65155029 106.53528595]
[159.08065796 122.51455688]
[147.37954712 133.49014282]
[131.52430725 131.04251099]
[123.67772675 117.04927826]
[109.66101074 111.70776367]
[98.46825409 116.47792053]
[86.24324799 111.48188019]
[86.24324799 126.48188019]
[93.98055267 140.28205872]
[86.24324799 153.00932312]
[86.24324799 168.00932312]
[86.24324799 183.00932312]
[86.24324799 198.00932312]
[86.24324799 213.00932312]
[86.24324799 228.00932312]
[86.24324799 243.00932312]
[86.24324799 258.00933838]
[86.24324799 273.00933838]
[86.24324799 288.00933838]
[100.78313446 292.07064819]
[113.68751526 299.90515137]
[123.99880219 310.93148804]
[130.95182800 324.33142090]
[134.03062439 339.11056519]
[133.00672913 354.17224121]
[127.95613098 368.39877319]
[119.25360870 380.73443604]
[107.54494476 390.26385498]
[93.69900513 396.27987671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[30 108]
[31 84]
[32 83]
[33 82]
[49 66]
[50 65]
[51 64]
[52 63]
[85 102]
[86 101]
[87 100]
[88 99]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
