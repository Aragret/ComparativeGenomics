%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUUCAACGGGGGGGGGGUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUxxxxxxxxxxCUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCCCCCCCCCCCAAUCUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[40.15573883 431.10702515]
[26.93554306 423.83456421]
[16.04873848 413.38754272]
[8.23760891 400.47830200]
[4.03472757 385.98699951]
[3.72665501 370.90164185]
[7.33439636 356.25082397]
[14.61196899 343.03344727]
[25.06317711 332.15066528]
[37.97543716 324.34451294]
[52.46837616 320.14724731]
[52.15631866 305.15048218]
[51.84426117 290.15371704]
[51.53220749 275.15698242]
[51.22014999 260.16021729]
[50.90809250 245.16346741]
[50.59603882 230.16671753]
[50.28398132 215.16995239]
[49.97192383 200.17320251]
[49.65987015 185.17645264]
[42.08825302 198.12521362]
[31.87151146 209.10784912]
[19.50288010 217.59413147]
[5.57948303 223.17436218]
[-9.22649574 225.57914734]
[-24.20026207 224.69239807]
[-38.61892319 220.55691528]
[-51.78638077 213.37234497]
[-63.06695175 203.48554993]
[-71.91603851 191.37384033]
[-77.90642548 177.62191772]
[-80.74892426 162.89370728]
[-80.30628967 147.90023804]
[-76.59990692 133.36535645]
[-69.80870056 119.99077606]
[-60.26053619 108.42217255]
[-48.41637039 99.21805573]
[-34.84801102 92.82276917]
[-20.21050262 89.54507446]
[-5.21050310 89.54319000]
[9.42782784 92.81722260]
[22.99778938 99.20909882]
[34.84426117 108.41024780]
[44.39532852 119.97645569]
[51.18988419 133.34933472]
[54.89991760 147.88328552]
[55.34647369 162.87454224]
[62.80138397 149.85823059]
[70.25629425 136.84193420]
[56.03519440 117.58156586]
[53.05428314 93.82624817]
[62.07566833 71.64933014]
[51.63585663 60.87851715]
[41.19604492 50.10770798]
[30.75623131 39.33690262]
[15.39079571 32.17172623]
[18.02237511 15.42326069]
[34.84479904 13.31556129]
[41.52703857 28.89708900]
[51.96685028 39.66789627]
[62.40666580 50.43870544]
[72.84647369 61.20951462]
[81.76625824 56.30164337]
[91.52899933 53.41397476]
[91.21694946 38.41722107]
[90.90489197 23.42046738]
[90.59283447 8.42371368]
[76.31899261 3.26407051]
[64.87548065 -6.70640850]
[57.80993652 -20.13929749]
[56.07791901 -35.21791077]
[59.91366577 -49.90298843]
[68.79843140 -62.20849228]
[81.53060913 -70.47020721]
[96.38829803 -73.57080078]
[111.36209869 -71.09095001]
[124.42693329 -63.36602402]
[133.81590271 -51.44076157]
[138.25920105 -36.92795944]
[137.15592957 -21.79034996]
[130.65528870 -8.07517147]
[119.63643646 2.36271000]
[105.58958435 8.11165714]
[105.90164185 23.10840988]
[106.21369934 38.10516357]
[106.52575684 53.10191727]
[115.56391907 54.02643585]
[124.47314453 56.71635056]
[132.90486145 61.15285110]
[140.51368713 67.24774933]
[153.12481689 59.12620544]
[165.73593140 51.00466156]
[178.34706116 42.88311768]
[190.95819092 34.76157761]
[196.52423096 27.43552208]
[203.91723633 26.60543251]
[216.69459534 18.74800682]
[229.47195435 10.89058018]
[239.79685974 -2.55682278]
[255.57695007 3.64197016]
[253.98876953 20.52136612]
[237.32937622 23.66793823]
[224.55201721 31.52536392]
[211.77465820 39.38278961]
[199.07974243 47.37270737]
[186.46861267 55.49424744]
[173.85748291 63.61579132]
[161.24635315 71.73733521]
[148.63522339 79.85887146]
[152.34138489 94.39380646]
[167.30163574 95.48512268]
[182.26188660 96.57643127]
[197.22213745 97.66773987]
[213.45918274 92.78978729]
[222.64137268 107.04193878]
[211.48808289 119.81066895]
[196.13081360 112.62799072]
[181.17057800 111.53668213]
[166.21032715 110.44536591]
[151.25007629 109.35405731]
[146.72229004 121.46861267]
[139.42533875 131.94120789]
[129.88476562 140.16394043]
[118.75269318 145.68525696]
[106.76353455 148.23426819]
[94.68575287 147.73312378]
[83.27260590 144.29684448]
[75.81769562 157.31314087]
[68.36278534 170.32945251]
[64.65662384 184.86439514]
[64.96868134 199.86114502]
[65.28073883 214.85789490]
[65.59278870 229.85466003]
[65.90484619 244.85140991]
[66.21690369 259.84817505]
[66.52896118 274.84490967]
[66.84101868 289.84167480]
[67.15307617 304.83840942]
[67.46512604 319.83517456]
[82.12012482 323.42593384]
[95.34593201 330.68820190]
[106.24079895 341.12680054]
[114.06189728 354.02999878]
[118.27596283 368.51806641]
[118.59568787 383.60317993]
[114.99925995 398.25677490]
[107.73189545 411.47976685]
[97.28909302 422.37060547]
[84.38286591 430.18673706]
[69.89317322 434.39520264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[47 129]
[48 128]
[49 127]
[52 62]
[53 61]
[54 60]
[55 59]
[64 86]
[65 85]
[66 84]
[67 83]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 104]
[97 103]
[98 102]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
