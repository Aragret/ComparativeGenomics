%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUGAGUCGGGGGGGGGGCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACxxxxxxxxxxCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCCCCCCCCCCCUUCUGACUC\
) } def
/len { sequence length } bind def

/coor [
[75.91952515 387.48324585]
[62.07358551 381.46722412]
[50.36492157 371.93780518]
[41.66239929 359.60214233]
[36.61179733 345.37561035]
[35.58790588 330.31393433]
[38.66670227 315.53475952]
[45.61972427 302.13485718]
[55.93101120 291.10852051]
[68.83538818 283.27398682]
[83.37527466 279.21267700]
[83.37527466 264.21267700]
[83.37527466 249.21269226]
[83.37527466 234.21269226]
[83.37527466 219.21269226]
[83.37527466 204.21269226]
[83.37527466 189.21269226]
[83.37527466 174.21269226]
[83.37527466 159.21269226]
[83.37527466 144.21269226]
[83.37527466 129.21269226]
[72.07627106 119.34696198]
[57.21322632 121.36930084]
[42.35017776 123.39163208]
[27.48713303 125.41397095]
[12.62408543 127.43630219]
[-2.23896146 129.45863342]
[-6.07572365 144.16740417]
[-15.25321579 156.28524780]
[-28.37193489 163.96427917]
[-43.43137360 166.03352356]
[-58.13507843 162.17741394]
[-70.24083710 152.98397827]
[-77.90261078 139.85517883]
[-79.95203400 124.79302979]
[-76.07659149 110.09440613]
[-66.86724854 98.00075531]
[-53.72837067 90.35625458]
[-38.66353989 88.32664490]
[-23.97003174 92.22142792]
[-11.88850307 101.44667053]
[-4.26129580 114.59558868]
[10.60175133 112.57325745]
[25.46479797 110.55091858]
[40.32784653 108.52858734]
[55.19089127 106.50625610]
[70.05393982 104.48391724]
[55.87031174 99.60285950]
[46.73688889 87.70409393]
[45.68810654 72.74080658]
[53.07240677 59.68430710]
[66.43647003 52.87241745]
[81.34029388 54.56828308]
[92.83232117 64.20848083]
[97.09451294 78.58786011]
[100.19283295 63.91133881]
[103.29116058 49.23480988]
[92.97933960 60.12821960]
[80.53740692 68.50666809]
[66.56603241 73.96566772]
[51.73971176 76.24166870]
[36.77421951 75.22479248]
[22.39204979 70.96413422]
[9.28753567 63.66538620]
[-1.90667057 53.68091202]
[-10.65014362 41.49273682]
[-16.52077293 27.68926811]
[-19.23513794 12.93690395]
[-18.66219711 -2.05214977]
[-14.82961178 -16.55426216]
[-7.92240810 -29.86931229]
[1.72595263 -41.35448074]
[13.64967346 -50.45529938]
[27.27310753 -56.73240280]
[41.93855667 -59.88274765]
[56.93800354 -59.75424576]
[71.54732513 -56.35309982]
[85.06121063 -49.84350586]
[96.82726288 -40.53973389]
[106.27742767 -28.89094543]
[112.95549011 -15.45950890]
[116.53904724 -0.89386064]
[116.85509491 14.10280991]
[113.88901520 28.80449677]
[124.10249329 17.81883240]
[134.31597900 6.83316803]
[137.89933777 -1.64099050]
[144.85803223 -4.27198935]
[155.29785156 -15.04279804]
[165.73765564 -25.81360626]
[176.17747498 -36.58441544]
[177.36585999 -52.58339310]
[190.69601440 -61.51012039]
[205.94219971 -56.51677322]
[211.40882874 -41.43382263]
[202.90238953 -27.83161545]
[186.94828796 -26.14460182]
[176.50846863 -15.37379456]
[166.06866455 -4.60298538]
[155.62884521 6.16782284]
[145.30163574 17.04664803]
[135.08816528 28.03231239]
[124.87467957 39.01797867]
[117.96768188 52.33313370]
[114.86936188 67.00965881]
[111.77104187 81.68618774]
[120.91277313 93.57856750]
[135.89248657 94.35840607]
[150.87220764 95.13825226]
[165.85191345 95.91809845]
[175.50788879 83.77142334]
[190.46835327 79.65264893]
[204.98068237 85.14552307]
[213.46461487 98.13793182]
[212.65788269 113.63402557]
[202.87071228 125.67523193]
[187.86645508 129.63146973]
[173.41455078 123.98149109]
[165.07206726 110.89781189]
[150.09236145 110.11796570]
[135.11264038 109.33812714]
[120.13292694 108.55828094]
[114.69351196 113.72187805]
[129.55050659 115.78820801]
[137.19831848 128.69212341]
[131.87814331 142.71693420]
[117.59606171 147.30195618]
[105.10652924 138.99462891]
[103.81468964 124.04908752]
[98.37527466 129.21269226]
[98.37527466 144.21269226]
[98.37527466 159.21269226]
[98.37527466 174.21269226]
[98.37527466 189.21269226]
[98.37527466 204.21269226]
[98.37527466 219.21269226]
[98.37527466 234.21269226]
[98.37527466 249.21269226]
[98.37527466 264.21267700]
[98.37527466 279.21267700]
[112.91516113 283.27398682]
[125.81954193 291.10852051]
[136.13082886 302.13485718]
[143.08384705 315.53475952]
[146.16264343 330.31393433]
[145.13876343 345.37561035]
[140.08815002 359.60214233]
[131.38563538 371.93780518]
[119.67697144 381.46722412]
[105.83103180 387.48324585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[55 106]
[56 105]
[57 104]
[84 103]
[85 102]
[86 101]
[88 100]
[89 99]
[90 98]
[91 97]
[107 122]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
