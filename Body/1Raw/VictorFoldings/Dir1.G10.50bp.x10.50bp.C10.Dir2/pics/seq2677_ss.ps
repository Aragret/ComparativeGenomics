%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAAGUAAGGGGGGGGGGAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUxxxxxxxxxxAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCACCCCCCCCCCAAUAAAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[83.57575989 491.79354858]
[69.55381012 486.24053955]
[57.35385513 477.37420654]
[47.74278641 465.75189209]
[41.32476044 452.10418701]
[38.50322342 437.28900146]
[39.45553970 422.23764038]
[44.12184525 407.89620972]
[52.20880890 395.16625977]
[63.20808411 384.84799194]
[76.42824554 377.58999634]
[91.03825378 373.84857178]
[91.03825378 358.84857178]
[91.03825378 343.84857178]
[91.03825378 328.84857178]
[91.03825378 313.84857178]
[91.03825378 298.84857178]
[91.03825378 283.84857178]
[91.03825378 268.84857178]
[91.03825378 253.84857178]
[91.03825378 238.84857178]
[82.69059753 230.04069519]
[82.60440063 217.50419617]
[91.37387848 207.99104309]
[91.68185425 192.99420166]
[91.98983002 177.99736023]
[78.61448669 168.52897644]
[73.44542694 152.80345154]
[78.69878387 136.93112183]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[78.02671051 38.50651550]
[65.36148071 30.32030106]
[55.52607346 18.90847206]
[49.31111145 5.20144606]
[47.21248627 -9.68639183]
[49.39180374 -24.54730415]
[55.66399765 -38.17816162]
[65.51298523 -49.47786331]
[78.13413239 -57.53626633]
[92.50000000 -61.70750427]
[92.50000000 -76.70750427]
[92.50000000 -91.70750427]
[92.50000000 -106.70750427]
[80.75044250 -113.98078918]
[74.19515991 -126.02220154]
[74.45967102 -139.62129211]
[81.36721802 -151.21235657]
[93.01332855 -157.80934143]
[93.32130432 -172.80618286]
[93.62928009 -187.80302429]
[93.93726349 -202.79986572]
[94.24523926 -217.79670715]
[79.45893097 -220.50984192]
[65.29936218 -225.55987549]
[52.13330078 -232.81597900]
[40.30178833 -242.09022522]
[30.11128235 -253.14236450]
[21.82574463 -265.68612671]
[15.65978718 -279.39660645]
[11.77312565 -293.91864014]
[10.26643276 -308.87612915]
[11.17873573 -323.88159180]
[14.48640442 -338.54635620]
[20.10376167 -352.49060059]
[27.88530350 -365.35308838]
[37.62947083 -376.80065918]
[49.08386612 -386.53683472]
[61.95179367 -394.30938721]
[75.89994049 -399.91702271]
[90.56701660 -403.21444702]
[105.57311249 -404.11627197]
[120.52953339 -402.59912109]
[135.04885864 -398.70233154]
[148.75503540 -392.52679443]
[161.29299927 -384.23248291]
[172.33802795 -374.03427124]
[181.60398865 -362.19628906]
[188.85090637 -349.02517700]
[193.89105225 -334.86206055]
[196.59385681 -320.07388306]
[196.88934326 -305.04360962]
[194.76985168 -290.16061401]
[190.29025269 -275.81036377]
[183.56661987 -262.36459351]
[174.77307129 -250.17155457]
[164.13742065 -239.54710388]
[151.93511963 -230.76643372]
[138.48226929 -224.05697632]
[124.12731171 -219.59252930]
[109.24208069 -217.48872375]
[108.93409729 -202.49188232]
[108.62612152 -187.49504089]
[108.31814575 -172.49821472]
[108.01016998 -157.50137329]
[121.38551331 -148.03298950]
[126.55457306 -132.30744934]
[121.30121613 -116.43511963]
[107.50000000 -106.70750427]
[107.50000000 -91.70750427]
[107.50000000 -76.70750427]
[107.50000000 -61.70750427]
[121.86586761 -57.53626633]
[134.48701477 -49.47786331]
[144.33599854 -38.17816162]
[150.60820007 -24.54730415]
[152.78752136 -9.68639183]
[150.68888855 5.20144606]
[144.47392273 18.90847206]
[134.63851929 30.32030106]
[121.97328949 38.50651550]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[119.24955750 134.47677612]
[125.80484009 146.51818848]
[125.54032898 160.11729431]
[118.63278198 171.70835876]
[106.98667145 178.30534363]
[106.67869568 193.30218506]
[106.37071991 208.29902649]
[115.62889099 224.18350220]
[106.03825378 238.84857178]
[106.03825378 253.84857178]
[106.03825378 268.84857178]
[106.03825378 283.84857178]
[106.03825378 298.84857178]
[106.03825378 313.84857178]
[106.03825378 328.84857178]
[106.03825378 343.84857178]
[106.03825378 358.84857178]
[106.03825378 373.84857178]
[120.64826965 377.58999634]
[133.86842346 384.84799194]
[144.86770630 395.16625977]
[152.95466614 407.89620972]
[157.62097168 422.23764038]
[158.57328796 437.28900146]
[155.75175476 452.10418701]
[149.33372498 465.75189209]
[139.72265625 477.37420654]
[127.52269745 486.24053955]
[113.50075531 491.79354858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 130]
[25 129]
[26 128]
[30 123]
[31 122]
[33 120]
[34 119]
[35 118]
[36 117]
[46 107]
[47 106]
[48 105]
[49 104]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
