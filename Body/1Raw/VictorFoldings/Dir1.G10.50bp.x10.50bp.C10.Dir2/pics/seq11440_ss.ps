%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUUACUAGGGGGGGGGGAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUxxxxxxxxxxCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCCCCCCCCCCCUAUUACUA\
) } def
/len { sequence length } bind def

/coor [
[73.12213135 418.46908569]
[59.10018539 412.91610718]
[46.90022659 404.04977417]
[37.28915787 392.42745972]
[30.87113190 378.77975464]
[28.04959488 363.96456909]
[29.00191116 348.91317749]
[33.66821671 334.57174683]
[41.75518036 321.84179688]
[52.75445557 311.52352905]
[65.97461700 304.26556396]
[80.58462524 300.52410889]
[80.58462524 285.52410889]
[80.58462524 270.52410889]
[80.58462524 255.52412415]
[80.58462524 240.52412415]
[80.58462524 225.52412415]
[80.58462524 210.52412415]
[80.58462524 195.52412415]
[80.58462524 180.52412415]
[80.58462524 165.52412415]
[71.25157166 177.26695251]
[57.34789276 182.89613342]
[42.47416687 180.95390320]
[30.48217964 171.94322205]
[24.47744751 158.19755554]
[26.01498985 143.27656555]
[34.69663620 131.04428101]
[48.27413559 124.66842651]
[63.23138428 125.80014038]
[75.69496155 134.14634705]
[82.43701935 147.54470825]
[85.49542236 132.85980225]
[88.55381775 118.17491150]
[76.01642609 103.87093353]
[79.07036591 82.77069855]
[65.37973785 76.64152527]
[51.68911743 70.51235199]
[37.99848938 64.38317871]
[27.86638832 75.61686707]
[14.75777435 83.16798401]
[-0.04310236 86.29676056]
[-15.08620262 84.69666290]
[-28.89775848 78.52445984]
[-40.12465286 68.38483429]
[-47.66698837 55.27116013]
[-50.78584671 40.46819305]
[-49.17567062 25.42616653]
[-42.99420929 11.61875057]
[-32.84706116 0.39865315]
[-19.72834015 -7.13489437]
[-4.92328358 -10.24383163]
[10.11765957 -8.62357712]
[23.92093086 -2.43286633]
[35.13422394 7.72179747]
[42.65898132 20.84556389]
[45.75799561 35.65269852]
[44.12766266 50.69255447]
[57.81829071 56.82172775]
[71.50891876 62.95090103]
[85.19953918 69.08007812]
[99.81855011 65.72081757]
[109.46036530 54.23014832]
[119.10217285 42.73948288]
[126.60217285 29.74910164]
[131.73248291 15.65371323]
[136.86277771 1.55832386]
[141.99308777 -12.53706551]
[147.12338257 -26.63245392]
[134.21160889 -34.35791397]
[122.99540710 -44.38753128]
[113.88022614 -56.35874557]
[107.19557953 -69.83879852]
[103.18310547 -84.34040833]
[101.98785400 -99.33933258]
[103.65303802 -114.29338837]
[108.11846161 -128.66198730]
[115.22270203 -141.92570496]
[124.70893860 -153.60507202]
[136.23425293 -163.27789307]
[149.38201904 -170.59449768]
[163.67695618 -175.29040527]
[178.60229492 -177.19584656]
[193.61849976 -176.24194336]
[208.18275452 -172.46318054]
[221.76856995 -165.99615479]
[233.88481140 -157.07464600]
[244.09349060 -146.02117920]
[252.02557373 -133.23530579]
[257.39431763 -119.17923737]
[260.00567627 -104.36109161]
[259.76519775 -89.31653595]
[256.68157959 -74.58942413]
[250.86634827 -60.71212387]
[242.52967834 -48.18629456]
[231.97294617 -37.46474075]
[219.57775879 -28.93503380]
[205.79220581 -22.90552139]
[191.11462402 -19.59416580]
[176.07559204 -19.12067032]
[161.21878052 -21.50215340]
[156.08847046 -7.40676308]
[150.95817566 6.68862581]
[145.82786560 20.78401566]
[140.69757080 34.87940598]
[153.32737732 35.10624695]
[161.68507385 43.07450104]
[176.66532898 42.30484009]
[191.64556885 41.53518295]
[206.62580872 40.76552200]
[217.02557373 28.86508751]
[232.79959106 27.88733101]
[244.58940125 38.41233826]
[245.40032959 54.19580841]
[234.75126648 65.87368774]
[218.96009827 66.51770020]
[207.39546204 55.74576187]
[192.41522217 56.51542282]
[177.43498230 57.28508377]
[162.45474243 58.05474091]
[152.62019348 67.04167938]
[138.57225037 65.12355804]
[130.59284973 52.38129807]
[120.95102692 63.87196350]
[111.30921173 75.36263275]
[122.54915619 87.66706085]
[124.05799103 103.37769318]
[116.27896118 116.08675385]
[103.23870850 121.23330688]
[100.18031311 135.91819763]
[97.12191772 150.60310364]
[95.58462524 165.52412415]
[95.58462524 180.52412415]
[95.58462524 195.52412415]
[95.58462524 210.52412415]
[95.58462524 225.52412415]
[95.58462524 240.52412415]
[95.58462524 255.52412415]
[95.58462524 270.52410889]
[95.58462524 285.52410889]
[95.58462524 300.52410889]
[110.19464111 304.26556396]
[123.41480255 311.52352905]
[134.41407776 321.84179688]
[142.50103760 334.57174683]
[147.16734314 348.91317749]
[148.11965942 363.96456909]
[145.29812622 378.77975464]
[138.88009644 392.42745972]
[129.26902771 404.04977417]
[117.06906891 412.91610718]
[103.04712677 418.46908569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[32 131]
[33 130]
[34 129]
[36 61]
[37 60]
[38 59]
[39 58]
[62 125]
[63 124]
[64 123]
[65 105]
[66 104]
[67 103]
[68 102]
[69 101]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
