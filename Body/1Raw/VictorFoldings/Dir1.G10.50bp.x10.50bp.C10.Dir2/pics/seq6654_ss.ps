%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAACCCAAGGGGGGGGGGUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUxxxxxxxxxxACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCCCCCCCCCCCAUCACCCAA\
) } def
/len { sequence length } bind def

/coor [
[125.26374054 205.48800659]
[121.05819702 191.08961487]
[118.40766144 176.32493591]
[117.15071106 161.37768555]
[115.89376068 146.43045044]
[114.63681030 131.48320007]
[108.57379913 145.20326233]
[102.51078796 158.92330933]
[101.63899994 175.85482788]
[85.12783813 179.70422363]
[76.85813141 164.90394592]
[88.79073334 152.86029053]
[94.85374451 139.14024353]
[100.91675568 125.42018890]
[89.51573944 115.67253876]
[76.90460968 123.79408264]
[64.29347992 131.91561890]
[51.68235397 140.03717041]
[44.26922226 154.01414490]
[29.37961960 154.40008545]
[16.76849174 162.52162170]
[11.98148632 177.83384705]
[-3.02626681 183.50366211]
[-16.74210548 175.18168640]
[-18.64441109 159.25181580]
[-7.27389860 147.93409729]
[8.64694881 149.91049194]
[21.25807762 141.78895569]
[27.76917267 128.39288330]
[43.56081009 127.42603302]
[56.17193985 119.30449677]
[68.78306580 111.18295288]
[81.39419556 103.06140900]
[81.08220673 95.56790161]
[66.12122345 96.64913177]
[53.26947784 104.38428497]
[40.06053162 97.27627563]
[39.43603134 82.28928375]
[52.00784302 74.10700989]
[65.45915222 80.74703217]
[80.45822906 80.58088684]
[80.14624023 73.08737946]
[66.90365601 66.04224396]
[53.66106796 58.99710846]
[40.41848373 51.95197296]
[26.52978706 58.87178040]
[11.23183632 56.27325439]
[0.40700567 45.15558243]
[-1.78233671 29.79373169]
[5.50565577 16.09465218]
[19.46860123 9.32591724]
[34.73746109 12.09024429]
[45.44105148 23.32469177]
[47.46361923 38.70938873]
[60.70620346 45.75452042]
[73.94879150 52.79965591]
[87.19137573 59.84479141]
[78.94753265 47.31327057]
[70.70368195 34.78174973]
[62.45984268 22.25022888]
[54.21599579 9.71870708]
[41.35507965 1.99880898]
[30.52211952 -8.37649727]
[22.25461578 -20.89242172]
[16.96277237 -34.92796326]
[14.90915871 -49.78672028]
[16.19566727 -64.73144531]
[20.75846291 -79.02063751]
[28.37115669 -91.94529724]
[38.65602875 -102.86415100]
[51.10277939 -111.23544312]
[65.09383392 -116.64380646]
[79.93500519 -118.82089233]
[94.88990784 -117.65869904]
[109.21654510 -113.21486664]
[122.20405579 -105.70990753]
[133.20805359 -95.51617432]
[141.68254089 -83.13946533]
[147.20704651 -69.19386292]
[149.50747681 -54.37131119]
[148.46966553 -39.40725708]
[144.14511108 -25.04416847]
[136.74839783 -11.99470139]
[126.64478302 -0.90480024]
[122.34687805 13.46628380]
[118.04898071 27.83736801]
[113.75108337 42.20845413]
[109.45318604 56.57953644]
[120.11480713 46.02824783]
[130.77642822 35.47695541]
[141.43806458 24.92566681]
[152.09968567 14.37437534]
[155.90216064 -1.57784081]
[171.69355774 -6.00095844]
[183.22903442 5.65514708]
[178.64189148 21.39967346]
[162.65098572 25.03600121]
[151.98934937 35.58729172]
[141.32772827 46.13858414]
[130.66609192 56.68987274]
[120.00447083 67.24116516]
[134.41949463 63.09299088]
[148.83450317 58.94481659]
[163.24951172 54.79664612]
[174.85438538 45.29259109]
[187.40419006 37.07659912]
[200.75657654 30.24185753]
[214.76010132 24.86588478]
[229.25595093 21.00965881]
[244.07969666 18.71691513]
[259.06320190 18.01366234]
[274.03652954 18.90787315]
[288.82983398 21.38940811]
[303.27532959 25.43012047]
[317.20919800 30.98417854]
[330.47335815 37.98858643]
[342.91741943 46.36389923]
[354.40017700 56.01512527]
[364.79141235 66.83279419]
[373.97329712 78.69421387]
[381.84164429 91.46484375]
[388.30725098 104.99983978]
[393.29672241 119.14568329]
[396.75354004 133.74192810]
[398.63845825 148.62303162]
[398.93008423 163.62019348]
[397.62512207 178.56332397]
[394.73840332 193.28292847]
[390.30261230 207.61206055]
[384.36810303 221.38818359]
[377.00219727 234.45506287]
[368.28839111 246.66447449]
[358.32556152 257.87796021]
[347.22668457 267.96829224]
[335.11767578 276.82104492]
[322.13583374 284.33584595]
[308.42843628 290.42739868]
[294.15093994 295.02667236]
[279.46530151 298.08145142]
[264.53805542 299.55709839]
[249.53852844 299.43688965]
[234.63685608 297.72216797]
[220.00205994 294.43243408]
[205.80010986 289.60491943]
[192.19210815 283.29446411]
[179.33238220 275.57257080]
[167.36679077 266.52685547]
[156.43106079 256.25994873]
[146.64923096 244.88822937]
[138.13224792 232.54072571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 14]
[7 13]
[8 12]
[15 33]
[16 32]
[17 31]
[18 30]
[20 28]
[21 27]
[42 57]
[43 56]
[44 55]
[45 54]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
