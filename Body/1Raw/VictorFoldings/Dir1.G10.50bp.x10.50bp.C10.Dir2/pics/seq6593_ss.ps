%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCAUCAGGGGGGGGGGAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACxxxxxxxxxxUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCCCCCCCCCCCGGGUCCAUCA\
) } def
/len { sequence length } bind def

/coor [
[71.98482513 382.99707031]
[59.42660522 374.64590454]
[49.34038162 363.43344116]
[42.36018753 350.06454468]
[38.92480469 335.37954712]
[39.25017929 320.30160522]
[43.31586456 305.77847290]
[50.86628342 292.72311401]
[61.42681503 281.95623779]
[74.33361053 274.15460205]
[88.77533722 269.80865479]
[88.15135956 254.82162476]
[87.52738190 239.83460999]
[86.90340424 224.84759521]
[86.27942657 209.86058044]
[85.65544891 194.87356567]
[85.03147125 179.88655090]
[84.40749359 164.89953613]
[83.78351593 149.91252136]
[83.15953827 134.92550659]
[82.53556061 119.93848419]
[86.95381165 91.59713745]
[80.89080048 77.87708282]
[74.82778931 64.15702820]
[60.68642807 69.18039703]
[46.20921707 73.13292694]
[31.47710991 75.99252319]
[16.57250023 77.74317932]
[1.57873857 78.37510681]
[-13.42032146 77.88478088]
[-28.34079742 76.27494049]
[-43.09924698 73.55458069]
[-57.61313629 69.73892975]
[-71.80130005 64.84931183]
[-85.58438110 58.91307831]
[-98.88529968 51.96342468]
[-111.62968445 44.03922272]
[-123.74624634 35.18478394]
[-135.16723633 25.44962883]
[-145.82876587 14.88819695]
[-155.67123413 3.55955577]
[-164.63958740 -8.47294044]
[-172.68365479 -21.14200020]
[-179.75846863 -34.37677002]
[-185.82446289 -48.10324097]
[-190.84771729 -62.24464035]
[-194.80010986 -76.72188568]
[-197.65957642 -91.45401764]
[-199.41009521 -106.35865021]
[-200.04190063 -121.35241699]
[-199.55143738 -136.35147095]
[-197.94146729 -151.27192688]
[-195.22097778 -166.03036499]
[-191.40519714 -180.54421997]
[-186.51545715 -194.73233032]
[-180.57910156 -208.51536560]
[-173.62933350 -221.81622314]
[-165.70501709 -234.56053162]
[-156.85047913 -246.67701721]
[-147.11521912 -258.09793091]
[-136.55369568 -268.75936890]
[-125.22496033 -278.60171509]
[-113.19239044 -287.56997681]
[-100.52325439 -295.61392212]
[-87.28842163 -302.68862915]
[-73.56190491 -308.75451660]
[-59.42045593 -313.77761841]
[-44.94317245 -317.72988892]
[-30.21101570 -320.58923340]
[-15.30637550 -322.33963013]
[-0.31260291 -322.97128296]
[14.68644810 -322.48071289]
[29.60689545 -320.87060547]
[44.36529922 -318.14999390]
[58.87911987 -314.33407593]
[73.06719208 -309.44421387]
[86.85017395 -303.50772095]
[100.15097046 -296.55783081]
[112.89521027 -288.63342285]
[125.01161957 -279.77874756]
[136.43243408 -270.04339600]
[147.09378052 -259.48178101]
[156.93605042 -248.15296936]
[165.90419006 -236.12031555]
[173.94804382 -223.45111084]
[181.02262878 -210.21621704]
[187.08837891 -196.48963928]
[192.11137390 -182.34814453]
[196.06352234 -167.87083435]
[198.92271423 -153.13865662]
[200.67297363 -138.23399353]
[201.30451965 -123.24021912]
[200.81379700 -108.24117279]
[199.20355225 -93.32073212]
[196.48280334 -78.56235504]
[192.66676331 -64.04856873]
[187.77677917 -49.86053848]
[181.84017944 -36.07761383]
[174.89018250 -22.77687454]
[166.96563721 -10.03270340]
[158.11087036 2.08362675]
[148.37541199 13.50435638]
[137.81370544 24.16561508]
[126.48480225 34.00777817]
[114.45207214 42.97580719]
[101.78279877 51.01954651]
[88.54784393 58.09401321]
[94.61085510 71.81407166]
[100.67386627 85.53411865]
[112.27520752 95.04248047]
[126.91870880 98.29330444]
[141.59523010 101.39163208]
[156.30319214 104.33711243]
[171.01115417 107.28259277]
[185.71911621 110.22807312]
[199.81356812 102.56477356]
[214.53605652 108.93874359]
[218.59278870 124.46041870]
[208.87174988 137.22291565]
[192.83010864 137.43591309]
[182.77363586 124.93603516]
[168.06567383 121.99055481]
[153.35771179 119.04507446]
[138.64974976 116.09958649]
[131.42684937 117.88153076]
[123.66788483 112.93680573]
[109.02438354 109.68598175]
[97.52257538 119.31450653]
[98.14655304 134.30152893]
[98.77053070 149.28854370]
[99.39450836 164.27555847]
[100.01848602 179.26257324]
[100.64246368 194.24958801]
[101.26644135 209.23660278]
[101.89041901 224.22361755]
[102.51439667 239.21063232]
[103.13837433 254.19764709]
[103.76235199 269.18466187]
[118.51535797 272.31512451]
[132.02600098 279.01687622]
[143.44497681 288.86865234]
[152.05448914 301.25119019]
[157.31333923 315.38607788]
[158.89094543 330.38482666]
[156.68814087 345.30456543]
[150.84338379 359.20742798]
[141.72410583 371.21948242]
[129.90353394 380.58563232]
[116.12472534 386.71713257]
[101.25382233 389.22851562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 109]
[23 108]
[24 107]
[110 127]
[111 126]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
