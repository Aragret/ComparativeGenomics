%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUAUCUCGGGGGGGGGGGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCxxxxxxxxxxACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCCCCCCCCCCCUCCUAUCUC\
) } def
/len { sequence length } bind def

/coor [
[57.22629166 370.08627319]
[43.38035202 364.07025146]
[31.67169189 354.54083252]
[22.96916771 342.20516968]
[17.91856575 327.97863770]
[16.89467430 312.91696167]
[19.97347260 298.13778687]
[26.92649460 284.73785400]
[37.23777771 273.71154785]
[50.14215851 265.87701416]
[64.68204498 261.81570435]
[64.68204498 246.81570435]
[64.68204498 231.81570435]
[64.68204498 216.81570435]
[64.68204498 201.81570435]
[64.68204498 186.81570435]
[64.68204498 171.81570435]
[64.68204498 156.81570435]
[64.68204498 141.81570435]
[64.68204498 126.81571198]
[88.74993134 89.23644257]
[85.65161133 74.55992126]
[70.80162048 76.71245575]
[55.84422302 77.90911865]
[40.84088898 78.14499664]
[25.85326767 77.41912079]
[10.94294834 75.73447418]
[-3.82880044 73.09797668]
[-18.40127754 69.52046204]
[-32.71459961 65.01663208]
[-46.70995331 59.60499954]
[-60.32982254 53.30779648]
[-73.51824188 46.15089798]
[-86.22102356 38.16371918]
[-98.38596344 29.37907600]
[-109.96307373 19.83306885]
[-120.90477753 9.56492615]
[-131.16610718 -1.38316047]
[-140.70492554 -12.96620083]
[-149.48199463 -25.13659859]
[-157.46127319 -37.84434128]
[-164.60997009 -51.03721237]
[-170.89871216 -64.66099548]
[-176.30165100 -78.65970612]
[-180.79656982 -92.97583008]
[-184.36502075 -107.55052948]
[-186.99234009 -122.32391357]
[-188.66770935 -137.23527527]
[-189.38427734 -152.22334290]
[-189.13906860 -167.22653198]
[-187.93310547 -182.18318176]
[-185.77133179 -197.03182983]
[-182.66264343 -211.71147156]
[-178.61982727 -226.16177368]
[-173.65946960 -240.32334900]
[-167.80195618 -254.13803101]
[-161.07138062 -267.54904175]
[-153.49537659 -280.50125122]
[-145.10508728 -292.94143677]
[-135.93498230 -304.81851196]
[-126.02275085 -316.08364868]
[-115.40911865 -326.69058228]
[-104.13771057 -336.59567261]
[-92.25483704 -345.75827026]
[-79.80932617 -354.14068604]
[-66.85231781 -361.70846558]
[-53.43706512 -368.43057251]
[-39.61868286 -374.27932739]
[-25.45396042 -379.23074341]
[-11.00110340 -383.26440430]
[3.68049836 -386.36380005]
[18.53051376 -388.51617432]
[33.48792267 -389.71267700]
[48.49126053 -389.94839478]
[63.47887039 -389.22235107]
[78.38917542 -387.53753662]
[93.16088867 -384.90087891]
[107.73332977 -381.32321167]
[122.04660034 -376.81921387]
[136.04190063 -371.40740967]
[149.66169739 -365.11007690]
[162.85003662 -357.95303345]
[175.55273438 -349.96569824]
[187.71757507 -341.18093872]
[199.29457092 -331.63479614]
[210.23616028 -321.36651611]
[220.49737549 -310.41833496]
[230.03605652 -298.83517456]
[238.81300354 -286.66467285]
[246.79214478 -273.95684814]
[253.94068909 -260.76391602]
[260.22927856 -247.14004517]
[265.63204956 -233.14128113]
[270.12683105 -218.82510376]
[273.69509888 -204.25036621]
[276.32226562 -189.47695923]
[277.99746704 -174.56556702]
[278.71386719 -159.57749939]
[278.46847534 -144.57431030]
[277.26235962 -129.61767578]
[275.10043335 -114.76905060]
[271.99157715 -100.08944702]
[267.94860840 -85.63919067]
[262.98806763 -71.47766113]
[257.13043213 -57.66304779]
[250.39968872 -44.25212479]
[242.82354736 -31.29999352]
[234.43312073 -18.85988235]
[225.26287842 -6.98290920]
[215.35052490 4.28211975]
[204.73678589 14.88891411]
[193.46525574 24.79389000]
[181.58229065 33.95634079]
[169.13667297 42.33861923]
[156.17959595 49.90628052]
[142.76426697 56.62822723]
[128.94581604 62.47683716]
[114.78103638 67.42807770]
[100.32813263 71.46160126]
[103.42646027 86.13812256]
[112.44398499 98.12495422]
[125.68656921 105.17008972]
[138.92915344 112.21522522]
[155.75238037 114.31653595]
[158.39031982 131.06399536]
[143.02760315 138.23501587]
[131.88401794 125.45780945]
[118.64143372 118.41267395]
[105.39884949 111.36753845]
[98.96965027 115.22958374]
[79.68204498 126.81571198]
[79.68204498 141.81570435]
[79.68204498 156.81570435]
[79.68204498 171.81570435]
[79.68204498 186.81570435]
[79.68204498 201.81570435]
[79.68204498 216.81570435]
[79.68204498 231.81570435]
[79.68204498 246.81570435]
[79.68204498 261.81570435]
[94.22193146 265.87701416]
[107.12631226 273.71154785]
[117.43759918 284.73785400]
[124.39061737 298.13778687]
[127.46942139 312.91696167]
[126.44552612 327.97863770]
[121.39492798 342.20516968]
[112.69240570 354.54083252]
[100.98374176 364.07025146]
[87.13780212 370.08627319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 120]
[22 119]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
