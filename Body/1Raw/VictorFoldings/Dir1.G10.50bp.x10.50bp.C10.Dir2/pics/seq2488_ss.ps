%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUAUAGAAGGGGGGGGGGGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCxxxxxxxxxxCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUCCCCCCCCCCUUACCCUAUAGCA\
) } def
/len { sequence length } bind def

/coor [
[86.45444489 447.07650757]
[71.79278564 443.65167236]
[58.16374588 437.25299072]
[46.16313171 428.16021729]
[36.31555939 416.77078247]
[29.05151939 403.58261108]
[24.68856430 389.17227173]
[23.41742706 374.16967773]
[25.29367256 359.23068237]
[30.23528099 345.00836182]
[38.02622604 332.12448120]
[48.32592392 321.14221191]
[60.68411255 312.54168701]
[74.56054688 306.69891357]
[89.34860229 303.86923218]
[89.64873505 288.87225342]
[89.94886780 273.87524414]
[90.24900055 258.87826538]
[90.54913330 243.88125610]
[90.84926605 228.88426208]
[91.14939880 213.88726807]
[91.44953156 198.89025879]
[91.74966431 183.89326477]
[92.04979706 168.89627075]
[92.34992981 153.89927673]
[92.50000000 138.90002441]
[92.50000000 123.90002441]
[77.05689240 114.61581421]
[70.89950562 96.12763977]
[78.77587128 76.70891571]
[63.77662277 76.85899353]
[48.77737427 77.00906372]
[33.77812576 77.15914154]
[18.77887535 77.30921173]
[3.77962685 77.45928955]
[-9.94244385 85.33426666]
[-22.74649048 77.72469330]
[-38.52433777 83.92919922]
[-48.85411072 70.48553467]
[-38.79539490 56.83787155]
[-22.89656258 62.72544098]
[-10.24733925 54.86119461]
[3.62955332 62.46003723]
[18.62880325 62.30996323]
[33.62805176 62.15988922]
[48.62730026 62.00981522]
[63.62654877 61.85974121]
[78.62580109 61.70966721]
[88.63298035 50.53575897]
[87.13472748 35.61077118]
[85.63646698 20.68578529]
[72.39841461 12.80795002]
[66.40747070 -1.19068956]
[69.76843262 -15.85929298]
[80.98809052 -25.61927223]
[79.48983002 -40.54425812]
[77.99157715 -55.46924591]
[76.49331665 -70.39423370]
[74.99505615 -85.31922150]
[61.09378815 -91.69902802]
[52.31031036 -104.09851837]
[50.92182159 -119.12976837]
[57.20150757 -132.74671936]
[69.37193298 -141.33428955]
[67.87367249 -156.25927734]
[53.00083923 -158.84797668]
[39.37845230 -165.35437012]
[28.01738167 -175.29562378]
[19.76069450 -187.93405151]
[15.22109127 -202.33178711]
[14.73544312 -217.42041016]
[18.33978653 -232.08026123]
[25.76665688 -245.22348022]
[36.46492767 -255.87475586]
[49.64072037 -263.24368286]
[64.31629944 -266.78344727]
[79.40264893 -266.23135376]
[93.78025055 -261.62838745]
[106.38219452 -253.31614685]
[116.27333069 -241.91140747]
[122.71967316 -228.26049805]
[125.24286652 -213.37641907]
[123.65566254 -198.36364746]
[118.07585144 -184.33622742]
[108.91748047 -172.33511353]
[96.86017609 -163.25083923]
[82.79866028 -157.75753784]
[84.29692078 -142.83255005]
[97.93144226 -136.83543396]
[106.79244995 -124.73838806]
[108.41941071 -109.73107910]
[102.27582550 -95.83312225]
[89.92004395 -86.81747437]
[91.41830444 -71.89248657]
[92.91655731 -56.96750259]
[94.41481781 -42.04251862]
[95.91307831 -27.11753082]
[108.84884644 -19.78241539]
[115.05840302 -6.07455778]
[111.96948242 8.83557224]
[100.56145477 19.18752670]
[102.05970764 34.11251450]
[103.55796814 49.03749847]
[115.21830750 58.47341537]
[130.12754822 56.82590866]
[145.03680420 55.17840576]
[159.94606018 53.53089905]
[174.85530090 51.88339233]
[179.44372559 37.36215591]
[189.54663086 25.96693230]
[203.41363525 19.67201233]
[218.64219666 19.56802750]
[232.59387207 25.67299461]
[242.85145569 36.92919159]
[247.63774109 51.38641357]
[246.12350464 66.53986359]
[238.57107544 79.76410675]
[226.28895569 88.76796722]
[211.40510559 91.99147797]
[196.49824524 88.87612915]
[184.15107727 79.96169281]
[176.50280762 66.79264069]
[161.59356689 68.44014740]
[146.68431091 70.08765411]
[131.77505493 71.73516083]
[116.86581421 73.38266754]
[127.07561493 87.32517242]
[128.04011536 103.67605591]
[120.41929626 117.14799500]
[107.50000000 123.90002441]
[107.50000000 138.90002441]
[110.64348602 147.53753662]
[107.34692383 154.19940186]
[107.04679108 169.19641113]
[106.74665833 184.19340515]
[106.44652557 199.19039917]
[106.14639282 214.18739319]
[105.84626007 229.18438721]
[105.54612732 244.18139648]
[105.24600220 259.17837524]
[104.94586945 274.17538452]
[104.64573669 289.17239380]
[104.34560394 304.16937256]
[119.00860596 307.58843994]
[132.64016724 313.98175049]
[144.64434814 323.06982422]
[154.49639893 334.45538330]
[161.76564026 347.64065552]
[166.13426208 362.04931641]
[167.41130066 377.05139160]
[165.54092407 391.99111938]
[160.60491943 406.21539307]
[152.81903076 419.10235596]
[142.52366638 430.08865356]
[130.16885376 438.69403076]
[116.29472351 444.54229736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[26 131]
[27 130]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[37 41]
[49 103]
[50 102]
[51 101]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[64 88]
[65 87]
[104 126]
[105 125]
[106 124]
[107 123]
[108 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
