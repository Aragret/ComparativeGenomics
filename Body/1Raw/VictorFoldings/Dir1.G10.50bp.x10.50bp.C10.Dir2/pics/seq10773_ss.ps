%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAACCUGGGGGGGGGGAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCxxxxxxxxxxCCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACCCCCCCCCCCUAACAACAU\
) } def
/len { sequence length } bind def

/coor [
[69.91410065 375.11437988]
[56.06815720 369.09835815]
[44.35949707 359.56893921]
[35.65697098 347.23327637]
[30.60637093 333.00674438]
[29.58247948 317.94506836]
[32.66127777 303.16589355]
[39.61429977 289.76599121]
[49.92558289 278.73965454]
[62.82996368 270.90515137]
[77.36985016 266.84381104]
[77.36985016 251.84382629]
[77.36985016 236.84382629]
[77.36985016 221.84382629]
[77.36985016 206.84382629]
[77.36985016 191.84382629]
[77.36985016 176.84382629]
[77.36985016 161.84382629]
[77.36985016 146.84382629]
[77.36985016 131.84382629]
[71.89707184 121.43878174]
[70.29445648 110.85746002]
[72.12533569 101.37120056]
[76.57553101 93.96596527]
[82.58514404 89.24168396]
[89.00340271 87.36425781]
[94.74722290 88.07402802]
[98.94424438 90.74772644]
[97.38666534 75.82881927]
[95.82908630 60.90990448]
[94.27150726 45.99099350]
[86.63214874 40.82351685]
[82.15354919 33.42491150]
[81.25754547 25.39968109]
[83.64388275 18.28644753]
[88.42301941 13.26514339]
[84.71685791 -1.26979280]
[81.01069641 -15.80472946]
[77.30453491 -30.33966446]
[73.59837341 -44.87459946]
[69.89221191 -59.40953827]
[57.56356430 -64.92878723]
[50.78170395 -76.38454437]
[51.84106445 -89.45940399]
[60.12871552 -99.37462616]
[56.72573853 -113.98352051]
[53.32276154 -128.59240723]
[49.91978073 -143.20130920]
[46.51680374 -157.81019592]
[43.11382675 -172.41908264]
[36.06869125 -185.66168213]
[25.85521126 -196.64733887]
[15.64173126 -207.63301086]
[5.42825174 -218.61866760]
[-10.37269974 -218.94342041]
[-21.25559235 -230.40371704]
[-20.76379776 -246.20034790]
[-9.18909073 -256.96145630]
[6.60146236 -256.30270386]
[17.23960495 -244.61485291]
[16.41391563 -228.83215332]
[26.62739563 -217.84648132]
[36.84087753 -206.86082458]
[47.05435562 -195.87515259]
[44.05380630 -210.57197571]
[44.45768356 -225.56654358]
[48.24503326 -240.08053589]
[55.21926117 -253.36059570]
[65.01836395 -264.71743774]
[77.13372040 -273.56152344]
[90.93647003 -279.43383789]
[105.71017456 -282.02957153]
[120.68798065 -281.21398926]
[135.09246826 -277.02938843]
[148.17594910 -269.69302368]
[159.25933838 -259.58566284]
[167.76731873 -247.23194885]
[173.25828552 -233.27310181]
[175.44723511 -218.43367004]
[174.22053528 -203.48391724]
[169.64186096 -189.19981384]
[161.94888306 -176.32276917]
[151.54089355 -165.52120972]
[138.95814514 -157.35577393]
[124.85374451 -152.25028992]
[109.95979309 -150.46978760]
[95.04936981 -152.10665894]
[80.89641571 -157.07595825]
[68.23554993 -165.11973572]
[57.72271729 -175.82206726]
[61.12569809 -161.21318054]
[64.52867126 -146.60427856]
[67.93165588 -131.99539185]
[71.33463287 -117.38649750]
[74.73760986 -102.77760315]
[89.36799622 -94.54294586]
[93.63014221 -77.95626068]
[84.42714691 -63.11569977]
[88.13330841 -48.58076096]
[91.83946991 -34.04582596]
[95.54563141 -19.51089096]
[99.25179291 -4.97595406]
[102.95795441 9.55898190]
[115.56908417 17.68052483]
[130.33514404 15.04166031]
[145.10119629 12.40279579]
[155.41552734 0.11483683]
[171.44926453 0.66152191]
[180.90269470 13.62348080]
[176.52394104 29.05740738]
[161.67202759 35.12371445]
[147.74005127 27.16885185]
[132.97399902 29.80771637]
[118.20794678 32.44657898]
[109.19041443 44.43341064]
[110.74800110 59.35232544]
[112.30558014 74.27124023]
[113.86315918 89.19014740]
[122.88069153 101.17697906]
[136.78324890 106.80893707]
[152.94125366 104.00698090]
[163.23762512 116.77086639]
[157.08033752 131.97019958]
[140.80348206 133.96922302]
[131.15129089 120.71149445]
[117.24873352 115.07953644]
[111.02901459 119.27060699]
[119.41094971 131.71018982]
[106.97122955 140.09191895]
[98.58956909 127.65275574]
[92.36985016 131.84382629]
[92.36985016 146.84382629]
[92.36985016 161.84382629]
[92.36985016 176.84382629]
[92.36985016 191.84382629]
[92.36985016 206.84382629]
[92.36985016 221.84382629]
[92.36985016 236.84382629]
[92.36985016 251.84382629]
[92.36985016 266.84381104]
[106.90973663 270.90515137]
[119.81411743 278.73965454]
[130.12539673 289.76599121]
[137.07843018 303.16589355]
[140.15722656 317.94506836]
[139.13333130 333.00674438]
[134.08273315 347.23327637]
[125.38021088 359.56893921]
[113.67154694 369.09835815]
[99.82560730 375.11437988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 118]
[29 117]
[30 116]
[31 115]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[51 64]
[52 63]
[53 62]
[54 61]
[104 114]
[105 113]
[106 112]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
