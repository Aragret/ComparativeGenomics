%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUAUGAGGGGGGGGGGUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAxxxxxxxxxxCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACCCCCCCCCCCUUAAUAUGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 402.01483154]
[71.19830322 395.99880981]
[59.48964310 386.46939087]
[50.78712082 374.13372803]
[45.73651886 359.90719604]
[44.71262741 344.84552002]
[47.79142761 330.06634521]
[54.74444962 316.66641235]
[65.05573273 305.64010620]
[77.96011353 297.80557251]
[92.50000000 293.74426270]
[92.50000000 278.74426270]
[92.50000000 263.74426270]
[92.50000000 248.74427795]
[92.50000000 233.74427795]
[92.50000000 218.74427795]
[92.50000000 203.74427795]
[92.50000000 188.74427795]
[92.50000000 173.74427795]
[92.50000000 158.74427795]
[92.50000000 143.74427795]
[92.50000000 128.74427795]
[83.28911591 129.10694885]
[73.49526978 126.41389465]
[64.13410187 120.42794037]
[49.36804962 123.06680298]
[34.60199356 125.70567322]
[19.83593750 128.34452820]
[14.69179821 142.81634521]
[2.99053478 152.76501465]
[-12.12027168 155.51440430]
[-26.57588959 150.32492065]
[-36.48783112 138.59252930]
[-39.18983459 123.47318268]
[-33.95507050 109.03389740]
[-22.19166946 99.15878296]
[-7.06392431 96.50418091]
[7.35887718 101.78417969]
[17.19707298 113.57847595]
[31.96312904 110.93961334]
[46.72918320 108.30075073]
[61.49523926 105.66188812]
[63.34832001 98.39441681]
[48.37950516 99.36116791]
[42.83448029 85.42371368]
[54.37629318 75.84318542]
[67.05448151 83.85948181]
[68.90756226 76.59201050]
[57.20793915 67.20484924]
[45.50831604 57.81769180]
[33.80869293 48.43052673]
[17.76868248 48.74304962]
[7.63485622 36.30580139]
[11.18101597 20.65957832]
[25.68685150 13.80682278]
[40.02473068 21.00438118]
[43.19585419 36.73090363]
[54.89547729 46.11806488]
[66.59510040 55.50522995]
[78.29472351 64.89238739]
[89.72303009 63.01814651]
[100.41254425 64.51136017]
[109.45599365 68.80275726]
[116.20479584 75.10245514]
[127.29611206 65.00380707]
[138.38742065 54.90515518]
[129.49464417 42.80820847]
[121.91507721 29.84796524]
[115.73176575 16.16643143]
[111.01245880 1.91350687]
[107.80886841 -12.75464630]
[106.15608978 -27.67731476]
[106.07222748 -42.69099808]
[107.55821228 -57.63119507]
[110.59775543 -72.33422089]
[115.15755463 -86.63896942]
[121.18765259 -100.38872528]
[128.62197876 -113.43282318]
[137.37907410 -125.62834930]
[147.36300659 -136.84169006]
[158.46435547 -146.94998169]
[170.56152344 -155.84246826]
[183.52195740 -163.42172241]
[197.20364380 -169.60470581]
[211.45668030 -174.32365417]
[226.12490845 -177.52688599]
[241.04760742 -179.17930603]
[256.06130981 -179.26280212]
[271.00146484 -177.77645874]
[285.70440674 -174.73655701]
[300.00906372 -170.17640686]
[313.75866699 -164.14598083]
[326.80258179 -156.71133423]
[338.99789429 -147.95393372]
[350.21099854 -137.96974182]
[360.31900024 -126.86814117]
[369.21121216 -114.77075958]
[376.79013062 -101.81015015]
[382.97277832 -88.12831116]
[387.69140625 -73.87516022]
[390.89428711 -59.20685196]
[392.54632568 -44.28410339]
[392.62945557 -29.27041435]
[391.14276123 -14.33028793]
[388.10250854 0.37258744]
[383.54199219 14.67711830]
[377.51123047 28.42657661]
[370.07626343 41.47031403]
[361.31857300 53.66541672]
[351.33410645 64.87827301]
[340.23226929 74.98602295]
[328.13467407 83.87792206]
[315.17388916 91.45654297]
[301.49188232 97.63885498]
[287.23861694 102.35712433]
[272.57022095 105.55964661]
[257.64746094 107.21134186]
[242.63375854 107.29410553]
[227.69366455 105.80702972]
[212.99085999 102.76641846]
[198.68644714 98.20557404]
[184.93713379 92.17447662]
[171.89356995 84.73919678]
[159.69868469 75.98120880]
[148.48606873 65.99646759]
[137.39476013 76.09512329]
[126.30344391 86.19377136]
[127.17176056 112.00743866]
[107.50000000 128.74427795]
[107.50000000 143.74427795]
[107.50000000 158.74427795]
[107.50000000 173.74427795]
[107.50000000 188.74427795]
[107.50000000 203.74427795]
[107.50000000 218.74427795]
[107.50000000 233.74427795]
[107.50000000 248.74427795]
[107.50000000 263.74426270]
[107.50000000 278.74426270]
[107.50000000 293.74426270]
[122.03988647 297.80557251]
[134.94427490 305.64010620]
[145.25555420 316.66641235]
[152.20857239 330.06634521]
[155.28736877 344.84552002]
[154.26348877 359.90719604]
[149.21287537 374.13372803]
[140.51036072 386.46939087]
[128.80169678 395.99880981]
[114.95575714 402.01483154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 42]
[26 41]
[27 40]
[28 39]
[48 60]
[49 59]
[50 58]
[51 57]
[64 127]
[65 126]
[66 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
