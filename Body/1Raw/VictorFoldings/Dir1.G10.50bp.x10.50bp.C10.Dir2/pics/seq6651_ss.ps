%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUGCCAUGGGGGGGGGGAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGxxxxxxxxxxUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCCCCCCCCCCCUACCAU\
) } def
/len { sequence length } bind def

/coor [
[71.99717712 522.38781738]
[58.15123749 516.37176514]
[46.44257736 506.84234619]
[37.74005127 494.50668335]
[32.68944931 480.28018188]
[31.66555977 465.21847534]
[34.74435806 450.43933105]
[41.69738007 437.03939819]
[52.00866318 426.01306152]
[64.91304779 418.17855835]
[79.45293427 414.11724854]
[79.45293427 399.11724854]
[79.45293427 384.11724854]
[79.45293427 369.11724854]
[79.45293427 354.11724854]
[79.45293427 339.11724854]
[79.45293427 324.11724854]
[79.45293427 309.11724854]
[79.45293427 294.11724854]
[79.45293427 279.11724854]
[64.43862915 275.22180176]
[50.92732239 267.58026123]
[39.83605957 256.70468140]
[31.91934586 243.32691956]
[27.71779633 228.34921265]
[27.52122307 212.78347778]
[31.34866333 197.68289185]
[38.94668961 184.07064819]
[49.80619049 172.87059021]
[63.19647598 164.84457397]
[78.21445465 160.54058838]
[77.90239716 145.54383850]
[77.59033966 130.54708862]
[67.49169159 119.45576477]
[52.58978653 117.74307251]
[37.68788528 116.03038788]
[27.29305840 127.55111694]
[12.10482121 130.72871399]
[-2.03663754 124.34131622]
[-9.69363880 110.84502411]
[-7.92190981 95.42942810]
[2.59728360 84.02214050]
[17.81909752 81.00949860]
[31.89043236 87.54991913]
[39.40057373 101.12848663]
[54.30247879 102.84117126]
[69.20437622 104.55386353]
[71.92422485 95.19702148]
[77.15095520 87.93928528]
[66.48933411 77.38799286]
[55.82770538 66.83670044]
[45.16608047 56.28541183]
[29.87521362 58.92530060]
[15.96785355 52.04307938]
[8.79166412 38.28510284]
[11.10603714 22.94159317]
[22.02104759 11.91244221]
[37.33965302 9.43858433]
[51.17153549 16.47126961]
[58.19805527 30.30628395]
[55.71736908 45.62378693]
[66.37899780 56.17507553]
[77.04062653 66.72636414]
[87.70224762 77.27765656]
[89.57466888 69.96338654]
[93.53565979 62.80550385]
[94.47129059 47.83471298]
[95.40691376 32.86392212]
[81.41184998 27.08319473]
[70.05372620 17.06962013]
[62.56457901 3.90939736]
[59.75678635 -10.96995163]
[61.93491364 -25.95442581]
[68.86269379 -39.41862488]
[79.78865051 -49.90204620]
[93.52761841 -56.26753235]
[108.58930206 -57.82460403]
[123.33992004 -54.40435791]
[136.17942810 -46.37779617]
[145.71510315 -34.61558533]
[150.91258240 -20.39359665]
[151.20808411 -5.25452709]
[146.56954956 9.15944958]
[137.50013733 21.28481293]
[124.98361969 29.80629539]
[110.37770844 33.79954910]
[109.44207764 48.77033997]
[108.50645447 63.74113464]
[114.49987030 68.24990082]
[116.31597137 53.36024475]
[130.11888123 47.48830795]
[142.10551453 56.50609970]
[140.28909302 71.39571381]
[126.48670197 77.26742554]
[132.48011780 81.77619171]
[146.60491943 76.72743988]
[160.72972107 71.67868042]
[174.85452271 66.62992096]
[175.96253967 51.44136810]
[183.15821838 38.01966858]
[195.19488525 28.69021225]
[209.98709106 25.06938744]
[224.97201538 27.78452110]
[237.55342102 36.36520386]
[245.55151367 49.32477570]
[247.58055115 64.41791534]
[243.28901672 79.02964020]
[233.42044067 90.62838745]
[219.68460083 97.20460510]
[204.46131897 97.61891937]
[190.38812256 91.79954529]
[179.90328979 80.75473022]
[165.77847290 85.80348206]
[151.65367126 90.85224152]
[137.52886963 95.90099335]
[122.69910431 125.90275574]
[92.58708954 130.23503113]
[92.89914703 145.23178101]
[93.21120453 160.22853088]
[107.36832428 163.51834106]
[120.31218719 170.10832214]
[131.28681946 179.60852051]
[139.65251160 191.45910645]
[144.92303467 204.96347046]
[146.79400635 219.32908630]
[145.16035461 233.71409607]
[140.12228394 247.27656555]
[131.97909546 259.22384644]
[121.21144104 268.85879517]
[108.45295715 275.62057495]
[94.45293427 279.11724854]
[94.45293427 294.11724854]
[94.45293427 309.11724854]
[94.45293427 324.11724854]
[94.45293427 339.11724854]
[94.45293427 354.11724854]
[94.45293427 369.11724854]
[94.45293427 384.11724854]
[94.45293427 399.11724854]
[94.45293427 414.11724854]
[108.99282074 418.17855835]
[121.89720154 426.01306152]
[132.20848083 437.03939819]
[139.16149902 450.43933105]
[142.24031067 465.21847534]
[141.21641541 480.28018188]
[136.16581726 494.50668335]
[127.46328735 506.84234619]
[115.75462341 516.37176514]
[101.90868378 522.38781738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 119]
[32 118]
[33 117]
[34 47]
[35 46]
[36 45]
[49 64]
[50 63]
[51 62]
[52 61]
[66 88]
[67 87]
[68 86]
[95 115]
[96 114]
[97 113]
[98 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
