%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGACCCUUGGGGGGGGGGGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUxxxxxxxxxxACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCCCCCCCCCCCAUGACCCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 416.18017578]
[71.19830322 410.16415405]
[59.48964310 400.63473511]
[50.78712082 388.29907227]
[45.73651886 374.07254028]
[44.71262741 359.01086426]
[47.79142761 344.23171997]
[54.74444962 330.83178711]
[65.05573273 319.80545044]
[77.96011353 311.97094727]
[92.50000000 307.90963745]
[92.50000000 292.90963745]
[92.50000000 277.90963745]
[92.50000000 262.90963745]
[92.50000000 247.90962219]
[92.50000000 232.90962219]
[92.50000000 217.90962219]
[92.50000000 202.90962219]
[92.50000000 187.90962219]
[92.50000000 172.90962219]
[92.50000000 157.90962219]
[92.50000000 142.90962219]
[92.50000000 127.90962982]
[80.15945435 121.01309204]
[72.56648254 109.08841705]
[71.53797150 94.98901367]
[77.32002258 82.08866882]
[88.52908325 73.47425079]
[86.35224915 58.63304520]
[84.17540741 43.79183960]
[81.99857330 28.95063591]
[79.82173920 14.10943031]
[77.64489746 -0.73177540]
[75.46806335 -15.57298088]
[60.49042130 -14.61221027]
[45.48430634 -14.87546158]
[30.54957962 -16.36098289]
[15.78563499 -19.05888939]
[1.29072130 -22.95122719]
[-12.83869648 -28.01209068]
[-26.50858879 -34.20780182]
[-39.62798309 -41.49712753]
[-52.10957336 -49.83156204]
[-63.87028885 -59.15563202]
[-74.83187103 -69.40729523]
[-84.92136383 -80.51831818]
[-94.07163239 -92.41476440]
[-102.22176361 -105.01746368]
[-109.31754303 -118.24254608]
[-115.31172943 -132.00199890]
[-120.16444397 -146.20425415]
[-123.84338379 -160.75479126]
[-126.32407379 -175.55677795]
[-127.58999634 -190.51171875]
[-127.63272858 -205.52009583]
[-126.45199585 -220.48199463]
[-124.05564880 -235.29788208]
[-120.45962524 -249.86912537]
[-115.68787384 -264.09878540]
[-109.77214813 -277.89215088]
[-102.75180054 -291.15744019]
[-94.67356873 -303.80633545]
[-85.59120178 -315.75469971]
[-75.56514740 -326.92300415]
[-64.66212463 -337.23693848]
[-52.95470047 -346.62783813]
[-40.52077866 -355.03320312]
[-27.44310951 -362.39712524]
[-13.80872250 -368.67059326]
[0.29164481 -373.81182861]
[14.76415634 -377.78665161]
[29.51249886 -380.56860352]
[44.43852234 -382.13916016]
[59.44289398 -382.48785400]
[74.42576599 -381.61239624]
[89.28742218 -379.51861572]
[103.92895508 -376.22039795]
[118.25294495 -371.73974609]
[132.16404724 -366.10644531]
[145.56968689 -359.35800171]
[158.38066101 -351.53933716]
[170.51171875 -342.70245361]
[181.88209534 -332.90615845]
[192.41615295 -322.21569824]
[202.04379272 -310.70214844]
[210.70091248 -298.44216919]
[218.32992554 -285.51736450]
[224.88005066 -272.01370239]
[230.30769348 -258.02108765]
[234.57673645 -243.63261414]
[237.65878296 -228.94404602]
[239.53330994 -214.05314636]
[240.18783569 -199.05900574]
[239.61802673 -184.06140137]
[237.82765198 -169.16014099]
[234.82862854 -154.45440674]
[230.64093018 -140.04205322]
[225.29241943 -126.01898956]
[218.81867981 -112.47855377]
[211.26280212 -99.51084137]
[202.67507935 -87.20215607]
[193.11265564 -75.63440704]
[182.63914490 -64.88459015]
[171.32427979 -55.02423477]
[159.24334717 -46.11896133]
[146.47674561 -38.22803879]
[133.10943604 -31.40397263]
[119.23038483 -25.69218254]
[104.93193817 -21.13067818]
[90.30926514 -17.74981880]
[92.48610687 -2.90861225]
[94.66294098 11.93259335]
[96.83977509 26.77379799]
[99.01661682 41.61500549]
[101.19345093 56.45621109]
[103.37029266 71.29741669]
[122.15997314 81.44918060]
[128.84783936 101.73175812]
[143.07463074 106.48557281]
[160.01348877 105.77066040]
[165.38960266 121.84964752]
[151.42726135 131.46676636]
[138.32081604 120.71234894]
[124.09403229 115.95853424]
[120.83134460 120.03128052]
[116.88942719 123.45088959]
[112.39682007 126.10586548]
[107.50000000 127.90962982]
[107.50000000 142.90962219]
[107.50000000 157.90962219]
[107.50000000 172.90962219]
[107.50000000 187.90962219]
[107.50000000 202.90962219]
[107.50000000 217.90962219]
[107.50000000 232.90962219]
[107.50000000 247.90962219]
[107.50000000 262.90963745]
[107.50000000 277.90963745]
[107.50000000 292.90963745]
[107.50000000 307.90963745]
[122.03988647 311.97094727]
[134.94427490 319.80545044]
[145.25555420 330.83178711]
[152.20857239 344.23171997]
[155.28736877 359.01086426]
[154.26348877 374.07254028]
[149.21287537 388.29907227]
[140.51036072 400.63473511]
[128.80169678 410.16415405]
[114.95575714 416.18017578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
[34 110]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
