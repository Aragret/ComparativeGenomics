%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAAAAAAGGGGGGGGGGGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUAxxxxxxxxxxUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUCCCCCCCCCCAUUCGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[87.07696533 398.71502686]
[73.23102570 392.69900513]
[61.52236557 383.16958618]
[52.81983948 370.83389282]
[47.76923752 356.60739136]
[46.74534607 341.54571533]
[49.82414627 326.76654053]
[56.77716827 313.36660767]
[67.08845520 302.34027100]
[79.99283600 294.50576782]
[94.53272247 290.44445801]
[94.53272247 275.44445801]
[94.53272247 260.44445801]
[94.53272247 245.44445801]
[94.53272247 230.44445801]
[94.53272247 215.44445801]
[94.53272247 200.44445801]
[94.53272247 185.44445801]
[94.53272247 170.44445801]
[94.53272247 155.44445801]
[83.65389252 145.11724854]
[68.67417908 145.89709473]
[55.29492950 154.34140015]
[42.18260956 147.27626038]
[27.20289612 148.05610657]
[13.82364655 156.50039673]
[0.71132731 149.43525696]
[-14.26838684 150.21510315]
[-29.24810219 150.99494934]
[-44.22781754 151.77478027]
[-57.60706711 160.21908569]
[-70.71938324 153.15394592]
[-85.69909668 153.93379211]
[-96.09077454 165.84129333]
[-111.86412048 166.82977295]
[-123.66109467 156.31277466]
[-124.48274994 140.52986145]
[-113.84162903 128.84474182]
[-98.05090332 128.19000244]
[-86.47894287 138.95407104]
[-71.49922943 138.17422485]
[-59.19142914 129.78570557]
[-45.00765991 136.79507446]
[-30.02794647 136.01522827]
[-15.04823208 135.23538208]
[-0.06851780 134.45553589]
[12.23928261 126.06701660]
[26.42305183 133.07638550]
[41.40276718 132.29653931]
[53.71056747 123.90802002]
[67.89433289 130.91738892]
[82.87404633 130.13754272]
[70.42335510 114.33590698]
[69.28324890 95.31454468]
[78.66043854 79.95700836]
[94.16362762 73.14648438]
[95.09925842 58.17569351]
[96.03488922 43.20490265]
[96.97051239 28.23410988]
[87.46360016 20.96833229]
[82.72106171 10.11396980]
[83.82599640 -1.55877328]
[90.38507080 -11.13198090]
[100.65624237 -16.26943588]
[102.21382141 -31.18834877]
[103.77140808 -46.10726166]
[89.62887573 -51.34555435]
[77.23384094 -59.93706131]
[67.36546326 -71.34170532]
[60.64407730 -84.84258270]
[57.49219513 -99.59102631]
[58.10794067 -114.65991974]
[62.45261765 -129.10203552]
[70.25310516 -142.00952148]
[81.01906586 -152.57099915]
[94.07374573 -160.12257385]
[108.59650421 -164.18954468]
[123.67443848 -164.51625061]
[138.35972595 -161.08216858]
[151.72926331 -154.10316467]
[162.94259644 -144.01792908]
[171.29486084 -131.46044922]
[176.26103210 -117.22008514]
[177.52893066 -102.19200134]
[175.01884460 -87.32087708]
[168.88856506 -73.54152679]
[159.52345276 -61.72012329]
[147.51220703 -52.59978104]
[133.60986328 -46.75380325]
[118.69031525 -44.54967880]
[117.13273621 -29.63076782]
[115.57515717 -14.71185493]
[127.94088745 -1.27734005]
[126.60237885 17.25117302]
[111.94130707 29.16973877]
[111.00567627 44.14052963]
[110.07005310 59.11132050]
[109.13442230 74.08211517]
[121.81977844 80.48088837]
[130.27037048 92.98735809]
[131.63731384 108.90933228]
[124.72439575 124.29555511]
[139.71708679 123.82750702]
[154.70979309 123.35946655]
[169.70248413 122.89142609]
[175.04583740 108.66058350]
[185.43202209 97.56122589]
[199.27720642 91.28592682]
[214.47010803 90.79163361]
[228.69390869 96.15370941]
[239.77958679 106.55448151]
[246.03666687 120.40790558]
[246.51098633 135.60144043]
[241.13020325 149.81817627]
[230.71485901 160.89016724]
[216.85321045 167.12901306]
[201.65905762 167.58334351]
[187.44941711 162.18386841]
[176.39112854 151.75396729]
[170.17053223 137.88412476]
[155.17782593 138.35215759]
[140.18513489 138.82020569]
[125.19243622 139.28825378]
[140.18328857 139.81222534]
[151.71667480 149.40289307]
[154.96607971 164.04670715]
[148.57167053 177.61547852]
[135.20939636 184.43089294]
[120.47116852 181.64080811]
[110.52468109 170.41282654]
[109.53272247 155.44445801]
[109.53272247 170.44445801]
[109.53272247 185.44445801]
[109.53272247 200.44445801]
[109.53272247 215.44445801]
[109.53272247 230.44445801]
[109.53272247 245.44445801]
[109.53272247 260.44445801]
[109.53272247 275.44445801]
[109.53272247 290.44445801]
[124.07260895 294.50576782]
[136.97698975 302.34027100]
[147.28826904 313.36660767]
[154.24128723 326.76654053]
[157.32009888 341.54571533]
[156.29620361 356.60739136]
[151.24560547 370.83389282]
[142.54307556 383.16958618]
[130.83441162 392.69900513]
[116.98847198 398.71502686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 52]
[22 51]
[24 49]
[25 48]
[27 46]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
[56 98]
[57 97]
[58 96]
[59 95]
[64 92]
[65 91]
[66 90]
[102 123]
[103 122]
[104 121]
[105 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
