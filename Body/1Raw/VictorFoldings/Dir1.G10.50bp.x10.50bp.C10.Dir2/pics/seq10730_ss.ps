%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCCUAAGGGGGGGGGGGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCxxxxxxxxxxUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCCCCCCCCCCCUCUACCUAA\
) } def
/len { sequence length } bind def

/coor [
[96.06336212 406.88455200]
[84.17909241 397.60943604]
[74.86038208 385.75933838]
[68.64901733 372.02316284]
[65.90611267 357.19952393]
[66.79114532 342.15026855]
[71.25265503 327.75033569]
[79.03125000 314.83688354]
[89.67470551 304.16073608]
[102.56420898 296.34255981]
[116.95040131 291.83688354]
[116.01477051 276.86608887]
[115.07913971 261.89529419]
[114.14350891 246.92449951]
[113.20788574 231.95372009]
[112.27225494 216.98292542]
[111.33662415 202.01213074]
[110.40100098 187.04133606]
[109.46537018 172.07054138]
[108.52973938 157.09976196]
[107.59411621 142.12896729]
[94.65605927 134.53906250]
[81.13186646 141.02722168]
[77.42619324 156.21939087]
[64.79161072 165.43359375]
[49.19379044 164.31915283]
[37.99753952 153.40228271]
[36.48939133 137.83758545]
[45.38144302 124.97425842]
[60.47513962 120.88594055]
[74.64369965 127.50302887]
[88.16789246 121.01486969]
[81.32360840 110.68344116]
[81.08797455 99.64435577]
[67.43173981 93.43894958]
[53.77549362 87.23353577]
[40.11925507 81.02812958]
[30.40670776 92.58533478]
[17.93558311 101.09260559]
[3.63131833 105.91864014]
[-11.44461346 106.70531464]
[-26.17347908 103.39425659]
[-39.46229553 96.23116302]
[-50.32495117 85.74758911]
[-57.95536041 72.72148895]
[-61.78729248 58.11946869]
[-61.53639984 43.02511215]
[-57.22129822 28.55851364]
[-49.16219330 15.79319286]
[-37.95713043 5.67642021]
[-24.43759346 -1.04107225]
[-9.60682392 -3.86080194]
[5.43463516 -2.57352614]
[19.57060814 2.72523093]
[31.75211334 11.64226627]
[41.07520294 23.51587677]
[46.84803772 37.46495819]
[48.64223862 52.45440292]
[46.32466125 67.37188721]
[59.98090363 73.57730103]
[73.63714600 79.78270721]
[87.29338074 85.98811340]
[115.27960205 84.85149384]
[117.72473145 116.35411835]
[128.60356140 106.02691650]
[139.48237610 95.69971466]
[150.36120605 85.37250519]
[161.24003601 75.04530334]
[172.11885071 64.71809387]
[163.13931274 52.68048477]
[155.64654541 39.66530609]
[149.74577332 25.85526848]
[145.51979065 11.44424820]
[143.02795410 -3.36544895]
[142.30525208 -18.36591721]
[143.36180115 -33.34657288]
[146.18278503 -48.09711075]
[150.72859192 -62.41046143]
[156.93542480 -76.08567810]
[164.71614075 -88.93079376]
[173.96150208 -100.76547241]
[184.54171753 -111.42357635]
[196.30827332 -120.75548553]
[209.09597778 -128.63018799]
[222.72531128 -134.93714905]
[237.00492859 -139.58782959]
[251.73439026 -142.51690674]
[266.70687866 -143.68330383]
[281.71224976 -143.07061768]
[296.53982544 -140.68746948]
[310.98144531 -136.56730652]
[324.83441162 -130.76795959]
[337.90417480 -123.37085724]
[350.00732422 -114.47984314]
[360.97393799 -104.21971893]
[370.65002441 -92.73453522]
[378.89978027 -80.18551636]
[385.60739136 -66.74883270]
[390.67868042 -52.61312103]
[394.04244995 -37.97681808]
[395.65148926 -23.04539680]
[395.48321533 -8.02847195]
[393.54000854 6.86314392]
[389.84909058 21.42039490]
[384.46231079 35.43891907]
[377.45529175 48.72192001]
[368.92642212 61.08292389]
[358.99539185 72.34840393]
[347.80163574 82.36020660]
[335.50228882 90.97778320]
[322.27005005 98.08016205]
[308.29061890 103.56762695]
[293.76028442 107.36315155]
[278.88305664 109.41344452]
[263.86770630 109.68972778]
[248.92510986 108.18811798]
[234.26498413 104.92970276]
[220.09317017 99.96022034]
[206.60858154 93.34944153]
[194.00054932 85.19015503]
[182.44606018 75.59692383]
[171.56723022 85.92412567]
[160.68841553 96.25133514]
[149.80958557 106.57853699]
[138.93075562 116.90573883]
[128.05194092 127.23294830]
[122.56490326 141.19334412]
[123.50053406 156.16412354]
[124.43616486 171.13491821]
[125.37178802 186.10571289]
[126.30741882 201.07650757]
[127.24304962 216.04728699]
[128.17868042 231.01808167]
[129.11430359 245.98887634]
[130.04992676 260.95965576]
[130.98556519 275.93045044]
[131.92118835 290.90124512]
[146.75642395 293.58065796]
[160.51905823 299.73318481]
[172.40895081 309.00106812]
[181.73484802 320.84552002]
[187.95452881 334.57794189]
[190.70642090 349.39990234]
[189.83052063 364.44967651]
[185.37774658 378.85232544]
[177.60697937 391.77047729]
[166.97000122 402.45309448]
[154.08523560 410.27908325]
[139.70178223 414.79348755]
[124.65586853 415.73379517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 32]
[23 31]
[34 62]
[35 61]
[36 60]
[37 59]
[64 126]
[65 125]
[66 124]
[67 123]
[68 122]
[69 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
