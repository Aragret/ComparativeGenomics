%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAAUAAAGGGGGGGGGGGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUxxxxxxxxxxAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCCCAUAAA\
) } def
/len { sequence length } bind def

/coor [
[98.59461212 373.57888794]
[84.74867249 367.56286621]
[73.04001617 358.03344727]
[64.33748627 345.69778442]
[59.28688812 331.47125244]
[58.26299667 316.40957642]
[61.34179688 301.63040161]
[68.29481506 288.23046875]
[78.60610199 277.20416260]
[91.51048279 269.36962891]
[106.05036926 265.30831909]
[106.05036926 250.30831909]
[106.05036926 235.30831909]
[106.05036926 220.30831909]
[106.05036926 205.30831909]
[106.05036926 190.30831909]
[106.05036926 175.30831909]
[106.05036926 160.30831909]
[106.05036926 145.30831909]
[106.05036926 130.30831909]
[100.20055389 125.61474609]
[94.88804626 139.64247131]
[79.90523529 138.92459106]
[75.95821381 124.45320892]
[88.50093079 116.22758484]
[82.65112305 111.53400421]
[68.00762177 114.78482819]
[53.36412048 118.03565216]
[38.72061920 121.28647614]
[24.07711601 124.53730774]
[12.36184692 136.01269531]
[-3.35888338 131.34465027]
[-6.91293478 115.33525085]
[5.35579586 104.45359802]
[20.82629013 109.89380646]
[35.46979141 106.64297485]
[50.11329269 103.39215088]
[64.75679779 100.14132690]
[79.40029907 96.89050293]
[90.49160767 86.79185486]
[95.09717560 72.51638794]
[99.70274353 58.24092865]
[87.44146729 66.88159943]
[72.58640289 68.96176147]
[58.42335129 64.02130890]
[48.08505630 53.15302277]
[43.85824585 38.76086807]
[46.67785263 24.02825928]
[55.92021179 12.21391010]
[69.54099274 5.93104649]
[84.52739716 6.56938028]
[97.56459045 13.98771763]
[105.76884460 26.54519272]
[107.32520294 41.46616745]
[115.04929352 28.60776711]
[122.77337646 15.74936390]
[130.49746704 2.89096141]
[118.44791412 -6.06309652]
[107.33404541 -16.15511513]
[97.26290894 -27.28789902]
[88.33147430 -39.35423279]
[80.62577820 -52.23790359]
[74.22002411 -65.81483459]
[69.17590332 -79.95426941]
[65.54199982 -94.52003479]
[63.35330582 -109.37184906]
[62.63090134 -124.36668396]
[63.38174438 -139.36012268]
[65.59860229 -154.20774841]
[69.26013184 -168.76660156]
[74.33106232 -182.89643860]
[80.76255798 -196.46119690]
[88.49267578 -209.33023071]
[97.44697571 -221.37960815]
[107.53921509 -232.49327087]
[118.67220306 -242.56417847]
[130.73870850 -251.49537659]
[143.62254333 -259.20080566]
[157.19960022 -265.60629272]
[171.33914185 -270.65014648]
[185.90498352 -274.28375244]
[200.75683594 -276.47213745]
[215.75167847 -277.19424438]
[230.74510193 -276.44311523]
[245.59268188 -274.22595215]
[260.15145874 -270.56411743]
[274.28121948 -265.49291992]
[287.84582520 -259.06115723]
[300.71472168 -251.33076477]
[312.76391602 -242.37623596]
[323.87734985 -232.28376770]
[333.94805908 -221.15058899]
[342.87899780 -209.08389282]
[350.58419800 -196.19990540]
[356.98941040 -182.62272644]
[362.03295898 -168.48309326]
[365.66629028 -153.91717529]
[367.85437012 -139.06527710]
[368.57617188 -124.07041168]
[367.82473755 -109.07701111]
[365.60729980 -94.22946167]
[361.94519043 -79.67076111]
[356.87368774 -65.54112244]
[350.44165039 -51.97662354]
[342.71099854 -39.10789871]
[333.75622559 -27.05888557]
[323.66354370 -15.94562721]
[312.53015137 -5.87515306]
[300.46328735 3.05555177]
[287.57916260 10.76047611]
[274.00183105 17.16541672]
[259.86209106 22.20868874]
[245.29611206 25.84172058]
[230.44416809 28.02952385]
[215.44929504 28.75102806]
[200.45590210 27.99928474]
[185.60839844 25.78153229]
[171.04977417 22.11913300]
[156.92024231 17.04735565]
[143.35586548 10.61504650]
[135.63177490 23.47344971]
[127.90769196 36.33185196]
[120.18360901 49.19025421]
[113.97820282 62.84649658]
[109.37263489 77.12195587]
[104.76707458 91.39741516]
[112.05475616 90.66213989]
[120.00196838 94.82082367]
[125.77291870 103.95677948]
[126.71121979 116.67372894]
[121.05036926 130.30831909]
[121.05036926 145.30831909]
[121.05036926 160.30831909]
[121.05036926 175.30831909]
[121.05036926 190.30831909]
[121.05036926 205.30831909]
[121.05036926 220.30831909]
[121.05036926 235.30831909]
[121.05036926 250.30831909]
[121.05036926 265.30831909]
[135.59025574 269.36962891]
[148.49464417 277.20416260]
[158.80592346 288.23046875]
[165.75894165 301.63040161]
[168.83773804 316.40957642]
[167.81385803 331.47125244]
[162.76324463 345.69778442]
[154.06072998 358.03344727]
[142.35206604 367.56286621]
[128.50611877 373.57888794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 126]
[41 125]
[42 124]
[54 123]
[55 122]
[56 121]
[57 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
