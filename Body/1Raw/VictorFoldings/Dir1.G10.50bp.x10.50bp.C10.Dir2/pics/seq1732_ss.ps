%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACUAAAAGGGGGGGGGGCCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUxxxxxxxxxxACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAACCCCCCCCCCUUAACUAGAA\
) } def
/len { sequence length } bind def

/coor [
[89.53723907 765.08160400]
[75.69129944 759.06561279]
[63.98263550 749.53619385]
[55.28010941 737.20050049]
[50.22950745 722.97399902]
[49.20561981 707.91229248]
[52.28441620 693.13311768]
[59.23743820 679.73321533]
[69.54872131 668.70690918]
[82.45310211 660.87237549]
[96.99298859 656.81103516]
[96.99298859 641.81103516]
[96.99298859 626.81103516]
[96.99298859 611.81103516]
[96.99298859 596.81103516]
[96.99298859 581.81103516]
[96.99298859 566.81103516]
[96.99298859 551.81103516]
[96.99298859 536.81103516]
[96.99298859 521.81103516]
[82.15720367 516.62884521]
[69.96476746 506.67184448]
[61.89530182 493.12469482]
[58.93614197 477.60919189]
[61.46157074 461.99011230]
[69.18556976 448.15100098]
[81.19410706 437.76708984]
[96.05323792 432.10247803]
[95.74118805 417.10571289]
[95.42913055 402.10897827]
[81.10532379 394.69409180]
[72.40962982 380.99859619]
[71.78488922 364.69400024]
[79.49510193 350.20788574]
[93.52807617 341.52142334]
[92.90409851 326.53439331]
[92.28012085 311.54739380]
[91.65614319 296.56036377]
[91.03216553 281.57336426]
[87.58927155 274.97851562]
[90.55438232 266.26873779]
[90.24232483 251.27198792]
[86.93737793 244.60693359]
[90.08304596 235.96073914]
[79.76206970 228.18423462]
[75.76409149 215.69061279]
[79.77021790 202.99497986]
[90.52528381 194.82269287]
[90.83734131 179.82594299]
[91.14939117 164.82919312]
[91.46144867 149.83244324]
[83.99060059 136.94696045]
[92.01332092 123.31073761]
[82.44287109 117.28943634]
[76.56931305 107.62760162]
[75.62940979 96.35967255]
[79.82108307 85.85826874]
[88.26169586 78.33459473]
[85.46937561 63.59679031]
[82.67704773 48.85898590]
[79.88471985 34.12117767]
[64.86165619 32.44816971]
[50.99982071 26.41983223]
[39.53179169 16.57220650]
[31.47730255 3.78093576]
[27.55255318 -10.81658936]
[28.10652924 -25.92236710]
[33.08996964 -40.19320297]
[42.05975342 -52.36014175]
[54.21829224 -61.34130478]
[68.48445892 -66.33810425]
[83.58970642 -66.90621185]
[98.19090271 -62.99512863]
[110.98970795 -54.95261383]
[120.84806061 -43.49380493]
[126.88936615 -29.63761520]
[128.57643127 -14.61612320]
[125.75925446 0.23496807]
[118.68832397 13.59510994]
[107.99239349 24.27632713]
[94.62252808 31.32885551]
[97.41485596 46.06666183]
[100.20717621 60.80446625]
[102.99950409 75.54227448]
[105.83951569 76.06096649]
[108.59937286 76.90826416]
[117.86432648 65.11162567]
[113.49579620 50.22217941]
[118.74507904 35.61996460]
[131.59370422 26.91983032]
[147.10113525 27.46715546]
[159.30441284 37.05148315]
[163.51116943 51.98744202]
[158.10379028 66.53185272]
[145.16152954 75.09209442]
[129.66096497 74.37657166]
[120.39601898 86.17321777]
[123.20325470 108.29374695]
[107.01007080 123.62279510]
[114.45860291 137.58094788]
[106.45820618 150.14450073]
[106.14614868 165.14125061]
[105.83409119 180.13800049]
[105.52203369 195.13475037]
[117.85188293 207.50053406]
[117.46380615 224.62167358]
[105.08304596 235.96073914]
[105.23908234 250.95993042]
[105.55113983 265.95669556]
[106.01918030 280.94937134]
[106.64315796 295.93640137]
[107.26713562 310.92340088]
[107.89111328 325.91043091]
[108.51509094 340.89746094]
[121.25876617 346.74932861]
[130.18441772 357.47891235]
[133.58642578 370.94631958]
[130.85340881 384.49765015]
[122.57720184 395.48782349]
[110.42588043 401.79690552]
[110.73793793 416.79367065]
[111.04999542 431.79043579]
[124.74618530 436.10949707]
[136.41592407 444.44256592]
[144.92121887 455.96069336]
[149.43772888 469.52508545]
[149.53462219 483.79986572]
[145.21569824 497.38336182]
[136.91766357 508.94604492]
[125.46603394 517.36041260]
[111.99298859 521.81103516]
[111.99298859 536.81103516]
[111.99298859 551.81103516]
[111.99298859 566.81103516]
[111.99298859 581.81103516]
[111.99298859 596.81103516]
[111.99298859 611.81103516]
[111.99298859 626.81103516]
[111.99298859 641.81103516]
[111.99298859 656.81103516]
[126.53287506 660.87237549]
[139.43725586 668.70690918]
[149.74855042 679.73321533]
[156.70156860 693.13311768]
[159.78036499 707.91229248]
[158.75646973 722.97399902]
[153.70587158 737.20050049]
[145.00334167 749.53619385]
[133.29467773 759.06561279]
[119.44874573 765.08160400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 122]
[29 121]
[30 120]
[35 114]
[36 113]
[37 112]
[38 111]
[39 110]
[41 109]
[42 108]
[44 107]
[48 104]
[49 103]
[50 102]
[51 101]
[53 99]
[58 84]
[59 83]
[60 82]
[61 81]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
