%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAGCUAAGGGGGGGGGGGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAxxxxxxxxxxUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCCCCCCCCCCCUAACCGCUAA\
) } def
/len { sequence length } bind def

/coor [
[103.81649780 402.17193604]
[89.97055817 396.15591431]
[78.26190186 386.62649536]
[69.55937195 374.29083252]
[64.50877380 360.06430054]
[63.48488235 345.00262451]
[66.56368256 330.22348022]
[73.51670074 316.82354736]
[83.82798767 305.79721069]
[96.73236847 297.96270752]
[111.27225494 293.90139771]
[111.27225494 278.90139771]
[111.27225494 263.90139771]
[111.27225494 248.90139771]
[111.27225494 233.90139771]
[111.27225494 218.90139771]
[111.27225494 203.90139771]
[111.27225494 188.90139771]
[111.27225494 173.90139771]
[111.27225494 158.90139771]
[111.27225494 143.90139771]
[111.27225494 128.90139771]
[105.57174683 124.02756500]
[94.17072296 114.27991486]
[88.47021484 109.40608978]
[73.65245819 111.73719025]
[58.83469772 114.06829834]
[44.01693726 116.39939880]
[39.15710068 130.91285706]
[28.10116196 141.49703979]
[13.38969898 145.71977234]
[-1.59670353 142.61068726]
[-13.41427898 132.88426208]
[-19.34743500 118.77552795]
[-18.03277588 103.52658844]
[-9.77240181 90.64152527]
[3.53551483 83.08123779]
[18.83291245 82.58302307]
[32.60456085 89.26137543]
[41.68583679 101.58164215]
[56.50359344 99.25053406]
[71.32135010 96.91943359]
[86.13910675 94.58833313]
[72.78117371 87.76442719]
[68.80970001 73.29973602]
[76.81032562 60.61155319]
[91.57421112 57.96058273]
[103.48925781 67.07274628]
[104.79827118 82.01511383]
[112.52235413 69.15671539]
[112.99597931 53.34259796]
[126.18237305 46.41667557]
[133.90644836 33.55827332]
[141.63053894 20.69987106]
[126.98577118 23.94497871]
[113.60135651 17.17316437]
[107.54056549 3.45212770]
[111.54900360 -11.00236797]
[123.81079865 -19.64229584]
[138.77124023 -18.55368233]
[149.65310669 -8.22968102]
[151.52671814 6.65322924]
[161.03507996 -4.94811201]
[170.54344177 -16.54945374]
[180.05178833 -28.15079498]
[169.59774780 -38.93089676]
[160.44070435 -50.83242416]
[152.70005798 -63.70021820]
[146.47669983 -77.36651611]
[141.85179138 -91.65315247]
[138.88562012 -106.37387085]
[137.61685181 -121.33676147]
[138.06202698 -136.34674072]
[140.21534729 -151.20812988]
[144.04873657 -165.72718811]
[149.51222229 -179.71461487]
[156.53456116 -192.98806763]
[165.02421570 -205.37449646]
[174.87051392 -216.71240234]
[185.94506836 -226.85400391]
[198.10351562 -235.66705322]
[211.18733215 -243.03666687]
[225.02597046 -248.86677551]
[239.43898010 -253.08137512]
[254.23847961 -255.62548828]
[269.23153687 -256.46597290]
[284.22265625 -255.59187317]
[299.01641846 -253.01458740]
[313.41992188 -248.76768494]
[327.24545288 -242.90657043]
[340.31271362 -235.50762939]
[352.45138550 -226.66734314]
[363.50317383 -216.50093079]
[373.32400513 -205.14097595]
[381.78588867 -192.73554993]
[388.77844238 -179.44639587]
[394.21054077 -165.44674683]
[398.01138306 -150.91912842]
[400.13137817 -136.05294800]
[400.54287720 -121.04200745]
[399.24057007 -106.08200073]
[396.24139404 -91.36797333]
[391.58447266 -77.09173584]
[385.33050537 -63.43942642]
[377.56103516 -50.58902359]
[368.37731934 -38.70805359]
[357.89913940 -27.95141792]
[346.26306152 -18.45934677]
[333.62078857 -10.35558891]
[320.13714600 -3.74579501]
[305.98794556 1.28386414]
[291.35760498 4.66781616]
[276.43688965 6.36194372]
[261.42031860 6.34416103]
[246.50364685 4.61469984]
[231.88137817 1.19610691]
[217.74411011 -3.86704898]
[204.27616882 -10.50875950]
[191.65313721 -18.64243698]
[182.14477539 -7.04109478]
[172.63641357 4.56024647]
[163.12805176 16.16158676]
[154.48893738 28.42395592]
[146.76486206 41.28235626]
[139.04077148 54.14076233]
[139.11962891 69.03515625]
[125.38076019 76.88079834]
[117.65666962 89.73919678]
[126.27225494 128.90139771]
[126.27225494 143.90139771]
[126.27225494 158.90139771]
[126.27225494 173.90139771]
[126.27225494 188.90139771]
[126.27225494 203.90139771]
[126.27225494 218.90139771]
[126.27225494 233.90139771]
[126.27225494 248.90139771]
[126.27225494 263.90139771]
[126.27225494 278.90139771]
[126.27225494 293.90139771]
[140.81214905 297.96270752]
[153.71652222 305.79721069]
[164.02780151 316.82354736]
[170.98083496 330.22348022]
[174.05963135 345.00262451]
[173.03573608 360.06430054]
[167.98513794 374.29083252]
[159.28260803 386.62649536]
[147.57394409 396.15591431]
[133.72801208 402.17193604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 43]
[26 42]
[27 41]
[28 40]
[49 128]
[50 127]
[52 125]
[53 124]
[54 123]
[62 122]
[63 121]
[64 120]
[65 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
