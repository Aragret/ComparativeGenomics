%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCACCUCGGGGGGGGGGUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAxxxxxxxxxxCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGACCCCCCCCCCUCCCCACCUC\
) } def
/len { sequence length } bind def

/coor [
[173.38385010 505.55731201]
[159.53790283 499.54125977]
[147.82923889 490.01184082]
[139.12672424 477.67617798]
[134.07611084 463.44967651]
[133.05223083 448.38796997]
[136.13102722 433.60882568]
[143.08404541 420.20889282]
[153.39532471 409.18255615]
[166.29971313 401.34805298]
[180.83959961 397.28674316]
[180.83959961 382.28674316]
[180.83959961 367.28674316]
[180.83959961 352.28674316]
[180.83959961 337.28674316]
[180.83959961 322.28674316]
[180.83959961 307.28674316]
[180.83959961 292.28674316]
[180.83959961 277.28674316]
[180.83959961 262.28674316]
[180.83959961 247.28674316]
[177.74127197 232.61021423]
[171.67826843 218.89016724]
[159.45681763 210.37632751]
[160.95584106 194.62629700]
[154.89283752 180.90625000]
[148.82981873 167.18618774]
[140.57752991 154.66023254]
[130.36405945 143.67456055]
[120.15057373 132.68890381]
[109.93709564 121.70323944]
[99.72360992 110.71757507]
[88.02398682 101.33040619]
[75.08592987 93.74050140]
[70.59799194 93.88143921]
[66.71102142 92.67208862]
[63.78350449 90.47856903]
[62.01334000 87.74717712]
[61.42559814 84.94326782]
[49.16322708 76.30415344]
[36.90085983 67.66503906]
[21.16311264 66.04212952]
[15.21490860 52.38679504]
[2.95253992 43.74767685]
[-12.78520870 42.12476730]
[-18.73341179 28.46943283]
[-30.99578094 19.83031654]
[-43.25814819 11.19120121]
[-55.52051544 2.55208516]
[-71.04779816 5.49809551]
[-84.06317902 -3.46713805]
[-86.84486389 -19.02470207]
[-77.74252319 -31.94456863]
[-62.15642166 -34.56161118]
[-49.33351135 -25.32318497]
[-46.88140106 -9.71028328]
[-34.61903381 -1.07116687]
[-22.35666466 7.56794930]
[-10.09429646 16.20706558]
[4.76636553 17.21204948]
[11.59165573 31.48530960]
[23.85402489 40.12442780]
[38.71468735 41.12940979]
[45.53997803 55.40267181]
[57.80234528 64.04178619]
[70.06471252 72.68090057]
[82.67584229 80.80244446]
[95.61389923 88.39235687]
[89.06181335 74.89900970]
[88.06549835 59.93213654]
[92.77124023 45.68938446]
[102.48807526 34.26208878]
[115.78923035 27.32816696]
[130.72163391 25.90576744]
[145.09269714 30.20374298]
[156.79223633 39.59100342]
[164.10237122 52.68917465]
[165.94969177 67.57498169]
[162.06297302 82.06268311]
[153.01290894 94.02497101]
[140.12837219 101.70536804]
[125.30123901 103.97612762]
[110.70927429 100.50408936]
[120.92276001 111.48975372]
[131.13623047 122.47541809]
[141.34971619 133.46109009]
[151.56320190 144.44674683]
[148.84471130 129.69514465]
[151.24066162 114.88773346]
[158.47247314 101.74616241]
[169.69929504 91.79838562]
[183.61581421 86.20102692]
[198.60397339 85.60488892]
[212.92108154 90.07927704]
[224.90252686 99.10396576]
[233.15522766 111.62965393]
[236.71965027 126.19999695]
[235.18136597 141.12091064]
[228.71922302 154.65754700]
[218.08456421 165.23603821]
[204.51390076 171.62638855]
[189.58503723 173.08563232]
[175.03378296 169.44409180]
[162.54988098 161.12318420]
[168.61288452 174.84323120]
[174.67590332 188.56329346]
[187.33102417 198.05847168]
[185.39831543 212.82714844]
[191.46133423 226.54721069]
[193.41731262 211.67527771]
[199.41082764 197.92472839]
[208.97415161 186.36865234]
[221.36093140 177.90888977]
[235.60452271 173.20565796]
[250.59330750 172.62600708]
[265.15759277 176.21516418]
[278.16070557 183.69302368]
[288.58795166 194.47601318]
[295.62551880 207.72262573]
[298.72421265 222.39906311]
[297.64221191 237.36000061]
[292.46392822 251.43783569]
[283.59350586 263.53393555]
[271.72320557 272.70431519]
[257.77938843 278.23330688]
[242.85023499 279.68942261]
[228.10083008 276.95904541]
[214.68223572 270.25521851]
[203.64163208 260.10113525]
[195.83959961 247.28674316]
[195.83959961 262.28674316]
[195.83959961 277.28674316]
[195.83959961 292.28674316]
[195.83959961 307.28674316]
[195.83959961 322.28674316]
[195.83959961 337.28674316]
[195.83959961 352.28674316]
[195.83959961 367.28674316]
[195.83959961 382.28674316]
[195.83959961 397.28674316]
[210.37948608 401.34805298]
[223.28385925 409.18255615]
[233.59515381 420.20889282]
[240.54817200 433.60882568]
[243.62696838 448.38796997]
[242.60307312 463.44967651]
[237.55247498 477.67617798]
[228.84996033 490.01184082]
[217.14129639 499.54125977]
[203.29534912 505.55731201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 109]
[23 108]
[25 106]
[26 105]
[27 104]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 68]
[34 67]
[39 66]
[40 65]
[41 64]
[43 62]
[44 61]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
