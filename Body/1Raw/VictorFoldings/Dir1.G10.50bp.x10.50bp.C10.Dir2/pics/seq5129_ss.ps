%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCACUAGGGGGGGGGGAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGxxxxxxxxxxGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCCCCCCCCCCCUCCCUCACCA\
) } def
/len { sequence length } bind def

/coor [
[79.18784332 158.47727966]
[65.79930115 151.79817200]
[54.39799881 142.10932922]
[45.64639664 129.97372437]
[40.05301285 116.09648895]
[37.94285202 101.28397369]
[39.43852615 86.39685059]
[44.45312119 72.30013275]
[52.69527435 59.81292725]
[63.68606567 49.66078568]
[76.78688049 42.43360901]
[91.23649597 38.55133057]
[90.92852020 23.55449295]
[90.62054443 8.55765438]
[90.31256866 -6.43918419]
[90.00458527 -21.43602180]
[89.69660950 -36.43286133]
[89.38863373 -51.42969894]
[89.08065796 -66.42653656]
[88.77267456 -81.42337036]
[88.46469879 -96.42021179]
[73.47041321 -96.96120453]
[58.53075409 -98.34963989]
[43.69357300 -100.58106232]
[29.00640106 -103.64833069]
[14.51628113 -107.54161835]
[0.26963344 -112.24844360]
[-13.68790627 -117.75373840]
[-27.31162834 -124.03987122]
[-40.55788803 -131.08670044]
[-53.38425827 -138.87164307]
[-65.74964905 -147.36978149]
[-77.61445618 -156.55387878]
[-88.94065857 -166.39451599]
[-99.69199371 -176.86018372]
[-109.83400726 -187.91734314]
[-119.33421326 -199.53057861]
[-128.16218567 -211.66268921]
[-136.28964233 -224.27481079]
[-143.69055176 -237.32653809]
[-150.34120178 -250.77607727]
[-156.22029114 -264.58035278]
[-161.30897522 -278.69509888]
[-165.59097290 -293.07513428]
[-169.05255127 -307.67440796]
[-171.68263245 -322.44613647]
[-173.47279358 -337.34301758]
[-174.41729736 -352.31729126]
[-174.51310730 -367.32101440]
[-173.75991821 -382.30615234]
[-172.16015625 -397.22467041]
[-169.71894836 -412.02877808]
[-166.44409180 -426.67105103]
[-162.34609985 -441.10461426]
[-157.43807983 -455.28320312]
[-151.73576355 -469.16143799]
[-145.25743103 -482.69479370]
[-138.02381897 -495.83999634]
[-130.05809021 -508.55487061]
[-121.38578033 -520.79876709]
[-112.03466034 -532.53234863]
[-102.03468323 -543.71813965]
[-91.41789246 -554.32025146]
[-80.21828461 -564.30474854]
[-68.47174072 -573.63964844]
[-56.21588516 -582.29498291]
[-43.48998260 -590.24310303]
[-30.33479881 -597.45855713]
[-16.79246902 -603.91815186]
[-2.90637732 -609.60125732]
[11.27899647 -614.48962402]
[25.71821213 -618.56762695]
[40.36501694 -621.82226562]
[55.17248917 -624.24298096]
[70.09320068 -625.82208252]
[85.07935333 -626.55450439]
[100.08293915 -626.43798828]
[115.05590057 -625.47271729]
[129.95027161 -623.66198730]
[144.71833801 -621.01147461]
[159.31280518 -617.52966309]
[173.68692017 -613.22778320]
[187.79461670 -608.11956787]
[201.59072876 -602.22137451]
[215.03105164 -595.55212402]
[228.07254028 -588.13317871]
[240.67340088 -579.98828125]
[252.79328918 -571.14355469]
[264.39337158 -561.62725830]
[275.43649292 -551.46997070]
[285.88726807 -540.70416260]
[295.71221924 -529.36431885]
[304.87988281 -517.48681641]
[313.36090088 -505.10971069]
[321.12811279 -492.27258301]
[328.15658569 -479.01657104]
[334.42385864 -465.38415527]
[339.90985107 -451.41903687]
[344.59695435 -437.16589355]
[348.47018433 -422.67037964]
[351.51712036 -407.97897339]
[353.72802734 -393.13873291]
[355.09576416 -378.19717407]
[355.61602783 -363.20214844]
[355.28710938 -348.20172119]
[354.11004639 -333.24389648]
[352.08862305 -318.37664795]
[349.22933960 -303.64758301]
[345.54132080 -289.10388184]
[341.03640747 -274.79208374]
[335.72900391 -260.75811768]
[329.63613892 -247.04685974]
[322.77731323 -233.70228577]
[315.17449951 -220.76712036]
[306.85205078 -208.28280640]
[297.83663940 -196.28933716]
[288.15713501 -184.82511902]
[277.84454346 -173.92687988]
[266.93188477 -163.62954712]
[255.45413208 -153.96607971]
[243.44805908 -144.96743774]
[230.95211792 -136.66247559]
[218.00633240 -129.07775879]
[204.65217590 -122.23760986]
[190.93241882 -116.16392517]
[176.89102173 -110.87616730]
[162.57295227 -106.39128113]
[148.02409363 -102.72361755]
[133.29103088 -99.88493347]
[118.42096710 -97.88432312]
[103.46154022 -96.72818756]
[103.76951599 -81.73135376]
[104.07749176 -66.73451233]
[104.38546753 -51.73767471]
[104.69345093 -36.74083710]
[105.00142670 -21.74399948]
[105.30940247 -6.74716139]
[105.61737823 8.24967670]
[105.92536163 23.24651527]
[106.23333740 38.24335098]
[120.83015442 41.52912903]
[134.21664429 48.21236038]
[145.61495972 57.90471268]
[154.36282349 70.04301453]
[159.95193481 83.92196655]
[162.05754089 98.73513031]
[160.55728149 113.62179565]
[155.53834534 127.71695709]
[147.29235840 140.20162964]
[136.29843140 150.35038757]
[123.19539642 157.57353210]
[108.74458313 161.45137024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
