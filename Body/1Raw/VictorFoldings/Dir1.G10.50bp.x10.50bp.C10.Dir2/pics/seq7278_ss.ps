%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUUUCAUGGGGGGGGGGGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACxxxxxxxxxxCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUCCCCCCCCCCUAAUUUUAAU\
) } def
/len { sequence length } bind def

/coor [
[86.64073944 379.37881470]
[72.15104675 375.17031860]
[59.24481964 367.35421753]
[48.80201721 356.46337891]
[41.53465271 343.24035645]
[37.93822861 328.58676147]
[38.25794983 313.50167847]
[42.47201920 299.01361084]
[50.29311752 286.11038208]
[61.18798447 275.67178345]
[74.41379547 268.40954590]
[89.06878662 264.81875610]
[89.38084412 249.82202148]
[89.69290161 234.82525635]
[90.00495148 219.82850647]
[90.31700897 204.83175659]
[90.62906647 189.83500671]
[90.94112396 174.83824158]
[91.25318146 159.84149170]
[91.56523895 144.84474182]
[91.87728882 129.84799194]
[92.18934631 114.85123444]
[82.32174683 108.10595703]
[78.45005035 95.02739716]
[63.63229370 97.35849762]
[55.38949203 107.33396912]
[42.95417404 108.94077301]
[33.09944534 101.85617065]
[18.23639679 103.87850189]
[3.37335014 105.90084076]
[-11.48969650 107.92317200]
[-26.35274315 109.94551086]
[-38.98135757 120.40734863]
[-54.25965118 114.44866943]
[-56.47062302 98.19924927]
[-43.33981323 88.37509918]
[-28.37507820 95.08245850]
[-13.51203156 93.06012726]
[1.35101557 91.03779602]
[16.21406174 89.01545715]
[31.07711029 86.99312592]
[44.31337738 75.51264954]
[61.30118942 82.54074097]
[76.11894989 80.20964050]
[88.19893646 71.31729126]
[94.82743835 57.86132050]
[101.45593262 44.40535736]
[108.08443451 30.94939041]
[108.02967072 24.23340225]
[110.97122955 19.27572441]
[115.27881622 17.08022499]
[122.46132660 3.91164279]
[129.64382935 -9.25693989]
[126.75859070 -21.87158394]
[133.06336975 -32.70988464]
[144.68617249 -36.20525742]
[131.50708008 -29.04205322]
[117.11340332 -24.82045174]
[102.15305328 -23.73048782]
[87.29947662 -25.82122421]
[73.22129059 -30.99854851]
[60.55222321 -39.02940750]
[49.86256027 -49.55229187]
[41.63349533 -62.09352493]
[36.23545456 -76.08856964]
[33.91143036 -90.90743256]
[34.76603317 -105.88307190]
[38.76079559 -120.34135437]
[45.71589661 -133.63143921]
[55.31825638 -145.15510559]
[67.13562775 -154.39360046]
[80.63605499 -160.93106079]
[95.21183014 -164.47320557]
[110.20682526 -164.86059570]
[124.94605255 -162.07579041]
[138.76603699 -156.24414062]
[151.04466248 -147.62815857]
[161.22923279 -136.61569214]
[168.86129761 -123.70244598]
[173.59727478 -109.46971893]
[175.22399902 -94.55818939]
[173.66824341 -79.63909149]
[169.00004578 -65.38398743]
[161.42816162 -52.43274689]
[174.67074585 -59.47787857]
[187.91333008 -66.52301788]
[201.15591431 -73.56815338]
[210.50619507 -89.39699554]
[227.98529053 -88.17992401]
[241.07844543 -95.49903107]
[245.35591125 -107.71202087]
[256.46496582 -113.52647400]
[268.16351318 -110.29368591]
[281.40609741 -117.33882141]
[294.64871216 -124.38395691]
[307.89129639 -131.42909241]
[321.13388062 -138.47422791]
[334.37646484 -145.51936340]
[338.75341797 -160.70547485]
[352.62680054 -168.27546692]
[367.76577759 -163.73818970]
[375.18865967 -149.78555298]
[370.49160767 -134.69538879]
[356.46124268 -127.42042542]
[341.42160034 -132.27677917]
[328.17901611 -125.23164368]
[314.93643188 -118.18650818]
[301.69381714 -111.14137268]
[288.45123291 -104.09623718]
[275.20864868 -97.05110168]
[266.76809692 -81.69673157]
[248.39753723 -82.40587616]
[235.30438232 -75.08676910]
[231.68829346 -63.50094986]
[220.78500366 -57.30925751]
[208.20104980 -60.32556534]
[194.95846558 -53.28042984]
[181.71588135 -46.23529434]
[168.47329712 -39.19015884]
[157.70248413 -28.75034714]
[158.73767090 -11.25953960]
[142.81240845 -2.07443094]
[135.62989807 11.09415150]
[128.44740295 24.26273346]
[121.54039764 37.57788849]
[114.91189575 51.03385544]
[108.28340149 64.48982239]
[101.65489960 77.94578552]
[119.12036896 96.44492340]
[107.18610382 115.16329193]
[106.87404633 130.16004944]
[106.56198883 145.15679932]
[106.24993134 160.15354919]
[105.93787384 175.15029907]
[105.62582397 190.14706421]
[105.31376648 205.14381409]
[105.00170898 220.14056396]
[104.68965149 235.13731384]
[104.37759399 250.13407898]
[104.06553650 265.13082886]
[118.55847931 269.32812500]
[131.47073364 277.13424683]
[141.92195129 288.01702881]
[149.19952393 301.23440552]
[152.80726624 315.88522339]
[152.49919128 330.97058105]
[148.29631042 345.46188354]
[140.48516846 358.37115479]
[129.59837341 368.81814575]
[116.37817383 376.09060669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 44]
[25 43]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[45 128]
[46 127]
[47 126]
[48 125]
[51 124]
[52 123]
[53 122]
[56 120]
[84 119]
[85 118]
[86 117]
[87 116]
[89 113]
[90 112]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
