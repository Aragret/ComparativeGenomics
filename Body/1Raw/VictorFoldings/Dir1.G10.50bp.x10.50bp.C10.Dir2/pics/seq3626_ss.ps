%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAACCCCCUGGGGGGGGGGGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCxxxxxxxxxxUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCACCCCCCCCCCAGCCAACCCCAUGG\
) } def
/len { sequence length } bind def

/coor [
[88.55590057 590.01123047]
[74.19364929 585.50445557]
[61.03276062 578.19860840]
[49.61216354 568.39276123]
[40.39952469 556.48846436]
[33.77209854 542.97320557]
[30.00126839 528.40039062]
[29.24145126 513.36688232]
[31.52376175 498.48815918]
[36.75473785 484.37356567]
[44.72017670 471.60107422]
[55.09389877 460.69369507]
[67.45110321 452.09808350]
[81.28577423 446.16625977]
[96.03139496 443.14108276]
[96.03139496 428.14108276]
[96.03139496 413.14108276]
[96.03139496 398.14108276]
[96.03139496 383.14108276]
[96.03139496 368.14108276]
[96.03139496 353.14108276]
[96.03139496 338.14108276]
[96.03139496 323.14108276]
[96.03139496 308.14108276]
[96.03139496 293.14108276]
[86.44210815 278.47079468]
[95.71144867 262.58825684]
[95.41508484 247.59120178]
[95.11872864 232.59413147]
[94.82237244 217.59704590]
[80.49813843 213.31016541]
[68.18360138 204.79417419]
[59.09190750 192.87271118]
[54.12344742 178.70565796]
[53.77667236 163.67628479]
[58.09812164 149.25614929]
[66.67663574 136.86109924]
[78.68244934 127.71215820]
[92.94741058 122.71533966]
[92.65105438 107.71826172]
[91.02419281 92.80674744]
[88.07967377 78.09859467]
[85.13515472 63.39044189]
[82.04547119 48.71209335]
[78.81093597 34.06498718]
[75.57640076 19.41787720]
[65.04531860 7.61080885]
[69.85613251 -6.48547840]
[66.62159729 -21.13258553]
[63.38705826 -35.77969360]
[50.34811020 -44.30164337]
[47.27648544 -59.20197296]
[55.48121643 -71.58009338]
[52.24668121 -86.22720337]
[49.01214218 -100.87431335]
[45.77760696 -115.52142334]
[42.54306793 -130.16853333]
[27.51269150 -129.59625244]
[12.62170315 -131.71716309]
[-1.65121078 -136.46307373]
[-14.84723473 -143.68144226]
[-26.54217148 -153.14019775]
[-36.36007690 -164.53530884]
[-43.98534775 -177.50045776]
[-49.17286301 -191.61886597]
[-51.75585938 -206.43669128]
[-51.65131378 -221.47760010]
[-48.86257935 -236.25808716]
[-43.47930908 -250.30302429]
[-35.67454529 -263.16091919]
[-25.69918442 -274.41842651]
[-13.87388992 -283.71371460]
[-0.57879817 -290.74795532]
[13.75870895 -295.29498291]
[28.67774200 -297.20870972]
[43.69871140 -296.42755127]
[58.33876038 -292.97662354]
[72.12726593 -286.96691895]
[84.62099457 -278.59155273]
[95.41831207 -268.11978149]
[104.17214203 -255.88825989]
[110.60107422 -242.29014587]
[114.49844360 -227.76258850]
[115.73898315 -212.77255249]
[114.28279877 -197.80194092]
[110.17670441 -183.33198547]
[103.55268860 -169.82781982]
[94.62370300 -157.72357178]
[83.67675781 -147.40832520]
[71.06376648 -139.21368408]
[57.19017792 -133.40306091]
[60.42471313 -118.75595856]
[63.65925217 -104.10884857]
[66.89379120 -89.46173859]
[70.12832642 -74.81463623]
[82.78277588 -67.04286194]
[86.27171326 -52.23469162]
[78.03416443 -39.01423264]
[81.26869965 -24.36712265]
[84.50324249 -9.72001553]
[94.80296326 1.03939426]
[90.22350311 16.18334007]
[93.45804596 30.83044815]
[96.69258118 45.47755814]
[101.22993469 51.36222839]
[99.84330750 60.44591904]
[102.78782654 75.15407562]
[105.73234558 89.86222839]
[112.98670197 76.73309326]
[126.12016296 69.48656464]
[141.09527588 70.35036469]
[153.30841064 79.05893707]
[159.00503540 92.93511963]
[156.43391418 107.71312714]
[146.38543701 118.84992218]
[131.94869995 122.92185974]
[117.56181335 118.67716217]
[107.64813232 107.42190552]
[107.94448853 122.41898346]
[122.39572144 126.84834290]
[134.75360107 135.51582336]
[143.81510925 147.56230164]
[148.70288086 161.80044556]
[148.95013428 176.83178711]
[144.54524231 191.18406677]
[135.93162537 203.45539856]
[123.96313477 212.45126343]
[109.81944275 217.30068970]
[110.11579895 232.29776001]
[110.41216278 247.29484558]
[110.70851898 262.29190063]
[119.46772003 271.80700684]
[119.37649536 284.33807373]
[111.03139496 293.14108276]
[111.03139496 308.14108276]
[111.03139496 323.14108276]
[111.03139496 338.14108276]
[111.03139496 353.14108276]
[111.03139496 368.14108276]
[111.03139496 383.14108276]
[111.03139496 398.14108276]
[111.03139496 413.14108276]
[111.03139496 428.14108276]
[111.03139496 443.14108276]
[125.77700806 446.16625977]
[139.61167908 452.09808350]
[151.96888733 460.69369507]
[162.34260559 471.60107422]
[170.30804443 484.37356567]
[175.53901672 498.48815918]
[177.82133484 513.36688232]
[177.06152344 528.40039062]
[173.29067993 542.97320557]
[166.66325378 556.48846436]
[157.45062256 568.39276123]
[146.03002930 578.19860840]
[132.86912537 585.50445557]
[118.50688171 590.01123047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[27 131]
[28 130]
[29 129]
[30 128]
[39 119]
[40 118]
[41 108]
[42 107]
[43 106]
[44 104]
[45 103]
[46 102]
[48 100]
[49 99]
[50 98]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
