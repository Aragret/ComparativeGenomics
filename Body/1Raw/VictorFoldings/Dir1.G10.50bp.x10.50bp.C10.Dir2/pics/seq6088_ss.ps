%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUGGGAGGGGGGGGGGCUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCxxxxxxxxxxCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCCCCCCCCCCCACCAAUAGGA\
) } def
/len { sequence length } bind def

/coor [
[101.42459869 468.67514038]
[97.91951752 453.99124146]
[98.50724030 438.90625000]
[103.14414978 424.53955078]
[111.48615265 411.95727539]
[122.91422272 402.09310913]
[136.58032227 395.67904663]
[134.09519958 380.88632202]
[131.61007690 366.09362793]
[127.37286377 359.97875977]
[129.23048401 350.96759033]
[127.05364227 336.12637329]
[124.87680054 321.28518677]
[122.69996643 306.44396973]
[113.19756317 294.97430420]
[118.85023499 280.19735718]
[116.67340088 265.35614014]
[114.49656677 250.51493835]
[112.31972504 235.67373657]
[110.14289093 220.83253479]
[107.96605682 205.99133301]
[105.78921509 191.15011597]
[103.61238098 176.30891418]
[88.65743256 175.54763794]
[74.13828278 171.88374329]
[60.61277008 165.45797729]
[48.60055923 156.51722717]
[38.56317902 145.40502930]
[30.88627434 132.54832458]
[25.86480331 118.44106293]
[23.69169426 103.62527466]
[24.45044136 88.67019653]
[28.11189461 74.15042877]
[34.53537369 60.62382889]
[43.47408295 48.61010742]
[54.58458710 38.57085037]
[67.44000244 30.89177513]
[81.54641724 25.86791992]
[77.53867340 11.41323090]
[71.76240540 -2.42998672]
[65.98612976 -16.27320480]
[60.20985794 -30.11642265]
[54.43358612 -43.95964050]
[52.19273376 -29.12796402]
[46.10329437 -15.41961956]
[36.60028458 -3.81389809]
[24.36257362 4.86011219]
[10.26439953 9.98275948]
[-4.68709421 11.18809319]
[-19.42380714 8.39000607]
[-32.89298248 1.78838813]
[-44.13240814 -8.14515591]
[-52.33916473 -20.70099449]
[-56.92698669 -34.98217010]
[-57.56812286 -49.96846008]
[-54.21677399 -64.58928680]
[-47.11235046 -77.80015564]
[-36.76238251 -88.65732574]
[-23.90624428 -96.38517761]
[-9.46235180 -100.43165588]
[5.53745604 -100.50768280]
[20.02162552 -96.60783386]
[32.95543671 -89.01069641]
[43.41493225 -78.25900269]
[50.65092087 -65.12594604]
[51.27489853 -80.11296082]
[51.89887619 -95.09997559]
[52.52285385 -110.08699036]
[53.14683151 -125.07401276]
[39.34244919 -131.43856812]
[29.02814674 -142.60473633]
[23.77677345 -156.86978149]
[24.38913155 -172.05838013]
[30.77183533 -185.85438538]
[41.95157242 -196.15399170]
[56.22351456 -201.38658142]
[71.41129303 -200.75425720]
[85.19888306 -194.35340881]
[95.48377228 -183.16012573]
[100.69759369 -168.88131714]
[100.04528046 -153.69438171]
[93.62630463 -139.91522217]
[82.41950989 -129.64506531]
[68.13385010 -124.45003510]
[67.50987244 -109.46301270]
[66.88589478 -94.47599792]
[66.26191711 -79.48898315]
[65.63793945 -64.50196838]
[68.27680206 -49.73591232]
[74.05307770 -35.89269638]
[79.82934570 -22.04947662]
[85.60562134 -8.20625877]
[91.38188934 5.63695860]
[94.75010681 -8.97998810]
[104.03260803 -20.76282310]
[117.45494843 -27.45913887]
[132.45132446 -27.78887177]
[146.15502930 -21.68898773]
[155.94645691 -10.32554054]
[159.95388794 4.12923431]
[157.41125488 18.91216469]
[148.80461121 31.19734573]
[135.77920532 38.63634491]
[120.82495880 39.80712509]
[106.80054474 34.48588181]
[96.38761902 23.69108200]
[111.34256744 24.45235634]
[125.86171722 28.11626244]
[139.38723755 34.54202652]
[151.39944458 43.48276520]
[161.43682861 54.59496689]
[169.11372375 67.45168304]
[174.13519287 81.55893707]
[176.30830383 96.37472534]
[175.54956055 111.32980347]
[171.88810730 125.84957123]
[165.46463013 139.37617493]
[156.52590942 151.38989258]
[145.41542053 161.42915344]
[132.55999756 169.10823059]
[118.45358276 174.13208008]
[120.63042450 188.97328186]
[122.80725861 203.81449890]
[124.98409271 218.65570068]
[127.16093445 233.49690247]
[129.33776855 248.33810425]
[131.51460266 263.17932129]
[133.69143677 278.02050781]
[143.34954834 290.55175781]
[137.54116821 304.26715088]
[139.71800232 319.10833740]
[141.89485168 333.94955444]
[144.07168579 348.79074097]
[146.40278625 363.60852051]
[148.88790894 378.40121460]
[151.37301636 393.19393921]
[166.38482666 394.79022217]
[180.40885925 400.37854004]
[192.40443420 409.54415894]
[201.48139954 421.60696411]
[206.96617126 435.67181396]
[208.45176697 450.69497681]
[205.82794189 465.56167603]
[199.28938293 479.16864014]
[189.32131958 490.50619507]
[176.66342163 498.73300171]
[162.25500488 503.23858643]
[147.16526794 503.68856812]
[132.51397705 500.04962158]
[119.38834381 492.59170532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 136]
[8 135]
[9 134]
[11 133]
[12 132]
[13 131]
[14 130]
[16 128]
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[22 122]
[23 121]
[38 106]
[39 93]
[40 92]
[41 91]
[42 90]
[43 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
