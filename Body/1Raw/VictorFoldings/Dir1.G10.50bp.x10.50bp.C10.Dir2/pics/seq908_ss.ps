%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUAAAGGGGGGGGGGCAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAxxxxxxxxxxCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGCCCCCCCCCCACGCCAUAAA\
) } def
/len { sequence length } bind def

/coor [
[98.11774445 478.74597168]
[84.27180481 472.72994995]
[72.56314087 463.20053101]
[63.86061859 450.86486816]
[58.81001663 436.63833618]
[57.78612518 421.57666016]
[60.86492538 406.79748535]
[67.81794739 393.39758301]
[78.12923431 382.37124634]
[91.03361511 374.53674316]
[105.57350159 370.47540283]
[105.57350159 355.47540283]
[105.57350159 340.47540283]
[105.57350159 325.47540283]
[105.57350159 310.47540283]
[105.57350159 295.47540283]
[105.57350159 280.47540283]
[105.57350159 265.47540283]
[105.57350159 250.47541809]
[105.57350159 235.47541809]
[105.57350159 220.47541809]
[105.57350159 205.47541809]
[92.00734711 196.28494263]
[86.51531982 180.67073059]
[91.43854523 164.69439697]
[105.03362274 154.68310547]
[104.72156525 139.68634033]
[104.40950775 124.68959045]
[81.97643280 112.28408051]
[84.20181274 90.29120636]
[75.69071960 77.93962860]
[67.17963409 65.58805847]
[58.66854477 53.23648453]
[41.87561035 45.75468826]
[41.08897018 28.25094223]
[32.32276154 16.07910538]
[23.55655670 3.90726805]
[11.47656727 -4.98508167]
[-2.75021148 -9.73889637]
[-16.97698975 -14.49271107]
[-28.42265511 -4.25101471]
[-43.45901871 -1.11998618]
[-58.04137421 -5.94185638]
[-68.24714661 -17.41956711]
[-71.33102417 -32.46567154]
[-66.46347046 -47.03284073]
[-54.95382690 -57.20258331]
[-39.89812851 -60.23928833]
[-25.34628868 -55.32609558]
[-15.21267223 -43.78462982]
[-12.22317600 -28.71949005]
[2.00360346 -23.96567535]
[16.23038292 -19.21186066]
[6.75109434 -30.83696747]
[-0.32732910 -44.06179047]
[-4.74304104 -58.39711380]
[-6.33269501 -73.31263733]
[-5.03748560 -88.25661469]
[-0.90532589 -102.67623138]
[5.91092634 -116.03807068]
[15.15912342 -127.84784698]
[26.49715424 -137.66870117]
[39.50559998 -145.13731384]
[53.70324707 -149.97743225]
[68.56489563 -152.01000977]
[83.54078674 -151.15983582]
[98.07691956 -147.45837402]
[111.63557434 -141.04254150]
[123.71518707 -132.14968872]
[133.86891174 -121.10875702]
[141.72113037 -108.32820129]
[146.98136902 -94.28078461]
[149.45504761 -79.48616028]
[149.05067444 -64.49161530]
[145.78317261 -49.85182190]
[139.77345276 -36.10834503]
[131.24378967 -23.76958656]
[120.50974274 -13.29197979]
[107.96838379 -5.06311703]
[94.08363342 0.61259860]
[79.36912537 3.52520967]
[64.36918640 3.56697202]
[49.63868713 0.73634136]
[35.72839355 -4.85893917]
[44.49459839 7.31289768]
[53.26080704 19.48473358]
[65.18373871 21.75431442]
[72.57987213 31.87934494]
[71.02011871 44.72539520]
[79.53120422 57.07696915]
[88.04229736 69.42854309]
[96.55338287 81.78011322]
[113.20450592 82.63945007]
[124.99323273 97.91245270]
[139.56593323 94.35768890]
[154.13864136 90.80292511]
[168.71134949 87.24816895]
[183.28404236 83.69340515]
[197.85675049 80.13864136]
[212.42945862 76.58387756]
[226.92504883 72.72672272]
[241.33726501 68.56883240]
[255.74948120 64.41094971]
[270.16168213 60.25305939]
[281.13836670 48.06927490]
[297.11965942 51.74765015]
[301.66537476 67.50418854]
[290.09927368 79.12991333]
[274.31958008 74.66527557]
[259.90737915 78.82316589]
[245.49514771 82.98104858]
[231.08293152 87.13893890]
[228.00607300 90.86833191]
[222.52871704 92.66554260]
[215.98420715 91.15658569]
[201.41151428 94.71134186]
[186.83880615 98.26610565]
[172.26611328 101.82086945]
[157.69340515 105.37563324]
[143.12069702 108.93038940]
[128.54800415 112.48515320]
[119.40626526 124.37753296]
[119.71832275 139.37428284]
[120.03037262 154.37104797]
[131.92999268 161.39942932]
[138.73426819 173.30383301]
[138.75090027 186.90715027]
[132.08294678 198.63957214]
[120.57350159 205.47541809]
[120.57350159 220.47541809]
[120.57350159 235.47541809]
[120.57350159 250.47541809]
[120.57350159 265.47540283]
[120.57350159 280.47540283]
[120.57350159 295.47540283]
[120.57350159 310.47540283]
[120.57350159 325.47540283]
[120.57350159 340.47540283]
[120.57350159 355.47540283]
[120.57350159 370.47540283]
[135.11338806 374.53674316]
[148.01776123 382.37124634]
[158.32905579 393.39758301]
[165.28207397 406.79748535]
[168.36087036 421.57666016]
[167.33697510 436.63833618]
[162.28637695 450.86486816]
[153.58384705 463.20053101]
[141.87519836 472.72994995]
[128.02925110 478.74597168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 124]
[27 123]
[28 122]
[30 92]
[31 91]
[32 90]
[33 89]
[35 86]
[36 85]
[37 84]
[38 53]
[39 52]
[40 51]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
