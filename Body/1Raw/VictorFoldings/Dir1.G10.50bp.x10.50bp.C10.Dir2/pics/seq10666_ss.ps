%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCAUACGGGGGGGGGGCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUxxxxxxxxxxAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUCCCCCCCCCCAAACUAAUAC\
) } def
/len { sequence length } bind def

/coor [
[81.51235962 374.94723511]
[67.66641998 368.93121338]
[55.95775986 359.40179443]
[47.25523758 347.06613159]
[42.20463562 332.83959961]
[41.18074417 317.77792358]
[44.25954056 302.99874878]
[51.21256256 289.59884644]
[61.52384949 278.57250977]
[74.42823029 270.73797607]
[88.96811676 266.67666626]
[88.96811676 251.67668152]
[88.96811676 236.67668152]
[88.96811676 221.67668152]
[88.96811676 206.67668152]
[88.96811676 191.67668152]
[88.96811676 176.67668152]
[88.96811676 161.67668152]
[88.96811676 146.67668152]
[88.96811676 131.67668152]
[73.91278839 104.89347076]
[87.32173157 85.12925720]
[82.71616364 70.85379028]
[78.11059570 56.57833481]
[73.50503540 42.30287170]
[68.89946747 28.02741241]
[64.29390717 13.75195122]
[49.70403671 17.26664734]
[34.89013672 19.66785812]
[19.93706512 20.94182777]
[4.93046808 21.08126068]
[-10.04369450 20.08535576]
[-24.89965248 17.95982170]
[-39.55231094 14.71683025]
[-53.91773987 10.37495804]
[-67.91365051 4.95907497]
[-81.45988464 -1.49979639]
[-94.47883606 -8.96465969]
[-106.89595032 -17.39275742]
[-118.64008331 -26.73581314]
[-129.64396667 -36.94030762]
[-139.84458923 -47.94779587]
[-149.18351746 -59.69522095]
[-157.60723877 -72.11529541]
[-165.06752014 -85.13687897]
[-171.52160645 -98.68538666]
[-176.93257141 -112.68320465]
[-181.26937866 -127.05016327]
[-184.50720215 -141.70396423]
[-186.62751770 -156.56066895]
[-187.61813354 -171.53517151]
[-187.47341919 -186.54171753]
[-186.19418335 -201.49435425]
[-183.78776550 -216.30740356]
[-180.26792908 -230.89602661]
[-175.65484619 -245.17668152]
[-169.97494507 -259.06753540]
[-163.26075745 -272.48904419]
[-155.55073547 -285.36434937]
[-146.88905334 -297.61965942]
[-137.32531738 -309.18478394]
[-126.91430664 -319.99349976]
[-115.71566010 -329.98388672]
[-103.79352570 -339.09869385]
[-91.21618652 -347.28576660]
[-78.05568695 -354.49816895]
[-64.38741302 -360.69458008]
[-50.28965378 -365.83953857]
[-35.84316254 -369.90356445]
[-21.13068771 -372.86337280]
[-6.23650026 -374.70199585]
[8.75408459 -375.40893555]
[23.75520134 -374.98013306]
[38.68092346 -373.41799927]
[53.44575882 -370.73156738]
[67.96513367 -366.93612671]
[82.15587616 -362.05349731]
[95.93671417 -356.11163330]
[109.22869873 -349.14453125]
[121.95569611 -341.19210815]
[134.04481506 -332.29995728]
[145.42680359 -322.51895142]
[156.03646851 -311.90518188]
[165.81303406 -300.51937866]
[174.70050049 -288.42681885]
[182.64794922 -275.69671631]
[189.60989380 -262.40200806]
[195.54641724 -248.61888123]
[200.42353821 -234.42623901]
[204.21330261 -219.90538025]
[206.89401245 -205.13951111]
[208.45033264 -190.21318054]
[208.87330627 -175.21189880]
[208.16055298 -160.22158813]
[206.31613159 -145.32810974]
[203.35060120 -130.61679077]
[199.28096008 -116.17188263]
[194.13052368 -102.07612610]
[187.92878723 -88.41026306]
[180.71127319 -75.25256348]
[172.51933289 -62.67841339]
[163.39987183 -50.75981903]
[153.40513611 -39.56505966]
[142.59237671 -29.15825462]
[131.02351379 -19.59901619]
[118.76484680 -10.94209671]
[105.88655853 -3.23708487]
[92.46244049 3.47188616]
[78.56936646 9.14638710]
[83.17493439 23.42184830]
[87.78049469 37.69730759]
[92.38606262 51.97277069]
[96.99162292 66.24822998]
[101.59719086 80.52368927]
[119.59329224 82.09493256]
[133.54161072 100.27364349]
[147.66641235 105.32239532]
[160.40385437 96.46028137]
[175.91696167 96.81122589]
[188.24063110 106.24028015]
[192.63613892 121.12178040]
[187.41334534 135.73348999]
[174.58050537 144.45690918]
[159.07212830 143.93769836]
[146.85147095 134.37550354]
[142.61766052 119.44720459]
[128.49285889 114.39844513]
[122.36167145 118.71800232]
[123.71221161 133.65707397]
[110.09929657 127.35711670]
[103.96811676 131.67668152]
[103.96811676 146.67668152]
[103.96811676 161.67668152]
[103.96811676 176.67668152]
[103.96811676 191.67668152]
[103.96811676 206.67668152]
[103.96811676 221.67668152]
[103.96811676 236.67668152]
[103.96811676 251.67668152]
[103.96811676 266.67666626]
[118.50800323 270.73797607]
[131.41238403 278.57250977]
[141.72366333 289.59884644]
[148.67669678 302.99874878]
[151.75549316 317.77792358]
[150.73159790 332.83959961]
[145.68099976 347.06613159]
[136.97846985 359.40179443]
[125.26980591 368.93121338]
[111.42387390 374.94723511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 114]
[23 113]
[24 112]
[25 111]
[26 110]
[27 109]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
