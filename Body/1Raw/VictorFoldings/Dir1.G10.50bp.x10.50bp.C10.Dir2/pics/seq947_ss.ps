%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCUUGGGGGGGGGGUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAxxxxxxxxxxAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCACCCCCCCCCCUCCUAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[64.83945465 373.73498535]
[50.99351501 367.71896362]
[39.28485489 358.18954468]
[30.58232880 345.85388184]
[25.53172684 331.62734985]
[24.50783539 316.56567383]
[27.58663368 301.78652954]
[34.53965759 288.38659668]
[44.85094070 277.36026001]
[57.75532150 269.52575684]
[72.29521179 265.46444702]
[72.29521179 250.46443176]
[72.29521179 235.46443176]
[72.29521179 220.46443176]
[72.29521179 205.46443176]
[72.29521179 190.46443176]
[72.29521179 175.46443176]
[72.29521179 160.46443176]
[72.29521179 145.46443176]
[72.29521179 130.46443176]
[72.29521179 115.46443939]
[68.28746796 101.00975037]
[60.56338501 88.15134430]
[52.83929825 75.29294586]
[45.11521530 62.43453979]
[37.39112854 49.57613754]
[29.66704369 36.71773529]
[21.94295883 23.85933304]
[8.43494892 30.40455627]
[-5.60539436 35.71256638]
[-20.06502533 39.74063110]
[-34.82752228 42.45631409]
[-49.77402115 43.83775330]
[-64.78418732 43.87382507]
[-79.73715210 42.56423569]
[-94.51252747 39.91953278]
[-108.99135590 35.96100998]
[-123.05704498 30.72053719]
[-136.59635925 24.24031067]
[-149.50027466 16.57250595]
[-161.66488647 7.77886248]
[-172.99227905 -2.06981993]
[-183.39123535 -12.89424229]
[-192.77801514 -24.60725212]
[-201.07704163 -37.11454010]
[-208.22151184 -50.31540298]
[-214.15390015 -64.10355377]
[-218.82641602 -78.36797333]
[-222.20147705 -92.99382019]
[-224.25187683 -107.86331940]
[-224.96110535 -122.85675812]
[-224.32348633 -137.85342407]
[-222.34411621 -152.73254395]
[-219.03895569 -167.37432861]
[-214.43460083 -181.66090393]
[-208.56813049 -195.47723389]
[-201.48678589 -208.71206665]
[-193.24757385 -221.25883484]
[-183.91683960 -233.01654053]
[-173.56970215 -243.89050293]
[-162.28947449 -253.79316711]
[-150.16697693 -262.64480591]
[-137.29983521 -270.37414551]
[-123.79161835 -276.91894531]
[-109.75111389 -282.22653198]
[-95.29135895 -286.25415039]
[-80.52877808 -288.96939087]
[-65.58223724 -290.35037231]
[-50.57207489 -290.38598633]
[-35.61914825 -289.07592773]
[-20.84385109 -286.43078613]
[-6.36514854 -282.47183228]
[7.70038366 -277.23092651]
[21.23949623 -270.75027466]
[34.14317703 -263.08209229]
[46.30753326 -254.28807068]
[57.63461685 -244.43904114]
[68.03323364 -233.61430359]
[77.41966248 -221.90100098]
[85.71831512 -209.39346313]
[92.86238098 -196.19238281]
[98.79434204 -182.40405273]
[103.46643066 -168.13948059]
[106.84103394 -153.51353455]
[108.89097595 -138.64396667]
[109.59976196 -123.65051270]
[108.96166992 -108.65387726]
[106.98184967 -93.77481079]
[103.67623901 -79.13311768]
[99.07144928 -64.84668732]
[93.20455933 -51.03054047]
[86.12281036 -37.79592514]
[77.88321686 -25.24939919]
[68.55211639 -13.49198151]
[58.20465088 -2.61833763]
[46.92412186 7.28398228]
[34.80136108 16.13524818]
[42.52544403 28.99365044]
[50.24953079 41.85205460]
[57.97361755 54.71045685]
[65.69770050 67.56885529]
[73.42178345 80.42726135]
[81.14587402 93.28565979]
[92.64227295 82.69860077]
[107.24356842 83.97306061]
[115.54488373 94.85325623]
[130.36264038 97.18435669]
[145.18040466 99.51545715]
[152.24417114 86.12210846]
[163.27572632 75.74986267]
[177.07844543 69.52382660]
[192.15512085 68.11935425]
[206.87034607 71.68879700]
[219.62791443 79.84495544]
[229.04400635 91.70313263]
[234.09719849 105.97702026]
[234.23937988 121.11830139]
[229.45512390 135.48457336]
[220.26338196 147.51747131]
[207.66122437 155.91177368]
[193.01562500 159.75691223]
[177.91523743 158.63581848]
[163.99801636 152.67007446]
[152.77363586 142.50682068]
[145.45959473 129.24847412]
[142.84928894 114.33322144]
[128.03153992 112.00211334]
[113.21378326 109.67101288]
[102.27961731 118.05100250]
[87.29521179 115.46443939]
[87.29521179 130.46443176]
[87.29521179 145.46443176]
[87.29521179 160.46443176]
[87.29521179 175.46443176]
[87.29521179 190.46443176]
[87.29521179 205.46443176]
[87.29521179 220.46443176]
[87.29521179 235.46443176]
[87.29521179 250.46443176]
[87.29521179 265.46444702]
[101.83509827 269.52575684]
[114.73947906 277.36026001]
[125.05075836 288.38659668]
[132.00378418 301.78652954]
[135.08258057 316.56567383]
[134.05868530 331.62734985]
[129.00808716 345.85388184]
[120.30556488 358.18954468]
[108.59690094 367.71896362]
[94.75096130 373.73498535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[106 128]
[107 127]
[108 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
