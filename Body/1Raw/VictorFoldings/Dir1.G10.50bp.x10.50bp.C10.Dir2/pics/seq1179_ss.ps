%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCAGCCACCGGGGGGGGGGGCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUxxxxxxxxxxCCCAAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACCCCCCCCCCCUGCCAGCCACC\
) } def
/len { sequence length } bind def

/coor [
[83.33770752 368.65011597]
[69.84883118 361.91857910]
[58.36332703 352.15402222]
[49.54895782 339.92410278]
[43.91817856 325.93991089]
[41.79834747 311.01443481]
[43.31271744 296.01544189]
[48.37324142 281.81494141]
[56.68570709 269.23852539]
[67.76683807 259.01736450]
[80.97238922 251.74571228]
[95.53461456 247.84635925]
[95.22663879 232.84951782]
[94.91866302 217.85267639]
[94.61068726 202.85583496]
[94.30270386 187.85899353]
[93.99472809 172.86216736]
[93.68675232 157.86532593]
[93.37877655 142.86848450]
[93.07079315 127.87165070]
[92.76281738 112.87480927]
[89.70442200 98.18991089]
[83.99975586 84.31703186]
[78.29509735 70.44415283]
[72.59043121 56.57126999]
[66.88577271 42.69839096]
[53.31038284 45.35193634]
[39.48276138 45.42900467]
[25.88741875 42.92855072]
[13.00041580 37.93982315]
[1.27269506 30.63917923]
[-8.88570023 21.28382874]
[-17.11996078 10.20279694]
[-23.14290428 -2.21465945]
[-26.74499321 -15.53272438]
[-27.80162048 -29.28431702]
[-26.27742004 -42.98747253]
[-22.22745514 -56.16223526]
[-15.79521847 -68.34747314]
[-7.20755863 -79.11699677]
[3.23332310 -88.09450531]
[15.16050911 -94.96669006]
[10.32069206 -109.16444397]
[5.48087597 -123.36219788]
[0.64105964 -137.55995178]
[-4.19875669 -151.75770569]
[-9.03857327 -165.95545959]
[-13.87838936 -180.15321350]
[-18.71820641 -194.35096741]
[-33.52892685 -191.78404236]
[-48.55885696 -191.56576538]
[-63.43787384 -193.70150757]
[-77.79956818 -198.13865662]
[-91.29026794 -204.76794434]
[-103.57775116 -213.42613220]
[-114.35942841 -223.89999390]
[-123.36979675 -235.93161011]
[-130.38696289 -249.22468567]
[-135.23812866 -263.45187378]
[-137.80381775 -278.26281738]
[-138.02084351 -293.29275513]
[-135.88389587 -308.17160034]
[-131.44555664 -322.53292847]
[-124.81514740 -336.02307129]
[-116.15594482 -348.30984497]
[-105.68119049 -359.09066772]
[-93.64883423 -368.10003662]
[-80.35517883 -375.11608887]
[-66.12759399 -379.96609497]
[-51.31644821 -382.53054810]
[-36.28648376 -382.74633789]
[-21.40781784 -380.60815430]
[-7.04685783 -376.16864014]
[6.44274712 -369.53713989]
[18.72880173 -360.87692261]
[29.50875473 -350.40127563]
[38.51713562 -338.36816406]
[45.53210449 -325.07394409]
[50.38091660 -310.84594727]
[52.94416428 -296.03457642]
[53.15871811 -281.00460815]
[51.01930618 -266.12612915]
[46.57860184 -251.76551819]
[39.94596863 -238.27647400]
[31.28474045 -225.99111938]
[20.80820656 -215.21203613]
[8.77435970 -206.20465088]
[-4.52045345 -199.19078064]
[0.31936309 -184.99302673]
[5.15917921 -170.79527283]
[9.99899578 -156.59751892]
[14.83881187 -142.39976501]
[19.67862892 -128.20201111]
[24.51844406 -114.00426483]
[29.35826111 -99.80651093]
[45.48357773 -101.71041870]
[61.64009094 -100.02866364]
[77.03988647 -94.84040070]
[90.93132019 -86.39584351]
[102.63571930 -75.10424805]
[111.58052826 -61.51401901]
[117.32731628 -46.28610611]
[119.59326172 -30.16185951]
[118.26509857 -13.92693233]
[113.40473175 1.62700140]
[105.24638367 15.74084759]
[94.18531036 27.72514153]
[80.75865173 36.99372482]
[86.46331024 50.86660767]
[92.16797638 64.73948669]
[97.87264252 78.61236572]
[103.57730103 92.48525238]
[116.58140564 81.96200562]
[135.13179016 79.49143219]
[149.64041138 83.29929352]
[164.14903259 87.10715485]
[178.65766907 90.91500854]
[193.16629028 94.72286987]
[207.68818665 87.90422058]
[222.00910950 95.13545990]
[225.14326477 110.86939240]
[214.68640137 123.03629303]
[198.66012573 122.30276489]
[189.35842896 109.23149872]
[174.84980774 105.42363739]
[160.34118652 101.61577606]
[145.83255005 97.80792236]
[131.32392883 94.00006104]
[125.43286133 98.64175415]
[113.65072632 107.92514038]
[107.75965881 112.56683350]
[108.06763458 127.56366730]
[108.37561035 142.56050110]
[108.68358612 157.55734253]
[108.99156952 172.55418396]
[109.29954529 187.55102539]
[109.60752106 202.54786682]
[109.91549683 217.54469299]
[110.22348022 232.54153442]
[110.53145599 247.53837585]
[125.24149323 250.83659363]
[138.73445129 257.55996704]
[150.22586060 267.31756592]
[159.04765320 279.54211426]
[164.68690491 293.52288818]
[166.81578064 308.44708252]
[165.31051636 323.44699097]
[160.25859070 337.65057373]
[151.95375061 350.23202515]
[140.87882996 360.45989990]
[127.67768097 367.73953247]
[113.11782074 371.64773560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[42 95]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
