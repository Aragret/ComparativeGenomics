%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAAGCCGCCGGGGGGGGGGGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCxxxxxxxxxxAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGCCCCCCCCCCUCGAAGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[60.06158829 685.19903564]
[45.50172806 681.29083252]
[32.30058670 674.01116943]
[21.22565460 663.78332520]
[12.92081451 651.20184326]
[7.86890173 636.99829102]
[6.36362648 621.99835205]
[8.49250317 607.07415771]
[14.13176250 593.09338379]
[22.95354462 580.86883545]
[34.44496155 571.11120605]
[47.93791962 564.38787842]
[62.64795685 561.08966064]
[62.95593262 546.09283447]
[63.26391220 531.09600830]
[63.57188797 516.09912109]
[63.87986755 501.10229492]
[64.18784332 486.10546875]
[64.49581909 471.10861206]
[64.80380249 456.11178589]
[65.11177826 441.11495972]
[65.41975403 426.11810303]
[65.72772980 411.12127686]
[58.25337601 398.23782349]
[66.27239227 384.59942627]
[66.58036804 369.60256958]
[53.92148209 377.64947510]
[39.67040253 372.96902466]
[34.24758148 358.98355103]
[41.61820221 345.91934204]
[56.39284134 343.32894897]
[67.76796722 353.10595703]
[69.61128998 338.21963501]
[71.45461273 323.33334351]
[69.14112091 316.26510620]
[73.49166107 308.16149902]
[75.64023590 293.31616211]
[77.78881836 278.47085571]
[71.95433807 264.76654053]
[81.58856964 252.21694946]
[74.19744110 236.32934570]
[85.63541412 221.93478394]
[87.47873688 207.04847717]
[88.70935059 192.09904480]
[81.50109100 179.06484985]
[89.79843903 165.59396362]
[90.41426086 150.60661316]
[91.03009033 135.61926270]
[91.64591217 120.63191223]
[81.72424316 117.84062195]
[73.03308105 110.17006683]
[67.94168854 98.32905579]
[68.37077332 84.14028168]
[57.60209656 73.69827271]
[41.60336304 72.50662994]
[32.67935562 59.17465210]
[37.67581177 43.92948914]
[52.75987625 38.46592712]
[66.36035156 46.97514343]
[68.04410553 62.92959213]
[78.81278229 73.37160492]
[86.13914490 71.76710510]
[78.55943298 58.82307434]
[88.52781677 47.61453629]
[102.26808929 53.63157272]
[100.79187012 68.55810547]
[108.11823273 66.95361328]
[113.53685760 52.96652603]
[118.95548248 38.97944260]
[124.37410736 24.99236107]
[111.84096527 33.23373795]
[96.98941040 35.33877945]
[82.65969086 30.90491104]
[71.59226990 20.78007889]
[65.90371704 6.90058565]
[66.68192291 -8.07921410]
[73.77806091 -21.29453850]
[85.83505249 -30.21805000]
[100.54707336 -33.14318848]
[115.10055542 -29.51054382]
[126.71224976 -20.01483345]
[133.16149902 -6.47204447]
[133.21464539 8.52919483]
[141.88125610 -3.71375871]
[150.54785156 -15.95671272]
[159.21446228 -28.19966698]
[167.88107300 -40.44261932]
[176.54768372 -52.68557358]
[185.21429443 -64.92852783]
[186.18780518 -81.29875183]
[200.97074890 -88.39782715]
[214.35568237 -78.92282867]
[212.57333374 -62.62082291]
[197.45724487 -56.26192093]
[188.79063416 -44.01896667]
[180.12402344 -31.77601242]
[171.45741272 -19.53305817]
[162.79081726 -7.29010487]
[154.12420654 4.95284891]
[145.45759583 17.19580269]
[138.36119080 30.41098595]
[132.94256592 44.39806747]
[127.52394104 58.38515091]
[122.10531616 72.37223816]
[128.32324219 105.33280182]
[106.63326263 121.24773407]
[106.01744080 136.23509216]
[105.40161896 151.22244263]
[104.78578949 166.20979309]
[111.94999695 180.31599426]
[103.69670868 192.71487427]
[105.92720032 196.60389709]
[106.68743134 200.59709167]
[106.13125610 204.20782471]
[104.55808258 207.05288696]
[102.36504364 208.89179993]
[100.52172089 223.77812195]
[107.83811951 234.44929504]
[105.95709991 246.84417725]
[96.43389130 254.36552429]
[102.11469269 269.13168335]
[92.63414001 280.61941528]
[90.48555756 295.46475220]
[88.33698273 310.31005859]
[86.34092712 325.17666626]
[84.49759674 340.06298828]
[82.65427399 354.94927979]
[81.57720947 369.91055298]
[81.26922607 384.90740967]
[88.72155762 398.86352539]
[80.72457123 411.42926025]
[80.41659546 426.42608643]
[80.10861206 441.42294312]
[79.80063629 456.41976929]
[79.49266052 471.41659546]
[79.18468475 486.41345215]
[78.87670135 501.41027832]
[78.56872559 516.40710449]
[78.26074982 531.40393066]
[77.95277405 546.40081787]
[77.64479065 561.39764404]
[92.20701599 565.29699707]
[105.41257477 572.56866455]
[116.49370575 582.78979492]
[124.80616760 595.36621094]
[129.86669922 609.56671143]
[131.38105774 624.56573486]
[129.26123047 639.49121094]
[123.63045502 653.47540283]
[114.81608582 665.70532227]
[103.33058167 675.46984863]
[89.84170532 682.20141602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[25 129]
[26 128]
[32 127]
[33 126]
[34 125]
[36 124]
[37 123]
[38 122]
[40 120]
[42 117]
[43 116]
[44 111]
[46 109]
[47 108]
[48 107]
[49 106]
[53 61]
[54 60]
[67 104]
[68 103]
[69 102]
[70 101]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
