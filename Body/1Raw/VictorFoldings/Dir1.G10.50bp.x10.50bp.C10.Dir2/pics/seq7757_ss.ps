%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACAUACGGGGGGGGGGUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACxxxxxxxxxxUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCCCCCCCCCCCUCCUACUUAC\
) } def
/len { sequence length } bind def

/coor [
[57.40999222 365.40063477]
[44.49083710 357.64227295]
[33.70953751 347.11325073]
[25.64752388 334.38137817]
[20.73956299 320.13327026]
[19.25033951 305.13729858]
[21.26016235 290.20220947]
[26.66064644 276.13339233]
[35.16055298 263.68957520]
[46.30148697 253.54185486]
[59.48263168 246.23747253]
[73.99314880 242.17033386]
[73.37732697 227.18298340]
[72.76149750 212.19563293]
[72.14567566 197.20826721]
[71.52984619 182.22091675]
[70.91402435 167.23356628]
[70.29819489 152.24621582]
[69.68237305 137.25886536]
[57.52904129 128.46701050]
[43.10165405 132.57196045]
[28.67427063 136.67691040]
[14.24688625 140.78184509]
[-0.18049845 144.88679504]
[-1.89753652 159.99044800]
[-9.26816177 173.28489685]
[-21.16840744 182.74282837]
[-35.78357315 186.92199707]
[-50.88494873 185.18508911]
[-64.16968536 177.79698181]
[-73.61196136 165.88430786]
[-77.77189636 151.26365662]
[-76.01512909 136.16458130]
[-68.60955048 122.88956451]
[-56.68446732 113.46296692]
[-42.05835724 109.32227325]
[-26.96160126 111.09889984]
[-13.69634533 118.52193451]
[-4.28544331 130.45941162]
[10.14194107 126.35446930]
[24.56932640 122.24951935]
[38.99671173 118.14457703]
[53.42409515 114.03963470]
[55.26741791 99.15332031]
[42.27703857 91.65332031]
[26.45708847 91.45393372]
[19.30359840 78.38960266]
[6.31321669 70.88960266]
[-9.49296570 73.63626099]
[-21.39929199 62.88363647]
[-20.27224922 46.88022232]
[-6.97640610 37.90246582]
[8.28880310 42.83733368]
[13.81321716 57.89921951]
[26.80359840 65.39922333]
[41.69438934 65.06215668]
[49.77703857 78.66294098]
[62.76741791 86.16294098]
[73.94937897 73.79195404]
[88.28474426 67.88550568]
[102.59816742 68.69101715]
[114.12003326 75.07278442]
[124.67205048 64.41187286]
[135.22406006 53.75096512]
[134.79734802 36.29229355]
[146.86979675 24.14373016]
[163.65699768 24.44876671]
[173.98789978 13.57345295]
[184.31880188 2.69813919]
[194.64970398 -8.17717457]
[204.86840820 -19.15797615]
[190.13514709 -16.34179306]
[175.74443054 -20.57350349]
[164.88078308 -30.91667366]
[159.94821167 -45.08246994]
[162.03825378 -59.93614578]
[170.68838501 -72.19074249]
[183.98443604 -79.13445282]
[198.98413086 -79.23069000]
[212.36817932 -72.45816803]
[221.17485046 -60.31557846]
[223.45532227 -45.48994446]
[218.70336914 -31.25953293]
[231.03465271 -39.79999161]
[243.36593628 -48.34045029]
[255.69721985 -56.88090897]
[268.02850342 -65.42137146]
[280.35980225 -73.96183014]
[292.69107056 -82.50228882]
[305.02236938 -91.04274750]
[291.08291626 -96.58278656]
[286.52224731 -110.87265778]
[294.67514038 -123.46353912]
[309.58016968 -125.14894104]
[320.33868408 -114.69647217]
[319.08438110 -99.74957275]
[332.22601318 -106.98127747]
[345.36764526 -114.21298218]
[347.17242432 -129.62474060]
[357.71606445 -141.00942993]
[372.94430542 -143.98941040]
[387.00158691 -137.41880798]
[394.48257446 -123.82416534]
[392.51071167 -108.43289185]
[381.84417725 -97.16324615]
[366.58450317 -94.34864044]
[352.59933472 -101.07135010]
[339.45770264 -93.83964539]
[326.31607056 -86.60794067]
[313.56280518 -78.71146393]
[301.23153687 -70.17100525]
[288.90023804 -61.63054276]
[276.56896973 -53.09008408]
[264.23767090 -44.54962540]
[251.90640259 -36.00916672]
[239.57511902 -27.46870804]
[227.24383545 -18.92824936]
[215.95355225 -9.05254269]
[213.75798035 -1.94679511]
[205.52502441 2.15372801]
[195.19412231 13.02904224]
[184.86322021 23.90435600]
[174.53231812 34.77967072]
[176.65946960 47.52437592]
[170.95536804 59.33504486]
[159.30969238 65.78170013]
[145.88497925 64.30297852]
[135.33296204 74.96389008]
[124.78094482 85.62479401]
[130.84434509 109.71879578]
[115.17216492 132.67970276]
[84.66972351 136.64303589]
[85.28555298 151.63038635]
[85.90137482 166.61773682]
[86.51720428 181.60508728]
[87.13302612 196.59245300]
[87.74885559 211.57980347]
[88.36467743 226.56715393]
[88.98050690 241.55450439]
[103.77577972 244.41748047]
[117.51174927 250.61584473]
[129.44766235 259.81533813]
[138.93980408 271.51986694]
[145.47630310 285.09820557]
[148.70463562 299.81805420]
[148.45071411 314.88565063]
[144.72822571 329.48837280]
[137.73793030 342.83874512]
[127.85678101 354.21679688]
[115.61767578 363.00888062]
[101.68064880 368.74090576]
[86.79730988 371.10372925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[44 58]
[45 57]
[47 55]
[48 54]
[62 129]
[63 128]
[64 127]
[67 123]
[68 122]
[69 121]
[70 120]
[71 118]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[96 109]
[97 108]
[98 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
