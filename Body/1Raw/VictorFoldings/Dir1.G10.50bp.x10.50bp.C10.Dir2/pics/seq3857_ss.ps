%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUACUAAUGGGGGGGGGGAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUxxxxxxxxxxUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCCCCCCCCCCCAUUAAUAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 367.71817017]
[71.19830322 361.70214844]
[59.48964310 352.17272949]
[50.78712082 339.83706665]
[45.73651886 325.61053467]
[44.71262741 310.54885864]
[47.79142761 295.76971436]
[54.74444962 282.36978149]
[65.05573273 271.34344482]
[77.96011353 263.50894165]
[92.50000000 259.44763184]
[92.50000000 244.44763184]
[92.50000000 229.44763184]
[92.50000000 214.44763184]
[92.50000000 199.44763184]
[92.50000000 184.44763184]
[92.50000000 169.44763184]
[92.50000000 154.44763184]
[92.50000000 139.44763184]
[92.50000000 124.44762421]
[92.50000000 109.44762421]
[92.18794250 94.45087433]
[91.56396484 79.46385956]
[90.93998718 64.47683716]
[75.93819427 64.17707062]
[60.98331070 62.95433807]
[46.13206482 60.81328964]
[31.44079018 57.76203918]
[16.96521950 53.81216812]
[2.76026201 48.97865677]
[-11.12019634 43.27983856]
[-24.62350273 36.73733521]
[-37.69843292 29.37596130]
[-50.29539108 21.22364235]
[-62.36659241 12.31130314]
[-73.86624146 2.67275214]
[-84.75072479 -7.65544939]
[-94.97874451 -18.63412094]
[-104.51150513 -30.22161865]
[-113.31284332 -42.37398529]
[-121.34938049 -55.04512405]
[-128.59062195 -68.18696594]
[-135.00910950 -81.74966431]
[-140.58047485 -95.68176270]
[-145.28361511 -109.93041992]
[-149.10066223 -124.44158173]
[-152.01715088 -139.16020203]
[-154.02200317 -154.03044128]
[-155.10763550 -168.99591064]
[-155.26991272 -183.99981689]
[-154.50822449 -198.98526001]
[-152.82546997 -213.89538574]
[-150.22801208 -228.67364502]
[-146.72572327 -243.26397705]
[-142.33187866 -257.61102295]
[-137.06314087 -271.66036987]
[-130.93951416 -285.35870361]
[-123.98420715 -298.65411377]
[-116.22361755 -311.49609375]
[-107.68717957 -323.83599854]
[-98.40727997 -335.62695312]
[-88.41910553 -346.82427979]
[-77.76056671 -357.38549805]
[-66.47207642 -367.27050781]
[-54.59646606 -376.44186401]
[-42.17878342 -384.86474609]
[-29.26613045 -392.50717163]
[-15.90749168 -399.34020996]
[-2.15354037 -405.33792114]
[11.94354916 -410.47753906]
[26.33030128 -414.73959351]
[40.95214462 -418.10787964]
[55.75360870 -420.56964111]
[70.67855072 -422.11557007]
[85.67034912 -422.73974609]
[100.67213440 -422.43981934]
[115.62700653 -421.21694946]
[130.47824097 -419.07574463]
[145.16947937 -416.02435303]
[159.64500427 -412.07434082]
[173.84991455 -407.24069214]
[187.73031616 -401.54171753]
[201.23356628 -394.99908447]
[214.30842590 -387.63760376]
[226.90530396 -379.48513794]
[238.97640991 -370.57269287]
[250.47596741 -360.93402100]
[261.36035156 -350.60571289]
[271.58825684 -339.62695312]
[281.12091064 -328.03936768]
[289.92211914 -315.88690186]
[297.95852661 -303.21566772]
[305.19964600 -290.07376099]
[311.61801147 -276.51101685]
[317.18923950 -262.57885742]
[321.89224243 -248.33015442]
[325.70913696 -233.81895447]
[328.62548828 -219.10031128]
[330.63018799 -204.23004150]
[331.71566772 -189.26457214]
[331.87780762 -174.26065063]
[331.11596680 -159.27522278]
[329.43307495 -144.36511230]
[326.83547974 -129.58688354]
[323.33303833 -114.99658966]
[318.93905640 -100.64958191]
[313.67016602 -86.60028839]
[307.54641724 -72.90200043]
[300.59097290 -59.60667801]
[292.83026123 -46.76475906]
[284.29370117 -34.42495346]
[275.01367188 -22.63407135]
[265.02539062 -11.43684196]
[254.36674500 -0.87574059]
[243.07817078 9.00917244]
[231.20246887 18.18039894]
[218.78469849 26.60314941]
[205.87197876 34.24547195]
[192.51327515 41.07838058]
[178.75926208 47.07595062]
[164.66212463 52.21543503]
[150.27532959 56.47733307]
[135.65344238 59.84548187]
[120.85195923 62.30710602]
[105.92700195 63.85286331]
[106.55097961 78.83988190]
[107.17495728 93.82689667]
[110.17543030 98.21436310]
[110.46695709 103.97628784]
[107.50000000 109.44762421]
[107.50000000 124.44762421]
[107.50000000 139.44763184]
[107.50000000 154.44763184]
[107.50000000 169.44763184]
[107.50000000 184.44763184]
[107.50000000 199.44763184]
[107.50000000 214.44763184]
[107.50000000 229.44763184]
[107.50000000 244.44763184]
[107.50000000 259.44763184]
[122.03988647 263.50894165]
[134.94427490 271.34344482]
[145.25555420 282.36978149]
[152.20857239 295.76971436]
[155.28736877 310.54885864]
[154.26348877 325.61053467]
[149.21287537 339.83706665]
[140.51036072 352.17272949]
[128.80169678 361.70214844]
[114.95575714 367.71817017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 126]
[24 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
