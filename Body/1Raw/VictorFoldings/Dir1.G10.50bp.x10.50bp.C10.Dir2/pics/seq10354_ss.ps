%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCUACUCCGGGGGGGGGGCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUAxxxxxxxxxxAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUCCCCCCCCCCAACCCUACUCC\
) } def
/len { sequence length } bind def

/coor [
[81.59162140 599.11621094]
[67.56967163 593.56323242]
[55.36971664 584.69689941]
[45.75864410 573.07458496]
[39.34062195 559.42687988]
[36.51908493 544.61169434]
[37.47140121 529.56030273]
[42.13770676 515.21887207]
[50.22467041 502.48892212]
[61.22394562 492.17065430]
[74.44410706 484.91265869]
[89.05411530 481.17123413]
[89.05411530 466.17123413]
[89.05411530 451.17123413]
[89.05411530 436.17123413]
[89.05411530 421.17123413]
[89.05411530 406.17123413]
[89.05411530 391.17123413]
[89.05411530 376.17123413]
[89.05411530 361.17123413]
[89.05411530 346.17123413]
[74.70345306 343.45962524]
[61.09650803 338.14303589]
[48.70189667 330.40292358]
[37.94677734 320.50424194]
[29.20215034 308.78634644]
[22.77003288 295.65142822]
[18.87305260 281.55062866]
[17.64673042 266.96859741]
[19.13477135 252.40676880]
[23.28750420 238.36624146]
[29.96354485 225.33039856]
[38.93460846 213.74833679]
[49.89331055 204.01942444]
[62.46370316 196.47944641]
[76.21417236 191.38908386]
[90.67224121 188.92485046]
[90.98021698 173.92800903]
[83.50586700 161.04455566]
[91.52487946 147.40615845]
[91.83285522 132.40931702]
[78.59626770 125.66995239]
[69.58702850 113.86063385]
[66.58451080 99.31377411]
[70.18171692 84.90244293]
[79.66819763 73.47296143]
[93.17030334 67.28270721]
[93.47828674 52.28586960]
[86.02595520 38.32974243]
[94.02294159 25.76401520]
[94.33091736 10.76717758]
[94.63889313 -4.22966051]
[79.57317352 -7.71866083]
[65.56076813 -14.24761963]
[53.20740128 -23.53173447]
[43.04653549 -35.16716003]
[35.51635742 -48.64857483]
[30.94086647 -63.39112854]
[29.51594353 -78.75581360]
[31.30095863 -94.07716370]
[36.21630859 -108.69207001]
[44.04695511 -121.96849060]
[54.45184708 -133.33276367]
[66.97875214 -142.29443359]
[81.08393097 -148.46737671]
[96.15572357 -151.58644104]
[96.15572357 -166.58644104]
[96.15572357 -181.58644104]
[96.15572357 -196.58644104]
[96.15572357 -211.58644104]
[82.38185883 -218.16241455]
[72.83193207 -230.06878662]
[69.40209198 -244.94154358]
[72.77333069 -259.82769775]
[82.27629852 -271.77157593]
[96.02416229 -278.40173340]
[111.28728485 -278.40173340]
[125.03514862 -271.77157593]
[134.53811646 -259.82769775]
[137.90936279 -244.94154358]
[134.47952271 -230.06878662]
[124.92959595 -218.16241455]
[111.15572357 -211.58644104]
[111.15572357 -196.58644104]
[111.15572357 -181.58644104]
[111.15572357 -166.58644104]
[111.15572357 -151.58644104]
[125.43938446 -148.71315002]
[138.88729858 -143.09376526]
[150.97694397 -134.94454956]
[161.23812866 -124.58007050]
[169.27133179 -112.40109253]
[174.76322937 -98.87910461]
[177.49893188 -84.53803253]
[177.37036133 -69.93393707]
[174.38055420 -55.63349533]
[168.64361572 -42.19197083]
[160.38032532 -30.13166237]
[149.90972900 -19.92162895]
[137.63668823 -11.95941734]
[124.03636932 -6.55560684]
[109.63573456 -3.92168283]
[109.32775879 11.07515526]
[109.01978302 26.07199287]
[116.49413300 38.95544434]
[108.47512054 52.59384537]
[108.16714478 67.59068298]
[121.40373230 74.33004761]
[130.41297913 86.13936615]
[133.41549683 100.68622589]
[129.81828308 115.09755707]
[120.33180237 126.52703857]
[106.82969666 132.71730042]
[106.52171326 147.71412659]
[113.97404480 161.67025757]
[105.97705841 174.23597717]
[105.66908264 189.23281860]
[120.74047089 192.51972961]
[134.88275146 198.66819763]
[147.55848694 207.44261169]
[158.28637695 218.50761414]
[166.65948486 231.44090271]
[172.36073303 245.74935913]
[175.17481995 260.88784790]
[174.99645996 276.28002930]
[171.83422852 291.34017944]
[165.81022644 305.49563599]
[157.15530396 318.20843506]
[146.20031738 328.99584961]
[133.36337280 337.44869995]
[119.13392639 343.24679565]
[104.05411530 346.17123413]
[104.05411530 361.17123413]
[104.05411530 376.17123413]
[104.05411530 391.17123413]
[104.05411530 406.17123413]
[104.05411530 421.17123413]
[104.05411530 436.17123413]
[104.05411530 451.17123413]
[104.05411530 466.17123413]
[104.05411530 481.17123413]
[118.66413116 484.91265869]
[131.88429260 492.17065430]
[142.88356018 502.48892212]
[150.97053528 515.21887207]
[155.63684082 529.56030273]
[156.58915710 544.61169434]
[153.76760864 559.42687988]
[147.34959412 573.07458496]
[137.73852539 584.69689941]
[125.53855896 593.56323242]
[111.51661682 599.11621094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[37 117]
[38 116]
[40 114]
[41 113]
[47 107]
[48 106]
[50 104]
[51 103]
[52 102]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
