%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAACCCUAAGGGGGGGGGGCACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUxxxxxxxxxxCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUCCCCCCCCCCAAGCACCCUAA\
) } def
/len { sequence length } bind def

/coor [
[67.01606750 402.53918457]
[53.52718735 395.80764771]
[42.04168701 386.04309082]
[33.22731781 373.81317139]
[27.59653473 359.82897949]
[25.47670555 344.90350342]
[26.99107552 329.90451050]
[32.05159760 315.70401001]
[40.36406326 303.12756348]
[51.44519424 292.90643311]
[64.65074921 285.63479614]
[79.21297455 281.73541260]
[78.90499878 266.73858643]
[78.59701538 251.74174500]
[78.28903961 236.74490356]
[77.98106384 221.74806213]
[77.67308807 206.75123596]
[77.36510468 191.75439453]
[77.05712891 176.75755310]
[76.74915314 161.76071167]
[76.28722382 146.76782227]
[75.67140198 131.78047180]
[65.68030548 120.59217834]
[50.85782242 118.29130554]
[36.03533936 115.99043274]
[27.01200294 117.77233887]
[20.93341255 113.48713684]
[6.16129684 110.88241577]
[-8.61081886 108.27768707]
[-23.54490471 113.50106812]
[-34.73525238 103.67124939]
[-49.50737000 101.06652832]
[-55.93593979 102.99423218]
[-61.51491165 101.55792999]
[-64.82716370 98.03965759]
[-79.47988892 94.83066559]
[-94.13261414 91.62166595]
[-108.78533936 88.41267395]
[-119.07312012 99.81693268]
[-133.68966675 104.53414917]
[-148.70320129 101.29541779]
[-160.07514954 90.97193909]
[-164.74653625 76.34068298]
[-161.46075439 61.33737183]
[-151.10168457 49.99783325]
[-136.45585632 45.37233734]
[-121.46292114 48.70512390]
[-110.15590668 59.09968948]
[-105.57633972 73.75994873]
[-90.92361450 76.96894073]
[-76.27088928 80.17794037]
[-61.61816788 83.38694000]
[-46.90264511 86.29441071]
[-32.13053131 88.89913177]
[-18.25304604 83.48944855]
[-6.00609684 93.50557709]
[8.76601982 96.11029816]
[23.53813553 98.71501923]
[38.33621597 101.16794586]
[53.15869522 103.46881866]
[67.98117828 105.76969910]
[75.31487274 82.72400665]
[95.27503204 72.68013763]
[96.81232452 57.75912094]
[87.11612701 45.56807709]
[88.88771057 30.45794296]
[100.56976318 21.28923225]
[102.10705566 6.36821604]
[88.05995941 0.83815050]
[76.02645874 -8.27762604]
[66.89951324 -20.30266190]
[61.35641098 -34.34461975]
[59.80848312 -49.36149216]
[62.37059784 -64.23892975]
[68.85262299 -77.87292480]
[78.77355957 -89.25175476]
[91.39720154 -97.53101349]
[105.78679657 -102.09634399]
[120.87453461 -102.60896301]
[135.54080200 -99.03083038]
[148.69728088 -91.62746429]
[159.36764526 -80.94824982]
[166.76011658 -67.78565216]
[170.32609558 -53.11642075]
[169.80099487 -38.02911377]
[165.22373962 -23.64330673]
[156.93402100 -11.02652550]
[145.54698181 -1.11501777]
[131.90762329 5.35571766]
[117.02807617 7.90550852]
[115.49078369 22.82652473]
[125.05799103 34.18452072]
[123.71151733 49.33845139]
[111.73333740 59.29641342]
[110.19604492 74.21743011]
[116.32993317 70.14432526]
[123.58068848 67.27695465]
[137.14257812 60.86798096]
[150.70448303 54.45900726]
[164.26637268 48.05002975]
[168.06082153 32.87979126]
[180.74905396 23.73962784]
[196.34010315 24.94524956]
[207.47232056 35.92739868]
[208.88943481 51.50063705]
[199.92231750 64.31175995]
[184.80497742 68.31175232]
[170.67535400 61.61192703]
[157.11344910 68.02090454]
[143.55155945 74.42987823]
[129.98966980 80.83885193]
[130.98768616 88.27215576]
[132.98374939 103.13874817]
[133.98178101 110.57205200]
[148.75389099 113.17677307]
[163.52601624 115.78149414]
[177.43954468 107.79444885]
[192.30545044 113.82640839]
[196.71986389 129.25016785]
[187.29643250 142.23394775]
[171.26400757 142.81768799]
[160.92127991 130.55361938]
[146.14916992 127.94889069]
[131.37705994 125.34416962]
[123.61491394 130.75350952]
[115.11773682 134.00527954]
[106.44680786 135.06669617]
[98.13591003 134.04344177]
[90.65875244 131.16465759]
[91.27458191 146.15200806]
[94.77169800 154.65882874]
[91.74598694 161.45274353]
[92.05397034 176.44956970]
[92.36194611 191.44641113]
[92.66992188 206.44325256]
[92.97789764 221.44009399]
[93.28588104 236.43692017]
[93.59385681 251.43376160]
[93.90183258 266.43060303]
[94.20980835 281.42742920]
[108.91984558 284.72567749]
[122.41280365 291.44903564]
[133.90422058 301.20663452]
[142.72601318 313.43118286]
[148.36526489 327.41195679]
[150.49414062 342.33612061]
[148.98886108 357.33605957]
[143.93695068 371.53964233]
[135.63211060 384.12109375]
[124.55718231 394.34896851]
[111.35604095 401.62860107]
[96.79618073 405.53680420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 130]
[22 129]
[23 61]
[24 60]
[25 59]
[27 58]
[28 57]
[29 56]
[31 54]
[32 53]
[35 52]
[36 51]
[37 50]
[38 49]
[63 95]
[64 94]
[67 91]
[68 90]
[97 111]
[98 110]
[99 109]
[100 108]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
