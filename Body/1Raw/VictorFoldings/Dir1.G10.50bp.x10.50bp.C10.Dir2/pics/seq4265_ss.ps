%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCUCCCUGGGGGGGGGGGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAxxxxxxxxxxGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACCCCCCCCCCCUAAUCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[91.25541687 161.45137024]
[76.80460358 157.57353210]
[63.70156479 150.35038757]
[52.70764542 140.20162964]
[44.46165085 127.71695709]
[39.44271469 113.62179565]
[37.94246292 98.73513031]
[40.04806137 83.92196655]
[45.63717270 70.04301453]
[54.38504028 57.90471268]
[65.78336334 48.21236038]
[79.16984558 41.52912903]
[93.76666260 38.24335098]
[94.07463837 23.24651527]
[94.38262177 8.24967670]
[94.69059753 -6.74716139]
[94.99857330 -21.74399948]
[95.30654907 -36.74083710]
[95.61453247 -51.73767471]
[95.92250824 -66.73451233]
[96.23048401 -81.73135376]
[96.53845978 -96.72818756]
[96.84644318 -111.72502899]
[81.88806915 -112.89669800]
[67.02204132 -114.92820740]
[52.29775238 -117.81281281]
[37.76410294 -121.54091644]
[23.46937752 -126.10014343]
[9.46106243 -131.47535706]
[-4.21430779 -137.64868164]
[-17.51130486 -144.59960938]
[-30.38575935 -152.30508423]
[-42.79489899 -160.73947144]
[-54.69750977 -169.87477112]
[-66.05403900 -179.68061829]
[-76.82677460 -190.12446594]
[-86.97992706 -201.17160034]
[-96.47975922 -212.78533936]
[-105.29473114 -224.92709351]
[-113.39553833 -237.55651855]
[-120.75528717 -250.63168335]
[-127.34952545 -264.10913086]
[-133.15634155 -277.94412231]
[-138.15644836 -292.09066772]
[-142.33325195 -306.50177002]
[-145.67285156 -321.12957764]
[-148.16416931 -335.92547607]
[-149.79891968 -350.84036255]
[-150.57168579 -365.82464600]
[-150.47987366 -380.82855225]
[-149.52383423 -395.80224609]
[-147.70669556 -410.69598389]
[-145.03451538 -425.46029663]
[-141.51617432 -440.04617310]
[-137.16336060 -454.40509033]
[-131.99052429 -468.48937988]
[-126.01485443 -482.25225830]
[-119.25619507 -495.64804077]
[-111.73700714 -508.63214111]
[-103.48226929 -521.16149902]
[-94.51939392 -533.19451904]
[-84.87815857 -544.69110107]
[-74.59059906 -555.61322021]
[-63.69087601 -565.92443848]
[-52.21520615 -575.59057617]
[-40.20170975 -584.57958984]
[-27.69029236 -592.86151123]
[-14.72251701 -600.40881348]
[-1.34146166 -607.19653320]
[12.40842342 -613.20208740]
[26.48146057 -618.40545654]
[40.83090210 -622.78942871]
[55.40908051 -626.33941650]
[70.16757202 -629.04364014]
[85.05733490 -630.89312744]
[100.02893066 -631.88165283]
[115.03260040 -632.00604248]
[130.01852417 -631.26580811]
[144.93690491 -629.66339111]
[159.73818970 -627.20422363]
[174.37321472 -623.89636230]
[188.79335022 -619.75085449]
[202.95071411 -614.78149414]
[216.79826355 -609.00469971]
[230.28999329 -602.43975830]
[243.38110352 -595.10839844]
[256.02807617 -587.03497314]
[268.18893433 -578.24639893]
[279.82327271 -568.77178955]
[290.89242554 -558.64263916]
[301.35961914 -547.89263916]
[311.19009399 -536.55737305]
[320.35119629 -524.67462158]
[328.81250000 -512.28381348]
[336.54589844 -499.42614746]
[343.52569580 -486.14425659]
[349.72866821 -472.48233032]
[355.13427734 -458.48571777]
[359.72451782 -444.20089722]
[363.48416138 -429.67538452]
[366.40072632 -414.95739746]
[368.46447754 -400.09579468]
[369.66864014 -385.14001465]
[370.00912476 -370.13967896]
[369.48486328 -355.14465332]
[368.09756470 -340.20474243]
[365.85186768 -325.36956787]
[362.75521851 -310.68841553]
[358.81787109 -296.21005249]
[354.05294800 -281.98254395]
[348.47625732 -268.05322266]
[342.10635376 -254.46830750]
[334.96435547 -241.27294922]
[327.07400513 -228.51097107]
[318.46151733 -216.22476196]
[309.15551758 -204.45513916]
[299.18688965 -193.24121094]
[288.58874512 -182.62022400]
[277.39633179 -172.62747192]
[265.64678955 -163.29611206]
[253.37918091 -154.65718079]
[240.63421631 -146.73936462]
[227.45426941 -139.56895447]
[213.88311768 -133.16978455]
[199.96583557 -127.56311035]
[185.74864197 -122.76754761]
[171.27879333 -118.79903412]
[156.60433960 -115.67075348]
[141.77403259 -113.39308929]
[126.83714294 -111.97361755]
[111.84327698 -111.41705322]
[111.53530121 -96.42021179]
[111.22732544 -81.42337036]
[110.91934204 -66.42653656]
[110.61136627 -51.42969894]
[110.30339050 -36.43286133]
[109.99541473 -21.43602180]
[109.68743134 -6.43918419]
[109.37945557 8.55765438]
[109.07147980 23.55449295]
[108.76350403 38.55133057]
[123.21311951 42.43360901]
[136.31393433 49.66078568]
[147.30473328 59.81292725]
[155.54687500 72.30013275]
[160.56147766 86.39685059]
[162.05714417 101.28397369]
[159.94699097 116.09648895]
[154.35360718 129.97372437]
[145.60200500 142.10932922]
[134.20069885 151.79817200]
[120.81215668 158.47727966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
