%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCCCAUGGGGGGGGGGCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGxxxxxxxxxxAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACCCCCCCCCCCAAACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[79.98578644 404.36978149]
[66.13984680 398.35375977]
[54.43118668 388.82434082]
[45.72866440 376.48867798]
[40.67806244 362.26214600]
[39.65417099 347.20046997]
[42.73296738 332.42132568]
[49.68598938 319.02139282]
[59.99727631 307.99505615]
[72.90165710 300.16055298]
[87.44154358 296.09924316]
[87.44154358 281.09924316]
[87.44154358 266.09924316]
[87.44154358 251.09922791]
[87.44154358 236.09922791]
[87.44154358 221.09922791]
[87.44154358 206.09922791]
[87.44154358 191.09922791]
[87.44154358 176.09922791]
[87.44154358 161.09922791]
[74.66418457 153.24180603]
[61.27790070 160.00991821]
[47.89161682 166.77803040]
[43.19968033 181.86979675]
[29.17181587 189.14953613]
[14.13050270 184.29829407]
[6.99948645 170.19424438]
[12.00947285 155.20506287]
[26.18812561 148.22357178]
[41.12350082 153.39175415]
[54.50978470 146.62364197]
[67.89607239 139.85551453]
[66.65351105 132.45916748]
[64.16839600 117.66645813]
[62.92583466 110.27010345]
[48.06278610 108.24777222]
[33.19974136 106.22543335]
[18.33669281 104.20310211]
[4.74769640 112.73062897]
[-10.34371471 107.28739166]
[-15.36070251 92.04897308]
[-6.45466137 78.70498657]
[9.54245472 77.49179077]
[20.35902786 89.34005737]
[35.22207642 91.36238861]
[50.08512115 93.38472748]
[64.94816589 95.40705872]
[72.22813416 91.48075867]
[79.66835785 89.79979706]
[69.22854614 79.02898407]
[58.78873062 68.25817871]
[48.34891891 57.48736954]
[37.90910721 46.71656036]
[22.32565880 48.01662064]
[9.58227348 38.95350266]
[5.69598770 23.80653000]
[12.50178623 9.72764015]
[26.78618050 3.36445642]
[41.80451584 7.72147799]
[50.46559143 20.74145317]
[48.67991638 36.27674866]
[59.11972809 47.04755783]
[69.55953979 57.81836319]
[79.99935150 68.58917236]
[90.43916321 79.35998535]
[111.25135040 76.67374420]
[128.22926331 93.14705658]
[125.73002625 119.36042786]
[101.50251007 135.31951904]
[114.11363983 127.19797516]
[107.34790802 113.79489899]
[102.02027130 99.75801849]
[98.18908691 85.24113464]
[95.89634705 70.40331268]
[95.16716766 55.40711212]
[96.00953674 40.41684341]
[98.41422272 25.59675026]
[102.35488129 11.10920715]
[107.78833771 -2.88705158]
[114.65505981 -16.23867607]
[122.87980652 -28.79937744]
[132.37246704 -40.43153381]
[143.02903748 -51.00770187]
[154.73275757 -60.41199493]
[167.35539246 -68.54137421]
[180.75863647 -75.30678558]
[194.79563904 -80.63407898]
[209.31260681 -84.46490479]
[224.15049744 -86.75728607]
[239.14671326 -87.48609924]
[254.13696289 -86.64337158]
[268.95700073 -84.23831940]
[283.44442749 -80.29730988]
[297.44058228 -74.86351776]
[310.79202271 -67.99647522]
[323.35253906 -59.77141953]
[334.98446655 -50.27847672]
[345.56036377 -39.62165070]
[354.96435547 -27.91770554]
[363.09344482 -15.29487610]
[369.85852051 -1.89146531]
[375.18548584 12.14567184]
[379.01596069 26.66273689]
[381.30798340 41.50067520]
[382.03643799 56.49691010]
[381.19332886 71.48713684]
[378.78793335 86.30711365]
[374.84655762 100.79446411]
[369.41241455 114.79045868]
[362.54504395 128.14175415]
[354.31970215 140.70205688]
[344.82647705 152.33375549]
[334.16940308 162.90939331]
[322.46520996 172.31312561]
[309.84219360 180.44189453]
[296.43862915 187.20664978]
[282.40133667 192.53326416]
[267.88418579 196.36338806]
[253.04620361 198.65504456]
[238.04994202 199.38313293]
[223.05973816 198.53967285]
[208.23982239 196.13389587]
[193.75256348 192.19218445]
[179.75669861 186.75770569]
[166.40557861 179.89001465]
[153.84547424 171.66435242]
[142.21400452 162.17085266]
[131.63862610 151.51350403]
[122.23518372 139.80911255]
[109.62405396 147.93064880]
[102.44154358 161.09922791]
[102.44154358 176.09922791]
[102.44154358 191.09922791]
[102.44154358 206.09922791]
[102.44154358 221.09922791]
[102.44154358 236.09922791]
[102.44154358 251.09922791]
[102.44154358 266.09924316]
[102.44154358 281.09924316]
[102.44154358 296.09924316]
[116.98143005 300.16055298]
[129.88581848 307.99505615]
[140.19709778 319.02139282]
[147.15011597 332.42132568]
[150.22891235 347.20046997]
[149.20503235 362.26214600]
[144.15441895 376.48867798]
[135.45190430 388.82434082]
[123.74324036 398.35375977]
[109.89730072 404.36978149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 32]
[22 31]
[23 30]
[35 47]
[36 46]
[37 45]
[38 44]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[69 130]
[70 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
