%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACGCAUCGGGGGGGGGGCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUxxxxxxxxxxAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCCCCCCCCCCCUACACAUC\
) } def
/len { sequence length } bind def

/coor [
[94.57714844 507.25381470]
[80.73120880 501.23779297]
[69.02254486 491.70837402]
[60.32002258 479.37271118]
[55.26942062 465.14620972]
[54.24553299 450.08450317]
[57.32432938 435.30535889]
[64.27735138 421.90542603]
[74.58863831 410.87908936]
[87.49301910 403.04458618]
[102.03290558 398.98327637]
[102.03290558 383.98327637]
[102.03290558 368.98327637]
[102.03290558 353.98327637]
[102.03290558 338.98327637]
[102.03290558 323.98327637]
[102.03290558 308.98327637]
[102.03290558 293.98327637]
[102.03290558 278.98327637]
[102.03290558 263.98327637]
[90.41349792 260.50683594]
[80.08930969 254.11476135]
[71.77784729 245.24238586]
[66.05905151 234.49774170]
[63.33483505 222.61988831]
[63.80083084 210.42807007]
[67.43237305 198.76515198]
[73.98569489 188.43948364]
[83.01422882 180.16871643]
[93.89910126 174.53005981]
[105.89148712 171.91992188]
[107.13835907 156.97183228]
[108.38523865 142.02374268]
[109.63211060 127.07565308]
[86.17713928 122.75123596]
[75.72533417 103.34864044]
[83.62924194 84.72864532]
[76.72224426 71.41349030]
[69.81523895 58.09833145]
[62.90824509 44.78317642]
[49.64892578 42.20477676]
[40.44498062 32.58628845]
[38.51049042 19.61200142]
[44.33263016 8.07512856]
[37.70413208 -5.38083744]
[23.34750175 -0.92733949]
[8.47092628 1.22533357]
[-6.55924368 1.02417064]
[-21.37287712 -1.52587450]
[-35.60517883 -6.36200476]
[-48.90565872 -13.36512661]
[-60.94678497 -22.36277962]
[-71.43202972 -33.13339233]
[-80.10318756 -45.41172409]
[-86.74672699 -58.89541626]
[-91.19904327 -73.25241089]
[-93.35048676 -88.12916565]
[-93.14808655 -103.15931702]
[-90.59681702 -117.97274017]
[-85.75951385 -132.20465088]
[-78.75529480 -145.50454712]
[-69.75664520 -157.54493713]
[-58.98516846 -168.02928162]
[-46.70611954 -176.69943237]
[-33.22188187 -183.34185791]
[-18.86451721 -187.79298401]
[-3.98758745 -189.94320679]
[11.04254913 -189.73956299]
[25.85576248 -187.18707275]
[40.08726501 -182.34860229]
[53.38658905 -175.34327698]
[65.42623138 -166.34364319]
[75.90969849 -155.57130432]
[84.57883453 -143.29153442]
[91.22014618 -129.80674744]
[95.67008972 -115.44901276]
[97.81908417 -100.57190704]
[97.61419678 -85.54178619]
[95.06048584 -70.72878265]
[90.22083282 -56.49768066]
[83.21441650 -43.19893646]
[74.21378326 -31.16003799]
[63.44057846 -20.67745590]
[51.16009903 -12.00933552]
[57.78859711 1.44662964]
[73.90567780 6.14745331]
[81.81963348 21.33473015]
[76.22339630 37.87617874]
[83.13039398 51.19133377]
[90.03739929 64.50649261]
[96.94439697 77.82164764]
[106.12726593 76.82080078]
[115.54705048 79.70835876]
[123.53900146 86.47003174]
[128.50891113 96.37913513]
[141.28627014 88.52170563]
[154.06362915 80.66428375]
[166.84098816 72.80685425]
[177.16589355 59.35945511]
[192.94598389 65.55825043]
[191.35780334 82.43764496]
[174.69841003 85.58421326]
[161.92105103 93.44164276]
[149.14369202 101.29906464]
[136.36633301 109.15649414]
[151.34657288 108.38674164]
[165.59455872 103.69686127]
[180.56983948 104.55762482]
[194.18661499 110.84915924]
[204.54829407 121.69514465]
[210.21168518 135.58493042]
[210.38795471 150.58389282]
[205.05255127 164.60293579]
[194.94860840 175.68943787]
[181.48345947 182.29924011]
[166.53253174 183.51168823]
[152.17826843 179.15794373]
[140.41996765 169.84437561]
[132.89537048 156.86824036]
[130.65245056 142.03849792]
[124.58020020 128.32252502]
[123.33332062 143.27061462]
[122.08644867 158.21870422]
[120.83956909 173.16679382]
[137.19079590 180.95330811]
[149.32402039 194.35333252]
[155.43106079 211.33177185]
[154.61627197 229.32308960]
[147.02790833 245.61909485]
[133.83193970 257.77648926]
[117.03290558 263.98327637]
[117.03290558 278.98327637]
[117.03290558 293.98327637]
[117.03290558 308.98327637]
[117.03290558 323.98327637]
[117.03290558 338.98327637]
[117.03290558 353.98327637]
[117.03290558 368.98327637]
[117.03290558 383.98327637]
[117.03290558 398.98327637]
[131.57278442 403.04458618]
[144.47717285 410.87908936]
[154.78845215 421.90542603]
[161.74147034 435.30535889]
[164.82028198 450.08450317]
[163.79638672 465.14620972]
[158.74578857 479.37271118]
[150.04325867 491.70837402]
[138.33459473 501.23779297]
[124.48866272 507.25381470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 124]
[32 123]
[33 122]
[34 121]
[37 91]
[38 90]
[39 89]
[40 88]
[44 85]
[45 84]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
