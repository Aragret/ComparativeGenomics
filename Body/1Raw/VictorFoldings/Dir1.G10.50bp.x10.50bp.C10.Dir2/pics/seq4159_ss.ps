%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUUCCUAGGGGGGGGGGGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUxxxxxxxxxxCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUCCCCCCCCCCAAUCUCCCUA\
) } def
/len { sequence length } bind def

/coor [
[72.83371735 372.47656250]
[58.98777771 366.46054077]
[47.27911758 356.93112183]
[38.57659149 344.59545898]
[33.52598953 330.36892700]
[32.50209808 315.30725098]
[35.58089828 300.52810669]
[42.53392029 287.12817383]
[52.84520340 276.10183716]
[65.74958038 268.26733398]
[80.28947449 264.20602417]
[80.28947449 249.20602417]
[80.28947449 234.20602417]
[80.28947449 219.20602417]
[80.28947449 204.20602417]
[80.28947449 189.20602417]
[80.28947449 174.20602417]
[80.28947449 159.20602417]
[80.28947449 144.20602417]
[80.28947449 129.20602417]
[74.08406067 115.54977417]
[62.78506088 105.68405151]
[51.48605347 95.81832886]
[38.70869827 87.96090698]
[24.80614090 82.32894897]
[10.90358543 76.69699097]
[-2.99897099 71.06503296]
[-18.69455910 73.05478668]
[-27.58559036 61.10493851]
[-41.48814392 55.47298431]
[-55.39070129 49.84102631]
[-69.29325867 44.20907211]
[-83.19581604 38.57711411]
[-91.71385193 50.99714279]
[-102.70298767 61.29534149]
[-115.64924622 68.99004364]
[-129.94709778 73.72135925]
[-144.92782593 75.26799011]
[-159.89073181 73.55760193]
[-174.13598633 68.67018890]
[-186.99731445 60.83434296]
[-197.87315369 50.41656876]
[-206.25483704 37.90411377]
[-211.75033569 23.88221741]
[-214.10260010 9.00670433]
[-213.20162964 -6.02666903]
[-209.08956909 -20.51476479]
[-201.95872498 -33.77994919]
[-192.14262390 -45.20178604]
[-180.10040283 -54.24605179]
[-166.39526367 -60.48973465]
[-151.66825867 -63.64080429]
[-136.60816956 -63.55187607]
[-121.91940308 -60.22711563]
[-108.28896332 -53.82202530]
[-96.35437775 -44.63617706]
[-86.67385101 -33.09922028]
[-79.70014954 -19.75075150]
[-75.75946045 -5.21510506]
[-75.03607941 9.82785988]
[-77.56385803 24.67455673]
[-63.66130066 30.30651474]
[-49.75874329 35.93847275]
[-35.85618973 41.57042694]
[-21.95363235 47.20238495]
[-7.25244951 44.80979538]
[2.63298583 57.16247940]
[16.53554153 62.79443359]
[30.43809700 68.42639160]
[44.34065247 74.05834961]
[35.63550949 61.84276581]
[31.54075241 47.41248703]
[32.53247833 32.44530487]
[38.49538040 18.68144798]
[48.73615265 7.72122192]
[62.06411362 0.83896577]
[76.92963409 -1.16512632]
[91.60430908 1.94195938]
[104.38191986 9.79896450]
[113.77684021 21.49236298]
[118.69671631 35.66257095]
[118.56952667 50.66203308]
[113.41004944 64.74677277]
[103.81819153 76.27916718]
[90.90917206 83.91835785]
[76.18391418 86.77613831]
[61.35177612 84.51932526]
[72.65077972 94.38504791]
[83.94978333 104.25077057]
[81.58695221 83.30899048]
[105.30187225 67.32660675]
[117.38185883 58.43425369]
[129.46185303 49.54190445]
[141.54183960 40.64955521]
[142.35464478 25.03311157]
[153.05310059 13.62798595]
[168.58573914 11.81933212]
[181.61851501 20.46113968]
[185.99774170 35.47301483]
[179.65570068 49.76680374]
[165.58689880 56.59342194]
[150.43418884 52.72954559]
[138.35420227 61.62189484]
[126.27421570 70.51424408]
[114.19422150 79.40659332]
[118.35211182 93.81880951]
[133.31236267 94.91011810]
[139.78382874 81.18115234]
[150.78045654 70.71986389]
[164.81504822 64.94106293]
[179.98954773 64.62628174]
[194.25172424 69.81809235]
[205.67272949 79.81434631]
[212.70796204 93.26313782]
[214.40597534 108.34561157]
[210.53712463 123.02200317]
[201.62464905 135.30744934]
[188.87387085 143.54043579]
[174.00923157 146.60752869]
[159.04106140 144.09391785]
[145.99366760 136.33955383]
[136.63162231 124.39315033]
[132.22105408 109.87036896]
[117.26080322 108.77906036]
[111.76796722 113.88579559]
[126.10595703 118.29283142]
[129.45843506 132.91339111]
[118.47296143 143.12707520]
[104.13488770 138.72030640]
[100.78230286 124.09928131]
[95.28947449 129.20602417]
[95.28947449 144.20602417]
[95.28947449 159.20602417]
[95.28947449 174.20602417]
[95.28947449 189.20602417]
[95.28947449 204.20602417]
[95.28947449 219.20602417]
[95.28947449 234.20602417]
[95.28947449 249.20602417]
[95.28947449 264.20602417]
[109.82936096 268.26733398]
[122.73374176 276.10183716]
[133.04502869 287.12817383]
[139.99804688 300.52810669]
[143.07684326 315.30725098]
[142.05294800 330.36892700]
[137.00234985 344.59545898]
[128.29981995 356.93112183]
[116.59116364 366.46054077]
[102.74522400 372.47656250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 89]
[22 88]
[23 87]
[24 70]
[25 69]
[26 68]
[27 67]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[91 105]
[92 104]
[93 103]
[94 102]
[106 124]
[107 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
