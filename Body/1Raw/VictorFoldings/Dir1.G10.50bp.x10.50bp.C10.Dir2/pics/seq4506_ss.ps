%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCCCCUGGGGGGGGGGUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUxxxxxxxxxxAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCCCCCCCCCCCUCAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[39.14248657 487.61651611]
[24.65279579 483.40802002]
[11.74656487 475.59191895]
[1.30376434 464.70108032]
[-5.96359968 451.47805786]
[-9.56002617 436.82446289]
[-9.24030399 421.73937988]
[-5.02623367 407.25131226]
[2.79486322 394.34808350]
[13.68973160 383.90948486]
[26.91554070 376.64724731]
[41.57053375 373.05645752]
[41.88258743 358.05972290]
[42.19464493 343.06295776]
[42.50670242 328.06622314]
[42.81875610 313.06945801]
[43.13081360 298.07269287]
[43.44287109 283.07595825]
[43.75492477 268.07919312]
[44.06698227 253.08244324]
[33.56949234 263.79705811]
[18.80653572 266.45318604]
[5.23272896 260.06948853]
[-2.13667583 247.00456238]
[-0.57883012 232.08567810]
[9.33067322 220.82505798]
[23.93046951 217.38325500]
[37.82622528 223.03196716]
[45.88351059 235.68325806]
[48.67583466 220.94544983]
[51.46815872 206.20765686]
[49.52828217 201.77906799]
[50.39584351 196.08006287]
[54.69539642 190.92047119]
[58.09837341 176.31158447]
[61.50135040 161.70268250]
[64.90432739 147.09379578]
[68.30730438 132.48489380]
[57.49378967 142.88046265]
[43.69451904 148.76095581]
[28.70650864 149.36058044]
[14.48157406 144.60124207]
[2.87215996 135.10275269]
[-4.60989571 122.10202026]
[-6.99024105 107.29209137]
[-3.95889568 92.60158539]
[4.08938360 79.94358063]
[16.10650826 70.96645355]
[30.52754593 66.83927155]
[45.47451401 68.09947968]
[59.00094223 74.58297729]
[69.34535217 85.44544220]
[75.16062927 99.27232361]
[75.68975067 114.26123810]
[83.41384125 101.40283966]
[83.56987762 86.40364838]
[76.11496735 73.38733673]
[68.66005707 60.37102890]
[61.20514297 47.35472107]
[53.75023270 34.33840942]
[38.70759583 28.76180267]
[33.82568741 13.47957230]
[42.84949493 0.21493994]
[58.85671997 -0.85660464]
[69.56799316 11.08693600]
[66.76654053 26.88349915]
[74.22145081 39.89980698]
[81.67636108 52.91611862]
[89.13127136 65.93242645]
[96.58618164 78.94873810]
[104.08618164 78.94873810]
[103.78423309 63.95177841]
[103.48229218 48.95481491]
[96.38667297 35.73921204]
[104.08622742 22.86610794]
[119.08622742 22.86615562]
[126.78570557 35.73930740]
[119.69007874 48.95481491]
[119.38813019 63.95177841]
[119.08618164 78.94873810]
[126.58618164 78.94873810]
[134.04109192 65.93242645]
[141.49600220 52.91611862]
[134.28819275 39.27606583]
[135.62173462 23.90644646]
[145.07110596 11.71164894]
[159.62103271 6.58299065]
[174.62869263 10.15700722]
[185.30520630 21.29324150]
[188.24371338 36.43816376]
[182.50657654 50.75908279]
[169.92446899 59.68624496]
[154.51231384 60.37102890]
[147.05740356 73.38733673]
[139.60249329 86.40364838]
[148.62002563 98.39048004]
[163.19273376 94.83571625]
[177.76542664 91.28096008]
[192.33813477 87.72619629]
[206.91084290 84.17143250]
[209.19952393 69.14377594]
[217.06909180 56.13846588]
[229.31951904 47.13870621]
[244.08267212 43.51690292]
[259.10729980 45.82535172]
[272.10226440 53.71203232]
[281.08590698 65.97428131]
[284.68826294 80.74219513]
[282.36007690 95.76377869]
[274.45629883 108.74833679]
[262.18225098 117.71583557]
[247.40960693 121.29878998]
[232.39109802 118.95082092]
[219.41694641 111.02997589]
[210.46559143 98.74413300]
[195.89289856 102.29889679]
[181.32019043 105.85366058]
[166.74748230 109.40842438]
[152.17478943 112.96318054]
[126.83022308 128.47912598]
[104.47935486 124.07983398]
[96.27223969 109.12692261]
[88.54815674 121.98532104]
[82.91619873 135.88787842]
[79.51322174 150.49676514]
[76.11024475 165.10566711]
[72.70726776 179.71455383]
[69.30429077 194.32345581]
[66.20596313 208.99996948]
[63.41364288 223.73777771]
[60.62131882 238.47558594]
[59.06373596 253.39450073]
[58.75167847 268.39126587]
[58.43962479 283.38800049]
[58.12756729 298.38476562]
[57.81550980 313.38150024]
[57.50345612 328.37826538]
[57.19139862 343.37503052]
[56.87934113 358.37176514]
[56.56728745 373.36853027]
[71.06021881 377.56582642]
[83.97248077 385.37194824]
[94.42369080 396.25473022]
[101.70126343 409.47210693]
[105.30900574 424.12292480]
[105.00093079 439.20828247]
[100.79804993 453.69958496]
[92.98692322 466.60885620]
[82.10012054 477.05584717]
[68.87992096 484.32830811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[29 131]
[30 130]
[31 129]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[54 123]
[55 122]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[81 95]
[82 94]
[83 93]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
