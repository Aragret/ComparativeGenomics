%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCAAUAGGGGGGGGGGGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUxxxxxxxxxxCUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUACCCCCCCCCCUCAACCAUUA\
) } def
/len { sequence length } bind def

/coor [
[86.41976166 389.99841309]
[71.93007660 385.78991699]
[59.02384186 377.97381592]
[48.58104324 367.08297729]
[41.31367874 353.85998535]
[37.71725082 339.20635986]
[38.03697205 324.12127686]
[42.25104523 309.63320923]
[50.07213974 296.72998047]
[60.96701050 286.29141235]
[74.19281769 279.02914429]
[88.84780884 275.43838501]
[89.15986633 260.44161987]
[89.47192383 245.44487000]
[89.78398132 230.44810486]
[90.09603882 215.45135498]
[90.40808868 200.45460510]
[90.72014618 185.45785522]
[91.03220367 170.46109009]
[91.34426117 155.46434021]
[91.65631866 140.46759033]
[84.51506805 138.30743408]
[77.87870026 134.89830017]
[71.96358490 130.35131836]
[66.96257782 124.81474304]
[63.03873825 118.46910858]
[48.62652206 122.62699127]
[34.21430588 126.78488159]
[25.23168945 140.07743835]
[9.22786236 141.19863892]
[-1.52040803 129.28837585]
[1.23203087 113.48320007]
[15.37374401 105.90747833]
[30.05641937 112.37266541]
[44.46863556 108.21477509]
[58.88085175 104.05689240]
[59.57498550 91.45243073]
[64.04239655 79.64580536]
[71.86608887 69.73903656]
[82.31580353 62.65683365]
[94.41616821 59.06024551]
[107.03772736 59.28497696]
[112.23313904 45.21345520]
[117.42855835 31.14193726]
[122.62397003 17.07041740]
[111.48783875 -1.70391607]
[119.61596680 -23.57126808]
[143.15222168 -31.48177910]
[144.70980835 -46.40069199]
[146.26737976 -61.31960297]
[147.82496643 -76.23851776]
[139.92318726 -92.83796692]
[150.69998169 -106.65319824]
[151.94685364 -121.60128784]
[153.19374084 -136.54937744]
[154.44061279 -151.49746704]
[154.28457642 -166.49664307]
[152.72698975 -181.41555786]
[151.16941833 -196.33447266]
[149.61183167 -211.25338745]
[134.66574097 -213.17979431]
[120.56699371 -218.50163269]
[108.07592010 -226.93193054]
[97.86614990 -238.01603699]
[90.48828125 -251.15618896]
[86.34019470 -265.64376831]
[85.64559174 -280.69747925]
[88.44192505 -295.50549316]
[94.57839966 -309.26922607]
[103.72408295 -321.24642944]
[115.38575745 -330.79116821]
[128.93452454 -337.38873291]
[143.63970947 -340.68328857]
[158.70828247 -340.49719238]
[173.32763672 -336.84048462]
[186.70933533 -329.91033936]
[198.13172913 -320.08053589]
[206.97883606 -307.88113403]
[212.77354431 -293.97003174]
[215.20333862 -279.09750366]
[214.13717651 -264.06552124]
[209.63256836 -249.68479919]
[201.93244934 -236.73085022]
[191.45207214 -225.90226746]
[178.75662231 -217.78302002]
[164.53074646 -212.81097412]
[166.08831787 -197.89205933]
[167.64590454 -182.97314453]
[169.20349121 -168.05422974]
[177.73814392 -180.38952637]
[191.52928162 -186.28906250]
[206.34457397 -183.94233704]
[217.63740540 -174.06953430]
[221.94212341 -159.70048523]
[217.93768311 -145.24488831]
[206.85301208 -135.13896179]
[192.08981323 -132.48408508]
[178.17877197 -138.09501648]
[169.38870239 -150.25057983]
[168.14181519 -135.30250549]
[166.89494324 -120.35441589]
[165.64807129 -105.40632629]
[173.23544312 -95.93325043]
[172.27731323 -83.43121338]
[162.74388123 -74.68093109]
[161.18629456 -59.76202393]
[159.62872314 -44.84310913]
[158.07113647 -29.92419815]
[167.93685913 -18.62519264]
[182.92955017 -18.15715218]
[197.92225647 -17.68910980]
[210.55229187 -27.58160210]
[226.12734985 -23.73486137]
[232.69955444 -9.09977722]
[225.22727966 5.09686613]
[209.44261169 7.96461916]
[197.45420837 -2.69641304]
[182.46151733 -3.16445518]
[167.46881104 -3.63249731]
[164.28677368 8.00921345]
[156.97354126 16.92280960]
[147.13926697 21.83116531]
[136.69549561 22.26583290]
[131.50007629 36.33735275]
[126.30465698 50.40887070]
[121.10924530 64.48039246]
[135.31463623 78.54959869]
[141.25141907 97.64122772]
[137.52954102 117.28514099]
[125.02046967 132.88189697]
[106.65306854 140.77964783]
[106.34101105 155.77639771]
[106.02896118 170.77314758]
[105.71690369 185.76991272]
[105.40484619 200.76666260]
[105.09278870 215.76341248]
[104.78073120 230.76016235]
[104.46867371 245.75692749]
[104.15662384 260.75366211]
[103.84456635 275.75042725]
[118.33750153 279.94772339]
[131.24975586 287.75384521]
[141.70097351 298.63662720]
[148.97854614 311.85400391]
[152.58628845 326.50485229]
[152.27821350 341.59017944]
[148.07533264 356.08148193]
[140.26420593 368.99075317]
[129.37739563 379.43774414]
[116.15719604 386.71020508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 36]
[27 35]
[28 34]
[42 126]
[43 125]
[44 124]
[45 123]
[48 108]
[49 107]
[50 106]
[51 105]
[53 102]
[54 101]
[55 100]
[56 99]
[57 89]
[58 88]
[59 87]
[60 86]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
