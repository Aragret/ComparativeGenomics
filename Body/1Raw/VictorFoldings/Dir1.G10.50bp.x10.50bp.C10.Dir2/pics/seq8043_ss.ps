%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUACACUAGGGGGGGGGGUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCxxxxxxxxxxCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCCCCCCCCCCCUUACACAA\
) } def
/len { sequence length } bind def

/coor [
[90.80229950 381.66915894]
[77.58209991 374.39669800]
[66.69529724 363.94967651]
[58.88416672 351.04043579]
[54.68128586 336.54910278]
[54.37321472 321.46377563]
[57.98095322 306.81295776]
[65.25852966 293.59555054]
[75.70973206 282.71279907]
[88.62199402 274.90664673]
[103.11493683 270.70935059]
[102.80287933 255.71261597]
[102.49082184 240.71585083]
[102.17876434 225.71910095]
[101.86670685 210.72235107]
[101.55464935 195.72560120]
[101.24259949 180.72883606]
[100.93054199 165.73208618]
[100.61848450 150.73533630]
[100.30642700 135.73858643]
[85.45964050 131.52532959]
[74.18424988 121.65263367]
[68.40348816 108.31047058]
[68.88330841 94.22409058]
[75.15071869 82.09966278]
[85.65708923 74.10440063]
[81.95092773 59.56946945]
[67.17764282 62.20618057]
[52.25128937 63.75747681]
[37.25152206 64.21507263]
[22.25836945 63.57652664]
[7.35182381 61.84525299]
[-7.38857889 59.03047943]
[-21.88419151 55.14723206]
[-36.05767441 50.21622849]
[-49.83340073 44.26377487]
[-63.13787842 37.32162857]
[-75.90011597 29.42683792]
[-88.05201721 20.62151718]
[-99.52874756 10.95265102]
[-110.26908112 0.47182703]
[-120.21570587 -10.76503468]
[-129.31555176 -22.69798088]
[-137.52006531 -35.26334381]
[-144.78547668 -48.39407730]
[-151.07302856 -62.02012634]
[-156.34915161 -76.06878662]
[-160.58570862 -90.46510315]
[-163.76010132 -105.13227081]
[-165.85537720 -119.99201965]
[-166.86036682 -134.96507263]
[-166.76971436 -149.97154236]
[-165.58389282 -164.93136597]
[-163.30921936 -179.76472473]
[-159.95785522 -194.39245605]
[-155.54766846 -208.73654175]
[-150.10220337 -222.72042847]
[-143.65048218 -236.26951599]
[-136.22695923 -249.31150818]
[-127.87122345 -261.77682495]
[-118.62786865 -273.59896851]
[-108.54620361 -284.71481323]
[-97.68002319 -295.06512451]
[-86.08731079 -304.59460449]
[-73.82991028 -313.25247192]
[-60.97321701 -320.99249268]
[-47.58583832 -327.77337646]
[-33.73919678 -333.55895996]
[-19.50717354 -338.31835938]
[-4.96570158 -342.02621460]
[9.80763340 -344.66265869]
[24.73400879 -346.21371460]
[39.73378372 -346.67108154]
[54.72692490 -346.03228760]
[69.63344574 -344.30075073]
[84.37380219 -341.48574829]
[98.86934662 -337.60226440]
[113.04274750 -332.67102051]
[126.81838226 -326.71835327]
[140.12274170 -319.77597046]
[152.88484192 -311.88098145]
[165.03660583 -303.07546997]
[176.51318359 -293.40640259]
[187.25334167 -282.92541504]
[197.19978333 -271.68838501]
[206.29943848 -259.75527954]
[214.50373840 -247.18978882]
[221.76893616 -234.05892944]
[228.05625916 -220.43278503]
[233.33215332 -206.38403320]
[237.56848145 -191.98764038]
[240.74261475 -177.32043457]
[242.83766174 -162.46064758]
[243.84240723 -147.48756409]
[243.75149536 -132.48109436]
[242.56542969 -117.52130127]
[240.29052734 -102.68798828]
[236.93891907 -88.06030273]
[232.52850342 -73.71629333]
[227.08279419 -59.73249054]
[220.63085938 -46.18350983]
[213.20710754 -33.14163589]
[204.85116577 -20.67645645]
[195.60762024 -8.85447788]
[185.52577209 2.26122284]
[174.65942383 12.61133862]
[163.06655884 22.14064598]
[150.80900574 30.79830170]
[137.95219421 38.53811264]
[124.56470490 45.31878662]
[110.71797180 51.10413742]
[96.48587036 55.86330795]
[100.19202423 70.39823914]
[119.20707703 74.84651184]
[132.44630432 90.91559601]
[133.28671265 113.01287842]
[147.18927002 118.64483643]
[161.09182739 124.27679443]
[174.99438477 129.90875244]
[188.89692688 135.54071045]
[205.05493164 132.73875427]
[215.35130310 145.50263977]
[209.19401550 160.70196533]
[192.91716003 162.70098877]
[183.26498413 149.44326782]
[169.36242676 143.81130981]
[155.45986938 138.17935181]
[141.55731201 132.54739380]
[127.65475464 126.91543579]
[115.30318451 135.42652893]
[115.61523438 150.42327881]
[115.92729187 165.42002869]
[116.23934937 180.41677856]
[116.55140686 195.41354370]
[116.86346436 210.41029358]
[117.17552185 225.40704346]
[117.48757172 240.40379333]
[117.79962921 255.40055847]
[118.11168671 270.39730835]
[132.76667786 273.98806763]
[145.99249268 281.25033569]
[156.88735962 291.68893433]
[164.70845032 304.59213257]
[168.92253113 319.08020020]
[169.24224854 334.16531372]
[165.64581299 348.81890869]
[158.37844849 362.04190063]
[147.93565369 372.93273926]
[135.02941895 380.74887085]
[120.53973389 384.95733643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 113]
[27 112]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
