%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAACUUCGGGGGGGGGGCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACxxxxxxxxxxAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUCCCCCCCCCCAAUAAACUUC\
) } def
/len { sequence length } bind def

/coor [
[77.40976715 424.29614258]
[63.56383133 418.28012085]
[51.85516739 408.75070190]
[43.15264511 396.41503906]
[38.10204315 382.18850708]
[37.07815170 367.12683105]
[40.15695190 352.34765625]
[47.10997391 338.94772339]
[57.42125702 327.92141724]
[70.32563782 320.08688354]
[84.86552429 316.02557373]
[84.86552429 301.02557373]
[84.86552429 286.02557373]
[84.86552429 271.02557373]
[84.86552429 256.02557373]
[84.86552429 241.02558899]
[84.86552429 226.02558899]
[84.86552429 211.02558899]
[84.86552429 196.02558899]
[84.86552429 181.02558899]
[72.36505127 189.31642151]
[58.02508163 184.91581726]
[52.32698441 171.04023743]
[59.43559647 157.83161926]
[74.15510559 154.94439697]
[85.72645569 164.48829651]
[87.28403473 149.56938171]
[88.84162140 134.65046692]
[90.39920044 119.73155212]
[78.82619476 109.64563751]
[76.25450134 93.60589600]
[85.00002289 78.86698151]
[101.99289703 72.83367920]
[98.28673553 58.29874420]
[94.58057404 43.76380920]
[90.87441254 29.22887230]
[81.15053558 30.07502365]
[70.70964813 26.24037170]
[61.81741333 17.44619942]
[56.77854538 4.48635912]
[48.78862762 -8.20857048]
[40.79871368 -20.90349960]
[32.80879593 -33.59843063]
[23.42163467 -45.29805374]
[12.76000881 -55.84934235]
[4.40178680 -59.69537735]
[1.98920000 -66.73278046]
[-8.45061207 -77.50359344]
[-18.89042473 -88.27439880]
[-36.69083023 -92.87064362]
[-40.36652374 -110.00216675]
[-51.02815247 -120.55345917]
[-61.68977737 -131.10475159]
[-72.35140228 -141.65603638]
[-88.34231567 -145.29237366]
[-92.92945862 -161.03689575]
[-81.39398193 -172.69299316]
[-65.60259247 -168.26988220]
[-61.80011368 -152.31767273]
[-51.13848877 -141.76637268]
[-40.47686005 -131.21508789]
[-29.81523514 -120.66379547]
[-17.68106079 -120.40090942]
[-8.70968151 -111.64115143]
[-8.11961651 -98.71421051]
[2.32019615 -87.94340515]
[12.76000881 -77.17259979]
[23.31129837 -66.51097107]
[33.97292328 -55.95967865]
[31.79421234 -70.80061340]
[36.64055252 -84.99613953]
[47.43998337 -95.40634155]
[61.80376434 -99.72857666]
[76.55476379 -97.00681305]
[88.43019867 -87.84307861]
[94.80332184 -74.26429749]
[94.26447296 -59.27397919]
[86.93282318 -46.18784332]
[74.43008423 -37.90041733]
[59.52172852 -36.24481201]
[45.50372696 -41.58834457]
[53.49364090 -28.89341545]
[61.48355865 -16.19848633]
[69.47347260 -3.50355721]
[76.91511536 -2.56975055]
[85.97412872 -14.52526093]
[91.79839325 -0.70213741]
[99.24003601 0.23166913]
[110.11885834 -10.09553623]
[120.99768829 -20.42274094]
[131.87651062 -30.74994659]
[130.73863220 -46.34607315]
[139.93382263 -58.99449158]
[155.12039185 -62.72300339]
[169.12773132 -55.77111816]
[175.34197998 -41.42130280]
[170.82896423 -26.44910431]
[157.71958923 -17.92393684]
[142.20372009 -19.87112045]
[131.32489014 -9.54391575]
[120.44606781 0.78328943]
[109.56723785 11.11049461]
[105.40935516 25.52271080]
[109.11551666 40.05764771]
[112.82167816 54.59258270]
[116.52783966 69.12751770]
[127.92885590 78.87516785]
[142.86315918 80.27747345]
[157.79747009 81.67977905]
[172.73178101 83.08208466]
[187.66609192 84.48438263]
[202.60038757 85.88668823]
[214.61010742 75.61331177]
[230.35992432 76.92436218]
[240.50575256 89.04201508]
[239.02825928 104.77709198]
[226.80401611 114.79424286]
[211.08543396 113.15046692]
[201.19808960 100.82099915]
[186.26377869 99.41869354]
[171.32948303 98.01638794]
[156.39517212 96.61408234]
[141.46086121 95.21178436]
[126.52655029 93.80947876]
[124.41643524 107.26373291]
[116.38861084 117.13224792]
[105.31811523 121.28913116]
[103.76052856 136.20803833]
[102.20294952 151.12695312]
[100.64537048 166.04586792]
[99.86552429 181.02558899]
[99.86552429 196.02558899]
[99.86552429 211.02558899]
[99.86552429 226.02558899]
[99.86552429 241.02558899]
[99.86552429 256.02557373]
[99.86552429 271.02557373]
[99.86552429 286.02557373]
[99.86552429 301.02557373]
[99.86552429 316.02557373]
[114.40541077 320.08688354]
[127.30979156 327.92141724]
[137.62107849 338.94772339]
[144.57409668 352.34765625]
[147.65289307 367.12683105]
[146.62901306 382.18850708]
[141.57839966 396.41503906]
[132.87588501 408.75070190]
[121.16722107 418.28012085]
[107.32128143 424.29614258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 130]
[27 129]
[28 128]
[29 127]
[33 106]
[34 105]
[35 104]
[36 103]
[40 84]
[41 83]
[42 82]
[43 81]
[44 69]
[45 68]
[47 67]
[48 66]
[49 65]
[51 62]
[52 61]
[53 60]
[54 59]
[88 102]
[89 101]
[90 100]
[91 99]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
