%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACAAUUGGGGGGGGGGAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAAxxxxxxxxxxCAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCCCCCCCCCCCAAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[82.63479614 503.68768311]
[68.78885651 497.67166138]
[57.08019638 488.14224243]
[48.37767410 475.80657959]
[43.32707214 461.58004761]
[42.30318069 446.51837158]
[45.38198090 431.73919678]
[52.33499908 418.33929443]
[62.64628601 407.31295776]
[75.55066681 399.47845459]
[90.09055328 395.41711426]
[90.09055328 380.41711426]
[90.09055328 365.41711426]
[90.09055328 350.41711426]
[90.09055328 335.41711426]
[90.09055328 320.41711426]
[90.09055328 305.41711426]
[90.09055328 290.41711426]
[90.09055328 275.41711426]
[90.09055328 260.41711426]
[76.61751556 255.96647644]
[65.16587830 247.55210876]
[56.86784744 235.98942566]
[52.54892349 222.40591431]
[52.64581680 208.13116455]
[57.16231918 194.56674194]
[65.66761780 183.04862976]
[77.33735657 174.71554565]
[91.03354645 170.39648438]
[91.34560394 155.39973450]
[91.65766144 140.40298462]
[91.96971893 125.40622711]
[71.66242218 111.67094421]
[69.31969452 83.89894867]
[91.80952454 62.22746658]
[77.46603394 55.55102158]
[76.30651855 40.70161819]
[67.54031372 28.52978134]
[57.21310425 17.65095520]
[45.51348114 8.26379395]
[33.81385803 -1.12336755]
[27.24561882 -2.52541184]
[23.04326630 -6.47149086]
[21.83349419 -11.15251255]
[10.53448963 -21.01823616]
[-0.76451558 -30.88395882]
[-9.34635925 -34.20116043]
[-12.19320774 -41.07437515]
[-23.28452301 -51.17302322]
[-34.37583923 -61.27167511]
[-48.98455048 -56.53024673]
[-64.00342560 -59.74409866]
[-75.39247131 -70.04872131]
[-80.08808899 -84.67222595]
[-76.82717133 -99.68095398]
[-66.48690033 -111.03764343]
[-51.84875107 -115.68739319]
[-36.85031509 -112.37945557]
[-25.52609634 -102.00363159]
[-20.92224884 -87.35098267]
[-24.27718925 -72.36299133]
[-13.18587399 -62.26433945]
[-2.09455848 -52.16569138]
[9.10120773 -42.18296432]
[20.40021133 -32.31724167]
[31.69921684 -22.45151711]
[43.20101929 -12.82299137]
[54.90064240 -3.43582940]
[66.60026550 5.95133257]
[62.29026031 -8.41612434]
[64.08431244 -23.30845070]
[71.68313599 -36.24127197]
[83.81908417 -45.05710220]
[98.46759796 -48.28526306]
[113.18498230 -45.38722992]
[125.51604462 -36.84645081]
[133.40368652 -24.08772659]
[135.53207397 -9.23949623]
[131.54615784 5.22122240]
[122.11084747 16.88205719]
[108.80018616 23.79771805]
[93.83469391 24.81451797]
[79.71215057 19.76357460]
[88.47835541 31.93541145]
[102.19482422 37.74124527]
[103.98136139 53.46125793]
[118.92944336 54.70813370]
[129.59107971 44.15684509]
[140.25270081 33.60555267]
[136.27719116 18.77009392]
[140.26751709 3.93861270]
[151.15031433 -6.89929485]
[165.99816895 -10.82828617]
[180.81706238 -6.79148388]
[191.62080383 4.12523413]
[195.50323486 18.98532486]
[191.42001343 33.79150009]
[180.46948242 44.56097031]
[165.59729004 48.39680099]
[150.80398560 44.26717758]
[140.14236450 54.81847000]
[129.48074341 65.36975861]
[136.10923767 78.82572174]
[150.97227478 76.80339050]
[165.83532715 74.78105927]
[180.69837952 72.75872040]
[195.56141663 70.73638916]
[206.37799072 58.88812637]
[222.37510681 60.10131836]
[231.28115845 73.44530487]
[226.26416016 88.68372345]
[211.17276001 94.12696075]
[197.58375549 85.59943390]
[182.72070312 87.62176514]
[167.85766602 89.64410400]
[152.99461365 91.66643524]
[138.13157654 93.68877411]
[132.82287598 111.09881592]
[120.99359131 122.32707977]
[106.96646881 125.71828461]
[106.65441132 140.71504211]
[106.34236145 155.71179199]
[106.03030396 170.70854187]
[120.88944244 176.37313843]
[132.89797974 186.75706482]
[140.62197876 200.59619141]
[143.14739990 216.21527100]
[140.18824768 231.73074341]
[132.11877441 245.27790833]
[119.92633820 255.23493958]
[105.09055328 260.41711426]
[105.09055328 275.41711426]
[105.09055328 290.41711426]
[105.09055328 305.41711426]
[105.09055328 320.41711426]
[105.09055328 335.41711426]
[105.09055328 350.41711426]
[105.09055328 365.41711426]
[105.09055328 380.41711426]
[105.09055328 395.41711426]
[119.63043976 399.47845459]
[132.53482056 407.31295776]
[142.84609985 418.33929443]
[149.79913330 431.73919678]
[152.87792969 446.51837158]
[151.85403442 461.58004761]
[146.80343628 475.80657959]
[138.10090637 488.14224243]
[126.39225006 497.67166138]
[112.54631042 503.68768311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 123]
[30 122]
[31 121]
[32 120]
[35 86]
[37 84]
[38 83]
[39 69]
[40 68]
[41 67]
[44 66]
[45 65]
[46 64]
[48 63]
[49 62]
[50 61]
[87 102]
[88 101]
[89 100]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
