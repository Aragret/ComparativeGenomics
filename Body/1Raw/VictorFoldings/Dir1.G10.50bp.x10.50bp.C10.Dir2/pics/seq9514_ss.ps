%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUACAAAAGGGGGGGGGGAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUxxxxxxxxxxUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCCCCCCCCCCCUGACUAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[80.49746704 514.58258057]
[66.47551727 509.02954102]
[54.27556229 500.16320801]
[44.66448975 488.54092407]
[38.24646759 474.89321899]
[35.42493057 460.07803345]
[36.37724304 445.02664185]
[41.04354858 430.68521118]
[49.13051605 417.95526123]
[60.12979126 407.63699341]
[73.34995270 400.37902832]
[87.95996094 396.63757324]
[87.95996094 381.63757324]
[87.95996094 366.63757324]
[87.95996094 351.63757324]
[87.95996094 336.63757324]
[87.95996094 321.63757324]
[87.95996094 306.63757324]
[87.95996094 291.63757324]
[87.95996094 276.63757324]
[87.95996094 261.63757324]
[84.79540253 254.90722656]
[88.11711884 246.33039856]
[88.42510223 231.33355713]
[85.39939117 224.53964233]
[88.89650726 216.03282166]
[89.51233673 201.04547119]
[90.12815857 186.05812073]
[90.74398804 171.07075500]
[81.76351166 156.02430725]
[91.66602325 140.53330994]
[91.97399902 125.53647614]
[79.07966614 124.66143036]
[66.17059326 117.11196136]
[56.62185669 103.01154327]
[41.66057587 101.93447113]
[26.69929504 100.85740662]
[13.67757988 110.22834015]
[-1.72823632 105.75169373]
[-7.70013046 90.86156464]
[0.34302437 76.98037720]
[16.23120689 74.75659943]
[27.77636528 85.89612579]
[42.73764420 86.97319031]
[57.69892502 88.05026245]
[60.76351547 81.20494843]
[45.84893799 79.60636902]
[42.76044464 64.92777252]
[55.76623535 57.45452499]
[66.89268494 67.51432037]
[69.95727539 60.66901016]
[59.18859482 50.22700119]
[48.41991806 39.78499222]
[37.65123749 29.34298325]
[21.65250206 28.15134239]
[12.72849560 14.81936264]
[17.72495079 -0.42579943]
[32.80901718 -5.88936186]
[46.40948868 2.61985350]
[48.09324646 18.57430458]
[58.86192703 29.01631355]
[69.63060760 39.45832443]
[80.39928436 49.90033340]
[95.33529663 48.51630783]
[104.00190735 36.27335358]
[102.60453796 23.41057587]
[110.12567139 13.38042927]
[122.07403564 11.25939846]
[130.99018860 -0.80303293]
[120.58805847 -12.19365406]
[112.59760284 -25.38305092]
[107.32132721 -39.86841202]
[104.95832825 -55.09792328]
[105.59672546 -70.49179840]
[109.21044159 -85.46434784]
[115.66021729 -99.44625092]
[124.69898987 -111.90624237]
[135.98135376 -122.37123871]
[149.07678223 -130.44435120]
[163.48602295 -135.81991577]
[178.66014099 -138.29507446]
[194.02143860 -137.77738953]
[208.98547363 -134.28840637]
[222.98323059 -127.96260071]
[231.64982605 -140.20555115]
[240.31643677 -152.44850159]
[233.82423401 -166.36779785]
[235.17744446 -181.66696167]
[244.01206970 -194.23059082]
[257.95162964 -200.67915344]
[273.24649048 -199.27798462]
[285.78237915 -190.40402222]
[292.18719482 -176.44430542]
[290.73809814 -161.15393066]
[281.82489014 -148.64591980]
[267.84515381 -142.28488159]
[252.55938721 -143.78190613]
[243.89279175 -131.53894043]
[235.22618103 -119.29598999]
[245.37245178 -108.79135132]
[253.40661621 -96.59023285]
[259.05102539 -83.11148834]
[262.11010742 -68.81819153]
[262.47717285 -54.20166779]
[260.13803101 -39.76468277]
[255.17166138 -26.00407791]
[247.74745178 -13.39372063]
[238.11947632 -2.36815786]
[226.61778259 6.69234371]
[213.63703918 13.47491932]
[199.62307739 17.74490547]
[185.05751038 19.35396385]
[170.44119263 18.24522781]
[156.27702332 14.45531559]
[143.05261230 8.11311817]
[134.13647461 20.17554855]
[133.13182068 37.66941071]
[116.24485779 44.93996048]
[107.57824707 57.18291473]
[133.36717224 82.00333405]
[129.70605469 112.78266907]
[106.97083282 125.84445190]
[106.66285706 140.84129333]
[115.03437805 150.70645142]
[114.43357086 163.22885132]
[105.73133850 171.68658447]
[105.11551666 186.67393494]
[104.49968719 201.66130066]
[103.88386536 216.64865112]
[103.42193604 231.64154053]
[103.11396027 246.63836670]
[102.95996094 261.63757324]
[102.95996094 276.63757324]
[102.95996094 291.63757324]
[102.95996094 306.63757324]
[102.95996094 321.63757324]
[102.95996094 336.63757324]
[102.95996094 351.63757324]
[102.95996094 366.63757324]
[102.95996094 381.63757324]
[102.95996094 396.63757324]
[117.56997681 400.37902832]
[130.79013062 407.63699341]
[141.78941345 417.95526123]
[149.87637329 430.68521118]
[154.54267883 445.02664185]
[155.49499512 460.07803345]
[152.67346191 474.89321899]
[146.25543213 488.54092407]
[136.64436340 500.16320801]
[124.44440460 509.02954102]
[110.42246246 514.58258057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
[26 129]
[27 128]
[28 127]
[29 126]
[31 123]
[32 122]
[35 45]
[36 44]
[37 43]
[51 63]
[52 62]
[53 61]
[54 60]
[64 119]
[65 118]
[68 116]
[69 115]
[84 99]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
