%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUACUACGGGGGGGGGGUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGxxxxxxxxxxUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCCCCCCCCCCCAUCCUAC\
) } def
/len { sequence length } bind def

/coor [
[244.86932373 218.13201904]
[232.66685486 209.40234375]
[220.94630432 200.03559875]
[209.74089050 190.05833435]
[199.08236694 179.49882507]
[189.00094604 168.38702393]
[179.52522278 156.75440979]
[170.68203735 144.63395691]
[162.49645996 132.06004333]
[154.99169922 119.06828308]
[148.18901062 105.69551849]
[142.10771179 91.97965240]
[128.09100342 97.32116699]
[114.07428741 102.66268158]
[105.10076904 113.38497162]
[91.26722717 111.35403442]
[77.25051117 116.69554901]
[63.23379898 122.03705597]
[49.21708679 127.37857056]
[35.20037460 132.72007751]
[21.18366051 138.06159973]
[21.12940788 153.23925781]
[15.59237194 167.37098694]
[5.32139158 178.54557800]
[-8.29446793 185.25175476]
[-23.41377258 186.58256531]
[-37.99176025 182.35803223]
[-50.05688095 173.14947510]
[-57.97742081 160.20230103]
[-60.68219757 145.26748657]
[-57.80540848 130.36485291]
[-49.73611450 117.50985718]
[-37.56562805 108.44102478]
[-22.93989944 104.38485718]
[-7.83694363 105.88990021]
[5.70069027 112.75261688]
[15.84214878 124.04488373]
[29.85886192 118.70336914]
[43.87557602 113.36185455]
[57.89228821 108.02034760]
[71.90900421 102.67883301]
[85.92571259 97.33731842]
[94.89923096 86.61502838]
[108.73277283 88.64596558]
[122.74948883 83.30445099]
[136.76620483 77.96294403]
[132.17707825 63.67843628]
[128.35470581 49.16992950]
[125.30993652 34.47855377]
[123.05139160 19.64594841]
[121.58546448 4.71416092]
[120.91632843 -10.27448273]
[121.04586029 -25.27749634]
[121.97370911 -40.25235367]
[123.69724274 -55.15660095]
[126.21156311 -69.94799805]
[129.50955200 -84.58460999]
[133.58187866 -99.02494812]
[138.41696167 -113.22808838]
[144.00111389 -127.15376282]
[150.31852722 -140.76249695]
[157.35125732 -154.01571655]
[165.07939148 -166.87585449]
[173.48101807 -179.30645752]
[182.53231812 -191.27227783]
[192.20764160 -202.73942566]
[202.47956848 -213.67536926]
[213.31895447 -224.04911804]
[224.69511414 -233.83126831]
[236.57575989 -242.99409485]
[248.92724609 -251.51161194]
[261.71453857 -259.35968018]
[274.90139771 -266.51605225]
[288.45046997 -272.96044922]
[302.32330322 -278.67462158]
[316.48059082 -283.64233398]
[330.88220215 -287.84951782]
[345.48733521 -291.28427124]
[360.25457764 -293.93682861]
[375.14205933 -295.79965210]
[390.10757446 -296.86752319]
[405.10873413 -297.13739014]
[420.10296631 -296.60845947]
[435.04782104 -295.28225708]
[449.90087891 -293.16250610]
[464.62011719 -290.25527954]
[479.16372681 -286.56878662]
[493.49053955 -282.11346436]
[507.55990601 -276.90194702]
[521.33197021 -270.94900513]
[534.76770020 -264.27151489]
[547.82897949 -256.88842773]
[560.47882080 -248.82064819]
[572.68133545 -240.09104919]
[584.40191650 -230.72438049]
[595.60742188 -220.74719238]
[606.26599121 -210.18775940]
[616.34747314 -199.07601929]
[625.82330322 -187.44346619]
[634.66656494 -175.32307434]
[642.85223389 -162.74920654]
[650.35705566 -149.75749207]
[657.15979004 -136.38478088]
[663.24121094 -122.66894531]
[668.58398438 -108.64889526]
[673.17303467 -94.36435699]
[676.99530029 -79.85582733]
[680.03997803 -65.16443634]
[682.29840088 -50.33181381]
[683.76428223 -35.40001678]
[684.43328857 -20.41137123]
[684.30364990 -5.40835762]
[683.37573242 9.56649208]
[681.65209961 24.47072983]
[679.13769531 39.26210785]
[675.83959961 53.89870071]
[671.76721191 68.33901978]
[666.93200684 82.54212189]
[661.34777832 96.46775818]
[655.03027344 110.07645416]
[647.99743652 123.32962799]
[640.26922607 136.18971252]
[631.86755371 148.62026978]
[622.81616211 160.58604431]
[613.14074707 172.05311584]
[602.86877441 182.98899841]
[592.02929688 193.36268616]
[580.65307617 203.14476013]
[568.77239990 212.30749512]
[556.42083740 220.82493591]
[543.63348389 228.67292786]
[530.44659424 235.82922363]
[516.89752197 242.27354431]
[503.02462769 247.98760986]
[488.86730957 252.95524597]
[474.46563721 257.16235352]
[459.86050415 260.59698486]
[445.09326172 263.24945068]
[430.20574951 265.11221313]
[415.24023438 266.17996216]
[400.23907471 266.44973755]
[385.24484253 265.92071533]
[370.30001831 264.59439087]
[355.44692993 262.47457886]
[340.72775269 259.56726074]
[326.18414307 255.88066101]
[311.85736084 251.42523193]
[297.78802490 246.21363831]
[284.01602173 240.26060486]
[270.58032227 233.58305359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 46]
[13 45]
[14 44]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
