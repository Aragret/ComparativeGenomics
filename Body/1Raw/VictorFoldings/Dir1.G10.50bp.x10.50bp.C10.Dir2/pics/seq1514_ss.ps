%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAUAUCCGGGGGGGGGGCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACxxxxxxxxxxAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCCCCCCCCCCCUCAUAUCC\
) } def
/len { sequence length } bind def

/coor [
[72.22483826 359.99377441]
[59.66661453 351.64260864]
[49.58039093 340.43017578]
[42.60019684 327.06127930]
[39.16481400 312.37628174]
[39.49018860 297.29830933]
[43.55587387 282.77517700]
[51.10629272 269.71984863]
[61.66682434 258.95294189]
[74.57361603 251.15132141]
[89.01534271 246.80537415]
[88.39137268 231.81835938]
[87.76739502 216.83132935]
[87.14341736 201.84431458]
[86.51943970 186.85729980]
[85.89546204 171.87028503]
[85.27148438 156.88327026]
[84.64750671 141.89625549]
[71.63119507 134.44134521]
[58.38861084 141.48648071]
[45.14602280 148.53161621]
[31.90343857 155.57675171]
[18.66085243 162.62188721]
[12.61758804 177.48320007]
[-2.80952954 181.88587952]
[-15.78613472 172.45257568]
[-16.35768700 156.41969299]
[-4.08574057 146.08631897]
[11.61571789 149.37930298]
[24.85830307 142.33416748]
[38.10088730 135.28903198]
[51.34347534 128.24389648]
[64.58605957 121.19876099]
[62.61457825 109.74591064]
[64.01969147 98.94313049]
[49.44699097 95.38836670]
[34.87429047 91.83361053]
[25.22146225 103.65670776]
[11.39108181 110.11296844]
[-3.87082171 109.92050171]
[-17.53398705 103.11750793]
[-26.88558006 91.05473328]
[-30.06883812 76.12725830]
[-26.45172119 61.29893494]
[-16.75241280 49.51393509]
[-2.89671373 43.11218643]
[12.36431408 43.36476135]
[26.00058174 50.22150421]
[35.30459976 62.32100677]
[38.42905045 77.26090240]
[53.00175476 80.81566620]
[67.57445526 84.37042999]
[78.98149109 70.77806091]
[95.49630737 64.28703308]
[113.10559082 66.47473907]
[121.35787964 53.94878006]
[129.61016846 41.42281723]
[137.86245728 28.89685631]
[124.31453705 35.33531570]
[109.57534027 38.12030792]
[94.61222076 37.06905365]
[80.40722656 32.25054550]
[67.89263153 23.98102951]
[57.88978195 12.80323696]
[51.05517960 -0.54922259]
[47.83737564 -15.20001602]
[48.44756699 -30.18759918]
[52.84569931 -44.52832794]
[60.74311829 -57.28100204]
[71.62152100 -67.60865784]
[84.76692963 -74.83348083]
[99.31661987 -78.48130035]
[114.31567383 -78.31270599]
[128.77969360 -74.33876038]
[141.75938416 -66.82028198]
[152.40289307 -56.25071716]
[160.01167297 -43.32374573]
[164.08633423 -28.88778305]
[164.35948181 -13.89027023]
[160.81318665 0.68449223]
[153.67733765 13.88388538]
[166.61538696 6.29397678]
[179.55345154 -1.29593134]
[192.49150085 -8.88583946]
[205.42956543 -16.47574806]
[218.36761475 -24.06565666]
[231.30567932 -31.65556526]
[239.29380798 -45.31207657]
[254.18656921 -45.07828903]
[267.12463379 -52.66819763]
[280.06268311 -60.25810623]
[283.71179199 -65.89651489]
[288.89562988 -68.41819000]
[293.70062256 -67.88174438]
[306.94320679 -74.92687225]
[306.27947998 -90.17555237]
[312.30551147 -104.19873810]
[323.82485962 -114.21210480]
[338.55032349 -118.22750092]
[353.55816650 -115.44766235]
[365.86856079 -106.42453003]
[373.03726196 -92.94965363]
[373.64093018 -77.69847870]
[367.55972290 -63.69914246]
[356.00103760 -53.73121262]
[341.25988770 -49.77383423]
[326.26309204 -52.61275101]
[313.98834229 -61.68429184]
[300.74575806 -54.63915634]
[287.65258789 -47.32004929]
[274.71453857 -39.73014069]
[261.77648926 -32.14023209]
[254.71376038 -19.02660370]
[238.89558411 -18.71750832]
[225.95751953 -11.12760067]
[213.01947021 -3.53769207]
[200.08140564 4.05221605]
[187.14335632 11.64212418]
[174.20530701 19.23203278]
[161.26724243 26.82194138]
[150.38841248 37.14914703]
[142.13612366 49.67510986]
[133.88383484 62.20106888]
[125.63155365 74.72703552]
[133.22601318 84.29706573]
[137.29872131 96.08282471]
[137.23094177 108.80459595]
[132.86352539 121.02175140]
[124.53353882 131.29585266]
[113.05360413 138.35968018]
[99.63452148 141.27227783]
[100.25849915 156.25929260]
[100.88247681 171.24630737]
[101.50645447 186.23332214]
[102.13043213 201.22033691]
[102.75440979 216.20735168]
[103.37838745 231.19438171]
[104.00236511 246.18139648]
[118.75536346 249.31182861]
[132.26600647 256.01358032]
[143.68498230 265.86538696]
[152.29449463 278.24792480]
[157.55334473 292.38281250]
[159.13095093 307.38153076]
[156.92814636 322.30126953]
[151.08340454 336.20413208]
[141.96411133 348.21618652]
[130.14353943 357.58236694]
[116.36473846 363.71386719]
[101.49383545 366.22525024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[35 52]
[36 51]
[37 50]
[55 124]
[56 123]
[57 122]
[58 121]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[89 112]
[90 111]
[91 110]
[94 109]
[95 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
