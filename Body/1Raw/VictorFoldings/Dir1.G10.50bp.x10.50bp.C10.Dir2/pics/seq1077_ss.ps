%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCACACCGGGGGGGGGGCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACxxxxxxxxxxCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUCCCCCCCCCCUAGCCAAACC\
) } def
/len { sequence length } bind def

/coor [
[17.53405571 349.45584106]
[5.13382387 345.00869751]
[-7.02790833 339.94555664]
[-18.92056656 334.27920532]
[-30.51424980 328.02386475]
[-41.77981186 321.19525146]
[-52.68893051 313.81051636]
[-63.21417999 305.88827515]
[-73.32909393 297.44839478]
[-83.54257965 308.43408203]
[-93.75605774 319.41973877]
[-97.48594666 334.79498291]
[-111.81855774 338.84783936]
[-122.03203583 349.83349609]
[-132.24551392 360.81918335]
[-133.10079956 376.83941650]
[-146.24237061 386.04153442]
[-161.58912659 381.36642456]
[-167.36836243 366.40048218]
[-159.14674377 352.62423706]
[-143.23118591 350.60568237]
[-133.01770020 339.62002563]
[-122.80422211 328.63436890]
[-119.80486298 314.04489136]
[-104.74172211 309.20626831]
[-94.52824402 298.22058105]
[-84.31476593 287.23492432]
[-95.66796875 275.33651733]
[-106.25451660 262.75109863]
[-116.03292847 249.52801514]
[-124.96487427 235.71902466]
[-133.01536560 221.37828064]
[-140.15286255 206.56195068]
[-146.34941101 191.32809448]
[-151.58070374 175.73638916]
[-155.82626343 159.84794617]
[-159.06944275 143.72500610]
[-161.29754639 127.43073273]
[-162.50183105 111.02899170]
[-162.67759705 94.58403015]
[-161.82412720 78.16029358]
[-159.94480896 61.82212830]
[-157.04696655 45.63354874]
[-153.14195251 29.65798759]
[-148.24510193 13.95804024]
[-142.37557983 -1.40477920]
[-135.55638123 -16.37027740]
[-127.81423187 -30.87981415]
[-119.17946625 -44.87654114]
[-109.68591309 -58.30561447]
[-99.37077332 -71.11441803]
[-88.27446747 -83.25276184]
[-76.44046021 -94.67309570]
[-63.91513062 -105.33065796]
[-50.74755478 -115.18370056]
[-58.99984360 -127.70966339]
[-67.25212860 -140.23562622]
[-75.50442505 -152.76158142]
[-83.75671387 -165.28755188]
[-98.65167236 -172.14845276]
[-99.88779449 -188.50094604]
[-86.19345093 -197.52297974]
[-71.65621948 -189.93347168]
[-71.23075104 -173.53984070]
[-62.97845840 -161.01387024]
[-54.72616959 -148.48791504]
[-46.47388077 -135.96194458]
[-38.22159195 -123.43598938]
[-22.80759239 -132.26524353]
[-6.83221102 -140.03276062]
[9.63152599 -146.70303345]
[26.50835991 -152.24557495]
[43.72113800 -156.63504028]
[61.19118500 -159.85134888]
[78.83863068 -161.87983704]
[96.58281708 -162.71119690]
[114.34262085 -162.34164429]
[132.03684998 -160.77287292]
[149.58465576 -158.01203918]
[166.90577698 -154.07177734]
[183.92106628 -148.97009277]
[200.55271912 -142.73030090]
[216.72473145 -135.38093567]
[232.36317444 -126.95558929]
[247.39654541 -117.49277496]
[256.16275024 -129.66461182]
[264.92895508 -141.83645630]
[273.69515991 -154.00828552]
[274.80221558 -170.37002563]
[289.64257812 -177.34825134]
[302.94976807 -167.76435852]
[301.03448486 -151.47744751]
[285.86700439 -145.24208069]
[277.10079956 -133.07023621]
[268.33459473 -120.89840698]
[259.56838989 -108.72657013]
[269.83016968 -100.46588135]
[279.66494751 -91.70120239]
[289.04806519 -82.45458221]
[297.95590210 -72.74925995]
[306.36608887 -62.60962677]
[314.25741577 -52.06118774]
[321.61010742 -41.13045883]
[328.40567017 -29.84491730]
[334.62698364 -18.23293686]
[340.25845337 -6.32371283]
[345.28585815 5.85281658]
[349.69662476 18.26603889]
[353.47964478 30.88474464]
[356.62539673 43.67721176]
[359.12597656 56.61127472]
[360.97509766 69.65441895]
[362.16809082 82.77385712]
[362.70199585 95.93660736]
[362.57543945 109.10956573]
[361.78875732 122.25962830]
[360.34393311 135.35372925]
[358.24456787 148.35893250]
[355.49597168 161.24256897]
[352.10504150 173.97224426]
[348.08032227 186.51594543]
[343.43188477 198.84213257]
[338.17144775 210.91983032]
[332.31225586 222.71867371]
[325.86898804 234.20898438]
[318.85787964 245.36189270]
[311.29653931 256.14935303]
[303.20401001 266.54425049]
[294.60058594 276.52041626]
[285.50793457 286.05282593]
[275.94891357 295.11746216]
[265.94754028 303.69158936]
[255.52896118 311.75360107]
[244.71937561 319.28326416]
[233.54595947 326.26162720]
[222.03680420 332.67117310]
[210.22082520 338.49575806]
[198.12774658 343.72073364]
[185.78797913 348.33297729]
[173.23252869 352.32092285]
[160.49296570 355.67449951]
[147.60131836 358.38531494]
[134.59001160 360.44650269]
[121.49172974 361.85293579]
[108.33942413 362.60104370]
[95.16614532 362.68893433]
[82.00502014 362.11645508]
[68.88913727 360.88497925]
[55.85147095 358.99758911]
[42.92479706 356.45910645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 27]
[10 26]
[11 25]
[13 23]
[14 22]
[15 21]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
