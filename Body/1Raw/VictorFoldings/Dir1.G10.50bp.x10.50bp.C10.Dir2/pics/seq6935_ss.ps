%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUCCCCACGGGGGGGGGGCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAxxxxxxxxxxAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGACCCCCCCCCCGCUGUCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 378.08206177]
[71.01555634 372.52905273]
[58.81560135 363.66271973]
[49.20452881 352.04043579]
[42.78650284 338.39273071]
[39.96496582 323.57754517]
[40.91728210 308.52615356]
[45.58358765 294.18472290]
[53.67055511 281.45477295]
[64.66983032 271.13650513]
[77.88998413 263.87854004]
[92.50000000 260.13708496]
[92.50000000 245.13710022]
[92.50000000 230.13710022]
[92.50000000 215.13710022]
[92.50000000 200.13710022]
[92.50000000 185.13710022]
[92.50000000 170.13710022]
[92.50000000 155.13710022]
[92.50000000 140.13710022]
[92.50000000 125.13709259]
[82.32754517 119.38576508]
[75.66214752 109.78736115]
[60.72613525 111.17138672]
[45.79012299 112.55541229]
[30.85411263 113.93943787]
[15.94966412 115.62983704]
[1.08306563 117.62589264]
[-13.78353310 119.62195587]
[-18.96971893 134.02201843]
[-30.26173592 144.35395813]
[-45.06476212 148.24356079]
[-59.97717285 144.79701233]
[-71.57220459 134.80632019]
[-77.18539429 120.56727600]
[-75.52688599 105.35189056]
[-66.97779083 92.65655518]
[-53.50261688 85.39856720]
[-38.19787216 85.24576569]
[-24.58046913 92.23324585]
[-15.77958965 104.75535583]
[-0.91299129 102.75930023]
[13.95360756 100.76323700]
[17.54333496 97.52857208]
[23.22133446 96.55481720]
[29.47008705 99.00342560]
[44.40609741 97.61940002]
[59.34211349 96.23537445]
[74.27812195 94.85134888]
[76.36923218 88.61096191]
[79.94782257 83.08747101]
[84.78863525 78.62857819]
[90.58695221 75.51494598]
[96.97779846 73.94256592]
[103.55887604 74.01042938]
[109.91593933 75.71424866]
[119.31979370 64.02803802]
[118.71691895 51.10363770]
[126.84125519 41.55552292]
[138.89753723 40.17406845]
[148.53935242 28.68340111]
[151.28485107 10.50393677]
[167.95060730 5.09126282]
[177.35446167 -6.59494543]
[186.75831604 -18.28115463]
[196.16217041 -29.96736336]
[194.98126221 -50.56893158]
[210.60502625 -63.14717102]
[212.44834900 -78.03347778]
[214.29167175 -92.91978455]
[200.57994080 -99.31067657]
[189.51557922 -109.62741852]
[182.18257141 -122.85928345]
[179.29933167 -137.70994568]
[181.14831543 -152.72447205]
[187.54840088 -166.43193054]
[197.87254333 -177.48937988]
[211.10931396 -184.81350708]
[225.96191406 -187.68681335]
[240.97520447 -185.82775879]
[254.67835999 -179.41850281]
[265.72888184 -169.08694458]
[273.04415894 -155.84526062]
[275.90750122 -140.99075317]
[274.03839111 -125.97869873]
[267.61993408 -112.27983856]
[257.28097534 -101.23624420]
[244.03440857 -93.92984772]
[229.17797852 -91.07646179]
[227.33465576 -76.19015503]
[225.49133301 -61.30384445]
[228.58338928 -59.35594177]
[231.30310059 -56.91499710]
[245.11668396 -62.76178741]
[258.93026733 -68.60857391]
[268.62304688 -81.11300659]
[283.35952759 -78.94860077]
[282.86282349 -94.11823273]
[287.88323975 -108.44163513]
[297.74182129 -119.98168182]
[311.10528564 -127.17768860]
[326.16632080 -129.05644226]
[340.88803101 -125.36386108]
[353.27947998 -116.59933472]
[361.66476440 -103.94819641]
[364.90988159 -89.12140656]
[362.57592773 -74.12416840]
[354.97860718 -60.98473740]
[343.14532471 -51.48010635]
[328.67645264 -46.89570236]
[313.52883911 -47.85152817]
[299.75100708 -54.21831894]
[289.20632935 -65.13501740]
[280.50161743 -53.04878235]
[264.77706909 -54.79499054]
[250.96347046 -48.94820404]
[237.14990234 -43.10141754]
[233.65209961 -29.52796745]
[222.40525818 -20.71689606]
[207.84838867 -20.56350517]
[198.44451904 -8.87729740]
[189.04066467 2.80891156]
[179.63681030 14.49512005]
[180.61843872 26.59051704]
[172.82615662 36.41149902]
[160.03001404 38.32521439]
[150.38819885 49.81587982]
[148.30853271 67.21471405]
[131.00599670 73.43190002]
[121.60214996 85.11811066]
[124.74092865 108.71836853]
[107.50000000 125.13709259]
[107.50000000 140.13710022]
[107.50000000 155.13710022]
[107.50000000 170.13710022]
[107.50000000 185.13710022]
[107.50000000 200.13710022]
[107.50000000 215.13710022]
[107.50000000 230.13710022]
[107.50000000 245.13710022]
[107.50000000 260.13708496]
[122.11001587 263.87854004]
[135.33016968 271.13650513]
[146.32945251 281.45477295]
[154.41641235 294.18472290]
[159.08271790 308.52615356]
[160.03503418 323.57754517]
[157.21350098 338.39273071]
[150.79547119 352.04043579]
[141.18440247 363.66271973]
[128.98443604 372.52905273]
[114.96250153 378.08206177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 49]
[24 48]
[25 47]
[26 46]
[27 43]
[28 42]
[29 41]
[56 130]
[57 129]
[60 127]
[61 126]
[63 123]
[64 122]
[65 121]
[66 120]
[68 91]
[69 90]
[70 89]
[93 117]
[94 116]
[95 115]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
