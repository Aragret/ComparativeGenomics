%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAUCUCGGGGGGGGGGGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCCxxxxxxxxxxAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUCCCCCCCCCCUAUUAUCUCG\
) } def
/len { sequence length } bind def

/coor [
[82.81735992 333.95227051]
[69.94408417 326.04937744]
[59.81978989 314.83889771]
[53.26520538 301.22955322]
[50.81168365 286.32461548]
[52.65811920 271.33236694]
[58.65483475 257.46817017]
[68.31569672 245.85591125]
[80.85754395 237.43696594]
[95.26366425 232.89379883]
[94.95160675 217.89704895]
[94.63954926 202.90029907]
[94.32749176 187.90353394]
[94.01544189 172.90678406]
[93.70338440 157.91003418]
[93.39132690 142.91328430]
[93.07926941 127.91652679]
[92.76721191 112.91976929]
[90.28209686 98.12706757]
[85.67652893 83.85160065]
[81.07096863 69.57614136]
[76.46540070 55.30068207]
[71.85984039 41.02522278]
[60.25909805 30.26727676]
[63.71491623 15.77912235]
[59.10934830 1.50366211]
[54.50378418 -12.77179813]
[49.89822006 -27.04725838]
[35.30145645 -23.55973625]
[20.47833061 -21.21384621]
[5.51798725 -20.02369690]
[-9.48959637 -19.99644661]
[-24.45416260 -21.13226128]
[-39.28571320 -23.42430687]
[-53.89504242 -26.85880089]
[-68.19429779 -31.41508484]
[-82.09746552 -37.06575775]
[-95.52094269 -43.77684021]
[-108.38399506 -51.50796127]
[-120.60925293 -60.21263123]
[-132.12319946 -69.83849335]
[-142.85659790 -80.32766724]
[-152.74487305 -91.61705017]
[-161.72856140 -103.63876343]
[-169.75364685 -116.32049561]
[-176.77185059 -129.58598328]
[-182.74098206 -143.35543823]
[-187.62510681 -157.54605103]
[-191.39489746 -172.07247925]
[-194.02763367 -186.84735107]
[-195.50752258 -201.78181458]
[-195.82563782 -216.78605652]
[-194.98007202 -231.76982117]
[-192.97592163 -246.64302063]
[-189.82522583 -261.31616211]
[-185.54693604 -275.70104980]
[-180.16677856 -289.71112061]
[-173.71713257 -303.26214600]
[-166.23677063 -316.27261353]
[-157.77067566 -328.66430664]
[-148.36978149 -340.36264038]
[-138.09062195 -351.29733276]
[-126.99500275 -361.40255737]
[-115.14966583 -370.61755371]
[-102.62585449 -378.88693237]
[-89.49888611 -386.16091919]
[-75.84770966 -392.39578247]
[-61.75442123 -397.55404663]
[-47.30378723 -401.60467529]
[-32.58271408 -404.52328491]
[-17.67973518 -406.29232788]
[-2.68448234 -406.90118408]
[12.31286049 -406.34619141]
[27.22209740 -404.63067627]
[41.95355988 -401.76498413]
[56.41865158 -397.76629639]
[70.53037262 -392.65869141]
[84.20386505 -386.47290039]
[97.35687256 -379.24609375]
[109.91030884 -371.02175903]
[121.78866577 -361.84936523]
[132.92051697 -351.78405762]
[143.23889160 -340.88638306]
[152.68174744 -329.22189331]
[161.19229126 -316.86068726]
[168.71934509 -303.87716675]
[175.21763611 -290.34939575]
[180.64807129 -276.35873413]
[184.97799683 -261.98931885]
[188.18138123 -247.32759094]
[190.23895264 -232.46170044]
[191.13833618 -217.48106384]
[190.87411499 -202.47578430]
[189.44789124 -187.53608704]
[186.86822510 -172.75186157]
[183.15066528 -158.21197510]
[178.31753540 -144.00392151]
[172.39790344 -130.21310425]
[165.42739868 -116.92249298]
[157.44792175 -104.21202087]
[148.50746155 -92.15811157]
[138.65980530 -80.83328247]
[127.96415710 -70.30562592]
[116.48486328 -60.63846207]
[104.29094696 -51.88993454]
[91.45574951 -44.11265564]
[78.05646515 -37.35340118]
[64.17368317 -31.65282440]
[68.77924347 -17.37736320]
[73.38481140 -3.10190248]
[77.99037170 11.17355824]
[89.26169586 20.91042709]
[86.13529968 36.41965866]
[90.74085999 50.69511795]
[95.34642792 64.97058105]
[99.95198822 79.24604034]
[104.55755615 93.52149963]
[111.13130188 89.96308136]
[119.25131226 89.23774719]
[127.94147491 91.79047394]
[141.03463745 99.10958099]
[154.12779236 106.42868805]
[169.26522827 101.88626862]
[183.14117432 109.45153809]
[187.52330017 124.63615417]
[179.81175232 138.43135071]
[164.58164978 142.65269470]
[150.86875916 134.79571533]
[146.80868530 119.52184296]
[133.71553040 112.20273590]
[120.62236786 104.88362885]
[107.76396942 112.60771179]
[108.07602692 127.60446930]
[108.38807678 142.60122681]
[108.70013428 157.59797668]
[109.01219177 172.59472656]
[109.32424927 187.59147644]
[109.63630676 202.58824158]
[109.94836426 217.58499146]
[110.26041412 232.58174133]
[124.84305573 236.52169800]
[137.72425842 244.41163635]
[147.85981750 255.61196899]
[154.42807007 269.21472168]
[156.89656067 284.11718750]
[155.06518555 299.11126709]
[149.08241272 312.98147583]
[139.43321228 324.60342407]
[126.89983368 333.03497314]
[112.49828339 337.59262085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 117]
[20 116]
[21 115]
[22 114]
[23 113]
[25 111]
[26 110]
[27 109]
[28 108]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
