%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAAAAUCGGGGGGGGGGUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAxxxxxxxxxxACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCCCCCCCCCCCUAAAACUC\
) } def
/len { sequence length } bind def

/coor [
[288.23071289 245.45422363]
[279.55450439 233.21159363]
[271.68893433 220.43301392]
[264.66702271 207.17210388]
[258.51821899 193.48448181]
[253.26831055 179.42755127]
[248.93931580 165.06027222]
[245.54940796 150.44290161]
[243.11277771 135.63676453]
[241.63966370 120.70395660]
[241.13624573 105.70710754]
[226.14353943 105.23906708]
[211.15084839 104.77102661]
[196.15815735 104.30297852]
[181.16545105 103.83493805]
[166.16625977 103.99097443]
[151.18655396 104.77082062]
[136.20683289 105.55066681]
[121.22711945 106.33051300]
[106.24740601 107.11035919]
[101.89138794 110.15631104]
[96.13281250 110.50775909]
[90.63090515 107.59786987]
[75.63171387 107.75390625]
[64.61252594 118.76368713]
[49.39899063 118.70825958]
[38.97076035 108.13529205]
[23.97157097 108.29132843]
[8.97238255 108.44736481]
[-6.02680588 108.60340118]
[-21.02599335 108.75943756]
[-36.02518082 108.91547394]
[-43.49584579 122.33504486]
[-56.68364334 130.20762634]
[-72.04113007 130.41552734]
[-85.43721008 122.90284729]
[-93.26841736 109.69042969]
[-93.42818451 94.33237457]
[-85.87354279 80.95989990]
[-72.63665009 73.17015076]
[-57.27816391 73.05851746]
[-43.92943954 80.65504456]
[-36.18122101 93.91629028]
[-21.18203163 93.76025391]
[-6.18284225 93.60421753]
[8.81634617 93.44818115]
[23.81553459 93.29214478]
[38.81472397 93.13610840]
[49.02074051 82.34848022]
[64.22982788 81.97657013]
[75.47567749 92.75472260]
[90.47486877 92.59868622]
[105.46755981 92.13064575]
[120.44728088 91.35079956]
[135.42698669 90.57095337]
[150.40670776 89.79110718]
[165.38641357 89.01126099]
[169.05661011 86.42451477]
[172.96780396 85.29597473]
[176.61923218 85.51712036]
[179.60011292 86.82415009]
[181.63349915 88.84224701]
[196.62619019 89.31028748]
[211.61888123 89.77832794]
[226.61158752 90.24636841]
[241.60427856 90.71440887]
[243.04216003 75.77816772]
[245.44383240 60.96632004]
[248.79925537 46.34099579]
[253.09434509 31.96354103]
[258.31106567 17.89426041]
[264.42755127 4.19216299]
[271.41815186 -9.08527756]
[279.25354004 -21.88237000]
[287.90084839 -34.14543915]
[297.32382202 -45.82305145]
[307.48291016 -56.86622238]
[318.33554077 -67.22863770]
[329.83615112 -76.86682129]
[341.93652344 -85.74036407]
[354.58593750 -93.81204224]
[367.73126221 -101.04798889]
[381.31741333 -107.41786957]
[395.28741455 -112.89495087]
[409.58261108 -117.45627594]
[424.14309692 -121.08270264]
[438.90780640 -123.75901794]
[453.81478882 -125.47400665]
[468.80148315 -126.22046661]
[483.80508423 -125.99526978]
[498.76266479 -124.79936218]
[513.61145020 -122.63775635]
[528.28918457 -119.51952362]
[542.73425293 -115.45774078]
[556.88616943 -110.46944427]
[570.68548584 -104.57556152]
[584.07434082 -97.80080414]
[596.99658203 -90.17359161]
[609.39801025 -81.72591400]
[621.22662354 -72.49321747]
[632.43280029 -62.51420975]
[642.96954346 -51.83075333]
[652.79260254 -40.48765945]
[661.86090088 -28.53250694]
[670.13623047 -16.01543617]
[677.58404541 -2.98895144]
[684.17303467 10.49231052]
[689.87548828 24.37180328]
[694.66766357 38.59131241]
[698.52929688 53.09119415]
[701.44427490 67.81063080]
[703.40032959 82.68788910]
[704.38928223 97.66056061]
[704.40698242 112.66584778]
[703.45336914 127.64080811]
[701.53240967 142.52264404]
[698.65216064 157.24891663]
[694.82476807 171.75785828]
[690.06622314 185.98864746]
[684.39642334 199.88154602]
[677.83929443 213.37832642]
[670.42230225 226.42234802]
[662.17645264 238.95890808]
[653.13647461 250.93542480]
[643.34014893 262.30166626]
[632.82867432 273.00994873]
[621.64605713 283.01538086]
[609.83923340 292.27597046]
[597.45776367 300.75286865]
[584.55358887 308.41055298]
[571.18072510 315.21688843]
[557.39538574 321.14331055]
[543.25531006 326.16500854]
[528.81982422 330.26086426]
[514.14947510 333.41369629]
[499.30584717 335.61035156]
[484.35116577 336.84155273]
[469.34811401 337.10214233]
[454.35968018 336.39105225]
[439.44869995 334.71124268]
[424.67773438 332.06976318]
[410.10873413 328.47769165]
[395.80279541 323.95013428]
[381.81991577 318.50601196]
[368.21878052 312.16821289]
[355.05639648 304.96331787]
[342.38800049 296.92150879]
[330.26672363 288.07653809]
[318.74337769 278.46551514]
[307.86636353 268.12872314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[23 52]
[24 51]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
