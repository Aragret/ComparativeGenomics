%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAACUCCGGGGGGGGGGAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACUxxxxxxxxxxGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCCCCCCCCCCCUUCAACUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 377.93197632]
[71.19830322 371.91595459]
[59.48964310 362.38653564]
[50.78712082 350.05084229]
[45.73651886 335.82434082]
[44.71262741 320.76266479]
[47.79142761 305.98348999]
[54.74444962 292.58355713]
[65.05573273 281.55722046]
[77.96011353 273.72271729]
[92.50000000 269.66140747]
[92.50000000 254.66140747]
[92.50000000 239.66140747]
[92.50000000 224.66140747]
[92.50000000 209.66140747]
[92.50000000 194.66140747]
[92.50000000 179.66140747]
[92.50000000 164.66140747]
[92.50000000 149.66140747]
[92.50000000 134.66140747]
[92.50000000 119.66140747]
[78.32841492 107.58717346]
[78.56987762 87.36148071]
[95.51047516 73.58138275]
[85.76281738 62.18035889]
[76.01516724 50.77933884]
[66.26751709 39.37831879]
[53.95626831 47.96900558]
[40.86225510 55.31159973]
[27.11158943 61.33538055]
[12.83669567 65.98233795]
[-1.82494593 69.20771790]
[-16.73213196 70.98045349]
[-31.74129486 71.28347015]
[-46.70788574 70.11386108]
[-61.48775864 67.48287964]
[-75.93858337 63.41586685]
[-89.92117310 57.95199585]
[-103.30087280 51.14388275]
[-115.94882202 43.05709457]
[-127.74321747 33.76951981]
[-138.57046509 23.37059784]
[-148.32627869 11.96048355]
[-156.91673279 -0.35093695]
[-164.25906372 -13.44509506]
[-170.28256226 -27.19588280]
[-174.92924500 -41.47086716]
[-178.15432739 -56.13257599]
[-179.92675781 -71.03979492]
[-180.22947693 -86.04896545]
[-179.05957031 -101.01553345]
[-176.42829895 -115.79535675]
[-172.36099243 -130.24609375]
[-166.89683533 -144.22857666]
[-160.08845520 -157.60813904]
[-152.00141907 -170.25593567]
[-142.71360779 -182.05014038]
[-132.31446838 -192.87718201]
[-120.90415955 -202.63276672]
[-108.59256744 -211.22296143]
[-95.49826050 -218.56503296]
[-81.74735260 -224.58827209]
[-67.47227478 -229.23464966]
[-52.81050491 -232.45944214]
[-37.90324783 -234.23158264]
[-22.89407349 -234.53401184]
[-7.92753124 -233.36380005]
[6.85223961 -230.73222351]
[21.30289650 -226.66462708]
[35.28527069 -221.20019531]
[48.66469955 -214.39155579]
[61.31232834 -206.30426025]
[73.10634613 -197.01622009]
[83.93318176 -186.61685181]
[93.68854523 -175.20635986]
[102.27849579 -162.89459229]
[109.62030029 -149.80014038]
[115.64325714 -136.04910278]
[120.28936005 -121.77393341]
[123.51385498 -107.11209869]
[125.28569794 -92.20481110]
[125.58782196 -77.19562531]
[124.41731262 -62.22911072]
[121.78543854 -47.44939041]
[117.71756744 -32.99881363]
[112.25285339 -19.01655006]
[105.44393921 -5.63725853]
[97.35639191 7.01020813]
[88.06810760 18.80404472]
[77.66853333 29.63066483]
[87.41619110 41.03168488]
[97.16384125 52.43270874]
[106.91149139 63.83372879]
[99.36655426 50.86939621]
[97.95578766 35.93588638]
[102.93943024 21.78798103]
[113.39816284 11.03554153]
[127.40265656 5.66207075]
[142.36950684 6.65881300]
[155.53776550 13.84189796]
[164.47831726 25.88626480]
[167.54187012 40.57008743]
[164.16329956 55.18464279]
[154.96585083 67.03398895]
[141.64617920 73.93227386]
[126.66436768 74.60749054]
[141.52742004 76.62982941]
[156.39045715 78.65216064]
[171.10778809 72.84607697]
[182.67570496 82.22865295]
[197.39303589 76.42256165]
[208.96095276 85.80514526]
[223.82398987 87.82747650]
[238.68704224 89.84980774]
[253.65177917 83.14244843]
[266.78259277 92.96659851]
[264.57162476 109.21601868]
[249.29331970 115.17469788]
[236.66470337 104.71286011]
[221.80166626 102.69052124]
[206.93861389 100.66819000]
[193.28437805 106.61892700]
[180.65336609 97.09169769]
[166.99914551 103.04243469]
[154.36813354 93.51520538]
[139.50508118 91.49287415]
[124.64202881 89.47053528]
[124.65991211 103.29712677]
[118.00263977 114.25228882]
[107.50000000 119.66140747]
[107.50000000 134.66140747]
[107.50000000 149.66140747]
[107.50000000 164.66140747]
[107.50000000 179.66140747]
[107.50000000 194.66140747]
[107.50000000 209.66140747]
[107.50000000 224.66140747]
[107.50000000 239.66140747]
[107.50000000 254.66140747]
[107.50000000 269.66140747]
[122.03988647 273.72271729]
[134.94427490 281.55722046]
[145.25555420 292.58355713]
[152.20857239 305.98348999]
[155.28736877 320.76266479]
[154.26348877 335.82434082]
[149.21287537 350.05084229]
[140.51036072 362.38653564]
[128.80169678 371.91595459]
[114.95575714 377.93197632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 93]
[25 92]
[26 91]
[27 90]
[106 127]
[107 126]
[108 125]
[110 123]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
