%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCAUCCUGGGGGGGGGGAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAxxxxxxxxxxCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUACCCCCCCCCCGCCUCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[87.68556213 477.78518677]
[73.83963013 471.76916504]
[62.13096619 462.23974609]
[53.42844009 449.90408325]
[48.37783813 435.67755127]
[47.35394669 420.61587524]
[50.43274689 405.83673096]
[57.38576889 392.43679810]
[67.69705200 381.41046143]
[80.60143280 373.57595825]
[95.14131927 369.51464844]
[95.14131927 354.51464844]
[95.14131927 339.51464844]
[95.14131927 324.51464844]
[95.14131927 309.51464844]
[95.14131927 294.51464844]
[95.14131927 279.51464844]
[95.14131927 264.51464844]
[95.14131927 249.51464844]
[95.14131927 234.51464844]
[94.98528290 219.51545715]
[94.67322540 204.51869202]
[94.36116791 189.52194214]
[86.36077118 176.95838928]
[93.80930328 163.00024414]
[93.49724579 148.00349426]
[93.18518829 133.00672913]
[74.15705109 121.63395691]
[66.30915833 100.90184021]
[51.60119629 97.95635986]
[36.89323425 95.01087189]
[22.18527222 92.06539154]
[15.17858028 105.44757843]
[4.68451738 116.31272125]
[-8.44620800 123.78002930]
[-23.14914894 127.24417114]
[-38.23239899 126.42430878]
[-52.47323608 121.38690948]
[-64.71720886 112.54034424]
[-73.97175598 100.60175323]
[-79.48665619 86.53894806]
[-80.81484222 71.49192810]
[-77.84864044 56.68050766]
[-70.82850647 43.30536652]
[-60.32353592 32.45077133]
[-47.18531418 24.99665451]
[-32.47890472 21.54729080]
[-17.39648056 22.38230324]
[-3.16071582 27.43400192]
[9.07436466 36.29286575]
[18.31691742 48.24074936]
[23.81768799 62.30908966]
[25.13075447 77.35742950]
[39.83871841 80.30290985]
[54.54667664 83.24839783]
[69.25463867 86.19387817]
[78.77850342 73.81729126]
[92.85878754 67.06233978]
[108.47235107 67.37937164]
[115.37934875 54.06421280]
[114.86563873 38.25135040]
[127.59434509 30.51641083]
[134.50134277 17.20125580]
[141.40834045 3.88609958]
[128.43244934 11.41112328]
[113.68255615 14.13890362]
[98.87363434 11.75228596]
[85.72750854 4.52875900]
[75.77266693 -6.69180298]
[70.16653442 -20.60479546]
[69.56095123 -35.59256744]
[74.02632141 -49.91249847]
[83.04345703 -61.89962769]
[95.56394958 -70.16021729]
[110.13204193 -73.73382568]
[125.05391693 -72.20493317]
[138.59463501 -65.75131989]
[149.17980957 -55.12333679]
[155.57872009 -41.55669022]
[157.04736328 -26.62875938]
[153.41383362 -12.07255936]
[164.29264832 -22.39976501]
[158.79116821 -35.57301712]
[158.12875366 -49.80356598]
[162.36486816 -63.37379074]
[170.96894836 -74.65277100]
[182.88677979 -82.29232025]
[196.66964722 -85.38807678]
[210.65039062 -83.58656311]
[223.14509583 -77.12541199]
[234.23640442 -87.22406769]
[245.32772827 -97.32271576]
[256.41903687 -107.42136383]
[260.88180542 -123.20159149]
[276.84353638 -126.96398163]
[287.88415527 -114.83811188]
[282.64602661 -99.29803467]
[266.51770020 -96.33004761]
[255.42637634 -86.23139954]
[244.33505249 -76.13275146]
[233.24374390 -66.03409576]
[238.84135437 -51.24046707]
[238.34533691 -35.39254379]
[231.80189514 -20.90783501]
[220.18197632 -10.00717068]
[205.23727417 -4.37422466]
[189.23628235 -4.89549828]
[174.61985779 -11.52093983]
[163.74102783 -1.19373441]
[154.72349548 10.79309845]
[147.81649780 24.10825348]
[140.90950012 37.42340851]
[141.91725159 52.28388596]
[128.69450378 60.97121429]
[121.78750610 74.28636932]
[127.93585968 81.14598083]
[131.99725342 89.41408539]
[133.66830444 98.47301483]
[132.82414246 107.64601898]
[129.52786255 116.24782562]
[124.02568817 123.63583374]
[116.72867584 129.25811768]
[108.18194580 132.69467163]
[108.49399567 147.69143677]
[108.80605316 162.68818665]
[116.82877350 176.32440186]
[109.35792542 189.20988464]
[109.66998291 204.20664978]
[109.98204041 219.20339966]
[113.30690002 227.78227234]
[110.14131927 234.51464844]
[110.14131927 249.51464844]
[110.14131927 264.51464844]
[110.14131927 279.51464844]
[110.14131927 294.51464844]
[110.14131927 309.51464844]
[110.14131927 324.51464844]
[110.14131927 339.51464844]
[110.14131927 354.51464844]
[110.14131927 369.51464844]
[124.68120575 373.57595825]
[137.58558655 381.41046143]
[147.89686584 392.43679810]
[154.84989929 405.83673096]
[157.92869568 420.61587524]
[156.90480042 435.67755127]
[151.85420227 449.90408325]
[143.15167236 462.23974609]
[131.44300842 471.76916504]
[117.59707642 477.78518677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 127]
[25 125]
[26 124]
[27 123]
[29 56]
[30 55]
[31 54]
[32 53]
[59 115]
[60 114]
[62 112]
[63 111]
[64 110]
[81 109]
[82 108]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
