%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUUACGGGGGGGGGGCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUxxxxxxxxxxAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCCCCCCCCCCCUCCCUGAC\
) } def
/len { sequence length } bind def

/coor [
[72.29550934 385.71337891]
[58.44957352 379.69735718]
[46.74090958 370.16793823]
[38.03838730 357.83227539]
[32.98778534 343.60574341]
[31.96389198 328.54406738]
[35.04269028 313.76492310]
[41.99571228 300.36499023]
[52.30699921 289.33865356]
[65.21138000 281.50415039]
[79.75126648 277.44284058]
[79.75126648 262.44284058]
[79.75126648 247.44284058]
[79.75126648 232.44284058]
[79.75126648 217.44284058]
[79.75126648 202.44284058]
[79.75126648 187.44284058]
[79.75126648 172.44284058]
[79.75126648 157.44284058]
[79.75126648 142.44284058]
[74.36585999 137.22293091]
[67.17447662 150.38667297]
[65.00118256 165.22839355]
[53.46754074 174.81875610]
[38.47841263 174.24780273]
[27.70774841 163.80784607]
[26.66978836 148.84379578]
[35.89593506 137.01678467]
[50.66211700 134.38174438]
[63.59505463 126.78311920]
[58.20964813 121.56320953]
[43.21695328 122.03125000]
[28.22425652 122.49929810]
[13.23156071 122.96733856]
[-1.76113570 123.43537903]
[-17.40389252 129.97300720]
[-28.01636696 116.75135803]
[-18.24925995 102.89350891]
[-2.22917771 108.44268036]
[12.76351833 107.97463989]
[27.75621414 107.50659943]
[42.74890900 107.03855896]
[57.74160767 106.57051086]
[61.98503876 94.24758911]
[69.33713531 85.01342773]
[57.63750839 75.62625885]
[45.93788528 66.23909760]
[34.23826218 56.85194016]
[22.53863716 47.46477509]
[7.94416094 52.46525574]
[-7.03148460 48.75936890]
[-17.60962486 37.52965546]
[-20.41481209 22.35947037]
[-14.55192375 8.08957005]
[-1.89178455 -0.72657579]
[13.52580070 -1.27576554]
[26.78113747 6.61724472]
[33.64449310 20.43382454]
[31.92580032 35.76515198]
[43.62542343 45.15231323]
[55.32504654 54.53947830]
[67.02467346 63.92663956]
[78.72429657 73.31379700]
[92.17642212 66.77951813]
[107.13076782 66.62394714]
[120.71592712 72.87696075]
[132.21772766 63.24843597]
[143.71952820 53.61990738]
[135.38209534 41.13254166]
[128.44367981 27.81693077]
[122.98561859 13.82918835]
[119.07193756 -0.66668332]
[116.74849701 -15.50072765]
[116.04254913 -30.49902344]
[116.96236420 -45.48572159]
[119.49716949 -60.28511429]
[123.61723328 -74.72368622]
[129.27426147 -88.63214874]
[136.40191650 -101.84743500]
[144.91662598 -114.21459961]
[154.71858215 -125.58864594]
[165.69284058 -135.83622742]
[177.71075439 -144.83717346]
[190.63139343 -152.48597717]
[204.30329895 -158.69294739]
[218.56614685 -163.38531494]
[233.25273132 -166.50807190]
[248.19084167 -168.02458191]
[263.20535278 -167.91708374]
[278.12023926 -166.18684387]
[292.76058960 -162.85412598]
[306.95480347 -157.95802307]
[320.53643799 -151.55592346]
[333.34622192 -143.72290039]
[345.23400879 -134.55079651]
[356.06042480 -124.14714050]
[365.69851685 -112.63391113]
[374.03527832 -100.14609528]
[380.97299194 -86.83010864]
[386.43029785 -72.84207153]
[390.34320068 -58.34599304]
[392.66583252 -43.51182175]
[393.37097168 -28.51348877]
[392.45034790 -13.52683926]
[389.91476440 1.27241671]
[385.79391479 15.71076488]
[380.13613892 29.61892319]
[373.00778198 42.83382416]
[364.49240112 55.20053482]
[354.68981934 66.57405090]
[343.71502686 76.82103729]
[331.69662476 85.82134247]
[318.77557373 93.46945190]
[305.10333252 99.67568970]
[290.84024048 104.36728668]
[276.15347290 107.48925018]
[261.21530151 109.00495911]
[246.20077515 108.89665222]
[231.28599548 107.16560364]
[216.64581299 103.83209991]
[202.45187378 98.93523407]
[188.87059021 92.53240967]
[176.06121826 84.69869995]
[164.17390442 75.52595520]
[153.34806824 65.12171173]
[141.84625244 74.75023651]
[130.34445190 84.37876129]
[136.20733643 102.42581940]
[131.53096008 122.00058746]
[116.53089905 137.08978271]
[94.75126648 142.44284058]
[94.75126648 157.44284058]
[94.75126648 172.44284058]
[94.75126648 187.44284058]
[94.75126648 202.44284058]
[94.75126648 217.44284058]
[94.75126648 232.44284058]
[94.75126648 247.44284058]
[94.75126648 262.44284058]
[94.75126648 277.44284058]
[109.29115295 281.50415039]
[122.19553375 289.33865356]
[132.50682068 300.36499023]
[139.45983887 313.76492310]
[142.53863525 328.54406738]
[141.51473999 343.60574341]
[136.46414185 357.83227539]
[127.76161957 370.16793823]
[116.05295563 379.69735718]
[102.20702362 385.71337891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[66 127]
[67 126]
[68 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
