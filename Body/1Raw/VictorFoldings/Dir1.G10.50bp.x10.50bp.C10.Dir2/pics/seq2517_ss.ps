%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAUUCUCCUGGGGGGGGGGCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCxxxxxxxxxxCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUCCCCCCCCCCAAACAUUCUACU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 391.88818359]
[70.87159729 386.73318481]
[58.28185654 378.45095825]
[47.94191742 367.48818970]
[40.40940475 354.43606567]
[36.09054184 339.99847412]
[35.21823120 324.95401001]
[37.83952332 310.11401367]
[43.81304932 296.27877808]
[52.81666565 284.19442749]
[64.36482239 274.51266479]
[77.83473969 267.75558472]
[92.50000000 264.28759766]
[92.50000000 249.28759766]
[92.50000000 234.28759766]
[92.50000000 219.28759766]
[92.50000000 204.28759766]
[92.50000000 189.28759766]
[92.50000000 174.28759766]
[92.50000000 159.28759766]
[92.50000000 144.28759766]
[92.50000000 129.28759766]
[81.26566315 128.06410217]
[70.21468353 122.37409973]
[56.04570389 127.29753113]
[41.87672806 132.22096252]
[27.70775414 137.14437866]
[21.04606628 151.47607422]
[6.17304087 156.82104492]
[-8.08742142 150.00820923]
[-13.27483940 135.07949829]
[-6.31161165 120.89186096]
[8.67110348 115.86257172]
[22.78432655 122.97541046]
[36.95330048 118.05197906]
[51.12227631 113.12855530]
[65.29125214 108.20512390]
[64.98725128 93.20820618]
[50.63038635 88.86302948]
[36.27352905 84.51785278]
[21.91666794 80.17267609]
[10.24102974 90.25647736]
[-5.03605413 92.40455627]
[-19.03972244 85.93147278]
[-27.30145645 72.90276337]
[-27.18496513 57.47583771]
[-18.72742081 44.57337570]
[-4.62759733 38.31250381]
[10.61530590 40.69104767]
[22.13733101 50.95001602]
[26.26184464 65.81581116]
[40.61870575 70.16098785]
[54.97556686 74.50617218]
[69.33242798 78.85134888]
[82.89284515 69.56577301]
[98.14119720 67.48040009]
[111.71445465 72.12913513]
[120.77536774 60.17506409]
[129.83627319 48.22098923]
[115.18634796 51.44270706]
[101.07073212 46.36832809]
[91.82515717 34.55649948]
[90.28948212 19.63531494]
[96.93540955 6.18794727]
[109.72157288 -1.65513146]
[124.72061157 -1.48485398]
[137.32542419 6.64647770]
[143.66435242 20.24125671]
[141.79035950 35.12368774]
[152.86946106 25.01164627]
[163.94856262 14.89960480]
[155.15490723 2.72711992]
[147.80616760 -10.36843967]
[141.99813843 -24.21634483]
[137.80653381 -38.63606262]
[135.28601074 -53.43960190]
[134.46943665 -68.43396759]
[135.36743164 -83.42367554]
[137.96832275 -98.21330261]
[142.23817444 -112.61004639]
[148.12133789 -126.42620087]
[155.54110718 -139.48165894]
[164.40074158 -151.60620117]
[174.58474731 -162.64176941]
[185.96035767 -172.44448853]
[198.37925720 -180.88655090]
[211.67955017 -187.85792542]
[225.68783569 -193.26770020]
[240.22149658 -197.04534912]
[255.09103394 -199.14163208]
[270.10263062 -199.52922058]
[285.06051636 -198.20304871]
[299.76977539 -195.18041992]
[314.03854370 -190.50073242]
[327.68087769 -184.22500610]
[340.51885986 -176.43504333]
[352.38519287 -167.23240662]
[363.12509155 -156.73706055]
[372.59860229 -145.08586121]
[380.68218994 -132.43069458]
[387.27047729 -118.93653870]
[392.27755737 -104.77931976]
[395.63818359 -90.14360809]
[397.30850220 -75.22021484]
[397.26678467 -60.20368958]
[395.51354980 -45.28980637]
[392.07162476 -30.67300034]
[386.98593140 -16.54382896]
[380.32275391 -3.08649468]
[372.16897583 9.52355671]
[362.63085938 21.12192726]
[351.83279419 31.55741119]
[339.91552734 40.69395447]
[327.03442383 48.41245270]
[313.35742188 54.61227036]
[299.06286621 59.21258545]
[284.33706665 62.15342331]
[269.37200928 63.39643860]
[254.36280823 62.92543411]
[239.50514221 60.74654388]
[224.99270630 56.88817978]
[211.01470947 51.40063477]
[197.75335693 44.35546112]
[185.38156128 35.84450150]
[174.06060791 25.97871208]
[162.98150635 36.09075165]
[151.90238953 46.20279312]
[141.79035950 57.28190231]
[132.72944641 69.23597717]
[123.66852570 81.19004822]
[130.23178101 99.76893616]
[123.95327759 118.44597626]
[107.50000000 129.28759766]
[107.50000000 144.28759766]
[107.50000000 159.28759766]
[107.50000000 174.28759766]
[107.50000000 189.28759766]
[107.50000000 204.28759766]
[107.50000000 219.28759766]
[107.50000000 234.28759766]
[107.50000000 249.28759766]
[107.50000000 264.28759766]
[122.16526031 267.75558472]
[135.63517761 274.51266479]
[147.18333435 284.19442749]
[156.18695068 296.27877808]
[162.16047668 310.11401367]
[164.78176880 324.95401001]
[163.90945435 339.99847412]
[159.59059143 354.43606567]
[152.05809021 367.48818970]
[141.71813965 378.45095825]
[129.12840271 386.73318481]
[114.96779633 391.88818359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 37]
[25 36]
[26 35]
[27 34]
[38 54]
[39 53]
[40 52]
[41 51]
[57 130]
[58 129]
[59 128]
[69 127]
[70 126]
[71 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
