%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCACUACGGGGGGGGGGCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAxxxxxxxxxxCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUCCCCCCCCCCACACCGACUAC\
) } def
/len { sequence length } bind def

/coor [
[35.49861526 446.57623291]
[21.47667313 441.02322388]
[9.27671528 432.15689087]
[-0.33435646 420.53457642]
[-6.75238180 406.88687134]
[-9.57391834 392.07168579]
[-8.62160301 377.02032471]
[-3.95529747 362.67889404]
[4.13166904 349.94894409]
[15.13094330 339.63067627]
[28.35110283 332.37268066]
[42.96111679 328.63125610]
[42.96111679 313.63125610]
[42.96111679 298.63125610]
[42.96111679 283.63125610]
[42.96111679 268.63125610]
[42.96111679 253.63125610]
[42.96111679 238.63125610]
[42.96111679 223.63125610]
[42.96111679 208.63125610]
[42.96111679 193.63125610]
[35.17594528 206.45277405]
[24.77805901 217.26405334]
[12.26966286 225.54293823]
[-1.74509978 230.88957214]
[-16.58932877 233.04570007]
[-31.54605865 231.90719604]
[-45.89289474 227.52903748]
[-58.93690109 220.12268066]
[-70.04805756 210.04586792]
[-78.68970490 197.78529358]
[-84.44446564 183.93312073]
[-87.03439331 169.15840149]
[-86.33438110 154.17474365]
[-82.37825775 139.70584106]
[-75.35708618 126.45053864]
[-65.60998535 115.04904175]
[-53.60773849 106.05204010]
[-39.93003464 99.89408112]
[-25.23750114 96.87258911]
[-10.23976994 97.13349152]
[4.33877993 100.66419220]
[17.79401970 107.29416656]
[29.47607040 116.70318604]
[38.82070160 128.43681335]
[45.37657928 141.92831421]
[48.82705307 156.52606201]
[49.00502777 171.52952576]
[56.63799667 158.61682129]
[64.27096558 145.70411682]
[71.90393829 132.79142761]
[61.85507965 121.38985443]
[56.28004837 107.04476166]
[55.98498917 91.46473694]
[61.13847351 76.55495453]
[71.23472595 64.18420410]
[85.14028931 55.95079422]
[101.22029877 52.97667694]
[117.53038025 55.75620270]
[120.88964081 41.13719559]
[124.24889374 26.51818848]
[127.60815430 11.89918041]
[130.96740723 -2.71982718]
[134.32667542 -17.33883476]
[137.68592834 -31.95784187]
[123.86237335 -37.88649750]
[111.31967926 -46.18834686]
[100.46105957 -56.59651947]
[91.63555908 -68.77643585]
[85.12688446 -82.33655548]
[81.14427185 -96.84098816]
[79.81573486 -111.82347107]
[81.18398285 -126.80237579]
[85.20503998 -141.29620361]
[91.74963379 -154.83901978]
[100.60739136 -166.99549866]
[111.49357605 -177.37484741]
[124.05822754 -185.64341736]
[137.89746094 -191.53540039]
[152.56639099 -194.86140442]
[167.59347534 -195.51451111]
[182.49565125 -193.47370911]
[196.79388428 -188.80462646]
[210.02853394 -181.65734863]
[221.77416992 -172.26161194]
[231.65322876 -160.91947937]
[239.34811401 -147.99552917]
[244.61148071 -133.90522766]
[247.27413940 -119.10150146]
[247.25048828 -104.06025696]
[244.54129028 -89.26498413]
[239.23362732 -75.19129944]
[231.49813843 -62.29161835]
[221.58346558 -50.98060226]
[209.80833435 -41.62185669]
[196.55126953 -34.51623154]
[182.23841858 -29.89213753]
[167.32989502 -27.89822388]
[152.30494690 -28.59858322]
[148.94567871 -13.97957611]
[145.58642578 0.63943160]
[142.22715759 15.25843906]
[138.86790466 29.87744713]
[135.50865173 44.49645233]
[132.14938354 59.11546326]
[142.48028564 69.99077606]
[157.25241089 67.38605499]
[172.02452087 64.78133392]
[184.23236084 53.83140564]
[199.73295593 59.18521881]
[202.58064270 75.33522797]
[189.84594727 85.66768646]
[174.62924194 79.55344391]
[159.85713196 82.15817261]
[145.08500671 84.76289368]
[146.70362854 92.82801056]
[146.90147400 100.99283600]
[145.69288635 109.01074219]
[143.13432312 116.64308167]
[139.32214355 123.66619110]
[134.38911438 129.87803650]
[128.49983215 135.10392761]
[121.84532928 139.20149231]
[114.63687897 142.06440735]
[107.09934235 143.62522888]
[99.46412659 143.85673523]
[91.96210480 142.77218628]
[84.81663513 140.42439270]
[77.18366241 153.33709717]
[69.55069733 166.24978638]
[61.91772461 179.16249084]
[57.96111679 193.63125610]
[57.96111679 208.63125610]
[57.96111679 223.63125610]
[57.96111679 238.63125610]
[57.96111679 253.63125610]
[57.96111679 268.63125610]
[57.96111679 283.63125610]
[57.96111679 298.63125610]
[57.96111679 313.63125610]
[57.96111679 328.63125610]
[72.57112885 332.37268066]
[85.79129028 339.63067627]
[96.79055786 349.94894409]
[104.87752533 362.67889404]
[109.54383087 377.02032471]
[110.49614716 392.07168579]
[107.67461395 406.88687134]
[101.25658417 420.53457642]
[91.64551544 432.15689087]
[79.44555664 441.02322388]
[65.42361450 446.57623291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[48 131]
[49 130]
[50 129]
[51 128]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
