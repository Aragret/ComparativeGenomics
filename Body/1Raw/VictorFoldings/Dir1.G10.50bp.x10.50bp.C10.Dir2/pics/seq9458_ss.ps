%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACUAACCGGGGGGGGGGUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAxxxxxxxxxxAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCCCCCCCCCCCAAAACUAACC\
) } def
/len { sequence length } bind def

/coor [
[108.78833771 403.46231079]
[95.56813812 396.18981934]
[84.68133545 385.74282837]
[76.87020111 372.83358765]
[72.66732025 358.34225464]
[72.35925293 343.25692749]
[75.96698761 328.60610962]
[83.24456024 315.38870239]
[93.69577026 304.50595093]
[106.60803223 296.69979858]
[121.10096741 292.50250244]
[120.78890991 277.50576782]
[120.47686005 262.50900269]
[120.16480255 247.51225281]
[119.85274506 232.51550293]
[119.54068756 217.51873779]
[119.22863007 202.52198792]
[118.91657257 187.52523804]
[118.60452271 172.52848816]
[118.29246521 157.53172302]
[117.98040771 142.53497314]
[117.66835022 127.53822327]
[111.44863129 123.34714508]
[99.00919342 114.96500397]
[92.78946686 110.77393341]
[78.77275848 116.11544800]
[64.75604248 121.45695496]
[52.10831451 132.74726868]
[37.75798798 123.71929169]
[42.46058655 107.43058777]
[59.41453171 107.44024658]
[73.43124390 102.09873199]
[87.44795990 96.75721741]
[97.19561005 85.35620117]
[100.29393005 70.67967224]
[103.39225006 56.00314713]
[105.87737274 41.21044159]
[107.74498749 26.32716179]
[109.61259460 11.44388103]
[111.48020935 -3.43939853]
[113.34782410 -18.32267761]
[98.66107178 -21.41440582]
[84.27979279 -25.70840454]
[70.30223846 -31.17534065]
[56.82387924 -37.77787399]
[43.93679428 -45.47089386]
[31.72901535 -54.20185471]
[20.28393555 -63.91111374]
[9.67973804 -74.53234100]
[-0.01113919 -85.99298859]
[-8.72249699 -98.21476746]
[-16.39482689 -111.11418152]
[-22.97571945 -124.60311890]
[-28.42021751 -138.58943176]
[-32.69112778 -152.97758484]
[-35.75928116 -167.66928101]
[-37.60371399 -182.56416321]
[-38.21183014 -197.56048584]
[-37.57946777 -212.55580139]
[-35.71095657 -227.44769287]
[-32.61905670 -242.13441467]
[-28.32488441 -256.51562500]
[-22.85778046 -270.49313354]
[-16.25508881 -283.97140503]
[-8.56191349 -296.85839844]
[0.16919360 -309.06607056]
[9.87858772 -320.51104736]
[20.49994469 -331.11511230]
[31.96070671 -340.80584717]
[44.18258667 -349.51705933]
[57.08209229 -357.18923950]
[70.57110596 -363.76995850]
[84.55748749 -369.21429443]
[98.94568634 -373.48504639]
[113.63742065 -376.55300903]
[128.53233337 -378.39727783]
[143.52865601 -379.00521851]
[158.52397156 -378.37268066]
[173.41583252 -376.50396729]
[188.10250854 -373.41189575]
[202.48368835 -369.11755371]
[216.46112061 -363.65029907]
[229.93931580 -357.04742432]
[242.82621765 -349.35409546]
[255.03378296 -340.62286377]
[266.47863770 -330.91333008]
[277.08258057 -320.29183960]
[286.77319336 -308.83096313]
[295.48425293 -296.60897827]
[303.15628052 -283.70938110]
[309.73684692 -270.22030640]
[315.18099976 -256.23385620]
[319.45156860 -241.84559631]
[322.51937866 -227.15382385]
[324.36346436 -212.25889587]
[324.97122192 -197.26255798]
[324.33850098 -182.26725769]
[322.46963501 -167.37541199]
[319.37738037 -152.68876648]
[315.08285522 -138.30764771]
[309.61541748 -124.33028412]
[303.01242065 -110.85216522]
[295.31893921 -97.96535492]
[286.58752441 -85.75788879]
[276.87786865 -74.31315613]
[266.25625610 -63.70933914]
[254.79525757 -54.01887131]
[242.57318115 -45.30794907]
[229.67349243 -37.63608170]
[216.18431091 -31.05567169]
[202.19781494 -25.61167336]
[187.80950928 -21.34127426]
[173.11770630 -18.27364731]
[158.22274780 -16.42974854]
[143.22640991 -15.82217026]
[128.23110962 -16.45506477]
[126.36349487 -1.57178533]
[124.49588013 13.31149483]
[122.62826538 28.19477463]
[120.76065063 43.07805252]
[122.43822479 45.40035629]
[123.26612091 48.54814148]
[122.91712189 52.18958282]
[121.19446564 55.87787628]
[118.06877899 59.10147095]
[114.97045898 73.77799225]
[111.87213898 88.45452118]
[132.66510010 127.22616577]
[132.97715759 142.22291565]
[133.28921509 157.21966553]
[133.60127258 172.21643066]
[133.91333008 187.21318054]
[134.22538757 202.20993042]
[134.53744507 217.20668030]
[134.84950256 232.20344543]
[135.16156006 247.20019531]
[135.47361755 262.19696045]
[135.78565979 277.19369507]
[136.09771729 292.19046021]
[150.75271606 295.78121948]
[163.97853088 303.04348755]
[174.87339783 313.48208618]
[182.69448853 326.38528442]
[186.90855408 340.87335205]
[187.22828674 355.95843506]
[183.63185120 370.61206055]
[176.36448669 383.83505249]
[165.92169189 394.72589111]
[153.01545715 402.54202271]
[138.52577209 406.75048828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[25 33]
[26 32]
[27 31]
[34 127]
[35 126]
[36 125]
[37 120]
[38 119]
[39 118]
[40 117]
[41 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
