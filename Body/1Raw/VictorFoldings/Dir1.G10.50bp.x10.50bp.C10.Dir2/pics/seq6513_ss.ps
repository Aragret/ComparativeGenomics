%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUCGCAUCGGGGGGGGGGUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUxxxxxxxxxxCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUCCCCCCCCCCUACUCGCAUC\
) } def
/len { sequence length } bind def

/coor [
[136.77330017 556.24871826]
[122.92736053 550.23266602]
[111.21869659 540.70324707]
[102.51617432 528.36761475]
[97.46556854 514.14105225]
[96.44168091 499.07940674]
[99.52047729 484.30023193]
[106.47350311 470.90029907]
[116.78478241 459.87399292]
[129.68916321 452.03945923]
[144.22904968 447.97814941]
[144.22904968 432.97814941]
[144.22904968 417.97814941]
[144.22904968 402.97814941]
[144.22904968 387.97814941]
[144.22904968 372.97814941]
[144.22904968 357.97814941]
[144.22904968 342.97814941]
[144.22904968 327.97814941]
[144.22904968 312.97814941]
[142.82675171 298.04385376]
[140.03442383 283.30603027]
[127.88133240 270.68453979]
[134.01672363 253.35430908]
[130.91839600 238.67779541]
[118.50536346 226.31185913]
[124.27889252 208.85774231]
[120.87591553 194.24884033]
[117.47293854 179.63995361]
[114.06996155 165.03105164]
[110.66698456 150.42216492]
[106.21016693 136.09956360]
[100.72313690 122.13917542]
[95.23610687 108.17878723]
[90.96665192 105.01263428]
[88.80830383 99.66228485]
[89.82451630 93.52178955]
[84.92296600 79.34523010]
[80.02141571 65.16867065]
[74.53438568 51.20828247]
[68.47137451 37.48822784]
[59.83225632 25.22585869]
[48.95343399 14.89865494]
[38.07460785 4.57144976]
[24.70858383 8.08550453]
[11.46097183 4.54801464]
[1.78036809 -5.00899410]
[-1.86836970 -18.00123024]
[1.36884749 -30.99031830]
[-9.29277897 -41.54160690]
[-19.95440483 -52.09289932]
[-35.20579147 -56.30072784]
[-38.80945206 -70.75281525]
[-49.47107697 -81.30410767]
[-65.46198273 -84.94043732]
[-70.04913330 -100.68495941]
[-58.51365662 -112.34106445]
[-42.72226334 -107.91794586]
[-38.91978836 -91.96572876]
[-28.25816154 -81.41444397]
[-13.76936626 -77.96131134]
[-9.40311432 -62.75452423]
[1.25851154 -52.20323563]
[11.92013741 -41.65194321]
[27.99519157 -44.82967377]
[42.95658112 -37.74992752]
[50.84907150 -23.01255608]
[48.40181351 -6.30737543]
[59.28063583 4.01982927]
[70.15946198 14.34703445]
[66.27783203 -0.14202930]
[66.75601196 -15.13440609]
[71.55305481 -29.34666634]
[80.25831604 -41.56216812]
[92.12657166 -50.73519516]
[106.14184570 -56.08049011]
[121.10434723 -57.14046097]
[135.73320007 -53.82437897]
[148.77612305 -46.41611099]
[159.11654663 -35.54984665]
[165.86927795 -22.15579414]
[168.45625305 -7.38055897]
[166.65600586 7.51102018]
[160.62265015 21.24414444]
[150.87268066 32.64318466]
[138.24075317 40.73232269]
[123.80820465 44.81908417]
[108.81055450 44.55361938]
[94.53167725 39.95865631]
[82.19142914 31.42521477]
[88.25444031 45.14526749]
[90.88834381 46.27215958]
[93.21895599 48.54420853]
[94.79490662 51.84546280]
[95.21744537 55.89422989]
[94.19797516 60.26712036]
[99.09952545 74.44367981]
[104.00107574 88.62023926]
[109.19649506 102.69175720]
[114.68352509 116.65214539]
[120.17055511 130.61253357]
[126.52299500 117.02406311]
[140.04898071 110.53963470]
[154.62109375 114.09676361]
[163.63806152 126.08403015]
[163.01507568 141.07109070]
[153.03436279 152.26864624]
[138.21728516 154.60411072]
[125.27587128 147.01918030]
[128.67884827 161.62808228]
[132.08183289 176.23696899]
[135.48480225 190.84587097]
[138.88778687 205.45475769]
[149.43652344 212.94996643]
[151.94378662 225.23542786]
[145.59492493 235.57946777]
[148.69325256 250.25599670]
[159.08377075 257.96902466]
[161.33491516 270.30398560]
[154.77223206 280.51373291]
[157.56455994 295.25152588]
[165.04431152 282.24948120]
[178.29731750 275.22396851]
[193.25640869 276.33105469]
[205.33082581 285.23098755]
[210.81507874 299.19247437]
[208.02612305 313.93090820]
[197.81985474 324.92327881]
[183.32844543 328.79614258]
[168.99913025 324.36099243]
[159.22904968 312.97814941]
[159.22904968 327.97814941]
[159.22904968 342.97814941]
[159.22904968 357.97814941]
[159.22904968 372.97814941]
[159.22904968 387.97814941]
[159.22904968 402.97814941]
[159.22904968 417.97814941]
[159.22904968 432.97814941]
[159.22904968 447.97814941]
[173.76893616 452.03945923]
[186.67332458 459.87399292]
[196.98460388 470.90029907]
[203.93762207 484.30023193]
[207.01641846 499.07940674]
[205.99253845 514.14105225]
[200.94192505 528.36761475]
[192.23941040 540.70324707]
[180.53074646 550.23266602]
[166.68479919 556.24871826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 121]
[22 120]
[24 117]
[25 116]
[27 113]
[28 112]
[29 111]
[30 110]
[31 109]
[32 101]
[33 100]
[34 99]
[37 98]
[38 97]
[39 96]
[40 91]
[41 90]
[42 70]
[43 69]
[44 68]
[49 64]
[50 63]
[51 62]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
