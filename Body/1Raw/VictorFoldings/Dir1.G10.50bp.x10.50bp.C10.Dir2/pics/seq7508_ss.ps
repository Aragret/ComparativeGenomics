%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUCAUUUUGGGGGGGGGGCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAxxxxxxxxxxAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCCCCCCCCCCCUUAAUCAUUUU\
) } def
/len { sequence length } bind def

/coor [
[69.31980896 396.68273926]
[55.61765289 390.42184448]
[43.65253830 381.26852417]
[34.02462387 369.68182373]
[27.21684647 356.24301147]
[23.57067680 341.62612915]
[23.26901054 326.56436157]
[26.32697296 311.81323242]
[32.59118271 298.11257935]
[41.74742889 286.14968872]
[53.33643723 276.52456665]
[66.77690887 269.72006226]
[81.39466858 266.07742310]
[81.09066772 251.08050537]
[80.78665924 236.08358765]
[80.48265839 221.08666992]
[80.17864990 206.08975220]
[79.87464905 191.09283447]
[79.57064056 176.09591675]
[79.26663971 161.09899902]
[78.96263123 146.10208130]
[78.65863037 131.10516357]
[72.44004822 116.70692444]
[73.45938110 103.21312714]
[79.73363495 93.64169312]
[88.25050354 89.51684570]
[95.84006500 90.62957764]
[92.22763062 76.07106781]
[88.61518860 61.51255417]
[77.78213501 49.98192215]
[82.22660828 35.76587677]
[71.39355469 24.23524475]
[75.83802795 10.01920128]
[72.22558594 -4.53931189]
[68.61315155 -19.09782410]
[64.90370178 -22.93613815]
[63.24454880 -27.37543488]
[63.51557159 -31.51849556]
[65.25231171 -34.65077972]
[62.53123856 -49.40190887]
[59.81016159 -64.15303802]
[57.08908463 -78.90415955]
[52.88962555 -93.30432129]
[47.25486755 -107.20574188]
[41.62011337 -121.10716248]
[35.98535538 -135.00859070]
[30.35060120 -148.91000366]
[24.71584511 -162.81143188]
[10.08852196 -159.35572815]
[-4.89489412 -158.17349243]
[-19.88316917 -159.29243469]
[-34.52495956 -162.68630981]
[-48.47703552 -168.27558899]
[-61.41234589 -175.92922974]
[-73.02766418 -185.46781921]
[-83.05071259 -196.66777039]
[-91.24653625 -209.26654053]
[-97.42301941 -222.96878052]
[-101.43536377 -237.45330811]
[-103.18952179 -252.38058472]
[-102.64437103 -267.40066528]
[-99.81269836 -282.16149902]
[-94.76087189 -296.31704712]
[-87.60731506 -309.53549194]
[-78.51972961 -321.50695801]
[-67.71112061 -331.95083618]
[-55.43487930 -340.62228394]
[-41.97876358 -347.31808472]
[-27.65820694 -351.88119507]
[-12.80890751 -354.20471191]
[2.22104812 -354.23416138]
[17.07933617 -351.96884155]
[31.41765594 -347.46182251]
[44.89989853 -340.81881714]
[57.21002197 -332.19552612]
[68.05945587 -321.79406738]
[77.19387054 -309.85827637]
[84.39915466 -296.66796875]
[89.50639343 -282.53231812]
[92.39587402 -267.78271484]
[92.99985504 -252.76486206]
[91.30419159 -237.83084106]
[87.34861755 -223.33070374]
[81.22586060 -209.60437012]
[73.07945251 -196.97358704]
[63.10035706 -185.73446655]
[51.52249527 -176.15043640]
[38.61726761 -168.44618225]
[44.25202179 -154.54475403]
[49.88677979 -140.64334106]
[55.52153397 -126.74192047]
[61.15628815 -112.84049225]
[66.79104614 -98.93907166]
[71.00204468 -113.33586121]
[81.75424194 -123.79484558]
[96.26192474 -127.60628510]
[110.76641846 -123.78271484]
[121.50986481 -113.31474304]
[125.70882416 -98.91444397]
[122.27542877 -84.31266785]
[112.09921265 -73.29248047]
[97.81664276 -68.70901489]
[83.12807465 -71.74976349]
[71.84020996 -81.62523651]
[74.56128693 -66.87410736]
[77.28236389 -52.12298584]
[80.00344086 -37.37185669]
[83.17166138 -22.71026230]
[86.78410339 -8.15174961]
[90.39653778 6.40676355]
[100.97120667 16.89607239]
[96.78511810 32.15343857]
[107.35979462 42.64274979]
[103.17370605 57.90011597]
[106.78614044 72.45862579]
[110.39857483 87.01714325]
[120.95130157 97.67735291]
[135.47245789 101.43714142]
[147.36251831 91.46687317]
[162.84445190 90.42314148]
[175.96513367 98.70729065]
[181.67941284 113.13388824]
[177.79002380 128.15560913]
[165.79251099 137.99630737]
[150.30015564 138.87202454]
[137.27011108 130.44602966]
[131.71266174 115.95829773]
[117.19151306 112.19850922]
[111.30751801 116.84916687]
[113.47901917 131.69116211]
[99.53954315 126.15048981]
[93.65554810 130.80116272]
[93.95955658 145.79808044]
[94.26355743 160.79499817]
[94.56756592 175.79191589]
[94.87156677 190.78883362]
[95.17556763 205.78575134]
[95.47957611 220.78266907]
[95.78357697 235.77958679]
[96.08758545 250.77650452]
[96.39158630 265.77343750]
[111.14496613 268.82067871]
[124.85015106 275.07492065]
[136.81970215 284.22247314]
[146.45323181 295.80447388]
[153.26751709 309.23999023]
[156.92076111 323.85510254]
[157.22973633 338.91671753]
[154.17892456 353.66934204]
[147.92134094 367.37301636]
[138.77090454 379.34036255]
[127.18656158 388.97106934]
[113.74938965 395.78210449]
[99.13339233 399.43182373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[27 116]
[28 115]
[29 114]
[31 112]
[33 110]
[34 109]
[35 108]
[39 107]
[40 106]
[41 105]
[42 104]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
