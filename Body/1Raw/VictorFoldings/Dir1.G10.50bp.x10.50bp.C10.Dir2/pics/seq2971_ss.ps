%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUACCCUGGGGGGGGGGAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUxxxxxxxxxxCUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUCCCCCCCCCCAAGCUACCCU\
) } def
/len { sequence length } bind def

/coor [
[86.33507538 434.74307251]
[72.48913574 428.72705078]
[60.78047180 419.19763184]
[52.07794952 406.86196899]
[47.02734756 392.63543701]
[46.00345612 377.57376099]
[49.08225250 362.79458618]
[56.03527451 349.39465332]
[66.34655762 338.36831665]
[79.25093842 330.53381348]
[93.79082489 326.47250366]
[93.79082489 311.47250366]
[93.79082489 296.47250366]
[93.79082489 281.47250366]
[93.79082489 266.47250366]
[93.79082489 251.47250366]
[93.79082489 236.47250366]
[93.79082489 221.47250366]
[93.79082489 206.47250366]
[93.79082489 191.47250366]
[93.79082489 176.47250366]
[84.19972229 161.80926514]
[93.45397949 145.92410278]
[93.14192200 130.92735291]
[84.38331604 127.56180573]
[76.99476624 121.77827454]
[71.62446594 114.08413696]
[68.74354553 105.15440369]
[68.60474396 95.77246857]
[71.22025299 86.76141357]
[76.36060333 78.91178131]
[67.84951019 66.56021118]
[59.33842468 54.20863724]
[50.69930649 41.94626999]
[39.92849731 31.50645638]
[27.48905754 23.12431335]
[15.04961777 14.74217033]
[2.61017728 6.36002684]
[-9.82926273 -2.02211642]
[-22.26870346 -10.40425968]
[-34.70814514 -18.78640366]
[-47.14758301 -27.16854668]
[-59.58702469 -35.55068970]
[-71.65453339 -26.40443802]
[-86.03875732 -21.67443848]
[-101.17939758 -21.87376785]
[-115.43411255 -26.98080254]
[-127.25666046 -36.44157028]
[-135.36460876 -49.22983932]
[-138.87847900 -63.95843124]
[-137.41711426 -79.02970123]
[-131.13903809 -92.80882263]
[-120.72521973 -103.80115509]
[-107.30529785 -110.81431580]
[-92.33496094 -113.08758545]
[-77.43807983 -110.37435913]
[-64.23055267 -102.96896362]
[-54.14503479 -91.67466736]
[-48.27552414 -77.71660614]
[-47.25870895 -62.60883331]
[-51.20487976 -47.99013138]
[-38.76544189 -39.60798645]
[-26.32600021 -31.22584343]
[-13.88656044 -22.84370041]
[-1.44711983 -14.46155643]
[10.99232006 -6.07941341]
[23.43176079 2.30272985]
[35.87120056 10.68487263]
[48.31064224 19.06701660]
[42.21491623 5.36146498]
[40.80853653 -9.57245922]
[44.23838425 -24.17506599]
[52.14624786 -36.92126846]
[63.70623398 -46.47986221]
[77.71102905 -51.85255432]
[92.69796753 -52.47821808]
[107.10184479 -48.29151535]
[119.41831207 -39.72969818]
[128.36103821 -27.68696404]
[132.99607849 -13.42104340]
[132.83932495 1.57813728]
[127.90715790 15.74407291]
[118.71469116 27.59728241]
[106.22198486 35.89982224]
[91.73375702 39.78458405]
[76.76316071 38.84584045]
[62.87114334 33.18006134]
[69.37435913 36.79307175]
[71.68999481 45.69754791]
[80.20108795 58.04911804]
[88.71217346 70.40068817]
[111.58809662 70.51695251]
[128.42108154 86.00799561]
[140.21643066 75.46378326]
[154.31805420 80.25891876]
[168.96156311 77.00809479]
[183.60505676 73.75727081]
[198.24856567 70.50643921]
[212.89205933 67.25561523]
[220.49659729 56.78542328]
[232.80746460 54.40608978]
[243.08491516 60.86220932]
[257.79287720 57.91672897]
[272.50082397 54.97124481]
[287.20880127 52.02576065]
[295.76242065 38.73625183]
[311.22534180 35.46916962]
[324.42367554 44.16281509]
[327.52709961 59.65940857]
[318.69439697 72.76509094]
[303.16583252 75.70449066]
[290.15429688 66.73372650]
[275.44631958 69.67920685]
[260.73837280 72.62468719]
[246.03039551 75.57017517]
[233.53599548 87.85390472]
[216.14288330 81.89911652]
[201.49938965 85.14994049]
[186.85588074 88.40077209]
[172.21238708 91.65159607]
[157.56887817 94.90242004]
[146.82093811 105.21411133]
[131.67190552 100.65149689]
[128.51524353 113.79909515]
[120.16366577 124.43277740]
[108.13867188 130.61529541]
[108.45072937 145.61204529]
[117.22380829 155.12451172]
[117.13938904 167.66291809]
[108.79082489 176.47250366]
[108.79082489 191.47250366]
[108.79082489 206.47250366]
[108.79082489 221.47250366]
[108.79082489 236.47250366]
[108.79082489 251.47250366]
[108.79082489 266.47250366]
[108.79082489 281.47250366]
[108.79082489 296.47250366]
[108.79082489 311.47250366]
[108.79082489 326.47250366]
[123.33071136 330.53381348]
[136.23509216 338.36831665]
[146.54638672 349.39465332]
[153.49940491 362.79458618]
[156.57820129 377.57376099]
[155.55430603 392.63543701]
[150.50370789 406.86196899]
[141.80117798 419.19763184]
[130.09251404 428.72705078]
[116.24658203 434.74307251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 127]
[24 126]
[31 91]
[32 90]
[33 89]
[34 87]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[93 123]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
