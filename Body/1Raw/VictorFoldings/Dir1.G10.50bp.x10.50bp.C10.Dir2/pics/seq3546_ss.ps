%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCGCUCUGGGGGGGGGGUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCxxxxxxxxxxCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCCCCCCCCCCCAUCGCUGU\
) } def
/len { sequence length } bind def

/coor [
[9.48065853 270.33178711]
[-1.21526933 264.20153809]
[-11.49774933 257.40051270]
[-21.32477951 249.95655823]
[-30.65621758 241.90005493]
[-39.45394897 233.26390076]
[-47.68202972 224.08340454]
[-55.30685806 214.39602661]
[-62.29728317 204.24137878]
[-68.62474823 193.66091919]
[-82.01103210 200.42903137]
[-95.39731598 207.19714355]
[-108.78360748 213.96525574]
[-122.16989136 220.73336792]
[-135.48504639 227.64036560]
[-148.72763062 234.68550110]
[-161.97021484 241.73063660]
[-175.21279907 248.77577209]
[-188.45538330 255.82090759]
[-201.69796753 262.86605835]
[-214.94055176 269.91119385]
[-216.10591125 285.29446411]
[-225.42132568 297.59188843]
[-239.91427612 302.87939453]
[-254.96014404 299.46972656]
[-265.75781250 288.45095825]
[-268.86181641 273.33908081]
[-263.28164673 258.95626831]
[-250.79794312 249.89199829]
[-235.39419556 249.03868103]
[-221.98568726 256.66857910]
[-208.74310303 249.62345886]
[-195.50051880 242.57832336]
[-182.25793457 235.53318787]
[-169.01535034 228.48805237]
[-155.77276611 221.44291687]
[-142.53018188 214.39778137]
[-138.07337952 208.44105530]
[-128.93800354 207.34709167]
[-115.55171967 200.57897949]
[-102.16543579 193.81085205]
[-88.77915192 187.04273987]
[-75.39286041 180.27462769]
[-85.70020294 152.17381287]
[-91.53607941 122.81671143]
[-92.75997162 92.91020203]
[-89.34240723 63.17441177]
[-81.36568451 34.32534027]
[-69.02186584 7.05764484]
[-52.60818100 -17.97209740]
[-64.10998535 -27.60062408]
[-75.61178589 -37.22914886]
[-91.84962463 -39.52365112]
[-97.72966003 -54.83237839]
[-87.20301819 -67.40702820]
[-71.09860229 -64.31188202]
[-65.98326111 -48.73095322]
[-54.48145676 -39.10242844]
[-42.97965622 -29.47389984]
[-35.66054916 -37.12362289]
[-27.93275833 -44.36024857]
[-19.81956100 -51.16198349]
[-11.34539986 -57.50833130]
[-2.53580356 -63.38017654]
[6.58268881 -68.75982666]
[15.98260689 -73.63107300]
[25.63563347 -77.97924805]
[35.51268768 -81.79125214]
[45.58401108 -85.05559540]
[55.81927109 -87.76244354]
[66.18762207 -89.90364838]
[76.65784454 -91.47275543]
[87.19837952 -92.46504211]
[97.77748108 -92.87751007]
[108.36328125 -92.70892334]
[118.92388153 -91.95978546]
[129.42747498 -90.63236237]
[139.84242249 -88.73063660]
[150.13732910 -86.26036072]
[160.28120422 -83.22895050]
[170.24346924 -79.64556122]
[179.99412537 -75.52097321]
[189.50379944 -70.86761475]
[198.74383545 -65.69950867]
[207.68640137 -60.03222656]
[216.30455017 -53.88283157]
[224.57231140 -47.26985550]
[232.46481323 -40.21321869]
[239.95823669 -32.73418045]
[247.03004456 -24.85527420]
[253.65890503 -16.60023117]
[259.82485962 -7.99392271]
[265.50933838 0.93772477]
[270.69519043 10.16780376]
[275.36682129 19.66850853]
[279.51016235 29.41121674]
[283.11270142 39.36657715]
[297.52490234 35.20869064]
[311.93713379 31.05080223]
[326.34933472 26.89291573]
[340.76156616 22.73502731]
[344.37515259 7.80728531]
[354.98010254 -3.30264616]
[369.72372437 -7.60625124]
[384.64007568 -3.94588137]
[395.71670532 6.69384193]
[399.97409058 21.45088768]
[396.26696777 36.35568237]
[385.59259033 47.39891434]
[370.82226562 51.61000443]
[355.92916870 47.85619736]
[344.91946411 37.14724350]
[330.50723267 41.30513000]
[316.09503174 45.46302032]
[301.68280029 49.62090683]
[287.27059937 53.77879333]
[289.84072876 65.83605194]
[291.63537598 78.03286743]
[292.64724731 90.31941223]
[292.87216187 102.64550018]
[292.30923462 114.96078491]
[290.96078491 127.21495819]
[288.83227539 139.35795593]
[285.93240356 151.34019470]
[282.27304077 163.11270142]
[277.86911011 174.62741089]
[272.73861694 185.83728027]
[266.90252686 196.69651794]
[260.38467407 207.16076660]
[253.21165466 217.18728638]
[245.41281128 226.73510742]
[237.01995850 235.76524353]
[228.06742859 244.24079895]
[218.59175110 252.12715149]
[208.63163757 259.39208984]
[198.22778320 266.00595093]
[187.42269897 271.94168091]
[176.26049805 277.17507935]
[164.78678894 281.68475342]
[153.04843140 285.45223999]
[141.09338379 288.46221924]
[128.97047424 290.70233154]
[116.72923279 292.16348267]
[104.41964722 292.83966064]
[92.09201050 292.72814941]
[79.79667664 291.82934570]
[67.58386993 290.14697266]
[55.50347900 287.68786621]
[43.60484695 284.46206665]
[31.93658066 280.48281860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[50 59]
[51 58]
[52 57]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
