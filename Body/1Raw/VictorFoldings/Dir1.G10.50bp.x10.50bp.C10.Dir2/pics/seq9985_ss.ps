%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCCUACAGGGGGGGGGGAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAxxxxxxxxxxAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCCCCCCCCCCCUCUUCCUACA\
) } def
/len { sequence length } bind def

/coor [
[72.60101318 356.84310913]
[60.71674347 347.56802368]
[51.39803314 335.71789551]
[45.18666840 321.98175049]
[42.44376755 307.15811157]
[43.32879639 292.10885620]
[47.79030228 277.70892334]
[55.56890106 264.79547119]
[66.21234894 254.11930847]
[79.10186005 246.30113220]
[93.48804474 241.79545593]
[92.55242157 226.82466125]
[91.61679077 211.85388184]
[90.68115997 196.88308716]
[89.74553680 181.91229248]
[88.80990601 166.94149780]
[87.87427521 151.97070312]
[86.93865204 136.99992371]
[86.00302124 122.02912903]
[80.37106323 108.12657166]
[70.62341309 96.72554779]
[60.87575912 85.32453156]
[48.68195724 94.07582092]
[35.78992081 101.76146698]
[22.29253006 108.32609558]
[8.28704357 113.72240448]
[-6.12563086 117.91151428]
[-20.84164619 120.86324310]
[-35.75497437 122.55632782]
[-50.75815964 122.97856140]
[-65.74310303 122.12689972]
[-80.60183716 120.00749207]
[-95.22729492 116.63559723]
[-109.51411438 112.03550720]
[-123.35933685 106.24037933]
[-136.66322327 99.29196167]
[-149.32991028 91.24031830]
[-161.26812744 82.14346313]
[-172.39186096 72.06694031]
[-182.62097168 61.08335495]
[-191.88174438 49.27183914]
[-200.10746765 36.71749878]
[-207.23886108 23.51079369]
[-213.22453308 9.74687672]
[-218.02139282 -4.47508049]
[-221.59484863 -19.05260658]
[-223.91915894 -33.88066864]
[-224.97756958 -48.85242844]
[-224.76246643 -63.86001205]
[-223.27540588 -78.79528809]
[-220.52708435 -93.55064392]
[-216.53730774 -108.01976776]
[-211.33483887 -122.09841156]
[-204.95713806 -135.68511963]
[-197.45018005 -148.68202209]
[-188.86804199 -160.99545288]
[-179.27255249 -172.53671265]
[-168.73286438 -183.22262573]
[-157.32490540 -192.97621155]
[-145.13087463 -201.72718811]
[-132.23863220 -209.41249084]
[-118.74108124 -215.97677612]
[-104.73545074 -221.37272644]
[-90.32266998 -225.56146240]
[-75.60657501 -228.51281738]
[-60.69320679 -230.20550537]
[-45.69001389 -230.62734985]
[-30.70509148 -229.77531433]
[-15.84641266 -227.65551758]
[-1.22103739 -224.28324890]
[13.06565857 -219.68278503]
[26.91073608 -213.88729858]
[40.21443939 -206.93853760]
[52.88091660 -198.88656616]
[64.81890106 -189.78941345]
[75.94237518 -179.71260071]
[86.17120361 -168.72874451]
[95.43167114 -156.91699219]
[103.65706635 -144.36244202]
[110.78811646 -131.15554810]
[116.77344513 -117.39147949]
[121.56992340 -103.16939545]
[125.14300537 -88.59177399]
[127.46692657 -73.76365662]
[128.52496338 -58.79186630]
[128.30947876 -43.78429031]
[126.82202148 -28.84905243]
[124.07331848 -14.09376526]
[120.08317566 0.37525582]
[114.88033295 14.45376110]
[108.50228882 28.04031181]
[100.99498749 41.03701782]
[92.41252899 53.35023117]
[82.81674957 64.89123535]
[72.27677917 75.57687378]
[82.02442932 86.97789764]
[91.77208710 98.37892151]
[84.72188568 76.59694672]
[110.34735870 53.62936401]
[124.24991608 47.99740601]
[138.15246582 42.36545181]
[152.05502319 36.73349380]
[164.46513367 25.18250084]
[179.00016785 33.90998840]
[174.63745117 50.29299927]
[157.68698120 50.63605118]
[143.78442383 56.26800537]
[129.88186646 61.89996338]
[115.97931671 67.53192139]
[116.29130554 75.02542877]
[129.58244324 81.97853088]
[116.91527557 90.01244354]
[117.22726440 97.50595093]
[131.54986572 101.96276855]
[145.91804504 106.27035522]
[160.33026123 110.42823792]
[174.74247742 114.58612823]
[189.42515564 108.12094116]
[203.56686401 115.69666290]
[206.31930542 131.50184631]
[195.57104492 143.41209412]
[179.56721497 142.29090881]
[170.58459473 128.99833679]
[156.17237854 124.84045410]
[141.76016235 120.68257141]
[134.41413879 121.85794067]
[127.09304810 116.28536224]
[112.77045441 111.82855225]
[100.97381592 121.09349823]
[101.90943909 136.06428528]
[102.84506989 151.03507996]
[103.78070068 166.00587463]
[104.71632385 180.97666931]
[105.65195465 195.94746399]
[106.58758545 210.91824341]
[107.52320862 225.88903809]
[108.45883942 240.85983276]
[123.29407501 243.53924561]
[137.05670166 249.69175720]
[148.94659424 258.95965576]
[158.27249146 270.80410767]
[164.49218750 284.53649902]
[167.24406433 299.35845947]
[166.36816406 314.40826416]
[161.91539001 328.81091309]
[154.14462280 341.72906494]
[143.50764465 352.41168213]
[130.62287903 360.23767090]
[116.23942566 364.75204468]
[101.19351959 365.69238281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 97]
[21 96]
[22 95]
[99 109]
[100 108]
[101 107]
[102 106]
[113 128]
[114 127]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
