%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCCUUGUGGGGGGGGGGAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAxxxxxxxxxxCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCCCCCCCCCCCAUCCCCUUAU\
) } def
/len { sequence length } bind def

/coor [
[84.60560608 427.01599121]
[72.04737854 418.66485596]
[61.96115875 407.45239258]
[54.98096466 394.08349609]
[51.54558182 379.39849854]
[51.87095642 364.32052612]
[55.93664169 349.79742432]
[63.48706055 336.74206543]
[74.04759216 325.97518921]
[86.95438385 318.17355347]
[101.39611053 313.82760620]
[100.77213287 298.84057617]
[100.14816284 283.85354614]
[99.52418518 268.86654663]
[98.90020752 253.87953186]
[98.27622986 238.89251709]
[97.65225220 223.90550232]
[97.02827454 208.91848755]
[96.40429688 193.93145752]
[95.78031921 178.94444275]
[84.67948914 169.08000183]
[83.83319092 153.88992310]
[94.25519562 142.31324768]
[93.63121796 127.32622528]
[82.26393127 126.28453064]
[71.07064056 120.33089447]
[56.84386063 125.08470917]
[42.61708069 129.83851624]
[29.51063919 140.59294128]
[15.54828453 130.97581482]
[20.92440033 114.89683533]
[37.86326599 115.61174774]
[52.09004593 110.85793304]
[66.31682587 106.10411072]
[66.94080353 91.11709595]
[53.15842056 85.19713593]
[39.37604141 79.27717590]
[25.59365845 73.35720825]
[11.81127739 67.43724823]
[-1.97110379 61.51728439]
[-15.75348473 55.59732056]
[-29.53586578 49.67735672]
[-43.31824875 43.75739288]
[-57.10062790 37.83742905]
[-71.68455505 43.92714691]
[-86.27107239 37.84363556]
[-92.20625305 23.19614029]
[-85.96887207 8.67475700]
[-71.25944519 2.89476681]
[-56.80481720 9.28533459]
[-51.18066788 24.05504990]
[-37.39828491 29.97501183]
[-23.61590385 35.89497375]
[-9.83352184 41.81493759]
[3.94885921 47.73490143]
[17.73124123 53.65486526]
[31.51362228 59.57482910]
[45.29600525 65.49478912]
[59.07838440 71.41475677]
[72.86076355 77.33471680]
[92.78651428 69.12265015]
[111.33823395 74.33428955]
[120.84659576 62.73295212]
[130.35494995 51.13161087]
[139.86331177 39.53026962]
[149.37167358 27.92892838]
[138.96322632 17.10300636]
[129.90827942 5.12200594]
[122.33395386 -7.84587717]
[116.34658813 -21.61859512]
[112.03022766 -36.00279999]
[109.44546509 -50.79656219]
[108.62858582 -65.79219818]
[109.59106445 -80.77919006]
[112.31938934 -95.54714966]
[116.77525330 -109.88875580]
[122.89611053 -123.60266876]
[130.59602356 -136.49638367]
[139.76690674 -148.38887024]
[150.27999878 -159.11318970]
[161.98774719 -168.51878357]
[174.72575378 -176.47361755]
[188.31521606 -182.86602783]
[202.56536865 -187.60624695]
[217.27613831 -190.62776184]
[232.24102783 -191.88812256]
[247.24993896 -191.36965942]
[262.09219360 -189.07965088]
[276.55938721 -185.05023193]
[290.44845581 -179.33796692]
[303.56442261 -172.02307129]
[315.72314453 -163.20820618]
[326.75396729 -153.01713562]
[336.50195312 -141.59292603]
[344.83035278 -129.09594727]
[351.62216187 -115.70163727]
[356.78210449 -101.59804535]
[360.23770142 -86.98314667]
[361.94046021 -72.06212616]
[361.86648560 -57.04443741]
[360.01678467 -42.14091492]
[356.41732788 -27.56078148]
[351.11868286 -13.50871277]
[344.19519043 -0.18198252]
[335.74407959 12.23232365]
[325.88397217 23.55992889]
[314.75329590 33.64181137]
[302.50830078 42.33643723]
[289.32089233 49.52174377]
[275.37619019 55.09686661]
[260.86999512 58.98353577]
[246.00590515 61.12718964]
[230.99261475 61.49773788]
[216.04086304 60.08996964]
[201.36058044 56.92365646]
[187.15783691 52.04324722]
[173.63201904 45.51725006]
[160.97300720 37.43728638]
[151.46464539 49.03862762]
[141.95629883 60.63996887]
[132.44793701 72.24131012]
[122.93957520 83.84265137]
[128.05705261 100.29299927]
[122.59715271 116.63288116]
[108.61823273 126.70224762]
[109.24221039 141.68927002]
[120.59045410 152.35955811]
[121.00975800 167.56741333]
[110.76733398 178.32046509]
[111.39131165 193.30747986]
[112.01528931 208.29450989]
[112.63926697 223.28152466]
[113.26324463 238.26853943]
[113.88722229 253.25555420]
[114.51119995 268.24255371]
[115.13517761 283.22958374]
[115.75915527 298.21661377]
[116.38313293 313.20361328]
[131.13613892 316.33404541]
[144.64677429 323.03582764]
[156.06575012 332.88760376]
[164.67526245 345.27014160]
[169.93411255 359.40502930]
[171.51171875 374.40377808]
[169.30891418 389.32348633]
[163.46417236 403.22637939]
[154.34487915 415.23843384]
[142.52430725 424.60458374]
[128.74549866 430.73608398]
[113.87460327 433.24746704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 126]
[24 125]
[26 34]
[27 33]
[28 32]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
