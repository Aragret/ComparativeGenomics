%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCCUUCUGGGGGGGGGGAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGxxxxxxxxxxCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCCCCCCCCCCCUAGGCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[83.97603607 393.11328125]
[70.75583649 385.84082031]
[59.86903763 375.39382935]
[52.05790710 362.48455811]
[47.85502625 347.99325562]
[47.54695129 332.90792847]
[51.15469360 318.25708008]
[58.43226624 305.03970337]
[68.88347626 294.15692139]
[81.79573822 286.35079956]
[96.28867340 282.15350342]
[95.97661591 267.15673828]
[95.66455841 252.15998840]
[95.35250092 237.16323853]
[95.04045105 222.16648865]
[94.72839355 207.16973877]
[94.41633606 192.17297363]
[94.10427856 177.17622375]
[93.79222107 162.17947388]
[93.48016357 147.18272400]
[93.16811371 132.18595886]
[78.97740173 126.97708893]
[68.12821960 115.63247681]
[63.20309830 100.11720276]
[65.69128418 83.44255829]
[51.36869049 78.98574066]
[37.04609299 74.52893066]
[22.72349358 70.07211304]
[12.53940487 82.47455597]
[-1.58416843 90.01300812]
[-17.47971916 91.56395721]
[-32.72054672 86.92020416]
[-44.99122620 76.81803131]
[-52.43938065 62.82061386]
[-53.95526505 47.07618713]
[-68.36747742 42.91830063]
[-82.77969360 38.76041412]
[-97.19190979 34.60252762]
[-107.32820892 46.01385117]
[-121.41518402 51.88920212]
[-136.65586853 51.06202316]
[-150.02421570 43.69655228]
[-158.86592102 31.25521088]
[-161.42546082 16.20823479]
[-157.19464111 1.54321206]
[-147.01348877 -9.82810688]
[-132.90348816 -15.64793777]
[-117.66616821 -14.76074886]
[-104.32693481 -7.34269238]
[-95.53429413 5.13337135]
[-93.03402710 20.19030952]
[-78.62181091 24.34819794]
[-64.20959473 28.50608444]
[-49.79737854 32.66397095]
[-41.44401169 21.34650040]
[-29.69847107 13.55234146]
[-15.96633625 10.23878479]
[-1.89935291 11.82545376]
[10.80324268 18.14128685]
[20.59998703 28.44271660]
[26.29423523 41.50115585]
[27.18030930 55.74951553]
[41.50290680 60.20632935]
[55.82550430 64.66314697]
[70.14810181 69.11996460]
[82.58753967 60.73781967]
[83.83441925 45.78973007]
[69.73973083 40.35683060]
[57.74743652 31.17197227]
[48.82970428 18.97973251]
[43.70944977 4.76847935]
[42.80175400 -10.30974197]
[46.18019485 -25.03260994]
[53.57089996 -38.20660400]
[64.37474060 -48.76377106]
[77.71588898 -55.84828949]
[92.51284790 -58.88584518]
[107.56608582 -57.63019943]
[121.65531158 -52.18313980]
[133.63836670 -42.98624039]
[142.54385376 -30.78504562]
[147.64982605 -16.56865692]
[148.54237366 -1.48953104]
[145.14913940 13.22993469]
[137.74520874 26.39649773]
[126.93076324 36.94280624]
[113.58250427 44.01391602]
[98.78250122 47.03660583]
[97.53562927 61.98469162]
[117.59004211 69.16535950]
[129.34687805 85.12142181]
[143.91957092 81.56665802]
[158.49227905 78.01189423]
[173.06498718 74.45713043]
[187.63768005 70.90237427]
[187.66543579 55.82713699]
[191.30081177 41.19677353]
[198.33242798 27.86187172]
[208.35151672 16.59770203]
[220.77554321 8.05915165]
[234.88221741 2.74263883]
[249.85137939 0.95725954]
[264.81274414 2.80681324]
[278.89648438 8.18376923]
[291.28378296 16.77551842]
[301.25448608 28.08254814]
[308.22885132 41.44747925]
[311.80145264 56.09329987]
[311.76455688 71.16851044]
[308.12033081 85.79666901]
[301.08062744 99.12730408]
[291.05471802 110.38539886]
[278.62548828 118.91641998]
[264.51562500 124.22437286]
[249.54536438 126.00067902]
[234.58511353 124.14205933]
[220.50463867 118.75656128]
[208.12254333 110.15730286]
[198.15872192 98.84423065]
[191.19244385 85.47507477]
[176.61973572 89.02983856]
[162.04704285 92.58459473]
[147.47433472 96.13935852]
[132.90164185 99.69412231]
[131.82601929 108.34956360]
[128.51403809 116.41829681]
[123.19841766 123.33333588]
[116.25266266 128.60877991]
[108.16486359 131.87391663]
[108.47692108 146.87066650]
[108.78897858 161.86741638]
[109.10103607 176.86416626]
[109.41308594 191.86093140]
[109.72514343 206.85768127]
[110.03720093 221.85443115]
[110.34925842 236.85118103]
[110.66131592 251.84794617]
[110.97337341 266.84469604]
[111.28542328 281.84146118]
[125.94042206 285.43222046]
[139.16622925 292.69445801]
[150.06109619 303.13305664]
[157.88218689 316.03628540]
[162.09626770 330.52435303]
[162.41598511 345.60943604]
[158.81956482 360.26303101]
[151.55220032 373.48605347]
[141.10939026 384.37689209]
[128.20317078 392.19299316]
[113.71347046 396.40148926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 65]
[26 64]
[27 63]
[28 62]
[35 54]
[36 53]
[37 52]
[38 51]
[66 89]
[67 88]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
