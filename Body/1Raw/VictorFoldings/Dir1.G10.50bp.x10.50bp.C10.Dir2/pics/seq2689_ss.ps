%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACCCCGCGGGGGGGGGGCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCxxxxxxxxxxGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCCCCCCCCCCCUUACCACGC\
) } def
/len { sequence length } bind def

/coor [
[72.13357544 402.97424316]
[59.57535172 394.62307739]
[49.48912811 383.41064453]
[42.50893402 370.04171753]
[39.07355118 355.35675049]
[39.39892960 340.27877808]
[43.46461487 325.75564575]
[51.01503372 312.70031738]
[61.57556152 301.93341064]
[74.48235321 294.13177490]
[88.92408752 289.78582764]
[88.30010986 274.79882812]
[87.67613220 259.81179810]
[87.05215454 244.82478333]
[86.42817688 229.83776855]
[85.80419922 214.85075378]
[85.18022156 199.86373901]
[84.55624390 184.87672424]
[83.93226624 169.88970947]
[83.30828857 154.90267944]
[82.68431091 139.91566467]
[70.15834808 131.66337585]
[56.14163589 137.00489807]
[42.12492371 142.34640503]
[28.10820961 147.68791199]
[14.09149742 153.02943420]
[6.24491167 167.02267456]
[-9.61032867 169.47029114]
[-21.31144142 158.49470520]
[-19.88233376 142.51544189]
[-6.41929388 133.79040527]
[8.74998474 139.01272583]
[22.76669693 133.67120361]
[36.78340912 128.32969666]
[50.80012512 122.98818207]
[64.81683350 117.64666748]
[63.19521332 109.62901306]
[63.31392288 101.72102356]
[65.05506897 94.28410339]
[68.22901917 87.63538361]
[55.78958130 79.25324249]
[43.35014343 70.87110138]
[30.91070175 62.48895645]
[18.47126198 54.10681152]
[6.03182077 45.72467041]
[-6.85687160 53.83648300]
[-21.93157196 55.99826050]
[-36.58049774 51.83546829]
[-48.26563263 42.06932831]
[-54.96245956 28.39188576]
[-55.51071167 13.17284107]
[-49.81539917 -0.95101440]
[-38.86326981 -11.53263760]
[-24.55184555 -16.73869896]
[-9.36067009 -15.66721630]
[4.07829523 -8.50383091]
[13.43666840 3.51035833]
[17.09305573 18.29381943]
[14.41396427 33.28522873]
[26.85340500 41.66737366]
[39.29284286 50.04951477]
[51.73228455 58.43165970]
[64.17172241 66.81380463]
[76.61116791 75.19594574]
[84.30167389 69.73712921]
[93.19349670 66.59416199]
[93.50554657 51.59740448]
[79.28212738 46.40385437]
[67.51728058 36.87142944]
[59.48717499 24.03413582]
[56.06285477 9.28446579]
[57.61576462 -5.77764511]
[63.97745895 -19.51837158]
[74.45786285 -30.44722557]
[87.92015076 -37.37872314]
[102.90402222 -39.56098557]
[117.78414154 -36.75730515]
[130.94644165 -29.27179718]
[140.96315002 -17.91643524]
[146.74774170 -3.92296433]
[147.67274475 11.19070816]
[143.63781738 25.78516388]
[135.08065796 38.27730560]
[122.92945862 47.31208038]
[108.50230408 51.90946198]
[108.19024658 66.90621185]
[120.77745819 72.97083282]
[129.87487793 83.57530212]
[144.28709412 79.41741180]
[158.69931030 75.25952148]
[157.25245667 60.28550339]
[158.58193970 45.30060959]
[162.64250183 30.81521606]
[169.29580688 17.32269669]
[178.31526184 5.28259754]
[189.39367676 -4.89499807]
[202.15371704 -12.86344624]
[216.16076660 -18.35134506]
[230.93777466 -21.17177582]
[245.98141479 -21.22867966]
[260.77932739 -18.52011490]
[274.82751465 -13.13833714]
[287.64746094 -5.26664543]
[298.80255127 4.82685184]
[307.91284180 16.79837418]
[314.66802979 30.24017715]
[318.83804321 44.69443512]
[320.28085327 59.66884613]
[318.94732666 74.65338135]
[314.88287354 89.13768005]
[308.22592163 102.62840271]
[299.20321655 114.66606903]
[288.12207031 124.84068298]
[275.35986328 132.80569458]
[261.35134888 138.28981018]
[246.57357788 141.10626221]
[231.52990723 141.15910339]
[216.73272705 138.44654846]
[202.68600464 133.06098938]
[189.86817932 125.18584442]
[178.71582031 115.08934021]
[169.60876465 103.11536407]
[162.85719299 89.67173767]
[148.44497681 93.82962799]
[134.03276062 97.98751068]
[131.39167786 117.31089020]
[118.15456390 132.93190002]
[97.67132568 139.29168701]
[98.29530334 154.27871704]
[98.91928101 169.26573181]
[99.54325867 184.25274658]
[100.16723633 199.23976135]
[100.79121399 214.22677612]
[101.41519165 229.21379089]
[102.03916931 244.20080566]
[102.66314697 259.18783569]
[103.28712463 274.17483521]
[103.91110229 289.16186523]
[118.66410828 292.29229736]
[132.17474365 298.99404907]
[143.59371948 308.84585571]
[152.20323181 321.22836304]
[157.46208191 335.36328125]
[159.03968811 350.36199951]
[156.83688354 365.28173828]
[150.99214172 379.18460083]
[141.87284851 391.19665527]
[130.05227661 400.56283569]
[116.27347565 406.69430542]
[101.40257263 409.20571899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[66 86]
[67 85]
[88 125]
[89 124]
[90 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
