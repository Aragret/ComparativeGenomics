%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAAAACCGGGGGGGGGGAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUxxxxxxxxxxUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUACCCCCCCCCCUAGUAAAACC\
) } def
/len { sequence length } bind def

/coor [
[76.74223328 373.83096313]
[62.89628983 367.81494141]
[51.18762970 358.28552246]
[42.48510361 345.94985962]
[37.43450165 331.72332764]
[36.41061401 316.66165161]
[39.48941040 301.88247681]
[46.44243240 288.48257446]
[56.75371552 277.45623779]
[69.65809631 269.62170410]
[84.19798279 265.56039429]
[84.19798279 250.56040955]
[84.19798279 235.56040955]
[84.19798279 220.56040955]
[84.19798279 205.56040955]
[84.19798279 190.56040955]
[84.19798279 175.56040955]
[84.19798279 160.56040955]
[84.19798279 145.56040955]
[84.19798279 130.56040955]
[72.69618225 120.93187714]
[57.93012619 123.57074738]
[43.16407013 126.20960999]
[28.39801598 128.84846497]
[24.31345940 132.30332947]
[19.76367950 133.66415405]
[15.64097691 133.11187744]
[12.63063526 131.16116333]
[-2.27126741 132.87384033]
[-17.17317009 134.58653259]
[-32.07507324 136.29922485]
[-46.97697449 138.01191711]
[-61.87887573 139.72460938]
[-76.92405701 147.53990173]
[-88.59885406 135.24618530]
[-80.01747894 120.62440491]
[-63.59156799 124.82270050]
[-48.68966293 123.11001587]
[-33.78776169 121.39732361]
[-18.88585854 119.68463135]
[-3.98395705 117.97194672]
[10.91794491 116.25925446]
[25.75915146 114.08242035]
[40.52520752 111.44355011]
[55.29126358 108.80468750]
[70.05731964 106.16582489]
[80.31374359 81.14440918]
[103.81500244 76.35768890]
[110.72200775 63.04253387]
[117.62900543 49.72737885]
[124.53600311 36.41222382]
[131.44299316 23.09706688]
[138.35000610 9.78191185]
[125.70899963 1.68744445]
[113.85645294 -7.52300453]
[102.89057159 -17.77311325]
[92.90222931 -28.97794342]
[83.97418976 -41.04464722]
[76.18043518 -53.87323380]
[69.58554840 -67.35739899]
[64.24418640 -81.38540649]
[60.20059586 -95.84101868]
[57.48829269 -110.60443878]
[56.12975311 -125.55334473]
[56.13622665 -140.56384277]
[57.50767136 -155.51156616]
[60.23271179 -170.27264404]
[64.28877258 -184.72476196]
[69.64224243 -198.74815369]
[76.24876404 -212.22662354]
[84.05358887 -225.04847717]
[92.99203491 -237.10746765]
[102.99004364 -248.30368042]
[113.96476746 -258.54431152]
[125.82525635 -267.74453735]
[138.47323608 -275.82809448]
[151.80389404 -282.72799683]
[165.70677185 -288.38708496]
[180.06666565 -292.75845337]
[194.76457214 -295.80587769]
[209.67869568 -297.50411987]
[224.68545532 -297.83911133]
[239.66050720 -296.80804443]
[254.47975159 -294.41949463]
[269.02038574 -290.69320679]
[283.16192627 -285.66012573]
[296.78720093 -279.36193848]
[309.78329468 -271.85079956]
[322.04248047 -263.18896484]
[333.46322632 -253.44822693]
[343.95086670 -242.70928955]
[353.41848755 -231.06115723]
[361.78765869 -218.60032654]
[368.98904419 -205.43006897]
[374.96292114 -191.65951538]
[379.65979004 -177.40278625]
[383.04077148 -162.77801514]
[385.07785034 -147.90637207]
[385.75408936 -132.91110229]
[385.06393433 -117.91647339]
[383.01309204 -103.04673004]
[379.61856079 -88.42509460]
[374.90847778 -74.17271423]
[368.92184448 -60.40771103]
[361.70825195 -47.24413300]
[353.32754517 -34.79106903]
[343.84912109 -23.15170860]
[333.35153198 -12.42250061]
[321.92178345 -2.69235158]
[309.65454102 5.95810843]
[296.65151978 13.45719814]
[283.02041626 19.74277687]
[268.87420654 24.76275635]
[254.33013916 28.47554207]
[239.50868225 30.85036850]
[224.53268433 31.86755371]
[209.52622986 31.51866913]
[194.61367798 29.80660820]
[179.91860962 26.74555588]
[165.56277466 22.36087990]
[151.66516113 16.68890953]
[144.75816345 30.00406647]
[137.85115051 43.31922150]
[130.94415283 56.63437653]
[124.03716278 69.94953156]
[117.13016510 83.26468658]
[124.14702606 92.54143524]
[126.19300842 104.61953735]
[122.24963379 116.86953735]
[112.66628265 126.36125183]
[99.19798279 130.56040955]
[99.19798279 145.56040955]
[99.19798279 160.56040955]
[99.19798279 175.56040955]
[99.19798279 190.56040955]
[99.19798279 205.56040955]
[99.19798279 220.56040955]
[99.19798279 235.56040955]
[99.19798279 250.56040955]
[99.19798279 265.56039429]
[113.73786926 269.62170410]
[126.64225006 277.45623779]
[136.95353699 288.48257446]
[143.90655518 301.88247681]
[146.98535156 316.66165161]
[145.96147156 331.72332764]
[140.91085815 345.94985962]
[132.20834351 358.28552246]
[120.49967957 367.81494141]
[106.65373993 373.83096313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 46]
[22 45]
[23 44]
[24 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[48 126]
[49 125]
[50 124]
[51 123]
[52 122]
[53 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
