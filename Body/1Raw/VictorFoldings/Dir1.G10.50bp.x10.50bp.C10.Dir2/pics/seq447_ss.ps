%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCUAACAGGGGGGGGGGCCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAAxxxxxxxxxxCCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUCCCCCCCCCCAACCCUAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.74285889]
[71.19830322 356.72683716]
[59.48964310 347.19741821]
[50.78712082 334.86172485]
[45.73651886 320.63522339]
[44.71262741 305.57354736]
[47.79142761 290.79437256]
[54.74444962 277.39443970]
[65.05573273 266.36810303]
[77.96011353 258.53359985]
[92.50000000 254.47229004]
[92.50000000 239.47229004]
[92.50000000 224.47229004]
[92.50000000 209.47229004]
[92.50000000 194.47229004]
[92.50000000 179.47229004]
[92.50000000 164.47229004]
[92.50000000 149.47229004]
[92.50000000 134.47229004]
[92.50000000 119.47229004]
[81.07324982 110.99043274]
[77.35455322 96.55529785]
[83.81810760 82.37677002]
[98.36139679 75.10871887]
[83.40114594 74.01741028]
[68.44089508 72.92610168]
[54.11437607 79.63887787]
[41.98375320 70.99611664]
[27.02350616 69.90480804]
[20.81943703 72.47717285]
[15.12003136 71.61225891]
[11.46781826 68.44416046]
[-3.43408370 66.73146820]
[-18.33598518 65.01878357]
[-33.23788834 63.30609131]
[-42.32125473 75.69107819]
[-56.38663101 81.86042023]
[-71.65050507 80.15459442]
[-84.00695801 71.03244781]
[-90.13217926 56.94780350]
[-88.37851715 41.68935394]
[-79.21768188 29.36155128]
[-65.11390686 23.28050613]
[-49.86103439 25.08199310]
[-37.56200409 34.28142166]
[-31.52519798 48.40418625]
[-16.62329674 50.11687851]
[-1.72139394 51.82956696]
[13.18050861 53.54225540]
[28.11481667 54.94456100]
[43.07506561 56.03586960]
[56.33152771 49.24503708]
[69.53221130 57.96585083]
[84.49245453 59.05715942]
[99.45270538 60.14847183]
[112.76786041 53.24147415]
[120.49194336 40.38307190]
[128.21603394 27.52466774]
[135.94010925 14.66626549]
[123.94799805 5.63261366]
[112.96586609 -4.60508633]
[103.11405182 -15.93466377]
[94.50048065 -28.23198700]
[87.21953583 -41.36231995]
[81.35099792 -55.18179703]
[76.95915985 -69.53900909]
[74.09214020 -84.27664185]
[72.78135681 -99.23323059]
[73.04116058 -114.24489594]
[74.86872101 -129.14717102]
[78.24399567 -143.77677917]
[83.13002014 -157.97340393]
[89.47325134 -171.58154297]
[97.20418549 -184.45205688]
[106.23812866 -196.44395447]
[116.47609711 -207.42584229]
[127.80591583 -217.27738953]
[140.10345459 -225.89065552]
[153.23396301 -233.17127991]
[167.05357361 -239.03947449]
[181.41088867 -243.43096924]
[196.14859009 -246.29762268]
[211.10522461 -247.60804749]
[226.11688232 -247.34788513]
[241.01910400 -245.51995850]
[255.64862061 -242.14433289]
[269.84515381 -237.25796509]
[283.45312500 -230.91439819]
[296.32345581 -223.18315125]
[308.31512451 -214.14891052]
[319.29675293 -203.91067505]
[329.14804077 -192.58062744]
[337.76101685 -180.28288269]
[345.04132080 -167.15220642]
[350.90917969 -153.33244324]
[355.30032349 -138.97502136]
[358.16662598 -124.23723602]
[359.47668457 -109.28058624]
[359.21615601 -94.26892853]
[357.38787842 -79.36674500]
[354.01187134 -64.73731232]
[349.12515259 -50.54090881]
[342.78128052 -36.93309021]
[335.04971313 -24.06294441]
[326.01516724 -12.07148743]
[315.77667236 -1.09010184]
[304.44638062 8.76089382]
[292.14843750 17.37356567]
[279.01757812 24.65354919]
[265.19766235 30.52108192]
[250.84013367 34.91187286]
[236.10229492 37.77782059]
[221.14561462 39.08751678]
[206.13395691 38.82661438]
[191.23182678 36.99797440]
[176.60246277 33.62162781]
[162.40618896 28.73457146]
[148.79852295 22.39035034]
[141.07443237 35.24875259]
[133.35034180 48.10715485]
[125.62626648 60.96555710]
[129.48342896 75.46115112]
[142.57658386 82.78025818]
[158.95771790 82.01190186]
[167.58476257 95.95844269]
[159.58296204 110.27288055]
[143.18386841 110.22974396]
[135.25747681 95.87341309]
[122.16432190 88.55430603]
[121.41140747 108.13840485]
[107.50000000 119.47229004]
[107.50000000 134.47229004]
[107.50000000 149.47229004]
[107.50000000 164.47229004]
[107.50000000 179.47229004]
[107.50000000 194.47229004]
[107.50000000 209.47229004]
[107.50000000 224.47229004]
[107.50000000 239.47229004]
[107.50000000 254.47229004]
[122.03988647 258.53359985]
[134.94427490 266.36810303]
[145.25555420 277.39443970]
[152.20857239 290.79437256]
[155.28736877 305.57354736]
[154.26348877 320.63522339]
[149.21287537 334.86172485]
[140.51036072 347.19741821]
[128.80169678 356.72683716]
[114.95575714 362.74285889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 55]
[25 54]
[26 53]
[28 51]
[29 50]
[32 49]
[33 48]
[34 47]
[35 46]
[56 121]
[57 120]
[58 119]
[59 118]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
