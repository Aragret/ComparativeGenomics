%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAUUAAUGGGGGGGGGGAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGxxxxxxxxxxUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAACCCCCCCCCCUAAAAUUAAU\
) } def
/len { sequence length } bind def

/coor [
[87.46181488 523.40789795]
[73.61587524 517.39184570]
[61.90721512 507.86245728]
[53.20469284 495.52679443]
[48.15409088 481.30026245]
[47.13019943 466.23858643]
[50.20899963 451.45941162]
[57.16201782 438.05947876]
[67.47330475 427.03317261]
[80.37768555 419.19863892]
[94.91757202 415.13732910]
[94.91757202 400.13732910]
[94.91757202 385.13732910]
[94.91757202 370.13732910]
[94.91757202 355.13732910]
[94.91757202 340.13732910]
[94.91757202 325.13732910]
[94.91757202 310.13732910]
[94.91757202 295.13732910]
[94.91757202 280.13732910]
[79.87709808 276.54031372]
[66.11977386 269.45794678]
[54.44055557 259.29479980]
[45.51543045 246.63362122]
[39.86228561 232.20187378]
[37.81087112 216.82998657]
[39.48355484 201.40351868]
[44.78804398 186.81221008]
[53.42245483 173.89860535]
[64.89250183 163.40942383]
[78.53978729 155.95237732]
[93.57959747 151.96099854]
[93.26753998 136.96424866]
[92.95548248 121.96749115]
[85.14083099 117.64655304]
[79.55253601 110.68162537]
[77.02790070 102.11626434]
[62.45519638 98.56150055]
[47.88249588 95.00673676]
[33.30979156 91.45197296]
[18.73708916 87.89721680]
[3.15676641 93.01439667]
[-8.88292980 81.87986755]
[-4.99659252 65.94787598]
[10.81784821 61.60788727]
[22.29185104 73.32450867]
[36.86455536 76.87927246]
[51.43725586 80.43403625]
[66.00995636 83.98880005]
[80.58266449 87.54355621]
[84.36525726 83.03678894]
[89.16487885 79.63346100]
[94.66931915 77.55496216]
[100.52051544 76.93650055]
[105.71593475 62.86498260]
[110.91134644 48.79346085]
[97.48260498 42.07542801]
[84.87442017 33.92086792]
[73.23984528 24.42877388]
[62.72011185 13.71436977]
[53.44292068 1.90771997]
[45.52089310 -10.84785366]
[39.05019379 -24.39751053]
[34.10936737 -38.57677078]
[30.75839233 -53.21351242]
[29.03794670 -68.13005829]
[28.96891403 -83.14532471]
[30.55213547 -98.07705688]
[33.76839066 -112.74398804]
[38.57863617 -126.96807861]
[44.92448044 -140.57666016]
[52.72888947 -153.40454102]
[61.89712906 -165.29598999]
[72.31790161 -176.10665894]
[83.86470795 -185.70533752]
[96.39738464 -193.97547913]
[109.76378632 -200.81669617]
[123.80167389 -206.14595032]
[138.34062195 -209.89855957]
[153.20416260 -212.02896118]
[168.21183777 -212.51127625]
[183.18150330 -211.33967590]
[197.93139648 -208.52836609]
[212.28251648 -204.11148071]
[226.06060791 -198.14263916]
[239.09844971 -190.69429016]
[251.23777771 -181.85685730]
[262.33120728 -171.73762512]
[272.24407959 -160.45941162]
[280.85604858 -148.15913391]
[288.06262207 -134.98609924]
[293.77627563 -121.10022736]
[297.92767334 -106.67008209]
[300.46640015 -91.87082672]
[301.36163330 -76.88210297]
[300.60253906 -61.88587189]
[298.19830322 -47.06417084]
[294.17813110 -32.59691620]
[288.59082031 -18.65973473]
[281.50418091 -5.42180586]
[273.00424194 6.95617247]
[263.19421387 18.32394218]
[252.19313049 28.54351044]
[240.13458252 37.49081802]
[227.16491699 45.05725861]
[213.44158936 51.15097809]
[199.13117981 55.69800186]
[184.40740967 58.64313889]
[169.44900513 59.95063782]
[154.43756104 59.60462189]
[139.55529785 57.60929489]
[124.98286438 53.98887634]
[119.78745270 68.06039429]
[114.59203339 82.13191986]
[122.75056458 103.82200623]
[107.95223236 121.65543365]
[108.26428986 136.65219116]
[108.57634735 151.64894104]
[122.83087921 154.68882751]
[136.03883362 160.83398438]
[147.53364563 169.77058411]
[156.73605347 181.04400635]
[163.18325806 194.08198547]
[166.55220032 208.22364807]
[166.67579651 222.75300598]
[163.55114746 236.93521118]
[157.33958435 250.05377197]
[148.35826111 261.44662476]
[137.06405640 270.53970337]
[124.03028107 276.87573242]
[109.91757202 280.13732910]
[109.91757202 295.13732910]
[109.91757202 310.13732910]
[109.91757202 325.13732910]
[109.91757202 340.13732910]
[109.91757202 355.13732910]
[109.91757202 370.13732910]
[109.91757202 385.13732910]
[109.91757202 400.13732910]
[109.91757202 415.13732910]
[124.45745850 419.19863892]
[137.36184692 427.03317261]
[147.67312622 438.05947876]
[154.62614441 451.45941162]
[157.70494080 466.23858643]
[156.68106079 481.30026245]
[151.63044739 495.52679443]
[142.92793274 507.86245728]
[131.21926880 517.39184570]
[117.37332916 523.40789795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 118]
[33 117]
[34 116]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[54 114]
[55 113]
[56 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
