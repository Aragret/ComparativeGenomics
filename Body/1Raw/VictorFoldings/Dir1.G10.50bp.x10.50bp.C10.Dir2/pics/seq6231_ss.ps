%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCAGCCAGGGGGGGGGGUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAxxxxxxxxxxCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACCCCCCCCCCCACUGAGCCA\
) } def
/len { sequence length } bind def

/coor [
[82.44393158 393.16653442]
[68.59799194 387.15051270]
[56.88933182 377.62109375]
[48.18680954 365.28543091]
[43.13620758 351.05889893]
[42.11231613 335.99722290]
[45.19111252 321.21804810]
[52.14413452 307.81814575]
[62.45542145 296.79180908]
[75.35980225 288.95730591]
[89.89968872 284.89596558]
[89.89968872 269.89596558]
[89.89968872 254.89598083]
[89.89968872 239.89598083]
[89.89968872 224.89598083]
[89.89968872 209.89598083]
[89.89968872 194.89598083]
[89.89968872 179.89598083]
[89.89968872 164.89598083]
[89.89968872 149.89598083]
[89.89968872 134.89598083]
[84.19918060 130.02215576]
[81.45806122 144.76957703]
[67.31590271 149.76948547]
[55.91469955 140.02204895]
[58.65554047 125.27458191]
[72.79815674 120.27450562]
[67.09764862 115.40067291]
[52.27988815 117.73178101]
[37.46212769 120.06288147]
[29.54977036 133.55097961]
[14.80131054 138.74876404]
[0.18052164 133.20199585]
[-7.40910721 119.52970886]
[-4.38398504 104.18752289]
[7.82751751 94.41955566]
[23.45950317 94.83793640]
[35.13102722 105.24512482]
[49.94878387 102.91402435]
[64.76654053 100.58291626]
[79.61109161 78.97322845]
[101.10454559 76.68685913]
[106.59158325 62.72647095]
[112.07861328 48.76608276]
[117.56564331 34.80569077]
[123.05267334 20.84530258]
[118.61927032 8.68805027]
[123.52553558 -2.85090566]
[134.62269592 -7.76620722]
[140.39897156 -21.60942459]
[131.17697144 -35.21813583]
[133.37478638 -52.91481400]
[147.71008301 -65.72864532]
[144.30711365 -80.33753967]
[140.90412903 -94.94643402]
[137.50115967 -109.55532837]
[122.44200134 -109.36553955]
[107.69422150 -112.41790771]
[93.94758606 -118.56966400]
[81.84505463 -127.53308105]
[71.95268250 -138.88891602]
[64.73316193 -152.10604858]
[60.52415085 -166.56628418]
[59.52251816 -181.59329224]
[61.77511597 -196.48422241]
[67.17658234 -210.54260254]
[75.47427368 -223.11091614]
[86.28010559 -233.60128784]
[99.08866119 -241.52310181]
[113.30086517 -246.50579834]
[128.25198364 -248.31636047]
[143.24272156 -246.87010193]
[157.57194519 -242.23464966]
[170.56945801 -234.62681580]
[181.62731934 -224.40245056]
[190.22833252 -212.03974915]
[195.97024536 -198.11692810]
[198.58445740 -183.28521729]
[197.94873047 -168.23829651]
[194.09278870 -153.67993164]
[187.19697571 -140.29106140]
[177.58381653 -128.69790649]
[165.70294189 -119.44269562]
[152.11004639 -112.95830536]
[155.51303101 -98.34941101]
[158.91600037 -83.74051666]
[162.31898499 -69.13162994]
[175.77494812 -62.50312805]
[189.43118286 -68.70853424]
[203.08743286 -74.91394043]
[216.74366760 -81.11934662]
[230.26786804 -87.60751343]
[243.65414429 -94.37562561]
[257.04043579 -101.14374542]
[265.86483765 -114.27539825]
[280.71401978 -113.11312866]
[294.10031128 -119.88124084]
[295.58544922 -135.23695374]
[305.15466309 -147.33792114]
[319.75448608 -152.32276917]
[334.72616577 -148.60084534]
[345.29226685 -137.35980225]
[348.08120728 -122.18663025]
[342.20303345 -107.92301941]
[329.53347778 -99.12043762]
[314.11529541 -98.58776093]
[300.86843872 -106.49495697]
[287.48214722 -99.72684479]
[279.61520386 -87.07929230]
[263.80853271 -87.75746155]
[250.42225647 -80.98934174]
[237.03598022 -74.22122955]
[234.70713806 -69.98424530]
[229.66009521 -67.19882202]
[222.94908142 -67.46311188]
[209.29283142 -61.25770187]
[195.63659668 -55.05229568]
[181.98036194 -48.84688568]
[176.19046021 -23.39257622]
[154.24218750 -15.83315277]
[148.46592712 -1.98993492]
[151.67077637 15.23588276]
[137.01306152 26.33233261]
[131.52603149 40.29272461]
[126.03900146 54.25311279]
[120.55197144 68.21350098]
[115.06494141 82.17388916]
[127.16277313 97.21058655]
[124.61839294 119.28392029]
[104.89968872 134.89598083]
[104.89968872 149.89598083]
[104.89968872 164.89598083]
[104.89968872 179.89598083]
[104.89968872 194.89598083]
[104.89968872 209.89598083]
[104.89968872 224.89598083]
[104.89968872 239.89598083]
[104.89968872 254.89598083]
[104.89968872 269.89596558]
[104.89968872 284.89596558]
[119.43957520 288.95730591]
[132.34394836 296.79180908]
[142.65524292 307.81814575]
[149.60826111 321.21804810]
[152.68705750 335.99722290]
[151.66316223 351.05889893]
[146.61256409 365.28543091]
[137.91004944 377.62109375]
[126.20137787 387.15051270]
[112.35544586 393.16653442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 40]
[29 39]
[30 38]
[42 127]
[43 126]
[44 125]
[45 124]
[46 123]
[49 121]
[50 120]
[53 87]
[54 86]
[55 85]
[56 84]
[88 118]
[89 117]
[90 116]
[91 115]
[92 112]
[93 111]
[94 110]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
