%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUAGACAGGGGGGGGGGUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAxxxxxxxxxxCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACCCCCCCCCCCUCAGUAGACA\
) } def
/len { sequence length } bind def

/coor [
[82.99913025 346.16516113]
[69.77893066 338.89266968]
[58.89212799 328.44567871]
[51.08099747 315.53643799]
[46.87811661 301.04510498]
[46.57004166 285.95977783]
[50.17778397 271.30895996]
[57.45535660 258.09155273]
[67.90656281 247.20878601]
[80.81882477 239.40264893]
[95.31175995 235.20535278]
[94.99971008 220.20860291]
[94.68765259 205.21185303]
[94.37559509 190.21510315]
[94.06353760 175.21833801]
[93.75148010 160.22158813]
[93.43942261 145.22483826]
[93.12737274 130.22808838]
[92.81531525 115.23133087]
[80.03795624 107.37390137]
[66.51376343 113.86206818]
[52.98957825 120.35023499]
[39.46538544 126.83840179]
[25.94119644 133.32656860]
[19.28495407 147.92361450]
[3.68804598 151.68074036]
[-8.88491535 141.71578979]
[-8.78903008 125.67302704]
[3.90214729 115.85908508]
[19.45303154 119.80237579]
[32.97722244 113.31420898]
[46.50141144 106.82604218]
[60.02560043 100.33787537]
[73.54978943 93.84971619]
[70.91092682 79.08365631]
[55.97661972 77.68135834]
[41.04231262 76.27905273]
[26.10800362 74.87674713]
[9.77298546 79.41585541]
[0.88928419 64.97576904]
[12.30579662 52.44182968]
[27.51030731 59.94244003]
[42.44461441 61.34474182]
[57.37892151 62.74704742]
[72.31323242 64.14935303]
[89.50897980 75.83193207]
[98.81082153 92.69959259]
[106.53491211 79.84118652]
[114.25899506 66.98278809]
[121.98307800 54.12438583]
[129.70716858 41.26598358]
[137.43124390 28.40757942]
[123.77605438 34.61529160]
[108.77782440 34.84543610]
[94.93859100 29.05962181]
[84.56705475 18.22305298]
[79.39341736 4.14351034]
[80.28076172 -10.83022022]
[87.08105469 -24.20018578]
[98.65985870 -33.73597717]
[113.08557129 -37.84680557]
[127.95165253 -35.84690094]
[140.77810669 -28.06988335]
[149.42520142 -15.81313896]
[152.45040894 -1.12136674]
[149.34960938 13.55321598]
[160.22843933 3.22601080]
[171.10725403 -7.10119390]
[181.98608398 -17.42839813]
[167.48788452 -13.58101082]
[153.19607544 -9.02647018]
[138.22517395 -9.96040916]
[124.61021423 -16.25587845]
[114.20189667 -27.05712318]
[108.41503143 -40.89591599]
[108.03624725 -55.89113235]
[113.11701965 -70.00445557]
[122.96671295 -81.31742859]
[136.24645996 -88.29227448]
[151.15110779 -89.98089600]
[165.65464783 -86.15373993]
[177.78561401 -77.33105469]
[185.89407349 -64.71443176]
[183.72723389 -49.87176132]
[192.74476624 -61.85859680]
[201.76229858 -73.84542847]
[210.77981567 -85.83226013]
[219.79734802 -97.81909180]
[218.98449707 -113.84153748]
[231.09947205 -124.35851288]
[246.84873962 -121.30228424]
[254.15077209 -107.01733398]
[247.40409851 -92.46185303]
[231.78417969 -88.80155945]
[222.76666260 -76.81472778]
[213.74913025 -64.82789612]
[204.73159790 -52.84106445]
[195.71406555 -40.85423279]
[203.43815613 -27.99583054]
[218.25590515 -30.32693481]
[233.07366943 -32.65803909]
[247.89141846 -34.98914337]
[237.75865173 -46.04928970]
[239.87727356 -60.89891815]
[252.69874573 -68.68415070]
[266.85162354 -63.71461105]
[271.99127197 -49.62263107]
[264.36160278 -36.70867920]
[279.34130859 -37.48852539]
[294.32101440 -38.26836777]
[309.82440186 -45.13000488]
[320.70962524 -32.13200378]
[311.23294067 -18.07396317]
[295.10086060 -23.28865433]
[280.12115479 -22.50881004]
[265.14144897 -21.72896576]
[250.22253418 -20.17138481]
[235.40476990 -17.84028053]
[220.58700562 -15.50917625]
[205.76925659 -13.17807198]
[192.31329346 -6.54957390]
[181.43446350 3.77763128]
[170.55563354 14.10483646]
[159.67681885 24.43204117]
[150.28965759 36.13166428]
[142.56556702 48.99006653]
[134.84147644 61.84846878]
[127.11739349 74.70687103]
[119.39331055 87.56527710]
[111.66922760 100.42367554]
[107.81206512 114.91927338]
[108.12412262 129.91603088]
[108.43618011 144.91278076]
[108.74823761 159.90953064]
[109.06029510 174.90628052]
[109.37234497 189.90304565]
[109.68440247 204.89979553]
[109.99645996 219.89654541]
[110.30851746 234.89329529]
[124.96350861 238.48406982]
[138.18931580 245.74632263]
[149.08418274 256.18493652]
[156.90528870 269.08813477]
[161.11935425 283.57620239]
[161.43907166 298.66128540]
[157.84265137 313.31491089]
[150.57528687 326.53790283]
[140.13249207 337.42874146]
[127.22625732 345.24484253]
[112.73656464 349.45333862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[35 45]
[36 44]
[37 43]
[38 42]
[47 130]
[48 129]
[49 128]
[50 127]
[51 126]
[52 125]
[66 124]
[67 123]
[68 122]
[69 121]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[99 120]
[100 119]
[101 118]
[102 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
