%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCCUAGGGGGGGGGGAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUxxxxxxxxxxAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCCCCCCCCCCCUAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[50.74675751 358.30407715]
[36.90082169 352.28805542]
[25.19215775 342.75863647]
[16.48963356 330.42297363]
[11.43903160 316.19644165]
[10.41514015 301.13476562]
[13.49393940 286.35562134]
[20.44696045 272.95568848]
[30.75824547 261.92935181]
[43.66262817 254.09484863]
[58.20251465 250.03353882]
[58.20251465 235.03353882]
[58.20251465 220.03353882]
[58.20251465 205.03353882]
[58.20251465 190.03353882]
[58.20251465 175.03353882]
[58.20251465 160.03353882]
[58.20251465 145.03353882]
[58.20251465 130.03353882]
[58.20251465 115.03353119]
[47.87530899 104.15470886]
[32.89559555 103.37486267]
[17.91588020 102.59501648]
[2.93616557 101.81517029]
[-12.04354858 101.03532410]
[-27.02326393 100.25547791]
[-43.18945694 109.00956726]
[-57.54628754 98.96559906]
[-72.53898621 98.49755859]
[-87.53167725 98.02951050]
[-95.67603302 110.97620392]
[-109.11846161 118.06124878]
[-124.20214081 117.47047424]
[-136.88006592 109.46259308]
[-143.80087280 96.27290344]
[-158.79356384 95.80485535]
[-172.98092651 104.02988434]
[-187.06088257 95.62232208]
[-186.54917908 79.23116302]
[-171.97221375 71.71821594]
[-158.32553101 80.81216431]
[-143.33282471 81.28020477]
[-135.60278320 68.54788208]
[-122.45005798 61.34638214]
[-107.35890198 61.69760513]
[-94.38458252 69.60733032]
[-87.06363678 83.03681946]
[-72.07093811 83.50485992]
[-57.07824326 83.97290039]
[-48.01244354 75.90328979]
[-35.47750092 76.21014404]
[-26.24341774 85.27576447]
[-11.26370335 86.05561066]
[3.71601057 86.83545685]
[18.69572449 87.61530304]
[33.67543793 88.39514923]
[48.65515518 89.17499542]
[34.04758453 85.76634216]
[25.49670410 73.44227600]
[27.41735458 58.56575012]
[38.81789780 48.81753922]
[53.81220627 49.23066711]
[64.65869141 59.59183502]
[65.75668335 74.55351257]
[67.31426239 59.63460159]
[68.87184906 44.71569061]
[62.60936737 30.18668747]
[71.62642670 18.33164787]
[73.18400574 3.41273618]
[74.74158478 -11.50617599]
[61.22122955 -18.40287018]
[51.10816193 -29.72056961]
[45.77009201 -43.92864609]
[45.92895126 -59.10557556]
[51.56325531 -73.19880676]
[61.91101074 -84.30233765]
[75.57276917 -90.91451263]
[90.70088196 -92.14108276]
[105.24941254 -87.81617737]
[117.25077820 -78.52468872]
[125.08189392 -65.52323151]
[127.68367004 -50.57012939]
[124.70423889 -35.68767548]
[116.54653931 -22.88859940]
[104.31383514 -13.90386868]
[89.66049957 -9.94859505]
[88.10291290 4.97031689]
[86.54533386 19.88922882]
[92.91922760 33.35113144]
[83.79075623 46.27326965]
[82.23317719 61.19218063]
[80.67559814 76.11109161]
[106.61019897 73.71411896]
[121.64759827 90.90093994]
[136.60784912 89.80962372]
[151.56809998 88.71831512]
[138.77207947 80.89131165]
[130.53845215 68.35307312]
[128.44114685 53.50042343]
[132.88107300 39.17258072]
[143.00950623 28.10846138]
[156.89030457 22.42307854]
[171.86999512 23.20324707]
[185.08508301 30.29983139]
[194.00936890 42.35625076]
[196.93687439 57.06780243]
[193.30798340 71.62222290]
[183.81640625 83.23729706]
[170.27798462 89.69235229]
[185.04403687 92.33121490]
[199.81010437 94.97008514]
[214.57615662 97.60894775]
[223.64089966 96.03341675]
[229.62057495 100.45936584]
[244.32853699 103.40484619]
[259.03649902 106.35032654]
[275.75454712 103.53196716]
[283.09078979 118.81646729]
[270.43447876 130.09716797]
[256.09100342 121.05828857]
[241.38305664 118.11280823]
[226.67509460 115.16732788]
[211.93728638 112.37500000]
[197.17123413 109.73613739]
[182.40518188 107.09727478]
[167.63912964 104.45841217]
[152.65940857 103.67856598]
[137.69915771 104.76987457]
[122.73891449 105.86118317]
[103.49999237 126.87735748]
[73.20251465 115.03353119]
[73.20251465 130.03353882]
[73.20251465 145.03353882]
[73.20251465 160.03353882]
[73.20251465 175.03353882]
[73.20251465 190.03353882]
[73.20251465 205.03353882]
[73.20251465 220.03353882]
[73.20251465 235.03353882]
[73.20251465 250.03353882]
[87.74240112 254.09484863]
[100.64678192 261.92935181]
[110.95806885 272.95568848]
[117.91108704 286.35562134]
[120.98988342 301.13476562]
[119.96599579 316.19644165]
[114.91539001 330.42297363]
[106.21286774 342.75863647]
[94.50420380 352.28805542]
[80.65827179 358.30407715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[28 49]
[29 48]
[30 47]
[35 42]
[36 41]
[64 92]
[65 91]
[66 90]
[68 88]
[69 87]
[70 86]
[94 129]
[95 128]
[96 127]
[109 126]
[110 125]
[111 124]
[112 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
