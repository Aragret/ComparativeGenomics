%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUCGAACCCGGGGGGGGGGAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAxxxxxxxxxxACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGCCCCCCCCCCGAAUCGAACCC\
) } def
/len { sequence length } bind def

/coor [
[92.76411438 429.61788940]
[78.74217224 424.06488037]
[66.54221344 415.19854736]
[56.93114471 403.57623291]
[50.51311874 389.92852783]
[47.69158173 375.11334229]
[48.64389801 360.06198120]
[53.31020355 345.72055054]
[61.39716721 332.99060059]
[72.39644623 322.67233276]
[85.61660004 315.41433716]
[100.22661591 311.67291260]
[100.22661591 296.67291260]
[100.22661591 281.67291260]
[100.22661591 266.67291260]
[100.22661591 251.67291260]
[100.22661591 236.67291260]
[100.22661591 221.67291260]
[100.22661591 206.67291260]
[100.22661591 191.67291260]
[100.22661591 176.67291260]
[92.48931122 163.94563293]
[100.22661591 150.14546204]
[94.68404388 145.09274292]
[84.57844543 156.17773438]
[73.49362183 146.07194519]
[83.59891510 134.98731995]
[78.05635071 129.93460083]
[63.12033463 131.31861877]
[48.18432236 132.70265198]
[33.24831009 134.08666992]
[18.31229591 135.47070312]
[3.37628365 136.85472107]
[-7.93772507 148.22894287]
[-23.86821747 146.33184814]
[-32.19468307 132.61872864]
[-26.52976990 117.60912323]
[-11.21911430 112.81710815]
[1.99225831 121.91870880]
[16.92827034 120.53468323]
[31.86428452 119.15065765]
[46.80029678 117.76663971]
[61.73630905 116.38261414]
[76.67232513 114.99858856]
[75.98779297 103.78255463]
[79.81282043 94.65311432]
[67.65948486 85.86126709]
[55.50615311 77.06942749]
[41.52094269 83.41839600]
[26.23647881 81.90818787]
[13.76420689 72.94504547]
[7.45910549 58.93999863]
[9.01721573 43.66034317]
[18.01941299 31.21622658]
[32.04415131 24.95505524]
[47.31884766 26.56105232]
[59.73468399 35.60221100]
[65.95186615 49.64650726]
[64.29799652 64.91609192]
[76.45133209 73.70793915]
[88.60466003 82.49977875]
[101.76006317 77.81642151]
[115.85087585 82.48400116]
[124.59442902 95.55252075]
[123.41497040 112.11463165]
[111.73674774 125.12741089]
[123.12781525 115.36814117]
[134.51889038 105.60886383]
[145.90997314 95.84959412]
[137.43043518 83.45827484]
[130.34037781 70.22277832]
[124.72290802 56.29829407]
[120.64389801 41.84807205]
[118.15117645 27.04153252]
[117.27395630 12.05227947]
[118.02253723 -2.94394922]
[120.38813019 -17.77132988]
[124.34300232 -32.25601959]
[129.84078979 -46.22818756]
[136.81703186 -59.52402496]
[145.18994141 -71.98764038]
[154.86132812 -83.47290802]
[165.71783447 -93.84516907]
[177.63214111 -102.98280334]
[190.46458435 -110.77869415]
[204.06468201 -117.14141846]
[218.27301025 -121.99639893]
[232.92295837 -125.28669739]
[247.84278870 -126.97373962]
[262.85754395 -127.03775024]
[277.79119873 -125.47797394]
[292.46868896 -122.31270599]
[306.71789551 -117.57904816]
[320.37176514 -111.33250427]
[333.27020264 -103.64630890]
[345.26196289 -94.61058807]
[356.20651245 -84.33126831]
[365.97549438 -72.92887878]
[374.45434570 -60.53710556]
[381.54370117 -47.30123138]
[387.16040039 -33.37644577]
[391.23864746 -18.92600250]
[393.73056030 -4.11932993]
[394.60699463 10.86997128]
[393.85760498 25.86615944]
[391.49121094 40.69341278]
[387.53555298 55.17788696]
[382.03701782 69.14976501]
[375.06005859 82.44522858]
[366.68649292 94.90839386]
[357.01446533 106.39313507]
[346.15740967 116.76480865]
[334.24261475 125.90180969]
[321.40975952 133.69700623]
[307.80929565 140.05900574]
[293.60070801 144.91320801]
[278.95059204 148.20272827]
[264.03067017 149.88896179]
[249.01589966 149.95216370]
[234.08232117 148.39158630]
[219.40501404 145.22552490]
[205.15606689 140.49110413]
[191.50254822 134.24382019]
[178.60452271 126.55693817]
[166.61322021 117.52056885]
[155.66923523 107.24066162]
[144.27816772 116.99993896]
[132.88710022 126.75921631]
[121.49601746 136.51849365]
[115.22661591 150.14546204]
[122.96391296 163.94563293]
[115.22661591 176.67291260]
[115.22661591 191.67291260]
[115.22661591 206.67291260]
[115.22661591 221.67291260]
[115.22661591 236.67291260]
[115.22661591 251.67291260]
[115.22661591 266.67291260]
[115.22661591 281.67291260]
[115.22661591 296.67291260]
[115.22661591 311.67291260]
[129.83662415 315.41433716]
[143.05679321 322.67233276]
[154.05606079 332.99060059]
[162.14302063 345.72055054]
[166.80932617 360.06198120]
[167.76164246 375.11334229]
[164.94010925 389.92852783]
[158.52207947 403.57623291]
[148.91101074 415.19854736]
[136.71105957 424.06488037]
[122.68910980 429.61788940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[46 61]
[47 60]
[48 59]
[66 129]
[67 128]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
