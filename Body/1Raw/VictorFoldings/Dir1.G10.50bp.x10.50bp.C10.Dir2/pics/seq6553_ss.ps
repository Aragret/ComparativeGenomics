%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGUAGACGGGGGGGGGGCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCxxxxxxxxxxGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACCCCCCCCCCCUCAGUAGAC\
) } def
/len { sequence length } bind def

/coor [
[122.76783752 473.58755493]
[108.92189789 467.57153320]
[97.21323395 458.04211426]
[88.51071167 445.70645142]
[83.46010590 431.47991943]
[82.43621826 416.41824341]
[85.51501465 401.63909912]
[92.46804047 388.23916626]
[102.77931976 377.21282959]
[115.68370056 369.37832642]
[130.22358704 365.31701660]
[130.22358704 350.31701660]
[130.22358704 335.31701660]
[130.22358704 320.31701660]
[130.22358704 305.31701660]
[130.22358704 290.31701660]
[130.22358704 275.31701660]
[130.22358704 260.31701660]
[130.22358704 245.31700134]
[130.22358704 230.31700134]
[122.24117279 226.92852783]
[115.89060211 220.15644836]
[112.60247040 210.82156372]
[99.07827759 217.30972290]
[92.42203522 231.90678406]
[76.82512665 235.66390991]
[64.25216675 225.69895935]
[64.34805298 209.65618896]
[77.03923035 199.84225464]
[92.59011841 203.78553772]
[106.11430359 197.29737854]
[115.00665283 185.21739197]
[117.18349457 170.37617493]
[119.36032867 155.53497314]
[121.53716278 140.69377136]
[123.71400452 125.85256195]
[85.16286469 139.23107910]
[51.46608353 105.13318634]
[37.14348602 100.67636871]
[22.82089043 96.21955109]
[8.49829197 91.76274109]
[-5.82430506 87.30592346]
[-20.14690208 82.84910583]
[-37.06723022 83.91625214]
[-42.77668762 67.95259094]
[-29.01742554 58.04708481]
[-15.69008636 68.52651215]
[-1.36748922 72.98332214]
[12.95510769 77.44013977]
[27.27770615 81.89695740]
[41.60030365 86.35377502]
[55.92290115 90.81058502]
[60.36907578 84.77059174]
[69.26142120 72.69060516]
[73.70759583 66.65061188]
[65.19651031 54.29903793]
[56.68541718 41.94746780]
[41.10194016 40.64778137]
[30.03619003 29.59865379]
[28.71307945 14.01714611]
[37.75733948 1.26036882]
[52.89854813 -2.64831829]
[66.98748779 4.13664770]
[73.37179565 18.41161346]
[69.03699493 33.43637466]
[77.54808044 45.78794861]
[86.05917358 58.13952255]
[100.38176727 53.68270493]
[100.38176727 38.68270493]
[100.38176727 23.68270493]
[87.04064178 16.07285309]
[79.30567169 2.80387259]
[79.25753021 -12.55494404]
[86.90916443 -25.87215424]
[100.20232391 -33.56549454]
[115.56121826 -33.56549454]
[128.85437012 -25.87215424]
[136.50601196 -12.55494404]
[136.45787048 2.80387259]
[128.72290039 16.07285309]
[115.38176727 23.68270493]
[115.38176727 38.68270493]
[115.38176727 53.68270493]
[125.13516998 66.42259979]
[128.82948303 80.01074219]
[138.33782959 68.40940094]
[147.84619141 56.80806351]
[157.35455322 45.20672226]
[166.86291504 33.60538101]
[166.71725464 17.56298828]
[179.25924683 7.55908775]
[194.86773682 11.26781464]
[201.56922913 25.84415245]
[194.22291565 40.10638046]
[178.46424866 43.11373901]
[168.95588684 54.71508026]
[159.44754028 66.31642151]
[149.93917847 77.91776276]
[140.43081665 89.51910400]
[147.61332703 102.68768311]
[162.51522827 100.97499847]
[177.41712952 99.26230621]
[192.31903076 97.54961395]
[182.65512085 86.07753754]
[185.38961792 71.32889557]
[198.52384949 64.08375549]
[212.45774841 69.63772583]
[217.00674438 83.93131256]
[208.84648132 96.51670074]
[223.84567261 96.36066437]
[238.84484863 96.20462799]
[254.62023926 89.99385071]
[264.95535278 103.43341064]
[254.90206909 117.08506775]
[239.00088501 111.20381927]
[224.00170898 111.35985565]
[209.00251770 111.51589203]
[194.03172302 112.45152283]
[179.12982178 114.16420746]
[164.22792053 115.87689972]
[149.32601929 117.58959198]
[138.55520630 128.02940369]
[136.37837219 142.87060547]
[134.20153809 157.71180725]
[132.02470398 172.55302429]
[129.84785461 187.39422607]
[144.83470154 188.12409973]
[156.17192078 197.07080078]
[160.04905701 210.39811707]
[155.64906311 222.96783447]
[145.22358704 230.31700134]
[145.22358704 245.31700134]
[145.22358704 260.31701660]
[145.22358704 275.31701660]
[145.22358704 290.31701660]
[145.22358704 305.31701660]
[145.22358704 320.31701660]
[145.22358704 335.31701660]
[145.22358704 350.31701660]
[145.22358704 365.31701660]
[159.76347351 369.37832642]
[172.66786194 377.21282959]
[182.97914124 388.23916626]
[189.93215942 401.63909912]
[193.01095581 416.41824341]
[191.98707581 431.47991943]
[186.93646240 445.70645142]
[178.23394775 458.04211426]
[166.52528381 467.57153320]
[152.67935181 473.58755493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 31]
[24 30]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[55 67]
[56 66]
[57 65]
[68 83]
[69 82]
[70 81]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[100 121]
[101 120]
[102 119]
[103 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
