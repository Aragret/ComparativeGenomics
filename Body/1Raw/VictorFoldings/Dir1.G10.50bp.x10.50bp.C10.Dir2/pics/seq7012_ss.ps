%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGACAUCGGGGGGGGGGGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAxxxxxxxxxxACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCCCCCCCCCCCUAGAAAUCG\
) } def
/len { sequence length } bind def

/coor [
[85.16580963 360.82867432]
[72.29253387 352.92581177]
[62.16823959 341.71530151]
[55.61365509 328.10595703]
[53.16013336 313.20104980]
[55.00657272 298.20880127]
[61.00328445 284.34460449]
[70.66414642 272.73233032]
[83.20599365 264.31338501]
[97.61211395 259.77023315]
[97.30005646 244.77346802]
[96.98799896 229.77671814]
[96.67594910 214.77996826]
[96.36389160 199.78320312]
[96.05183411 184.78645325]
[95.73977661 169.78970337]
[95.42771912 154.79295349]
[95.11566162 139.79618835]
[94.80361176 124.79943848]
[94.49155426 109.80268860]
[91.88414001 110.34487152]
[89.00955963 110.28559113]
[85.99537659 109.56060028]
[71.09347534 111.27329254]
[56.19157410 112.98597717]
[41.28966904 114.69866943]
[26.38776779 116.41136169]
[22.88607979 119.22199249]
[19.05289459 120.59230042]
[15.39477539 120.59934235]
[12.33817101 119.48079681]
[10.18287182 117.59346008]
[-4.80982447 118.06150818]
[-19.80252075 118.52954865]
[-34.79521561 118.99758911]
[-50.43797302 125.53520966]
[-61.05044937 112.31357574]
[-51.28334045 98.45572662]
[-35.26325989 104.00489044]
[-20.27056313 103.53684998]
[-5.27786684 103.06880951]
[9.71482944 102.60076904]
[24.67507744 101.50945282]
[39.57698059 99.79676819]
[54.47888184 98.08407593]
[69.38078308 96.37138367]
[84.28268433 94.65869904]
[69.35334015 93.20455170]
[56.41098404 85.62197113]
[47.84309387 73.30973053]
[45.23019409 58.53906250]
[49.05427933 44.03470612]
[58.60992432 32.47227859]
[72.13439941 25.98470688]
[87.13284302 25.76874733]
[100.83849335 31.86424065]
[110.72308350 43.14674759]
[114.96318054 57.53499222]
[112.77663422 72.37477112]
[104.56896973 84.92645264]
[115.23059845 74.37516022]
[125.78189087 63.71353531]
[136.22169495 52.94272614]
[146.66151428 42.17191696]
[137.01205444 30.67008972]
[128.59638977 18.23704338]
[121.50373077 5.00457668]
[115.80925751 -8.88703918]
[111.57334137 -23.29054642]
[108.84087372 -38.05325699]
[107.64083099 -53.01868439]
[107.98593140 -68.02817535]
[109.87252045 -82.92263031]
[113.28058624 -97.54415894]
[118.17401886 -111.73776245]
[124.50093079 -125.35298157]
[132.19425964 -138.24548340]
[141.17245483 -150.27861023]
[151.34034729 -161.32479858]
[162.59013367 -171.26695251]
[174.80256653 -179.99966431]
[187.84819031 -187.43038940]
[201.58871460 -193.48034668]
[215.87849426 -198.08538818]
[230.56602478 -201.19673157]
[245.49562073 -202.78135681]
[260.50903320 -202.82249451]
[275.44708252 -201.31970215]
[290.15145874 -198.28889465]
[304.46624756 -193.76222229]
[318.23971558 -187.78765869]
[331.32586670 -180.42852783]
[343.58596802 -171.76286316]
[354.89007568 -161.88250732]
[365.11834717 -150.89221191]
[374.16232300 -138.90846252]
[381.92620850 -126.05831146]
[388.32763672 -112.47796631]
[393.29876709 -98.31139374]
[396.78689575 -83.70875549]
[398.75506592 -68.82486725]
[399.18243408 -53.81748581]
[398.06442261 -38.84571075]
[395.41287231 -24.06824684]
[391.25595093 -9.64174366]
[385.63769531 4.28086805]
[378.61764526 17.55200195]
[370.27023315 30.03097725]
[360.68395996 41.58551025]
[349.96041870 52.09311295]
[338.21328735 61.44240570]
[325.56710815 69.53427124]
[312.15594482 76.28293610]
[298.12194824 81.61686707]
[283.61389160 85.47950745]
[268.78555298 87.82992554]
[253.79412842 88.64319611]
[238.79853821 87.91070557]
[223.95776367 85.64020538]
[209.42909241 81.85578156]
[195.36656189 76.59753418]
[181.91921997 69.92121887]
[169.22964478 61.89759827]
[157.43232727 52.61172867]
[146.99250793 63.38253784]
[136.55270386 74.15334320]
[134.14010620 81.19075012]
[125.78189087 85.03678894]
[115.12026215 95.58807373]
[109.48830414 109.49063110]
[109.80036163 124.48738861]
[110.11241913 139.48414612]
[110.42447662 154.48089600]
[110.73653412 169.47764587]
[111.04858398 184.47439575]
[111.36064148 199.47116089]
[111.67269897 214.46791077]
[111.98475647 229.46466064]
[112.29681396 244.46141052]
[112.60887146 259.45816040]
[127.19151306 263.39813232]
[140.07272339 271.28805542]
[150.20826721 282.48840332]
[156.77651978 296.09115601]
[159.24501038 310.99359131]
[157.41363525 325.98770142]
[151.43086243 339.85791016]
[141.78166199 351.47985840]
[129.24827576 359.91140747]
[114.84673309 364.46905518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[32 42]
[33 41]
[34 40]
[35 39]
[60 129]
[61 128]
[62 126]
[63 125]
[64 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
