%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUCUUCUGGGGGGGGGGCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCxxxxxxxxxxCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACCCCCCCCCCCACCACCUUCU\
) } def
/len { sequence length } bind def

/coor [
[83.77037811 383.22967529]
[70.55017853 375.95718384]
[59.66337585 365.51019287]
[51.85224533 352.60095215]
[47.64936447 338.10961914]
[47.34128952 323.02429199]
[50.94903183 308.37347412]
[58.22660446 295.15606689]
[68.67781067 284.27331543]
[81.59007263 276.46716309]
[96.08300781 272.26986694]
[95.77095795 257.27313232]
[95.45890045 242.27636719]
[95.14684296 227.27961731]
[94.83478546 212.28286743]
[94.52272797 197.28611755]
[94.21067047 182.28935242]
[93.89862061 167.29260254]
[93.58656311 152.29585266]
[93.27450562 137.29910278]
[83.59734344 135.23869324]
[74.55287933 130.65110779]
[66.80398560 123.73144531]
[60.95322037 114.84897614]
[57.49708176 104.52857208]
[42.92437744 108.08333588]
[28.35167694 111.63809967]
[13.77897358 115.19286346]
[-0.79372954 118.74761963]
[-15.36643219 122.30238342]
[-29.32147789 131.93011475]
[-42.43608475 121.18565369]
[-35.74201202 105.60920715]
[-18.92119408 107.72968292]
[-4.34849167 104.17491913]
[10.22421169 100.62015533]
[24.79691505 97.06539917]
[39.36961746 93.51063538]
[53.94231796 89.95587158]
[59.42935181 75.99548340]
[51.17706299 63.46952057]
[39.98129654 53.48679352]
[26.59501076 46.71867752]
[13.20872688 39.95056534]
[-0.17755829 33.18244934]
[-13.56384277 26.41433525]
[-26.95012856 19.64621925]
[-43.81342697 17.89535141]
[-46.79920578 1.20638847]
[-31.58900070 -6.28267097]
[-20.18201256 6.25993490]
[-6.79572821 13.02804947]
[6.59055662 19.79616547]
[19.97684097 26.56427956]
[33.36312485 33.33239365]
[46.74941254 40.10050964]
[38.84418106 27.35267067]
[34.02952957 13.14636517]
[32.55536270 -1.78101981]
[34.49819946 -16.65466690]
[39.75719070 -30.70254898]
[48.05937195 -43.19549942]
[58.97380447 -53.48506165]
[71.93397522 -61.03715134]
[86.26716614 -65.45977020]
[101.22941589 -66.52335358]
[116.04408264 -64.17270660]
[129.94221497 -58.52982712]
[142.20240784 -49.88762665]
[152.18829346 -38.69467545]
[159.38153076 -25.53195763]
[163.40878296 -11.08269119]
[164.06098938 3.90312362]
[161.30429077 18.64763641]
[155.28179932 32.38552094]
[146.30609131 44.40370560]
[134.84306335 54.07837296]
[121.48773193 60.90735626]
[106.93329620 64.53618622]
[91.93522644 64.77651215]
[77.27199554 61.61585999]
[63.70302582 55.21723175]
[71.95531464 67.74319458]
[85.66674805 60.76097488]
[100.62087250 59.19839096]
[114.80081940 63.01375580]
[126.38338470 71.45652771]
[133.97325134 83.19902039]
[148.46884155 79.34185791]
[161.16633606 66.04698944]
[177.91357422 71.19772339]
[192.32579041 67.03983307]
[206.73800659 62.88194656]
[214.17343140 57.46288300]
[221.49342346 58.79082489]
[235.98901367 54.93366623]
[236.17491150 39.83836746]
[240.42768860 25.35332489]
[248.43176270 12.55342197]
[259.59317017 2.38849783]
[273.08364868 -4.38714218]
[287.90213013 -7.27070189]
[302.94900513 -6.04820061]
[317.10766602 -0.81035715]
[329.32745361 8.05414581]
[338.70156860 19.88750458]
[344.53442383 33.81160355]
[346.39312744 48.79318237]
[344.13980103 63.72051239]
[337.94165039 77.48587799]
[328.25860596 89.06780243]
[315.80920410 97.60683441]
[301.51727295 102.46931458]
[286.44338989 103.29441833]
[271.70614624 100.02091980]
[258.39910889 92.89172363]
[247.50976562 82.43587494]
[239.84617615 69.42926025]
[225.35058594 73.28642273]
[210.89588928 77.29415894]
[196.48367310 81.45204926]
[182.07145691 85.60993958]
[175.92123413 96.07330322]
[163.89755249 99.62997437]
[152.32600403 93.83745575]
[137.83041382 97.69461823]
[136.29573059 110.91215515]
[130.28720093 122.78464508]
[120.54545593 131.84869385]
[108.27125549 136.98704529]
[108.58331299 151.98379517]
[108.89537048 166.98054504]
[109.20742798 181.97729492]
[109.51948547 196.97406006]
[109.83154297 211.97080994]
[110.14359283 226.96755981]
[110.45565033 241.96430969]
[110.76770782 256.96105957]
[111.07976532 271.95782471]
[125.73475647 275.54858398]
[138.96057129 282.81085205]
[149.85543823 293.24945068]
[157.67652893 306.15264893]
[161.89059448 320.64071655]
[162.21032715 335.72583008]
[158.61389160 350.37942505]
[151.34652710 363.60241699]
[140.90373230 374.49325562]
[127.99750519 382.30938721]
[113.50781250 386.51785278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[40 83]
[41 82]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[88 126]
[89 125]
[91 122]
[92 121]
[93 120]
[95 119]
[96 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
