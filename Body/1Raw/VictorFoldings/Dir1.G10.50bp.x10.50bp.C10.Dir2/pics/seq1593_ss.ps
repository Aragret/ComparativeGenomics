%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCGCCAUGGGGGGGGGGCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAxxxxxxxxxxCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCCCCCCCCCCCAUACCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[83.36701965 363.84524536]
[70.14682007 356.57278442]
[59.26002121 346.12576294]
[51.44889069 333.21652222]
[47.24600601 318.72521973]
[46.93793488 303.63986206]
[50.54567719 288.98904419]
[57.82324982 275.77166748]
[68.27445984 264.88888550]
[81.18672180 257.08273315]
[95.67965698 252.88546753]
[95.36759949 237.88870239]
[95.05554199 222.89195251]
[94.74348450 207.89520264]
[94.43142700 192.89845276]
[94.11937714 177.90168762]
[93.80731964 162.90493774]
[93.49526215 147.90818787]
[93.18320465 132.91143799]
[92.87114716 117.91468048]
[80.79116058 109.02233124]
[66.37894440 113.18021393]
[51.96672821 117.33810425]
[37.55451202 121.49598694]
[23.14229774 125.65387726]
[12.02761459 136.91328430]
[-2.34565353 133.00708008]
[-16.75786972 137.16497803]
[-25.74048615 150.45753479]
[-41.74431229 151.57872009]
[-52.49258423 139.66847229]
[-49.74014664 123.86328888]
[-35.59843063 116.28757477]
[-20.91575623 122.75275421]
[-6.50354099 118.59487152]
[3.58028364 107.63285828]
[18.98440933 111.24166107]
[33.39662552 107.08377075]
[47.80884171 102.92588806]
[62.22105789 98.76799774]
[76.63327026 94.61011505]
[77.88014984 79.66202545]
[64.35595703 73.17385864]
[50.83176804 66.68569183]
[37.24294662 74.17726135]
[21.85014534 72.21735382]
[10.57220554 61.55960464]
[7.74572849 46.30212402]
[14.45755100 32.31173325]
[28.12684250 24.96801949]
[43.49747849 27.09479141]
[54.65913773 37.87426376]
[57.31993484 53.16150665]
[70.84412384 59.64966965]
[84.36831665 66.13783264]
[93.10588837 71.01861572]
[99.22913361 77.72920990]
[102.41773987 85.42095184]
[102.58412933 93.20241547]
[113.02394104 82.43161011]
[123.46375275 71.66080475]
[113.71024323 60.25012589]
[105.06811523 47.97624588]
[97.61331940 34.94702911]
[91.41137695 21.27697563]
[86.51677704 7.08622646]
[82.97254181 -7.50051022]
[80.80982208 -22.35504150]
[80.04762268 -37.34682465]
[80.69263458 -52.34410477]
[82.73920441 -67.21508789]
[86.16933441 -81.82907104]
[90.95288086 -96.05764008]
[97.04780579 -109.77574158]
[104.40054321 -122.86282349]
[112.94648743 -135.20387268]
[122.61051941 -146.69041443]
[133.30772400 -157.22154236]
[144.94407654 -166.70466614]
[157.41732788 -175.05645752]
[170.61784363 -182.20353699]
[184.42964172 -188.08306885]
[198.73130798 -192.64340210]
[213.39718628 -195.84445190]
[228.29837036 -197.65809631]
[243.30389404 -198.06837463]
[258.28192139 -197.07168579]
[273.10079956 -194.67681885]
[287.63027954 -190.90478516]
[301.74270630 -185.78874207]
[315.31405640 -179.37367249]
[328.22503662 -171.71592712]
[340.36218262 -162.88281250]
[351.61886597 -152.95195007]
[361.89611816 -142.01063538]
[371.10363770 -130.15501404]
[379.16052246 -117.48925781]
[385.99594116 -104.12469482]
[391.54983521 -90.17877197]
[395.77340698 -75.77404785]
[398.62948608 -61.03711700]
[400.09304810 -46.09748840]
[400.15118408 -31.08645630]
[398.80337524 -16.13594055]
[396.06152344 -1.37732971]
[391.94964600 13.05967426]
[386.50393677 27.04819489]
[379.77224731 40.46529770]
[371.81372070 53.19307327]
[362.69830322 65.11966705]
[352.50607300 76.14025879]
[341.32666016 86.15799713]
[329.25830078 95.08485413]
[316.40701294 102.84236908]
[302.88577271 109.36237335]
[288.81338501 114.58756256]
[274.31353760 118.47201538]
[259.51367188 120.98159790]
[244.54380798 122.09426117]
[229.53555298 121.80021667]
[214.62077332 120.10205078]
[199.93054199 117.01469421]
[185.59397888 112.56526947]
[171.73706055 106.79288483]
[158.48158264 99.74826813]
[145.94401550 91.49333191]
[134.23455811 82.10061646]
[123.79474640 92.87142181]
[113.35493469 103.64223480]
[107.86790466 117.60262299]
[108.17996216 132.59938049]
[108.49201202 147.59613037]
[108.80406952 162.59288025]
[109.11612701 177.58963013]
[109.42818451 192.58639526]
[109.74024200 207.58314514]
[110.05229950 222.57989502]
[110.36434937 237.57664490]
[110.67640686 252.57341003]
[125.33139801 256.16418457]
[138.55720520 263.42642212]
[149.45207214 273.86502075]
[157.27317810 286.76824951]
[161.48724365 301.25628662]
[161.80696106 316.34140015]
[158.21054077 330.99499512]
[150.94317627 344.21801758]
[140.50038147 355.10885620]
[127.59414673 362.92495728]
[113.10445404 367.13342285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[27 35]
[28 34]
[42 55]
[43 54]
[44 53]
[59 129]
[60 128]
[61 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
