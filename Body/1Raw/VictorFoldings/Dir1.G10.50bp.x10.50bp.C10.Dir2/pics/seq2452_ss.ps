%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUCACAGGGGGGGGGGCCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGxxxxxxxxxxUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUCCCCCCCCCCACCCCUCACA\
) } def
/len { sequence length } bind def

/coor [
[90.78443909 368.08892822]
[76.93849945 362.07290649]
[65.22984314 352.54348755]
[56.52731705 340.20782471]
[51.47671509 325.98129272]
[50.45282364 310.91961670]
[53.53162003 296.14044189]
[60.48464203 282.74050903]
[70.79592896 271.71420288]
[83.70030975 263.87966919]
[98.24019623 259.81835938]
[98.24019623 244.81835938]
[98.24019623 229.81835938]
[98.24019623 214.81835938]
[98.24019623 199.81835938]
[98.24019623 184.81835938]
[98.24019623 169.81835938]
[98.24019623 154.81835938]
[98.24019623 139.81835938]
[98.24019623 124.81836700]
[85.22388458 117.36345673]
[72.28582764 124.95336151]
[66.86600494 140.05319214]
[51.63538361 145.09381104]
[38.27759933 136.20848083]
[37.03960037 120.21326447]
[48.87107086 109.37832642]
[64.69592285 112.01530457]
[77.63397980 104.42539978]
[76.39141846 97.02904510]
[63.09057617 103.96356201]
[52.38539886 93.45646667]
[59.07033157 80.02844238]
[73.90629578 82.23633575]
[72.66374207 74.83998108]
[57.95578003 71.89450073]
[43.24781799 68.94902039]
[28.53985596 66.00354004]
[13.83189392 63.05805588]
[0.82032865 72.02882385]
[-14.70820808 69.08942413]
[-23.54091072 55.98373795]
[-20.43749428 40.48714828]
[-7.23915911 31.79349899]
[8.22375488 35.06058121]
[16.77737617 48.35009384]
[31.48533821 51.29557419]
[46.19329834 54.24105835]
[60.90126038 57.18654251]
[75.60922241 60.13202286]
[89.39160156 54.21205902]
[97.38152313 41.51713181]
[88.14199066 29.52311134]
[83.57206726 15.11867619]
[84.20490265 0.04818385]
[89.94483185 -13.87026501]
[100.08125305 -24.96416092]
[113.37650299 -31.90756226]
[128.21699524 -33.87955093]
[142.80905151 -30.66125298]
[150.79896545 -43.35618210]
[158.78887939 -56.05111313]
[166.77879333 -68.74604034]
[174.76870728 -81.44097137]
[182.75862122 -94.13590240]
[190.74855042 -106.83083344]
[198.73846436 -119.52576447]
[187.25900269 -129.21948242]
[177.24041748 -140.41654968]
[168.87773132 -152.89900208]
[162.33372498 -166.42385864]
[157.73577881 -180.72789001]
[155.17338562 -195.53262329]
[154.69642639 -210.54989624]
[156.31419373 -225.48739624]
[159.99517822 -240.05436707]
[165.66775513 -253.96723938]
[173.22148132 -266.95520020]
[182.50933838 -278.76544189]
[193.35052490 -289.16809082]
[205.53401184 -297.96063232]
[218.82266235 -304.97189331]
[232.95779419 -310.06546021]
[247.66426086 -313.14212036]
[262.65579224 -314.14205933]
[277.64059448 -313.04574585]
[292.32696533 -309.87454224]
[306.42904663 -304.69018555]
[319.67233276 -297.59356689]
[331.79901123 -288.72286987]
[342.57305908 -278.25073242]
[351.78479004 -266.38098145]
[359.25482178 -253.34469604]
[364.83779907 -239.39562988]
[368.42501831 -224.80529785]
[369.94668579 -209.85769653]
[369.37313843 -194.84379578]
[366.71557617 -180.05584717]
[362.02572632 -165.78169250]
[355.39486694 -152.29919434]
[346.95208740 -139.87077332]
[336.86169434 -128.73838806]
[325.32012939 -119.11869812]
[312.55203247 -111.19896698]
[298.80596924 -105.13336182]
[284.34948730 -101.03993988]
[269.46395874 -98.99839020]
[254.43920898 -99.04844666]
[239.56764221 -101.18913269]
[225.13874817 -105.37878418]
[211.43339539 -111.53584290]
[203.44346619 -98.84091187]
[195.45355225 -86.14598846]
[187.46363831 -73.45105743]
[179.47372437 -60.75612640]
[171.48381042 -48.06119537]
[163.49389648 -35.36626816]
[155.50398254 -22.67133713]
[164.71734619 -10.90701866]
[169.35855103 3.32633448]
[168.84907532 18.31682968]
[163.23112488 32.25455475]
[153.16485596 43.45009613]
[139.85083008 50.53932571]
[124.88691711 52.64957809]
[110.07644653 49.50704575]
[102.08653259 62.20197678]
[122.93540955 73.00322723]
[132.21536255 92.88175201]
[127.75794983 112.78514862]
[113.24019623 124.81836700]
[113.24019623 139.81835938]
[113.24019623 154.81835938]
[113.24019623 169.81835938]
[113.24019623 184.81835938]
[113.24019623 199.81835938]
[113.24019623 214.81835938]
[113.24019623 229.81835938]
[113.24019623 244.81835938]
[113.24019623 259.81835938]
[127.78008270 263.87966919]
[140.68446350 271.71420288]
[150.99574280 282.74050903]
[157.94877625 296.14044189]
[161.02757263 310.91961670]
[160.00367737 325.98129272]
[154.95307922 340.20782471]
[146.25054932 352.54348755]
[134.54188538 362.07290649]
[120.69595337 368.08892822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 29]
[22 28]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[51 127]
[52 126]
[60 118]
[61 117]
[62 116]
[63 115]
[64 114]
[65 113]
[66 112]
[67 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
