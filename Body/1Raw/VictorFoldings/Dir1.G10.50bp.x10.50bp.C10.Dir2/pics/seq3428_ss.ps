%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCUGACGCCGGGGGGGGGGAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACxxxxxxxxxxCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAACCCCCCCCCCUCGCUGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[77.09612274 393.38131714]
[63.07417679 387.82830811]
[50.87422180 378.96197510]
[41.26314926 367.33969116]
[34.84512329 353.69198608]
[32.02358627 338.87680054]
[32.97590256 323.82540894]
[37.64220810 309.48397827]
[45.72917557 296.75402832]
[56.72844696 286.43576050]
[69.94860840 279.17779541]
[84.55861664 275.43634033]
[84.55861664 260.43634033]
[84.55861664 245.43635559]
[84.55861664 230.43635559]
[84.55861664 215.43635559]
[84.55861664 200.43635559]
[84.55861664 185.43635559]
[84.55861664 170.43635559]
[84.55861664 155.43635559]
[84.55861664 140.43635559]
[78.91348267 135.49848938]
[76.00609589 150.21403503]
[61.80840683 155.05403137]
[50.51794434 145.17852783]
[53.42505264 130.46293640]
[67.62319946 125.62278748]
[61.97806168 120.68493652]
[47.11146164 122.68099213]
[32.24486160 124.67704773]
[17.37826347 126.67311096]
[2.51166511 128.66915894]
[-8.32583618 140.49829102]
[-24.32078171 139.25682068]
[-33.20322037 125.89710999]
[-28.15930367 110.66757965]
[-13.05829239 105.25102997]
[0.51560813 113.80256653]
[15.38220692 111.80651093]
[30.24880600 109.81045532]
[45.11540604 107.81439209]
[59.98200226 105.81833649]
[64.04728699 87.66249084]
[75.35055542 74.33823395]
[90.50888824 68.23301697]
[105.64049530 69.79570770]
[111.90990448 56.16873169]
[118.17930603 42.54175186]
[105.08638000 35.20586014]
[92.61768341 26.85291481]
[80.85205078 17.53572845]
[69.86386871 7.31320858]
[59.72260284 -3.75001526]
[50.49238205 -15.58399677]
[42.23155975 -28.11391449]
[34.99235916 -41.26055145]
[28.82055473 -54.94079208]
[23.75516319 -69.06813812]
[19.82821274 -83.55327606]
[17.06453133 -98.30461884]
[15.48159027 -113.22890472]
[15.08939838 -128.23178101]
[15.89043522 -143.21838379]
[17.87963676 -158.09397888]
[21.04442596 -172.76449585]
[25.36479378 -187.13720703]
[30.81342506 -201.12121582]
[37.35587311 -214.62811279]
[44.95076752 -227.57252502]
[53.55009842 -239.87258911]
[63.09949493 -251.45054626]
[73.53858185 -262.23318481]
[84.80135345 -272.15237427]
[96.81661224 -281.14535522]
[109.50837708 -289.15527344]
[122.79642487 -296.13153076]
[136.59672546 -302.02996826]
[150.82205200 -306.81332397]
[165.38243103 -310.45135498]
[180.18583679 -312.92102051]
[195.13865662 -314.20678711]
[210.14637756 -314.30044556]
[225.11407471 -313.20144653]
[239.94715881 -310.91671753]
[254.55181885 -307.46069336]
[268.83572388 -302.85528564]
[282.70858765 -297.12954712]
[296.08267212 -290.31970215]
[308.87341309 -282.46881104]
[321.00000000 -273.62649536]
[332.38568115 -263.84866333]
[342.95855713 -253.19714355]
[352.65170288 -241.73927307]
[361.40390015 -229.54750061]
[369.15975952 -216.69889832]
[375.87030029 -203.27470398]
[381.49304199 -189.35978699]
[385.99246216 -175.04214478]
[389.34011841 -160.41226196]
[391.51483154 -145.56265259]
[392.50286865 -130.58721924]
[392.29794312 -115.58061218]
[390.90142822 -100.63773346]
[388.32205200 -85.85304260]
[384.57623291 -71.32002258]
[379.68756104 -57.13055038]
[373.68698120 -43.37434387]
[366.61242676 -30.13837433]
[358.50863647 -17.50632477]
[349.42684937 -5.55805779]
[339.42446899 5.63088226]
[328.56472778 15.98975563]
[316.91629028 25.45306778]
[304.55282593 33.96099091]
[291.55249023 41.45973206]
[277.99746704 47.90187836]
[263.97344971 53.24670792]
[249.56912231 57.46042252]
[234.87554932 60.51638031]
[219.98561096 62.39526367]
[204.99348450 63.08519363]
[189.99392700 62.58180618]
[175.08178711 60.88828659]
[160.35133362 58.01533508]
[145.89569092 53.98112488]
[131.80628967 48.81115723]
[125.53688049 62.43813705]
[119.26747894 76.06511688]
[131.91473389 91.01821899]
[133.49375916 112.01206207]
[121.70545959 131.20391846]
[99.55861664 140.43635559]
[99.55861664 155.43635559]
[99.55861664 170.43635559]
[99.55861664 185.43635559]
[99.55861664 200.43635559]
[99.55861664 215.43635559]
[99.55861664 230.43635559]
[99.55861664 245.43635559]
[99.55861664 260.43634033]
[99.55861664 275.43634033]
[114.16863251 279.17779541]
[127.38879395 286.43576050]
[138.38806152 296.75402832]
[146.47503662 309.48397827]
[151.14134216 323.82540894]
[152.09365845 338.87680054]
[149.27210999 353.69198608]
[142.85409546 367.33969116]
[133.24302673 378.96197510]
[121.04306030 387.82830811]
[107.02111816 393.38131714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[46 128]
[47 127]
[48 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
