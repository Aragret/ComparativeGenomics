%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCAAACUGGGGGGGGGGCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAxxxxxxxxxxCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCCCCCCCCCCCUAACAAACU\
) } def
/len { sequence length } bind def

/coor [
[65.91606140 521.67883301]
[53.35784149 513.32763672]
[43.27161789 502.11523438]
[36.29142380 488.74630737]
[32.85604095 474.06130981]
[33.18141937 458.98336792]
[37.24710083 444.46023560]
[44.79752350 431.40490723]
[55.35805130 420.63800049]
[68.26484680 412.83636475]
[82.70657349 408.49041748]
[82.08259583 393.50338745]
[81.45861816 378.51638794]
[80.83464050 363.52935791]
[80.21066284 348.54235840]
[79.58668518 333.55532837]
[78.96270752 318.56832886]
[78.33872986 303.58129883]
[77.71475220 288.59429932]
[77.09077454 273.60726929]
[65.31906891 264.35067749]
[63.23725510 248.60261536]
[73.28215027 235.14236450]
[90.76837158 232.36439514]
[88.59153748 217.52319336]
[86.41469574 202.68199158]
[78.85932922 215.64024353]
[65.90591431 223.20390320]
[50.90739822 223.41514587]
[37.74611282 216.21926880]
[29.82880592 203.47892761]
[29.20485687 188.49191284]
[36.03576660 175.13757324]
[48.55337906 166.87261963]
[63.51754761 165.83642578]
[77.05484009 172.29721069]
[85.66113281 184.58250427]
[86.59676361 169.61170959]
[87.53239441 154.64093018]
[78.87458801 139.40798950]
[89.10166168 124.13098907]
[89.72563934 109.14397430]
[84.09368134 95.24141693]
[73.21485901 84.91421509]
[62.33603287 74.58700562]
[50.93501282 64.83935547]
[39.04263306 55.69762039]
[27.15025139 46.55588531]
[15.25787163 37.41415024]
[0.41467449 41.93732834]
[-14.24135590 36.84022903]
[-23.07467651 24.08279800]
[-22.68869591 8.57052422]
[-13.23183060 -3.73180556]
[1.65956128 -8.09369469]
[16.25943565 -2.83790803]
[24.95384216 10.01459789]
[24.39960670 25.52177238]
[36.29198456 34.66350555]
[48.18436432 43.80524063]
[60.07674408 52.94697571]
[61.12195587 37.98343277]
[73.35034943 29.29629517]
[87.82395935 33.23515320]
[93.96375275 46.92102051]
[87.28202820 60.35063934]
[72.66323853 63.70817947]
[83.54206085 74.03538513]
[94.42089081 84.36259460]
[89.82494354 70.08403015]
[85.22900391 55.80546951]
[77.05612946 43.22754669]
[75.64115906 28.29443169]
[81.30618286 14.40531540]
[92.76168060 4.72174072]
[107.40006256 1.44795465]
[121.88923645 5.32916117]
[132.93107605 15.48189068]
[138.01213074 29.59510422]
[135.97584534 44.45624542]
[127.28787994 56.68064117]
[122.10195160 70.75566101]
[116.91601562 84.83067322]
[128.21502686 74.96495056]
[129.87759399 62.13180542]
[139.54608154 54.14810944]
[151.66011047 54.89478302]
[163.16191101 45.26625824]
[174.66372681 35.63772964]
[186.16552734 26.00920486]
[197.66732788 16.38067818]
[194.93876648 1.26609778]
[200.14816284 -13.18235683]
[211.89419556 -23.07812309]
[227.01725769 -25.75929070]
[241.44931030 -20.50463867]
[251.30821228 -8.72764015]
[253.94195557 6.40374851]
[248.64208984 20.81926155]
[236.83425903 30.64119720]
[221.69468689 33.22750473]
[207.29585266 27.88248253]
[195.79405212 37.51100922]
[184.29225159 47.13953400]
[172.79045105 56.76805878]
[161.28863525 66.39658356]
[156.20161438 83.16328430]
[138.08074951 86.26395416]
[126.78173828 96.12967682]
[116.73254395 108.90086365]
[104.71265411 109.76795197]
[104.08867645 124.75496674]
[112.25133514 134.79612732]
[111.38498688 147.30485535]
[102.50318146 155.57655334]
[101.56755829 170.54734802]
[100.63192749 185.51814270]
[101.25590515 200.50515747]
[103.43273926 215.34635925]
[105.60958099 230.18756104]
[114.50193024 242.26754761]
[128.02612305 248.75572205]
[144.92219543 250.15538025]
[148.25451660 266.77862549]
[133.20339966 274.58248901]
[121.53795624 262.27990723]
[108.01376343 255.79174805]
[102.13768768 267.26492310]
[92.07779694 272.98330688]
[92.70177460 287.97030640]
[93.32574463 302.95733643]
[93.94972229 317.94433594]
[94.57369995 332.93136597]
[95.19767761 347.91836548]
[95.82165527 362.90539551]
[96.44563293 377.89239502]
[97.06961060 392.87942505]
[97.69358826 407.86642456]
[112.44659424 410.99688721]
[125.95722961 417.69863892]
[137.37620544 427.55041504]
[145.98571777 439.93295288]
[151.24456787 454.06787109]
[152.82217407 469.06658936]
[150.61936951 483.98632812]
[144.77462769 497.88919067]
[135.65534973 509.90124512]
[123.83477020 519.26739502]
[110.05596161 525.39892578]
[95.18505859 527.91027832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 120]
[25 119]
[26 118]
[37 117]
[38 116]
[39 115]
[41 112]
[42 111]
[43 69]
[44 68]
[45 67]
[46 61]
[47 60]
[48 59]
[49 58]
[83 109]
[84 108]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
