%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCACUAGGGGGGGGGGAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCxxxxxxxxxxUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACACCCCCCCCCCAACCCCAUUA\
) } def
/len { sequence length } bind def

/coor [
[101.72861481 587.98162842]
[87.88268280 581.96557617]
[76.17401886 572.43615723]
[67.47149658 560.10052490]
[62.42089081 545.87396240]
[61.39699936 530.81231689]
[64.47579956 516.03314209]
[71.42881775 502.63320923]
[81.74010468 491.60687256]
[94.64448547 483.77236938]
[109.18437195 479.71105957]
[109.18437195 464.71105957]
[109.18437195 449.71105957]
[109.18437195 434.71105957]
[109.18437195 419.71105957]
[109.18437195 404.71105957]
[109.18437195 389.71105957]
[109.18437195 374.71105957]
[109.18437195 359.71105957]
[109.18437195 344.71105957]
[92.48426819 340.98547363]
[77.11096191 333.45593262]
[63.91789627 322.53646851]
[53.63837814 308.82940674]
[46.84486008 293.09222412]
[43.91703415 276.19552612]
[45.02063370 259.07501221]
[50.09803772 242.67959595]
[58.87126923 227.91882324]
[70.85722351 215.61244202]
[85.39427185 206.44485474]
[101.67876434 200.92706299]
[100.12118530 186.00814819]
[98.56359863 171.08923340]
[94.71605682 164.72196960]
[97.13212585 155.84422302]
[95.88524628 140.89613342]
[94.63837433 125.94805145]
[87.46017456 123.34097290]
[81.32373810 118.79482269]
[76.73884583 112.68727875]
[74.08639526 105.52571869]
[73.58675385 97.90510559]
[75.28141022 90.45853424]
[63.38903046 81.31679535]
[51.49665070 72.17506409]
[39.60427094 63.03332901]
[27.71189117 53.89159393]
[13.54787064 59.83095932]
[-1.68618143 57.87667465]
[-13.89238071 48.55442810]
[-19.78732109 34.37186050]
[-17.78529358 19.14400864]
[-8.42483234 6.96709013]
[5.77614403 1.11663425]
[20.99764442 3.16638422]
[33.14516449 12.56496811]
[38.95107651 26.78421211]
[36.85362625 41.99921417]
[48.74600601 51.14094925]
[60.63838577 60.28268433]
[72.53076172 69.42441559]
[84.42314148 78.56615448]
[89.11245728 75.84405518]
[94.25769806 74.13352966]
[99.64340973 73.50620270]
[105.04405975 73.98834991]
[111.95105743 60.67319870]
[118.85805511 47.35803986]
[125.76505280 34.04288483]
[113.86237335 24.84690475]
[103.79314423 13.67326069]
[95.88104248 0.88113832]
[90.38040924 -13.11824703]
[87.46806335 -27.87487411]
[87.23763275 -42.91437912]
[89.69652557 -57.75329971]
[94.76569366 -71.91463470]
[102.28218079 -84.94314575]
[112.00437164 -96.42002869]
[123.61973572 -105.97634125]
[136.75488281 -113.30489349]
[150.98757935 -118.17010498]
[165.86029053 -120.41556549]
[180.89492798 -119.96910858]
[195.60820007 -116.84508514]
[209.52711487 -111.14390564]
[222.20425415 -103.04885101]
[233.23210144 -92.82014465]
[242.25614929 -80.78659058]
[248.98629761 -67.33501434]
[253.20622253 -52.89784241]
[254.78027344 -37.93916321]
[253.65783691 -22.93983078]
[249.87500000 -8.38201904]
[243.55335999 5.26630163]
[234.89613342 17.56639290]
[224.18162537 28.12285995]
[211.75424194 36.59635544]
[198.01348877 42.71448898]
[183.40107727 46.28059006]
[168.38671875 47.18002319]
[153.45307922 45.38387680]
[139.08021545 40.94988632]
[132.17321777 54.26504135]
[125.26621246 67.58019257]
[118.35921478 80.89535522]
[125.98033142 105.20294189]
[109.58646393 124.70117188]
[110.83333588 139.64926147]
[112.08020782 154.59735107]
[113.48251343 169.53166199]
[115.04009247 184.45056152]
[116.59767914 199.36947632]
[129.58740234 200.54095459]
[142.15783691 204.00273132]
[153.90861511 209.64306641]
[164.46572876 217.28085327]
[173.49346924 226.67140198]
[180.70507812 237.51437378]
[185.87182617 249.46327209]
[188.83035278 262.13659668]
[189.48771667 275.13000488]
[187.82440186 288.02917480]
[183.89488220 300.42303467]
[177.82579041 311.91699219]
[169.81190491 322.14520264]
[160.10981750 330.78250122]
[149.02981567 337.55462646]
[136.92585754 342.24688721]
[124.18437195 344.71105957]
[124.18437195 359.71105957]
[124.18437195 374.71105957]
[124.18437195 389.71105957]
[124.18437195 404.71105957]
[124.18437195 419.71105957]
[124.18437195 434.71105957]
[124.18437195 449.71105957]
[124.18437195 464.71105957]
[124.18437195 479.71105957]
[138.72425842 483.77236938]
[151.62864685 491.60687256]
[161.93992615 502.63320923]
[168.89294434 516.03314209]
[171.97174072 530.81231689]
[170.94786072 545.87396240]
[165.89724731 560.10052490]
[157.19473267 572.43615723]
[145.48606873 581.96557617]
[131.64012146 587.98162842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 114]
[33 113]
[34 112]
[36 111]
[37 110]
[38 109]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[67 107]
[68 106]
[69 105]
[70 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
