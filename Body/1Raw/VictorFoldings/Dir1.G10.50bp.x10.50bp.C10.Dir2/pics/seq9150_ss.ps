%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCCUUCAGGGGGGGGGGCCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCxxxxxxxxxxCUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAACCCCCCCCCCUCUCCCUACA\
) } def
/len { sequence length } bind def

/coor [
[68.80738068 380.01278687]
[55.58718491 372.74032593]
[44.70037842 362.29330444]
[36.88924789 349.38406372]
[32.68636703 334.89276123]
[32.37829590 319.80740356]
[35.98603821 305.15658569]
[43.26361084 291.93920898]
[53.71481705 281.05642700]
[66.62708282 273.25027466]
[81.12001801 269.05300903]
[80.80796051 254.05624390]
[80.49590302 239.05949402]
[80.18384552 224.06272888]
[79.87178802 209.06597900]
[79.55973816 194.06922913]
[79.24768066 179.07247925]
[78.93562317 164.07571411]
[78.62356567 149.07896423]
[65.84620667 141.22154236]
[52.32201767 147.70970154]
[38.79782867 154.19787598]
[36.99356461 169.51936340]
[27.17466164 181.41864014]
[12.47429276 186.09867859]
[-2.41670465 182.06608582]
[-12.74666882 170.60766602]
[-15.21934605 155.37974548]
[-9.04571247 141.24151611]
[3.80424595 132.70440674]
[19.23015594 132.49259949]
[32.30966568 140.67367554]
[45.83385468 134.18551636]
[59.35804367 127.69734955]
[53.43974304 113.82066345]
[52.05674362 98.98824310]
[55.22617340 84.62633514]
[62.53287888 72.08081818]
[73.17974854 62.49113846]
[86.07321930 56.68701172]
[99.93501282 55.11737442]
[102.42012787 40.32466507]
[89.27442932 32.81361389]
[79.51000214 21.27984238]
[74.29061127 7.12787294]
[74.22810364 -7.92756319]
[79.31072235 -22.06929207]
[88.90686035 -33.59702301]
[101.84349823 -41.13178635]
[116.54953766 -43.78085709]
[119.03466034 -58.57356262]
[121.51977539 -73.36627197]
[124.00489044 -88.15898132]
[126.49001312 -102.95168304]
[128.97512817 -117.74439240]
[131.46025085 -132.53709412]
[133.94537354 -147.32980347]
[131.30650330 -162.09585571]
[123.85159302 -175.11216736]
[116.39668274 -188.12847900]
[108.94177246 -201.14479065]
[95.82308197 -211.88426208]
[102.51123810 -227.46325684]
[119.33286285 -225.34916687]
[121.95808411 -208.59970093]
[129.41299438 -195.58338928]
[136.86790466 -182.56707764]
[144.32281494 -169.55076599]
[151.78227234 -168.77198792]
[151.48031616 -183.76893616]
[151.17837524 -198.76589966]
[150.87641907 -213.76286316]
[150.57447815 -228.75982666]
[150.27252197 -243.75679016]
[143.91998291 -257.34521484]
[146.40071106 -272.13864136]
[156.83842468 -282.91149902]
[171.54609680 -285.85836792]
[185.32844543 -279.93832397]
[193.31698608 -267.24255371]
[192.68988037 -252.25564575]
[183.66683960 -240.27030945]
[180.27369690 -225.65913391]
[176.88056946 -211.04794312]
[173.48744202 -196.43676758]
[170.09431458 -181.82559204]
[166.70118713 -167.21440125]
[174.16064453 -166.43560791]
[184.14337158 -177.63137817]
[194.12608337 -188.82714844]
[204.10881042 -200.02290344]
[210.13710022 -215.86892700]
[227.03263855 -214.46282959]
[230.35865784 -197.83833313]
[215.30458069 -190.04017639]
[205.32185364 -178.84442139]
[195.33912659 -167.64865112]
[185.35639954 -156.45288086]
[176.56094360 -147.45750427]
[166.48344421 -142.70468140]
[156.74142456 -142.05999756]
[148.73808289 -144.84469604]
[146.25296021 -130.05198669]
[143.76783752 -115.25927734]
[141.28271484 -100.46656799]
[138.79760742 -85.67385864]
[136.31248474 -70.88114929]
[133.82736206 -56.08844376]
[131.34223938 -41.29573822]
[144.37535095 -33.98659515]
[154.13967896 -22.63816071]
[159.44210815 -8.60752487]
[159.62461853 6.41872501]
[154.64587402 20.62725067]
[145.08856201 32.29679108]
[132.09127808 40.00668335]
[117.21283722 42.80978394]
[114.72772217 57.60249329]
[124.02751923 61.69945526]
[132.23139954 67.82222748]
[138.90144348 75.68567657]
[143.67243958 84.91085052]
[146.27168274 95.04316711]
[146.53443909 105.57482910]
[144.41392517 115.97023010]
[139.98541260 125.69322205]
[133.44409180 134.23474121]
[125.09658813 141.13945007]
[115.34674835 146.02996826]
[104.67615509 148.62736511]
[93.62032318 148.76690674]
[93.93237305 163.76365662]
[94.24443054 178.76042175]
[94.55648804 193.75717163]
[94.86854553 208.75392151]
[95.18060303 223.75067139]
[95.49266052 238.74743652]
[95.80471039 253.74418640]
[96.11676788 268.74093628]
[110.77175903 272.33169556]
[123.99757385 279.59396362]
[134.89244080 290.03256226]
[142.71353149 302.93576050]
[146.92761230 317.42382812]
[147.24732971 332.50894165]
[143.65090942 347.16253662]
[136.38354492 360.38552856]
[125.94073486 371.27636719]
[113.03450775 379.09249878]
[98.54481506 383.30096436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 34]
[21 33]
[22 32]
[41 118]
[42 117]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[58 68]
[59 67]
[60 66]
[61 65]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
