%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCCUAUUCGGGGGGGGGGUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAxxxxxxxxxxCUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCCCCCCCCCCCACCUCCCAUUC\
) } def
/len { sequence length } bind def

/coor [
[79.04634094 385.91552734]
[64.88574219 380.76052856]
[52.29599762 372.47830200]
[41.95605850 361.51553345]
[34.42354965 348.46340942]
[30.10468292 334.02581787]
[29.23237419 318.98135376]
[31.85366440 304.14135742]
[37.82719040 290.30612183]
[46.83081055 278.22177124]
[58.37896347 268.53997803]
[71.84888458 261.78289795]
[86.51414490 258.31494141]
[86.51414490 243.31494141]
[86.51414490 228.31494141]
[86.51414490 213.31494141]
[86.51414490 198.31494141]
[86.51414490 183.31494141]
[86.51414490 168.31494141]
[86.51414490 153.31494141]
[86.51414490 138.31494141]
[86.51414490 123.31493378]
[78.09575653 105.24072266]
[84.81856537 90.12479401]
[76.50081635 77.64220428]
[68.18306732 65.15961456]
[59.86532211 52.67702103]
[45.77412796 45.48335648]
[45.15541458 30.60160637]
[36.83766937 18.11901474]
[28.51992035 5.63642406]
[22.84943008 14.63969135]
[12.72680378 21.24442291]
[-0.83049011 23.79422951]
[-15.76814270 22.42801285]
[-30.70579529 21.06179619]
[-40.11257553 33.28947067]
[-54.64453125 38.46883392]
[-69.66456604 34.94717026]
[-80.37984467 23.84823418]
[-83.37115479 8.71364975]
[-77.68398285 -5.62718773]
[-65.13308716 -14.59817123]
[-49.72341156 -15.33669281]
[-36.37212372 -7.60709190]
[-29.33957672 6.12414360]
[-14.40192509 7.49036026]
[0.53572679 8.85657692]
[5.53534985 3.26607013]
[15.53459549 -7.91494417]
[20.53421974 -13.50545120]
[17.51474190 -28.19840050]
[14.49526310 -42.89134979]
[11.47578526 -57.58429718]
[8.45630741 -72.27724457]
[-6.57662964 -71.85073090]
[-21.45521927 -74.04132080]
[-35.72731781 -78.78244781]
[-48.95921326 -85.93003845]
[-60.74880219 -95.26689148]
[-70.73780823 -106.50925446]
[-78.62268829 -119.31549835]
[-84.16381836 -133.29644775]
[-87.19281769 -148.02723694]
[-87.61763000 -163.06022644]
[-85.42535400 -177.93856812]
[-80.68260193 -192.21012878]
[-73.53350830 -205.44120789]
[-64.19532776 -217.22975159]
[-52.95182800 -227.21748352]
[-40.14469147 -235.10090637]
[-26.16311073 -240.64045715]
[-11.43197250 -243.66777039]
[3.60106087 -244.09088135]
[18.47915268 -241.89692688]
[32.75017548 -237.15255737]
[45.98044968 -230.00195312]
[57.76792145 -220.66242981]
[67.75437927 -209.41780090]
[75.63635254 -196.60977173]
[81.17430878 -182.62756348]
[84.19996643 -167.89608765]
[84.62136841 -152.86300659]
[82.42572021 -137.98516846]
[77.67973328 -123.71467590]
[70.52764130 -110.48521423]
[61.18677902 -98.69879913]
[49.94101715 -88.71361542]
[37.13209152 -80.83309937]
[23.14925766 -75.29672241]
[26.16873550 -60.60377502]
[29.18821335 -45.91082764]
[32.20769119 -31.21787834]
[35.22716904 -16.52492905]
[41.00251007 -2.68132353]
[49.32025909 9.80126762]
[57.63800812 22.28385735]
[71.13426208 28.58468628]
[72.34791565 44.35927200]
[80.66565704 56.84186554]
[88.98340607 69.32445526]
[97.30115509 81.80704498]
[95.09323120 66.97043610]
[103.40423584 54.48334885]
[117.94316864 50.79290390]
[131.20355225 57.80448151]
[136.33901978 71.89798737]
[130.69812012 85.79692078]
[117.19121552 92.32539368]
[132.19044495 92.17337799]
[147.18966675 92.02136993]
[155.31114197 78.90476227]
[169.24455261 72.28179932]
[184.54380798 74.26584625]
[196.32696533 84.22378540]
[200.83406067 98.97809601]
[196.62690735 113.82071686]
[185.04798889 124.01542664]
[169.79208374 126.30912781]
[155.72731018 119.96991730]
[147.34169006 107.02059937]
[132.34245300 107.17260742]
[117.34322357 107.32462311]
[130.57916260 114.38223267]
[145.29089355 117.30879974]
[155.61155701 128.19383240]
[157.75146484 143.04040527]
[150.92485046 156.39695740]
[137.63839722 163.35900879]
[122.77083588 161.37016296]
[111.78143311 151.16070557]
[108.70552826 136.47866821]
[101.51414490 123.31493378]
[101.51414490 138.31494141]
[101.51414490 153.31494141]
[101.51414490 168.31494141]
[101.51414490 183.31494141]
[101.51414490 198.31494141]
[101.51414490 213.31494141]
[101.51414490 228.31494141]
[101.51414490 243.31494141]
[101.51414490 258.31494141]
[116.17940521 261.78289795]
[129.64932251 268.53997803]
[141.19747925 278.22177124]
[150.20109558 290.30612183]
[156.17462158 304.14135742]
[158.79591370 318.98135376]
[157.92359924 334.02581787]
[153.60473633 348.46340942]
[146.07221985 361.51553345]
[135.73228455 372.47830200]
[123.14253998 380.76052856]
[108.98194122 385.91552734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 102]
[25 101]
[26 100]
[27 99]
[29 97]
[30 96]
[31 95]
[34 48]
[35 47]
[36 46]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
