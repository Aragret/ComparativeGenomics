%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCCUACGGGGGGGGGGGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCxxxxxxxxxxAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCCCCCCCCCCCAAGCCAACG\
) } def
/len { sequence length } bind def

/coor [
[83.11769867 348.38613892]
[70.24442291 340.48324585]
[60.12013245 329.27276611]
[53.56554794 315.66342163]
[51.11202621 300.75848389]
[52.95846558 285.76623535]
[58.95517731 271.90203857]
[68.61603546 260.28979492]
[81.15788269 251.87083435]
[95.56401062 247.32766724]
[95.25195312 232.33091736]
[94.93989563 217.33416748]
[94.62783813 202.33740234]
[94.31578064 187.34065247]
[94.00372314 172.34390259]
[93.69167328 157.34715271]
[93.37961578 142.35038757]
[93.06755829 127.35363770]
[92.75550079 112.35688782]
[85.67915344 100.29798889]
[92.24774170 87.95516968]
[77.25373077 87.40267944]
[62.31645203 85.98726654]
[47.48552704 83.71363831]
[32.81022263 80.58934784]
[18.33929253 76.62477112]
[4.12080526 71.83307648]
[-9.79800606 66.23017883]
[-23.37090302 59.83470154]
[-36.55279922 52.66788101]
[-49.29990768 44.75352859]
[-61.56987762 36.11793137]
[-73.32195282 26.78977966]
[-84.51709747 16.80005836]
[-95.11811066 6.18195486]
[-105.08979034 -5.02926016]
[-114.39900208 -16.79634285]
[-123.01483154 -29.08020592]
[-130.90864563 -41.84004211]
[-138.05422974 -55.03346252]
[-144.42784119 -68.61664581]
[-150.00831604 -82.54445648]
[-154.77709961 -96.77064514]
[-158.71836853 -111.24794006]
[-161.81903076 -125.92825317]
[-164.06875610 -140.76281738]
[-165.46011353 -155.70236206]
[-165.98846436 -170.69725037]
[-165.65203857 -185.69766235]
[-164.45196533 -200.65379333]
[-162.39224243 -215.51593018]
[-159.47969055 -230.23471069]
[-155.72399902 -244.76126099]
[-151.13763428 -259.04730225]
[-145.73583984 -273.04537964]
[-139.53657532 -286.70901489]
[-132.56039429 -299.99279785]
[-124.83050537 -312.85260010]
[-116.37257385 -325.24569702]
[-107.21469116 -337.13095093]
[-97.38729095 -348.46884155]
[-86.92301178 -359.22174072]
[-75.85662079 -369.35388184]
[-64.22486877 -378.83166504]
[-52.06640625 -387.62356567]
[-39.42161560 -395.70037842]
[-26.33250809 -403.03527832]
[-12.84255886 -409.60391235]
[1.00341702 -415.38446045]
[15.15942478 -420.35769653]
[29.57843971 -424.50714111]
[44.21256256 -427.81896973]
[59.01317978 -430.28216553]
[73.93112183 -431.88861084]
[88.91683960 -432.63293457]
[103.92054749 -432.51263428]
[118.89240265 -431.52816772]
[133.78268433 -429.68276978]
[148.54190063 -426.98254395]
[163.12104797 -423.43652344]
[177.47167969 -419.05645752]
[191.54612732 -413.85690308]
[205.29765320 -407.85510254]
[218.68054199 -401.07101440]
[231.65037537 -393.52719116]
[244.16404724 -385.24868774]
[256.17999268 -376.26300049]
[267.65829468 -366.59994507]
[278.56082153 -356.29165649]
[288.85134888 -345.37237549]
[298.49569702 -333.87838745]
[307.46185303 -321.84783936]
[315.72000122 -309.32070923]
[323.24270630 -296.33865356]
[330.00500488 -282.94473267]
[335.98443604 -269.18347168]
[341.16110229 -255.10057068]
[345.51782227 -240.74282837]
[349.04013062 -226.15794373]
[351.71630859 -211.39434814]
[353.53750610 -196.50109863]
[354.49761963 -181.52764893]
[354.59350586 -166.52377319]
[353.82482910 -151.53927612]
[352.19412231 -136.62397766]
[349.70681763 -121.82737732]
[346.37121582 -107.19866180]
[342.19833374 -92.78641510]
[337.20205688 -78.63851929]
[331.39901733 -64.80196381]
[324.80844116 -51.32271576]
[317.45223999 -38.24555588]
[309.35485840 -25.61392021]
[300.54321289 -13.46977329]
[291.04653931 -1.85345614]
[280.89639282 9.19644356]
[270.12649536 19.64321899]
[258.77261353 29.45216370]
[246.87249756 38.59069824]
[234.46565247 47.02846146]
[221.59329224 54.73742676]
[208.29818726 61.69198227]
[194.62449646 67.86902618]
[180.61764526 73.24803925]
[166.32415771 77.81115723]
[151.79153442 81.54321289]
[137.06802368 84.43181610]
[122.20255280 86.46736908]
[107.24449921 87.64311218]
[114.32084656 99.70201111]
[107.75225830 112.04483032]
[108.06430817 127.04158020]
[108.37636566 142.03833008]
[108.68842316 157.03509521]
[109.00048065 172.03184509]
[109.31253815 187.02859497]
[109.62459564 202.02534485]
[109.93664551 217.02210999]
[110.24870300 232.01885986]
[110.56076050 247.01560974]
[125.14340210 250.95556641]
[138.02461243 258.84552002]
[148.16015625 270.04583740]
[154.72840881 283.64859009]
[157.19689941 298.55105591]
[155.36552429 313.54513550]
[149.38275146 327.41534424]
[139.73356628 339.03729248]
[127.20017242 347.46884155]
[112.79862213 352.02648926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
