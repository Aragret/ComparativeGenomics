%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAAAAAGUAGGGGGGGGGGAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCxxxxxxxxxxAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAACCCCCCCCCCUUAAAAAAACUA\
) } def
/len { sequence length } bind def

/coor [
[104.43787384 382.59875488]
[89.82187653 378.94903564]
[76.38470459 372.13800049]
[64.80036926 362.50726318]
[55.64991760 350.53994751]
[49.39234924 336.83627319]
[46.34153366 322.08364868]
[46.65050125 307.02203369]
[50.30375290 292.40692139]
[57.11804199 278.97140503]
[66.75157166 267.38937378]
[78.72111511 258.24182129]
[92.42630005 251.98757935]
[107.17967987 248.94035339]
[107.48368073 233.94342041]
[107.78768921 218.94650269]
[108.09169006 203.94958496]
[108.39569855 188.95266724]
[108.69969940 173.95574951]
[109.00370026 158.95883179]
[109.30770874 143.96191406]
[109.61170959 128.96499634]
[104.28160858 123.68863678]
[93.62139893 113.13591003]
[88.29129028 107.85955048]
[73.29822540 108.31552124]
[58.30515671 108.77148438]
[54.59058762 111.26979828]
[50.66766739 112.31291199]
[47.03088379 112.01898193]
[44.08251572 110.65798950]
[42.09022141 108.60715485]
[27.10947418 107.84741974]
[12.12872601 107.08767700]
[4.39358521 120.29473114]
[-8.59929752 128.38444519]
[-23.86425209 129.49787903]
[-37.89350510 123.37917328]
[-47.46323395 111.43434906]
[-50.37438965 96.40824127]
[-45.95800400 81.75375366]
[-35.22893524 70.83836365]
[-20.65264320 66.17035675]
[-5.57865238 68.82241058]
[6.52914429 78.18508911]
[12.88846397 92.10693359]
[27.86921120 92.86666870]
[42.84996033 93.62641144]
[57.84918976 93.77841949]
[72.84225464 93.32244873]
[87.83532715 92.86648560]
[101.02362061 85.72023773]
[109.59264374 73.40878296]
[118.16166687 61.09733200]
[126.73069000 48.78588104]
[135.29971313 36.47443008]
[123.75205994 26.88665390]
[113.05910492 16.35410118]
[103.29791260 4.95265818]
[94.53879547 -7.23552370]
[86.84487915 -20.12262726]
[80.27159119 -33.61579895]
[74.86628723 -47.61782074]
[70.66793060 -62.02780151]
[67.70675659 -76.74192047]
[66.00410461 -91.65415955]
[65.57223511 -106.65706635]
[66.41427612 -121.64255524]
[68.52415466 -136.50263977]
[71.88665771 -151.13026428]
[76.47757721 -165.42002869]
[82.26381683 -179.26898193]
[89.20368958 -192.57731628]
[97.24720764 -205.24916077]
[106.33639526 -217.19322205]
[116.40577698 -228.32342529]
[127.38279724 -238.55958557]
[139.18836975 -247.82792664]
[151.73742676 -256.06170654]
[164.93954468 -263.20156860]
[178.69961548 -269.19610596]
[192.91850281 -274.00207520]
[207.49372864 -277.58486938]
[222.32029724 -279.91870117]
[237.29136658 -280.98672485]
[252.29908752 -280.78125000]
[267.23532104 -279.30377197]
[281.99243164 -276.56494141]
[296.46411133 -272.58444214]
[310.54608154 -267.39102173]
[324.13690186 -261.02203369]
[337.13861084 -253.52342224]
[349.45755005 -244.94918823]
[361.00497437 -235.36109924]
[371.69763184 -224.82827759]
[381.45855713 -213.42658997]
[390.21734619 -201.23817444]
[397.91091919 -188.35087585]
[404.48385620 -174.85752869]
[409.88879395 -160.85537720]
[414.08679199 -146.44528198]
[417.04760742 -131.73107910]
[418.74984741 -116.81880188]
[419.18133545 -101.81587982]
[418.33889771 -86.83041382]
[416.22863770 -71.97038269]
[412.86575317 -57.34284210]
[408.27447510 -43.05319595]
[402.48788452 -29.20440292]
[395.54766846 -15.89624119]
[387.50381470 -3.22459984]
[378.41433716 8.71922016]
[368.34466553 19.84916115]
[357.36737061 30.08503342]
[345.56155396 39.35308075]
[333.01229858 47.58653259]
[319.80996704 54.72605896]
[306.04974365 60.72022247]
[291.83074951 65.52583313]
[277.25543213 69.10826111]
[262.42880249 71.44170380]
[247.45770264 72.50934601]
[232.44998169 72.30348969]
[217.51379395 70.82562256]
[202.75674438 68.08639526]
[188.28517151 64.10553741]
[174.20332336 58.91173172]
[160.61268616 52.54240799]
[147.61116028 45.04345322]
[139.04214478 57.35490417]
[130.47311401 69.66635895]
[121.90409851 81.97780609]
[113.33507538 94.28926086]
[124.60863495 129.26899719]
[124.30462646 144.26591492]
[124.00062561 159.26283264]
[123.69661713 174.25975037]
[123.39261627 189.25666809]
[123.08860779 204.25358582]
[122.78460693 219.25051880]
[122.48059845 234.24743652]
[122.17659760 249.24435425]
[136.79435730 252.88697815]
[150.23483276 259.69149780]
[161.82383728 269.31658936]
[170.98008728 281.27951050]
[177.24429321 294.98013306]
[180.30226135 309.73129272]
[180.00059509 324.79306030]
[176.35441589 339.40994263]
[169.54664612 352.84875488]
[159.91873169 364.43542480]
[147.95361328 373.58877563]
[134.25146484 379.84967041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[25 51]
[26 50]
[27 49]
[32 48]
[33 47]
[34 46]
[52 133]
[53 132]
[54 131]
[55 130]
[56 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
