%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAUCACCCGGGGGGGGGGCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUxxxxxxxxxxAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACCCCCCCCCCCUCACAACACCC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 460.23660278]
[70.87159729 455.08160400]
[58.28185654 446.79940796]
[47.94191742 435.83660889]
[40.40940475 422.78448486]
[36.09054184 408.34689331]
[35.21823120 393.30242920]
[37.83952332 378.46243286]
[43.81304932 364.62719727]
[52.81666565 352.54284668]
[64.36482239 342.86108398]
[77.83473969 336.10400391]
[92.50000000 332.63601685]
[92.50000000 317.63601685]
[92.50000000 302.63601685]
[92.50000000 287.63601685]
[92.50000000 272.63601685]
[92.50000000 257.63601685]
[92.50000000 242.63603210]
[92.50000000 227.63603210]
[92.50000000 212.63603210]
[92.50000000 197.63603210]
[81.81912994 187.31834412]
[81.60544586 172.10621643]
[92.50000000 160.97308350]
[92.50000000 145.97308350]
[92.50000000 130.97308350]
[92.50000000 115.97309113]
[81.02019501 106.31834412]
[66.24225616 108.88979340]
[51.46430969 111.46124268]
[36.68636322 114.03269196]
[24.45390129 124.95509338]
[8.96539402 119.56638336]
[6.15408945 103.41000366]
[18.91201782 93.10625458]
[34.11491394 99.25474548]
[48.89286041 96.68329620]
[63.67080307 94.11184692]
[78.44874573 91.54039764]
[80.03285980 84.20960236]
[65.10980225 85.72693634]
[59.05541992 72.00307465]
[70.23680878 62.00424576]
[83.20108032 69.54800415]
[84.78519440 62.21720886]
[72.38753510 53.77338791]
[59.98987579 45.32957077]
[46.19024658 52.07240295]
[30.86911583 50.99604797]
[18.14779282 42.39003372]
[11.44824600 28.56933594]
[12.57262230 13.25165558]
[21.21846962 0.55736923]
[35.06009674 -6.09882259]
[50.37417984 -4.92643881]
[63.04130173 3.75915647]
[69.65407562 17.62158012]
[68.43369293 32.93191147]
[80.83135223 41.37573242]
[93.22901154 49.81954956]
[99.91223907 70.80919647]
[100.98970795 92.31681824]
[110.52762604 80.73976898]
[120.06553650 69.16271210]
[129.60345459 57.58565903]
[139.14137268 46.00860596]
[130.89752197 18.14891052]
[153.07527161 -7.65835667]
[153.37927246 -22.65527534]
[153.68327332 -37.65219498]
[139.88146973 -44.08882141]
[129.89581299 -55.58692551]
[125.45637512 -70.15439606]
[127.33230591 -85.26733398]
[135.19859314 -98.30731964]
[147.69236755 -107.01510620]
[162.64900208 -109.88201904]
[177.47715759 -106.41133881]
[189.60777283 -97.20438385]
[196.93916321 -83.85632324]
[198.20108032 -68.67977905]
[193.17494202 -54.30418777]
[182.73150635 -43.22020340]
[168.68019104 -37.34819031]
[168.37619019 -22.35127068]
[168.07218933 -7.35435247]
[174.39648438 -3.32282495]
[181.85317993 -16.33811188]
[186.20510864 -30.69292831]
[201.18843079 -31.40012932]
[206.87307739 -17.51903152]
[195.69651794 -7.51345968]
[187.04508972 4.74023008]
[193.36940002 8.77175808]
[206.83645630 2.16584539]
[220.30352783 -4.44006681]
[233.77059937 -11.04597950]
[247.23767090 -17.65189171]
[260.70474243 -24.25780296]
[262.37524414 -39.59445572]
[272.08996582 -51.57894135]
[286.74893188 -56.38705444]
[301.67456055 -52.48454285]
[312.10409546 -41.11668396]
[314.70953369 -25.91092300]
[308.65948486 -11.71935844]
[295.88452148 -3.07046986]
[280.46102905 -2.72408557]
[267.31063843 -10.79073524]
[253.84358215 -4.18482304]
[240.37651062 2.42108893]
[226.90943909 9.02700138]
[213.44236755 15.63291359]
[199.97531128 22.23882675]
[198.99444580 34.11725235]
[194.53181458 44.65536118]
[187.30496216 52.90797043]
[178.26200867 58.23550797]
[168.46566772 60.35039139]
[158.97215271 59.32268143]
[150.71842957 55.54652023]
[141.18051147 67.12357330]
[131.64259338 78.70063019]
[122.10467529 90.27767944]
[112.56676483 101.85473633]
[107.50000000 115.97309113]
[107.50000000 130.97308350]
[107.50000000 145.97308350]
[107.50000000 160.97308350]
[118.39455414 172.10621643]
[118.18087006 187.31834412]
[107.50000000 197.63603210]
[107.50000000 212.63603210]
[107.50000000 227.63603210]
[107.50000000 242.63603210]
[107.50000000 257.63601685]
[107.50000000 272.63601685]
[107.50000000 287.63601685]
[107.50000000 302.63601685]
[107.50000000 317.63601685]
[107.50000000 332.63601685]
[122.16526031 336.10400391]
[135.63517761 342.86108398]
[147.18333435 352.54284668]
[156.18695068 364.62719727]
[162.16047668 378.46243286]
[164.78176880 393.30242920]
[163.90945435 408.34689331]
[159.59059143 422.78448486]
[152.05809021 435.83660889]
[141.71813965 446.79940796]
[129.12840271 455.08160400]
[114.96779633 460.23660278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 130]
[26 129]
[27 128]
[28 127]
[29 40]
[30 39]
[31 38]
[32 37]
[46 61]
[47 60]
[48 59]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[69 87]
[70 86]
[71 85]
[95 115]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
