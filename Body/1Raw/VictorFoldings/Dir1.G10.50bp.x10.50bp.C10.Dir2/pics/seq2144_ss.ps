%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUAAGACCGGGGGGGGGGCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUxxxxxxxxxxCUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUCCCCCCCCCCAAGCUAAGCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 469.50906372]
[71.01555634 463.95605469]
[58.81560135 455.08972168]
[49.20452881 443.46740723]
[42.78650284 429.81970215]
[39.96496582 415.00451660]
[40.91728210 399.95312500]
[45.58358765 385.61172485]
[53.67055511 372.88174438]
[64.66983032 362.56347656]
[77.88998413 355.30551147]
[92.50000000 351.56405640]
[92.50000000 336.56405640]
[92.50000000 321.56405640]
[92.50000000 306.56405640]
[92.50000000 291.56405640]
[92.50000000 276.56405640]
[92.50000000 261.56405640]
[92.50000000 246.56407166]
[92.50000000 231.56407166]
[92.50000000 216.56407166]
[79.53267670 209.23507690]
[71.92427826 196.31346130]
[71.80444336 181.21868896]
[79.30548859 168.00387573]
[92.50000000 160.26747131]
[92.50000000 145.26747131]
[92.50000000 130.26747131]
[67.82926941 115.92073059]
[62.73970413 83.85831451]
[86.88332367 56.62146759]
[73.89293671 49.12146759]
[60.90256119 41.62146759]
[47.91217804 34.12146759]
[34.92179871 26.62146950]
[21.04891586 20.91680527]
[6.54029131 17.10894585]
[-7.96833420 13.30108738]
[-22.47695923 9.49322891]
[-33.22426987 20.46550751]
[-48.02215958 24.57866669]
[-62.89006805 20.72628403]
[-73.82860565 9.94463539]
[-77.89535522 -4.86607361]
[-73.99639130 -19.72183418]
[-63.18050766 -30.62652206]
[-48.35712433 -34.64683151]
[-33.51366043 -30.70132065]
[-22.64292717 -19.85130882]
[-18.66910172 -5.01539660]
[-4.16047525 -1.20753765]
[10.34815025 2.60032105]
[24.85677528 6.40817976]
[15.04131317 -4.93451405]
[10.58116245 -19.25607300]
[12.22073078 -34.16619873]
[19.68637276 -47.17635345]
[31.73205376 -56.11511993]
[46.34732437 -59.49059677]
[61.09286499 -56.73941040]
[73.50761414 -48.32073593]
[81.51951599 -35.63967133]
[83.79137421 -20.81271172]
[79.94400024 -6.31451368]
[70.61954498 5.43514442]
[57.37426758 12.47521877]
[42.42179871 13.63108730]
[55.41217804 21.13108826]
[68.40255737 28.63108826]
[81.39293671 36.13108826]
[94.38332367 43.63108826]
[86.57888031 30.82129860]
[74.48030090 21.95426559]
[68.27667236 8.29721355]
[69.55876160 -6.64789534]
[77.99779510 -19.04881096]
[91.42982483 -25.72566986]
[106.41059875 -24.96638298]
[119.09870911 -16.96564674]
[126.24066162 -3.77502251]
[126.00509644 11.22312737]
[118.45228577 24.18308449]
[116.41066742 39.04349518]
[125.32682037 26.98106194]
[134.24296570 14.91863155]
[143.15911865 2.85619998]
[136.43141174 -10.89140320]
[136.87475586 -26.19048882]
[144.38725281 -39.52544022]
[157.24259949 -47.83198166]
[172.48672485 -49.20133209]
[186.61665344 -43.31882477]
[196.38540649 -31.53621483]
[199.54821777 -16.56106186]
[195.37829590 -1.83454633]
[184.83384705 9.25928783]
[170.33790588 14.17115688]
[155.22155762 11.77235126]
[146.30540466 23.83478165]
[137.38925171 35.89721298]
[128.47309875 47.95964432]
[132.08894348 54.53046036]
[145.23069763 47.29897690]
[152.46197510 60.44084930]
[139.32064819 67.67209625]
[142.93650818 74.24290466]
[157.89778137 73.16584015]
[172.85906982 72.08876801]
[187.82034302 71.01169586]
[196.83868408 58.23657990]
[211.97192383 54.29715729]
[226.07461548 61.05349731]
[232.48789978 75.31546783]
[228.18360901 90.34900665]
[215.19410706 99.05572510]
[199.65264893 97.32458496]
[188.89741516 85.97297668]
[173.93614197 87.05004883]
[158.97485352 88.12712097]
[144.01358032 89.20418549]
[142.37753296 103.10552979]
[136.73316956 114.96376038]
[128.16203308 123.74583435]
[117.96708679 128.87660217]
[107.50000000 130.26747131]
[107.50000000 145.26747131]
[107.50000000 160.26747131]
[120.69451141 168.00387573]
[128.19555664 181.21868896]
[128.07571411 196.31346130]
[120.46732330 209.23507690]
[107.50000000 216.56407166]
[107.50000000 231.56407166]
[107.50000000 246.56407166]
[107.50000000 261.56405640]
[107.50000000 276.56405640]
[107.50000000 291.56405640]
[107.50000000 306.56405640]
[107.50000000 321.56405640]
[107.50000000 336.56405640]
[107.50000000 351.56405640]
[122.11001587 355.30551147]
[135.33016968 362.56347656]
[146.32945251 372.88174438]
[154.41641235 385.61172485]
[159.08271790 399.95312500]
[160.03503418 415.00451660]
[157.21350098 429.81970215]
[150.79547119 443.46740723]
[141.18440247 455.08972168]
[128.98443604 463.95605469]
[114.96250153 469.50906372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 127]
[27 126]
[28 125]
[31 71]
[32 70]
[33 69]
[34 68]
[35 67]
[36 53]
[37 52]
[38 51]
[39 50]
[83 101]
[84 100]
[85 99]
[86 98]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
