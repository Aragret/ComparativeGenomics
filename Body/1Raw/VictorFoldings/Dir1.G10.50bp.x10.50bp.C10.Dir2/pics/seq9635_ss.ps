%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAACCCUCGGGGGGGGGGAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUxxxxxxxxxxCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACCCCCCCCCCCAUAGCCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 397.46301270]
[71.19830322 391.44696045]
[59.48964310 381.91757202]
[50.78712082 369.58187866]
[45.73651886 355.35537720]
[44.71262741 340.29370117]
[47.79142761 325.51452637]
[54.74444962 312.11459351]
[65.05573273 301.08825684]
[77.96011353 293.25375366]
[92.50000000 289.19244385]
[92.50000000 274.19244385]
[92.50000000 259.19244385]
[92.50000000 244.19244385]
[92.50000000 229.19244385]
[92.50000000 214.19244385]
[92.50000000 199.19244385]
[92.50000000 184.19244385]
[92.50000000 169.19244385]
[92.50000000 154.19244385]
[84.04806519 152.33169556]
[75.99530792 149.16142273]
[68.54323578 144.76095581]
[61.87832642 139.24040222]
[56.16736221 132.73791504]
[51.55324554 125.41619873]
[48.15144730 117.45848083]
[46.04708481 109.06388092]
[45.29282379 100.44248199]
[45.90753174 91.81000519]
[47.87583542 83.38246918]
[51.14847183 75.37076569]
[55.64355087 67.97537231]
[61.24859238 61.38135910]
[67.82333374 55.75371933]
[75.20325470 51.23328781]
[70.30170441 37.05672836]
[65.40015411 22.88017082]
[60.49860001 8.70361233]
[45.82752609 16.38919449]
[25.24650955 12.09556293]
[11.86022568 5.32744837]
[-1.52605963 -1.44066656]
[-14.91234493 -8.20878124]
[-28.29862976 -14.97689629]
[-42.60178375 -8.65599823]
[-57.60716629 -13.05743122]
[-66.22968292 -26.10297203]
[-64.39805603 -41.63291550]
[-52.97711945 -52.31449890]
[-37.35948944 -53.10420227]
[-24.91933441 -43.62915421]
[-21.53051376 -28.36318016]
[-8.14422989 -21.59506607]
[5.24205494 -14.82695103]
[18.62833977 -8.05883694]
[32.01462555 -1.29072177]
[38.77671814 -4.53480434]
[30.27395630 -16.89211082]
[18.96943474 -26.75151253]
[20.98760986 -41.61512375]
[34.51179886 -48.10329437]
[47.36804199 -40.37561798]
[47.98364258 -25.38824654]
[52.30091095 -11.02296925]
[59.06300354 -14.26705170]
[62.16132736 -28.94357681]
[65.25965118 -43.62010193]
[68.35797119 -58.29662704]
[54.89971161 -65.11847687]
[43.66630173 -75.19185638]
[35.42366028 -87.82994843]
[30.73377800 -102.17105865]
[29.91642189 -117.23738861]
[33.02732086 -132.00169373]
[39.85436630 -145.45732117]
[49.93208313 -156.68682861]
[62.57334900 -164.92459106]
[76.91626740 -169.60894775]
[91.98291779 -170.42048645]
[106.74601746 -167.30387878]
[120.19900513 -160.47163391]
[131.42463684 -150.38958740]
[139.65751648 -137.74514771]
[144.33631897 -123.40041351]
[145.14204407 -108.33345795]
[142.01974487 -93.57155609]
[135.18231201 -80.12120819]
[125.09592438 -68.89947510]
[112.44829559 -60.67147827]
[98.10176086 -55.99821091]
[83.03449249 -55.19830704]
[79.93617249 -40.52178192]
[76.83785248 -25.84525490]
[73.73953247 -11.16873074]
[74.67515564 3.80206132]
[79.57670593 17.97861862]
[84.47826385 32.15517807]
[89.37981415 46.33173370]
[108.35143280 45.93222046]
[126.31832886 52.03734207]
[141.11900330 63.91261673]
[150.97283936 80.12939453]
[154.69438171 98.73670197]
[169.59628296 100.44939423]
[184.49818420 102.16208649]
[199.09153748 96.05107880]
[210.85214233 105.19097137]
[225.75404358 106.90365601]
[240.65594482 108.61634827]
[255.55784607 110.32904053]
[265.24600220 98.32308197]
[279.89431763 93.48253632]
[294.82852173 97.35199738]
[305.28320312 108.69674683]
[307.92230225 123.89670563]
[301.90368652 138.10162354]
[289.14785767 146.77876282]
[273.72518921 147.15928650]
[260.55697632 139.12176514]
[253.84515381 125.23094177]
[238.94325256 123.51824951]
[224.04135132 121.80556488]
[209.13945007 120.09287262]
[195.61196899 126.32637787]
[182.78549194 117.06398773]
[167.88359070 115.35129547]
[152.98168945 113.63861084]
[143.69404602 132.92265320]
[127.71838379 147.16738892]
[107.50000000 154.19244385]
[107.50000000 169.19244385]
[107.50000000 184.19244385]
[107.50000000 199.19244385]
[107.50000000 214.19244385]
[107.50000000 229.19244385]
[107.50000000 244.19244385]
[107.50000000 259.19244385]
[107.50000000 274.19244385]
[107.50000000 289.19244385]
[122.03988647 293.25375366]
[134.94427490 301.08825684]
[145.25555420 312.11459351]
[152.20857239 325.51452637]
[155.28736877 340.29370117]
[154.26348877 355.35537720]
[149.21287537 369.58187866]
[140.51036072 381.91757202]
[128.80169678 391.44696045]
[114.95575714 397.46301270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 99]
[37 98]
[38 97]
[39 96]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[66 95]
[67 94]
[68 93]
[69 92]
[104 128]
[105 127]
[106 126]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
