%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUUCGCUGGGGGGGGGGUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGxxxxxxxxxxUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACCCCCCCCCCCAGCCCUCGCU\
) } def
/len { sequence length } bind def

/coor [
[83.46720886 367.94857788]
[70.24700928 360.67611694]
[59.36021042 350.22909546]
[51.54907990 337.31985474]
[47.34619904 322.82855225]
[47.03812408 307.74319458]
[50.64586639 293.09237671]
[57.92343903 279.87500000]
[68.37464905 268.99221802]
[81.28691101 261.18606567]
[95.77984619 256.98880005]
[95.46778870 241.99203491]
[95.15573120 226.99528503]
[94.84367371 211.99853516]
[94.53162384 197.00178528]
[94.21956635 182.00502014]
[93.90750885 167.00827026]
[93.59545135 152.01152039]
[93.28339386 137.01477051]
[92.97133636 122.01801300]
[92.65928650 107.02125549]
[89.33838654 99.61479187]
[92.50000000 91.71001434]
[92.50000000 76.71001434]
[77.52276611 75.80419159]
[62.62754440 73.99571991]
[47.86869049 71.29119110]
[33.30006409 67.70048523]
[18.97481728 63.23668671]
[4.94522429 57.91609573]
[-8.73752117 51.75812531]
[-22.02349281 44.78524017]
[-34.86421204 37.02289200]
[-47.21282196 28.49939537]
[-59.02426910 19.24585915]
[-70.25544739 9.29604721]
[-80.86537933 -1.31373656]
[-90.81534576 -12.54477692]
[-100.06904602 -24.35609245]
[-108.59271240 -36.70458603]
[-116.35523987 -49.54519653]
[-123.32830811 -62.83106995]
[-129.48646545 -76.51373291]
[-134.80725098 -90.54325104]
[-139.27125549 -104.86843109]
[-142.86216736 -119.43701172]
[-145.56689453 -134.19583130]
[-147.37557983 -149.09101868]
[-148.28160095 -164.06823730]
[-148.28167725 -179.07284546]
[-147.37579346 -194.05007935]
[-145.56724548 -208.94529724]
[-142.86265564 -223.70413208]
[-139.27186584 -238.27275085]
[-134.80801392 -252.59797668]
[-129.48735046 -266.62753296]
[-123.32931519 -280.31024170]
[-116.35637665 -293.59619141]
[-108.59396362 -306.43688965]
[-100.07041168 -318.78546143]
[-90.81681824 -330.59686279]
[-80.86695862 -341.82797241]
[-70.25712585 -352.43786621]
[-59.02603531 -362.38778687]
[-47.21467972 -371.64141846]
[-34.86614609 -380.16503906]
[-22.02549934 -387.92752075]
[-8.73959160 -394.90051270]
[4.94309664 -401.05862427]
[18.97263908 -406.37933350]
[33.29784393 -410.84326172]
[47.86643982 -414.43411255]
[62.62526703 -417.13876343]
[77.52046967 -418.94738770]
[92.49769592 -419.85333252]
[107.50230408 -419.85333252]
[122.47953033 -418.94738770]
[137.37474060 -417.13876343]
[152.13356018 -414.43411255]
[166.70214844 -410.84326172]
[181.02735901 -406.37933350]
[195.05690002 -401.05862427]
[208.73959351 -394.90051270]
[222.02549744 -387.92752075]
[234.86614990 -380.16503906]
[247.21467590 -371.64141846]
[259.02603149 -362.38778687]
[270.25711060 -352.43786621]
[280.86694336 -341.82797241]
[290.81683350 -330.59686279]
[300.07040405 -318.78546143]
[308.59396362 -306.43688965]
[316.35638428 -293.59619141]
[323.32931519 -280.31024170]
[329.48736572 -266.62753296]
[334.80801392 -252.59797668]
[339.27188110 -238.27275085]
[342.86264038 -223.70413208]
[345.56726074 -208.94529724]
[347.37579346 -194.05007935]
[348.28167725 -179.07284546]
[348.28161621 -164.06823730]
[347.37557983 -149.09101868]
[345.56689453 -134.19583130]
[342.86218262 -119.43701172]
[339.27124023 -104.86843109]
[334.80725098 -90.54325104]
[329.48648071 -76.51373291]
[323.32830811 -62.83106995]
[316.35525513 -49.54519653]
[308.59271240 -36.70458603]
[300.06906128 -24.35609245]
[290.81533813 -12.54477692]
[280.86538696 -1.31373656]
[270.25543213 9.29604721]
[259.02426147 19.24585915]
[247.21282959 28.49939537]
[234.86421204 37.02289200]
[222.02349854 44.78524017]
[208.73751831 51.75812531]
[195.05477905 57.91609573]
[181.02517700 63.23668671]
[166.69993591 67.70048523]
[152.13130188 71.29119110]
[137.37245178 73.99571991]
[122.47723389 75.80419159]
[107.50000000 76.71001434]
[107.50000000 91.71001434]
[107.65603638 106.70919800]
[107.96809387 121.70595551]
[108.28015137 136.70271301]
[108.59220886 151.69946289]
[108.90425873 166.69621277]
[109.21631622 181.69296265]
[109.52837372 196.68972778]
[109.84043121 211.68647766]
[110.15248871 226.68322754]
[110.46454620 241.67997742]
[110.77659607 256.67672729]
[125.43159485 260.26751709]
[138.65739441 267.52975464]
[149.55226135 277.96835327]
[157.37336731 290.87158203]
[161.58743286 305.35964966]
[161.90715027 320.44473267]
[158.31072998 335.09832764]
[151.04336548 348.32135010]
[140.60057068 359.21218872]
[127.69433594 367.02828979]
[113.20464325 371.23675537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 128]
[24 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
