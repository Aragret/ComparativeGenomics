%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCAGCAGGGGGGGGGGGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUxxxxxxxxxxCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCCCCCCCCCCCUAGCAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.70864868]
[71.19830322 381.69262695]
[59.48964310 372.16320801]
[50.78712082 359.82754517]
[45.73651886 345.60101318]
[44.71262741 330.53933716]
[47.79142761 315.76016235]
[54.74444962 302.36026001]
[65.05573273 291.33392334]
[77.96011353 283.49942017]
[92.50000000 279.43807983]
[92.50000000 264.43807983]
[92.50000000 249.43809509]
[92.50000000 234.43809509]
[92.50000000 219.43809509]
[92.50000000 204.43809509]
[92.50000000 189.43809509]
[92.50000000 174.43809509]
[92.50000000 159.43809509]
[92.50000000 144.43809509]
[92.50000000 129.43809509]
[92.50000000 114.43809509]
[84.75576782 105.68522644]
[84.87733459 93.99886322]
[92.80198669 85.40900421]
[93.11404419 70.41224670]
[93.42610168 55.41549683]
[93.73815918 40.41874313]
[78.78776550 39.13631821]
[63.95173264 36.88884354]
[49.29229736 33.68574524]
[34.87094116 29.54045868]
[20.74815559 24.47037125]
[6.98317337 18.49674606]
[-6.36626768 11.64464188]
[-19.24417496 3.94279766]
[-31.59653473 -4.57648230]
[-43.37153625 -13.87746429]
[-54.51978683 -23.92113686]
[-64.99453735 -34.66537476]
[-74.75183868 -46.06510544]
[-83.75077057 -58.07252502]
[-91.95359802 -70.63726044]
[-99.32589722 -83.70661926]
[-105.83676147 -97.22577667]
[-111.45886993 -111.13803101]
[-116.16864777 -125.38502502]
[-119.94634247 -139.90699768]
[-122.77610779 -154.64306641]
[-124.64606476 -169.53138733]
[-125.54838562 -184.50952148]
[-125.47927856 -199.51466370]
[-124.43902588 -214.48385620]
[-122.43200684 -229.35432434]
[-119.46662903 -244.06369019]
[-115.55532837 -258.55026245]
[-110.71451569 -272.75326538]
[-104.96449280 -286.61312866]
[-98.32937622 -300.07174683]
[-90.83700562 -313.07263184]
[-82.51879120 -325.56127930]
[-73.40963745 -337.48532104]
[-63.54774094 -348.79467773]
[-52.97447205 -359.44198608]
[-41.73417664 -369.38253784]
[-29.87400055 -378.57464600]
[-17.44369125 -386.97979736]
[-4.49538708 -394.56268311]
[8.91660404 -401.29153442]
[22.73602676 -407.13812256]
[36.90491486 -412.07791138]
[51.36384583 -416.09017944]
[66.05216217 -419.15811157]
[80.90826416 -421.26882935]
[95.86983490 -422.41348267]
[110.87413025 -422.58728027]
[125.85820007 -421.78948975]
[140.75920105 -420.02343750]
[155.51464844 -417.29653931]
[170.06263733 -413.62026978]
[184.34213257 -409.00997925]
[198.29327393 -403.48507690]
[211.85752869 -397.06869507]
[224.97799683 -389.78775024]
[237.59965515 -381.67279053]
[249.66957092 -372.75784302]
[261.13708496 -363.08032227]
[271.95416260 -352.68078613]
[282.07534790 -341.60287476]
[291.45825195 -329.89303589]
[300.06350708 -317.60043335]
[307.85501099 -304.77655029]
[314.80007935 -291.47525024]
[320.86959839 -277.75228882]
[326.03808594 -263.66519165]
[330.28390503 -249.27311707]
[333.58920288 -234.63638306]
[335.94012451 -219.81640625]
[337.32681274 -204.87532043]
[337.74346924 -189.87580872]
[337.18832397 -174.88078308]
[335.66372681 -159.95314026]
[333.17602539 -145.15548706]
[329.73571777 -130.54991150]
[325.35720825 -116.19763947]
[320.05886841 -102.15889740]
[313.86288452 -88.49256134]
[306.79528809 -75.25594330]
[298.88568115 -62.50458145]
[290.16729736 -50.29194260]
[280.67666626 -38.66926193]
[270.45358276 -27.68528366]
[259.54098511 -17.38608170]
[247.98455811 -7.81485319]
[235.83285522 0.98825580]
[223.13679504 8.98632145]
[209.94964600 16.14579773]
[196.32672119 22.43665504]
[182.32516479 27.83250618]
[168.00369263 32.31071854]
[153.42237854 35.85251236]
[138.64239502 38.44302750]
[123.72571564 40.07139969]
[108.73490906 40.73080063]
[108.42285919 55.72755432]
[108.11080170 70.72430420]
[107.79874420 85.72106171]
[116.26898193 100.16924286]
[107.50000000 114.43809509]
[107.50000000 129.43809509]
[107.50000000 144.43809509]
[107.50000000 159.43809509]
[107.50000000 174.43809509]
[107.50000000 189.43809509]
[107.50000000 204.43809509]
[107.50000000 219.43809509]
[107.50000000 234.43809509]
[107.50000000 249.43809509]
[107.50000000 264.43807983]
[107.50000000 279.43807983]
[122.03988647 283.49942017]
[134.94427490 291.33392334]
[145.25555420 302.36026001]
[152.20857239 315.76016235]
[155.28736877 330.53933716]
[154.26348877 345.60101318]
[149.21287537 359.82754517]
[140.51036072 372.16320801]
[128.80169678 381.69262695]
[114.95575714 387.70864868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 127]
[26 126]
[27 125]
[28 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
