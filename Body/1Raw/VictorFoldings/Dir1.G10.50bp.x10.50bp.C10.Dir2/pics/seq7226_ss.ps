%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCACAUGAGGGGGGGGGGAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUxxxxxxxxxxGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCCCCCCCCCCCACCACAGGA\
) } def
/len { sequence length } bind def

/coor [
[79.63222504 572.51910400]
[65.78628540 566.50311279]
[54.07762909 556.97369385]
[45.37510300 544.63800049]
[40.32450104 530.41149902]
[39.30060959 515.34979248]
[42.37940979 500.57064819]
[49.33243179 487.17071533]
[59.64371490 476.14437866]
[72.54809570 468.30987549]
[87.08798218 464.24856567]
[87.08798218 449.24856567]
[87.08798218 434.24856567]
[87.08798218 419.24856567]
[87.08798218 404.24856567]
[87.08798218 389.24856567]
[87.08798218 374.24856567]
[87.08798218 359.24856567]
[87.08798218 344.24856567]
[87.08798218 329.24856567]
[87.08798218 314.24856567]
[72.25219727 309.06637573]
[60.05975723 299.10934448]
[51.99029160 285.56219482]
[49.03113556 270.04672241]
[51.55656052 254.42762756]
[59.28056335 240.58851624]
[71.28909302 230.20458984]
[86.14823151 224.53999329]
[85.83617401 209.54322815]
[85.52412415 194.54647827]
[85.21206665 179.54972839]
[73.79106140 189.27395630]
[58.82495499 188.26612854]
[48.81081772 177.09844971]
[49.43421173 162.11141968]
[60.34120560 151.81396484]
[75.33930969 152.05252075]
[85.91388702 162.69306946]
[87.47146606 147.77415466]
[89.02904510 132.85525513]
[73.09814453 121.82016754]
[65.58798218 103.95500946]
[68.84934235 84.85186005]
[81.86138916 70.49034119]
[76.95983887 56.31378174]
[72.05828857 42.13722229]
[67.15673828 27.96066666]
[62.25518417 13.78410721]
[47.43119812 16.29395676]
[32.39628601 16.32947540]
[17.56060982 13.88969421]
[3.32889509 9.04117203]
[-9.91060448 1.91617918]
[-21.79670525 -7.29090834]
[-32.00514603 -18.32891464]
[-40.25743484 -30.89671516]
[-46.32844162 -44.65145111]
[-50.05254364 -59.21788025]
[-51.32814789 -74.19862366]
[-50.12045288 -89.18499756]
[-46.46240616 -103.76815796]
[-40.45380020 -117.55026245]
[-32.25855255 -130.15533447]
[-22.10024261 -141.23950195]
[-10.25599194 -150.50035095]
[2.95107985 -157.68528748]
[17.16067314 -162.59825134]
[31.98514175 -165.10523987]
[47.02006149 -165.13786316]
[61.85526657 -162.69523621]
[76.08604431 -157.84396362]
[89.32417297 -150.71641541]
[101.20850372 -141.50704956]
[111.41481781 -130.46707153]
[119.66468048 -117.89768219]
[125.73303986 -104.14177704]
[129.45433044 -89.57463074]
[130.72705078 -74.59364319]
[129.51646423 -59.60750198]
[125.85561371 -45.02504730]
[119.84435272 -31.24409485]
[111.64668274 -18.64060211]
[101.48623657 -7.55840158]
[89.64019775 1.70017886]
[76.43173981 8.88255692]
[81.33329010 23.05911446]
[86.23484039 37.23567200]
[91.13639832 51.41223145]
[96.03794861 65.58879089]
[103.23401642 65.51274872]
[110.29048920 66.92530823]
[116.90278625 69.76549530]
[122.78549957 73.91072083]
[127.68470001 79.18206024]
[141.34094238 72.97665405]
[150.70396423 60.22344208]
[165.49195862 62.00241089]
[167.61456299 46.72176743]
[177.67889404 35.02934265]
[192.47344971 30.65614319]
[207.27732849 34.99764252]
[217.36668396 46.66848373]
[219.52201843 61.94454575]
[213.05560303 75.95129395]
[200.03082275 84.21921539]
[184.60383606 84.11006165]
[171.69735718 75.65865326]
[163.31112671 87.96800995]
[147.54634094 86.63288879]
[133.89010620 92.83830261]
[133.89230347 107.15129089]
[128.10765076 120.24324799]
[117.52383423 129.87882996]
[103.94795990 134.41282654]
[102.39037323 149.33174133]
[100.83279419 164.25065613]
[100.20881653 179.23767090]
[100.52087402 194.23442078]
[100.83293152 209.23118591]
[101.14498901 224.22793579]
[114.84117889 228.54699707]
[126.51091766 236.88006592]
[135.01622009 248.39819336]
[139.53271484 261.96261597]
[139.62960815 276.23736572]
[135.31068420 289.82089233]
[127.01265717 301.38354492]
[115.56101990 309.79791260]
[102.08798218 314.24856567]
[102.08798218 329.24856567]
[102.08798218 344.24856567]
[102.08798218 359.24856567]
[102.08798218 374.24856567]
[102.08798218 389.24856567]
[102.08798218 404.24856567]
[102.08798218 419.24856567]
[102.08798218 434.24856567]
[102.08798218 449.24856567]
[102.08798218 464.24856567]
[116.62786865 468.30987549]
[129.53225708 476.14437866]
[139.84353638 487.17071533]
[146.79655457 500.57064819]
[149.87535095 515.34979248]
[148.85147095 530.41149902]
[143.80085754 544.63800049]
[135.09834290 556.97369385]
[123.38967896 566.50311279]
[109.54373932 572.51910400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 121]
[30 120]
[31 119]
[32 118]
[39 117]
[40 116]
[41 115]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[95 111]
[96 110]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
