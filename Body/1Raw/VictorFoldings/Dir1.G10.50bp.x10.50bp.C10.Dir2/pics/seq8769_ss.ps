%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCUAGUAAGCCUCGGGGGGGGGGUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAxxxxxxxxxxAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGCCCCCCCCCCACUUCUAGCAAGCCUC\
) } def
/len { sequence length } bind def

/coor [
[96.51984406 427.85818481]
[82.02070618 423.85635376]
[68.46921539 417.32971191]
[56.30101395 408.48806763]
[45.90724182 397.61566162]
[37.62202835 385.06198120]
[31.71170044 371.23056030]
[28.36625671 356.56607056]
[27.69323540 341.53985596]
[29.71427155 326.63497925]
[34.36439896 312.33056641]
[41.49413300 299.08645630]
[50.87428665 287.32836914]
[62.20332336 277.43429565]
[75.11705780 269.72229004]
[89.20037842 264.44024658]
[104.00054932 261.75796509]
[104.00054932 246.75796509]
[104.00054932 231.75796509]
[104.00054932 216.75796509]
[104.00054932 201.75796509]
[104.00054932 186.75796509]
[104.00054932 171.75796509]
[104.00054932 156.75796509]
[104.00054932 141.75796509]
[104.00054932 126.75796509]
[85.79155731 120.49299622]
[77.68270874 104.75475311]
[82.29635620 89.27370453]
[73.15538025 77.38073730]
[64.01440430 65.48777771]
[51.31986237 73.49859619]
[37.94031906 80.30393219]
[23.98993111 85.84570312]
[9.58771801 90.07665253]
[-5.14344311 92.96066284]
[-20.07786942 94.47313690]
[-35.08813858 94.60117340]
[-50.04619217 93.34366608]
[-64.82440948 90.71136475]
[-79.29669952 86.72671509]
[-93.33959198 81.42370605]
[-106.83326721 74.84760284]
[-119.66261292 67.05448914]
[-131.71817017 58.11087036]
[-142.89706421 48.09304810]
[-153.10394287 37.08648682]
[-162.25170898 25.18510056]
[-170.26231384 12.49042416]
[-177.06742859 -0.88923067]
[-182.60896301 -14.83971214]
[-186.83967590 -29.24199677]
[-189.72343445 -43.97320557]
[-191.23567200 -58.90765762]
[-191.36344910 -73.91793060]
[-190.10569763 -88.87596130]
[-187.47314453 -103.65412903]
[-183.48825073 -118.12635803]
[-178.18501282 -132.16915894]
[-171.60868835 -145.66273499]
[-163.81536865 -158.49194336]
[-154.87153625 -170.54734802]
[-144.85353088 -181.72608948]
[-133.84680176 -191.93276978]
[-121.94525909 -201.08033752]
[-109.25045013 -209.09074402]
[-95.87068176 -215.89562988]
[-81.92011261 -221.43693542]
[-67.51775360 -225.66740417]
[-52.78649902 -228.55091858]
[-37.85202408 -230.06289673]
[-22.84174728 -230.19042969]
[-7.88373613 -228.93243408]
[6.89439011 -226.29963684]
[21.36654854 -222.31449890]
[35.40926361 -217.01103210]
[48.90272522 -210.43446350]
[61.73181152 -202.64093018]
[73.78706360 -193.69691467]
[84.96562958 -183.67871094]
[95.17214203 -172.67181396]
[104.31951141 -160.77012634]
[112.32969666 -148.07518005]
[119.13435364 -134.69529724]
[124.67543793 -120.74463654]
[128.90565491 -106.34220886]
[131.78894043 -91.61090088]
[133.30065918 -76.67640686]
[133.42794800 -61.66612625]
[132.16969299 -46.70813751]
[129.53665161 -31.93005371]
[125.55127716 -17.45796204]
[120.24757385 -3.41533566]
[113.67079163 10.07801723]
[105.87704468 22.90697289]
[96.93282318 34.96207809]
[86.91443634 46.14047623]
[75.90736389 56.34680176]
[85.04833984 68.23976898]
[94.18931580 80.13272858]
[114.53939819 81.05957031]
[127.04813385 100.62577057]
[139.77337646 91.22476196]
[153.36767578 97.31114197]
[168.25012207 95.43688202]
[183.13256836 93.56262207]
[198.01501465 91.68836212]
[212.89746094 89.81409454]
[223.34529114 75.81192780]
[240.34988403 73.71546173]
[253.36315918 84.33464813]
[268.20672607 82.17391205]
[283.05026245 80.01317596]
[288.65899658 65.71500397]
[300.67535400 56.14931870]
[315.86706543 53.88925934]
[330.14758301 59.54275894]
[339.67556763 71.58906555]
[341.88800049 86.78777313]
[336.18975830 101.05050659]
[324.11364746 110.54067230]
[308.90808105 112.70545197]
[294.66326904 106.96253204]
[285.21099854 94.85673523]
[270.36746216 97.01747131]
[255.52389526 99.17820740]
[249.32189941 110.50434875]
[237.54663086 116.26287079]
[224.41401672 114.14184570]
[214.77171326 104.69654083]
[199.88928223 106.57080078]
[185.00683594 108.44506073]
[170.12438965 110.31932831]
[155.24194336 112.19358826]
[143.58119202 121.46053314]
[128.92239380 115.50821686]
[119.00054932 126.75796509]
[119.00054932 141.75796509]
[119.00054932 156.75796509]
[119.00054932 171.75796509]
[119.00054932 186.75796509]
[119.00054932 201.75796509]
[119.00054932 216.75796509]
[119.00054932 231.75796509]
[119.00054932 246.75796509]
[119.00054932 261.75796509]
[133.80072021 264.44024658]
[147.88404846 269.72229004]
[160.79777527 277.43429565]
[172.12681580 287.32836914]
[181.50697327 299.08645630]
[188.63670349 312.33056641]
[193.28683472 326.63497925]
[195.30786133 341.53985596]
[194.63484192 356.56607056]
[191.28939819 371.23056030]
[185.37907410 385.06198120]
[177.09385681 397.61566162]
[166.70008850 408.48806763]
[154.53189087 417.32971191]
[140.98039246 423.85635376]
[126.48126221 427.85818481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[29 100]
[30 99]
[31 98]
[102 136]
[104 134]
[105 133]
[106 132]
[107 131]
[108 130]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
