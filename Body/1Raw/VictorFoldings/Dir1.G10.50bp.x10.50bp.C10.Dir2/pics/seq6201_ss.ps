%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUAACCCCGGGGGGGGGGUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCxxxxxxxxxxUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCCCCCCCCCCCGCCUUACCCC\
) } def
/len { sequence length } bind def

/coor [
[91.13918304 367.08859253]
[77.91898346 359.81610107]
[67.03218079 349.36911011]
[59.22105408 336.45986938]
[55.01816940 321.96853638]
[54.71009827 306.88320923]
[58.31784058 292.23239136]
[65.59541321 279.01498413]
[76.04662323 268.13223267]
[88.95888519 260.32608032]
[103.45182037 256.12878418]
[103.13976288 241.13204956]
[102.82770538 226.13528442]
[102.51564789 211.13853455]
[102.20359039 196.14178467]
[101.89154053 181.14503479]
[101.57948303 166.14826965]
[101.26742554 151.15151978]
[100.95536804 136.15476990]
[100.64331055 121.15801239]
[88.11734772 112.90572357]
[74.21479797 118.53768158]
[60.31224060 124.16963959]
[58.26825333 139.39192200]
[48.87427521 151.54299927]
[34.65723038 157.35429382]
[19.44143295 155.26260376]
[7.31986141 145.83058167]
[1.55315363 131.59538269]
[3.69252586 116.38622284]
[13.16249752 104.29428101]
[27.41569519 98.57221985]
[42.61807632 100.75925446]
[54.68028259 110.26708221]
[68.58283997 104.63512421]
[82.48539734 99.00316620]
[92.46812439 87.80740356]
[96.47586060 73.35271454]
[86.41699982 62.76163101]
[83.83059692 47.85526276]
[90.15398407 33.53781128]
[103.79437256 24.84598160]
[120.48798370 25.18196487]
[122.66481781 10.34075928]
[124.84165192 -4.50044584]
[127.01849365 -19.34165192]
[128.42079163 -34.27595901]
[129.04476929 -49.26297379]
[129.66874695 -64.24999237]
[126.88547516 -73.01955414]
[130.46481323 -79.54135895]
[131.40045166 -94.51214600]
[132.33607483 -109.48294067]
[117.58704376 -112.32801056]
[103.32294464 -117.03583527]
[89.77799225 -123.52911377]
[77.17462158 -131.70121765]
[65.71977997 -141.41795349]
[55.60157394 -152.51977539]
[46.98615265 -164.82435608]
[40.01498795 -178.12966919]
[34.80255508 -192.21720886]
[31.43444061 -206.85565186]
[29.96595573 -221.80462646]
[30.42121696 -236.81866455]
[32.79274368 -251.65119934]
[37.04159927 -266.05868530]
[43.09800720 -279.80453491]
[50.86251831 -292.66302490]
[60.20763397 -304.42300415]
[70.97989655 -314.89135742]
[83.00241852 -323.89620972]
[96.07777405 -331.28967285]
[109.99126434 -336.95034790]
[124.51440430 -340.78527832]
[139.40872192 -342.73150635]
[154.42962646 -342.75704956]
[169.33047485 -340.86148071]
[183.86656189 -337.07595825]
[197.79922485 -331.46261597]
[210.89964294 -324.11364746]
[222.95271301 -315.14974976]
[233.76051331 -304.71807861]
[243.14556885 -292.98992920]
[250.95375061 -280.15792847]
[257.05688477 -266.43276978]
[261.35467529 -252.03981018]
[263.77664185 -237.21540833]
[264.28295898 -222.20301819]
[262.86532593 -207.24913025]
[259.54699707 -192.59931946]
[254.38249207 -178.49414062]
[247.45660400 -165.16520691]
[238.88308716 -152.83139038]
[228.80268860 -141.69523621]
[217.38095093 -131.93960571]
[204.80543518 -123.72468567]
[191.28265381 -117.18538666]
[177.03463745 -112.42908478]
[162.29536438 -109.53387451]
[147.30686951 -108.54730988]
[146.37124634 -93.57652283]
[145.43560791 -78.60572815]
[144.65576172 -63.62601471]
[144.03178406 -48.63899612]
[143.40780640 -33.65198135]
[156.24235535 -41.41564941]
[170.38685608 -36.42232513]
[175.50280762 -22.32172394]
[167.85089111 -9.42024708]
[153.02401733 -7.14782810]
[141.85969543 -17.16481400]
[139.68286133 -2.32360888]
[137.50602722 12.51759624]
[135.32919312 27.35880280]
[143.45072937 39.96992874]
[157.86294556 44.12781906]
[172.27516174 48.28570557]
[189.16963196 46.86678314]
[195.20994568 62.70820999]
[181.65974426 72.89781952]
[168.11727905 62.69792175]
[153.70506287 58.54003525]
[139.29284668 54.38214493]
[128.91752625 71.95148468]
[110.93054962 77.36045837]
[106.92280579 91.81513977]
[115.25942230 95.77486420]
[119.82707214 106.75808716]
[115.64006805 120.84595490]
[115.95212555 135.84271240]
[116.26417542 150.83946228]
[116.57623291 165.83621216]
[116.88829041 180.83297729]
[117.20034790 195.82972717]
[117.51240540 210.82647705]
[117.82446289 225.82322693]
[118.13651276 240.81999207]
[118.44857025 255.81674194]
[133.10356140 259.40750122]
[146.32937622 266.66976929]
[157.22424316 277.10836792]
[165.04533386 290.01156616]
[169.25941467 304.49963379]
[169.57913208 319.58474731]
[165.98271179 334.23834229]
[158.71534729 347.46133423]
[148.27253723 358.35217285]
[135.36630249 366.16830444]
[120.87661743 370.37677002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 36]
[22 35]
[23 34]
[37 127]
[38 126]
[43 115]
[44 114]
[45 113]
[46 112]
[47 106]
[48 105]
[49 104]
[51 103]
[52 102]
[53 101]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
