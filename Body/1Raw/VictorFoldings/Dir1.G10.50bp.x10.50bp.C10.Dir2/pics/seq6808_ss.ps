%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUAUACCGGGGGGGGGGAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUAxxxxxxxxxxGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGCCCCCCCCCCAUUCUUUACC\
) } def
/len { sequence length } bind def

/coor [
[69.20492554 376.92019653]
[55.35898972 370.90417480]
[43.65032959 361.37475586]
[34.94780350 349.03909302]
[29.89720154 334.81256104]
[28.87331009 319.75088501]
[31.95210838 304.97171021]
[38.90513229 291.57180786]
[49.21641541 280.54547119]
[62.12079620 272.71096802]
[76.66068268 268.64962769]
[76.66068268 253.64964294]
[76.66068268 238.64964294]
[76.66068268 223.64964294]
[76.66068268 208.64964294]
[76.66068268 193.64964294]
[76.66068268 178.64964294]
[76.66068268 163.64964294]
[76.66068268 148.64964294]
[76.66068268 133.64964294]
[66.10939026 122.98801422]
[51.11020279 122.83197784]
[36.11101532 122.67594147]
[48.50271988 131.12849426]
[56.80572510 143.62089539]
[59.80086136 158.31883240]
[57.04833984 173.06411743]
[48.95232773 185.69165039]
[36.70159531 194.34725952]
[22.09498215 197.76000977]
[7.27724409 195.42877197]
[-5.57585955 187.69587708]
[-14.57704639 175.69676208]
[-18.40462875 161.19332886]
[-16.49658394 146.31518555]
[-9.13308048 133.24694824]
[2.60466385 123.90749359]
[16.99247932 119.66825104]
[2.66988158 115.21143341]
[-11.65271568 110.75461578]
[-26.02090073 106.44702911]
[-40.43311691 102.28914642]
[-56.21281815 106.75378418]
[-67.77891541 95.12805939]
[-63.23319626 79.37152100]
[-47.25190735 75.69314575]
[-36.27523041 87.87693024]
[-21.86301231 92.03481293]
[-14.51698303 90.85944366]
[-7.19589996 96.43202209]
[7.12669706 100.88883209]
[21.44929504 105.34564972]
[36.26705170 107.67675781]
[51.26623917 107.83279419]
[66.26542664 107.98883057]
[66.97032166 95.04011536]
[72.28621674 83.73847961]
[81.11085510 75.59025574]
[91.90599060 71.53105927]
[91.59393311 56.53430557]
[91.28187561 41.53755188]
[90.96981812 26.54080009]
[76.23558807 23.37866783]
[62.62800980 16.90328026]
[50.88093948 7.46384287]
[41.62786865 -4.43058538]
[35.36780930 -18.13855362]
[32.43835831 -32.92080688]
[32.99749756 -47.98015976]
[37.01507187 -62.50447845]
[44.27442169 -75.71047974]
[54.38405228 -86.88599396]
[66.79877472 -95.42832947]
[80.84906769 -100.87680817]
[95.77722168 -102.93760681]
[110.77818298 -101.49958038]
[125.04296875 -96.64028931]
[137.80229187 -88.62178040]
[148.36805725 -77.87648773]
[156.17047119 -64.98389435]
[160.78875732 -50.63927078]
[161.97386169 -35.61621475]
[159.66186523 -20.72489548]
[153.97744751 -6.76838398]
[145.22718811 5.50066233]
[133.88293457 15.42058945]
[120.55651093 22.45642853]
[105.96657562 26.22874451]
[106.27862549 41.22549820]
[106.59068298 56.22225189]
[106.90274048 71.21900177]
[118.99848938 77.30526733]
[127.11775970 88.14163971]
[141.93551636 85.81053925]
[156.75328064 83.47943115]
[171.57102966 81.14833069]
[186.38879395 78.81722260]
[200.39816284 66.91271210]
[216.52001953 73.77461243]
[231.28607178 71.13574982]
[245.85877991 67.58098602]
[260.18136597 63.12417221]
[274.50396729 58.66735840]
[288.82656860 54.21054077]
[302.15390015 43.73111725]
[315.91317749 53.63662338]
[310.20370483 69.60028839]
[293.28338623 68.53314209]
[278.96078491 72.98995209]
[264.63818359 77.44676971]
[250.31559753 81.90358734]
[262.82458496 90.18157196]
[266.00476074 104.84057617]
[258.05053711 117.55790710]
[243.47796631 121.11322784]
[230.56068420 113.48800659]
[226.63253784 99.01148987]
[233.92494202 85.90180206]
[219.15888977 88.54067230]
[211.95539856 98.30884552]
[199.62739563 100.59776306]
[188.71989441 93.63497925]
[173.90213013 95.96608734]
[159.08438110 98.29718781]
[144.26661682 100.62829590]
[129.44886780 102.95939636]
[127.65805054 113.11801147]
[122.35830688 122.36669922]
[113.97608948 129.49578857]
[103.35242462 133.48612976]
[91.66068268 133.64964294]
[91.66068268 148.64964294]
[91.66068268 163.64964294]
[91.66068268 178.64964294]
[91.66068268 193.64964294]
[91.66068268 208.64964294]
[91.66068268 223.64964294]
[91.66068268 238.64964294]
[91.66068268 253.64964294]
[91.66068268 268.64962769]
[106.20056915 272.71096802]
[119.10494995 280.54547119]
[129.41622925 291.57180786]
[136.36926270 304.97171021]
[139.44805908 319.75088501]
[138.42416382 334.81256104]
[133.37356567 349.03909302]
[124.67103577 361.37475586]
[112.96237946 370.90417480]
[99.11643982 376.92019653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 55]
[22 54]
[23 53]
[38 52]
[39 51]
[40 50]
[41 48]
[42 47]
[59 91]
[60 90]
[61 89]
[62 88]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[99 119]
[100 118]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
