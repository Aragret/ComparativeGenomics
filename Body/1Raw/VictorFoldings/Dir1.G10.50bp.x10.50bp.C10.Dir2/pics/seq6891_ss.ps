%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUACAGUGGGGGGGGGGAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCAxxxxxxxxxxAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCCCCCCCCCCCUCUUUACAGU\
) } def
/len { sequence length } bind def

/coor [
[77.94944763 337.52078247]
[66.73401642 327.45544434]
[58.14261627 315.07464600]
[52.63857269 301.04602051]
[50.51871109 286.12612915]
[51.89735794 271.11959839]
[56.70015717 256.83569336]
[64.66810608 244.04473877]
[75.37149811 233.43653870]
[88.23310852 225.58316040]
[102.55934143 220.90812683]
[101.31246948 205.96005249]
[100.06558990 191.01196289]
[98.81871796 176.06387329]
[97.57184601 161.11578369]
[96.32496643 146.16769409]
[95.07809448 131.21961975]
[93.83122253 116.27152252]
[82.84555817 106.05804443]
[67.84636688 105.90200806]
[52.84717941 105.74597168]
[37.84799194 105.58993530]
[22.84880257 105.43389893]
[7.85204887 105.74595642]
[-7.12766552 106.52580261]
[-22.10737991 107.30564880]
[-37.08709335 108.08548737]
[-52.05788422 109.02111816]
[-67.00833130 119.71990204]
[-82.50399780 111.54161835]
[-97.43830872 112.94392395]
[-112.37261200 114.34622955]
[-122.25996399 126.67569733]
[-137.97853088 128.31947327]
[-150.20278931 118.30232239]
[-151.68028259 102.56724548]
[-141.53445435 90.44959259]
[-125.78462982 89.13854218]
[-113.77491760 99.41191864]
[-98.84061432 98.00961304]
[-83.90630341 96.60731506]
[-75.91577911 87.47173309]
[-63.44016647 86.21549988]
[-53.14919662 94.06086731]
[-46.66497803 90.41387177]
[-37.86693954 93.10577393]
[-22.88722420 92.32592773]
[-7.90751076 91.54608917]
[7.07220364 90.76624298]
[9.71775913 88.34373474]
[13.69198799 87.11606598]
[18.40434837 87.70431519]
[23.00483894 90.43470764]
[38.00402832 90.59074402]
[53.00321579 90.74678040]
[68.00240326 90.90282440]
[83.00159454 91.05886078]
[91.76210785 85.21213531]
[101.02537537 85.38722992]
[108.74945831 72.52882385]
[108.65521240 68.03965759]
[109.90493011 64.16548157]
[112.12878418 61.26094055]
[114.87844086 59.51928329]
[117.68830872 58.96073914]
[126.45452118 46.78890228]
[135.22073364 34.61706543]
[143.98693848 22.44523048]
[152.75314331 10.27339363]
[139.41407776 17.13411903]
[124.42742157 17.76659012]
[110.55774689 12.05413723]
[100.36359406 1.05053425]
[95.72547913 -13.21438408]
[97.49900055 -28.10916901]
[105.35697937 -40.88618469]
[117.84987640 -49.18844986]
[132.67311096 -51.48445129]
[147.09225464 -47.35064316]
[158.44740295 -37.54959106]
[164.64387512 -23.88929176]
[164.53927612 -8.89264297]
[171.44627380 -22.20779800]
[178.35327148 -35.52295303]
[185.26026917 -48.83810806]
[187.18646240 -65.68228149]
[203.90559387 -68.49429321]
[211.23602295 -53.20700836]
[198.57542419 -41.93111038]
[191.66842651 -28.61595535]
[184.76142883 -15.30079937]
[177.85443115 -1.98564410]
[183.13008118 3.34516907]
[198.95701599 19.33760834]
[212.34330750 12.56949329]
[225.72958374 5.80137873]
[239.11587524 -0.96673596]
[252.50215149 -7.73485088]
[255.89097595 -23.00082397]
[268.33111572 -32.47587204]
[283.94876099 -31.68616867]
[295.36968994 -21.00458527]
[297.20132446 -5.47464228]
[288.57879639 7.57089901]
[273.57342529 11.97233200]
[259.27026367 5.65143394]
[245.88398743 12.41954899]
[232.49769592 19.18766403]
[219.11141968 25.95577812]
[205.72512817 32.72389221]
[179.44172668 32.95736313]
[164.92497253 19.03960037]
[156.15876770 31.21143723]
[147.39256287 43.38327408]
[138.62635803 55.55511093]
[129.86015320 67.72694397]
[121.60785675 80.25290680]
[113.88377380 93.11131287]
[125.26498413 83.34053040]
[139.94293213 80.24897003]
[154.29833984 84.59893799]
[164.79145813 95.31781769]
[168.83489990 109.76256561]
[165.43162537 124.37138367]
[155.42082214 135.54205322]
[141.27093506 140.52009583]
[126.47106171 138.07804871]
[114.67053223 128.81805420]
[108.77930450 115.02465057]
[110.02618408 129.97273254]
[111.27305603 144.92082214]
[112.51992798 159.86891174]
[113.76680756 174.81700134]
[115.01367950 189.76509094]
[116.26055145 204.71316528]
[117.50743103 219.66125488]
[132.41021729 221.89817810]
[146.39518738 227.51219177]
[158.70817566 236.20051575]
[168.68515015 247.49461365]
[175.78805542 260.78543091]
[179.63385010 275.35617065]
[180.01512146 290.42108154]
[176.91133118 305.16769409]
[170.48985291 318.80081177]
[161.09696960 330.58514404]
[149.23925781 339.88522339]
[135.55618286 346.19946289]
[120.78562927 349.18740845]
[105.72418213 348.68786621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 49]
[25 48]
[26 47]
[27 46]
[28 44]
[30 41]
[31 40]
[32 39]
[59 118]
[60 117]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[82 92]
[83 91]
[84 90]
[85 89]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
