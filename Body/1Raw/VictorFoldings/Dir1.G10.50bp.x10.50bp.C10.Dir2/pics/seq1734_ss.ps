%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACUAAAAGGGGGGGGGGCCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUxxxxxxxxxxAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACACCCCCCCCCCUUAACGAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 367.79028320]
[71.19830322 361.77426147]
[59.48964310 352.24484253]
[50.78712082 339.90917969]
[45.73651886 325.68264771]
[44.71262741 310.62097168]
[47.79142761 295.84179688]
[54.74444962 282.44186401]
[65.05573273 271.41552734]
[77.96011353 263.58102417]
[92.50000000 259.51971436]
[92.50000000 244.51971436]
[92.50000000 229.51971436]
[92.50000000 214.51971436]
[92.50000000 199.51971436]
[92.50000000 184.51971436]
[92.50000000 169.51971436]
[92.50000000 154.51971436]
[92.50000000 139.51971436]
[92.50000000 124.51971436]
[84.16242981 120.16526031]
[77.95614624 113.09713745]
[63.38344193 116.65189362]
[48.84850311 120.35805511]
[34.35290909 124.21521759]
[19.85731125 128.07237244]
[15.93394375 142.92170715]
[5.10015917 153.80862427]
[-9.72980881 157.80456543]
[-24.56677246 153.83467102]
[-35.41966629 142.96681213]
[-39.36911011 128.12440491]
[-35.35272980 113.29994965]
[-24.45091057 102.48117828]
[-9.59618282 98.57826996]
[5.21560335 102.64109802]
[16.00015068 113.57678223]
[30.49574852 109.71961975]
[44.99134445 105.86246490]
[50.68331528 101.07214355]
[59.82867813 102.07919312]
[74.40138245 98.52442932]
[75.59362030 92.13899994]
[78.35223389 86.25807190]
[82.50016022 81.25907898]
[87.77120209 77.46285248]
[93.82707214 75.11302185]
[100.27910614 74.36040497]
[106.71323395 75.25330353]
[114.70314789 62.55837250]
[114.95005035 44.17580032]
[130.72247314 36.54491425]
[138.44656372 23.68651199]
[146.17063904 10.82810974]
[153.89472961 -2.03029275]
[149.34117126 -18.88859940]
[158.18702698 -33.55266571]
[174.56593323 -37.23902893]
[182.02084351 -50.25534058]
[189.47575378 -63.27164841]
[188.95774841 -81.64858246]
[204.39909363 -89.92897034]
[211.58160400 -103.09754944]
[218.76411438 -116.26613617]
[225.94662476 -129.43472290]
[233.12913513 -142.60330200]
[221.09487915 -151.60093689]
[210.46366882 -162.21971130]
[201.45195007 -174.24342346]
[194.24317932 -187.42729187]
[188.98413086 -201.50291443]
[185.78186035 -216.18371582]
[184.70156860 -231.17083740]
[185.76524353 -246.15914917]
[188.95123291 -260.84350586]
[194.19467163 -274.92495728]
[201.38882446 -288.11679077]
[210.38719177 -300.15051270]
[221.00662231 -310.78103638]
[233.03089905 -319.79202271]
[246.21520996 -326.99996948]
[260.29116821 -332.25814819]
[274.97216797 -335.45950317]
[289.95935059 -336.53887939]
[304.94760132 -335.47427368]
[319.63174438 -332.28738403]
[333.71286011 -327.04306030]
[346.90426636 -319.84811401]
[358.93740845 -310.84896851]
[369.56732178 -300.22891235]
[378.57754517 -288.20407104]
[385.78466797 -275.01931763]
[391.04199219 -260.94302368]
[394.24243164 -246.26182556]
[395.32089233 -231.27458191]
[394.25534058 -216.28640747]
[391.06753540 -201.60244751]
[385.82235718 -187.52165222]
[378.62658691 -174.33068848]
[369.62670898 -162.29809570]
[359.00598145 -151.66886902]
[346.98059082 -142.65937805]
[333.79537964 -135.45306396]
[319.71878052 -130.19662476]
[305.03738403 -126.99707031]
[290.05004883 -125.91956329]
[275.06195068 -126.98602295]
[260.37817383 -130.17472839]
[246.29771423 -135.42079163]
[239.11520386 -122.25221252]
[231.93269348 -109.08362579]
[224.75018311 -95.91504669]
[217.56767273 -82.74645996]
[220.67858887 -71.01490021]
[214.74888611 -59.96693039]
[202.49206543 -55.81673813]
[195.03715515 -42.80043030]
[187.58224487 -29.78412056]
[192.67343140 -17.90655327]
[189.93344116 -5.07819748]
[180.14746094 3.94746566]
[166.75312805 5.69379234]
[159.02905273 18.55219460]
[151.30496216 31.41059685]
[143.58087158 44.26900101]
[146.20108032 56.11981583]
[139.81694031 66.91155243]
[127.39807892 70.54828644]
[119.40816498 83.24321747]
[124.63635254 107.10752106]
[107.50000000 124.51971436]
[107.50000000 139.51971436]
[107.50000000 154.51971436]
[107.50000000 169.51971436]
[107.50000000 184.51971436]
[107.50000000 199.51971436]
[107.50000000 214.51971436]
[107.50000000 229.51971436]
[107.50000000 244.51971436]
[107.50000000 259.51971436]
[122.03988647 263.58102417]
[134.94427490 271.41552734]
[145.25555420 282.44186401]
[152.20857239 295.84179688]
[155.28736877 310.62097168]
[154.26348877 325.68264771]
[149.21287537 339.90917969]
[140.51036072 352.24484253]
[128.80169678 361.77426147]
[114.95575714 367.79028320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 42]
[23 41]
[24 39]
[25 38]
[26 37]
[49 129]
[50 128]
[52 125]
[53 124]
[54 123]
[55 122]
[58 118]
[59 117]
[60 116]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
