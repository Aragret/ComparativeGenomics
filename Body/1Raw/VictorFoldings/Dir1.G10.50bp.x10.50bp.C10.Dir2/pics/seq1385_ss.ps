%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGCCCUAAGGGGGGGGGGACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACxxxxxxxxxxACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCCCCCCCCCCCUAGCCCUAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 405.93823242]
[71.01555634 400.38522339]
[58.81560135 391.51889038]
[49.20452881 379.89657593]
[42.78650284 366.24890137]
[39.96496582 351.43371582]
[40.91728210 336.38232422]
[45.58358765 322.04089355]
[53.67055511 309.31094360]
[64.66983032 298.99267578]
[77.88998413 291.73471069]
[92.50000000 287.99325562]
[92.50000000 272.99325562]
[92.50000000 257.99325562]
[92.50000000 242.99325562]
[92.50000000 227.99325562]
[92.50000000 212.99325562]
[92.50000000 197.99325562]
[92.50000000 182.99325562]
[92.50000000 167.99325562]
[92.50000000 152.99325562]
[92.50000000 137.99325562]
[81.55794525 135.59826660]
[71.40680695 130.01850891]
[62.97964478 121.52298737]
[57.11625671 110.65467834]
[54.48286057 98.19795990]
[55.50317764 85.12258148]
[60.30765915 72.50820923]
[68.70625305 61.45541000]
[53.70704269 61.30141449]
[38.70783615 61.14741898]
[23.70862579 60.99341965]
[15.96220684 74.25572205]
[2.61451530 81.85405731]
[-12.74398613 81.74451447]
[-25.98193932 73.95656586]
[-33.53839874 60.58512115]
[-33.38071823 45.22703934]
[-25.55130959 32.01356125]
[-12.15624714 24.49905205]
[3.20126605 24.70487213]
[16.39013481 32.57566071]
[23.86262131 45.99420929]
[38.86183167 46.14820862]
[53.86104202 46.30220413]
[68.86025238 46.45619965]
[74.84854889 32.70337296]
[64.51764679 21.82805824]
[54.18674088 10.95274448]
[43.85583878 0.07743109]
[33.52493668 -10.79788303]
[20.63525009 -11.92022705]
[12.25315952 -21.24288177]
[12.48832417 -33.37576675]
[2.38288951 -44.46089935]
[-13.40006924 -48.91401672]
[-17.17222786 -64.87342834]
[-5.05311108 -75.92146301]
[10.49017143 -70.69284821]
[13.46802330 -54.56633377]
[23.57345772 -43.48120117]
[40.54081726 -39.10475159]
[44.40024948 -21.12878609]
[54.73115158 -10.25347137]
[65.06205750 0.62184227]
[75.39295959 11.49715614]
[85.72386169 22.37246895]
[93.22346497 22.29547119]
[89.37114716 7.79858732]
[85.51882935 -6.69829702]
[81.66651154 -21.19518089]
[74.61234283 -34.43295670]
[76.05226898 -49.36368561]
[85.50621033 -61.00941467]
[99.82218933 -65.48742676]
[114.22722626 -61.30473709]
[123.91864014 -49.85586929]
[125.66527557 -34.95790863]
[118.88424683 -21.57729530]
[115.33039093 -7.00437260]
[111.77653503 7.56855106]
[108.22267151 22.14147377]
[115.72228241 22.06447601]
[125.82771301 10.97934246]
[135.93315125 -0.10579149]
[146.03858948 -11.19092560]
[156.14401245 -22.27605820]
[150.39520264 -36.41514969]
[151.35899353 -51.64780807]
[158.84402466 -64.94957733]
[171.36413574 -73.67938232]
[186.43345642 -76.10391235]
[201.05996704 -71.74177551]
[212.33953857 -61.45908356]
[218.03262329 -47.29746246]
[217.00886536 -32.06871796]
[209.47151184 -18.79652786]
[196.91711426 -10.11609459]
[181.83836365 -7.75092459]
[167.22915649 -12.17062473]
[157.12371826 -1.08549058]
[147.01828003 9.99964333]
[136.91284180 21.08477783]
[126.80741119 32.16991043]
[132.22604370 46.15699387]
[147.16204834 47.54101944]
[162.09806824 48.92504501]
[168.29576111 35.10957336]
[178.64533997 24.05675125]
[192.02416992 16.96551323]
[206.98100281 14.60505962]
[221.89344788 17.23143578]
[235.14390564 24.55975151]
[245.29505920 35.79508591]
[251.24578857 49.71871567]
[252.35061646 64.82030487]
[248.48970032 79.46175385]
[240.08181763 92.05486298]
[228.03901672 101.23362732]
[213.66760254 106.00239563]
[198.52648926 105.84390259]
[184.25805664 100.77532196]
[172.41003418 91.34647369]
[164.26762390 78.58011627]
[160.71403503 63.86105728]
[145.77803040 62.47703171]
[130.84201050 61.09300613]
[145.54669189 93.50198364]
[134.55311584 124.51650238]
[107.50000000 137.99325562]
[107.50000000 152.99325562]
[107.50000000 167.99325562]
[107.50000000 182.99325562]
[107.50000000 197.99325562]
[107.50000000 212.99325562]
[107.50000000 227.99325562]
[107.50000000 242.99325562]
[107.50000000 257.99325562]
[107.50000000 272.99325562]
[107.50000000 287.99325562]
[122.11001587 291.73471069]
[135.33016968 298.99267578]
[146.32945251 309.31094360]
[154.41641235 322.04089355]
[159.08271790 336.38232422]
[160.03503418 351.43371582]
[157.21350098 366.24890137]
[150.79547119 379.89657593]
[141.18440247 391.51889038]
[128.98443604 400.38522339]
[114.96250153 405.93823242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[30 47]
[31 46]
[32 45]
[33 44]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[55 62]
[56 61]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[106 128]
[107 127]
[108 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
