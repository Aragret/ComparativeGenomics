%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCCUCUGGGGGGGGGGACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACxxxxxxxxxxAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUCCCCCCCCCCUACUUCCUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 379.81317139]
[71.19830322 373.79714966]
[59.48964310 364.26773071]
[50.78712082 351.93206787]
[45.73651886 337.70553589]
[44.71262741 322.64385986]
[47.79142761 307.86468506]
[54.74444962 294.46475220]
[65.05573273 283.43844604]
[77.96011353 275.60391235]
[92.50000000 271.54260254]
[92.50000000 256.54260254]
[92.50000000 241.54261780]
[92.50000000 226.54261780]
[92.50000000 211.54261780]
[92.50000000 196.54261780]
[92.50000000 181.54261780]
[92.50000000 166.54261780]
[92.50000000 151.54261780]
[92.50000000 136.54261780]
[92.50000000 121.54261017]
[83.04982758 115.26518250]
[77.79251862 105.21169281]
[78.02853394 93.86901855]
[83.69950867 84.04293060]
[93.40263367 78.16404724]
[94.02661133 63.17703247]
[94.65058899 48.19001389]
[95.27456665 33.20299911]
[80.32105255 28.89959526]
[66.83185577 21.16025543]
[55.58250046 10.43471909]
[47.21860886 -2.65572429]
[42.21882248 -17.35422707]
[40.86742783 -32.81214523]
[43.23819351 -48.13803101]
[49.19034958 -62.44904327]
[58.37694168 -74.92180634]
[70.26506042 -84.83977509]
[84.16674805 -91.63441467]
[99.27880096 -94.91776276]
[99.59085846 -109.91452026]
[99.90291595 -124.91127014]
[100.21496582 -139.90802002]
[85.30651093 -141.66685486]
[70.63741302 -144.85636902]
[56.34463120 -149.44677734]
[42.56161499 -155.39523315]
[29.41706467 -162.64617920]
[17.03370285 -171.13192749]
[5.52715492 -180.77323914]
[-4.99514246 -191.48008728]
[-14.43494415 -203.15252686]
[-22.70410919 -215.68154907]
[-29.72543144 -228.95018005]
[-35.43334961 -242.83453369]
[-39.77457428 -257.20495605]
[-42.70856857 -271.92730713]
[-44.20793533 -286.86407471]
[-44.25867844 -301.87582397]
[-42.86032486 -316.82241821]
[-40.02592468 -331.56423950]
[-35.78195190 -345.96368408]
[-30.16802597 -359.88632202]
[-23.23656654 -373.20211792]
[-15.05229092 -385.78674316]
[-5.69161606 -397.52273560]
[4.75805855 -408.30047607]
[16.19916344 -418.01934814]
[28.52487564 -426.58862305]
[41.62010956 -433.92828369]
[55.36259460 -439.96975708]
[69.62401581 -444.65670776]
[84.27121735 -447.94531250]
[99.16744232 -449.80487061]
[114.17359924 -450.21807861]
[129.14958191 -449.18099976]
[143.95555115 -446.70336914]
[158.45327759 -442.80831909]
[172.50738525 -437.53219604]
[185.98666382 -430.92425537]
[198.76524353 -423.04623413]
[210.72381592 -413.97164917]
[221.75073242 -403.78524780]
[231.74302673 -392.58212280]
[240.60739136 -380.46691895]
[248.26107788 -367.55273438]
[254.63262939 -353.96011353]
[259.66253662 -339.81600952]
[263.30383301 -325.25247192]
[265.52255249 -310.40551758]
[266.29794312 -295.41369629]
[265.62277222 -280.41705322]
[263.50335693 -265.55557251]
[259.95947266 -250.96801758]
[255.02421570 -236.79061890]
[248.74366760 -223.15571594]
[241.17646790 -210.19065857]
[232.39326477 -198.01646423]
[222.47608948 -186.74681091]
[211.51750183 -176.48693848]
[199.61985779 -167.33262634]
[186.89422607 -159.36935425]
[173.45941162 -152.67147827]
[159.44088745 -147.30152893]
[144.96952820 -143.30964661]
[130.18043518 -140.73310852]
[115.21172333 -139.59596252]
[114.89966583 -124.59921265]
[114.58760834 -109.60246277]
[114.27555084 -94.60570526]
[128.31735229 -91.05122375]
[141.21649170 -84.44540405]
[152.31907654 -75.11933136]
[161.06144714 -63.54209137]
[166.99876404 -50.29715729]
[169.82769775 -36.05300903]
[169.40185547 -21.52936935]
[165.73944092 -7.46085835]
[159.02238464 5.44017267]
[149.58744812 16.51971436]
[137.90919495 25.21524620]
[124.57626343 31.08430099]
[110.26158142 33.82697678]
[109.63760376 48.81399155]
[109.01362610 63.80101013]
[108.38964844 78.78802490]
[121.14802551 91.45043945]
[120.77407074 109.42189026]
[107.50000000 121.54261017]
[107.50000000 136.54261780]
[107.50000000 151.54261780]
[107.50000000 166.54261780]
[107.50000000 181.54261780]
[107.50000000 196.54261780]
[107.50000000 211.54261780]
[107.50000000 226.54261780]
[107.50000000 241.54261780]
[107.50000000 256.54260254]
[107.50000000 271.54260254]
[122.03988647 275.60391235]
[134.94427490 283.43844604]
[145.25555420 294.46475220]
[152.20857239 307.86468506]
[155.28736877 322.64385986]
[154.26348877 337.70553589]
[149.21287537 351.93206787]
[140.51036072 364.26773071]
[128.80169678 373.79714966]
[114.95575714 379.81317139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 127]
[27 126]
[28 125]
[29 124]
[41 111]
[42 110]
[43 109]
[44 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
