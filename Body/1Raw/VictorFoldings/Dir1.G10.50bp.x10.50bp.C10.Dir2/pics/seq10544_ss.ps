%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAAACAGGGGGGGGGGUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAxxxxxxxxxxUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACCCCCCCCCCCAACCCAAACA\
) } def
/len { sequence length } bind def

/coor [
[76.70872498 364.16143799]
[64.15050507 355.81030273]
[54.06428146 344.59783936]
[47.08408737 331.22894287]
[43.64870453 316.54394531]
[43.97407913 301.46597290]
[48.03976440 286.94287109]
[55.59018326 273.88751221]
[66.15071106 263.12063599]
[79.05751038 255.31898499]
[93.49923706 250.97303772]
[92.87525940 235.98602295]
[92.25128174 220.99900818]
[91.62730408 206.01199341]
[91.00332642 191.02497864]
[90.37934875 176.03796387]
[89.75537109 161.05094910]
[89.13139343 146.06393433]
[88.50741577 131.07690430]
[75.98145294 122.82462311]
[61.96474075 128.16613770]
[47.94802856 133.50764465]
[33.93131638 138.84916687]
[19.91460228 144.19067383]
[5.89788961 149.53218079]
[-8.11882305 154.87370300]
[-22.13553619 160.21520996]
[-34.78326797 171.50552368]
[-49.13359451 162.47753906]
[-44.43099213 146.18884277]
[-27.47704887 146.19850159]
[-13.46033573 140.85697937]
[0.55637717 135.51547241]
[14.57309055 130.17396545]
[28.58980370 124.83244324]
[42.60651779 119.49093628]
[56.62322998 114.14942169]
[70.63994598 108.80790710]
[70.36856842 100.19019318]
[72.49202728 92.13115692]
[76.67739868 85.25901031]
[82.43812561 80.06164551]
[89.18526459 76.85265350]
[96.28503418 75.75454712]
[103.11717987 76.69990540]
[109.74567413 63.24394226]
[116.37417603 49.78797531]
[123.00267029 36.33201218]
[110.11650085 28.63832092]
[97.89120483 19.93266487]
[86.40606689 10.27150440]
[75.73558807 -0.28250322]
[65.94895172 -11.66090965]
[57.10964203 -23.78992271]
[49.27498245 -36.59087753]
[42.49578857 -49.98075485]
[36.81601715 -63.87271500]
[32.27251434 -78.17665863]
[28.89473915 -92.79982758]
[26.70460320 -107.64736938]
[25.71630669 -122.62300110]
[25.93626404 -137.62960815]
[27.36304474 -152.56983948]
[29.98739624 -167.34681702]
[33.79229736 -181.86470032]
[38.75307465 -196.02934265]
[44.83755493 -209.74887085]
[52.00627518 -222.93431091]
[60.21274185 -235.50013733]
[69.40373230 -247.36488342]
[79.51964569 -258.45156860]
[90.49486542 -268.68829346]
[102.25821686 -278.00869751]
[114.73340607 -286.35232544]
[127.83953857 -293.66503906]
[141.49159241 -299.89941406]
[155.60104370 -305.01504517]
[170.07638550 -308.97875977]
[184.82373047 -311.76480103]
[199.74743652 -313.35513306]
[214.75073242 -313.73947144]
[229.73629761 -312.91525269]
[244.60693359 -310.88787842]
[259.26623535 -307.67050171]
[273.61907959 -303.28393555]
[287.57241821 -297.75665283]
[301.03573608 -291.12454224]
[313.92175293 -283.43057251]
[326.14685059 -274.72463989]
[337.63177490 -265.06323242]
[348.30203247 -254.50898743]
[358.08840942 -243.13035583]
[366.92745972 -231.00115967]
[374.76184082 -218.20002747]
[381.54074097 -204.80999756]
[387.22018433 -190.91792297]
[391.76336670 -176.61387634]
[395.14083862 -161.99063110]
[397.33062744 -147.14303589]
[398.31860352 -132.16737366]
[398.09832764 -117.16078949]
[396.67120361 -102.22058868]
[394.04653931 -87.44366455]
[390.24130249 -72.92586517]
[385.28021240 -58.76133347]
[379.19543457 -45.04193878]
[372.02642822 -31.85665703]
[363.81967163 -19.29100418]
[354.62841797 -7.42646933]
[344.51226807 3.65999699]
[333.53683472 13.89649487]
[321.77328491 23.21663666]
[309.29788208 31.55997467]
[296.19161987 38.87240219]
[282.53939819 45.10648727]
[268.42984009 50.22180939]
[253.95442200 54.18518448]
[239.20701599 56.97090912]
[224.28326416 58.56092453]
[209.27996826 58.94490814]
[194.29443359 58.12037659]
[179.42382812 56.09267426]
[164.76461792 52.87495422]
[150.41184998 48.48808289]
[136.45863342 42.96051025]
[129.83013916 56.41647720]
[123.20164490 69.87244415]
[116.57314301 83.32840729]
[125.58290100 108.87996674]
[103.49443054 130.45292664]
[104.11840820 145.43995667]
[104.74238586 160.42697144]
[105.36636353 175.41398621]
[105.99034119 190.40100098]
[106.61431885 205.38801575]
[107.23829651 220.37503052]
[107.86227417 235.36204529]
[108.48625183 250.34906006]
[123.23925781 253.47950745]
[136.74989319 260.18127441]
[148.16886902 270.03305054]
[156.77838135 282.41558838]
[162.03723145 296.55047607]
[163.61483765 311.54922485]
[161.41203308 326.46893311]
[155.56729126 340.37182617]
[146.44801331 352.38388062]
[134.62744141 361.75003052]
[120.84862518 367.88153076]
[105.97772217 370.39291382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[45 128]
[46 127]
[47 126]
[48 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
