%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAAACAUUAUUGGGGGGGGGGAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCxxxxxxxxxxGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGCCCCCCCCCCACCCAAACAUUAAU\
) } def
/len { sequence length } bind def

/coor [
[87.24932098 739.14202881]
[72.88706970 734.63531494]
[59.72618103 727.32940674]
[48.30558395 717.52355957]
[39.09294510 705.61926270]
[32.46551895 692.10400391]
[28.69468880 677.53125000]
[27.93487167 662.49768066]
[30.21718025 647.61895752]
[35.44815826 633.50439453]
[43.41359711 620.73187256]
[53.78731918 609.82452393]
[66.14452362 601.22894287]
[79.97919464 595.29705811]
[94.72481537 592.27191162]
[94.72481537 577.27191162]
[94.72481537 562.27191162]
[94.72481537 547.27191162]
[94.72481537 532.27191162]
[94.72481537 517.27191162]
[94.72481537 502.27188110]
[94.72481537 487.27188110]
[94.72481537 472.27188110]
[94.72481537 457.27188110]
[86.98751068 444.54461670]
[94.72481537 430.74444580]
[80.18241882 427.19378662]
[66.90446472 420.26153564]
[55.66478729 410.34683228]
[47.11960602 398.02273560]
[41.76920319 384.00311279]
[39.92865372 369.10140991]
[41.70925140 354.18331909]
[47.01180267 340.11645508]
[55.53214264 327.72009277]
[66.77857208 317.71722412]
[80.10024261 310.69259644]
[94.72481537 307.05838013]
[94.72481537 292.05838013]
[94.72481537 277.05838013]
[94.72481537 262.05838013]
[79.80028534 257.38696289]
[67.02912140 248.32781982]
[57.66418076 235.75495911]
[52.62869644 220.88784790]
[52.42525482 205.17303467]
[57.08566666 190.14349365]
[66.16670990 177.26901245]
[78.79222870 167.81251526]
[93.73767090 162.70613098]
[93.44131470 147.70906067]
[93.14495850 132.71199036]
[79.64764404 126.51127625]
[70.17002869 115.07444763]
[66.58398438 100.66033173]
[69.59777832 86.11580658]
[78.61616516 74.31347656]
[91.85797119 67.58436584]
[91.56161499 52.58729172]
[91.26525879 37.59022141]
[83.25681305 23.94561005]
[90.74114990 11.06795406]
[90.44479370 -3.92911768]
[78.14823914 4.66127348]
[63.70901871 0.59816086]
[57.69677734 -13.14421749]
[64.51253510 -26.50630760]
[79.16709137 -29.70692825]
[90.93318939 -20.40316010]
[92.11746216 -35.35633850]
[93.00606537 -50.32999420]
[93.59867096 -65.31828308]
[94.19126892 -80.30657196]
[80.37358856 -86.64221191]
[70.03593445 -97.78677368]
[64.75470734 -112.04078674]
[65.33525848 -127.23063660]
[71.68907166 -141.03996277]
[82.84722137 -151.36296082]
[97.10817719 -156.62542725]
[112.29724121 -156.02488708]
[126.09819794 -149.65292358]
[136.40650940 -138.48120117]
[141.65020752 -124.21333313]
[141.02969360 -109.02507019]
[134.63957214 -95.23250580]
[123.45430756 -84.93890381]
[109.17955780 -79.71397400]
[108.58695984 -64.72568512]
[107.99435425 -49.73739243]
[110.55693817 -45.64989853]
[110.54218292 -39.89974976]
[107.07063293 -34.17206573]
[105.88636017 -19.21888733]
[105.44186401 -4.22547531]
[105.73822021 10.77159691]
[113.72546387 23.34351730]
[106.26232910 37.29386520]
[106.55868530 52.29093552]
[106.85504150 67.28800964]
[120.35235596 73.48872375]
[129.82997131 84.92555237]
[133.41601562 99.33966827]
[130.40222168 113.88419342]
[121.38383484 125.68652344]
[108.14202881 132.41563416]
[108.43838501 147.41270447]
[108.73474121 162.40977478]
[122.61310577 166.33996582]
[134.80381775 174.01995850]
[144.31979370 184.81730652]
[150.39356995 197.84753418]
[152.53912354 212.04670715]
[150.59078979 226.25817871]
[144.71601868 239.32691956]
[135.40098572 250.19329834]
[123.41042328 257.97909546]
[109.72481537 262.05838013]
[109.72481537 277.05838013]
[109.72481537 292.05838013]
[109.72481537 307.05838013]
[124.34938049 310.69259644]
[137.67105103 317.71722412]
[148.91748047 327.72009277]
[157.43782043 340.11645508]
[162.74037170 354.18331909]
[164.52096558 369.10140991]
[162.68041992 384.00311279]
[157.33001709 398.02273560]
[148.78483582 410.34683228]
[137.54516602 420.26153564]
[124.26720428 427.19378662]
[109.72481537 430.74444580]
[117.46211243 444.54461670]
[109.72481537 457.27188110]
[109.72481537 472.27188110]
[109.72481537 487.27188110]
[109.72481537 502.27188110]
[109.72481537 517.27191162]
[109.72481537 532.27191162]
[109.72481537 547.27191162]
[109.72481537 562.27191162]
[109.72481537 577.27191162]
[109.72481537 592.27191162]
[124.47042847 595.29705811]
[138.30509949 601.22894287]
[150.66230774 609.82452393]
[161.03602600 620.73187256]
[169.00146484 633.50439453]
[174.23243713 647.61895752]
[176.51475525 662.49768066]
[175.75494385 677.53125000]
[171.98410034 692.10400391]
[165.35667419 705.61926270]
[156.14404297 717.52355957]
[144.72344971 727.32940674]
[131.56254578 734.63531494]
[117.20030212 739.14202881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[26 133]
[38 121]
[39 120]
[40 119]
[41 118]
[50 108]
[51 107]
[52 106]
[58 100]
[59 99]
[60 98]
[62 96]
[63 95]
[69 94]
[70 93]
[71 90]
[72 89]
[73 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
