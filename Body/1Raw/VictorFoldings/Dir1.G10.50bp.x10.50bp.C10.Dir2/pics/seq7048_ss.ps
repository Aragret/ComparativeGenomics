%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAUAGGAGGGGGGGGGGGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAxxxxxxxxxxAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCCCAUAAAUAGGAG\
) } def
/len { sequence length } bind def

/coor [
[94.72385406 459.75979614]
[87.96326447 446.26174927]
[85.09622955 431.44006348]
[86.33550262 416.39456177]
[91.58913422 402.24176025]
[100.46725464 390.03186035]
[112.31105804 380.67095947]
[126.24165344 374.85363770]
[124.39832306 359.96731567]
[120.43067169 353.67687988]
[122.67321777 344.75683594]
[121.13592529 329.83581543]
[119.59863281 314.91482544]
[118.06134033 299.99380493]
[116.52404785 285.07278442]
[114.98675537 270.15176392]
[113.44946289 255.23074341]
[111.91217041 240.30973816]
[110.37487793 225.38871765]
[108.83758545 210.46769714]
[107.30029297 195.54667664]
[92.44007874 184.93296814]
[89.95236969 166.52120972]
[101.86334991 151.85095215]
[99.71477509 137.00563049]
[97.56619263 122.16031647]
[95.41761780 107.31498718]
[91.28704071 110.24176788]
[86.27819824 112.04940033]
[80.63861084 112.55559540]
[65.65837097 113.32525635]
[50.67813110 114.09490967]
[42.20766068 117.67918396]
[35.38304138 114.72338104]
[20.39015579 115.18531036]
[6.73975611 124.27368927]
[-7.83413553 116.75479889]
[-8.33914852 100.36342621]
[5.74423170 91.96161652]
[19.92823029 100.19242096]
[34.92111588 99.73049927]
[49.90847015 99.11466980]
[64.88871002 98.34500885]
[79.86894989 97.57535553]
[64.90814972 96.49167633]
[52.67815399 87.80679321]
[46.72489166 74.03876495]
[48.77443695 59.17944336]
[58.23254395 47.53709793]
[72.35696411 42.48727036]
[87.05250549 45.49409485]
[98.05839539 55.68577576]
[102.18362427 70.10737610]
[98.23338318 84.57543945]
[103.93804169 70.70256042]
[109.64270782 56.82967758]
[115.34737396 42.95679855]
[121.05203247 29.08391762]
[107.87697601 21.88106537]
[95.57427979 13.27253914]
[84.29327393 3.36284041]
[74.17090607 -7.72773647]
[65.33005524 -19.86456299]
[57.87804031 -32.90030670]
[51.90531540 -46.67672729]
[47.48439407 -61.02659225]
[44.66893387 -75.77571106]
[43.49311829 -90.74503326]
[43.97121429 -105.75285339]
[46.09742355 -120.61698151]
[49.84593582 -135.15699768]
[55.17124176 -149.19638062]
[62.00870132 -162.56471252]
[70.27531433 -175.09971619]
[79.87073517 -186.64921570]
[90.67847443 -197.07302856]
[102.56734467 -206.24461365]
[115.39302063 -214.05264282]
[128.99981689 -220.40231323]
[143.22254944 -225.21656799]
[157.88858032 -228.43695068]
[172.81985474 -230.02436829]
[187.83515930 -229.95956421]
[202.75218201 -228.24333191]
[217.38986206 -224.89646912]
[231.57051086 -219.95964050]
[245.12199402 -213.49275208]
[257.87979126 -205.57431030]
[269.68905640 -196.30044556]
[280.40643311 -185.78373718]
[289.90179443 -174.15184021]
[298.05990601 -161.54594421]
[304.78170776 -148.11909485]
[309.98565674 -134.03427124]
[313.60852051 -119.46244049]
[315.60635376 -104.58051300]
[315.95486450 -89.56912231]
[314.64990234 -74.61050415]
[311.70724487 -59.88624573]
[307.16262817 -45.57507324]
[301.07119751 -31.85071945]
[293.50695801 -18.87978172]
[284.56167603 -6.81971931]
[274.34393311 4.18307257]
[262.97781372 13.99502945]
[250.60127258 22.49704361]
[237.36453247 29.58590698]
[223.42829895 35.17556763]
[208.96171570 39.19817352]
[194.14042664 41.60489273]
[179.14431763 42.36651230]
[164.15544128 41.47378159]
[149.35575867 38.93754196]
[134.92491150 34.78858185]
[129.22024536 48.66146088]
[123.51558685 62.53434372]
[117.81092834 76.40722656]
[112.10626221 90.28010559]
[110.26293945 105.16641235]
[112.41151428 120.01173401]
[114.56009674 134.85705566]
[116.70867920 149.70237732]
[127.49850464 154.86648560]
[134.36181641 164.51637268]
[135.67230225 176.16432190]
[131.21711731 186.87591553]
[122.22131348 194.00938416]
[123.75860596 208.93040466]
[125.29589844 223.85142517]
[126.83319092 238.77244568]
[128.37048340 253.69345093]
[129.90777588 268.61447144]
[131.44506836 283.53549194]
[132.98236084 298.45651245]
[134.51965332 313.37753296]
[136.05694580 328.29852295]
[137.59423828 343.21954346]
[139.28463745 358.12399292]
[141.12796021 373.01031494]
[156.05673218 375.25405884]
[169.82606506 381.44338989]
[181.41419983 391.11901855]
[189.96122742 403.56292725]
[194.83287048 417.85171509]
[195.66764832 432.92507935]
[192.40359497 447.66442871]
[185.28294373 460.97601318]
[174.83407593 471.87207031]
[161.83238220 479.54400635]
[147.24267578 483.42251587]
[132.14758301 483.21978760]
[117.66729736 478.95086670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 139]
[9 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[24 122]
[25 121]
[26 120]
[27 119]
[30 44]
[31 43]
[32 42]
[34 41]
[35 40]
[54 118]
[55 117]
[56 116]
[57 115]
[58 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
