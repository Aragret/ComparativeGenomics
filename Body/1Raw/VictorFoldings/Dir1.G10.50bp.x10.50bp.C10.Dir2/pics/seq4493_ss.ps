%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGGAGCUGGGGGGGGGGUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUxxxxxxxxxxGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCCCCCCCCCCCAAUAGGAGCU\
) } def
/len { sequence length } bind def

/coor [
[83.37161255 364.06597900]
[70.15141296 356.79351807]
[59.26461411 346.34649658]
[51.45348358 333.43725586]
[47.25060272 318.94595337]
[46.94252777 303.86059570]
[50.55027008 289.20977783]
[57.82784271 275.99240112]
[68.27905273 265.10961914]
[81.19131470 257.30346680]
[95.68424988 253.10620117]
[95.37219238 238.10943604]
[95.06013489 223.11268616]
[94.74807739 208.11593628]
[94.43602753 193.11918640]
[94.12397003 178.12242126]
[93.81191254 163.12567139]
[93.49985504 148.12892151]
[93.18779755 133.13217163]
[92.87574005 118.13541412]
[89.28051758 116.27085876]
[86.14840698 113.70334625]
[72.24585724 119.33530426]
[58.34329987 124.96726227]
[54.73413849 140.05876160]
[42.92184067 150.12103271]
[27.44847679 151.28492737]
[14.26387024 143.10287476]
[8.43776989 128.72108459]
[12.21043205 113.66961670]
[24.13119125 103.73607635]
[39.61627197 102.74011993]
[52.71134186 111.06470490]
[66.61389923 105.43274689]
[80.51645660 99.80078888]
[85.59270477 86.88214874]
[97.98020935 80.62040710]
[102.28778839 66.25222015]
[106.59537506 51.88403702]
[110.90296173 37.51585388]
[115.21054840 23.14766884]
[119.51812744 8.77948475]
[123.67601776 -5.63273096]
[127.68376160 -20.08741951]
[131.54092407 -34.58301544]
[135.24708557 -49.11795425]
[134.33522034 -58.27330017]
[139.18447876 -63.91512680]
[143.19223022 -78.36981964]
[147.19996643 -92.82450867]
[136.08340454 -82.75365448]
[123.24447632 -74.99724579]
[109.15811157 -69.84221649]
[94.34539795 -67.47925568]
[79.35429382 -67.99578094]
[64.73934937 -71.37268829]
[51.04121017 -77.48503876]
[38.76659012 -86.10674286]
[28.36956406 -96.91886139]
[20.23473549 -109.52142334]
[14.66303062 -123.44823456]
[11.86055851 -138.18411255]
[11.93099022 -153.18394470]
[14.87171936 -167.89286804]
[20.57396126 -181.76673889]
[28.82678032 -194.29234314]
[39.32488251 -205.00634766]
[51.67992401 -213.51240540]
[65.43486023 -219.49586487]
[80.08087158 -222.73536682]
[95.07616425 -223.11108398]
[109.86603546 -220.60913086]
[123.90336609 -215.32205200]
[136.66889954 -207.44541931]
[147.69038391 -197.27061462]
[156.56015015 -185.17402649]
[162.95004272 -171.60313416]
[166.62371826 -157.05995178]
[167.44526672 -142.08247375]
[165.38430786 -127.22473145]
[160.51977539 -113.04235077]
[172.21940613 -122.42951202]
[178.59788513 -141.50733948]
[197.76347351 -143.76783752]
[209.06246948 -153.63357544]
[220.36148071 -163.49929810]
[231.66047668 -173.36502075]
[242.95948792 -183.23074341]
[244.24813843 -187.53199768]
[246.62701416 -190.83532715]
[249.63525391 -192.91677856]
[252.78684998 -193.73005676]
[255.63247681 -193.39888000]
[267.71246338 -202.29122925]
[279.79244995 -211.18357849]
[291.87243652 -220.07592773]
[301.04379272 -234.33505249]
[317.28454590 -229.46943665]
[317.10498047 -212.51643372]
[300.76480103 -207.99594116]
[288.68481445 -199.10359192]
[276.60482788 -190.21124268]
[264.52484131 -181.31889343]
[252.82521057 -171.93173218]
[241.52619934 -162.06600952]
[230.22720337 -152.20028687]
[218.92819214 -142.33456421]
[207.62919617 -132.46884155]
[207.84934998 -122.17401886]
[202.21934509 -113.29019928]
[192.41346741 -108.91431427]
[181.60656738 -110.72988892]
[169.90693665 -101.34272766]
[161.65464783 -88.81676483]
[157.64691162 -74.36207581]
[153.63917542 -59.90738678]
[149.78201294 -45.41179276]
[146.07585144 -30.87685585]
[147.47987366 -23.57107735]
[142.13844299 -16.07967949]
[138.13070679 -1.62499094]
[139.38243103 5.70841455]
[133.88630676 13.08706951]
[129.57873535 27.45525360]
[125.27114868 41.82343674]
[120.96356201 56.19162369]
[116.65597534 70.55980682]
[112.34838867 84.92799377]
[119.30666351 102.62695312]
[107.87249756 117.82335663]
[108.18455505 132.82011414]
[108.49661255 147.81686401]
[108.80866241 162.81361389]
[109.12071991 177.81037903]
[109.43277740 192.80712891]
[109.74483490 207.80387878]
[110.05689240 222.80062866]
[110.36894989 237.79739380]
[110.68099976 252.79414368]
[125.33599091 256.38491821]
[138.56179810 263.64715576]
[149.45666504 274.08575439]
[157.27777100 286.98898315]
[161.49183655 301.47705078]
[161.81155396 316.56213379]
[158.21513367 331.21572876]
[150.94776917 344.43875122]
[140.50497437 355.32958984]
[127.59873962 363.14569092]
[113.10904694 367.35415649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 35]
[23 34]
[24 33]
[37 128]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[43 121]
[44 120]
[45 118]
[46 117]
[48 116]
[49 115]
[50 114]
[81 113]
[82 112]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
