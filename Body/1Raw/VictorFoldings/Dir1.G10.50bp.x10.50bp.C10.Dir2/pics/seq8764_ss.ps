%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUUCUAGGGGGGGGGGGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCxxxxxxxxxxCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCCCCCCCCCCCACACUACUA\
) } def
/len { sequence length } bind def

/coor [
[88.59062195 407.69006348]
[75.37042236 400.41760254]
[64.48361969 389.97058105]
[56.67248917 377.06134033]
[52.46960831 362.57003784]
[52.16153336 347.48468018]
[55.76927567 332.83386230]
[63.04684830 319.61648560]
[73.49805450 308.73370361]
[86.41031647 300.92755127]
[100.90325165 296.73028564]
[100.59120178 281.73352051]
[100.27914429 266.73675537]
[99.96708679 251.74002075]
[99.65502930 236.74325562]
[99.34297180 221.74650574]
[99.03091431 206.74975586]
[98.71886444 191.75300598]
[98.40680695 176.75624084]
[97.62696075 161.77653503]
[96.38008118 146.82844543]
[95.13320923 131.88035583]
[76.87705994 122.48048401]
[67.99519348 103.96678162]
[72.08843231 83.84490204]
[61.20960617 73.51770020]
[50.33078003 63.19049454]
[39.45195770 52.86328888]
[27.97941017 62.55059052]
[15.51079273 70.91699982]
[2.19746518 77.86095428]
[-11.79896259 83.29815674]
[-26.30858612 87.16261292]
[-41.15527344 89.40740204]
[-56.15879822 90.00528717]
[-71.13703156 88.94899750]
[-85.90814972 86.25135803]
[-100.29284668 81.94512177]
[-114.11650085 76.08255768]
[-127.21131897 68.73484039]
[-139.41833496 59.99114990]
[-150.58935547 49.95763397]
[-160.58879089 38.75609207]
[-169.29524231 26.52249718]
[-176.60302734 13.40535736]
[-182.42344666 -0.43609992]
[-186.68583679 -14.83385086]
[-189.33845520 -29.61312103]
[-190.34910583 -44.59450150]
[-189.70552063 -59.59613419]
[-187.41549683 -74.43591309]
[-183.50685120 -88.93369293]
[-178.02702332 -102.91349030]
[-171.04254150 -116.20559692]
[-162.63818359 -128.64866638]
[-152.91596985 -140.09164429]
[-141.99392700 -150.39562988]
[-130.00462341 -159.43553162]
[-117.09361267 -167.10162354]
[-103.41761017 -173.30084229]
[-89.14264679 -177.95793152]
[-74.44199371 -181.01637268]
[-59.49411011 -182.43902588]
[-44.48044586 -182.20861816]
[-29.58325577 -180.32795715]
[-14.98337555 -176.81987000]
[-0.85803580 -171.72692871]
[12.62129498 -165.11097717]
[25.29099083 -157.05232239]
[36.99724960 -147.64877319]
[47.59797287 -137.01449585]
[56.96447754 -125.27857971]
[64.98306274 -112.58348083]
[71.55638123 -99.08330536]
[76.60465240 -84.94194031]
[80.06658173 -70.33104706]
[81.90015411 -55.42798996]
[82.08311462 -40.41367340]
[80.61323547 -25.47035789]
[77.50835419 -10.77944469]
[72.80617523 3.48073292]
[66.56376648 17.13706970]
[58.85691071 30.02379036]
[49.77916336 41.98446274]
[60.65798569 52.31166840]
[71.53681183 62.63887405]
[82.41563416 72.96607971]
[97.68622589 62.27378082]
[119.01663208 61.04984665]
[129.89546204 50.72264099]
[140.77429199 40.39543533]
[151.65310669 30.06822968]
[162.53193665 19.74102592]
[169.85656738 4.45095634]
[186.57675171 7.25661898]
[188.50933838 24.10005760]
[172.85914612 30.61985016]
[161.98031616 40.94705582]
[151.10148621 51.27426147]
[140.22267151 61.60146713]
[129.34384155 71.92867279]
[132.15982056 78.87995148]
[146.06246948 73.24822235]
[151.69396973 87.15096283]
[137.79177856 92.78250122]
[140.60775757 99.73377991]
[155.60694885 99.57774353]
[170.60612488 99.42170715]
[178.72407532 86.30292511]
[192.65570068 79.67622375]
[207.95549011 81.65615082]
[219.74131775 91.61093903]
[224.25238037 106.36403656]
[220.04922485 121.20778656]
[208.47303772 131.40559387]
[193.21774292 133.70339966]
[179.15127563 127.36795807]
[170.76216125 114.42089844]
[155.76298523 114.57693481]
[140.76379395 114.73297119]
[135.52441406 120.72021484]
[129.52465820 125.33805847]
[123.07892609 128.51919556]
[116.49915314 130.26329041]
[110.08129883 130.63348389]
[111.32817078 145.58157349]
[112.57504272 160.52966309]
[115.63291168 164.91931152]
[116.56244659 169.57638550]
[115.62716675 173.62939453]
[113.40355682 176.44418335]
[113.71561432 191.44094849]
[114.02767181 206.43769836]
[114.33972931 221.43444824]
[114.65178680 236.43119812]
[114.96383667 251.42796326]
[115.27589417 266.42471313]
[115.58795166 281.42147827]
[115.90000916 296.41821289]
[130.55499268 300.00897217]
[143.78080750 307.27124023]
[154.67567444 317.70983887]
[162.49678040 330.61303711]
[166.71084595 345.10110474]
[167.03056335 360.18621826]
[163.43414307 374.83981323]
[156.16677856 388.06283569]
[145.72396851 398.95364380]
[132.81774902 406.76977539]
[118.32805634 410.97824097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 127]
[21 126]
[22 125]
[25 87]
[26 86]
[27 85]
[28 84]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
