%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUGCCUGGGGGGGGGGCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUxxxxxxxxxxGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAACCCCCCCCCCAUUCCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[114.86042023 364.82177734]
[99.98951721 362.31039429]
[86.21070862 356.17889404]
[74.39013672 346.81274414]
[65.27085876 334.80065918]
[59.42610931 320.89779663]
[57.22330475 305.97805786]
[58.80091095 290.97933960]
[64.05976105 276.84445190]
[72.66927338 264.46191406]
[84.08824921 254.61012268]
[97.59888458 247.90837097]
[112.35189056 244.77792358]
[112.97586823 229.79090881]
[113.59984589 214.80389404]
[114.22382355 199.81687927]
[114.84780121 184.82986450]
[115.47177887 169.84283447]
[116.09575653 154.85581970]
[116.71973419 139.86880493]
[96.89585876 140.53575134]
[80.09977722 132.46183777]
[69.68779755 118.47330475]
[67.17016602 102.42751312]
[52.35240936 100.09640503]
[37.53465271 97.76530457]
[22.67160606 95.74296570]
[8.07824516 101.85397339]
[-3.68235278 92.71408081]
[-18.58425522 91.00139618]
[-33.48615646 89.28870392]
[-48.38806152 87.57601166]
[-58.90296555 98.83403015]
[-73.85596466 101.70825958]
[-87.47312927 95.30225372]
[-94.62149811 82.26235962]
[-109.52339935 80.54966736]
[-121.74423981 90.57098389]
[-137.46337891 88.93255615]
[-147.35491943 76.60645294]
[-145.55038452 60.90552139]
[-133.12039185 51.14484787]
[-117.43942261 53.11526871]
[-107.81070709 65.64776611]
[-92.90880585 67.36045837]
[-82.98852539 56.28228378]
[-68.27311707 53.13256836]
[-54.36205673 59.32416534]
[-46.67536926 72.67411041]
[-31.77346802 74.38680267]
[-16.87156487 76.09948730]
[-1.96966314 77.81217957]
[11.55781364 71.57867432]
[24.38429642 80.84106445]
[28.66001320 78.58412933]
[34.40703201 79.03476715]
[39.86575699 82.94754028]
[54.68351364 85.27864838]
[69.50127411 87.60974884]
[78.86894226 74.75778961]
[93.16845703 67.79719543]
[93.48051453 52.80044174]
[93.79257202 37.80368805]
[94.10462952 22.80693436]
[79.57561493 18.76236534]
[66.50930786 11.23093033]
[55.72707367 0.68606341]
[47.90668869 -12.20937729]
[43.53974915 -26.64477348]
[42.90076447 -41.71270370]
[46.02990341 -56.46598434]
[52.73046112 -69.97721100]
[62.58124161 -81.39706421]
[74.96301270 -90.00767517]
[89.09744263 -95.26776886]
[104.09603882 -96.84670258]
[119.01596832 -94.64521790]
[132.91935730 -88.80170441]
[144.93222046 -79.68348694]
[154.29942322 -67.86373901]
[160.43212891 -54.08547211]
[162.94483948 -39.21479416]
[161.67961121 -24.18648911]
[156.71595764 -9.94524670]
[148.36590576 2.61371565]
[137.15435791 12.70093060]
[123.78607178 19.68230629]
[109.10137939 23.11898994]
[108.78932953 38.11574173]
[108.47727203 53.11249542]
[108.16521454 68.10925293]
[127.10967255 73.26321411]
[142.02626038 89.85778809]
[155.41255188 83.08966827]
[168.79882812 76.32155609]
[182.18511963 69.55344391]
[195.50027466 62.64644241]
[208.74285889 55.60130692]
[221.98544312 48.55617142]
[230.20878601 34.36784363]
[246.60522461 34.66588593]
[254.30751038 49.14369202]
[245.39218140 62.90774155]
[229.03057861 61.79875565]
[215.78799438 68.84389496]
[202.54541016 75.88903046]
[198.08860779 81.84574890]
[188.95323181 82.93972778]
[175.56695557 89.70783997]
[162.18066406 96.47595215]
[148.79437256 103.24407196]
[149.57421875 118.22378540]
[163.59094238 123.56529999]
[177.60765076 128.90681458]
[191.62435913 134.24832153]
[202.33671570 123.42401886]
[216.52792358 117.89868164]
[231.73928833 118.62960052]
[245.33534241 125.49015045]
[254.96049500 137.29168701]
[258.94711304 151.98953247]
[256.60452271 167.03720093]
[248.33856201 179.82757568]
[235.58135986 188.14465332]
[220.54319763 190.54747009]
[205.82951355 186.61968994]
[193.98954773 177.04183960]
[187.07464600 163.47335815]
[186.28285217 148.26502991]
[172.26614380 142.92352295]
[158.24942017 137.58201599]
[144.23271179 132.24049377]
[131.70674133 140.49278259]
[131.08277893 155.47979736]
[130.45880127 170.46681213]
[129.83482361 185.45382690]
[129.21084595 200.44085693]
[128.58686829 215.42787170]
[127.96288300 230.41488647]
[127.33890533 245.40190125]
[141.78063965 249.74784851]
[154.68742371 257.54946899]
[165.24795532 268.31637573]
[172.79838562 281.37173462]
[176.86405945 295.89483643]
[177.18943787 310.97280884]
[173.75405884 325.65780640]
[166.77386475 339.02670288]
[156.68763733 350.23913574]
[144.12940979 358.59030151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[24 59]
[25 58]
[26 57]
[27 54]
[29 52]
[30 51]
[31 50]
[32 49]
[36 45]
[37 44]
[61 91]
[62 90]
[63 89]
[64 88]
[93 111]
[94 110]
[95 109]
[96 108]
[97 106]
[98 105]
[99 104]
[112 132]
[113 131]
[114 130]
[115 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
