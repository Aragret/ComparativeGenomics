%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCCUCAGGGGGGGGGGUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAxxxxxxxxxxCUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCCCCCCCCCCCUUCUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[83.93372345 397.67260742]
[70.44483948 390.94107056]
[58.95933914 381.17651367]
[50.14496994 368.94662476]
[44.51418686 354.96243286]
[42.39435959 340.03695679]
[43.90872955 325.03793335]
[48.96925354 310.83743286]
[57.28171921 298.26101685]
[68.36284637 288.03985596]
[81.56840515 280.76821899]
[96.13063049 276.86886597]
[95.82264709 261.87200928]
[95.51467133 246.87518311]
[95.20669556 231.87834167]
[94.89871979 216.88150024]
[94.59073639 201.88465881]
[94.28276062 186.88783264]
[93.97478485 171.89099121]
[93.66680908 156.89414978]
[85.66982269 144.32843018]
[93.12214661 130.37229919]
[92.81417084 115.37545776]
[83.05489349 103.98439026]
[68.28278351 101.37966156]
[53.51066589 98.77494049]
[40.65485764 107.57073212]
[25.71093559 104.71874237]
[17.40471840 92.40849304]
[2.63260126 89.80376434]
[-12.13951492 87.19904327]
[-26.91163063 84.59432220]
[-41.02119827 94.88545227]
[-57.88197327 91.87782288]
[-67.18923187 77.90362549]
[-82.01171875 75.60275269]
[-96.83419800 73.30187988]
[-105.85753632 75.08378601]
[-111.93612671 70.79858398]
[-126.70824432 68.19386292]
[-141.92494202 74.30809784]
[-154.65963745 63.97564316]
[-151.81195068 47.82563400]
[-136.31135559 42.47182083]
[-124.10351562 53.42174530]
[-109.33140564 56.02647018]
[-94.53332520 58.47939682]
[-79.71083832 60.78026962]
[-64.88835907 63.08114624]
[-55.62224579 54.07606888]
[-42.66515350 52.04076004]
[-30.73482132 57.94400406]
[-24.30690765 69.82220459]
[-9.53479195 72.42692566]
[5.23732424 75.03165436]
[20.00943947 77.63637543]
[32.02508545 68.90941620]
[47.04322052 71.34053802]
[56.11538696 84.00282288]
[70.88750458 86.60755157]
[85.65962219 89.21227264]
[90.81993103 86.84923553]
[95.91860199 86.47127533]
[100.28630066 87.77938080]
[103.43908691 90.27310181]
[114.41989136 80.05438995]
[125.40069580 69.83568573]
[116.37684631 57.83618927]
[108.65673828 44.95916748]
[102.32496643 31.34570885]
[97.45088959 17.14496613]
[94.08792114 2.51253033]
[92.27290344 -12.39127541]
[92.02572632 -27.40315819]
[93.34909821 -42.35863876]
[96.22852325 -57.09385681]
[100.63243866 -71.44736481]
[106.51260376 -85.26190186]
[113.80458832 -98.38610077]
[122.42850494 -110.67617035]
[132.28985596 -121.99745178]
[143.28059387 -132.22590637]
[155.28030396 -141.24946594]
[168.15751648 -148.96926880]
[181.77113342 -155.30070496]
[195.97200012 -160.17443848]
[210.60450745 -163.53704834]
[225.50836182 -165.35169983]
[240.52024841 -165.59851074]
[255.47569275 -164.27478027]
[270.21084595 -161.39500427]
[284.56423950 -156.99073792]
[298.37863159 -151.11022949]
[311.50265503 -143.81793213]
[323.79251099 -135.19372559]
[335.11355591 -125.33209229]
[345.34176636 -114.34110260]
[354.36502075 -102.34117126]
[362.08450317 -89.46377563]
[368.41561890 -75.85000610]
[373.28900146 -61.64902496]
[376.65127563 -47.01642609]
[378.46554565 -32.11253357]
[378.71200562 -17.10063934]
[377.38790894 -2.14522266]
[374.50775146 12.58985519]
[370.10314941 26.94314957]
[364.22232056 40.75740051]
[356.92968750 53.88124466]
[348.30517578 66.17089844]
[338.44326782 77.49169922]
[327.45202637 87.71961975]
[315.45187378 96.74259949]
[302.57431030 104.46176910]
[288.96038818 110.79254913]
[274.75927734 115.66558838]
[260.12661743 119.02749634]
[245.22267151 120.84142303]
[230.21076965 121.08750153]
[215.25538635 119.76304626]
[200.52037048 116.88255310]
[186.16719055 112.47758484]
[172.35307312 106.59641266]
[159.22941589 99.30347443]
[146.93997192 90.67866516]
[135.61940002 80.81649017]
[124.63860321 91.03519440]
[113.65779877 101.25389862]
[107.81101227 115.06748199]
[108.11898804 130.06431580]
[116.13800049 143.70272827]
[108.66364288 156.58618164]
[108.97161865 171.58300781]
[109.27960205 186.57984924]
[109.58757782 201.57669067]
[109.89555359 216.57353210]
[110.20352936 231.57035828]
[110.51151276 246.56719971]
[110.81948853 261.56402588]
[111.12746429 276.56088257]
[125.83750153 279.85910034]
[139.33045959 286.58245850]
[150.82188416 296.34005737]
[159.64366150 308.56460571]
[165.28291321 322.54537964]
[167.41178894 337.46957397]
[165.90652466 352.46948242]
[160.85461426 366.67306519]
[152.54977417 379.25451660]
[141.47483826 389.48239136]
[128.27369690 396.76205444]
[113.71383667 400.67022705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 130]
[23 129]
[24 61]
[25 60]
[26 59]
[29 56]
[30 55]
[31 54]
[32 53]
[35 49]
[36 48]
[37 47]
[39 46]
[40 45]
[65 128]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
