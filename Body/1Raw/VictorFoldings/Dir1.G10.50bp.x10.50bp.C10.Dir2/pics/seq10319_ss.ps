%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUUACUAGGGGGGGGGGUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUxxxxxxxxxxAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCCCCCCAUUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 375.60372925]
[71.01555634 370.05072021]
[58.81560135 361.18438721]
[49.20452881 349.56207275]
[42.78650284 335.91436768]
[39.96496582 321.09918213]
[40.91728210 306.04782104]
[45.58358765 291.70639038]
[53.67055511 278.97644043]
[64.66983032 268.65817261]
[77.88998413 261.40017700]
[92.50000000 257.65875244]
[92.50000000 242.65875244]
[92.50000000 227.65875244]
[92.50000000 212.65875244]
[92.50000000 197.65875244]
[92.50000000 182.65875244]
[92.50000000 167.65875244]
[92.50000000 152.65875244]
[92.50000000 137.65875244]
[92.50000000 122.65874481]
[92.50000000 107.65874481]
[90.35141754 92.81342316]
[86.09857178 78.42893982]
[81.84572601 64.04446411]
[77.29843903 49.75033188]
[72.45861816 35.55257797]
[67.61880493 21.35482597]
[62.77898788 7.15707397]
[48.23778915 10.87024784]
[33.45008469 13.43107796]
[18.50704384 14.82377625]
[3.50079656 15.03975677]
[-11.47613621 14.07768631]
[-26.33141518 11.94349766]
[-40.97345352 8.65034962]
[-55.31197357 4.21854401]
[-69.25857544 -1.32459426]
[-82.72727203 -7.94488955]
[-95.63502502 -15.60152435]
[-107.90224457 -24.24729347]
[-119.45330811 -33.82889175]
[-130.21699524 -44.28724670]
[-140.12693787 -55.55787277]
[-149.12205505 -67.57128906]
[-157.14686584 -80.25341797]
[-164.15190125 -93.52607727]
[-170.09397888 -107.30744171]
[-174.93646240 -121.51252747]
[-178.64947510 -136.05375671]
[-181.21015930 -150.84149170]
[-182.60270691 -165.78454590]
[-182.81852722 -180.79080200]
[-181.85630798 -195.76771545]
[-179.72196960 -210.62297058]
[-176.42866516 -225.26498413]
[-171.99671936 -239.60345459]
[-166.45344543 -253.55000305]
[-159.83300781 -267.01864624]
[-152.17623901 -279.92630005]
[-143.53034973 -292.19345093]
[-133.94862366 -303.74441528]
[-123.49016571 -314.50799561]
[-112.21943665 -324.41781616]
[-100.20593262 -333.41281128]
[-87.52371979 -341.43746948]
[-74.25098419 -348.44238281]
[-60.46956635 -354.38430786]
[-46.26443100 -359.22665405]
[-31.72315598 -362.93954468]
[-16.93539810 -365.50006104]
[-1.99232829 -366.89245605]
[13.01392269 -367.10812378]
[27.99083519 -366.14575195]
[42.84607315 -364.01126099]
[57.48804092 -360.71780396]
[71.82646942 -356.28570557]
[85.77296448 -350.74227905]
[99.24152374 -344.12173462]
[112.14911652 -336.46481323]
[124.41616058 -327.81878662]
[135.96702576 -318.23696899]
[146.73049927 -307.77838135]
[156.64022827 -296.50756836]
[165.63508606 -284.49395752]
[173.65963745 -271.81167603]
[180.66439819 -258.53887939]
[186.60620117 -244.75738525]
[191.44837952 -230.55220032]
[195.16111755 -216.01089478]
[197.72149658 -201.22309875]
[199.11373901 -186.28002930]
[199.32925415 -171.27377319]
[198.36672974 -156.29685974]
[196.23208618 -141.44165039]
[192.93847656 -126.79971313]
[188.50624084 -112.46132660]
[182.96267700 -98.51490021]
[176.34196472 -85.04640198]
[168.68493652 -72.13888550]
[160.03878784 -59.87192917]
[150.45683289 -48.32115936]
[139.99815369 -37.55779266]
[128.72721863 -27.64819145]
[116.71353149 -18.65345001]
[104.03115845 -10.62902737]
[90.75827789 -3.62439609]
[76.97673798 2.31725788]
[81.81655884 16.51501083]
[86.65637207 30.71276283]
[91.49619293 44.91051483]
[95.36531067 47.80518341]
[97.42118073 53.18675232]
[96.23020935 59.79161453]
[100.48305511 74.17609406]
[104.73590088 88.56057739]
[109.14302826 74.22261047]
[118.62004089 62.59565353]
[131.77473450 55.38774109]
[146.67463684 53.65774155]
[161.13090515 57.65980148]
[173.01985168 66.80599976]
[180.59495544 79.75273132]
[182.74339294 94.59807587]
[179.14956665 109.16119385]
[170.34143066 121.30271149]
[157.61289978 129.23901367]
[142.83387756 131.80419922]
[128.17541504 128.62145996]
[115.79093170 120.15833282]
[107.50000000 107.65874481]
[107.50000000 122.65874481]
[107.50000000 137.65875244]
[107.50000000 152.65875244]
[107.50000000 167.65875244]
[107.50000000 182.65875244]
[107.50000000 197.65875244]
[107.50000000 212.65875244]
[107.50000000 227.65875244]
[107.50000000 242.65875244]
[107.50000000 257.65875244]
[122.11001587 261.40017700]
[135.33016968 268.65817261]
[146.32945251 278.97644043]
[154.41641235 291.70639038]
[159.08271790 306.04782104]
[160.03503418 321.09918213]
[157.21350098 335.91436768]
[150.79547119 349.56207275]
[141.18440247 361.18438721]
[128.98443604 370.05072021]
[114.96250153 375.60372925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 116]
[24 115]
[25 114]
[26 111]
[27 110]
[28 109]
[29 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
