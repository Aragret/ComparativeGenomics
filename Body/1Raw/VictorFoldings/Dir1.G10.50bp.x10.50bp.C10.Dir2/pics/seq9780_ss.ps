%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCACCCGGGGGGGGGGACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACxxxxxxxxxxCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUCCCCCCCCCCAUAACCACCC\
) } def
/len { sequence length } bind def

/coor [
[86.10168457 423.52685547]
[72.25574493 417.51083374]
[60.54708099 407.98141479]
[51.84455872 395.64575195]
[46.79395676 381.41921997]
[45.77006531 366.35754395]
[48.84886551 351.57836914]
[55.80188751 338.17843628]
[66.11316681 327.15213013]
[79.01754761 319.31759644]
[93.55744171 315.25628662]
[93.55744171 300.25628662]
[93.55744171 285.25628662]
[93.55744171 270.25628662]
[93.55744171 255.25628662]
[93.55744171 240.25628662]
[93.55744171 225.25628662]
[93.55744171 210.25628662]
[93.55744171 195.25628662]
[93.55744171 180.25628662]
[93.55744171 165.25628662]
[83.96633148 150.59304810]
[93.22058868 134.70788574]
[92.90853119 119.71112823]
[84.06055450 116.12839508]
[77.13623047 108.53131104]
[73.94606018 97.98939514]
[59.53384781 102.14728546]
[45.12163162 106.30517578]
[31.57916451 116.50507355]
[18.02895355 106.31546021]
[24.06927681 90.47403717]
[40.96374130 91.89295959]
[55.37595749 87.73506927]
[69.78817749 83.57717896]
[79.65390015 72.27817535]
[81.83073425 57.43697357]
[84.00757599 42.59576797]
[86.18441010 27.75456047]
[74.22048950 21.48143196]
[64.80065918 11.83066845]
[58.83931732 -0.24065807]
[56.90887451 -13.54152012]
[59.18479919 -26.76444626]
[65.42977142 -38.61404800]
[75.01835632 -47.93391800]
[86.99960327 -53.81948090]
[100.19136047 -55.70578384]
[102.98368073 -70.44358826]
[105.77600861 -85.18139648]
[108.56832886 -99.91919708]
[108.10028839 -114.91189575]
[104.39412689 -129.44683838]
[100.68796539 -143.98176575]
[96.98180389 -158.51670837]
[93.27564240 -173.05163574]
[89.56948090 -187.58657837]
[74.49478149 -187.45750427]
[59.82738876 -190.94049072]
[46.42006302 -197.83302307]
[35.05228043 -207.73439026]
[26.38495064 -220.06892395]
[20.92198181 -234.11952209]
[18.98098373 -249.06930542]
[20.67480278 -264.04910278]
[25.90496254 -278.18801880]
[34.36738968 -290.66403198]
[45.57008743 -300.75180054]
[58.86174774 -307.86483765]
[73.46960449 -311.58956909]
[88.54438782 -311.70950317]
[103.20966339 -308.21762085]
[116.61280823 -301.31698608]
[127.97458649 -291.40872192]
[136.63442993 -279.06893921]
[142.08888245 -265.01501465]
[144.02082825 -250.06407166]
[142.31791687 -235.08529663]
[137.07919312 -220.94955444]
[128.60920715 -208.47868347]
[117.40039062 -198.39770508]
[104.10442352 -191.29273987]
[107.81058502 -176.75779724]
[111.51674652 -162.22286987]
[115.22290039 -147.68792725]
[118.92906189 -133.15299988]
[122.63522339 -118.61805725]
[136.95782471 -114.16123962]
[148.25683594 -124.02696228]
[159.55583191 -133.89268494]
[170.85484314 -143.75840759]
[182.15383911 -153.62413025]
[181.66571045 -169.25410461]
[191.37910461 -181.50906372]
[206.70764160 -184.60260010]
[220.41366577 -177.07405090]
[226.02558899 -162.47814941]
[220.89366150 -147.70664978]
[207.44100952 -139.73419189]
[192.01956177 -142.32513428]
[180.72056580 -132.45941162]
[169.42155457 -122.59368134]
[158.12255859 -112.72795868]
[146.82354736 -102.86223602]
[142.13752747 -99.26107788]
[137.15135193 -96.94470215]
[132.16874695 -95.88761139]
[127.47153473 -95.99830627]
[123.30613708 -97.12687683]
[120.51381683 -82.38906860]
[117.72148895 -67.65126038]
[114.92916870 -52.91345596]
[129.03039551 -44.16318512]
[138.73271179 -30.65419960]
[142.53723145 -14.42547035]
[139.83789062 2.06030607]
[131.01773071 16.29040909]
[117.39487457 26.08507919]
[101.02561188 29.93139839]
[98.84877777 44.77260208]
[96.67194366 59.61380768]
[94.49510193 74.45501709]
[112.54380035 78.56504822]
[122.49105072 93.05237579]
[120.10507202 109.51703644]
[107.90528107 119.39907074]
[108.21733856 134.39582825]
[116.99042511 143.90829468]
[116.90599823 156.44670105]
[108.55744171 165.25628662]
[108.55744171 180.25628662]
[108.55744171 195.25628662]
[108.55744171 210.25628662]
[108.55744171 225.25628662]
[108.55744171 240.25628662]
[108.55744171 255.25628662]
[108.55744171 270.25628662]
[108.55744171 285.25628662]
[108.55744171 300.25628662]
[108.55744171 315.25628662]
[123.09732819 319.31759644]
[136.00170898 327.15213013]
[146.31298828 338.17843628]
[153.26600647 351.57836914]
[156.34481812 366.35754395]
[155.32092285 381.41921997]
[150.27032471 395.64575195]
[141.56779480 407.98141479]
[129.85913086 417.51083374]
[116.01319122 423.52685547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 127]
[24 126]
[27 35]
[28 34]
[29 33]
[36 122]
[37 121]
[38 120]
[39 119]
[48 112]
[49 111]
[50 110]
[51 109]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 82]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
