%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAACACAGGGGGGGGGGAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAxxxxxxxxxxGCUGUCUCUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGCCCCCCCCCCGCAUAACACA\
) } def
/len { sequence length } bind def

/coor [
[76.17257690 364.73730469]
[62.32663727 358.72128296]
[50.61797333 349.19186401]
[41.91545105 336.85620117]
[36.86484909 322.62966919]
[35.84095764 307.56799316]
[38.91975784 292.78884888]
[45.87277985 279.38891602]
[56.18406296 268.36257935]
[69.08843994 260.52807617]
[83.62833405 256.46676636]
[83.62833405 241.46675110]
[83.62833405 226.46675110]
[83.62833405 211.46675110]
[83.62833405 196.46675110]
[83.62833405 181.46675110]
[83.62833405 166.46675110]
[83.62833405 151.46675110]
[83.62833405 136.46675110]
[83.62833405 121.46675110]
[79.58342743 106.76386261]
[84.60291290 95.58214569]
[93.28140259 91.89332581]
[89.57524109 77.35839081]
[85.86907959 62.82345581]
[70.68355560 54.20155334]
[66.48304749 37.59914780]
[75.38411713 23.36436844]
[71.37637329 8.90968037]
[67.36863708 -5.54500818]
[62.02721024 -13.03640652]
[63.43122482 -20.34218407]
[59.72506714 -34.87712097]
[48.81794357 -46.33771515]
[53.17073441 -60.58209991]
[49.46457291 -75.11703491]
[45.75841141 -89.65196991]
[42.05224991 -104.18691254]
[37.00349426 -118.31171417]
[30.65636444 -131.90266418]
[24.30923462 -145.49360657]
[17.96210480 -159.08456421]
[11.61497498 -172.67552185]
[5.26784563 -186.26646423]
[-1.07928395 -199.85742188]
[-15.50801277 -195.64883423]
[-30.41009521 -193.69221497]
[-45.43620682 -194.03341675]
[-60.23411179 -196.66447449]
[-74.45692444 -201.52369690]
[-87.77124786 -208.49716187]
[-99.86497498 -217.42141724]
[-110.45460510 -228.08724976]
[-119.29190063 -240.24465942]
[-126.16970825 -253.60864258]
[-130.92680359 -267.86593628]
[-133.45167542 -282.68234253]
[-133.68511963 -297.71051025]
[-131.62168884 -312.59817505]
[-127.30973816 -326.99636841]
[-120.85034943 -340.56753540]
[-112.39494324 -352.99356079]
[-102.14171600 -363.98318481]
[-90.33102417 -373.27877808]
[-77.23973083 -380.66244507]
[-63.17471313 -385.96109009]
[-48.46567154 -389.05050659]
[-33.45740891 -389.85830688]
[-18.50174332 -388.36550903]
[-3.94925284 -384.60711670]
[9.85892963 -378.67123413]
[22.59912109 -370.69705200]
[33.97267151 -360.87142944]
[43.71297073 -349.42471313]
[51.59169006 -336.62524414]
[57.42414093 -322.77307129]
[61.07360458 -308.19290161]
[62.45453262 -293.22647095]
[61.53455353 -278.22467041]
[58.33522797 -263.53915405]
[52.93156052 -249.51414490]
[45.45021439 -236.47842407]
[36.06656647 -224.73756409]
[25.00058365 -214.56680298]
[12.51166725 -206.20454407]
[18.85879707 -192.61360168]
[25.20592690 -179.02264404]
[31.55305481 -165.43170166]
[37.90018463 -151.84074402]
[44.24731445 -138.24978638]
[50.59444427 -124.65884399]
[54.62978363 -139.10585022]
[65.73605347 -149.18804932]
[80.50488281 -151.81134033]
[94.40390778 -146.17066956]
[103.16768646 -133.99710083]
[104.10674286 -119.02651978]
[96.93287659 -105.85322571]
[83.84766388 -98.51992798]
[68.86679077 -99.27713013]
[56.58718491 -107.89306641]
[60.29334641 -93.35813141]
[63.99950790 -78.82319641]
[67.70566559 -64.28826141]
[78.34770203 -53.86730194]
[74.26000214 -38.58328247]
[77.96616364 -24.04834557]
[81.82332611 -9.55274868]
[85.83106232 4.90194035]
[89.83880615 19.35662842]
[101.86231995 24.09284782]
[109.05303192 35.06408310]
[108.58460236 48.36854172]
[100.40401459 59.11729431]
[104.11017609 73.65222931]
[107.81633759 88.18716431]
[117.44486237 99.68897247]
[131.10110474 105.89437866]
[144.75735474 112.09978485]
[158.41358948 118.30519104]
[173.12104797 112.52019501]
[187.57785034 118.90583801]
[193.20703125 133.67364502]
[186.66888428 148.06211853]
[171.84239197 153.53485107]
[157.52384949 146.84495544]
[152.20817566 131.96142578]
[138.55194092 125.75602722]
[124.89569855 119.55062103]
[111.23945618 113.34520721]
[98.62833405 121.46675110]
[98.62833405 136.46675110]
[98.62833405 151.46675110]
[98.62833405 166.46675110]
[98.62833405 181.46675110]
[98.62833405 196.46675110]
[98.62833405 211.46675110]
[98.62833405 226.46675110]
[98.62833405 241.46675110]
[98.62833405 256.46676636]
[113.16822052 260.52807617]
[126.07260132 268.36257935]
[136.38388062 279.38891602]
[143.33689880 292.78884888]
[146.41571045 307.56799316]
[145.39181519 322.62966919]
[140.34121704 336.85620117]
[131.63868713 349.19186401]
[119.93002319 358.72128296]
[106.08408356 364.73730469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 116]
[24 115]
[25 114]
[28 110]
[29 109]
[30 108]
[32 107]
[33 106]
[35 104]
[36 103]
[37 102]
[38 101]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
