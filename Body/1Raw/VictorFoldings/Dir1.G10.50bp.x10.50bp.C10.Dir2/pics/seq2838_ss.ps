%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAACAAACCCGGGGGGGGGGACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCxxxxxxxxxxCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCCCCCCCCCCCUAACAACCCC\
) } def
/len { sequence length } bind def

/coor [
[82.92328644 412.08441162]
[70.22779846 403.99008179]
[59.49293137 393.43280029]
[51.18795776 380.87408447]
[45.67593384 366.86297607]
[43.19782639 352.01196289]
[43.86196518 336.97027588]
[47.63931656 322.39544678]
[54.36475372 308.92465210]
[63.74426651 297.14678955]
[75.36782837 287.57669067]
[88.72729492 280.63275146]
[103.23866272 276.61853027]
[102.32714844 261.64624023]
[101.41563416 246.67398071]
[100.50411987 231.70169067]
[99.59260559 216.72941589]
[98.68109894 201.75714111]
[97.76958466 186.78485107]
[96.85807037 171.81257629]
[95.94655609 156.84030151]
[95.03504181 141.86802673]
[73.52236176 132.81031799]
[60.12520981 113.69609070]
[45.29818344 115.96750641]
[30.47115898 118.23892212]
[15.64413452 120.51033783]
[0.81710941 122.78175354]
[-3.15818858 137.48266602]
[-12.77423954 149.29162598]
[-26.36500549 156.16265869]
[-41.57580185 156.90530396]
[-55.77127075 151.39089966]
[-66.49195862 140.57485962]
[-71.88043976 126.33111572]
[-71.00312805 111.12748718]
[-64.01202393 97.59809875]
[-52.11837769 88.08699799]
[-37.38283920 84.24203491]
[-22.35842514 86.72937012]
[-9.64820671 95.11807251]
[-1.45430732 107.95473480]
[13.37271786 105.68331146]
[28.19974327 103.41189575]
[43.02676773 101.14048004]
[57.85379410 98.86906433]
[59.95949936 86.79621124]
[65.44821930 75.83894348]
[73.85622406 66.92304993]
[84.47311401 60.80181503]
[96.40186310 57.99243927]
[108.63462067 58.73227692]
[114.26937866 44.83085251]
[119.90413666 30.92943192]
[125.53889465 17.02800941]
[124.75252533 12.62105656]
[125.38164520 8.61086941]
[127.11855316 5.40216923]
[129.55384827 3.25402880]
[132.23437500 2.25906706]
[138.97642517 -11.14036465]
[145.71846008 -24.53979683]
[152.46051025 -37.93922806]
[159.20256042 -51.33866119]
[165.94461060 -64.73809052]
[172.68666077 -78.13752747]
[179.42871094 -91.53695679]
[166.77227783 -83.48618317]
[152.57830811 -78.63529968]
[137.64186096 -77.25601959]
[122.79959106 -79.42560577]
[108.88289642 -85.02253723]
[96.67131805 -93.73329163]
[86.84887695 -105.06994629]
[79.96578217 -118.39747620]
[76.40759277 -132.96934509]
[76.37360382 -147.96929932]
[79.86573792 -162.55714417]
[86.68837738 -175.91571045]
[96.45935059 -187.29675293]
[108.63134003 -196.06275940]
[122.52252960 -201.72268677]
[137.35481262 -203.95950317]
[152.29736328 -202.64790344]
[166.51316833 -197.86138916]
[179.20594788 -189.86804199]
[189.66468811 -179.11561584]
[197.30357361 -166.20642090]
[201.69470215 -151.86354065]
[202.59211731 -136.89041138]
[199.94552612 -122.12574005]
[193.90538025 -108.40026093]
[206.12936401 -117.09361267]
[218.35334778 -125.78695679]
[230.57731628 -134.48030090]
[233.50604248 -147.08099365]
[243.91554260 -154.06434631]
[255.89256287 -152.12284851]
[268.29022217 -160.56666565]
[274.92141724 -175.56530762]
[291.25296021 -177.05259705]
[300.48440552 -163.49853516]
[293.11920166 -148.84637451]
[276.73403931 -148.16900635]
[264.33636475 -139.72518921]
[257.61257935 -123.54252625]
[239.27067566 -122.25632477]
[227.04669189 -113.56298065]
[214.82270813 -104.86962891]
[202.59872437 -96.17628479]
[192.82814026 -84.79490662]
[186.08609009 -71.39547729]
[179.34403992 -57.99604416]
[172.60198975 -44.59661484]
[165.85995483 -31.19718170]
[159.11790466 -17.79774857]
[152.37585449 -4.39831686]
[145.63380432 9.00111580]
[139.44030762 22.66276550]
[133.80555725 36.56418610]
[128.17080688 50.46561050]
[122.53604889 64.36702728]
[131.84663391 72.37078094]
[138.45648193 82.71761322]
[141.80503845 94.53007507]
[141.60835266 106.80641174]
[137.88307190 118.50553131]
[130.94514465 128.63529968]
[121.38291168 136.33665466]
[110.00732422 140.95651245]
[110.91883087 155.92878723]
[111.83034515 170.90106201]
[112.74185944 185.87333679]
[113.65337372 200.84562683]
[114.56488800 215.81790161]
[115.47640228 230.79017639]
[116.38791656 245.76246643]
[117.29943085 260.73474121]
[118.21093750 275.70703125]
[133.10209656 277.93121338]
[147.20527649 283.20321655]
[159.90394592 291.29257202]
[170.64297485 301.84564209]
[178.95288086 314.40106201]
[184.47041321 328.41000366]
[186.95436096 343.26004028]
[186.29614258 358.30200195]
[182.52452087 372.87829590]
[175.80439758 386.35174561]
[166.42950439 398.13330078]
[154.80972290 407.70797729]
[141.45298767 414.65716553]
[126.94319916 418.67709351]
[111.91467285 419.59204102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[52 122]
[53 121]
[54 120]
[55 119]
[60 118]
[61 117]
[62 116]
[63 115]
[64 114]
[65 113]
[66 112]
[67 111]
[92 110]
[93 109]
[94 108]
[95 107]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
