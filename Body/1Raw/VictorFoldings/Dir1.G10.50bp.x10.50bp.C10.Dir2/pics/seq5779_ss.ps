%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACAAAACCCGGGGGGGGGGACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUxxxxxxxxxxAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCACCCCCCCCCCAUAUAAAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 378.45764160]
[71.01555634 372.90463257]
[58.81560135 364.03829956]
[49.20452881 352.41598511]
[42.78650284 338.76828003]
[39.96496582 323.95309448]
[40.91728210 308.90173340]
[45.58358765 294.56030273]
[53.67055511 281.83035278]
[64.66983032 271.51208496]
[77.88998413 264.25408936]
[92.50000000 260.51266479]
[92.50000000 245.51266479]
[92.50000000 230.51266479]
[92.50000000 215.51266479]
[92.50000000 200.51266479]
[92.50000000 185.51266479]
[92.50000000 170.51266479]
[92.50000000 155.51266479]
[92.50000000 140.51266479]
[92.50000000 125.51266479]
[74.34956360 107.01433563]
[80.56115723 81.85399628]
[72.92819214 68.94129944]
[65.29521942 56.02860260]
[57.66225052 43.11590576]
[44.15569687 49.66056824]
[30.15481949 55.06750488]
[15.75525951 59.29978180]
[1.05537939 62.32849121]
[-13.84440231 64.13293457]
[-28.84230423 64.70079803]
[-43.83587646 64.02819061]
[-58.72269058 62.11971283]
[-73.40105438 58.98839951]
[-87.77070618 54.65564728]
[-101.73347473 49.15104294]
[-115.19397736 42.51219940]
[-128.06027222 34.78446198]
[-140.24447632 26.02061844]
[-151.66333008 16.28054047]
[-162.23886108 5.63075924]
[-171.89880371 -5.85597277]
[-180.57717896 -18.10118866]
[-188.21470642 -31.02124214]
[-194.75920105 -44.52787018]
[-200.16596985 -58.52881241]
[-204.39808655 -72.92842102]
[-207.42660522 -87.62834167]
[-209.23088074 -102.52814484]
[-209.79856873 -117.52605438]
[-209.12577820 -132.51960754]
[-207.21711731 -147.40640259]
[-204.08563232 -162.08473206]
[-199.75271606 -176.45433044]
[-194.24794006 -190.41703796]
[-187.60893250 -203.87745667]
[-179.88104248 -216.74366760]
[-171.11705017 -228.92774963]
[-161.37684631 -240.34649658]
[-150.72692871 -250.92190552]
[-139.24008179 -260.58169556]
[-126.99476624 -269.25994873]
[-114.07462311 -276.89730835]
[-100.56791687 -283.44165039]
[-86.56690979 -288.84826660]
[-72.16725159 -293.08020020]
[-57.46729660 -296.10855103]
[-42.56747437 -297.91262817]
[-27.56955719 -298.48013306]
[-12.57600307 -297.80715942]
[2.31076622 -295.89834595]
[16.98905754 -292.76669312]
[31.35860062 -288.43359375]
[45.32123947 -282.92864990]
[58.78158951 -276.28948975]
[71.64769745 -268.56143188]
[83.83168793 -259.79730225]
[95.25031281 -250.05696106]
[105.82558441 -239.40692139]
[115.48526001 -227.91995239]
[124.16333771 -215.67453003]
[131.80055237 -202.75430298]
[138.34474182 -189.24751282]
[143.75117493 -175.24644470]
[147.98294067 -160.84674072]
[151.01112366 -146.14674377]
[152.81503296 -131.24690247]
[153.38235474 -116.24897766]
[152.70921326 -101.25543213]
[150.80020142 -86.36868286]
[147.66836548 -71.69042969]
[143.33509827 -57.32093811]
[137.83000183 -43.35836792]
[131.19067383 -29.89809608]
[123.46247101 -17.03207588]
[114.69819641 -4.84819365]
[104.95771027 6.57031965]
[94.30754852 17.14546204]
[82.82047272 26.80499649]
[70.57494354 35.48293304]
[78.20791626 48.39563370]
[85.84088898 61.30833054]
[93.47385406 74.22103119]
[100.88242340 73.42243195]
[108.22169495 74.71068573]
[114.91541290 77.98463440]
[120.43798065 82.98721313]
[124.35577393 89.32563019]
[126.36116791 96.50218964]
[141.18365479 98.80306244]
[156.00613403 101.10393524]
[170.82861328 103.40481567]
[180.39482117 91.38885498]
[194.69325256 85.78077698]
[209.87768555 88.08911896]
[221.86360168 97.69294739]
[227.42683411 112.00888824]
[225.07090759 127.18601227]
[215.42955017 139.14175415]
[201.09625244 144.66009521]
[185.92658997 142.25660706]
[174.00111389 132.57781982]
[168.52774048 118.22729492]
[153.70526123 115.92642212]
[138.88278198 113.62554169]
[124.06029510 111.32466888]
[121.81285858 115.21002960]
[118.94396210 118.66204834]
[115.53534698 121.58237457]
[111.68412018 123.88780975]
[107.50000000 125.51266479]
[107.50000000 140.51266479]
[107.50000000 155.51266479]
[107.50000000 170.51266479]
[107.50000000 185.51266479]
[107.50000000 200.51266479]
[107.50000000 215.51266479]
[107.50000000 230.51266479]
[107.50000000 245.51266479]
[107.50000000 260.51266479]
[122.11001587 264.25408936]
[135.33016968 271.51208496]
[146.32945251 281.83035278]
[154.41641235 294.56030273]
[159.08271790 308.90173340]
[160.03503418 323.95309448]
[157.21350098 338.76828003]
[150.79547119 352.41598511]
[141.18440247 364.03829956]
[128.98443604 372.90463257]
[114.96250153 378.45764160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 104]
[24 103]
[25 102]
[26 101]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
