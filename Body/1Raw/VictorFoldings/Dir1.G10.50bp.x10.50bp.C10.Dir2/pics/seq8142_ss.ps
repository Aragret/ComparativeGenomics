%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAGCCCAUGGGGGGGGGGAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUxxxxxxxxxxAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCCCCCCCCCCCUAAAGCCCAU\
) } def
/len { sequence length } bind def

/coor [
[83.14120483 399.20367432]
[70.22204590 391.44531250]
[59.44074631 380.91629028]
[51.37873077 368.18441772]
[46.47077179 353.93630981]
[44.98154831 338.94033813]
[46.99137115 324.00524902]
[52.39185715 309.93643188]
[60.89175797 297.49261475]
[72.03269196 287.34490967]
[85.21384430 280.04052734]
[99.72435760 275.97338867]
[99.10853577 260.98602295]
[98.49270630 245.99867249]
[97.87688446 231.01132202]
[97.26105499 216.02397156]
[96.64523315 201.03662109]
[96.02940369 186.04927063]
[95.41358185 171.06190491]
[94.79776001 156.07455444]
[94.18193054 141.08720398]
[93.56610870 126.09985352]
[88.69689941 124.38928223]
[84.24433136 121.77971649]
[80.37252808 118.36734772]
[77.22418976 114.27794647]
[62.79680634 118.38288879]
[48.36942291 122.48783875]
[33.94203949 126.59278107]
[22.92070198 138.73617554]
[6.95302629 134.99916077]
[2.46518683 119.22603607]
[14.07388783 107.64285278]
[29.83709335 112.16539764]
[44.26447678 108.06045532]
[58.69186401 103.95550537]
[73.11924744 99.85056305]
[76.69916534 86.59596252]
[86.35745239 76.83800507]
[99.57460022 73.12220001]
[103.53121185 58.65343094]
[91.58036804 49.30179596]
[84.14041138 36.12264633]
[82.31794739 21.13957977]
[86.35978699 6.63953972]
[95.62001801 -5.17625570]
[108.66300964 -12.52647305]
[123.48593140 -14.31818295]
[127.44254303 -28.78694916]
[131.39915466 -43.25571823]
[125.68672943 -54.86484528]
[129.32377625 -66.86248016]
[139.82612610 -72.94217682]
[144.07897949 -87.32666016]
[119.99919128 -119.76406097]
[117.85060883 -134.60939026]
[115.70202637 -149.45471191]
[113.55345154 -164.30003357]
[98.52656555 -165.18186951]
[83.98488617 -169.07089233]
[70.52388763 -175.80783081]
[58.69477844 -185.11680603]
[48.98196030 -196.61663818]
[41.78317261 -209.83641052]
[37.39319229 -224.23477173]
[35.99178696 -239.22213745]
[37.63634872 -254.18475342]
[42.25952911 -268.50994873]
[49.67201614 -281.61108398]
[59.57027054 -292.95169067]
[71.54896545 -302.06738281]
[85.11757660 -308.58486938]
[99.72048187 -312.23727417]
[114.75970459 -312.87503052]
[129.61940002 -310.47198486]
[143.69105530 -305.12658691]
[156.39846802 -297.05770874]
[167.22125244 -286.59579468]
[175.71624756 -274.16921997]
[181.53558350 -260.28683472]
[184.44094849 -245.51715088]
[184.31336975 -230.46495056]
[181.15809631 -215.74662781]
[175.10430908 -201.96487427]
[166.39991760 -189.68406677]
[155.40135193 -179.40707397]
[142.55900574 -171.55473328]
[128.39877319 -166.44860840]
[130.54734802 -151.60328674]
[132.69593811 -136.75796509]
[134.84451294 -121.91264343]
[141.48817444 -118.43246460]
[154.15953064 -126.45972443]
[154.77552795 -111.47210693]
[161.41918945 -107.99192810]
[174.84664917 -114.67800903]
[188.27409363 -121.36408234]
[201.70153809 -128.05015564]
[215.12899780 -134.73623657]
[228.55644226 -141.42230225]
[241.98388672 -148.10838318]
[250.58622742 -162.07019043]
[266.96868896 -161.33084106]
[274.27841187 -146.65092468]
[264.99578857 -133.13188171]
[248.66996765 -134.68093872]
[235.24252319 -127.99485779]
[221.81506348 -121.30878448]
[208.38761902 -114.62270355]
[194.96017456 -107.93663025]
[181.53271484 -101.25055695]
[168.10527039 -94.56448364]
[158.46345520 -83.07381439]
[154.21060181 -68.68933105]
[159.24980164 -51.90687180]
[145.86791992 -39.29910660]
[141.91131592 -24.83033943]
[137.95469666 -10.36157227]
[149.80322266 -1.27632320]
[157.29096985 11.68820477]
[159.24996948 26.57199478]
[155.35081482 41.11105347]
[146.15760803 53.08178711]
[133.04653931 60.64108276]
[117.99997711 62.61004257]
[114.04336548 77.07881165]
[125.94225311 92.95750427]
[123.70616150 112.67340088]
[108.55345917 125.48402405]
[109.16928101 140.47137451]
[109.78511047 155.45872498]
[110.40093231 170.44609070]
[111.01676178 185.43344116]
[111.63258362 200.42079163]
[112.24841309 215.40814209]
[112.86423492 230.39549255]
[113.48006439 245.38285828]
[114.09588623 260.37020874]
[114.71171570 275.35754395]
[129.50698853 278.22052002]
[143.24296570 284.41888428]
[155.17886353 293.61840820]
[164.67102051 305.32290649]
[171.20750427 318.90124512]
[174.43585205 333.62112427]
[174.18193054 348.68872070]
[170.45944214 363.29144287]
[163.46913147 376.64181519]
[153.58798218 388.01983643]
[141.34889221 396.81195068]
[127.41185760 402.54397583]
[112.52851868 404.90676880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 37]
[27 36]
[28 35]
[29 34]
[40 126]
[41 125]
[48 118]
[49 117]
[50 116]
[53 114]
[54 113]
[55 91]
[56 90]
[57 89]
[58 88]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
