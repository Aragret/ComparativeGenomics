%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACCAACCGGGGGGGGGGACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACxxxxxxxxxxAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGCCCCCCCCCCAUCAAACAACC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 366.96957397]
[71.01555634 361.41656494]
[58.81560135 352.55023193]
[49.20452881 340.92791748]
[42.78650284 327.28021240]
[39.96496582 312.46502686]
[40.91728210 297.41366577]
[45.58358765 283.07223511]
[53.67055511 270.34228516]
[64.66983032 260.02398682]
[77.88998413 252.76602173]
[92.50000000 249.02458191]
[92.50000000 234.02458191]
[92.50000000 219.02458191]
[92.50000000 204.02458191]
[92.50000000 189.02458191]
[92.50000000 174.02458191]
[92.50000000 159.02458191]
[92.50000000 144.02458191]
[92.50000000 129.02458191]
[92.50000000 114.02458954]
[81.00933075 104.38277435]
[66.23722076 106.98749542]
[51.46509933 109.59221649]
[45.98942566 125.16278076]
[33.49198532 135.80023193]
[17.43102646 138.68486023]
[2.18902135 133.12536621]
[-8.12314796 120.72152710]
[-22.83867073 123.62899780]
[-37.55419159 126.53647614]
[-49.53462982 137.73474121]
[-65.14189148 132.70030212]
[-68.32056427 116.61217499]
[-55.80070114 106.02042389]
[-40.46166611 111.82095337]
[-25.74614334 108.91347504]
[-11.03061962 106.00600433]
[-7.47143745 92.78676605]
[1.48915195 82.34917450]
[14.13844204 76.77610779]
[28.02045822 77.21217346]
[40.41276932 83.62909698]
[48.86037827 94.82010651]
[63.63249588 92.21537781]
[78.40460968 89.61065674]
[86.61335754 86.84407043]
[93.90364075 87.87230682]
[98.85168457 91.70072174]
[106.74816895 78.94746399]
[108.62437439 69.94326019]
[114.93998718 66.01576233]
[123.09664917 53.42732620]
[121.17237854 40.63276291]
[128.27539062 30.30229187]
[140.12660217 27.69250870]
[148.54000854 15.27419472]
[156.95341492 2.85588074]
[150.36915588 -10.94972515]
[151.57124329 -26.09739113]
[160.13702393 -38.52694702]
[173.68357849 -44.95709229]
[188.52984619 -43.75138474]
[196.94325256 -56.16969681]
[205.35667419 -68.58801270]
[203.69549561 -81.41938782]
[211.00910950 -91.60184479]
[222.91140747 -93.96775055]
[231.57801819 -106.21070099]
[240.24462891 -118.45365906]
[230.73835754 -128.50170898]
[223.27363586 -140.14158630]
[218.11061096 -152.96456909]
[215.42866516 -166.52072144]
[215.32012939 -180.33474731]
[217.78712463 -193.92259216]
[222.74160767 -206.80845642]
[230.00839233 -218.54144287]
[239.33146667 -228.71130371]
[250.38293457 -236.96284485]
[262.77456665 -243.00825500]
[276.07144165 -246.63722229]
[289.80725098 -247.72421265]
[303.50054932 -246.23275757]
[316.67169189 -242.21679688]
[328.85974121 -235.81863403]
[338.26361084 -247.50483704]
[347.66744995 -259.19104004]
[357.07131958 -270.87725830]
[353.86297607 -286.18218994]
[361.28857422 -299.94424438]
[375.84197998 -305.66543579]
[390.65155029 -300.64434814]
[398.72460938 -287.25183105]
[396.24935913 -271.81140137]
[384.39447021 -261.61355591]
[368.75753784 -261.47338867]
[359.35366821 -249.78720093]
[349.94979858 -238.10098267]
[340.54595947 -226.41477966]
[350.78350830 -213.81147766]
[358.00869751 -199.26301575]
[361.86676025 -183.47734070]
[362.16683960 -167.22335815]
[358.89147949 -151.29335022]
[352.19754028 -136.46447754]
[342.40878296 -123.46081543]
[330.00015259 -112.91799927]
[315.57464600 -105.35214233]
[299.83425903 -101.13459778]
[283.54553223 -100.47371674]
[267.50244141 -103.40456390]
[252.48757935 -109.78704834]
[243.82096863 -97.54409790]
[235.15435791 -85.30113983]
[234.50910950 -67.79033661]
[217.77497864 -60.17460251]
[209.36157227 -47.75628662]
[200.94816589 -35.33797455]
[207.57286072 -21.99709702]
[206.62409973 -7.03194332]
[198.25674438 5.53204298]
[184.63461304 12.26512909]
[169.37173462 11.26929092]
[160.95832825 23.68760490]
[152.54490662 36.10591888]
[152.25932312 53.62627792]
[135.68508911 61.58399200]
[127.52842712 74.17243195]
[119.50142670 86.84394836]
[111.60494232 99.59720612]
[107.50000000 114.02458954]
[107.50000000 129.02458191]
[107.50000000 144.02458191]
[107.50000000 159.02458191]
[107.50000000 174.02458191]
[107.50000000 189.02458191]
[107.50000000 204.02458191]
[107.50000000 219.02458191]
[107.50000000 234.02458191]
[107.50000000 249.02458191]
[122.11001587 252.76602173]
[135.33016968 260.02398682]
[146.32945251 270.34228516]
[154.41641235 283.07223511]
[159.08271790 297.41366577]
[160.03503418 312.46502686]
[157.21350098 327.28021240]
[150.79547119 340.92791748]
[141.18440247 352.55023193]
[128.98443604 361.41656494]
[114.96250153 366.96957397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 46]
[23 45]
[24 44]
[29 38]
[30 37]
[31 36]
[49 131]
[50 130]
[52 129]
[53 128]
[56 126]
[57 125]
[58 124]
[63 119]
[64 118]
[65 117]
[68 115]
[69 114]
[70 113]
[86 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
