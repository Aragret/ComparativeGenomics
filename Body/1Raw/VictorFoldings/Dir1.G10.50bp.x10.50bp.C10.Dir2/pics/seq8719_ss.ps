%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACUUAUCGGGGGGGGGGAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUxxxxxxxxxxCAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCACCCCCCCCCCUACACCUAUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 361.40057373]
[71.19830322 355.38452148]
[59.48964310 345.85510254]
[50.78712082 333.51943970]
[45.73651886 319.29293823]
[44.71262741 304.23123169]
[47.79142761 289.45208740]
[54.74444962 276.05215454]
[65.05573273 265.02581787]
[77.96011353 257.19131470]
[92.50000000 253.13000488]
[92.50000000 238.13000488]
[92.50000000 223.13000488]
[92.50000000 208.13000488]
[92.50000000 193.13000488]
[92.50000000 178.13000488]
[92.50000000 163.13000488]
[92.50000000 148.13000488]
[92.50000000 133.13000488]
[92.50000000 118.13000488]
[81.21733856 108.93696594]
[78.93916321 93.70745087]
[87.97275543 80.20646667]
[104.55959320 76.08935547]
[100.55184937 61.63467026]
[96.54411316 47.17998123]
[90.23134613 60.78692627]
[75.48265839 63.52121353]
[64.71183014 53.08142853]
[66.98450470 38.25459671]
[80.38790131 31.52026367]
[65.81519318 27.96550179]
[51.24249268 24.41073990]
[36.66979218 20.85597801]
[22.09708786 17.30121613]
[13.70533085 29.92477226]
[1.50030589 38.91438675]
[-13.04416943 43.18452072]
[-28.17177963 42.21953201]
[-42.05579376 36.13594818]
[-53.01964569 25.66839027]
[-59.73939896 12.08087063]
[-61.40361404 -2.98585415]
[-57.81132507 -17.71240425]
[-49.39631653 -30.32047462]
[-37.17474747 -39.28758240]
[-22.62242508 -43.53090286]
[-7.49661922 -42.53803635]
[6.37615871 -36.42887878]
[17.32070351 -25.94113541]
[24.01540565 -12.34125328]
[25.65184975 2.72851253]
[40.22455215 6.28327465]
[54.79725647 9.83803654]
[69.36995697 13.39279842]
[83.94266510 16.94755936]
[92.21779633 18.17283440]
[97.81825256 22.70549583]
[103.30529022 8.74510574]
[108.79232025 -5.21528387]
[109.02746582 -14.41292286]
[114.54145050 -19.40708160]
[120.31771851 -33.25029755]
[126.09399414 -47.09351730]
[113.21501160 -54.83623123]
[101.60067749 -64.37169647]
[91.49855804 -75.49667358]
[83.12398529 -87.97402954]
[76.65544891 -101.53780365]
[72.23084259 -115.89888000]
[69.94446564 -130.75115967]
[69.84506226 -145.77807617]
[71.93473816 -160.65930176]
[76.16896820 -175.07766724]
[82.45748138 -188.72583008]
[90.66625214 -201.31289673]
[100.62030029 -212.57054138]
[112.10746002 -222.25883484]
[124.88288116 -230.17126465]
[138.67425537 -236.13916016]
[153.18762207 -240.03533936]
[168.11361694 -241.77674866]
[183.13409424 -241.32624817]
[197.92890930 -238.69346619]
[212.18267822 -233.93450928]
[225.59161377 -227.15081787]
[237.86988831 -218.48699951]
[248.75578308 -208.12768555]
[258.01727295 -196.29373169]
[265.45693970 -183.23735046]
[270.91622925 -169.23684692]
[274.27874756 -154.59063721]
[275.47283936 -139.61091614]
[274.47305298 -124.61698151]
[271.30068970 -109.92841339]
[266.02337646 -95.85830688]
[258.75360107 -82.70657349]
[249.64631653 -70.75353241]
[238.89564514 -60.25397110]
[226.73072815 -51.43168640]
[213.41087341 -44.47472382]
[199.22000122 -39.53137207]
[184.46057129 -36.70700073]
[169.44718933 -36.06181335]
[154.49986267 -37.60955811]
[139.93721008 -41.31724548]
[134.16093445 -27.47402573]
[128.38465881 -13.63080883]
[122.75270844 0.27174741]
[117.26567841 14.23213768]
[111.77864838 28.19252777]
[110.99880219 43.17224121]
[115.00653839 57.62693024]
[119.01428223 72.08161926]
[129.22776794 83.06728363]
[143.35256958 88.11604309]
[157.47737122 93.16479492]
[171.60217285 98.21355438]
[185.77784729 91.22602081]
[200.71542358 96.38784790]
[207.55268860 110.63661194]
[202.23323059 125.51877594]
[187.91296387 132.20501709]
[173.08787537 126.72850037]
[166.55342102 112.33835602]
[152.42860413 107.28959656]
[138.30380249 102.24084473]
[124.17900848 97.19208527]
[121.64195251 107.07061005]
[115.54821777 114.40254974]
[107.50000000 118.13000488]
[107.50000000 133.13000488]
[107.50000000 148.13000488]
[107.50000000 163.13000488]
[107.50000000 178.13000488]
[107.50000000 193.13000488]
[107.50000000 208.13000488]
[107.50000000 223.13000488]
[107.50000000 238.13000488]
[107.50000000 253.13000488]
[122.03988647 257.19131470]
[134.94427490 265.02581787]
[145.25555420 276.05215454]
[152.20857239 289.45208740]
[155.28736877 304.23123169]
[154.26348877 319.29293823]
[149.21287537 333.51943970]
[140.51036072 345.85510254]
[128.80169678 355.38452148]
[114.95575714 361.40057373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 114]
[25 113]
[26 112]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[58 111]
[59 110]
[60 109]
[62 108]
[63 107]
[64 106]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
