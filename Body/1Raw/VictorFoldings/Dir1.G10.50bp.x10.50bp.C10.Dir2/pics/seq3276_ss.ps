%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCCUAGGGGGGGGGGCUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAxxxxxxxxxxCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCCCCCCCCCCCAACCUUCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 403.35382080]
[71.19830322 397.33779907]
[59.48964310 387.80838013]
[50.78712082 375.47271729]
[45.73651886 361.24618530]
[44.71262741 346.18450928]
[47.79142761 331.40533447]
[54.74444962 318.00540161]
[65.05573273 306.97909546]
[77.96011353 299.14456177]
[92.50000000 295.08325195]
[92.50000000 280.08325195]
[92.50000000 265.08325195]
[92.50000000 250.08326721]
[92.50000000 235.08326721]
[92.50000000 220.08326721]
[92.50000000 205.08326721]
[92.50000000 190.08326721]
[92.50000000 175.08326721]
[92.50000000 160.08326721]
[92.50000000 145.08326721]
[92.50000000 130.08326721]
[78.87023926 125.57158661]
[67.93634033 114.85977936]
[62.49537659 99.53996277]
[64.42270660 82.43923187]
[49.42351913 82.28319550]
[34.42433167 82.12715912]
[19.42514229 81.97112274]
[4.42595339 81.81508636]
[-10.57323456 81.65904999]
[-16.87338448 95.52368164]
[-28.27241707 105.62229156]
[-42.79538345 110.20523834]
[-57.92608643 108.47849274]
[-71.04304504 100.74122620]
[-79.87366486 88.33396912]
[-82.88799286 73.40635681]
[-79.56377411 58.54467773]
[-70.47694397 46.32381821]
[-57.20185852 38.86110687]
[-42.03850555 37.44951248]
[-27.61402512 42.33359909]
[-16.42754745 52.66716385]
[-10.41719818 66.65985870]
[4.58199024 66.81590271]
[19.58117867 66.97193909]
[34.58036804 67.12797546]
[49.57955551 67.28401184]
[64.57874298 67.44004822]
[70.49870300 53.65766525]
[60.05889511 42.88685608]
[49.61908340 32.11604691]
[39.17926788 21.34523773]
[28.73945618 10.57442951]
[13.37402153 3.40925574]
[16.00560188 -13.33921051]
[32.82802582 -15.44690990]
[39.51026535 0.13461730]
[49.95007706 10.90542603]
[60.38988876 21.67623520]
[70.82970428 32.44704437]
[81.26951599 43.21784973]
[77.27151489 28.76046562]
[73.27352142 14.30307865]
[63.72886658 2.73158240]
[58.13108063 -11.18476772]
[57.00452042 -26.14240265]
[60.45471191 -40.74021530]
[68.15847015 -53.61080551]
[79.39418030 -63.54856110]
[93.10935211 -69.62259674]
[108.01928711 -71.26394653]
[122.72732544 -68.31885529]
[135.85574341 -61.06320572]
[146.17480469 -50.17664337]
[152.71786499 -36.67892838]
[154.87205505 -21.83441925]
[152.43556213 -7.03362370]
[145.63664246 6.33704185]
[135.11215210 17.02512360]
[121.84545135 24.03031158]
[112.58845520 35.83319473]
[103.33145905 47.63607407]
[117.11383820 41.71611023]
[130.89622498 35.79615021]
[140.52253723 23.24048615]
[155.27030945 25.32671547]
[169.05268860 19.40675354]
[182.83506775 13.48678970]
[196.61746216 7.56682682]
[210.39984131 1.64686382]
[224.18222046 -4.27309942]
[237.42480469 -11.31823444]
[250.03593445 -19.43977547]
[262.64706421 -27.56131935]
[275.25817871 -35.68286133]
[282.27368164 -50.50564957]
[298.63812256 -51.57159424]
[307.51724243 -37.78414536]
[299.77688599 -23.32664490]
[283.37973022 -23.07173347]
[270.76861572 -14.95019054]
[258.15747070 -6.82864809]
[245.54634094 1.29289389]
[260.29803467 4.01099777]
[270.75042725 14.76958179]
[273.04162598 29.59356499]
[266.32504272 43.00577927]
[253.08232117 50.05067825]
[238.20640564 48.12531281]
[227.19363403 37.94107056]
[224.11300659 23.26081848]
[230.10218811 9.50928211]
[216.31979370 15.42924500]
[202.53741455 21.34920883]
[188.75503540 27.26917076]
[174.97265625 33.18913269]
[161.19027710 39.10909653]
[152.54977417 51.24132538]
[136.81617737 49.57852936]
[123.03380585 55.49849319]
[109.25141907 61.41845703]
[124.00900269 70.24930573]
[133.15245056 84.06134796]
[135.33929443 99.84128571]
[130.67814636 114.41129303]
[120.60458374 125.06802368]
[107.50000000 130.08326721]
[107.50000000 145.08326721]
[107.50000000 160.08326721]
[107.50000000 175.08326721]
[107.50000000 190.08326721]
[107.50000000 205.08326721]
[107.50000000 220.08326721]
[107.50000000 235.08326721]
[107.50000000 250.08326721]
[107.50000000 265.08325195]
[107.50000000 280.08325195]
[107.50000000 295.08325195]
[122.03988647 299.14456177]
[134.94427490 306.97909546]
[145.25555420 318.00540161]
[152.20857239 331.40533447]
[155.28736877 346.18450928]
[154.26348877 361.24618530]
[149.21287537 375.47271729]
[140.51036072 387.80838013]
[128.80169678 397.33779907]
[114.95575714 403.35382080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[84 123]
[85 122]
[86 121]
[88 119]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
