%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCUAUAUAGGGGGGGGGGUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUxxxxxxxxxxAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCCCCCCCCCCCAAUCCUAUACA\
) } def
/len { sequence length } bind def

/coor [
[97.57827759 520.85894775]
[84.08940125 514.12738037]
[72.60389709 504.36282349]
[63.78952789 492.13293457]
[58.15874863 478.14874268]
[56.03891754 463.22326660]
[57.55328751 448.22424316]
[62.61381149 434.02374268]
[70.92627716 421.44732666]
[82.00740814 411.22616577]
[95.21295929 403.95452881]
[109.77518463 400.05517578]
[109.46720886 385.05831909]
[109.15923309 370.06149292]
[108.85125732 355.06463623]
[108.54327393 340.06781006]
[108.23529816 325.07098389]
[107.92732239 310.07412720]
[107.61934662 295.07730103]
[107.31136322 280.08044434]
[107.00338745 265.08361816]
[103.70130920 258.41964722]
[106.84622955 249.77642822]
[106.84622955 234.77642822]
[106.84622955 219.77642822]
[106.69223022 204.77722168]
[106.38425446 189.78038025]
[106.07627869 174.78355408]
[105.76830292 159.78671265]
[105.46031952 144.78987122]
[105.15234375 129.79302979]
[85.92860413 125.05977631]
[74.66100311 110.01138306]
[75.45098877 92.22792816]
[86.68137360 79.72907257]
[82.72476196 65.26030731]
[78.76815033 50.79154205]
[67.94315338 43.70471573]
[64.96891785 31.52582741]
[70.91609192 20.94786263]
[67.25738525 6.40090942]
[40.04313660 -5.41054535]
[36.74782944 -39.95136261]
[24.96569061 -49.23474884]
[13.18355370 -58.51813126]
[1.40141678 -67.80152130]
[-10.38072014 -77.08490753]
[-22.16285706 -86.36828613]
[-34.03968048 -95.53022766]
[-46.00994110 -104.56974792]
[-57.98019791 -113.60926056]
[-69.95045471 -122.64878082]
[-86.23409271 -127.36891174]
[-86.20618439 -144.32283020]
[-69.90710449 -148.98933411]
[-60.91093826 -134.61904907]
[-48.94067764 -125.57952118]
[-36.97042084 -116.54000092]
[-25.00016212 -107.50048065]
[-17.72214317 -105.96990967]
[-12.87947178 -98.15042877]
[-1.09733474 -88.86704254]
[10.68480206 -79.58365631]
[22.46693993 -70.30027008]
[34.24907684 -61.01688385]
[46.03121185 -51.73349762]
[53.35757446 -53.33799744]
[47.46847153 -67.13359070]
[41.57936478 -80.92918396]
[35.69025803 -94.72477722]
[25.06450272 -105.31219482]
[22.45173454 -120.08289337]
[28.80077171 -133.67294312]
[41.80598450 -141.14720154]
[56.74458694 -139.79139709]
[68.19168091 -130.09790039]
[71.99031067 -115.58684540]
[66.76241302 -101.52968597]
[67.17837524 -86.53545380]
[67.59433746 -71.54122162]
[68.01029968 -56.54699326]
[75.33666229 -58.15149307]
[82.16024017 -71.50959015]
[88.98381042 -84.86769104]
[95.80738831 -98.22579193]
[92.25331879 -113.87021637]
[102.38085938 -126.31258392]
[118.42102814 -126.00817108]
[128.06916809 -113.19049835]
[123.92407227 -97.69218445]
[109.16548920 -91.40221405]
[102.34191132 -78.04411316]
[95.51834106 -64.68601227]
[88.69476318 -51.32791519]
[96.42288971 -41.77687836]
[100.28504944 -30.71055794]
[100.18029022 -19.55467415]
[96.49502563 -9.62392426]
[90.01702118 -1.96729100]
[81.80433655 2.74220347]
[85.46304321 17.28915787]
[98.34102631 29.17201042]
[93.23691559 46.83493042]
[97.19352722 61.30369949]
[101.15013885 75.77246857]
[114.71661377 78.26535797]
[125.69611359 88.28215027]
[130.01815796 103.61685944]
[145.01104736 103.15493011]
[160.00393677 102.69300079]
[169.53913879 90.29890442]
[184.82136536 86.98410034]
[198.63478088 94.31372833]
[204.45712280 108.82697296]
[199.53927612 123.67111969]
[186.20326233 131.83721924]
[170.74597168 129.46948242]
[160.46585083 117.68589020]
[145.47297668 118.14781952]
[130.48008728 118.60974121]
[120.14918518 129.48506165]
[120.45716095 144.48188782]
[120.76513672 159.47872925]
[121.07311249 174.47557068]
[121.38109589 189.47241211]
[121.68907166 204.46923828]
[125.01078796 213.04606628]
[121.84622955 219.77642822]
[121.84622955 234.77642822]
[121.84622955 249.77642822]
[122.00022888 264.77563477]
[122.30820465 279.77249146]
[122.61618042 294.76931763]
[122.92415619 309.76614380]
[123.23213959 324.76300049]
[123.54011536 339.75982666]
[123.84809113 354.75668335]
[124.15606689 369.75350952]
[124.46405029 384.75033569]
[124.77202606 399.74719238]
[139.48205566 403.04541016]
[152.97502136 409.76876831]
[164.46643066 419.52636719]
[173.28822327 431.75091553]
[178.92747498 445.73168945]
[181.05635071 460.65588379]
[179.55108643 475.65579224]
[174.49916077 489.85937500]
[166.19432068 502.44082642]
[155.11940002 512.66870117]
[141.91825867 519.94836426]
[127.35839081 523.85656738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 130]
[24 129]
[25 128]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[31 121]
[35 105]
[36 104]
[37 103]
[40 101]
[41 100]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 59]
[50 58]
[51 57]
[52 56]
[82 94]
[83 93]
[84 92]
[85 91]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
