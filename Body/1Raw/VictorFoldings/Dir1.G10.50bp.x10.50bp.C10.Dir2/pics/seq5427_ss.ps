%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUACUAGGGGGGGGGGUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACxxxxxxxxxxCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCCCCCCCCCCCUAAUACUA\
) } def
/len { sequence length } bind def

/coor [
[147.50344849 531.23992920]
[141.29733276 517.52966309]
[137.88551331 502.87203979]
[137.39910889 487.83044434]
[139.85681152 472.98303223]
[145.16416931 458.90048218]
[153.11718750 446.12411499]
[163.41014099 435.14498901]
[175.64743042 426.38513184]
[189.35867310 420.18124390]
[185.95568848 405.57235718]
[182.55270386 390.96343994]
[179.14973450 376.35455322]
[175.74674988 361.74566650]
[172.34378052 347.13677979]
[168.94079590 332.52789307]
[164.63320923 318.15969849]
[159.43780518 304.08819580]
[154.24238586 290.01666260]
[149.04696655 275.94512939]
[138.16387939 270.57247925]
[133.74185181 258.83941650]
[138.67715454 246.87710571]
[133.77560425 232.70054626]
[128.87405396 218.52398682]
[116.79418182 216.73028564]
[106.57705688 209.90936279]
[100.21412659 199.31631470]
[98.97724915 186.94842529]
[103.16487885 175.16860962]
[112.03316498 166.25401306]
[107.72557831 151.88581848]
[103.41799927 137.51763916]
[99.11041260 123.14945221]
[80.08060455 115.91186523]
[72.64897919 94.89981842]
[84.80813599 73.95664978]
[77.62562561 60.78806305]
[70.44312286 47.61948013]
[63.26060867 34.45090103]
[56.07810211 21.28231621]
[48.89559174 8.11373425]
[34.81512070 13.35978985]
[20.13136101 16.54850578]
[5.14325047 17.61496353]
[-9.84406853 16.53745270]
[-24.52547455 13.33790684]
[-38.60207367 8.08146858]
[-51.78728104 0.87514907]
[-63.81266785 -8.13433838]
[-74.43341064 -18.76357269]
[-83.43328094 -30.79615784]
[-90.62905121 -43.98712158]
[-95.87423706 -58.06791687]
[-99.06204987 -72.75187683]
[-100.12757874 -87.74005127]
[-99.04914093 -102.72730255]
[-95.84868622 -117.40851593]
[-90.59137726 -131.48478699]
[-83.38423920 -144.66954041]
[-74.37400818 -156.69438171]
[-63.74411392 -167.31445312]
[-51.71097565 -176.31358337]
[-38.51956177 -183.50854492]
[-24.43844414 -188.75285339]
[-9.75428772 -191.93975830]
[5.23395395 -193.00436401]
[20.22113991 -191.92498779]
[34.90214920 -188.72363281]
[48.97809601 -183.46545410]
[62.16241455 -176.25749207]
[74.18668365 -167.24652100]
[84.80610657 -156.61596680]
[93.80448914 -144.58227539]
[100.99863434 -131.39042664]
[106.24207306 -117.30897522]
[109.42806244 -102.62461853]
[110.49173737 -87.63631439]
[109.41144562 -72.64919281]
[106.20917511 -57.96838379]
[100.95012665 -43.89276123]
[93.74135590 -30.70889091]
[84.72963715 -18.68517876]
[74.09842682 -8.06641197]
[62.06417465 0.93122524]
[69.24668121 14.09980774]
[76.42919159 27.26839066]
[83.61170197 40.43697357]
[90.79421234 53.60555649]
[97.97672272 66.77413940]
[112.76942444 69.25925446]
[123.86074066 59.16060638]
[134.95205688 49.06195831]
[139.41482544 33.28172684]
[155.37655640 29.51933479]
[166.41716003 41.64521027]
[161.17904663 57.18529129]
[145.05070496 60.15327454]
[133.95939636 70.25192261]
[122.86808014 80.35057068]
[127.48195648 95.66041565]
[123.51548767 109.84844208]
[113.47859955 118.84187317]
[117.78617859 133.21005249]
[122.09376526 147.57823181]
[126.40135193 161.94642639]
[143.64207458 167.38430786]
[154.11651611 181.92626953]
[153.81742859 199.68890381]
[143.05061340 213.62243652]
[147.95216370 227.79899597]
[152.85371399 241.97555542]
[167.03713989 253.67213440]
[163.11848450 270.74972534]
[168.31390381 284.82125854]
[173.50932312 298.89276123]
[178.70472717 312.96429443]
[186.32118225 300.04183960]
[200.79502869 296.10385132]
[213.90869141 303.38613892]
[218.21684265 317.75418091]
[211.27349854 331.05041504]
[197.02076721 335.72589111]
[183.54969788 329.12490845]
[186.95266724 343.73379517]
[190.35565186 358.34268188]
[193.75862122 372.95156860]
[197.16160583 387.56048584]
[200.56457520 402.16937256]
[203.96755981 416.77825928]
[219.00891113 416.28454590]
[233.85752869 418.73504639]
[247.94265747 424.03558350]
[260.72290039 431.98236084]
[271.70700073 442.27001953]
[280.47280884 454.50302124]
[286.68334961 468.21127319]
[290.09991455 482.86776733]
[290.59121704 497.90921021]
[288.13830566 512.75744629]
[282.83551025 526.84167480]
[274.88662720 539.62066650]
[264.59722900 550.60308838]
[252.36276245 559.36694336]
[238.65353394 565.57525635]
[223.99647522 568.98944092]
[208.95495605 569.47827148]
[194.10714722 567.02294922]
[180.02374268 561.71789551]
[167.24606323 553.76696777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[17 117]
[18 116]
[19 115]
[20 114]
[23 112]
[24 111]
[25 110]
[31 106]
[32 105]
[33 104]
[34 103]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
