%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCCAAAUAGGGGGGGGGGUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAAxxxxxxxxxxUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCCCCCCCCCCCAACUCCAAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 413.28585815]
[70.87159729 408.13085938]
[58.28185654 399.84863281]
[47.94191742 388.88586426]
[40.40940475 375.83374023]
[36.09054184 361.39614868]
[35.21823120 346.35168457]
[37.83952332 331.51168823]
[43.81304932 317.67645264]
[52.81666565 305.59210205]
[64.36482239 295.91030884]
[77.83473969 289.15325928]
[92.50000000 285.68527222]
[92.50000000 270.68527222]
[92.50000000 255.68527222]
[92.50000000 240.68527222]
[92.50000000 225.68527222]
[92.50000000 210.68527222]
[92.50000000 195.68527222]
[92.50000000 180.68527222]
[92.50000000 165.68527222]
[92.50000000 150.68527222]
[92.50000000 135.68527222]
[85.83127594 133.59963989]
[79.68277740 130.28034973]
[74.28026581 125.84925079]
[69.82209015 120.46906281]
[66.47194672 114.33731842]
[64.35285187 107.67915344]
[63.54259109 100.73902893]
[64.07093048 93.77178192]
[65.91846466 87.03320312]
[69.01735687 80.77072906]
[73.25383759 75.21428680]
[78.47234344 70.56790161]
[84.48126984 67.00215149]
[91.05999756 64.64798737]
[82.76979065 51.17270660]
[89.98495483 38.14233017]
[89.37706757 23.15465355]
[88.76918793 8.16697693]
[88.16130066 -6.82070112]
[80.57317352 6.11839628]
[68.88488770 15.51967716]
[54.61995316 20.15774155]
[39.63771439 19.42804909]
[25.89100838 13.42570782]
[15.17163754 2.93308806]
[8.87680340 -10.68216324]
[7.82700062 -25.64538193]
[12.15906334 -40.00620651]
[21.30833435 -51.89278793]
[34.08226395 -59.75578690]
[48.81584549 -62.57030869]
[63.58864975 -59.96950150]
[76.47513580 -52.29235840]
[85.79562378 -40.53955078]
[90.33535004 -26.24223137]
[94.24210358 -40.72454071]
[98.14885712 -55.20685196]
[102.05560303 -69.68916321]
[105.96235657 -84.17147064]
[109.86911011 -98.65377808]
[113.77586365 -113.13608551]
[102.99912262 -102.70239258]
[90.07218170 -95.09358215]
[75.71912384 -90.73584747]
[60.74394608 -89.87329865]
[45.98547363 -92.55425262]
[32.27040100 -98.62852478]
[20.36697578 -107.75587463]
[10.94196701 -119.42502594]
[4.52331448 -132.98234558]
[1.47055817 -147.66841125]
[1.95469701 -162.66059875]
[5.94861269 -177.11911011]
[13.22858620 -190.23406982]
[23.38683128 -201.27082825]
[35.85433578 -209.61117554]
[49.93273544 -214.78791809]
[64.83342743 -216.51109314]
[79.72175598 -214.68417358]
[93.76375580 -209.40948486]
[106.17285919 -200.98249817]
[116.25398254 -189.87524414]
[123.44242096 -176.70989990]
[127.33552551 -162.22392273]
[127.71522522 -147.22872925]
[124.56163788 -132.56832886]
[134.78543091 -143.54440308]
[145.00923157 -154.52046204]
[155.23303223 -165.49652100]
[165.45683289 -176.47257996]
[166.32716370 -192.49201965]
[179.47737122 -201.68177795]
[194.81973267 -196.99226379]
[200.58489990 -182.02088928]
[192.35034180 -168.25238037]
[176.43289185 -166.24879456]
[166.20909119 -155.27272034]
[155.98529053 -144.29666138]
[145.76150513 -133.32060242]
[135.53770447 -122.34453583]
[128.25817871 -109.22933960]
[124.35141754 -94.74702454]
[120.44466400 -80.26471710]
[116.53791809 -65.78240967]
[112.63116455 -51.30009842]
[108.72441101 -36.81778717]
[104.81765747 -22.33547974]
[103.14897919 -7.42858458]
[103.75686646 7.55909300]
[104.36474609 22.54677010]
[104.97263336 37.53444672]
[113.21936035 49.93770599]
[106.04767609 64.04010010]
[129.06027222 77.97298431]
[136.25633240 103.89443207]
[150.52218628 108.52968597]
[164.78804016 113.16493988]
[179.05387878 117.80019379]
[193.31973267 122.43545532]
[210.25205994 121.57960510]
[215.76179504 137.61329651]
[201.87995911 147.34626770]
[188.68447876 136.70129395]
[174.41862488 132.06604004]
[160.15278625 127.43078613]
[145.88693237 122.79553223]
[131.62107849 118.16027832]
[121.43353271 129.50071716]
[107.50000000 135.68527222]
[107.50000000 150.68527222]
[107.50000000 165.68527222]
[107.50000000 180.68527222]
[107.50000000 195.68527222]
[107.50000000 210.68527222]
[107.50000000 225.68527222]
[107.50000000 240.68527222]
[107.50000000 255.68527222]
[107.50000000 270.68527222]
[107.50000000 285.68527222]
[122.16526031 289.15325928]
[135.63517761 295.91030884]
[147.18333435 305.59210205]
[156.18695068 317.67645264]
[162.16047668 331.51168823]
[164.78176880 346.35168457]
[163.90945435 361.39614868]
[159.59059143 375.83374023]
[152.05809021 388.88586426]
[141.71813965 399.84863281]
[129.12840271 408.13085938]
[114.96779633 413.28585815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[37 116]
[39 114]
[40 113]
[41 112]
[42 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 106]
[63 105]
[64 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
