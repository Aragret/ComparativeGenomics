%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAACCAUGGGGGGGGGGCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUxxxxxxxxxxCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAACCCCCCCCCCACCUAGCCAU\
) } def
/len { sequence length } bind def

/coor [
[68.05364227 467.17584229]
[54.20770645 461.15982056]
[42.49904633 451.63040161]
[33.79652023 439.29473877]
[28.74591827 425.06820679]
[27.72202682 410.00653076]
[30.80082703 395.22735596]
[37.75384903 381.82742310]
[48.06513214 370.80111694]
[60.96951294 362.96658325]
[75.50939941 358.90527344]
[75.50939941 343.90527344]
[75.50939941 328.90527344]
[75.50939941 313.90527344]
[75.50939941 298.90527344]
[75.50939941 283.90527344]
[75.50939941 268.90527344]
[75.50939941 253.90528870]
[75.50939941 238.90528870]
[75.50939941 223.90528870]
[64.62654114 234.22824097]
[49.66599274 235.31541443]
[37.40502548 226.67431641]
[33.39797974 212.21942139]
[39.46008682 198.49897766]
[52.84514999 191.72843933]
[67.48960876 194.97496033]
[76.75950623 206.76818848]
[78.93634033 191.92698669]
[81.11318207 177.08578491]
[69.34673309 167.95252991]
[63.69409943 154.06355286]
[65.76612091 139.11119080]
[75.10552216 127.12484741]
[89.28308105 121.38514709]
[91.45991516 106.54394531]
[89.43758392 91.68090057]
[83.37457275 77.96084595]
[77.31156158 64.24079132]
[71.24854279 50.52073669]
[65.18553162 36.80068207]
[52.53041077 27.30550003]
[54.46311569 12.53681946]
[48.40010071 -1.18323421]
[42.33708954 -14.90328789]
[36.27407455 -28.62334061]
[27.13234138 -40.51572037]
[15.43271828 -49.90288162]
[3.73309469 -59.29004669]
[-7.96652889 -68.67720795]
[-19.66615295 -78.06436920]
[-31.36577606 -87.45153046]
[-47.50376511 -92.64783478]
[-46.97797394 -109.59362793]
[-30.54887581 -113.77944946]
[-21.97861481 -99.15115356]
[-10.27899075 -89.76399231]
[1.42063284 -80.37683105]
[13.12025642 -70.98966980]
[24.81987953 -61.60250473]
[36.51950455 -52.21534348]
[31.37934113 -66.30714417]
[29.83474159 -81.22740173]
[31.97916985 -96.07332611]
[37.68286896 -109.94660187]
[46.60071564 -122.00778198]
[58.19310379 -131.52705383]
[71.75859070 -137.92842102]
[86.47634888 -140.82455444]
[101.45582581 -140.04020691]
[115.79064178 -135.62283325]
[128.61340332 -127.83972168]
[139.14822388 -117.16182709]
[146.75767517 -104.23525238]
[150.98129272 -89.84216309]
[151.56352234 -74.85346985]
[148.46914673 -60.17610931]
[141.88539124 -46.69820023]
[132.21061707 -35.23526764]
[120.03025055 -26.48091507]
[106.08129883 -20.96485901]
[91.20780182 -19.02087021]
[76.30973053 -20.76657486]
[62.28855133 -26.09634399]
[49.99412918 -34.68635559]
[56.05714417 -20.96630096]
[62.12015533 -7.24624729]
[68.18316650 6.47380638]
[80.40462494 14.98763943]
[78.90558624 30.73767090]
[84.96859741 44.45772552]
[91.03160858 58.17777634]
[97.09462738 71.89783478]
[103.15763855 85.61788177]
[105.20175171 70.75782013]
[110.33486938 56.66345215]
[118.32592773 43.96924210]
[128.81521606 33.24660873]
[141.33055115 24.97822762]
[155.30859375 19.53629303]
[170.12008667 17.16577148]
[185.09832764 17.97337341]
[199.56907654 21.92274284]
[212.88093567 28.83610153]
[224.43467712 38.40224838]
[233.71020508 50.19056702]
[240.29000854 63.67041016]
[243.87788391 78.23499298]
[244.31233215 93.22870636]
[241.57379150 107.97660065]
[235.78553772 121.81481171]
[227.20812988 134.12042236]
[216.22767639 144.33950806]
[203.33845520 152.01205444]
[189.12066650 156.79267883]
[174.21430969 158.46618652]
[159.29040527 156.95726013]
[145.02072144 152.33381653]
[132.04762268 144.80397034]
[120.95507050 134.70668030]
[112.24240112 122.49645996]
[106.30112457 108.72077942]
[104.12429047 123.56198883]
[116.05638885 133.13131714]
[121.56025696 147.29479980]
[119.25109863 162.21238708]
[109.84803009 173.89306641]
[95.95438385 179.26261902]
[93.77754974 194.10382080]
[91.60070801 208.94503784]
[90.50939941 223.90528870]
[90.50939941 238.90528870]
[90.50939941 253.90528870]
[90.50939941 268.90527344]
[90.50939941 283.90527344]
[90.50939941 298.90527344]
[90.50939941 313.90527344]
[90.50939941 328.90527344]
[90.50939941 343.90527344]
[90.50939941 358.90527344]
[105.04928589 362.96658325]
[117.95366669 370.80111694]
[128.26495361 381.82742310]
[135.21797180 395.22735596]
[138.29676819 410.00653076]
[137.27288818 425.06820679]
[132.22227478 439.29473877]
[123.51975250 451.63040161]
[111.81109619 461.15982056]
[97.96515656 467.17584229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 130]
[29 129]
[30 128]
[35 123]
[36 122]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[43 88]
[44 87]
[45 86]
[46 85]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
