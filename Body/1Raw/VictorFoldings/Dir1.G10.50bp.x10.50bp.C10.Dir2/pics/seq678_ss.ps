%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCGCCCGGGGGGGGGGAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACxxxxxxxxxxACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCCCCCCCCCCCACCCCCUCCC\
) } def
/len { sequence length } bind def

/coor [
[79.84267426 423.41506958]
[66.62247467 416.14260864]
[55.73567200 405.69558716]
[47.92454147 392.78634644]
[43.72166061 378.29501343]
[43.41358948 363.20968628]
[47.02132797 348.55886841]
[54.29890442 335.34146118]
[64.75010681 324.45870972]
[77.66236877 316.65255737]
[92.15531158 312.45526123]
[91.84325409 297.45852661]
[91.53119659 282.46176147]
[91.21913910 267.46502686]
[90.90708160 252.46826172]
[90.59502411 237.47151184]
[90.28297424 222.47474670]
[89.97091675 207.47799683]
[89.65885925 192.48124695]
[89.34680176 177.48449707]
[89.03474426 162.48773193]
[88.72268677 147.49098206]
[88.41063690 132.49423218]
[75.71570587 124.50431824]
[62.05946350 130.70971680]
[52.96712875 144.35748291]
[36.62120819 143.03729248]
[29.83698273 128.10725403]
[39.59348297 114.92609406]
[55.85405731 117.05348206]
[69.51029968 110.84807587]
[74.73352051 85.98764801]
[94.54507446 75.17043304]
[95.79195404 60.22234726]
[97.03882599 45.27426147]
[98.28570557 30.32617378]
[91.72232056 15.93059826]
[100.49079132 3.89053679]
[101.27063751 -11.08917713]
[101.58269501 -26.08593178]
[94.13416290 -40.04408264]
[102.13456726 -52.60763550]
[102.44662476 -67.60438538]
[102.75868225 -82.60114288]
[102.91471863 -97.60032654]
[102.91471863 -112.60032654]
[95.17741394 -126.40050507]
[102.91471863 -139.12777710]
[102.91471863 -154.12777710]
[102.91471863 -169.12777710]
[88.00552368 -170.93699646]
[73.42311859 -174.53016663]
[59.38016129 -179.85488892]
[46.08143997 -186.83352661]
[33.72088623 -195.36430359]
[22.47875214 -205.32279968]
[12.51898670 -216.56381226]
[3.98682785 -228.92341614]
[-2.99329853 -242.22135925]
[-8.31960201 -256.26370239]
[-11.91440964 -270.84570312]
[-13.72529793 -285.75469971]
[-13.72585964 -300.77328491]
[-11.91608620 -315.68240356]
[-8.32236862 -330.26467896]
[-2.99711561 -344.30743408]
[3.98201632 -357.60589600]
[12.51325035 -369.96612549]
[22.47217560 -381.20788574]
[33.71356201 -391.16723633]
[46.07347870 -399.69891357]
[59.37168121 -406.67855835]
[73.41423798 -412.00433350]
[87.99636841 -415.59860229]
[102.90543365 -417.40893555]
[117.92399597 -417.40893555]
[132.83305359 -415.59860229]
[147.41519165 -412.00433350]
[161.45774841 -406.67855835]
[174.75595093 -399.69891357]
[187.11585999 -391.16723633]
[198.35725403 -381.20788574]
[208.31617737 -369.96612549]
[216.84741211 -357.60589600]
[223.82655334 -344.30743408]
[229.15179443 -330.26467896]
[232.74551392 -315.68240356]
[234.55529785 -300.77328491]
[234.55473328 -285.75469971]
[232.74383545 -270.84570312]
[229.14903259 -256.26370239]
[223.82272339 -242.22135925]
[216.84260559 -228.92341614]
[208.31044006 -216.56381226]
[198.35067749 -205.32279968]
[187.10855103 -195.36430359]
[174.74798584 -186.83352661]
[161.44926453 -179.85488892]
[147.40631104 -174.53016663]
[132.82391357 -170.93699646]
[117.91471863 -169.12777710]
[117.91471863 -154.12777710]
[117.91471863 -139.12777710]
[125.65201569 -126.40050507]
[117.91471863 -112.60032654]
[117.91471863 -97.60032654]
[121.08029175 -90.86796570]
[117.75543213 -82.28908539]
[117.44337463 -67.29233551]
[117.13131714 -52.29557800]
[124.60217285 -39.41009521]
[116.57945251 -25.77387428]
[116.26739502 -10.77712154]
[118.49100494 -7.96232986]
[119.42628479 -3.90931463]
[118.49674988 0.74776077]
[115.43888092 5.13741159]
[122.09145355 18.46379852]
[113.23378754 31.57304764]
[111.98691559 46.52113342]
[110.74003601 61.46922302]
[109.49316406 76.41730499]
[121.22195435 83.61729431]
[127.97171021 96.43596649]
[127.20472717 111.62880707]
[118.40214539 124.91483307]
[103.40738678 132.18217468]
[103.71944427 147.17892456]
[104.03150177 162.17568970]
[104.34355927 177.17243958]
[104.65560913 192.16918945]
[104.96766663 207.16593933]
[105.27972412 222.16270447]
[105.59178162 237.15945435]
[105.90383911 252.15620422]
[106.21589661 267.15295410]
[106.52794647 282.14971924]
[106.84000397 297.14645386]
[107.15206146 312.14321899]
[121.80705261 315.73397827]
[135.03286743 322.99624634]
[145.92773438 333.43484497]
[153.74882507 346.33804321]
[157.96290588 360.82611084]
[158.28262329 375.91122437]
[154.68618774 390.56481934]
[147.41882324 403.78781128]
[136.97602844 414.67864990]
[124.06980133 422.49478149]
[109.58010864 426.70324707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 31]
[25 30]
[33 122]
[34 121]
[35 120]
[36 119]
[38 117]
[39 113]
[40 112]
[42 110]
[43 109]
[44 108]
[45 106]
[46 105]
[48 103]
[49 102]
[50 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
