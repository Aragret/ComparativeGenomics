%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUCAUCAGGGGGGGGGGCCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGxxxxxxxxxxACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCCCCCCCCCCCUUGCUCAUCA\
) } def
/len { sequence length } bind def

/coor [
[60.51031876 346.91445923]
[47.95209885 338.56329346]
[37.86587524 327.35086060]
[30.88568115 313.98196411]
[27.45029640 299.29696655]
[27.77567482 284.21899414]
[31.84135818 269.69589233]
[39.39177704 256.64053345]
[49.95230865 245.87364197]
[62.85910034 238.07200623]
[77.30082703 233.72605896]
[76.67684937 218.73904419]
[76.05287170 203.75202942]
[75.42890167 188.76501465]
[74.80492401 173.77799988]
[74.18094635 158.79096985]
[73.55696869 143.80395508]
[72.93299103 128.81694031]
[72.30901337 113.82992554]
[69.05818176 99.18642426]
[63.28191376 85.34320831]
[57.50564194 71.49999237]
[51.72936630 57.65677261]
[37.49925613 62.42140579]
[22.96243668 66.14679718]
[8.19469070 68.81352997]
[-6.72698402 70.40769958]
[-21.72479248 70.92099762]
[-36.72054291 70.35073853]
[-51.63605499 68.69989777]
[-66.39356232 65.97708893]
[-80.91613007 62.19650269]
[-95.12803650 57.37785339]
[-108.95520020 51.54625702]
[-122.32550812 44.73212433]
[-135.16928101 36.97097397]
[-147.41954041 28.30327606]
[-159.01240540 18.77421570]
[-169.88746643 8.43347740]
[-179.98800659 -2.66502929]
[-189.26136780 -14.46343994]
[-197.65921021 -26.90024376]
[-205.13774109 -39.91059875]
[-211.65797424 -53.42667770]
[-217.18591309 -67.37800598]
[-221.69273376 -81.69185638]
[-225.15495300 -96.29359436]
[-227.55451965 -111.10709381]
[-228.87890625 -126.05513000]
[-229.12123108 -141.05976868]
[-228.28019714 -156.04277039]
[-226.36022949 -170.92602539]
[-223.37130737 -185.63195801]
[-219.32902527 -200.08386230]
[-214.25447083 -214.20642090]
[-208.17407227 -227.92599487]
[-201.11955261 -241.17105103]
[-193.12768555 -253.87252808]
[-184.24014282 -265.96423340]
[-174.50323486 -277.38308716]
[-163.96775818 -288.06961060]
[-152.68862915 -297.96804810]
[-140.72463989 -307.02679443]
[-128.13818359 -315.19860840]
[-114.99487305 -322.44091797]
[-101.36323547 -328.71597290]
[-87.31433105 -333.99102783]
[-72.92141724 -338.23855591]
[-58.25952530 -341.43649292]
[-43.40509415 -343.56808472]
[-28.43557739 -344.62228394]
[-13.42901516 -344.59353638]
[1.53635466 -343.48202515]
[16.38250923 -341.29354858]
[31.03204536 -338.03948975]
[45.40858459 -333.73684692]
[59.43717957 -328.40802002]
[73.04468536 -322.08081055]
[86.16016388 -314.78820801]
[98.71522522 -306.56823730]
[110.64442444 -297.46371460]
[121.88555908 -287.52215576]
[132.38003540 -276.79537964]
[142.07312012 -265.33929443]
[150.91429138 -253.21363831]
[158.85745239 -240.48164368]
[165.86119080 -227.20965576]
[171.88899231 -213.46690369]
[176.90942383 -199.32501221]
[180.89631653 -184.85772705]
[183.82888794 -170.14045715]
[185.69183350 -155.24995422]
[186.47546387 -140.26383972]
[186.17567444 -125.26024628]
[184.79403687 -110.31739044]
[182.33775330 -95.51319122]
[178.81964111 -80.92481995]
[174.25801086 -66.62834167]
[168.67668152 -52.69828415]
[162.10472107 -39.20727921]
[154.57641602 -26.22566605]
[146.13099670 -13.82111835]
[136.81251526 -2.05831361]
[126.66954041 9.00142384]
[115.75495911 19.30043221]
[104.12566376 28.78501892]
[91.84230042 37.40573120]
[78.96890259 45.11763000]
[65.57258606 51.88050079]
[71.34886169 65.72371674]
[77.12512970 79.56694031]
[82.90140533 93.41015625]
[94.30851746 83.65839386]
[108.26941681 85.97173309]
[115.04311371 97.41228485]
[129.16790771 102.46103668]
[143.29272461 107.50979614]
[157.41752625 112.55855560]
[171.59320068 105.57102203]
[186.53077698 110.73284912]
[193.36804199 124.98161316]
[188.04858398 139.86376953]
[173.72831726 146.55001831]
[158.90322876 141.07350159]
[152.36875916 126.68335724]
[138.24395752 121.63459778]
[124.11915588 116.58584595]
[109.99435425 111.53708649]
[99.56208801 116.78858185]
[87.29602814 113.20594788]
[87.92000580 128.19296265]
[88.54398346 143.17997742]
[89.16796112 158.16699219]
[89.79193878 173.15402222]
[90.41591644 188.14103699]
[91.03989410 203.12805176]
[91.66387177 218.11506653]
[92.28784943 233.10208130]
[107.04084778 236.23252869]
[120.55149078 242.93428040]
[131.97045898 252.78607178]
[140.57998657 265.16860962]
[145.83882141 279.30349731]
[147.41642761 294.30221558]
[145.21362305 309.22195435]
[139.36888123 323.12484741]
[130.24960327 335.13690186]
[118.42903137 344.50305176]
[104.65022278 350.63455200]
[89.77931976 353.14593506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 112]
[21 111]
[22 110]
[23 109]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
