%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGAGGUGGGGGGGGGGGGCAAGAAAUGGGCUACAUUUUCUACCCCAGAAAACUACGAUAGCCCUUAUGxxxxxxxxxxAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCCCCCCCCCCCAUGAGCUGG\
) } def
/len { sequence length } bind def

/coor [
[83.74896240 396.35467529]
[72.25279999 386.53988647]
[64.16174316 373.77172852]
[60.19523621 359.18548584]
[60.70598221 344.07818604]
[65.64856720 329.79315186]
[74.58349609 317.60058594]
[86.71628571 308.58468628]
[100.96808624 303.54708862]
[100.34410858 288.56005859]
[99.72013855 273.57305908]
[99.09616089 258.58602905]
[98.47218323 243.59901428]
[97.84820557 228.61199951]
[97.22422791 213.62498474]
[96.60025024 198.63796997]
[95.97627258 183.65095520]
[95.35229492 168.66394043]
[87.09225464 156.26953125]
[94.24879456 142.15945435]
[93.62481689 127.17243195]
[75.09233093 112.59333801]
[74.33779144 89.02568817]
[62.63817215 79.63852692]
[50.93854904 70.25136566]
[39.23892212 60.86420822]
[26.30086708 53.27429962]
[10.60527992 55.26404953]
[1.71424890 43.31420517]
[-12.18830681 37.68224716]
[-26.09086227 32.05028915]
[-39.99341965 26.41833305]
[-53.89597702 20.78637695]
[-67.79853058 15.15441990]
[-86.48768616 24.65454292]
[-105.88793945 17.50732040]
[-113.72362518 -1.31124890]
[-128.04621887 -5.76806450]
[-142.36882019 -10.22488022]
[-156.69142151 -14.68169594]
[-171.01400757 -19.13851166]
[-185.33660889 -23.59532738]
[-200.15060425 -17.43699646]
[-214.13165283 -25.30527687]
[-216.55470276 -41.16429520]
[-205.56097412 -52.84836960]
[-189.58393860 -51.39448166]
[-180.87979126 -37.91792297]
[-166.55720520 -33.46110916]
[-152.23460388 -29.00429344]
[-137.91200256 -24.54747772]
[-123.58940887 -20.09066200]
[-109.26680756 -15.63384628]
[-102.62160492 -22.42053413]
[-93.89304352 -26.31139755]
[-84.28713226 -26.72199821]
[-75.14842224 -23.55203056]
[-67.77185822 -17.20537949]
[-63.21924973 -8.53915977]
[-62.16657257 1.25186408]
[-48.26401901 6.88382101]
[-34.36146164 12.51577759]
[-20.45890617 18.14773369]
[-6.55635023 23.77969170]
[7.34620571 29.41164780]
[22.04738998 27.01906013]
[31.93282509 39.37174225]
[23.49191856 26.97210121]
[20.33411980 12.30825710]
[22.92310143 -2.46662617]
[30.87871170 -15.18308258]
[43.03279114 -23.97389412]
[57.60069656 -27.54826546]
[72.44335175 -25.38135147]
[85.38134766 -17.79133415]
[94.51492310 -5.89268923]
[98.50296021 8.56744766]
[96.75988007 23.46582413]
[89.54161835 36.61484528]
[77.90806580 46.08377075]
[63.56744385 50.48223877]
[48.62608719 49.16458130]
[60.32571030 58.55174637]
[72.02532959 67.93890381]
[83.72495270 77.32606506]
[91.14854431 71.63222504]
[100.55664825 68.48192596]
[111.04484558 68.55390930]
[121.48347473 72.19752502]
[133.37585449 63.05578995]
[145.26823425 53.91405869]
[142.08735657 38.98607254]
[145.70683289 24.15832329]
[155.40802002 12.37487221]
[169.26473999 5.97533178]
[184.52572632 6.23033524]
[198.16090393 13.08925152]
[207.46299744 25.19023705]
[210.58506775 40.13063431]
[206.90721130 54.94401550]
[197.15969849 66.68917084]
[183.27789307 73.03409576]
[168.01802063 72.71899414]
[154.40997314 65.80643463]
[142.51759338 74.94817352]
[130.62521362 84.08990479]
[134.48236084 98.58550262]
[149.34541321 100.60783386]
[164.20846558 102.63017273]
[171.83566284 89.48124695]
[183.91719055 80.25600433]
[198.61070251 76.36122894]
[213.67553711 78.39083862]
[226.81440735 86.03533936]
[236.02375793 98.12899017]
[239.89920044 112.82760620]
[237.84977722 127.88975525]
[230.18800354 141.01856995]
[218.08224487 150.21199036]
[203.37854004 154.06809998]
[188.31910706 151.99885559]
[175.20037842 144.31982422]
[166.02288818 132.20198059]
[162.18612671 117.49321747]
[147.32307434 115.47088623]
[132.46003723 113.44854736]
[121.39123535 123.15414429]
[108.61183167 126.54845428]
[109.23580933 141.53547668]
[117.54047394 155.00184631]
[110.33930969 168.03996277]
[110.96328735 183.02697754]
[111.58726501 198.01399231]
[112.21124268 213.00100708]
[112.83522034 227.98802185]
[113.45919800 242.97503662]
[114.08317566 257.96206665]
[114.70715332 272.94906616]
[115.33113098 287.93609619]
[115.95510864 302.92309570]
[130.57633972 306.75857544]
[143.41658020 314.73477173]
[153.33409119 326.14242554]
[159.44702148 339.96716309]
[161.21179199 354.97970581]
[158.47149658 369.84518433]
[151.46978760 383.24172974]
[140.82926941 393.97814941]
[127.49607086 401.09976196]
[112.65578461 403.97332764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[20 129]
[21 128]
[23 85]
[24 84]
[25 83]
[26 82]
[27 67]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[89 106]
[90 105]
[91 104]
[107 126]
[108 125]
[109 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
