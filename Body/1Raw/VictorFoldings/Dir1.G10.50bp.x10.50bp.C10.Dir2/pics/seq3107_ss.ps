%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGUAAAUGGGGGGGGGGGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUxxxxxxxxxxUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCCCCCCCCCCCGAAAAUG\
) } def
/len { sequence length } bind def

/coor [
[104.30266571 408.13439941]
[91.08444977 400.85833740]
[80.20048523 390.40838623]
[72.39286804 377.49700928]
[68.19393158 363.00454712]
[67.88996124 347.91912842]
[71.50168610 333.26928711]
[78.78285217 320.05386353]
[89.23701477 309.17395020]
[102.15140533 301.37130737]
[116.64547729 297.17797852]
[116.33750153 282.18112183]
[116.02952576 267.18429565]
[115.72154999 252.18745422]
[115.41356659 237.19062805]
[115.10559082 222.19378662]
[114.79761505 207.19694519]
[114.48963928 192.20010376]
[114.18165588 177.20326233]
[113.87368011 162.20643616]
[105.87670135 149.64070129]
[113.32902527 135.68458557]
[113.02104950 120.68774414]
[103.66360474 123.30886078]
[94.37349701 122.03871918]
[86.64743042 117.35373688]
[81.62239838 110.25820923]
[79.91018677 102.08162689]
[65.48280334 97.97668457]
[51.05541611 93.87173462]
[44.11039352 107.22657013]
[34.61895752 118.90978241]
[22.96977997 128.44296265]
[9.63988495 135.43572998]
[-4.82487535 139.60173035]
[-19.83217812 140.77038574]
[-34.76748657 138.89381409]
[-49.01920319 134.04887390]
[-62.00373459 126.43396759]
[-73.18936920 116.36091614]
[-82.11806488 104.24219513]
[-88.42419434 90.57407379]
[-91.84952545 75.91624451]
[-92.25379944 60.86893463]
[-89.62045288 46.04832840]
[-84.05732727 32.06131744]
[-75.79222107 19.48066139]
[-65.16358948 8.82152843]
[-52.60667038 0.52040505]
[-38.63565826 -5.08278322]
[-23.82266045 -7.75858927]
[-8.77425575 -7.39744043]
[5.89332962 -4.01412630]
[19.57946968 2.25280952]
[31.72372246 11.14673901]
[41.82879257 22.30346298]
[49.48087692 35.26611710]
[54.36663818 49.50389481]
[56.28599548 64.43376160]
[55.16036224 79.44435120]
[69.58774567 83.54929352]
[84.01512909 87.65424347]
[92.92861938 79.95140076]
[105.19666290 78.29245758]
[116.92017365 83.86132812]
[124.01508331 95.43863678]
[135.20338440 85.44754028]
[146.39167786 75.45644379]
[131.64088440 78.17929840]
[116.73348236 76.51511383]
[102.94625854 70.60643768]
[91.46004486 60.95932007]
[83.25859833 48.40000916]
[79.04434967 34.00416946]
[79.17823792 19.00476837]
[83.64879608 4.68645334]
[92.07312775 -7.72445297]
[103.72972107 -17.16499519]
[117.62022400 -22.82661819]
[132.55494690 -24.22442055]
[147.25479126 -21.23868752]
[160.46075439 -14.12513447]
[171.04177856 -3.49301887]
[178.09164429 9.74705219]
[181.00653076 24.46110725]
[179.53680420 39.38893127]
[173.80834961 53.25199890]
[164.31015015 64.86445618]
[178.45747375 59.87913132]
[192.60478210 54.89381027]
[206.70018005 49.76350784]
[220.74214172 44.48876572]
[233.80883789 37.12252808]
[245.59098816 27.83914185]
[257.37310791 18.55575562]
[258.98562622 2.83394361]
[271.29541016 -7.07791042]
[286.99929810 -5.29927921]
[296.78042603 7.11460733]
[294.83587646 22.79881096]
[282.31927490 32.44816971]
[266.65649414 30.33789253]
[254.87435913 39.62127686]
[243.09222412 48.90466309]
[245.80154419 55.89820480]
[251.22016907 69.88529205]
[253.92947388 76.87882996]
[268.89074707 75.80175781]
[283.85205078 74.72469330]
[298.81332397 73.64762115]
[310.35848999 62.50810242]
[326.24667358 64.73188019]
[334.28982544 78.61306000]
[328.31793213 93.50319672]
[312.91210938 97.97984314]
[299.89038086 88.60890198]
[284.92910767 89.68597412]
[269.96783447 90.76303864]
[255.00654602 91.84011078]
[226.01689148 58.53074265]
[211.97491455 63.80548477]
[206.78723145 69.13465881]
[197.59010315 69.04113007]
[183.44279480 74.02645111]
[169.29547119 79.01177216]
[156.38276672 86.64473724]
[145.19447327 96.63584137]
[134.00617981 106.62693787]
[128.01788330 120.37976074]
[128.32586670 135.37660217]
[136.34487915 149.01499939]
[128.87051392 161.89845276]
[129.17849731 176.89529419]
[129.48648071 191.89213562]
[129.79444885 206.88896179]
[130.10243225 221.88580322]
[130.41040039 236.88264465]
[130.71838379 251.87948608]
[131.02636719 266.87631226]
[131.33433533 281.87316895]
[131.64231873 296.86999512]
[146.29632568 300.46475220]
[159.52017212 307.73059082]
[170.41220093 318.17214966]
[178.22978210 331.07748413]
[182.43991089 345.56671143]
[182.75553894 360.65188599]
[179.15512085 375.30453491]
[171.88415527 388.52554321]
[161.43840027 399.41354370]
[148.53004456 407.22613525]
[134.03921509 411.43069458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 130]
[23 129]
[28 62]
[29 61]
[30 60]
[66 128]
[67 127]
[68 126]
[88 125]
[89 124]
[90 123]
[91 121]
[92 120]
[93 104]
[94 103]
[95 102]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
