%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAAAGCAGGGGGGGGGGAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGxxxxxxxxxxCUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCCCCCCCCCCCUAAAAGCA\
) } def
/len { sequence length } bind def

/coor [
[108.15391541 475.82452393]
[94.30798340 469.80850220]
[82.59931946 460.27908325]
[73.89679718 447.94342041]
[68.84619141 433.71688843]
[67.82230377 418.65521240]
[70.90110016 403.87603760]
[77.85411835 390.47610474]
[88.16540527 379.44979858]
[101.06978607 371.61526489]
[115.60967255 367.55395508]
[115.60967255 352.55395508]
[115.60967255 337.55395508]
[115.60967255 322.55395508]
[115.60967255 307.55395508]
[115.60967255 292.55395508]
[115.60967255 277.55395508]
[115.60967255 262.55395508]
[115.60967255 247.55397034]
[115.60967255 232.55397034]
[106.01856232 217.89071655]
[115.27281952 202.00555420]
[114.96076965 187.00880432]
[114.64871216 172.01203918]
[103.75550079 161.91879272]
[103.22539520 146.71440125]
[113.88598633 135.35704041]
[113.57392883 120.36029053]
[103.35195923 123.41095734]
[93.17524719 121.78517151]
[85.00781250 116.11254883]
[80.28896332 107.77240753]
[79.68261719 98.57125854]
[66.15842438 92.08309174]
[52.63423538 85.59493256]
[39.11004257 79.10676575]
[25.58585358 72.61859894]
[12.06166363 66.13043213]
[-0.08420432 72.04106140]
[-13.22161484 69.88784027]
[-22.56724358 60.68275452]
[-24.85024834 47.96329498]
[-38.23653412 41.19517899]
[-51.62281799 34.42706299]
[-64.86968994 42.33426666]
[-80.28785706 41.80158997]
[-92.95742798 32.99900818]
[-98.83560181 18.73539352]
[-96.04666138 3.56221485]
[-85.48055267 -7.67882299]
[-70.50888824 -11.40074539]
[-55.90906143 -6.41590071]
[-46.33983231 5.68506575]
[-44.85470200 21.04077911]
[-31.46841812 27.80889320]
[-18.08213425 34.57700729]
[-2.37663174 28.64445877]
[13.07770157 36.02332687]
[18.54982948 52.60624313]
[32.07402039 59.09440994]
[45.59820938 65.58257294]
[59.12239838 72.07073975]
[72.64659119 78.55890656]
[86.17077637 85.04707336]
[93.30722809 79.89671326]
[102.27646637 78.10942078]
[111.51369476 80.28691101]
[119.28667450 86.31304169]
[124.01974487 95.32618713]
[134.89857483 84.99898529]
[120.23917389 88.17734528]
[105.24335480 87.82329559]
[90.75028229 83.95664978]
[77.57101440 76.79377747]
[66.44304657 66.73551941]
[57.98912811 54.34474945]
[52.68233490 40.31485748]
[50.81963730 25.43095970]
[52.50527954 10.52597332]
[57.64492416 -3.56601191]
[65.95095825 -16.05640030]
[76.95856476 -26.24622345]
[90.05176544 -33.56525040]
[104.49784851 -37.60390854]
[119.48839569 -38.13618851]
[134.18453979 -35.13230896]
[147.76387024 -28.76036072]
[159.46649170 -19.37692642]
[168.63749695 -7.50710773]
[174.76368713 6.18485355]
[177.50224304 20.93274689]
[176.69989014 35.91127396]
[172.40153503 50.28222275]
[164.84774780 63.24139404]
[154.46177673 74.06311035]
[168.95736694 70.20594788]
[183.45297241 66.34878540]
[170.24839783 59.23265457]
[163.60415649 45.78445816]
[165.97515869 30.97303009]
[176.48536682 20.27090645]
[191.25148010 17.63230324]
[204.81768799 24.03213501]
[212.17156982 37.10578918]
[210.59599304 52.02281189]
[200.67387390 63.27121353]
[215.60818481 61.86890793]
[230.54249573 60.46660614]
[245.47680664 59.06430054]
[260.68130493 51.56369019]
[272.09783936 64.09762573]
[263.21411133 78.53771973]
[246.87910461 73.99861145]
[231.94479370 75.40090942]
[217.01048279 76.80321503]
[202.07618713 78.20552063]
[187.31011963 80.84438324]
[172.81452942 84.70154572]
[158.31893921 88.55870056]
[145.22578430 95.87780762]
[134.34695435 106.20501709]
[128.57067871 120.04823303]
[128.88273621 135.04498291]
[140.00654602 145.94905090]
[140.10937500 161.16233826]
[129.64546204 171.69999695]
[129.95751953 186.69674683]
[130.26957703 201.69349670]
[139.04266357 211.20596313]
[138.95823669 223.74436951]
[130.60968018 232.55397034]
[130.60968018 247.55397034]
[130.60968018 262.55395508]
[130.60968018 277.55395508]
[130.60968018 292.55395508]
[130.60968018 307.55395508]
[130.60968018 322.55395508]
[130.60968018 337.55395508]
[130.60968018 352.55395508]
[130.60968018 367.55395508]
[145.14956665 371.61526489]
[158.05393982 379.44979858]
[168.36521912 390.47610474]
[175.31825256 403.87603760]
[178.39704895 418.65521240]
[177.37315369 433.71688843]
[172.32255554 447.94342041]
[163.62002563 460.27908325]
[151.91136169 469.80850220]
[138.06542969 475.82452393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[24 126]
[27 123]
[28 122]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[42 56]
[43 55]
[44 54]
[69 121]
[70 120]
[95 119]
[96 118]
[97 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
