%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUUCUUCAGGGGGGGGGGUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCxxxxxxxxxxAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCCCCCCCCCCCUAUUCUACA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 410.57186890]
[71.01555634 405.01885986]
[58.81560135 396.15252686]
[49.20452881 384.53021240]
[42.78650284 370.88250732]
[39.96496582 356.06732178]
[40.91728210 341.01593018]
[45.58358765 326.67453003]
[53.67055511 313.94454956]
[64.66983032 303.62628174]
[77.88998413 296.36831665]
[92.50000000 292.62689209]
[92.50000000 277.62689209]
[92.50000000 262.62689209]
[92.50000000 247.62687683]
[92.50000000 232.62687683]
[92.50000000 217.62687683]
[92.50000000 202.62687683]
[92.50000000 187.62687683]
[92.50000000 172.62687683]
[92.50000000 157.62687683]
[84.76270294 144.89961243]
[92.50000000 131.09944153]
[92.50000000 116.09943390]
[79.49596405 99.98396301]
[90.21604156 78.91171265]
[79.66402435 68.25080109]
[67.98054504 77.67881012]
[55.40318298 85.87643433]
[42.06100464 92.75954437]
[28.09091568 98.25751495]
[13.63627911 102.31392670]
[-1.15458000 104.88715363]
[-16.12988281 105.95079041]
[-31.13595772 105.49392700]
[-46.01881790 103.52124023]
[-60.62574005 100.05298615]
[-74.80683899 95.12474060]
[-88.41658020 88.78708649]
[-101.31531525 81.10505676]
[-113.37068939 72.15748596]
[-124.45897675 62.03617859]
[-134.46640015 50.84500122]
[-143.29028320 38.69879913]
[-150.84004211 25.72220612]
[-157.03823853 12.04838467]
[-161.82125854 -2.18234777]
[-165.14001465 -16.82396126]
[-166.96046448 -31.72620964]
[-167.26390076 -46.73617172]
[-166.04724121 -61.69981766]
[-163.32295227 -76.46360016]
[-159.11898804 -90.87601471]
[-153.47850037 -104.78916931]
[-146.45935059 -118.06028748]
[-138.13359070 -130.55319214]
[-128.58663940 -142.13967896]
[-117.91647339 -152.70086670]
[-106.23257446 -162.12835693]
[-93.65485382 -170.32542419]
[-80.31237030 -177.20794678]
[-66.34204102 -182.70530701]
[-51.88722610 -186.76107788]
[-37.09625626 -189.33366394]
[-22.12090492 -190.39663696]
[-7.11485100 -189.93911743]
[7.76792240 -187.96577454]
[22.37469292 -184.49687195]
[36.55557251 -179.56800842]
[50.16503906 -173.22975159]
[63.06343842 -165.54716492]
[75.11840820 -156.59904480]
[86.20625305 -146.47724915]
[96.21318817 -135.28564453]
[105.03652954 -123.13904572]
[112.58573151 -110.16212463]
[118.78332520 -96.48802948]
[123.56571960 -82.25708771]
[126.88382721 -67.61532593]
[128.70361328 -52.71299744]
[129.00639343 -37.70302582]
[127.78907776 -22.73943138]
[125.06413269 -7.97576904]
[120.85953522 6.43646145]
[115.21842957 20.34936714]
[108.19870758 33.62017822]
[99.87239075 46.11271667]
[90.32493591 57.69878769]
[100.87694550 68.35969543]
[115.34571838 72.31630707]
[129.85433960 68.50844574]
[144.36296082 64.70059204]
[148.70680237 45.27280807]
[172.07102966 34.60854721]
[184.04129028 25.56902695]
[196.01155090 16.52950859]
[199.64315796 0.90289736]
[214.18623352 -5.87048388]
[228.48455811 1.40532255]
[231.56968689 17.14894104]
[221.07498169 29.28321266]
[205.05107117 28.49976540]
[193.08081055 37.53928375]
[181.11054993 46.57880402]
[183.23696899 53.77104568]
[195.60324097 45.28131866]
[207.49882507 54.41888809]
[202.48439026 68.55591583]
[187.48982239 68.15552521]
[189.61624146 75.34777069]
[204.57752991 76.42483521]
[219.53880310 77.50190735]
[234.50009155 78.57897949]
[249.46136475 79.65604401]
[263.97131348 72.01450348]
[277.69790649 80.98742676]
[276.52035522 97.34423828]
[261.65005493 104.25846100]
[248.38429260 94.61732483]
[233.42301941 93.54026031]
[218.46173096 92.46318817]
[203.50045776 91.38611603]
[188.53916931 90.30905151]
[162.31335449 94.04463196]
[148.17082214 79.20921326]
[133.66220093 83.01707458]
[119.15357208 86.82493591]
[119.78210449 105.39295959]
[107.50000000 116.09943390]
[107.50000000 131.09944153]
[115.23729706 144.89961243]
[107.50000000 157.62687683]
[107.50000000 172.62687683]
[107.50000000 187.62687683]
[107.50000000 202.62687683]
[107.50000000 217.62687683]
[107.50000000 232.62687683]
[107.50000000 247.62687683]
[107.50000000 262.62689209]
[107.50000000 277.62689209]
[107.50000000 292.62689209]
[122.11001587 296.36831665]
[135.33016968 303.62628174]
[146.32945251 313.94454956]
[154.41641235 326.67453003]
[159.08271790 341.01593018]
[160.03503418 356.06732178]
[157.21350098 370.88250732]
[150.79547119 384.53021240]
[141.18440247 396.15252686]
[128.98443604 405.01885986]
[114.96250153 410.57186890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[26 89]
[27 88]
[90 127]
[91 126]
[92 125]
[94 104]
[95 103]
[96 102]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
