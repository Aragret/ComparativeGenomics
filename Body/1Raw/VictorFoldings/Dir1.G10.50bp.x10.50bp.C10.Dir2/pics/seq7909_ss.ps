%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCCUCUGGGGGGGGGGACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUxxxxxxxxxxGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCCCCCCCCCCCACUCCCUCU\
) } def
/len { sequence length } bind def

/coor [
[12.49656200 279.26513672]
[2.46951532 274.01333618]
[-7.24350739 268.20126343]
[-16.61123276 261.84765625]
[-25.60350037 254.97290039]
[-34.19135666 247.59918213]
[-42.34714890 239.75024414]
[-53.43846512 249.84889221]
[-64.52977753 259.94754028]
[-75.62109375 270.04617310]
[-86.71240997 280.14483643]
[-97.80372620 290.24349976]
[-108.89504242 300.34213257]
[-119.98635864 310.44079590]
[-131.07766724 320.53942871]
[-142.16899109 330.63809204]
[-153.26029968 340.73672485]
[-164.35162354 350.83538818]
[-171.99275208 365.96975708]
[-188.65093994 362.81686401]
[-190.23271179 345.93685913]
[-174.45027161 339.74407959]
[-163.35894775 329.64541626]
[-152.26763916 319.54678345]
[-141.17631531 309.44812012]
[-130.08500671 299.34945679]
[-118.99369049 289.25082397]
[-107.90237427 279.15216064]
[-96.81105804 269.05352783]
[-85.71974182 258.95486450]
[-74.62842560 248.85621643]
[-63.53711319 238.75756836]
[-52.44579697 228.65892029]
[-69.60845947 205.00386047]
[-83.13062286 179.09498596]
[-92.72203827 151.48838806]
[-98.17684937 122.77664948]
[-99.37796021 93.57603455]
[-96.29959869 64.51329803]
[-89.00783539 36.21224976]
[-77.65917969 9.28035450]
[-90.75233459 1.96124899]
[-103.84548950 -5.35785675]
[-119.66668701 -5.33780670]
[-127.00068665 -18.30166817]
[-140.09384155 -25.62077332]
[-153.18699646 -32.93988037]
[-166.28015137 -40.25898361]
[-183.05601501 -42.70982742]
[-185.34497070 -59.50854492]
[-169.83641052 -66.35839844]
[-158.96104431 -53.35213852]
[-145.86788940 -46.03303146]
[-132.77473450 -38.71392822]
[-119.68157959 -31.39482117]
[-104.79689789 -31.93838310]
[-96.52639008 -18.45101166]
[-83.43323517 -11.13190556]
[-70.34008026 -3.81279969]
[-63.98097610 -13.59172058]
[-57.06116486 -22.98223305]
[-49.60430908 -31.95222664]
[-41.63590622 -40.47102737]
[-33.18319702 -48.50951385]
[-24.27509117 -56.04019165]
[-14.94204521 -63.03731537]
[-5.21597290 -69.47695923]
[4.86986971 -75.33709717]
[15.28099442 -80.59770203]
[25.98180389 -85.24077606]
[36.93570709 -89.25045776]
[48.10524750 -92.61301422]
[59.45223618 -95.31697083]
[70.93786621 -97.35306549]
[82.52287292 -98.71434021]
[94.16764832 -99.39614868]
[105.83235168 -99.39614868]
[117.47712708 -98.71434021]
[129.06213379 -97.35306549]
[140.54776001 -95.31697083]
[151.89476013 -92.61301422]
[163.06430054 -89.25045776]
[174.01820374 -85.24077606]
[184.71900940 -80.59770203]
[195.13012695 -75.33709717]
[205.21597290 -69.47695923]
[214.94204712 -63.03731537]
[224.27508545 -56.04019165]
[233.18319702 -48.50951385]
[241.63591003 -40.47102737]
[249.60430908 -31.95222664]
[257.06115723 -22.98223305]
[263.98098755 -13.59172058]
[270.34008789 -3.81279969]
[283.43322754 -11.13190556]
[296.52639771 -18.45101166]
[309.61953735 -25.77011681]
[322.71270752 -33.08922195]
[328.44549561 -48.07303619]
[343.77767944 -52.79570770]
[356.94772339 -43.63440704]
[357.85269165 -27.61689758]
[345.79837036 -17.03044319]
[330.03179932 -19.99606705]
[316.93865967 -12.67696190]
[303.84548950 -5.35785675]
[290.75234985 1.96124899]
[277.65917969 9.28035450]
[282.51879883 19.50322914]
[286.79074097 29.98528099]
[290.46127319 40.69276428]
[293.51855469 51.59120178]
[295.95275879 62.64550400]
[297.75604248 73.82007599]
[298.92260742 85.07894135]
[299.44866943 96.38584900]
[299.33258057 107.70439911]
[298.57470703 118.99813843]
[297.17742920 130.23071289]
[295.14532471 141.36593628]
[292.48489380 152.36798096]
[289.20471191 163.20141602]
[285.31533813 173.83135986]
[280.82928467 184.22358704]
[275.76101685 194.34463501]
[270.12683105 204.16191101]
[263.94488525 213.64381409]
[257.23507690 222.75981140]
[250.01901245 231.48056030]
[242.31991577 239.77796936]
[234.16259766 247.62532043]
[225.57330322 254.99737549]
[216.57969666 261.87036133]
[207.21073914 268.22216797]
[197.49658203 274.03234863]
[187.46850586 279.28216553]
[177.15881348 283.95477295]
[166.60069275 288.03506470]
[155.82812500 291.50994873]
[144.87580872 294.36822510]
[133.77899170 296.60064697]
[122.57343292 298.20010376]
[111.29518127 299.16137695]
[99.98056793 299.48141479]
[88.66601562 299.15917969]
[77.38795471 298.19570923]
[66.18270111 296.59408569]
[55.08633041 294.35946655]
[44.13456726 291.49905396]
[33.36267853 288.02209473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[41 59]
[42 58]
[43 57]
[45 55]
[46 54]
[47 53]
[48 52]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
