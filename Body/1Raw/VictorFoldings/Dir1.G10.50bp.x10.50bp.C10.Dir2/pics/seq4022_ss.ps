%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGUCUCAGGGGGGGGGGGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCxxxxxxxxxxAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUCCCCCCCCCCACUAGUCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.53536224 416.68258667]
[72.31516266 409.41012573]
[61.42835999 398.96310425]
[53.61722946 386.05386353]
[49.41434479 371.56256104]
[49.10627365 356.47720337]
[52.71401596 341.82638550]
[59.99158859 328.60900879]
[70.44279480 317.72622681]
[83.35505676 309.92007446]
[97.84799194 305.72280884]
[97.53593445 290.72604370]
[97.22388458 275.72927856]
[96.91182709 260.73254395]
[96.59976959 245.73577881]
[96.28771210 230.73902893]
[95.97565460 215.74227905]
[95.66359711 200.74552917]
[95.35154724 185.74876404]
[94.88349915 170.75607300]
[94.25952148 155.76905823]
[93.63555145 140.78204346]
[93.01157379 125.79502869]
[92.38759613 110.80801392]
[85.09060669 123.91350555]
[74.31274414 134.34603882]
[60.97665024 141.21252441]
[46.22396851 143.92515564]
[31.31760597 142.25172424]
[17.53362846 136.33547974]
[6.05201626 126.68288422]
[-2.14434147 114.12025452]
[-6.35379314 99.72301483]
[-6.21598768 84.72364807]
[-1.74272096 70.40618134]
[6.68307066 57.99626160]
[18.34009361 48.55625153]
[32.23044586 42.89426422]
[47.16503906 41.49499130]
[61.86539078 44.47822571]
[75.07307434 51.58858109]
[85.65743256 62.21737671]
[92.71240234 75.45472717]
[95.63419342 90.17086029]
[100.82961273 76.09934235]
[106.02502441 62.02782059]
[111.22044373 47.95630264]
[116.41585541 33.88478088]
[121.61127472 19.81326294]
[125.76915741 5.40104675]
[128.86747742 -9.27547932]
[131.96580505 -23.95200539]
[135.06411743 -38.62852859]
[138.16244507 -53.30505753]
[141.26077271 -67.98158264]
[127.04679108 -72.83134460]
[113.52104187 -79.35910034]
[100.88076782 -87.46963501]
[89.31030273 -97.04469299]
[78.97837830 -107.94463348]
[70.03565979 -120.01049805]
[62.61256027 -133.06634521]
[56.81733322 -146.92175293]
[52.73448563 -161.37471008]
[50.42355728 -176.21441650]
[49.91825485 -191.22448730]
[51.22594070 -206.18600464]
[54.32754898 -220.88081360]
[59.17784882 -235.09461975]
[65.70610046 -248.62011719]
[73.81711578 -261.26007080]
[83.39260101 -272.83020020]
[94.29293060 -283.16171265]
[106.35913086 -292.10397339]
[119.41524506 -299.52658081]
[133.27088928 -305.32128906]
[147.72398376 -309.40359497]
[162.56378174 -311.71398926]
[177.57386780 -312.21871948]
[192.53533936 -310.91046143]
[207.23004150 -307.80831909]
[221.44364929 -302.95748901]
[234.96890259 -296.42874146]
[247.60858154 -288.31723022]
[259.17831421 -278.74133301]
[269.50942993 -267.84060669]
[278.45126343 -255.77407837]
[285.87338257 -242.71768188]
[291.66757202 -228.86183167]
[295.74932861 -214.40856934]
[298.05914307 -199.56869507]
[298.56332397 -184.55859375]
[297.25451660 -169.59715271]
[294.15182495 -154.90258789]
[289.30044556 -140.68914795]
[282.77117920 -127.16413116]
[274.65924072 -114.52477264]
[265.08288574 -102.95538330]
[254.18177795 -92.62467194]
[242.11491394 -83.68331146]
[229.05824280 -76.26167297]
[215.20216370 -70.46800232]
[200.74876404 -66.38677216]
[185.90879822 -64.07751465]
[170.89868164 -63.57389450]
[155.93728638 -64.88326263]
[152.83897400 -50.20673370]
[149.74064636 -35.53020859]
[146.64233398 -20.85368347]
[143.54400635 -6.17715740]
[140.44567871 8.49936867]
[153.22610474 0.64693260]
[168.08859253 2.67337418]
[178.30029297 13.66069508]
[179.23519897 28.63153076]
[170.46980286 40.80394745]
[155.97489929 44.66371918]
[142.31683350 38.46233368]
[135.68278503 25.00867844]
[130.48738098 39.08019638]
[125.29196167 53.15171814]
[120.09654236 67.22323608]
[114.90113068 81.29475403]
[109.70571136 95.36627197]
[107.37461090 110.18403625]
[107.99858856 125.17105103]
[108.62256622 140.15806580]
[109.24654388 155.14508057]
[109.87052155 170.13209534]
[113.37313080 178.63995361]
[110.34829712 185.43672180]
[110.66035461 200.43347168]
[110.97241211 215.43022156]
[111.28446960 230.42697144]
[111.59651947 245.42373657]
[111.90857697 260.42047119]
[112.22063446 275.41723633]
[112.53269196 290.41400146]
[112.84474945 305.41073608]
[127.49974060 309.00152588]
[140.72555542 316.26376343]
[151.62042236 326.70236206]
[159.44151306 339.60559082]
[163.65557861 354.09362793]
[163.97531128 369.17874146]
[160.37887573 383.83233643]
[153.11151123 397.05535889]
[142.66871643 407.94619751]
[129.76248169 415.76229858]
[115.27279663 419.97076416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[44 124]
[45 123]
[46 122]
[47 121]
[48 120]
[49 119]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
