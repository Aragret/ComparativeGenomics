%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGGAAUAGCCGGGGGGGGGGCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCxxxxxxxxxxAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACCCCCCCCCCCAGUAGGAAUAGAC\
) } def
/len { sequence length } bind def

/coor [
[84.05423737 415.50384521]
[70.18010712 409.65557861]
[57.82530212 401.05020142]
[47.52992630 390.06390381]
[39.74404907 377.17694092]
[34.80803680 362.95266724]
[32.93766785 348.01293945]
[34.21470642 333.01086426]
[38.58333206 318.60223389]
[45.85255814 305.41693115]
[55.70461273 294.03137207]
[67.70880127 284.94329834]
[81.34035492 278.54998779]
[96.00336456 275.13092041]
[95.70323181 260.13394165]
[95.40309906 245.13694763]
[95.10296631 230.13993835]
[94.80283356 215.14294434]
[94.50270081 200.14595032]
[94.20256805 185.14895630]
[93.90243530 170.15196228]
[93.60230255 155.15495300]
[93.30216980 140.15795898]
[87.13328552 138.62603760]
[81.27802277 136.15260315]
[75.87910461 132.79794312]
[71.06813049 128.64384460]
[66.96237183 123.79154968]
[63.66190338 118.35933685]
[61.24716949 112.47962189]
[59.77703857 106.29571533]
[44.78379440 105.84555817]
[29.79055023 105.39539337]
[14.79730701 104.94523621]
[-0.19593702 104.49507141]
[-15.18918037 104.04491425]
[-30.18242455 103.59474945]
[-42.80066681 113.50230408]
[-58.38029099 109.67414093]
[-64.96994781 95.04690552]
[-57.51461029 80.84136200]
[-41.73337936 77.95478058]
[-29.73226357 88.60150909]
[-14.73902035 89.05166626]
[0.25422361 89.50183105]
[15.24746704 89.95198822]
[30.24071121 90.40215302]
[45.23395538 90.85231018]
[60.22719955 91.30247498]
[71.35615540 71.06813049]
[91.70082855 60.14216995]
[91.40069580 45.14517212]
[91.10056305 30.14817619]
[90.80043793 15.15117931]
[89.90052032 0.17819907]
[88.40225983 -14.74678707]
[86.90399933 -29.67177391]
[77.82698059 -42.63010025]
[84.25434113 -56.06655884]
[82.75608063 -70.99154663]
[67.77059937 -72.34497070]
[53.31213379 -76.51022339]
[39.90335464 -83.33673096]
[28.02897644 -92.57770538]
[18.11825562 -103.89910889]
[10.52945614 -116.89167023]
[5.53690720 -131.08570862]
[3.32108712 -145.96813965]
[3.96209669 -161.00096130]
[7.43676376 -175.64074707]
[13.61948109 -189.35826111]
[22.28674698 -201.65765381]
[33.12524414 -212.09429932]
[45.74317169 -220.29090881]
[59.68439484 -225.95118713]
[74.44495392 -228.87051392]
[89.49124908 -228.94337463]
[104.27938843 -226.16711426]
[118.27477264 -220.64210510]
[130.97148132 -212.56806946]
[141.91053772 -202.23687744]
[150.69650269 -190.02200317]
[157.01176453 -176.36499023]
[160.62803650 -161.75953674]
[161.41459656 -146.73364258]
[159.34300232 -131.83044434]
[154.48814392 -117.58872223]
[147.02551270 -104.52328491]
[137.22488403 -93.10643768]
[125.44055939 -83.75090027]
[112.09851837 -76.79487610]
[97.68106842 -72.48979950]
[99.17932129 -57.56481552]
[108.14917755 -45.67402267]
[101.82898712 -31.17003250]
[103.32724762 -16.24504662]
[104.82550812 -1.32005918]
[106.96905518 0.56804043]
[108.47194672 3.44259906]
[108.94564819 7.05576611]
[108.10156250 11.02061844]
[105.79743195 14.85104752]
[106.09756470 29.84804535]
[106.39769745 44.84504318]
[106.69783020 59.84203720]
[127.76267242 70.22154236]
[139.59080505 90.50840759]
[154.57205200 89.75833893]
[169.55328369 89.00827026]
[182.94929504 80.59058380]
[196.04754639 87.68177795]
[211.02877808 86.93171692]
[226.01000977 86.18164825]
[240.99124146 85.43157959]
[254.46440125 76.08245850]
[269.18014526 83.31979370]
[270.00018311 99.69842529]
[256.08093262 108.36942291]
[241.74131775 100.41281128]
[226.76007080 101.16287994]
[211.77883911 101.91294861]
[196.79760742 102.66301727]
[184.47315979 111.02705383]
[170.30334473 103.98950958]
[155.32211304 104.73957825]
[140.34088135 105.48963928]
[138.75959778 112.45859528]
[135.98416138 119.04371643]
[132.10008240 125.04211426]
[127.22702789 130.26898193]
[121.51513672 134.56329346]
[115.14038849 137.79273987]
[108.29917145 139.85783386]
[108.59930420 154.85482788]
[108.89943695 169.85182190]
[109.19956207 184.84881592]
[109.49969482 199.84580994]
[109.79982758 214.84281921]
[110.09996033 229.83981323]
[110.40009308 244.83680725]
[110.70022583 259.83380127]
[111.00035858 274.83081055]
[125.78842163 277.66046143]
[139.66485596 283.50326538]
[152.02304077 292.10375977]
[162.32273865 303.08602905]
[170.11367798 315.96994019]
[175.05529785 330.19223022]
[176.93153381 345.13122559]
[175.66040039 360.13381958]
[171.29743958 374.54418945]
[164.03340149 387.73233032]
[154.18583679 399.12176514]
[142.18521118 408.21456909]
[128.55618286 414.61322021]
[113.89451599 418.03805542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[51 105]
[52 104]
[53 103]
[54 102]
[55 97]
[56 96]
[57 95]
[59 93]
[60 92]
[107 126]
[108 125]
[109 124]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
