%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCACCAUUGGGGGGGGGGUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGxxxxxxxxxxUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCCCCCCCCCCCUCACCAUU\
) } def
/len { sequence length } bind def

/coor [
[81.64554596 370.89984131]
[67.62359619 365.34683228]
[55.42364120 356.48049927]
[45.81256866 344.85818481]
[39.39454651 331.21047974]
[36.57300949 316.39529419]
[37.52532196 301.34393311]
[42.19162750 287.00250244]
[50.27859497 274.27255249]
[61.27787018 263.95428467]
[74.49803162 256.69628906]
[89.10803986 252.95486450]
[89.10803986 237.95486450]
[89.10803986 222.95486450]
[89.10803986 207.95486450]
[89.10803986 192.95486450]
[89.10803986 177.95486450]
[89.10803986 162.95486450]
[89.10803986 147.95486450]
[89.10803986 132.95486450]
[89.10803986 117.95486450]
[86.33600616 115.52682495]
[84.07158661 112.69051361]
[69.82489777 117.38431549]
[55.57820129 122.07811737]
[52.52522659 137.13052368]
[42.34304810 148.62916565]
[27.77062416 153.48097229]
[12.72786236 150.38082886]
[1.26119006 140.16265869]
[-3.54491520 125.57509613]
[-0.39763522 110.54212952]
[9.85642719 99.10753632]
[24.45898056 94.34718323]
[39.48201370 97.54156494]
[50.88440323 107.83142090]
[65.13109589 103.13761902]
[79.37778473 98.44381714]
[85.64719391 84.81684113]
[79.94252777 70.94396210]
[76.29074097 68.34317017]
[73.93109894 65.03324127]
[72.92722321 61.52055359]
[73.16726685 58.27839279]
[74.39097595 55.69120026]
[69.84368896 41.39706802]
[65.29639435 27.10293770]
[60.74910736 12.80880833]
[56.20181656 -1.48532140]
[51.65452576 -15.77945137]
[44.42282486 -28.92108345]
[34.78100967 -40.41175079]
[17.35448265 -46.27236938]
[14.91801834 -63.62483597]
[5.04231215 -74.91511536]
[-4.83339405 -86.20539856]
[-14.70910072 -97.49567413]
[-29.68826675 -105.43676758]
[-26.20416069 -122.02885437]
[-9.29600334 -123.27405548]
[-3.41882038 -107.37138367]
[6.45688581 -96.08110046]
[16.33259201 -84.79082489]
[26.20829773 -73.50054169]
[38.29039764 -72.36691284]
[46.60906219 -62.98762131]
[46.27167511 -50.05356216]
[55.91349030 -38.56289673]
[70.16017914 -43.25669861]
[71.08359528 -58.22824860]
[57.28289032 -64.54528809]
[46.69889832 -75.42387390]
[40.76301575 -89.39275360]
[40.27802658 -104.56276703]
[45.30951309 -118.88228607]
[55.17701340 -130.41470337]
[68.54602814 -137.60037231]
[83.60851288 -139.46748352]
[98.32738495 -135.76353455]
[110.71203613 -126.98942566]
[119.08753967 -114.33181000]
[122.32119751 -99.50251770]
[119.97566223 -84.50708771]
[112.36815643 -71.37352753]
[100.52753448 -61.87804794]
[86.05514526 -57.30483246]
[85.13172913 -42.33328247]
[65.94865417 -20.32674217]
[70.49594879 -6.03261137]
[75.04323578 8.26151848]
[79.59052277 22.55564880]
[84.13781738 36.84977722]
[88.68510437 51.14390945]
[93.81540680 65.23929596]
[99.52007294 79.11217499]
[113.08197021 85.52115631]
[127.42202759 81.12085724]
[141.76208496 76.72055054]
[156.10215759 72.32025146]
[156.85513306 57.18061066]
[162.74363708 43.21273804]
[173.05657959 32.10333252]
[186.54864502 25.19390106]
[201.59057617 23.31879616]
[216.36599731 26.70444298]
[229.09071350 34.94200897]
[238.22813416 47.03676987]
[242.67489624 61.52822113]
[241.89401245 76.66645050]
[235.97978210 90.62344360]
[225.64637756 101.71382904]
[212.14161682 108.59838104]
[197.09625244 110.44576263]
[182.32708740 107.03289795]
[169.61756897 98.77189636]
[160.50245667 86.66031647]
[146.16238403 91.06061554]
[131.82232666 95.46091461]
[117.48226929 99.86121368]
[132.17646790 102.87458038]
[147.05366516 100.95904541]
[161.19981384 105.94766235]
[171.58441162 116.77172089]
[175.98274231 131.11238098]
[173.45257568 145.89744568]
[164.53593445 157.95951843]
[151.14303589 164.71453857]
[136.14303589 164.71536255]
[122.74938965 157.96183777]
[113.83140564 145.90077209]
[111.29942322 131.11860657]
[104.10803986 117.95486450]
[104.10803986 132.95486450]
[104.10803986 147.95486450]
[104.10803986 162.95486450]
[104.10803986 177.95486450]
[104.10803986 192.95486450]
[104.10803986 207.95486450]
[104.10803986 222.95486450]
[104.10803986 237.95486450]
[104.10803986 252.95486450]
[118.71805573 256.69628906]
[131.93821716 263.95428467]
[142.93748474 274.27255249]
[151.02445984 287.00250244]
[155.69076538 301.34393311]
[156.64308167 316.39529419]
[153.82153320 331.21047974]
[147.40351868 344.85818481]
[137.79243469 356.48049927]
[125.59248352 365.34683228]
[111.57054138 370.89984131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 38]
[24 37]
[25 36]
[39 95]
[40 94]
[45 93]
[46 92]
[47 91]
[48 90]
[49 89]
[50 88]
[51 68]
[52 67]
[54 64]
[55 63]
[56 62]
[57 61]
[69 87]
[70 86]
[96 119]
[97 118]
[98 117]
[99 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
