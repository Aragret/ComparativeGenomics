%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUCUAGAGGGGGGGGGGGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCxxxxxxxxxxCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACCCCCCCCCCCUAUCCUAGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.52941895]
[71.19830322 351.51339722]
[59.48964310 341.98397827]
[50.78712082 329.64831543]
[45.73651886 315.42178345]
[44.71262741 300.36010742]
[47.79142761 285.58093262]
[54.74444962 272.18099976]
[65.05573273 261.15469360]
[77.96011353 253.32017517]
[92.50000000 249.25885010]
[92.50000000 234.25885010]
[92.50000000 219.25885010]
[92.50000000 204.25885010]
[92.50000000 189.25885010]
[92.50000000 174.25885010]
[92.50000000 159.25885010]
[92.50000000 144.25885010]
[92.50000000 129.25885010]
[92.50000000 114.25885773]
[83.23505402 102.46221924]
[68.66234589 98.90745544]
[54.08964539 95.35269165]
[39.51694107 91.79793549]
[26.11912537 99.74376678]
[11.39097118 95.93113708]
[3.89840078 83.10939789]
[-10.67430210 79.55463409]
[-25.24700546 75.99987030]
[-39.85589600 72.59689331]
[-54.49939728 69.34606934]
[-69.14289856 66.09524536]
[-83.78639984 62.84441757]
[-94.19848633 74.04869080]
[-108.72486115 78.50752258]
[-123.43490601 75.11917114]
[-134.40052795 64.89120483]
[-138.74502563 50.64371872]
[-153.38853455 47.39289474]
[-168.03202820 44.14207077]
[-182.28285217 51.51049805]
[-196.86956787 44.83162689]
[-200.60249329 29.22890854]
[-190.61805725 16.67141724]
[-174.57545471 16.79218483]
[-164.78120422 29.49856758]
[-150.13771057 32.74939346]
[-135.49420166 36.00021744]
[-125.52909851 24.92943764]
[-111.26567078 20.30226326]
[-96.50368500 23.45664024]
[-85.22858429 33.64334488]
[-80.53557587 48.20091629]
[-65.89207458 51.45174408]
[-51.24857330 54.70256805]
[-36.60507202 57.95339203]
[-29.34666061 56.32210159]
[-21.69224358 61.42716980]
[-7.11954021 64.98193359]
[7.45316267 68.53669739]
[20.00812721 60.60520935]
[34.83755875 64.00264740]
[43.07170486 77.22522736]
[57.64440536 80.77999115]
[72.21710968 84.33475494]
[86.78981018 87.88951111]
[97.43141937 84.76453400]
[106.16299438 88.57682800]
[118.60243225 80.19468689]
[111.53682709 66.94775391]
[105.87075043 53.04453278]
[101.66426849 38.63240051]
[98.96197510 23.86413574]
[97.79251862 8.89629078]
[98.16828918 -6.11246777]
[100.08530426 -21.00303841]
[103.52324677 -35.61757278]
[108.44566345 -49.80114746]
[114.80039215 -63.40340805]
[122.52005005 -76.28016663]
[131.52281189 -88.29491425]
[141.71324158 -99.32030487]
[152.98332214 -109.23944092]
[165.21357727 -117.94718933]
[178.27436829 -125.35124207]
[192.02722168 -131.37310791]
[206.32637024 -135.94894409]
[221.02023315 -139.03025818]
[235.95304871 -140.58438110]
[250.96650696 -140.59484863]
[265.90145874 -139.06152344]
[280.59960938 -136.00068665]
[294.90512085 -131.44476318]
[308.66635132 -125.44206238]
[321.73742676 -118.05621338]
[333.97979736 -109.36551666]
[345.26370239 -99.46208191]
[355.46948242 -88.45090485]
[364.48895264 -76.44870758]
[372.22656250 -63.58271408]
[378.60021973 -49.98931885]
[383.54238892 -35.81261444]
[387.00070190 -21.20288467]
[388.93844604 -6.31499958]
[389.33514404 8.69322109]
[388.18652344 23.66268158]
[385.50482178 38.43469620]
[381.31842041 52.85267258]
[375.67172241 66.76377869]
[368.62457275 80.02053833]
[360.25167847 92.48242950]
[350.64178467 104.01734924]
[339.89682007 114.50302124]
[328.13061523 123.82828522]
[315.46792603 131.89430237]
[302.04299927 138.61553955]
[287.99810791 143.92079163]
[273.48220825 147.75376892]
[258.64907837 150.07388306]
[243.65603638 150.85652161]
[228.66198730 150.09338379]
[213.82586670 147.79257202]
[199.30496216 143.97846985]
[185.25320435 138.69149780]
[171.81953430 131.98771667]
[159.14637756 123.93817902]
[147.36805725 114.62822723]
[136.60943604 104.15653992]
[126.98457336 92.63413239]
[114.54513550 101.01627350]
[107.50000000 114.25885773]
[107.50000000 129.25885010]
[107.50000000 144.25885010]
[107.50000000 159.25885010]
[107.50000000 174.25885010]
[107.50000000 189.25885010]
[107.50000000 204.25885010]
[107.50000000 219.25885010]
[107.50000000 234.25885010]
[107.50000000 249.25885010]
[122.03988647 253.32017517]
[134.94427490 261.15469360]
[145.25555420 272.18099976]
[152.20857239 285.58093262]
[155.28736877 300.36010742]
[154.26348877 315.42178345]
[149.21287537 329.64831543]
[140.51036072 341.98397827]
[128.80169678 351.51339722]
[114.95575714 357.52941895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 66]
[22 65]
[23 64]
[24 63]
[27 60]
[28 59]
[29 58]
[30 56]
[31 55]
[32 54]
[33 53]
[38 48]
[39 47]
[40 46]
[68 130]
[69 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
