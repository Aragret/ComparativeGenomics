%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCAUCAUGGGGGGGGGGAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUxxxxxxxxxxAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCCCCCCCCCCCGCCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[77.49114227 371.47027588]
[63.46920013 365.91726685]
[51.26924515 357.05093384]
[41.65817261 345.42861938]
[35.24014664 331.78091431]
[32.41860962 316.96572876]
[33.37092590 301.91436768]
[38.03723145 287.57293701]
[46.12419891 274.84298706]
[57.12347412 264.52471924]
[70.34363556 257.26672363]
[84.95364380 253.52529907]
[84.95364380 238.52529907]
[84.95364380 223.52529907]
[84.95364380 208.52529907]
[84.95364380 193.52529907]
[84.95364380 178.52529907]
[84.95364380 163.52529907]
[84.95364380 148.52529907]
[84.95364380 133.52529907]
[84.95364380 118.52529144]
[86.70186615 94.64567566]
[78.03526306 82.40271759]
[69.36865234 70.15976715]
[56.44456100 77.79045105]
[42.93447113 84.32781219]
[28.93067169 89.72717285]
[14.52882385 93.95166016]
[-0.17269236 96.97241211]
[-15.07344818 98.76879883]
[-30.07165527 99.32854462]
[-45.06486130 98.64782715]
[-59.95063782 96.73130035]
[-74.62731171 93.59204865]
[-88.99461365 89.25151825]
[-102.95439911 83.73936462]
[-116.41131592 77.09323883]
[-129.27342224 69.35854340]
[-141.45288086 60.58810806]
[-152.86647034 50.84185410]
[-163.43623352 40.18635178]
[-173.08996582 28.69439697]
[-181.76170349 16.44448662]
[-189.39224243 3.52030516]
[-195.92944336 -9.98986244]
[-201.32862854 -23.99372673]
[-205.55294800 -38.39562607]
[-208.57353210 -53.09717941]
[-210.36973572 -67.99795532]
[-210.92930603 -82.99617004]
[-210.24841309 -97.98936462]
[-208.33169556 -112.87512207]
[-205.19227600 -127.55175781]
[-200.85157776 -141.91900635]
[-195.33924866 -155.87872314]
[-188.69296265 -169.33555603]
[-180.95811462 -182.19758606]
[-172.18754578 -194.37693787]
[-162.44114685 -205.79040527]
[-151.78552246 -216.36004639]
[-140.29345703 -226.01362610]
[-128.04344177 -234.68524170]
[-115.11916351 -242.31561279]
[-101.60891724 -248.85264587]
[-87.60499573 -254.25167847]
[-73.20304108 -258.47583008]
[-58.50145340 -261.49621582]
[-43.60065460 -263.29226685]
[-28.60243607 -263.85165405]
[-13.60924721 -263.17056274]
[1.27648675 -261.25369263]
[15.95308208 -258.11407471]
[30.32028008 -253.77320862]
[44.27993774 -248.26072693]
[57.73669434 -241.61428833]
[70.59862518 -233.87927246]
[82.77786255 -225.10855103]
[94.19122314 -215.36203003]
[104.76073456 -204.70626831]
[114.41418457 -193.21409607]
[123.08564758 -180.96397400]
[130.71586609 -168.03961182]
[137.25274658 -154.52928162]
[142.65161133 -140.52529907]
[146.87557983 -126.12329102]
[149.89581299 -111.42166901]
[151.69166565 -96.52085114]
[152.25086975 -81.52262115]
[151.56961060 -66.52944183]
[149.65255737 -51.64373016]
[146.51277161 -36.96717453]
[142.17173767 -22.60002708]
[136.65908813 -8.64043522]
[130.01248169 4.81624126]
[122.27732086 17.67807961]
[113.50644684 29.85721779]
[103.75978851 41.27046204]
[93.10391235 51.83983994]
[81.61161041 61.49315643]
[90.27821350 73.73611450]
[98.94482422 85.97906494]
[112.01152039 93.34530640]
[126.97280121 94.42237854]
[141.93408203 95.49944305]
[156.89535522 96.57651520]
[171.85664368 97.65358734]
[178.05380249 95.07718658]
[183.75059509 95.93416595]
[187.40597534 99.09444427]
[202.31042480 100.78484344]
[217.21487427 102.47523499]
[225.30116272 89.53017426]
[238.20790100 81.38285065]
[253.37243652 79.65091705]
[267.78384399 84.67825317]
[278.58071899 95.46668243]
[283.61935425 109.87414551]
[281.89932251 125.04003143]
[273.76211548 137.95315552]
[260.82339478 146.04959106]
[245.65214539 147.72178650]
[231.26065063 142.63774109]
[220.50633240 131.80688477]
[215.52447510 117.37968445]
[200.62002563 115.68928528]
[185.71557617 113.99889374]
[170.77957153 112.61486816]
[155.81828308 111.53779602]
[140.85700989 110.46072388]
[125.89572906 109.38365936]
[110.93444824 108.30658722]
[99.95364380 118.52529144]
[99.95364380 133.52529907]
[99.95364380 148.52529907]
[99.95364380 163.52529907]
[99.95364380 178.52529907]
[99.95364380 193.52529907]
[99.95364380 208.52529907]
[99.95364380 223.52529907]
[99.95364380 238.52529907]
[99.95364380 253.52529907]
[114.56365967 257.26672363]
[127.78381348 264.52471924]
[138.78309631 274.84298706]
[146.87005615 287.57293701]
[151.53636169 301.91436768]
[152.48867798 316.96572876]
[149.66714478 331.78091431]
[143.24911499 345.42861938]
[133.63804626 357.05093384]
[121.43808746 365.91726685]
[107.41614532 371.47027588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 101]
[23 100]
[24 99]
[102 131]
[103 130]
[104 129]
[105 128]
[106 127]
[109 126]
[110 125]
[111 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
