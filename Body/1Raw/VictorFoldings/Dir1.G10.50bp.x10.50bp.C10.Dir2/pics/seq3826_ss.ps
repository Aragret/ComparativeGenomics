%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAUUCUGGGGGGGGGGACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCAxxxxxxxxxxCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCCCCCCCCCCCAUCAUACU\
) } def
/len { sequence length } bind def

/coor [
[88.59960938 377.47909546]
[76.04138184 369.12792969]
[65.95516205 357.91549683]
[58.97496796 344.54656982]
[55.53958511 329.86160278]
[55.86495972 314.78363037]
[59.93064499 300.26049805]
[67.48106384 287.20516968]
[78.04159546 276.43826294]
[90.94838715 268.63662720]
[105.39011383 264.29067993]
[104.76614380 249.30366516]
[104.14216614 234.31665039]
[103.51818848 219.32963562]
[102.89421082 204.34262085]
[102.27023315 189.35560608]
[101.64625549 174.36859131]
[101.02227783 159.38157654]
[100.39830017 144.39456177]
[99.77432251 129.40753174]
[94.12481689 124.47467804]
[87.48725128 137.92617798]
[86.17685699 152.86882019]
[75.19754028 163.08912659]
[60.19943619 163.32754517]
[48.90081787 153.46138000]
[47.11614227 138.56791687]
[55.76383591 126.31159973]
[70.39202881 122.99948120]
[82.82581329 114.60895538]
[77.17631531 109.67609406]
[62.24200439 111.07839966]
[47.30769730 112.48069763]
[34.25481415 122.40814972]
[19.23762131 115.81907654]
[17.70451546 99.49175262]
[31.23262596 90.22232819]
[45.90539169 97.54639435]
[60.83969879 96.14408875]
[75.77400970 94.74178314]
[86.96977234 84.75905609]
[90.06809235 70.08253479]
[93.16641998 55.40600586]
[96.26473999 40.72948074]
[84.77095032 28.36238861]
[82.90785980 11.74882603]
[91.21054840 -2.57008743]
[106.25041962 -9.07450676]
[109.04274750 -23.81231308]
[111.83506775 -38.55011749]
[114.62739563 -53.28792572]
[117.41971588 -68.02572632]
[120.21204376 -82.76353455]
[105.87249756 -87.22169495]
[92.13462830 -93.28540802]
[79.17752838 -100.87562561]
[67.17013550 -109.89340210]
[56.26897430 -120.22115326]
[46.61617279 -131.72424316]
[38.33757782 -144.25271606]
[31.54111099 -157.64323425]
[26.31538200 -171.72120667]
[22.72851753 -186.30313110]
[20.82728004 -201.19886780]
[20.63645554 -216.21423340]
[22.15853310 -231.15348816]
[25.37366867 -245.82183838]
[30.23994637 -260.02807617]
[36.69392395 -273.58697510]
[44.65146255 -286.32177734]
[54.00881577 -298.06646729]
[64.64398956 -308.66793823]
[76.41834259 -317.98791504]
[89.17836761 -325.90496826]
[102.75770569 -332.31585693]
[116.97932434 -337.13699341]
[131.65782166 -340.30551147]
[146.60182190 -341.78012085]
[161.61651611 -341.54162598]
[176.50613403 -339.59307861]
[191.07658386 -335.95989990]
[205.13789368 -330.68948364]
[218.50674438 -323.85052490]
[231.00886536 -315.53216553]
[242.48123169 -305.84289551]
[252.77432251 -294.90896606]
[261.75390625 -282.87298584]
[269.30291748 -269.89184570]
[275.32296753 -256.13479614]
[279.73556519 -241.78115845]
[282.48315430 -227.01808167]
[283.52996826 -212.03802490]
[282.86230469 -197.03630066]
[280.48889160 -182.20846558]
[276.44067383 -167.74783325]
[270.77041626 -153.84294128]
[263.55206299 -140.67506409]
[254.87968445 -128.41587830]
[244.86637878 -117.22518158]
[233.64268494 -107.24889374]
[221.35491943 -98.61706543]
[208.16326904 -91.44223022]
[194.23973083 -85.81793213]
[179.76580811 -81.81748962]
[164.93022156 -79.49306488]
[149.92636108 -78.87495422]
[134.94984436 -79.97121429]
[132.15753174 -65.23340607]
[129.36520386 -50.49559784]
[126.57287598 -35.75779343]
[123.78054810 -21.01998711]
[120.98822784 -6.28218174]
[131.02395630 2.57671237]
[135.39132690 15.34533119]
[132.84265137 28.70776939]
[123.94125366 39.13744736]
[110.94126129 43.82780457]
[107.84294128 58.50432968]
[104.74462128 73.18085480]
[101.64630127 87.85738373]
[105.85666656 86.75026703]
[110.74053955 87.18714905]
[115.72971344 89.42896271]
[120.17292786 93.53195953]
[123.40744781 99.32489777]
[124.83585358 106.41066742]
[124.00001526 114.19284821]
[120.64437866 121.92575073]
[114.76133728 128.78355408]
[115.38531494 143.77058411]
[116.00929260 158.75759888]
[116.63327026 173.74461365]
[117.25724792 188.73162842]
[117.88122559 203.71864319]
[118.50520325 218.70565796]
[119.12918091 233.69267273]
[119.75315857 248.67968750]
[120.37713623 263.66671753]
[135.13014221 266.79714966]
[148.64077759 273.49890137]
[160.05975342 283.35070801]
[168.66926575 295.73321533]
[173.92811584 309.86813354]
[175.50572205 324.86685181]
[173.30291748 339.78659058]
[167.45817566 353.68945312]
[158.33888245 365.70150757]
[146.51831055 375.06768799]
[132.73950195 381.19915771]
[117.86860657 383.71057129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[31 40]
[32 39]
[33 38]
[41 120]
[42 119]
[43 118]
[44 117]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
