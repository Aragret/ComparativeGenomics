%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACCUCUGGGGGGGGGGAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGxxxxxxxxxxACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCCCCCCCCCCCAACACCUCU\
) } def
/len { sequence length } bind def

/coor [
[-9.28273392 226.24154663]
[-17.73059273 218.40249634]
[-25.61758995 209.99938965]
[-32.90615463 201.07225037]
[-39.56155777 191.66360474]
[-45.55210114 181.81828308]
[-50.84923935 171.58317566]
[-55.42774200 161.00704956]
[-59.26579666 150.14030457]
[-73.76139832 153.99746704]
[-88.25698853 157.85461426]
[-102.75258636 161.71177673]
[-117.24818420 165.56893921]
[-128.59469604 176.59469604]
[-142.88359070 172.39030457]
[-157.37919617 176.24746704]
[-171.87478638 180.10462952]
[-183.22129822 191.13038635]
[-197.51019287 186.92599487]
[-212.00579834 190.78315735]
[-223.35231018 201.80891418]
[-237.64120483 197.60453796]
[-252.13679504 201.46170044]
[-263.48330688 212.48744202]
[-277.77221680 208.28306580]
[-292.26779175 212.14022827]
[-296.19116211 226.98956299]
[-307.02496338 237.87646484]
[-321.85491943 241.87242126]
[-336.69189453 237.90252686]
[-347.54476929 227.03466797]
[-351.49423218 212.19224548]
[-347.47784424 197.36779785]
[-336.57601929 186.54902649]
[-321.72128296 182.64611816]
[-306.90951538 186.70895386]
[-296.12496948 197.64462280]
[-281.62936401 193.78747559]
[-271.31967163 183.03761292]
[-255.99395752 186.96609497]
[-241.49836731 183.10893250]
[-231.18865967 172.35906982]
[-215.86294556 176.28756714]
[-201.36735535 172.43040466]
[-191.05766296 161.68054199]
[-175.73194885 165.60903931]
[-161.23634338 161.75187683]
[-146.74075317 157.89471436]
[-136.43106079 147.14485168]
[-121.10534668 151.07334900]
[-106.60974884 147.21618652]
[-92.11415100 143.35902405]
[-77.61855316 139.50186157]
[-63.12295914 135.64469910]
[-65.25825500 123.86112976]
[-66.54346466 111.95481873]
[-66.97198486 99.98700714]
[-66.54160309 88.01926422]
[-65.25453949 76.11314392]
[-63.11740875 64.32990265]
[-60.14120483 52.73014832]
[-56.34123993 41.37354660]
[-51.73706055 30.31851959]
[-46.35234833 19.62193108]
[-40.21480560 9.33880520]
[-33.35600281 -0.47796226]
[-25.81121826 -9.77787399]
[-17.61926460 -18.51309013]
[-8.82228184 -26.63867950]
[0.53448015 -34.11284256]
[10.40289021 -40.89713287]
[20.73218536 -46.95665359]
[31.46923256 -52.26023102]
[42.55879974 -56.78058624]
[53.94384003 -60.49446869]
[65.56579590 -63.38277054]
[77.36487579 -65.43063354]
[89.28039551 -66.62753296]
[101.25105286 -66.96730042]
[113.21527863 -66.44818878]
[125.11152649 -65.07288361]
[136.87860107 -62.84843826]
[148.45596313 -59.78630829]
[159.78407288 -55.90224075]
[170.80465698 -51.21621704]
[181.46102905 -45.75234222]
[191.69836426 -39.53871918]
[201.46400452 -32.60731506]
[210.70771790 -24.99378204]
[221.14753723 -35.76459122]
[231.58734131 -46.53539658]
[242.02716064 -57.30620575]
[248.70939636 -72.88773346]
[265.53182983 -70.78003693]
[268.16339111 -54.03156662]
[252.79795837 -46.86639404]
[242.35815430 -36.09558487]
[231.91833496 -25.32477760]
[221.47853088 -14.55396938]
[247.40939331 21.57732201]
[262.88250732 63.27219391]
[277.64855957 60.63332748]
[292.41461182 57.99446487]
[307.18066406 55.35559845]
[321.94674683 52.71673584]
[329.57678223 39.06695557]
[344.21389771 33.56347656]
[358.94692993 38.80486679]
[366.81933594 52.31630707]
[364.11404419 67.71810913]
[352.10839844 77.73800659]
[336.47109985 77.64491272]
[324.58560181 67.48278809]
[309.81954956 70.12165833]
[295.05349731 72.76052094]
[280.28744507 75.39938354]
[265.52136230 78.03824615]
[266.64202881 89.50825500]
[266.96881104 101.02825165]
[266.50018311 112.54334259]
[265.23834229 123.99868011]
[263.18930054 135.33969116]
[260.36285400 146.51234436]
[256.77246094 157.46340942]
[252.43518066 168.14073181]
[247.37171936 178.49343872]
[241.60620117 188.47219849]
[235.16606140 198.02947998]
[228.08201599 207.11976624]
[220.38777161 215.69972229]
[212.12002563 223.72850037]
[203.31814575 231.16784668]
[194.02406311 237.98231506]
[184.28204346 244.13945007]
[174.13851929 249.60990906]
[163.64179993 254.36763000]
[152.84190369 258.38995361]
[141.79026794 261.65771484]
[130.53953552 264.15536499]
[119.14332581 265.87097168]
[107.65591431 266.79638672]
[96.13202667 266.92718506]
[84.62657166 266.26275635]
[73.19435120 264.80624390]
[61.88983536 262.56463623]
[50.76687241 259.54855347]
[39.87845230 255.77241516]
[29.27644730 251.25416565]
[19.01136589 246.01536560]
[9.13210869 240.08094788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[15 48]
[16 47]
[17 46]
[19 44]
[20 43]
[22 41]
[23 40]
[25 38]
[26 37]
[89 99]
[90 98]
[91 97]
[92 96]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
