%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUUCUCGGGGGGGGGGCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAxxxxxxxxxxAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCCCCCCCCCCCAGUCUC\
) } def
/len { sequence length } bind def

/coor [
[112.58571625 465.03631592]
[98.73977661 459.02029419]
[87.03112030 449.49087524]
[78.32859802 437.15521240]
[73.27799225 422.92868042]
[72.25410461 407.86700439]
[75.33290100 393.08786011]
[82.28591919 379.68792725]
[92.59720612 368.66159058]
[105.50158691 360.82708740]
[120.04147339 356.76577759]
[120.04147339 341.76577759]
[120.04147339 326.76577759]
[120.04147339 311.76577759]
[120.04147339 296.76577759]
[120.04147339 281.76577759]
[120.04147339 266.76577759]
[120.04147339 251.76576233]
[120.04147339 236.76576233]
[120.04147339 221.76576233]
[108.41871643 217.62806702]
[98.62177277 210.08915710]
[91.61708832 199.87361145]
[88.10157776 187.97096252]
[88.43325043 175.53987122]
[92.59485626 163.79534912]
[100.19407654 153.88992310]
[110.50045013 146.80065918]
[122.51559448 143.23269653]
[123.45121765 128.26191711]
[124.38684845 113.29111481]
[94.98632812 124.26420593]
[78.31111908 101.98974609]
[63.81551743 98.13258362]
[49.31992340 94.27542114]
[34.82432556 90.41826630]
[20.32872963 86.56110382]
[10.79827404 98.43924713]
[-2.74247932 105.40831757]
[-17.94751167 106.26087189]
[-32.18246078 100.84921265]
[-42.98103714 90.11093140]
[-48.47231674 75.90650177]
[-47.70491028 60.69693375]
[-40.81176758 47.11737442]
[-28.98717117 37.52056122]
[-14.27980328 33.56920242]
[0.76219505 35.94789505]
[13.53270721 44.24451447]
[21.81916428 57.02162170]
[24.18588829 72.06550598]
[38.68148422 75.92266846]
[53.17708206 79.77983093]
[67.67267609 83.63698578]
[82.16827393 87.49414825]
[90.83289337 78.06031799]
[104.30015564 74.58551788]
[118.54227448 79.32256317]
[118.23021698 64.32580566]
[117.91815948 49.32905579]
[108.01111603 33.84259796]
[116.98394775 18.79307556]
[116.35997009 3.80606008]
[115.73599243 -11.18095589]
[101.07454681 -14.81668663]
[88.03198242 -22.43694305]
[77.66561890 -33.42398834]
[70.81580353 -46.88714600]
[68.03781128 -61.73502350]
[69.55686188 -76.76396942]
[75.24979401 -90.75565338]
[84.65511322 -102.57582855]
[97.01037598 -111.26629639]
[111.31399536 -116.12254333]
[126.40644073 -116.75091553]
[141.06422424 -113.10045624]
[154.09913635 -105.46710205]
[164.45445251 -94.46964264]
[171.29074097 -80.99961090]
[174.05381775 -66.14894867]
[172.51966858 -51.12154007]
[166.81268311 -37.13558197]
[157.39549255 -25.32486153]
[145.03149414 -16.64681435]
[130.72300720 -11.80493355]
[131.34698486 3.18208265]
[131.97096252 18.16909981]
[140.67877197 26.62377548]
[141.28469849 39.14782715]
[132.91491699 49.01699829]
[133.22697449 64.01375580]
[133.53903198 79.01050568]
[145.43141174 88.15224457]
[160.00410461 84.59748077]
[174.57681274 81.04271698]
[177.02635193 68.29026031]
[184.11047363 57.46319962]
[194.73751831 50.16490936]
[207.29443359 47.45999146]
[219.89154053 49.71907806]
[230.64692688 56.56850433]
[237.96757507 66.95156097]
[252.67553711 64.00607300]
[267.38351440 61.06059265]
[282.09146118 58.11511230]
[290.64508057 44.82559967]
[306.10800171 41.55851746]
[319.30633545 50.25216675]
[322.40975952 65.74875641]
[313.57705688 78.85443878]
[298.04852295 81.79384613]
[285.03695679 72.82307434]
[270.32897949 75.76855469]
[255.62101746 78.71403503]
[240.91305542 81.65952301]
[236.03417969 98.11554718]
[223.45478821 109.92285919]
[206.55036926 113.79057312]
[189.91918945 108.57489014]
[178.13157654 95.61541748]
[163.55886841 99.17018127]
[148.98616028 102.72494507]
[139.35763550 114.22674561]
[138.42201233 129.19754028]
[137.48638916 144.16833496]
[153.33383179 152.45468140]
[163.96807861 166.76693726]
[167.30856323 184.22822571]
[162.73512268 201.35343933]
[151.20248413 214.74475098]
[135.04147339 221.76576233]
[135.04147339 236.76576233]
[135.04147339 251.76576233]
[135.04147339 266.76577759]
[135.04147339 281.76577759]
[135.04147339 296.76577759]
[135.04147339 311.76577759]
[135.04147339 326.76577759]
[135.04147339 341.76577759]
[135.04147339 356.76577759]
[149.58135986 360.82708740]
[162.48574829 368.66159058]
[172.79702759 379.68792725]
[179.75004578 393.08786011]
[182.82884216 407.86700439]
[181.80496216 422.92868042]
[176.75434875 437.15521240]
[168.05183411 449.49087524]
[156.34317017 459.02029419]
[142.49722290 465.03631592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 125]
[30 124]
[31 123]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[58 92]
[59 91]
[60 90]
[62 87]
[63 86]
[64 85]
[93 122]
[94 121]
[95 120]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
