%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUUAUUGGGGGGGGGGCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUAxxxxxxxxxxAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCCCCCCCCCCCUUCUUAUU\
) } def
/len { sequence length } bind def

/coor [
[88.29878235 360.38043213]
[74.45284271 354.36441040]
[62.74418259 344.83499146]
[54.04165649 332.49932861]
[48.99105453 318.27279663]
[47.96716309 303.21112061]
[51.04596329 288.43194580]
[57.99898529 275.03204346]
[68.31027222 264.00570679]
[81.21465302 256.17120361]
[95.75453949 252.10987854]
[95.75453949 237.10987854]
[95.75453949 222.10987854]
[95.75453949 207.10987854]
[95.75453949 192.10987854]
[95.75453949 177.10987854]
[95.75453949 162.10987854]
[95.75453949 147.10987854]
[95.75453949 132.10987854]
[95.75453949 117.10987854]
[85.77181244 105.91411591]
[70.86991119 104.20142365]
[56.28157425 122.32735443]
[27.00044060 119.11787415]
[12.18268204 121.44898224]
[-2.63507581 123.78008270]
[-11.93984985 136.27244568]
[-27.00037193 138.42543030]
[-38.85258102 129.47775269]
[-53.67033768 131.80886841]
[-68.48809814 134.13996887]
[-83.30585480 136.47106934]
[-98.01290894 144.90545654]
[-110.18899536 133.10803223]
[-102.22329712 118.14194489]
[-85.63695526 121.65331268]
[-70.81919861 119.32221222]
[-56.00144196 116.99110413]
[-41.18368530 114.66000366]
[-32.65123749 102.50545502]
[-17.65713120 99.93030548]
[-4.96617985 108.96232605]
[9.85157871 106.63122559]
[24.66933632 104.30011749]
[26.14207840 96.94613647]
[30.56030083 74.88419342]
[17.78294373 67.02677155]
[5.00558662 59.16934586]
[-7.77177048 51.31192017]
[-24.43116570 48.16534805]
[-26.01934242 31.28595161]
[-10.23925114 25.08715820]
[0.08565515 38.53456116]
[12.86301231 46.39198685]
[25.64036942 54.24941254]
[38.41772842 62.10683823]
[57.38375092 64.47365570]
[69.65702820 75.58193970]
[72.58259583 89.29952240]
[87.48449707 91.01220703]
[101.32772064 85.23593903]
[110.59266663 73.43930054]
[99.81862640 62.98283005]
[90.19661713 51.45743561]
[81.83207703 38.98939133]
[74.81664276 25.71530342]
[69.22718048 11.78061199]
[65.12493896 -2.66200900]
[62.55485535 -17.45431709]
[61.54508972 -32.43423843]
[62.10671234 -47.43764877]
[64.23356628 -62.30015945]
[67.90234375 -76.85893250]
[73.07285309 -90.95444489]
[79.68844604 -104.43226624]
[87.67662811 -117.14472198]
[96.94989014 -128.95252991]
[107.40661621 -139.72631836]
[118.93224335 -149.34805298]
[131.40049744 -157.71229553]
[144.67475891 -164.72740173]
[158.60957336 -170.31652832]
[173.05230713 -174.41841125]
[187.84466553 -176.98814392]
[202.82461548 -177.99754333]
[217.82801819 -177.43554688]
[232.69047546 -175.30833435]
[247.24916077 -171.63920593]
[261.34454346 -166.46835327]
[274.82220459 -159.85243225]
[287.53445435 -151.86393738]
[299.34204102 -142.59039307]
[310.11560059 -132.13340759]
[319.73703003 -120.60754395]
[328.10098267 -108.13909149]
[335.11575317 -94.86466217]
[340.70452881 -80.92970276]
[344.80609131 -66.48687744]
[347.37545776 -51.69444656]
[348.38449097 -36.71447372]
[347.82214355 -21.71109390]
[345.69454956 -6.84868622]
[342.02508545 7.70990467]
[336.85388184 21.80516815]
[330.23764038 35.28266907]
[322.24884033 47.99473953]
[312.97500610 59.80209732]
[302.51776123 70.57537842]
[290.99163818 80.19654846]
[278.52301025 88.56018066]
[265.24838257 95.57464600]
[251.31329346 101.16309357]
[236.87037659 105.26428223]
[222.07788086 107.83329010]
[207.09788513 108.84195709]
[192.09451294 108.27924347]
[177.23216248 106.15131378]
[162.67366028 102.48146820]
[148.57852173 97.30992889]
[135.10118103 90.69335938]
[122.38930511 82.70424652]
[113.12435913 94.50088501]
[124.52323151 84.75072479]
[139.42944336 83.07588959]
[152.70780945 90.05335236]
[159.78396606 103.27938843]
[158.22016907 118.19764709]
[148.55517578 129.66882324]
[134.11853027 133.74110413]
[119.88365936 129.01158142]
[110.75453949 117.10987854]
[110.75453949 132.10987854]
[110.75453949 147.10987854]
[110.75453949 162.10987854]
[110.75453949 177.10987854]
[110.75453949 192.10987854]
[110.75453949 207.10987854]
[110.75453949 222.10987854]
[110.75453949 237.10987854]
[110.75453949 252.10987854]
[125.29442596 256.17120361]
[138.19880676 264.00570679]
[148.51008606 275.03204346]
[155.46310425 288.43194580]
[158.54191589 303.21112061]
[157.51802063 318.27279663]
[152.46742249 332.49932861]
[143.76489258 344.83499146]
[132.05622864 354.36441040]
[118.21028900 360.38043213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 60]
[22 59]
[24 44]
[25 43]
[26 42]
[29 39]
[30 38]
[31 37]
[32 36]
[46 56]
[47 55]
[48 54]
[49 53]
[61 122]
[62 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
