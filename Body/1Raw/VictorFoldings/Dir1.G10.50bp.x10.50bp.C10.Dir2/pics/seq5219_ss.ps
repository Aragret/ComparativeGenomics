%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAACCCGGGGGGGGGGAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAxxxxxxxxxxUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCCCCCCCCCCCAUCCAAACCC\
) } def
/len { sequence length } bind def

/coor [
[143.72946167 610.58032227]
[130.50926208 603.30786133]
[119.62245941 592.86083984]
[111.81132507 579.95159912]
[107.60844421 565.46032715]
[107.30037689 550.37493896]
[110.90811157 535.72412109]
[118.18568420 522.50677490]
[128.63690186 511.62399292]
[141.54916382 503.81784058]
[156.04209900 499.62054443]
[155.73004150 484.62380981]
[155.41798401 469.62704468]
[155.10592651 454.63027954]
[154.79386902 439.63354492]
[154.48181152 424.63677979]
[154.16975403 409.64004517]
[153.85769653 394.64328003]
[153.54563904 379.64651489]
[153.23358154 364.64978027]
[152.92152405 349.65301514]
[152.60948181 334.65625000]
[150.58714294 319.79321289]
[146.88098145 305.25827026]
[143.17481995 290.72335815]
[139.46865845 276.18841553]
[135.76249695 261.65347290]
[120.25122070 261.58847046]
[105.27076721 257.52221680]
[91.83628082 249.72422791]
[80.85967255 238.71726990]
[73.08773041 225.24203491]
[69.05131531 210.20747375]
[69.02907562 194.62940979]
[73.02825165 179.56188965]
[80.78378296 166.02595520]
[91.77586365 154.94033813]
[105.26480103 147.05918884]
[101.25705719 132.60450745]
[86.44041443 130.96444702]
[73.40035248 122.71346283]
[65.02104187 109.13552856]
[63.38663101 92.73718262]
[69.28259277 76.78817749]
[57.58296967 67.40100861]
[45.88334274 58.01385117]
[34.18371964 48.62668991]
[20.66534042 55.63905334]
[5.46311331 56.54026794]
[-8.78908253 51.17419052]
[-19.62196732 40.47052383]
[-25.15867996 26.28374290]
[-24.43995094 11.07179737]
[-17.59030342 -2.52975512]
[-5.79648066 -12.16436195]
[8.89816570 -16.16276932]
[23.94770050 -13.83222866]
[36.74469757 -5.57652044]
[45.07200623 7.17400360]
[47.48686218 22.21023750]
[43.57088089 36.92706680]
[55.27050781 46.31422806]
[66.97013092 55.70138931]
[78.66975403 65.08854675]
[92.68647003 59.74703598]
[95.17158508 44.95433044]
[97.65670013 30.16162300]
[100.14182281 15.36891651]
[86.41143036 9.11281395]
[74.76870728 -0.48455271]
[66.00747681 -12.76881886]
[60.72508621 -26.90242386]
[59.28170013 -41.92171097]
[61.77573395 -56.80264664]
[68.03713989 -70.53061676]
[77.63899994 -82.16963196]
[89.92664337 -90.92612457]
[104.06228638 -96.20305634]
[119.08213806 -97.64064026]
[133.96211243 -95.14086151]
[147.68765259 -88.87416077]
[159.32296753 -79.26780701]
[168.07470703 -66.97677612]
[173.34619141 -52.83909988]
[174.77796936 -37.81869888]
[172.27244568 -22.93969727]
[166.00044250 -9.21656322]
[156.38960266 2.41503406]
[144.09519958 11.16203308]
[129.95547485 16.42804909]
[114.93453217 17.85403442]
[112.44940948 32.64674377]
[109.96429443 47.43944931]
[107.47917175 62.23215485]
[123.59363556 71.07547760]
[133.32905579 85.99430084]
[134.83328247 103.17576599]
[128.28149414 118.51528931]
[115.71174622 128.59677124]
[119.71949005 143.05145264]
[134.25051880 142.74134827]
[148.42129517 145.92889404]
[161.40295410 152.42294312]
[172.43728638 161.83915710]
[180.88102722 173.62258911]
[186.24340820 187.08055115]
[188.21461487 201.42318726]
[186.68371582 215.80996704]
[181.74490356 229.39880371]
[173.69168091 241.39547729]
[162.99945068 251.09997559]
[150.29743958 257.94729614]
[154.00358582 272.48223877]
[157.70974731 287.01718140]
[161.41590881 301.55212402]
[165.12207031 316.08706665]
[170.89660645 302.24310303]
[182.36083984 292.56988525]
[196.97901917 289.20703125]
[211.51773071 292.89837646]
[222.76113892 302.82739258]
[228.22232056 316.79791260]
[226.69328308 331.71978760]
[218.51226807 344.29241943]
[205.48883057 351.73486328]
[190.50361633 352.40090942]
[176.87124634 346.14324951]
[167.60623169 334.34420776]
[167.91828918 349.34097290]
[168.23034668 364.33770752]
[168.54240417 379.33447266]
[168.85444641 394.33120728]
[169.16650391 409.32797241]
[169.47856140 424.32473755]
[169.79061890 439.32147217]
[170.10267639 454.31823730]
[170.41473389 469.31500244]
[170.72679138 484.31173706]
[171.03884888 499.30850220]
[185.69383240 502.89926147]
[198.91964722 510.16152954]
[209.81451416 520.60009766]
[217.63562012 533.50335693]
[221.84968567 547.99139404]
[222.16940308 563.07647705]
[218.57298279 577.73010254]
[211.30561829 590.95312500]
[200.86280823 601.84393311]
[187.95658875 609.66003418]
[173.46688843 613.86853027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 116]
[24 115]
[25 114]
[26 113]
[27 112]
[38 100]
[39 99]
[44 64]
[45 63]
[46 62]
[47 61]
[65 94]
[66 93]
[67 92]
[68 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
