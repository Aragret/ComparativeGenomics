%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGCAUUGGGGGGGGGGCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGxxxxxxxxxxCCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACCCCCCCCCCCUCCACCAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.05285645]
[71.19830322 372.03680420]
[59.48964310 362.50738525]
[50.78712082 350.17172241]
[45.73651886 335.94522095]
[44.71262741 320.88351440]
[47.79142761 306.10437012]
[54.74444962 292.70443726]
[65.05573273 281.67810059]
[77.96011353 273.84359741]
[92.50000000 269.78228760]
[92.50000000 254.78228760]
[92.50000000 239.78228760]
[92.50000000 224.78228760]
[92.50000000 209.78228760]
[92.50000000 194.78228760]
[92.50000000 179.78228760]
[92.50000000 164.78228760]
[92.50000000 149.78228760]
[92.50000000 134.78228760]
[80.22438049 129.58009338]
[70.72524261 120.22488403]
[65.33626556 108.03010559]
[64.81404877 94.70790863]
[69.23192596 82.12871552]
[58.14060593 72.03006744]
[47.04929352 61.93141937]
[35.64888763 70.60287476]
[22.90712547 77.13801575]
[9.21986294 81.33522797]
[-4.98791981 83.06550598]
[-19.27531052 82.27642822]
[-33.19915009 78.99372864]
[-46.32777786 73.32046509]
[-58.25440979 65.43379974]
[-68.60974884 55.57944489]
[-77.07341766 44.06401443]
[-83.38386536 31.24549866]
[-87.34646606 17.52210999]
[-88.83948517 3.31992960]
[-87.81787109 -10.92032242]
[-84.31456757 -24.75697136]
[-78.43947601 -37.76107788]
[-70.37600708 -49.52974701]
[-81.03763580 -60.08103561]
[-91.69926453 -70.63232422]
[-100.05747986 -74.47836304]
[-102.47006989 -81.51576996]
[-112.90988159 -92.28657532]
[-128.07043457 -96.81077576]
[-131.37265015 -111.33470917]
[-141.81246948 -122.10552216]
[-152.25227356 -132.87632751]
[-162.69209290 -143.64714050]
[-178.64619446 -145.33415222]
[-187.15263367 -158.93635559]
[-181.68600464 -174.01930237]
[-166.43981934 -179.01264954]
[-153.10966492 -170.08592224]
[-151.92127991 -154.08694458]
[-141.48146057 -143.31614685]
[-131.04165649 -132.54533386]
[-120.60184479 -121.77452087]
[-106.18801880 -118.02072144]
[-102.13907623 -102.72638702]
[-91.69926453 -91.95558167]
[-81.14797211 -81.29395294]
[-70.48634338 -70.74266052]
[-59.82471848 -60.19137192]
[-46.87347794 -69.09289551]
[-32.44295883 -75.32768250]
[-17.07569313 -78.65944672]
[-1.34980667 -78.96107483]
[14.14274502 -76.21947479]
[28.81845474 -70.53615570]
[42.12424088 -62.12344742]
[53.55829239 -51.29656982]
[62.68899536 -38.46184158]
[69.17121887 -24.10140800]
[72.75936127 -8.75514793]
[73.31667328 6.99963522]
[70.82044220 22.56992722]
[65.36292267 37.36931992]
[57.14794159 50.84010315]
[68.23925781 60.93875122]
[79.33057404 71.03739929]
[93.99837494 64.92810822]
[109.86298370 65.81259155]
[123.76078033 73.51448059]
[132.92037964 86.49792480]
[147.68643188 83.85906219]
[162.45248413 81.22019196]
[171.49536133 68.53697205]
[186.50782776 66.07113647]
[198.54362488 74.77029419]
[213.30967712 72.13143158]
[228.07572937 69.49256134]
[242.84178162 66.85369873]
[257.60784912 64.21483612]
[272.37390137 61.57597351]
[287.13995361 58.93710709]
[290.01864624 44.03484344]
[298.08959961 31.18088150]
[310.26126099 22.11361504]
[324.88751221 18.05931854]
[339.99026489 19.56630325]
[353.52700806 26.43075752]
[363.66702271 37.72432709]
[369.03894043 51.91964340]
[368.91622925 67.09690857]
[363.31555176 81.20352173]
[352.99426270 92.33168030]
[339.34832764 98.97639465]
[324.22317505 100.23901367]
[309.66436768 95.94878387]
[297.64089966 86.68592834]
[289.77880859 73.70316315]
[275.01275635 76.34202576]
[260.24670410 78.98088837]
[245.48065186 81.61975861]
[230.71459961 84.25862122]
[215.94854736 86.89748383]
[201.18247986 89.53634644]
[192.90473938 101.86576843]
[177.96745300 104.75230408]
[165.09135437 95.98625183]
[150.32530212 98.62511444]
[135.55923462 101.26397705]
[131.61819458 116.32013702]
[121.62801361 128.25396729]
[107.50000000 134.78228760]
[107.50000000 149.78228760]
[107.50000000 164.78228760]
[107.50000000 179.78228760]
[107.50000000 194.78228760]
[107.50000000 209.78228760]
[107.50000000 224.78228760]
[107.50000000 239.78228760]
[107.50000000 254.78228760]
[107.50000000 269.78228760]
[122.03988647 273.84359741]
[134.94427490 281.67810059]
[145.25555420 292.70443726]
[152.20857239 306.10437012]
[155.28736877 320.88351440]
[154.26348877 335.94522095]
[149.21287537 350.17172241]
[140.51036072 362.50738525]
[128.80169678 372.03680420]
[114.95575714 378.05285645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 86]
[26 85]
[27 84]
[44 69]
[45 68]
[46 67]
[48 66]
[49 65]
[51 63]
[52 62]
[53 61]
[54 60]
[90 128]
[91 127]
[92 126]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
