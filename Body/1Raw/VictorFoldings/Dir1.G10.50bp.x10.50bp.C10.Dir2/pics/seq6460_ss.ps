%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACCUCCCUCUCGGGGGGGGGGUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUxxxxxxxxxxCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCCCCCCCCCCCUACCUCCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 413.20379639]
[70.66226196 408.69705200]
[57.50136948 401.39117432]
[46.08077240 391.58532715]
[36.86813354 379.68103027]
[30.24070549 366.16577148]
[26.46987534 351.59301758]
[25.71005821 336.55944824]
[27.99236870 321.68075562]
[33.22334671 307.56616211]
[41.18878555 294.79367065]
[51.56250763 283.88629150]
[63.91971207 275.29067993]
[77.75438690 269.35885620]
[92.50000000 266.33364868]
[92.50000000 251.33366394]
[92.50000000 236.33366394]
[92.50000000 221.33366394]
[92.50000000 206.33366394]
[92.50000000 191.33366394]
[92.50000000 176.33366394]
[92.50000000 161.33366394]
[92.50000000 146.33366394]
[92.50000000 131.33366394]
[92.50000000 116.33366394]
[85.67347717 129.69026184]
[71.20800781 133.65888977]
[58.52139282 125.65577698]
[55.87332153 110.89137268]
[64.98782349 98.97811127]
[79.93045044 97.67203522]
[66.03010559 92.03462219]
[52.12976074 86.39720917]
[38.22941589 80.75979614]
[24.32907104 75.12238312]
[10.42872715 69.48497009]
[-3.47161698 63.84755325]
[-17.37196159 58.21014023]
[-31.38097191 52.84845734]
[-45.49317932 47.76459885]
[-61.09892654 50.36675262]
[-70.45056152 38.77381516]
[-84.56277466 33.68996048]
[-98.67498016 28.60610199]
[-112.78718567 23.52224541]
[-126.89939117 18.43838692]
[-142.93544006 21.87021065]
[-153.72317505 9.51882744]
[-148.16511536 -5.90971661]
[-131.97891235 -8.54385948]
[-121.81553650 4.32618046]
[-107.70333099 9.41003799]
[-93.59112549 14.49389458]
[-79.47891235 19.57775307]
[-65.36670685 24.66160965]
[-50.77035904 21.69582558]
[-40.40932083 33.65239334]
[-26.29711342 38.73624802]
[-21.62722015 37.52525330]
[-16.14907837 39.27293396]
[-11.73454762 44.30979538]
[2.16579676 49.94720840]
[16.06614113 55.58462143]
[29.96648598 61.22203445]
[43.86682892 66.85945129]
[57.76717377 72.49686432]
[71.66751862 78.13427734]
[85.56786346 83.77169037]
[92.30052185 82.80456543]
[98.16661072 84.14199066]
[102.48168945 87.15069580]
[104.86510468 91.02377319]
[116.69741821 81.80442810]
[128.52973938 72.58508301]
[120.63523102 59.81307602]
[114.16793060 46.26238251]
[109.20365906 32.09187698]
[105.80061340 17.46770096]
[103.99869537 2.56131601]
[103.81903839 -12.45250988]
[105.26373291 -27.39774513]
[108.31585693 -42.09916687]
[112.93961334 -56.38440704]
[119.08080292 -70.08597565]
[126.66741180 -83.04323578]
[135.61050415 -95.10427094]
[145.80520630 -106.12766266]
[157.13201904 -115.98416901]
[169.45811462 -124.55822754]
[182.63899231 -131.74932861]
[196.52009583 -137.47312927]
[210.93869019 -141.66255188]
[225.72573853 -144.26844788]
[240.70783997 -145.26029968]
[255.70935059 -144.62644958]
[270.55438232 -142.37432861]
[285.06890869 -138.53036499]
[299.08273315 -133.13960266]
[312.43154907 -126.26526642]
[324.95883179 -117.98794556]
[336.51773071 -108.40467834]
[346.97271729 -97.62783813]
[356.20123291 -85.78376770]
[364.09503174 -73.01133728]
[370.56161499 -59.46029663]
[375.52511597 -45.28952408]
[378.92736816 -30.66516304]
[380.72848511 -15.75868034]
[380.90734863 -0.74484515]
[379.46185303 14.20031357]
[376.40893555 28.90157127]
[371.78439331 43.18656158]
[365.64248657 56.88780212]
[358.05517578 69.84465790]
[349.11145020 81.90520477]
[338.91613770 92.92804718]
[327.58880615 102.78394318]
[315.26223755 111.35734558]
[302.08099365 118.54772949]
[288.19955444 124.27079010]
[273.78073120 128.45942688]
[258.99356079 131.06454468]
[244.01139832 132.05557251]
[229.00991821 131.42091370]
[214.16500854 129.16799927]
[199.65069580 125.32325745]
[185.63716125 119.93174744]
[172.28872681 113.05668640]
[159.76188660 104.77868652]
[148.20349121 95.19480133]
[137.74906921 84.41739655]
[125.91676331 93.63674164]
[114.08444214 102.85608673]
[107.50000000 116.33366394]
[107.50000000 131.33366394]
[107.50000000 146.33366394]
[107.50000000 161.33366394]
[107.50000000 176.33366394]
[107.50000000 191.33366394]
[107.50000000 206.33366394]
[107.50000000 221.33366394]
[107.50000000 236.33366394]
[107.50000000 251.33366394]
[107.50000000 266.33364868]
[122.24561310 269.35885620]
[136.08029175 275.29067993]
[148.43750000 283.88629150]
[158.81121826 294.79367065]
[166.77665710 307.56616211]
[172.00762939 321.68075562]
[174.28994751 336.55944824]
[173.53012085 351.59301758]
[169.75929260 366.16577148]
[163.13186646 379.68103027]
[153.91921997 391.58532715]
[142.49862671 401.39117432]
[129.33773804 408.69705200]
[114.97548676 413.20379639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[72 133]
[73 132]
[74 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
