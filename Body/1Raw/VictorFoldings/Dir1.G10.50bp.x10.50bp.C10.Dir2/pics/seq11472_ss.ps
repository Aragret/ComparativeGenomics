%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCCCAUGGGGGGGGGGCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGxxxxxxxxxxAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCCCCCCUCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[103.28538513 200.35209656]
[102.50368500 185.37248230]
[103.42021179 170.40049744]
[106.02148438 155.63540649]
[105.60552216 140.64117432]
[105.18955994 125.64694214]
[98.36598206 139.00503540]
[91.54241180 152.36314392]
[84.71883392 165.72123718]
[86.10019684 182.06210327]
[72.48656464 191.20545959]
[57.88246536 183.74540710]
[57.31135178 167.35620117]
[71.36073303 158.89765930]
[78.18431091 145.53956604]
[85.00788116 132.18147278]
[91.83145905 118.82336426]
[84.87110138 105.53602600]
[70.00450897 103.53997040]
[55.29745865 109.37206268]
[43.71298218 100.00994873]
[28.84638214 98.01389313]
[13.97978306 96.01783752]
[-0.88681531 94.02177429]
[-15.75341415 92.02571869]
[-30.74076653 92.64154816]
[-45.39349365 95.85054016]
[-60.04621506 99.05953979]
[-74.69894409 102.26853180]
[-81.79439545 116.20368958]
[-96.20730591 122.27015686]
[-111.13233948 117.60353851]
[-119.52235413 104.40725708]
[-117.41583252 88.91220856]
[-105.80742645 78.43466949]
[-90.17825317 77.92182159]
[-77.90793610 87.61581421]
[-63.25521469 84.40681458]
[-48.60248947 81.19781494]
[-33.94976425 77.98882294]
[-48.08713913 72.97537231]
[-59.88659668 63.71401596]
[-68.11519623 51.17248154]
[-71.91312408 36.66125107]
[-70.88351440 21.69663048]
[-65.13396454 7.84229231]
[-55.26525116 -3.45409989]
[-42.30857086 -11.01216984]
[-27.61778641 -14.04216099]
[-12.72796154 -12.22746754]
[0.80504245 -5.75770712]
[11.56714153 4.69108343]
[18.43378639 18.02709389]
[20.68747139 32.85682297]
[18.09270477 47.63069153]
[10.92061901 60.80495453]
[-0.07936456 71.00301361]
[-13.75735664 77.15911865]
[1.10924160 79.15518188]
[15.97584057 81.15123749]
[30.84243965 83.14729309]
[45.70903778 85.14334869]
[59.35272598 79.16848755]
[72.00056458 88.67337036]
[86.86716461 90.66942596]
[74.77745056 81.79029083]
[60.06347656 78.87501526]
[46.70495987 72.05226135]
[35.71749115 61.84071732]
[27.93639755 49.01673508]
[23.95323944 34.55525208]
[24.07083511 19.55571365]
[28.28024864 5.15846252]
[36.26145554 -7.54194498]
[47.40768051 -17.57995605]
[60.87152863 -24.19242668]
[75.62940979 -26.87664223]
[90.55934143 -25.42853355]
[104.52628326 -19.95819473]
[116.46838379 -10.88150883]
[125.47774506 1.11146510]
[130.86943054 15.10895729]
[132.23352051 30.04680252]
[129.46632385 44.78934860]
[122.77821350 58.21578598]
[112.68143463 69.30222321]
[108.23719788 83.62872314]
[119.00587463 73.18671417]
[129.77455139 62.74470520]
[140.54322815 52.30269623]
[142.74929810 45.96425247]
[147.18298340 42.28589630]
[151.97494507 41.66437149]
[163.16325378 31.67327499]
[165.50059509 15.80140305]
[179.43894958 7.85772943]
[194.28599548 13.93596268]
[198.65234375 29.37340164]
[189.18850708 42.32776260]
[173.15434265 42.86157227]
[161.96604919 52.85266876]
[150.98524475 63.07137680]
[140.21656799 73.51338959]
[129.44789124 83.95539856]
[118.67920685 94.39740753]
[133.13577271 90.39646149]
[147.59234619 86.39551544]
[159.40771484 77.15444946]
[172.19190979 69.30815125]
[185.78106689 62.95719528]
[200.00100708 58.18298340]
[214.66947937 55.04671478]
[229.59843445 53.58858490]
[244.59654236 53.82728958]
[259.47152710 55.75976562]
[274.03277588 59.36124420]
[288.09356689 64.58555603]
[301.47375488 71.36575317]
[314.00177002 79.61490631]
[325.51705933 89.22729492]
[335.87203979 100.07969666]
[344.93392944 112.03302002]
[352.58663940 124.93404388]
[358.73202515 138.61740112]
[363.29132080 152.90769958]
[366.20611572 167.62178040]
[367.43902588 182.57101440]
[366.97427368 197.56381226]
[364.81777954 212.40798950]
[360.99719238 226.91326904]
[355.56152344 240.89373779]
[348.58038330 254.17018127]
[340.14331055 266.57241821]
[330.35842896 277.94152832]
[319.35116577 288.13171387]
[307.26260376 297.01239014]
[294.24768066 304.46972656]
[280.47323608 310.40814209]
[266.11584473 314.75152588]
[251.35949707 317.44418335]
[236.39335632 318.45159912]
[221.40927124 317.76086426]
[206.59928894 315.38085938]
[192.15324402 311.34204102]
[178.25631714 305.69622803]
[165.08662415 298.51577759]
[152.81295776 289.89270020]
[141.59268188 279.93753052]
[131.56956482 268.77792358]
[122.87213135 256.55685425]
[115.61182404 243.43099976]
[109.88172913 229.56860352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[18 65]
[19 64]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 40]
[27 39]
[28 38]
[29 37]
[87 105]
[88 104]
[89 103]
[90 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
