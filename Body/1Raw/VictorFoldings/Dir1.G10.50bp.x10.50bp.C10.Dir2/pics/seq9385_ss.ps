%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAACUCAAGGGGGGGGGGCGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUxxxxxxxxxxAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCCCCCCCCCCCACAACCCAA\
) } def
/len { sequence length } bind def

/coor [
[83.18148041 376.65209961]
[69.15953064 371.09909058]
[56.95957565 362.23275757]
[47.34850693 350.61044312]
[40.93048096 336.96273804]
[38.10894394 322.14755249]
[39.06126022 307.09619141]
[43.72756577 292.75476074]
[51.81452942 280.02481079]
[62.81380463 269.70654297]
[76.03396606 262.44854736]
[90.64397430 258.70712280]
[90.64397430 243.70712280]
[90.64397430 228.70712280]
[90.64397430 213.70712280]
[90.64397430 198.70712280]
[90.64397430 183.70712280]
[90.64397430 168.70712280]
[90.64397430 153.70712280]
[90.64397430 138.70712280]
[90.64397430 123.70712280]
[90.64397430 108.70712280]
[85.36923218 94.66514587]
[75.49353027 83.37487030]
[65.61782074 72.08458710]
[57.56015778 67.64952087]
[55.65816116 60.45962143]
[46.01634598 48.96895599]
[36.37453461 37.47828674]
[26.73271942 25.98762131]
[18.76781464 21.38804817]
[17.01383972 14.16061592]
[7.60998297 2.47440767]
[-1.79387414 -9.21180058]
[-14.52488899 -1.24577177]
[-28.10873032 5.15857077]
[-42.35470200 9.91131973]
[-57.06281662 12.94575500]
[-72.02658844 14.21927643]
[-87.03595734 13.71400547]
[-101.88020325 11.43703747]
[-116.35095215 7.42033529]
[-130.24504089 1.72028804]
[-143.36743164 -5.58308411]
[-155.53390503 -14.38725376]
[-166.57365417 -24.56862450]
[-176.33169556 -35.98426437]
[-184.67106628 -48.47391891]
[-191.47465515 -61.86224747]
[-196.64698792 -75.96130371]
[-200.11543274 -90.57315826]
[-201.83131409 -105.49267578]
[-201.77052307 -120.51042175]
[-199.93391418 -135.41555786]
[-196.34729004 -149.99885559]
[-191.06098938 -164.05557251]
[-184.14921570 -177.38838196]
[-175.70901489 -189.81011963]
[-165.85887146 -201.14639282]
[-154.73706055 -211.23805237]
[-142.49971008 -219.94343567]
[-129.31861877 -227.14033508]
[-115.37884521 -232.72770691]
[-100.87605286 -236.62712097]
[-86.01385498 -238.78384399]
[-71.00089264 -239.16758728]
[-56.04791641 -237.77296448]
[-41.36485291 -234.61955261]
[-27.15782547 -229.75163269]
[-13.62627697 -223.23751831]
[-0.96017021 -215.16868591]
[10.66268158 -205.65838623]
[21.07911301 -194.84014893]
[30.14289284 -182.86584473]
[37.72677994 -169.90354919]
[43.72430801 -156.13525391]
[48.05128098 -141.75422668]
[50.64695740 -126.96237946]
[51.47489548 -111.96735382]
[50.52347183 -96.97965240]
[47.80604553 -82.20968628]
[43.36075974 -67.86479950]
[37.25002670 -54.14636612]
[29.55962563 -41.24698257]
[20.39752197 -29.34773064]
[9.89233494 -18.61565781]
[19.29619217 -6.92944956]
[28.70004845 4.75675917]
[38.22338486 16.34580803]
[47.86520004 27.83647346]
[57.50701523 39.32714081]
[67.14882660 50.81780624]
[76.90810394 62.20888138]
[86.78380585 73.49916077]
[96.65951538 84.78944397]
[95.54517365 69.83089447]
[105.83747864 58.91904068]
[120.83557129 59.15809631]
[130.77488708 70.39242554]
[129.18437195 85.30786133]
[117.09998322 94.19355011]
[132.09919739 94.34754944]
[147.88778687 84.92678070]
[162.65055847 94.36635590]
[178.24240112 84.62340546]
[193.19586182 93.75788116]
[208.18873596 93.29595184]
[223.18162537 92.83403015]
[238.17451477 92.37210083]
[246.02319336 79.09046936]
[259.81677246 72.18099976]
[275.15374756 73.84847260]
[287.14016724 83.56079865]
[291.95120239 98.21881866]
[288.05166626 113.14521027]
[276.68588257 123.57701111]
[261.48062134 126.18547821]
[247.28787231 120.13825226]
[238.63644409 107.36499023]
[223.64355469 107.82691193]
[208.65066528 108.28884125]
[193.65777588 108.75076294]
[185.11114502 117.36570740]
[172.58323669 117.83792114]
[162.80455017 109.36556244]
[154.08283997 117.80320740]
[141.54788208 118.01810455]
[131.94519043 109.34675598]
[116.94598389 109.19275665]
[110.88583374 110.06756592]
[105.64397430 108.70712280]
[105.64397430 123.70712280]
[105.64397430 138.70712280]
[105.64397430 153.70712280]
[105.64397430 168.70712280]
[105.64397430 183.70712280]
[105.64397430 198.70712280]
[105.64397430 213.70712280]
[105.64397430 228.70712280]
[105.64397430 243.70712280]
[105.64397430 258.70712280]
[120.25399017 262.44854736]
[133.47415161 269.70654297]
[144.47341919 280.02481079]
[152.56039429 292.75476074]
[157.22669983 307.09619141]
[158.17901611 322.14755249]
[155.35746765 336.96273804]
[148.93945312 350.61044312]
[139.32838440 362.23275757]
[127.12841797 371.09909058]
[113.10647583 376.65209961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 95]
[24 94]
[25 93]
[27 92]
[28 91]
[29 90]
[30 89]
[32 88]
[33 87]
[34 86]
[101 129]
[102 128]
[104 125]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
