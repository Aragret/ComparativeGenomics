%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAUCACGGGGGGGGGGCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGxxxxxxxxxxGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCCCCCCCCCCCUCACAUGAC\
) } def
/len { sequence length } bind def

/coor [
[103.79418182 365.73098755]
[89.94824219 359.71496582]
[78.23957825 350.18554688]
[69.53705597 337.84988403]
[64.48645020 323.62335205]
[63.46256256 308.56167603]
[66.54135895 293.78253174]
[73.49438477 280.38259888]
[83.80566406 269.35626221]
[96.71004486 261.52175903]
[111.24993134 257.46044922]
[111.24993134 242.46044922]
[111.24993134 227.46044922]
[111.24993134 212.46044922]
[111.24993134 197.46044922]
[111.24993134 182.46044922]
[111.24993134 167.46044922]
[111.24993134 152.46044922]
[111.24993134 137.46044922]
[111.24993134 122.46044159]
[94.15779114 129.42948914]
[73.64575195 122.85976410]
[59.15015793 126.71692657]
[44.65456009 130.57408142]
[37.10800552 135.83729553]
[29.81722832 134.35734558]
[15.24452496 137.91210938]
[3.67108822 148.69943237]
[-10.52724552 144.19869995]
[-20.05503845 157.10609436]
[-36.09165192 157.56057739]
[-46.33517075 145.21351624]
[-42.92764282 129.53651428]
[-28.48303223 122.55563354]
[-14.08200741 129.62599182]
[-3.55090833 119.09294128]
[11.68976307 123.33940887]
[26.26246643 119.78465271]
[40.79740143 116.07849121]
[55.29299927 112.22132874]
[69.78859711 108.36416626]
[71.49008179 101.05972290]
[74.89305878 86.45082855]
[76.59455109 79.14638519]
[65.29554749 69.28066254]
[53.69420624 59.77230453]
[41.80182648 50.63056946]
[29.90944481 41.48883438]
[15.74542427 47.42819977]
[0.51137263 45.47391510]
[-11.69482708 36.15166855]
[-17.58976746 21.96910095]
[-15.58773899 6.74124956]
[-6.22727823 -5.43566942]
[7.97369814 -11.28612518]
[23.19519997 -9.23637486]
[35.34271622 0.16220824]
[41.14863205 14.38145351]
[39.05117798 29.59645462]
[50.94355774 38.73818970]
[62.83593750 47.87992477]
[66.42098999 47.75785446]
[70.23947144 49.40736389]
[73.43891907 52.91677094]
[75.16127014 57.98165512]
[86.46027374 67.84738159]
[114.95546722 73.98923492]
[124.91292572 96.77841949]
[137.35237122 88.39627075]
[149.79180908 80.01412964]
[144.16578674 65.56266785]
[141.88221741 50.23078918]
[143.05155945 34.78091812]
[147.61260986 19.98067474]
[155.33573914 6.56470680]
[165.83447266 -4.80176258]
[178.58474731 -13.55592060]
[192.95115662 -19.26523209]
[208.21855164 -21.64881325]
[223.62770081 -20.59124565]
[238.41297913 -16.14816284]
[251.84046936 -8.54333019]
[263.24435425 1.84261703]
[275.50671387 -6.79649925]
[278.67446899 -12.71872330]
[283.63079834 -15.66257954]
[288.46371460 -15.52740192]
[301.07485962 -23.64894485]
[313.68597412 -31.77048683]
[326.29711914 -39.89202881]
[338.90823364 -48.01357269]
[351.51934814 -56.13511276]
[348.77182007 -71.08567810]
[351.95962524 -85.94859314]
[360.59671021 -98.45736694]
[373.36593628 -106.70451355]
[388.32009888 -109.43238831]
[403.17880249 -106.22501373]
[415.67620850 -97.57150269]
[423.90655518 -84.79143524]
[426.61474609 -69.83369446]
[423.38784790 -54.97921753]
[414.71789551 -42.49320602]
[401.92700195 -34.27968979]
[386.96572876 -31.59116745]
[372.11550903 -34.83761978]
[359.64089966 -43.52398300]
[347.02978516 -35.40244293]
[334.41864014 -27.28090096]
[321.80752563 -19.15935898]
[309.19638062 -11.03781605]
[296.58526611 -2.91627407]
[284.14581299 5.46586895]
[271.88345337 14.10498524]
[277.56750488 27.47834206]
[280.33416748 41.74990463]
[280.05886841 56.29064178]
[276.75125122 70.45910645]
[270.55471802 83.62973785]
[261.74029541 95.22051239]
[250.69479370 104.71860504]
[237.90376282 111.70314026]
[223.93020630 115.86378479]
[209.38975525 117.01457977]
[194.92361450 115.10224152]
[181.17021179 110.20859528]
[168.73707581 102.54710388]
[158.17395020 92.45356750]
[145.73451233 100.83571625]
[133.29507446 109.21785736]
[126.24993134 122.46044159]
[126.24993134 137.46044922]
[126.24993134 152.46044922]
[126.24993134 167.46044922]
[126.24993134 182.46044922]
[126.24993134 197.46044922]
[126.24993134 212.46044922]
[126.24993134 227.46044922]
[126.24993134 242.46044922]
[126.24993134 257.46044922]
[140.78982544 261.52175903]
[153.69419861 269.35626221]
[164.00549316 280.38259888]
[170.95851135 293.78253174]
[174.03730774 308.56167603]
[173.01341248 323.62335205]
[167.96281433 337.84988403]
[159.26028442 350.18554688]
[147.55162048 359.71496582]
[133.70568848 365.73098755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 41]
[23 40]
[24 39]
[26 38]
[27 37]
[29 35]
[44 66]
[45 65]
[46 61]
[47 60]
[48 59]
[68 130]
[69 129]
[70 128]
[83 114]
[84 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
