%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCCCUCACGGGGGGGGGGCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUxxxxxxxxxxCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCCCCCCCCCCCUACCUCCCUGAC\
) } def
/len { sequence length } bind def

/coor [
[100.76229858 479.34420776]
[86.49053192 474.53475952]
[73.58654785 466.76937866]
[62.65388870 456.41122437]
[54.20390320 443.94479370]
[48.63180923 429.95318604]
[46.19821930 415.09075928]
[47.01696014 400.05267334]
[51.04973602 385.54229736]
[58.10792923 372.23831177]
[67.86141205 360.76296997]
[79.85400391 351.65298462]
[93.52478027 345.33444214]
[108.23433685 342.10287476]
[108.23433685 327.10287476]
[108.23433685 312.10287476]
[108.23433685 297.10287476]
[108.23433685 282.10287476]
[108.23433685 267.10287476]
[108.23433685 252.10287476]
[108.23433685 237.10287476]
[108.23433685 222.10287476]
[108.23433685 207.10287476]
[108.23433685 192.10287476]
[96.49826050 183.51530457]
[92.74950409 168.60243225]
[99.74389648 153.97741699]
[115.21913147 146.82922363]
[109.09980011 133.13420105]
[102.98047638 119.43917084]
[103.48839569 134.43057251]
[93.81244659 145.89250183]
[78.94835663 147.90716553]
[66.57048798 139.43437195]
[63.06955338 124.84864807]
[70.25309753 111.68062592]
[84.41429901 106.72906494]
[69.43305969 105.97899628]
[55.09345245 113.93560791]
[41.17419434 105.26460266]
[41.99422455 88.88597107]
[56.70996857 81.64864349]
[70.18312836 90.99775696]
[85.16436005 91.74782562]
[89.31174469 77.33258820]
[76.22247314 70.00653839]
[63.13319778 62.68049622]
[50.04392624 55.35445023]
[36.95465469 48.02840424]
[21.18651581 50.98567200]
[9.13781166 40.39282990]
[10.05127430 24.37580490]
[23.22617340 15.22148418]
[38.55585480 19.95228004]
[44.28069687 34.93913269]
[57.36997223 42.26517868]
[70.45924377 49.59122086]
[83.54851532 56.91726685]
[96.63778687 64.24330902]
[103.54515076 61.32127380]
[93.71826172 49.98847961]
[101.45986938 37.14062119]
[116.07115936 40.53330612]
[117.35988617 55.47719574]
[124.26725006 52.55515671]
[128.12536621 38.05981445]
[131.98348999 23.56447411]
[135.84161377 9.06913280]
[122.22927094 2.67037582]
[109.97835541 -6.05629969]
[99.48268127 -16.83036804]
[91.07963562 -29.30548668]
[85.03933716 -43.08063126]
[81.55596924 -57.71298981]
[80.74150085 -72.73219299]
[82.62210846 -87.65543365]
[87.13734436 -102.00299072]
[94.14206696 -115.31365204]
[103.41109467 -127.15953064]
[114.64646912 -137.15983582]
[127.48702240 -144.99308777]
[141.51998901 -150.40750122]
[156.29425049 -153.22901917]
[171.33488464 -153.36691284]
[186.15840149 -150.81678772]
[200.28828430 -145.66059875]
[213.27030945 -138.06410217]
[224.68716431 -128.27149963]
[234.17184448 -116.59757233]
[241.41944885 -103.41758728]
[246.19702148 -89.15523529]
[248.35095215 -74.26898956]
[247.81201172 -59.23737717]
[244.59753418 -44.54360580]
[238.81083679 -30.66002083]
[230.63793945 -18.03291893]
[220.34158325 -7.06821156]
[208.25274658 1.88163364]
[194.76004028 8.52891445]
[180.29718018 12.65994930]
[165.32908630 14.14194202]
[150.33694458 12.92725277]
[146.47883606 27.42259407]
[142.62071228 41.91793442]
[138.76258850 56.41327667]
[116.67550659 113.31984711]
[122.79483795 127.01487732]
[128.91415405 140.70989990]
[141.20622253 149.30671692]
[156.16944885 150.35639954]
[171.13267517 151.40606689]
[186.09590149 152.45574951]
[192.85021973 138.83782959]
[204.30503845 128.84504700]
[218.71356201 124.00122833]
[233.87863159 125.04501343]
[247.48764038 131.81723022]
[257.46536255 143.28518677]
[262.29022217 157.70007324]
[261.22647095 172.86375427]
[254.43635559 186.46385193]
[242.95529175 196.42645264]
[228.53405762 201.23236084]
[213.37181091 200.14866638]
[199.78065491 193.34066772]
[189.83314514 181.84651184]
[185.04623413 167.41897583]
[170.08300781 166.36929321]
[155.11976624 165.31962585]
[140.15653992 164.26994324]
[139.50396729 176.98718262]
[133.06799316 187.00279236]
[123.23433685 192.10287476]
[123.23433685 207.10287476]
[123.23433685 222.10287476]
[123.23433685 237.10287476]
[123.23433685 252.10287476]
[123.23433685 267.10287476]
[123.23433685 282.10287476]
[123.23433685 297.10287476]
[123.23433685 312.10287476]
[123.23433685 327.10287476]
[123.23433685 342.10287476]
[137.94389343 345.33444214]
[151.61466980 351.65298462]
[163.60725403 360.76296997]
[173.36074829 372.23831177]
[180.41893005 385.54229736]
[184.45172119 400.05267334]
[185.27046204 415.09075928]
[182.83686829 429.95318604]
[177.26477051 443.94479370]
[168.81478882 456.41122437]
[157.88212585 466.76937866]
[144.97814941 474.53475952]
[130.70637512 479.34420776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[28 108]
[29 107]
[30 106]
[37 44]
[38 43]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[65 105]
[66 104]
[67 103]
[68 102]
[109 130]
[110 129]
[111 128]
[112 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
