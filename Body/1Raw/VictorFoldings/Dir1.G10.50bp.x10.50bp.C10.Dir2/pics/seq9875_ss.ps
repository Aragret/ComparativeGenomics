%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAACCCGGGGGGGGGGCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCxxxxxxxxxxUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCCCCCCCCCCCUAACAGCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 467.12423706]
[71.19830322 461.10821533]
[59.48964310 451.57879639]
[50.78712082 439.24313354]
[45.73651886 425.01660156]
[44.71262741 409.95492554]
[47.79142761 395.17575073]
[54.74444962 381.77581787]
[65.05573273 370.74948120]
[77.96011353 362.91497803]
[92.50000000 358.85366821]
[92.50000000 343.85366821]
[92.50000000 328.85366821]
[92.50000000 313.85366821]
[92.50000000 298.85366821]
[92.50000000 283.85366821]
[92.50000000 268.85366821]
[92.50000000 253.85366821]
[92.50000000 238.85366821]
[92.50000000 223.85366821]
[80.36157990 215.26316833]
[75.55226898 201.00361633]
[80.11502075 186.47659302]
[92.50000000 177.31588745]
[92.50000000 162.31588745]
[92.50000000 147.31588745]
[92.50000000 132.31588745]
[92.50000000 117.31588745]
[78.12660217 99.10034943]
[92.00901031 76.40289307]
[84.01908875 63.70796585]
[70.58068848 70.40033722]
[56.54270554 75.72140503]
[42.04467392 79.61827850]
[27.23067665 82.05223083]
[12.24794960 82.99907684]
[-2.75459909 82.44939423]
[-17.62786293 80.40864563]
[-32.22402191 76.89712524]
[-46.39800644 71.94972992]
[-60.00894928 65.61562347]
[-72.92156982 57.95776749]
[-85.00753784 49.05226517]
[-96.14673615 38.98762894]
[-106.22844696 27.86388588]
[-115.15248108 15.79159260]
[-122.83013916 2.89073205]
[-129.18511963 -10.71047688]
[-134.15425110 -24.87685776]
[-137.68815613 -39.46760941]
[-139.75170898 -54.33772659]
[-140.32440186 -69.33941650]
[-139.40055847 -84.32357788]
[-136.98933411 -99.14128876]
[-133.11470032 -113.64528656]
[-127.81517029 -127.69140625]
[-121.14341736 -141.14006042]
[-113.16574860 -153.85758972]
[-103.96145630 -165.71759033]
[-93.62200165 -176.60217285]
[-82.25016785 -186.40319824]
[-69.95896149 -195.02322388]
[-56.87054062 -202.37658691]
[-43.11499786 -208.39019775]
[-28.82903862 -213.00431824]
[-14.15464973 -216.17304993]
[0.76232618 -217.86492920]
[15.77363300 -218.06312561]
[30.73007774 -216.76567078]
[45.48301315 -213.98545837]
[59.88581085 -209.75013733]
[73.79532623 -204.10177612]
[87.07332611 -197.09654236]
[99.58782959 -188.80401611]
[111.21446991 -179.30665588]
[121.83768463 -168.69883728]
[131.35189819 -157.08598328]
[139.66255188 -144.58351135]
[146.68704224 -131.31568909]
[152.35556030 -117.41438293]
[156.61177063 -103.01773834]
[159.41336060 -88.26885223]
[160.73249817 -73.31430817]
[160.55607605 -58.30273056]
[158.88583374 -43.38331604]
[155.73838806 -28.70434570]
[151.14498901 -14.41171074]
[145.15132141 -0.64746130]
[137.81695557 12.45160484]
[129.21475220 24.75529861]
[119.43024445 36.14133835]
[108.56065369 46.49655914]
[96.71401978 55.71804810]
[104.70393372 68.41297913]
[118.60649109 74.04493713]
[133.17919922 70.49017334]
[147.75189209 66.93540955]
[153.71659851 52.73229599]
[166.74851990 44.85684586]
[181.74157715 46.14987183]
[192.96398926 55.90669250]
[207.53669739 52.35193253]
[222.10939026 48.79716873]
[236.68209839 45.24240875]
[251.25480652 41.68764496]
[262.72879028 29.97102165]
[278.54324341 34.31100845]
[282.42959595 50.24300385]
[270.38989258 61.37753296]
[254.80955505 56.26034927]
[240.23686218 59.81510925]
[225.66415405 63.36987305]
[211.09144592 66.92463684]
[196.51875305 70.47939301]
[191.04957581 84.30784607]
[178.33596802 92.35944366]
[163.14144897 91.36934662]
[151.30665588 81.50811005]
[136.73396301 85.06287384]
[122.16125488 88.61763763]
[122.84132385 101.62522888]
[117.03941345 112.07598877]
[107.50000000 117.31588745]
[107.50000000 132.31588745]
[107.50000000 147.31588745]
[107.50000000 162.31588745]
[107.50000000 177.31588745]
[119.88497925 186.47659302]
[124.44773102 201.00361633]
[119.63842010 215.26316833]
[107.50000000 223.85366821]
[107.50000000 238.85366821]
[107.50000000 253.85366821]
[107.50000000 268.85366821]
[107.50000000 283.85366821]
[107.50000000 298.85366821]
[107.50000000 313.85366821]
[107.50000000 328.85366821]
[107.50000000 343.85366821]
[107.50000000 358.85366821]
[122.03988647 362.91497803]
[134.94427490 370.74948120]
[145.25555420 381.77581787]
[152.20857239 395.17575073]
[155.28736877 409.95492554]
[154.26348877 425.01660156]
[149.21287537 439.24313354]
[140.51036072 451.57879639]
[128.80169678 461.10821533]
[114.95575714 467.12423706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 127]
[25 126]
[26 125]
[27 124]
[28 123]
[30 94]
[31 93]
[95 120]
[96 119]
[97 118]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
