%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUCACGGGGGGGGGGCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAxxxxxxxxxxUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCCCCCCCCCCCACCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[98.29244232 370.42062378]
[84.44650269 364.40457153]
[72.73783875 354.87515259]
[64.03531647 342.53948975]
[58.98471451 328.31298828]
[57.96082306 313.25128174]
[61.03962326 298.47213745]
[67.99264526 285.07220459]
[78.30393219 274.04586792]
[91.20831299 266.21136475]
[105.74819946 262.15005493]
[105.74819946 247.15005493]
[105.74819946 232.15005493]
[105.74819946 217.15005493]
[105.74819946 202.15005493]
[105.74819946 187.15005493]
[105.74819946 172.15005493]
[105.74819946 157.15005493]
[105.74819946 142.15005493]
[105.74819946 127.15005493]
[94.07648468 125.89982605]
[84.46955109 120.08024597]
[78.52177429 111.15435791]
[77.00521088 101.04730988]
[79.78748322 91.73956299]
[68.59172058 81.75683594]
[57.29271317 71.89111328]
[45.99370575 62.02539062]
[34.69470215 52.15966797]
[23.54928017 62.22524643]
[11.29157448 70.90193939]
[-1.90633512 78.06793976]
[-15.85916996 83.62264252]
[-30.37105370 87.48808289]
[-45.23826218 89.60997772]
[-60.25208664 89.95854950]
[-75.20175171 88.52890015]
[-89.87738800 85.34110260]
[-104.07297516 80.43991089]
[-117.58922577 73.89412689]
[-130.23638916 65.79563904]
[-141.83692932 56.25814438]
[-152.22799683 45.41553497]
[-161.26370239 33.42001724]
[-168.81719971 20.43999481]
[-174.78245544 6.65768623]
[-179.07572937 -7.73342752]
[-181.63674927 -22.53131676]
[-182.42955017 -37.52824402]
[-181.44302368 -52.51367569]
[-178.69100952 -67.27723694]
[-174.21212769 -81.61167145]
[-168.06927490 -95.31575012]
[-160.34867859 -108.19708252]
[-151.15872192 -120.07483673]
[-140.62843323 -130.78227234]
[-128.90560913 -140.16906738]
[-116.15485382 -148.10345459]
[-102.55514526 -154.47402954]
[-88.29740906 -159.19139099]
[-73.58181000 -162.18928528]
[-58.61491776 -163.42562866]
[-43.60685349 -162.88308716]
[-28.76830292 -160.56924438]
[-14.30757999 -156.51661682]
[-0.42768741 -150.78207397]
[12.67652130 -143.44613647]
[24.82108498 -134.61177063]
[35.83551025 -124.40301514]
[45.56517410 -112.96317291]
[53.87348938 -100.45284271]
[60.64381409 -87.04765320]
[65.78111267 -72.93579865]
[69.21324921 -58.31537628]
[70.89205933 -43.39163589]
[70.79396820 -28.37409019]
[68.92034912 -13.47355556]
[65.29751587 1.10078537]
[59.97631454 15.14433193]
[53.03145218 28.45993423]
[44.56042480 40.86066055]
[55.85943222 50.72638321]
[67.15843201 60.59210587]
[78.45744324 70.45783234]
[85.61075592 72.50128174]
[89.88613129 80.64824677]
[113.18052673 79.00009155]
[127.73786163 100.88219452]
[142.50392151 98.24333191]
[157.26997375 95.60446167]
[171.94650269 92.50614166]
[186.51919556 88.95137787]
[201.09190369 85.39662170]
[192.81753540 66.71316528]
[202.07812500 42.01788330]
[214.51757812 33.63574219]
[226.95701599 25.25359917]
[236.71359253 11.38833523]
[252.73788452 16.92533493]
[251.85324097 33.85618591]
[235.33915710 37.69303894]
[222.89971924 46.07518387]
[210.46028137 54.45732498]
[214.91729736 68.78055573]
[219.37390137 83.10252380]
[234.37309265 82.94647980]
[249.37228394 82.79044342]
[264.37145996 82.63440704]
[279.37066650 82.47837067]
[289.15667725 70.28133392]
[304.50332642 67.27890778]
[318.16436768 74.88875580]
[323.68951416 89.51773071]
[318.46990967 104.25848389]
[304.97012329 112.15088654]
[289.56433105 109.46837616]
[279.52670288 97.47756195]
[264.52749634 97.63359833]
[249.52832031 97.78963470]
[234.52912903 97.94567108]
[219.52993774 98.10170746]
[204.64666748 99.96932220]
[190.07395935 103.52408600]
[175.50125122 107.07884216]
[173.35290527 109.95148468]
[169.67668152 111.89752197]
[164.93717957 112.19678497]
[159.90882874 110.37052155]
[145.14277649 113.00938416]
[130.37672424 115.64824677]
[120.74819946 127.15005493]
[120.74819946 142.15005493]
[120.74819946 157.15005493]
[120.74819946 172.15005493]
[120.74819946 187.15005493]
[120.74819946 202.15005493]
[120.74819946 217.15005493]
[120.74819946 232.15005493]
[120.74819946 247.15005493]
[120.74819946 262.15005493]
[135.28808594 266.21136475]
[148.19245911 274.04586792]
[158.50375366 285.07220459]
[165.45677185 298.47213745]
[168.53556824 313.25128174]
[167.51167297 328.31298828]
[162.46107483 342.53948975]
[153.75854492 354.87515259]
[142.04989624 364.40457153]
[128.20394897 370.42062378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 86]
[26 84]
[27 83]
[28 82]
[29 81]
[88 130]
[89 129]
[90 128]
[91 124]
[92 123]
[93 122]
[95 103]
[96 102]
[97 101]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
