%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAUCAACGGGGGGGGGGUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCxxxxxxxxxxACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCCCCCCCCCCCAAAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[78.75467682 376.31024170]
[64.90873718 370.29421997]
[53.20007324 360.76480103]
[44.49755096 348.42910767]
[39.44694901 334.20260620]
[38.42305756 319.14093018]
[41.50185394 304.36175537]
[48.45487595 290.96182251]
[58.76616287 279.93548584]
[71.67053986 272.10098267]
[86.21042633 268.03967285]
[86.21042633 253.03967285]
[86.21042633 238.03967285]
[86.21042633 223.03967285]
[86.21042633 208.03967285]
[86.21042633 193.03967285]
[86.21042633 178.03967285]
[86.21042633 163.03967285]
[86.21042633 148.03967285]
[86.21042633 133.03967285]
[86.21042633 118.03967285]
[86.41339111 95.54009247]
[76.90502930 83.93875122]
[67.39667511 72.33740997]
[57.88831329 60.73606491]
[48.25978851 49.23426056]
[28.18092918 58.53700256]
[6.20241833 60.96905899]
[-15.39224434 56.28834152]
[-34.36280823 44.99119186]
[-48.74467468 28.25979233]
[-57.05234528 7.83846378]
[-58.43286896 -14.14819717]
[-52.75338364 -35.41634369]
[-65.69143677 -43.00625229]
[-78.62949371 -50.59615707]
[-91.56755066 -58.18606567]
[-104.50560760 -65.77597809]
[-117.44366455 -73.36588287]
[-130.38171387 -80.95579529]
[-143.31977844 -88.54570007]
[-156.25782776 -96.13561249]
[-169.19589233 -103.72551727]
[-182.13394165 -111.31542206]
[-194.77545166 -102.76235199]
[-209.87733459 -100.54973602]
[-224.44111633 -105.11689758]
[-235.57514954 -115.55702209]
[-241.06875610 -129.79721069]
[-239.83116150 -145.01007080]
[-232.10812378 -158.17507935]
[-219.43302917 -166.67829895]
[-204.32254028 -168.83143616]
[-189.77685547 -164.20695496]
[-178.68403625 -153.72306824]
[-173.24655151 -139.46134949]
[-174.54403687 -124.25347900]
[-161.60597229 -116.66357422]
[-148.66792297 -109.07366180]
[-135.72985840 -101.48375702]
[-122.79180908 -93.89384460]
[-109.85375214 -86.30393982]
[-96.91569519 -78.71403503]
[-83.97763824 -71.12412262]
[-71.03958893 -63.53421402]
[-58.10152817 -55.94430542]
[-45.16347504 -48.35439682]
[-39.15462875 -55.39416122]
[-32.24737549 -61.55835342]
[-24.56816483 -66.73329926]
[-16.25768280 -70.82342529]
[-7.46828508 -73.75305939]
[1.63879502 -75.46778870]
[10.89640999 -75.93550873]
[20.13456154 -75.14700317]
[29.18352509 -73.11612701]
[37.87696457 -69.87957001]
[46.05499649 -65.49619293]
[53.56712341 -60.04594040]
[60.27500153 -53.62841034]
[66.05500031 -46.36102295]
[70.80047607 -38.37685394]
[74.42372894 -29.82223129]
[76.85762787 -20.85402489]
[78.05687714 -11.63678646]
[77.99881744 -2.33971977]
[76.68389893 6.86641550]
[74.13565063 15.81244659]
[70.40026855 24.33389664]
[65.54577637 32.27400208]
[59.66080856 39.48661041]
[66.44184875 42.54653549]
[69.48965454 51.22770691]
[78.99801636 62.82904816]
[88.50637054 74.43038940]
[98.01473236 86.03173065]
[111.60568237 92.37886047]
[126.60487366 92.22282410]
[141.60406494 92.06678772]
[152.62324524 81.05701447]
[167.83679199 81.11243439]
[178.26501465 91.68540192]
[191.98394775 83.80496979]
[204.79103088 91.40945435]
[219.79020691 91.25341797]
[234.78939819 91.09738159]
[240.79974365 77.10468292]
[251.98622131 66.77111816]
[266.41070557 61.88703156]
[281.57406616 63.29862595]
[294.84915161 70.76133728]
[303.93597412 82.98219299]
[307.26019287 97.84387207]
[304.24588013 112.77149200]
[295.41525269 125.17874908]
[282.29827881 132.91601562]
[267.16757202 134.64276123]
[252.64462280 130.05981445]
[241.24559021 119.96119690]
[234.94543457 106.09656525]
[219.94624329 106.25260162]
[204.94706726 106.40863800]
[192.30096436 114.27791595]
[178.42105103 106.68459320]
[168.21504211 117.47221375]
[153.00595093 117.84412384]
[141.76010132 107.06597900]
[126.76091003 107.22201538]
[111.76171875 107.37805176]
[101.21042633 118.03967285]
[101.21042633 133.03967285]
[101.21042633 148.03967285]
[101.21042633 163.03967285]
[101.21042633 178.03967285]
[101.21042633 193.03967285]
[101.21042633 208.03967285]
[101.21042633 223.03967285]
[101.21042633 238.03967285]
[101.21042633 253.03967285]
[101.21042633 268.03967285]
[115.75031281 272.10098267]
[128.65469360 279.93548584]
[138.96598816 290.96182251]
[145.91900635 304.36175537]
[148.99780273 319.14093018]
[147.97390747 334.20260620]
[142.92330933 348.42910767]
[134.22077942 360.76480103]
[122.51212311 370.29421997]
[108.66618347 376.31024170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 96]
[23 95]
[24 94]
[25 93]
[26 91]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[97 129]
[98 128]
[99 127]
[102 124]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
