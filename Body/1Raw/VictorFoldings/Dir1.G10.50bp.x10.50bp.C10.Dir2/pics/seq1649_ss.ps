%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCCCUUAUGGGGGGGGGGGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGUGCxxxxxxxxxxUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAACCCCCCCCCCAUAGCCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[78.07156372 523.48278809]
[63.51170731 519.57464600]
[50.31056213 512.29498291]
[39.23563004 502.06710815]
[30.93079185 489.48565674]
[25.87887764 475.28207397]
[24.37360382 460.28213501]
[26.50247955 445.35797119]
[32.14173889 431.37719727]
[40.96352005 419.15264893]
[52.45494080 409.39501953]
[65.94789886 402.67169189]
[80.65793610 399.37344360]
[80.96591187 384.37661743]
[81.27388763 369.37979126]
[81.58186340 354.38293457]
[81.88984680 339.38610840]
[82.19782257 324.38925171]
[82.50579834 309.39242554]
[82.81377411 294.39559937]
[83.12175751 279.39874268]
[83.42973328 264.40191650]
[70.05224609 259.67626953]
[58.77658081 251.02995300]
[50.71765900 239.30117798]
[46.67751312 225.63371277]
[47.06548691 211.36538696]
[51.85678482 197.89717102]
[60.59362411 186.55557251]
[72.42891693 178.46200562]
[86.20841217 174.42192078]
[86.82424164 159.43457031]
[87.44006348 144.44720459]
[88.05589294 129.45985413]
[88.67171478 114.47250366]
[86.12612915 129.25492859]
[76.78376770 140.99035645]
[62.94825745 146.78506470]
[48.03115845 145.21020508]
[35.71072388 136.65409851]
[29.02491951 123.22652435]
[29.62232971 108.23841858]
[37.35564423 95.38556671]
[50.31798935 87.83721161]
[65.31311035 87.45462036]
[78.64260101 94.33132935]
[66.31131744 85.79087067]
[53.98003387 77.25041199]
[41.64875031 68.70995331]
[26.61371613 73.00898743]
[12.35398293 66.59072876]
[5.60256338 52.48568344]
[9.54727077 37.35382080]
[22.32553482 28.33994293]
[37.90385056 29.70013046]
[48.92661285 40.79214096]
[50.18920898 56.37866974]
[62.52049255 64.91912842]
[74.85177612 73.45958710]
[87.18305969 82.00004578]
[101.73001862 78.34133911]
[108.55358887 64.98323822]
[115.37716675 51.62514114]
[122.20074463 38.26704407]
[120.80520630 19.93447304]
[135.83549500 10.92697144]
[142.38336182 -2.56841230]
[148.93122864 -16.06379700]
[155.47909546 -29.55918121]
[162.02697754 -43.05456543]
[150.16004944 -52.31496429]
[140.48171997 -63.83593369]
[133.41316223 -77.11231995]
[129.26121521 -91.56265259]
[128.20500183 -106.55463409]
[130.28828430 -121.43277740]
[135.41758728 -135.54710388]
[143.36640930 -148.28146362]
[153.78524780 -159.08055115]
[166.21694946 -167.47399902]
[180.11672974 -173.09695435]
[194.87612915 -175.70587158]
[209.84956360 -175.18911743]
[224.38262939 -171.57170105]
[230.93051147 -185.06709290]
[229.21392822 -201.37614441]
[242.63696289 -210.79708862]
[257.39114380 -203.63845825]
[258.29864502 -187.26443481]
[244.42588806 -178.51922607]
[237.87802124 -165.02383423]
[249.71380615 -155.84724426]
[259.38665771 -144.40579224]
[266.47189331 -131.19799805]
[270.65765381 -116.80005646]
[271.75869751 -101.84062195]
[269.72442627 -86.97340393]
[264.64135742 -72.84858704]
[256.72937012 -60.08440399]
[246.33227539 -49.24006653]
[233.90275574 -40.79126740]
[219.98275757 -35.10932541]
[205.17980957 -32.44485092]
[190.14051819 -32.91670609]
[175.52235413 -36.50669479]
[168.97448730 -23.01131058]
[162.42662048 -9.51592636]
[155.87873840 3.97945809]
[149.33087158 17.47484207]
[152.99633789 29.04318428]
[147.60139465 40.35980606]
[135.55883789 45.09061813]
[128.73526001 58.44871902]
[121.91168976 71.80681610]
[115.08811188 85.16491699]
[118.78388977 93.03718567]
[118.86366272 101.26550293]
[115.69599915 108.35092163]
[110.20834351 113.15653229]
[103.65907288 115.08833313]
[103.04324341 130.07568359]
[102.42742157 145.06303406]
[101.81159210 160.05038452]
[101.19577026 175.03775024]
[115.93827057 181.00300598]
[127.73444366 191.62962341]
[135.17593384 205.62425232]
[137.38273621 221.29290771]
[134.10720825 236.74610901]
[125.76171112 250.12660217]
[113.36683655 259.83270264]
[98.42656708 264.70989990]
[98.11859131 279.70672607]
[97.81061554 294.70355225]
[97.50263977 309.70040894]
[97.19465637 324.69723511]
[96.88668060 339.69409180]
[96.57870483 354.69091797]
[96.27072906 369.68774414]
[95.96274567 384.68460083]
[95.65476990 399.68142700]
[110.21699524 403.58081055]
[123.42255402 410.85244751]
[134.50367737 421.07357788]
[142.81614685 433.65002441]
[147.87666321 447.85052490]
[149.39103699 462.84951782]
[147.27120972 477.77499390]
[141.64042664 491.75918579]
[132.82606506 503.98910522]
[121.34056091 513.75366211]
[107.85167694 520.48516846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[31 124]
[32 123]
[33 122]
[34 121]
[35 120]
[46 60]
[47 59]
[48 58]
[49 57]
[61 115]
[62 114]
[63 113]
[64 112]
[66 109]
[67 108]
[68 107]
[69 106]
[70 105]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
