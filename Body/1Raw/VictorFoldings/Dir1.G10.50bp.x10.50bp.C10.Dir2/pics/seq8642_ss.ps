%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCUAACAUUGGGGGGGGGGACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUxxxxxxxxxxAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACCCCCCCCCCCACCGCUAACAAU\
) } def
/len { sequence length } bind def

/coor [
[101.87106323 394.27456665]
[88.16890717 388.01367188]
[76.20379639 378.86032104]
[66.57588196 367.27365112]
[59.76810455 353.83483887]
[56.12193680 339.21795654]
[55.82026672 324.15618896]
[58.87823105 309.40502930]
[65.14244080 295.70440674]
[74.29868317 283.74151611]
[85.88769531 274.11639404]
[99.32816315 267.31188965]
[113.94593048 263.66925049]
[113.64192200 248.67233276]
[113.33792114 233.67541504]
[113.03391266 218.67849731]
[112.72991180 203.68157959]
[112.42590332 188.68466187]
[112.12190247 173.68774414]
[111.81789398 158.69081116]
[111.51389313 143.69389343]
[111.20989227 128.69697571]
[105.46998596 123.86960602]
[93.99018860 114.21485901]
[88.25028229 109.38748932]
[73.42325592 111.65890503]
[58.59623337 113.93032074]
[43.76921082 116.20173645]
[31.29981804 125.93954468]
[17.54767036 120.21872711]
[11.36253357 134.35194397]
[-1.49436867 142.87858582]
[-16.92044449 143.07783508]
[-29.99329185 134.88610840]
[-36.54140854 120.91737366]
[-34.47531891 105.62899017]
[-24.45430183 93.89942169]
[-9.67602730 89.47153473]
[5.14381027 93.75825500]
[15.27625370 105.39170074]
[26.68511772 95.81636810]
[41.49779129 101.37471008]
[56.32481766 99.10329437]
[71.15184021 96.83187866]
[85.97886658 94.56046295]
[71.93501282 89.29071045]
[65.05032349 75.96401215]
[68.87936401 61.46096420]
[81.44520569 53.26952362]
[96.26007080 55.61894989]
[105.67501068 67.29623413]
[104.82823181 82.27423096]
[112.89128113 69.62562561]
[120.95433807 56.97702408]
[109.00768280 47.89203644]
[97.85207367 37.85152435]
[87.56371307 26.92407799]
[78.21287537 15.18434238]
[69.86344910 2.71251154]
[62.57245636 -10.40621662]
[56.38971710 -24.08222580]
[51.35745621 -38.22209549]
[47.51005554 -52.72923279]
[44.87379456 -67.50453949]
[43.46668243 -82.44708252]
[43.29832840 -97.45478821]
[44.36988831 -112.42513275]
[46.67403793 -127.25585938]
[50.19503784 -141.84565735]
[54.90883636 -156.09484863]
[60.78323364 -169.90611267]
[67.77809906 -183.18508911]
[75.84565735 -195.84107971]
[84.93078613 -207.78762817]
[94.97142792 -218.94313049]
[105.89899445 -229.23135376]
[117.63884735 -238.58204651]
[130.11077881 -246.93133545]
[143.22958374 -254.22216797]
[156.90567017 -260.40475464]
[171.04560852 -265.43682861]
[185.55278015 -269.28405762]
[200.32812500 -271.92013550]
[215.27069092 -273.32708740]
[230.27839661 -273.49526978]
[245.24871826 -272.42352295]
[260.07943726 -270.11920166]
[274.66918945 -266.59802246]
[288.91830444 -261.88406372]
[302.72952271 -256.00949097]
[316.00842285 -249.01446533]
[328.66430664 -240.94676208]
[340.61074829 -231.86148071]
[351.76611328 -221.82070923]
[362.05422974 -210.89302063]
[371.40478516 -199.15306091]
[379.75390625 -186.68103027]
[387.04458618 -173.56213379]
[393.22698975 -159.88597107]
[398.25891113 -145.74598694]
[402.10598755 -131.23875427]
[404.74188232 -116.46338654]
[406.14865112 -101.52080536]
[406.31661987 -86.51309967]
[405.24472046 -71.54277802]
[402.94021606 -56.71210480]
[399.41885376 -42.12239838]
[394.70474243 -27.87331200]
[388.82998657 -14.06218815]
[381.83480835 -0.78337228]
[373.76696777 11.87242699]
[364.68154907 23.81875610]
[354.64062500 34.97401047]
[343.71282959 45.26198196]
[331.97274780 54.61239624]
[319.50061035 62.96138000]
[306.38162231 70.25189972]
[292.70541382 76.43415070]
[278.56536865 81.46590424]
[264.05807495 85.31278992]
[249.28268433 87.94852448]
[234.34008789 89.35510254]
[219.33238220 89.52291870]
[204.36207581 88.45082092]
[189.53141785 86.14614105]
[174.94175720 82.62461853]
[160.69273376 77.91030884]
[146.88166809 72.03542328]
[133.60293579 65.04007721]
[125.53988647 77.68868256]
[117.47682953 90.33728790]
[126.20681000 128.39297485]
[126.51081085 143.38989258]
[126.81481934 158.38681030]
[127.11882019 173.38372803]
[127.42282104 188.38064575]
[127.72682953 203.37757874]
[128.03083801 218.37449646]
[128.33483887 233.37141418]
[128.63883972 248.36833191]
[128.94284058 263.36523438]
[143.69622803 266.41247559]
[157.40141296 272.66674805]
[169.37095642 281.81427002]
[179.00448608 293.39630127]
[185.81877136 306.83181763]
[189.47203064 321.44692993]
[189.78099060 336.50854492]
[186.73017883 351.26116943]
[180.47261047 364.96484375]
[171.32215881 376.93218994]
[159.73782349 386.56289673]
[146.30064392 393.37393188]
[131.68464661 397.02365112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[25 45]
[26 44]
[27 43]
[28 42]
[30 40]
[52 131]
[53 130]
[54 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
