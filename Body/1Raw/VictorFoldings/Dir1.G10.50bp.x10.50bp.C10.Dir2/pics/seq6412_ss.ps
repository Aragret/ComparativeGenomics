%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUUCCCCUAAUAAUCGGGGGGGGGGGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUxxxxxxxxxxCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUCCCCCCCCCCUAAUUCCCCUAAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[86.53430176 644.42108154]
[71.75423431 641.66436768]
[57.62954330 636.51239014]
[44.54555893 629.10571289]
[32.85921860 619.64636230]
[22.88933372 608.39239502]
[14.90789604 595.65087891]
[9.13264179 581.76934814]
[5.72112370 567.12658691]
[4.76641130 552.12194824]
[6.29454947 537.16485596]
[10.26384926 522.66333008]
[16.56602669 509.01293945]
[25.02915192 496.58615112]
[35.42234421 485.72192383]
[47.46207428 476.71667480]
[60.81988144 469.81604004]
[75.13136292 465.20828247]
[90.00608826 463.01910400]
[90.29167175 448.02182007]
[90.57725525 433.02453613]
[90.86283112 418.02725220]
[91.14841461 403.02996826]
[91.43399811 388.03271484]
[91.71958160 373.03543091]
[92.00516510 358.03814697]
[92.29074097 343.04086304]
[92.57632446 328.04357910]
[92.86190796 313.04629517]
[93.14749146 298.04901123]
[85.65390778 285.17672729]
[93.65254211 271.52636719]
[79.10273743 261.58096313]
[73.35250854 244.75567627]
[78.86827850 227.68737793]
[93.63292694 217.22790527]
[93.34734344 202.23062134]
[93.06175995 187.23333740]
[92.77617645 172.23605347]
[84.26745605 163.59799194]
[83.93310547 151.07608032]
[92.50000000 141.39433289]
[92.50000000 126.39432526]
[92.50000000 111.39432526]
[84.39038849 98.77552032]
[70.74591064 92.54429626]
[57.10142899 86.31307220]
[43.45694733 80.08184814]
[30.01224327 87.82907867]
[14.58512592 86.16064453]
[3.10763717 75.71809387]
[-0.00689496 60.51679993]
[6.43913126 46.40196991]
[19.96708679 38.80104828]
[35.37519836 40.63673782]
[46.73872757 51.20318222]
[49.68817139 66.43737030]
[63.33265305 72.66859436]
[76.97713470 78.89981842]
[90.62161255 85.13104248]
[93.29504395 88.38471222]
[95.69593811 91.81948853]
[84.42057800 101.71221924]
[71.36156464 109.09207916]
[57.07005692 113.64759827]
[42.14920807 115.18651581]
[27.22874260 113.64387512]
[12.93836975 109.08479309]
[-0.11879764 101.70168304]
[-11.39169121 91.80613708]
[-20.40454674 79.81578827]
[-26.77698326 66.23667908]
[-30.24005508 51.64191818]
[-30.64760971 36.64745712]
[-27.98244286 21.88612556]
[-22.35703850 7.98091745]
[-14.00881004 -4.48130941]
[-3.29009104 -14.97459602]
[9.34674454 -23.05607986]
[23.36836815 -28.38468933]
[38.18300629 -30.73553276]
[53.16542053 -30.00939751]
[67.68328857 -26.23692703]
[81.12389374 -19.57733536]
[92.91998291 -10.31168652]
[102.57371521 1.16896915]
[109.67765808 14.38009930]
[113.93199921 28.76413918]
[115.15718842 43.71401978]
[113.30150604 58.59879303]
[108.44248962 72.79197693]
[119.77873230 62.96906662]
[131.11497498 53.14615631]
[142.45121765 43.32324600]
[153.78746033 33.50033188]
[158.25045776 25.47723198]
[165.43431091 23.60082436]
[176.95552063 13.99552250]
[188.47673035 4.39022064]
[199.99792480 -5.21508121]
[211.51913452 -14.82038307]
[223.04034424 -24.42568588]
[224.21794128 -40.18604279]
[236.24923706 -50.43414688]
[251.99626160 -49.08998489]
[262.11657715 -36.95101929]
[260.60601807 -21.21908760]
[248.36073303 -11.22766209]
[232.64564514 -12.90447998]
[221.12443542 -3.29917812]
[209.60322571 6.30612373]
[198.08203125 15.91142559]
[186.56082153 25.51672745]
[175.03961182 35.12202835]
[163.61038208 44.83657837]
[152.27412415 54.65948868]
[140.93788147 64.48239899]
[129.60163879 74.30531311]
[118.26540375 84.12821960]
[109.91700745 96.59033966]
[107.50000000 111.39432526]
[107.50000000 126.39432526]
[107.50000000 141.39433289]
[117.08035278 157.09547424]
[107.77346039 171.95046997]
[108.05904388 186.94775391]
[108.34462738 201.94503784]
[108.63020325 216.94232178]
[119.77861786 222.71095276]
[127.35802460 232.62588501]
[129.96965027 244.75567627]
[127.17491913 256.77032471]
[119.56781006 266.38876343]
[108.64982605 271.81195068]
[116.12297821 285.75692749]
[108.14477539 298.33459473]
[107.85919189 313.33187866]
[107.57360840 328.32916260]
[107.28802490 343.32644653]
[107.00244141 358.32373047]
[106.71685791 373.32101440]
[106.43128204 388.31829834]
[106.14569855 403.31555176]
[105.86011505 418.31283569]
[105.57453156 433.31011963]
[105.28894806 448.30740356]
[105.00337219 463.30468750]
[119.78396606 466.05856323]
[133.90965271 471.20782471]
[146.99507141 478.61199951]
[158.68322754 488.06909180]
[168.65527344 499.32110596]
[176.63917542 512.06109619]
[182.41709900 525.94152832]
[185.83143616 540.58361816]
[186.78904724 555.58807373]
[185.26377869 570.54547119]
[181.29728699 585.04772949]
[174.99772644 598.69934082]
[166.53700256 611.12774658]
[156.14590454 621.99401855]
[144.10791016 631.00158691]
[130.75143433 637.90478516]
[116.44083405 642.51531982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 147]
[20 146]
[21 145]
[22 144]
[23 143]
[24 142]
[25 141]
[26 140]
[27 139]
[28 138]
[29 137]
[30 136]
[32 134]
[36 128]
[37 127]
[38 126]
[39 125]
[42 123]
[43 122]
[44 121]
[45 60]
[46 59]
[47 58]
[48 57]
[62 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
