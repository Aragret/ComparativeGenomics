%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACACCCAGGGGGGGGGGAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACxxxxxxxxxxUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCCCCCCCCCCCACACCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 385.36288452]
[71.19830322 379.34686279]
[59.48964310 369.81744385]
[50.78712082 357.48178101]
[45.73651886 343.25524902]
[44.71262741 328.19357300]
[47.79142761 313.41442871]
[54.74444962 300.01449585]
[65.05573273 288.98815918]
[77.96011353 281.15365601]
[92.50000000 277.09234619]
[92.50000000 262.09234619]
[92.50000000 247.09233093]
[92.50000000 232.09233093]
[92.50000000 217.09233093]
[92.50000000 202.09233093]
[92.50000000 187.09233093]
[92.50000000 172.09233093]
[92.50000000 157.09233093]
[92.50000000 142.09233093]
[77.37097931 139.37960815]
[63.34954071 131.12178040]
[50.10695648 138.16691589]
[36.86437225 145.21203613]
[25.72078514 157.98924255]
[10.35807133 150.81823730]
[12.99601269 134.07077026]
[29.81923676 131.96945190]
[43.06182098 124.92432404]
[56.30440903 117.87918854]
[52.90142822 103.27029419]
[37.90873337 102.80225372]
[22.91603661 102.33421326]
[7.92334080 101.86617279]
[-7.06935501 101.39812469]
[-18.41487885 112.40061188]
[-34.21580124 112.07450867]
[-45.09772110 100.61329651]
[-44.60457993 84.81670380]
[-33.02895737 74.05657196]
[-17.23846054 74.71669006]
[-6.60131311 86.40543365]
[8.39138317 86.87347412]
[23.38407898 87.34151459]
[38.37677383 87.80955505]
[53.36947250 88.27760315]
[62.86712265 71.59753418]
[77.78184509 60.38713074]
[95.40200806 56.15361023]
[112.72453308 59.18210220]
[119.63153076 45.86694717]
[126.53852844 32.55179214]
[133.44552612 19.23663521]
[140.35252380 5.92147923]
[141.54147339 -3.20202160]
[147.54423523 -7.59661674]
[154.72674561 -20.76519966]
[161.90925598 -33.93378067]
[149.55172729 -42.46076202]
[138.15322876 -52.23275757]
[127.83864594 -63.14270782]
[118.72098541 -75.07107544]
[110.90014648 -87.88716888]
[104.46181488 -101.45056152]
[99.47653961 -115.61264801]
[95.99893951 -130.21826172]
[94.06711578 -145.10737610]
[93.70223236 -160.11686707]
[94.90829468 -175.08226013]
[97.67208862 -189.83959961]
[101.96331787 -204.22720337]
[107.73497772 -218.08741760]
[114.92383575 -231.26838684]
[123.45111084 -243.62570190]
[133.22338867 -255.02397156]
[144.13359070 -265.33828735]
[156.06217957 -274.45565796]
[168.87846375 -282.27618408]
[182.44200134 -288.71420288]
[196.60421753 -293.69912720]
[211.20991516 -297.17636108]
[226.09907532 -299.10781860]
[241.10856628 -299.47235107]
[256.07394409 -298.26593018]
[270.83120728 -295.50177002]
[285.21871948 -291.21020508]
[299.07879639 -285.43820190]
[312.25958252 -278.24902344]
[324.61669922 -269.72143555]
[336.01470947 -259.94888306]
[346.32876587 -249.03843689]
[355.44586182 -237.10963440]
[363.26608276 -224.29316711]
[369.70373535 -210.72946167]
[374.68832397 -196.56712341]
[378.16522217 -181.96133423]
[380.09631348 -167.07212830]
[380.46047974 -152.06262207]
[379.25369263 -137.09729004]
[376.48919678 -122.34008026]
[372.19723511 -107.95269012]
[366.42492676 -94.09275055]
[359.23541260 -80.91212463]
[350.70755005 -68.55522919]
[340.93472290 -57.15744019]
[330.02401733 -46.84364700]
[318.09497070 -37.72685623]
[305.27832031 -29.90694809]
[291.71444702 -23.46960831]
[277.55200195 -18.48536491]
[262.94613647 -15.00882816]
[248.05688477 -13.07808971]
[233.04737854 -12.71430397]
[218.08206177 -13.92145538]
[203.32492065 -16.68631935]
[188.93763733 -20.97860146]
[175.07783508 -26.75127220]
[167.89532471 -13.58269024]
[160.71281433 -0.41410801]
[153.66767883 12.82847786]
[146.76068115 26.14363289]
[139.85368347 39.45878983]
[132.94668579 52.77394485]
[126.03968811 66.08910370]
[135.62463379 76.35894012]
[141.36376953 89.18091583]
[142.63754272 103.17084503]
[139.30844116 116.81847382]
[131.73583984 128.65049744]
[120.73725128 137.38958740]
[107.50000000 142.09233093]
[107.50000000 157.09233093]
[107.50000000 172.09233093]
[107.50000000 187.09233093]
[107.50000000 202.09233093]
[107.50000000 217.09233093]
[107.50000000 232.09233093]
[107.50000000 247.09233093]
[107.50000000 262.09234619]
[107.50000000 277.09234619]
[122.03988647 281.15365601]
[134.94427490 288.98815918]
[145.25555420 300.01449585]
[152.20857239 313.41442871]
[155.28736877 328.19357300]
[154.26348877 343.25524902]
[149.21287537 357.48178101]
[140.51036072 369.81744385]
[128.80169678 379.34686279]
[114.95575714 385.36288452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 30]
[23 29]
[24 28]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[50 124]
[51 123]
[52 122]
[53 121]
[54 120]
[56 119]
[57 118]
[58 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
