%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCAACUAGGGGGGGGGGUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUxxxxxxxxxxAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[83.80612946 449.81845093]
[70.88697815 442.06008911]
[60.10567856 431.53106689]
[52.04366302 418.79919434]
[47.13570023 404.55108643]
[45.64647675 389.55511475]
[47.65629959 374.62002563]
[53.05678558 360.55120850]
[61.55669022 348.10739136]
[72.69762421 337.95968628]
[85.87876892 330.65527344]
[100.38928986 326.58816528]
[99.77346802 311.60079956]
[99.15763855 296.61346436]
[98.54181671 281.62609863]
[97.92598724 266.63873291]
[97.31016541 251.65138245]
[96.69433594 236.66403198]
[96.07851410 221.67668152]
[95.46268463 206.68933105]
[94.84686279 191.70198059]
[94.23103333 176.71463013]
[90.79282379 170.11985779]
[93.75962830 161.41389465]
[93.45164490 146.41705322]
[93.14366913 131.42021179]
[75.51162720 120.84606934]
[67.88816833 101.75196838]
[73.38907623 81.94182587]
[63.28363800 70.85668945]
[53.17820358 59.77156067]
[43.07276917 48.68642426]
[39.62273788 53.65350723]
[34.37008667 57.81848145]
[27.53473282 60.64659882]
[19.47982025 61.66734314]
[10.69299126 60.51034546]
[1.75906920 56.93602371]
[-11.66837978 50.24995041]
[-27.47060013 51.02482986]
[-35.41477585 38.42565155]
[-48.84222412 31.73957443]
[-60.28639221 41.74454498]
[-74.68975830 46.60370255]
[-89.85591888 45.57606125]
[-103.47214508 38.81832504]
[-113.46205139 27.36100578]
[-118.30225372 12.95125675]
[-117.25466156 -2.21353769]
[-110.47901917 -15.82085705]
[-99.00856781 -25.79568481]
[-84.59246826 -30.61693001]
[-69.42906189 -29.54939079]
[-55.83066940 -22.75585556]
[-45.87094116 -11.27229309]
[-41.06866074 3.15014005]
[-42.15614700 18.31212616]
[-28.72869873 24.99820137]
[-13.88690090 23.74508667]
[-4.98230505 36.82250214]
[8.44514465 43.50857544]
[14.61078644 39.23834610]
[26.94207001 30.69788742]
[33.10771179 26.42765808]
[31.57041931 11.50664139]
[16.81565094 8.10436058]
[3.96637440 0.09344218]
[-5.58361626 -11.65714931]
[-10.79840946 -25.87279701]
[-11.11234379 -41.01149368]
[-6.49136591 -55.43111038]
[2.56327534 -67.56751251]
[15.06939983 -76.10422516]
[29.67043686 -80.11526489]
[44.78257751 -79.16553497]
[58.76656342 -73.35806274]
[70.10552216 -63.32278442]
[77.56948853 -50.14826584]
[80.34882355 -35.26357651]
[78.14205170 -20.28329277]
[71.18853760 -6.83236790]
[60.24255371 3.63014460]
[46.49143600 9.96934891]
[48.02872849 24.89036560]
[54.15790176 38.58098984]
[64.26333618 49.66612625]
[74.36877441 60.75125885]
[84.47420502 71.83639526]
[92.35379028 68.76261139]
[100.76225281 67.84944916]
[109.11798859 69.16006470]
[116.84304810 72.60382080]
[123.40311432 77.94250488]
[128.34443665 84.80685425]
[142.85307312 80.99900055]
[157.36169434 77.19113922]
[157.12705994 62.11770630]
[160.50723267 47.42628479]
[167.30570984 33.97101974]
[177.12722778 22.53417587]
[189.40075684 13.78067970]
[203.41276550 8.21944809]
[218.34858704 6.17380428]
[233.33987427 7.76267767]
[247.51507568 12.89369392]
[260.05004883 21.26854324]
[270.21600342 32.40032196]
[277.42193604 45.64184189]
[281.24890137 60.22326279]
[281.47439575 75.29683685]
[278.08532715 89.98620605]
[271.27868652 103.43734741]
[261.45025635 114.86823273]
[249.17140198 123.61428833]
[235.15603638 129.16702271]
[220.21897888 131.20361328]
[205.22865295 129.60565186]
[191.05656433 124.46604156]
[178.52668762 116.08358765]
[168.36746216 104.94564819]
[161.16955566 91.69976044]
[146.66093445 95.50762177]
[132.15229797 99.31548309]
[129.31050110 113.23379517]
[120.74980164 124.56999969]
[108.14051056 131.11222839]
[108.44848633 146.10906982]
[108.75646210 161.10591125]
[109.21839142 176.09880066]
[109.83421326 191.08615112]
[110.45004272 206.07350159]
[111.06586456 221.06085205]
[111.68169403 236.04821777]
[112.29751587 251.03556824]
[112.91333771 266.02291870]
[113.52916718 281.01028442]
[114.14498901 295.99761963]
[114.76081848 310.98498535]
[115.37664032 325.97232056]
[130.17192078 328.83529663]
[143.90788269 335.03366089]
[155.84379578 344.23318481]
[165.33593750 355.93768311]
[171.87243652 369.51602173]
[175.10078430 384.23590088]
[174.84686279 399.30346680]
[171.12437439 413.90621948]
[164.13406372 427.25659180]
[154.25291443 438.63461304]
[142.01380920 447.42672729]
[128.07678223 453.15875244]
[113.19345093 455.52154541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 128]
[25 127]
[26 126]
[29 88]
[30 87]
[31 86]
[32 85]
[38 61]
[39 60]
[41 58]
[42 57]
[64 84]
[65 83]
[94 123]
[95 122]
[96 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
