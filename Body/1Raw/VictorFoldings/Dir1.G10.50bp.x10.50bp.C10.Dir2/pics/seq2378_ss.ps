%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACACCCACGGGGGGGGGGUACCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACxxxxxxxxxxUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAACCCCCCCCCCUCAACACCCUC\
) } def
/len { sequence length } bind def

/coor [
[78.65290070 512.47167969]
[64.63095856 506.91867065]
[52.43099976 498.05233765]
[42.81993103 486.43002319]
[36.40190506 472.78231812]
[33.58036804 457.96713257]
[34.53268433 442.91577148]
[39.19898987 428.57434082]
[47.28595352 415.84439087]
[58.28522873 405.52612305]
[71.50538635 398.26812744]
[86.11540222 394.52670288]
[86.11540222 379.52670288]
[86.11540222 364.52670288]
[86.11540222 349.52670288]
[86.11540222 334.52670288]
[86.11540222 319.52670288]
[86.11540222 304.52670288]
[86.11540222 289.52670288]
[86.11540222 274.52670288]
[86.11540222 259.52670288]
[86.11540222 244.52670288]
[83.83652496 241.76013184]
[82.81778717 237.73126221]
[83.64712524 233.06030273]
[86.60577393 228.61039734]
[87.52919006 213.63885498]
[78.85954285 198.41119385]
[89.07801819 183.12677002]
[89.69384766 168.13941956]
[90.30966949 153.15206909]
[90.92549896 138.16471863]
[91.54132080 123.17736053]
[68.99252319 102.89874268]
[80.77940369 67.66913605]
[68.10788727 59.64213943]
[55.43637085 51.61514282]
[42.76485443 43.58814621]
[32.31183243 52.41785049]
[19.80426216 57.92500687]
[6.26668119 59.66893005]
[-7.19494343 57.51675797]
[-19.48356819 51.65354156]
[-29.60047531 42.56636429]
[-36.72643661 31.00388718]
[-40.28804779 17.91468620]
[-40.00386429 4.36942244]
[-35.90661240 -8.52672958]
[-48.23789597 -17.06718826]
[-60.56917953 -25.60764694]
[-76.54741669 -24.16699791]
[-87.53145599 -35.86017990]
[-85.09527588 -51.71718597]
[-71.10771179 -59.57387543]
[-56.29882050 -53.40327072]
[-52.02872086 -37.93893051]
[-39.69743729 -29.39847183]
[-27.36615181 -20.85801315]
[-14.17197132 -30.60747528]
[1.58075690 -35.27964020]
[18.00797653 -34.29753113]
[33.13875580 -27.76151276]
[45.15174484 -16.43935966]
[52.59443665 -1.67609990]
[54.55875778 14.76575756]
[50.79185104 30.91663170]
[63.46336746 38.94362640]
[76.13488007 46.97062683]
[88.80639648 54.99762344]
[81.53444672 41.87821960]
[74.26248932 28.75881958]
[63.93893051 17.87653542]
[60.51204300 3.27323222]
[64.91713715 -11.06535721]
[75.95191956 -21.22575188]
[90.60462189 -24.43484116]
[104.87603760 -19.81675720]
[114.87101746 -8.63192844]
[117.86159515 6.06693029]
[113.03134155 20.26831055]
[111.90841675 35.22621918]
[110.78548431 50.18412781]
[118.94215393 37.59568787]
[127.09881592 25.00724983]
[135.25547791 12.41880989]
[143.41215515 -0.16962948]
[151.56881714 -12.75806904]
[148.02235413 -28.15930939]
[156.47567749 -41.51285172]
[171.91354370 -44.89627457]
[185.17697144 -36.30225372]
[188.39698792 -20.82947159]
[179.66322327 -7.65765142]
[164.15725708 -4.60140324]
[156.00059509 7.98703623]
[147.84391785 20.57547569]
[139.68725586 33.16391373]
[131.53059387 45.75235367]
[123.37392426 58.34079361]
[131.78733826 70.75910950]
[146.50285339 67.85163879]
[161.21838379 64.94416046]
[175.80212402 61.43499756]
[190.22950745 57.33005142]
[204.65690613 53.22510529]
[213.68826294 39.96561432]
[229.69609070 38.90318680]
[240.40055847 50.85282898]
[237.59011841 66.64779663]
[223.42068481 74.17153931]
[208.76184082 67.65248871]
[194.33445740 71.75743866]
[179.90707397 75.86238098]
[178.42631531 78.31153870]
[175.85623169 80.30249786]
[172.37355042 81.40595245]
[168.31098938 81.26724243]
[164.12585449 79.65968323]
[149.41032410 82.56716156]
[134.69480896 85.47463226]
[127.99812317 113.63713837]
[106.52867126 123.79319000]
[105.91284943 138.78054810]
[105.29701996 153.76789856]
[104.68119812 168.75524902]
[104.06537628 183.74259949]
[112.23257446 193.77755737]
[111.37478638 206.28498840]
[102.50074005 214.56227112]
[101.57732391 229.53381348]
[101.11540222 244.52670288]
[101.11540222 259.52670288]
[101.11540222 274.52670288]
[101.11540222 289.52670288]
[101.11540222 304.52670288]
[101.11540222 319.52670288]
[101.11540222 334.52670288]
[101.11540222 349.52670288]
[101.11540222 364.52670288]
[101.11540222 379.52670288]
[101.11540222 394.52670288]
[115.72541046 398.26812744]
[128.94557190 405.52612305]
[139.94483948 415.84439087]
[148.03181458 428.57434082]
[152.69812012 442.91577148]
[153.65043640 457.96713257]
[150.82890320 472.78231812]
[144.41087341 486.43002319]
[134.79980469 498.05233765]
[122.59984589 506.91867065]
[108.57789612 512.47167969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[26 130]
[27 129]
[29 126]
[30 125]
[31 124]
[32 123]
[33 122]
[35 69]
[36 68]
[37 67]
[38 66]
[48 58]
[49 57]
[50 56]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[100 120]
[101 119]
[102 118]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
