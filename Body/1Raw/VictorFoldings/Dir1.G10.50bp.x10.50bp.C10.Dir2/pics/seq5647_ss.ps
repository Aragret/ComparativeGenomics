%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCUACUGGGGGGGGGGUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUxxxxxxxxxxAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCCCCCCCCCCCAAACUCUACU\
) } def
/len { sequence length } bind def

/coor [
[83.57269287 373.72933960]
[70.35249329 366.45687866]
[59.46569061 356.00985718]
[51.65456009 343.10061646]
[47.45167923 328.60928345]
[47.14360428 313.52395630]
[50.75134659 298.87313843]
[58.02891922 285.65573120]
[68.48012543 274.77297974]
[81.39238739 266.96682739]
[95.88532257 262.76953125]
[95.57327271 247.77279663]
[95.26121521 232.77603149]
[94.94915771 217.77928162]
[94.63710022 202.78253174]
[94.32504272 187.78578186]
[94.01298523 172.78901672]
[93.70093536 157.79226685]
[93.38887787 142.79551697]
[93.07682037 127.79875946]
[80.13043213 120.63739014]
[72.48357391 107.97170258]
[72.17578125 93.17984009]
[79.28914642 80.20701599]
[91.92642975 72.51329803]
[91.61437225 57.51654053]
[91.30231476 42.51978683]
[76.31151581 41.86038589]
[61.39483261 40.23201370]
[46.61484146 37.64149857]
[32.03353119 34.09970856]
[17.71206093 29.62149429]
[3.71050119 24.22564316]
[-9.91242218 17.93478584]
[-23.09956741 10.77530956]
[-35.79562378 2.77724385]
[-47.94733810 -6.02586508]
[-59.50374603 -15.59709358]
[-70.41636658 -25.89629555]
[-80.63943481 -36.88027191]
[-90.13007355 -48.50295639]
[-98.84846497 -60.71559143]
[-106.75805664 -73.46695709]
[-113.82566071 -86.70356750]
[-120.02162933 -100.36991119]
[-125.31998444 -114.40865326]
[-129.69850159 -128.76092529]
[-133.13880920 -143.36650085]
[-135.62649536 -158.16415405]
[-137.15109253 -173.09179688]
[-137.70623779 -188.08682251]
[-137.28958130 -203.08633423]
[-135.90289307 -218.02742004]
[-133.55195618 -232.84739685]
[-130.24667358 -247.48413086]
[-126.00086975 -261.87622070]
[-120.83237457 -275.96328735]
[-114.76286316 -289.68624878]
[-107.81778717 -302.98757935]
[-100.02629089 -315.81143188]
[-91.42103577 -328.10406494]
[-82.03813171 -339.81387329]
[-71.91692352 -350.89178467]
[-61.09987259 -361.29132080]
[-49.63233948 -370.96884155]
[-37.56243134 -379.88378906]
[-24.94077301 -387.99874878]
[-11.82030106 -395.27969360]
[1.74395049 -401.69607544]
[15.69508839 -407.22100830]
[29.97459602 -411.83126831]
[44.52257919 -415.50756836]
[59.27801895 -418.23443604]
[74.17902374 -420.00048828]
[89.16310120 -420.79827881]
[104.16738892 -420.62448120]
[119.12895966 -419.47982788]
[133.98506165 -417.36911011]
[148.67338562 -414.30117798]
[163.13230896 -410.28890991]
[177.30119324 -405.34912109]
[191.12062073 -399.50256348]
[204.53260803 -392.77371216]
[217.48091125 -385.19079590]
[229.91122437 -376.78567505]
[241.77140808 -367.59353638]
[253.01170349 -357.65298462]
[263.58496094 -347.00570679]
[273.44686890 -335.69631958]
[282.55603027 -323.77230835]
[290.87423706 -311.28366089]
[298.36660767 -298.28277588]
[305.00170898 -284.82415771]
[310.75173950 -270.96426392]
[315.59255981 -256.76126099]
[319.50384521 -242.27470398]
[322.46923828 -227.56533813]
[324.47625732 -212.69487000]
[325.51651001 -197.72567749]
[325.58560181 -182.72053528]
[324.68328857 -167.74240112]
[322.81332397 -152.85408020]
[319.98358154 -138.11801147]
[316.20587158 -123.59603882]
[311.49609375 -109.34903717]
[305.87399292 -95.43679047]
[299.36312866 -81.91763306]
[291.99081421 -68.84827423]
[283.78799438 -56.28353882]
[274.78906250 -44.27611923]
[265.03176880 -32.87638474]
[254.55700684 -22.13214874]
[243.40876770 -12.08847618]
[231.63375854 -2.78749418]
[219.28140259 5.73178577]
[206.40348816 13.43362999]
[193.05404663 20.28573418]
[179.28907776 26.25935936]
[165.16629028 31.32944679]
[150.74493408 35.47473526]
[136.08549500 38.67783356]
[121.24945831 40.92530823]
[106.29906464 42.20772934]
[106.61112213 57.20448303]
[106.92317963 72.20124054]
[119.86956787 79.36260986]
[127.51642609 92.02829742]
[127.82421875 106.82015991]
[120.71085358 119.79298401]
[108.07357025 127.48670197]
[108.38562775 142.48345947]
[108.69768524 157.48020935]
[109.00974274 172.47695923]
[109.32180023 187.47372437]
[109.63385773 202.47047424]
[109.94590759 217.46722412]
[110.25796509 232.46397400]
[110.57002258 247.46073914]
[110.88208008 262.45748901]
[125.53707123 266.04824829]
[138.76287842 273.31051636]
[149.65774536 283.74911499]
[157.47885132 296.65231323]
[161.69291687 311.14038086]
[162.01263428 326.22549438]
[158.41621399 340.87908936]
[151.14884949 354.10208130]
[140.70605469 364.99291992]
[127.79981995 372.80905151]
[113.31012726 377.01751709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 125]
[26 124]
[27 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
