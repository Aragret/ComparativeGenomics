%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUAAGAAGGGGGGGGGGCAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUxxxxxxxxxxACAGCAAGACGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCAAACAGCCCCCCCCCCUACCUAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 418.81567383]
[71.19830322 412.79965210]
[59.48964310 403.27023315]
[50.78712082 390.93457031]
[45.73651886 376.70803833]
[44.71262741 361.64636230]
[47.79142761 346.86718750]
[54.74444962 333.46728516]
[65.05573273 322.44094849]
[77.96011353 314.60644531]
[92.50000000 310.54513550]
[92.50000000 295.54513550]
[92.50000000 280.54513550]
[92.50000000 265.54513550]
[92.50000000 250.54512024]
[92.50000000 235.54512024]
[92.50000000 220.54512024]
[92.50000000 205.54512024]
[92.50000000 190.54512024]
[92.50000000 175.54512024]
[92.50000000 160.54512024]
[66.43635559 150.94549561]
[47.32958603 130.78617859]
[33.54720306 136.70614624]
[19.76482201 142.62611389]
[12.50712681 156.93363953]
[-3.23257232 160.03871155]
[-15.38012409 149.55937195]
[-14.61696625 133.53446960]
[-1.52852905 124.25695801]
[13.84485912 128.84373474]
[27.62724113 122.92376709]
[41.40962219 117.00379944]
[39.12875366 104.08081055]
[39.66424942 90.96900177]
[42.99133682 78.27503967]
[48.95607376 66.58624268]
[57.28248978 56.44341660]
[67.58534241 48.31584549]
[61.23821259 34.72489548]
[54.89108276 21.13394547]
[48.54395294 7.54299450]
[42.19682693 -6.04795647]
[35.68808365 -12.55088902]
[35.86231613 -19.98831367]
[29.79930115 -33.70836639]
[23.73628807 -47.42842102]
[9.17223930 -43.69501495]
[-5.80768681 -42.40984344]
[-20.79482651 -43.60796356]
[-35.38032150 -47.25669479]
[-49.16626358 -53.25649643]
[-61.77656937 -61.44368744]
[-72.86721039 -71.59491730]
[-82.13564301 -83.43325043]
[-89.32899475 -96.63572693]
[-94.25104523 -110.84218597]
[-96.76750946 -125.66504669]
[-96.80973053 -140.69993591]
[-94.37657166 -155.53671265]
[-89.53440094 -169.77058411]
[-82.41531372 -183.01325989]
[-73.21353149 -194.90347290]
[-62.18007660 -205.11683655]
[-49.61595917 -213.37472534]
[-35.86393356 -219.45187378]
[-21.29916573 -223.18246460]
[-6.31899166 -224.46475220]
[8.66791725 -223.26374817]
[23.25270844 -219.61219788]
[37.03749466 -213.60974121]
[49.64622116 -205.42012024]
[60.73491287 -195.26675415]
[70.00105286 -183.42663574]
[77.19187164 -170.22277832]
[82.11118317 -156.01538086]
[84.62478638 -141.19203186]
[84.66411591 -126.15711975]
[82.22809601 -111.32083130]
[77.38317871 -97.08788300]
[70.26154327 -83.84658051]
[61.05746841 -71.95814514]
[50.02204895 -61.74690628]
[37.45634079 -53.49143600]
[43.51935577 -39.77138138]
[49.58237076 -26.05132675]
[55.78777695 -12.39508629]
[62.13490677 1.19586504]
[68.48203278 14.78681564]
[74.82916260 28.37776756]
[81.17629242 41.96871948]
[91.97589874 39.52210617]
[103.03984833 39.06789780]
[114.00366211 40.62105560]
[124.50612640 44.13040543]
[134.20126343 49.48034286]
[142.76965332 56.49461365]
[149.92903137 64.94213867]
[163.17161560 57.89700317]
[171.39495850 43.70867538]
[187.79139709 44.00671387]
[195.49368286 58.48452377]
[186.57835388 72.24857330]
[170.21675110 71.13958740]
[156.97416687 78.18472290]
[159.82009888 88.02015686]
[160.98110962 98.19302368]
[175.91542053 99.59532928]
[190.37849426 93.18204498]
[202.32669067 102.07529449]
[217.26100159 103.47760010]
[232.19531250 104.87989807]
[247.12960815 106.28220367]
[261.80236816 98.95813751]
[275.33050537 108.22756195]
[273.79739380 124.55489349]
[258.78018188 131.14396667]
[245.72731018 121.21651459]
[230.79299927 119.81420898]
[215.85868835 118.41190338]
[200.92439270 117.00960541]
[187.52951050 123.52318573]
[174.51312256 114.52963257]
[159.57881165 113.12732697]
[155.65617371 124.98704529]
[149.40019226 135.79920959]
[141.07315063 145.11050415]
[131.02415466 152.53059387]
[119.67449188 157.74838257]
[107.50000000 160.54512024]
[107.50000000 175.54512024]
[107.50000000 190.54512024]
[107.50000000 205.54512024]
[107.50000000 220.54512024]
[107.50000000 235.54512024]
[107.50000000 250.54512024]
[107.50000000 265.54513550]
[107.50000000 280.54513550]
[107.50000000 295.54513550]
[107.50000000 310.54513550]
[122.03988647 314.60644531]
[134.94427490 322.44094849]
[145.25555420 333.46728516]
[152.20857239 346.86718750]
[155.28736877 361.64636230]
[154.26348877 376.70803833]
[149.21287537 390.93457031]
[140.51036072 403.27023315]
[128.80169678 412.79965210]
[114.95575714 418.81567383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 33]
[24 32]
[25 31]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[45 86]
[46 85]
[47 84]
[98 105]
[99 104]
[107 124]
[108 123]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
