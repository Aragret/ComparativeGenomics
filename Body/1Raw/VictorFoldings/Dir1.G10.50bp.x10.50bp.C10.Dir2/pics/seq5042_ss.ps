%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUGACAGGGGGGGGGGUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUxxxxxxxxxxCUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCCCCCCCCCCCUGACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.22528076]
[71.19830322 367.20925903]
[59.48964310 357.67984009]
[50.78712082 345.34417725]
[45.73651886 331.11764526]
[44.71262741 316.05596924]
[47.79142761 301.27679443]
[54.74444962 287.87689209]
[65.05573273 276.85055542]
[77.96011353 269.01602173]
[92.50000000 264.95471191]
[92.50000000 249.95472717]
[92.50000000 234.95472717]
[92.50000000 219.95472717]
[92.50000000 204.95472717]
[92.50000000 189.95472717]
[92.50000000 174.95472717]
[92.50000000 159.95472717]
[92.50000000 144.95472717]
[92.50000000 129.95472717]
[92.50000000 114.95472717]
[87.59844971 100.77816772]
[78.33349609 88.98152924]
[69.06855011 77.18488312]
[54.45974731 71.11088562]
[52.68352127 56.32257080]
[40.07351685 64.46582031]
[26.76593590 71.41081238]
[12.87431335 77.09828949]
[-1.48282921 81.47974396]
[-16.18299866 84.51777649]
[-31.10077667 86.18647766]
[-46.10888672 86.47160339]
[-61.07928085 85.37072754]
[-75.88423920 82.89323425]
[-90.39743805 79.06027222]
[-104.49506378 73.90453339]
[-118.05683136 67.47001648]
[-130.96704102 59.81160736]
[-143.11553955 50.99465561]
[-154.39868164 41.09437943]
[-164.72018433 30.19525146]
[-173.99201965 18.39025879]
[-182.13505554 5.78011990]
[-189.07981873 -7.52757788]
[-194.76707458 -21.41929626]
[-199.14828491 -35.77651215]
[-202.18606567 -50.47673035]
[-203.85452271 -65.39453888]
[-204.13940430 -80.40264893]
[-203.03826904 -95.37302399]
[-200.56053162 -110.17794037]
[-196.72732544 -124.69107819]
[-191.57136536 -138.78862000]
[-185.13661194 -152.35028076]
[-177.47799683 -165.26036072]
[-168.66084290 -177.40870667]
[-158.76037598 -188.69168091]
[-147.86106873 -199.01301575]
[-136.05592346 -208.28465271]
[-123.44564819 -216.42747498]
[-110.13784027 -223.37202454]
[-96.24602509 -229.05903625]
[-81.88874054 -233.44001770]
[-67.18846893 -236.47755432]
[-52.27063370 -238.14575195]
[-37.26251602 -238.43038940]
[-22.29215622 -237.32901001]
[-7.48728418 -234.85102844]
[7.02579021 -231.01757812]
[21.12324333 -225.86137390]
[34.68479919 -219.42640686]
[47.59474945 -211.76756287]
[59.74295425 -202.95021057]
[71.02576447 -193.04956055]
[81.34691620 -182.15008545]
[90.61834717 -170.34478760]
[98.76096344 -157.73437500]
[105.70529175 -144.42643738]
[111.39207458 -130.53453064]
[115.77281189 -116.17716980]
[118.81010437 -101.47685242]
[120.47806549 -86.55899048]
[120.76243591 -71.55086517]
[119.66081238 -56.58052826]
[117.18258667 -41.77569580]
[113.34889984 -27.26268578]
[108.19245911 -13.16531849]
[101.75725555 0.39612922]
[94.09820557 13.30595398]
[85.28064728 25.45401001]
[75.37980652 36.73665237]
[64.48016357 47.05762100]
[78.42627716 52.28784561]
[80.86518860 67.91993713]
[90.13014221 79.71657562]
[99.39508820 91.51321411]
[103.88885498 85.65356445]
[111.99170685 82.49320221]
[122.21096039 83.65676880]
[137.19067383 82.87692261]
[152.17039490 82.09708405]
[167.14118958 81.16145325]
[182.10142517 80.07014465]
[186.84819031 65.62934113]
[196.76365662 54.10754395]
[210.33581543 47.26174164]
[225.49499512 46.13586807]
[239.92955017 50.90161514]
[251.43829346 60.83223724]
[258.26623535 74.41338348]
[259.37216187 89.57403564]
[254.58743286 104.00230408]
[244.64167786 115.49797058]
[231.05155945 122.30804443]
[215.88946533 123.39402771]
[201.46751404 118.59032440]
[189.98492432 108.62945557]
[183.19274902 95.03038788]
[168.23249817 96.12170410]
[161.74827576 99.76869965]
[152.95024109 97.07679749]
[137.97052002 97.85664368]
[122.99080658 98.63648224]
[137.51016235 102.40325165]
[144.52206421 115.66345978]
[139.46138000 129.78399658]
[125.62290955 135.57162476]
[112.01623535 129.25827026]
[107.50000000 114.95472717]
[107.50000000 129.95472717]
[107.50000000 144.95472717]
[107.50000000 159.95472717]
[107.50000000 174.95472717]
[107.50000000 189.95472717]
[107.50000000 204.95472717]
[107.50000000 219.95472717]
[107.50000000 234.95472717]
[107.50000000 249.95472717]
[107.50000000 264.95471191]
[122.03988647 269.01602173]
[134.94427490 276.85055542]
[145.25555420 287.87689209]
[152.20857239 301.27679443]
[155.28736877 316.05596924]
[154.26348877 331.11764526]
[149.21287537 345.34417725]
[140.51036072 357.67984009]
[128.80169678 367.20925903]
[114.95575714 373.22528076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 97]
[23 96]
[24 95]
[26 93]
[100 124]
[101 123]
[102 122]
[103 120]
[104 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
