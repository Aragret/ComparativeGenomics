%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUAAUCGGGGGGGGGGGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCxxxxxxxxxxUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCCCCCCCCCCCUCAUAAUCG\
) } def
/len { sequence length } bind def

/coor [
[96.90302277 490.64312744]
[84.02975464 482.74023438]
[73.90545654 471.52975464]
[67.35087585 457.92041016]
[64.89735413 443.01547241]
[66.74378967 428.02322388]
[72.74050140 414.15902710]
[82.40136719 402.54678345]
[94.94321442 394.12783813]
[109.34933472 389.58465576]
[109.03727722 374.58792114]
[108.72521973 359.59115601]
[108.41316223 344.59439087]
[108.10110474 329.59765625]
[107.78905487 314.60089111]
[107.47699738 299.60415649]
[107.16493988 284.60739136]
[106.85288239 269.61062622]
[106.54082489 254.61387634]
[105.60520172 239.64309692]
[96.58814240 227.78805542]
[102.85062408 213.25904846]
[101.29304504 198.34013367]
[99.73545837 183.42121887]
[90.51725769 175.52616882]
[89.13131714 163.06430054]
[96.86920929 152.69227600]
[95.62233734 137.74418640]
[94.37545776 122.79609680]
[80.85890961 116.64249420]
[72.89383698 102.78752136]
[74.58404541 85.75892639]
[60.17182541 81.60103607]
[45.75960922 77.44315338]
[32.04285431 84.82477570]
[17.48604965 80.40277863]
[10.53332996 67.28045654]
[-3.87888575 63.12257385]
[-18.29110146 58.96468353]
[-32.70331955 54.80679703]
[-44.86318588 64.44615936]
[-60.36797333 65.06352997]
[-73.25577545 56.42153168]
[-78.57096863 41.84317780]
[-74.26975250 26.93415070]
[-62.00603104 17.42726898]
[-46.49545670 16.97812653]
[-33.70216370 25.75942802]
[-28.54543114 40.39458084]
[-14.13321400 44.55246735]
[0.27900165 48.71035767]
[14.69121742 52.86824417]
[27.56525230 45.46589279]
[42.24052048 49.47727203]
[49.91749954 63.03093719]
[64.32971191 67.18881989]
[78.74192810 71.34671021]
[92.39817047 65.14130402]
[98.74530029 51.55035400]
[105.09243011 37.95940018]
[111.43955994 24.36845016]
[117.78668976 10.77749920]
[124.13381958 -2.81345153]
[130.48094177 -16.40440178]
[129.30989075 -32.18220901]
[141.70582581 -40.43994904]
[129.21690369 -48.80220795]
[118.15092468 -58.97297287]
[108.76727295 -70.71382141]
[101.28593445 -83.74954224]
[95.88226318 -97.77454376]
[92.68293762 -112.46007538]
[91.76295471 -127.46187592]
[93.14388275 -142.42828369]
[96.79335022 -157.00848389]
[102.62580109 -170.86065674]
[110.50451660 -183.66012573]
[120.24481964 -195.10682678]
[131.61836243 -204.93243408]
[144.35856628 -212.90664673]
[158.16674805 -218.84251404]
[172.71923828 -222.60090637]
[187.67489624 -224.09370422]
[202.68316650 -223.28591919]
[217.39221191 -220.19648743]
[231.45722961 -214.89784241]
[244.54852295 -207.51419067]
[256.35919189 -198.21859741]
[266.61242676 -187.22897339]
[275.06784058 -174.80293274]
[281.52722168 -161.23175049]
[285.83917236 -146.83357239]
[287.90261841 -131.94590759]
[287.66915894 -116.91773987]
[285.14428711 -102.10134888]
[280.38720703 -87.84404755]
[273.50939941 -74.48006439]
[264.67208862 -62.32265472]
[254.08245850 -51.65681458]
[241.98873901 -42.73255920]
[228.67442322 -35.75909042]
[214.45159912 -30.89987755]
[199.65370178 -28.26882553]
[184.62757874 -27.92761040]
[169.72550964 -29.88422966]
[155.29676819 -34.09281921]
[156.92181396 -19.28712654]
[144.07189941 -10.05727291]
[137.72477722 3.53367805]
[131.37763977 17.12462807]
[125.03050995 30.71557999]
[118.68338013 44.30653000]
[112.33625031 57.89748001]
[105.98912048 71.48843384]
[120.61578369 81.46884155]
[126.17363739 97.35677338]
[121.46669769 112.60375977]
[109.32354736 121.54922485]
[110.57041931 136.49731445]
[111.81729889 151.44540405]
[122.67102051 166.28373718]
[114.65437317 181.86364746]
[116.21195221 196.78256226]
[117.76953125 211.70146179]
[126.89800262 224.62361145]
[120.52410889 238.08551025]
[123.29816437 241.61624146]
[124.62852478 245.46348572]
[124.59751129 249.12147522]
[123.44722748 252.16627502]
[121.53758240 254.30181885]
[121.84963989 269.29858398]
[122.16168976 284.29531860]
[122.47374725 299.29208374]
[122.78580475 314.28884888]
[123.09786224 329.28558350]
[123.40991974 344.28234863]
[123.72197723 359.27911377]
[124.03402710 374.27584839]
[124.34608459 389.27261353]
[138.92872620 393.21255493]
[151.80993652 401.10250854]
[161.94548035 412.30282593]
[168.51373291 425.90557861]
[170.98222351 440.80804443]
[169.15086365 455.80212402]
[163.16807556 469.67236328]
[153.51889038 481.29431152]
[140.98550415 489.72586060]
[126.58395386 494.28347778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 126]
[22 124]
[23 123]
[24 122]
[27 120]
[28 119]
[29 118]
[32 57]
[33 56]
[34 55]
[37 52]
[38 51]
[39 50]
[40 49]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[63 109]
[64 108]
[66 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
