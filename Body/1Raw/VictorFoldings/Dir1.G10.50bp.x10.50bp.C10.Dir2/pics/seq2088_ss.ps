%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCCCUAGGGGGGGGGGUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAxxxxxxxxxxUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCCCCCCCCCCCUAACCGCUA\
) } def
/len { sequence length } bind def

/coor [
[71.15890503 416.47207642]
[59.27463150 407.19696045]
[49.95592499 395.34686279]
[43.74455643 381.61068726]
[41.00165558 366.78704834]
[41.88668442 351.73779297]
[46.34819031 337.33786011]
[54.12678909 324.42440796]
[64.77024078 313.74826050]
[77.65975189 305.93008423]
[92.04593658 301.42440796]
[91.11030579 286.45361328]
[90.17468262 271.48281860]
[89.23905182 256.51202393]
[88.30342102 241.54124451]
[87.36779785 226.57044983]
[86.43216705 211.59965515]
[85.49653625 196.62887573]
[76.98043823 184.40899658]
[83.84188080 170.15307617]
[82.90625763 155.18228149]
[81.97062683 140.21150208]
[81.03499603 125.24070740]
[71.52664185 113.63936615]
[57.03104401 109.78220367]
[42.53544617 105.92504883]
[28.03985023 102.06788635]
[13.54425335 98.21072388]
[-0.99068320 94.50456238]
[-15.56338596 90.94980621]
[-30.13608932 87.39504242]
[-37.10236740 100.76419830]
[-47.06619263 112.07727051]
[-59.44828415 120.67652893]
[-73.52876282 126.06202698]
[-88.48900604 127.92064667]
[-103.45925140 126.14434052]
[-117.56914520 120.83638763]
[-129.99835205 112.30536652]
[-140.02426147 101.04727173]
[-147.06396484 87.71663666]
[-150.70820618 73.08847809]
[-150.74510193 58.01326752]
[-147.17250061 43.36745071]
[-140.19812012 30.00251579]
[-130.22743225 18.69548607]
[-117.84013367 10.10373688]
[-103.75639343 4.72678089]
[-88.79502106 2.87722731]
[-73.82585907 4.66260672]
[-59.71918869 9.97911930]
[-47.29515457 18.51766968]
[-37.27607727 29.78183937]
[-30.24444962 43.11674118]
[-26.60907936 57.74710464]
[-26.58132744 72.82234192]
[-12.00862408 76.37709808]
[2.56407881 79.93186188]
[9.85485554 78.45192719]
[17.40141296 83.71513367]
[31.89700890 87.57228851]
[46.39260483 91.42945099]
[60.88820267 95.28660583]
[75.38379669 99.14376831]
[88.15611267 81.98033905]
[106.74152374 82.77638245]
[117.40314484 72.22509766]
[128.06477356 61.67380524]
[138.72639465 51.12251663]
[129.52493286 39.25279236]
[121.82131958 26.36047745]
[115.72792053 12.63357735]
[111.33358002 -1.72773015]
[108.70238495 -16.51401329]
[107.87271118 -31.50964737]
[108.85665131 -46.49594879]
[111.63986206 -61.25437164]
[116.18174744 -75.56970215]
[122.41608429 -89.23316956]
[130.25195312 -102.04553223]
[139.57507324 -113.81993866]
[150.24949646 -124.38468933]
[162.11956787 -133.58572388]
[175.01217651 -141.28884888]
[188.73930359 -147.38172913]
[203.10076904 -151.77552795]
[217.88714600 -154.40617371]
[232.88281250 -155.23529053]
[247.86907959 -154.25079346]
[262.62741089 -151.46702576]
[276.94256592 -146.92460632]
[290.60580444 -140.68975830]
[303.41787720 -132.85340881]
[315.19192505 -123.52984619]
[325.75628662 -112.85502625]
[334.95684814 -100.98461914]
[342.65951538 -88.09172058]
[348.75189209 -74.36436462]
[353.14514160 -60.00273132]
[355.77523804 -45.21625137]
[356.60379028 -30.22055626]
[355.61871338 -15.23432922]
[352.83441162 -0.47611272]
[348.29144287 13.83887577]
[342.05609131 27.50188065]
[334.21926880 40.31365585]
[324.89526367 52.08736420]
[314.22006226 62.65131760]
[302.34930420 71.85145569]
[289.45611572 79.55361938]
[275.72851562 85.64547729]
[261.36672974 90.03820801]
[246.58015442 92.66773987]
[231.58442688 93.49573517]
[216.59823608 92.51011658]
[201.84011841 89.72525024]
[187.52529907 85.18175507]
[173.86253357 78.94589233]
[161.05105591 71.10858917]
[149.27769470 61.78414154]
[138.61605835 72.33543396]
[127.95443726 82.88671875]
[117.29280853 93.43801117]
[116.69239044 113.65100098]
[96.00579071 124.30507660]
[96.94142151 139.27586365]
[97.87704468 154.24665833]
[98.81267548 169.21745300]
[107.39569855 182.50813293]
[100.46733093 195.69323730]
[101.40296173 210.66403198]
[102.33858490 225.63482666]
[103.27421570 240.60562134]
[104.20984650 255.57640076]
[105.14546967 270.54721069]
[106.08110046 285.51800537]
[107.01673126 300.48876953]
[121.85195923 303.16821289]
[135.61459351 309.32070923]
[147.50448608 318.58859253]
[156.83038330 330.43307495]
[163.05007935 344.16546631]
[165.80195618 358.98742676]
[164.92605591 374.03723145]
[160.47328186 388.43984985]
[152.70251465 401.35800171]
[142.06553650 412.04061890]
[129.18077087 419.86660767]
[114.79731750 424.38101196]
[99.75141144 425.32131958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[20 128]
[21 127]
[22 126]
[23 125]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[29 58]
[30 57]
[31 56]
[66 123]
[67 122]
[68 121]
[69 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
