%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUAACAUGGUGGGGGGGGGGAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAxxxxxxxxxxAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUCCCCCCCCCCUCGUUACAUGGU\
) } def
/len { sequence length } bind def

/coor [
[123.23920441 607.45703125]
[109.07859802 602.30206299]
[96.48885345 594.01983643]
[86.14891815 583.05706787]
[78.61640167 570.00494385]
[74.29753876 555.56732178]
[73.42523193 540.52288818]
[76.04652405 525.68286133]
[82.02005005 511.84762573]
[91.02366638 499.76327515]
[102.57182312 490.08151245]
[116.04174042 483.32443237]
[130.70700073 479.85644531]
[130.70700073 464.85644531]
[130.70700073 449.85644531]
[130.70700073 434.85644531]
[130.70700073 419.85644531]
[130.70700073 404.85644531]
[130.70700073 389.85644531]
[130.70700073 374.85644531]
[130.70700073 359.85644531]
[130.70700073 344.85644531]
[130.70700073 329.85644531]
[121.11682892 315.18960571]
[130.37881470 299.30578613]
[130.07481384 284.30886841]
[129.77081299 269.31195068]
[129.31483459 254.31887817]
[128.70695496 239.33120728]
[128.09907532 224.34352112]
[125.37799835 209.59240723]
[120.59841156 195.37425232]
[115.81882477 181.15611267]
[111.03923798 166.93797302]
[106.11580658 152.76899719]
[101.04904938 138.65065002]
[95.98228455 124.53229523]
[90.91551971 110.41394043]
[80.80347443 99.33483124]
[67.20529175 93.00321198]
[53.60710907 86.67159271]
[40.00892639 80.33997345]
[26.41074181 74.00835419]
[12.74909210 67.81486511]
[-0.97462088 61.76014328]
[-14.69833374 55.70541763]
[-30.11592865 60.14133453]
[-43.11283112 50.73601532]
[-43.71893311 34.70441437]
[-31.46928406 24.34460640]
[-15.76076508 27.60374641]
[-8.64360905 41.98170471]
[5.08010387 48.03643036]
[18.80381775 54.09115219]
[26.23670197 53.91266632]
[32.74236298 60.41017151]
[46.34054565 66.74179077]
[59.93872833 73.07341003]
[73.53691101 79.40502930]
[87.13509369 85.73664856]
[99.18038177 76.79734802]
[97.05933380 61.94806290]
[94.93829346 47.09878159]
[92.81725311 32.24949646]
[90.69620514 17.40021706]
[75.81940460 14.57896519]
[62.66596222 7.07792139]
[52.66266632 -4.28925991]
[46.89459991 -18.28955078]
[45.98744202 -33.40430450]
[50.03959274 -47.99398422]
[58.61150360 -60.47601700]
[70.77336121 -69.49643707]
[85.20593262 -74.07678223]
[100.34368896 -73.72020721]
[114.54458618 -68.46539307]
[126.26823425 -58.88233948]
[134.24291992 -46.01054764]
[137.60363770 -31.24625587]
[135.98580933 -16.19097900]
[129.56494141 -2.47780156]
[119.03752899 8.40577126]
[105.54548645 15.27917290]
[107.66653442 30.12845612]
[109.78757477 44.97773743]
[111.90861511 59.82701874]
[114.02966309 74.67630005]
[128.62403870 78.14101410]
[137.19305420 65.82956696]
[134.15852356 50.31933975]
[143.04936218 37.25302887]
[158.59080505 34.38264084]
[171.56237793 43.41112900]
[174.26829529 58.98204803]
[165.10316467 71.85745239]
[149.50451660 74.39859009]
[140.93548584 86.71003723]
[131.07952881 101.94737244]
[117.41696930 108.17984772]
[105.03387451 105.34717560]
[110.10063934 119.46553040]
[115.16739655 133.58387756]
[120.23416138 147.70223999]
[126.11212158 154.77265930]
[125.25737762 162.15838623]
[130.03697205 176.37652588]
[134.81655884 190.59466553]
[139.59614563 204.81282043]
[143.43646240 190.31274414]
[152.45034790 178.32318115]
[165.31303406 170.60623169]
[180.13407898 168.29608154]
[194.73519897 171.73223877]
[206.97047424 180.40969849]
[215.04164124 193.05311584]
[217.76249695 207.80429077]
[214.73315430 222.49520874]
[206.39881897 234.96672058]
[193.98442078 243.38591003]
[179.31449890 246.51536560]
[164.54512024 243.89517212]
[151.84695435 235.91040039]
[143.08674622 223.73564148]
[143.69464111 238.72332764]
[144.30252075 253.71099854]
[147.79428101 262.21679688]
[144.76773071 269.00793457]
[145.07173157 284.00485229]
[145.37573242 299.00177002]
[154.14169312 308.51559448]
[154.05378723 321.05023193]
[145.70700073 329.85644531]
[145.70700073 344.85644531]
[145.70700073 359.85644531]
[145.70700073 374.85644531]
[145.70700073 389.85644531]
[145.70700073 404.85644531]
[145.70700073 419.85644531]
[145.70700073 434.85644531]
[145.70700073 449.85644531]
[145.70700073 464.85644531]
[145.70700073 479.85644531]
[160.37225342 483.32443237]
[173.84217834 490.08151245]
[185.39033508 499.76327515]
[194.39395142 511.84762573]
[200.36747742 525.68286133]
[202.98876953 540.52288818]
[202.11645508 555.56732178]
[197.79759216 570.00494385]
[190.26507568 583.05706787]
[179.92514038 594.01983643]
[167.33540344 602.30206299]
[153.17478943 607.45703125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[25 129]
[26 128]
[27 127]
[28 125]
[29 124]
[30 123]
[31 108]
[32 107]
[33 106]
[34 105]
[35 103]
[36 102]
[37 101]
[38 100]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 54]
[45 53]
[46 52]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
