%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCUAUUCCGGGGGGGGGGAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCxxxxxxxxxxUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACCCCCCCCCCCAUAACCUAUUCC\
) } def
/len { sequence length } bind def

/coor [
[83.92237091 403.20452881]
[70.22022247 396.94363403]
[58.25510406 387.79028320]
[48.62719345 376.20361328]
[41.81941605 362.76480103]
[38.17324448 348.14791870]
[37.87157822 333.08615112]
[40.92954254 318.33499146]
[47.19375229 304.63436890]
[56.34999847 292.67147827]
[67.93900299 283.04635620]
[81.37947083 276.24185181]
[95.99723816 272.59921265]
[95.69323730 257.60229492]
[95.38922882 242.60537720]
[95.08522797 227.60845947]
[94.78121948 212.61154175]
[94.47721863 197.61460876]
[94.17321014 182.61769104]
[93.86920929 167.62077332]
[93.56520081 152.62385559]
[93.26119995 137.62693787]
[83.10922241 134.29139709]
[74.27721405 128.27607727]
[67.45536804 120.05105591]
[53.38908386 125.26063538]
[39.32280350 130.47021484]
[31.34508705 144.38911438]
[15.46754837 146.68765259]
[3.87007642 135.60261536]
[5.44925928 119.63747406]
[18.99368286 111.03932190]
[34.11322403 116.40393066]
[48.17950439 111.19435120]
[62.24578857 105.98477936]
[64.79568481 85.10523224]
[78.00559235 68.73589325]
[97.87551117 61.83346176]
[99.99655151 46.98418045]
[102.11759949 32.13489914]
[104.08805084 17.26488495]
[105.90770721 2.37566495]
[107.72736359 -12.51355457]
[109.54701996 -27.40277290]
[102.21441650 -38.06052780]
[104.07388306 -50.45679092]
[113.58202362 -57.99426270]
[115.70307159 -72.84354401]
[117.82411194 -87.69282532]
[119.94515228 -102.54210663]
[122.06620026 -117.39139557]
[107.50048828 -121.03062439]
[93.38616943 -126.14824677]
[79.87287140 -132.69001770]
[67.10383606 -140.58659363]
[55.21442413 -149.75424194]
[44.33067322 -160.09580994]
[34.56795502 -171.50166321]
[26.02976036 -183.85087585]
[18.80659676 -197.01257324]
[12.97503662 -210.84719849]
[8.59689617 -225.20811462]
[5.71858692 -239.94308472]
[4.37061930 -254.89590454]
[4.56728363 -269.90808105]
[6.30649519 -284.82046509]
[9.56981659 -299.47497559]
[14.32265568 -313.71627808]
[20.51462936 -327.39340210]
[28.08009911 -340.36132812]
[36.93886566 -352.48266602]
[46.99702454 -363.62884521]
[58.14794922 -373.68176270]
[70.27343750 -382.53479004]
[83.24494934 -390.09417725]
[96.92498016 -396.27969360]
[111.16851044 -401.02581787]
[125.82456207 -404.28222656]
[140.73776245 -406.01443481]
[155.75003052 -406.20401001]
[170.70222473 -404.84899902]
[185.43583679 -401.96374512]
[199.79467773 -397.57885742]
[213.62655640 -391.74078369]
[226.78483582 -384.51141357]
[239.13003540 -375.96740723]
[250.53128052 -366.19931030]
[260.86773682 -355.31066895]
[270.02978516 -343.41696167]
[277.92031860 -330.64419556]
[284.45574951 -317.12780762]
[289.56671143 -303.01110840]
[293.19906616 -288.44366455]
[295.31433105 -273.57995605]
[295.89004517 -258.57754517]
[294.92013550 -243.59544373]
[292.41488647 -228.79248047]
[288.40078735 -214.32557678]
[282.92047119 -200.34809875]
[276.03201294 -187.00819397]
[267.80841064 -174.44728088]
[258.33685303 -162.79852295]
[247.71774292 -152.18539429]
[236.06364441 -142.72039795]
[223.49810791 -134.50387573]
[210.15432739 -127.62293243]
[196.17375183 -122.15048981]
[181.70458984 -118.14456940]
[166.90022278 -115.64764404]
[151.91757202 -114.68617249]
[136.91548157 -115.27034760]
[134.79443359 -100.42106628]
[132.67340088 -85.57178497]
[130.55235291 -70.72250366]
[128.43130493 -55.87322235]
[135.85118103 -39.99766159]
[124.43624115 -25.58311653]
[122.61658478 -10.69389629]
[120.79692841 4.19532251]
[118.97726440 19.08454132]
[121.30124664 26.14702988]
[116.96688080 34.25593948]
[114.84583282 49.10522461]
[112.72479248 63.95450592]
[123.50985718 69.85892487]
[131.86253357 78.88182831]
[136.91860962 90.08967590]
[138.15498352 102.32287598]
[135.44372559 114.31575012]
[129.06535339 124.82746887]
[119.67980194 132.77046204]
[108.25811768 137.32293701]
[108.56212616 152.31985474]
[108.86612701 167.31677246]
[109.17012787 182.31369019]
[109.47413635 197.31060791]
[109.77813721 212.30752563]
[110.08214569 227.30444336]
[110.38614655 242.30137634]
[110.69015503 257.29827881]
[110.99415588 272.29519653]
[125.74752808 275.34243774]
[139.45271301 281.59671021]
[151.42227173 290.74423218]
[161.05578613 302.32626343]
[167.87008667 315.76177979]
[171.52333069 330.37689209]
[171.83230591 345.43850708]
[168.78147888 360.19113159]
[162.52391052 373.89480591]
[153.37347412 385.86215210]
[141.78912354 395.49285889]
[128.35195923 402.30389404]
[113.73596191 405.95361328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[25 35]
[26 34]
[27 33]
[38 124]
[39 123]
[40 122]
[41 120]
[42 119]
[43 118]
[44 117]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
