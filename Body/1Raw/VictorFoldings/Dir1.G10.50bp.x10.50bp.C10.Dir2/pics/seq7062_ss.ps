%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGGAGGCGGGGGGGGGGUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUAxxxxxxxxxxGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCCCCCCCCCCCAUAGAAGGC\
) } def
/len { sequence length } bind def

/coor [
[91.08493042 382.07931519]
[77.86473083 374.80685425]
[66.97792816 364.35983276]
[59.16679764 351.45059204]
[54.96391678 336.95928955]
[54.65584564 321.87393188]
[58.26358795 307.22311401]
[65.54116058 294.00573730]
[75.99237061 283.12295532]
[88.90463257 275.31680298]
[103.39756775 271.11953735]
[103.08551025 256.12277222]
[102.77345276 241.12602234]
[102.46139526 226.12927246]
[102.14933777 211.13252258]
[101.83728790 196.13575745]
[101.52523041 181.13900757]
[101.21317291 166.14225769]
[100.90111542 151.14550781]
[100.58905792 136.14874268]
[81.01078033 128.97169495]
[69.41268921 112.72068787]
[69.03134155 93.64613342]
[79.00389862 78.43142700]
[71.54898834 65.41511536]
[64.09407806 52.39880753]
[47.15698242 48.14765549]
[38.67330551 33.27112198]
[43.44749451 17.17562294]
[35.72341156 4.31722021]
[27.99932671 -8.54118252]
[20.27524185 -21.39958572]
[12.55115700 -34.25798798]
[4.82707167 -47.11639023]
[-2.89701319 -59.97479248]
[-15.23752499 -63.86909866]
[-21.39578247 -74.79131317]
[-18.52960014 -86.58506012]
[-25.98451042 -99.60136414]
[-33.43942261 -112.61767578]
[-36.92078400 -98.02726746]
[-48.20823669 -88.14832306]
[-63.13129044 -86.63093567]
[-76.17617035 -94.03572845]
[-82.52306366 -107.62679291]
[-79.82690430 -122.38249207]
[-69.08388519 -132.85089111]
[-54.26332474 -135.16413879]
[-40.84176254 -128.46812439]
[-46.03717804 -142.53964233]
[-51.23259354 -156.61116028]
[-66.07823944 -154.16101074]
[-81.11929321 -154.56497192]
[-95.81202698 -157.80844116]
[-109.62531281 -163.77413940]
[-122.05979919 -172.24645996]
[-132.66600037 -182.91908264]
[-141.06050110 -195.40623474]
[-146.93983459 -209.25650024]
[-150.09147644 -223.96920776]
[-150.40151978 -239.01248169]
[-147.85871887 -253.84254456]
[-142.55500793 -267.92327881]
[-134.68211365 -280.74569702]
[-124.52465057 -291.84625244]
[-112.44978333 -300.82366943]
[-98.89402771 -307.35342407]
[-84.34739685 -311.19949341]
[-69.33576202 -312.22280884]
[-54.40176773 -310.38641357]
[-40.08527756 -305.75665283]
[-26.90382576 -298.50091553]
[-15.33390808 -288.88146973]
[-5.79377174 -277.24609375]
[1.37171352 -264.01535034]
[5.90351963 -249.66755676]
[7.63782454 -234.72135925]
[6.51193476 -219.71705627]
[2.56655025 -205.19706726]
[-4.05570602 -191.68624878]
[-13.11544323 -179.67301941]
[-24.28515816 -169.59164429]
[-37.16107178 -161.80657959]
[-31.96565628 -147.73506165]
[-26.77024078 -133.66354370]
[-20.42311287 -120.07258606]
[-12.96820164 -107.05627441]
[-5.51329136 -94.03997040]
[10.09697247 -86.08260345]
[9.96138954 -67.69887543]
[17.68547440 -54.84047318]
[25.40955925 -41.98207092]
[33.13364410 -29.12367058]
[40.85772705 -16.26526642]
[48.58181381 -3.40686488]
[56.30590057 9.45153713]
[69.15775299 10.80309868]
[79.01837158 19.45425415]
[82.12168884 32.40019608]
[77.11038208 44.94389725]
[84.56529236 57.96020508]
[92.02020264 70.97651672]
[106.23855591 70.55309296]
[119.06369019 76.70589447]
[127.63143158 88.06082916]
[142.44918823 85.72972870]
[157.26695251 83.39862061]
[169.67518616 72.67632294]
[185.07412720 78.31586456]
[187.62266541 94.51576996]
[174.69908142 104.61096954]
[159.59805298 98.21637726]
[144.78028870 100.54748535]
[129.96253967 102.87858582]
[132.19256592 107.81266022]
[133.56933594 113.42304230]
[147.47189331 119.05500031]
[161.37445068 124.68695831]
[175.27700806 130.31890869]
[189.73109436 123.92711639]
[204.44100952 129.70585632]
[210.67964172 144.22671509]
[204.74569702 158.87471008]
[190.15969849 164.95945740]
[175.57525635 158.87098694]
[169.64505005 144.22146606]
[155.74249268 138.58950806]
[141.83993530 132.95755005]
[127.93738556 127.32559967]
[115.58581543 135.83668518]
[115.89787292 150.83345032]
[116.20992279 165.83020020]
[116.52198029 180.82695007]
[116.83403778 195.82369995]
[117.14609528 210.82046509]
[117.45815277 225.81721497]
[117.77021027 240.81396484]
[118.08226013 255.81071472]
[118.39431763 270.80746460]
[133.04931641 274.39825439]
[146.27511597 281.66049194]
[157.16998291 292.09909058]
[164.99108887 305.00231934]
[169.20515442 319.49035645]
[169.52487183 334.57546997]
[165.92845154 349.22906494]
[158.66108704 362.45208740]
[148.21829224 373.34292603]
[135.31205750 381.15902710]
[120.82236481 385.36749268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 102]
[25 101]
[26 100]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 91]
[35 90]
[38 88]
[39 87]
[40 86]
[49 85]
[50 84]
[51 83]
[105 114]
[106 113]
[107 112]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
