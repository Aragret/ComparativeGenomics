%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUUACUAAGGGGGGGGGGCAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAxxxxxxxxxxAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCCCCCCAUUACUAA\
) } def
/len { sequence length } bind def

/coor [
[281.02404785 165.58843994]
[269.11764526 156.45918274]
[257.70965576 146.71429443]
[246.83184814 136.38090515]
[236.51455688 125.48784637]
[226.78652954 114.06546783]
[217.67486572 102.14559937]
[209.20498657 89.76147461]
[201.40049744 76.94760895]
[194.28312683 63.73971176]
[180.72123718 70.14868927]
[167.15933228 76.55766296]
[153.59744263 82.96663666]
[140.03553772 89.37561035]
[126.47364807 95.78459167]
[112.91175079 102.19356537]
[99.62441254 109.15392303]
[86.63402557 116.65392303]
[73.64364624 124.15392303]
[60.65326691 131.65391541]
[47.66288757 139.15391541]
[46.17490005 154.59948730]
[35.86722565 166.19825745]
[20.70337868 169.49026489]
[6.51416445 163.20968628]
[-1.24437308 149.77149963]
[0.41108140 134.34298706]
[10.84397221 122.85671234]
[26.04263878 119.72939301]
[40.16288757 126.16354370]
[53.15326691 118.66354370]
[66.14364624 111.16354370]
[79.13402557 103.66354370]
[92.12441254 96.16354370]
[93.16045380 93.22418976]
[95.31577301 90.60846710]
[98.46796417 88.74157715]
[102.33566284 87.99564362]
[106.50277710 88.63166809]
[120.06467438 82.22269440]
[133.62657166 75.81372070]
[147.18846130 69.40473938]
[160.75036621 62.99576569]
[174.31225586 56.58679199]
[187.87416077 50.17781448]
[182.18843079 36.29336548]
[177.24337769 22.12820053]
[173.05281067 7.72179699]
[169.62837219 -6.88568878]
[166.97961426 -21.65354347]
[165.11395264 -36.54060745]
[164.03654480 -51.50538635]
[163.75041199 -66.50617218]
[164.25636292 -81.50115204]
[165.55296326 -96.44853210]
[167.63661194 -111.30665588]
[170.50151062 -126.03410339]
[174.13964844 -140.58982849]
[178.54090881 -154.93327332]
[183.69302368 -169.02444458]
[189.58161926 -182.82408142]
[196.19030762 -196.29370117]
[203.50062561 -209.39578247]
[211.49224854 -222.09379578]
[220.14285278 -234.35235596]
[229.42837524 -246.13728333]
[239.32289124 -257.41574097]
[249.79885864 -268.15631104]
[260.82705688 -278.32901001]
[272.37677002 -287.90554810]
[284.41577148 -296.85916138]
[296.91055298 -305.16497803]
[309.82623291 -312.79977417]
[323.12686157 -319.74230957]
[336.77536011 -325.97320557]
[350.73367310 -331.47512817]
[364.96289062 -336.23272705]
[379.42337036 -340.23272705]
[394.07479858 -343.46401978]
[408.87631226 -345.91754150]
[423.78671265 -347.58651733]
[438.76443481 -348.46624756]
[453.76766968 -348.55429077]
[468.75466919 -347.85043335]
[483.68362427 -346.35659790]
[498.51293945 -344.07693481]
[513.20129395 -341.01785278]
[527.70770264 -337.18786621]
[541.99182129 -332.59759521]
[556.01373291 -327.25988770]
[569.73437500 -321.18963623]
[583.11560059 -314.40368652]
[596.11999512 -306.92102051]
[608.71142578 -298.76245117]
[620.85467529 -289.95074463]
[632.51599121 -280.51043701]
[643.66284180 -270.46786499]
[654.26416016 -259.85101318]
[664.29040527 -248.68946838]
[673.71356201 -237.01434326]
[682.50750732 -224.85816956]
[690.64758301 -212.25482178]
[698.11120605 -199.23945618]
[704.87750244 -185.84832764]
[710.92767334 -172.11875916]
[716.24487305 -158.08903503]
[720.81414795 -143.79824829]
[724.62292480 -129.28620911]
[727.66046143 -114.59340668]
[729.91839600 -99.76076508]
[731.39031982 -84.82963562]
[732.07226562 -69.84162140]
[731.96221924 -54.83851624]
[731.06054688 -39.86212158]
[729.36968994 -24.95418549]
[726.89447021 -10.15625763]
[723.64172363 4.49041557]
[719.62054443 18.94501305]
[714.84210205 33.16724396]
[709.31976318 47.11747360]
[703.06884766 60.75681686]
[696.10681152 74.04725647]
[688.45312500 86.95175171]
[680.12902832 99.43433380]
[671.15777588 111.46022034]
[661.56433105 122.99587250]
[651.37548828 134.00915527]
[640.61956787 144.46937561]
[629.32659912 154.34736633]
[617.52807617 163.61560059]
[605.25689697 172.24824524]
[592.54718018 180.22123718]
[579.43438721 187.51235962]
[565.95507812 194.10128784]
[552.14685059 199.96966553]
[538.04815674 205.10112000]
[523.69824219 209.48136902]
[509.13720703 213.09817505]
[494.40557861 215.94148254]
[479.54443359 218.00337219]
[464.59515381 219.27806091]
[449.59945679 219.76203918]
[434.59909058 219.45393372]
[419.63592529 218.35459900]
[404.75161743 216.46710205]
[389.98764038 213.79672241]
[375.38519287 210.35089111]
[360.98495483 206.13920593]
[346.82705688 201.17341614]
[332.95095825 195.46734619]
[319.39532471 189.03691101]
[306.19796753 181.90003967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
