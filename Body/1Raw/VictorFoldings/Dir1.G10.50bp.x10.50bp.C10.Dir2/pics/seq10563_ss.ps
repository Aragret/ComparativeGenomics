%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAUGUCUGGGGGGGGGGAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUxxxxxxxxxxACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCCCCCCCCCCCAUGCCU\
) } def
/len { sequence length } bind def

/coor [
[107.99391937 386.83792114]
[93.97197723 381.28491211]
[81.77201843 372.41857910]
[72.16094971 360.79626465]
[65.74291992 347.14855957]
[62.92138672 332.33337402]
[63.87370300 317.28201294]
[68.54000854 302.94058228]
[76.62697601 290.21063232]
[87.62625122 279.89236450]
[100.84640503 272.63436890]
[115.45642090 268.89294434]
[115.45642090 253.89294434]
[115.45642090 238.89294434]
[115.45642090 223.89294434]
[115.45642090 208.89294434]
[115.45642090 193.89294434]
[115.45642090 178.89294434]
[115.45642090 163.89294434]
[115.45642090 148.89294434]
[115.45642090 133.89294434]
[104.76245117 135.57025146]
[94.44277954 134.07417297]
[85.38425446 129.76638794]
[78.29749298 123.24008942]
[73.66170502 115.24974060]
[71.69474030 106.62945557]
[72.35001373 98.20855713]
[58.20269394 93.22323608]
[44.05537796 88.23791504]
[29.90806198 83.25259399]
[-1.37102997 115.10227203]
[-16.30704308 113.71824646]
[-31.24305534 112.33422089]
[-46.17906952 110.95019531]
[-54.98742294 123.53226471]
[-68.91349030 130.00993347]
[-84.21123505 128.64073181]
[-96.76563263 119.79298401]
[-103.19961548 105.84667969]
[-101.78247070 90.55330658]
[-92.89541626 78.02670288]
[-78.92900848 71.63646698]
[-63.64015198 73.10153961]
[-51.14146805 82.02781677]
[-44.79504395 96.01418304]
[-29.85902977 97.39820862]
[-14.92301750 98.78223419]
[0.01299543 100.16625977]
[3.00714374 93.28984833]
[11.98958874 72.66059875]
[0.80129200 62.66950607]
[-10.38700485 52.67840958]
[-26.42117500 52.14459991]
[-35.88500214 39.19023514]
[-31.51864815 23.75279808]
[-16.67160797 17.67456436]
[-2.73325706 25.61823845]
[-0.39590764 41.49011230]
[10.79238892 51.48120880]
[21.98068619 61.47230530]
[34.89338303 69.10527802]
[49.04069901 74.09059906]
[63.18801498 79.07592010]
[77.33533478 84.06124115]
[104.72151947 67.86557007]
[135.34669495 88.24229431]
[144.98851013 76.75162506]
[154.63032532 65.26096344]
[164.27214050 53.77029419]
[173.91394043 42.27962875]
[163.82608032 31.14639854]
[155.34822083 18.74319458]
[148.63827515 5.30107927]
[143.82125854 -8.92952728]
[140.98692322 -23.68351936]
[140.18804932 -38.68603897]
[141.43954468 -53.65759659]
[144.71806335 -68.31928253]
[149.96255493 -82.39795685]
[157.07530212 -95.63134766]
[165.92379761 -107.77291870]
[176.34321594 -118.59648132]
[188.13943481 -127.90039825]
[201.09271240 -135.51135254]
[214.96171570 -141.28753662]
[229.48809814 -145.12136841]
[244.40121460 -146.94142151]
[259.42324829 -146.71376038]
[274.27438354 -144.44265747]
[288.67791748 -140.17042542]
[302.36550903 -133.97662354]
[315.08221436 -125.97666168]
[326.59109497 -116.31956482]
[336.67776489 -105.18524170]
[345.15426636 -92.78112030]
[351.86276245 -79.33827972]
[356.67822266 -65.10715485]
[359.51098633 -50.35285187]
[360.30822754 -35.35024643]
[359.05511475 -20.37882614]
[355.77499390 -5.71749449]
[350.52899170 8.36061287]
[343.41482544 21.59323120]
[334.56500244 33.73384476]
[324.14440918 44.55628204]
[312.34716797 53.85892487]
[299.39309692 61.46847153]
[285.52346802 67.24316406]
[270.99667358 71.07542419]
[256.08334351 72.89385223]
[241.06132507 72.66457367]
[226.21044922 70.39186096]
[211.80738831 66.11805725]
[198.12043762 59.92278290]
[185.40461731 51.92144012]
[175.76280212 63.41210938]
[166.12098694 74.90277863]
[156.47917175 86.39344025]
[146.83735657 97.88410950]
[149.89575195 112.56900787]
[163.32319641 119.25508118]
[176.75065613 125.94115448]
[192.35777283 122.22666168]
[204.90345764 132.22592163]
[204.76373291 148.26837158]
[192.04579163 158.04760742]
[176.50573730 154.06184387]
[170.06457520 139.36860657]
[156.63713074 132.68252563]
[143.20967102 125.99645233]
[130.45642090 133.89294434]
[130.45642090 148.89294434]
[130.45642090 163.89294434]
[130.45642090 178.89294434]
[130.45642090 193.89294434]
[130.45642090 208.89294434]
[130.45642090 223.89294434]
[130.45642090 238.89294434]
[130.45642090 253.89294434]
[130.45642090 268.89294434]
[145.06643677 272.63436890]
[158.28659058 279.89236450]
[169.28587341 290.21063232]
[177.37283325 302.94058228]
[182.03913879 317.28201294]
[182.99145508 332.33337402]
[180.16992188 347.14855957]
[173.75189209 360.79626465]
[164.14082336 372.41857910]
[151.94085693 381.28491211]
[137.91891479 386.83792114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 65]
[29 64]
[30 63]
[31 62]
[32 49]
[33 48]
[34 47]
[35 46]
[51 61]
[52 60]
[53 59]
[67 120]
[68 119]
[69 118]
[70 117]
[71 116]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
