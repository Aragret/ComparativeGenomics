%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAUUCGAGGGGGGGGGGGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACAAxxxxxxxxxxCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCCCCCCCCCCCUUCUUCGA\
) } def
/len { sequence length } bind def

/coor [
[69.15401459 386.83843994]
[55.30807877 380.82241821]
[43.59941483 371.29299927]
[34.89689255 358.95733643]
[29.84629059 344.73080444]
[28.82239914 329.66912842]
[31.90119743 314.88998413]
[38.85422134 301.49005127]
[49.16550446 290.46371460]
[62.06988525 282.62921143]
[76.60977173 278.56790161]
[76.60977173 263.56790161]
[76.60977173 248.56788635]
[76.60977173 233.56788635]
[76.60977173 218.56788635]
[76.60977173 203.56788635]
[76.60977173 188.56788635]
[76.60977173 173.56788635]
[76.60977173 158.56788635]
[76.60977173 143.56788635]
[64.62294006 134.55035400]
[50.21072388 138.70825195]
[35.79850769 142.86613464]
[28.12152863 156.41979980]
[13.44626141 160.43118286]
[0.57222646 153.02882385]
[-13.83998966 157.18672180]
[-28.25220490 161.34460449]
[-42.66442108 165.50248718]
[-56.20689011 175.70239258]
[-69.75709534 165.51278687]
[-63.71677399 149.67135620]
[-46.82230759 151.09027100]
[-32.41009140 146.93238831]
[-17.99787712 142.77450562]
[-3.58566093 138.61660767]
[3.36705852 125.49429321]
[17.92386436 121.07229614]
[31.64061928 128.45391846]
[46.05283737 124.29603577]
[60.46504974 120.13814545]
[57.15872192 109.43300629]
[56.66420746 98.36692047]
[58.94961929 87.65789795]
[63.80475616 77.98475647]
[70.85867310 69.94410706]
[79.60734558 64.01358795]
[89.44927979 60.52373505]
[99.72676086 59.63998032]
[109.76970673 61.35581207]
[116.11683655 47.76486206]
[122.46396637 34.17391205]
[128.81109619 20.58296013]
[123.65083313 5.88570166]
[130.28134155 -7.80703831]
[144.32472229 -12.63598633]
[150.67185974 -26.22693634]
[145.78691101 -45.17388535]
[158.34738159 -59.32662964]
[158.34738159 -74.32662964]
[158.34738159 -89.32662964]
[158.19134521 -104.32582092]
[157.87928772 -119.32257080]
[149.85656738 -132.95880127]
[157.32742310 -145.84426880]
[157.01536560 -160.84103394]
[156.70330811 -175.83778381]
[142.42945862 -180.99742126]
[130.98594666 -190.96791077]
[123.92041016 -204.40078735]
[122.18839264 -219.47940063]
[126.02413940 -234.16448975]
[134.90890503 -246.46998596]
[147.64108276 -254.73170471]
[162.49876404 -257.83230591]
[177.47256470 -255.35244751]
[190.53741455 -247.62751770]
[199.92637634 -235.70225525]
[204.36967468 -221.18945312]
[203.26640320 -206.05184937]
[196.76576233 -192.33666992]
[185.74691772 -181.89878845]
[171.70005798 -176.14984131]
[172.01211548 -161.15309143]
[172.32417297 -146.15632629]
[180.32456970 -133.59277344]
[172.87603760 -119.63462830]
[173.18809509 -104.63787842]
[176.49305725 -97.97282410]
[173.34738159 -89.32662964]
[173.34738159 -74.32662964]
[173.34738159 -59.32662964]
[175.76954651 -58.13686752]
[178.00749207 -56.62886047]
[180.01965332 -54.83061600]
[193.92221069 -60.46257401]
[193.66069031 -75.63808441]
[198.90254211 -89.88194275]
[208.93882751 -101.26778412]
[222.41221619 -108.25576782]
[237.50056458 -109.90083313]
[252.16328430 -105.98049164]
[264.41735840 -97.02493286]
[272.60552979 -84.24533844]
[275.62042236 -69.37002563]
[273.05429077 -54.41076660]
[265.25418091 -41.39067841]
[253.27499390 -32.07062149]
[238.73681641 -27.71105576]
[223.60581970 -28.90157700]
[209.92834473 -35.48117828]
[199.55415344 -46.56001663]
[185.65161133 -40.92806244]
[179.75752258 -25.95163918]
[164.26280212 -19.87980843]
[157.91567993 -6.28885698]
[163.22738647 7.57914209]
[156.98410034 21.45271683]
[142.40205383 26.93008995]
[136.05491638 40.52104187]
[129.70779419 54.11199188]
[123.36066437 67.70294189]
[132.27734375 75.76822662]
[138.47692871 86.24431610]
[141.32507324 98.23361206]
[140.47911072 110.67775726]
[135.92658997 122.45098877]
[127.99428558 132.46199036]
[117.32628632 139.75497437]
[104.83218384 143.60054016]
[91.60977173 143.56788635]
[91.60977173 158.56788635]
[91.60977173 173.56788635]
[91.60977173 188.56788635]
[91.60977173 203.56788635]
[91.60977173 218.56788635]
[91.60977173 233.56788635]
[91.60977173 248.56788635]
[91.60977173 263.56790161]
[91.60977173 278.56790161]
[106.14965820 282.62921143]
[119.05403900 290.46371460]
[129.36532593 301.49005127]
[136.31834412 314.88998413]
[139.39714050 329.66912842]
[138.37326050 344.73080444]
[133.32264709 358.95733643]
[124.62012482 371.29299927]
[112.91146851 380.82241821]
[99.06552887 386.83843994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 41]
[22 40]
[23 39]
[26 36]
[27 35]
[28 34]
[29 33]
[50 122]
[51 121]
[52 120]
[53 119]
[56 116]
[57 115]
[59 92]
[60 91]
[61 90]
[62 88]
[63 87]
[65 85]
[66 84]
[67 83]
[95 113]
[96 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
