%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUACACCAGGGGGGGGGGCAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAxxxxxxxxxxAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUCAACAGAAACAAACCCCCCCCCCGCAUACAUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.78271484]
[71.19830322 356.76669312]
[59.48964310 347.23727417]
[50.78712082 334.90161133]
[45.73651886 320.67507935]
[44.71262741 305.61340332]
[47.79142761 290.83425903]
[54.74444962 277.43432617]
[65.05573273 266.40798950]
[77.96011353 258.57348633]
[92.50000000 254.51216125]
[92.50000000 239.51216125]
[92.50000000 224.51216125]
[92.50000000 209.51216125]
[92.50000000 194.51216125]
[92.50000000 179.51216125]
[92.50000000 164.51216125]
[92.50000000 149.51216125]
[92.50000000 134.51216125]
[92.50000000 119.51216888]
[82.02792358 113.41170502]
[76.12792969 101.87457275]
[77.46305084 88.14160156]
[62.46386337 87.98556519]
[47.46467590 87.82952881]
[32.46548843 87.67349243]
[24.59223366 100.78681183]
[11.30011082 108.14997864]
[-3.79259372 107.87313080]
[-16.63436890 100.13072968]
[-23.82807541 87.08786774]
[-38.82726288 86.93183136]
[-53.82645035 86.77579498]
[-68.82563782 86.61975861]
[-83.82482910 86.46372223]
[-96.24634552 96.61682892]
[-111.89804840 93.09494019]
[-118.77329254 78.59974670]
[-111.59798431 64.25072479]
[-95.87639618 61.05521393]
[-83.66879272 71.46453094]
[-68.66960144 71.62056732]
[-53.67041397 71.77660370]
[-38.67122650 71.93264008]
[-23.67203903 72.08868408]
[-16.20854950 59.19829941]
[-3.20848179 51.72473145]
[11.88671589 51.76192474]
[25.02277946 59.40002823]
[32.62152481 72.67430115]
[47.62071228 72.83033752]
[62.61989975 72.98637390]
[77.61908722 73.14241028]
[90.93424225 66.23541260]
[99.44533539 53.88384247]
[107.95642090 41.53226852]
[116.46751404 29.18069649]
[124.97860718 16.82912254]
[113.49671173 7.15846062]
[103.00179291 -3.57523060]
[93.59182739 -15.27173042]
[85.35468292 -27.82182884]
[78.36727142 -41.10834503]
[72.69482422 -55.00722504]
[68.39031219 -69.38869476]
[65.49391937 -84.11847687]
[64.03269958 -99.05903625]
[64.02029419 -114.07087708]
[65.45681000 -129.01383972]
[68.32884216 -143.74838257]
[72.60957336 -158.13694763]
[78.25903320 -172.04519653]
[85.22447205 -185.34324646]
[93.44085693 -197.90693665]
[102.83147430 -209.61897278]
[113.30863190 -220.37001038]
[124.77452087 -230.05964661]
[137.12207031 -238.59741211]
[150.23600769 -245.90357971]
[163.99388123 -251.90997314]
[178.26721191 -256.56045532]
[192.92277527 -259.81164551]
[207.82369995 -261.63317871]
[222.83085632 -262.00805664]
[237.80413818 -260.93276978]
[252.60374451 -258.41732788]
[267.09146118 -254.48526001]
[281.13208008 -249.17324829]
[294.59442139 -242.53092957]
[307.35284424 -234.62028503]
[319.28820801 -225.51519775]
[330.28906250 -215.30067444]
[340.25271606 -204.07208252]
[349.08612061 -191.93428040]
[356.70681763 -179.00057983]
[363.04360962 -165.39173889]
[368.03738403 -151.23484802]
[371.64151001 -136.66206360]
[373.82229614 -121.80946350]
[374.55938721 -106.81571960]
[373.84591675 -91.82083893]
[371.68856812 -76.96482086]
[368.10745239 -62.38637543]
[363.13601685 -48.22161865]
[356.82064819 -34.60280991]
[349.22036743 -21.65710831]
[340.40612793 -9.50538349]
[330.46020508 1.73890233]
[319.47546387 11.97076225]
[307.55447388 21.09466171]
[294.80853271 29.02540970]
[281.35665894 35.68896103]
[267.32446289 41.02309418]
[252.84295654 44.97800446]
[238.04734802 47.51676941]
[223.07577515 48.61568069]
[208.06803894 48.26448059]
[193.16426086 46.46644592]
[178.50360107 43.23836899]
[164.22293091 38.61038589]
[150.45561218 32.62570572]
[137.33016968 25.34021378]
[128.81909180 37.69178772]
[120.30799866 50.04335785]
[111.79690552 62.39493179]
[103.28582001 74.74650574]
[115.02401733 80.57908630]
[121.92575073 91.15822601]
[122.48796844 103.30068207]
[117.03518677 113.62933350]
[107.50000000 119.51216888]
[107.50000000 134.51216125]
[107.50000000 149.51216125]
[107.50000000 164.51216125]
[107.50000000 179.51216125]
[107.50000000 194.51216125]
[107.50000000 209.51216125]
[107.50000000 224.51216125]
[107.50000000 239.51216125]
[107.50000000 254.51216125]
[122.03988647 258.57348633]
[134.94427490 266.40798950]
[145.25555420 277.43432617]
[152.20857239 290.83425903]
[155.28736877 305.61340332]
[154.26348877 320.67507935]
[149.21287537 334.90161133]
[140.51036072 347.23727417]
[128.80169678 356.76669312]
[114.95575714 362.78271484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 53]
[24 52]
[25 51]
[26 50]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[54 126]
[55 125]
[56 124]
[57 123]
[58 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
