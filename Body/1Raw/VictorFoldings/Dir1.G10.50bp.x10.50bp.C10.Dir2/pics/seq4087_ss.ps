%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAACAUUGGGGGGGGGGAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGAxxxxxxxxxxCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCCCCCCCCCCCACAAACACU\
) } def
/len { sequence length } bind def

/coor [
[92.51651764 406.01678467]
[79.95829773 397.66561890]
[69.87207031 386.45318604]
[62.89188004 373.08425903]
[59.45649338 358.39926147]
[59.78187180 343.32131958]
[63.84755707 328.79818726]
[71.39797974 315.74285889]
[81.95850372 304.97595215]
[94.86530304 297.17431641]
[109.30702972 292.82836914]
[108.68305206 277.84136963]
[108.05907440 262.85433960]
[107.43509674 247.86732483]
[106.81111908 232.88031006]
[106.18714142 217.89329529]
[105.56316376 202.90628052]
[104.93918610 187.91925049]
[104.31520844 172.93223572]
[103.69123077 157.94522095]
[100.24833679 151.35037231]
[103.21345520 142.64060974]
[102.90139771 127.64385223]
[79.22093201 112.91589355]
[82.12682343 88.71721649]
[73.10929108 76.73038483]
[64.09175873 64.74355316]
[55.07423019 52.75672150]
[42.26321793 60.58190536]
[28.75676727 67.13410187]
[14.68098545 72.35213470]
[0.16729656 76.18727875]
[-14.64878464 78.60373688]
[-29.62892151 79.57892609]
[-44.63324738 79.10375977]
[-59.52166367 77.18267059]
[-74.15515900 73.83359528]
[-88.39710236 69.08779144]
[-102.11450958 62.98958969]
[-115.17931366 55.59591675]
[-127.46952820 46.97581100]
[-138.87039185 37.20975494]
[-149.27546692 26.38893890]
[-158.58758545 14.61439323]
[-166.71980286 1.99605560]
[-173.59620667 -11.34825516]
[-179.15257263 -25.29394531]
[-183.33703613 -39.71080399]
[-186.11051941 -54.46422195]
[-187.44712830 -69.41644287]
[-187.33438110 -84.42786407]
[-185.77331543 -99.35832977]
[-182.77854919 -114.06842041]
[-178.37800598 -128.42079163]
[-172.61277771 -142.28144836]
[-165.53671265 -155.52096558]
[-157.21586609 -168.01573181]
[-147.72793579 -179.64906311]
[-137.16149902 -190.31237793]
[-125.61522675 -199.90606689]
[-113.19692230 -208.34059143]
[-100.02252960 -215.53718567]
[-86.21506500 -221.42866516]
[-71.90344238 -225.95999146]
[-57.22129059 -229.08888245]
[-42.30569839 -230.78611755]
[-27.29593086 -231.03585815]
[-12.33213234 -229.83575439]
[2.44598031 -227.19702148]
[16.90042496 -223.14430237]
[30.89624023 -217.71542358]
[44.30274582 -210.96109009]
[56.99477005 -202.94435120]
[68.85380554 -193.74008179]
[79.76912689 -183.43418884]
[89.63881683 -172.12292480]
[98.37071991 -159.91188049]
[105.88330841 -146.91510010]
[112.10643768 -133.25390625]
[116.98200989 -119.05586243]
[120.46449280 -104.45354462]
[122.52136993 -89.58327484]
[123.13343811 -74.58391571]
[122.29499054 -59.59550476]
[120.01384735 -44.75798798]
[116.31130219 -30.20990372]
[111.22193909 -16.08708954]
[104.79327393 -2.52140641]
[97.08532715 10.36048126]
[88.17005920 22.43829727]
[78.13072968 33.59926987]
[67.06106567 43.73918915]
[76.07859039 55.72602463]
[85.09612274 67.71285248]
[94.11365509 79.69969177]
[104.39958954 77.62718201]
[115.20396423 80.83155060]
[123.81880188 89.25343323]
[127.75730896 101.46027374]
[142.75001526 100.99223328]
[157.74270630 100.52419281]
[172.73539734 100.05615234]
[187.72241211 99.43217468]
[202.70213318 98.65232849]
[217.68183899 97.87248230]
[223.10491943 83.64187622]
[233.85185242 72.85191345]
[248.06066895 67.37201691]
[263.26962280 68.15161896]
[276.84365845 75.05564880]
[286.43099976 86.88793182]
[290.37054443 101.59845734]
[287.97979736 116.63854980]
[279.67294312 129.40240479]
[266.88919067 137.67861938]
[251.84342957 140.03327942]
[237.14239502 136.05844116]
[225.33312988 126.44274902]
[218.46168518 112.85219574]
[203.48197937 113.63204193]
[188.50225830 114.41188812]
[181.94357300 117.92320251]
[173.20344543 115.04884338]
[158.21075439 115.51689148]
[143.21804810 115.98493195]
[128.22535706 116.45297241]
[117.89814758 127.33180237]
[118.21020508 142.32855225]
[118.67824554 157.32124329]
[119.30222321 172.30825806]
[119.92620087 187.29528809]
[120.55017853 202.28230286]
[121.17415619 217.26931763]
[121.79813385 232.25633240]
[122.42211151 247.24334717]
[123.04608917 262.23034668]
[123.67006683 277.21737671]
[124.29404449 292.20440674]
[139.04704285 295.33483887]
[152.55767822 302.03659058]
[163.97666931 311.88836670]
[172.58618164 324.27090454]
[177.84503174 338.40582275]
[179.42263794 353.40454102]
[177.21983337 368.32427979]
[171.37507629 382.22714233]
[162.25579834 394.23919678]
[150.43522644 403.60534668]
[136.65641785 409.73684692]
[121.78551483 412.24826050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 128]
[23 127]
[25 95]
[26 94]
[27 93]
[28 92]
[99 126]
[100 125]
[101 124]
[102 123]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
