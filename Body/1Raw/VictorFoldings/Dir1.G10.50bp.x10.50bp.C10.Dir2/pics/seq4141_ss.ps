%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACCACGGGGGGGGGGUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACAxxxxxxxxxxAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCCCCCCCCCCCUUACCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 424.44384766]
[71.19830322 418.42782593]
[59.48964310 408.89840698]
[50.78712082 396.56274414]
[45.73651886 382.33621216]
[44.71262741 367.27453613]
[47.79142761 352.49536133]
[54.74444962 339.09542847]
[65.05573273 328.06912231]
[77.96011353 320.23458862]
[92.50000000 316.17327881]
[92.50000000 301.17327881]
[92.50000000 286.17327881]
[92.50000000 271.17327881]
[92.50000000 256.17327881]
[92.50000000 241.17329407]
[92.50000000 226.17329407]
[92.50000000 211.17329407]
[92.50000000 196.17329407]
[92.50000000 181.17329407]
[92.50000000 166.17329407]
[77.01525879 162.50483704]
[62.84287643 155.26754761]
[50.79206085 144.87463379]
[41.55088425 131.91950989]
[35.64698410 117.14186096]
[33.41746140 101.38546753]
[34.98961258 85.54996490]
[40.27367401 70.53952026]
[48.96793747 57.21118164]
[60.57599258 46.32596970]
[74.43504333 38.50539017]
[89.75378418 34.19598007]
[89.12980652 19.20896339]
[88.50582886 4.22194767]
[87.88185120 -10.76506805]
[87.25787354 -25.75208473]
[72.26186371 -26.36786270]
[57.36791992 -28.21990967]
[42.67779541 -31.29557037]
[28.29183006 -35.57383728]
[14.30830097 -41.02548218]
[0.82272989 -47.61326981]
[-12.07276154 -55.29219055]
[-24.29008102 -64.00979614]
[-35.74577332 -73.70652771]
[-46.36158371 -84.31615448]
[-56.06499100 -95.76619720]
[-64.78971100 -107.97843170]
[-72.47614288 -120.86944580]
[-79.07178497 -134.35118103]
[-84.53157806 -148.33152771]
[-88.81822205 -162.71499634]
[-91.90244293 -177.40333557]
[-93.76316833 -192.29618835]
[-94.38768005 -207.29183960]
[-93.77172852 -222.28784180]
[-91.91950226 -237.18176270]
[-88.84366608 -251.87185669]
[-84.56523132 -266.25775146]
[-79.11341858 -280.24124146]
[-72.52546692 -293.72671509]
[-64.84639740 -306.62213135]
[-56.12864304 -318.83932495]
[-46.43177414 -330.29492188]
[-35.82202148 -340.91058350]
[-24.37186623 -350.61386108]
[-12.15952301 -359.33843994]
[0.73158371 -367.02471924]
[14.21339226 -373.62020874]
[28.19380760 -379.07983398]
[42.57732773 -383.36630249]
[57.26569748 -386.45034790]
[72.15857697 -388.31088257]
[87.15423584 -388.93524170]
[102.15023041 -388.31909180]
[117.04412842 -386.46670532]
[131.73417664 -383.39068604]
[146.12004089 -379.11209106]
[160.10343933 -373.66009521]
[173.58885193 -367.07199097]
[186.48416138 -359.39276123]
[198.70127869 -350.67486572]
[210.15673828 -340.97784424]
[220.77229309 -330.36798096]
[230.47543335 -318.91769409]
[239.19985962 -306.70526123]
[246.88598633 -293.81405640]
[253.48130798 -280.33218384]
[258.94076538 -266.35168457]
[263.22708130 -251.96812439]
[266.31094360 -237.27972412]
[268.17129517 -222.38681030]
[268.79547119 -207.39114380]
[268.17913818 -192.39515686]
[266.32656860 -177.50128174]
[263.25039673 -162.81126404]
[258.97161865 -148.42546082]
[253.51945496 -134.44212341]
[246.93119812 -120.95678711]
[239.25181580 -108.06156921]
[230.53376770 -95.84455872]
[220.83662415 -84.38921356]
[210.22662354 -73.77378845]
[198.77622986 -64.07078552]
[186.56367493 -55.34650421]
[173.67239380 -47.66053391]
[160.19042969 -41.06537247]
[146.20988464 -35.60607910]
[131.82626343 -31.31994629]
[117.13781738 -28.23625183]
[102.24488831 -26.37606239]
[102.86886597 -11.38904572]
[103.49284363 3.59797025]
[104.11682129 18.58498573]
[104.74079895 33.57200241]
[118.56413269 36.04277039]
[131.56208801 41.35711288]
[143.15678406 49.27874374]
[152.83270264 59.45547104]
[160.15966797 71.43482971]
[164.81188965 84.68420410]
[166.58253479 98.61453247]
[165.39289856 112.60646057]
[161.29585266 126.03789520]
[154.47357178 138.31167603]
[145.22935486 148.88209534]
[133.97422791 157.27919006]
[121.20858765 163.12962341]
[107.50000000 166.17329407]
[107.50000000 181.17329407]
[107.50000000 196.17329407]
[107.50000000 211.17329407]
[107.50000000 226.17329407]
[107.50000000 241.17329407]
[107.50000000 256.17327881]
[107.50000000 271.17327881]
[107.50000000 286.17327881]
[107.50000000 301.17327881]
[107.50000000 316.17327881]
[122.03988647 320.23458862]
[134.94427490 328.06912231]
[145.25555420 339.09542847]
[152.20857239 352.49536133]
[155.28736877 367.27453613]
[154.26348877 382.33621216]
[149.21287537 396.56274414]
[140.51036072 408.89840698]
[128.80169678 418.42782593]
[114.95575714 424.44384766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[33 116]
[34 115]
[35 114]
[36 113]
[37 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
