%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAGCUUACCGGGGGGGGGGUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUxxxxxxxxxxAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGCCCCCCCCCCUGUAGCUUAAC\
) } def
/len { sequence length } bind def

/coor [
[115.16690826 393.24612427]
[101.67803192 386.51458740]
[90.19252777 376.75000000]
[81.37815857 364.52011108]
[75.74738312 350.53591919]
[73.62754822 335.61044312]
[75.14192200 320.61145020]
[80.20244598 306.41091919]
[88.51490784 293.83450317]
[99.59603882 283.61337280]
[112.80159760 276.34170532]
[127.36381531 272.44235229]
[127.05583954 257.44552612]
[126.74786377 242.44866943]
[126.43988800 227.45184326]
[126.13191223 212.45500183]
[125.82392883 197.45816040]
[125.51595306 182.46131897]
[125.20797729 167.46449280]
[124.90000153 152.46765137]
[116.90301514 139.90191650]
[124.35533905 125.94579315]
[124.04736328 110.94895935]
[101.68425751 124.04277802]
[81.62916565 111.70102692]
[66.97644043 114.91002655]
[52.32371521 118.11901855]
[43.77904510 131.14309692]
[28.87338638 134.18873596]
[16.50958443 125.96243286]
[6.67908812 138.64079285]
[-9.36379051 138.71575928]
[-19.31232643 126.12980652]
[-15.53485489 110.53781128]
[-0.92912936 103.90061951]
[13.30058861 111.30970764]
[21.09440613 98.66882324]
[35.90863800 95.20571136]
[49.11471939 103.46629333]
[63.76744461 100.25730133]
[78.42016602 97.04830170]
[82.35450745 85.33928680]
[92.41397095 77.12329102]
[105.93463898 75.44481659]
[118.85236359 81.48666382]
[114.01255035 67.28890991]
[109.17272949 53.09115601]
[104.33291626 38.89340591]
[90.42888641 31.87088966]
[85.72287750 17.40340614]
[92.50345612 4.19131517]
[87.66364288 -10.00643730]
[82.82382202 -24.20418930]
[75.86346436 -37.49153137]
[66.94731903 -49.55396271]
[58.03116608 -61.61639404]
[42.64377213 -60.50660706]
[29.11002731 -67.91210175]
[21.74850464 -81.46981049]
[22.90823746 -96.85352325]
[32.21915817 -109.15435028]
[46.71018600 -114.44713593]
[61.75728989 -111.04298401]
[72.55899048 -100.02813721]
[75.66850281 -84.91739655]
[70.09359741 -70.53254700]
[79.00975037 -58.47011566]
[87.92589569 -46.40768051]
[86.98184967 -61.37794495]
[91.41409302 -75.70816803]
[100.64517212 -87.53133392]
[113.47241211 -95.30706024]
[128.22460938 -98.02229309]
[142.97979736 -95.32327271]
[155.81556702 -87.56163788]
[165.05963135 -75.74862671]
[169.50761414 -61.42328262]
[168.58001709 -46.45198822]
[162.39768982 -32.78528595]
[151.76609802 -22.20373344]
[138.07037354 -16.08595085]
[123.09487152 -15.22899628]
[108.79067230 -19.74451637]
[97.02157593 -29.04400635]
[101.86138916 -14.84625340]
[106.70121002 -0.64850128]
[120.13987732 5.67112732]
[125.25039673 20.00072289]
[118.53067017 34.05358887]
[123.37048340 48.25133896]
[128.21029663 62.44909286]
[133.05012512 76.64684296]
[145.96281433 84.27981567]
[160.73493958 81.67509460]
[175.50704956 79.07037354]
[190.27915955 76.46564484]
[204.86291504 72.95648193]
[219.20297241 68.55618286]
[233.54302979 64.15588379]
[247.88310242 59.75558090]
[262.22314453 55.35527802]
[276.56323242 50.95497894]
[290.90328979 46.55467987]
[305.24334717 42.15437698]
[319.58340454 37.75407791]
[330.35308838 25.38694954]
[346.39413452 28.79534149]
[351.20486450 44.47299194]
[339.83645630 56.29207993]
[323.98370361 52.09413910]
[309.64364624 56.49443817]
[295.30358887 60.89474106]
[280.96353149 65.29504395]
[266.62347412 69.69534302]
[252.28340149 74.09564209]
[237.94334412 78.49594116]
[223.60327148 82.89624023]
[209.26321411 87.29653931]
[221.75036621 95.60744476]
[224.88940430 110.27531433]
[216.89736938 122.96891785]
[202.31369019 126.47837067]
[189.42178345 118.81033325]
[185.54415894 104.32019806]
[192.88388062 91.23776245]
[178.11177063 93.84248352]
[163.33966064 96.44721222]
[148.56753540 99.05193329]
[139.04420471 110.64098358]
[139.35217285 125.63781738]
[147.37118530 139.27621460]
[139.89683533 152.15966797]
[140.20481873 167.15650940]
[140.51278687 182.15335083]
[140.82077026 197.15019226]
[141.12875366 212.14701843]
[141.43672180 227.14385986]
[141.74470520 242.14070129]
[142.05267334 257.13754272]
[142.36065674 272.13436890]
[157.07069397 275.43258667]
[170.56364441 282.15594482]
[182.05506897 291.91354370]
[190.87684631 304.13809204]
[196.51611328 318.11889648]
[198.64498901 333.04306030]
[197.13970947 348.04299927]
[192.08779907 362.24655151]
[183.78295898 374.82803345]
[172.70802307 385.05590820]
[159.50688171 392.33554077]
[144.94702148 396.24374390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 130]
[23 129]
[25 41]
[26 40]
[27 39]
[30 36]
[45 92]
[46 91]
[47 90]
[48 89]
[51 86]
[52 85]
[53 84]
[54 68]
[55 67]
[56 66]
[93 128]
[94 127]
[95 126]
[96 125]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
