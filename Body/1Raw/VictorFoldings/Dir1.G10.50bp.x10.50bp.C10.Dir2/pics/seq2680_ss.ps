%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAGUAAGGGGGGGGGGAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUxxxxxxxxxxCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACCCCCCCCCCCAAAAAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[299.78176880 341.63677979]
[295.83743286 327.15435791]
[293.18850708 312.38003540]
[291.85571289 297.42941284]
[291.84945679 282.41949463]
[293.16986084 267.46777344]
[295.80651855 252.69123840]
[299.73883057 238.20558167]
[304.93600464 224.12413025]
[311.35736084 210.55712891]
[298.41931152 202.96722412]
[285.48126221 195.37730408]
[272.54318237 187.78739929]
[257.65042114 188.02119446]
[249.66229248 174.36468506]
[236.72424316 166.77476501]
[223.78617859 159.18486023]
[210.84812927 151.59495544]
[197.91006470 144.00505066]
[184.97201538 136.41513062]
[171.31576538 130.20973206]
[157.04031372 125.60416412]
[142.71771240 121.14734650]
[128.39511108 116.69053650]
[120.27999115 127.30774689]
[108.27861786 134.10148621]
[94.14958954 135.69311523]
[80.11775208 131.49636841]
[68.52388763 121.86321259]
[61.43522644 108.07756042]
[46.44253159 107.60951996]
[31.44983673 107.14147949]
[24.44729042 120.70345306]
[12.24873352 129.87721252]
[-2.72380400 132.84130859]
[-17.49751282 129.00721741]
[-29.13906288 119.13619995]
[-35.33701706 105.18814850]
[-34.86076355 89.93246460]
[-27.80486679 76.39817047]
[-15.57027817 67.27251434]
[-0.58618468 64.36740112]
[14.17231178 68.25964355]
[25.77490044 78.17642975]
[31.91787910 92.14878082]
[46.91057587 92.61682129]
[61.90327072 93.08486938]
[67.39030457 79.12447357]
[56.09129715 69.25875092]
[44.79229355 59.39303207]
[33.49328613 49.52730942]
[22.19428253 39.66158295]
[6.15515757 39.30659485]
[-3.45252657 26.45856094]
[0.74142319 10.97339630]
[15.51976776 4.72999287]
[29.54582596 12.51775551]
[32.06000519 28.36257935]
[43.35901260 38.22830200]
[54.65801620 48.09402466]
[65.95702362 57.95974731]
[77.25602722 67.82546997]
[98.08073425 62.26325989]
[117.77396393 68.49902344]
[130.44563293 83.66011047]
[132.85192871 102.36793518]
[147.17453003 106.82475281]
[161.49713135 111.28157043]
[170.68750000 110.84692383]
[176.06958008 115.98294830]
[167.91442871 103.39353180]
[167.00915527 88.42087555]
[173.58808899 74.94060516]
[185.94828796 66.44204712]
[200.89036560 65.12503815]
[214.54660034 71.33046722]
[223.38211060 83.45208740]
[225.10986328 98.35224915]
[219.28263855 112.17409515]
[207.40878296 121.33988190]
[192.56192017 123.47708130]
[205.49996948 131.06698608]
[218.43803406 138.65689087]
[231.37608337 146.24681091]
[244.31414795 153.83671570]
[257.25219727 161.42662048]
[273.07037354 161.73571777]
[280.13311768 174.84934998]
[293.07116699 182.43925476]
[306.00921631 190.02915955]
[318.94726562 197.61906433]
[327.65634155 185.39411926]
[337.41180420 173.98672485]
[348.13726807 163.48616028]
[359.74884033 153.97460938]
[372.15557861 145.52651978]
[385.26043701 138.20802307]
[398.96081543 132.07637024]
[413.14950562 127.17958069]
[427.71545410 123.55595398]
[442.54467773 121.23385620]
[457.52108765 120.23146820]
[472.52749634 120.55663300]
[487.44641113 122.20681000]
[502.16113281 125.16906738]
[516.55645752 129.42024231]
[530.51971436 134.92704773]
[543.94165039 141.64639282]
[556.71716309 149.52568054]
[568.74633789 158.50325012]
[579.93499756 168.50883484]
[590.19555664 179.46412659]
[599.44769287 191.28338623]
[607.61907959 203.87411499]
[614.64569092 217.13777161]
[620.47253418 230.97053528]
[625.05407715 245.26414490]
[628.35437012 259.90673828]
[630.34759521 274.78372192]
[631.01818848 289.77865601]
[630.36090088 304.77416992]
[628.38092041 319.65292358]
[625.09362793 334.29846191]
[620.52484131 348.59613037]
[614.71026611 362.43408203]
[607.69543457 375.70394897]
[599.53527832 388.30194092]
[590.29364014 400.12942505]
[580.04278564 411.09384155]
[568.86303711 421.10937500]
[556.84185791 430.09762573]
[544.07336426 437.98828125]
[530.65740967 444.71954346]
[516.69903564 450.23876953]
[502.30749512 454.50271606]
[487.59542847 457.47805786]
[472.67797852 459.14151001]
[457.67187500 459.48001099]
[442.69458008 458.49093628]
[427.86331177 456.18203735]
[413.29415894 452.57135010]
[399.10110474 447.68716431]
[385.39526367 441.56768799]
[372.28393555 434.26086426]
[359.86965942 425.82379150]
[348.24966431 416.32257080]
[337.51486206 405.83157349]
[327.74926758 394.43283081]
[319.02932739 382.21563721]
[311.42327881 369.27554321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 91]
[11 90]
[12 89]
[13 88]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[21 70]
[22 68]
[23 67]
[24 66]
[30 47]
[31 46]
[32 45]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
