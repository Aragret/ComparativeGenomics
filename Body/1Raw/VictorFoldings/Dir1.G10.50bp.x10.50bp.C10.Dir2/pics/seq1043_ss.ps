%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGCAUCAGGGGGGGGGGAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGxxxxxxxxxxCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGCCCCCCCCCCACAACCAUCA\
) } def
/len { sequence length } bind def

/coor [
[95.46946716 348.03408813]
[81.62352753 342.01806641]
[69.91486359 332.48864746]
[61.21233749 320.15298462]
[56.16173553 305.92648315]
[55.13784790 290.86477661]
[58.21664429 276.08563232]
[65.16967010 262.68569946]
[75.48094940 251.65936279]
[88.38533020 243.82485962]
[102.92521667 239.76354980]
[102.92521667 224.76354980]
[102.92521667 209.76354980]
[102.92521667 194.76354980]
[102.92521667 179.76354980]
[102.92521667 164.76354980]
[102.92521667 149.76354980]
[102.92521667 134.76354980]
[102.92521667 119.76354218]
[90.75337982 110.99733734]
[76.52660370 115.75115204]
[62.29982376 120.50496674]
[48.07304382 125.25878143]
[41.59683609 136.46202087]
[29.59957314 140.10684204]
[18.70729446 134.75282288]
[4.38469601 139.20962524]
[-9.93790150 143.66644287]
[-20.65873528 156.07594299]
[-36.71308899 152.73083496]
[-41.58562088 137.07228088]
[-30.26388741 125.20845795]
[-14.39471722 129.34385681]
[-0.07211949 124.88703156]
[14.25047779 120.43022156]
[25.40180397 106.91548920]
[43.31922913 111.03200531]
[57.54600906 106.27819061]
[71.77278900 101.52437592]
[85.99956512 96.77056122]
[72.12062836 91.08065796]
[66.96051788 76.99614716]
[73.87874603 63.68682861]
[88.37117767 59.81778336]
[101.00244141 67.90797424]
[103.54900360 82.68981934]
[111.27308655 69.83141327]
[118.99716949 56.97301102]
[126.72126007 44.11460876]
[121.70457458 25.53997231]
[131.89685059 9.80175686]
[127.88910675 -4.65293217]
[112.91031647 -3.28334618]
[97.92771912 -4.61054659]
[83.42292786 -8.59187031]
[69.86222839 -15.09933281]
[57.68152618 -23.92374802]
[47.27238464 -34.78144455]
[38.96942139 -47.32339478]
[33.03953171 -61.14642715]
[29.67334557 -75.80619049]
[28.97906685 -90.83142853]
[30.97901726 -105.73914337]
[35.60890198 -120.05010986]
[42.71989441 -133.30430603]
[52.08340454 -145.07563782]
[63.39843369 -154.98573303]
[76.30124664 -162.71601868]
[90.37707520 -168.01797485]
[105.17344666 -170.72117615]
[120.21469879 -170.73873901]
[135.01733398 -168.07009888]
[149.10551453 -162.80102539]
[162.02635193 -155.10090637]
[173.36448669 -145.21726990]
[182.75546265 -133.46781921]
[189.89738464 -120.23027802]
[194.56068420 -105.93015289]
[196.59544373 -91.02715302]
[195.93626404 -76.00033569]
[192.60432434 -61.33275223]
[186.70672607 -47.49591064]
[178.43307495 -34.93460083]
[168.04931641 -24.05262375]
[155.88926697 -15.19978714]
[142.34379578 -8.66067219]
[146.35153198 5.79401636]
[150.79527283 6.53337431]
[155.00607300 8.13424301]
[158.81863403 10.53379154]
[162.08335876 13.63784599]
[164.67208862 17.32457733]
[179.43814087 14.68571281]
[194.20419312 12.04684830]
[208.97024536 9.40798473]
[223.67820740 6.46250200]
[238.32171631 3.21167612]
[252.96520996 -0.03914965]
[242.16229248 -10.44572639]
[243.35054016 -25.39858818]
[255.66143799 -33.96840286]
[270.09671021 -29.89133072]
[276.10537720 -16.14737892]
[269.29605103 -2.78266931]
[284.19796753 -4.49535894]
[299.09985352 -6.20804882]
[314.00177002 -7.92073822]
[328.90365601 -9.63342762]
[341.74719238 -19.83028221]
[356.89822388 -13.55504704]
[358.77066040 2.73685265]
[345.43832397 12.28570747]
[330.61636353 5.26847410]
[315.71444702 6.98116398]
[300.81256104 8.69385338]
[285.91064453 10.40654373]
[271.00875854 12.11923313]
[256.21603394 14.60435200]
[241.57254028 17.85517693]
[226.92903137 21.10600281]
[223.62553406 24.63621902]
[218.04675293 26.08827400]
[211.60911560 24.17403984]
[196.84306335 26.81290436]
[182.07699585 29.45176888]
[167.31094360 32.09063339]
[157.93486023 47.81976318]
[139.57966614 51.83869553]
[131.85557556 64.69709778]
[124.13149261 77.55549622]
[116.40740204 90.41390228]
[117.92521667 119.76354218]
[117.92521667 134.76354980]
[117.92521667 149.76354980]
[117.92521667 164.76354980]
[117.92521667 179.76354980]
[117.92521667 194.76354980]
[117.92521667 209.76354980]
[117.92521667 224.76354980]
[117.92521667 239.76354980]
[132.46510315 243.82485962]
[145.36949158 251.65936279]
[155.68077087 262.68569946]
[162.63378906 276.08563232]
[165.71258545 290.86477661]
[164.68870544 305.92648315]
[159.63809204 320.15298462]
[150.93557739 332.48864746]
[139.22691345 342.01806641]
[125.38097382 348.03408813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 40]
[21 39]
[22 38]
[23 37]
[26 35]
[27 34]
[28 33]
[46 131]
[47 130]
[48 129]
[49 128]
[51 87]
[52 86]
[92 126]
[93 125]
[94 124]
[95 123]
[96 120]
[97 119]
[98 118]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
