%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACAACAGGGGGGGGGGAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGxxxxxxxxxxACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUCCCCCCCCCCACUAACAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 402.58407593]
[71.19830322 396.56805420]
[59.48964310 387.03863525]
[50.78712082 374.70294189]
[45.73651886 360.47644043]
[44.71262741 345.41476440]
[47.79142761 330.63558960]
[54.74444962 317.23565674]
[65.05573273 306.20932007]
[77.96011353 298.37481689]
[92.50000000 294.31350708]
[92.50000000 279.31350708]
[92.50000000 264.31350708]
[92.50000000 249.31350708]
[92.50000000 234.31350708]
[92.50000000 219.31350708]
[92.50000000 204.31350708]
[92.50000000 189.31350708]
[92.50000000 174.31350708]
[92.50000000 159.31350708]
[92.50000000 144.31350708]
[92.50000000 129.31350708]
[78.27330017 121.05902100]
[70.46674347 106.58168793]
[55.47404861 106.11363983]
[51.67173004 120.69068146]
[44.72058868 134.05590820]
[34.96928406 145.53894043]
[22.90693855 154.56376648]
[9.13859558 160.67771912]
[-5.64512920 163.57414246]
[-20.70269203 163.10772705]
[-35.27881241 159.30187988]
[-48.64235687 152.34748840]
[-60.12301254 142.59339905]
[-69.14492035 130.52886963]
[-75.25554657 116.75904846]
[-78.14837646 101.97462463]
[-77.67831421 86.91717529]
[-73.86893463 72.34197998]
[-66.91131592 58.98011780]
[-57.15444565 47.50182343]
[-45.08772659 38.48284149]
[-31.31642342 32.37555313]
[-16.53129768 29.48630524]
[-1.47396219 29.96001625]
[13.10031128 33.77292633]
[26.46048355 40.73378754]
[37.93641281 50.49343491]
[46.95247650 62.56233597]
[53.05642319 76.33512115]
[55.94208908 91.12094879]
[70.93478394 91.58898926]
[74.56997681 83.60347748]
[80.34346771 76.99668121]
[87.76979065 72.32413483]
[96.22449493 69.97872162]
[104.99665833 70.15766144]
[113.34867859 72.84590912]
[123.09633636 61.44489288]
[132.84397888 50.04386902]
[142.59164429 38.64284897]
[152.33929443 27.24182892]
[160.06336975 14.38342667]
[165.55039978 0.42303666]
[171.03742981 -13.53735352]
[168.88452148 -29.21139336]
[180.74122620 -38.22624969]
[186.22825623 -52.18664169]
[191.71530151 -66.14703369]
[179.27726746 -57.76279068]
[164.52442932 -55.05099869]
[149.91789246 -58.46404648]
[137.89433289 -67.43255615]
[130.45957947 -80.46038818]
[128.85389709 -95.37419891]
[133.34515381 -109.68603516]
[143.18409729 -121.00836182]
[156.72940063 -127.45235443]
[171.72137451 -127.94301605]
[185.65902710 -122.39849091]
[196.21725464 -111.74373627]
[201.63468933 -97.75619507]
[201.00796509 -82.77068329]
[210.02548218 -94.75751495]
[219.04301453 -106.74434662]
[213.58958435 -121.17568970]
[216.82638550 -136.25967407]
[227.72056580 -147.18305969]
[242.79583740 -150.46023560]
[257.24172974 -145.04547119]
[266.44860840 -132.66658020]
[267.47860718 -117.27363586]
[260.00305176 -103.77847290]
[246.40734863 -96.48734283]
[231.02984619 -97.72682190]
[222.01231384 -85.73998260]
[212.99479675 -73.75315094]
[205.67568970 -60.65999985]
[200.18865967 -46.69960785]
[194.70162964 -32.73921967]
[197.24700928 -18.06372070]
[184.99783325 -8.05032158]
[179.51080322 5.91006804]
[174.02375793 19.87045860]
[178.08453369 26.17602158]
[193.06686401 25.44809341]
[186.20606995 38.78715134]
[190.26684570 45.09271622]
[205.24656677 45.87255859]
[220.22627258 46.65240479]
[231.79823303 35.88833237]
[247.58895874 36.54307938]
[258.23007202 48.22819519]
[257.40841675 64.01111603]
[245.61145020 74.52809906]
[229.83810425 73.53961945]
[219.44642639 61.63211823]
[204.46672058 60.85227203]
[189.48699951 60.07242966]
[171.78974915 51.33061600]
[163.74031067 36.98948288]
[153.99266052 48.39050293]
[144.24501038 59.79152298]
[134.49736023 71.19254303]
[124.74970245 82.59356689]
[130.24276733 100.95237732]
[123.60545349 118.92919159]
[107.50000000 129.31350708]
[107.50000000 144.31350708]
[107.50000000 159.31350708]
[107.50000000 174.31350708]
[107.50000000 189.31350708]
[107.50000000 204.31350708]
[107.50000000 219.31350708]
[107.50000000 234.31350708]
[107.50000000 249.31350708]
[107.50000000 264.31350708]
[107.50000000 279.31350708]
[107.50000000 294.31350708]
[122.03988647 298.37481689]
[134.94427490 306.20932007]
[145.25555420 317.23565674]
[152.20857239 330.63558960]
[155.28736877 345.41476440]
[154.26348877 360.47644043]
[149.21287537 374.70294189]
[140.51036072 387.03863525]
[128.80169678 396.56805420]
[114.95575714 402.58407593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 53]
[25 52]
[59 126]
[60 125]
[61 124]
[62 123]
[63 122]
[64 105]
[65 104]
[66 103]
[68 101]
[69 100]
[70 99]
[84 98]
[85 97]
[86 96]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
