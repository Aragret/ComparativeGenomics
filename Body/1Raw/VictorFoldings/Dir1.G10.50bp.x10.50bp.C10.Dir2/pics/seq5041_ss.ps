%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCUCUGGGGGGGGGGGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUxxxxxxxxxxGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCCCCCCCCCCCACCACUCUG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.15545654]
[71.19830322 384.13940430]
[59.48964310 374.60998535]
[50.78712082 362.27432251]
[45.73651886 348.04782104]
[44.71262741 332.98611450]
[47.79142761 318.20697021]
[54.74444962 304.80703735]
[65.05573273 293.78070068]
[77.96011353 285.94619751]
[92.50000000 281.88488770]
[92.50000000 266.88488770]
[92.50000000 251.88488770]
[92.50000000 236.88488770]
[92.50000000 221.88488770]
[92.50000000 206.88488770]
[92.50000000 191.88488770]
[92.50000000 176.88488770]
[92.50000000 161.88488770]
[92.50000000 146.88488770]
[92.50000000 131.88488770]
[80.97457123 126.66325378]
[72.28817749 117.46285248]
[67.73703003 105.65658569]
[68.00026703 93.00622559]
[73.03859711 81.39949799]
[82.10019684 72.56839752]
[93.83285522 67.83072662]
[94.45683289 52.84370804]
[95.08081055 37.85669327]
[95.70478821 22.86967659]
[96.01684570 7.87292194]
[96.01684570 -7.12707806]
[81.05011749 -8.22225952]
[66.20325470 -10.40702724]
[51.55548477 -13.66972256]
[37.18495178 -17.99293900]
[23.16833115 -23.35360718]
[9.58041000 -29.72312927]
[-3.50631404 -37.06752014]
[-16.02201843 -45.34758759]
[-27.89992332 -54.51916122]
[-39.07665634 -64.53330231]
[-49.49258423 -75.33658600]
[-59.09212875 -86.87136078]
[-67.82408142 -99.07609558]
[-75.64183807 -111.88566589]
[-82.50370026 -125.23171997]
[-88.37305450 -139.04306030]
[-93.21857452 -153.24598694]
[-97.01441956 -167.76473999]
[-99.74033356 -182.52183533]
[-101.38177490 -197.43853760]
[-101.92997742 -212.43527222]
[-101.38201904 -227.43200684]
[-99.74082947 -242.34873962]
[-97.01515961 -257.10586548]
[-93.21955109 -271.62469482]
[-88.37425995 -285.82769775]
[-82.50513458 -299.63912964]
[-75.64349365 -312.98529053]
[-67.82594299 -325.79498291]
[-59.09419250 -337.99987793]
[-49.49483490 -349.53482056]
[-39.07908630 -360.33825684]
[-27.90251732 -370.35260010]
[-16.02476311 -379.52435303]
[-3.50919485 -387.80462646]
[9.57740879 -395.14923096]
[23.16522598 -401.51898193]
[37.18175888 -406.87988281]
[51.55221939 -411.20333862]
[66.19993591 -414.46627808]
[81.04676056 -416.65127563]
[96.01347351 -417.74670410]
[111.02021790 -417.74670410]
[125.98693085 -416.65127563]
[140.83375549 -414.46627808]
[155.48146057 -411.20333862]
[169.85192871 -406.87988281]
[183.86845398 -401.51898193]
[197.45628357 -395.14923096]
[210.54287720 -387.80462646]
[223.05845642 -379.52435303]
[234.93620300 -370.35260010]
[246.11277771 -360.33825684]
[256.52853394 -349.53482056]
[266.12786865 -337.99987793]
[274.85961914 -325.79498291]
[282.67718506 -312.98529053]
[289.53881836 -299.63912964]
[295.40795898 -285.82769775]
[300.25323486 -271.62469482]
[304.04882812 -257.10586548]
[306.77450562 -242.34873962]
[308.41571045 -227.43200684]
[308.96365356 -212.43527222]
[308.41546631 -197.43853760]
[306.77401733 -182.52183533]
[304.04809570 -167.76473999]
[300.25225830 -153.24598694]
[295.40673828 -139.04306030]
[289.53738403 -125.23171997]
[282.67553711 -111.88566589]
[274.85775757 -99.07609558]
[266.12582397 -86.87136078]
[256.52627563 -75.33658600]
[246.11033630 -64.53330231]
[234.93360901 -54.51916122]
[223.05570984 -45.34758759]
[210.54000854 -37.06752014]
[197.45327759 -29.72312927]
[183.86535645 -23.35360718]
[169.84873962 -17.99293900]
[155.47821045 -13.66972256]
[140.83042908 -10.40702724]
[125.98357391 -8.22225952]
[111.01684570 -7.12707806]
[111.01684570 7.87292194]
[113.74721527 11.86298084]
[113.95571899 17.62386894]
[110.69180298 23.49365234]
[110.06782532 38.48067093]
[109.44384766 53.46768570]
[108.81987000 68.45470428]
[123.50208282 77.18447113]
[131.79284668 92.11897278]
[131.43750000 109.19673920]
[122.53264618 123.77342987]
[107.50000000 131.88488770]
[107.50000000 146.88488770]
[107.50000000 161.88488770]
[107.50000000 176.88488770]
[107.50000000 191.88488770]
[107.50000000 206.88488770]
[107.50000000 221.88488770]
[107.50000000 236.88488770]
[107.50000000 251.88488770]
[107.50000000 266.88488770]
[107.50000000 281.88488770]
[122.03988647 285.94619751]
[134.94427490 293.78070068]
[145.25555420 304.80703735]
[152.20857239 318.20697021]
[155.28736877 332.98611450]
[154.26348877 348.04782104]
[149.21287537 362.27432251]
[140.51036072 374.60998535]
[128.80169678 384.13940430]
[114.95575714 390.15545654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 125]
[29 124]
[30 123]
[31 122]
[32 119]
[33 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
