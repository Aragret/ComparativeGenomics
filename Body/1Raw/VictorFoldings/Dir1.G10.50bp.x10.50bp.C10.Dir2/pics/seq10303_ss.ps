%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGCCCACGGGGGGGGGGGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGxxxxxxxxxxUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAACCCCCCCCCCAAUAGCCCAC\
) } def
/len { sequence length } bind def

/coor [
[97.83476257 363.13113403]
[83.98882294 357.11511230]
[72.28016663 347.58569336]
[63.57764053 335.25003052]
[58.52703857 321.02349854]
[57.50314713 305.96182251]
[60.58194351 291.18264771]
[67.53496552 277.78271484]
[77.84625244 266.75640869]
[90.75063324 258.92187500]
[105.29051971 254.86058044]
[105.29051971 239.86058044]
[105.29051971 224.86058044]
[105.29051971 209.86058044]
[105.29051971 194.86058044]
[105.29051971 179.86058044]
[105.29051971 164.86058044]
[105.29051971 149.86058044]
[105.29051971 134.86058044]
[105.29051971 119.86057281]
[92.59558868 111.87065887]
[79.07139587 118.35882568]
[65.54721069 124.84699249]
[61.84153366 140.03915405]
[49.20695496 149.25335693]
[33.60913086 148.13891602]
[22.41288185 137.22204590]
[20.90473175 121.65735626]
[29.79678345 108.79402161]
[44.89048004 104.70571136]
[59.05904388 111.32279968]
[72.58323669 104.83463287]
[86.10742188 98.34646606]
[71.11696625 98.88149261]
[58.41603088 90.90113068]
[52.39371109 77.16316986]
[55.13114929 62.41506958]
[65.68236542 51.75336838]
[80.40114594 48.86246109]
[94.20109558 54.74135971]
[102.31332397 67.35848236]
[101.93435669 82.35402679]
[108.28148651 68.76307678]
[114.62861633 55.17212677]
[120.97574615 41.58117676]
[127.32287598 27.99022484]
[133.67001343 14.39927483]
[134.47839355 5.23421288]
[140.29315186 0.59371567]
[146.92166138 -12.86224937]
[153.55015564 -26.31821442]
[143.38745117 -42.92980957]
[147.12623596 -63.32658005]
[164.50906372 -76.81129456]
[160.80290222 -91.34622955]
[157.09674072 -105.88116455]
[153.39057922 -120.41609955]
[138.31587219 -120.28703308]
[123.64848328 -123.77001190]
[110.24115753 -130.66255188]
[98.87337494 -140.56390381]
[90.20603943 -152.89845276]
[84.74307251 -166.94905090]
[82.80207825 -181.89883423]
[84.49589539 -196.87863159]
[89.72605133 -211.01754761]
[98.18848419 -223.49354553]
[109.39118195 -233.58131409]
[122.68283844 -240.69435120]
[137.29069519 -244.41909790]
[152.36547852 -244.53903198]
[167.03076172 -241.04716492]
[180.43389893 -234.14649963]
[191.79568481 -224.23825073]
[200.45553589 -211.89845276]
[205.90997314 -197.84454346]
[207.84191895 -182.89358521]
[206.13900757 -167.91482544]
[200.90028381 -153.77908325]
[192.43029785 -141.30819702]
[181.22148132 -131.22723389]
[167.92550659 -124.12226105]
[171.63166809 -109.58732605]
[175.33782959 -95.05239105]
[179.04399109 -80.51745605]
[192.70024109 -74.31204224]
[206.08651733 -81.08016205]
[219.25511169 -88.26267242]
[232.19316101 -95.85257721]
[245.13121033 -103.44248962]
[250.99719238 -110.53066254]
[258.41833496 -111.05249786]
[271.51147461 -118.37159729]
[284.60464478 -125.69070435]
[283.18096924 -140.85293579]
[288.05358887 -155.28129578]
[298.37826538 -166.47598267]
[312.36614990 -172.49746704]
[327.59384155 -172.30247498]
[341.42297363 -165.92478943]
[351.45761108 -154.46939087]
[355.95916748 -139.92100525]
[354.14770508 -124.80020142]
[346.33712769 -111.72676849]
[333.88061523 -102.96575165]
[318.93637085 -100.03505707]
[304.09353638 -103.44244385]
[291.92373657 -112.59754944]
[278.83059692 -105.27844238]
[265.73742676 -97.95934296]
[252.72113037 -90.50443268]
[239.78306580 -82.91452026]
[226.84501648 -75.32461548]
[225.61209106 -71.95602417]
[222.64956665 -69.03624725]
[218.19564819 -67.38853455]
[212.85464478 -67.69387817]
[199.46835327 -60.92576218]
[201.91104126 -43.85190582]
[195.16891479 -28.78129196]
[182.03712463 -20.04475403]
[167.00611877 -19.68971634]
[160.37762451 -6.23375130]
[153.74913025 7.22221422]
[147.26095581 20.74640465]
[140.91383362 34.33735657]
[134.56669617 47.92830658]
[128.21957397 61.51925659]
[121.87243652 75.11020660]
[115.52530670 88.70115662]
[120.29051971 119.86057281]
[120.29051971 134.86058044]
[120.29051971 149.86058044]
[120.29051971 164.86058044]
[120.29051971 179.86058044]
[120.29051971 194.86058044]
[120.29051971 209.86058044]
[120.29051971 224.86058044]
[120.29051971 239.86058044]
[120.29051971 254.86058044]
[134.83039856 258.92187500]
[147.73478699 266.75640869]
[158.04606628 277.78271484]
[164.99909973 291.18264771]
[168.07789612 305.96182251]
[167.05400085 321.02349854]
[162.00340271 335.25003052]
[153.30087280 347.58569336]
[141.59220886 357.11511230]
[127.74627686 363.13113403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 33]
[22 32]
[23 31]
[42 130]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[49 124]
[50 123]
[51 122]
[54 85]
[55 84]
[56 83]
[57 82]
[86 118]
[87 117]
[88 113]
[89 112]
[90 111]
[92 110]
[93 109]
[94 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
