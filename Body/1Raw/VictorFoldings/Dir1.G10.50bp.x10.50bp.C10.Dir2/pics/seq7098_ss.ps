%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACACCCUAGGGGGGGGGGGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUxxxxxxxxxxCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCCCCCCCCCCCUACACCCUAG\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 450.96469116]
[71.01555634 445.41168213]
[58.81560135 436.54534912]
[49.20452881 424.92303467]
[42.78650284 411.27532959]
[39.96496582 396.46014404]
[40.91728210 381.40875244]
[45.58358765 367.06735229]
[53.67055511 354.33737183]
[64.66983032 344.01910400]
[77.88998413 336.76113892]
[92.50000000 333.01968384]
[92.50000000 318.01968384]
[92.50000000 303.01968384]
[92.50000000 288.01968384]
[92.50000000 273.01968384]
[92.50000000 258.01968384]
[92.50000000 243.01969910]
[92.50000000 228.01969910]
[92.50000000 213.01969910]
[92.50000000 198.01969910]
[92.50000000 183.01969910]
[73.84931183 179.14961243]
[56.56411362 171.14663696]
[41.54697418 159.42864990]
[29.58203506 144.60751343]
[21.29405975 127.45714569]
[17.11581230 108.87306213]
[17.26546860 89.82566833]
[21.73521233 71.30953217]
[8.17331600 64.90055847]
[-5.38858032 58.49158478]
[-18.95047569 52.08260727]
[-32.51237106 45.67363358]
[-46.07426834 39.26465607]
[-60.50165558 35.15970993]
[-75.40610504 33.46931458]
[-90.31054688 31.77891731]
[-103.70600891 40.60734558]
[-118.91504669 35.50198746]
[-124.27059174 20.37923431]
[-115.66432953 6.83996725]
[-99.69824219 5.27035475]
[-88.62014771 16.87446976]
[-73.71570587 18.56486702]
[-58.81125641 20.25526428]
[-70.50442505 10.86005974]
[-78.35999298 -1.91843784]
[-81.46414185 -16.59373093]
[-79.45578003 -31.45867157]
[-72.56851959 -44.78404999]
[-61.60355377 -55.01974869]
[-47.83641434 -60.97507095]
[-32.86860275 -61.95724106]
[-18.44130135 -57.85200882]
[-6.23280525 -49.13692856]
[2.33669233 -36.82580948]
[6.27031851 -22.35077477]
[5.11048174 -7.39568281]
[-1.00789607 6.29977083]
[-11.37307549 17.14241982]
[-24.77929688 23.87096024]
[-39.66529465 25.70276070]
[-26.10339737 32.11173630]
[-12.54150105 38.52070999]
[1.02039552 44.92968750]
[14.58229160 51.33866119]
[28.14418793 57.74763870]
[34.02632141 49.04911041]
[40.95536804 41.15910339]
[48.82137680 34.20282745]
[57.49951935 28.29066277]
[66.85209656 23.51643372]
[76.73068237 19.95589638]
[86.97851562 17.66555595]
[97.43299103 16.68175316]
[107.92819977 17.02010155]
[118.29759979 18.67523384]
[128.37663269 21.62088203]
[138.00537109 25.81030464]
[147.03102112 31.17701912]
[155.31034851 37.63586426]
[162.71195984 45.08434677]
[169.11843872 53.40427017]
[182.26005554 46.17256546]
[195.40168762 38.94086456]
[194.87564087 19.04033661]
[214.93302917 2.99931455]
[224.33688354 -8.68689442]
[233.74073792 -20.37310219]
[233.45112610 -36.41353989]
[245.90283203 -46.52959824]
[261.54397583 -42.96110535]
[268.37600708 -28.44549751]
[261.15798950 -14.11791229]
[245.42695618 -10.96924591]
[236.02310181 0.71696305]
[226.61923218 12.40317154]
[230.43572998 18.85951996]
[240.35784912 7.61001539]
[254.12280273 13.57040405]
[252.70755005 28.50349045]
[238.06869507 31.77221870]
[241.88517761 38.22856903]
[256.65728760 35.62384415]
[271.42941284 33.01912308]
[286.20153809 30.41440010]
[300.97363281 27.80967712]
[313.18148804 16.85975266]
[328.68206787 22.21356583]
[331.52975464 38.36357498]
[318.79507446 48.69603348]
[303.57836914 42.58179474]
[288.80624390 45.18651581]
[274.03414917 47.79123688]
[259.26202393 50.39596176]
[244.48989868 53.00068283]
[219.96733093 63.02028275]
[202.63339233 52.08249283]
[189.49176025 59.31419754]
[176.35012817 66.54589844]
[181.28257751 81.51588440]
[183.30892944 97.14672852]
[182.35676575 112.87959290]
[178.46009827 128.15196228]
[171.75825500 142.41783142]
[162.49085999 155.16712952]
[150.98922729 165.94406128]
[137.66459656 174.36328125]
[122.99333191 180.12382507]
[107.50000000 183.01969910]
[107.50000000 198.01969910]
[107.50000000 213.01969910]
[107.50000000 228.01969910]
[107.50000000 243.01969910]
[107.50000000 258.01968384]
[107.50000000 273.01968384]
[107.50000000 288.01968384]
[107.50000000 303.01968384]
[107.50000000 318.01968384]
[107.50000000 333.01968384]
[122.11001587 336.76113892]
[135.33016968 344.01910400]
[146.32945251 354.33737183]
[154.41641235 367.06735229]
[159.08271790 381.40875244]
[160.03503418 396.46014404]
[157.21350098 411.27532959]
[150.79547119 424.92303467]
[141.18440247 436.54534912]
[128.98443604 445.41168213]
[114.96250153 450.96469116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 46]
[37 45]
[38 44]
[84 121]
[85 120]
[86 119]
[88 98]
[89 97]
[90 96]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
