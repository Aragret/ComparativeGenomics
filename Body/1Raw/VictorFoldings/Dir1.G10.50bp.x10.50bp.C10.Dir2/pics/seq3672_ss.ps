%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAACCUAGGGGGGGGGGGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[83.39705658 368.79739380]
[70.17884064 361.52133179]
[59.29487610 351.07138062]
[51.48725510 338.16000366]
[47.28831482 323.66754150]
[46.98434448 308.58212280]
[50.59607315 293.93228149]
[57.87723923 280.71685791]
[68.33140564 269.83694458]
[81.24578857 262.03430176]
[95.73986816 257.84097290]
[95.43189240 242.84411621]
[95.12390900 227.84729004]
[94.81593323 212.85044861]
[94.50795746 197.85360718]
[94.19998169 182.85676575]
[93.89199829 167.85993958]
[93.58402252 152.86309814]
[93.27604675 137.86625671]
[92.96807098 122.86942291]
[92.66008759 107.87258148]
[89.00138855 93.32563019]
[82.17781067 79.96752930]
[75.35423279 66.60942841]
[68.53066254 53.25132751]
[61.70708466 39.89323044]
[54.88350677 26.53512955]
[48.05993271 13.17703056]
[41.23635864 -0.18106839]
[34.27600098 -13.46840954]
[27.17959785 -26.68359184]
[20.08319473 -39.89877701]
[6.24290943 -34.08575058]
[-8.08727360 -29.61466789]
[-22.77757645 -26.52601433]
[-37.69495773 -24.84776688]
[-52.70431900 -24.59512329]
[-67.66973114 -25.77036858]
[-82.45565796 -28.36286354]
[-96.92819977 -32.34912491]
[-110.95628357 -37.69305801]
[-124.41287231 -44.34626007]
[-137.17608643 -52.24847794]
[-149.13034058 -61.32814789]
[-160.16738892 -71.50304413]
[-170.18725586 -82.68101501]
[-179.09919739 -94.76083374]
[-186.82252502 -107.63308716]
[-193.28727722 -121.18122101]
[-198.43490601 -135.28251648]
[-202.21878052 -149.80928040]
[-204.60467529 -164.62995911]
[-205.57093811 -179.61032104]
[-205.10884094 -194.61468506]
[-203.22256470 -209.50718689]
[-199.92918396 -224.15295410]
[-195.25854492 -238.41934204]
[-189.25291443 -252.17715454]
[-181.96672058 -265.30178833]
[-173.46591187 -277.67437744]
[-163.82751465 -289.18289185]
[-153.13877869 -299.72308350]
[-141.49652100 -309.19952393]
[-129.00619507 -317.52636719]
[-115.78088379 -324.62820435]
[-101.94039154 -330.44070435]
[-87.61003876 -334.91128540]
[-72.91962433 -337.99938965]
[-58.00218582 -339.67709351]
[-42.99281311 -339.92919922]
[-28.02744484 -338.75341797]
[-13.24160957 -336.16036987]
[1.23078680 -332.17358398]
[15.25867653 -326.82913208]
[28.71501732 -320.17544556]
[41.47794724 -312.27276611]
[53.43187332 -303.19265747]
[64.46854401 -293.01736450]
[74.48800659 -281.83901978]
[83.39951324 -269.75888062]
[91.12236023 -256.88635254]
[97.58661652 -243.33798218]
[102.73373413 -229.23649597]
[106.51708984 -214.70957947]
[108.90243530 -199.88882446]
[109.86815643 -184.90843201]
[109.40550995 -169.90408325]
[107.51869202 -155.01164246]
[104.22478485 -140.36599731]
[99.55361176 -126.09977722]
[93.54749298 -112.34218597]
[86.26081085 -99.21781921]
[77.75955963 -86.84553528]
[68.12073517 -75.33737946]
[57.43161392 -64.79756927]
[45.78901672 -55.32156372]
[33.29837799 -46.99517822]
[40.39478302 -33.77999496]
[47.49118423 -20.56481361]
[53.46329117 -16.13241768]
[54.59445572 -7.00464392]
[61.41803360 6.35345554]
[68.24160767 19.71155548]
[75.06518555 33.06965256]
[81.88875580 46.42775345]
[88.71233368 59.78585434]
[95.53591156 73.14395142]
[102.35948181 86.50205231]
[103.38880157 71.53740692]
[108.18744659 57.32568741]
[116.44030762 44.80010223]
[127.60546112 34.78315353]
[140.94975281 27.93260574]
[155.59690857 24.69830132]
[170.58512878 25.29262352]
[184.93020630 29.67654610]
[197.69017029 37.56219482]
[208.02711487 48.43175888]
[215.26228333 61.57148361]
[218.92056274 76.11854553]
[218.76173401 91.11770630]
[214.79623413 105.58403778]
[207.28443909 118.56760406]
[196.71963501 129.21583557]
[183.79556274 136.82952881]
[169.36087036 140.90869141]
[154.36341858 141.18550110]
[139.78804016 137.64175415]
[126.59180450 130.51016235]
[115.64127350 120.25903320]
[107.65692902 107.56460571]
[107.96490479 122.56143951]
[108.27288818 137.55827332]
[108.58086395 152.55511475]
[108.88883972 167.55195618]
[109.19681549 182.54879761]
[109.50479889 197.54563904]
[109.81277466 212.54246521]
[110.12075043 227.53930664]
[110.42872620 242.53614807]
[110.73670197 257.53298950]
[125.39072418 261.12774658]
[138.61454773 268.39358521]
[149.50657654 278.83514404]
[157.32417297 291.74047852]
[161.53430176 306.22970581]
[161.84991455 321.31488037]
[158.24951172 335.96749878]
[150.97854614 349.18853760]
[140.53279114 360.07653809]
[127.62442780 367.88912964]
[113.13359833 372.09365845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 99]
[31 98]
[32 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
