%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGCUCUUUGGGGGGGGGGGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAxxxxxxxxxxCUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCCCCCCCCCCCAACACCUCUUU\
) } def
/len { sequence length } bind def

/coor [
[31.08230591 409.54653931]
[17.06036186 403.99353027]
[4.86040401 395.12719727]
[-4.75066710 383.50488281]
[-11.16869259 369.85717773]
[-13.99022961 355.04199219]
[-13.03791332 339.99063110]
[-8.37160873 325.64920044]
[-0.28464180 312.91925049]
[10.71463299 302.60098267]
[23.93479156 295.34298706]
[38.54480362 291.60156250]
[38.54480362 276.60156250]
[38.54480362 261.60156250]
[38.54480362 246.60156250]
[38.54480362 231.60156250]
[38.54480362 216.60156250]
[38.54480362 201.60156250]
[38.54480362 186.60156250]
[38.54480362 171.60156250]
[38.54480362 156.60156250]
[38.54480362 141.60156250]
[38.54480362 126.60156250]
[26.95575523 117.07822418]
[12.24023342 119.98569489]
[-2.47528911 122.89317322]
[-7.77338743 127.01296997]
[-13.49447536 127.68901062]
[-17.85400391 125.60485077]
[-32.67648697 127.90572357]
[-47.49896622 130.20660400]
[-56.62434769 143.11019897]
[-72.21509552 145.69943237]
[-85.02149963 136.43814087]
[-87.44574738 120.82088470]
[-78.04956818 108.11311340]
[-62.40756226 105.85411835]
[-49.79984283 115.38411713]
[-34.97735977 113.08324432]
[-20.15487862 110.78237152]
[-5.38276148 108.17765045]
[9.33276081 105.27017212]
[24.04828453 102.36270142]
[26.17470741 95.17046356]
[11.79022598 90.91761780]
[-2.59425521 86.66477203]
[-16.97867012 82.41169739]
[-12.72537899 68.02735138]
[1.65859163 72.28028870]
[16.04307175 76.53313446]
[30.42755318 80.78598022]
[32.55397797 73.59374237]
[21.78529739 63.15173340]
[11.01661968 52.70972443]
[0.24794047 42.26771164]
[-15.33222389 35.58229446]
[-13.22109318 18.76030159]
[3.52790999 16.13213730]
[10.68994999 31.49903488]
[21.45862770 41.94104385]
[32.22730637 52.38305283]
[42.99598694 62.82506180]
[56.49137115 56.27719116]
[54.95407867 41.35617447]
[53.41678619 26.43515778]
[38.66201782 23.03287697]
[25.81274033 15.02195930]
[16.26274872 3.27136803]
[11.04795551 -10.94428062]
[10.73402119 -26.08297729]
[15.35499954 -40.50259399]
[24.40964127 -52.63899231]
[36.91576385 -61.17570877]
[51.51680374 -65.18675232]
[66.62894440 -64.23702240]
[80.61293030 -58.42954254]
[91.95188904 -48.39426804]
[99.41585541 -35.21974945]
[102.19519043 -20.33505821]
[99.98841095 -5.35477591]
[93.03490448 8.09614944]
[82.08892059 18.55866241]
[68.33779907 24.89786530]
[69.87509155 39.81888199]
[71.41238403 54.73989868]
[85.67633820 52.28836823]
[99.08029175 53.91101456]
[110.55696869 58.95491791]
[119.32685089 66.51322937]
[129.20256042 55.22294617]
[139.07826233 43.93266678]
[148.95396423 32.64238739]
[154.83114624 16.73971176]
[171.73930359 17.98491478]
[175.22341919 34.57699966]
[160.24424744 42.51809311]
[150.36854553 53.80837250]
[140.49282837 65.09865570]
[130.61712646 76.38893127]
[134.43167114 82.41163635]
[137.07560730 89.03231049]
[152.01162720 87.64828491]
[166.94763184 86.26425934]
[181.88365173 84.88023376]
[194.91104126 75.90261841]
[208.29792786 82.43258667]
[223.23394775 81.04856110]
[238.16995239 79.66453552]
[253.10597229 78.28050995]
[263.00839233 65.96315002]
[278.72897339 64.33861542]
[290.94094849 74.37071991]
[292.39920044 90.10758972]
[282.23852539 102.21282196]
[266.48712158 103.50459290]
[254.48999023 93.21652222]
[239.55398560 94.60054779]
[224.61796570 95.98457336]
[209.68196106 97.36859894]
[197.72288513 106.24722290]
[183.26766968 99.81624603]
[168.33166504 101.20027161]
[153.39564514 102.58429718]
[138.45964050 103.96832275]
[135.65039062 120.53555298]
[125.64222717 135.28717041]
[109.54721832 145.09867859]
[89.81816101 147.49720764]
[69.88204193 141.22448730]
[53.54480362 126.60156250]
[53.54480362 141.60156250]
[53.54480362 156.60156250]
[53.54480362 171.60156250]
[53.54480362 186.60156250]
[53.54480362 201.60156250]
[53.54480362 216.60156250]
[53.54480362 231.60156250]
[53.54480362 246.60156250]
[53.54480362 261.60156250]
[53.54480362 276.60156250]
[53.54480362 291.60156250]
[68.15481567 295.34298706]
[81.37497711 302.60098267]
[92.37425232 312.91925049]
[100.46121979 325.64920044]
[105.12752533 339.99063110]
[106.07984161 355.04199219]
[103.25830078 369.85717773]
[96.84027863 383.50488281]
[87.22920227 395.12719727]
[75.02924347 403.99353027]
[61.00730515 409.54653931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 43]
[25 42]
[26 41]
[29 40]
[30 39]
[31 38]
[52 62]
[53 61]
[54 60]
[55 59]
[63 85]
[64 84]
[65 83]
[89 99]
[90 98]
[91 97]
[92 96]
[101 124]
[102 123]
[103 122]
[104 121]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
