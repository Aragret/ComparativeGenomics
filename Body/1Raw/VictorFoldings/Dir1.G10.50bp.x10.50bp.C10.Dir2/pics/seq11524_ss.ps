%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCUAGGGGGGGGGGGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAxxxxxxxxxxCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGCCCCCCCCCCACCUCCUAGG\
) } def
/len { sequence length } bind def

/coor [
[81.67404175 346.51809692]
[70.17787933 336.70330811]
[62.08681870 323.93515015]
[58.12031174 309.34890747]
[58.63105774 294.24160767]
[63.57364273 279.95657349]
[72.50857544 267.76400757]
[84.64135742 258.74810791]
[98.89316559 253.71049500]
[98.26918793 238.72348022]
[97.64521027 223.73646545]
[97.02123260 208.74945068]
[96.39725494 193.76243591]
[95.77327728 178.77542114]
[95.14929962 163.78840637]
[94.52532196 148.80139160]
[93.90134430 133.81436157]
[93.27736664 118.82735443]
[80.50001526 110.96992493]
[66.84377289 117.17533112]
[53.18753052 123.38074493]
[39.53128815 129.58615112]
[25.87504768 135.79154968]
[22.89679527 151.02014160]
[11.51329899 161.56506348]
[-3.89825583 163.37161255]
[-17.41181183 155.74511719]
[-23.83112907 141.61811829]
[-20.68785095 126.42274475]
[-9.19063091 116.00192261]
[6.23961401 114.36267090]
[19.66964149 122.13531494]
[33.32588196 115.92990875]
[46.98212433 109.72450256]
[60.63836670 103.51909637]
[74.29460907 97.31368256]
[82.67675018 84.87424469]
[75.52021027 70.76416016]
[83.78025055 58.36976242]
[84.40422821 43.38274765]
[85.02820587 28.39573097]
[74.60620117 16.81904602]
[75.45249939 1.62896919]
[86.55332947 -8.23547363]
[87.17730713 -23.22249031]
[87.80128479 -38.20950699]
[72.94129944 -40.34771729]
[58.37388611 -43.97833633]
[44.24851990 -49.06410980]
[30.71015739 -55.55284882]
[17.89772224 -63.37796783]
[5.94268847 -72.45916748]
[-5.03226280 -82.70326233]
[-14.91451073 -94.00512695]
[-23.60264778 -106.24878693]
[-31.00752068 -119.30860901]
[-37.05314255 -133.05056763]
[-41.67747116 -147.33366394]
[-44.83306122 -162.01130676]
[-46.48752594 -176.93289185]
[-46.62388611 -191.94529724]
[-45.24074936 -206.89447021]
[-42.35230255 -221.62702942]
[-37.98818970 -235.99176025]
[-32.19319153 -249.84126282]
[-25.02677345 -263.03344727]
[-16.56247711 -275.43289185]
[-6.88715887 -286.91241455]
[3.89989614 -297.35418701]
[15.68799496 -306.65106201]
[28.35617256 -314.70761108]
[41.77443314 -321.44122314]
[55.80508423 -326.78274536]
[70.30414581 -330.67736816]
[85.12283325 -333.08517456]
[100.10908508 -333.98141479]
[115.10912323 -333.35687256]
[129.96900940 -331.21801758]
[144.53627014 -327.58676147]
[158.66140747 -322.50036621]
[172.19947815 -316.01101685]
[185.01158142 -308.18533325]
[196.96620178 -299.10360718]
[207.94070435 -288.85903931]
[217.82246399 -277.55673218]
[226.51005554 -265.31268311]
[233.91435242 -252.25254822]
[239.95936584 -238.51031494]
[244.58306885 -224.22703552]
[247.73802185 -209.54925537]
[249.39183044 -194.62759399]
[249.52752686 -179.61517334]
[248.14372253 -164.66606140]
[245.25463867 -149.93363953]
[240.88989258 -135.56909180]
[235.09428406 -121.71984100]
[227.92727661 -108.52797699]
[219.46244812 -96.12889099]
[209.78662109 -84.64980316]
[198.99909973 -74.20851135]
[187.21060181 -64.91216278]
[174.54206848 -56.85615540]
[161.12350464 -50.12314987]
[147.09262085 -44.78224564]
[132.59338379 -40.88824081]
[117.77458954 -38.48110199]
[102.78829956 -37.58552933]
[102.16432190 -22.59851265]
[101.54034424 -7.61149597]
[111.78276825 3.14156294]
[111.36346436 18.34941673]
[100.01522064 29.01970863]
[99.39124298 44.00672531]
[98.76726532 58.99374008]
[105.96843719 72.03185272]
[97.66376495 85.49822235]
[112.60788727 83.08085632]
[127.27851105 96.42689514]
[140.80270386 102.91506195]
[153.88221741 94.73398590]
[169.30812073 94.94579315]
[182.15808105 103.48289490]
[188.33171082 117.62113190]
[185.85903931 132.84904480]
[175.52906799 144.30746460]
[160.63807678 148.34005737]
[145.93771362 143.66001892]
[136.11880493 131.76074219]
[134.31454468 116.43925476]
[120.79035187 109.95108795]
[108.26438904 118.20337677]
[108.88836670 133.19038391]
[109.51234436 148.17741394]
[110.13632202 163.16442871]
[110.76029968 178.15144348]
[111.38426971 193.13845825]
[112.00824738 208.12547302]
[112.63222504 223.11248779]
[113.25620270 238.09950256]
[113.88018036 253.08651733]
[128.50141907 256.92199707]
[141.34165955 264.89819336]
[151.25917053 276.30581665]
[157.37210083 290.13058472]
[159.13687134 305.14312744]
[156.39657593 320.00860596]
[149.39486694 333.40515137]
[138.75434875 344.14157104]
[125.42115021 351.26318359]
[110.58086395 354.13674927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[37 116]
[39 114]
[40 113]
[41 112]
[44 109]
[45 108]
[46 107]
[118 130]
[119 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
