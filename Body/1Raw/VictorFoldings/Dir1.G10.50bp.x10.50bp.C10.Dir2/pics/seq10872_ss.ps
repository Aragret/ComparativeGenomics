%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCACCCCUGACUCCCGGGGGGGGGGCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCAxxxxxxxxxxAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCCCCCCCCCCCUCAACCCCUGACCCCC\
) } def
/len { sequence length } bind def

/coor [
[298.71688843 197.03219604]
[287.65386963 186.89761353]
[277.12722778 176.20695496]
[267.16488647 164.98858643]
[257.79327393 153.27223206]
[249.03720093 141.08895874]
[240.91995239 128.47111511]
[233.46299744 115.45211029]
[226.68614197 102.06650543]
[220.60734558 88.34978485]
[215.24273682 74.33831787]
[200.97689819 78.97357178]
[186.71104431 83.60882568]
[172.44519043 88.24407959]
[170.52053833 91.24942780]
[167.02243042 93.45341492]
[162.35227966 94.11669159]
[157.23081970 92.71142578]
[142.72361755 96.52469635]
[128.21641541 100.33797455]
[113.70921326 104.15124512]
[103.64141083 113.85335541]
[90.10406494 110.35595703]
[75.59685516 114.16922760]
[61.08965683 117.98250580]
[46.58245468 121.79577637]
[35.20262146 132.78713989]
[20.92651939 128.53953552]
[6.41931581 132.35281372]
[2.45102930 147.19021606]
[-8.41565132 158.04428101]
[-23.25764465 161.99533081]
[-38.08252716 157.98056030]
[-48.90248108 147.07991028]
[-52.80699158 132.22560120]
[-48.74576950 117.41338348]
[-37.81125641 106.62764740]
[-22.94478798 102.76971436]
[-8.14536476 106.87734985]
[2.60604095 117.84561157]
[17.11324310 114.03234100]
[27.45542145 103.31372833]
[42.76917648 107.28857422]
[57.27638245 103.47530365]
[71.78358459 99.66202545]
[86.29078674 95.84875488]
[96.35858917 86.14664459]
[109.89593506 89.64404297]
[124.40314484 85.83077240]
[138.91033936 82.01749420]
[153.41754150 78.20422363]
[167.80993652 73.97823334]
[182.07579041 69.34297943]
[196.34164429 64.70772552]
[210.60748291 60.07246780]
[206.71180725 45.58371353]
[203.56716919 30.91362381]
[201.18190002 16.10110474]
[199.56233215 1.18543398]
[198.71273804 -13.79383373]
[198.63539124 -28.79697609]
[199.33049011 -43.78420639]
[200.79618835 -58.71578217]
[203.02861023 -73.55210876]
[206.02183533 -88.25383759]
[209.76791382 -102.78199005]
[214.25691223 -117.09803772]
[219.47694397 -131.16400146]
[225.41413879 -144.94261169]
[232.05278015 -158.39730835]
[239.37524414 -171.49240112]
[247.36212158 -184.19319153]
[255.99223328 -196.46598816]
[265.24270630 -208.27824402]
[275.08895874 -219.59863281]
[285.50494385 -230.39712524]
[296.46301270 -240.64511108]
[307.93408203 -250.31539917]
[319.88778687 -259.38232422]
[332.29238892 -267.82189941]
[345.11499023 -275.61169434]
[358.32162476 -282.73107910]
[371.87722778 -289.16113281]
[385.74584961 -294.88485718]
[399.89077759 -299.88705444]
[414.27441406 -304.15444946]
[428.85870361 -307.67572021]
[443.60488892 -310.44155884]
[458.47393799 -312.44461060]
[473.42636108 -313.67956543]
[488.42254639 -314.14312744]
[503.42269897 -313.83410645]
[518.38702393 -312.75329590]
[533.27593994 -310.90359497]
[548.04986572 -308.28985596]
[562.66961670 -304.91906738]
[577.09649658 -300.80010986]
[591.29217529 -295.94393921]
[605.21911621 -290.36343384]
[618.84020996 -284.07339478]
[632.11950684 -277.09048462]
[645.02172852 -269.43322754]
[657.51263428 -261.12194824]
[669.55914307 -252.17866516]
[681.12927246 -242.62710571]
[692.19232178 -232.49258423]
[702.71905518 -221.80198669]
[712.68145752 -210.58366394]
[722.05310059 -198.86737061]
[730.80926514 -186.68415833]
[738.92657471 -174.06634521]
[746.38360596 -161.04739380]
[753.16052246 -147.66181946]
[759.23937988 -133.94512939]
[764.60406494 -119.93370056]
[769.24035645 -105.66467285]
[773.13598633 -91.17589569]
[776.28051758 -76.50579071]
[778.66571045 -61.69325638]
[780.28521729 -46.77757645]
[781.13470459 -31.79830360]
[781.21197510 -16.79516220]
[780.51678467 -1.80793476]
[779.05096436 13.12363338]
[776.81848145 27.95994568]
[773.82519531 42.66165924]
[770.07904053 57.18978882]
[765.58996582 71.50580597]
[760.36981201 85.57175446]
[754.43255615 99.35031891]
[747.79382324 112.80496979]
[740.47131348 125.90003204]
[732.48431396 138.60078430]
[723.85418701 150.87351990]
[714.60363770 162.68571472]
[704.75732422 174.00604248]
[694.34124756 184.80448914]
[683.38311768 195.05241394]
[671.91198730 204.72262573]
[659.95825195 213.78950500]
[647.55358887 222.22898865]
[634.73095703 230.01872253]
[621.52429199 237.13801575]
[607.96862793 243.56800842]
[594.09997559 249.29165649]
[579.95501709 254.29376221]
[565.57135010 258.56106567]
[550.98706055 262.08227539]
[536.24084473 264.84802246]
[521.37182617 266.85098267]
[506.41937256 268.08584595]
[491.42318726 268.54934692]
[476.42303467 268.24023438]
[461.45867920 267.15933228]
[446.56979370 265.30953979]
[431.79589844 262.69570923]
[417.17614746 259.32482910]
[402.74929810 255.20579529]
[388.55361938 250.34954834]
[374.62677002 244.76896667]
[361.00564575 238.47885132]
[347.72640991 231.49586487]
[334.82424927 223.83854675]
[322.33340454 215.52717590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 55]
[12 54]
[13 53]
[14 52]
[18 51]
[19 50]
[20 49]
[21 48]
[23 46]
[24 45]
[25 44]
[26 43]
[28 41]
[29 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
