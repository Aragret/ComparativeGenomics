%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUACCACAACGGGGGGGGGGACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCAxxxxxxxxxxACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGCCCCCCCCCCUUUACCACAAC\
) } def
/len { sequence length } bind def

/coor [
[84.38785553 392.15658569]
[70.36591339 386.60357666]
[58.16595459 377.73724365]
[48.55488205 366.11492920]
[42.13685608 352.46722412]
[39.31531906 337.65203857]
[40.26763535 322.60064697]
[44.93394089 308.25924683]
[53.02090836 295.52929688]
[64.02017975 285.21099854]
[77.24034119 277.95303345]
[91.85035706 274.21160889]
[91.85035706 259.21160889]
[91.85035706 244.21159363]
[91.85035706 229.21159363]
[91.85035706 214.21159363]
[91.85035706 199.21159363]
[91.85035706 184.21159363]
[91.85035706 169.21159363]
[91.85035706 154.21159363]
[91.85035706 139.21159363]
[88.68579102 132.48123169]
[92.00751495 123.90441132]
[86.19073486 121.08565521]
[81.28211212 116.88020325]
[77.60446930 111.56463623]
[62.83235168 114.16935730]
[48.06023788 116.77407837]
[33.28812027 119.37880707]
[27.42280960 133.64770508]
[14.76117420 142.46170044]
[-0.65650403 143.00828552]
[-13.91050053 135.11302185]
[-20.77151299 121.29527283]
[-19.05021667 105.96424103]
[-9.29587269 94.01198578]
[5.37894535 89.25244141]
[20.29155540 93.20435333]
[30.68339729 104.60668945]
[45.45551300 102.00196838]
[60.22763062 99.39723969]
[74.99974823 96.79251862]
[76.78362274 90.18671417]
[80.27845001 84.30410004]
[85.22667694 79.57820892]
[91.26362610 76.35731506]
[97.94441223 74.87879181]
[104.77667999 75.25158691]
[111.87308502 62.03640366]
[118.96949005 48.82122040]
[126.06589508 35.60603714]
[113.47441864 27.43815613]
[101.60044861 18.25836945]
[90.52510834 8.12938499]
[80.32404327 -2.87960505]
[71.06694794 -14.69339657]
[62.81705093 -27.23128891]
[55.63071060 -40.40763092]
[49.55701828 -54.13241959]
[44.63746262 -68.31189728]
[40.90565109 -82.84919739]
[38.38707352 -97.64501953]
[37.09894180 -112.59828186]
[37.05004501 -127.60685730]
[38.24072647 -142.56819153]
[40.66284561 -157.38011169]
[44.29985809 -171.94142151]
[49.12692261 -186.15264893]
[55.11106491 -199.91671753]
[62.21140289 -213.13960266]
[70.37943268 -225.73098755]
[79.55936432 -237.60484314]
[89.68847656 -248.68005371]
[100.69758606 -258.88098145]
[112.51148987 -268.13793945]
[125.04948425 -276.38769531]
[138.22590637 -283.57388306]
[151.95077515 -289.64739990]
[166.13031006 -294.56680298]
[180.66764832 -298.29843140]
[195.46350098 -300.81683350]
[210.41677856 -302.10479736]
[225.42535400 -302.15350342]
[240.38668823 -300.96264648]
[255.19857788 -298.54034424]
[269.75982666 -294.90316772]
[283.97100830 -290.07592773]
[297.73501587 -284.09161377]
[310.95779419 -276.99111938]
[323.54907227 -268.82293701]
[335.42282104 -259.64288330]
[346.49792480 -249.51362610]
[356.69873047 -238.50439453]
[365.95553589 -226.69038391]
[374.20513916 -214.15229797]
[381.39117432 -200.97578430]
[387.46453857 -187.25085449]
[392.38375854 -173.07125854]
[396.11523438 -158.53387451]
[398.63345337 -143.73799133]
[399.92123413 -128.78468323]
[399.96975708 -113.77611542]
[398.77871704 -98.81480408]
[396.35626221 -84.00294495]
[392.71890259 -69.44171906]
[387.89147949 -55.23060989]
[381.90701294 -41.46668243]
[374.80636597 -28.24396515]
[366.63803101 -15.65278244]
[357.45782471 -3.77914596]
[347.32843018 7.29583406]
[336.31909180 17.49650383]
[324.50497437 26.75317955]
[311.96676636 35.00262833]
[298.79019165 42.18849564]
[285.06518555 48.26169968]
[270.88552856 53.18074799]
[256.34808350 56.91204071]
[241.55218506 59.43008804]
[226.59886169 60.71768570]
[211.59028625 60.76604462]
[196.62899780 59.57483292]
[181.81715393 57.15218353]
[167.25598145 53.51464462]
[153.04493713 48.68707275]
[139.28108215 42.70244217]
[132.18467712 55.91762543]
[125.08826447 69.13280487]
[117.99186707 82.34799194]
[124.37949371 106.39851379]
[107.00434875 124.21238708]
[106.85035706 139.21159363]
[106.85035706 154.21159363]
[106.85035706 169.21159363]
[106.85035706 184.21159363]
[106.85035706 199.21159363]
[106.85035706 214.21159363]
[106.85035706 229.21159363]
[106.85035706 244.21159363]
[106.85035706 259.21160889]
[106.85035706 274.21160889]
[121.46036530 277.95303345]
[134.68052673 285.21099854]
[145.67979431 295.52929688]
[153.76676941 308.25924683]
[158.43307495 322.60064697]
[159.38539124 337.65203857]
[156.56385803 352.46722412]
[150.14582825 366.11492920]
[140.53475952 377.73724365]
[128.33479309 386.60357666]
[114.31285095 392.15658569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[26 42]
[27 41]
[28 40]
[29 39]
[48 129]
[49 128]
[50 127]
[51 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
