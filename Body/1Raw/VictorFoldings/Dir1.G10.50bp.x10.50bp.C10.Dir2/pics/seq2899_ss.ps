%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCGGAGCAGGGGGGGGGGGAACCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACxxxxxxxxxxCCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCACCCCCCCCCCACCUCCGAGCAG\
) } def
/len { sequence length } bind def

/coor [
[80.26659393 665.01373291]
[66.77950287 658.27862549]
[55.29658890 648.51098633]
[46.48546219 636.27874756]
[40.85838318 622.29309082]
[38.74250793 607.36706543]
[40.26085281 592.36846924]
[45.32513809 578.16925049]
[53.64093399 565.59503174]
[64.72477722 555.37683105]
[77.93225098 548.10870361]
[92.49551392 544.21319580]
[92.19150543 529.21624756]
[91.88750458 514.21936035]
[91.58349609 499.22244263]
[91.27949524 484.22552490]
[90.97548676 469.22860718]
[90.67148590 454.23168945]
[90.36748505 439.23474121]
[90.06347656 424.23782349]
[89.75947571 409.24090576]
[75.31201935 405.36169434]
[62.53014374 397.56072998]
[52.45416641 386.46295166]
[45.90700912 372.96200562]
[43.42694855 358.14831543]
[45.22341537 343.22100830]
[51.15930176 329.39083862]
[60.76140213 317.78201294]
[73.25812531 309.34082031]
[87.64149475 304.75836182]
[87.33749390 289.76144409]
[87.03348541 274.76452637]
[86.72948456 259.76760864]
[86.42547607 244.77070618]
[86.12147522 229.77378845]
[85.81746674 214.77685547]
[83.01113129 210.84646606]
[82.68405151 205.09854126]
[85.81746674 199.16885376]
[86.12147522 184.17193604]
[83.90184021 181.36111450]
[82.96553040 177.31614685]
[83.88625336 172.66723633]
[86.92739868 168.28042603]
[88.14216614 153.32969666]
[89.35694122 138.37896729]
[90.57170868 123.42823029]
[79.83518982 115.20378876]
[74.88195801 102.61888123]
[77.13259888 89.28288269]
[66.05348969 79.17083740]
[54.97438049 69.05879974]
[43.89527512 58.94675827]
[27.86784935 58.23880768]
[18.54529762 45.18240738]
[23.07908249 29.79331017]
[37.99127197 23.87671280]
[51.84251404 31.97132492]
[54.00731659 47.86764908]
[65.08642578 57.97969055]
[76.16552734 68.09173584]
[87.24463654 78.20377350]
[94.16675568 75.42871857]
[101.59755707 74.79637909]
[106.94941711 60.78361130]
[104.64512634 45.13111115]
[116.41416168 36.00208664]
[121.76602173 21.98932266]
[127.11788177 7.97655630]
[132.46974182 -6.03620958]
[120.69099426 3.25148296]
[106.87210083 9.08570862]
[92.00118256 11.04929161]
[77.14157104 9.00182343]
[63.35582352 3.08971047]
[51.62968063 -6.26430178]
[42.80162048 -18.39135361]
[37.50289917 -32.42429733]
[36.11240005 -47.35971069]
[38.72955322 -62.12963104]
[45.16721344 -75.67793274]
[54.96506119 -87.03584290]
[67.42250061 -95.39122009]
[81.64875031 -100.14660645]
[96.62657928 -100.96196747]
[111.28497314 -97.77899933]
[124.57580566 -90.82530212]
[135.54870605 -80.59810638]
[143.41903687 -67.82869720]
[147.62405396 -53.43016052]
[147.86306763 -38.43206787]
[144.12060547 -23.91080284]
[154.78080750 -34.46352386]
[165.44102478 -45.01624680]
[172.44389343 -60.45632553]
[189.21916199 -58.00136185]
[191.50399780 -41.20207977]
[175.99374390 -34.35603333]
[165.33354187 -23.80331421]
[154.67332458 -13.25059223]
[146.48249817 -0.68435067]
[141.13064575 13.32841492]
[135.77879333 27.34118080]
[130.42692566 41.35394669]
[133.11401367 56.00416183]
[120.96218109 66.13546753]
[115.61032867 80.14823914]
[124.95978546 96.15504456]
[120.86103058 114.23348999]
[105.52243805 124.64299774]
[104.30767059 139.59373474]
[103.09289551 154.54446411]
[101.87812805 169.49519348]
[101.11839294 184.47593689]
[100.81439209 199.47285461]
[100.81439209 214.47285461]
[101.11839294 229.46977234]
[101.42239380 244.46669006]
[101.72640228 259.46362305]
[102.03040314 274.46054077]
[102.33441162 289.45745850]
[102.63841248 304.45437622]
[117.19567108 308.45013428]
[130.02421570 316.37799072]
[140.08888245 327.58813477]
[146.58036804 341.16641235]
[148.98030090 356.00863647]
[147.10261536 370.91067505]
[141.10795593 384.66586304]
[131.49000549 396.16284180]
[119.03476715 404.47537231]
[104.75639343 408.93692017]
[105.06039429 423.93383789]
[105.36440277 438.93075562]
[105.66840363 453.92767334]
[105.97241211 468.92459106]
[106.27641296 483.92150879]
[106.58042145 498.91842651]
[106.88442230 513.91534424]
[107.18842316 528.91229248]
[107.49243164 543.90917969]
[122.20159149 547.21130371]
[135.69276428 553.93823242]
[147.18159485 563.69885254]
[156.00013733 575.92578125]
[161.63569641 589.90802002]
[163.76062012 604.83276367]
[162.25137329 619.83233643]
[157.19569397 634.03454590]
[148.88752747 646.61383057]
[137.80987549 656.83874512]
[124.60681152 664.11486816]
[110.04591370 668.01922607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[31 123]
[32 122]
[33 121]
[34 120]
[35 119]
[36 118]
[37 117]
[40 116]
[41 115]
[45 114]
[46 113]
[47 112]
[48 111]
[51 63]
[52 62]
[53 61]
[54 60]
[65 108]
[66 107]
[68 105]
[69 104]
[70 103]
[71 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
