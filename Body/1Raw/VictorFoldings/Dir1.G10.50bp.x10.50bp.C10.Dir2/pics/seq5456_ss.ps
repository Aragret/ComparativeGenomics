%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAUGACUGGGGGGGGGGAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCxxxxxxxxxxAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACCCCCCCCCCCUGACAUGACU\
) } def
/len { sequence length } bind def

/coor [
[259.83489990 269.40936279]
[250.95375061 257.31469727]
[242.86573792 244.67587280]
[235.60412598 231.54481506]
[229.19874573 217.97549438]
[223.67591858 204.02363586]
[219.05834961 189.74661255]
[215.36499023 175.20306396]
[212.61103821 160.45275879]
[210.80780029 145.55632019]
[209.96267700 130.57495117]
[210.07916260 115.57020569]
[195.11788940 114.49314117]
[180.15660095 113.41606903]
[165.19532776 112.33899689]
[151.94532776 119.14244843]
[138.73635864 110.43420410]
[123.77507782 109.35713959]
[108.81379700 108.28006744]
[94.04167938 110.88478851]
[80.35105896 117.01396179]
[66.66043091 123.14313507]
[52.96980286 129.27230835]
[50.76202774 144.54087830]
[40.63266754 156.17701721]
[25.81396484 160.46766663]
[11.03451824 156.04370117]
[1.01039219 144.31678772]
[-1.05975068 129.02894592]
[5.48466492 115.05847168]
[18.55533981 106.86328888]
[33.98146820 107.05844879]
[46.84062958 115.58168793]
[60.53125763 109.45251465]
[74.22187805 103.32334137]
[87.91250610 97.19416046]
[88.37421417 89.70838928]
[73.40266418 88.78497314]
[58.43112946 87.86132812]
[59.35500336 72.88980865]
[74.32608032 73.81342316]
[89.29763031 74.73683929]
[89.75933075 67.25106049]
[76.92568207 59.48592758]
[64.09202576 51.72079468]
[51.25837326 43.95565796]
[38.42471695 36.19052124]
[25.59106445 28.42538643]
[10.30634117 32.44443893]
[-3.30118728 24.40636063]
[-7.15841627 9.08000088]
[1.02307999 -4.44178438]
[16.38936424 -8.13675785]
[29.82389450 0.18724120]
[33.35620117 15.59173298]
[46.18985367 23.35686874]
[59.02350616 31.12200356]
[71.85716248 38.88713837]
[84.69081879 46.65227509]
[97.52446747 54.41741180]
[109.89086914 93.31878662]
[124.85214996 94.39585876]
[139.81343079 95.47292328]
[154.13354492 88.74651337]
[166.27239990 97.37771606]
[181.23367310 98.45478821]
[196.19496155 99.53186035]
[211.15623474 100.60893250]
[213.19021606 85.74223328]
[216.17251587 71.03639984]
[220.09091187 56.55186081]
[224.92927551 42.34813309]
[230.66773987 28.48358727]
[237.28273010 15.01519394]
[244.74705505 1.99829745]
[253.03002930 -10.51361179]
[262.09762573 -22.46912003]
[271.91259766 -33.81909943]
[282.43460083 -44.51690674]
[293.62042236 -54.51858521]
[305.42404175 -63.78303528]
[317.79699707 -72.27218628]
[330.68841553 -79.95115662]
[344.04537964 -86.78839111]
[357.81292725 -92.75579071]
[371.93453979 -97.82883453]
[386.35217285 -101.98667908]
[401.00656128 -105.21223450]
[415.83752441 -107.49224854]
[430.78408813 -108.81735229]
[445.78485107 -109.18209839]
[460.77813721 -108.58499908]
[475.70239258 -107.02848816]
[490.49624634 -104.51898193]
[505.09890747 -101.06677246]
[519.45037842 -96.68606567]
[533.49169922 -91.39485168]
[547.16516113 -85.21487427]
[560.41461182 -78.17152405]
[573.18548584 -70.29376221]
[585.42547607 -61.61393738]
[597.08416748 -52.16772842]
[608.11364746 -41.99395370]
[618.46862793 -31.13441658]
[628.10662842 -19.63374138]
[636.98791504 -7.53918743]
[645.07604980 5.09954500]
[652.33782959 18.23052025]
[658.74334717 31.79978180]
[664.26629639 45.75156784]
[668.88403320 60.02854919]
[672.57757568 74.57205963]
[675.33166504 89.32232666]
[677.13507080 104.21875000]
[677.98034668 119.20011139]
[677.86407471 134.20484924]
[676.78662109 149.17131042]
[674.75250244 164.03797913]
[671.77001953 178.74377441]
[667.85144043 193.22827148]
[663.01293945 207.43194580]
[657.27429199 221.29643250]
[650.65917969 234.76475525]
[643.19470215 247.78155518]
[634.91156006 260.29336548]
[625.84387207 272.24877930]
[616.02874756 283.59866333]
[605.50665283 294.29635620]
[594.32073975 304.29791260]
[582.51696777 313.56222534]
[570.14392090 322.05123901]
[557.25244141 329.73007202]
[543.89538574 336.56713867]
[530.12774658 342.53439331]
[516.00610352 347.60726929]
[501.58843994 351.76495361]
[486.93399048 354.99035645]
[472.10302734 357.27020264]
[457.15643311 358.59515381]
[442.15567017 358.95971680]
[427.16238403 358.36245728]
[412.23815918 356.80578613]
[397.44433594 354.29611206]
[382.84170532 350.84375000]
[368.49026489 346.46289062]
[354.44900513 341.17150879]
[340.77560425 334.99136353]
[327.52627563 327.94787598]
[314.75543213 320.06997681]
[302.51559448 311.39001465]
[290.85702515 301.94369507]
[279.82763672 291.76977539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 68]
[13 67]
[14 66]
[15 65]
[17 63]
[18 62]
[19 61]
[20 36]
[21 35]
[22 34]
[23 33]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
