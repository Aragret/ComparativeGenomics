%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCACAGGGGGGGGGGGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGxxxxxxxxxxCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCCCCCCCCCCCAACAG\
) } def
/len { sequence length } bind def

/coor [
[95.98950958 393.80731201]
[83.11623383 385.90441895]
[72.99194336 374.69390869]
[66.43736267 361.08459473]
[63.98384094 346.17965698]
[65.83027649 331.18740845]
[71.82698822 317.32321167]
[81.48784637 305.71096802]
[94.02969360 297.29199219]
[108.43582153 292.74884033]
[108.12376404 277.75207520]
[107.81170654 262.75534058]
[107.49964905 247.75857544]
[107.18759155 232.76182556]
[106.87554169 217.76507568]
[106.56348419 202.76831055]
[106.25142670 187.77156067]
[105.93936920 172.77481079]
[105.62731171 157.77806091]
[97.62691498 145.21450806]
[105.07543945 131.25634766]
[90.44631958 130.20646667]
[77.85240173 122.67535400]
[69.99745941 110.27230835]
[68.57126617 95.65338898]
[53.57207870 95.49735260]
[38.57288742 95.34131622]
[23.57369995 95.18527985]
[8.57451248 95.34131622]
[-6.41818380 95.80935669]
[-21.41087914 96.27740479]
[-36.40357590 96.74544525]
[-44.24684525 110.03027344]
[-58.03759766 116.94537354]
[-73.37525940 115.28415680]
[-85.36563873 105.57672119]
[-90.18264771 90.92066193]
[-86.28919220 75.99268341]
[-74.92766571 65.55624390]
[-59.72349167 62.94157791]
[-45.52825546 68.98300934]
[-36.87161636 81.75274658]
[-21.87892151 81.28470612]
[-6.88622570 80.81666565]
[8.10647011 80.34861755]
[12.00939178 77.49507904]
[17.76096916 77.10691833]
[23.72973824 80.18609619]
[38.72892761 80.34213257]
[53.72811508 80.49816895]
[68.72730255 80.65420532]
[79.05450439 69.77537537]
[78.11888123 54.80458450]
[77.18325043 39.83379364]
[75.16091919 24.97074699]
[72.06259155 10.29422092]
[68.96427155 -4.38230419]
[65.86595154 -19.05883026]
[60.67053604 -33.13034821]
[53.48802567 -46.29893112]
[46.30551910 -59.46751404]
[32.03241730 -67.54282379]
[32.15987778 -83.94147491]
[46.55677795 -91.79394531]
[60.41282272 -83.02227783]
[59.47409821 -66.65002441]
[66.65660858 -53.48144150]
[73.83911896 -40.31285858]
[75.17074585 -55.25363159]
[82.02370453 -68.59667969]
[93.39173889 -78.38278198]
[107.60562897 -83.17499542]
[122.57828522 -82.26965332]
[136.11119080 -75.79969025]
[146.21725464 -64.71513367]
[151.41255188 -50.64356995]
[150.93423462 -35.65119553]
[144.85252380 -21.93941879]
[134.06044006 -11.52159882]
[120.14263916 -5.92743635]
[105.14272308 -5.97834826]
[91.26321411 -11.66685963]
[80.54247284 -22.15715218]
[83.64080048 -7.48062611]
[86.73912048 7.19589949]
[89.83744049 21.87242508]
[98.35335541 9.52417660]
[112.76671600 5.37027216]
[126.54814148 11.29247093]
[133.45449829 24.60795784]
[130.35714722 39.28468704]
[118.65921783 48.67395782]
[103.65998077 48.52233887]
[92.15404510 38.89816666]
[93.08966827 53.86895752]
[94.02529907 68.83975220]
[109.17337799 69.64341736]
[122.20969391 77.38545990]
[130.15637207 90.28933716]
[131.20185852 105.40031433]
[146.19456482 105.86835480]
[162.17514038 96.77983856]
[176.73780823 106.52296448]
[191.73699951 106.67900085]
[206.73619080 106.83503723]
[221.73538208 106.99107361]
[230.41381836 103.93551636]
[237.04414368 107.30962372]
[252.03683472 107.77766418]
[260.69348145 95.00792694]
[274.88870239 88.96649170]
[290.09289551 91.58116150]
[301.45440674 102.01760101]
[305.34786987 116.94557953]
[300.53085327 131.60163879]
[288.54046631 141.30908203]
[273.20281982 142.97029114]
[259.41204834 136.05519104]
[251.56878662 122.77036285]
[236.57609558 122.30231476]
[221.57934570 121.99026489]
[206.58015442 121.83422852]
[191.58096313 121.67819214]
[176.58177185 121.52215576]
[167.68582153 129.77862549]
[155.14720154 129.73260498]
[145.72651672 120.86104584]
[130.73382568 120.39300537]
[120.07219696 130.94429016]
[128.09492493 144.58052063]
[120.62406921 157.46600342]
[120.93612671 172.46275330]
[121.24817657 187.45950317]
[121.56023407 202.45626831]
[121.87229156 217.45301819]
[122.18434906 232.44976807]
[122.49640656 247.44651794]
[122.80846405 262.44326782]
[123.12051392 277.44003296]
[123.43257141 292.43679810]
[138.01521301 296.37673950]
[150.89642334 304.26669312]
[161.03196716 315.46701050]
[167.60021973 329.06976318]
[170.06871033 343.97219849]
[168.23733521 358.96630859]
[162.25456238 372.83651733]
[152.60537720 384.45846558]
[140.07199097 392.89001465]
[125.67043304 397.44766235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[25 51]
[26 50]
[27 49]
[28 48]
[29 45]
[30 44]
[31 43]
[32 42]
[52 96]
[53 95]
[54 94]
[55 86]
[56 85]
[57 84]
[58 83]
[59 68]
[60 67]
[61 66]
[100 128]
[101 127]
[103 124]
[104 123]
[105 122]
[106 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
