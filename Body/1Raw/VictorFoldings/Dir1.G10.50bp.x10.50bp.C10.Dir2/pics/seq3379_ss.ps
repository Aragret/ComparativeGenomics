%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAACUACGGGGGGGGGGGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGxxxxxxxxxxAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACCCCCCCCCCCUACAACCACG\
) } def
/len { sequence length } bind def

/coor [
[83.54840851 369.08489990]
[70.67513275 361.18200684]
[60.55083466 349.97149658]
[53.99625397 336.36215210]
[51.54273224 321.45724487]
[53.38916779 306.46499634]
[59.38588333 292.60079956]
[69.04674530 280.98852539]
[81.58859253 272.56958008]
[95.99471283 268.02642822]
[95.68265533 253.02966309]
[95.37059784 238.03291321]
[95.05854034 223.03616333]
[94.74649048 208.03941345]
[94.43443298 193.04264832]
[94.12237549 178.04589844]
[93.81031799 163.04914856]
[93.49826050 148.05239868]
[93.18620300 133.05563354]
[92.87415314 118.05888367]
[82.19181061 111.13184357]
[77.47959900 98.24834442]
[81.72798157 84.16976929]
[67.23238373 80.31261444]
[52.73678970 76.45545197]
[38.24119568 72.59828949]
[45.41856003 85.76967621]
[42.62216187 100.50671387]
[31.11879921 110.13337708]
[16.11960220 110.28868866]
[4.41935825 100.90230560]
[1.31839037 86.22633362]
[8.22146797 72.90914917]
[22.00183296 66.98352814]
[8.21945095 61.06356430]
[-5.56293058 55.14360046]
[-19.34531212 49.22363663]
[-33.12769318 43.30367279]
[-46.91007614 37.38371277]
[-60.69245529 31.46374893]
[-74.59500885 25.83179092]
[-88.61172485 20.49027824]
[-102.62844086 15.14876652]
[-116.64514923 9.80725384]
[-132.74136353 12.94475174]
[-143.30104065 0.39783072]
[-137.46128845 -14.92631245]
[-121.22955322 -17.26351166]
[-111.30364227 -4.20945883]
[-97.28692627 1.13205349]
[-83.27021027 6.47356606]
[-69.25350189 11.81507874]
[-64.55271149 10.68455029]
[-59.09521484 12.54117393]
[-54.77249146 17.68136597]
[-40.99011230 23.60132980]
[-27.20772934 29.52129364]
[-13.42534924 35.44125748]
[0.35703254 41.36121750]
[14.13941383 47.28118134]
[27.92179489 53.20114517]
[42.09835434 58.10269547]
[56.59394836 61.95985413]
[71.08954620 65.81701660]
[85.58514404 69.67417145]
[100.22864532 66.42334747]
[111.73044586 56.79482269]
[103.34857941 44.33841705]
[96.31469727 31.07409668]
[90.70587158 17.14719009]
[86.58354950 2.71028590]
[83.99290466 -12.07843494]
[82.96231842 -27.05694008]
[83.50308228 -42.06111526]
[85.60926819 -56.92656708]
[89.25780487 -71.49042511]
[94.40871429 -85.59311676]
[101.00555420 -99.08011627]
[108.97605896 -111.80367279]
[118.23289490 -123.62435913]
[128.67463684 -134.41267395]
[140.18687439 -144.05041504]
[152.64347839 -152.43197632]
[165.90797424 -159.46554565]
[179.83502197 -165.07403564]
[194.27201843 -169.19599915]
[209.06080627 -171.78628540]
[224.03933716 -172.81651306]
[239.04350281 -172.27539062]
[253.90890503 -170.16883850]
[268.47265625 -166.51994324]
[282.57522583 -161.36869812]
[296.06207275 -154.77151489]
[308.78543091 -146.80070496]
[320.60589600 -137.54359436]
[331.39395142 -127.10158539]
[341.03143311 -115.58911133]
[349.41268921 -103.13230133]
[356.44592285 -89.86763763]
[362.05407715 -75.94045258]
[366.17568970 -61.50335312]
[368.76562500 -46.71450424]
[369.79547119 -31.73595047]
[369.25399780 -16.73180199]
[367.14709473 -1.86645067]
[363.49783325 12.69722748]
[358.34625244 26.79966736]
[351.74874878 40.28635406]
[343.77761841 53.00951767]
[334.52020264 64.82975769]
[324.07794189 75.61756897]
[312.56524658 85.25474548]
[300.10821533 93.63571167]
[286.84338379 100.66862488]
[272.91607666 106.27643585]
[258.47888184 110.39770508]
[243.68995667 112.98727417]
[228.71138000 114.01676941]
[213.70724487 113.47491455]
[198.84194946 111.36764526]
[184.27835083 107.71804810]
[170.17604065 102.56610870]
[156.68951416 95.96827698]
[143.96655273 87.99684906]
[132.14653015 78.73915100]
[121.35897064 68.29662323]
[109.85717010 77.92515564]
[120.95379639 91.56345367]
[119.46155548 107.89286804]
[107.87090302 117.74683380]
[108.18296051 132.74359131]
[108.49501801 147.74034119]
[108.80707550 162.73709106]
[109.11912537 177.73384094]
[109.43118286 192.73060608]
[109.74324036 207.72735596]
[110.05529785 222.72410583]
[110.36735535 237.72085571]
[110.67941284 252.71762085]
[110.99146271 267.71435547]
[125.57410431 271.65432739]
[138.45530701 279.54428101]
[148.59086609 290.74459839]
[155.15911865 304.34735107]
[157.62760925 319.24978638]
[155.79623413 334.24389648]
[149.81346130 348.11410522]
[140.16426086 359.73605347]
[127.63088226 368.16760254]
[113.22933197 372.72525024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 65]
[24 64]
[25 63]
[26 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 52]
[42 51]
[43 50]
[44 49]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
