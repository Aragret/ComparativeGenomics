%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAGGCCACGGGGGGGGGGCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUxxxxxxxxxxCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCCCCCCCCCCCAACGCCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 376.63879395]
[71.19830322 370.62277222]
[59.48964310 361.09335327]
[50.78712082 348.75769043]
[45.73651886 334.53115845]
[44.71262741 319.46948242]
[47.79142761 304.69033813]
[54.74444962 291.29040527]
[65.05573273 280.26406860]
[77.96011353 272.42956543]
[92.50000000 268.36825562]
[92.50000000 253.36824036]
[92.50000000 238.36824036]
[92.50000000 223.36824036]
[92.50000000 208.36824036]
[92.50000000 193.36824036]
[92.50000000 178.36824036]
[92.50000000 163.36824036]
[92.50000000 148.36824036]
[92.50000000 133.36824036]
[92.50000000 118.36824799]
[84.52812195 114.86312103]
[78.31066132 107.85637665]
[75.37859344 98.26653290]
[61.36188126 103.60804749]
[47.34516907 108.94956207]
[39.49858093 122.94279480]
[23.64334106 125.39042664]
[11.94222927 114.41484070]
[13.37133789 98.43556213]
[26.83437729 89.71053314]
[42.00365448 94.93284607]
[56.02037048 89.59133148]
[70.03707886 84.24982452]
[79.78473663 72.84880066]
[82.88305664 58.17227554]
[85.98137665 43.49575043]
[71.55702209 39.35675049]
[57.46469879 34.19927216]
[43.77621078 28.04959106]
[30.56131363 20.93905067]
[17.88735199 12.90388298]
[5.81890583 3.98503280]
[-5.58252382 -5.77204990]
[-16.25883865 -16.31764603]
[-26.15563202 -27.59801483]
[-35.22247314 -39.55567551]
[-43.41315842 -52.12969208]
[-50.68595123 -65.25598907]
[-57.00379181 -78.86768341]
[-62.33448029 -92.89540863]
[-66.65085602 -107.26767731]
[-69.93092346 -121.91126251]
[-72.15796661 -136.75152588]
[-73.32064056 -151.71286011]
[-73.41300964 -166.71900940]
[-72.43462372 -181.69352722]
[-70.39044952 -196.56008911]
[-67.29090881 -211.24293518]
[-63.15179443 -225.66726685]
[-57.99420929 -239.75955200]
[-51.84442520 -253.44798279]
[-44.73378372 -266.66284180]
[-36.69851685 -279.33673096]
[-27.77957344 -291.40512085]
[-18.02240372 -302.80645752]
[-7.47672701 -313.48269653]
[3.80371809 -323.37939453]
[15.76144791 -332.44616699]
[28.33552933 -340.63674927]
[41.46188354 -347.90942383]
[55.07362747 -354.22717285]
[69.10138702 -359.55773926]
[83.47369385 -363.87402344]
[98.11730194 -367.15396118]
[112.95758057 -369.38088989]
[127.91892242 -370.54345703]
[142.92507935 -370.63571167]
[157.89958191 -369.65719604]
[172.76612854 -367.61291504]
[187.44895935 -364.51327515]
[201.87324524 -360.37405396]
[215.96549988 -355.21633911]
[229.65388489 -349.06646729]
[242.86866760 -341.95571899]
[255.54251099 -333.92034912]
[267.61080933 -325.00131226]
[279.01211548 -315.24407959]
[289.68826294 -304.69830322]
[299.58486938 -293.41778564]
[308.65155029 -281.45999146]
[316.84204102 -268.88583374]
[324.11462402 -255.75942993]
[330.43225098 -242.14764404]
[335.76272583 -228.11984253]
[340.07888794 -213.74749756]
[343.35873413 -199.10386658]
[345.58554077 -184.26356506]
[346.74798584 -169.30221558]
[346.84011841 -154.29606628]
[345.86151123 -139.32156372]
[343.81710815 -124.45503235]
[340.71734619 -109.77223206]
[336.57800293 -95.34797668]
[331.42019653 -81.25576782]
[325.27020264 -67.56742096]
[318.15936279 -54.35268784]
[310.12390137 -41.67890930]
[301.20477295 -29.61066818]
[291.44741821 -18.20946312]
[280.90158081 -7.53339100]
[269.62100220 2.36314368]
[257.66311646 11.42971039]
[245.08891296 19.62010765]
[231.96244812 26.89259911]
[218.35061646 33.21012497]
[204.32276917 38.54048920]
[189.95039368 42.85653687]
[175.30674744 46.13626480]
[160.46643066 48.36296844]
[145.50506592 49.52529526]
[130.49890137 49.61732483]
[115.52441406 48.63858795]
[100.65790558 46.59407425]
[97.55957794 61.27059937]
[94.46125793 75.94712067]
[111.63700867 79.61596680]
[121.22061157 93.27281189]
[119.06304932 108.92976379]
[107.50000000 118.36824799]
[107.50000000 133.36824036]
[107.50000000 148.36824036]
[107.50000000 163.36824036]
[107.50000000 178.36824036]
[107.50000000 193.36824036]
[107.50000000 208.36824036]
[107.50000000 223.36824036]
[107.50000000 238.36824036]
[107.50000000 253.36824036]
[107.50000000 268.36825562]
[122.03988647 272.42956543]
[134.94427490 280.26406860]
[145.25555420 291.29040527]
[152.20857239 304.69033813]
[155.28736877 319.46948242]
[154.26348877 334.53115845]
[149.21287537 348.75769043]
[140.51036072 361.09335327]
[128.80169678 370.62277222]
[114.95575714 376.63879395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 34]
[25 33]
[26 32]
[35 126]
[36 125]
[37 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
