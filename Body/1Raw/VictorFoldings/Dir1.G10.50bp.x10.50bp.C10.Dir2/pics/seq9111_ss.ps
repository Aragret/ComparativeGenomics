%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCGAAACGGGGGGGGGGCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACxxxxxxxxxxGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUCCCCCCCCCCCAACAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 375.42819214]
[71.19830322 369.41217041]
[59.48964310 359.88275146]
[50.78712082 347.54705811]
[45.73651886 333.32055664]
[44.71262741 318.25888062]
[47.79142761 303.47970581]
[54.74444962 290.07977295]
[65.05573273 279.05343628]
[77.96011353 271.21893311]
[92.50000000 267.15762329]
[92.50000000 252.15762329]
[92.50000000 237.15762329]
[92.50000000 222.15762329]
[92.50000000 207.15762329]
[92.50000000 192.15762329]
[92.50000000 177.15762329]
[92.50000000 162.15762329]
[92.50000000 147.15762329]
[92.50000000 132.15762329]
[77.26593781 123.94838715]
[68.27578735 109.16172028]
[53.29607391 109.94156647]
[38.31635666 110.72141266]
[23.33664322 111.50125885]
[8.38855648 112.74813080]
[-6.51334620 114.46082306]
[-21.41524887 116.17350769]
[-27.03201294 119.85582733]
[-32.79280472 120.06700897]
[-36.97093582 117.63416290]
[-51.93118286 118.72547150]
[-66.89143372 119.81678009]
[-81.85168457 120.90809631]
[-97.20894623 128.09077454]
[-108.36222839 115.32203674]
[-99.18004608 101.06988525]
[-82.94299316 105.94784546]
[-67.98274231 104.85653687]
[-53.02249527 103.76522064]
[-38.06224442 102.67391205]
[-23.12793732 101.27160645]
[-8.22603607 99.55892181]
[6.67586660 97.84622955]
[9.16516590 95.26342773]
[13.05508041 93.79025269]
[17.79495811 94.08341980]
[22.55679893 96.52154541]
[37.53651428 95.74169922]
[52.51622772 94.96185303]
[67.49594116 94.18200684]
[73.20783997 80.69863129]
[84.18859863 71.01099396]
[98.27877045 67.02424622]
[112.70744324 69.52240753]
[121.47364807 57.35056686]
[130.23985291 45.17873001]
[139.00605774 33.00689316]
[147.77227783 20.83505821]
[136.50872803 10.91036987]
[126.27223206 -0.07056049]
[117.16135406 -12.00197887]
[109.26384735 -24.76897621]
[102.65577698 -38.24859619]
[97.40077209 -52.31101990]
[93.54944611 -66.82080841]
[91.13890076 -81.63823700]
[90.19233704 -96.62058258]
[90.71887970 -111.62357330]
[92.71344757 -126.50270081]
[96.15684509 -141.11466980]
[101.01590729 -155.31877136]
[107.24382782 -168.97819519]
[114.78063965 -181.96138000]
[123.55374146 -194.14331055]
[133.47865295 -205.40666199]
[144.45979309 -215.64294434]
[156.39138794 -224.75357056]
[169.15853882 -232.65081787]
[182.63829041 -239.25862122]
[196.70082092 -244.51335144]
[211.21069336 -248.36437988]
[226.02816772 -250.77464294]
[241.01054382 -251.72090149]
[256.01351929 -251.19406128]
[270.89260864 -249.19918823]
[285.50451660 -245.75549316]
[299.70849609 -240.89614868]
[313.36779785 -234.66795349]
[326.35083008 -227.13088989]
[338.53259277 -218.35754395]
[349.79574585 -208.43240356]
[360.03179932 -197.45106506]
[369.14221191 -185.51928711]
[377.03918457 -172.75196838]
[383.64672852 -159.27207947]
[388.90118408 -145.20945740]
[392.75192261 -130.69950867]
[395.16186523 -115.88198853]
[396.10784912 -100.89959717]
[395.58068848 -85.89663696]
[393.58551025 -71.01758575]
[390.14154053 -56.40574646]
[385.28192139 -42.20184708]
[379.05343628 -28.54267502]
[371.51611328 -15.55978203]
[362.74252319 -3.37820363]
[352.81716919 7.88474226]
[341.83563232 18.12058449]
[329.90365601 27.23074341]
[317.13616943 35.12748337]
[303.65615845 41.73474884]
[289.59344482 46.98890686]
[275.08340454 50.83935928]
[260.26583862 53.24901962]
[245.28343201 54.19468689]
[230.28047180 53.66724396]
[215.40147400 51.67177582]
[200.78970337 48.22750473]
[186.58589172 43.36759186]
[172.92684937 37.13885117]
[159.94410706 29.60126495]
[151.17790222 41.77310181]
[142.41169739 53.94493866]
[133.64549255 66.11677551]
[124.87928009 78.28861237]
[131.48995972 90.06291199]
[132.83474731 103.49893188]
[128.68876648 116.34984589]
[119.74533081 126.46667480]
[107.50000000 132.15762329]
[107.50000000 147.15762329]
[107.50000000 162.15762329]
[107.50000000 177.15762329]
[107.50000000 192.15762329]
[107.50000000 207.15762329]
[107.50000000 222.15762329]
[107.50000000 237.15762329]
[107.50000000 252.15762329]
[107.50000000 267.15762329]
[122.03988647 271.21893311]
[134.94427490 279.05343628]
[145.25555420 290.07977295]
[152.20857239 303.47970581]
[155.28736877 318.25888062]
[154.26348877 333.32055664]
[149.21287537 347.54705811]
[140.51036072 359.88275146]
[128.80169678 369.41217041]
[114.95575714 375.42819214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 51]
[23 50]
[24 49]
[25 48]
[26 44]
[27 43]
[28 42]
[31 41]
[32 40]
[33 39]
[34 38]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
