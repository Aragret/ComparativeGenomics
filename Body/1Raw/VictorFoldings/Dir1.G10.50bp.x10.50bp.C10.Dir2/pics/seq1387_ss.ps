%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGCCCUAGGGGGGGGGGAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCAxxxxxxxxxxUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCCCCCCCCCCCUCAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.55441284]
[71.19830322 365.53839111]
[59.48964310 356.00897217]
[50.78712082 343.67330933]
[45.73651886 329.44677734]
[44.71262741 314.38510132]
[47.79142761 299.60592651]
[54.74444962 286.20599365]
[65.05573273 275.17965698]
[77.96011353 267.34515381]
[92.50000000 263.28384399]
[92.50000000 248.28384399]
[92.50000000 233.28384399]
[92.50000000 218.28384399]
[92.50000000 203.28384399]
[92.50000000 188.28384399]
[92.50000000 173.28384399]
[92.50000000 158.28384399]
[92.50000000 143.28384399]
[92.50000000 128.28384399]
[92.50000000 113.28385162]
[86.01183319 99.75965881]
[74.31221008 90.37249756]
[62.61258698 80.98533630]
[50.91296387 71.59817505]
[32.05021667 82.89674377]
[9.75819397 84.58661652]
[-11.27401829 75.98217010]
[-26.47454453 58.59807968]
[-32.38166046 35.89318848]
[-47.37435913 35.42514420]
[-62.36705399 34.95710373]
[-77.35974884 34.48905945]
[-85.38217926 47.58624268]
[-98.88604736 54.90341949]
[-114.23889160 54.47229767]
[-127.31085968 46.40885544]
[-134.58567810 32.88211441]
[-134.10643005 17.53070259]
[-126.00205231 4.48406839]
[-112.45257568 -2.74830556]
[-97.10273743 -2.22094822]
[-84.08157349 5.92428446]
[-76.89170837 19.49636459]
[-61.89900970 19.96440697]
[-46.90631485 20.43244934]
[-31.91362000 20.90049171]
[-25.56649017 7.30954075]
[-35.54921722 -3.88622522]
[-45.53194427 -15.08199120]
[-55.51466751 -26.27775764]
[-65.49739838 -37.47352219]
[-78.34714508 -39.00251007]
[-86.43098450 -48.58742142]
[-85.81036377 -60.70856857]
[-95.55801392 -72.10958862]
[-111.19131470 -77.06257629]
[-114.45381927 -93.13391876]
[-101.98935699 -103.79079437]
[-86.62028503 -98.07032776]
[-84.15699768 -81.85723877]
[-74.40933990 -70.45622253]
[-57.59063721 -65.54387665]
[-54.30162811 -47.45624924]
[-44.31890488 -36.26048279]
[-34.33617783 -25.06471825]
[-24.35345078 -13.86895180]
[-14.37072372 -2.67318583]
[-6.41226292 -7.96033144]
[2.34280181 -11.66055679]
[11.58357525 -13.66248131]
[20.98558044 -13.91467571]
[30.22215271 -12.42681980]
[38.97578812 -9.26873302]
[46.94905090 -4.56732130]
[53.87468719 1.49842620]
[59.52456665 8.70419407]
[63.71717453 16.78860664]
[66.32341003 25.46268082]
[67.27051544 34.42015839]
[66.54394531 43.34830856]
[64.18730164 51.93883514]
[60.30012512 59.89855194]
[71.99974823 69.28571320]
[83.69937134 78.67287445]
[95.39899445 88.06003571]
[84.04029846 78.26309967]
[80.19957733 63.76313782]
[85.21918488 49.62795258]
[97.34474945 40.79784775]
[112.33832550 40.35898590]
[124.95960236 48.46475220]
[130.79737854 62.28214264]
[127.81134033 76.98192596]
[117.04736328 87.42530823]
[132.02706909 86.64546204]
[147.00679016 85.86562347]
[150.05326843 73.12776947]
[156.30761719 61.63595963]
[165.33139038 52.18103790]
[176.49581909 45.41158676]
[189.02560425 41.78941345]
[202.05282593 41.55806732]
[214.67701721 44.72647476]
[226.02738953 51.06879807]
[235.32295227 60.14052963]
[241.92616272 71.30963135]
[245.38677979 83.80059052]
[260.38595581 83.95662689]
[275.38516235 84.11266327]
[286.49932861 72.87652588]
[302.30361938 72.87384033]
[313.42163086 84.10618591]
[313.25720215 99.90962219]
[301.90795898 110.90824127]
[286.10714722 110.57676697]
[275.22912598 99.11184692]
[260.22991943 98.95581055]
[245.23074341 98.79977417]
[239.67379761 114.88930511]
[228.96200562 128.14991760]
[214.35873413 136.99110413]
[197.59541321 140.34515381]
[180.66618347 137.79608154]
[165.59071350 129.63117981]
[154.17324829 116.80867004]
[147.78663635 100.84533691]
[132.80691528 101.62518311]
[117.82720184 102.40502167]
[107.50000000 113.28385162]
[107.50000000 128.28384399]
[107.50000000 143.28384399]
[107.50000000 158.28384399]
[107.50000000 173.28384399]
[107.50000000 188.28384399]
[107.50000000 203.28384399]
[107.50000000 218.28384399]
[107.50000000 233.28384399]
[107.50000000 248.28384399]
[107.50000000 263.28384399]
[122.03988647 267.34515381]
[134.94427490 275.17965698]
[145.25555420 286.20599365]
[152.20857239 299.60592651]
[155.28736877 314.38510132]
[154.26348877 329.44677734]
[149.21287537 343.67330933]
[140.51036072 356.00897217]
[128.80169678 365.53839111]
[114.95575714 371.55441284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 86]
[23 85]
[24 84]
[25 83]
[30 47]
[31 46]
[32 45]
[33 44]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[55 62]
[56 61]
[95 129]
[96 128]
[97 127]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
