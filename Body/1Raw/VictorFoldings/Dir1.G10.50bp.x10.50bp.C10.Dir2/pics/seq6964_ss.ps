%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGCUGCAGGGGGGGGGGGUGCUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACxxxxxxxxxxCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUCCCCCCCCCCAUCUGCUUCA\
) } def
/len { sequence length } bind def

/coor [
[100.63809967 530.39691162]
[86.79216766 524.38092041]
[75.08350372 514.85150146]
[66.38098145 502.51580811]
[61.33037567 488.28930664]
[60.30648422 473.22760010]
[63.38528442 458.44845581]
[70.33830261 445.04852295]
[80.64958954 434.02218628]
[93.55397034 426.18768311]
[108.09385681 422.12637329]
[108.09385681 407.12637329]
[108.09385681 392.12637329]
[108.09385681 377.12637329]
[108.09385681 362.12637329]
[108.09385681 347.12637329]
[108.09385681 332.12637329]
[108.09385681 317.12637329]
[108.09385681 302.12637329]
[108.09385681 287.12637329]
[107.93782043 272.12719727]
[107.62576294 257.13043213]
[107.31370544 242.13368225]
[89.82585907 231.95065308]
[81.87377930 213.19290161]
[86.78037262 193.27755737]
[102.74829102 180.18684387]
[100.88068390 165.30355835]
[99.01306915 150.42028809]
[97.14545441 135.53700256]
[95.27783966 120.65372467]
[93.41022491 105.77043915]
[91.10051727 103.67302704]
[89.52509308 100.66757965]
[89.02949524 97.03297424]
[89.84805298 93.17448425]
[92.05961609 89.57872009]
[91.43563843 74.59170532]
[90.81166077 59.60468674]
[76.70722961 57.45220947]
[63.25127029 52.72112274]
[50.91072464 45.57728577]
[40.11348724 36.27024841]
[31.23361778 25.12453842]
[24.57834816 12.52834415]
[20.37747383 -1.08000469]
[18.77540779 -15.22729206]
[19.82622528 -29.42186737]
[23.49183083 -43.17073822]
[29.64334869 -55.99668503]
[38.06563950 -67.45482635]
[48.46483231 -77.14806366]
[60.47858429 -84.74081421]
[73.68869019 -89.97065735]
[87.63565826 -92.65739441]
[87.63565826 -107.65739441]
[87.63565826 -122.65739441]
[87.63565826 -137.65739441]
[84.48998260 -146.30358887]
[87.79493713 -152.96864319]
[88.10699463 -167.96539307]
[80.65846252 -181.92355347]
[88.65886688 -194.48710632]
[88.97092438 -209.48385620]
[89.28297424 -224.48060608]
[89.59503174 -239.47735596]
[89.90708923 -254.47412109]
[90.21914673 -269.47085571]
[76.17229462 -275.21981812]
[65.15344238 -285.65768433]
[58.65280151 -299.37286377]
[57.54953003 -314.51049805]
[61.99283600 -329.02328491]
[71.38179779 -340.94854736]
[84.44663239 -348.67346191]
[99.42044067 -351.15332031]
[114.27812195 -348.05273438]
[127.01030731 -339.79101562]
[135.89506531 -327.48550415]
[139.73081970 -312.80044556]
[137.99879456 -297.72183228]
[130.93325806 -284.28894043]
[119.48973846 -274.31845093]
[105.21589661 -269.15881348]
[104.90384674 -254.16206360]
[104.59178925 -239.16529846]
[104.27973175 -224.16854858]
[103.96767426 -209.17179871]
[103.65561676 -194.17504883]
[111.12647247 -181.28956604]
[103.10374451 -167.65333557]
[102.79169464 -152.65658569]
[102.63565826 -137.65739441]
[102.63565826 -122.65739441]
[102.63565826 -107.65739441]
[102.63565826 -92.65739441]
[118.09433746 -89.51373291]
[132.57952881 -83.25241089]
[145.46966553 -74.13968658]
[156.21105957 -62.56422043]
[164.34179688 -49.02051163]
[169.51155090 -34.08777237]
[171.49665833 -18.40515327]
[170.20983887 -2.64439797]
[165.70399475 12.51894379]
[158.17005920 26.43446350]
[147.92890930 38.50479507]
[135.41766357 48.21126175]
[121.17108917 55.13615036]
[105.79867554 58.98070908]
[106.42265320 73.96772766]
[107.04663086 88.95474243]
[108.29351044 103.90283203]
[110.16111755 118.78610992]
[112.02873230 133.66938782]
[113.89634705 148.55267334]
[115.76396179 163.43594360]
[117.63157654 178.31922913]
[127.33872223 181.00189209]
[135.74720764 186.49061584]
[142.07200623 194.25144958]
[145.72918701 203.53933716]
[146.38984680 213.46971130]
[144.00949097 223.10260010]
[138.83064270 231.53172302]
[131.35826111 237.96971130]
[122.31046295 241.82162476]
[122.62252045 256.81835938]
[122.93457794 271.81512451]
[126.25943756 280.39401245]
[123.09385681 287.12637329]
[123.09385681 302.12637329]
[123.09385681 317.12637329]
[123.09385681 332.12637329]
[123.09385681 347.12637329]
[123.09385681 362.12637329]
[123.09385681 377.12637329]
[123.09385681 392.12637329]
[123.09385681 407.12637329]
[123.09385681 422.12637329]
[137.63374329 426.18768311]
[150.53813171 434.02218628]
[160.84941101 445.04852295]
[167.80242920 458.44845581]
[170.88122559 473.22760010]
[169.85734558 488.28930664]
[164.80673218 502.51580811]
[156.10421753 514.85150146]
[144.39555359 524.38092041]
[130.54960632 530.39691162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 127]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[37 112]
[38 111]
[39 110]
[55 96]
[56 95]
[57 94]
[58 93]
[60 92]
[61 91]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
