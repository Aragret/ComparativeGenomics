%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUCAUAGAGGGGGGGGGGAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUxxxxxxxxxxUAGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCCCCCCCCCCCUAUCAUAUA\
) } def
/len { sequence length } bind def

/coor [
[81.39564514 373.43084717]
[67.37370300 367.87783813]
[55.17374420 359.01150513]
[45.56267166 347.38919067]
[39.14464569 333.74151611]
[36.32310867 318.92633057]
[37.27542496 303.87493896]
[41.94173050 289.53350830]
[50.02869797 276.80355835]
[61.02797318 266.48529053]
[74.24813080 259.22732544]
[88.85814667 255.48587036]
[88.85814667 240.48587036]
[88.85814667 225.48587036]
[88.85814667 210.48587036]
[88.85814667 195.48587036]
[88.85814667 180.48587036]
[88.85814667 165.48587036]
[88.85814667 150.48587036]
[88.85814667 135.48587036]
[88.85814667 120.48587799]
[83.15348053 106.61299133]
[72.60146332 95.95208740]
[62.04944992 85.29117584]
[51.49743271 74.63027191]
[40.83652496 64.07825470]
[30.06784630 53.63624573]
[19.29916763 43.19423676]
[8.53048897 32.75222397]
[-3.04416037 42.31730270]
[-15.60081291 50.55099487]
[-28.98704147 57.35335159]
[-43.04035187 62.64179611]
[-57.59014893 66.35214233]
[-72.45980835 68.43933868]
[-87.46882629 68.87805176]
[-102.43501282 67.66295624]
[-117.17668915 64.80879974]
[-131.51490784 60.35023499]
[-145.27560425 54.34138489]
[-158.29174805 46.85518646]
[-170.40533447 37.98251724]
[-181.46931458 27.83108139]
[-191.34936523 16.52411079]
[-199.92558289 4.19886065]
[-207.09384155 -8.99505138]
[-212.76712036 -22.89746284]
[-216.87655640 -37.33961105]
[-219.37228394 -52.14618683]
[-220.22396851 -67.13744354]
[-219.42129517 -82.13140869]
[-216.97401428 -96.94606018]
[-212.91181946 -111.40157318]
[-207.28402710 -125.32245636]
[-200.15896606 -138.53973389]
[-191.62309265 -150.89297485]
[-181.78005981 -162.23217773]
[-170.74934387 -172.41973877]
[-158.66482544 -181.33197021]
[-145.67323303 -188.86070251]
[-131.93225098 -194.91452026]
[-117.60869598 -199.41993713]
[-102.87643433 -202.32228088]
[-87.91429901 -203.58630371]
[-72.90392303 -203.19668579]
[-58.02751923 -201.15811157]
[-43.46567154 -197.49537659]
[-29.39514351 -192.25289917]
[-15.98674202 -185.49435425]
[-3.40323257 -177.30177307]
[8.20263195 -167.77459717]
[18.68996811 -157.02847290]
[27.93146896 -145.19387817]
[35.81494904 -132.41444397]
[42.24471283 -118.84530640]
[47.14270782 -104.65119934]
[50.44947815 -90.00440979]
[52.12488174 -75.08274078]
[52.14858246 -60.06732559]
[50.52028656 -45.14044189]
[47.25976562 -30.48328590]
[42.40660095 -16.27378273]
[36.01969910 -2.68442392]
[28.17659569 10.11983013]
[18.97249794 21.98354721]
[29.74117661 32.42555618]
[40.50985718 42.86756516]
[51.27853394 53.30957413]
[58.31329727 55.72293091]
[62.15834427 64.07825470]
[72.71035767 74.73915863]
[83.26237488 85.40007019]
[93.81439209 96.06098175]
[88.73479462 87.22910309]
[88.57015991 75.84197998]
[94.16132355 64.04948425]
[105.51690674 54.21354675]
[118.18842316 46.18654633]
[123.08981323 30.91055679]
[138.13954163 25.35313416]
[151.79277039 33.77745819]
[153.57588196 49.72111130]
[142.12103271 60.95348358]
[126.21541595 58.85806274]
[113.54389954 66.88506317]
[114.84626007 74.27111816]
[128.94175720 79.40113068]
[117.45098877 89.04323578]
[118.75334930 96.42929077]
[133.40606689 99.63829041]
[148.05879211 102.84728241]
[159.35952759 96.54671478]
[171.52796936 99.56336212]
[178.13854980 109.73992920]
[192.72230530 113.24909210]
[207.30604553 116.75826263]
[219.02264404 106.58471680]
[234.48431396 105.27453613]
[247.74571228 113.33151245]
[253.70758057 127.65756226]
[250.07743835 142.74403381]
[238.25117493 152.78987122]
[222.77619934 153.93225098]
[209.60298157 145.73190308]
[203.79687500 131.34201050]
[189.21313477 127.83284760]
[174.62937927 124.32367706]
[158.12759399 130.21736145]
[144.84980774 117.50000763]
[130.19708252 114.29101562]
[115.54434967 111.08201599]
[103.85814667 120.48587799]
[103.85814667 135.48587036]
[103.85814667 150.48587036]
[103.85814667 165.48587036]
[103.85814667 180.48587036]
[103.85814667 195.48587036]
[103.85814667 210.48587036]
[103.85814667 225.48587036]
[103.85814667 240.48587036]
[103.85814667 255.48587036]
[118.46815491 259.22732544]
[131.68830872 266.48529053]
[142.68759155 276.80355835]
[150.77455139 289.53350830]
[155.44085693 303.87493896]
[156.39317322 318.92633057]
[153.57164001 333.74151611]
[147.15361023 347.38919067]
[137.54254150 359.01150513]
[125.34258270 367.87783813]
[111.32064056 373.43084717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 93]
[23 92]
[24 91]
[25 90]
[26 88]
[27 87]
[28 86]
[29 85]
[97 105]
[98 104]
[109 131]
[110 130]
[111 129]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
