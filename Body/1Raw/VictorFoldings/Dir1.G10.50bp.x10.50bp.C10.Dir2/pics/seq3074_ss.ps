%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUAAGGCCGGGGGGGGGGUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUxxxxxxxxxxACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUCCCCCCCCCCGAAAUAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[111.19981384 230.88845825]
[109.82930756 215.93930054]
[109.90802765 200.92765808]
[111.43521881 185.99369812]
[114.39663696 171.27685547]
[118.76462555 156.91453552]
[124.49840546 143.04084778]
[131.54443359 129.78532410]
[119.04040527 121.49984741]
[106.53636932 113.21437073]
[91.58692932 111.98375702]
[77.89630890 118.11293030]
[64.20568085 124.24210358]
[50.51505661 130.37127686]
[36.82443237 136.50045776]
[23.13380432 142.62962341]
[9.44317913 148.75880432]
[-4.24744606 154.88796997]
[-17.93807220 161.01715088]
[-31.62869644 167.14631653]
[-34.96520996 180.23362732]
[-45.09532928 188.86854553]
[-58.15751648 190.05511475]
[-69.34022522 183.58215332]
[-83.15380859 189.42893982]
[-96.96739197 195.27572632]
[-106.41291046 208.68148804]
[-122.71879578 206.93502808]
[-129.11094666 191.83296204]
[-119.01367950 178.91099548]
[-102.81417847 181.46214294]
[-89.00059509 175.61535645]
[-75.18701172 169.76856995]
[-69.56935883 153.94627380]
[-53.95143509 146.91691589]
[-37.75786972 153.45570374]
[-24.06724548 147.32652283]
[-10.37662029 141.19735718]
[3.31400561 135.06817627]
[17.00463104 128.93899536]
[30.69525719 122.80982971]
[44.38588333 116.68065643]
[58.07650757 110.55148315]
[71.76713562 104.42230988]
[85.45775604 98.29313660]
[71.48950195 92.82616425]
[70.22455597 77.87959290]
[83.07537079 70.14289093]
[95.69312286 78.25598145]
[92.63472748 63.57108688]
[89.57633209 48.88618851]
[86.51793671 34.20129013]
[79.29804230 47.34941483]
[66.18627167 54.63511276]
[51.20835495 53.82144165]
[38.96300125 45.15822220]
[33.20993042 31.30534554]
[35.71552277 16.51609230]
[45.71047592 5.33124161]
[60.12601852 1.18490338]
[74.53610992 5.35013819]
[84.51559448 16.54642677]
[84.20761871 1.54958797]
[83.89964294 -13.44725037]
[83.59166718 -28.44408798]
[68.97145844 -32.20601273]
[55.90893936 -39.77392197]
[45.37343597 -50.58621979]
[38.14675522 -63.84056473]
[34.76516342 -78.55339813]
[35.47959518 -93.63291931]
[40.23703384 -107.96014404]
[48.68445206 -120.47189331]
[60.19498825 -130.23970032]
[73.91448975 -136.53874207]
[88.82487488 -138.90158081]
[103.81969452 -137.15287781]
[117.78623199 -131.42240906]
[129.68807983 -122.13539886]
[138.64204407 -109.98101044]
[143.98367310 -95.86118317]
[145.31660461 -80.82369995]
[142.54188538 -65.98444366]
[135.86546326 -52.44458008]
[125.78274536 -41.20886230]
[113.04193878 -33.11105347]
[98.58850098 -28.75206566]
[98.89647675 -13.75522804]
[99.20446014 1.24161041]
[99.51243591 16.23844910]
[101.20283508 31.14289665]
[104.26123047 45.82779312]
[107.31962585 60.51269150]
[110.37802124 75.19758606]
[114.82183838 100.71033478]
[127.32587433 108.99581146]
[139.82991028 117.28128815]
[149.29055786 105.62574005]
[159.83197021 94.93769836]
[171.35572815 85.31696320]
[183.75422668 76.85336304]
[196.91171265 69.62591553]
[210.70533752 63.70209885]
[225.00630188 59.13723373]
[239.68107605 55.97394180]
[254.59265137 54.24174881]
[269.60180664 53.95684052]
[284.56835938 55.12186813]
[299.35263062 57.72595596]
[313.81652832 61.74478912]
[327.82501221 67.14084625]
[341.24731445 73.86374664]
[353.95809937 81.85071564]
[365.83868408 91.02717590]
[376.77810669 101.30745697]
[386.67428589 112.59555817]
[395.43478394 124.78609467]
[402.97781372 137.76524353]
[409.23294067 151.41180420]
[414.14178467 165.59838867]
[417.65847778 180.19250488]
[419.75021362 195.05790710]
[420.39743042 210.05580139]
[419.59411621 225.04612732]
[417.34774780 239.88896179]
[413.67929077 254.44567871]
[408.62304688 268.58038330]
[402.22619629 282.16110229]
[394.54846191 295.06100464]
[385.66152954 307.15969849]
[375.64837646 318.34414673]
[364.60250854 328.50997925]
[352.62704468 337.56228638]
[339.83380127 345.41650391]
[326.34225464 351.99929810]
[312.27832031 357.24923706]
[297.77337646 361.11727905]
[282.96282959 363.56732178]
[267.98492432 364.57647705]
[252.97956848 364.13531494]
[238.08683777 362.24798584]
[223.44578552 358.93209839]
[209.19311523 354.21859741]
[195.46191406 348.15151978]
[182.38037109 340.78747559]
[170.07064819 332.19528198]
[158.64767456 322.45507812]
[148.21809387 311.65789795]
[138.87930298 299.90447998]
[130.71849060 287.30462646]
[123.81185150 273.97592163]
[118.22387695 260.04287720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 97]
[9 96]
[10 95]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[24 33]
[25 32]
[26 31]
[49 94]
[50 93]
[51 92]
[52 91]
[62 90]
[63 89]
[64 88]
[65 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
