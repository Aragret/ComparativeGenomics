%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUACCCCGAAGGGGGGGGGGCCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCxxxxxxxxxxCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCCCCCCCCCCCAUACCCCGAA\
) } def
/len { sequence length } bind def

/coor [
[75.51307678 429.30468750]
[61.24130630 424.49523926]
[48.33732224 416.72985840]
[37.40466690 406.37170410]
[28.95468140 393.90527344]
[23.38258553 379.91363525]
[20.94899559 365.05120850]
[21.76773643 350.01315308]
[25.80051422 335.50277710]
[32.85870743 322.19879150]
[42.61219025 310.72344971]
[54.60477829 301.61346436]
[68.27555847 295.29492188]
[82.98511505 292.06335449]
[82.98511505 277.06335449]
[82.98511505 262.06335449]
[82.98511505 247.06335449]
[82.98511505 232.06335449]
[82.98511505 217.06335449]
[82.98511505 202.06335449]
[82.98511505 187.06335449]
[82.98511505 172.06335449]
[82.98511505 157.06335449]
[82.98511505 142.06335449]
[82.98511505 127.06335449]
[75.32933807 139.96253967]
[64.95083618 150.79244995]
[52.38907623 158.99012756]
[38.29698944 164.12950134]
[23.40707016 165.94342041]
[8.49327278 164.33760071]
[-5.66920280 159.39550781]
[-18.34421158 151.37402344]
[-28.87292480 140.69010925]
[-36.70807648 127.89907837]
[-41.44240189 113.66580200]
[-42.82981873 98.73010254]
[-40.79821777 83.86832428]
[-35.45318985 69.85295105]
[-27.07256317 57.41248322]
[-16.09195518 47.19356918]
[-3.08212137 39.72736359]
[11.28070641 35.40195465]
[26.24996948 34.44216919]
[41.04758453 36.89789581]
[54.90439224 42.64148712]
[67.10013580 51.37440109]
[77.00090027 62.64271545]
[84.09205627 75.86071777]
[88.00500488 90.34135437]
[88.53610229 105.33541870]
[95.33258057 91.96351624]
[101.72470093 78.39366150]
[108.11682129 64.82381439]
[114.50894928 51.25396729]
[120.90106964 37.68412018]
[127.29319000 24.11426926]
[133.68530273 10.54442120]
[132.56652832 -5.23717928]
[144.98974609 -13.45380592]
[151.38186646 -27.02365494]
[157.77398682 -40.59350204]
[164.16610718 -54.16335297]
[170.55822754 -67.73320007]
[169.43945312 -83.51480103]
[181.86267090 -91.73143005]
[188.25479126 -105.30127716]
[194.64691162 -118.87112427]
[201.03903198 -132.44097900]
[188.54856873 -140.79837036]
[177.44329834 -150.92410278]
[167.97129822 -162.59196472]
[160.34419250 -175.54129028]
[154.73236084 -189.48277283]
[151.26118469 -204.10496521]
[150.00819397 -219.08120728]
[151.00138855 -234.07690430]
[154.21859741 -248.75708008]
[159.58792114 -262.79373169]
[166.98942566 -275.87332153]
[176.25775146 -287.70361328]
[187.18585205 -298.02032471]
[199.52955627 -306.59295654]
[213.01313782 -313.23004150]
[227.33535767 -317.78326416]
[242.17623901 -320.15090942]
[257.20425415 -320.28009033]
[272.08364868 -318.16793823]
[286.48202515 -313.86160278]
[300.07769775 -307.45730591]
[312.56698608 -299.09814453]
[323.67080688 -288.97082520]
[333.14114380 -277.30160522]
[340.76641846 -264.35119629]
[346.37625122 -250.40892029]
[349.84536743 -235.78623962]
[351.09619141 -220.80981445]
[350.10086060 -205.81425476]
[346.88156128 -191.13455200]
[341.51025391 -177.09864807]
[334.10687256 -164.02012634]
[324.83685303 -152.19114685]
[313.90731812 -141.87599182]
[301.56237793 -133.30509949]
[288.07785034 -126.66995239]
[273.75497437 -122.11876678]
[258.91375732 -119.75323486]
[243.88574219 -119.62618256]
[229.00663757 -121.74047089]
[214.60888672 -126.04885101]
[208.21676636 -112.47900391]
[201.82464600 -98.90915680]
[195.43252563 -85.33930969]
[197.00849915 -70.52831268]
[184.12808228 -61.34107971]
[177.73596191 -47.77123260]
[171.34384155 -34.20138168]
[164.95172119 -20.63153458]
[158.55960083 -7.06168509]
[160.13557434 7.74930906]
[147.25515747 16.93654251]
[140.86303711 30.50639153]
[134.47091675 44.07624054]
[128.07879639 57.64608765]
[121.68667603 71.21593475]
[115.29455566 84.78578186]
[108.90243530 98.35563660]
[109.70664978 102.19136810]
[108.78704834 106.36280060]
[106.03320312 110.07902527]
[101.69801331 112.53013611]
[97.98511505 127.06335449]
[97.98511505 142.06335449]
[97.98511505 157.06335449]
[97.98511505 172.06335449]
[97.98511505 187.06335449]
[97.98511505 202.06335449]
[97.98511505 217.06335449]
[97.98511505 232.06335449]
[97.98511505 247.06335449]
[97.98511505 262.06335449]
[97.98511505 277.06335449]
[97.98511505 292.06335449]
[112.69467163 295.29492188]
[126.36544800 301.61346436]
[138.35803223 310.72344971]
[148.11152649 322.19879150]
[155.16970825 335.50277710]
[159.20248413 350.01315308]
[160.02122498 365.05120850]
[157.58764648 379.91363525]
[152.01554871 393.90527344]
[143.56556702 406.37170410]
[132.63290405 416.72985840]
[119.72891998 424.49523926]
[105.45715332 429.30468750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[51 131]
[52 127]
[53 126]
[54 125]
[55 124]
[56 123]
[57 122]
[58 121]
[60 119]
[61 118]
[62 117]
[63 116]
[64 115]
[66 113]
[67 112]
[68 111]
[69 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
