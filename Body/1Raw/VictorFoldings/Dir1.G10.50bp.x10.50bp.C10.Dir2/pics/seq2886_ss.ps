%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAAAAAUGGGGGGGGGGUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCxxxxxxxxxxUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCCCCCCCCCCCAUUAAUAAU\
) } def
/len { sequence length } bind def

/coor [
[97.62471771 373.69506836]
[83.77878571 367.67904663]
[72.07012177 358.14962769]
[63.36759567 345.81396484]
[58.31699371 331.58746338]
[57.29310226 316.52575684]
[60.37190247 301.74661255]
[67.32492065 288.34667969]
[77.63620758 277.32034302]
[90.54058838 269.48583984]
[105.08047485 265.42453003]
[105.08047485 250.42453003]
[105.08047485 235.42453003]
[105.08047485 220.42453003]
[105.08047485 205.42453003]
[105.08047485 190.42453003]
[105.08047485 175.42453003]
[105.08047485 160.42453003]
[105.08047485 145.42453003]
[105.08047485 130.42453003]
[90.76216888 129.52996826]
[78.35364532 122.24192810]
[70.55113220 110.09760284]
[69.07093048 95.69436646]
[54.09122086 94.91452026]
[39.11150360 94.13467407]
[24.13179016 93.35482788]
[9.15207672 92.57498169]
[-5.82763767 91.79514313]
[-20.80735207 91.01529694]
[-35.80654144 90.85926056]
[-50.79923630 91.32730103]
[-58.64250565 104.61212921]
[-72.43325806 111.52722931]
[-87.77091980 109.86602020]
[-99.76129913 100.15857697]
[-104.57830811 85.50252533]
[-100.68486023 70.57453918]
[-89.32332611 60.13810349]
[-74.11914825 57.52343750]
[-59.92391968 63.56486893]
[-51.26728058 76.33460236]
[-36.27458191 75.86656189]
[-34.24120331 73.84846497]
[-31.26032066 72.54144287]
[-27.60888481 72.32029724]
[-23.69769096 73.44883728]
[-20.02750778 76.03558350]
[-5.04779291 76.81542206]
[9.93192196 77.59526825]
[24.91163635 78.37511444]
[39.89134979 79.15496063]
[54.87106323 79.93480682]
[69.85077667 80.71465302]
[80.40206909 70.05302429]
[79.46643829 55.08223343]
[78.53081512 40.11144257]
[77.59518433 25.14064980]
[76.50387573 10.18040180]
[75.25699615 -4.76768541]
[71.40350342 -13.12246895]
[74.14298248 -20.03918076]
[73.20735168 -35.00997162]
[72.27172852 -49.98076248]
[71.33609772 -64.95155334]
[56.73018646 -68.94480896]
[44.21367645 -77.46629333]
[35.14426041 -89.59165192]
[30.50572777 -104.00563049]
[30.80122566 -119.14469910]
[35.99870300 -133.36668396]
[45.53437805 -145.12890625]
[58.37388992 -153.15545654]
[73.12450409 -156.57571411]
[88.18618774 -155.01863098]
[101.92515564 -148.65315247]
[112.85111237 -138.16972351]
[119.77889252 -124.70552826]
[121.95701599 -109.72105408]
[119.14923096 -94.84170532]
[111.66008759 -81.68148804]
[100.30195618 -71.66790771]
[86.30689240 -65.88718414]
[87.24251556 -50.91639328]
[88.17814636 -35.94559860]
[89.11377716 -20.97480774]
[90.20508575 -6.01455975]
[91.45195770 8.93352699]
[95.16621399 15.37945557]
[92.56597900 24.20502090]
[93.50160217 39.17581177]
[94.43723297 54.14660645]
[95.37286377 69.11739349]
[114.25468445 72.35903168]
[127.61729431 85.97823334]
[130.47572327 104.76371002]
[145.47491455 104.60767365]
[160.47410583 104.45163727]
[175.47329712 104.29560089]
[178.55166626 89.55322266]
[184.72766113 75.81745911]
[193.71240234 63.73075485]
[205.08566284 53.85842514]
[218.31550598 46.66222000]
[232.78314209 42.47871780]
[247.81188965 41.50358963]
[262.69882202 43.78244019]
[276.74765015 49.20869064]
[289.30130005 57.52853775]
[299.77261353 68.35285187]
[307.67181396 81.17535400]
[312.62945557 95.39632416]
[314.41366577 110.35060883]
[312.94094849 125.33878326]
[308.28024292 139.65980530]
[300.64950562 152.64387512]
[290.40563965 163.68368530]
[278.02780151 172.26289368]
[264.09487915 177.98023987]
[249.25857544 180.56829834]
[234.21279907 179.90603638]
[219.66125488 176.02441406]
[206.28457642 169.10499573]
[194.70838928 159.47142029]
[185.47413635 147.57424927]
[179.01373291 133.96994019]
[175.62933350 119.29479218]
[160.63014221 119.45082855]
[145.63095093 119.60686493]
[130.63175964 119.76290131]
[120.08047485 130.42453003]
[120.08047485 145.42453003]
[120.08047485 160.42453003]
[120.08047485 175.42453003]
[120.08047485 190.42453003]
[120.08047485 205.42453003]
[120.08047485 220.42453003]
[120.08047485 235.42453003]
[120.08047485 250.42453003]
[120.08047485 265.42453003]
[134.62036133 269.48583984]
[147.52474976 277.32034302]
[157.83602905 288.34667969]
[164.78904724 301.74661255]
[167.86784363 316.52575684]
[166.84396362 331.58746338]
[161.79335022 345.81396484]
[153.09083557 358.14962769]
[141.38217163 367.67904663]
[127.53623199 373.69506836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 43]
[32 42]
[55 93]
[56 92]
[57 91]
[58 90]
[59 88]
[60 87]
[62 86]
[63 85]
[64 84]
[65 83]
[96 130]
[97 129]
[98 128]
[99 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
