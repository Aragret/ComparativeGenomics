%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUAAACUGGGGGGGGGGCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGAxxxxxxxxxxUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUCCCCCCCCCCAAUUUAAACU\
) } def
/len { sequence length } bind def

/coor [
[93.54299164 348.34768677]
[79.05329895 344.13922119]
[66.14707184 336.32312012]
[55.70426941 325.43228149]
[48.43690491 312.20925903]
[44.84047699 297.55566406]
[45.16019821 282.47055054]
[49.37427139 267.98248291]
[57.19536591 255.07928467]
[68.09023285 244.64068604]
[81.31604767 237.37843323]
[95.97103882 233.78765869]
[96.28309631 218.79090881]
[96.59514618 203.79415894]
[96.90720367 188.79740906]
[97.21926117 173.80064392]
[97.53131866 158.80389404]
[97.84337616 143.80714417]
[98.15543365 128.81039429]
[98.46748352 113.81363678]
[90.06302643 118.87615967]
[78.22570801 118.79726410]
[65.84992981 112.00624084]
[51.20642471 108.75541687]
[36.56292343 105.50459290]
[30.87287903 119.42333221]
[22.91225624 132.18016052]
[12.91009998 143.40802002]
[1.15419209 152.78387451]
[-12.01722717 160.03794861]
[-26.22518921 164.96154785]
[-41.06090164 167.41300964]
[-56.09751129 167.32177734]
[-70.90238953 164.69050598]
[-85.04956818 159.59487915]
[-98.13199615 152.18150330]
[-109.77327728 142.66371155]
[-119.63846588 131.31530762]
[-127.44372559 118.46283722]
[-132.96446228 104.47608185]
[-136.04187012 89.75746918]
[-136.58737183 74.73047638]
[-134.58528137 59.82746887]
[-130.09320068 45.47723007]
[-123.24039459 32.09265137]
[-114.22402191 20.05882645]
[-103.30348969 9.72199726]
[-90.79301453 1.37957346]
[-77.05254364 -4.72841692]
[-62.47742462 -8.42623425]
[-47.48700714 -9.60748577]
[-32.51259613 -8.23818302]
[-17.98503304 -4.35772562]
[-4.32230759 1.92223954]
[8.08247662 10.42102528]
[18.87240791 20.89410400]
[27.73704147 33.04014206]
[34.42132187 46.50967789]
[38.73292923 60.91516495]
[40.54781342 75.84213257]
[39.81375122 90.86109161]
[54.45725250 94.11191559]
[69.10075378 97.36273956]
[74.95056152 92.66915894]
[65.56359863 80.96938324]
[77.26353455 71.58260345]
[86.65018463 83.28199768]
[92.50000000 78.58841705]
[92.50000000 63.58841705]
[92.50000000 48.58841705]
[79.15887451 40.97856140]
[71.42390442 27.70958328]
[71.37576294 12.35076714]
[79.02739716 -0.96644270]
[92.32055664 -8.65978241]
[107.67944336 -8.65978241]
[120.97260284 -0.96644270]
[128.62423706 12.35076714]
[128.57609558 27.70958328]
[120.84112549 40.97856140]
[107.50000000 48.58841705]
[107.50000000 63.58841705]
[107.50000000 78.58841705]
[119.29663849 87.85336304]
[133.86933899 84.29860687]
[148.44204712 80.74384308]
[163.01475525 77.18907928]
[177.58744812 73.63431549]
[180.30007935 56.37864685]
[194.88446045 42.74900818]
[217.25239563 40.62685394]
[228.55139160 30.76113129]
[239.85040283 20.89540863]
[242.36457825 5.05058432]
[256.39065552 -2.73717833]
[271.16897583 3.50622535]
[275.36294556 18.99139023]
[265.75524902 31.83942413]
[249.71612549 32.19441223]
[238.41711426 42.06013489]
[227.11811829 51.92586136]
[229.34652710 59.08715820]
[243.66912842 54.63034439]
[257.99179077 50.17376328]
[262.44812012 64.49651337]
[248.12593079 68.95294189]
[233.80334473 73.40975189]
[236.03175354 80.57105255]
[250.93365479 82.28374481]
[265.83554077 83.99643707]
[280.73745728 85.70912170]
[295.63934326 87.42181396]
[306.86785889 76.53811646]
[322.46890259 75.46982574]
[335.07617188 84.72135925]
[338.73687744 99.92442322]
[331.72256470 113.90059662]
[317.34518433 120.05075836]
[302.39324951 115.47098541]
[293.92666626 102.32371521]
[279.02478027 100.61102295]
[264.12286377 98.89833832]
[249.22096252 97.18564606]
[234.31906128 95.47295380]
[213.38783264 106.88604736]
[192.63146973 102.72122955]
[181.14221191 88.20702362]
[166.56950378 91.76177979]
[151.99681091 95.31654358]
[137.42410278 98.87130737]
[122.85140228 102.42607117]
[113.46424103 114.12569427]
[113.15218353 129.12245178]
[112.84012604 144.11920166]
[112.52806854 159.11595154]
[112.21601868 174.11270142]
[111.90396118 189.10946655]
[111.59190369 204.10621643]
[111.27984619 219.10296631]
[110.96778870 234.09971619]
[125.46072388 238.29701233]
[138.37298584 246.10314941]
[148.82420349 256.98593140]
[156.10177612 270.20330811]
[159.70950317 284.85412598]
[159.40144348 299.93948364]
[155.19856262 314.43078613]
[147.38742065 327.34002686]
[136.50062561 337.78704834]
[123.28042603 345.05950928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[23 63]
[24 62]
[25 61]
[68 83]
[69 82]
[70 81]
[84 131]
[85 130]
[86 129]
[87 128]
[88 127]
[91 101]
[92 100]
[93 99]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
