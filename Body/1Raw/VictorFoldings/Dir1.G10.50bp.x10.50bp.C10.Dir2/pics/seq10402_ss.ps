%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUUAACCGGGGGGGGGGUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCxxxxxxxxxxCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAACCCCCCCCCCACUAUUAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.75466919]
[71.19830322 375.73864746]
[59.48964310 366.20922852]
[50.78712082 353.87356567]
[45.73651886 339.64703369]
[44.71262741 324.58535767]
[47.79142761 309.80621338]
[54.74444962 296.40628052]
[65.05573273 285.37994385]
[77.96011353 277.54544067]
[92.50000000 273.48413086]
[92.50000000 258.48413086]
[92.50000000 243.48411560]
[92.50000000 228.48411560]
[92.50000000 213.48411560]
[92.50000000 198.48411560]
[92.50000000 183.48411560]
[92.50000000 168.48411560]
[92.50000000 153.48411560]
[92.50000000 138.48411560]
[92.50000000 123.48412323]
[81.40228271 117.93743134]
[73.97642517 107.28593445]
[72.47824097 93.80636597]
[77.81685638 80.71202850]
[89.20526886 71.38683319]
[74.43921661 68.74797058]
[59.67316055 66.10910797]
[44.90710449 63.47024155]
[30.14105034 60.83137894]
[15.37499428 58.19251251]
[0.60893875 55.55364990]
[6.57133865 69.31772614]
[-0.28338891 82.65986633]
[-14.94499302 85.82804871]
[-26.69702721 76.50658417]
[-26.94970512 61.50870895]
[-15.51897717 51.79683304]
[-29.93119240 47.63894653]
[-44.34341049 43.48105621]
[-56.50327682 53.12041473]
[-72.00806427 53.73779297]
[-84.89586639 45.09579086]
[-90.21105957 30.51743889]
[-85.90984344 15.60840988]
[-73.64612579 6.10152912]
[-58.13554764 5.65238714]
[-45.34225464 14.43368721]
[-40.18552017 29.06884193]
[-25.77330589 33.22673035]
[-11.36108971 37.38461685]
[3.24780297 40.78759384]
[18.01385880 43.42646027]
[32.77991486 46.06532288]
[47.54597092 48.70418549]
[62.31202698 51.34305191]
[77.07807922 53.98191452]
[91.84413910 56.62078094]
[104.70253754 48.89669418]
[109.30810547 34.62123489]
[113.91366577 20.34577370]
[118.51923370 6.07031298]
[105.04120636 -0.57503837]
[92.67443848 -9.11206532]
[81.68251801 -19.35880089]
[72.29974365 -31.09683418]
[64.72611237 -44.07596970]
[59.12305069 -58.01955414]
[55.60999298 -72.63037872]
[54.26181793 -87.59702301]
[55.10726547 -102.60045624]
[58.12830734 -117.32089233]
[63.26055908 -131.44454956]
[70.39461517 -144.67039490]
[79.37842560 -156.71652222]
[90.02049255 -167.32615662]
[102.09397888 -176.27314758]
[115.34154510 -183.36680603]
[129.48080444 -188.45591736]
[144.21038818 -191.43202209]
[159.21633911 -192.23165894]
[174.17878723 -190.83781433]
[188.77882385 -187.28016663]
[202.70524597 -181.63458252]
[215.66120911 -174.02136230]
[227.37054443 -164.60279846]
[237.58367920 -153.57965088]
[246.08291626 -141.18688965]
[252.68710327 -127.68863678]
[257.25546265 -113.37263489]
[259.69061279 -98.54401398]
[259.94064331 -83.51885986]
[258.00024414 -68.61742401]
[253.91078186 -54.15733719]
[247.75939941 -40.44681931]
[239.67723083 -27.77810287]
[229.83653259 -16.42122841]
[218.44706726 -6.61826801]
[205.75161743 1.42182946]
[192.02075195 7.52768803]
[177.54718018 11.56916142]
[162.63938904 13.46010494]
[147.61514282 13.16021252]
[132.79469299 10.67587757]
[128.18913269 24.95133781]
[123.58356476 39.22679901]
[118.97799683 53.50225830]
[126.70208740 66.36066437]
[141.46813965 68.99952698]
[135.50573730 55.23545074]
[142.36047363 41.89331055]
[157.02206421 38.72513199]
[168.77410889 48.04659271]
[169.02677917 63.04446411]
[157.59605408 72.75634003]
[172.00827026 76.91423035]
[186.42048645 81.07212067]
[201.10316467 74.60693359]
[215.24487305 82.18265533]
[217.99731445 97.98783112]
[207.24903870 109.89808655]
[191.24522400 108.77689362]
[182.26260376 95.48433685]
[167.85038757 91.32644653]
[153.43817139 87.16855621]
[138.82926941 83.76557922]
[124.06321716 81.12671661]
[128.59788513 99.34648132]
[121.68188477 115.45961761]
[107.50000000 123.48412323]
[107.50000000 138.48411560]
[107.50000000 153.48411560]
[107.50000000 168.48411560]
[107.50000000 183.48411560]
[107.50000000 198.48411560]
[107.50000000 213.48411560]
[107.50000000 228.48411560]
[107.50000000 243.48411560]
[107.50000000 258.48413086]
[107.50000000 273.48413086]
[122.03988647 277.54544067]
[134.94427490 285.37994385]
[145.25555420 296.40628052]
[152.20857239 309.80621338]
[155.28736877 324.58535767]
[154.26348877 339.64703369]
[149.21287537 353.87356567]
[140.51036072 366.20922852]
[128.80169678 375.73864746]
[114.95575714 381.75466919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[38 51]
[39 50]
[40 49]
[59 107]
[60 106]
[61 105]
[62 104]
[108 127]
[109 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
