%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCUGCACGGGGGGGGGGGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAxxxxxxxxxxUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCCCCCCCCCCCUACCUUCACG\
) } def
/len { sequence length } bind def

/coor [
[81.93881226 384.19912720]
[70.06211090 374.91433716]
[60.75307846 363.05664062]
[54.55292130 349.31539917]
[51.82211304 334.48953247]
[52.71942139 319.44100952]
[57.19267654 305.04470825]
[64.98180389 292.13763428]
[75.63396454 281.47015381]
[88.52984619 273.66250610]
[102.91970825 269.16854858]
[101.99629211 254.19700623]
[101.07288361 239.22546387]
[100.14946747 224.25390625]
[99.22605133 209.28236389]
[98.30264282 194.31080627]
[97.37922668 179.33926392]
[96.45581055 164.36770630]
[87.94968414 152.14089966]
[94.82276154 137.89057922]
[93.89934540 122.91902924]
[92.97592926 107.94747925]
[91.28553772 93.04303741]
[88.83260345 78.24495697]
[78.94274139 65.89582062]
[84.49461365 52.07460785]
[79.97861481 44.06202316]
[82.14649200 36.94777679]
[79.99791718 22.10245323]
[77.84933472 7.25713110]
[75.70075989 -7.58819151]
[73.55217743 -22.43351364]
[71.40359497 -37.27883530]
[56.42884445 -36.28632736]
[41.42221069 -36.45724106]
[26.47394562 -37.79055023]
[11.67395306 -40.27822876]
[-2.88875556 -43.90532684]
[-17.12659836 -48.65002060]
[-30.95394707 -54.48377991]
[-44.28763962 -61.37151718]
[-57.04748917 -69.27181244]
[-69.15674591 -78.13714600]
[-80.54259491 -87.91419983]
[-91.13655090 -98.54418182]
[-100.87490082 -109.96315002]
[-109.69907379 -122.10243225]
[-117.55600739 -134.88902283]
[-124.39844513 -148.24601746]
[-130.18524170 -162.09309387]
[-134.88157654 -176.34695435]
[-138.45921326 -190.92189026]
[-140.89663696 -205.73023987]
[-142.17919922 -220.68295288]
[-142.29917908 -235.69007874]
[-141.25584412 -250.66137695]
[-139.05546570 -265.50680542]
[-135.71130371 -280.13708496]
[-131.24345398 -294.46420288]
[-125.67878723 -308.40203857]
[-119.05077362 -321.86669922]
[-111.39926910 -334.77728271]
[-102.77029419 -347.05609131]
[-93.21575165 -358.62930298]
[-82.79309845 -369.42727661]
[-71.56502533 -379.38513184]
[-59.59904480 -388.44293213]
[-46.96713638 -396.54620361]
[-33.74526596 -403.64624023]
[-20.01295090 -409.70031738]
[-5.85278463 -414.67202759]
[8.65007496 -418.53149414]
[23.40840340 -421.25546265]
[38.33343887 -422.82760620]
[53.33542633 -423.23840332]
[68.32413483 -422.48544312]
[83.20941925 -420.57321167]
[97.90175629 -417.51324463]
[112.31278992 -413.32391357]
[126.35584259 -408.03042603]
[139.94645691 -401.66461182]
[153.00289917 -394.26477051]
[165.44665527 -385.87539673]
[177.20286560 -376.54696655]
[188.20083618 -366.33554077]
[198.37442017 -355.30258179]
[207.66242981 -343.51440430]
[216.00901794 -331.04193115]
[223.36398315 -317.96014404]
[229.68307495 -304.34774780]
[234.92831421 -290.28662109]
[239.06813049 -275.86126709]
[242.07763672 -261.15850830]
[243.93873596 -246.26675415]
[244.64022827 -231.27554321]
[244.17791748 -216.27505493]
[242.55455017 -201.35551453]
[239.77990723 -186.60662842]
[235.87066650 -172.11709595]
[230.85035706 -157.97409058]
[224.74916077 -144.26264954]
[217.60375977 -131.06523132]
[209.45715332 -118.46122742]
[200.35832214 -106.52642059]
[190.36198425 -95.33260345]
[179.52825928 -84.94709015]
[167.92231750 -75.43234253]
[155.61395264 -66.84558868]
[142.67718506 -59.23846436]
[129.18981934 -52.65672684]
[115.23297882 -47.13994980]
[100.89058685 -42.72132492]
[86.24892426 -39.42741776]
[88.39749908 -24.58209419]
[90.54608154 -9.73677063]
[92.69465637 5.10855198]
[94.84323883 19.95387459]
[96.99181366 34.79919815]
[99.29269409 49.62168121]
[109.00711060 60.91235352]
[103.63068390 75.79203033]
[106.08361053 90.59010315]
[117.04834747 80.35415649]
[131.91680908 82.33630371]
[139.81710815 95.08718872]
[134.97253418 109.28331757]
[120.92544556 114.54441833]
[107.94747925 107.02407074]
[108.87089539 121.99562073]
[109.79431152 136.96716309]
[118.36648560 150.26484680]
[111.42736053 163.44430542]
[112.35077667 178.41584778]
[113.27419281 193.38740540]
[114.19760132 208.35894775]
[115.12101746 223.33050537]
[116.04443359 238.30204773]
[116.96784210 253.27360535]
[117.89125824 268.24514771]
[132.72430420 270.93667603]
[146.48190308 277.10040283]
[158.36424255 286.37799072]
[167.68046570 298.23007202]
[173.88894653 311.96752930]
[176.62873840 326.79174805]
[175.74055481 341.84082031]
[171.27603149 356.23980713]
[163.49472046 369.15161133]
[152.84904480 379.82556152]
[139.95788574 387.64102173]
[125.57075500 392.14367676]
[110.52409363 393.07171631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[20 130]
[21 129]
[22 128]
[23 122]
[24 121]
[26 119]
[28 118]
[29 117]
[30 116]
[31 115]
[32 114]
[33 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
