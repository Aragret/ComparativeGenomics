%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCCACCAAGGGGGGGGGGUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCxxxxxxxxxxGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACCCCCCCCCCCUGGCCCCCAA\
) } def
/len { sequence length } bind def

/coor [
[85.60339355 426.59466553]
[72.38319397 419.32220459]
[61.49639130 408.87518311]
[53.68526459 395.96594238]
[49.48237991 381.47463989]
[49.17430878 366.38928223]
[52.78205109 351.73846436]
[60.05962372 338.52108765]
[70.51083374 327.63830566]
[83.42309570 319.83215332]
[97.91603088 315.63488770]
[97.60397339 300.63812256]
[97.29191589 285.64135742]
[96.97985840 270.64462280]
[96.66780090 255.64785767]
[96.35575104 240.65110779]
[96.04369354 225.65435791]
[95.73163605 210.65759277]
[95.41957855 195.66084290]
[95.10752106 180.66409302]
[94.79546356 165.66734314]
[94.48341370 150.67057800]
[82.59103394 141.52885437]
[68.01832581 145.08361816]
[53.44562531 148.63836670]
[38.87292099 152.19313049]
[24.30022049 155.74789429]
[19.37013626 170.36630249]
[7.30512571 179.98081970]
[-8.04491329 181.52349854]
[-21.78183746 174.50207520]
[-29.52224541 161.15705872]
[-28.79619980 145.74678040]
[-19.83538055 133.18862915]
[-5.49915123 127.48985291]
[9.63784885 130.46890259]
[20.74545860 141.17520142]
[35.31816101 137.62043762]
[49.89086533 134.06567383]
[64.46356964 130.51091003]
[79.03627014 126.95614624]
[71.91893005 117.01116180]
[68.99131012 105.62742615]
[70.32013702 94.42685699]
[75.38877106 84.88522339]
[83.21038055 78.13772583]
[92.50000000 74.84550476]
[92.50000000 59.84550476]
[92.50000000 44.84550476]
[89.35433197 36.19931412]
[92.65928650 29.53426170]
[92.97133636 14.53750801]
[93.28339386 -0.45924556]
[93.43943024 -15.45843410]
[93.43943024 -30.45843315]
[93.43943024 -45.45843506]
[78.81486511 -49.09267044]
[65.49319458 -56.11729813]
[54.24676132 -66.12014008]
[45.72642136 -78.51651764]
[40.42387009 -92.58336639]
[38.64327240 -107.50148773]
[40.48382568 -122.40318298]
[45.83422470 -136.42279053]
[54.37940598 -148.74690247]
[65.61908722 -158.66160583]
[78.89704132 -165.59385681]
[93.43943024 -169.14451599]
[93.43943024 -184.14451599]
[93.43943024 -199.14451599]
[80.09830475 -206.75436401]
[72.36333466 -220.02334595]
[72.31519318 -235.38215637]
[79.96682739 -248.69937134]
[93.25998688 -256.39270020]
[108.61888123 -256.39270020]
[121.91204071 -248.69937134]
[129.56367493 -235.38215637]
[129.51553345 -220.02334595]
[121.78056335 -206.75436401]
[108.43943024 -199.14451599]
[108.43943024 -184.14451599]
[108.43943024 -169.14451599]
[122.98182678 -165.59385681]
[136.25978088 -158.66160583]
[147.49945068 -148.74690247]
[156.04463196 -136.42279053]
[161.39503479 -122.40318298]
[163.23559570 -107.50148773]
[161.45498657 -92.58336639]
[156.15243530 -78.51651764]
[147.63209534 -66.12014008]
[136.38566589 -56.11729813]
[123.06399536 -49.09267044]
[108.43943024 -45.45843506]
[108.43943024 -30.45843315]
[108.43943024 -15.45843410]
[111.60501099 -8.72606754]
[108.28015137 -0.14718933]
[107.96809387 14.84956455]
[107.65603638 29.84631729]
[107.50000000 44.84550476]
[107.50000000 59.84550476]
[107.50000000 74.84550476]
[129.47952271 93.44926453]
[122.69826508 125.51275635]
[137.56130981 127.53508759]
[152.42436218 129.55741882]
[167.28739929 131.57975769]
[176.27876282 129.62850952]
[182.43737793 133.80187988]
[197.25514221 136.13298035]
[207.43434143 124.54043579]
[222.27133179 120.31342316]
[237.03164673 124.80078125]
[247.00535583 136.57060242]
[249.00985718 151.86718750]
[242.40554810 165.80944824]
[229.29981995 173.94845581]
[213.87467957 173.68708801]
[201.05221558 165.10874939]
[194.92404175 150.95074463]
[180.10627747 148.61964417]
[165.26507568 146.44281006]
[150.40202332 144.42047119]
[135.53897095 142.39813232]
[120.67593384 140.37580872]
[109.48016357 150.35852051]
[109.79222107 165.35528564]
[110.10427856 180.35203552]
[110.41633606 195.34878540]
[110.72838593 210.34553528]
[111.04044342 225.34230042]
[111.35250092 240.33905029]
[111.66455841 255.33580017]
[111.97661591 270.33255005]
[112.28867340 285.32931519]
[112.60072327 300.32604980]
[112.91278076 315.32281494]
[127.56777191 318.91357422]
[140.79357910 326.17584229]
[151.68844604 336.61444092]
[159.50955200 349.51763916]
[163.72361755 364.00570679]
[164.04333496 379.09082031]
[160.44691467 393.74441528]
[153.17955017 406.96740723]
[142.73675537 417.85824585]
[129.83052063 425.67437744]
[115.34082794 429.88284302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[47 104]
[48 103]
[49 102]
[51 101]
[52 100]
[53 99]
[54 97]
[55 96]
[56 95]
[68 83]
[69 82]
[70 81]
[106 127]
[107 126]
[108 125]
[109 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
