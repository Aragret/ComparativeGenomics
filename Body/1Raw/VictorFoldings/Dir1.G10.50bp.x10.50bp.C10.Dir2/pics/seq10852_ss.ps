%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCCUAGCAGGGGGGGGGGGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[145.04022217 426.08044434]
[131.59756470 419.30697632]
[119.79377747 409.96588135]
[110.11222839 398.43972778]
[102.94936371 385.20046997]
[98.59850311 370.79022217]
[97.23780823 355.79910278]
[98.92300415 340.84100342]
[103.58506775 326.52841187]
[111.03311157 313.44744873]
[120.96212769 302.13375854]
[132.96553040 293.05065918]
[146.55178833 286.57003784]
[161.16456604 282.95730591]
[160.56442261 267.96932983]
[159.96427917 252.98133850]
[159.36413574 237.99334717]
[158.76399231 223.00535583]
[158.16384888 208.01736450]
[157.56370544 193.02937317]
[156.96356201 178.04138184]
[154.42454529 163.25782776]
[149.98956299 148.92846680]
[145.55458069 134.59909058]
[141.11959839 120.26971436]
[136.68461609 105.94034576]
[124.32262421 125.11113739]
[104.20208740 132.48567200]
[85.02667999 126.63270569]
[74.08852386 111.50341034]
[59.25712967 113.74611664]
[44.42573547 115.98881531]
[35.24979782 128.85652161]
[19.64900780 131.38455200]
[6.87904072 122.07308197]
[4.51608849 106.44643402]
[13.96204948 93.77562714]
[29.61280251 91.57802582]
[42.18303299 101.15741730]
[57.01443100 98.91471863]
[71.84582520 96.67201996]
[74.15018463 83.71231842]
[82.49066162 72.31607056]
[95.83699036 65.28936005]
[111.87426758 64.78565216]
[107.43928528 50.45627975]
[103.00429535 36.12690735]
[98.56931305 21.79753304]
[94.13433075 7.46816111]
[79.30291748 9.87133217]
[64.28137970 10.18690300]
[49.36212158 8.40873337]
[34.83555222 4.57143497]
[20.98443031 -1.25029886]
[8.07837486 -8.94314575]
[-3.63139272 -18.35736275]
[-13.91693974 -29.30969810]
[-22.57805443 -41.58695984]
[-29.44614792 -54.95017242]
[-34.38752747 -69.13921356]
[-37.30601120 -83.87789154]
[-38.14478683 -98.87931061]
[-36.88752747 -113.85146332]
[-33.55870819 -128.50291443]
[-28.22312355 -142.54847717]
[-20.98463249 -155.71473694]
[-11.98413563 -167.74540710]
[-1.39682996 -178.40632629]
[10.57120037 -187.48995972]
[23.68699265 -194.81950378]
[37.69524765 -200.25225830]
[52.32328415 -203.68251038]
[67.28636932 -205.04347229]
[82.29324341 -204.30865479]
[97.05178833 -201.49235535]
[111.27471924 -196.64939880]
[124.68519592 -189.87405396]
[137.02217102 -181.29821777]
[148.04550171 -171.08879089]
[157.54061890 -159.44453430]
[165.32270813 -146.59208679]
[171.24026489 -132.78163147]
[175.17811584 -118.28199005]
[177.05960083 -103.37541199]
[176.84811401 -88.35205078]
[174.54776001 -73.50434113]
[170.20332336 -59.12129974]
[163.89935303 -45.48289108]
[155.75856018 -32.85459900]
[145.93943787 -21.48223114]
[134.63307190 -11.58715725]
[122.05958557 -3.36198545]
[108.46370697 3.03317761]
[112.89868927 17.36255074]
[117.33367157 31.69192314]
[121.76865387 46.02129364]
[126.20363617 60.35066986]
[132.88958740 63.74890900]
[132.08947754 48.77026367]
[144.66125488 40.58794022]
[158.03327942 47.38417816]
[158.83367920 62.36280823]
[146.26148987 70.54539490]
[152.94744873 73.94363403]
[167.13726807 69.08061218]
[181.32708740 64.21759033]
[195.51690674 59.35457230]
[205.87988281 46.64469528]
[222.02301025 49.53109741]
[227.33963013 65.04449463]
[216.36047363 77.22603607]
[200.37992859 73.54439545]
[186.19010925 78.40740967]
[172.00028992 83.27043152]
[157.81047058 88.13345337]
[151.01399231 101.50535583]
[155.44897461 115.83473206]
[159.88395691 130.16410828]
[164.31893921 144.49346924]
[168.75392151 158.82284546]
[173.12963867 144.47526550]
[182.88020325 133.07673645]
[196.37680054 126.53136444]
[211.36483765 125.93254089]
[225.34060669 131.38031006]
[235.96945190 141.96461487]
[241.47586060 155.91737366]
[240.93998718 170.90779114]
[234.45135498 184.43176270]
[223.09387207 194.23011780]
[208.76478577 198.66604614]
[193.85777283 196.99855042]
[180.86299133 189.50616455]
[171.95155334 177.44123840]
[172.55169678 192.42922974]
[173.15184021 207.41722107]
[173.75198364 222.40521240]
[174.35212708 237.39320374]
[174.95227051 252.38119507]
[175.55241394 267.36917114]
[176.15255737 282.35717773]
[191.00740051 284.78994751]
[205.06832886 290.16354370]
[217.75953674 298.25784302]
[228.56135559 308.74142456]
[237.03144836 321.18499756]
[242.82295227 335.07901001]
[245.69873047 349.85449219]
[245.54100037 364.90640259]
[242.35624695 379.61837769]
[236.27485657 393.38796997]
[227.54588318 405.65133667]
[216.52676392 415.90625000]
[203.66871643 423.73284912]
[189.49827576 428.81060791]
[174.59571838 430.93157959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[30 41]
[31 40]
[32 39]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
