%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCCCUGGGGGGGGGGGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGxxxxxxxxxxUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCCCCCCCCCCCAUCGCUG\
) } def
/len { sequence length } bind def

/coor [
[63.81525421 391.25469971]
[53.27133942 380.47152710]
[45.74106216 367.40457153]
[41.69778061 352.87518311]
[41.39565277 337.79672241]
[44.85367966 323.11706543]
[51.85448074 309.75894165]
[61.95798111 298.56204224]
[74.52906799 290.23028564]
[88.77751160 285.28732300]
[87.53063965 270.33923340]
[86.28376007 255.39115906]
[85.03688812 240.44306946]
[83.79001617 225.49497986]
[82.54313660 210.54689026]
[81.29626465 195.59880066]
[80.04939270 180.65072632]
[78.80251312 165.70263672]
[65.94411469 157.97854614]
[52.16173172 163.89851379]
[38.37934875 169.81848145]
[24.59696770 175.73843384]
[10.81458664 181.65840149]
[-2.96779442 187.57836914]
[-16.75017548 193.49832153]
[-24.00787163 207.80586243]
[-39.74757004 210.91091919]
[-51.89512253 200.43157959]
[-51.13196564 184.40669250]
[-38.04352570 175.12916565]
[-22.67013931 179.71594238]
[-8.88775730 173.79597473]
[4.89462423 167.87602234]
[18.67700577 161.95605469]
[32.45938492 156.03608704]
[46.24176788 150.11613464]
[60.02415085 144.19616699]
[59.40017319 129.20915222]
[45.17339325 124.45533752]
[30.94661331 119.70152283]
[19.50094986 129.94322205]
[4.46458626 133.07424927]
[-10.11777115 128.25238037]
[-20.32353973 116.77466583]
[-23.40742111 101.72856140]
[-18.53986740 87.16139221]
[-7.03022242 76.99164581]
[8.02547455 73.95494080]
[22.57731628 78.86813354]
[32.71093369 90.40959930]
[35.70042801 105.47473907]
[49.92720795 110.22855377]
[64.15398407 114.98236847]
[62.75661087 101.76054382]
[65.89154816 89.39575958]
[72.81332397 79.32891846]
[82.35899353 72.60142517]
[93.12782288 69.75031281]
[93.43987274 54.75355911]
[93.75193024 39.75680542]
[93.90796661 24.75761604]
[93.90796661 9.75761700]
[93.90796661 -5.24238300]
[93.90796661 -20.24238396]
[93.90796661 -35.24238205]
[90.89105225 -41.24285889]
[91.33901978 -46.99008942]
[94.23300934 -50.86311340]
[94.85698700 -65.85012817]
[95.48096466 -80.83714294]
[81.99256897 -87.98039246]
[72.94619751 -100.27371979]
[70.13800812 -115.27627563]
[74.12557220 -130.00930786]
[84.11716461 -141.54754639]
[98.12893677 -147.60006714]
[113.37883759 -146.96514893]
[126.83900452 -139.76884460]
[135.83689880 -127.43997955]
[138.58598328 -112.42647552]
[134.54042053 -97.70926666]
[124.50347900 -86.21047211]
[110.46797943 -80.21316528]
[109.84400177 -65.22615051]
[109.22002411 -50.23913574]
[108.90796661 -35.24238205]
[108.90796661 -20.24238396]
[108.90796661 -5.24238300]
[108.90796661 9.75761700]
[108.90796661 24.75761604]
[112.07354736 31.48998260]
[108.74868774 40.06886292]
[108.43663025 55.06561661]
[108.12457275 70.06237030]
[121.43350220 75.80188751]
[131.15592957 87.33779144]
[134.84053040 102.57810211]
[131.19999695 118.43806458]
[120.48688507 131.46409607]
[104.54585266 138.58424377]
[119.53854370 139.05227661]
[134.53123474 139.52032471]
[144.48695374 131.25364685]
[157.00401306 131.98983765]
[165.36766052 140.78511047]
[180.34736633 141.56495667]
[195.32708740 142.34480286]
[201.83488464 128.60737610]
[213.10775757 118.40978241]
[227.42665100 113.30708313]
[242.60806274 114.07740784]
[256.33691406 120.60327911]
[266.51968384 131.88955688]
[271.60351562 146.21514893]
[270.81323242 161.39553833]
[264.26931763 175.11578369]
[252.96965027 185.28369141]
[238.63737488 190.34869385]
[223.45805359 189.53843689]
[209.74641418 182.97647095]
[199.59338379 171.66343689]
[194.54724121 157.32450867]
[179.56752014 156.54466248]
[164.58781433 155.76481628]
[149.44575500 164.58062744]
[134.06320190 154.51301575]
[119.07050323 154.04498291]
[104.07780457 153.57693481]
[93.75060272 164.45576477]
[94.99747467 179.40383911]
[96.24435425 194.35192871]
[97.49122620 209.30001831]
[98.73809814 224.24810791]
[99.98497772 239.19619751]
[101.23184967 254.14428711]
[102.47872162 269.09237671]
[103.72560120 284.04046631]
[118.59605408 286.55447388]
[132.37377930 292.68841553]
[144.19268799 302.05667114]
[153.30984497 314.07034302]
[159.15213013 327.97424316]
[161.35229492 342.89434814]
[159.77203369 357.89282227]
[154.51069641 372.02679443]
[145.89898682 384.40780640]
[134.47827148 394.25756836]
[120.96644592 400.95690918]
[106.21288300 404.08474731]
[91.14501190 403.44442749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[38 53]
[39 52]
[40 51]
[58 94]
[59 93]
[60 92]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[68 85]
[69 84]
[70 83]
[100 128]
[101 127]
[102 126]
[105 124]
[106 123]
[107 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
