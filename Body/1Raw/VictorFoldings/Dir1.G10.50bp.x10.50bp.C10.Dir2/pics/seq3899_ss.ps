%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCUUAUCGGGGGGGGGGACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUxxxxxxxxxxUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCCCCCCCCCCCACACUUAUC\
) } def
/len { sequence length } bind def

/coor [
[87.85016632 534.53027344]
[73.82822418 528.97729492]
[61.62826157 520.11096191]
[52.01719284 508.48861694]
[45.59916687 494.84094238]
[42.77762985 480.02575684]
[43.72994614 464.97436523]
[48.39625168 450.63293457]
[56.48321915 437.90298462]
[67.48249054 427.58471680]
[80.70265198 420.32675171]
[95.31266022 416.58529663]
[95.31266022 401.58529663]
[95.31266022 386.58529663]
[95.31266022 371.58529663]
[95.31266022 356.58529663]
[95.31266022 341.58529663]
[95.31266022 326.58529663]
[95.31266022 311.58529663]
[95.31266022 296.58529663]
[95.31266022 281.58529663]
[80.47568512 276.40237427]
[68.28270721 266.44384766]
[60.21370316 252.89482117]
[57.25614166 237.37763977]
[59.78418350 221.75758362]
[67.51144409 207.91870117]
[79.52330780 197.53651428]
[94.38518524 191.87519836]
[94.07720947 176.87837219]
[93.76922607 161.88153076]
[93.46125031 146.88468933]
[77.87345886 141.84907532]
[64.93518066 131.80232239]
[56.19567871 117.94744873]
[52.70145798 101.94348145]
[54.87092209 85.70679474]
[62.44429779 71.18163300]
[74.51471710 60.10727310]
[89.63683319 53.80980682]
[88.71341705 38.83825684]
[87.79000854 23.86670494]
[86.86659241 8.89515591]
[85.94317627 -6.07639408]
[85.01976776 -21.04794502]
[72.09433746 -29.42884445]
[66.64594269 -43.64743805]
[70.56830597 -58.17599869]
[82.15486145 -67.49746704]
[81.23144531 -82.46901703]
[80.30802917 -97.44056702]
[72.60643005 -84.56868744]
[60.39977646 -75.85102081]
[45.72539139 -72.74257660]
[31.03246307 -75.76214600]
[18.77326965 -84.40576935]
[10.99390030 -97.23079681]
[8.99274826 -112.09671021]
[13.10380936 -126.52235413]
[22.64093971 -138.10005188]
[36.01237106 -144.89747620]
[50.98638153 -145.78009033]
[65.06377411 -140.60061646]
[75.89500427 -130.22351074]
[81.67175293 -116.38365173]
[84.73014832 -131.06855774]
[87.78854370 -145.75344849]
[90.84693909 -160.43835449]
[77.14906311 -166.70858765]
[65.19019318 -175.87010193]
[55.57019424 -187.46334839]
[48.77159119 -200.90679932]
[45.13539886 -215.52616882]
[44.84400940 -230.58813477]
[47.91204071 -245.33720398]
[54.18560028 -259.03356934]
[63.35000992 -270.99020386]
[74.94557953 -280.60739136]
[88.39069366 -287.40274048]
[103.01094055 -291.03540039]
[118.07297516 -291.32312012]
[132.82128906 -288.25152588]
[146.51612854 -281.97463989]
[158.47055054 -272.80734253]
[168.08494568 -261.20944214]
[174.87702942 -247.76268005]
[178.50613403 -233.14155579]
[178.79022217 -218.07945251]
[175.71504211 -203.33187866]
[169.43484497 -189.63856506]
[160.26464844 -177.68635559]
[148.66441345 -168.07478333]
[135.21601868 -161.28594971]
[120.59400940 -157.66038513]
[105.53183746 -157.37995911]
[102.47344208 -142.69505310]
[99.41504669 -128.01016235]
[96.35665131 -113.32525635]
[95.27957916 -98.36397552]
[96.20299530 -83.39242554]
[97.12641144 -68.42087555]
[109.77064514 -60.59391785]
[115.44866180 -46.65748596]
[111.78886414 -31.87711906]
[99.99131775 -21.97135735]
[100.91472626 -6.99980783]
[101.83814240 7.97174215]
[102.76155853 22.94329262]
[103.68496704 37.91484070]
[104.60838318 52.88639069]
[117.73227692 56.10813904]
[129.41114807 62.90668869]
[138.69326782 72.72802734]
[144.82221985 84.77178955]
[147.29853821 98.05651855]
[145.92045593 111.49962616]
[140.80024719 124.00561523]
[132.35516357 134.55535889]
[121.27342987 142.28912354]
[108.45809174 146.57670593]
[108.76606750 161.57354736]
[109.07404327 176.57038879]
[109.38201904 191.56723022]
[123.07566071 195.88937378]
[134.74227905 204.22424316]
[143.24441528 215.74282837]
[147.75817871 229.30659485]
[147.85311890 243.57986450]
[143.53320312 257.16149902]
[135.23516846 268.72235107]
[123.78435516 277.13531494]
[110.31266022 281.58529663]
[110.31266022 296.58529663]
[110.31266022 311.58529663]
[110.31266022 326.58529663]
[110.31266022 341.58529663]
[110.31266022 356.58529663]
[110.31266022 371.58529663]
[110.31266022 386.58529663]
[110.31266022 401.58529663]
[110.31266022 416.58529663]
[124.92267609 420.32675171]
[138.14283752 427.58471680]
[149.14210510 437.90298462]
[157.22908020 450.63293457]
[161.89538574 464.97436523]
[162.84770203 480.02575684]
[160.02615356 494.84094238]
[153.60813904 508.48861694]
[143.99707031 520.11096191]
[131.79710388 528.97729492]
[117.77516174 534.53027344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[29 123]
[30 122]
[31 121]
[32 120]
[40 110]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[49 101]
[50 100]
[51 99]
[65 98]
[66 97]
[67 96]
[68 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
