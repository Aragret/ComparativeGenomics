%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGCCACCAGGGGGGGGGGAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUxxxxxxxxxxGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCCCCCCCCCCCUUGACCACCA\
) } def
/len { sequence length } bind def

/coor [
[105.85470581 406.92745972]
[93.97043610 397.65234375]
[84.65172577 385.80224609]
[78.44036102 372.06607056]
[75.69745636 357.24246216]
[76.58248901 342.19320679]
[81.04399109 327.79324341]
[88.82259369 314.87982178]
[99.46604156 304.20364380]
[112.35555267 296.38546753]
[126.74173737 291.87979126]
[125.80611420 276.90899658]
[124.87048340 261.93820190]
[123.93485260 246.96742249]
[122.99922943 231.99662781]
[122.06359863 217.02584839]
[121.12796783 202.05505371]
[120.19234467 187.08425903]
[119.25671387 172.11346436]
[118.32108307 157.14266968]
[117.38545227 142.17189026]
[89.15395355 138.31086731]
[72.47230530 119.98660278]
[58.68992233 125.90656281]
[44.90753937 131.82652283]
[37.64984512 146.13406372]
[21.91014481 149.23912048]
[9.76259232 138.75978088]
[10.52575016 122.73489380]
[23.61418724 113.45737457]
[38.98757553 118.04414368]
[52.76995850 112.12418365]
[66.55233765 106.20421600]
[68.47066498 87.22739410]
[80.30083466 72.26588440]
[74.52456665 58.42266464]
[68.74829102 44.57944489]
[62.97201920 30.73622894]
[57.19574738 16.89301109]
[44.50119019 16.35085487]
[33.02438736 11.05650616]
[24.46358299 1.84942341]
[20.06418228 -9.85623837]
[20.43771744 -22.28870392]
[6.91352797 -28.77686882]
[-6.61066198 -35.26503372]
[-22.91197395 -33.47639465]
[-32.39214706 -46.85766220]
[-25.29878616 -61.64334106]
[-8.92893887 -62.62319183]
[-0.12249698 -48.78922272]
[13.40169334 -42.30105972]
[26.92588234 -35.81289291]
[32.77597046 -41.38336945]
[39.83306122 -45.31415939]
[37.65622711 -60.15536499]
[35.47938919 -74.99656677]
[20.45085335 -75.84980011]
[5.90179586 -79.71112823]
[-7.57200766 -86.42242432]
[-19.41881561 -95.70886993]
[-29.15350533 -107.19018555]
[-36.37744904 -120.39622498]
[-40.79483414 -134.78620911]
[-42.22476578 -149.77087402]
[-40.60869217 -164.73660278]
[-36.01279068 -179.07057190]
[-28.62525940 -192.18580627]
[-18.74861526 -203.54524231]
[-6.78729773 -212.68371582]
[6.76888323 -219.22702026]
[21.36481094 -222.90721130]
[36.40279007 -223.57357788]
[51.26702881 -221.19885254]
[65.34883881 -215.88024902]
[78.07158661 -207.83558655]
[88.91427612 -197.39427185]
[97.43291473 -184.98388672]
[103.27865601 -171.11262512]
[106.21213531 -156.34848022]
[106.11322021 -141.29608154]
[102.98596954 -126.57176971]
[96.95842743 -112.77852631]
[88.27743530 -100.48116302]
[77.29845428 -90.18325043]
[64.47108459 -82.30648041]
[50.32059479 -77.17340851]
[52.49743271 -62.33219910]
[54.67426682 -47.49099350]
[72.48845673 -40.31287766]
[83.10438538 -24.15258598]
[82.61174011 -4.69427729]
[71.03896332 11.11673927]
[76.81523895 24.95995712]
[82.59150696 38.80317307]
[88.36778259 52.64639282]
[94.14405060 66.48960876]
[101.29590607 64.34866333]
[109.07926941 63.78934097]
[117.13409424 64.97850800]
[125.05930328 67.99937439]
[132.43247986 72.84197998]
[138.83164978 79.39826965]
[143.85804749 87.46232605]
[158.43075562 83.90756226]
[169.90475464 72.19094086]
[185.71919250 76.53092957]
[189.60552979 92.46292114]
[177.56584167 103.59745026]
[161.98551941 98.48026276]
[147.41281128 102.03502655]
[147.41281128 117.03502655]
[161.98551941 120.58979034]
[176.55821228 124.14455414]
[191.13092041 127.69931030]
[205.70362854 131.25407410]
[220.10464478 124.18370819]
[234.54925537 131.16459656]
[237.95678711 146.84159851]
[227.71327209 159.18865967]
[211.67665100 158.73416138]
[202.14886475 145.82678223]
[187.57615662 142.27201843]
[173.00346375 138.71725464]
[158.43075562 135.16249084]
[143.85804749 131.60772705]
[132.35624695 141.23625183]
[133.29187012 156.20704651]
[134.22750854 171.17784119]
[135.16313171 186.14863586]
[136.09875488 201.11941528]
[137.03439331 216.09020996]
[137.97001648 231.06100464]
[138.90563965 246.03179932]
[139.84127808 261.00259399]
[140.77690125 275.97338867]
[141.71252441 290.94418335]
[156.54776001 293.62359619]
[170.31039429 299.77609253]
[182.20028687 309.04400635]
[191.52618408 320.88845825]
[197.74588013 334.62084961]
[200.49775696 349.44281006]
[199.62185669 364.49261475]
[195.16908264 378.89526367]
[187.39831543 391.81341553]
[176.76133728 402.49600220]
[163.87657166 410.32202148]
[149.49311829 414.83639526]
[134.44721985 415.77673340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[23 33]
[24 32]
[25 31]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[44 53]
[45 52]
[46 51]
[55 89]
[56 88]
[57 87]
[104 111]
[105 110]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
