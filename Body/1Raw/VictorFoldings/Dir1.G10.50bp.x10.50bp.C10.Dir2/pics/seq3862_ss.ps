%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACUAAUAAGUGGGGGGGGGGGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUGAUUxxxxxxxxxxAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUCCCCCCCCCCACUACUAAUAAUU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 381.68283081]
[70.75619507 376.87338257]
[57.85220718 369.10800171]
[46.91955185 358.74984741]
[38.46956635 346.28341675]
[32.89747238 332.29177856]
[30.46388245 317.42935181]
[31.28262329 302.39129639]
[35.31539917 287.88092041]
[42.37359238 274.57693481]
[52.12707901 263.10159302]
[64.11966705 253.99159241]
[77.79044342 247.67306519]
[92.50000000 244.44149780]
[92.50000000 229.44149780]
[92.50000000 214.44149780]
[92.50000000 199.44149780]
[92.50000000 184.44149780]
[92.50000000 169.44149780]
[92.50000000 154.44149780]
[92.50000000 139.44149780]
[92.50000000 124.44149780]
[92.50000000 109.44149780]
[92.19986725 94.44450378]
[91.59972382 79.45651245]
[90.99958038 64.46852112]
[90.39943695 49.48053360]
[75.39813995 49.15690613]
[60.44521713 47.91039658]
[45.59739304 45.74573135]
[30.91098976 42.67112732]
[16.44171906 38.69823837]
[2.24446535 33.84214401]
[-11.62691307 28.12126160]
[-25.11979866 21.55729294]
[-38.18300629 14.17513561]
[-50.76698303 6.00279570]
[-62.82399750 -2.92872787]
[-74.30830383 -12.58555412]
[-85.17634583 -22.93105125]
[-95.38689423 -33.92597580]
[-104.90122223 -45.52861786]
[-113.68322754 -57.69496536]
[-121.69960022 -70.37886810]
[-128.91993713 -83.53220367]
[-135.31684875 -97.10509491]
[-140.86605835 -111.04603577]
[-145.54652405 -125.30215454]
[-149.34049988 -139.81936646]
[-152.23356628 -154.54260254]
[-154.21478271 -169.41601562]
[-155.27661133 -184.38319397]
[-155.41502380 -199.38732910]
[-154.62951660 -214.37155151]
[-152.92304993 -229.27897644]
[-150.30209351 -244.05308533]
[-146.77661133 -258.63781738]
[-142.35995483 -272.97787476]
[-137.06887817 -287.01882935]
[-130.92347717 -300.70742798]
[-123.94703674 -313.99172974]
[-116.16603851 -326.82138062]
[-107.60998535 -339.14767456]
[-98.31134033 -350.92385864]
[-88.30538177 -362.10528564]
[-77.63005066 -372.64953613]
[-66.32585907 -382.51660156]
[-54.43568420 -391.66903687]
[-42.00461960 -400.07217407]
[-29.07983208 -407.69406128]
[-15.71034336 -414.50585938]
[-1.94687223 -420.48168945]
[12.15837288 -425.59887695]
[26.55188370 -429.83804321]
[41.17906189 -433.18307495]
[55.98442459 -435.62130737]
[70.91180420 -437.14346313]
[85.90457916 -437.74380493]
[100.90586853 -437.42004395]
[115.85877991 -436.17337036]
[130.70658875 -434.00857544]
[145.39295959 -430.93380737]
[159.86218262 -426.96078491]
[174.05938721 -422.10455322]
[187.93070984 -416.38354492]
[201.42353821 -409.81942749]
[214.48666382 -402.43713379]
[227.07057190 -394.26467896]
[239.12748718 -385.33303833]
[250.61170959 -375.67608643]
[261.47964478 -365.33050537]
[271.69009399 -354.33547974]
[281.20428467 -342.73272705]
[289.98617554 -330.56631470]
[298.00244141 -317.88232422]
[305.22262573 -304.72891235]
[311.61941528 -291.15597534]
[317.16848755 -277.21496582]
[321.84881592 -262.95880127]
[325.64263916 -248.44155884]
[328.53558350 -233.71827698]
[330.51663208 -218.84484863]
[331.57830811 -203.87767029]
[331.71658325 -188.87351990]
[330.93093872 -173.88931274]
[329.22430420 -158.98190308]
[326.60321045 -144.20780945]
[323.07757568 -129.62310791]
[318.66079712 -115.28311157]
[313.36959839 -101.24221802]
[307.22402954 -87.55368042]
[300.24746704 -74.26943970]
[292.46633911 -61.43987656]
[283.91018677 -49.11366272]
[274.61141968 -37.33755493]
[264.60534668 -26.15622139]
[253.92991638 -15.61208248]
[242.62562561 -5.74513388]
[230.73535156 3.40719628]
[218.30421448 11.81018925]
[205.37934875 19.43196869]
[192.00979614 26.24362373]
[178.24626160 32.21931458]
[164.14097595 37.33637619]
[149.74742126 41.57538986]
[135.12020874 44.92028427]
[120.31481934 47.35836792]
[105.38742828 48.88039017]
[105.98757172 63.86837769]
[106.58771515 78.85636902]
[107.18785858 93.84436035]
[110.17533875 98.22927094]
[110.46128082 103.98073578]
[107.50000000 109.44149780]
[107.50000000 124.44149780]
[107.50000000 139.44149780]
[107.50000000 154.44149780]
[107.50000000 169.44149780]
[107.50000000 184.44149780]
[107.50000000 199.44149780]
[107.50000000 214.44149780]
[107.50000000 229.44149780]
[107.50000000 244.44149780]
[122.20955658 247.67306519]
[135.88034058 253.99159241]
[147.87292480 263.10159302]
[157.62640381 274.57693481]
[164.68460083 287.88092041]
[168.71737671 302.39129639]
[169.53611755 317.42935181]
[167.10252380 332.29177856]
[161.53042603 346.28341675]
[153.08044434 358.74984741]
[142.14779663 369.10800171]
[129.24380493 376.87338257]
[114.97203827 381.68283081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 131]
[25 130]
[26 129]
[27 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
