%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUCUCACAGGGGGGGGGGUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUxxxxxxxxxxCCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUCCCCCCCCCCUUCUUCCCACA\
) } def
/len { sequence length } bind def

/coor [
[83.07221222 355.72174072]
[69.58332825 348.99020386]
[58.09782791 339.22564697]
[49.28345871 326.99575806]
[43.65267944 313.01156616]
[41.53284836 298.08609009]
[43.04721832 283.08706665]
[48.10774231 268.88656616]
[56.42020798 256.31015015]
[67.50133514 246.08898926]
[80.70689392 238.81735229]
[95.26911926 234.91798401]
[94.96114349 219.92114258]
[94.65316010 204.92430115]
[94.34518433 189.92747498]
[94.03720856 174.93063354]
[93.72923279 159.93379211]
[93.42124939 144.93695068]
[93.11327362 129.94010925]
[92.80529785 114.94327545]
[83.76577759 102.97302246]
[69.42571259 98.57271576]
[55.08565521 94.17241669]
[40.74559402 89.77211761]
[34.33979416 103.36426544]
[26.06476402 115.90637970]
[16.08897018 127.14311981]
[4.61550474 136.84571838]
[-8.12204456 144.81663513]
[-21.86435890 150.89360046]
[-36.33166122 154.95289612]
[-51.22941971 156.91188049]
[-66.25432587 156.73068237]
[-81.10050201 154.41296387]
[-95.46569824 150.00592041]
[-109.05744934 143.59927368]
[-121.59905243 135.32347107]
[-132.83517456 125.34698486]
[-142.53706360 113.87291718]
[-150.50718689 101.13487244]
[-156.58331299 87.39218140]
[-160.64170837 72.92462921]
[-162.59977722 58.02675247]
[-162.41763306 43.00185394]
[-160.09899902 28.15582085]
[-155.69107056 13.79090023]
[-149.28358459 0.19954365]
[-141.00700378 -12.34154606]
[-131.02981567 -23.57704926]
[-119.55515289 -33.27822495]
[-106.81661987 -41.24757004]
[-93.07354736 -47.32283783]
[-78.60574341 -51.38034439]
[-63.70774841 -53.33748627]
[-48.68285751 -53.15441513]
[-33.83697128 -50.83485794]
[-19.47232246 -46.42604065]
[-5.88136339 -40.01771927]
[6.65921450 -31.74036026]
[17.89410019 -21.76247978]
[27.59456444 -10.28721333]
[35.56312180 2.45181632]
[41.63753891 16.19525909]
[45.69415283 30.66331482]
[47.65036774 45.56143570]
[47.46636963 60.58631134]
[45.14589310 75.43206024]
[59.48595428 79.83235931]
[73.82601929 84.23265839]
[88.16607666 88.63295746]
[77.69110870 77.89633942]
[65.84874725 68.68990326]
[58.73570633 55.48366547]
[57.56483459 40.52943039]
[62.53577805 26.37705612]
[72.80093384 15.43966484]
[86.60999298 9.58219719]
[101.60836029 9.80341148]
[115.23866272 16.06558990]
[125.17678833 27.30096436]
[129.72817993 41.59378815]
[128.11679077 56.50698471]
[120.61499786 69.50033569]
[112.29123688 81.97891235]
[125.57857513 75.01855469]
[138.86592102 68.05819702]
[152.15325928 61.09784317]
[165.44059753 54.13748550]
[178.72793579 47.17713165]
[190.69819641 38.13761139]
[201.02909851 27.26229668]
[211.36000061 16.38698387]
[212.38732910 0.37685689]
[225.62698364 -8.68355179]
[240.92265320 -3.84387279]
[246.54078674 11.18330669]
[238.17164612 24.87042046]
[222.23532104 26.71788597]
[211.90441895 37.59320068]
[201.57351685 48.46851349]
[216.11775208 44.79904175]
[231.04925537 46.23092651]
[244.63105774 52.59759903]
[255.28323364 63.15843964]
[261.76660156 76.68492126]
[263.32699585 91.60353851]
[259.78289795 106.17884064]
[251.54656982 118.71530151]
[239.57612610 127.75458527]
[225.26408386 132.24516296]
[210.27531433 131.66465759]
[196.35345459 126.08060455]
[185.11799622 116.14257812]
[177.87593079 103.00665283]
[175.46972656 88.20090485]
[178.17929077 73.44766235]
[185.68829346 60.46447372]
[172.40095520 67.42482758]
[159.11361694 74.38518524]
[145.82627869 81.34554291]
[132.53892517 88.30589294]
[119.25158691 95.26625061]
[133.34924316 90.14217377]
[148.06040955 93.07162476]
[159.11976624 103.20524597]
[163.32083130 117.60494232]
[159.44552612 132.09570312]
[148.61747742 142.47612000]
[133.97610474 145.73654175]
[119.76649475 140.93164062]
[110.10853577 129.45454407]
[107.80213165 114.63529968]
[108.11011505 129.63214111]
[108.41809082 144.62898254]
[108.72606659 159.62580872]
[109.03404236 174.62265015]
[109.34202576 189.61949158]
[109.65000153 204.61633301]
[109.95797729 219.61315918]
[110.26595306 234.61000061]
[124.97599030 237.90823364]
[138.46894836 244.63159180]
[149.96037292 254.38919067]
[158.78215027 266.61373901]
[164.42140198 280.59451294]
[166.55027771 295.51870728]
[165.04501343 310.51861572]
[159.99310303 324.72219849]
[151.68826294 337.30364990]
[140.61332703 347.53152466]
[127.41218567 354.81115723]
[112.85232544 358.71936035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 70]
[22 69]
[23 68]
[24 67]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
