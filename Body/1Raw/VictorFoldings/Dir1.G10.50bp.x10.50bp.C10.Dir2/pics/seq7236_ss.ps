%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUCCUAUGGGGGGGGGGCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCxxxxxxxxxxACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACCCCCCCCCCCAACAACCUAU\
) } def
/len { sequence length } bind def

/coor [
[83.54647064 372.46929932]
[70.32627106 365.19680786]
[59.43947220 354.74981689]
[51.62834167 341.84057617]
[47.42546082 327.34924316]
[47.11738586 312.26391602]
[50.72512817 297.61309814]
[58.00270081 284.39569092]
[68.45391083 273.51293945]
[81.36617279 265.70678711]
[95.85910797 261.50949097]
[95.54705048 246.51274109]
[95.23499298 231.51599121]
[94.92293549 216.51924133]
[94.61088562 201.52247620]
[94.29882812 186.52572632]
[93.98677063 171.52897644]
[93.67471313 156.53222656]
[93.36265564 141.53546143]
[93.05059814 126.53871155]
[86.66149139 123.97251892]
[81.11257172 119.89629364]
[76.75336456 114.56679535]
[73.85847473 108.31974030]
[58.86577606 108.78778076]
[43.87308121 109.25582123]
[28.88038635 109.72386932]
[24.89301300 124.30441284]
[16.78369141 137.06098938]
[5.27349901 146.85929871]
[-8.61408901 152.82807922]
[-23.64419556 154.43658447]
[-38.48035431 151.54179382]
[-51.80334473 144.40112305]
[-62.42849350 133.64949036]
[-69.41102600 120.24293518]
[-72.13005066 105.37355804]
[-70.34379578 90.36354065]
[-64.21110535 76.54755402]
[-54.27727890 65.15410614]
[-41.42563248 57.19630814]
[-26.79892540 53.38174820]
[-11.69775581 54.04961777]
[2.53509355 59.14053345]
[14.63404560 68.20181274]
[23.52326965 80.42773438]
[28.41234398 94.73117065]
[43.40504074 94.26313019]
[58.39773560 93.79508972]
[73.39043427 93.32704163]
[87.15052032 72.70643616]
[114.16461182 70.30477905]
[117.87077332 55.76984787]
[121.57693481 41.23490906]
[125.28309631 26.69997406]
[127.76821136 11.90726662]
[129.01509094 -3.04081988]
[119.08367920 -15.04102421]
[120.56112671 -30.18274689]
[132.06269836 -39.57687378]
[133.30957031 -54.52495956]
[134.55644226 -69.47304535]
[135.80331421 -84.42113495]
[137.05018616 -99.36922455]
[138.29707336 -114.31730652]
[139.54394531 -129.26539612]
[140.79081726 -144.21348572]
[126.69612885 -149.64637756]
[114.70383453 -158.83123779]
[105.78610229 -171.02348328]
[100.66584778 -185.23474121]
[99.75815582 -200.31295776]
[103.13659668 -215.03582764]
[110.52729797 -228.20982361]
[121.33113861 -238.76698303]
[134.67228699 -245.85150146]
[149.46923828 -248.88905334]
[164.52249146 -247.63340759]
[178.61170959 -242.18635559]
[190.59477234 -232.98945618]
[199.50024414 -220.78825378]
[204.60621643 -206.57186890]
[205.49876404 -191.49275208]
[202.10554504 -176.77328491]
[194.70159912 -163.60671997]
[183.88716125 -153.06040955]
[170.53890991 -145.98930359]
[155.73890686 -142.96661377]
[154.49203491 -128.01852417]
[153.24514771 -113.07043457]
[151.99827576 -98.12234497]
[150.75140381 -83.17426300]
[149.50453186 -68.22617340]
[148.25765991 -53.27808762]
[147.01078796 -38.32999802]
[156.79702759 -27.16017914]
[155.74546814 -11.98293018]
[143.96318054 -1.79394531]
[142.71629333 13.15414143]
[153.86167908 3.11518574]
[168.76156616 1.38505924]
[181.91075134 8.60300922]
[188.45088196 22.10214806]
[185.96549988 36.89480972]
[175.37290955 47.51540375]
[160.58685303 50.03982925]
[147.07049561 43.53536606]
[139.81802368 30.40613556]
[136.11186218 44.94107056]
[132.40571594 59.47600937]
[128.69955444 74.01094055]
[136.42362976 86.86934662]
[150.99633789 90.42411041]
[165.56903076 93.97886658]
[180.14173889 97.53363037]
[192.63796997 88.13265991]
[208.25062561 89.01512909]
[219.60791016 99.76437378]
[221.34724426 115.30492401]
[212.64736938 128.29901123]
[197.61610413 132.61122131]
[183.35075378 126.20545959]
[176.58697510 112.10633850]
[162.01428223 108.55157471]
[147.44157410 104.99681091]
[132.86886597 101.44204712]
[129.60945129 110.84699249]
[123.86013031 118.45919800]
[116.38113403 123.68782806]
[108.04735565 126.22665405]
[108.35941315 141.22340393]
[108.67147064 156.22016907]
[108.98352051 171.21691895]
[109.29557800 186.21366882]
[109.60763550 201.21041870]
[109.91969299 216.20718384]
[110.23175049 231.20393372]
[110.54380798 246.20068359]
[110.85585785 261.19744873]
[125.51084900 264.78820801]
[138.73666382 272.05047607]
[149.63153076 282.48907471]
[157.45262146 295.39227295]
[161.66670227 309.88034058]
[161.98641968 324.96542358]
[158.38999939 339.61904907]
[151.12263489 352.84204102]
[140.67982483 363.73287964]
[127.77359772 371.54898071]
[113.28390503 375.75747681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 50]
[25 49]
[26 48]
[27 47]
[52 111]
[53 110]
[54 109]
[55 108]
[56 99]
[57 98]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
