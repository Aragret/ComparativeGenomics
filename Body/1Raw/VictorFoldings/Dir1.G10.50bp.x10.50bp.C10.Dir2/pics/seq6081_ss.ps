%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAGACCAGGGGGGGGGGAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAxxxxxxxxxxUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAACCCCCCCCCCUACUUGACCA\
) } def
/len { sequence length } bind def

/coor [
[92.07463837 463.50021362]
[78.22869873 457.48416138]
[66.52004242 447.95474243]
[57.81751633 435.61907959]
[52.76691437 421.39257812]
[51.74302292 406.33087158]
[54.82181931 391.55172729]
[61.77484131 378.15179443]
[72.08612823 367.12545776]
[84.99050903 359.29095459]
[99.53039551 355.22964478]
[99.53039551 340.22964478]
[99.53039551 325.22964478]
[99.53039551 310.22964478]
[99.53039551 295.22964478]
[99.53039551 280.22964478]
[99.53039551 265.22964478]
[99.53039551 250.22964478]
[99.53039551 235.22964478]
[99.53039551 220.22964478]
[99.06235504 205.23695374]
[98.12672424 190.26615906]
[97.19109344 175.29536438]
[96.25547028 160.32456970]
[87.73936462 148.10470581]
[94.60081482 133.84878540]
[93.66518402 118.87799072]
[87.30889893 132.46466064]
[84.95316315 147.27851868]
[77.32437897 160.19369507]
[65.48751831 169.40721130]
[51.09502411 173.63284302]
[36.15608978 172.28071594]
[22.75620461 165.53956604]
[12.76599979 154.35046387]
[7.58011627 140.27543640]
[7.92250586 125.27934265]
[13.74536991 111.45565796]
[24.23583412 100.73417664]
[37.92942429 94.61162567]
[52.91450119 93.94271088]
[67.09882355 98.82064056]
[82.07905579 99.59038544]
[69.30169678 91.73296356]
[56.52434158 83.87553406]
[43.74698257 76.01811218]
[30.96962738 68.16068268]
[18.19227028 60.30326080]
[2.31598473 62.61045074]
[-9.28751850 51.53171921]
[-7.71702528 35.56572342]
[5.82271624 26.96020317]
[20.94517517 32.31658173]
[26.04969597 47.52590179]
[38.82705307 55.38332748]
[51.60440826 63.24075317]
[64.38176727 71.09818268]
[77.15912628 78.95560455]
[89.93648529 86.81303406]
[96.44463348 83.08557892]
[88.98972321 70.06926727]
[81.53503418 57.05283356]
[94.55158997 49.59835434]
[102.00603485 62.61435699]
[109.46094513 75.63066864]
[115.96910095 71.90321350]
[115.65704346 56.90645599]
[115.34498596 41.90970230]
[101.29052734 36.04523468]
[90.84114838 24.96685791]
[85.80728149 10.59396553]
[87.06106567 -4.58325100]
[94.38527679 -17.93524742]
[106.51094818 -27.14871025]
[121.33724213 -30.62734985]
[136.29541016 -27.76847267]
[148.79385376 -19.06739616]
[156.66714478 -6.03163195]
[158.55119324 9.08029175]
[154.11956787 23.65014458]
[144.14009094 35.15361023]
[130.34173584 41.59764481]
[130.65379333 56.59439850]
[130.96585083 71.59115601]
[120.76046753 81.72801208]
[110.15465546 91.42771912]
[123.81089783 85.22231293]
[137.46713257 79.01690674]
[151.12338257 72.81150055]
[164.77961731 66.60609436]
[178.43585205 60.40068436]
[175.79804993 45.55168533]
[176.93673706 30.51325989]
[181.78031921 16.23073769]
[190.02435303 3.60192919]
[201.15058899 -6.57930803]
[214.45964050 -13.67297268]
[229.11486816 -17.23315048]
[244.19505310 -17.03604698]
[258.75222778 -13.09405136]
[271.87133789 -5.65496111]
[282.72769165 4.81359673]
[290.63882446 17.65355873]
[295.10745239 32.05779648]
[295.85269165 47.12084579]
[292.82769775 61.89582825]
[286.22259521 75.45397949]
[276.45260620 86.94302368]
[264.13186646 95.64074707]
[250.03489685 101.00040436]
[235.04782104 102.68508148]
[220.11273193 100.58888245]
[206.16847229 94.84357452]
[194.09159851 85.81031036]
[184.64126587 74.05692291]
[170.98503113 80.26232910]
[157.32878113 86.46774292]
[143.67254639 92.67314911]
[130.01629639 98.87855530]
[116.36006165 105.08396149]
[108.63597870 117.94235992]
[109.57160187 132.91316223]
[118.15462494 146.20384216]
[111.22625732 159.38894653]
[112.16188812 174.35974121]
[113.09751892 189.33052063]
[114.03314209 204.30131531]
[116.99903107 208.75363159]
[117.83147430 213.42904663]
[116.81208038 217.46171570]
[114.53039551 220.22964478]
[114.53039551 235.22964478]
[114.53039551 250.22964478]
[114.53039551 265.22964478]
[114.53039551 280.22964478]
[114.53039551 295.22964478]
[114.53039551 310.22964478]
[114.53039551 325.22964478]
[114.53039551 340.22964478]
[114.53039551 355.22964478]
[129.07028198 359.29095459]
[141.97467041 367.12545776]
[152.28594971 378.15179443]
[159.23896790 391.55172729]
[162.31776428 406.33087158]
[161.29388428 421.39257812]
[156.24327087 435.61907959]
[147.54075623 447.95474243]
[135.83209229 457.48416138]
[121.98615265 463.50021362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 127]
[22 126]
[23 125]
[24 124]
[26 122]
[27 121]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[66 84]
[67 83]
[68 82]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
