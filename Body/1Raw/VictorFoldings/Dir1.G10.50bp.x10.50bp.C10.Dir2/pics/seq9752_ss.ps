%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUACUACCGGGGGGGGGGACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCxxxxxxxxxxCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCCCCCCCCCCCUAUUACUAUC\
) } def
/len { sequence length } bind def

/coor [
[74.64365387 402.02099609]
[61.42345810 394.74850464]
[50.53665543 384.30151367]
[42.72552490 371.39227295]
[38.52264404 356.90093994]
[38.21456909 341.81561279]
[41.82231140 327.16479492]
[49.09988403 313.94738770]
[59.55109024 303.06463623]
[72.46335602 295.25848389]
[86.95629120 291.06118774]
[86.64423370 276.06445312]
[86.33217621 261.06768799]
[86.02011871 246.07093811]
[85.70806885 231.07418823]
[85.39601135 216.07742310]
[85.08395386 201.08067322]
[84.77189636 186.08392334]
[84.45983887 171.08717346]
[84.14778137 156.09040833]
[65.33045197 131.28820801]
[65.41071320 106.04418945]
[78.22406769 91.09499359]
[93.04897308 90.29272461]
[85.59406281 77.27641296]
[78.13915253 64.26010132]
[64.53678131 70.60377502]
[50.45129395 75.78697205]
[35.98148346 79.77333832]
[21.22884750 82.53490448]
[6.29686832 84.05231476]
[-8.70971680 84.31491852]
[-23.68564415 83.32086945]
[-38.52586746 81.07714081]
[-53.12629318 77.59947968]
[-67.38450623 72.91226959]
[-81.20049286 67.04839325]
[-94.47734070 60.04898071]
[-107.12193298 51.96313095]
[-119.04555511 42.84756088]
[-130.16459656 32.76620865]
[-140.40103149 21.78978729]
[-149.68309021 9.99529457]
[-157.94563293 -2.53454113]
[-165.13073730 -15.71183014]
[-171.18797302 -29.44414139]
[-176.07487488 -43.63515091]
[-179.75714111 -58.18532181]
[-182.20896912 -72.99258423]
[-183.41314697 -87.95308685]
[-183.36122131 -102.96187592]
[-182.05357361 -117.91368866]
[-179.49935913 -132.70362854]
[-175.71650696 -147.22798157]
[-170.73155212 -161.38484192]
[-164.57945251 -175.07492065]
[-157.30335999 -188.20217896]
[-148.95431519 -200.67454529]
[-139.59088135 -212.40454102]
[-129.27874756 -223.30987549]
[-118.09023285 -233.31405640]
[-106.10382843 -242.34692383]
[-93.40360260 -250.34509277]
[-80.07864380 -257.25247192]
[-66.22241974 -263.02062988]
[-51.93211746 -267.60910034]
[-37.30797958 -270.98565674]
[-22.45258904 -273.12664795]
[-7.47014332 -274.01705933]
[7.53426552 -273.65066528]
[22.45538902 -272.02996826]
[37.18856812 -269.16641235]
[51.63045120 -265.08001709]
[65.67974091 -259.79949951]
[79.23789978 -253.36187744]
[92.20980835 -245.81230164]
[104.50448608 -237.20373535]
[116.03569031 -227.59655762]
[126.72254181 -217.05816650]
[136.49008179 -205.66246033]
[145.26977539 -193.48941040]
[153.00006104 -180.62437439]
[159.62670898 -167.15759277]
[165.10324097 -153.18353271]
[169.39123535 -138.80021667]
[172.46060181 -124.10854340]
[174.28984070 -109.21154785]
[174.86610413 -94.21373749]
[174.18534851 -79.22029877]
[172.25234985 -64.33641052]
[169.08067322 -49.66647720]
[164.69256592 -35.31339264]
[159.11880493 -21.37783813]
[152.39848328 -7.95756245]
[144.57873535 4.85329914]
[135.71441650 16.96488571]
[125.86772156 28.29224205]
[115.10769653 38.75591278]
[103.50982666 48.28250504]
[91.15546417 56.80519104]
[98.61037445 69.82150269]
[106.06528473 82.83781433]
[119.58946991 89.32597351]
[134.40722656 86.99487305]
[149.22499084 84.66377258]
[164.04273987 82.33266449]
[173.14178467 69.41047668]
[188.72721863 66.78945160]
[201.55249023 76.02460480]
[204.00859070 91.63687897]
[194.63835144 104.36379242]
[179.00097656 106.65469360]
[166.37385559 97.15042114]
[151.55609131 99.48152924]
[136.73832703 101.81262970]
[121.92057800 104.14373779]
[120.90940857 111.57525635]
[117.87590790 133.86982727]
[131.53215027 140.07524109]
[145.18838501 146.28063965]
[158.84463501 152.48605347]
[175.10520935 150.35867310]
[184.86170959 163.53982544]
[178.07748413 178.46986389]
[161.73155212 179.79005432]
[152.63922119 166.14228821]
[138.98298645 159.93688965]
[125.32674408 153.73147583]
[111.67050171 147.52607727]
[99.14453888 155.77836609]
[99.45659637 170.77511597]
[99.76865387 185.77186584]
[100.08070374 200.76861572]
[100.39276123 215.76538086]
[100.70481873 230.76213074]
[101.01687622 245.75888062]
[101.32893372 260.75564575]
[101.64099121 275.75238037]
[101.95304108 290.74914551]
[116.60803223 294.33990479]
[129.83384705 301.60217285]
[140.72871399 312.04077148]
[148.54980469 324.94396973]
[152.76388550 339.43203735]
[153.08360291 354.51715088]
[149.48718262 369.17074585]
[142.21981812 382.39373779]
[131.77700806 393.28457642]
[118.87078094 401.10070801]
[104.38108826 405.30917358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 102]
[25 101]
[26 100]
[103 116]
[104 115]
[105 114]
[106 113]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
