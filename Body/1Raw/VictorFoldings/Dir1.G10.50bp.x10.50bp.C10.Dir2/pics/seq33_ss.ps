%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUAACCAGGGGGGGGGGCUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACxxxxxxxxxxUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACCCCCCCCCCCUUUUAACCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.58016968]
[71.19830322 356.56414795]
[59.48964310 347.03472900]
[50.78712082 334.69906616]
[45.73651886 320.47253418]
[44.71262741 305.41085815]
[47.79142761 290.63168335]
[54.74444962 277.23175049]
[65.05573273 266.20544434]
[77.96011353 258.37091064]
[92.50000000 254.30961609]
[92.50000000 239.30961609]
[92.50000000 224.30961609]
[92.50000000 209.30961609]
[92.50000000 194.30961609]
[92.50000000 179.30961609]
[92.50000000 164.30961609]
[92.50000000 149.30961609]
[92.50000000 134.30961609]
[92.50000000 119.30960846]
[82.32437134 112.47457123]
[77.45577240 100.65003967]
[80.07419586 87.59278107]
[89.87319183 77.80930328]
[103.97319031 75.00228119]
[99.36762238 60.72682571]
[94.61380768 46.50004578]
[89.71225739 32.32348633]
[84.81070709 18.14692879]
[79.90915680 3.97037101]
[75.00760651 -10.20618725]
[60.00939178 -13.20633411]
[48.60192490 -23.24458504]
[43.78266144 -37.54986572]
[46.75098801 -52.24833679]
[56.61155701 -63.41233063]
[51.71000671 -77.58889008]
[46.80845642 -91.76544189]
[41.90690613 -105.94200134]
[37.00535583 -120.11856079]
[32.10380554 -134.29512024]
[28.05615997 -137.79313660]
[26.00478935 -142.07615662]
[25.90966225 -146.23460388]
[27.36885834 -149.51152039]
[23.36111832 -163.96621704]
[19.35337830 -178.42089844]
[14.74781418 -192.69636536]
[9.55239773 -206.76788330]
[4.35698271 -220.83940125]
[-0.83843291 -234.91091919]
[-15.68408203 -232.46078491]
[-30.72513580 -232.86473083]
[-45.41786957 -236.10820007]
[-59.23115540 -242.07391357]
[-71.66564178 -250.54621887]
[-82.27184296 -261.21884155]
[-90.66633606 -273.70599365]
[-96.54567719 -287.55627441]
[-99.69732666 -302.26898193]
[-100.00735474 -317.31225586]
[-97.46455383 -332.14230347]
[-92.16085052 -346.22305298]
[-84.28796387 -359.04547119]
[-74.13049316 -370.14602661]
[-62.05562592 -379.12344360]
[-48.49986649 -385.65319824]
[-33.95323944 -389.49926758]
[-18.94159889 -390.52258301]
[-4.00760841 -388.68615723]
[10.30887985 -384.05639648]
[23.49033356 -376.80065918]
[35.06024933 -367.18124390]
[44.60038757 -355.54583740]
[51.76587296 -342.31509399]
[56.29767990 -327.96731567]
[58.03198242 -313.02111816]
[56.90609360 -298.01681519]
[52.96070862 -283.49682617]
[46.33845139 -269.98599243]
[37.27871704 -257.97277832]
[26.10900116 -247.89140320]
[13.23308659 -240.10633850]
[18.42850113 -226.03482056]
[23.62391663 -211.96330261]
[28.81933403 -197.89178467]
[31.37781906 -196.60279846]
[33.56217575 -194.18978882]
[34.92913818 -190.79667664]
[35.09830856 -186.72943115]
[33.80806732 -182.42864990]
[37.81580734 -167.97395325]
[41.82354736 -153.51927185]
[46.28036118 -139.19667053]
[51.18191528 -125.02011108]
[56.08346558 -110.84355164]
[60.98501587 -96.66699219]
[65.88656616 -82.49044037]
[70.78811646 -68.31388092]
[85.43847656 -65.62454987]
[96.85160065 -55.89847565]
[101.89737701 -41.67150879]
[99.12631226 -26.73102570]
[89.18416595 -15.10773754]
[94.08571625 -0.93117988]
[98.98726654 13.24537849]
[103.88881683 27.42193604]
[108.79036713 41.59849548]
[113.98210144 46.92686462]
[113.64308167 56.12126160]
[118.24864960 70.39672089]
[129.01945496 80.83653259]
[143.43167114 84.99442291]
[157.84388733 89.15230560]
[172.25610352 93.31019592]
[183.79946899 83.07523346]
[199.04728699 80.72843170]
[213.13404846 87.01864624]
[221.56471252 99.93869019]
[221.64907837 115.36582184]
[213.36024475 128.37730408]
[199.34312439 134.82121277]
[184.07054138 132.64134216]
[172.41592407 122.53324890]
[168.09822083 107.72241211]
[153.68600464 103.56452179]
[139.27378845 99.40663910]
[124.86156464 95.24874878]
[122.89085388 106.43935394]
[116.46969604 114.95611572]
[107.50000000 119.30960846]
[107.50000000 134.30961609]
[107.50000000 149.30961609]
[107.50000000 164.30961609]
[107.50000000 179.30961609]
[107.50000000 194.30961609]
[107.50000000 209.30961609]
[107.50000000 224.30961609]
[107.50000000 239.30961609]
[107.50000000 254.30961609]
[122.03988647 258.37091064]
[134.94427490 266.20544434]
[145.25555420 277.23175049]
[152.20857239 290.63168335]
[155.28736877 305.41085815]
[154.26348877 320.47253418]
[149.21287537 334.69906616]
[140.51036072 347.03472900]
[128.80169678 356.56414795]
[114.95575714 362.58016968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 111]
[26 110]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[45 93]
[46 92]
[47 91]
[48 86]
[49 85]
[50 84]
[51 83]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
