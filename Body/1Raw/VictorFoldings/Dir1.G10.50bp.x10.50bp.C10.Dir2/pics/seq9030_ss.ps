%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAGCCCGGGGGGGGGGCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAxxxxxxxxxxUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUCCCCCCCCCCAGCCUACCCC\
) } def
/len { sequence length } bind def

/coor [
[209.08222961 237.29545593]
[201.06031799 224.61418152]
[193.89405823 211.43046570]
[187.61479187 197.80194092]
[182.24996948 183.78822327]
[177.82305908 169.45057678]
[174.35340881 154.85169983]
[171.85620117 140.05541992]
[170.34234619 125.12646484]
[169.81848145 110.13008881]
[154.82579041 109.66204834]
[139.83308411 109.19400024]
[124.84039307 108.72595978]
[109.84769440 108.25791931]
[95.57223511 112.86348724]
[83.67985535 122.00521851]
[71.78747559 131.14695740]
[59.89509964 140.28868103]
[48.00271988 149.43041992]
[36.11034012 158.57215881]
[27.23760796 173.01898193]
[10.89914703 168.49229431]
[10.72600365 151.53923035]
[26.96860504 146.67977905]
[38.86098480 137.53804016]
[50.75336456 128.39630127]
[62.64574432 119.25457001]
[74.53812408 110.11283875]
[86.43050385 100.97110748]
[84.72901154 93.66665649]
[81.32603455 79.05776215]
[79.62454987 71.75331879]
[64.91658783 68.80783844]
[55.82102966 70.19445038]
[49.93471527 65.64505768]
[35.29121399 62.39422989]
[26.16877937 63.59132004]
[20.37838745 58.92045212]
[5.80568361 55.36568832]
[-8.76701927 51.81092834]
[-23.33972168 48.25616455]
[-38.92004395 53.37335205]
[-50.95973969 42.23881912]
[-47.07340240 26.30682755]
[-31.25896263 21.96683884]
[-19.78495979 33.68346405]
[-5.21225739 37.23822403]
[9.36044598 40.79298782]
[23.93314934 44.34774780]
[38.54204178 47.75072861]
[53.18554306 51.00155258]
[67.86206818 54.09987640]
[82.57003021 57.04535675]
[87.99436188 43.06048584]
[99.17058563 33.05588913]
[113.66841125 29.20709610]
[128.33523560 32.35103607]
[139.98170471 41.80405045]
[146.07528687 55.51055527]
[145.29090881 70.49002838]
[137.79911804 83.48515320]
[125.22904968 91.67008972]
[110.31574249 93.26522064]
[125.30843353 93.73326874]
[140.30113220 94.20130920]
[155.29382324 94.66934967]
[170.28652954 95.13739014]
[171.74478149 80.20289612]
[174.18687439 65.39743042]
[177.60214233 50.78573227]
[181.97563171 36.43169785]
[187.28823853 22.39809990]
[193.51672363 8.74629688]
[200.63385010 -4.46401215]
[208.60848999 -17.17506218]
[217.40577698 -29.33126831]
[226.98725891 -40.87947845]
[237.31100464 -51.76918793]
[248.33189392 -61.95278549]
[260.00173950 -71.38574219]
[272.26950073 -80.02679443]
[285.08151245 -87.83818054]
[298.38180542 -94.78572083]
[312.11215210 -100.83905029]
[326.21258545 -105.97168732]
[340.62136841 -110.16120148]
[355.27557373 -113.38925934]
[370.11108398 -115.64175415]
[385.06298828 -116.90883636]
[400.06597900 -117.18495941]
[415.05441284 -116.46891785]
[429.96273804 -114.76384735]
[444.72579956 -112.07719421]
[459.27899170 -108.42072296]
[473.55874634 -103.81040192]
[487.50253296 -98.26641083]
[501.04946899 -91.81297302]
[514.14025879 -84.47832489]
[526.71765137 -76.29453278]
[538.72668457 -67.29737854]
[550.11486816 -57.52621078]
[560.83227539 -47.02375412]
[570.83221436 -35.83593369]
[580.07086182 -24.01166916]
[588.50781250 -11.60266876]
[596.10620117 1.33680677]
[602.83282471 14.75017643]
[608.65820312 28.57878685]
[613.55694580 42.76216507]
[617.50756836 57.23829651]
[620.49279785 71.94387817]
[622.49963379 86.81459808]
[623.51922607 101.78544617]
[623.54711914 116.79093933]
[622.58331299 131.76547241]
[620.63183594 146.64356995]
[617.70141602 161.36015320]
[613.80468750 175.85090637]
[608.95886230 190.05241394]
[603.18499756 203.90261841]
[596.50836182 217.34094238]
[588.95819092 230.30862427]
[580.56750488 242.74894714]
[571.37292480 254.60752869]
[561.41473389 265.83251953]
[550.73645020 276.37478638]
[539.38476562 286.18829346]
[527.40930176 295.23010254]
[514.86242676 303.46066284]
[501.79907227 310.84399414]
[488.27627563 317.34783936]
[474.35321045 322.94369507]
[460.09072876 327.60714722]
[445.55123901 331.31781006]
[430.79830933 334.05938721]
[415.89642334 335.81997681]
[400.91076660 336.59179688]
[385.90686035 336.37155151]
[370.95031738 335.16015625]
[356.10653687 332.96289062]
[341.44042969 329.78942871]
[327.01611328 325.65359497]
[312.89669800 320.57348633]
[299.14389038 314.57131958]
[285.81781006 307.67333984]
[272.97680664 299.90972900]
[260.67697144 291.31439209]
[248.97207642 281.92495728]
[237.91334534 271.78247070]
[227.54911804 260.93127441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[32 53]
[33 52]
[35 51]
[36 50]
[38 49]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
