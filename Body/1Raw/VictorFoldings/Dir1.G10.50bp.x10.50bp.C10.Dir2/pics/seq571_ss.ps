%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCACUCGGGGGGGGGGCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACAxxxxxxxxxxCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCCCCCCCCCCCUCCCUCUC\
) } def
/len { sequence length } bind def

/coor [
[76.15345764 383.45462036]
[62.93326187 376.18215942]
[52.04645920 365.73513794]
[44.23532867 352.82589722]
[40.03244400 338.33459473]
[39.72437286 323.24923706]
[43.33211517 308.59841919]
[50.60968781 295.38104248]
[61.06089401 284.49826050]
[73.97315979 276.69213867]
[88.46609497 272.49484253]
[88.15403748 257.49807739]
[87.84197998 242.50132751]
[87.52992249 227.50457764]
[87.21787262 212.50782776]
[86.90581512 197.51106262]
[86.59375763 182.51431274]
[86.28170013 167.51756287]
[85.96964264 152.52081299]
[84.26139069 94.85354614]
[73.59976196 84.30225372]
[62.93813705 73.75096130]
[52.27651215 63.19967270]
[41.61488724 52.64838409]
[30.95326042 42.09709167]
[19.39871979 51.68142319]
[6.96037769 60.08704376]
[-6.24197340 67.23300171]
[-20.08118629 73.05047607]
[-34.42397690 77.48343658]
[-49.13220978 80.48919678]
[-64.06423950 82.03881073]
[-79.07625580 82.11734009]
[-94.02368164 80.72404480]
[-108.76255798 77.87232971]
[-123.15094757 73.58966827]
[-137.05026245 67.91730499]
[-150.32666016 60.90986633]
[-162.85226440 52.63484192]
[-174.50643921 43.17192459]
[-185.17697144 32.61225128]
[-194.76106262 21.05751991]
[-203.16644287 8.61900997]
[-210.31213379 -4.58348370]
[-216.12933350 -18.42281151]
[-220.56201172 -32.76568985]
[-223.56747437 -47.47398758]
[-225.11677551 -62.40604782]
[-225.19502258 -77.41806793]
[-223.80142212 -92.36546326]
[-220.94941711 -107.10428619]
[-216.66645813 -121.49258423]
[-210.99382019 -135.39178467]
[-203.98611450 -148.66804504]
[-195.71084595 -161.19348145]
[-186.24769592 -172.84747314]
[-175.68780518 -183.51779175]
[-164.13287354 -193.10165405]
[-151.69419861 -201.50677490]
[-138.49156189 -208.65220642]
[-124.65212250 -214.46913147]
[-110.30915833 -218.90151978]
[-95.60079956 -221.90669250]
[-80.66870880 -223.45570374]
[-65.65668488 -223.53363037]
[-50.70932007 -222.13973999]
[-35.97055435 -219.28742981]
[-21.58234215 -215.00419617]
[-7.68324900 -209.33128357]
[5.59286308 -202.32330322]
[18.11813545 -194.04779053]
[29.77194023 -184.58439636]
[40.44204330 -174.02430725]
[50.02568054 -162.46919250]
[58.43055344 -150.03033447]
[65.57572174 -136.82756042]
[71.39236450 -122.98799896]
[75.82447052 -108.64494324]
[78.82934570 -93.93652344]
[80.37805939 -79.00440216]
[80.45568848 -63.99238205]
[79.06149292 -49.04504395]
[76.20890045 -34.30633545]
[71.92537689 -19.91820717]
[66.25217438 -6.01922894]
[59.24394226 7.25674343]
[50.96816635 19.78185081]
[41.50455093 31.43546677]
[52.16617584 41.98675537]
[62.82780075 52.53804779]
[73.48942566 63.08933640]
[84.15105438 73.64062500]
[94.81268311 84.19191742]
[109.65388489 86.36875153]
[122.89646912 79.32361603]
[136.13905334 72.27848816]
[149.38163757 65.23335266]
[151.40420532 49.84865570]
[162.10780334 38.61420822]
[177.37666321 35.84988022]
[191.33959961 42.61861420]
[198.62759399 56.31769562]
[196.43826294 71.67954254]
[185.61341858 82.79721832]
[170.31547546 85.39574432]
[156.42677307 78.47593689]
[143.18418884 85.52107239]
[129.94160461 92.56620789]
[116.69902039 99.61134338]
[117.16683197 107.09673309]
[132.13763428 106.16133881]
[133.07281494 121.13215637]
[118.10246277 122.06752777]
[118.57028198 129.55291748]
[132.58699036 134.89443970]
[146.60369873 140.23594666]
[160.62042236 145.57745361]
[172.97460938 136.33746338]
[188.36473083 135.26626587]
[201.87986755 142.70565796]
[209.20738220 156.28178406]
[208.00907898 171.66253662]
[198.66734314 183.93998718]
[184.16308594 189.19642639]
[169.12457275 185.75456238]
[158.35052490 174.71266174]
[155.27890015 159.59417725]
[141.26219177 154.25265503]
[127.24547577 148.91114807]
[113.22876740 143.56964111]
[100.96640015 152.20875549]
[101.27845001 167.20550537]
[101.59050751 182.20225525]
[101.90256500 197.19902039]
[102.21462250 212.19577026]
[102.52667999 227.19252014]
[102.83873749 242.18927002]
[103.15079498 257.18603516]
[103.46284485 272.18276978]
[118.11783600 275.77355957]
[131.34364319 283.03579712]
[142.23851013 293.47439575]
[150.05961609 306.37762451]
[154.27368164 320.86569214]
[154.59339905 335.95077515]
[150.99697876 350.60437012]
[143.72961426 363.82739258]
[133.28681946 374.71823120]
[120.38058472 382.53433228]
[105.89089203 386.74279785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[94 109]
[95 108]
[96 107]
[97 106]
[114 130]
[115 129]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
