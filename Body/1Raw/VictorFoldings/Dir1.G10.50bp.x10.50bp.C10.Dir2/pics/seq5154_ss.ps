%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCUCCUCGGGGGGGGGGACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCCCCCCCCCCCAUUCUCCUC\
) } def
/len { sequence length } bind def

/coor [
[31.78630066 482.95840454]
[20.57086754 472.89306641]
[11.97946739 460.51226807]
[6.47542477 446.48364258]
[4.35556459 431.56375122]
[5.73420906 416.55722046]
[10.53700829 402.27331543]
[18.50495529 389.48236084]
[29.20834732 378.87414551]
[42.06996536 371.02078247]
[56.39619446 366.34576416]
[55.14931870 351.39767456]
[53.90244675 336.44958496]
[52.65557098 321.50149536]
[51.40869522 306.55340576]
[50.16182327 291.60531616]
[48.91494751 276.65722656]
[47.66807175 261.70913696]
[46.42119980 246.76104736]
[45.17432404 231.81297302]
[43.92744827 216.86488342]
[32.03506851 207.72314453]
[17.26901436 210.36201477]
[15.64316940 225.37977600]
[9.85091400 239.33064270]
[0.36180192 251.08364868]
[-12.05492783 259.68606567]
[-26.39270782 264.44052124]
[-41.48923492 264.96157837]
[-56.12070465 261.20700073]
[-69.10101318 253.48118591]
[-79.37789154 242.41040039]
[-86.11825562 228.89210510]
[-88.77568054 214.02217102]
[-87.13475037 199.00604248]
[-81.32848358 185.06101990]
[-71.82756805 173.31753540]
[-59.40220261 164.72760010]
[-45.05965424 159.98756409]
[-29.96260834 159.48165894]
[-15.33491802 163.25093079]
[-2.36238217 170.98979187]
[7.90337324 182.07089233]
[14.63014984 195.59596252]
[29.39620590 192.95709229]
[38.27762222 173.43151855]
[56.55918503 168.77320862]
[62.62220001 155.05314636]
[68.68521118 141.33309937]
[64.60987854 129.90072632]
[69.60069275 118.39809418]
[81.47011566 113.24341583]
[87.81724548 99.65246582]
[89.83958435 84.78942108]
[87.35446167 69.99671173]
[84.86934662 55.20400238]
[82.38422394 40.41129684]
[79.89910889 25.61858940]
[75.29354095 11.34312820]
[68.66504669 -2.11283708]
[62.03654480 -15.56880283]
[46.99440765 -20.41747475]
[39.86099243 -34.52030945]
[44.86842728 -49.51034164]
[59.04589081 -56.49425507]
[73.98214722 -51.32861710]
[80.81577301 -37.07810593]
[75.49250793 -22.19730186]
[82.12100983 -8.74133587]
[88.74951172 4.71462965]
[90.70149994 -10.15781879]
[98.10357666 -23.20424652]
[109.86885834 -32.50898361]
[124.26979065 -36.70576859]
[139.19183350 -35.17837143]
[152.44387817 -28.15106392]
[162.08009338 -16.65570068]
[166.68554688 -2.38020062]
[165.58396912 12.57929611]
[158.93714905 26.02621651]
[147.72103882 35.98608398]
[133.58256531 40.99644470]
[118.59775543 40.32160187]
[104.96688843 34.06064987]
[94.69181061 23.13347054]
[97.17693329 37.92617798]
[99.66204834 52.71888351]
[102.14717102 67.51158905]
[104.63228607 82.30429840]
[118.80884552 87.20584869]
[129.90016174 77.10720062]
[140.99147034 67.00855255]
[141.48057556 51.21183395]
[153.05346680 40.44874191]
[168.84413147 41.10483551]
[179.48425293 52.79085922]
[178.66125488 68.57369995]
[166.86338806 79.08969116]
[151.09013367 78.09986877]
[139.99880981 88.19851685]
[128.90750122 98.29716492]
[135.67561340 111.68344879]
[150.38357544 108.73796844]
[165.09153748 105.79248810]
[179.79949951 102.84700012]
[188.35311890 89.55749512]
[203.81602478 86.29040527]
[217.01435852 94.98405457]
[220.11778259 110.48064423]
[211.28507996 123.58632660]
[195.75654602 126.52573395]
[182.74497986 117.55496216]
[168.03701782 120.50045013]
[153.32905579 123.44593048]
[138.62109375 126.39141083]
[125.91588593 125.87751007]
[114.96653748 121.83245850]
[106.58961487 114.92639160]
[101.40819550 105.99959564]
[95.06106567 119.59054565]
[97.10485840 137.86080933]
[82.40526581 147.39610291]
[76.34225464 161.11616516]
[70.27924347 174.83621216]
[77.93424988 196.97355652]
[58.87553787 215.61801147]
[60.12240982 230.56608582]
[61.36928558 245.51417542]
[62.61616135 260.46228027]
[63.86303329 275.41033936]
[65.10990906 290.35842896]
[66.35678101 305.30651855]
[67.60366058 320.25460815]
[68.85053253 335.20269775]
[70.09740448 350.15078735]
[71.34428406 365.09887695]
[86.24706268 367.33578491]
[100.23204041 372.94979858]
[112.54502869 381.63812256]
[122.52200317 392.93225098]
[129.62490845 406.22305298]
[133.47070312 420.79379272]
[133.85197449 435.85870361]
[130.74818420 450.60531616]
[124.32669830 464.23840332]
[114.93383026 476.02276611]
[103.07611084 485.32281494]
[89.39302826 491.63708496]
[74.62248230 494.62503052]
[59.56103516 494.12548828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[22 45]
[23 44]
[47 124]
[48 123]
[49 122]
[52 120]
[53 119]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 70]
[60 69]
[61 68]
[90 101]
[91 100]
[92 99]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
