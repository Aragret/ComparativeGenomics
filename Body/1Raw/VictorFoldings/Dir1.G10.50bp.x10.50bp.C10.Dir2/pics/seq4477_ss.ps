%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCUAAGAGGGGGGGGGGAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAxxxxxxxxxxUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCCCCCCCCCCCAAAGCUAAGA\
) } def
/len { sequence length } bind def

/coor [
[80.58250427 395.88800049]
[67.66334534 388.12963867]
[56.88204956 377.60061646]
[48.82003403 364.86874390]
[43.91207504 350.62063599]
[42.42285156 335.62469482]
[44.43267441 320.68957520]
[49.83316040 306.62075806]
[58.33306122 294.17694092]
[69.47399902 284.02923584]
[82.65514374 276.72485352]
[97.16566467 272.65771484]
[96.54983521 257.67034912]
[95.93401337 242.68299866]
[95.31818390 227.69564819]
[94.70236206 212.70829773]
[94.08653259 197.72094727]
[93.47071075 182.73359680]
[92.85488129 167.74623108]
[92.23905945 152.75888062]
[91.62323761 137.77153015]
[89.58845520 135.75889587]
[88.25399780 132.79435730]
[87.99592590 129.15017700]
[89.08119202 125.23281097]
[91.62323761 121.53987885]
[92.23905945 106.55252838]
[89.38315582 98.95742035]
[93.02452087 91.26470184]
[93.94793701 76.29315186]
[94.87135315 61.32159805]
[95.79476166 46.35004807]
[96.71817780 31.37849808]
[84.02495575 22.84448814]
[77.35165405 9.19297409]
[78.40050507 -5.86578703]
[86.78993988 -18.29451942]
[100.18384552 -24.81133270]
[101.10726166 -39.78288269]
[102.03067780 -54.75443268]
[102.95408630 -69.72598267]
[103.87750244 -84.69753265]
[104.18547821 -99.69437408]
[103.87750244 -114.69120789]
[103.56952667 -129.68804932]
[103.26154327 -144.68489075]
[102.95356750 -159.68171692]
[87.99454498 -160.97004700]
[73.25721741 -163.84115601]
[58.90856934 -168.26249695]
[45.11117554 -174.18399048]
[32.02137375 -181.53852844]
[19.78748703 -190.24278259]
[8.54812908 -200.19813538]
[-1.56934834 -211.29176331]
[-10.45030594 -223.39799500]
[-17.99411583 -236.37963867]
[-24.11530113 -250.08959961]
[-28.74450302 -264.37255859]
[-31.82926941 -279.06665039]
[-33.33464813 -294.00537109]
[-33.24358368 -309.01950073]
[-31.55710411 -323.93887329]
[-28.29432106 -338.59448242]
[-23.49220467 -352.82022095]
[-17.20516586 -366.45492554]
[-9.50444031 -379.34408569]
[-0.47728494 -391.34170532]
[9.77401638 -402.31179810]
[21.13330841 -412.13006592]
[33.47188187 -420.68530273]
[46.64992905 -427.88052368]
[60.51813507 -433.63418579]
[74.91936493 -437.88116455]
[89.69043732 -440.57330322]
[104.66398621 -441.68008423]
[119.67034912 -441.18896484]
[134.53948975 -439.10552979]
[149.10293579 -435.45339966]
[163.19566345 -430.27392578]
[176.65800476 -423.62579346]
[189.33740234 -415.58435059]
[201.09020996 -406.24069214]
[211.78324890 -395.70071411]
[221.29534912 -384.08383179]
[229.51875305 -371.52169800]
[236.36026001 -358.15658569]
[241.74237061 -344.13998413]
[245.60409546 -329.63070679]
[247.90165710 -314.79315186]
[248.60905457 -299.79544067]
[247.71826172 -284.80746460]
[245.23936462 -269.99914551]
[241.20043945 -255.53817749]
[235.64727783 -241.58845520]
[228.64279175 -228.30804443]
[220.26634216 -215.84742737]
[210.61285400 -204.34776306]
[199.79168701 -193.93939209]
[187.92546082 -184.74020386]
[175.14863586 -176.85446167]
[161.60598755 -170.37152100]
[147.45095825 -165.36480713]
[132.84391785 -161.89108276]
[117.95040894 -159.98970032]
[118.25838470 -144.99285889]
[118.56636047 -129.99601746]
[118.87433624 -114.99918365]
[119.18231964 -100.00234985]
[121.17534637 -97.94835663]
[122.44865417 -94.95705414]
[122.63185120 -91.30832672]
[121.46637726 -87.41407776]
[118.84905243 -83.77411652]
[117.92563629 -68.80256653]
[117.00222778 -53.83102036]
[116.07881165 -38.85947037]
[115.15539551 -23.88791847]
[127.64694214 -15.77454567]
[134.44544983 -2.40905356]
[133.63580322 12.66446209]
[125.33547211 25.39243507]
[111.68972778 32.30191040]
[110.76631165 47.27346039]
[109.84290314 62.24501038]
[108.91948700 77.21656036]
[107.99607086 92.18811035]
[107.22640991 107.16835022]
[106.61058807 122.15570831]
[106.61058807 137.15570068]
[107.22640991 152.14306641]
[107.84223938 167.13041687]
[108.45806122 182.11776733]
[109.07389069 197.10511780]
[109.68971252 212.09246826]
[110.30554199 227.07981873]
[110.92136383 242.06718445]
[111.53719330 257.05453491]
[112.15301514 272.04190063]
[126.94828796 274.90484619]
[140.68426514 281.10321045]
[152.62016296 290.30273438]
[162.11231995 302.00726318]
[168.64881897 315.58557129]
[171.87715149 330.30545044]
[171.62322998 345.37304688]
[167.90074158 359.97576904]
[160.91043091 373.32614136]
[151.02929688 384.70416260]
[138.79019165 393.49627686]
[124.85316467 399.22830200]
[109.96982574 401.59112549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 129]
[27 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
