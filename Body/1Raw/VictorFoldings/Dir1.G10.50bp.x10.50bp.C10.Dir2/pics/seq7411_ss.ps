%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAAAAGGGGGGGGGGGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAxxxxxxxxxxUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACACCCCCCCCCCUUCAAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.84573364]
[71.19830322 372.82971191]
[59.48964310 363.30029297]
[50.78712082 350.96463013]
[45.73651886 336.73809814]
[44.71262741 321.67642212]
[47.79142761 306.89727783]
[54.74444962 293.49734497]
[65.05573273 282.47100830]
[77.96011353 274.63650513]
[92.50000000 270.57519531]
[92.50000000 255.57518005]
[92.50000000 240.57518005]
[92.50000000 225.57518005]
[92.50000000 210.57518005]
[92.50000000 195.57518005]
[92.50000000 180.57518005]
[92.50000000 165.57518005]
[92.50000000 150.57518005]
[92.50000000 135.57518005]
[92.50000000 120.57518768]
[86.29505157 117.08106232]
[81.53923035 111.78083801]
[66.89572906 115.03166199]
[52.25222778 118.28249359]
[37.64333344 121.68547058]
[23.07063293 125.24023438]
[8.49792957 128.79499817]
[-6.07477331 132.34976196]
[-15.60256481 145.25714111]
[-31.63917923 145.71163940]
[-41.88269806 133.36457825]
[-38.47517014 117.68757629]
[-24.03055954 110.70668793]
[-9.62953568 117.77705383]
[4.94316769 114.22229004]
[19.51587105 110.66752625]
[34.08857346 107.11277008]
[39.87896729 102.44190216]
[49.00140381 103.63899231]
[63.64490509 100.38816071]
[78.28840637 97.13733673]
[82.52713776 86.79821014]
[91.31507111 79.89626312]
[102.36418915 78.22848511]
[108.99269104 64.77252197]
[115.62118530 51.31655502]
[122.24968719 37.86058807]
[128.87818909 24.40462494]
[135.50668335 10.94865894]
[142.13517761 -2.50730658]
[148.19819641 -16.22735977]
[153.68522644 -30.18774986]
[159.17225647 -44.14813995]
[164.65928650 -58.10852814]
[170.14631653 -72.06891632]
[175.63334656 -86.02931213]
[166.92022705 -110.23831940]
[183.56597900 -129.10000610]
[183.25392151 -144.09677124]
[182.94186401 -159.09352112]
[182.62980652 -174.09027100]
[182.31774902 -189.08702087]
[179.17665100 -195.02343750]
[179.50495911 -200.77874756]
[182.31774902 -204.71113586]
[182.62980652 -219.70790100]
[182.94186401 -234.70465088]
[183.25392151 -249.70140076]
[183.56597900 -264.69815063]
[170.13383484 -272.03546143]
[161.65972900 -284.78097534]
[160.09097290 -300.00588989]
[165.78802490 -314.21160889]
[177.44175720 -324.13375854]
[192.37423706 -327.49230957]
[207.15406799 -323.51547241]
[218.38496399 -313.11715698]
[223.48616028 -298.68673706]
[221.28541565 -283.54028320]
[212.28846741 -271.15829468]
[198.56272888 -264.38610840]
[198.25067139 -249.38934326]
[197.93861389 -234.39259338]
[197.62655640 -219.39584351]
[197.31449890 -204.39907837]
[197.31449890 -189.39907837]
[197.62655640 -174.40232849]
[197.93861389 -159.40557861]
[198.25067139 -144.40882874]
[198.56272888 -129.41206360]
[201.72930908 -128.21780396]
[204.70042419 -126.59728241]
[207.41899109 -124.58161163]
[220.19635010 -132.43904114]
[232.97370911 -140.29646301]
[235.08181763 -155.79130554]
[246.69129944 -166.26763916]
[262.32052612 -166.77888489]
[274.58984375 -157.08363342]
[277.70605469 -141.75970459]
[270.19778442 -128.04255676]
[255.61021423 -122.40903473]
[240.83113098 -127.51911163]
[228.05377197 -119.66168213]
[215.27641296 -111.80426025]
[216.08998108 -104.16781616]
[214.48835754 -96.59699249]
[210.59326172 -89.84250641]
[204.75558472 -84.58555603]
[197.52403259 -81.36917114]
[189.59373474 -80.54227448]
[184.10670471 -66.58188629]
[178.61967468 -52.62149811]
[173.13264465 -38.66110992]
[167.64561462 -24.70071793]
[162.15858459 -10.74032879]
[163.21035767 -8.07553864]
[163.23483276 -4.82079124]
[161.99694824 -1.37848151]
[159.41639709 1.76982951]
[155.59114075 4.12119198]
[148.96264648 17.57715797]
[142.33415222 31.03312302]
[135.70565796 44.48908997]
[129.07714844 57.94505310]
[122.44865417 71.40101624]
[115.82015228 84.85698700]
[121.32849884 104.96823120]
[107.50000000 120.57518768]
[107.50000000 135.57518005]
[107.50000000 150.57518005]
[107.50000000 165.57518005]
[107.50000000 180.57518005]
[107.50000000 195.57518005]
[107.50000000 210.57518005]
[107.50000000 225.57518005]
[107.50000000 240.57518005]
[107.50000000 255.57518005]
[107.50000000 270.57519531]
[122.03988647 274.63650513]
[134.94427490 282.47100830]
[145.25555420 293.49734497]
[152.20857239 306.89727783]
[155.28736877 321.67642212]
[154.26348877 336.73809814]
[149.21287537 350.96463013]
[140.51036072 363.30029297]
[128.80169678 372.82971191]
[114.95575714 378.84573364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 42]
[24 41]
[25 40]
[26 38]
[27 37]
[28 36]
[29 35]
[45 128]
[46 127]
[47 126]
[48 125]
[49 124]
[50 123]
[51 122]
[52 117]
[53 116]
[54 115]
[55 114]
[56 113]
[57 112]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
