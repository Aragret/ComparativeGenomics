%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUAGCAGGGGGGGGGGGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCxxxxxxxxxxCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[83.88961792 364.36227417]
[70.67140198 357.08621216]
[59.78743744 346.63626099]
[51.97981644 333.72488403]
[47.78087997 319.23242188]
[47.47690964 304.14700317]
[51.08863449 289.49716187]
[58.36980057 276.28173828]
[68.82396698 265.40182495]
[81.73834991 257.59918213]
[96.23242950 253.40585327]
[95.92445374 238.40901184]
[95.61647797 223.41217041]
[95.30849457 208.41532898]
[95.00051880 193.41848755]
[94.69254303 178.42166138]
[94.38456726 163.42481995]
[94.07658386 148.42797852]
[93.76860809 133.43113708]
[93.46063232 118.43430328]
[85.82456970 113.06408691]
[81.64047241 104.87101746]
[66.67919159 103.79394531]
[51.71790695 102.71688080]
[45.25621796 116.36468506]
[29.31085777 124.33020020]
[9.10313320 120.45137024]
[-5.48061609 123.96054077]
[-20.06436539 127.46970367]
[-28.10036087 141.07846069]
[-43.42613220 144.93803406]
[-56.94916916 136.75862122]
[-60.64649582 121.39289093]
[-52.32455063 107.95709229]
[-36.92060089 104.42242432]
[-23.57353210 112.88595581]
[-8.98978329 109.37679291]
[5.59396601 105.86762238]
[6.43916464 98.41539764]
[-8.46528244 96.72499847]
[-23.36970329 95.03437042]
[-21.67884636 80.12997437]
[-6.77488518 81.82055664]
[8.12956238 83.51094818]
[8.97476101 76.05872345]
[-4.45268822 69.37265015]
[-17.88013840 62.68657684]
[-34.20595932 64.23563385]
[-43.48859787 50.71658325]
[-36.17886734 36.03666687]
[-19.79639435 35.29732513]
[-11.19406223 49.25912857]
[2.23338699 55.94520187]
[15.66083622 62.63127899]
[43.24975586 67.65232849]
[52.79497910 87.75559998]
[67.75625610 88.83266449]
[82.71753693 89.90973663]
[94.10861206 80.15045929]
[95.33922577 65.20102692]
[96.56983948 50.25159073]
[82.02268219 46.43695450]
[68.35902405 40.15400696]
[55.99406815 31.59368896]
[45.30358505 21.01613235]
[36.61244202 8.74278164]
[30.18475151 -4.85339165]
[26.21584702 -19.35921478]
[24.82633781 -34.33387375]
[26.05844879 -49.32230377]
[29.87473679 -63.86902237]
[36.15923309 -77.53197479]
[44.72095490 -89.89595795]
[55.29972076 -100.58524323]
[67.57405853 -109.27499390]
[81.17095947 -115.70114136]
[95.67723083 -119.66839600]
[110.65204620 -121.05621338]
[125.64034271 -119.82239532]
[140.18663025 -116.00446320]
[153.84886169 -109.71841431]
[166.21186829 -101.15528870]
[176.89996338 -90.57530975]
[185.58831787 -78.29998779]
[192.01292419 -64.70236206]
[195.97854614 -50.19563675]
[197.36465454 -35.22066116]
[196.12913513 -20.23251343]
[192.30955505 -5.68665886]
[186.02195740 7.97486687]
[177.45742798 20.33690643]
[166.87623596 31.02379036]
[154.59992981 39.71075821]
[141.00157166 46.13381958]
[126.49440002 50.09778976]
[111.51927185 51.48220444]
[110.28865814 66.43164062]
[109.05804443 81.38107300]
[119.16348267 92.46620941]
[134.16268921 92.62020111]
[149.95129395 83.19944000]
[164.71405029 92.63900757]
[179.71325684 92.48501587]
[194.71246338 92.33101654]
[203.32295227 89.09752655]
[210.02046204 92.33101654]
[225.01966858 92.48501587]
[240.01887512 92.63900757]
[246.31713867 78.77352142]
[257.71481323 68.67336273]
[272.23715210 64.08843994]
[287.36807251 65.81313324]
[300.48608398 73.54861450]
[309.31842041 85.95466614]
[312.33474731 100.88187408]
[309.01257324 115.74400330]
[299.92739868 127.96610260]
[286.65332031 135.43061829]
[271.49017334 136.84426880]
[257.06503296 131.96214294]
[245.87713623 121.63010406]
[239.86488342 107.63822174]
[224.86567688 107.48422241]
[209.86647034 107.33022308]
[194.86647034 107.33022308]
[179.86724854 107.48422241]
[164.86804199 107.63822174]
[156.14633179 116.07586670]
[143.61137390 116.29076385]
[134.00869751 107.61941528]
[119.00948334 107.46541595]
[108.45746613 118.12632751]
[108.76544952 133.12316895]
[109.07342529 148.11999512]
[109.38140106 163.11683655]
[109.68937683 178.11367798]
[109.99736023 193.11051941]
[110.30533600 208.10736084]
[110.61331177 223.10418701]
[110.92128754 238.10102844]
[111.22927094 253.09786987]
[125.88328552 256.69262695]
[139.10711670 263.95846558]
[149.99914551 274.40002441]
[157.81672668 287.30535889]
[162.02687073 301.79458618]
[162.34248352 316.87976074]
[158.74206543 331.53237915]
[151.47111511 344.75341797]
[141.02534485 355.64141846]
[128.11698914 363.45401001]
[113.62615967 367.65856934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 58]
[23 57]
[24 56]
[27 38]
[28 37]
[29 36]
[45 54]
[46 53]
[47 52]
[59 98]
[60 97]
[61 96]
[99 131]
[100 130]
[102 127]
[103 126]
[104 125]
[106 124]
[107 123]
[108 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
