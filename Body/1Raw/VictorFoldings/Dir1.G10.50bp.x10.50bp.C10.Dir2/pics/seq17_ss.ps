%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCCUAUGGGGGGGGGGUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUxxxxxxxxxxGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACCCCCCCCCCCAUCACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[108.89834595 388.34405518]
[95.67814636 381.07159424]
[84.79134369 370.62457275]
[76.98021698 357.71533203]
[72.77733612 343.22402954]
[72.46926117 328.13867188]
[76.07700348 313.48785400]
[83.35457611 300.27047729]
[93.80578613 289.38769531]
[106.71804810 281.58157349]
[121.21098328 277.38427734]
[120.89892578 262.38751221]
[120.58686829 247.39076233]
[120.27481079 232.39401245]
[119.96275330 217.39726257]
[119.65070343 202.40051270]
[119.33864594 187.40374756]
[119.02658844 172.40699768]
[118.71453094 157.41024780]
[118.40247345 142.41349792]
[118.09041595 127.41674042]
[111.82743835 123.29059601]
[99.30147552 115.03829956]
[93.03849792 110.91215515]
[79.13594055 116.54411316]
[73.20574188 131.19363403]
[58.62129593 137.28210449]
[44.03529739 131.19735718]
[38.10135651 116.54935455]
[44.33998108 102.02850342]
[59.04990005 96.24976349]
[73.50398254 102.64155579]
[87.40653992 97.00960541]
[97.15419006 85.60858154]
[100.55716705 70.99968719]
[103.96014404 56.39079666]
[107.36312103 41.78190231]
[110.76609802 27.17301178]
[105.31067657 28.91617012]
[99.22010803 29.30999565]
[92.77545166 28.22105217]
[78.75874329 22.87953949]
[64.74202728 17.53802872]
[50.42404938 24.22914124]
[35.59709167 18.75767326]
[29.05773354 4.36975193]
[34.68565369 -10.39852715]
[49.14191055 -16.78540421]
[63.84986115 -11.00165939]
[70.08354187 3.52131486]
[84.10025787 8.86282730]
[98.11696625 14.20433998]
[86.22814178 5.05798674]
[83.54167175 -9.69948196]
[91.44458771 -22.44875145]
[105.85659790 -26.60734749]
[119.33675385 -20.02817535]
[124.92520905 -6.10807896]
[119.73529053 7.96750879]
[128.75282288 -4.01932383]
[137.77035522 -16.00615692]
[146.78788757 -27.99298859]
[155.80540466 -39.97982025]
[141.64143372 -51.71200562]
[139.73960876 -76.16142273]
[141.91644287 -91.00262451]
[144.09327698 -105.84383392]
[146.27011108 -120.68503571]
[148.44696045 -135.52624512]
[150.62379456 -150.36744690]
[137.15768433 -157.29150391]
[126.67124176 -168.21456909]
[120.30196381 -181.95178223]
[118.74073029 -197.01303101]
[122.15690613 -211.76458740]
[130.17991638 -224.60632324]
[141.93949890 -234.14524841]
[156.16004944 -239.34664917]
[171.29904175 -239.64633179]
[185.71429443 -235.01176453]
[197.84216309 -225.94570923]
[206.36709595 -213.43154907]
[210.36439514 -198.82673645]
[209.40043640 -183.71549988]
[203.57978821 -169.73698425]
[193.53384399 -158.40748596]
[180.35229492 -150.95593262]
[165.46499634 -148.19061279]
[163.28816223 -133.34941101]
[161.11132812 -118.50820160]
[158.93447876 -103.66699219]
[156.75764465 -88.82579041]
[154.58081055 -73.98458099]
[160.12646484 -68.93525696]
[174.41772461 -73.49159241]
[171.21778870 -58.83660889]
[176.76344299 -53.78728485]
[191.33615112 -57.34204483]
[205.90884399 -60.89680862]
[220.48155212 -64.45156860]
[235.05426025 -68.00633240]
[238.17871094 -82.94622803]
[247.48272705 -95.04573059]
[261.11898804 -101.90247345]
[276.38000488 -102.15505219]
[290.23571777 -95.75330353]
[299.93502808 -83.96830750]
[303.55215454 -69.13997650]
[300.36889648 -54.21250153]
[291.01730347 -42.14973068]
[277.35412598 -35.34673691]
[262.09222412 -35.15426636]
[248.26184082 -41.61052704]
[238.60902405 -53.43362808]
[224.03631592 -49.87886810]
[209.46360779 -46.32410431]
[194.89091492 -42.76934433]
[180.31820679 -39.21458054]
[167.79223633 -30.96229172]
[158.77471924 -18.97546005]
[149.75718689 -6.98862648]
[140.73965454 4.99820614]
[131.72212219 16.98503876]
[125.37499237 30.57598877]
[121.97201538 45.18488312]
[118.56903839 59.79377365]
[115.16606140 74.40266418]
[111.76308441 89.01155853]
[133.08717346 127.10468292]
[133.39923096 142.10144043]
[133.71128845 157.09819031]
[134.02334595 172.09494019]
[134.33540344 187.09169006]
[134.64744568 202.08845520]
[134.95950317 217.08520508]
[135.27156067 232.08195496]
[135.58361816 247.07870483]
[135.89567566 262.07546997]
[136.20773315 277.07220459]
[150.86273193 280.66299438]
[164.08853149 287.92523193]
[174.98339844 298.36383057]
[182.80450439 311.26705933]
[187.01856995 325.75512695]
[187.33828735 340.84020996]
[183.74186707 355.49380493]
[176.47450256 368.71682739]
[166.03170776 379.60766602]
[153.12547302 387.42376709]
[138.63578796 391.63226318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 33]
[25 32]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[41 52]
[42 51]
[43 50]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
