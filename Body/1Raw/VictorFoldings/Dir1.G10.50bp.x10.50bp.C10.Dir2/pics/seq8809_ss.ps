%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAACCCAGGGGGGGGGGGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCxxxxxxxxxxUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUCCCCCCCCCCGUAAAAUCCA\
) } def
/len { sequence length } bind def

/coor [
[71.68122101 347.19470215]
[59.12300110 338.84353638]
[49.03677750 327.63110352]
[42.05658340 314.26217651]
[38.62120056 299.57717896]
[38.94657898 284.49923706]
[43.01226044 269.97610474]
[50.56268311 256.92077637]
[61.12321091 246.15386963]
[74.03000641 238.35223389]
[88.47173309 234.00628662]
[87.84775543 219.01927185]
[87.22377777 204.03225708]
[86.59980011 189.04524231]
[85.97582245 174.05821228]
[85.35184479 159.07119751]
[84.72786713 144.08418274]
[84.10388947 129.09716797]
[72.90812683 119.11444855]
[57.94787598 120.20575714]
[42.98762894 121.29706573]
[28.02737999 122.38837433]
[23.60615730 125.40041351]
[18.93966484 126.28144836]
[14.89659786 125.30406189]
[12.10509014 123.05129242]
[-2.89409828 123.20732880]
[-17.89328766 123.36336517]
[-32.86407852 124.29899597]
[-47.76597977 126.01168823]
[-62.66788483 127.72437286]
[-77.56978607 129.43705750]
[-92.47168732 131.14974976]
[-107.51686859 138.96505737]
[-119.19166565 126.67133331]
[-110.61029053 112.04955292]
[-94.18437958 116.24784851]
[-79.28247833 114.53516388]
[-64.38056946 112.82247162]
[-49.47867203 111.10977936]
[-34.57676697 109.39709473]
[-44.24068832 97.92501068]
[-41.50617981 83.17636871]
[-28.37195206 75.93122864]
[-14.43805981 81.48520660]
[-9.88905144 95.77878571]
[-18.04932404 108.36418152]
[-3.05013490 108.20814514]
[11.94905376 108.05210876]
[26.93606949 107.42813110]
[41.89631653 106.33681488]
[56.85656738 105.24550629]
[71.81681824 104.15419769]
[75.05832672 90.11248779]
[84.37606812 80.26325989]
[96.58274078 76.73498535]
[108.06507874 79.68544006]
[118.04779816 68.48967743]
[128.03053284 57.29390717]
[138.01325989 46.09814453]
[147.99598694 34.90237808]
[137.80751038 23.87738228]
[128.73066711 11.92051697]
[120.85023499 -0.85657912]
[114.23976898 -14.33460712]
[108.96099091 -28.38772392]
[105.06320190 -42.88471222]
[102.58278656 -57.69021988]
[101.54290771 -72.66600800]
[101.95326996 -87.67224121]
[103.81004333 -102.56881714]
[107.09589386 -117.21663666]
[111.78013611 -131.47894287]
[117.81904602 -145.22256470]
[125.15622711 -158.31918335]
[133.72317505 -170.64649963]
[143.43989563 -182.08944702]
[154.21568298 -192.54113770]
[165.94990540 -201.90402222]
[178.53300476 -210.09066772]
[191.84748840 -217.02464294]
[205.76904297 -222.64118958]
[220.16770935 -226.88786316]
[234.90899658 -229.72503662]
[249.85531616 -231.12620544]
[264.86709595 -231.07829285]
[279.80413818 -229.58172607]
[294.52703857 -226.65051270]
[308.89828491 -222.31199646]
[322.78372192 -216.60668945]
[336.05364990 -209.58786011]
[348.58422852 -201.32106018]
[360.25845337 -191.88345337]
[370.96728516 -181.36317444]
[380.61074829 -169.85844421]
[389.09884644 -157.47666931]
[396.35226440 -144.33348083]
[402.30331421 -130.55158997]
[406.89639282 -116.25967407]
[410.08868408 -101.59117126]
[411.85031128 -86.68305206]
[412.16488647 -71.67449951]
[411.02941895 -56.70565796]
[408.45452881 -41.91628647]
[404.46426392 -27.44447327]
[399.09588623 -13.42534351]
[392.39950562 0.01020892]
[384.43765259 12.73673630]
[375.28466797 24.63541222]
[365.02603149 35.59513855]
[353.75750732 45.51358414]
[341.58428955 54.29814529]
[328.62005615 61.86679459]
[314.98587036 68.14886475]
[300.80902100 73.08570862]
[286.22186279 76.63121796]
[271.36062622 78.75229645]
[256.36404419 79.42914581]
[241.37216187 78.65543365]
[226.52493286 76.43838501]
[211.96098328 72.79871368]
[197.81632996 67.77038574]
[184.22300720 61.40036392]
[171.30795288 53.74811935]
[159.19174194 44.88510513]
[149.20901489 56.08086777]
[139.22628784 67.27663422]
[129.24356079 78.47240448]
[119.26084137 89.66816711]
[121.39159393 113.26822662]
[99.09091187 128.47319031]
[99.71488190 143.46020508]
[100.33885956 158.44721985]
[100.96283722 173.43424988]
[101.58681488 188.42126465]
[102.21079254 203.40827942]
[102.83477020 218.39529419]
[103.45874786 233.38230896]
[118.21175385 236.51275635]
[131.72239685 243.21450806]
[143.14137268 253.06629944]
[151.75088501 265.44882202]
[157.00973511 279.58370972]
[158.58734131 294.58245850]
[156.38453674 309.50219727]
[150.53977966 323.40505981]
[141.42050171 335.41711426]
[129.59992981 344.78326416]
[115.82112122 350.91476440]
[100.95022583 353.42617798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 53]
[20 52]
[21 51]
[22 50]
[26 49]
[27 48]
[28 47]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[57 129]
[58 128]
[59 127]
[60 126]
[61 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
