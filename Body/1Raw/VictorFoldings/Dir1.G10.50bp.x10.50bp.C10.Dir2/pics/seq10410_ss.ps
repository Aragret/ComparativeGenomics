%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAUAUCACGGGGGGGGGGUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUxxxxxxxxxxCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCCCCCCCCCCCUCAACUAUCAC\
) } def
/len { sequence length } bind def

/coor [
[91.91851807 531.10699463]
[79.58541107 522.45587158]
[69.48696136 511.27691650]
[62.12970734 498.13085938]
[57.88268661 483.67712402]
[56.95892715 468.64068604]
[59.40476608 453.77578735]
[65.09751892 439.82800293]
[73.75164032 427.49697876]
[84.93304443 417.40124512]
[98.08087158 410.04718018]
[112.53564453 405.80364990]
[111.61222839 390.83212280]
[110.68881226 375.86056519]
[109.76540375 360.88900757]
[108.84198761 345.91744995]
[107.91857147 330.94592285]
[106.99516296 315.97436523]
[106.07174683 301.00280762]
[105.14833069 286.03125000]
[104.22492218 271.05972290]
[103.30150604 256.08816528]
[89.15528107 251.31179810]
[77.88494110 241.45661926]
[71.22839355 228.00093079]
[70.22792053 212.98139954]
[75.06703949 198.68466187]
[85.03784943 187.29931641]
[98.64437103 180.58082581]
[97.72096252 165.60926819]
[96.64389038 150.64799500]
[95.41327667 135.69856262]
[94.18266296 120.74912262]
[79.04880524 105.04131317]
[85.38054657 84.16841125]
[79.67588806 70.29553223]
[73.97122192 56.42264938]
[59.57258987 60.67510986]
[44.81302643 63.42452621]
[29.84899139 64.64175415]
[14.83910942 64.31389618]
[-0.05750390 62.44441986]
[-14.68293667 59.05314255]
[-28.88215065 54.17601776]
[-42.50462723 47.86474609]
[-55.40596008 40.18622589]
[-67.44938660 31.22185898]
[-78.50724030 21.06666946]
[-88.46230316 9.82830906]
[-97.20904541 -2.37408972]
[-104.65474701 -15.41117382]
[-110.72048187 -29.14474487]
[-115.34194183 -43.42921448]
[-118.47013855 -58.11316681]
[-120.07192230 -73.04093933]
[-120.13030243 -88.05428314]
[-118.64466095 -102.99405670]
[-115.63074493 -117.70189667]
[-111.12051392 -132.02188110]
[-105.16177368 -145.80220032]
[-97.81768036 -158.89678955]
[-89.16609955 -171.16683960]
[-79.29873657 -182.48228455]
[-68.32019043 -192.72315979]
[-56.34684372 -201.78091431]
[-43.50561523 -209.55953979]
[-29.93263245 -215.97656250]
[-15.77177620 -220.96395874]
[-1.17315936 -224.46887207]
[13.70846462 -226.45414734]
[28.71534157 -226.89872742]
[43.68839264 -225.79789734]
[58.46889114 -223.16334534]
[72.90016174 -219.02299500]
[86.82921600 -213.42073059]
[100.10840607 -206.41592407]
[112.59696198 -198.08285522]
[124.16249084 -188.50985718]
[134.68240356 -177.79838562]
[144.04518127 -166.06201172]
[152.15156555 -153.42514038]
[158.91563416 -140.02172852]
[164.26567078 -125.99386597]
[168.14498901 -111.49024200]
[170.51242065 -96.66461945]
[171.34291077 -81.67414093]
[170.62763977 -66.67772675]
[168.37419128 -51.83434677]
[164.60646057 -37.30134583]
[159.36436462 -23.23277855]
[152.70349121 -9.77778530]
[144.69445801 2.92100549]
[135.42214966 14.72898006]
[124.98485565 25.52096558]
[113.49322510 35.18256378]
[101.06906891 43.61135483]
[87.84410095 50.71798706]
[93.54876709 64.59086609]
[99.25343323 78.46374512]
[104.56953430 78.94087219]
[109.60530090 80.70996094]
[114.05178833 83.66247559]
[117.63620758 87.61728668]
[132.14483643 83.80942535]
[146.65345764 80.00156403]
[161.16207886 76.19371033]
[172.43041992 64.27915192]
[188.31800842 68.34323883]
[192.48104858 84.20517731]
[180.63697815 95.54756927]
[164.96994019 90.70233154]
[150.46131897 94.51019287]
[135.95269775 98.31804657]
[121.44406891 102.12590790]
[117.58837891 112.45055389]
[109.13210297 119.51850891]
[110.36270905 134.46794128]
[111.59332275 149.41737366]
[115.43674469 157.77345276]
[112.69251251 164.68586731]
[113.61592102 179.65740967]
[127.94494629 184.65289307]
[139.23930359 194.72665405]
[145.79864502 208.32034302]
[146.65147400 223.34899902]
[141.69892883 237.52070618]
[131.72509766 248.68618774]
[118.27305603 255.16474915]
[119.19647217 270.13629150]
[120.11988068 285.10784912]
[121.04329681 300.07940674]
[121.96671295 315.05096436]
[122.89012146 330.02249146]
[123.81353760 344.99404907]
[124.73695374 359.96560669]
[125.66036224 374.93716431]
[126.58377838 389.90869141]
[127.50719452 404.88024902]
[142.37388611 407.31527710]
[156.32579041 412.99789429]
[168.66308594 421.64303589]
[178.76695251 432.81710815]
[186.13056946 445.95959473]
[190.38459778 460.41128540]
[191.31564331 475.44726562]
[188.87701416 490.31335449]
[183.19100952 504.26388550]
[174.54286194 516.59906006]
[163.36636353 526.70025635]
[150.22209167 534.06066895]
[135.76937866 538.31121826]
[120.73317719 539.23858643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[29 121]
[30 120]
[31 118]
[32 117]
[33 116]
[35 99]
[36 98]
[37 97]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
