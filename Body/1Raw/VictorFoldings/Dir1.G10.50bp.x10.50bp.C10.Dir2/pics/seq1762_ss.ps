%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUACGCAUGGGGGGGGGGUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACxxxxxxxxxxGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCCCCCCCCCCCUACUCAU\
) } def
/len { sequence length } bind def

/coor [
[72.68669128 474.43820190]
[58.66474915 468.88519287]
[46.46479034 460.01885986]
[36.85372162 448.39657593]
[30.43569565 434.74887085]
[27.61415863 419.93368530]
[28.56647301 404.88229370]
[33.23278046 390.54086304]
[41.31974411 377.81091309]
[52.31901932 367.49264526]
[65.53917694 360.23468018]
[80.14919281 356.49322510]
[80.14919281 341.49322510]
[80.14919281 326.49322510]
[80.14919281 311.49322510]
[80.14919281 296.49322510]
[80.14919281 281.49322510]
[80.14919281 266.49322510]
[80.14919281 251.49324036]
[80.14919281 236.49324036]
[80.14919281 221.49324036]
[78.19875336 219.39875793]
[76.98713684 216.38194275]
[76.87889099 212.73022461]
[78.12407684 208.86071777]
[80.81558228 205.27526855]
[78.21385193 198.30796814]
[82.22802734 190.03257751]
[83.76531982 175.11155701]
[81.30718994 168.09231567]
[85.49042511 159.90107727]
[87.33374786 145.01477051]
[89.17707062 130.12846375]
[91.02040100 115.24215698]
[84.02616119 106.52139282]
[83.76221466 95.62464142]
[89.99871826 87.02761841]
[86.04210663 72.55885315]
[82.08549500 58.09008408]
[78.12888336 43.62131500]
[69.43737793 55.84661102]
[54.67979813 58.53245544]
[42.23833466 50.15331650]
[39.17964935 35.46847916]
[47.24105453 22.81882286]
[61.84373093 19.38926315]
[74.69393158 27.12838745]
[72.54535675 12.28306484]
[70.39677429 -2.56225753]
[58.94616318 -4.48543024]
[48.61169052 -11.60377502]
[41.75896454 -23.22230721]
[40.32124329 -37.58134460]
[45.33177567 -52.11624908]
[37.17510986 -64.70468903]
[29.01844597 -77.29312897]
[20.86178017 -89.88156891]
[12.70511436 -102.47000122]
[4.54844856 -115.05844116]
[-3.60821700 -127.64688110]
[-18.45050430 -134.62101746]
[-19.56206322 -150.98245239]
[-5.79941893 -159.89994812]
[8.67960167 -152.19993591]
[8.98022270 -135.80354309]
[17.13688850 -123.21511078]
[25.29355431 -110.62667084]
[33.45021820 -98.03823090]
[41.60688400 -85.44979095]
[49.76354980 -72.86135101]
[57.92021561 -60.27291489]
[65.41389465 -60.58082581]
[64.29096222 -75.53873444]
[63.16803741 -90.49664307]
[55.80737686 -103.56648254]
[63.10924149 -116.66925812]
[78.09659576 -117.28507996]
[86.44879913 -104.82551575]
[80.18521118 -91.19587708]
[80.29322815 -76.19626617]
[80.40124512 -61.19665146]
[87.89492035 -61.50456619]
[94.99132538 -74.71974945]
[102.08773041 -87.93492889]
[109.18413544 -101.15011597]
[116.28053284 -114.36529541]
[115.23497009 -130.73107910]
[129.03346252 -139.59298706]
[143.48132324 -131.83465576]
[143.71580505 -115.43719482]
[129.49571228 -107.26889038]
[122.39931488 -94.05371094]
[115.30290985 -80.83852386]
[108.20651245 -67.62334442]
[101.11010742 -54.40816116]
[105.46656799 -22.57637405]
[85.24209595 -4.71083689]
[87.39067841 10.13448620]
[89.53925323 24.97980881]
[92.59764862 39.66470718]
[96.55426025 54.13347244]
[100.51087189 68.60224152]
[104.46748352 83.07100677]
[116.52991486 91.98715973]
[131.52279663 91.52523041]
[146.51568604 91.06330872]
[161.50857544 90.60137939]
[167.40905762 87.40342712]
[173.16368103 87.67205048]
[177.12370300 90.44106293]
[192.12290955 90.59506226]
[207.12211609 90.74905396]
[219.54225159 80.59426117]
[235.19444275 84.11402130]
[242.07165527 98.60827637]
[234.89830017 112.95827484]
[219.17713928 116.15592957]
[206.96812439 105.74826813]
[191.96891785 105.59426880]
[176.96971130 105.44026947]
[161.97048950 105.59426880]
[146.97761536 106.05619049]
[131.98472595 106.51811981]
[116.99183655 106.98004913]
[105.90670776 117.08547974]
[104.06338501 131.97178650]
[102.22005463 146.85809326]
[100.37673187 161.74440002]
[98.68633270 176.64884949]
[97.14904022 191.56987000]
[95.76501465 206.50587463]
[95.14919281 221.49324036]
[95.14919281 236.49324036]
[95.14919281 251.49324036]
[95.14919281 266.49322510]
[95.14919281 281.49322510]
[95.14919281 296.49322510]
[95.14919281 311.49322510]
[95.14919281 326.49322510]
[95.14919281 341.49322510]
[95.14919281 356.49322510]
[109.75920105 360.23468018]
[122.97936249 367.49264526]
[133.97863770 377.81091309]
[142.06559753 390.54086304]
[146.73190308 404.88229370]
[147.68421936 419.93368530]
[144.86268616 434.74887085]
[138.44465637 448.39657593]
[128.83358765 460.01885986]
[116.63363647 468.88519287]
[102.61169434 474.43820190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 131]
[28 130]
[29 129]
[31 128]
[32 127]
[33 126]
[34 125]
[37 103]
[38 102]
[39 101]
[40 100]
[47 99]
[48 98]
[49 97]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
[104 124]
[105 123]
[106 122]
[107 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
