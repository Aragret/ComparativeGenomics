%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACACAAACAGGGGGGGGGGUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUxxxxxxxxxxCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUCCCCCCCCCCAUACACCAACA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 365.14846802]
[71.01555634 359.59545898]
[58.81560135 350.72912598]
[49.20452881 339.10684204]
[42.78650284 325.45913696]
[39.96496582 310.64395142]
[40.91728210 295.59255981]
[45.58358765 281.25112915]
[53.67055511 268.52117920]
[64.66983032 258.20291138]
[77.88998413 250.94493103]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[84.76270294 28.99632835]
[92.50000000 16.26905632]
[92.50000000 1.26905644]
[92.50000000 -13.73094368]
[92.50000000 -28.73094368]
[77.52907562 -29.75478554]
[62.66292953 -31.79789734]
[47.97085953 -34.85074997]
[33.52138138 -38.89911652]
[19.38185692 -43.92411423]
[5.61821413 -49.90231323]
[-7.70537233 -56.80585098]
[-20.52678299 -64.60252380]
[-32.78623581 -73.25599670]
[-44.42657471 -82.72591400]
[-55.39352417 -92.96811676]
[-65.63594818 -103.93486023]
[-75.10609436 -115.57500458]
[-83.75981140 -127.83428955]
[-91.55674744 -140.65553284]
[-98.46054840 -153.97898865]
[-104.43903351 -167.74250793]
[-109.46430969 -181.88192749]
[-113.51296997 -196.33132935]
[-116.56611633 -211.02333069]
[-118.60952759 -225.88945007]
[-119.63366699 -240.86035156]
[-119.63377380 -255.86624146]
[-118.60983276 -270.83715820]
[-116.56661987 -285.70327759]
[-113.51366425 -300.39532471]
[-109.46520233 -314.84478760]
[-104.44010925 -328.98428345]
[-98.46181488 -342.74789429]
[-91.55819702 -356.07141113]
[-83.76142883 -368.89279175]
[-75.10787964 -381.15216064]
[-65.63788605 -392.79244995]
[-55.39560699 -403.75933838]
[-44.42879486 -414.00167847]
[-32.78858566 -423.47174072]
[-20.52924728 -432.12539673]
[-7.70794106 -439.92224121]
[5.61555290 -446.82595825]
[19.37911415 -452.80435181]
[33.51856995 -457.82952881]
[47.96799850 -461.87808228]
[62.66002274 -464.93112183]
[77.52614594 -466.97445679]
[92.49705505 -467.99847412]
[107.50294495 -467.99847412]
[122.47385406 -466.97445679]
[137.33998108 -464.93112183]
[152.03199768 -461.87808228]
[166.48143005 -457.82952881]
[180.62088013 -452.80435181]
[194.38444519 -446.82595825]
[207.70794678 -439.92224121]
[220.52925110 -432.12539673]
[232.78858948 -423.47174072]
[244.42880249 -414.00167847]
[255.39559937 -403.75933838]
[265.63787842 -392.79244995]
[275.10787964 -381.15216064]
[283.76144409 -368.89279175]
[291.55819702 -356.07141113]
[298.46182251 -342.74789429]
[304.44012451 -328.98428345]
[309.46520996 -314.84478760]
[313.51367188 -300.39532471]
[316.56661987 -285.70327759]
[318.60983276 -270.83715820]
[319.63375854 -255.86624146]
[319.63366699 -240.86035156]
[318.60952759 -225.88945007]
[316.56613159 -211.02333069]
[313.51296997 -196.33132935]
[309.46432495 -181.88192749]
[304.43902588 -167.74250793]
[298.46054077 -153.97898865]
[291.55676270 -140.65553284]
[283.75982666 -127.83428955]
[275.10610962 -115.57500458]
[265.63595581 -103.93486023]
[255.39352417 -92.96811676]
[244.42657471 -82.72591400]
[232.78623962 -73.25599670]
[220.52677917 -64.60252380]
[207.70536804 -56.80585098]
[194.38179016 -49.90231323]
[180.61814880 -43.92411423]
[166.47862244 -38.89911652]
[152.02914429 -34.85074997]
[137.33706665 -31.79789734]
[122.47092438 -29.75478554]
[107.50000000 -28.73094368]
[107.50000000 -13.73094368]
[107.50000000 1.26905644]
[107.50000000 16.26905632]
[115.23729706 28.99632835]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[122.11001587 250.94493103]
[135.33016968 258.20291138]
[146.32945251 268.52117920]
[154.41641235 281.25112915]
[159.08271790 295.59255981]
[160.03503418 310.64395142]
[157.21350098 325.45913696]
[150.79547119 339.10684204]
[141.18440247 350.72912598]
[128.98443604 359.59545898]
[114.96250153 365.14846802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[25 128]
[26 127]
[28 125]
[29 124]
[30 123]
[31 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
