%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCCACAGGGGGGGGGGAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUxxxxxxxxxxCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACCCCCCCCCCCUAAACCCCCA\
) } def
/len { sequence length } bind def

/coor [
[83.97846985 393.23016357]
[70.75827026 385.95767212]
[59.87146759 375.51068115]
[52.06033707 362.60144043]
[47.85745621 348.11010742]
[47.54938507 333.02478027]
[51.15712357 318.37396240]
[58.43469620 305.15655518]
[68.88590240 294.27380371]
[81.79816437 286.46765137]
[96.29110718 282.27035522]
[95.97904968 267.27362061]
[95.66699219 252.27685547]
[95.35493469 237.28010559]
[95.04287720 222.28334045]
[94.73081970 207.28659058]
[94.41876984 192.28984070]
[94.10671234 177.29309082]
[93.79465485 162.29632568]
[93.48259735 147.29957581]
[79.19144440 142.97360229]
[66.93531799 134.44493103]
[57.91281891 122.54763794]
[53.00633621 108.44524384]
[52.69570541 93.51692963]
[57.01130295 79.22264099]
[65.53108215 66.96032715]
[77.42182159 57.92919540]
[91.52064514 53.01247787]
[91.20859528 38.01572418]
[90.89653778 23.01897049]
[88.11843109 18.44713211]
[87.48119354 13.74114609]
[88.66745758 9.75436115]
[91.06230927 7.08374882]
[91.68628693 -7.90326738]
[92.31026459 -22.89028358]
[77.41062164 -24.68884277]
[62.69802856 -27.65087891]
[48.26319122 -31.75812721]
[34.19510269 -36.98526764]
[20.58050156 -43.30006790]
[7.50332642 -50.66360092]
[-4.95579529 -59.03046036]
[-16.72004890 -68.34906769]
[-27.71690178 -78.56196594]
[-37.87855530 -89.60619354]
[-47.14235687 -101.41365051]
[-55.45119476 -113.91154480]
[-62.75383759 -127.02281952]
[-69.00526428 -140.66664124]
[-74.16693115 -154.75888062]
[-78.20700836 -169.21266174]
[-81.10060120 -183.93887329]
[-82.82985687 -198.84671021]
[-83.38411713 -213.84426880]
[-82.75997162 -228.83909607]
[-80.96125793 -243.73870850]
[-77.99906921 -258.45126343]
[-73.89167786 -272.88607788]
[-68.66439056 -286.95410156]
[-62.34945297 -300.56863403]
[-54.98578644 -313.64575195]
[-46.61879730 -326.10479736]
[-37.30007172 -337.86892700]
[-27.08705902 -348.86569214]
[-16.04273224 -359.02722168]
[-4.23517895 -368.29092407]
[8.26279926 -376.59960938]
[21.37414742 -383.90213013]
[35.01802826 -390.15341187]
[49.11032486 -395.31494141]
[63.56414795 -399.35485840]
[78.29039001 -402.24832153]
[93.19824982 -403.97741699]
[108.19581604 -404.53152466]
[123.19062805 -403.90722656]
[138.09022522 -402.10836792]
[152.80276489 -399.14602661]
[167.23751831 -395.03848267]
[181.30549622 -389.81106567]
[194.91996765 -383.49597168]
[207.99699402 -376.13217163]
[220.45594788 -367.76504517]
[232.22001648 -358.44619751]
[243.21665955 -348.23309326]
[253.37808228 -337.18865967]
[262.64163208 -325.38101196]
[270.95022583 -312.88293457]
[278.25259399 -299.77151489]
[284.50375366 -286.12756348]
[289.66513062 -272.03521729]
[293.70492554 -257.58135986]
[296.59820557 -242.85510254]
[298.32714844 -227.94721985]
[298.88110352 -212.94964600]
[298.25665283 -197.95483398]
[296.45764160 -183.05525208]
[293.49514771 -168.34275818]
[289.38745117 -153.90803528]
[284.15988159 -139.84010315]
[277.84466553 -126.22570038]
[270.48074341 -113.14875031]
[262.11349487 -100.68988800]
[252.79452515 -88.92591858]
[242.58129883 -77.92938232]
[231.53675842 -67.76806641]
[219.72901917 -58.50462341]
[207.23086548 -50.19617081]
[194.11936951 -42.89392853]
[180.47535706 -36.64292145]
[166.38296509 -31.48168755]
[151.92904663 -27.44204903]
[137.20275879 -24.54891014]
[122.29486084 -22.82011032]
[107.29727936 -22.26630592]
[106.67330170 -7.27929020]
[106.04932404 7.70772600]
[105.89328766 22.70691490]
[106.20534515 37.70366669]
[106.51740265 52.70042038]
[120.80855560 57.02639389]
[133.06468201 65.55506897]
[142.08717346 77.45236206]
[146.99366760 91.55475616]
[147.30429077 106.48307037]
[142.98869324 120.77735901]
[134.46891785 133.03967285]
[122.57817841 142.07080078]
[108.47935486 146.98751831]
[108.79140472 161.98426819]
[109.10346222 176.98103333]
[109.41551971 191.97778320]
[109.72757721 206.97453308]
[110.03963470 221.97128296]
[110.35169220 236.96804810]
[110.66374207 251.96479797]
[110.97579956 266.96154785]
[111.28785706 281.95831299]
[125.94284821 285.54907227]
[139.16865540 292.81134033]
[150.06352234 303.24993896]
[157.88462830 316.15313721]
[162.09869385 330.64120483]
[162.41841125 345.72628784]
[158.82199097 360.37991333]
[151.55462646 373.60290527]
[141.11183167 384.49374390]
[128.20559692 392.30984497]
[113.71590424 396.51834106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 121]
[30 120]
[31 119]
[35 118]
[36 117]
[37 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
