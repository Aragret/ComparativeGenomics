%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACCCCUGGGGGGGGGGCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAxxxxxxxxxxCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCACCCCCCCCCCUCCUAACCCU\
) } def
/len { sequence length } bind def

/coor [
[74.79938507 383.75036621]
[60.95344543 377.73434448]
[49.24478531 368.20492554]
[40.54225922 355.86926270]
[35.49165726 341.64273071]
[34.46776581 326.58105469]
[37.54656601 311.80187988]
[44.49958801 298.40194702]
[54.81087112 287.37564087]
[67.71525574 279.54110718]
[82.25514221 275.47979736]
[82.25514221 260.47979736]
[82.25514221 245.47979736]
[82.25514221 230.47979736]
[82.25514221 215.47979736]
[82.25514221 200.47979736]
[82.25514221 185.47979736]
[82.25514221 170.47979736]
[82.25514221 155.47979736]
[82.25514221 140.47979736]
[76.81572723 135.31620789]
[69.62434387 148.47993469]
[63.38769531 162.12194824]
[48.66129303 164.97378540]
[37.78280640 154.64622498]
[39.86614990 139.79161072]
[53.16484451 132.85502625]
[65.93690491 124.98899841]
[60.49748993 119.82539368]
[45.51777267 120.60523987]
[30.53805923 121.38508606]
[15.55834579 122.16493225]
[7.21586180 135.24861145]
[-7.23603439 140.89859009]
[-22.24029350 136.94235229]
[-32.02746964 124.90113831]
[-32.83419800 109.40505219]
[-24.35027313 96.41264343]
[-9.83793545 90.91976166]
[5.12252235 95.03854370]
[14.77850056 107.18521881]
[29.75821495 106.40537262]
[44.73793030 105.62552643]
[59.71764374 104.84568024]
[60.96055984 94.62910461]
[64.67605591 85.34954071]
[70.47520447 77.57426453]
[77.84763336 71.73648071]
[86.20344543 68.11185455]
[94.91889191 66.80749512]
[103.38217926 67.76337433]
[111.03622437 70.76582336]
[119.54730988 58.41425323]
[128.05841064 46.06267929]
[136.56948853 33.71110535]
[125.01055908 24.13569069]
[114.34313965 13.57615471]
[104.65071869 2.11514592]
[96.00917053 -10.15763855]
[88.48611450 -23.14614296]
[82.14044189 -36.74871826]
[77.02180481 -50.85889816]
[73.17026520 -65.36624908]
[70.61597443 -80.15723419]
[69.37892151 -95.11608887]
[69.46878052 -110.12574005]
[70.88485718 -125.06870270]
[73.61606598 -139.82804871]
[77.64103699 -154.28823853]
[82.92826080 -168.33612061]
[89.43635559 -181.86174011]
[97.11438751 -194.75923157]
[105.90226746 -206.92767334]
[115.73121643 -218.27180481]
[126.52430725 -228.70285034]
[138.19706726 -238.13917542]
[150.65814209 -246.50692749]
[163.80999756 -253.74061584]
[177.54971313 -259.78363037]
[191.76974487 -264.58865356]
[206.35881042 -268.11810303]
[221.20271301 -270.34432983]
[236.18528748 -271.24993896]
[251.18927002 -270.82781982]
[266.09722900 -269.08129883]
[280.79248047 -266.02404785]
[295.16003418 -261.67996216]
[309.08743286 -256.08306885]
[322.46566772 -249.27714539]
[335.19003296 -241.31547546]
[347.16094971 -232.26037598]
[358.28472900 -222.18270874]
[368.47430420 -211.16136169]
[377.64990234 -199.28256226]
[385.73974609 -186.63931274]
[392.68054199 -173.33053589]
[398.41790771 -159.46041870]
[402.90695190 -145.13749695]
[406.11257935 -130.47389221]
[408.00967407 -115.58433533]
[408.58340454 -100.58538818]
[407.82925415 -85.59442902]
[405.75314331 -70.72878265]
[402.37130737 -56.10480118]
[397.71023560 -41.83693695]
[391.80639648 -28.03685188]
[384.70599365 -14.81255913]
[376.46459961 -2.26755619]
[367.14672852 9.49997330]
[356.82528687 20.39793015]
[345.58105469 30.34102249]
[333.50207520 39.25143051]
[320.68283081 47.05941772]
[307.22366333 53.70387268]
[293.22994995 59.13279343]
[278.81115723 63.30369186]
[264.08016968 66.18392181]
[249.15228271 67.75093842]
[234.14430237 67.99249268]
[219.17370605 66.90667725]
[204.35766602 64.50199127]
[189.81213379 60.79726410]
[175.65093994 55.82148743]
[161.98493958 49.61360168]
[148.92106628 42.22219849]
[140.40997314 54.57376862]
[131.89888000 66.92533875]
[123.38779449 79.27691650]
[134.28851318 102.15588379]
[124.70773315 128.16232300]
[97.25514221 140.47979736]
[97.25514221 155.47979736]
[97.25514221 170.47979736]
[97.25514221 185.47979736]
[97.25514221 200.47979736]
[97.25514221 215.47979736]
[97.25514221 230.47979736]
[97.25514221 245.47979736]
[97.25514221 260.47979736]
[97.25514221 275.47979736]
[111.79502869 279.54110718]
[124.69940948 287.37564087]
[135.01069641 298.40194702]
[141.96371460 311.80187988]
[145.04251099 326.58105469]
[144.01861572 341.64273071]
[138.96801758 355.86926270]
[130.26548767 368.20492554]
[118.55683136 377.73434448]
[104.71089172 383.75036621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 44]
[30 43]
[31 42]
[32 41]
[52 128]
[53 127]
[54 126]
[55 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
