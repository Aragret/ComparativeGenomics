%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUAAUAGGGGGGGGGGACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAxxxxxxxxxxAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCCCCCCCCCCCAUAAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[64.33980560 468.11840820]
[51.78158188 459.76724243]
[41.69535828 448.55480957]
[34.71516418 435.18588257]
[31.27978134 420.50088501]
[31.60515785 405.42294312]
[35.67084122 390.89981079]
[43.22126007 377.84448242]
[53.78179169 367.07757568]
[66.68858337 359.27593994]
[81.13031006 354.92999268]
[80.50633240 339.94299316]
[79.88236237 324.95596313]
[79.25838470 309.96893311]
[78.63440704 294.98193359]
[78.01042938 279.99490356]
[77.38645172 265.00790405]
[76.76247406 250.02087402]
[76.13849640 235.03385925]
[75.51451874 220.04684448]
[72.07162476 213.45199585]
[75.03673553 204.74223328]
[66.50671387 196.10823059]
[66.16146088 183.57427979]
[74.73474884 173.88136292]
[74.73474884 158.88136292]
[74.73474884 143.88136292]
[74.73474884 128.88136292]
[65.59300995 116.98899078]
[51.09741592 113.13182831]
[36.60182190 109.27467346]
[22.10622406 105.41751099]
[7.61062717 101.56035614]
[-6.88496923 97.70319366]
[-21.38056564 93.84603119]
[-29.79689598 106.43349457]
[-41.84585571 115.60416412]
[-56.22047043 120.36328888]
[-71.36148071 120.19461823]
[-85.62651062 115.11647034]
[-97.46819305 105.67966461]
[-105.60203552 92.90784454]
[-109.14572906 78.18639374]
[-107.71488953 63.11220169]
[-101.46472168 49.32038879]
[-91.07319641 38.30699158]
[-77.66750336 31.26666260]
[-62.70180130 28.96308327]
[-47.79945374 31.64612770]
[-34.57695389 39.02476120]
[-24.46858215 50.29860306]
[-18.57081795 64.24475098]
[-17.52340698 79.35043335]
[-3.02780986 83.20759583]
[11.46778679 87.06475830]
[25.96338272 90.92191315]
[40.45898056 94.77907562]
[54.95457458 98.63623047]
[69.45017242 102.49339294]
[69.84932709 88.42828369]
[76.70670319 75.31697083]
[89.19474030 66.09807587]
[105.17081451 63.13505173]
[109.47840118 48.76686859]
[113.78598022 34.39868546]
[118.09356689 20.03050041]
[104.72090912 13.13945198]
[92.84230804 3.90832806]
[82.86236572 -7.34846258]
[75.12097931 -20.24751663]
[69.88182831 -34.34949875]
[67.32334900 -49.17410278]
[67.53268433 -64.21640015]
[70.50270844 -78.96406555]
[76.13225555 -92.91479492]
[84.22959137 -105.59343719]
[94.51892090 -116.56814575]
[106.64979553 -125.46514130]
[120.20903778 -131.98139954]
[134.73483276 -135.89495850]
[149.73243713 -137.07254028]
[164.69102478 -135.47402954]
[179.10112000 -131.15388489]
[192.47192383 -124.25923157]
[204.34802246 -115.02490997]
[214.32493591 -103.76542664]
[222.06285095 -90.86428833]
[227.29820251 -76.76089478]
[229.85267639 -61.93560028]
[229.63929749 -46.89335632]
[226.66529846 -32.14649200]
[221.03198242 -18.19728088]
[212.93122864 -5.52082825]
[202.63894653 5.45111132]
[190.50567627 14.34483719]
[176.94467163 20.85743332]
[162.41783142 24.76708221]
[147.41990662 25.94062233]
[132.46174622 24.33808517]
[128.15417480 38.70626831]
[123.84658051 53.07445145]
[119.53900146 67.44263458]
[123.92210388 73.52855682]
[132.78944397 61.43020248]
[147.03576660 66.12513733]
[146.97279358 81.12500000]
[132.68830872 85.70039368]
[137.07141113 91.78630829]
[152.06410217 92.25434875]
[167.05680847 92.72239685]
[182.04949951 93.19043732]
[194.67955017 83.29794312]
[210.25459290 87.14468384]
[216.82679749 101.77976990]
[209.35452271 115.97640991]
[193.56987000 118.84416199]
[181.58146667 108.18313599]
[166.58876038 107.71508789]
[151.59606934 107.24704742]
[136.60337830 106.77900696]
[125.40579987 124.12365723]
[107.64366150 131.94102478]
[89.73474884 128.88136292]
[89.73474884 143.88136292]
[89.73474884 158.88136292]
[89.73474884 173.88136292]
[99.31747437 189.57057190]
[90.03349304 204.43017578]
[90.50153351 219.42286682]
[91.12551117 234.40988159]
[91.74948883 249.39691162]
[92.37346649 264.38391113]
[92.99744415 279.37094116]
[93.62142181 294.35794067]
[94.24539948 309.34497070]
[94.86937714 324.33197021]
[95.49335480 339.31900024]
[96.11733246 354.30603027]
[110.87033081 357.43646240]
[124.38097382 364.13821411]
[135.79994202 373.98999023]
[144.40946960 386.37252808]
[149.66830444 400.50744629]
[151.24591064 415.50616455]
[149.04310608 430.42590332]
[143.19836426 444.32876587]
[134.07908630 456.34082031]
[122.25851440 465.70697021]
[108.47970581 471.83847046]
[93.60880280 474.34988403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 128]
[25 126]
[26 125]
[27 124]
[28 123]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[63 102]
[64 101]
[65 100]
[66 99]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
