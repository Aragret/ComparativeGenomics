%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACCCCCUGGGGGGGGGGCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUxxxxxxxxxxACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUCCCCCCCCCCUCCACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[72.75650787 523.46215820]
[58.91057205 517.44616699]
[47.20191193 507.91671753]
[38.49938583 495.58105469]
[33.44878387 481.35455322]
[32.42489243 466.29284668]
[35.50369263 451.51370239]
[42.45671463 438.11376953]
[52.76799774 427.08743286]
[65.67237854 419.25292969]
[80.21226501 415.19161987]
[80.21226501 400.19161987]
[80.21226501 385.19161987]
[80.21226501 370.19161987]
[80.21226501 355.19161987]
[80.21226501 340.19161987]
[80.21226501 325.19161987]
[80.21226501 310.19161987]
[80.21226501 295.19161987]
[80.21226501 280.19161987]
[78.25860596 278.09625244]
[77.04522705 275.07604980]
[76.93811798 271.41949463]
[78.18815613 267.54541016]
[80.88816071 263.95773315]
[82.13503265 249.00964355]
[83.38190460 234.06155396]
[69.47975922 226.24295044]
[60.33306885 213.10546875]
[57.80677032 197.23928833]
[62.45441055 181.79954529]
[73.39781952 169.87882996]
[88.49257660 163.88780212]
[89.42820740 148.91700745]
[90.36383057 133.94621277]
[91.29946136 118.97542572]
[82.46778107 114.16178131]
[76.37308502 105.23442841]
[74.90015411 93.76696014]
[79.03402710 82.16658020]
[66.77165985 73.52745819]
[54.50928879 64.88834381]
[42.24692154 56.24922943]
[29.98455238 47.61011505]
[17.72218513 38.97099686]
[5.45981598 30.33188057]
[-7.84891319 37.80453110]
[-23.08246040 38.75414276]
[-37.21619797 32.99217606]
[-47.44385529 21.66266632]
[-51.73472977 7.01510143]
[-49.23685837 -8.04223633]
[-40.44620514 -20.51970100]
[-27.10815048 -27.93988228]
[-11.87098122 -28.82949829]
[2.23995423 -23.01191711]
[12.42291832 -11.64221954]
[16.65607643 3.02212906]
[14.09893227 18.06951332]
[26.36129951 26.70862961]
[38.62366867 35.34774399]
[50.88603592 43.98686218]
[63.14840317 52.62597656]
[75.41077423 61.26509476]
[87.67314148 69.90421295]
[102.49089813 67.57310486]
[111.50843048 55.58627319]
[120.52595520 43.59944153]
[129.54348755 31.61260796]
[138.56101990 19.62577629]
[124.24906158 24.11665154]
[109.38904572 22.07219315]
[96.82160187 13.88321877]
[88.94911957 1.11513138]
[87.27650452 -13.79132271]
[92.12349701 -27.98662758]
[102.56354523 -38.75720978]
[116.60092163 -44.04416656]
[131.55226135 -42.83684540]
[144.55944824 -35.36603546]
[153.13604736 -23.05985832]
[155.64254761 -8.27075863]
[151.60049438 6.17287302]
[163.30012512 -3.21428847]
[174.99975586 -12.60144997]
[181.23995972 -29.89421082]
[198.64009094 -31.95223427]
[210.14189148 -41.58076096]
[221.54292297 -51.32841492]
[232.84191895 -61.19413757]
[244.14093018 -71.05986023]
[241.78596497 -86.30641937]
[248.06863403 -100.39654541]
[260.98416138 -108.83412933]
[276.41122437 -108.92676544]
[289.42715454 -100.64488983]
[295.87857056 -86.63122559]
[293.70687866 -71.35748291]
[283.60504150 -59.69745636]
[268.79650879 -55.37181091]
[254.00665283 -59.76085281]
[242.70764160 -49.89513016]
[231.40864563 -40.02940750]
[228.41941833 -33.21690369]
[219.77041626 -30.07895851]
[208.26861572 -20.45043182]
[206.87249756 -8.39397430]
[197.31239319 -0.28080809]
[184.38691711 -0.90182674]
[172.68728638 8.48533535]
[160.98767090 17.87249756]
[150.54785156 28.64330482]
[141.53031921 40.63013840]
[132.51278687 52.61697006]
[123.49526215 64.60380554]
[114.47772980 76.59063721]
[124.01279449 103.00269318]
[106.27025604 119.91105652]
[105.33462524 134.88185120]
[104.39899445 149.85263062]
[103.46337128 164.82342529]
[116.07267761 171.28224182]
[125.23088837 182.03446960]
[129.57452393 195.42820740]
[128.47648621 209.42224121]
[122.13630676 221.89720154]
[111.54494476 230.97645569]
[98.32999420 235.30842590]
[97.08312225 250.25651550]
[95.83624268 265.20458984]
[95.21226501 280.19161987]
[95.21226501 295.19161987]
[95.21226501 310.19161987]
[95.21226501 325.19161987]
[95.21226501 340.19161987]
[95.21226501 355.19161987]
[95.21226501 370.19161987]
[95.21226501 385.19161987]
[95.21226501 400.19161987]
[95.21226501 415.19161987]
[109.75215149 419.25292969]
[122.65653229 427.08743286]
[132.96781921 438.11376953]
[139.92083740 451.51370239]
[142.99963379 466.29284668]
[141.97575378 481.35455322]
[136.92514038 495.58105469]
[128.22262573 507.91671753]
[116.51396179 517.44616699]
[102.66802216 523.46215820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[27 128]
[33 121]
[34 120]
[35 119]
[36 118]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[66 116]
[67 115]
[68 114]
[69 113]
[70 112]
[83 111]
[84 110]
[85 109]
[87 106]
[88 105]
[89 103]
[90 102]
[91 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
