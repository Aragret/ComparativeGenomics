%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAACUAUGGGGGGGGGGCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUxxxxxxxxxxACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCCCCCCCCCCCAAGCACUAU\
) } def
/len { sequence length } bind def

/coor [
[96.17556763 583.48358154]
[82.32962799 577.46759033]
[70.62096405 567.93817139]
[61.91844177 555.60247803]
[56.86783981 541.37597656]
[55.84394836 526.31427002]
[58.92274857 511.53512573]
[65.87577057 498.13519287]
[76.18704987 487.10885620]
[89.09143066 479.27435303]
[103.63131714 475.21304321]
[103.63131714 460.21304321]
[103.63131714 445.21304321]
[103.63131714 430.21304321]
[103.63131714 415.21304321]
[103.63131714 400.21304321]
[103.63131714 385.21304321]
[103.63131714 370.21304321]
[103.63131714 355.21304321]
[103.63131714 340.21304321]
[86.40061951 334.67391968]
[72.03225708 323.63076782]
[62.22158432 308.36724854]
[58.13268661 290.66613770]
[60.26027679 272.60107422]
[68.36991882 256.29364014]
[81.52372742 243.66416931]
[98.18881989 236.20568848]
[96.63124084 221.28677368]
[95.07366180 206.36787415]
[93.51607513 191.44895935]
[91.95849609 176.53004456]
[81.38534546 187.16998291]
[66.38726044 187.40971375]
[55.47946548 177.11311340]
[54.85490799 162.12611389]
[64.86817932 150.95765686]
[79.83420563 149.94866943]
[91.25667572 159.67338562]
[91.56873322 144.67663574]
[91.88079071 129.67988586]
[76.43968964 119.79214478]
[69.36436462 102.87662506]
[73.16711426 84.93968201]
[86.49765015 72.35034180]
[83.39933014 57.67381668]
[80.30101013 42.99729156]
[77.20269012 28.32076454]
[66.78175354 16.41636848]
[71.72332001 2.36538386]
[68.62499237 -12.31114197]
[62.27786636 -25.90209198]
[53.01291656 -37.69873428]
[43.74796677 -49.49537277]
[34.48301697 -61.29201126]
[18.98244858 -60.57649231]
[6.04019499 -69.13673401]
[0.63281816 -83.68114471]
[4.83956480 -98.61710358]
[17.04285431 -108.20143127]
[32.55027390 -108.74875641]
[45.39890289 -100.04862213]
[50.64818192 -85.44641113]
[46.27965927 -70.55696106]
[55.54460907 -58.76032257]
[64.80955505 -46.96368027]
[74.07450867 -35.16704178]
[72.26155853 -50.05707932]
[74.29128265 -64.91912079]
[80.03047943 -78.77774811]
[89.10246277 -90.72342682]
[100.91184235 -99.97212982]
[114.68354797 -105.91687775]
[129.51374817 -108.16749573]
[144.42910767 -106.57627869]
[158.45072937 -101.24766541]
[170.65835571 -92.53137207]
[180.25079346 -80.99945831]
[186.59849548 -67.40876770]
[189.28483582 -52.65127563]
[188.13351440 -37.69552231]
[183.22009277 -23.52307510]
[174.86705017 -11.06407547]
[163.62260437 -1.13622129]
[150.22471619 5.60891485]
[135.55273438 8.72864437]
[120.56956482 8.01821518]
[106.25857544 3.52425575]
[93.55901337 -4.45829344]
[83.30152130 -15.40946293]
[86.39984131 -0.73293781]
[96.59916687 10.12169456]
[91.87921143 25.22244263]
[94.97753143 39.89896774]
[98.07585907 54.57549286]
[101.17417908 69.25202179]
[108.01586151 70.29203796]
[114.45210266 72.83469391]
[120.15734863 76.75138092]
[124.84303284 81.84399414]
[138.74559021 76.21203613]
[146.29936218 62.05858994]
[162.10025024 59.28164291]
[174.02717590 70.01142883]
[172.93080139 86.01697540]
[159.65219116 95.02019501]
[144.37754822 90.11459351]
[130.47499084 95.74655151]
[128.84094238 110.72460938]
[120.29187012 123.13130188]
[106.87754059 129.99194336]
[106.56549072 144.98869324]
[106.25343323 159.98544312]
[106.87741089 174.97245789]
[108.43498993 189.89137268]
[109.99256897 204.81028748]
[111.55014801 219.72920227]
[113.10773468 234.64811707]
[125.08468628 236.51133728]
[136.32261658 241.02835083]
[146.24218750 247.96176147]
[154.33303833 256.94976807]
[160.18005371 267.52493286]
[163.48466492 279.13858032]
[164.08007812 291.18930054]
[161.93971252 303.05392456]
[157.17829895 314.11990356]
[150.04582214 323.81689453]
[140.91433716 331.64611816]
[130.25859070 337.20605469]
[118.63131714 340.21304321]
[118.63131714 355.21304321]
[118.63131714 370.21304321]
[118.63131714 385.21304321]
[118.63131714 400.21304321]
[118.63131714 415.21304321]
[118.63131714 430.21304321]
[118.63131714 445.21304321]
[118.63131714 460.21304321]
[118.63131714 475.21304321]
[133.17120361 479.27435303]
[146.07559204 487.10885620]
[156.38687134 498.13519287]
[163.33988953 511.53512573]
[166.41870117 526.31427002]
[165.39480591 541.37597656]
[160.34420776 555.60247803]
[151.64167786 567.93817139]
[139.93301392 577.46759033]
[126.08707428 583.48358154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 118]
[29 117]
[30 116]
[31 115]
[32 114]
[39 113]
[40 112]
[41 111]
[45 96]
[46 95]
[47 94]
[48 93]
[50 91]
[51 90]
[52 67]
[53 66]
[54 65]
[55 64]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
