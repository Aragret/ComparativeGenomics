%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUUUACAGGGGGGGGGGUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUxxxxxxxxxxCACUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCCCCCCCCCCCUCAAUUACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 407.44662476]
[71.19830322 401.43060303]
[59.48964310 391.90118408]
[50.78712082 379.56552124]
[45.73651886 365.33898926]
[44.71262741 350.27731323]
[47.79142761 335.49816895]
[54.74444962 322.09823608]
[65.05573273 311.07189941]
[77.96011353 303.23739624]
[92.50000000 299.17608643]
[92.50000000 284.17608643]
[92.50000000 269.17608643]
[92.50000000 254.17607117]
[92.50000000 239.17607117]
[92.50000000 224.17607117]
[92.50000000 209.17607117]
[92.50000000 194.17607117]
[92.50000000 179.17607117]
[92.50000000 164.17607117]
[78.48185730 160.92443848]
[65.53106689 154.65080261]
[54.29002380 145.66635132]
[45.31630707 134.41674805]
[39.05504227 121.45996857]
[35.81679535 107.43872833]
[35.76219940 93.04850769]
[38.89395905 79.00309753]
[25.36976814 72.51493073]
[11.84557819 66.02677155]
[-1.67861199 59.53860092]
[-15.20280170 53.05043793]
[-28.72699165 46.56227112]
[-42.25118256 40.07410812]
[-55.77537155 33.58594131]
[-71.56450653 34.59280396]
[-79.69284821 22.11164665]
[-93.21704102 15.62348175]
[-106.74123383 9.13531590]
[-113.45629120 9.25993347]
[-118.44429779 6.37011147]
[-120.68448639 2.08559704]
[-133.92707825 -4.95953798]
[-146.20184326 4.11200142]
[-161.19862366 6.95091677]
[-175.93977356 2.99354029]
[-187.49845886 -6.97438860]
[-193.57968140 -20.97373009]
[-192.97599792 -36.22490311]
[-185.80728149 -49.69977951]
[-173.49688721 -58.72291183]
[-158.48904419 -61.50274658]
[-143.76358032 -57.48735046]
[-132.24424744 -47.47398376]
[-126.21820068 -33.45080185]
[-126.88193512 -18.20212364]
[-113.63935089 -11.15698814]
[-100.25306702 -4.38887358]
[-86.72887421 2.09929132]
[-73.20468903 8.58745670]
[-58.38289261 7.11651802]
[-49.28720856 20.06175232]
[-35.76301575 26.54991722]
[-22.23882675 33.03808212]
[-8.71463680 39.52624893]
[4.80955315 46.01441193]
[18.33374214 52.50257874]
[31.85793304 58.99074173]
[45.38212204 65.47890472]
[51.14667130 57.71323395]
[58.00576782 50.89498138]
[65.80573273 45.17691422]
[74.37181854 40.68714905]
[83.51209259 37.52626801]
[93.02176666 35.76509857]
[102.68779755 35.44309616]
[112.29360199 36.56747055]
[121.62397766 39.11304092]
[130.46986389 43.02276230]
[138.63308716 48.20904922]
[145.93074036 54.55569839]
[152.19934082 61.92051315]
[157.29841614 70.13848877]
[171.31512451 64.79697418]
[185.33184814 59.45546722]
[182.24000549 44.74536514]
[181.48751831 29.73269463]
[183.09292603 14.78715515]
[187.01669312 0.27679330]
[193.16217041 -13.44106102]
[201.37805176 -26.02859116]
[211.46197510 -37.17581940]
[223.16566467 -46.60823822]
[236.20085144 -54.09355927]
[250.24658203 -59.44745255]
[264.95693970 -62.53807449]
[279.96966553 -63.28931808]
[294.91506958 -61.68267822]
[309.42510986 -57.75772476]
[323.14245605 -51.61110687]
[335.72930908 -43.39419556]
[346.87570190 -33.30934143]
[356.30715942 -21.60488701]
[363.79141235 -8.56906891]
[369.14413452 5.47709513]
[372.23355103 20.18770409]
[372.98355103 35.20050049]
[371.37567139 50.14577484]
[367.44952393 64.65548706]
[361.30178833 78.37232971]
[353.08383179 90.95850372]
[342.99804688 102.10406494]
[331.29281616 111.53455353]
[318.25637817 119.01772308]
[304.20977783 124.36930084]
[289.49893188 127.45749664]
[274.48605347 128.20625305]
[259.54092407 126.59715271]
[245.03152466 122.66980743]
[231.31520081 116.52092743]
[218.72970581 108.30193329]
[207.58497620 98.21524048]
[198.15545654 86.50923157]
[190.67335510 73.47217560]
[176.65664673 78.81369019]
[162.63992310 84.15520477]
[164.33547974 105.98030853]
[158.64622498 127.11896515]
[146.22521973 145.14474487]
[128.49819946 157.98854065]
[107.50000000 164.17607117]
[107.50000000 179.17607117]
[107.50000000 194.17607117]
[107.50000000 209.17607117]
[107.50000000 224.17607117]
[107.50000000 239.17607117]
[107.50000000 254.17607117]
[107.50000000 269.17608643]
[107.50000000 284.17608643]
[107.50000000 299.17608643]
[122.03988647 303.23739624]
[134.94427490 311.07189941]
[145.25555420 322.09823608]
[152.20857239 335.49816895]
[155.28736877 350.27731323]
[154.26348877 365.33898926]
[149.21287537 379.56552124]
[140.51036072 391.90118408]
[128.80169678 401.43060303]
[114.95575714 407.44662476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[37 60]
[38 59]
[39 58]
[42 57]
[43 56]
[83 126]
[84 125]
[85 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
