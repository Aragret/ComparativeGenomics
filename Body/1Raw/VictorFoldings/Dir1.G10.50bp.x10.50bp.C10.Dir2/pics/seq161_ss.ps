%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAAUUAAGGGGGGGGGGUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCxxxxxxxxxxAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAACCCCCCCCCCAAUUAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[79.02143860 397.34619141]
[65.17550659 391.33016968]
[53.46684265 381.80075073]
[44.76431656 369.46508789]
[39.71371460 355.23855591]
[38.68982315 340.17687988]
[41.76862335 325.39773560]
[48.72164536 311.99780273]
[59.03292847 300.97146606]
[71.93730927 293.13696289]
[86.47719574 289.07565308]
[86.47719574 274.07565308]
[86.47719574 259.07565308]
[86.47719574 244.07563782]
[86.47719574 229.07563782]
[86.47719574 214.07563782]
[86.47719574 199.07563782]
[86.47719574 184.07563782]
[86.47719574 169.07563782]
[86.47719574 154.07563782]
[86.47719574 139.07563782]
[82.16960907 124.70745850]
[72.54108429 113.20565796]
[61.66226196 102.87845612]
[50.78343582 92.55124664]
[39.90460968 82.22404480]
[29.02578545 71.89683533]
[18.14695930 61.56963348]
[7.26813459 51.24242783]
[-6.11815023 44.47431183]
[-20.88420677 41.83544922]
[-35.65026093 39.19658279]
[-50.41631699 36.55772018]
[-65.18237305 33.91885757]
[-76.23236084 40.65321350]
[-88.51008606 38.10831833]
[-95.50878906 28.19240189]
[-110.21675110 25.24691772]
[-124.92471313 22.30143547]
[-139.63267517 19.35595322]
[-154.98664856 25.11682701]
[-167.47909546 14.49276829]
[-164.25888062 -1.58710074]
[-148.63865662 -6.58118963]
[-136.68719482 4.64799213]
[-121.97923279 7.59347439]
[-107.27127075 10.53895664]
[-92.56330872 13.48443985]
[-76.30218506 6.95941782]
[-62.54350662 19.15279961]
[-47.77745438 21.79166412]
[-33.01139832 24.43052864]
[-18.24534225 27.06939316]
[-3.47928619 29.70825768]
[-14.62659264 19.67144775]
[-23.49157906 7.57136393]
[-29.70128059 -6.08292484]
[-32.99444580 -20.71696281]
[-33.23252869 -35.71507263]
[-30.40550995 -50.44626236]
[-24.63232803 -64.29077148]
[-16.15586853 -76.66613770]
[-5.33274841 -87.05170441]
[7.38168573 -95.01054382]
[21.45252037 -100.20781708]
[36.28777313 -102.42486572]
[51.26330185 -101.56840515]
[65.74906158 -97.67448425]
[79.13562775 -90.90691376]
[90.85978699 -81.55041504]
[100.42829895 -69.99864197]
[107.43860626 -56.73758316]
[111.59576416 -42.32515717]
[112.72487640 -27.36771393]
[110.77844238 -12.49453640]
[105.83835602 1.66863847]
[98.11244202 14.52594471]
[87.92575836 25.53645515]
[75.70685577 34.23694229]
[61.96981430 40.26136398]
[47.29256439 43.35626221]
[32.29260635 43.39143372]
[17.59533882 40.36360168]
[28.47416496 50.69080734]
[39.35298920 61.01801300]
[50.23181534 71.34521484]
[61.11064148 81.67242432]
[71.98946381 91.99962616]
[82.86829376 102.32683563]
[85.86083221 91.68549347]
[94.35099030 85.54853821]
[104.23875427 85.99753571]
[115.33007050 75.89888763]
[119.79284668 60.11865997]
[135.75456238 56.35626602]
[146.79518127 68.48213959]
[141.55705261 84.02222443]
[125.42871857 86.99020386]
[114.33740234 97.08885193]
[110.63861084 111.89643097]
[94.69557190 116.45516968]
[94.30011749 101.46038818]
[96.97239685 86.70034027]
[102.59998322 72.79601288]
[110.94611359 60.33238220]
[121.65965271 49.83380890]
[134.28987122 41.74198151]
[148.30538940 36.39734268]
[163.11656189 34.02474213]
[178.10025024 34.72400284]
[192.62608337 38.46570206]
[206.08291626 45.09242630]
[217.90461731 54.32537460]
[227.59382629 65.77610779]
[234.74290466 78.96286774]
[239.05107117 93.33087921]
[240.33708191 108.27565002]
[238.54682922 123.16843414]
[233.75564575 137.38267517]
[226.16506958 150.32034302]
[216.09448242 161.43713379]
[203.96755981 170.26536560]
[190.29449463 176.43360901]
[175.65052795 179.68235779]
[160.65176392 179.87493896]
[145.92922974 177.00323486]
[132.10229492 171.18806458]
[119.75270844 162.67410278]
[109.40002441 151.81951904]
[101.47719574 139.07563782]
[101.47719574 154.07563782]
[101.47719574 169.07563782]
[101.47719574 184.07563782]
[101.47719574 199.07563782]
[101.47719574 214.07563782]
[101.47719574 229.07563782]
[101.47719574 244.07563782]
[101.47719574 259.07565308]
[101.47719574 274.07565308]
[101.47719574 289.07565308]
[116.01708221 293.13696289]
[128.92146301 300.97146606]
[139.23274231 311.99780273]
[146.18577576 325.39773560]
[149.26457214 340.17687988]
[148.24067688 355.23855591]
[143.19007874 369.46508789]
[134.48754883 381.80075073]
[122.77889252 391.33016968]
[108.93295288 397.34619141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 101]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[37 48]
[38 47]
[39 46]
[40 45]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
