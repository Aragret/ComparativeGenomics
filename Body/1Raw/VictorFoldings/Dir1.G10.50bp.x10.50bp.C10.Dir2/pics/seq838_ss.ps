%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUAUGUAGCGGGGGGGGGGUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACxxxxxxxxxxGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCCCCCCCCCCCGUCUAUGUAGC\
) } def
/len { sequence length } bind def

/coor [
[89.45905304 510.50164795]
[77.12594604 501.85049438]
[67.02749634 490.67153931]
[59.67024231 477.52548218]
[55.42322159 463.07174683]
[54.49946213 448.03530884]
[56.94530106 433.17041016]
[62.63805389 419.22262573]
[71.29217529 406.89163208]
[82.47357941 396.79589844]
[95.62140656 389.44180298]
[110.07617950 385.19830322]
[109.15276337 370.22674561]
[108.22934723 355.25518799]
[107.30593872 340.28366089]
[106.38252258 325.31210327]
[105.45910645 310.34054565]
[104.53569794 295.36898804]
[103.61228180 280.39746094]
[102.68886566 265.42590332]
[101.76545715 250.45434570]
[100.84204102 235.48280334]
[88.19780731 227.65583801]
[82.51979065 213.71940613]
[86.17958832 198.93904114]
[97.97713470 189.03327942]
[97.05371857 174.06173706]
[96.13030243 159.09017944]
[85.76050568 157.47921753]
[75.83791351 154.06307983]
[66.67414093 148.94906616]
[58.55699539 142.29777527]
[51.74139023 134.31808472]
[46.44138336 125.26060486]
[42.82341766 115.40981293]
[41.00112152 105.07505798]
[41.03172302 94.58091736]
[42.91426849 84.25697327]
[46.58962631 74.42744446]
[51.94237137 65.40103912]
[58.80440140 57.46123505]
[66.96020508 50.85739517]
[76.15364838 45.79690552]
[71.90079498 31.41242599]
[67.64794922 17.02794456]
[58.02420425 28.53374863]
[43.02485657 28.39378548]
[33.61749268 16.71039963]
[36.68081665 2.02652979]
[49.97491074 -4.92091942]
[63.77866745 0.94759202]
[61.02242661 -13.79700470]
[58.26618195 -28.54160118]
[55.50994110 -43.28619766]
[52.02687073 -47.33878708]
[50.62981796 -51.87242126]
[51.14573288 -55.99594498]
[53.06735611 -59.02159882]
[51.22402954 -73.90790558]
[49.38070679 -88.79421234]
[47.53738022 -103.68051910]
[32.56678009 -105.45380402]
[18.45581818 -110.75891876]
[6.02489042 -119.28742218]
[-4.00328684 -130.54348755]
[-11.04568863 -143.87271118]
[-14.69287777 -158.50013733]
[-14.73281288 -173.57533264]
[-11.16317081 -188.22187805]
[-4.19148731 -201.58821106]
[5.77691412 -212.89726257]
[18.16248322 -221.49150085]
[32.24514008 -226.87130737]
[47.20613480 -228.72387695]
[62.17565918 -226.94151306]
[76.28340149 -221.62785339]
[88.70915985 -213.09181213]
[98.73050690 -201.82966614]
[105.76483154 -188.49618530]
[109.40314484 -173.86654663]
[109.43394470 -158.79132080]
[105.85542297 -144.14694214]
[98.87564087 -130.78483582]
[88.90038300 -119.48184204]
[76.50960541 -110.89510345]
[62.42369080 -105.52384186]
[64.26701355 -90.63753510]
[66.11033630 -75.75122833]
[67.95365906 -60.86492157]
[70.25453949 -46.04243851]
[73.01078033 -31.29784393]
[75.76702118 -16.55324745]
[78.52326202 -1.80865073]
[82.03243256 12.77509880]
[86.28527832 27.15958023]
[90.53812408 41.54405975]
[110.39350891 41.70249557]
[129.08032227 48.41551590]
[144.49752808 60.92835236]
[154.91172791 77.83414459]
[169.42036438 74.02628326]
[183.92898560 70.21842194]
[198.43760681 66.41056824]
[202.41143799 51.57465363]
[213.28216553 40.72464371]
[228.12564087 36.77912903]
[242.94902039 40.79943848]
[253.76490784 51.70412827]
[257.66387939 66.55989075]
[253.59712219 81.37059784]
[242.65858459 92.15224457]
[227.79066467 96.00463104]
[212.99278259 91.89147186]
[202.24546814 80.91918945]
[187.73684692 84.72705078]
[173.22822571 88.53491211]
[158.71958923 92.34276581]
[158.33583069 110.17615509]
[152.65892029 127.08619690]
[142.20394897 141.53854370]
[127.91955566 152.22186279]
[111.10185242 158.16676331]
[112.02526855 173.13832092]
[112.94868469 188.10986328]
[125.87410736 196.49076843]
[131.32250977 210.70936584]
[127.40014648 225.23791504]
[115.81359100 234.55938721]
[116.73700714 249.53092957]
[117.66041565 264.50247192]
[118.58383179 279.47402954]
[119.50724792 294.44558716]
[120.43065643 309.41714478]
[121.35407257 324.38867188]
[122.27748871 339.36022949]
[123.20089722 354.33178711]
[124.12431335 369.30334473]
[125.04772949 384.27487183]
[139.91441345 386.70993042]
[153.86631775 392.39251709]
[166.20361328 401.03768921]
[176.30747986 412.21176147]
[183.67111206 425.35421753]
[187.92512512 439.80590820]
[188.85617065 454.84188843]
[186.41754150 469.70797729]
[180.73155212 483.65850830]
[172.08340454 495.99371338]
[160.90689087 506.09487915]
[147.76263428 513.45532227]
[133.30992126 517.70587158]
[118.27371216 518.63323975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[26 124]
[27 123]
[28 122]
[43 96]
[44 95]
[45 94]
[51 93]
[52 92]
[53 91]
[54 90]
[58 89]
[59 88]
[60 87]
[61 86]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
