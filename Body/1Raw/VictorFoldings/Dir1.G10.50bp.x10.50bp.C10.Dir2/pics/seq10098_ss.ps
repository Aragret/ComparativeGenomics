%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUUUACACUGGGGGGGGGGCACAACACCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAxxxxxxxxxxAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCCCCCCCCCCCUAAUUUAAACU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 377.41308594]
[70.87159729 372.25808716]
[58.28185654 363.97586060]
[47.94191742 353.01309204]
[40.40940475 339.96096802]
[36.09054184 325.52337646]
[35.21823120 310.47891235]
[37.83952332 295.63891602]
[43.81304932 281.80368042]
[52.81666565 269.71932983]
[64.36482239 260.03753662]
[77.83473969 253.28047180]
[92.50000000 249.81250000]
[92.50000000 234.81250000]
[92.50000000 219.81250000]
[92.50000000 204.81250000]
[92.50000000 189.81250000]
[92.50000000 174.81250000]
[92.50000000 159.81250000]
[92.50000000 144.81250000]
[92.50000000 129.81250000]
[92.50000000 114.81250000]
[91.93463135 129.80183411]
[85.13369751 143.17147827]
[73.35176086 152.45512390]
[58.76224136 155.94021606]
[44.05646133 152.98385620]
[31.94719505 144.13142395]
[24.66823959 131.01589966]
[23.56234360 116.05672455]
[28.83350945 102.01340485]
[39.50936890 91.47651672]
[53.62054062 86.38979340]
[68.56394958 87.69158173]
[81.58070374 95.13969421]
[68.85104370 87.20523834]
[56.12137985 79.27077484]
[45.82542419 90.24709320]
[33.58575439 99.00361633]
[19.87282753 105.20377350]
[5.21373224 108.60923004]
[-9.82807446 109.08910370]
[-24.67442703 106.62494659]
[-38.75466919 101.31147003]
[-51.52759552 93.35291290]
[-62.50224686 83.05518341]
[-71.25679016 70.81409454]
[-77.45471954 57.10016632]
[-80.85780334 42.44052124]
[-81.33524323 27.39863777]
[-78.86868286 12.55268478]
[-73.55293274 -1.52669716]
[-65.59230804 -14.29833412]
[-55.29280090 -25.27132034]
[-43.05029678 -34.02388000]
[-29.33536339 -40.21959305]
[-14.67516708 -43.62030792]
[0.36679381 -44.09531021]
[15.21234703 -41.62634659]
[29.29086876 -36.30831528]
[42.06121826 -28.34562492]
[53.03253555 -18.04434204]
[61.78311539 -5.80042124]
[67.97660828 7.91551447]
[71.37494659 22.57626152]
[71.84751892 37.61830139]
[69.37615204 52.46345139]
[64.05583954 66.54111481]
[76.78549957 74.47557068]
[89.51516724 82.41003418]
[82.14781952 69.34396362]
[74.82991791 56.25013351]
[74.02397919 41.27180099]
[79.89460754 27.46833229]
[91.24271393 17.65912819]
[105.75041199 13.84774590]
[120.45446777 16.81266975]
[132.35153198 25.94830894]
[139.01159668 39.38867950]
[139.07432556 54.38854599]
[132.52690125 67.88414764]
[120.70616150 77.11919403]
[110.85944366 88.43476105]
[124.92572784 83.22518158]
[138.99200439 78.01560211]
[153.05828857 72.80602264]
[145.50341797 54.99228668]
[155.63909912 31.33585358]
[166.29930115 20.78313255]
[176.95951843 10.23041058]
[181.37103271 -7.61948061]
[198.46679688 -11.46954727]
[208.91093445 -22.23615074]
[219.35508728 -33.00275421]
[222.83132935 -49.02922440]
[238.52919006 -53.77358627]
[250.30007935 -42.35524368]
[246.03507996 -26.52041054]
[230.12168884 -22.55860519]
[219.67753601 -11.79200172]
[209.23339844 -1.02539802]
[209.09292603 11.10714245]
[200.42845154 20.16538811]
[187.51223755 20.89062119]
[176.85202026 31.44334221]
[166.19181824 41.99606323]
[168.50944519 49.12898636]
[180.64480591 40.31235886]
[192.77984619 49.12944031]
[188.14405823 63.39511490]
[173.14469910 63.39483643]
[175.46232605 70.52775574]
[190.28935242 72.79917908]
[205.11637878 75.07059479]
[219.94340515 77.34201050]
[234.77043152 79.61342621]
[246.39994812 69.15932465]
[262.03012085 68.67799377]
[274.28085327 78.39671326]
[277.36773682 93.72659302]
[269.83322144 107.42932892]
[255.23489380 113.03491974]
[240.46562195 107.89656830]
[232.49900818 94.44045258]
[217.67198181 92.16903687]
[202.84495544 89.89761353]
[188.01792908 87.62619781]
[173.19090271 85.35478210]
[158.26786804 86.87230682]
[144.20158386 92.08188629]
[130.13529968 97.29146576]
[116.06902313 102.50104523]
[107.50000000 114.81250000]
[107.50000000 129.81250000]
[107.50000000 144.81250000]
[107.50000000 159.81250000]
[107.50000000 174.81250000]
[107.50000000 189.81250000]
[107.50000000 204.81250000]
[107.50000000 219.81250000]
[107.50000000 234.81250000]
[107.50000000 249.81250000]
[122.16526031 253.28047180]
[135.63517761 260.03753662]
[147.18333435 269.71932983]
[156.18695068 281.80368042]
[162.16047668 295.63891602]
[164.78176880 310.47891235]
[163.90945435 325.52337646]
[159.59059143 339.96096802]
[152.05809021 353.01309204]
[141.71813965 363.97586060]
[129.12840271 372.25808716]
[114.96779633 377.41308594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[35 70]
[36 69]
[37 68]
[83 132]
[84 131]
[85 130]
[86 129]
[88 106]
[89 105]
[90 104]
[92 101]
[93 100]
[94 99]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
