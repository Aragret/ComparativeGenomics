%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCCUCACGGGGGGGGGGACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAxxxxxxxxxxGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCACCCCCCCCCCAACUCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.51938629 498.53616333]
[71.67344666 492.52014160]
[59.96478653 482.99072266]
[51.26226425 470.65505981]
[46.21166229 456.42852783]
[45.18777084 441.36685181]
[48.26656723 426.58770752]
[55.21958923 413.18777466]
[65.53087616 402.16143799]
[78.43525696 394.32693481]
[92.97514343 390.26562500]
[92.97514343 375.26562500]
[92.97514343 360.26562500]
[92.97514343 345.26562500]
[92.97514343 330.26562500]
[92.97514343 315.26562500]
[92.97514343 300.26562500]
[92.97514343 285.26562500]
[92.97514343 270.26562500]
[92.97514343 255.26560974]
[81.18908691 250.67694092]
[71.60240173 242.42694092]
[58.35982132 249.47207642]
[52.31655502 264.33337402]
[36.88943863 268.73605347]
[23.91283226 259.30276489]
[23.34127998 243.26989746]
[35.61322784 232.93650818]
[51.31468582 236.22949219]
[64.55727386 229.18435669]
[64.39099121 207.64894104]
[76.15447235 189.44013977]
[96.11438751 180.62425232]
[97.36125946 165.67616272]
[98.60813141 150.72807312]
[99.85501099 135.77998352]
[59.19086838 96.18798065]
[44.61816406 92.63321686]
[30.04546356 89.07845306]
[15.47276020 85.52369690]
[2.09928703 93.94543457]
[-13.29353333 90.36260986]
[-21.57341385 76.90084839]
[-17.82804871 61.54676819]
[-4.27949572 53.40967560]
[11.03412819 57.31716537]
[19.02752113 70.95098877]
[33.60022354 74.50575256]
[48.17292786 78.06051636]
[62.74563217 81.61527252]
[73.94139862 71.63255310]
[72.07378387 56.74927139]
[70.20616913 41.86598969]
[68.33855438 26.98270988]
[66.47094727 12.09943008]
[54.92541885 5.08811855]
[49.62265778 -7.12288761]
[52.30169296 -19.96411324]
[61.75937653 -28.77030563]
[60.20179367 -43.68922043]
[58.64421463 -58.60813141]
[43.72467422 -60.81225586]
[29.82232285 -66.65823364]
[17.81107330 -75.77857971]
[8.44596100 -87.59997559]
[2.31568575 -101.37932587]
[-0.19439764 -116.25045013]
[1.07349622 -131.27853394]
[6.03966665 -145.51889038]
[14.39193630 -158.07638550]
[25.60527420 -168.16160583]
[38.97480011 -175.14062500]
[53.66009521 -178.57470703]
[68.73802948 -178.24800110]
[83.26078796 -174.18103027]
[96.31546021 -166.62945557]
[107.08142090 -156.06797791]
[114.88191223 -143.16049194]
[119.22658539 -128.71836853]
[119.84233856 -113.64947510]
[116.69045258 -98.90103912]
[109.96906281 -85.40015411]
[100.10068512 -73.99551392]
[87.70565033 -65.40400696]
[73.56312561 -60.16571045]
[75.12070465 -45.24679947]
[76.67829132 -30.32788658]
[90.16955566 -20.33571053]
[92.33336639 -3.34742117]
[81.35422516 10.23181725]
[83.22183990 25.11509705]
[85.08944702 39.99837494]
[86.95706177 54.88165665]
[88.82467651 69.76493835]
[95.44596863 73.28750610]
[108.68855286 80.33264160]
[115.30984497 83.85520935]
[128.69613647 77.08708954]
[142.08241272 70.31897736]
[155.46870422 63.55086136]
[166.87568665 51.00825500]
[182.08589172 58.49731445]
[179.10011292 75.18627930]
[162.23681641 76.93714905]
[148.85052490 83.70526123]
[135.46424866 90.47337341]
[122.07796478 97.24149323]
[125.63272095 111.81419373]
[140.63191223 111.65815735]
[155.63110352 111.50212097]
[167.83869934 101.09279633]
[183.56028748 104.28831482]
[190.73559570 118.63733673]
[183.86035156 133.13252258]
[168.20864868 136.65441895]
[155.78713989 126.50131226]
[140.78794861 126.65734863]
[125.78875732 126.81338501]
[114.80309296 137.02685547]
[113.55622101 151.97494507]
[112.30934906 166.92303467]
[111.06246948 181.87112427]
[121.24493408 186.61344910]
[129.58709717 194.09907532]
[135.37538147 203.66868591]
[138.12025452 214.48551941]
[137.59753418 225.60859680]
[133.86665344 236.07452393]
[127.26432800 244.98095703]
[118.37417603 251.56439209]
[107.97514343 255.26560974]
[107.97514343 270.26562500]
[107.97514343 285.26562500]
[107.97514343 300.26562500]
[107.97514343 315.26562500]
[107.97514343 330.26562500]
[107.97514343 345.26562500]
[107.97514343 360.26562500]
[107.97514343 375.26562500]
[107.97514343 390.26562500]
[122.51502991 394.32693481]
[135.41940308 402.16143799]
[145.73069763 413.18777466]
[152.68371582 426.58770752]
[155.76251221 441.36685181]
[154.73861694 456.42852783]
[149.68801880 470.65505981]
[140.98550415 482.99072266]
[129.27684021 492.52014160]
[115.43090057 498.53616333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 30]
[23 29]
[33 122]
[34 121]
[35 120]
[36 119]
[37 50]
[38 49]
[39 48]
[40 47]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[59 87]
[60 86]
[61 85]
[97 107]
[98 106]
[99 105]
[100 104]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
