%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCAAUUGGGGGGGGGGAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUxxxxxxxxxxUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUCCCCCCCCCCACUUCCUAUU\
) } def
/len { sequence length } bind def

/coor [
[125.21396637 439.94314575]
[111.36802673 433.92712402]
[99.65936279 424.39770508]
[90.95684052 412.06204224]
[85.90623474 397.83551025]
[84.88234711 382.77383423]
[87.96114349 367.99468994]
[94.91416931 354.59475708]
[105.22544861 343.56842041]
[118.12982941 335.73391724]
[132.66972351 331.67260742]
[132.66972351 316.67260742]
[132.66972351 301.67260742]
[132.66972351 286.67260742]
[132.66972351 271.67260742]
[132.66972351 256.67260742]
[132.66972351 241.67259216]
[132.66972351 226.67259216]
[132.66972351 211.67259216]
[132.66972351 196.67259216]
[132.66972351 181.67259216]
[116.46878815 163.89932251]
[124.17881775 140.50025940]
[118.40254211 126.65703583]
[101.49004364 134.65466309]
[81.68013000 132.12464905]
[65.36929321 118.52834320]
[50.43498611 119.93064880]
[35.50067902 121.33295441]
[20.56637192 122.73526001]
[5.63206387 124.13755798]
[-9.30224419 125.53986359]
[-19.18959236 137.86933899]
[-34.90816498 139.51310730]
[-47.13241577 129.49595642]
[-48.60990906 113.76088715]
[-38.46407700 101.64322662]
[-22.71426010 100.33217621]
[-10.70454788 110.60556030]
[4.22976017 109.20325470]
[19.16406822 107.80094910]
[34.09837723 106.39864349]
[49.03268433 104.99634552]
[63.96699142 103.59403992]
[68.57255554 89.31858063]
[57.27355194 79.45285797]
[45.97454453 69.58713531]
[34.27492142 60.19997025]
[22.19493294 51.30762100]
[10.11494541 42.41527176]
[-5.89817905 43.39476013]
[-16.54060555 31.38983345]
[-13.64837360 15.60963726]
[0.55984211 8.15939236]
[15.18471527 14.75428677]
[19.00729561 30.33528328]
[31.08728409 39.22763443]
[43.16727066 48.11998367]
[46.01290894 47.78881073]
[49.16450500 48.60209274]
[52.17274475 50.68352890]
[54.55161667 53.98686600]
[55.84026718 58.28812790]
[67.13927460 68.15385437]
[78.43827820 78.01957703]
[85.86980438 77.00840759]
[80.68386841 62.93338776]
[75.49794006 48.85837173]
[70.31201172 34.78335190]
[59.13343430 24.78138351]
[54.20166779 10.61530876]
[56.75211716 -4.16627407]
[66.14589691 -15.86058235]
[80.02987671 -21.53819466]
[94.92610931 -19.77687073]
[107.10309601 -11.01782131]
[113.51050568 2.54481316]
[112.54328918 17.51359749]
[104.44324493 30.13929939]
[103.20644379 45.08822250]
[101.96965027 60.03714752]
[100.73284912 74.98606873]
[108.16437531 73.97490692]
[116.41666412 61.44894409]
[124.66895294 48.92298126]
[132.92123413 36.39701843]
[141.17352295 23.87105751]
[141.59899902 7.47742987]
[156.13623047 -0.11209127]
[169.83056641 8.90994263]
[168.59445190 25.26243591]
[153.69949341 32.12334442]
[145.44720459 44.64930725]
[137.19491577 57.17527008]
[128.94262695 69.70123291]
[120.69033051 82.22719574]
[130.67306519 93.42295837]
[144.05934143 86.65484619]
[157.44563293 79.88673401]
[163.79675293 65.15435791]
[179.31213379 61.07357407]
[192.08967590 70.77480316]
[192.32756042 86.81608582]
[179.84329224 96.89193726]
[164.21374512 93.27301788]
[150.82745361 100.04113007]
[137.44117737 106.80924225]
[132.24575806 120.88076019]
[138.02203369 134.72398376]
[147.65440369 136.09686279]
[155.89898682 141.04304504]
[161.50785828 148.70954895]
[163.67288208 157.84030151]
[178.16847229 161.69746399]
[192.66407776 165.55462646]
[207.15966797 169.41178894]
[221.65527344 173.26893616]
[237.33866882 168.47698975]
[249.14411926 179.85958862]
[244.92718506 195.70727539]
[229.02587891 199.71733093]
[217.79811096 187.76454163]
[203.30250549 183.90737915]
[188.80691528 180.05021667]
[174.31130981 176.19305420]
[159.81571960 172.33590698]
[157.40530396 175.39733887]
[154.52310181 178.01945496]
[151.24803162 180.13046265]
[147.66972351 181.67259216]
[147.66972351 196.67259216]
[147.66972351 211.67259216]
[147.66972351 226.67259216]
[147.66972351 241.67259216]
[147.66972351 256.67260742]
[147.66972351 271.67260742]
[147.66972351 286.67260742]
[147.66972351 301.67260742]
[147.66972351 316.67260742]
[147.66972351 331.67260742]
[162.20960999 335.73391724]
[175.11398315 343.56842041]
[185.42527771 354.59475708]
[192.37829590 367.99468994]
[195.45709229 382.77383423]
[194.43319702 397.83551025]
[189.38259888 412.06204224]
[180.68006897 424.39770508]
[168.97140503 433.92712402]
[155.12547302 439.94314575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 109]
[24 108]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[45 65]
[46 64]
[47 63]
[48 58]
[49 57]
[50 56]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[97 107]
[98 106]
[99 105]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
