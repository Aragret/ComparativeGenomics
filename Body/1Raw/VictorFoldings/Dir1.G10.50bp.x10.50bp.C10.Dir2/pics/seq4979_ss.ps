%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAGCUAUGGGGGGGGGGAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUAxxxxxxxxxxCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUCCCCCCCCCCUAGUAGCUAU\
) } def
/len { sequence length } bind def

/coor [
[113.49185944 592.78955078]
[99.64591980 586.77349854]
[87.93725586 577.24407959]
[79.23473358 564.90844727]
[74.18412781 550.68194580]
[73.16024017 535.62023926]
[76.23903656 520.84106445]
[83.19206238 507.44116211]
[93.50334167 496.41482544]
[106.40772247 488.58032227]
[120.94760895 484.51898193]
[120.94760895 469.51898193]
[120.94760895 454.51898193]
[120.94760895 439.51898193]
[120.94760895 424.51898193]
[120.94760895 409.51898193]
[120.94760895 394.51898193]
[120.94760895 379.51898193]
[120.94760895 364.51898193]
[120.94760895 349.51898193]
[120.94760895 334.51898193]
[120.94760895 319.51898193]
[106.40522003 315.96832275]
[93.12726593 309.03610229]
[81.88758850 299.12139893]
[73.34240723 286.79727173]
[67.99200439 272.77767944]
[66.15145111 257.87597656]
[67.93205261 242.95785522]
[73.23460388 228.89100647]
[81.75494385 216.49462891]
[93.00137329 206.49179077]
[106.32304382 199.46716309]
[120.94760895 195.83291626]
[120.94760895 180.83291626]
[120.94760895 165.83291626]
[117.54463196 151.22402954]
[110.91613770 137.76806641]
[104.28763580 124.31209564]
[97.65914154 110.85613251]
[97.02506256 125.84272766]
[96.39500427 140.82948303]
[89.67662048 154.24079895]
[78.05084991 163.71926880]
[63.56122971 167.59881592]
[48.75468826 165.19749451]
[36.23387146 156.93739319]
[28.19964409 144.27046204]
[26.06423378 129.42324829]
[30.20299339 115.00552368]
[39.88843155 103.55160522]
[53.41567993 97.07538605]
[67.32202911 102.69796753]
[57.81366730 91.09662628]
[48.30530930 79.49528503]
[38.79695129 67.89394379]
[23.03829193 64.88658142]
[15.69197464 50.62435532]
[22.39346313 36.04801941]
[38.00195312 32.33929062]
[50.54394150 42.34319305]
[50.39829254 58.38558578]
[59.90665054 69.98692322]
[69.41500854 81.58826447]
[78.92337036 93.18960571]
[93.19882965 88.58404541]
[94.13446045 73.61325073]
[95.07008362 58.64245987]
[81.07501984 52.86173248]
[69.71688843 42.84815979]
[62.22774887 29.68793678]
[59.41995621 14.80858803]
[61.59808350 -0.17588682]
[68.52586365 -13.64008331]
[79.45182037 -24.12350655]
[93.19078827 -30.48899460]
[108.25247192 -32.04606247]
[123.00308990 -28.62581635]
[135.84260559 -20.59925652]
[145.37828064 -8.83704376]
[150.57574463 5.38494396]
[150.87124634 20.52401352]
[146.23271179 34.93798828]
[137.16329956 47.06335449]
[124.64678955 55.58483505]
[110.04087830 59.57809067]
[109.10524750 74.54888153]
[108.16962433 89.51967621]
[111.11510468 104.22763062]
[117.74359894 117.68360138]
[124.37210083 131.13957214]
[131.00059509 144.59553528]
[132.30235291 129.65213013]
[137.35813904 115.52983093]
[145.83613586 103.15551758]
[157.17991638 93.34131622]
[170.64498901 86.73133850]
[185.34762573 83.75940704]
[200.32289124 84.62057495]
[214.58792114 89.25830841]
[227.20652771 97.36824799]
[237.35049438 108.41812134]
[244.35411072 121.68271637]
[247.75769043 136.29145813]
[247.33787537 151.28558350]
[243.12219238 165.68101501]
[235.38734436 178.53294373]
[224.64097595 188.99789429]
[211.58836365 196.38906860]
[197.08616638 200.22134399]
[182.08618164 200.24322510]
[167.57287598 196.45327759]
[154.49874878 189.10021973]
[143.72187805 178.66667175]
[135.94761658 165.83291626]
[135.94761658 180.83291626]
[135.94761658 195.83291626]
[150.57217407 199.46716309]
[163.89384460 206.49179077]
[175.14027405 216.49462891]
[183.66061401 228.89100647]
[188.96318054 242.95785522]
[190.74377441 257.87597656]
[188.90321350 272.77767944]
[183.55282593 286.79727173]
[175.00762939 299.12139893]
[163.76795959 309.03610229]
[150.49000549 315.96832275]
[135.94761658 319.51898193]
[135.94761658 334.51898193]
[135.94761658 349.51898193]
[135.94761658 364.51898193]
[135.94761658 379.51898193]
[135.94761658 394.51898193]
[135.94761658 409.51898193]
[135.94761658 424.51898193]
[135.94761658 439.51898193]
[135.94761658 454.51898193]
[135.94761658 469.51898193]
[135.94761658 484.51898193]
[150.48750305 488.58032227]
[163.39187622 496.41482544]
[173.70317078 507.44116211]
[180.65618896 520.84106445]
[183.73498535 535.62023926]
[182.71109009 550.68194580]
[177.66049194 564.90844727]
[168.95796204 577.24407959]
[157.24929810 586.77349854]
[143.40336609 592.78955078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[34 117]
[35 116]
[36 115]
[37 92]
[38 91]
[39 90]
[40 89]
[53 65]
[54 64]
[55 63]
[56 62]
[66 88]
[67 87]
[68 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
