%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCCCCAGGGGGGGGGGACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUxxxxxxxxxxUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCCCCCCCCCCCUUACCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[40.21596146 201.51296997]
[33.69490433 197.37889099]
[27.45864677 192.82653809]
[21.53397751 187.87547302]
[15.94634724 182.54693604]
[10.71975231 176.86384583]
[5.87664604 170.85060120]
[1.43782878 164.53303528]
[-2.57763219 157.93827820]
[-6.15248966 151.09465027]
[-20.05504608 156.72660828]
[-29.94048119 169.07928467]
[-44.64166260 166.68670654]
[-58.54421997 172.31866455]
[-72.44677734 177.95060730]
[-86.34933472 183.58256531]
[-100.25188446 189.21452332]
[-114.15444183 194.84648132]
[-128.05700684 200.47843933]
[-141.95954895 206.11039734]
[-155.86210632 211.74235535]
[-155.94570923 226.94305420]
[-161.84461975 240.95274353]
[-172.65928650 251.63504028]
[-186.74055481 257.36096191]
[-201.94114685 257.25738525]
[-215.94305420 251.34004211]
[-226.61111450 240.51133728]
[-232.31851196 226.42254639]
[-232.19491577 211.22210693]
[-226.25918579 197.22799683]
[-215.41644287 186.57418823]
[-201.32015991 180.88531494]
[-186.11990356 181.02891541]
[-172.13360596 186.98306274]
[-161.49406433 197.83979797]
[-147.59150696 192.20783997]
[-133.68894958 186.57588196]
[-119.78639984 180.94392395]
[-105.88384247 175.31196594]
[-91.98128510 169.68000793]
[-78.07873535 164.04806519]
[-64.17617798 158.41610718]
[-50.27362061 152.78414917]
[-41.38259125 140.83430481]
[-25.68700218 142.82405090]
[-11.78444576 137.19209290]
[-15.74619675 121.95067596]
[-17.63974380 106.31703186]
[-17.43125153 90.57051849]
[-15.12444782 74.99248505]
[-10.76054955 59.86130524]
[-4.41753340 45.44733810]
[3.79126072 32.00814438]
[13.71915436 19.78385544]
[25.18875313 8.99290466]
[37.99510956 -0.17189179]
[51.90940094 -7.54677248]
[66.68299103 -12.99996090]
[82.05190277 -16.43401718]
[97.74152374 -17.78757858]
[113.47150421 -17.03645897]
[128.96075439 -14.19408226]
[133.56632996 -28.46954346]
[138.17189026 -42.74500275]
[142.77745056 -57.02046585]
[147.38302612 -71.29592896]
[151.98858643 -85.57138824]
[156.59414673 -99.84684753]
[143.58731079 -107.43870544]
[132.51689148 -117.64948273]
[123.90069580 -130.00161743]
[118.14169312 -143.91735840]
[115.50925446 -158.74584961]
[116.12649536 -173.79354858]
[119.96456146 -188.35662842]
[126.84392548 -201.75395203]
[136.44282532 -213.35891724]
[148.31231689 -222.62872314]
[161.89724731 -229.12979126]
[176.56219482 -232.55809021]
[191.62127686 -232.75325012]
[206.37014771 -229.70614624]
[220.11897278 -223.55929565]
[232.22470093 -214.60018921]
[242.12112427 -203.24787903]
[249.34536743 -190.03332520]
[253.55953979 -175.57460022]
[254.56652832 -160.54795837]
[252.31924438 -145.65621948]
[246.92279053 -131.59590149]
[238.62957764 -119.02464294]
[227.82748413 -108.53040314]
[215.02175903 -100.60403442]
[200.81134033 -95.61625671]
[185.86087036 -93.80036163]
[170.86961365 -95.24127960]
[166.26403809 -80.96582031]
[161.65847778 -66.69036102]
[157.05291748 -52.41490173]
[152.44735718 -38.13943863]
[147.84178162 -23.86397934]
[143.23622131 -9.58851814]
[168.12579346 3.88604951]
[189.08334351 22.90802193]
[204.89927673 46.37950516]
[214.66073608 72.94580078]
[217.80433655 101.07358551]
[232.76458740 102.16489410]
[247.72483826 103.25621033]
[262.68508911 104.34751892]
[273.45111084 93.00614929]
[288.99423218 91.28981018]
[301.97543335 100.00888824]
[306.26538086 115.04651642]
[299.83853149 129.30236816]
[285.72943115 136.04528809]
[270.59994507 132.09146118]
[261.59378052 119.30776978]
[246.63352966 118.21645355]
[231.67327881 117.12514496]
[216.71302795 116.03383636]
[215.41209412 123.64450836]
[213.61543274 131.15362549]
[211.33074951 138.52893066]
[208.56787109 145.73872375]
[205.33865356 152.75207520]
[201.65698242 159.53883362]
[197.53865051 166.06985474]
[193.00137329 172.31707764]
[188.06462097 178.25367737]
[182.74958801 183.85415649]
[177.07913208 189.09445190]
[171.07759094 193.95205688]
[164.77076721 198.40611267]
[158.18571472 202.43748474]
[151.35073853 206.02883911]
[144.29519653 209.16477966]
[137.04939270 211.83183289]
[129.64443970 214.01850891]
[122.11216736 215.71545410]
[114.48490906 216.91535950]
[106.79543304 217.61308289]
[99.07677460 217.80560303]
[91.36207581 217.49212646]
[83.68448639 216.67398071]
[76.07697296 215.35469055]
[68.57221985 213.53990173]
[61.20245361 211.23742676]
[53.99934006 208.45715332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 47]
[11 46]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
