%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAACAAAAAGGGGGGGGGGAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACxxxxxxxxxxCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACCCCCCCCCCCAUGACAAAAA\
) } def
/len { sequence length } bind def

/coor [
[17.69818878 272.82543945]
[7.38800287 267.52685547]
[-2.58255506 261.61386108]
[-12.17691994 255.10823059]
[-21.35990715 248.03376770]
[-30.09783936 240.41644287]
[-38.35867310 232.28416443]
[-46.11211777 223.66677856]
[-53.32973480 214.59588623]
[-59.98505783 205.10473633]
[-66.05368042 195.22814941]
[-71.51334381 185.00233459]
[-85.20397186 191.13150024]
[-98.89459991 197.26068115]
[-112.52157593 203.53009033]
[-126.08347321 209.93905640]
[-139.64537048 216.34803772]
[-153.20726013 222.75701904]
[-166.76916504 229.16598511]
[-180.33105469 235.57496643]
[-193.89295959 241.98394775]
[-200.36380005 248.52029419]
[-207.79972839 248.38208008]
[-221.49035645 254.51124573]
[-235.18098450 260.64041138]
[-242.21994019 275.05682373]
[-257.91052246 278.40124512]
[-270.21627808 268.10812378]
[-269.69723511 252.07345581]
[-256.75161743 242.59768677]
[-241.31016541 246.94979858]
[-227.61953735 240.82061768]
[-213.92890930 234.69145203]
[-200.30192566 228.42204285]
[-186.74003601 222.01306152]
[-173.17813110 215.60409546]
[-159.61624146 209.19511414]
[-146.05435181 202.78614807]
[-132.49244690 196.37716675]
[-118.93054962 189.96818542]
[-114.19756317 184.23138428]
[-105.02377319 183.57005310]
[-91.33314514 177.44088745]
[-77.64251709 171.31170654]
[-86.31044006 143.93911743]
[-90.78666687 115.57796478]
[-90.97049713 86.86633301]
[-86.85780334 58.45018387]
[-78.54109955 30.96884346]
[-66.20750427 5.04059315]
[-50.13451385 -18.75122070]
[-61.52558517 -28.51049614]
[-72.91666412 -38.26977158]
[-89.12722778 -40.74959183]
[-94.83202362 -56.12448883]
[-84.16243744 -68.57807922]
[-68.09442902 -65.29918671]
[-63.15738678 -49.66084290]
[-51.76631165 -39.90156937]
[-40.37523651 -30.14229584]
[-31.36265755 -39.23389435]
[-21.76255035 -47.70276260]
[-11.61785698 -55.51102448]
[-0.97394854 -62.62375641]
[10.12157059 -69.00914764]
[21.61907387 -74.63864136]
[33.46714020 -79.48705292]
[45.61277390 -83.53270721]
[58.00165939 -86.75749969]
[70.57838440 -89.14701080]
[83.28669739 -90.69055939]
[96.06976318 -91.38123322]
[108.87040710 -91.21595001]
[121.63137054 -90.19544983]
[134.29559326 -88.32428741]
[146.80642700 -85.61083984]
[159.10792542 -82.06723785]
[171.14505005 -77.70933533]
[182.86398315 -72.55661774]
[194.21229553 -66.63213348]
[205.13923645 -59.96238327]
[215.59594727 -52.57719803]
[225.53564453 -44.50960159]
[234.91389465 -35.79568100]
[245.89469910 -46.01438904]
[256.87548828 -56.23309326]
[267.85629272 -66.45180511]
[278.83709717 -76.67050934]
[289.81790161 -86.88921356]
[284.47625732 -101.12071228]
[284.99240112 -116.31288147]
[291.28756714 -130.14903259]
[302.40182495 -140.51925659]
[316.64035034 -145.84216309]
[331.83181763 -145.30606079]
[345.65969849 -138.99267578]
[356.01528931 -127.86478424]
[361.31945801 -113.61928558]
[360.76336670 -98.42852783]
[354.43179321 -84.60897827]
[343.29028320 -74.26803589]
[329.03784180 -68.98260498]
[313.84780884 -69.55867767]
[300.03662109 -75.90841675]
[289.05581665 -65.68970490]
[278.07501221 -55.47100067]
[267.09420776 -45.25229263]
[256.11340332 -35.03358459]
[245.13259888 -24.81487846]
[252.42150879 -15.80116367]
[259.15145874 -6.36278057]
[265.29776001 3.46565866]
[270.83786011 13.64811039]
[275.75146484 24.14723396]
[280.02056885 34.92452621]
[283.62948608 45.94046402]
[286.56500244 57.15465164]
[288.81634521 68.52596283]
[290.37524414 80.01269531]
[291.23599243 91.57273102]
[291.39544678 103.16366577]
[290.85299683 114.74299622]
[289.61065674 126.26826477]
[287.67297363 137.69720459]
[285.04705811 148.98789978]
[281.74252319 160.09893799]
[277.77148438 170.98957825]
[273.14852905 181.61988831]
[267.89062500 191.95088196]
[262.01699829 201.94467163]
[255.54922485 211.56460571]
[248.51101685 220.77542114]
[240.92819214 229.54330444]
[232.82855225 237.83613586]
[224.24179077 245.62348938]
[215.19941711 252.87680054]
[205.73457336 259.56948853]
[195.88198853 265.67700195]
[185.67778015 271.17694092]
[175.15936279 276.04913330]
[164.36532593 280.27569580]
[153.33525085 283.84115601]
[142.10957336 286.73245239]
[130.72947693 288.93893433]
[119.23669434 290.45254517]
[107.67335510 291.26773071]
[96.08187866 291.38150024]
[84.50477600 290.79339600]
[72.98449707 289.50564575]
[61.56328583 287.52291870]
[50.28303146 284.85250854]
[39.18510437 281.50418091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 44]
[13 43]
[14 42]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[23 33]
[24 32]
[25 31]
[51 60]
[52 59]
[53 58]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
