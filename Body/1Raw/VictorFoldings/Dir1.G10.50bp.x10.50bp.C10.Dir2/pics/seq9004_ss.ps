%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCGCAGGAUUUUUCGGGGGGGGGGUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCAxxxxxxxxxxAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCCCCCCCCCCCUAUUCGCAGGAUUUCUC\
) } def
/len { sequence length } bind def

/coor [
[91.89025116 448.32305908]
[77.57965851 443.71255493]
[64.22318268 436.80935669]
[52.18518829 427.80175781]
[41.79408646 416.93554688]
[33.33335495 404.50711060]
[27.03380966 390.85552979]
[23.06730270 376.35324097]
[21.54204559 361.39584351]
[22.49964905 346.39141846]
[25.91398811 331.74926758]
[31.69191742 317.86886597]
[39.67581177 305.12887573]
[49.64786148 293.87686157]
[61.33602142 284.41976929]
[74.42144012 277.01559448]
[88.54711914 271.86633301]
[103.32772064 269.11245728]
[103.04213715 254.11517334]
[102.75655365 239.11790466]
[102.47097015 224.12062073]
[102.18539429 209.12333679]
[101.89981079 194.12605286]
[101.61422729 179.12876892]
[101.32864380 164.13150024]
[101.04306030 149.13421631]
[100.75748444 134.13693237]
[83.85289764 126.47521210]
[74.93895721 112.20751190]
[60.18367004 114.90592957]
[45.42838287 117.60435486]
[40.34267807 132.09680176]
[28.68165207 142.09260559]
[13.58206177 144.90293884]
[-0.89437878 139.77183533]
[-10.85357952 128.07952881]
[-13.61656475 112.97120667]
[-8.44010735 98.51091766]
[3.28335333 88.58841705]
[18.40026474 85.87280273]
[32.84425354 91.09455872]
[42.72995758 102.84906769]
[57.48524857 100.15064240]
[72.24053192 97.45221710]
[76.15638733 85.55835724]
[84.88336182 76.57850647]
[96.66056061 72.32460785]
[98.93653107 57.49828339]
[101.21250153 42.67195511]
[92.13333130 30.01468849]
[94.65269470 15.01110649]
[106.77541351 6.43350840]
[109.05138397 -8.39281845]
[95.42499542 -13.63788319]
[83.19871521 -21.60844994]
[72.90982056 -31.95123291]
[65.00981903 -44.20876694]
[59.84462357 -57.83963776]
[57.63943100 -72.24240875]
[58.48888779 -86.78215027]
[62.35303497 -100.81842804]
[69.05918121 -113.73350525]
[78.30961609 -124.95955658]
[89.69483948 -134.00360107]
[102.71166229 -140.46917725]
[116.78547668 -144.07368469]
[131.29559326 -144.66078186]
[133.85342407 -159.44110107]
[136.41125488 -174.22140503]
[138.96908569 -189.00170898]
[133.69834900 -203.91914368]
[143.49259949 -215.14062500]
[146.05044556 -229.92092896]
[148.60827637 -244.70124817]
[151.16610718 -259.48153687]
[137.40806580 -265.65951538]
[125.61917877 -275.06552124]
[116.54049683 -287.10830688]
[110.74271393 -301.03082275]
[108.59028625 -315.95788574]
[110.21851349 -330.95123291]
[115.52503967 -345.06829834]
[124.17630005 -357.42169189]
[135.62846375 -367.23486328]
[149.16165161 -373.89099121]
[163.92514038 -376.97161865]
[178.99089050 -376.28311157]
[193.41184998 -371.86874390]
[206.28150940 -364.00601196]
[216.79087830 -353.18917847]
[224.27932739 -340.09817505]
[228.27612305 -325.55593872]
[228.53001404 -310.47662354]
[225.02505493 -295.80807495]
[217.98155212 -282.47241211]
[207.84230042 -271.30789185]
[195.24462891 -263.01635742]
[180.98043823 -258.11901855]
[165.94641113 -256.92370605]
[163.38858032 -242.14341736]
[160.83074951 -227.36309814]
[158.27291870 -212.58279419]
[163.72660828 -198.72254944]
[153.74938965 -186.44387817]
[151.19155884 -171.66357422]
[148.63372803 -156.88325500]
[146.07589722 -142.10295105]
[160.35174561 -136.23884583]
[172.97817993 -127.35203552]
[183.32513428 -115.88217926]
[190.87548828 -102.39795685]
[195.25083923 -87.56880951]
[196.23051453 -72.13175964]
[193.76268005 -56.85473633]
[187.96711731 -42.49840164]
[179.12931824 -29.77827072]
[167.68652344 -19.32904053]
[154.20603943 -11.67293262]
[139.35711670 -7.19358778]
[123.87770844 -6.11684799]
[121.60173798 8.70947838]
[130.59342957 20.52832222]
[128.49647522 35.59674835]
[116.03882599 44.94792557]
[113.76285553 59.77425385]
[111.48688507 74.60057831]
[128.38612366 87.51426697]
[132.44078064 110.65359497]
[146.70663452 115.28884888]
[161.59635925 109.31591797]
[175.47808838 117.35810852]
[177.70297241 133.24613953]
[166.56425476 144.79206848]
[150.60661316 143.13885498]
[142.07138062 129.55470276]
[127.80553436 124.91944122]
[115.75476074 133.85134888]
[116.04034424 148.84863281]
[116.32592773 163.84591675]
[116.61151123 178.84318542]
[116.89708710 193.84046936]
[117.18267059 208.83775330]
[117.46825409 223.83503723]
[117.75383759 238.83232117]
[118.03942108 253.82960510]
[118.32500458 268.82687378]
[133.19972229 271.01605225]
[147.51119995 275.62380981]
[160.86901855 282.52444458]
[172.90873718 291.52969360]
[183.30194092 302.39392090]
[191.76506042 314.82073975]
[198.06724548 328.47109985]
[202.03654480 342.97262573]
[203.56468201 357.92971802]
[202.60997009 372.93432617]
[199.19844055 387.57711792]
[193.42318726 401.45861816]
[185.44175720 414.20016479]
[175.47187805 425.45410156]
[163.78553772 434.91345215]
[150.70153809 442.32015991]
[136.57685852 447.47213745]
[121.79678345 450.22885132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 146]
[19 145]
[20 144]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 137]
[29 44]
[30 43]
[31 42]
[47 126]
[48 125]
[49 124]
[52 121]
[53 120]
[67 107]
[68 106]
[69 105]
[70 104]
[72 102]
[73 101]
[74 100]
[75 99]
[128 136]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
