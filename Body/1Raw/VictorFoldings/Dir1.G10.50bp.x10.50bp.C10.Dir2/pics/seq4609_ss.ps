%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUCCUAAGGGGGGGGGGAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUxxxxxxxxxxAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCCCCCCCCCCCUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[194.74513245 627.51409912]
[181.25625610 620.78253174]
[169.77075195 611.01800537]
[160.95637512 598.78808594]
[155.32560730 584.80389404]
[153.20576477 569.87841797]
[154.72013855 554.87939453]
[159.78067017 540.67889404]
[168.09312439 528.10247803]
[179.17425537 517.88134766]
[192.37982178 510.60968018]
[206.94204712 506.71032715]
[206.63406372 491.71350098]
[206.32608032 476.71664429]
[206.01811218 461.71981812]
[205.71012878 446.72299194]
[205.40214539 431.72613525]
[205.09417725 416.72930908]
[204.78619385 401.73245239]
[204.47822571 386.73562622]
[204.17024231 371.73880005]
[194.28053284 357.27371216]
[203.21061707 341.20248413]
[202.59478760 326.21514893]
[199.53639221 311.53024292]
[194.11776733 297.54315186]
[188.69914246 283.55609131]
[183.28051758 269.56900024]
[177.86189270 255.58190918]
[171.45291138 242.02001953]
[164.08666992 228.95332336]
[156.72044373 215.88662720]
[149.35420227 202.81993103]
[141.98796082 189.75323486]
[134.62171936 176.68653870]
[127.25547791 163.61984253]
[119.88923645 150.55314636]
[112.52300262 137.48646545]
[105.15676117 124.41976166]
[96.53059387 126.86278534]
[86.90006256 126.11167908]
[77.48338318 121.80059052]
[69.61570740 114.03380585]
[64.56806946 103.41663361]
[63.36118317 91.01736450]
[51.02989960 82.47690582]
[38.69861603 73.93644714]
[26.36733055 65.39598846]
[14.03604698 56.85552597]
[-0.99898869 61.15456390]
[-15.25872135 54.73630524]
[-22.01014137 40.63125610]
[-18.06543350 25.49939346]
[-5.28716946 16.48551750]
[10.29114532 17.84570312]
[21.31390762 28.93771553]
[22.57650566 44.52424240]
[34.90779114 53.06470108]
[47.23907471 61.60515976]
[59.57035828 70.14562225]
[71.90164185 78.68608093]
[78.54531097 75.20590210]
[71.58517456 61.91844559]
[84.87274933 54.95853043]
[91.83265686 68.24554443]
[98.47632599 64.76536560]
[98.47632599 49.76536560]
[98.47632599 34.76536560]
[98.47632599 19.76536751]
[84.41913605 13.98056602]
[73.64926147 3.25311136]
[67.80903625 -10.78113747]
[67.78903961 -25.98205948]
[73.59232330 -40.03162384]
[84.33393860 -50.78737640]
[98.37585449 -56.60914230]
[113.57678986 -56.60914230]
[127.61871338 -50.78737640]
[138.36032104 -40.03162384]
[144.16360474 -25.98205948]
[144.14361572 -10.78113747]
[138.30339050 3.25311136]
[127.53350830 13.98056602]
[113.47632599 19.76536751]
[113.47632599 34.76536560]
[113.47632599 49.76536560]
[113.47632599 64.76536560]
[130.53973389 92.95806885]
[118.22345734 117.05352020]
[125.58969879 130.12022400]
[132.95593262 143.18692017]
[140.32217407 156.25360107]
[147.68841553 169.32029724]
[155.05465698 182.38699341]
[162.42089844 195.45368958]
[169.78713989 208.52038574]
[177.15336609 221.58708191]
[184.51960754 234.65377808]
[188.90931702 220.31047058]
[201.39689636 212.00021362]
[216.32279968 213.48934937]
[226.92237854 224.10296631]
[228.39175415 239.03082275]
[220.06497192 251.50740051]
[205.71586609 255.87811279]
[191.84896851 250.16328430]
[197.26759338 264.15036011]
[202.68621826 278.13745117]
[208.10484314 292.12454224]
[213.52346802 306.11163330]
[216.42005920 291.39395142]
[224.09436035 278.50576782]
[235.65367126 268.94638062]
[249.75331116 263.82772827]
[264.75308228 263.74533081]
[278.90811157 268.70874023]
[290.57174683 278.14059448]
[298.38717651 290.94366455]
[301.44528198 305.62863159]
[299.39031982 320.48718262]
[292.46130371 333.79089355]
[281.46426392 343.99215698]
[267.67852783 349.90426636]
[252.70770264 350.83947754]
[238.29335022 346.68899536]
[226.11224365 337.93566895]
[217.58213806 325.59933472]
[218.19796753 340.58666992]
[227.16091919 349.91775513]
[227.33213806 362.45339966]
[219.16708374 371.43081665]
[219.47505188 386.42764282]
[219.78303528 401.42449951]
[220.09101868 416.42132568]
[220.39898682 431.41815186]
[220.70697021 446.41500854]
[221.01493835 461.41183472]
[221.32292175 476.40866089]
[221.63090515 491.40551758]
[221.93887329 506.40234375]
[236.64891052 509.70056152]
[250.14187622 516.42395020]
[261.63330078 526.18151855]
[270.45507812 538.40606689]
[276.09432983 552.38684082]
[278.22320557 567.31103516]
[276.71792603 582.31097412]
[271.66601562 596.51452637]
[263.36117554 609.09600830]
[252.28625488 619.32385254]
[239.08509827 626.60351562]
[224.52525330 630.51171875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 128]
[24 127]
[25 110]
[26 109]
[27 108]
[28 107]
[29 106]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[66 87]
[67 86]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
