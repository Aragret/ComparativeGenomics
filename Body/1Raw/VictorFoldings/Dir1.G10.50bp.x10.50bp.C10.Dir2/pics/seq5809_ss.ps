%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCCCAUGGGGGGGGGGUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUxxxxxxxxxxAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCCCCCCCCCCCAACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[45.42140579 451.41668701]
[31.57546616 445.40066528]
[19.86680412 435.87124634]
[11.16427994 423.53558350]
[6.11367846 409.30905151]
[5.08978701 394.24737549]
[8.16858578 379.46823120]
[15.12160778 366.06829834]
[25.43289185 355.04196167]
[38.33727264 347.20745850]
[52.87715912 343.14614868]
[52.87715912 328.14614868]
[52.87715912 313.14614868]
[52.87715912 298.14614868]
[52.87715912 283.14614868]
[52.87715912 268.14614868]
[52.87715912 253.14614868]
[52.87715912 238.14614868]
[52.87715912 223.14614868]
[52.87715912 208.14614868]
[45.07683945 220.95843506]
[34.03675842 231.11308289]
[20.61849976 237.81758118]
[5.86923265 240.54872131]
[-9.05999756 239.09335327]
[-23.00410080 233.56506348]
[-34.87486649 224.39527893]
[-43.74589157 212.29962158]
[-48.92486954 198.22204590]
[-50.00763321 183.26116943]
[-46.90968323 168.58456421]
[-39.87278366 155.33760071]
[-29.44609833 144.55409241]
[-16.44333839 137.07557678]
[-1.87924969 133.48568726]
[13.10957527 134.06457520]
[27.35339546 138.76708984]
[39.74060822 147.22622681]
[49.30451202 158.78181458]
[55.29872513 172.53207397]
[57.25542831 187.40660095]
[63.31843948 173.68655396]
[69.38145447 159.96649170]
[75.01341248 146.06393433]
[80.20882416 131.99241638]
[85.40424347 117.92090607]
[90.59965515 103.84938049]
[90.21822357 95.74145508]
[96.05229950 89.54105377]
[101.53932953 75.58066559]
[107.02635956 61.62027359]
[110.73252106 47.08533859]
[104.77365875 32.42919922]
[114.03539276 20.76431274]
[115.90300751 5.88103342]
[117.77061462 -9.00224686]
[119.63822937 -23.88552666]
[113.67935944 -38.54166794]
[122.94109344 -50.20655060]
[124.80870819 -65.08982849]
[126.67632294 -79.97311401]
[112.30525970 -84.40522766]
[98.92224121 -91.26568604]
[86.93395996 -100.34600067]
[76.70471954 -111.37024689]
[68.54539490 -124.00339508]
[62.70392227 -137.86154175]
[59.35781860 -152.52355957]
[58.60877609 -167.54388428]
[60.47954941 -182.46606445]
[64.91329193 -196.83662415]
[71.77526855 -210.21885681]
[80.85694885 -222.20611572]
[91.88234711 -232.43409729]
[104.51642609 -240.59199524]
[118.37523651 -246.43190002]
[133.03762817 -249.77633667]
[148.05804443 -250.52366638]
[162.97999573 -248.65119934]
[177.35006714 -244.21583557]
[190.73152161 -237.35234070]
[202.71774292 -228.26930237]
[212.94447327 -217.24273682]
[221.10095215 -204.60774231]
[226.93927002 -190.74826050]
[230.28204346 -176.08549500]
[231.02767944 -161.06500244]
[229.15353394 -146.14324951]
[224.71652222 -131.77369690]
[217.85151672 -118.39300537]
[208.76712036 -106.40781403]
[197.73939514 -96.18233490]
[185.10346985 -88.02730560]
[171.24333191 -82.19054413]
[156.58018494 -78.84943390]
[141.55960083 -78.10549927]
[139.69198608 -63.22221756]
[137.82437134 -48.33893967]
[143.91682434 -34.74734879]
[134.52151489 -22.01791382]
[132.65390015 -7.13463354]
[130.78628540 7.74864626]
[128.91867065 22.63192558]
[135.01112366 36.22351456]
[125.61580658 48.95295334]
[135.80311584 37.94301987]
[149.71405029 32.33176804]
[164.68936157 33.19183731]
[177.86640930 40.35881805]
[186.72624207 52.46267319]
[189.57522583 67.18962860]
[185.86875916 81.72448730]
[176.31533813 93.28876495]
[162.74124146 99.67182922]
[147.74124146 99.65349579]
[134.18276978 93.23728180]
[124.65765381 81.64969635]
[120.98675537 67.10730743]
[115.49971771 81.06769562]
[110.01268768 95.02808380]
[104.67118073 109.04479980]
[99.47576141 123.11631775]
[94.28034210 137.18783569]
[89.08493042 151.25935364]
[89.99810791 156.53056335]
[88.86972046 161.14349365]
[86.30729675 164.42002869]
[83.10150909 166.02951050]
[77.03849792 179.74955750]
[70.97547913 193.46961975]
[67.87715912 208.14614868]
[67.87715912 223.14614868]
[67.87715912 238.14614868]
[67.87715912 253.14614868]
[67.87715912 268.14614868]
[67.87715912 283.14614868]
[67.87715912 298.14614868]
[67.87715912 313.14614868]
[67.87715912 328.14614868]
[67.87715912 343.14614868]
[82.41704559 347.20745850]
[95.32142639 355.04196167]
[105.63271332 366.06829834]
[112.58573151 379.46823120]
[115.66453552 394.24737549]
[114.64064026 409.30905151]
[109.59004211 423.53558350]
[100.88751221 435.87124634]
[89.17885590 445.40066528]
[75.33291626 451.41668701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[41 130]
[42 129]
[43 128]
[44 124]
[45 123]
[46 122]
[47 121]
[49 120]
[50 119]
[51 118]
[52 105]
[54 103]
[55 102]
[56 101]
[57 100]
[59 98]
[60 97]
[61 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
