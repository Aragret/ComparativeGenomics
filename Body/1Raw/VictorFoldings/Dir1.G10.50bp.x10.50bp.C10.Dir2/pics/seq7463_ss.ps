%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCCCCGGGGGGGGGGUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUxxxxxxxxxxUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCCCCCCCCCCCUAAUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.09958649 354.67568970]
[69.87939453 347.40322876]
[58.99258804 336.95620728]
[51.18145752 324.04696655]
[46.97857666 309.55566406]
[46.67050552 294.47030640]
[50.27824402 279.81948853]
[57.55581665 266.60211182]
[68.00702667 255.71934509]
[80.91928864 247.91319275]
[95.41222382 243.71591187]
[95.10016632 228.71916199]
[94.78810883 213.72239685]
[94.47605896 198.72564697]
[94.16400146 183.72889709]
[93.85194397 168.73214722]
[93.53988647 153.73538208]
[93.22782898 138.73863220]
[92.91577148 123.74188232]
[92.60372162 108.74512482]
[81.93797302 119.29225159]
[67.00328064 120.69042969]
[54.56519699 112.30626678]
[50.25830078 97.93787384]
[56.03366089 84.09427643]
[69.27497101 77.04675293]
[83.98380280 79.98790741]
[93.49703979 91.58573914]
[95.36464691 76.70246124]
[97.23226166 61.81918335]
[99.09987640 46.93590164]
[84.36526489 44.09802246]
[69.84781647 40.30252457]
[55.60968399 35.56566238]
[41.71184158 29.90772247]
[28.21380615 23.35293198]
[15.17337799 15.92935658]
[2.64639640 7.66878796]
[-9.31349468 -1.39340067]
[-20.65508080 -11.21840382]
[-31.32979584 -21.76414871]
[-41.29192734 -32.98547745]
[-50.49881363 -44.83433533]
[-58.91103745 -57.25998306]
[-66.49256897 -70.20922089]
[-73.21093750 -83.62658691]
[-79.03738403 -97.45462799]
[-83.94696045 -111.63413239]
[-87.91863251 -126.10437775]
[-90.93540192 -140.80340576]
[-92.98433685 -155.66827393]
[-94.05667877 -170.63531494]
[-94.14783478 -185.64044189]
[-93.25740051 -200.61940002]
[-91.38920593 -215.50805664]
[-88.55123901 -230.24264526]
[-84.75565338 -244.76008606]
[-80.01870728 -258.99819946]
[-74.36068726 -272.89599609]
[-67.80581665 -286.39398193]
[-60.38216400 -299.43438721]
[-52.12152100 -311.96130371]
[-43.05926132 -323.92114258]
[-33.23419189 -335.26266479]
[-22.68838501 -345.93731689]
[-11.46699905 -355.89938354]
[0.38191399 -365.10620117]
[12.80761433 -373.51837158]
[25.75689316 -381.09982300]
[39.17429733 -387.81811523]
[53.00237656 -393.64447021]
[67.18190765 -398.55395508]
[81.65218353 -402.52554321]
[96.35122681 -405.54223633]
[111.21609497 -407.59109497]
[126.18314362 -408.66333008]
[141.18827820 -408.75439453]
[156.16723633 -407.86389160]
[171.05587769 -405.99560547]
[185.79045105 -403.15753174]
[200.30786133 -399.36187744]
[214.54594421 -394.62484741]
[228.44371033 -388.96673584]
[241.94166565 -382.41177368]
[254.98200989 -374.98806763]
[267.50891113 -366.72735596]
[279.46868896 -357.66500854]
[290.81015015 -347.83987427]
[301.48474121 -337.29400635]
[311.44674683 -326.07257080]
[320.65350342 -314.22360229]
[329.06555176 -301.79785156]
[336.64694214 -288.84851074]
[343.36514282 -275.43106079]
[349.19143677 -261.60296631]
[354.10086060 -247.42340088]
[358.07235718 -232.95310974]
[361.08892822 -218.25404358]
[363.13769531 -203.38916016]
[364.20986938 -188.42210388]
[364.30084229 -173.41697693]
[363.41024780 -158.43801880]
[361.54187012 -143.54937744]
[358.70373535 -128.81481934]
[354.90795898 -114.29743958]
[350.17086792 -100.05938721]
[344.51266479 -86.16165161]
[337.95764160 -72.66373444]
[330.53384399 -59.62343216]
[322.27304077 -47.09659958]
[313.21063232 -35.13686752]
[303.38543701 -23.79545593]
[292.83950806 -13.12092781]
[281.61801147 -3.15899515]
[269.76898193 6.04768419]
[257.34317017 14.45968533]
[244.39381409 22.04098511]
[230.97633362 28.75912094]
[217.14817810 34.58532333]
[202.96859741 39.49464798]
[188.49827576 43.46606445]
[173.79919434 46.48257065]
[158.93429565 48.53124619]
[143.96723938 49.60332489]
[128.96211243 49.69421005]
[113.98315430 48.80351639]
[112.11553955 63.68679428]
[110.24793243 78.57007599]
[108.38031769 93.45335388]
[107.60047150 108.43306732]
[107.91252899 123.42982483]
[108.22458649 138.42657471]
[108.53664398 153.42332458]
[108.84869385 168.42008972]
[109.16075134 183.41683960]
[109.47280884 198.41358948]
[109.78486633 213.41033936]
[110.09692383 228.40710449]
[110.40898132 243.40385437]
[125.06397247 246.99461365]
[138.28977966 254.25688171]
[149.18464661 264.69546509]
[157.00573730 277.59869385]
[161.21981812 292.08676147]
[161.53953552 307.17184448]
[157.94311523 321.82543945]
[150.67575073 335.04846191]
[140.23294067 345.93930054]
[127.32671356 353.75540161]
[112.83702087 357.96389771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[28 129]
[29 128]
[30 127]
[31 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
