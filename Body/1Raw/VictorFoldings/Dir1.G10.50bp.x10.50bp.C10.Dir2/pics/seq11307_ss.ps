%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUUCCCCGGGGGGGGGGCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUxxxxxxxxxxCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCCCCCCCCCCCUAUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[57.22629166 370.08627319]
[43.38035202 364.07025146]
[31.67169189 354.54083252]
[22.96916771 342.20516968]
[17.91856575 327.97863770]
[16.89467430 312.91696167]
[19.97347260 298.13778687]
[26.92649460 284.73785400]
[37.23777771 273.71154785]
[50.14215851 265.87701416]
[64.68204498 261.81570435]
[64.68204498 246.81570435]
[64.68204498 231.81570435]
[64.68204498 216.81570435]
[64.68204498 201.81570435]
[64.68204498 186.81570435]
[64.68204498 171.81570435]
[64.68204498 156.81570435]
[64.68204498 141.81570435]
[64.68204498 126.81571198]
[88.74993134 89.23644257]
[85.65161133 74.55992126]
[75.23067474 62.65552521]
[80.17224121 48.60453796]
[77.07391357 33.92801285]
[62.21436310 36.01856613]
[47.24678802 37.09018707]
[32.24097061 37.13788605]
[17.26688385 36.16143417]
[2.39434147 34.16538620]
[-12.30731392 31.15904999]
[-26.76953697 27.15644073]
[-40.92489243 22.17622185]
[-54.70738983 16.24161339]
[-68.05275726 9.38028431]
[-80.89878082 1.62422717]
[-93.18556213 -6.99039602]
[-104.85581970 -16.42341995]
[-115.85513306 -26.63086128]
[-126.13221741 -37.56513214]
[-135.63916016 -49.17524719]
[-144.33163452 -61.40707397]
[-152.16911316 -74.20358276]
[-159.11505127 -87.50511169]
[-165.13706970 -101.24964142]
[-170.20707703 -115.37309265]
[-174.30143738 -129.80960083]
[-177.40107727 -144.49186707]
[-179.49153137 -159.35144043]
[-180.56304932 -174.31903076]
[-180.61065674 -189.32484436]
[-179.63409424 -204.29891968]
[-177.63795471 -219.17144775]
[-174.63151550 -233.87307739]
[-170.62881470 -248.33528137]
[-165.64849854 -262.49060059]
[-159.71379089 -276.27307129]
[-152.85237122 -289.61837769]
[-145.09623718 -302.46435547]
[-136.48152161 -314.75106812]
[-127.04842377 -326.42126465]
[-116.84091187 -337.42050171]
[-105.90657043 -347.69754028]
[-94.29639435 -357.20437622]
[-82.06450653 -365.89678955]
[-69.26794434 -373.73416138]
[-55.96636581 -380.68002319]
[-42.22179794 -386.70193481]
[-28.09831619 -391.77185059]
[-13.66177654 -395.86611938]
[1.02051187 -398.96566772]
[15.88009357 -401.05603027]
[30.84768486 -402.12744141]
[45.85350037 -402.17495728]
[60.82757568 -401.19830322]
[75.70008850 -399.20205688]
[90.40170288 -396.19549561]
[104.86387634 -392.19271851]
[119.01916504 -387.21231079]
[132.80157471 -381.27749634]
[146.14686584 -374.41598511]
[158.99278259 -366.65975952]
[171.27944946 -358.04498291]
[182.94956970 -348.61178589]
[193.94874573 -338.40420532]
[204.22569275 -327.46978760]
[213.73246765 -315.85955811]
[222.42478943 -303.62762451]
[230.26208496 -290.83099365]
[237.20785522 -277.52938843]
[243.22967529 -263.78475952]
[248.29949951 -249.66125488]
[252.39367676 -235.22468567]
[255.49311829 -220.54237366]
[257.58337402 -205.68278503]
[258.65469360 -190.71517944]
[258.70208740 -175.70936584]
[257.72534180 -160.73529053]
[255.72898865 -145.86279297]
[252.72235107 -131.16119385]
[248.71945190 -116.69905853]
[243.73895264 -102.54380035]
[237.80406189 -88.76142120]
[230.94247437 -75.41619110]
[223.18615723 -62.57032394]
[214.57128906 -50.28371429]
[205.13803101 -38.61365128]
[194.93035889 -27.61454582]
[183.99588013 -17.33767891]
[172.38557434 -7.83096933]
[160.15357971 0.86125976]
[147.35690308 8.69847965]
[134.05523682 15.64415073]
[120.31058502 21.66588593]
[106.18703461 26.73561287]
[91.75044250 30.82969093]
[94.84876251 45.50621796]
[105.04808807 56.36084747]
[100.32813263 71.46160126]
[103.42646027 86.13812256]
[112.44398499 98.12495422]
[125.68656921 105.17008972]
[138.92915344 112.21522522]
[155.75238037 114.31653595]
[158.39031982 131.06399536]
[143.02760315 138.23501587]
[131.88401794 125.45780945]
[118.64143372 118.41267395]
[105.39884949 111.36753845]
[98.96965027 115.22958374]
[79.68204498 126.81571198]
[79.68204498 141.81570435]
[79.68204498 156.81570435]
[79.68204498 171.81570435]
[79.68204498 186.81570435]
[79.68204498 201.81570435]
[79.68204498 216.81570435]
[79.68204498 231.81570435]
[79.68204498 246.81570435]
[79.68204498 261.81570435]
[94.22193146 265.87701416]
[107.12631226 273.71154785]
[117.43759918 284.73785400]
[124.39061737 298.13778687]
[127.46942139 312.91696167]
[126.44552612 327.97863770]
[121.39492798 342.20516968]
[112.69240570 354.54083252]
[100.98374176 364.07025146]
[87.13780212 370.08627319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 120]
[22 119]
[24 117]
[25 116]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
