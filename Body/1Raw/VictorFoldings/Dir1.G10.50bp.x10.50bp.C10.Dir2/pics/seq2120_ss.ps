%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAGAAAUGGGGGGGGGGAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACxxxxxxxxxxCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGCCCCCCCCCCAUCUAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[75.97539520 403.78573608]
[62.75519943 396.51327515]
[51.86839294 386.06628418]
[44.05726242 373.15701294]
[39.85438156 358.66571045]
[39.54631042 343.58038330]
[43.15405273 328.92953491]
[50.43162537 315.71215820]
[60.88283157 304.82937622]
[73.79509735 297.02325439]
[88.28803253 292.82595825]
[87.97597504 277.82919312]
[87.66391754 262.83245850]
[87.35186005 247.83569336]
[87.03980255 232.83894348]
[86.72775269 217.84219360]
[86.41569519 202.84544373]
[86.10363770 187.84867859]
[85.79158020 172.85192871]
[77.79117584 160.28837585]
[85.23970795 146.33023071]
[84.92765045 131.33348083]
[73.13101196 122.06852722]
[58.48751068 125.31935120]
[43.84400940 128.57017517]
[29.20051003 131.82099915]
[14.55700874 135.07182312]
[10.01932716 149.74510193]
[-1.25795841 160.17192078]
[-16.24131584 163.54750061]
[-30.90029526 158.96385193]
[-41.29170609 147.65393066]
[-44.62031174 132.66007996]
[-39.99073410 118.01553345]
[-28.64830399 107.65962219]
[-13.64408016 104.37802887]
[0.98587704 109.05348969]
[11.30618286 120.42832184]
[25.94968414 117.17749786]
[40.59318542 113.92667389]
[55.23668671 110.67584991]
[69.88018799 107.42502594]
[78.35016632 82.66881561]
[100.51376343 75.56214142]
[105.41531372 61.38558578]
[110.31686401 47.20902634]
[115.21841431 33.03247070]
[120.11996460 18.85591125]
[108.67935181 9.55705452]
[101.62905121 -3.78042507]
[100.32990265 -19.15516472]
[105.25585938 -34.13905716]
[115.87638855 -46.26070786]
[106.12873840 -57.66172791]
[90.67134857 -56.30202866]
[77.38420105 -64.31647491]
[71.37648010 -78.62335968]
[74.95827484 -93.72138977]
[86.75230408 -103.80506134]
[102.22353363 -104.99699402]
[115.42295837 -96.83887482]
[121.27512360 -82.46765900]
[117.52975464 -67.40937805]
[127.27741241 -56.00835800]
[142.21171570 -57.41066360]
[149.66662598 -70.42697144]
[157.12153625 -83.44328308]
[164.57644653 -96.45958710]
[172.03135681 -109.47589874]
[179.48626709 -122.49221039]
[167.88673401 -132.06083679]
[158.07127380 -143.45228577]
[150.32232666 -156.33877563]
[144.86280823 -170.34954834]
[141.84982300 -185.08148193]
[141.37005615 -200.11071777]
[143.43731689 -215.00482178]
[147.99211121 -229.33526611]
[154.90341187 -242.68974304]
[163.97233582 -254.68402100]
[174.93798828 -264.97299194]
[187.48483276 -273.26058960]
[201.25187683 -279.30844116]
[215.84304810 -282.94244385]
[230.83848572 -284.05813599]
[245.80676270 -282.62332153]
[260.31719971 -278.67935181]
[273.95233154 -272.33969116]
[286.31982422 -263.78674316]
[297.06384277 -253.26655579]
[305.87527466 -241.08184814]
[312.50054932 -227.58320618]
[316.74911499 -213.15899658]
[318.49868774 -198.22424316]
[317.69894409 -183.20863342]
[314.37286377 -168.54420471]
[308.61618042 -154.65289307]
[300.59454346 -141.93435669]
[290.53869629 -130.75456238]
[278.73797607 -121.43515015]
[265.53195190 -114.24426270]
[251.30056763 -109.38880157]
[236.45327759 -107.00846863]
[221.41726685 -107.17174530]
[206.62516785 -109.87393951]
[192.50257874 -115.03730011]
[185.04766846 -102.02098846]
[177.59275818 -89.00467682]
[170.13784790 -75.98837280]
[162.68293762 -62.97206116]
[155.22802734 -49.95575333]
[166.91589355 -41.49606323]
[174.79748535 -29.64023590]
[177.98727417 -15.96227646]
[176.21214294 -2.22310162]
[169.82952881 9.85607338]
[159.76548767 18.80935097]
[147.38264465 23.60377502]
[134.29652405 23.75746155]
[129.39497375 37.93402100]
[124.49342346 52.11057663]
[119.59187317 66.28713226]
[114.69032288 80.46369171]
[123.45468140 89.35109711]
[127.00112915 101.99262238]
[123.84766388 115.40431976]
[114.17443085 126.10601044]
[99.92440796 131.02142334]
[100.23646545 146.01817322]
[108.25918579 159.65438843]
[100.78833771 172.53987122]
[101.10038757 187.53662109]
[101.41244507 202.53338623]
[101.72450256 217.53013611]
[102.03656006 232.52688599]
[102.34861755 247.52363586]
[102.66067505 262.52038574]
[102.97272491 277.51715088]
[103.28478241 292.51391602]
[117.93977356 296.10467529]
[131.16558838 303.36694336]
[142.06045532 313.80551147]
[149.88154602 326.70874023]
[154.09562683 341.19680786]
[154.41534424 356.28189087]
[150.81890869 370.93551636]
[143.55155945 384.15850830]
[133.10874939 395.04934692]
[120.20252228 402.86544800]
[105.71282959 407.07394409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[44 123]
[45 122]
[46 121]
[47 120]
[48 119]
[53 64]
[54 63]
[65 111]
[66 110]
[67 109]
[68 108]
[69 107]
[70 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
