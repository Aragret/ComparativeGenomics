%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCAAAGGGGGGGGGGGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAxxxxxxxxxxCCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGACCCCCCCCCCAAACCCCACA\
) } def
/len { sequence length } bind def

/coor [
[89.58230591 371.07440186]
[75.09261322 366.86590576]
[62.18638229 359.04980469]
[51.74357986 348.15896606]
[44.47621918 334.93597412]
[40.87979126 320.28234863]
[41.19951248 305.19726562]
[45.41358185 290.70919800]
[53.23468018 277.80596924]
[64.12954712 267.36737061]
[77.35535431 260.10513306]
[92.01035309 256.51437378]
[92.32240295 241.51760864]
[92.63446045 226.52085876]
[92.94651794 211.52409363]
[93.25857544 196.52734375]
[93.57063293 181.53059387]
[93.88269043 166.53384399]
[94.19474030 151.53707886]
[94.50679779 136.54032898]
[94.81885529 121.54357910]
[83.02221680 112.27862549]
[68.52661896 116.13578796]
[54.03102112 119.99294281]
[52.05546570 135.06495667]
[44.45815277 148.23117065]
[32.39760971 157.48384094]
[17.71298981 161.41198730]
[2.64358783 159.41661072]
[-10.51262283 151.80198669]
[-19.74941444 139.72927856]
[-23.65824318 125.03950500]
[-21.64304161 109.97274017]
[-14.01111221 96.82655334]
[-1.92627037 87.60565186]
[12.76863384 83.71615601]
[27.83273506 85.75117493]
[40.96886444 93.40039062]
[50.17386246 105.49735260]
[64.66945648 101.64019012]
[79.16505432 97.78302765]
[89.93586731 87.34321594]
[94.24344635 72.97503662]
[98.55103302 58.60684967]
[102.85861969 44.23866653]
[107.16620636 29.87048149]
[101.73757172 18.12383080]
[105.66767883 6.21697712]
[116.31785583 0.39623460]
[120.92342377 -13.87922573]
[125.52898407 -28.15468597]
[130.13455200 -42.43014908]
[134.74011230 -56.70560837]
[121.00127411 -62.75939560]
[107.95772552 -70.19375610]
[95.74771881 -78.92988586]
[84.50070953 -88.87516785]
[74.33590698 -99.92418671]
[65.36106873 -111.95981598]
[57.67133331 -124.85446930]
[51.34821701 -138.47145081]
[46.45874786 -152.66641235]
[43.05475616 -167.28889465]
[41.17232513 -182.18388367]
[40.83140945 -197.19346619]
[42.03562927 -212.15855408]
[44.77220917 -226.92050171]
[49.01214600 -241.32283020]
[54.71049500 -255.21286011]
[61.80684662 -268.44335938]
[70.22598267 -280.87405396]
[79.87864685 -292.37316895]
[90.66251373 -302.81884766]
[102.46327972 -312.10034180]
[115.15584564 -320.11926270]
[128.60565186 -326.79055786]
[142.67015076 -332.04357910]
[157.20021057 -335.82263184]
[172.04183960 -338.08761597]
[187.03768921 -338.81454468]
[202.02880859 -337.99569702]
[216.85627747 -335.63977051]
[231.36289978 -331.77172852]
[245.39492798 -326.43261719]
[258.80358887 -319.67895508]
[271.44674683 -311.58239746]
[283.19039917 -302.22872925]
[293.91003418 -291.71716309]
[303.49203491 -280.15905762]
[311.83480835 -267.67700195]
[318.84991455 -254.40324402]
[324.46301270 -240.47854614]
[328.61459351 -226.05050659]
[331.26062012 -211.27204895]
[332.37307739 -196.29986572]
[331.94015503 -181.29264832]
[329.96646118 -166.40948486]
[326.47290039 -151.80815125]
[321.49649048 -137.64341736]
[315.09002686 -124.06545258]
[307.32138062 -111.21818542]
[298.27294922 -99.23780060]
[288.04058838 -88.25130463]
[276.73281860 -78.37514496]
[264.46951294 -69.71403503]
[251.38061523 -62.35976791]
[237.60493469 -56.39031982]
[223.28845215 -51.86895752]
[208.58296204 -48.84361649]
[193.64434814 -47.34636688]
[178.63096619 -47.39307785]
[163.70195007 -48.98325729]
[149.01557922 -52.10004425]
[144.41001892 -37.82458115]
[139.80444336 -23.54912186]
[135.19888306 -9.27366161]
[130.59332275 5.00179911]
[135.21897888 21.90159607]
[121.53438568 34.17806625]
[117.22680664 48.54624939]
[112.91921997 62.91443253]
[108.61163330 77.28261566]
[104.30404663 91.65080261]
[107.69631958 91.84405518]
[111.22027588 93.36623383]
[114.38048553 96.27426910]
[116.66990662 100.44902802]
[117.62973785 105.59616852]
[116.90721893 111.26667023]
[114.30482483 116.89557648]
[109.81561279 121.85562897]
[109.50355530 136.85238647]
[109.19149780 151.84913635]
[108.87944031 166.84588623]
[108.56738281 181.84265137]
[108.25532532 196.83940125]
[107.94327545 211.83615112]
[107.63121796 226.83290100]
[107.31916046 241.82966614]
[107.00710297 256.82641602]
[121.50003815 261.02371216]
[134.41230774 268.82983398]
[144.86351013 279.71261597]
[152.14108276 292.92999268]
[155.74882507 307.58084106]
[155.44075012 322.66616821]
[151.23786926 337.15747070]
[143.42674255 350.06674194]
[132.53993225 360.51373291]
[119.31974030 367.78619385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 41]
[23 40]
[24 39]
[42 123]
[43 122]
[44 121]
[45 120]
[46 119]
[49 117]
[50 116]
[51 115]
[52 114]
[53 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
