%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCUAUUCGGGGGGGGGGUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACxxxxxxxxxxAACGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGCCCCCCCCCCAAGCCUAUUC\
) } def
/len { sequence length } bind def

/coor [
[94.27690125 710.17102051]
[80.43096161 704.15502930]
[68.72230530 694.62561035]
[60.01977921 682.28991699]
[54.96917725 668.06341553]
[53.94528580 653.00170898]
[57.02408600 638.22253418]
[63.97710800 624.82263184]
[74.28839111 613.79632568]
[87.19277191 605.96179199]
[101.73265839 601.90045166]
[101.73265839 586.90045166]
[101.73265839 571.90045166]
[101.73265839 556.90045166]
[101.73265839 541.90045166]
[101.73265839 526.90045166]
[101.73265839 511.90048218]
[101.73265839 496.90048218]
[101.73265839 481.90048218]
[101.73265839 466.90048218]
[101.73265839 451.90048218]
[92.14154816 437.23724365]
[101.39580536 421.35208130]
[91.50172424 406.89154053]
[100.42350769 390.81729126]
[96.98061371 384.22241211]
[99.94573212 375.51266479]
[99.63367462 360.51589966]
[99.32161713 345.51916504]
[85.15569305 340.76394653]
[73.44947815 331.43154907]
[65.62786102 318.63323975]
[62.65132904 303.90362549]
[64.89805603 289.01663208]
[72.11595917 275.77194214]
[83.45082855 265.77731323]
[97.54738617 260.25350952]
[97.23532867 245.25674438]
[96.92327118 230.25999451]
[88.92287445 217.69644165]
[96.37140656 203.73829651]
[96.05934906 188.74153137]
[95.74729156 173.74478149]
[95.43523407 158.74803162]
[95.12317657 143.75128174]
[94.81112671 128.75451660]
[94.49906921 113.75776672]
[87.17996216 100.66461182]
[74.56883240 92.54306793]
[58.17166519 92.28815460]
[50.43133545 77.83065796]
[59.31042480 64.04320526]
[75.67489624 65.10915375]
[82.69037628 79.93194580]
[95.30150604 88.05348206]
[102.19269562 85.09350586]
[115.97507477 79.17353821]
[122.86626434 76.21356201]
[125.65859222 61.47575378]
[120.62550354 46.47646332]
[130.59680176 35.41199875]
[133.38912964 20.67419052]
[121.86542511 10.61678028]
[116.95550537 -3.76339483]
[119.88320923 -18.57200432]
[129.76403809 -29.85141945]
[143.86901855 -34.63837433]
[146.66134644 -49.37617874]
[133.00320435 -55.77194214]
[121.36523438 -65.36405182]
[112.47901917 -77.54953766]
[106.90315247 -91.56240845]
[104.98814392 -106.52180481]
[106.85436249 -121.48736572]
[112.38449860 -135.51834106]
[121.23092651 -147.73274231]
[132.83755493 -157.36274719]
[146.47476196 -163.80302429]
[161.28533936 -166.64871216]
[176.33824158 -165.72093201]
[190.68725586 -161.07801819]
[203.43037415 -153.01182556]
[213.76657104 -142.02938843]
[221.04609680 -128.82109070]
[224.81135559 -114.21719360]
[224.82565308 -99.13572693]
[221.08808899 -84.52471924]
[213.83361816 -71.30263519]
[203.51826477 -60.30062103]
[190.79046631 -52.21027756]
[176.45027161 -47.54016495]
[161.39915466 -46.58385468]
[158.60682678 -31.84604836]
[169.98315430 -22.23123169]
[175.05314636 -8.11913586]
[172.36091614 6.73408985]
[162.53099060 18.32155228]
[148.12693787 23.46651649]
[145.33460999 38.20432281]
[150.56742859 52.14946365]
[140.39639282 64.26807404]
[137.60406494 79.00588226]
[109.49581909 113.44570923]
[109.80787659 128.44245911]
[110.11993408 143.43922424]
[110.43199158 158.43597412]
[110.74404907 173.43272400]
[111.05609894 188.42947388]
[111.36815643 203.42623901]
[119.39087677 217.06245422]
[111.92002869 229.94793701]
[112.23208618 244.94468689]
[112.54414368 259.94143677]
[126.85827637 264.87405396]
[138.59910583 274.38854980]
[146.36170959 287.32153320]
[149.22576904 302.10217285]
[146.86454773 316.94284058]
[139.58209229 330.05545044]
[128.27421570 339.86672974]
[114.31836700 345.20709229]
[114.63042450 360.20385742]
[114.94248199 375.20059204]
[115.41052246 390.19329834]
[124.37960052 399.52117920]
[124.55603790 412.05865479]
[116.39256287 421.04000854]
[125.16564178 430.55245972]
[125.08121490 443.09088135]
[116.73265839 451.90048218]
[116.73265839 466.90048218]
[116.73265839 481.90048218]
[116.73265839 496.90048218]
[116.73265839 511.90048218]
[116.73265839 526.90045166]
[116.73265839 541.90045166]
[116.73265839 556.90045166]
[116.73265839 571.90045166]
[116.73265839 586.90045166]
[116.73265839 601.90045166]
[131.27255249 605.96179199]
[144.17692566 613.79632568]
[154.48820496 624.82263184]
[161.44123840 638.22253418]
[164.52003479 653.00170898]
[163.49613953 668.06341553]
[158.44554138 682.28991699]
[149.74301147 694.62561035]
[138.03434753 704.15502930]
[124.18841553 710.17102051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 127]
[25 124]
[27 123]
[28 122]
[29 121]
[37 113]
[38 112]
[39 111]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[48 55]
[49 54]
[58 102]
[59 101]
[61 99]
[62 98]
[67 93]
[68 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
