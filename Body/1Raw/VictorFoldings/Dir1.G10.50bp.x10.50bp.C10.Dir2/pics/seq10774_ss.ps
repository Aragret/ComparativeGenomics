%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAACCUAGGGGGGGGGGUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUxxxxxxxxxxCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCCCCCCCCCCCUAACAAACUA\
) } def
/len { sequence length } bind def

/coor [
[60.67813110 542.76000977]
[47.75897217 535.00164795]
[36.97767639 524.47259521]
[28.91565895 511.74075317]
[24.00769997 497.49264526]
[22.51847649 482.49667358]
[24.52829933 467.56155396]
[29.92878342 453.49276733]
[38.42868805 441.04895020]
[49.56962204 430.90121460]
[62.75077057 423.59683228]
[77.26129150 419.52969360]
[76.64546204 404.54235840]
[76.02964020 389.55499268]
[75.41381073 374.56762695]
[74.79798889 359.58029175]
[74.18215942 344.59292603]
[73.56633759 329.60559082]
[72.95050812 314.61822510]
[72.33468628 299.63088989]
[71.71885681 284.64352417]
[59.57935715 293.45443726]
[45.06717300 289.66015625]
[38.79367828 276.03506470]
[45.34607697 262.54190063]
[59.93322754 259.04687500]
[71.88865662 268.10507202]
[72.81207275 253.13352966]
[65.87294769 239.95407104]
[74.44512939 226.65638733]
[72.34088898 223.75477600]
[71.57210541 219.67083740]
[72.68741608 215.05979919]
[75.91439056 210.80047607]
[77.75772095 195.91416931]
[79.60104370 181.02784729]
[81.44436646 166.14154053]
[83.28768921 151.25523376]
[81.36606598 148.22958374]
[80.85015106 144.10606384]
[82.24720764 139.57243347]
[85.73027802 135.51983643]
[88.48651886 120.77524567]
[91.24275970 106.03064728]
[92.93315887 91.12619781]
[93.54898834 76.13884735]
[94.16481018 61.15149307]
[94.78063965 46.16413879]
[95.39646149 31.17678452]
[95.70443726 16.17994690]
[95.70443726 1.17994714]
[95.70443726 -13.82005310]
[95.70443726 -28.82005310]
[95.70443726 -43.82005310]
[95.70443726 -58.82005310]
[92.68971252 -64.81621552]
[93.13541412 -70.55984497]
[96.02506256 -74.43271637]
[96.64089203 -89.42006683]
[97.25671387 -104.40742493]
[97.87254333 -119.39477539]
[98.48836517 -134.38212585]
[91.32415771 -148.48832703]
[99.57745361 -160.88720703]
[100.19327545 -175.87455750]
[100.80910492 -190.86190796]
[90.38080597 -202.43292236]
[91.21884155 -217.62345886]
[102.31430054 -227.49394226]
[102.93012238 -242.48129272]
[103.54595184 -257.46865845]
[90.05367279 -264.60455322]
[81.00061035 -276.89297485]
[78.18426514 -291.89398193]
[82.16381836 -306.62918091]
[92.14913177 -318.17285156]
[106.15760803 -324.23300171]
[121.40785217 -323.60638428]
[134.87193298 -316.41738892]
[143.87652588 -304.09344482]
[146.63377380 -289.08142090]
[142.59622192 -274.36203003]
[132.56553650 -262.85775757]
[118.53330231 -256.85281372]
[117.91748047 -241.86547852]
[117.30165100 -226.87811279]
[127.54992676 -216.13063049]
[127.13889313 -200.92254639]
[115.79645538 -190.24609375]
[115.18063354 -175.25874329]
[114.56480408 -160.27137756]
[121.77306366 -147.23718262]
[113.47571564 -133.76631165]
[112.85989380 -118.77895355]
[112.24407196 -103.79159546]
[111.62824249 -88.80424500]
[111.01242065 -73.81689453]
[110.70443726 -58.82005310]
[110.70443726 -43.82005310]
[110.70443726 -28.82005310]
[110.70443726 -13.82005310]
[110.70443726 1.17994714]
[110.70443726 16.17994690]
[113.43265533 20.16818810]
[113.64217377 25.92527008]
[110.38381195 31.79261017]
[109.76799011 46.77996445]
[109.15216827 61.76731873]
[108.53633881 76.75466919]
[107.92051697 91.74202728]
[119.20349884 81.85797882]
[134.19543457 81.36632538]
[146.10176086 90.48988342]
[149.52635193 105.09372711]
[142.91714478 118.55917358]
[129.26950073 124.78348541]
[114.76876068 120.94570923]
[105.98735809 108.78688812]
[103.23111725 123.53148651]
[100.47487640 138.27607727]
[98.17399597 153.09855652]
[96.33067322 167.98487854]
[94.48735046 182.87118530]
[92.64402771 197.75749207]
[90.80070496 212.64379883]
[89.41667938 227.57980347]
[96.28974915 241.83012390]
[87.78362274 254.05693054]
[86.86020660 269.02847290]
[86.70621490 284.02770996]
[87.32203674 299.01504517]
[87.93786621 314.00241089]
[88.55368805 328.98974609]
[89.16951752 343.97711182]
[89.78533936 358.96447754]
[90.40116119 373.95181274]
[91.01699066 388.93917847]
[91.63281250 403.92651367]
[92.24864197 418.91387939]
[107.04391479 421.77685547]
[120.77988434 427.97521973]
[132.71578979 437.17471313]
[142.20794678 448.87924194]
[148.74444580 462.45758057]
[151.97277832 477.17742920]
[151.71885681 492.24502563]
[147.99636841 506.84774780]
[141.00605774 520.19812012]
[131.12492371 531.57617188]
[118.88581085 540.36828613]
[104.94879150 546.10028076]
[90.06544495 548.46307373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 129]
[28 128]
[30 126]
[34 125]
[35 124]
[36 123]
[37 122]
[38 121]
[42 120]
[43 119]
[44 118]
[45 110]
[46 109]
[47 108]
[48 107]
[49 106]
[50 103]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[64 91]
[65 90]
[66 89]
[69 86]
[70 85]
[71 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
