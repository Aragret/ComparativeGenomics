%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAUUUAUCGGGGGGGGGGGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUxxxxxxxxxxAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAACCCCCCCCCCUAUGAUUUAUC\
) } def
/len { sequence length } bind def

/coor [
[53.00951767 471.01257324]
[38.44965744 467.10440063]
[25.24851418 459.82473755]
[14.17358208 449.59686279]
[5.86874294 437.01541138]
[0.81683004 422.81182861]
[-0.68844539 407.81192017]
[1.44043136 392.88772583]
[7.07969046 378.90695190]
[15.90147209 366.68240356]
[27.39289093 356.92480469]
[40.88584900 350.20144653]
[55.59588623 346.90322876]
[55.90386200 331.90640259]
[56.21184158 316.90954590]
[56.51981735 301.91271973]
[56.82779312 286.91586304]
[57.13577271 271.91903687]
[57.44374847 256.92221069]
[57.75172806 241.92535400]
[58.05970383 226.92852783]
[58.36768341 211.93168640]
[49.97139740 224.36158752]
[37.70915985 233.00088501]
[23.17856598 236.72402954]
[8.27272701 235.04594421]
[-5.06634569 228.18524170]
[-15.10077190 217.03579712]
[-20.52321625 203.05018616]
[-20.62721634 188.05055237]
[-15.39921951 173.99110413]
[-5.52035904 162.70358276]
[7.72230005 155.65858459]
[22.60343552 153.77397156]
[37.18426132 157.29527283]
[49.56510925 165.76370239]
[58.13294601 178.07598877]
[61.77149200 192.62773132]
[66.61130524 178.42997742]
[71.45112610 164.23222351]
[66.39182281 153.20201111]
[70.35520172 141.30818176]
[81.72511292 135.13334656]
[86.85541534 121.03794861]
[91.98571777 106.94255829]
[83.54869843 103.60778046]
[77.83103180 93.57477570]
[67.27901459 82.91386414]
[56.72700119 72.25295258]
[46.17498398 61.59204865]
[35.62297058 50.93113708]
[25.07095528 40.27022934]
[14.51893997 29.60931969]
[3.96692467 18.94841194]
[-6.58509064 8.28750229]
[-22.53756523 4.48611116]
[-26.96175766 -11.30498028]
[-15.30643559 -22.84125137]
[0.43840256 -18.25517273]
[4.07581854 -2.26451254]
[14.62783337 8.39639664]
[25.17984772 19.05730438]
[35.73186493 29.71821404]
[46.28387833 40.37912369]
[56.83589554 51.04003143]
[67.38790894 61.70093918]
[77.93992615 72.36184692]
[88.49193573 83.02275848]
[84.34278870 68.60802460]
[80.19363403 54.19329071]
[72.20388794 41.49825668]
[69.17043304 26.80818558]
[71.47813416 11.98676395]
[78.83419800 -1.08565938]
[90.30540466 -10.75062466]
[104.43641663 -15.78196716]
[119.43448639 -15.54137611]
[133.39685059 -10.05937386]
[144.55215454 -0.03144522]
[151.48513794 13.27019596]
[153.31625366 28.15801048]
[149.81318665 42.74322510]
[141.42036438 55.17546082]
[129.20414734 63.87672043]
[119.88468170 75.63034058]
[110.56522369 87.38396454]
[124.37880707 81.53717804]
[138.19238281 75.69039154]
[152.00596619 69.84360504]
[158.25105286 53.53451920]
[174.03659058 46.89009476]
[189.44636536 53.55656433]
[203.13699341 47.42739105]
[205.62408447 43.69724274]
[208.85978699 41.23679352]
[212.33988953 40.12521744]
[215.58790588 40.26530838]
[218.21156311 41.40876389]
[232.35887146 36.42344284]
[246.50619507 31.43811989]
[260.65350342 26.45279694]
[263.39678955 11.34088135]
[273.34072876 -0.36439791]
[287.81045532 -5.51438046]
[302.91369629 -2.72374606]
[314.58776855 7.25683832]
[319.69235229 21.74264526]
[316.85440063 36.83706665]
[306.83728027 48.47977829]
[292.33554077 53.53894806]
[277.25009155 50.65368652]
[265.63882446 40.60011292]
[251.49151611 45.58543396]
[237.34419250 50.57075882]
[223.19688416 55.55607986]
[209.26615906 61.11801529]
[195.57554626 67.24719238]
[192.69590759 79.84322357]
[182.92869568 88.59709167]
[169.70634460 90.13036346]
[157.85275269 83.65718842]
[144.03916931 89.50397491]
[130.22560120 95.35076141]
[116.41201019 101.19754791]
[106.08110809 112.07286072]
[100.95080566 126.16825104]
[95.82050323 140.26364136]
[99.45832062 158.28576660]
[85.64888000 169.07203674]
[80.80905914 183.26979065]
[75.96924591 197.46754456]
[73.36452484 212.23965454]
[73.05654144 227.23649597]
[72.74856567 242.23333740]
[72.44058990 257.23016357]
[72.13261414 272.22702026]
[71.82463074 287.22384644]
[71.51665497 302.22070312]
[71.20867920 317.21752930]
[70.90070343 332.21435547]
[70.59272003 347.21121216]
[85.15494537 351.11056519]
[98.36050415 358.38220215]
[109.44163513 368.60336304]
[117.75409698 381.17977905]
[122.81462097 395.38031006]
[124.32898712 410.37930298]
[122.20915985 425.30477905]
[116.57837677 439.28897095]
[107.76400757 451.51885986]
[96.27851105 461.28341675]
[82.78962708 468.01495361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[38 131]
[39 130]
[40 129]
[43 127]
[44 126]
[45 125]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[86 124]
[87 123]
[88 122]
[89 121]
[92 117]
[93 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
