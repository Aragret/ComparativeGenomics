%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUGACCCCGGGGGGGGGGUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAxxxxxxxxxxCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCCCCCCCCCCCUGACCCC\
) } def
/len { sequence length } bind def

/coor [
[103.35046387 396.84365845]
[89.32852173 391.29064941]
[77.12856293 382.42431641]
[67.51749420 370.80200195]
[61.09946823 357.15429688]
[58.27793121 342.33911133]
[59.23024750 327.28775024]
[63.89655304 312.94631958]
[71.98352051 300.21636963]
[82.98279572 289.89810181]
[96.20295715 282.64010620]
[110.81296539 278.89868164]
[110.81296539 263.89868164]
[110.81296539 248.89868164]
[110.81296539 233.89868164]
[110.81296539 218.89868164]
[110.81296539 203.89868164]
[110.81296539 188.89868164]
[110.81296539 173.89868164]
[110.81296539 158.89868164]
[110.81296539 143.89868164]
[110.81296539 128.89868164]
[105.16782379 123.96083069]
[99.26419067 137.75021362]
[84.32540131 136.39648438]
[80.99671173 121.77048492]
[93.87754822 114.08512115]
[88.23240662 109.14727020]
[73.36580658 111.14332581]
[58.49920654 113.13938141]
[43.63261032 115.13543701]
[35.41782379 128.44149780]
[20.55580330 133.30506897]
[6.06393576 127.42971802]
[-1.21516120 113.58960724]
[2.15548015 98.31961060]
[14.58434582 88.82975769]
[30.20290565 89.60086823]
[41.63655472 100.26884460]
[56.50315094 98.27278137]
[71.36975098 96.27672577]
[86.23635101 94.28067017]
[72.15310669 89.11711884]
[65.16798401 75.84278107]
[68.88740540 61.31122971]
[81.39103699 53.02514267]
[96.22321320 55.26263809]
[105.72605896 66.86849213]
[104.99240112 81.85246277]
[112.62537384 68.93975830]
[120.25833893 56.02706146]
[116.54505920 40.89929962]
[124.46992493 27.91272163]
[138.91481018 24.46589851]
[146.54779053 11.55320072]
[139.38609314 -6.12597752]
[145.32038879 -23.87828827]
[136.40423584 -35.94071960]
[127.48809052 -48.00315094]
[113.21091461 -57.14637756]
[118.04450226 -73.39669037]
[134.99781799 -73.25054169]
[139.55052185 -56.91930389]
[148.46667480 -44.85687256]
[157.38282776 -32.79444122]
[164.21575928 -34.33201981]
[171.21365356 -34.04447937]
[177.89743042 -31.95150185]
[187.77313232 -43.24178314]
[197.64883423 -54.53206253]
[207.52453613 -65.82234192]
[197.63522339 -77.13095856]
[189.34147644 -89.65682220]
[182.79133606 -103.17639923]
[178.10168457 -117.44842529]
[175.35620117 -132.21818542]
[174.60391235 -147.22209167]
[175.85821533 -162.19241333]
[179.09674072 -176.86195374]
[184.26168823 -190.96891785]
[191.26087952 -204.26158142]
[199.96942139 -216.50268555]
[210.23188782 -227.47380066]
[221.86512756 -236.97912598]
[234.66154480 -244.84901428]
[248.39276123 -250.94303894]
[262.81372070 -255.15242004]
[277.66708374 -257.40206909]
[292.68777466 -257.65182495]
[307.60772705 -255.89720154]
[322.16067505 -252.16955566]
[336.08688354 -246.53538513]
[349.13784790 -239.09524536]
[361.08065796 -229.98191833]
[371.70217896 -219.35803223]
[380.81286621 -207.41319275]
[388.25009155 -194.36056519]
[393.88113403 -180.43309021]
[397.60556030 -165.87931824]
[399.35684204 -150.95898438]
[399.10375977 -135.93835449]
[396.85079956 -121.08548737]
[392.63821411 -106.66545105]
[386.54113770 -92.93559265]
[378.66839600 -80.14093018]
[369.16046143 -68.50980377]
[358.18707275 -58.24979019]
[345.94403076 -49.54397964]
[332.64981079 -42.54774475]
[318.54168701 -37.38593674]
[303.87142944 -34.15068054]
[288.90081787 -32.89971161]
[273.89709473 -33.65534973]
[259.12792969 -36.40411377]
[244.85696411 -41.09695053]
[231.33883667 -47.65010834]
[218.81481934 -55.94663620]
[208.93911743 -44.65635681]
[199.06341553 -33.36607742]
[189.18769836 -22.07579613]
[193.63688660 -6.81479549]
[188.64378357 8.43731499]
[175.78952026 18.29818153]
[159.46047974 19.18617058]
[151.82751465 32.09886932]
[155.77180481 46.41592789]
[148.21482849 59.61997604]
[133.17103577 63.66003418]
[125.53807068 76.57273102]
[117.90509796 89.48542786]
[125.81296539 128.89868164]
[125.81296539 143.89868164]
[125.81296539 158.89868164]
[125.81296539 173.89868164]
[125.81296539 188.89868164]
[125.81296539 203.89868164]
[125.81296539 218.89868164]
[125.81296539 233.89868164]
[125.81296539 248.89868164]
[125.81296539 263.89868164]
[125.81296539 278.89868164]
[140.42297363 282.64010620]
[153.64314270 289.89810181]
[164.64241028 300.21636963]
[172.72938538 312.94631958]
[177.39569092 327.28775024]
[178.34800720 342.33911133]
[175.52645874 357.15429688]
[169.10844421 370.80200195]
[159.49736023 382.42431641]
[147.29740906 391.29064941]
[133.27546692 396.84365845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[28 42]
[29 41]
[30 40]
[31 39]
[49 130]
[50 129]
[51 128]
[54 125]
[55 124]
[57 65]
[58 64]
[59 63]
[68 120]
[69 119]
[70 118]
[71 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
