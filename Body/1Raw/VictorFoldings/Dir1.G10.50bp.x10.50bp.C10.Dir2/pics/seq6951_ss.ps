%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCUGACUCGGGGGGGGGGGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCxxxxxxxxxxUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACCCCCCCCCCCUACCUGACUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 377.03677368]
[71.19830322 371.02072144]
[59.48964310 361.49130249]
[50.78712082 349.15563965]
[45.73651886 334.92913818]
[44.71262741 319.86743164]
[47.79142761 305.08828735]
[54.74444962 291.68835449]
[65.05573273 280.66201782]
[77.96011353 272.82751465]
[92.50000000 268.76620483]
[92.50000000 253.76620483]
[92.50000000 238.76620483]
[92.50000000 223.76620483]
[92.50000000 208.76620483]
[92.50000000 193.76620483]
[92.50000000 178.76620483]
[92.50000000 163.76620483]
[92.50000000 148.76620483]
[92.50000000 133.76620483]
[92.50000000 118.76620483]
[83.58029175 113.72735596]
[77.86504364 104.53462219]
[77.22094727 93.14797974]
[82.35519409 82.31788635]
[68.23039246 77.26912689]
[55.43559647 85.84813690]
[40.22041702 85.25510406]
[28.41160583 75.92687225]
[24.40791702 61.60526276]
[10.28311443 56.55650711]
[-3.84168816 51.50775146]
[-19.44091797 54.14869308]
[-28.82135010 42.57904434]
[-44.42058182 45.21998596]
[-53.80101013 33.65033722]
[-67.92581177 28.60158157]
[-82.05062103 23.55282593]
[-96.17542267 18.50406837]
[-100.55867767 19.47799301]
[-104.60282898 19.01336098]
[-107.88751221 17.40315819]
[-110.13519287 15.04903507]
[-111.23462677 12.40355015]
[-124.89086914 6.19814348]
[-140.35635376 10.46409893]
[-153.24894714 0.91629934]
[-153.67855835 -15.12100029]
[-141.31562805 -25.34535599]
[-125.64393616 -21.91351891]
[-118.68546295 -7.45809793]
[-105.02922058 -1.25269067]
[-91.12666321 4.37926626]
[-77.00186157 9.42802238]
[-62.87705612 14.47677898]
[-48.75225449 19.52553558]
[-34.16332626 16.52347183]
[-23.77259254 28.45424271]
[-9.18366337 25.45217896]
[1.20706820 37.38294983]
[15.33187103 42.43170547]
[29.45667458 47.48046112]
[41.63154984 38.94170380]
[56.67783356 39.21252823]
[68.82151794 48.39862442]
[73.27914429 63.14432526]
[87.40394592 68.19308472]
[102.22171021 65.86197662]
[114.11408997 56.72024155]
[106.30331421 43.89686203]
[99.92481232 30.30414581]
[95.05335236 16.10146523]
[91.74606323 1.45533788]
[90.04170990 -13.46251774]
[89.96028137 -28.47719765]
[91.50272369 -43.41266251]
[94.65096283 -58.09379959]
[99.36808777 -72.34848022]
[105.59878540 -86.00958252]
[113.27000427 -98.91693115]
[122.29180908 -110.91918945]
[132.55842590 -121.87564850]
[143.94946289 -131.65783691]
[156.33139038 -140.15107727]
[169.55903625 -147.25578308]
[183.47729492 -152.88864136]
[197.92300415 -156.98364258]
[212.72677612 -159.49275208]
[227.71504211 -160.38655090]
[242.71209717 -159.65455627]
[257.54208374 -157.30537415]
[272.03112793 -153.36653137]
[286.00936890 -147.88420105]
[299.31292725 -140.92266846]
[311.78579712 -132.56356812]
[323.28176880 -122.90488434]
[333.66601562 -112.05986786]
[342.81683350 -100.15567780]
[350.62692261 -87.33187866]
[357.00469971 -73.73881531]
[361.87539673 -59.53587341]
[365.18188477 -44.88956833]
[366.88543701 -29.97162247]
[366.96606445 -14.95693779]
[365.42282104 -0.02155630]
[362.27377319 14.65941238]
[357.55590820 28.91384315]
[351.32446289 42.57460785]
[343.65255737 55.48154068]
[334.63009644 67.48331451]
[324.36288452 78.43922424]
[312.97131348 88.22080231]
[300.58892822 96.71337128]
[287.36090088 103.81735992]
[273.44235229 109.44947815]
[258.99642944 113.54369354]
[244.19252014 116.05200195]
[229.20420837 116.94499969]
[214.20719910 116.21220398]
[199.37733459 113.86222076]
[184.88848877 109.92259216]
[170.91053772 104.43952179]
[157.60736084 97.47727203]
[145.13493347 89.11750031]
[133.63949585 79.45819855]
[123.25582123 68.61262512]
[111.36344147 77.75435638]
[122.08573151 92.29928589]
[119.83730316 109.03898621]
[107.50000000 118.76620483]
[107.50000000 133.76620483]
[107.50000000 148.76620483]
[107.50000000 163.76620483]
[107.50000000 178.76620483]
[107.50000000 193.76620483]
[107.50000000 208.76620483]
[107.50000000 223.76620483]
[107.50000000 238.76620483]
[107.50000000 253.76620483]
[107.50000000 268.76620483]
[122.03988647 272.82751465]
[134.94427490 280.66201782]
[145.25555420 291.68835449]
[152.20857239 305.08828735]
[155.28736877 319.86743164]
[154.26348877 334.92913818]
[149.21287537 349.15563965]
[140.51036072 361.49130249]
[128.80169678 371.02072144]
[114.95575714 377.03677368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 67]
[26 66]
[30 62]
[31 61]
[32 60]
[34 58]
[36 56]
[37 55]
[38 54]
[39 53]
[44 52]
[45 51]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
