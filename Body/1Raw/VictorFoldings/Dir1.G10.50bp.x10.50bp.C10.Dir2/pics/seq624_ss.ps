%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACUAAUCGGGGGGGGGGUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUxxxxxxxxxxCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCCCCCCCCCCCUACUCCUAAUC\
) } def
/len { sequence length } bind def

/coor [
[-1.79847419 290.39645386]
[-11.24249458 285.03741455]
[-20.40512848 279.21032715]
[-29.26320076 272.92993164]
[-37.79430389 266.21209717]
[-45.97685623 259.07385254]
[-53.79016113 251.53323364]
[-61.21445847 243.60931396]
[-68.23096466 235.32212830]
[-74.82193756 226.69264221]
[-80.97069550 217.74269104]
[-86.66168976 208.49491882]
[-91.88053131 198.97271729]
[-105.44242859 205.38168335]
[-119.00431824 211.79066467]
[-128.17553711 224.68249512]
[-142.98847961 223.12490845]
[-156.55038452 229.53388977]
[-170.11227417 235.94285583]
[-183.67417908 242.35183716]
[-197.23606873 248.76081848]
[-210.79797363 255.16978455]
[-211.97804260 270.48327637]
[-220.66999817 283.14602661]
[-234.53573608 289.75186157]
[-249.84544373 288.52377319]
[-262.48089600 279.79217529]
[-269.04321289 265.90579224]
[-267.76718140 250.60000610]
[-258.99600220 237.99198914]
[-245.08912659 231.47323608]
[-229.78741455 232.79725647]
[-217.20693970 241.60789490]
[-203.64505005 235.19891357]
[-190.08314514 228.78994751]
[-176.52125549 222.38096619]
[-162.95935059 215.97198486]
[-149.39746094 209.56301880]
[-141.19627380 197.12959290]
[-125.41329956 198.22875977]
[-111.85140228 191.81979370]
[-98.28950500 185.41081238]
[-108.30060577 156.78549194]
[-114.20219421 127.03985596]
[-115.87783813 96.76075745]
[-113.29447937 66.54556274]
[-106.50308228 36.99038696]
[-95.63763428 8.67831326]
[-80.91249847 -17.83209801]
[-62.61817932 -42.01782608]
[-41.11560440 -63.40171814]
[-50.51946259 -75.08792877]
[-59.92331696 -86.77413177]
[-69.32717896 -98.46034241]
[-84.33230591 -95.44295502]
[-99.01767731 -99.75555420]
[-110.00869751 -110.40713501]
[-114.77970886 -124.95003510]
[-112.23436737 -140.04240417]
[-102.95757294 -152.21614075]
[-89.08106995 -158.67379761]
[-73.79357910 -157.93144226]
[-60.60804367 -150.15968323]
[-52.55441284 -137.14440918]
[-51.48334503 -121.87641907]
[-57.64096832 -107.86419678]
[-48.23711014 -96.17799377]
[-38.83325195 -84.49178314]
[-29.42939568 -72.80557251]
[-20.57736588 -79.09448242]
[-11.42033863 -84.93037415]
[-1.98147440 -90.29848480]
[7.71535063 -95.18524170]
[17.64560890 -99.57827759]
[27.78417969 -103.46648407]
[38.10541916 -106.84002686]
[48.58322144 -109.69036865]
[59.19108200 -112.01029968]
[69.90216827 -113.79395294]
[80.68938446 -115.03681946]
[91.52545166 -115.73575592]
[102.38294983 -115.88899231]
[113.23442078 -115.49613953]
[124.05242157 -114.55818939]
[134.80957031 -113.07751465]
[145.47868347 -111.05786896]
[156.03274536 -108.50435638]
[166.44508362 -105.42343140]
[176.68934631 -101.82289124]
[186.73962402 -97.71184540]
[196.57049561 -93.10068512]
[206.15708923 -88.00108337]
[215.47515869 -82.42593384]
[224.50114441 -76.38934326]
[233.21220398 -69.90657806]
[241.58630371 -62.99403000]
[249.60226440 -55.66919708]
[257.23980713 -47.95059967]
[264.47961426 -39.85776520]
[271.30337524 -31.41115952]
[277.69381714 -22.63215065]
[283.63479614 -13.54294777]
[289.11126709 -4.16653872]
[294.10937500 5.47335768]
[298.61648560 15.35235882]
[302.62121582 25.44547462]
[306.11340332 35.72717285]
[309.08425903 46.17145157]
[311.52621460 56.75188828]
[313.43310547 67.44171906]
[314.80014038 78.21390533]
[315.62384033 89.04119873]
[315.90213013 99.89621735]
[315.63427734 110.75149536]
[314.82098389 121.57957458]
[313.46432495 132.35307312]
[311.56768799 143.04472351]
[309.13589478 153.62750244]
[306.17510986 164.07464600]
[302.69281006 174.35969543]
[298.69778442 184.45664978]
[294.20016479 194.33998108]
[289.21130371 203.98468018]
[283.74386597 213.36634827]
[277.81161499 222.46125793]
[271.42962646 231.24641418]
[264.61398315 239.69956970]
[257.38195801 247.79936218]
[249.75184631 255.52529907]
[241.74293518 262.85784912]
[233.37548828 269.77841187]
[224.67066956 276.26956177]
[215.65049744 282.31481934]
[206.33778381 287.89892578]
[196.75608826 293.00775146]
[186.92965698 297.62835693]
[176.88334656 301.74905396]
[166.64254761 305.35946655]
[156.23318481 308.45037842]
[145.68156433 311.01403809]
[135.01440430 313.04394531]
[124.25868225 314.53497314]
[113.44159698 315.48330688]
[102.59050751 315.88659668]
[91.73286438 315.74380493]
[80.89613342 315.05529785]
[70.10772705 313.82278442]
[59.39492798 312.04943848]
[48.78484344 309.73971558]
[38.30430603 306.89944458]
[27.97982597 303.53582764]
[17.83752060 299.65734863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 42]
[14 41]
[15 40]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[51 69]
[52 68]
[53 67]
[54 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
