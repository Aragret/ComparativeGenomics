%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCCCCUGGGGGGGGGGGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCxxxxxxxxxxCCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACCCCCCCCCCCUAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 369.00311279]
[71.19830322 362.98709106]
[59.48964310 353.45767212]
[50.78712082 341.12200928]
[45.73651886 326.89547729]
[44.71262741 311.83380127]
[47.79142761 297.05465698]
[54.74444962 283.65472412]
[65.05573273 272.62838745]
[77.96011353 264.79388428]
[92.50000000 260.73257446]
[92.50000000 245.73255920]
[92.50000000 230.73255920]
[92.50000000 215.73255920]
[92.50000000 200.73255920]
[92.50000000 185.73255920]
[92.50000000 170.73255920]
[92.50000000 155.73255920]
[92.50000000 140.73255920]
[92.50000000 125.73255920]
[69.63086700 106.59230042]
[76.92807770 73.21797180]
[62.28457642 69.96714783]
[47.64107513 66.71632385]
[32.99757385 63.46549606]
[28.76968193 64.97759247]
[24.69914818 65.02010345]
[21.23954391 63.83139420]
[18.71624374 61.77544403]
[17.29598618 59.28743362]
[2.97338820 54.83061600]
[-11.34920883 50.37380219]
[-25.80389786 46.36606216]
[-40.37660217 42.81129837]
[-54.94930267 39.25653839]
[-49.85705185 53.36571884]
[-57.53065109 66.25431061]
[-72.36132050 68.50180054]
[-83.50904083 58.46545410]
[-82.82572937 43.48102570]
[-70.81148529 34.50105286]
[-84.93628693 29.45229721]
[-99.06108856 24.40353966]
[-114.11843872 29.94029999]
[-127.76007843 21.49724007]
[-129.52130127 5.55115557]
[-118.05105591 -5.66548347]
[-102.14833069 -3.54823136]
[-94.01232910 10.27873802]
[-79.88752747 15.32749367]
[-65.76272583 20.37625122]
[-51.39454269 24.68383408]
[-36.82183838 28.23859596]
[-22.24913597 31.79335785]
[-19.01933861 30.23262405]
[-14.85995388 30.19795036]
[-10.51501083 32.11468124]
[-6.89239359 36.05120468]
[7.43020391 40.50801849]
[21.75280190 44.96483612]
[36.24839783 48.82199478]
[50.89189911 52.07282257]
[65.53540039 55.32364655]
[80.17890167 58.57447433]
[91.97554016 49.30952454]
[92.28759766 34.31277084]
[77.93407440 29.57275200]
[65.61634827 20.81118774]
[56.42969894 8.80714893]
[51.19100571 -5.37197161]
[50.36608124 -20.46537781]
[54.02828217 -35.13097382]
[61.85196304 -48.06470490]
[73.14145660 -58.11651230]
[86.89289856 -64.39259338]
[101.88352203 -66.33489227]
[116.78038025 -63.77068710]
[130.25883484 -56.92799759]
[141.12042236 -46.41526794]
[148.39930725 -33.16727829]
[151.44827271 -18.36203384]
[149.99620056 -3.31600833]
[144.17221069 10.63291740]
[134.49415588 22.24441338]
[121.82263184 30.48599625]
[107.28435516 34.62482452]
[106.97229767 49.62157822]
[118.86467743 58.76331329]
[133.27688599 54.60542679]
[147.68910217 50.44754028]
[162.10131836 46.28964996]
[176.51353455 42.13176346]
[190.92575073 37.97387695]
[205.15254211 33.22006226]
[219.16925049 27.87854958]
[233.18595886 22.53703690]
[232.93336487 7.38078356]
[237.88269043 -6.94681263]
[247.43626404 -18.71562576]
[260.44046021 -26.50451469]
[275.32495117 -29.37293053]
[290.29235840 -26.97450256]
[303.53530884 -19.59884834]
[313.45462036 -8.13661671]
[318.85253906 6.02807379]
[319.07717896 21.18476677]
[314.10147095 35.50321579]
[304.52621460 47.25440598]
[291.50769043 55.01931381]
[276.61795044 57.86029816]
[261.65499878 55.43428802]
[248.42565918 48.03424072]
[238.52746582 36.55374908]
[224.51075745 41.89526367]
[210.49404907 47.23677444]
[209.23175049 49.80852890]
[206.84159851 52.01786804]
[203.46287537 53.42005539]
[199.39761353 53.63152695]
[195.08364868 52.38609314]
[180.67143250 56.54397964]
[166.25921631 60.70186615]
[151.84700012 64.85975647]
[137.43478394 69.01763916]
[123.02256012 73.17552948]
[129.71661377 83.63418579]
[132.15838623 95.29475403]
[130.37519836 106.56433868]
[124.94877625 116.02500916]
[116.89639282 122.61220551]
[107.50000000 125.73255920]
[107.50000000 140.73255920]
[107.50000000 155.73255920]
[107.50000000 170.73255920]
[107.50000000 185.73255920]
[107.50000000 200.73255920]
[107.50000000 215.73255920]
[107.50000000 230.73255920]
[107.50000000 245.73255920]
[107.50000000 260.73257446]
[122.03988647 264.79388428]
[134.94427490 272.62838745]
[145.25555420 283.65472412]
[152.20857239 297.05465698]
[155.28736877 311.83380127]
[154.26348877 326.89547729]
[149.21287537 341.12200928]
[140.51036072 353.45767212]
[128.80169678 362.98709106]
[114.95575714 369.00311279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 64]
[23 63]
[24 62]
[25 61]
[30 60]
[31 59]
[32 58]
[33 54]
[34 53]
[35 52]
[41 51]
[42 50]
[43 49]
[65 87]
[66 86]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[94 115]
[95 114]
[96 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
