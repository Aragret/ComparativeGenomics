%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUAGCGGGGGGGGGGCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCAxxxxxxxxxxUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCCCCCCCCCCCUCACCCUAAC\
) } def
/len { sequence length } bind def

/coor [
[91.76570892 476.42471313]
[78.54551697 469.15225220]
[67.65871429 458.70523071]
[59.84757996 445.79598999]
[55.64469910 431.30468750]
[55.33662796 416.21932983]
[58.94436646 401.56851196]
[66.22193909 388.35113525]
[76.67314911 377.46835327]
[89.58541107 369.66220093]
[104.07834625 365.46493530]
[103.76628876 350.46817017]
[103.45423126 335.47143555]
[103.14218140 320.47467041]
[102.83012390 305.47790527]
[102.51806641 290.48117065]
[102.20600891 275.48440552]
[101.89395142 260.48764038]
[101.58189392 245.49090576]
[101.26984406 230.49414062]
[85.05338287 222.56796265]
[75.00804901 207.47015381]
[73.95172119 189.28210449]
[82.25833893 172.97245789]
[97.73233795 163.03984070]
[96.48546600 148.09175110]
[95.23858643 133.14367676]
[93.99171448 118.19558716]
[86.65409851 115.89746094]
[80.31008911 110.57829285]
[76.20783997 102.71360779]
[75.35616302 93.28909302]
[60.42185593 91.88678741]
[45.48754883 90.48448181]
[37.19243622 103.34721375]
[23.86416626 110.87155914]
[8.56548119 111.32849884]
[-5.18809700 104.61301422]
[-14.23609543 92.26828766]
[-16.49934959 77.13104248]
[-11.45778179 62.67970276]
[-0.26990691 52.23508453]
[14.49338436 48.19728470]
[29.43959427 51.49415970]
[41.13419342 61.36811066]
[46.88985062 75.55017853]
[61.82415771 76.95248413]
[76.75846863 78.35478210]
[89.28443146 70.10249329]
[93.88999176 55.82703400]
[98.49555969 41.55157471]
[103.10112000 27.27611351]
[102.76210022 18.08171844]
[107.95384216 12.75334835]
[112.85539246 -1.42320955]
[101.17202759 7.98418856]
[87.86056519 14.89830112]
[73.44560242 19.04664612]
[58.49522400 20.26573563]
[43.59862518 18.50752831]
[29.34287262 13.84131241]
[16.28978729 6.45098448]
[4.95378494 -3.37220597]
[-4.21838331 -15.24112892]
[-10.86524487 -28.68803215]
[-14.72484970 -43.18297958]
[-15.64509106 -58.15472412]
[-13.58970261 -73.01323700]
[-8.63968563 -87.17294312]
[-0.99012107 -100.07582092]
[9.05752468 -111.21335602]
[21.10727692 -120.14663696]
[34.68425751 -126.52359772]
[49.25339890 -130.09292603]
[64.24053955 -130.71394348]
[79.05503082 -128.36219788]
[93.11305237 -123.13035583]
[105.86056519 -115.22460175]
[116.79519653 -104.95651245]
[125.48602295 -92.73073578]
[131.59054565 -79.02909851]
[134.86816406 -64.39157104]
[135.18972778 -49.39501953]
[132.54255676 -34.63045120]
[127.03194427 -20.68163490]
[139.11193848 -29.57398415]
[150.90856934 -38.83893585]
[162.41038513 -48.46746063]
[173.91218567 -58.09598541]
[185.41398621 -67.72451019]
[181.61488342 -82.50725555]
[184.61441040 -97.47273254]
[193.81703186 -109.64954376]
[207.39553833 -116.61996460]
[222.65393066 -117.00001526]
[236.56262207 -110.71423340]
[246.36004639 -99.01068115]
[250.10090637 -84.21308899]
[247.04246521 -69.25953674]
[237.79196167 -57.11906433]
[224.18611145 -50.20217133]
[208.92634583 -49.88220978]
[195.04251099 -56.22270966]
[183.54071045 -46.59418488]
[172.03890991 -36.96565628]
[160.53710938 -27.33713150]
[159.87931824 -23.81082916]
[157.44145203 -20.44058609]
[153.32206726 -18.07774544]
[148.00428772 -17.49399757]
[135.92430115 -8.60164738]
[127.03194427 3.47834134]
[122.13039398 17.65489960]
[117.37657928 31.88167763]
[112.77101898 46.15713882]
[108.16545105 60.43259811]
[103.55989075 74.70806122]
[122.01880646 96.15747833]
[108.93980408 116.94870758]
[110.18667603 131.89678955]
[111.43354797 146.84487915]
[112.68042755 161.79296875]
[124.21871185 165.52134705]
[133.77923584 172.92321777]
[140.24145508 183.10119629]
[142.85813904 194.83438110]
[141.34169006 206.72474670]
[135.89552307 217.36369324]
[127.18718719 225.49897766]
[116.26659393 230.18208313]
[116.57865143 245.17884827]
[116.89070892 260.17559814]
[117.20276642 275.17236328]
[117.51481628 290.16909790]
[117.82687378 305.16586304]
[118.13893127 320.16259766]
[118.45098877 335.15936279]
[118.76304626 350.15612793]
[119.07510376 365.15286255]
[133.73008728 368.74365234]
[146.95590210 376.00588989]
[157.85076904 386.44448853]
[165.67185974 399.34771729]
[169.88594055 413.83575439]
[170.20565796 428.92086792]
[166.60923767 443.57446289]
[159.34187317 456.79748535]
[148.89906311 467.68832397]
[135.99284363 475.50442505]
[121.50315094 479.71289062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 122]
[26 121]
[27 120]
[28 119]
[32 48]
[33 47]
[34 46]
[49 117]
[50 116]
[51 115]
[52 114]
[54 113]
[55 112]
[85 111]
[86 110]
[87 106]
[88 105]
[89 104]
[90 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
