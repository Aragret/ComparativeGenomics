%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAACUCAAAGGGGGGGGGGGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAxxxxxxxxxxUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCACCCCCCCCCCUCAAACUCAAA\
) } def
/len { sequence length } bind def

/coor [
[99.00565338 385.33843994]
[84.12231445 382.97561646]
[70.18528748 377.24359131]
[57.94618225 368.45150757]
[48.06504059 357.07345581]
[41.07473373 343.72308350]
[37.35224533 329.12036133]
[37.09832382 314.05276489]
[40.32666016 299.33288574]
[46.86315536 285.75457764]
[56.35530853 274.05004883]
[68.29121399 264.85055542]
[82.02718353 258.65219116]
[96.82245636 255.78921509]
[97.43828583 240.80184937]
[98.05410767 225.81449890]
[98.66993713 210.82714844]
[99.28575897 195.83979797]
[99.90158844 180.85244751]
[100.51741028 165.86509705]
[101.13323975 150.87773132]
[101.74906158 135.89038086]
[102.36489105 120.90303040]
[90.03360748 112.36257172]
[76.22002411 118.20935822]
[62.40643692 124.05614471]
[52.96091843 137.46189880]
[36.65503311 135.71543884]
[30.26287842 120.61337280]
[40.36015320 107.69141388]
[56.55965042 110.24256134]
[70.37322998 104.39577484]
[84.18681335 98.54898834]
[93.82862854 87.05831909]
[97.18788910 72.43931580]
[100.54714966 57.82030869]
[99.41775513 48.69231415]
[104.12836456 42.93711090]
[107.78707123 28.39015770]
[106.31665039 23.25273514]
[106.94235229 18.55017090]
[109.13451385 15.01972675]
[112.14484406 13.07418823]
[116.69213104 -1.21994221]
[121.23942566 -15.51407242]
[125.78671265 -29.80820274]
[126.24864197 -44.80108643]
[122.58993530 -59.34804153]
[118.93122864 -73.89499664]
[115.27252197 -88.44194794]
[111.61381531 -102.98890686]
[107.95510864 -117.53585815]
[104.29640198 -132.08280945]
[91.17620087 -144.96267700]
[96.55891418 -161.63813782]
[92.60230255 -176.10690308]
[77.56128693 -175.34400940]
[62.70800018 -177.83277893]
[48.73715973 -183.45680237]
[36.30220032 -191.95303345]
[25.98473167 -202.92408752]
[18.26731873 -215.85681152]
[13.51091957 -230.14634705]
[11.93800068 -245.12432861]
[13.62212849 -260.09020996]
[18.48453522 -274.34402466]
[26.29779434 -287.21908569]
[36.69646835 -298.11318970]
[49.19419098 -306.51681519]
[63.20642471 -312.03692627]
[78.07778931 -314.41528320]
[93.11271667 -313.54071045]
[107.60800934 -309.45407104]
[120.88568878 -302.34652710]
[132.32473755 -292.55047607]
[141.39012146 -280.52413940]
[147.65783691 -266.82998657]
[150.83474731 -252.10853577]
[150.77226257 -237.04830933]
[147.47328186 -222.35372925]
[141.09211731 -208.71206665]
[131.92723083 -196.76138306]
[120.40727997 -187.06062317]
[107.07106781 -180.06350708]
[111.02767944 -165.59474182]
[121.40299225 -159.30068970]
[124.79293823 -147.23091125]
[118.84336090 -135.74151611]
[122.50206757 -121.19456482]
[126.16076660 -106.64761353]
[129.81947327 -92.10065460]
[133.47817993 -77.55370331]
[137.13688660 -63.00674820]
[140.79559326 -48.45979309]
[145.25765991 -62.78075409]
[152.64128113 -75.83763123]
[162.61392212 -87.04238892]
[174.72644043 -95.89038849]
[188.43330383 -101.98313904]
[203.11721802 -105.04624176]
[218.11686707 -104.94174957]
[232.75668335 -101.67436981]
[246.37733459 -95.39124298]
[258.36538696 -86.37535095]
[268.18096924 -75.03274536]
[275.38195801 -61.87426758]
[279.64407349 -47.49253082]
[280.77536011 -32.53525162]
[278.72488403 -17.67606354]
[273.58496094 -3.58418322]
[265.58706665 9.10573292]
[255.09144592 19.82216644]
[242.57077026 28.08247757]
[228.58894348 33.51464844]
[213.77566528 35.87402725]
[198.79808044 35.05435562]
[184.33073425 31.09254456]
[171.02519226 24.16703033]
[159.48071289 14.58971310]
[150.21722412 2.79193068]
[143.65191650 -10.69497967]
[140.08084106 -25.26091194]
[135.53355408 -10.96678162]
[130.98626709 3.32734799]
[126.43897247 17.62147713]
[122.33403015 32.04886246]
[118.67532349 46.59581757]
[115.16615295 61.17956543]
[111.80689240 75.79857635]
[108.44763947 90.41757965]
[120.20406342 100.44382477]
[117.35224152 121.51885223]
[116.73641205 136.50621033]
[116.12059021 151.49356079]
[115.50476837 166.48091125]
[114.88893890 181.46826172]
[114.27311707 196.45562744]
[113.65728760 211.44297791]
[113.04146576 226.43032837]
[112.42563629 241.41767883]
[111.80981445 256.40502930]
[126.32032776 260.47216797]
[139.50148010 267.77655029]
[150.64241028 277.92428589]
[159.14231873 290.36807251]
[164.54280090 304.43688965]
[166.55262756 319.37200928]
[165.06340027 334.36798096]
[160.15544128 348.61608887]
[152.09342957 361.34796143]
[141.31213379 371.87698364]
[128.39297485 379.63534546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 33]
[25 32]
[26 31]
[34 130]
[35 129]
[36 128]
[38 127]
[39 126]
[43 125]
[44 124]
[45 123]
[46 122]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[55 85]
[56 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
