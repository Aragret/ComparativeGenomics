%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUUUUACCUGGGGGGGGGGGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAxxxxxxxxxxAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACCCCCCCCCCCGAUUCUUUACCU\
) } def
/len { sequence length } bind def

/coor [
[86.62355804 505.20809937]
[72.46295929 500.05310059]
[59.87321091 491.77087402]
[49.53327560 480.80810547]
[42.00076294 467.75598145]
[37.68189621 453.31838989]
[36.80958939 438.27392578]
[39.43087769 423.43392944]
[45.40440750 409.59869385]
[54.40802383 397.51434326]
[65.95617676 387.83258057]
[79.42609406 381.07550049]
[94.09135437 377.60751343]
[94.09135437 362.60751343]
[94.09135437 347.60751343]
[94.09135437 332.60751343]
[94.09135437 317.60751343]
[94.09135437 302.60751343]
[94.09135437 287.60751343]
[94.09135437 272.60751343]
[94.09135437 257.60751343]
[94.09135437 242.60752869]
[94.09135437 227.60752869]
[86.35405731 214.88024902]
[94.09135437 201.08007812]
[94.09135437 186.08007812]
[93.93934631 171.08084106]
[93.63534546 156.08392334]
[93.33133698 141.08700562]
[84.50975800 138.63504028]
[76.43767548 134.31370544]
[69.50565338 128.33210754]
[64.04910278 120.97966766]
[60.33203125 112.61212158]
[58.53429031 103.63433838]
[58.74287033 94.48071289]
[44.47702026 89.84545898]
[30.21117401 85.21020508]
[15.94532585 80.57495117]
[1.67947781 75.93968964]
[-12.58636951 71.30443573]
[-23.94640541 81.64102936]
[-38.95619202 84.89707947]
[-53.57817078 80.19673157]
[-63.87910461 68.80435181]
[-67.08809662 53.78443527]
[-62.34193420 39.17726135]
[-50.91732407 28.91208649]
[-35.88742065 25.75019455]
[-21.29519272 30.54211617]
[-11.06588078 41.99884796]
[-7.95111513 57.03858948]
[6.31473255 61.67384338]
[20.58057976 66.30909729]
[34.84642792 70.94435120]
[49.11227417 75.57961273]
[63.37812424 80.21486664]
[75.87615204 66.07872009]
[93.33133698 58.91299057]
[93.63534546 43.91607285]
[93.93934631 28.91915131]
[94.09135437 13.91992188]
[94.09135437 -1.08007765]
[94.09135437 -16.08007812]
[79.40277100 -19.42569923]
[65.82715607 -25.95642471]
[54.04545593 -35.34468079]
[44.64863968 -47.11954880]
[38.10804749 -60.69041443]
[34.75175095 -75.37656403]
[34.74810028 -90.44135284]
[38.09727859 -105.12912750]
[44.63129425 -118.70315552]
[54.02240372 -130.48257446]
[65.79955292 -139.87654114]
[79.37200165 -146.41384888]
[94.05896759 -149.76658630]
[109.12374878 -149.76658630]
[123.81071472 -146.41384888]
[137.38316345 -139.87654114]
[149.16030884 -130.48257446]
[158.55142212 -118.70315552]
[165.08543396 -105.12912750]
[168.43461609 -90.44135284]
[168.43096924 -75.37656403]
[165.07466125 -60.69041443]
[158.53407288 -47.11954880]
[149.13725281 -35.34468079]
[137.35556030 -25.95642471]
[123.77994537 -19.42569923]
[109.09135437 -16.08007812]
[109.09135437 -1.08007765]
[109.09135437 13.91992188]
[112.25492859 20.64832687]
[108.93626404 29.22315598]
[108.63226318 44.22007370]
[108.32825470 59.21699524]
[125.81097412 67.34410858]
[137.75648499 82.47685242]
[152.27764893 78.71706390]
[166.79879761 74.95727539]
[181.24078369 70.90396118]
[192.20793152 59.50078964]
[206.63082886 63.21952820]
[220.98768616 58.87435150]
[235.34455872 54.52917480]
[249.70141602 50.18399429]
[263.10992432 39.80864334]
[276.79165649 49.82096863]
[270.95809937 65.73970032]
[254.04658508 64.54085541]
[239.68972778 68.88603210]
[225.33287048 73.23120880]
[210.97601318 77.57638550]
[201.03576660 88.66876221]
[185.58595276 85.26081848]
[182.56010437 89.02483368]
[177.11439514 90.89295959]
[170.55859375 89.47843170]
[156.03742981 93.23822021]
[141.51628113 96.99800873]
[139.90792847 111.83092499]
[133.17228699 125.14383698]
[122.17475891 135.22631836]
[108.32825470 140.78300476]
[108.63226318 155.77992249]
[108.93626404 170.77684021]
[112.25492859 179.35166931]
[109.09135437 186.08007812]
[109.09135437 201.08007812]
[116.82865906 214.88024902]
[109.09135437 227.60752869]
[109.09135437 242.60752869]
[109.09135437 257.60751343]
[109.09135437 272.60751343]
[109.09135437 287.60751343]
[109.09135437 302.60751343]
[109.09135437 317.60751343]
[109.09135437 332.60751343]
[109.09135437 347.60751343]
[109.09135437 362.60751343]
[109.09135437 377.60751343]
[123.75661469 381.07550049]
[137.22653198 387.83258057]
[148.77468872 397.51434326]
[157.77830505 409.59869385]
[163.75183105 423.43392944]
[166.37312317 438.27392578]
[165.50082397 453.31838989]
[161.18194580 467.75598145]
[153.64944458 480.80810547]
[143.30950928 491.77087402]
[130.71975708 500.05310059]
[116.55915833 505.20809937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[25 130]
[26 129]
[27 127]
[28 126]
[29 125]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[59 97]
[60 96]
[61 95]
[62 93]
[63 92]
[64 91]
[99 121]
[100 120]
[101 119]
[102 116]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
