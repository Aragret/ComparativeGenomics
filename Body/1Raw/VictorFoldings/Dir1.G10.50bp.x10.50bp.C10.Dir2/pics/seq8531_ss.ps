%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGCCCUAGGGGGGGGGGGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUxxxxxxxxxxCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUCCCCCCCCCCAAAUCCCCUAG\
) } def
/len { sequence length } bind def

/coor [
[62.65349579 362.63436890]
[49.43527603 355.35830688]
[38.55131531 344.90832520]
[30.74369621 331.99694824]
[26.54475594 317.50451660]
[26.24078560 302.41906738]
[29.85251236 287.76922607]
[37.13367844 274.55383301]
[47.58784485 263.67388916]
[60.50223160 255.87126160]
[74.99630737 251.67793274]
[74.68833160 236.68109131]
[74.38035583 221.68424988]
[74.07237244 206.68740845]
[73.76439667 191.69056702]
[73.45642090 176.69374084]
[73.14844513 161.69689941]
[72.84046173 146.70005798]
[72.53248596 131.70321655]
[72.22451019 116.70638275]
[67.67721558 102.41225433]
[59.26380920 89.99394226]
[50.85039902 77.57562256]
[42.43698883 65.15731049]
[29.36705208 72.53495026]
[15.73925591 78.82271576]
[1.64429057 83.97875214]
[-12.82404232 87.96875763]
[-27.56945801 90.76617432]
[-42.49382401 92.35238647]
[-57.49782181 92.71683502]
[-72.48160553 91.85709381]
[-87.34544373 89.77889252]
[-101.99044037 86.49605560]
[-116.31911469 82.03042603]
[-130.23611450 76.41173553]
[-143.64883423 69.67736053]
[-156.46801758 61.87212753]
[-168.60832214 53.04797745]
[-179.98898315 43.26363373]
[-190.53425598 32.58420944]
[-200.17395020 21.08077812]
[-208.84393311 8.82989216]
[-216.48651123 -4.08691740]
[-223.05079651 -17.58369255]
[-228.49311829 -31.57061005]
[-232.77726746 -45.95458984]
[-235.87471008 -60.63991165]
[-237.76486206 -75.52883911]
[-238.43511963 -90.52228546]
[-237.88104248 -105.52047729]
[-236.10630798 -120.42360687]
[-233.12272644 -135.13247681]
[-228.95014954 -149.54922485]
[-223.61634827 -163.57788086]
[-217.15682983 -177.12510681]
[-209.61456299 -190.10073853]
[-201.03974915 -202.41842651]
[-191.48945618 -213.99620056]
[-181.02725220 -224.75700378]
[-169.72273254 -234.62922668]
[-157.65115356 -243.54716492]
[-144.89283752 -251.45147705]
[-131.53269958 -258.28958130]
[-117.65963745 -264.01593018]
[-103.36598969 -268.59243774]
[-88.74687195 -271.98861694]
[-73.89957428 -274.18191528]
[-58.92290115 -275.15771484]
[-43.91653061 -274.90951538]
[-28.98032188 -273.43899536]
[-14.21367741 -270.75588989]
[0.28513455 -266.87811279]
[14.41962337 -261.83142090]
[28.09572601 -255.64942932]
[41.22242737 -248.37327576]
[53.71237183 -240.05137634]
[65.48243713 -230.73910522]
[76.45429993 -220.49844360]
[86.55493927 -209.39755249]
[95.71713257 -197.51028442]
[103.87991333 -184.91577148]
[110.98895264 -171.69781494]
[116.99694824 -157.94438171]
[121.86390686 -143.74700928]
[125.55744934 -129.20018005]
[128.05297852 -114.40067291]
[129.33390808 -99.44701385]
[129.39170837 -84.43869781]
[128.22598267 -69.47561646]
[125.84450531 -54.65734100]
[122.26310730 -40.08248520]
[117.50563812 -25.84804535]
[111.60375214 -12.04875088]
[104.59671783 1.22356355]
[96.53118134 13.88057327]
[87.46080780 25.83804512]
[77.44596863 37.01640320]
[66.55329895 47.34125900]
[54.85530472 56.74390030]
[63.26871490 69.16221619]
[71.68212128 81.58052826]
[80.09553528 93.99884033]
[94.19665527 76.37288666]
[119.91941833 80.50857544]
[134.78602600 78.51251984]
[149.65261841 76.51645660]
[156.90290833 62.79738998]
[170.84719849 55.99028778]
[186.12359619 58.71261597]
[196.85803223 69.91758728]
[198.92289734 85.29666138]
[191.52421570 98.93627167]
[177.50691223 105.59170532]
[162.26092529 102.70381927]
[151.64868164 91.38305664]
[136.78207397 93.37911224]
[121.91547394 95.37517548]
[119.91941833 110.24176788]
[133.73300171 116.08856201]
[146.95555115 107.96796417]
[162.42332458 109.20384216]
[174.18865967 119.32097626]
[177.72755432 134.42910767]
[171.67921448 148.71887207]
[158.36936951 156.69555664]
[142.91590881 155.29194641]
[131.26100159 145.04777527]
[127.88621521 129.90214539]
[114.07263184 124.05535126]
[98.38762665 124.27590179]
[87.22134399 116.39840698]
[87.52932739 131.39524841]
[87.83730316 146.39207458]
[88.14527893 161.38891602]
[88.45325470 176.38575745]
[88.76123810 191.38259888]
[89.06921387 206.37944031]
[89.37718964 221.37626648]
[89.68516541 236.37310791]
[89.99314880 251.36994934]
[104.64716339 254.96470642]
[117.87099457 262.23056030]
[128.76303101 272.67211914]
[136.58061218 285.57745361]
[140.79074097 300.06665039]
[141.10635376 315.15185547]
[137.50595093 329.80447388]
[130.23498535 343.02551270]
[119.78922272 353.91348267]
[106.88087463 361.72610474]
[92.39003754 365.93063354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 103]
[22 102]
[23 101]
[24 100]
[105 118]
[106 117]
[107 116]
[119 130]
[120 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
