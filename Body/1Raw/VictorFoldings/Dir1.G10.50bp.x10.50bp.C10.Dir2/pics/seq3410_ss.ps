%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGCCCCUAGGGGGGGGGGCGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCxxxxxxxxxxAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUCCCCCCCCCCUAGGCCCCAA\
) } def
/len { sequence length } bind def

/coor [
[52.60022736 438.15670776]
[39.38002777 430.88424683]
[28.49322510 420.43722534]
[20.68209457 407.52798462]
[16.47921371 393.03668213]
[16.17114067 377.95132446]
[19.77888107 363.30050659]
[27.05645561 350.08312988]
[37.50766373 339.20034790]
[50.41992569 331.39419556]
[64.91285706 327.19692993]
[64.60080719 312.20016479]
[64.28874969 297.20339966]
[63.97669220 282.20666504]
[63.66463470 267.20989990]
[63.35258102 252.21315002]
[63.04052353 237.21640015]
[62.72846603 222.21963501]
[62.41641235 207.22288513]
[50.24457550 198.45668030]
[35.92197800 202.91349792]
[21.59938049 207.37031555]
[7.42282152 212.27186584]
[-6.59389162 217.61337280]
[-9.66551018 232.73185730]
[-20.43955803 243.77375793]
[-35.47807693 247.21562195]
[-49.98233032 241.95918274]
[-59.32406616 229.68174744]
[-60.52236557 214.30099487]
[-53.19485474 200.72486877]
[-39.67972183 193.28546143]
[-24.28959465 194.35665894]
[-11.93540382 203.59666443]
[2.08130884 198.25514221]
[3.85527754 195.13737488]
[7.26059866 192.74876404]
[11.92595482 191.86172485]
[17.14256477 193.04771423]
[31.46516037 188.59089661]
[45.78775787 184.13407898]
[55.13465500 163.95996094]
[73.99118042 159.64335632]
[80.33831024 146.05239868]
[86.68544006 132.46145630]
[80.50737762 84.42957306]
[76.19979095 70.06138611]
[71.89220428 55.69320679]
[67.58462524 41.32501984]
[63.27703857 26.95683670]
[40.00253296 23.91899872]
[21.21109581 9.95664978]
[11.63566494 -11.33931255]
[13.65172577 -34.54042435]
[26.68831253 -53.76436615]
[18.69839478 -66.45929718]
[10.70847893 -79.15422821]
[2.71856308 -91.84915161]
[-5.27135324 -104.54408264]
[-20.53294945 -109.49011230]
[-26.04634857 -124.55603790]
[-17.58214188 -138.18457031]
[-1.63334489 -139.92105103]
[9.56549072 -128.43342590]
[7.42357635 -112.53400421]
[15.41349316 -99.83907318]
[23.40340996 -87.14414215]
[31.39332581 -74.44921112]
[39.38323975 -61.75428391]
[46.88173676 -64.21135712]
[54.69527054 -65.35350037]
[62.59486771 -65.14524078]
[70.34869385 -63.59072113]
[77.72884369 -60.73362350]
[84.51806641 -56.65593719]
[90.51614380 -51.47562408]
[95.54579163 -45.34318924]
[99.45790863 -38.43731308]
[102.13599396 -30.95966148]
[103.49961090 -23.12896919]
[103.50681305 -15.17466354]
[102.15541077 -7.33013535]
[99.48311615 0.17411058]
[95.56648254 7.11722708]
[90.51870728 13.29452515]
[84.48638916 18.52350426]
[77.64522552 22.64925194]
[81.95280457 37.01743698]
[86.26039124 51.38562012]
[90.56797791 65.75380707]
[94.87556458 80.12198639]
[108.94708252 85.31740570]
[121.55821228 77.19586182]
[134.16934204 69.07431793]
[133.34388733 53.73762512]
[140.31169128 40.05020905]
[153.19842529 31.69391441]
[168.53762817 30.91654396]
[182.20314026 37.92720795]
[190.51899719 50.84007263]
[191.24827576 66.18164062]
[184.19480896 79.82511139]
[171.25595093 88.10044861]
[155.91217041 88.78164673]
[142.29087830 81.68544769]
[129.67974854 89.80699158]
[117.06861877 97.92853546]
[120.77478027 112.46347046]
[135.73503113 113.55477905]
[150.69528198 114.64608765]
[165.65553284 115.73740387]
[180.61578369 116.82871246]
[193.64640808 107.47016907]
[209.04795837 111.96147919]
[215.00567627 126.85729218]
[206.94931030 140.73080444]
[191.05902100 142.93946838]
[179.52447510 131.78895569]
[164.56422424 130.69764709]
[149.60397339 129.60633850]
[134.64372253 128.51502991]
[119.68347168 127.42372131]
[131.10908508 137.14253235]
[129.80337524 152.08558655]
[116.86534119 159.67553711]
[103.18474579 153.52400208]
[100.27639008 138.80857849]
[93.92926025 152.39953613]
[87.58213043 165.99047852]
[95.37655640 187.56724548]
[77.41316223 206.91082764]
[77.72521973 221.90757751]
[78.03727722 236.90434265]
[78.34933472 251.90109253]
[78.66139221 266.89785767]
[78.97344208 281.89459229]
[79.28549957 296.89135742]
[79.59755707 311.88809204]
[79.90961456 326.88485718]
[94.56460571 330.47561646]
[107.79041290 337.73788452]
[118.68528748 348.17648315]
[126.50637817 361.07968140]
[130.72044373 375.56774902]
[131.04017639 390.65286255]
[127.44374847 405.30645752]
[120.17638397 418.52944946]
[109.73358154 429.42028809]
[96.82735443 437.23641968]
[82.33766174 441.44488525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 41]
[21 40]
[22 39]
[23 35]
[24 34]
[43 129]
[44 128]
[45 127]
[46 91]
[47 90]
[48 89]
[49 88]
[50 87]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[92 107]
[93 106]
[94 105]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
