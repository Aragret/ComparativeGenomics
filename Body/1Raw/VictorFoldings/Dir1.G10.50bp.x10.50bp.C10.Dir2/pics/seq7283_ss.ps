%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGAUUUGAGGGGGGGGGGGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUxxxxxxxxxxAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACCCCCCCCCCCAUAAUUUGA\
) } def
/len { sequence length } bind def

/coor [
[82.77592468 399.05688477]
[68.92998505 393.04086304]
[57.22132111 383.51144409]
[48.51879883 371.17578125]
[43.46819687 356.94924927]
[42.44430542 341.88757324]
[45.52310181 327.10842896]
[52.47612381 313.70849609]
[62.78740692 302.68215942]
[75.69178772 294.84765625]
[90.23167419 290.78634644]
[90.23167419 275.78634644]
[90.23167419 260.78634644]
[90.23167419 245.78633118]
[90.23167419 230.78633118]
[90.23167419 215.78633118]
[90.23167419 200.78633118]
[90.23167419 185.78633118]
[90.23167419 170.78633118]
[90.23167419 155.78633118]
[84.58217621 150.85346985]
[81.68779755 165.57157898]
[67.49439240 170.42411804]
[56.19520569 160.55859375]
[59.08930588 145.84043884]
[73.28317261 140.98774719]
[67.63366699 136.05488586]
[52.77061844 138.07722473]
[37.90757370 140.09956360]
[23.04452705 142.12188721]
[8.18147945 144.14422607]
[-6.68156719 146.16656494]
[-19.31018257 156.62840271]
[-34.58847427 150.66972351]
[-36.79944611 134.42030334]
[-23.66863823 124.59615326]
[-8.70390224 131.30351257]
[6.15914488 129.28117371]
[21.02219200 127.25884247]
[35.88523865 125.23651123]
[50.74828720 123.21417236]
[65.61133575 121.19184113]
[64.00001526 96.16814423]
[76.89244843 77.84478760]
[95.89418030 72.48258209]
[97.76178741 57.59930420]
[99.62940216 42.71602249]
[86.36705780 32.89315033]
[79.88768768 17.81623650]
[81.86558533 1.62000370]
[91.66962433 -11.30527306]
[106.56021881 -17.50381279]
[108.11779785 -32.42272568]
[109.67537689 -47.34163666]
[111.23296356 -62.26055145]
[112.79054260 -77.17946625]
[98.20907593 -80.80258179]
[84.27378082 -86.41986084]
[71.25592041 -93.92195129]
[59.40888977 -103.16283417]
[48.96328354 -113.96262360]
[40.12244034 -126.11110687]
[33.05844498 -139.37181091]
[27.90880203 -153.48660278]
[24.77375031 -168.18072510]
[23.71431160 -183.16818237]
[24.75111198 -198.15721130]
[27.86396790 -212.85606384]
[32.99228668 -226.97862244]
[40.03624344 -240.24996948]
[48.85873032 -252.41178894]
[59.28800964 -263.22735596]
[71.12107086 -272.48611450]
[84.12758636 -280.00787354]
[98.05437469 -285.64617920]
[112.63035583 -289.29132080]
[127.57179260 -290.87231445]
[142.58784485 -290.35842896]
[157.38624573 -287.75961304]
[171.67890930 -283.12646484]
[185.18762207 -276.54919434]
[197.64947510 -268.15582275]
[208.82183838 -258.10974121]
[218.48728943 -246.60644531]
[226.45765686 -233.86991882]
[232.57780457 -220.14804077]
[236.72859192 -205.70791626]
[238.82923889 -190.83064270]
[238.83885193 -175.80578613]
[236.75723267 -160.92584229]
[232.62490845 -146.48042297]
[226.52232361 -132.75073242]
[218.56825256 -120.00400543]
[208.91752625 -108.48837280]
[197.75801086 -98.42799377]
[185.30691528 -90.01868439]
[171.80662537 -83.42414856]
[157.51989746 -78.77273560]
[142.72483826 -76.15499878]
[127.70944977 -75.62187958]
[126.15187073 -60.70296860]
[124.59429169 -45.78405762]
[123.03671265 -30.86514473]
[121.47912598 -15.94623280]
[133.06394958 -8.64888382]
[140.39794922 2.99120188]
[141.99505615 16.72280312]
[137.48535156 29.86082077]
[127.69869232 39.81131744]
[114.51268005 44.58363724]
[112.64507294 59.46691513]
[110.77745819 74.35019684]
[133.92773438 96.49777985]
[122.92475891 133.25852966]
[136.94146729 138.60003662]
[149.05195618 134.04040527]
[160.64131165 138.82638550]
[165.67179871 149.87181091]
[179.57434082 155.50376892]
[193.47689819 161.13572693]
[209.63490295 158.33377075]
[219.93127441 171.09765625]
[213.77398682 186.29699707]
[197.49713135 188.29600525]
[187.84494019 175.03828430]
[173.94239807 169.40632629]
[160.03984070 163.77436829]
[142.84828186 167.15824890]
[131.59996033 152.61676025]
[117.58325195 147.27523804]
[105.23167419 155.78633118]
[105.23167419 170.78633118]
[105.23167419 185.78633118]
[105.23167419 200.78633118]
[105.23167419 215.78633118]
[105.23167419 230.78633118]
[105.23167419 245.78633118]
[105.23167419 260.78634644]
[105.23167419 275.78634644]
[105.23167419 290.78634644]
[119.77156067 294.84765625]
[132.67594910 302.68215942]
[142.98722839 313.70849609]
[149.94024658 327.10842896]
[153.01904297 341.88757324]
[151.99516296 356.94924927]
[146.94454956 371.17578125]
[138.24203491 383.51144409]
[126.53337097 393.04086304]
[112.68743134 399.05688477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[45 112]
[46 111]
[47 110]
[52 104]
[53 103]
[54 102]
[55 101]
[56 100]
[114 130]
[115 129]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
