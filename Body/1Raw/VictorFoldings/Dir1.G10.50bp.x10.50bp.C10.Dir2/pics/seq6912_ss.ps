%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUACCAUAAGGGGGGGGGGUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCxxxxxxxxxxACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACCCCCCCCCCCGGUACCAUAA\
) } def
/len { sequence length } bind def

/coor [
[84.90038300 400.38241577]
[70.87844086 394.82940674]
[58.67848206 385.96307373]
[49.06740952 374.34075928]
[42.64938354 360.69305420]
[39.82784653 345.87786865]
[40.78016281 330.82647705]
[45.44646835 316.48507690]
[53.53343582 303.75509644]
[64.53270721 293.43682861]
[77.75286865 286.17886353]
[92.36288452 282.43740845]
[92.36288452 267.43740845]
[92.36288452 252.43742371]
[92.36288452 237.43742371]
[92.36288452 222.43742371]
[92.36288452 207.43742371]
[92.36288452 192.43742371]
[92.36288452 177.43742371]
[92.36288452 162.43742371]
[92.36288452 147.43742371]
[92.36288452 132.43742371]
[86.61754608 127.61651611]
[72.52217102 132.74684143]
[75.12688446 117.97470093]
[69.38154602 113.15379333]
[54.60943222 115.75851440]
[39.83731461 118.36323547]
[35.24669647 132.96408081]
[24.38837814 143.75090027]
[9.75751972 148.24496460]
[-5.28381443 145.41355896]
[-17.27923584 135.90733337]
[-23.47228241 121.91072845]
[-22.43984032 106.64008331]
[-14.41915512 93.60446930]
[-1.25332236 85.79937744]
[14.03224564 85.01836395]
[27.92503738 91.44089508]
[37.23259354 103.59112549]
[52.00470734 100.98639679]
[66.77682495 98.38167572]
[81.87091827 80.41308594]
[100.57513428 79.89248657]
[106.56343079 66.13965607]
[112.55172729 52.38682938]
[112.18144989 45.68567276]
[114.88306427 40.59753418]
[119.07858276 38.20027542]
[125.62644958 24.70489120]
[132.17431641 11.20950699]
[138.72219849 -2.28587675]
[145.27006531 -15.78126049]
[151.81793213 -29.27664566]
[157.66471863 -43.09022903]
[162.79502869 -57.18561554]
[167.92532349 -71.28100586]
[173.05563354 -85.37639618]
[158.95614624 -101.42169189]
[155.98684692 -122.46440125]
[165.00321960 -141.58787537]
[182.94081116 -152.57232666]
[182.01739502 -167.54386902]
[167.20475769 -170.37881470]
[153.56286621 -176.80917358]
[141.94924927 -186.43075562]
[133.09396362 -198.63871765]
[127.55363464 -212.66567993]
[125.67655182 -227.62988281]
[127.58069611 -242.59066772]
[133.14637756 -256.60757446]
[142.02374268 -268.79953003]
[153.65473938 -278.40008545]
[167.30824280 -284.80575562]
[182.12597656 -287.61389160]
[197.17648315 -286.64797974]
[211.51368713 -281.96868896]
[224.23632812 -273.87020874]
[234.54464722 -262.86160278]
[241.79066467 -249.63490295]
[245.51887512 -235.02151489]
[245.49494934 -219.94004822]
[241.72036743 -205.33857727]
[234.43240356 -192.13491821]
[224.08918762 -181.15908813]
[211.34091187 -173.10102844]
[196.98893738 -168.46728516]
[197.91235352 -153.49574280]
[204.22772217 -151.99528503]
[210.17916870 -149.40388489]
[215.57991028 -145.80288696]
[227.16896057 -155.32621765]
[238.75801086 -164.84954834]
[250.34706116 -174.37289429]
[261.93609619 -183.89622498]
[264.92309570 -199.65876770]
[279.17584229 -207.02349854]
[293.76080322 -200.34085083]
[297.48971558 -184.73716736]
[287.50201416 -172.18225098]
[271.45944214 -172.30718994]
[259.87039185 -162.78384399]
[248.28134155 -153.26051331]
[236.69229126 -143.73716736]
[225.10325623 -134.21383667]
[228.86685181 -123.36493683]
[229.09324646 -111.85002136]
[225.73922729 -100.79657745]
[219.11326599 -91.29339600]
[209.84715271 -84.28333282]
[198.83584595 -80.46977234]
[187.15101624 -80.24609375]
[182.02072144 -66.15070343]
[176.89041138 -52.05531311]
[171.76011658 -37.95992661]
[186.33833313 -41.49200439]
[198.31703186 -32.46368790]
[198.93736267 -17.47652245]
[187.74571228 -7.48917913]
[172.92547607 -9.80444717]
[165.31332397 -22.72877502]
[158.76544189 -9.23338985]
[152.21757507 4.26199389]
[145.66970825 17.75737762]
[139.12184143 31.25276184]
[132.57395935 44.74814606]
[126.30455780 58.37512589]
[120.31626129 72.12795258]
[114.32796478 85.88078308]
[125.61431122 107.49784851]
[107.36288452 132.43742371]
[107.36288452 147.43742371]
[107.36288452 162.43742371]
[107.36288452 177.43742371]
[107.36288452 192.43742371]
[107.36288452 207.43742371]
[107.36288452 222.43742371]
[107.36288452 237.43742371]
[107.36288452 252.43742371]
[107.36288452 267.43740845]
[107.36288452 282.43740845]
[121.97289276 286.17886353]
[135.19305420 293.43682861]
[146.19232178 303.75509644]
[154.27929688 316.48507690]
[158.94560242 330.82647705]
[159.89791870 345.87786865]
[157.07638550 360.69305420]
[150.65835571 374.34075928]
[141.04728699 385.96307373]
[128.84732056 394.82940674]
[114.82537842 400.38241577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[26 42]
[27 41]
[28 40]
[44 129]
[45 128]
[46 127]
[49 126]
[50 125]
[51 124]
[52 123]
[53 122]
[54 121]
[55 115]
[56 114]
[57 113]
[58 112]
[62 88]
[63 87]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
