%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAUCUAACUUGGGGGGGGGGUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGxxxxxxxxxxGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUCCCCCCCCCCGUAAAGCUAACUU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 444.41085815]
[70.75619507 439.60144043]
[57.85220718 431.83602905]
[46.91955185 421.47790527]
[38.46956635 409.01147461]
[32.89747238 395.01983643]
[30.46388245 380.15740967]
[31.28262329 365.11932373]
[35.31539917 350.60897827]
[42.37359238 337.30499268]
[52.12707901 325.82962036]
[64.11966705 316.71963501]
[77.79044342 310.40109253]
[92.50000000 307.16955566]
[92.50000000 292.16955566]
[92.50000000 277.16955566]
[92.50000000 262.16955566]
[92.50000000 247.16954041]
[92.50000000 232.16954041]
[92.50000000 217.16954041]
[92.50000000 202.16954041]
[92.50000000 187.16954041]
[92.50000000 172.16954041]
[84.91591644 170.97297668]
[77.50074005 168.98170471]
[70.33748627 166.21803284]
[63.50637817 162.71290588]
[57.08389282 158.50556946]
[51.14195251 153.64311218]
[45.74708557 148.18002319]
[40.95970154 142.17742920]
[36.83340454 135.70257568]
[33.41440201 128.82795715]
[30.74097443 121.63053894]
[28.84305573 114.19091797]
[27.74189758 106.59239960]
[27.44983292 98.92006683]
[27.97012901 91.25982666]
[29.29696083 83.69744873]
[15.10713959 78.83442688]
[0.91731822 73.97140503]
[-8.27278233 74.14481354]
[-13.50608635 68.86651611]
[-27.59576416 63.72054672]
[-41.68544006 58.57457733]
[-56.78059006 64.00744629]
[-70.36372375 55.47058868]
[-72.01502991 39.51274490]
[-60.46776199 28.37541008]
[-44.57999802 30.60219574]
[-36.53947449 44.48490143]
[-22.44979477 49.63087082]
[-8.36011791 54.77683640]
[5.78033876 59.78158188]
[19.97015953 64.64459991]
[34.15998077 69.50762177]
[51.05477142 46.43641663]
[75.55175781 31.68472672]
[71.98444366 17.11509132]
[68.41712952 2.54545617]
[64.84982300 -12.02417946]
[59.84507370 -26.16463661]
[53.45295334 -39.73448563]
[47.06083298 -53.30433273]
[32.10580826 -58.41537094]
[25.22015953 -72.64082336]
[30.48902702 -87.54097748]
[44.78647995 -94.27584076]
[59.63009644 -88.84973145]
[66.21341705 -74.48187256]
[60.63068390 -59.69645309]
[67.02280426 -46.12660599]
[73.41492462 -32.55675888]
[76.79907227 -47.17002487]
[86.93920898 -58.22342300]
[101.20719147 -62.85210800]
[115.90500641 -59.85640335]
[127.22323608 -50.01274490]
[132.22839355 -35.87243271]
[129.62324524 -21.10039520]
[120.08296967 -9.52527809]
[106.08026886 -4.14715290]
[91.24437714 -6.35993433]
[79.41945648 -15.59149265]
[82.98677063 -1.02185690]
[86.55408478 13.54777813]
[90.12139130 28.11741447]
[110.21390533 28.16428947]
[129.52317810 33.71972656]
[146.56854248 44.35771561]
[157.33312988 33.91148376]
[151.69487000 19.79487419]
[151.89300537 4.59523010]
[157.89729309 -9.36961460]
[168.79214478 -19.97012329]
[182.91615295 -25.58979607]
[198.11552429 -25.37167168]
[212.07246399 -19.34901428]
[222.65863037 -8.44023418]
[228.25971985 5.69115829]
[228.02160645 20.89022827]
[221.98059082 34.83922958]
[211.05789185 45.41103745]
[196.91914368 50.99353027]
[181.72039795 50.73542023]
[167.77935791 44.67606354]
[157.01477051 55.12229538]
[163.19999695 64.35659027]
[167.90232849 74.42721558]
[171.01139832 85.09786987]
[172.45429993 96.11818695]
[187.43553162 96.86825562]
[202.41676331 97.61831665]
[217.39799500 98.36838531]
[232.37922668 99.11845398]
[242.88398743 87.53466797]
[258.38394165 85.46452332]
[271.56048584 93.88548279]
[276.19207764 108.82143402]
[270.09179688 123.22006226]
[256.14001465 130.28279114]
[240.92434692 126.67480469]
[231.62916565 114.09968567]
[216.64793396 113.34962463]
[201.66670227 112.59955597]
[186.68545532 111.84948730]
[171.70422363 111.09941864]
[168.37446594 124.28221893]
[162.64367676 136.61233521]
[154.71310425 147.65678406]
[144.86125183 157.02772522]
[133.43406677 164.39608765]
[120.83280945 169.50314331]
[107.50000000 172.16954041]
[107.50000000 187.16954041]
[107.50000000 202.16954041]
[107.50000000 217.16954041]
[107.50000000 232.16954041]
[107.50000000 247.16954041]
[107.50000000 262.16955566]
[107.50000000 277.16955566]
[107.50000000 292.16955566]
[107.50000000 307.16955566]
[122.20955658 310.40109253]
[135.88034058 316.71963501]
[147.87292480 325.82962036]
[157.62640381 337.30499268]
[164.68460083 350.60897827]
[168.71737671 365.11932373]
[169.53611755 380.15740967]
[167.10252380 395.01983643]
[161.53042603 409.01147461]
[153.08044434 421.47790527]
[142.14779663 431.83602905]
[129.24380493 439.60144043]
[114.97203827 444.41085815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[39 56]
[40 55]
[41 54]
[43 53]
[44 52]
[45 51]
[58 87]
[59 86]
[60 85]
[61 84]
[62 73]
[63 72]
[64 71]
[90 107]
[91 106]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
