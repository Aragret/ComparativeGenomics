%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCUUGGGGGGGGGGUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAxxxxxxxxxxAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCACCCCCCCCCCUCCUCGCCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 391.25952148]
[71.19830322 385.24349976]
[59.48964310 375.71408081]
[50.78712082 363.37841797]
[45.73651886 349.15188599]
[44.71262741 334.09020996]
[47.79142761 319.31103516]
[54.74444962 305.91113281]
[65.05573273 294.88479614]
[77.96011353 287.05029297]
[92.50000000 282.98895264]
[92.50000000 267.98895264]
[92.50000000 252.98896790]
[92.50000000 237.98896790]
[92.50000000 222.98896790]
[92.50000000 207.98896790]
[92.50000000 192.98896790]
[92.50000000 177.98896790]
[92.50000000 162.98896790]
[92.50000000 147.98896790]
[92.50000000 132.98896790]
[73.07195282 120.47930908]
[66.20633698 98.41568756]
[75.10607910 77.09117126]
[66.59498596 64.73960114]
[58.08389664 52.38802719]
[50.58773041 47.05329514]
[49.52736282 39.68978500]
[41.27507401 27.16382408]
[33.02278519 14.63786125]
[19.73772812 21.62886047]
[5.83139849 27.28401566]
[-8.56227589 31.54886246]
[-23.30467415 34.38232803]
[-38.25381088 35.75712204]
[-53.26572037 35.66000748]
[-68.19581604 34.09191513]
[-82.90032196 31.06795120]
[-97.23761749 26.61723709]
[-111.06961060 20.78263664]
[-124.26310730 13.62034225]
[-136.69104004 5.19933128]
[-148.23370361 -4.39929390]
[-158.77995300 -15.08309174]
[-168.22819519 -26.74916840]
[-176.48745728 -39.28517151]
[-183.47819519 -52.57036591]
[-189.13307190 -66.47681427]
[-193.39762878 -80.87056732]
[-196.23080444 -95.61302185]
[-197.60530090 -110.56218719]
[-197.50788879 -125.57409668]
[-195.93949890 -140.50416565]
[-192.91523743 -155.20860291]
[-188.46423340 -169.54580688]
[-182.62936401 -183.37770081]
[-175.46679688 -196.57104492]
[-167.04553223 -208.99880981]
[-157.44668579 -220.54127502]
[-146.76268005 -231.08731079]
[-135.09640503 -240.53532410]
[-122.56024170 -248.79434204]
[-109.27490234 -255.78480530]
[-95.36834717 -261.43939209]
[-80.97450256 -265.70367432]
[-66.23199463 -268.53656006]
[-51.28279877 -269.91073608]
[-36.27089691 -269.81304932]
[-21.34085846 -268.24435425]
[-6.63647509 -265.21978760]
[7.70063829 -260.76849365]
[21.53240585 -254.93334961]
[34.72561264 -247.77052307]
[47.15320587 -239.34902954]
[58.69548798 -229.74993896]
[69.24130249 -219.06571960]
[78.68908691 -207.39926147]
[86.94785309 -194.86293030]
[93.93804932 -181.57745361]
[99.59237671 -167.67077637]
[103.85635376 -153.27685547]
[106.68893433 -138.53428650]
[108.06283569 -123.58506775]
[107.96482086 -108.57316589]
[106.39583588 -93.64315796]
[103.37098694 -78.93883514]
[98.91941071 -64.60181427]
[93.08398438 -50.77016068]
[85.92089844 -37.57709503]
[77.49913788 -25.14967346]
[67.89981842 -13.60758114]
[57.21538925 -3.06197834]
[45.54874802 6.38557243]
[53.80103683 18.91153526]
[62.05332565 31.43749619]
[70.43547058 43.87693787]
[78.94655609 56.22850800]
[87.45764923 68.58007812]
[95.04417419 66.53417206]
[102.89804077 66.29357147]
[110.59556580 67.87126160]
[117.72152710 71.18213654]
[123.89149475 76.04757690]
[128.77264404 82.20513916]
[132.10165405 89.32263947]
[133.69894409 97.01612091]
[148.56198120 99.03845978]
[163.42503357 101.06079102]
[178.28807068 103.08312988]
[193.15112305 105.10546112]
[208.03440857 106.97307587]
[222.93630981 108.68576813]
[237.83821106 110.39845276]
[252.74011230 112.11114502]
[269.16601562 107.91284943]
[277.74740601 122.53462982]
[266.07260132 134.82833862]
[251.02742004 127.01304626]
[236.12551880 125.30035400]
[221.22361755 123.58766937]
[206.32171631 121.87497711]
[199.27192688 124.25115967]
[191.12878418 119.96850586]
[176.26574707 117.94617462]
[161.40269470 115.92384338]
[146.53964233 113.90150452]
[131.67660522 111.87917328]
[126.12904358 121.48941040]
[117.77043152 128.78773499]
[107.50000000 132.98896790]
[107.50000000 147.98896790]
[107.50000000 162.98896790]
[107.50000000 177.98896790]
[107.50000000 192.98896790]
[107.50000000 207.98896790]
[107.50000000 222.98896790]
[107.50000000 237.98896790]
[107.50000000 252.98896790]
[107.50000000 267.98895264]
[107.50000000 282.98895264]
[122.03988647 287.05029297]
[134.94427490 294.88479614]
[145.25555420 305.91113281]
[152.20857239 319.31103516]
[155.28736877 334.09020996]
[154.26348877 349.15188599]
[149.21287537 363.37841797]
[140.51036072 375.71408081]
[128.80169678 385.24349976]
[114.95575714 391.25952148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 98]
[25 97]
[26 96]
[28 95]
[29 94]
[30 93]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
