%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCAAUUAGGGGGGGGGGAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAACAUAUAxxxxxxxxxxCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCCCCCCCCCCCAACAAUUA\
) } def
/len { sequence length } bind def

/coor [
[85.44328308 416.12246704]
[72.22308350 408.85000610]
[61.33628082 398.40298462]
[53.52515030 385.49374390]
[49.32226944 371.00244141]
[49.01419830 355.91708374]
[52.62193680 341.26626587]
[59.89950943 328.04888916]
[70.35071564 317.16610718]
[83.26297760 309.35995483]
[97.75592041 305.16268921]
[97.44386292 290.16592407]
[97.13180542 275.16918945]
[96.81974792 260.17242432]
[96.50769043 245.17567444]
[96.19563293 230.17890930]
[95.88358307 215.18215942]
[95.57152557 200.18540955]
[95.25946808 185.18865967]
[94.94741058 170.19189453]
[94.63535309 155.19514465]
[94.16731262 140.20245361]
[93.54333496 125.21543121]
[81.95071411 118.75447083]
[75.05040741 107.41786194]
[74.63629913 94.15281677]
[80.81604767 82.40788269]
[91.98308563 75.23640442]
[91.67103577 60.23964691]
[91.35897827 45.24289322]
[80.23516846 34.33882523]
[80.13233948 19.12553978]
[90.59625244 8.58788872]
[90.28419495 -6.40886450]
[89.97213745 -21.40561867]
[74.98868561 -22.25677872]
[60.11624908 -24.26649284]
[45.44427490 -27.42267036]
[31.06100082 -31.70633125]
[17.05293083 -37.09171295]
[3.50431514 -43.54642487]
[-9.50336456 -51.03164673]
[-21.89187622 -59.50236511]
[-33.58671570 -68.90763855]
[-44.51754379 -79.19088745]
[-54.61862564 -90.29027557]
[-63.82920837 -102.13905334]
[-72.09389496 -114.66595459]
[-79.36298370 -127.79563904]
[-85.59275818 -141.44914246]
[-90.74575043 -155.54435730]
[-94.79096222 -169.99650574]
[-97.70407867 -184.71867371]
[-99.46756744 -199.62231445]
[-100.07082367 -214.61778259]
[-99.51022339 -229.61492920]
[-97.78913879 -244.52351379]
[-94.91792297 -259.25390625]
[-90.91384125 -273.71749878]
[-85.80097198 -287.82733154]
[-79.61006165 -301.49850464]
[-72.37835693 -314.64880371]
[-64.14933777 -327.19915771]
[-54.97249985 -339.07409668]
[-44.90303802 -350.20217896]
[-34.00150681 -360.51647949]
[-22.33347130 -369.95498657]
[-9.96910572 -378.46090698]
[3.01722693 -385.98312378]
[16.54742622 -392.47634888]
[30.54011726 -397.90155029]
[44.91114807 -402.22610474]
[59.57408524 -405.42401123]
[74.44074249 -407.47604370]
[89.42171478 -408.36981201]
[104.42689514 -408.10000610]
[119.36605072 -406.66818237]
[134.14932251 -404.08300781]
[148.68780518 -400.35998535]
[162.89405823 -395.52157593]
[176.68266296 -389.59680176]
[189.97065735 -382.62130737]
[202.67816162 -374.63708496]
[214.72872925 -365.69213867]
[226.04988098 -355.84024048]
[236.57353210 -345.14065552]
[246.23640442 -333.65774536]
[254.98037720 -321.46057129]
[262.75286865 -308.62246704]
[269.50711060 -295.22067261]
[275.20251465 -281.33575439]
[279.80477905 -267.05123901]
[283.28628540 -252.45303345]
[285.62603760 -237.62893677]
[286.81002808 -222.66810608]
[286.83108521 -207.66050720]
[285.68908691 -192.69641113]
[283.39089966 -177.86581421]
[279.95037842 -163.25790405]
[275.38818359 -148.96052551]
[269.73178101 -135.05969238]
[263.01516724 -121.63899231]
[255.27871704 -108.77913666]
[246.56900024 -96.55746460]
[236.93838501 -85.04749298]
[226.44477844 -74.31843567]
[215.15130615 -64.43482208]
[203.12588501 -55.45609283]
[190.44084167 -47.43624496]
[177.17245483 -40.42351913]
[163.40054321 -34.46008682]
[149.20791626 -29.58181000]
[134.67993164 -25.81803131]
[119.90396881 -23.19138718]
[104.96889496 -21.71767426]
[105.28094482 -6.72092104]
[105.59300232 8.27583313]
[116.48621368 18.36907959]
[117.01631165 33.57347488]
[106.35572815 44.93083954]
[106.66778564 59.92759323]
[106.97984314 74.92434692]
[120.47840881 83.93321991]
[126.01628113 99.18782043]
[121.44070435 114.75814819]
[108.53034973 124.59146118]
[109.15432739 139.57847595]
[112.65694427 148.08631897]
[109.63211060 154.88308716]
[109.94416809 169.87983704]
[110.25621796 184.87660217]
[110.56827545 199.87335205]
[110.88033295 214.87010193]
[111.19239044 229.86685181]
[111.50444794 244.86361694]
[111.81650543 259.86035156]
[112.12855530 274.85711670]
[112.44061279 289.85388184]
[112.75267029 304.85061646]
[127.40766144 308.44140625]
[140.63346863 315.70364380]
[151.52833557 326.14224243]
[159.34944153 339.04547119]
[163.56350708 353.53353882]
[163.88322449 368.61862183]
[160.28680420 383.27221680]
[153.01943970 396.49523926]
[142.57664490 407.38607788]
[129.67041016 415.20217896]
[115.18071747 419.41064453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 127]
[23 126]
[28 122]
[29 121]
[30 120]
[33 117]
[34 116]
[35 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
