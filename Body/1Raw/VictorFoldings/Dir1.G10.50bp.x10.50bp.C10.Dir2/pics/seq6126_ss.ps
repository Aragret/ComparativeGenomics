%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAAUCAGGGGGGGGGGACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCxxxxxxxxxxUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUCCCCCCCCCCACCAUAAUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.74038696]
[71.19830322 372.72436523]
[59.48964310 363.19494629]
[50.78712082 350.85928345]
[45.73651886 336.63275146]
[44.71262741 321.57107544]
[47.79142761 306.79193115]
[54.74444962 293.39199829]
[65.05573273 282.36566162]
[77.96011353 274.53115845]
[92.50000000 270.46984863]
[92.50000000 255.46983337]
[92.50000000 240.46983337]
[92.50000000 225.46983337]
[92.50000000 210.46983337]
[92.50000000 195.46983337]
[92.50000000 180.46983337]
[92.50000000 165.46983337]
[92.50000000 150.46983337]
[92.50000000 135.46983337]
[92.50000000 120.46983337]
[78.71756744 104.72465515]
[84.54287720 84.62659454]
[78.19574738 71.03564453]
[65.34583282 61.80578995]
[66.97087097 47.00009918]
[60.62374496 33.40914917]
[47.77382660 24.17929268]
[49.39886856 9.37360191]
[37.52944946 4.21892452]
[32.53863144 -7.28371477]
[36.61396408 -18.71607971]
[30.55095100 -32.43613434]
[24.48793793 -46.15618896]
[18.42492485 -59.87623978]
[8.91656685 -71.47758484]
[-3.34580112 -80.11669922]
[-15.60816956 -88.75581360]
[-27.87053680 -97.39492798]
[-40.13290405 -106.03404999]
[-52.39527512 -114.67316437]
[-64.65763855 -123.31227875]
[-76.92001343 -131.95140076]
[-89.18238068 -140.59051514]
[-101.44474792 -149.22962952]
[-113.70711517 -157.86874390]
[-127.01584625 -150.39608765]
[-142.24938965 -149.44648743]
[-156.38313293 -155.20845032]
[-166.61077881 -166.53796387]
[-170.90165710 -181.18551636]
[-168.40379333 -196.24285889]
[-159.61312866 -208.72032166]
[-146.27508545 -216.14050293]
[-131.03791809 -217.03012085]
[-116.92697906 -211.21253967]
[-106.74401093 -199.84284973]
[-102.51085663 -185.17849731]
[-105.06800079 -170.13111877]
[-92.80563354 -161.49198914]
[-80.54325867 -152.85287476]
[-68.28089142 -144.21376038]
[-56.01852417 -135.57464600]
[-43.75615692 -126.93553162]
[-31.49378967 -118.29641724]
[-19.23142052 -109.65729523]
[-6.96905327 -101.01818085]
[5.29331493 -92.37906647]
[17.55568314 -83.73995209]
[11.61624718 -97.51395416]
[8.82829952 -112.25258636]
[9.32643604 -127.24430847]
[13.08660603 -141.76536560]
[19.92728043 -155.11471558]
[29.51820946 -166.64788818]
[41.39636612 -175.80810547]
[54.98830795 -182.15310669]
[69.63785553 -185.37658691]
[84.63775635 -185.32293701]
[99.26386261 -181.99473572]
[112.81007385 -175.55265808]
[124.62239838 -166.30772400]
[134.13056946 -154.70623779]
[140.87557983 -141.30828857]
[144.53178406 -126.76070404]
[144.92265320 -111.76580048]
[142.02934265 -97.04748535]
[135.99153137 -83.31632233]
[127.10069275 -71.23522186]
[115.78606415 -61.38742065]
[102.59388733 -54.24834442]
[88.16104126 -50.16264725]
[73.18430328 -49.32758331]
[58.38671494 -51.78345871]
[44.48265839 -57.41171265]
[32.14497757 -65.93925476]
[38.20799255 -52.21920013]
[44.27100372 -38.49914551]
[50.33401871 -24.77909279]
[65.03361511 -15.24379826]
[62.98981857 3.02647233]
[75.38574982 11.28421116]
[74.21469879 27.06201935]
[80.56182098 40.65296936]
[92.95774841 48.91070938]
[91.78669739 64.68851471]
[98.13382721 78.27946472]
[109.07109833 80.17629242]
[117.65650177 87.21281433]
[121.66410065 97.56467438]
[136.23680115 101.11943817]
[150.84570312 104.52241516]
[165.48919678 107.77323914]
[175.80950928 96.39840698]
[190.43946838 91.72294617]
[205.44367981 95.00453949]
[216.78611755 105.36044312]
[221.41569519 120.00498962]
[218.08708191 134.99885559]
[207.69567871 146.30876160]
[193.03669739 150.89241028]
[178.05334473 147.51683044]
[166.77606201 137.09001160]
[162.23837280 122.41674042]
[147.59487915 119.16591644]
[140.33645630 120.79721069]
[132.68203735 115.69213867]
[118.10934448 112.13737488]
[113.46540070 117.14488220]
[107.50000000 120.46983337]
[107.50000000 135.46983337]
[107.50000000 150.46983337]
[107.50000000 165.46983337]
[107.50000000 180.46983337]
[107.50000000 195.46983337]
[107.50000000 210.46983337]
[107.50000000 225.46983337]
[107.50000000 240.46983337]
[107.50000000 255.46983337]
[107.50000000 270.46984863]
[122.03988647 274.53115845]
[134.94427490 282.36566162]
[145.25555420 293.39199829]
[152.20857239 306.79193115]
[155.28736877 321.57107544]
[154.26348877 336.63275146]
[149.21287537 350.85928345]
[140.51036072 363.19494629]
[128.80169678 372.72436523]
[114.95575714 378.74038696]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 107]
[24 106]
[26 104]
[27 103]
[29 101]
[32 99]
[33 98]
[34 97]
[35 96]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[110 128]
[111 127]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
