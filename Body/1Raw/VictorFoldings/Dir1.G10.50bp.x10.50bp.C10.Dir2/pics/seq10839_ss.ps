%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCACUACUAGGGGGGGGGGGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCxxxxxxxxxxCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAACCCCCCCCCCACCCCAUUACUA\
) } def
/len { sequence length } bind def

/coor [
[147.77416992 544.36975098]
[133.61357117 539.21478271]
[121.02381897 530.93255615]
[110.68388367 519.96978760]
[103.15137482 506.91766357]
[98.83250427 492.48007202]
[97.96019745 477.43560791]
[100.58148956 462.59561157]
[106.55501556 448.76037598]
[115.55863190 436.67602539]
[127.10678864 426.99423218]
[140.57670593 420.23715210]
[155.24197388 416.76919556]
[155.24197388 401.76919556]
[155.24197388 386.76919556]
[155.24197388 371.76919556]
[155.24197388 356.76919556]
[155.24197388 341.76919556]
[155.24197388 326.76919556]
[155.24197388 311.76919556]
[155.24197388 296.76919556]
[155.24197388 281.76919556]
[152.52088928 267.01806641]
[147.16903687 253.00529480]
[141.81716919 238.99252319]
[136.46531677 224.97976685]
[131.11344910 210.96699524]
[119.34442139 201.83796692]
[121.64871216 186.18547058]
[116.29685211 172.17269897]
[110.94499207 158.15994263]
[105.59313202 144.14717102]
[100.24127960 130.13441467]
[94.88941956 116.12164307]
[82.49176025 107.67782593]
[67.49253082 107.82983398]
[53.65723801 116.63419342]
[39.24183273 108.81575012]
[39.07564545 92.41744232]
[53.32963562 84.30844879]
[67.34052277 92.83060455]
[82.33975220 92.67859650]
[83.92385864 85.34779358]
[88.67619324 63.35540390]
[75.07801056 57.02378464]
[61.47982407 50.69216537]
[46.71941757 56.34069824]
[32.32238007 49.82143402]
[26.83021545 35.00213242]
[33.50133133 20.67482376]
[48.37787247 15.33964634]
[62.63384628 22.16186523]
[67.81143951 37.09397888]
[81.40962982 43.42559814]
[95.00781250 49.75721741]
[101.52819061 46.05118561]
[101.62950134 31.05152893]
[114.56894684 38.63912201]
[121.08931732 34.93309021]
[122.60684204 20.01004791]
[124.12436676 5.08700895]
[121.55292511 -9.69093609]
[115.08382416 -23.22425652]
[108.61472321 -36.75757599]
[94.79318237 -45.58350754]
[95.79610443 -61.95195770]
[110.59176636 -69.02447510]
[123.95966339 -59.52545166]
[122.14804840 -43.22667694]
[128.61714172 -29.69335365]
[135.08624268 -16.16003418]
[136.55810547 -31.08764648]
[141.14752197 -45.36830139]
[148.64775085 -58.35855865]
[158.72082520 -69.47310638]
[170.91287231 -78.21116638]
[184.67459106 -84.17902374]
[199.38589478 -87.10778809]
[214.38392639 -86.86548615]
[228.99295044 -83.46305084]
[242.55470276 -77.05377960]
[254.45814514 -67.92644501]
[264.16693115 -56.49231720]
[271.24362183 -43.26656723]
[275.36935425 -28.84511566]
[276.35827637 -13.87774849]
[274.16574097 0.96115041]
[268.89062500 15.00298309]
[260.77056885 27.61506844]
[250.17144775 38.22914124]
[237.57081604 46.36696625]
[223.53643799 51.66187286]
[208.70063782 53.87529373]
[193.73190308 52.90749359]
[179.30464172 48.80208206]
[166.06893921 41.74403381]
[154.62113953 32.05136871]
[145.47703552 20.16080475]
[139.04740906 6.60453367]
[137.52989197 21.52757454]
[136.01235962 36.45061493]
[143.34152222 96.19390106]
[108.90218353 110.76978302]
[114.25404358 124.78254700]
[119.60590363 138.79531860]
[124.95776367 152.80807495]
[130.30961609 166.82084656]
[135.66148376 180.83361816]
[147.81330872 190.96492004]
[145.12622070 205.61514282]
[150.47807312 219.62789917]
[155.82994080 233.64067078]
[161.18179321 247.65342712]
[166.53366089 261.66619873]
[169.25984192 246.91601562]
[176.33573914 233.68983459]
[187.09330750 223.23638916]
[200.51690674 216.54258728]
[215.33918762 214.24040222]
[230.16075134 216.54719543]
[243.58226013 223.24517822]
[254.33657837 233.70198059]
[261.40835571 246.93035889]
[264.12994385 261.68139648]
[262.24438477 276.56240845]
[255.92970276 290.16845703]
[245.78208923 301.21499634]
[232.75956726 308.65905762]
[218.09164429 311.79788208]
[203.16314697 310.33508301]
[189.38348389 304.40878296]
[178.05363464 294.57849121]
[170.24197388 281.76919556]
[170.24197388 296.76919556]
[170.24197388 311.76919556]
[170.24197388 326.76919556]
[170.24197388 341.76919556]
[170.24197388 356.76919556]
[170.24197388 371.76919556]
[170.24197388 386.76919556]
[170.24197388 401.76919556]
[170.24197388 416.76919556]
[184.90722656 420.23715210]
[198.37713623 426.99423218]
[209.92529297 436.67602539]
[218.92892456 448.76037598]
[224.90245056 462.59561157]
[227.52374268 477.43560791]
[226.65142822 492.48007202]
[222.33256531 506.91766357]
[214.80004883 519.96978760]
[204.46011353 530.93255615]
[191.87036133 539.21478271]
[177.70976257 544.36975098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 114]
[24 113]
[25 112]
[26 111]
[27 110]
[29 108]
[30 107]
[31 106]
[32 105]
[33 104]
[34 103]
[35 42]
[36 41]
[44 55]
[45 54]
[46 53]
[59 101]
[60 100]
[61 99]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
