%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCUCCUCGGGGGGGGGGUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUxxxxxxxxxxAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCCCCCCCCCCCACCAUCCUC\
) } def
/len { sequence length } bind def

/coor [
[86.98116302 482.56927490]
[72.95922089 477.01626587]
[60.75926208 468.14993286]
[51.14818954 456.52764893]
[44.73016739 442.87994385]
[41.90863037 428.06475830]
[42.86094666 413.01336670]
[47.52724838 398.67193604]
[55.61421585 385.94198608]
[66.61349487 375.62371826]
[79.83364868 368.36575317]
[94.44366455 364.62429810]
[94.44366455 349.62429810]
[94.44366455 334.62429810]
[94.44366455 319.62429810]
[94.44366455 304.62429810]
[94.44366455 289.62429810]
[94.44366455 274.62429810]
[94.44366455 259.62429810]
[94.44366455 244.62431335]
[94.44366455 229.62431335]
[94.44366455 214.62431335]
[94.44366455 199.62431335]
[82.93545532 192.78959656]
[76.26734924 181.05914307]
[76.28211212 167.45748901]
[83.08323669 155.55320740]
[94.97966003 148.52268982]
[95.28763580 133.52586365]
[95.59561157 118.52902222]
[86.67945862 106.46659088]
[72.25207520 102.36164093]
[57.82469177 98.25669861]
[48.35085678 110.11090088]
[35.09601974 117.41516876]
[20.09503174 119.08370972]
[5.63725233 114.89321899]
[-6.08284998 105.51217651]
[-13.29877472 92.39440155]
[-14.93821049 77.55387115]
[-29.36559486 73.44892120]
[-43.79298019 69.34397888]
[-58.45182037 75.86302948]
[-72.62125397 68.33927917]
[-75.43170166 52.54431534]
[-64.72723389 40.59467697]
[-48.71939468 41.65710449]
[-39.68803406 54.91659546]
[-25.26065063 59.02153778]
[-10.83326626 63.12648392]
[-1.62685347 51.37185669]
[11.41386414 44.01760101]
[26.31698036 42.21151352]
[40.81524277 46.25972748]
[52.69096375 55.57535172]
[60.11525726 68.76333618]
[61.92963791 83.82931519]
[76.35702515 87.93425751]
[90.78440857 92.03920746]
[86.05595398 83.79108429]
[83.68818665 74.12793732]
[83.97101593 63.58305740]
[87.08638763 52.74057388]
[90.14478302 38.05567551]
[93.20317841 23.37077904]
[96.26157379 8.68588257]
[99.31996918 -5.99901533]
[85.53805542 -12.06138802]
[73.31797028 -20.85702515]
[63.19393158 -32.00142288]
[55.60852051 -45.00738907]
[50.89333344 -59.30636597]
[49.25450516 -74.27326202]
[50.76367569 -89.25378418]
[55.35486603 -103.59305573]
[62.82737350 -116.66421509]
[72.85453033 -127.89585876]
[84.99799347 -136.79698181]
[98.72690582 -142.97846985]
[113.44109344 -146.17008972]
[128.49731445 -146.23231506]
[143.23738098 -143.16242981]
[157.01690674 -137.09463501]
[169.23353577 -128.29418945]
[179.35317993 -117.14580536]
[186.93348694 -104.13685608]
[191.64303589 -89.83602905]
[193.27598572 -74.86848450]
[191.76091003 -59.88855743]
[187.16407776 -45.55109787]
[179.68643188 -32.48287201]
[169.65486145 -21.25517654]
[157.50788879 -12.35883236]
[143.77655029 -6.18275023]
[129.06111145 -2.99692273]
[114.00486755 -2.94061995]
[110.94647217 11.74427795]
[107.88807678 26.42917442]
[104.82968140 41.11407471]
[101.77128601 55.79896927]
[113.45749664 65.20282745]
[127.14812469 59.07365417]
[136.31640625 45.47679138]
[152.65470886 46.88809586]
[159.35559082 61.85573196]
[149.52575684 74.98228455]
[133.27729797 72.76428223]
[119.58666992 78.89345551]
[122.34291077 93.63804626]
[137.32315063 94.40770721]
[152.30339050 95.17736816]
[167.28363037 95.94702911]
[182.26387024 96.71669006]
[195.09043884 87.08036804]
[210.58493042 91.23976135]
[216.86128235 106.00414276]
[209.10482788 120.04753876]
[193.26565552 122.59706116]
[181.49421692 111.69692993]
[166.51397705 110.92726898]
[151.53373718 110.15760803]
[136.55349731 109.38794708]
[121.57324982 108.61829376]
[110.59245300 118.83699799]
[110.28446960 133.83383179]
[109.97649384 148.83067322]
[123.57508087 158.83959961]
[128.50143433 174.81645203]
[123.01058960 190.43254089]
[109.44366455 199.62431335]
[109.44366455 214.62431335]
[109.44366455 229.62431335]
[109.44366455 244.62431335]
[109.44366455 259.62429810]
[109.44366455 274.62429810]
[109.44366455 289.62429810]
[109.44366455 304.62429810]
[109.44366455 319.62429810]
[109.44366455 334.62429810]
[109.44366455 349.62429810]
[109.44366455 364.62429810]
[124.05367279 368.36575317]
[137.27383423 375.62371826]
[148.27310181 385.94198608]
[156.36007690 398.67193604]
[161.02638245 413.01336670]
[161.97869873 428.06475830]
[159.15716553 442.87994385]
[152.73913574 456.52764893]
[143.12806702 468.14993286]
[130.92810059 477.01626587]
[116.90615845 482.56927490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[28 126]
[29 125]
[30 124]
[31 59]
[32 58]
[33 57]
[40 50]
[41 49]
[42 48]
[63 100]
[64 99]
[65 98]
[66 97]
[67 96]
[101 108]
[102 107]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
