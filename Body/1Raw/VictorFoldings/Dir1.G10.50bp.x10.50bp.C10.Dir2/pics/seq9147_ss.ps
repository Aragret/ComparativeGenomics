%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCGAGUCGGGGGGGGGGUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCAxxxxxxxxxxCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCCCCCCCCCCCACUUCAAGUC\
) } def
/len { sequence length } bind def

/coor [
[83.07064056 390.14846802]
[70.51242065 381.79730225]
[60.42619705 370.58486938]
[53.44600296 357.21594238]
[50.01061630 342.53097534]
[50.33599472 327.45300293]
[54.40167999 312.92987061]
[61.95209885 299.87454224]
[72.51262665 289.10763550]
[85.41942596 281.30599976]
[99.86115265 276.96005249]
[99.23717499 261.97305298]
[98.61319733 246.98602295]
[97.98921967 231.99900818]
[97.36524200 217.01199341]
[96.74126434 202.02497864]
[96.11728668 187.03796387]
[95.49330902 172.05094910]
[94.86933136 157.06391907]
[94.24535370 142.07690430]
[80.56681061 137.76153564]
[69.10490417 129.13890076]
[61.16704178 117.19255066]
[46.59434128 120.74731445]
[35.02090454 131.53462219]
[20.82256889 127.03389740]
[6.24986649 130.58865356]
[1.31978357 145.20706177]
[-10.74522781 154.82159424]
[-26.09526634 156.36427307]
[-39.83219147 149.34283447]
[-47.57259750 135.99781799]
[-46.84655380 120.58754730]
[-37.88573456 108.02938843]
[-23.54950523 102.33061218]
[-8.41250420 105.30966949]
[2.69510460 116.01595306]
[17.26780701 112.46118927]
[27.79890633 101.92813873]
[43.03957748 106.17460632]
[57.61228180 102.61985016]
[58.19760895 92.50718689]
[61.16113663 82.82080078]
[66.33426666 74.11177063]
[73.42269135 66.87555695]
[82.02313995 61.52384186]
[91.64631653 58.36109543]
[101.74475098 57.56724930]
[111.74391937 59.18746948]
[118.37242126 45.73150253]
[125.00091553 32.27553940]
[131.62940979 18.81957245]
[127.08704376 11.84300995]
[125.62758636 3.51628947]
[127.58499908 -4.83982420]
[132.74301147 -11.85951233]
[135.53533936 -26.59731865]
[138.32765198 -41.33512497]
[141.11997986 -56.07292938]
[143.91230774 -70.81073761]
[146.70463562 -85.54853821]
[141.67155457 -100.54782867]
[151.64285278 -111.61229706]
[154.43516541 -126.35010529]
[157.22749329 -141.08790588]
[160.01982117 -155.82571411]
[162.35092163 -170.64347839]
[164.21853638 -185.52674866]
[165.93122864 -200.42864990]
[167.48881531 -215.34756470]
[153.96846008 -222.24426270]
[143.85539246 -233.56196594]
[138.51731873 -247.77003479]
[138.67617798 -262.94696045]
[144.31048584 -277.04019165]
[154.65823364 -288.14373779]
[168.31999207 -294.75588989]
[183.44810486 -295.98248291]
[197.99662781 -291.65756226]
[209.99800110 -282.36608887]
[217.82911682 -269.36462402]
[220.43089294 -254.41151428]
[217.45146179 -239.52906799]
[209.29376221 -226.72999573]
[197.06105042 -217.74525452]
[182.40771484 -213.78999329]
[180.85014343 -198.87107849]
[183.29953003 -191.84638977]
[179.10182190 -183.65913391]
[177.23420715 -168.77586365]
[179.15350342 -165.74539185]
[179.66287231 -161.61715698]
[178.25477600 -157.08178711]
[174.75762939 -153.03338623]
[171.96530151 -138.29557800]
[169.17297363 -123.55777740]
[166.38066101 -108.81996918]
[171.61346436 -94.87483215]
[161.44244385 -82.75621796]
[158.65011597 -68.01840973]
[155.85778809 -53.28060532]
[153.06546021 -38.54280090]
[150.27314758 -23.80499268]
[147.48081970 -9.06718731]
[157.22846985 2.33383346]
[172.22116089 1.86579144]
[178.36413574 -12.10655880]
[189.96673584 -22.02334785]
[204.72523499 -25.91558838]
[219.70932007 -23.01047516]
[231.94390869 -13.88481998]
[238.99980164 -0.35052770]
[239.47605896 14.90515804]
[233.27810669 28.85320854]
[221.63655090 38.72423172]
[206.86285400 42.55832291]
[191.89030457 39.59422684]
[179.69175720 30.42046165]
[172.68920898 16.85848808]
[157.69651794 17.32653046]
[145.08538818 25.44807243]
[138.45687866 38.90403748]
[131.82838440 52.36000443]
[125.19989014 65.81597137]
[137.70646667 80.46018219]
[142.45953369 99.12232971]
[138.48171997 117.96495819]
[126.59097290 133.11347961]
[109.23236847 141.45292664]
[109.85634613 156.43995667]
[110.48032379 171.42697144]
[111.10430145 186.41398621]
[111.72827911 201.40100098]
[112.35225677 216.38801575]
[112.97623444 231.37503052]
[113.60021210 246.36204529]
[114.22418976 261.34906006]
[114.84816742 276.33609009]
[129.60116577 279.46652222]
[143.11180115 286.16827393]
[154.53079224 296.02005005]
[163.14030457 308.40258789]
[168.39915466 322.53750610]
[169.97676086 337.53622437]
[167.77395630 352.45596313]
[161.92919922 366.35882568]
[152.80992126 378.37088013]
[140.98934937 387.73703003]
[127.21054077 393.86853027]
[112.33963776 396.37994385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 41]
[24 40]
[26 38]
[27 37]
[49 124]
[50 123]
[51 122]
[52 121]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[63 97]
[64 96]
[65 95]
[66 94]
[67 90]
[68 89]
[69 87]
[70 86]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
