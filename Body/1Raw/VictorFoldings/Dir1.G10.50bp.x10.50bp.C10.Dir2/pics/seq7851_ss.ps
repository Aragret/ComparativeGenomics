%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAUACUACGGGGGGGGGGGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCxxxxxxxxxxUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUCCCCCCCCCCGGUAUAAUACG\
) } def
/len { sequence length } bind def

/coor [
[136.73463440 438.18795776]
[122.71268463 432.63494873]
[110.51272583 423.76861572]
[100.90165710 412.14630127]
[94.48363495 398.49859619]
[91.66209412 383.68341064]
[92.61441040 368.63204956]
[97.28071594 354.29061890]
[105.36768341 341.56066895]
[116.36695862 331.24237061]
[129.58711243 323.98440552]
[144.19712830 320.24298096]
[144.19712830 305.24298096]
[144.19712830 290.24298096]
[144.19712830 275.24298096]
[144.19712830 260.24298096]
[144.19712830 245.24296570]
[144.19712830 230.24296570]
[144.19712830 215.24296570]
[144.19712830 200.24296570]
[144.19712830 185.24296570]
[139.35731506 171.04521179]
[130.19537354 159.16839600]
[127.37174988 158.70132446]
[124.56974030 157.05270386]
[122.25358582 154.22743225]
[120.87602997 150.40304565]
[120.81715393 145.92016602]
[112.66049194 133.33172607]
[104.50382233 120.74329376]
[82.41196442 117.87537384]
[71.63504028 94.32100677]
[57.38834381 89.62720490]
[43.14165497 84.93340302]
[28.89496040 80.23960114]
[14.64826870 75.54579926]
[5.45500660 75.82814789]
[0.15899496 70.60660553]
[-13.98832130 65.62128448]
[-28.13563728 60.63596344]
[-42.28295517 55.65064240]
[-56.43027115 50.66532135]
[-70.57759094 45.68000031]
[-84.72177124 52.73107147]
[-99.68235779 47.63632965]
[-106.58349609 33.41838837]
[-101.33086395 18.51250458]
[-87.04075623 11.76207161]
[-72.19123840 17.17200279]
[-65.59226227 31.53268242]
[-51.44495010 36.51800537]
[-37.29763412 41.50332642]
[-23.15031624 46.48864746]
[-9.00299931 51.47397232]
[5.14431715 56.45929337]
[19.34206963 61.29911041]
[33.58876038 65.99291229]
[47.83545303 70.68670654]
[62.08214569 75.38050842]
[76.32883453 80.07431030]
[88.48217010 71.28247070]
[88.48217010 56.28247070]
[88.32817078 41.28326035]
[88.02019501 26.28642082]
[87.71221924 11.28958321]
[87.40424347 -3.70725465]
[79.38523102 -17.34565735]
[86.85958099 -30.22910690]
[86.55160522 -45.22594452]
[72.49874115 -51.09423447]
[62.05237579 -62.17545319]
[57.02241516 -76.54971313]
[58.28032684 -91.72659302]
[65.60816956 -105.07659149]
[77.73635101 -114.28675842]
[92.56359100 -117.76136780]
[107.52097321 -114.89842224]
[120.01705170 -106.19394684]
[127.88680267 -93.15603638]
[129.76673889 -78.04360199]
[125.33115387 -63.47495651]
[115.34854126 -51.97420502]
[101.54844666 -45.53392410]
[101.85642242 -30.53708458]
[109.85340881 -17.97135735]
[102.40107727 -4.01523209]
[102.70905304 10.98160553]
[103.01703644 25.97844315]
[103.32501221 40.97528076]
[106.62709045 47.63924789]
[103.48217010 56.28247070]
[103.48217010 71.28247070]
[119.19465637 81.93190765]
[123.75056458 98.56802368]
[117.09226227 112.58662415]
[125.24893188 125.17506409]
[133.40559387 137.76350403]
[142.07220459 150.00645447]
[151.23413086 161.88328552]
[157.37805176 154.37867737]
[167.60589600 149.55575562]
[180.67294312 149.13972473]
[195.67214966 149.29373169]
[210.67135620 149.44772339]
[225.67057800 149.60171509]
[240.66978455 149.75572205]
[255.66899109 149.60171509]
[270.66186523 149.13980103]
[285.65475464 148.67787170]
[293.50344849 135.39624023]
[307.29702759 128.48677063]
[322.63400269 130.15423584]
[334.62042236 139.86656189]
[339.43145752 154.52458191]
[335.53192139 169.45097351]
[324.16613770 179.88278198]
[308.96087646 182.49124146]
[294.76812744 176.44401550]
[286.11669922 163.67076111]
[271.12380981 164.13267517]
[256.13092041 164.59460449]
[252.22857666 167.44435120]
[246.48068237 167.83105469]
[240.51577759 164.75492859]
[225.51657104 164.60093689]
[210.51736450 164.44692993]
[195.51815796 164.29293823]
[180.51895142 164.13894653]
[175.18849182 169.41494751]
[178.99665833 183.92349243]
[164.52758789 179.96696472]
[159.19712830 185.24296570]
[159.19712830 200.24296570]
[159.19712830 215.24296570]
[159.19712830 230.24296570]
[159.19712830 245.24296570]
[159.19712830 260.24298096]
[159.19712830 275.24298096]
[159.19712830 290.24298096]
[159.19712830 305.24298096]
[159.19712830 320.24298096]
[173.80714417 323.98440552]
[187.02729797 331.24237061]
[198.02658081 341.56066895]
[206.11354065 354.29061890]
[210.77984619 368.63204956]
[211.73216248 383.68341064]
[208.91062927 398.49859619]
[202.49259949 412.14630127]
[192.88153076 423.76861572]
[180.68157959 432.63494873]
[166.65962219 438.18795776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 99]
[23 98]
[28 97]
[29 96]
[30 95]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[61 92]
[62 91]
[63 89]
[64 88]
[65 87]
[66 86]
[68 84]
[69 83]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
