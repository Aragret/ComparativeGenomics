%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCAAUAGGGGGGGGGGGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUxxxxxxxxxxACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCCCCCCCCCCCGCCUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[81.47871399 426.78912354]
[66.98902130 422.58065796]
[54.08279419 414.76452637]
[43.63999176 403.87368774]
[36.37263107 390.65069580]
[32.77620316 375.99710083]
[33.09592438 360.91198730]
[37.30999374 346.42391968]
[45.13109207 333.52072144]
[56.02595901 323.08212280]
[69.25177002 315.81985474]
[83.90676117 312.22909546]
[84.21881866 297.23233032]
[84.53087616 282.23559570]
[84.84293365 267.23883057]
[85.15498352 252.24208069]
[85.46704102 237.24533081]
[85.77909851 222.24858093]
[86.09115601 207.25181580]
[86.40321350 192.25506592]
[86.71527100 177.25831604]
[87.02732086 162.26156616]
[87.33937836 147.26480103]
[87.65143585 132.26805115]
[87.96349335 117.27130127]
[80.65962219 93.15115356]
[70.67689514 81.95538330]
[60.57824326 70.86406708]
[50.36476517 59.87840652]
[34.80530930 59.14284134]
[24.60388184 47.85631943]
[25.40101814 33.02729034]
[15.18753910 22.04162407]
[4.97405910 11.05595875]
[-7.26773548 19.76190376]
[-20.54118156 26.79544067]
[-34.61915207 32.03621674]
[-49.26075745 35.39455414]
[-64.21546173 36.81299210]
[-79.22735596 36.26725006]
[-94.03958893 33.76667404]
[-108.39868927 29.35405159]
[-122.05895996 23.10488510]
[-134.78665161 15.12610817]
[-146.36398315 5.55424833]
[-156.59283447 -5.44690847]
[-165.29820251 -17.68911743]
[-172.33110046 -30.96289825]
[-177.57121277 -45.04111862]
[-180.92884827 -59.68288422]
[-182.34657288 -74.63764954]
[-181.80012512 -89.64952850]
[-179.29884338 -104.46163940]
[-174.88552856 -118.82052612]
[-168.63571167 -132.48049927]
[-160.65632629 -145.20780945]
[-151.08392334 -156.78468323]
[-140.08227539 -167.01301575]
[-127.83965302 -175.71780396]
[-114.56553650 -182.75007629]
[-100.48706818 -187.98950195]
[-85.84514618 -191.34645081]
[-70.89031219 -192.76345825]
[-55.87845993 -192.21629333]
[-41.06646729 -189.71430969]
[-26.70778847 -185.30032349]
[-13.04811478 -179.04985046]
[-0.32118228 -171.06985474]
[11.25523376 -161.49690247]
[21.48304558 -150.49476624]
[30.18724251 -138.25172424]
[37.21888351 -124.97727966]
[42.45764923 -110.89855957]
[45.81389618 -96.25647736]
[47.23019791 -81.30157471]
[46.68231201 -66.28974915]
[44.17962265 -51.47787857]
[39.76494980 -37.11940765]
[33.51383209 -23.46003342]
[25.53323746 -10.73348045]
[15.95972347 0.84247935]
[26.17320442 11.82814407]
[36.38668442 22.81380844]
[51.23440933 23.09765625]
[61.74882889 34.09318924]
[61.35042953 49.66492462]
[71.56391144 60.65058899]
[78.46636963 63.42578888]
[81.87265778 71.97265625]
[91.85538483 83.16842651]
[86.85936737 69.02488708]
[91.56639099 54.78255463]
[104.00664520 46.40162277]
[118.97409058 47.38936996]
[130.20509338 57.33244324]
[132.99964905 72.06982422]
[126.18829346 85.43415833]
[112.62021637 91.83283234]
[127.59992981 91.05298615]
[142.57963562 90.27314758]
[157.55935669 89.49330139]
[172.53015137 88.55767059]
[187.49040222 87.46636200]
[202.45063782 86.37504578]
[217.41088867 85.28373718]
[222.96733093 71.06794739]
[234.14735413 60.67708969]
[248.73115540 56.17428589]
[263.82312012 58.45356750]
[276.42672729 67.06238556]
[284.03955078 80.29145050]
[285.14999390 95.51411438]
[279.53762817 109.70791626]
[268.31677246 120.05466461]
[253.71533203 124.50000763]
[238.63246155 122.16130829]
[226.06285095 113.50292969]
[218.50219727 100.24398804]
[203.54196167 101.33529663]
[188.58171082 102.42660522]
[173.62145996 103.51792145]
[167.13723755 107.16491699]
[158.33920288 104.47301483]
[143.35948181 105.25286102]
[128.37977600 106.03269958]
[113.40005493 106.81254578]
[102.96024323 117.58335876]
[102.64819336 132.58010864]
[102.33613586 147.57685852]
[102.02407837 162.57362366]
[101.71202087 177.57037354]
[101.39996338 192.56712341]
[101.08790588 207.56387329]
[100.77585602 222.56063843]
[100.46379852 237.55738831]
[100.15174103 252.55413818]
[99.83968353 267.55090332]
[99.52762604 282.54763794]
[99.21556854 297.54440308]
[98.90351868 312.54116821]
[113.39645386 316.73843384]
[126.30871582 324.54458618]
[136.75991821 335.42736816]
[144.03749084 348.64474487]
[147.64523315 363.29556274]
[147.33715820 378.38092041]
[143.13427734 392.87222290]
[135.32315063 405.78146362]
[124.43634796 416.22848511]
[111.21614838 423.50094604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[25 127]
[26 90]
[27 89]
[28 87]
[29 86]
[32 83]
[33 82]
[34 81]
[98 126]
[99 125]
[100 124]
[101 123]
[102 121]
[103 120]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
