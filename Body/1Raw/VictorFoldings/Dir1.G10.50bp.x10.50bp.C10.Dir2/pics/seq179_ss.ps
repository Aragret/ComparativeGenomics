%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUAAUAAGGGGGGGGGGCAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAxxxxxxxxxxCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCCCCCCCCCCCAUAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[84.06246948 455.44049072]
[71.14331055 447.68212891]
[60.36201477 437.15310669]
[52.29999924 424.42123413]
[47.39204025 410.17312622]
[45.90281296 395.17715454]
[47.91263962 380.24206543]
[53.31312180 366.17324829]
[61.81302643 353.72943115]
[72.95396423 343.58172607]
[86.13510895 336.27734375]
[100.64562988 332.21020508]
[100.02980042 317.22283936]
[99.41397858 302.23550415]
[98.79814911 287.24813843]
[98.18232727 272.26077271]
[97.56649780 257.27343750]
[96.95067596 242.28608704]
[96.33484650 227.29872131]
[95.71902466 212.31137085]
[95.10319519 197.32402039]
[94.48737335 182.33666992]
[85.78514099 173.87892151]
[85.18433380 161.35653687]
[93.55585480 151.49137878]
[93.24787903 136.49453735]
[92.93989563 121.49769592]
[82.37149048 114.18560791]
[77.48962402 102.29757690]
[62.90587234 98.78841400]
[48.32212448 95.27924347]
[33.73837280 91.77008057]
[19.15462494 88.26091003]
[4.57087564 84.75173950]
[-10.01287365 81.24257660]
[-18.12556839 94.02783966]
[-29.95162010 103.48422241]
[-44.20822906 108.58597565]
[-59.34894180 108.77968597]
[-73.73140717 104.04435730]
[-85.79552460 94.89363861]
[-94.23267365 82.32012177]
[-98.12764740 67.68769073]
[-97.05795288 52.58357239]
[-91.13961792 38.64613724]
[-81.01462555 27.38722038]
[-67.78125000 20.02810287]
[-52.87496185 17.36704636]
[-37.91267395 19.69270134]
[-24.51738739 26.75279999]
[-14.14212036 37.78151703]
[-7.91230536 51.58253479]
[-6.50370646 66.65882874]
[8.08004284 70.16799164]
[22.66379166 73.67716217]
[37.24754333 77.18632507]
[51.83129120 80.69549561]
[66.41503906 84.20466614]
[80.99878693 87.71382904]
[88.01639557 80.80653381]
[97.30335236 77.53393555]
[107.10098267 78.51576996]
[96.20209503 68.19078827]
[86.40370178 56.81614685]
[77.80635834 44.50856018]
[70.49827576 31.39433289]
[64.55445099 17.60803604]
[60.03588486 3.29113913]
[56.98893356 -11.40944290]
[55.44487381 -26.34285736]
[55.41954422 -41.35586548]
[56.91320801 -56.29440689]
[59.91053391 -71.00518799]
[64.38076782 -85.33724976]
[70.27803802 -99.14352417]
[77.54182434 -112.28233337]
[86.09759521 -124.61885834]
[95.85755157 -136.02650452]
[106.72153473 -146.38819885]
[118.57807159 -155.59762573]
[131.30548096 -163.56028748]
[144.77317810 -170.19445801]
[158.84295654 -175.43206787]
[173.37042236 -179.21936035]
[188.20651245 -181.51748657]
[203.19898987 -182.30287170]
[218.19398499 -181.56742859]
[233.03765869 -179.31872559]
[247.57765198 -175.57981873]
[261.66479492 -170.38909912]
[275.15451050 -163.79981995]
[287.90835571 -155.87959290]
[299.79550171 -146.70970154]
[310.69393921 -136.38423157]
[320.49182129 -125.00915527]
[329.08862305 -112.70119476]
[336.39614868 -99.58664703]
[342.33935547 -85.80008698]
[346.85729980 -71.48299408]
[349.90359497 -56.78227615]
[351.44699097 -41.84879303]
[351.47167969 -26.83578491]
[349.97735596 -11.89730930]
[346.97937012 2.81333804]
[342.50851440 17.14520454]
[336.61062622 30.95121956]
[329.34625244 44.08971024]
[320.78994751 56.42585754]
[311.02951050 67.83306885]
[300.16503906 78.19429779]
[288.30810547 87.40319824]
[275.58035278 95.36529541]
[262.11236572 101.99887085]
[248.04235840 107.23586273]
[233.51472473 111.02252197]
[218.67852783 113.31999969]
[203.68601990 114.10471344]
[188.69105530 113.36861420]
[173.84748840 111.11925507]
[159.30764771 107.37971497]
[145.22074890 102.18836975]
[131.73132324 95.59849548]
[118.97780609 87.67771149]
[121.49097443 107.08054352]
[107.93673706 121.18972015]
[108.24471283 136.18655396]
[108.55268860 151.18339539]
[118.45520020 166.67439270]
[109.47472382 181.72084045]
[110.09055328 196.70819092]
[110.70637512 211.69554138]
[111.32220459 226.68290710]
[111.93802643 241.67025757]
[112.55385590 256.65759277]
[113.16967773 271.64495850]
[113.78550720 286.63232422]
[114.40132904 301.61965942]
[115.01715088 316.60702515]
[115.63298035 331.59436035]
[130.42825317 334.45733643]
[144.16423035 340.65570068]
[156.10012817 349.85522461]
[165.59228516 361.55972290]
[172.12878418 375.13806152]
[175.35711670 389.85794067]
[175.10319519 404.92553711]
[171.38070679 419.52825928]
[164.39039612 432.87863159]
[154.50926208 444.25665283]
[142.27015686 453.04876709]
[128.33312988 458.78079224]
[113.44978333 461.14358521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 127]
[26 126]
[27 125]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[62 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
