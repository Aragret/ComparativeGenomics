%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACUCUGGGGGGGGGGGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGxxxxxxxxxxGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCCCCCCCCCCCACCACUCUG\
) } def
/len { sequence length } bind def

/coor [
[94.38938904 395.47613525]
[81.51612091 387.57324219]
[71.39182281 376.36276245]
[64.83724213 362.75341797]
[62.38372040 347.84848022]
[64.23015594 332.85623169]
[70.22686768 318.99203491]
[79.88773346 307.37979126]
[92.42958069 298.96081543]
[106.83570099 294.41766357]
[106.52364349 279.42089844]
[106.21158600 264.42416382]
[105.89952850 249.42739868]
[105.58747864 234.43064880]
[105.27542114 219.43389893]
[104.96336365 204.43714905]
[104.65130615 189.44038391]
[104.33924866 174.44363403]
[104.02719116 159.44688416]
[103.24734497 144.46716309]
[102.00047302 129.51908875]
[96.10215759 124.88661194]
[90.93600464 138.96890259]
[75.94652557 138.40724182]
[71.84870911 123.97782898]
[84.30551147 115.62165833]
[78.40719604 110.98918152]
[63.58943558 113.32028961]
[48.77167892 115.65139008]
[33.95391846 117.98249817]
[26.04156113 131.47058105]
[11.29310131 136.66836548]
[-3.32768798 131.12161255]
[-10.91731644 117.44931793]
[-7.89219475 102.10713196]
[4.31930828 92.33916473]
[19.95129395 92.75754547]
[31.62281609 103.16474152]
[46.44057465 100.83363342]
[61.25833130 98.50253296]
[76.07608795 96.17142487]
[77.39552307 88.78839874]
[65.92715454 79.12007141]
[80.03438568 74.02234650]
[81.35382080 66.63931274]
[68.26066589 59.32020950]
[55.16751099 52.00110245]
[39.40094376 54.96672821]
[27.34662628 44.38027573]
[28.25159836 28.36276627]
[41.42164230 19.20146370]
[56.75382996 23.92413521]
[62.48661423 38.90795135]
[75.57977295 46.22705460]
[88.67292786 53.54616165]
[103.24562836 49.99139786]
[111.49791718 37.46543503]
[119.75020599 24.93947411]
[128.00250244 12.41351318]
[136.25479126 -0.11244909]
[144.50708008 -12.63841152]
[132.93478394 -22.20551300]
[122.46474457 -32.96773529]
[113.21970367 -44.79890060]
[105.30805206 -57.56028748]
[98.82254791 -71.10227966]
[93.83924103 -85.26609802]
[90.41654968 -99.88568878]
[88.59461212 -114.78964233]
[88.39477539 -129.80320740]
[89.81939697 -144.75038147]
[92.85176086 -159.45588684]
[97.45632172 -173.74732971]
[103.57909393 -187.45713806]
[111.14829254 -200.42457581]
[120.07516479 -212.49760437]
[130.25505066 -223.53468323]
[141.56860352 -233.40640259]
[153.88317871 -241.99702454]
[167.05436707 -249.20581055]
[180.92778015 -254.94827271]
[195.34074402 -259.15704346]
[210.12426758 -261.78283691]
[225.10502625 -262.79479980]
[240.10737610 -262.18109131]
[254.95542908 -259.94894409]
[269.47509766 -256.12448120]
[283.49615479 -250.75254822]
[296.85418701 -243.89614868]
[309.39257812 -235.63566589]
[320.96435547 -226.06793213]
[331.43380737 -215.30514526]
[340.67822266 -203.47349548]
[348.58917236 -190.71168518]
[355.07394409 -177.16934204]
[360.05648804 -163.00524902]
[363.47839355 -148.38546753]
[365.29953003 -133.48143005]
[365.49856567 -118.46784210]
[364.07315063 -103.52075195]
[361.03997803 -88.81540680]
[356.43466187 -74.52421570]
[350.31115723 -60.81473541]
[342.74124146 -47.84770203]
[333.81372070 -35.77515030]
[323.63323975 -24.73861885]
[312.31915283 -14.86750984]
[300.00415039 -6.27755594]
[286.83255005 0.93052983]
[272.95883179 6.67223644]
[258.54565430 10.88024521]
[243.76197815 13.50522041]
[228.78117371 14.51638412]
[213.77885437 13.90188122]
[198.93090820 11.66891766]
[184.41145325 7.84367275]
[170.39070129 2.47099543]
[157.03303528 -4.38612175]
[148.78074646 8.13984013]
[140.52845764 20.66580200]
[132.27616882 33.19176483]
[124.02388000 45.71772766]
[115.77159119 58.24368668]
[136.45774841 81.80744934]
[135.37814331 110.32481384]
[116.94856262 128.27220154]
[118.19543457 143.22029114]
[121.25330353 147.60993958]
[122.18283844 152.26702881]
[121.24755859 156.32003784]
[119.02394867 159.13482666]
[119.33600616 174.13157654]
[119.64806366 189.12834167]
[119.96011353 204.12509155]
[120.27217102 219.12184143]
[120.58422852 234.11859131]
[120.89628601 249.11535645]
[121.20834351 264.11209106]
[121.52040100 279.10885620]
[121.83245087 294.10562134]
[136.41510010 298.04556274]
[149.29629517 305.93551636]
[159.43185425 317.13583374]
[166.00010681 330.73858643]
[168.46859741 345.64105225]
[166.63722229 360.63513184]
[160.65443420 374.50534058]
[151.00524902 386.12728882]
[138.47186279 394.55883789]
[124.07032013 399.11648560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 127]
[21 126]
[27 41]
[28 40]
[29 39]
[30 38]
[45 55]
[46 54]
[47 53]
[56 123]
[57 122]
[58 121]
[59 120]
[60 119]
[61 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
