%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUAAUAAAGGGGGGGGGGCACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCxxxxxxxxxxAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUCCCCCCCCCCUUAUAGUAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 388.78125000]
[71.19830322 382.76522827]
[59.48964310 373.23580933]
[50.78712082 360.90011597]
[45.73651886 346.67361450]
[44.71262741 331.61193848]
[47.79142761 316.83276367]
[54.74444962 303.43283081]
[65.05573273 292.40649414]
[77.96011353 284.57199097]
[92.50000000 280.51068115]
[92.50000000 265.51068115]
[92.50000000 250.51068115]
[92.50000000 235.51068115]
[92.50000000 220.51068115]
[92.50000000 205.51068115]
[92.50000000 190.51068115]
[92.50000000 175.51068115]
[92.50000000 160.51068115]
[92.50000000 145.51068115]
[79.89766693 141.51347351]
[68.94696808 134.10545349]
[60.54764175 123.89526367]
[55.38978195 111.72180939]
[40.45547485 113.12410736]
[25.52116585 114.52641296]
[22.22969627 129.29196167]
[14.53477192 142.31668091]
[3.19026256 152.32453918]
[-10.69241142 158.33508301]
[-25.75316811 159.75942993]
[-40.51650620 156.45806885]
[-53.53606796 148.75442505]
[-63.53632736 137.40321350]
[-69.53755951 123.51651001]
[-70.95182800 108.45480347]
[-67.64057159 93.69367981]
[-59.92819595 80.67928314]
[-48.57028580 70.68663788]
[-34.67956924 64.69470978]
[-19.61691666 63.29053879]
[-4.85801506 66.61167908]
[8.15120983 74.33277130]
[18.13624573 85.69738007]
[24.11886215 99.59210968]
[39.05316925 98.18980408]
[53.98747635 96.78749847]
[56.42854691 84.86722565]
[61.90177536 74.00004578]
[70.02627563 64.94221497]
[80.23665619 58.32407379]
[91.82238770 54.60617828]
[103.97719574 54.04726028]
[107.68335724 39.51232529]
[111.38951874 24.97738838]
[115.09568024 10.44245243]
[118.80184174 -4.09248400]
[104.82688141 -9.59736824]
[91.65208435 -16.81041718]
[79.48524475 -25.61786842]
[68.51824188 -35.88081741]
[58.92404556 -47.43740082]
[50.85396957 -60.10535812]
[44.43529129 -73.68489075]
[39.76924133 -87.96183777]
[36.92940903 -102.71102905]
[35.96058273 -117.69984436]
[36.87804413 -132.69189453]
[39.66732025 -147.45072937]
[44.28442383 -161.74357605]
[50.65653610 -175.34503174]
[58.68315887 -188.04055786]
[68.23770142 -199.62994385]
[79.16947174 -209.93041992]
[91.30606842 -218.77951050]
[104.45606232 -226.03765869]
[118.41207886 -231.59039307]
[132.95401001 -235.35014343]
[147.85249329 -237.25761414]
[162.87255859 -237.28271484]
[177.77732849 -235.42504883]
[192.33174133 -231.71392822]
[206.30624390 -226.20785522]
[219.48042297 -218.99369812]
[231.64653015 -210.18522644]
[242.61265564 -199.92135620]
[252.20588684 -188.36396790]
[260.27490234 -175.69532776]
[266.69244385 -162.11524963]
[271.35726929 -147.83792114]
[274.19586182 -133.08848572]
[275.16342163 -118.09958649]
[274.24472046 -103.10762024]
[271.45419312 -88.34902191]
[266.83587646 -74.05655670]
[260.46261597 -60.45564651]
[252.43493652 -47.76078796]
[242.87942505 -36.17220306]
[231.94677734 -25.87265587]
[219.80944824 -17.02458763]
[206.65882874 -9.76754570]
[192.70234680 -4.21598339]
[178.16011047 -0.45745689]
[163.26147461 1.44875658]
[148.24139404 1.47259319]
[133.33677673 -0.38632298]
[129.63061523 14.14861298]
[125.92445374 28.68354988]
[122.21829224 43.21848679]
[118.51213074 57.75342178]
[131.35350037 66.17057037]
[140.72053528 78.33643341]
[145.57524109 92.90287018]
[145.37966919 108.25575256]
[159.50447083 113.30451202]
[173.62928772 118.35327148]
[187.75408936 123.40202332]
[200.49153137 114.53990936]
[216.00463867 114.89085388]
[228.32829285 124.31990051]
[232.72381592 139.20140076]
[227.50102234 153.81311035]
[214.66818237 162.53652954]
[199.15979004 162.01731873]
[186.93914795 152.45513916]
[182.70532227 137.52682495]
[168.58052063 132.47807312]
[154.45571899 127.42931366]
[140.33091736 122.38056183]
[126.56501007 137.70640564]
[107.50000000 145.51068115]
[107.50000000 160.51068115]
[107.50000000 175.51068115]
[107.50000000 190.51068115]
[107.50000000 205.51068115]
[107.50000000 220.51068115]
[107.50000000 235.51068115]
[107.50000000 250.51068115]
[107.50000000 265.51068115]
[107.50000000 280.51068115]
[122.03988647 284.57199097]
[134.94427490 292.40649414]
[145.25555420 303.43283081]
[152.20857239 316.83276367]
[155.28736877 331.61193848]
[154.26348877 346.67361450]
[149.21287537 360.90011597]
[140.51036072 373.23580933]
[128.80169678 382.76522827]
[114.95575714 388.78125000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 47]
[25 46]
[26 45]
[53 110]
[54 109]
[55 108]
[56 107]
[57 106]
[114 129]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
