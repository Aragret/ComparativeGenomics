%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUCAAAGGGGGGGGGGGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAxxxxxxxxxxUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACAACCCCCCCCCCAAUACUCAAA\
) } def
/len { sequence length } bind def

/coor [
[91.26920319 365.93997192]
[77.42326355 359.92395020]
[65.71460724 350.39453125]
[57.01208115 338.05886841]
[51.96147919 323.83233643]
[50.93758774 308.77066040]
[54.01638794 293.99151611]
[60.96940613 280.59158325]
[71.28069305 269.56524658]
[84.18507385 261.73074341]
[98.72496033 257.66943359]
[98.72496033 242.66941833]
[98.72496033 227.66941833]
[98.72496033 212.66941833]
[98.72496033 197.66941833]
[98.72496033 182.66941833]
[98.72496033 167.66941833]
[98.72496033 152.66941833]
[98.72496033 137.66941833]
[98.72496033 122.66941833]
[86.11383057 114.54787445]
[76.75080872 127.30108643]
[61.96282196 125.52211761]
[48.30657959 131.72752380]
[34.65033722 137.93293762]
[25.55800438 151.58070374]
[9.21208286 150.26051331]
[2.42785692 135.33045959]
[12.18435669 122.14930725]
[28.44493103 124.27668762]
[42.10117340 118.07128143]
[55.75741196 111.86587524]
[64.14365387 99.55651855]
[79.90842438 100.89163971]
[89.17337036 89.09499359]
[91.96569824 74.35719299]
[94.75802612 59.61938477]
[97.55034637 44.88158035]
[96.06919861 35.80093765]
[100.55711365 29.86762047]
[103.65543365 15.19109440]
[89.71201324 20.72111320]
[76.59025574 13.45341110]
[73.88110352 -1.29991007]
[83.56472778 -12.75536633]
[98.56317902 -12.53994560]
[107.91365814 -0.81174499]
[112.51921844 -15.08720589]
[117.12478638 -29.36266708]
[116.78576660 -38.55706406]
[121.97750092 -43.88543320]
[126.87905121 -58.06198883]
[131.78060913 -72.23854828]
[136.68215942 -86.41510773]
[127.97051239 -99.11996460]
[128.40524292 -114.34049225]
[137.61012268 -126.24569702]
[151.88931274 -130.39814758]
[156.79086304 -144.57470703]
[161.69241333 -158.75126648]
[156.75712585 -170.71357727]
[161.17913818 -182.44662476]
[172.06222534 -187.81930542]
[177.25764465 -201.89082336]
[182.45306396 -215.96234131]
[169.36705017 -223.36183167]
[157.63754272 -232.76473999]
[147.56835938 -243.92753601]
[139.42033386 -256.56106567]
[133.40449524 -270.33807373]
[129.67669678 -284.90170288]
[128.33346558 -299.87472534]
[129.40962219 -314.86935425]
[132.87727356 -329.49710083]
[138.64660645 -343.37915039]
[146.56817627 -356.15588379]
[156.43679810 -367.49633789]
[167.99685669 -377.10681152]
[180.94891357 -384.73837280]
[194.95748901 -390.19329834]
[209.65969849 -393.33032227]
[224.67475891 -394.06817627]
[239.61370850 -392.38775635]
[254.08961487 -388.33261108]
[267.72750854 -382.00772095]
[280.17413330 -373.57696533]
[291.10708618 -363.25872803]
[300.24322510 -351.32022095]
[307.34582520 -338.07073975]
[312.23095703 -323.85342407]
[314.77209473 -309.03659058]
[314.90338135 -294.00399780]
[312.62145996 -279.14501953]
[307.98538208 -264.84457397]
[301.11526489 -251.47303772]
[292.18908691 -239.37680054]
[281.43798828 -228.86915588]
[269.14053345 -220.22229004]
[255.61518860 -213.66017151]
[241.21232605 -209.35278320]
[226.30499268 -207.41169739]
[211.27934265 -207.88717651]
[196.52458191 -210.76692200]
[191.32916260 -196.69540405]
[186.13374329 -182.62388611]
[190.05239868 -165.54629517]
[175.86897278 -153.84971619]
[170.96742249 -139.67315674]
[166.06587219 -125.49659729]
[174.73081970 -113.41120911]
[174.61651611 -98.36292267]
[165.55725098 -86.12433624]
[150.85871887 -81.51355743]
[145.95716858 -67.33699799]
[141.05561829 -53.16043854]
[136.15406799 -38.98387909]
[131.40025330 -24.75710106]
[126.79468536 -10.48164082]
[122.18911743 3.79381943]
[118.33195496 18.28941536]
[115.23363495 32.96594238]
[112.28815460 47.67390442]
[109.49582672 62.41170883]
[106.70350647 77.14951324]
[103.91117859 91.88732147]
[108.61207581 91.75586700]
[113.63394928 94.14575195]
[117.73329163 99.15544891]
[119.68133545 106.31321716]
[118.50976562 114.61614227]
[113.72496033 122.66941833]
[113.72496033 137.66941833]
[113.72496033 152.66941833]
[113.72496033 167.66941833]
[113.72496033 182.66941833]
[113.72496033 197.66941833]
[113.72496033 212.66941833]
[113.72496033 227.66941833]
[113.72496033 242.66941833]
[113.72496033 257.66943359]
[128.26484680 261.73074341]
[141.16923523 269.56524658]
[151.48051453 280.59158325]
[158.43353271 293.99151611]
[161.51232910 308.77066040]
[160.48844910 323.83233643]
[155.43783569 338.05886841]
[146.73532104 350.39453125]
[135.02665710 359.92395020]
[121.18071747 365.93997192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 34]
[23 32]
[24 31]
[25 30]
[35 125]
[36 124]
[37 123]
[38 122]
[40 121]
[41 120]
[47 119]
[48 118]
[49 117]
[51 116]
[52 115]
[53 114]
[54 113]
[58 109]
[59 108]
[60 107]
[63 105]
[64 104]
[65 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
