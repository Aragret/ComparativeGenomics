%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUCUCAGGCUUCAGGGGGGGGGGACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACxxxxxxxxxxCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCCCCCCCCCCCUAUUCUCAGGCUACA\
) } def
/len { sequence length } bind def

/coor [
[80.74774933 503.45803833]
[67.13366699 497.07788086]
[54.75549316 488.54379272]
[43.95091248 478.08859253]
[35.01467896 465.99755859]
[28.19058228 452.60046387]
[23.66478920 438.26284790]
[21.56076431 423.37585449]
[21.93591118 408.34558105]
[24.77999115 393.58206177]
[30.01541901 379.48809814]
[37.49936676 366.44815063]
[47.02766418 354.81796265]
[58.34037781 344.91479492]
[71.12888336 337.00885010]
[85.04431152 331.31579590]
[99.70702362 327.99093628]
[98.84019470 313.01602173]
[97.97336578 298.04107666]
[97.10653687 283.06616211]
[96.23970795 268.09121704]
[95.37288666 253.11628723]
[94.50605774 238.14135742]
[93.63922882 223.16641235]
[92.77239990 208.19148254]
[91.90557098 193.21655273]
[91.03874207 178.24162292]
[82.57888794 165.98274231]
[89.50576782 151.75851440]
[88.63893890 136.78356934]
[87.77210999 121.80863953]
[80.80181122 91.32081604]
[73.09414673 78.45256805]
[65.38647461 65.58431244]
[57.67881012 52.71606445]
[49.97114563 39.84781265]
[42.26348114 26.97956276]
[29.39522934 19.27189636]
[14.41263771 18.54941750]
[-0.56995291 17.82693672]
[-16.68192673 23.10336304]
[-26.21238518 9.08171177]
[-15.37699890 -3.95787191]
[0.15252647 2.84434676]
[15.13511753 3.56682611]
[30.11770821 4.28930569]
[34.80194855 -1.56798744]
[19.97256470 -3.82394767]
[14.51150513 -17.79451752]
[23.87977219 -29.50927734]
[38.70919800 -27.25358963]
[44.17043304 -13.28257370]
[48.85467529 -19.13986588]
[44.85615921 -33.59711075]
[40.71851349 -48.01514816]
[36.44211578 -62.39264679]
[32.16571808 -76.77014160]
[27.88932037 -91.14764404]
[23.61292267 -105.52513885]
[19.33652496 -119.90263367]
[4.31612062 -118.80648804]
[-10.58868885 -120.96536255]
[-24.68077660 -126.27828217]
[-37.30103302 -134.49674988]
[-47.85918427 -145.23637390]
[-55.86140823 -157.99484253]
[-60.93342209 -172.17541504]
[-62.83800507 -187.11485291]
[-61.48607254 -202.11439514]
[-56.94085312 -216.47250366]
[-49.41494370 -229.51759338]
[-39.26033401 -240.63955688]
[-26.95198441 -249.31819153]
[-13.06557274 -255.14756775]
[1.74940801 -257.85504150]
[16.80003357 -257.31399536]
[31.38235855 -253.54969788]
[44.81434250 -246.73823547]
[56.46774673 -237.19821167]
[65.79751587 -225.37579346]
[72.36728668 -211.82395935]
[75.86978149 -197.17654419]
[76.14116669 -182.11865234]
[73.16876984 -167.35453796]
[67.09159851 -153.57476807]
[58.19389725 -141.42384338]
[46.89183426 -131.47007751]
[33.71402359 -124.17903137]
[37.99041748 -109.80153656]
[42.26681519 -95.42404175]
[46.54321289 -81.04653931]
[50.81961060 -66.66904449]
[55.09600830 -52.29154587]
[60.04085922 -46.75025558]
[59.31340408 -37.59562302]
[63.31191635 -23.13838005]
[68.63908386 4.06015348]
[55.13172913 19.27189636]
[62.83939743 32.14014816]
[70.54706573 45.00839615]
[78.25473022 57.87664795]
[85.96239471 70.74490356]
[93.67005920 83.61315155]
[108.00568390 88.02790070]
[121.61721802 81.72503662]
[135.22875977 75.42218018]
[141.73942566 68.94548798]
[149.16389465 69.13183594]
[162.89437866 63.09247589]
[172.15153503 49.55596161]
[188.48023987 51.07425690]
[195.08293152 66.08547211]
[185.16732788 79.14735413]
[168.93374634 76.82295990]
[155.20326233 82.86231995]
[141.53161621 89.03371429]
[127.92008209 95.33657837]
[114.30854034 101.63943481]
[128.13258362 95.81742096]
[143.05276489 97.36283112]
[155.39006042 105.89459229]
[162.10235596 119.30895233]
[161.53454590 134.29820251]
[153.82661438 147.16629028]
[140.87919617 154.74021912]
[125.88486481 155.15242004]
[112.54090881 148.30122375]
[104.13767242 135.87602234]
[102.74703979 120.94181061]
[103.61386871 135.91674805]
[104.48069763 150.89167786]
[113.00255585 164.22166443]
[106.01367950 177.37478638]
[106.88050842 192.34973145]
[107.74733734 207.32466125]
[108.61415863 222.29959106]
[109.48098755 237.27452087]
[110.34781647 252.24945068]
[111.21464539 267.22439575]
[112.08147430 282.19931030]
[112.94830322 297.17425537]
[113.81512451 312.14920044]
[114.68195343 327.12411499]
[129.63037109 328.73492432]
[144.10974121 332.78433228]
[157.72505188 339.16189575]
[170.10487366 347.69360352]
[180.91146851 358.14669800]
[189.85002136 370.23602295]
[196.67671204 383.63180542]
[201.20526123 397.96853638]
[203.31214905 412.85513306]
[202.93989563 427.88546753]
[200.09866333 442.64953613]
[194.86595154 456.74450684]
[187.38452148 469.78591919]
[177.85845947 481.41793823]
[166.54765320 491.32327271]
[153.76066589 499.23165894]
[139.84634399 504.92739868]
[125.18427277 508.25509644]
[110.17444611 509.12393188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[29 131]
[30 130]
[31 129]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 46]
[39 45]
[40 44]
[53 96]
[54 95]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[104 118]
[105 117]
[106 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
