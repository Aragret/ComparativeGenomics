%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAGCCCAGGGGGGGGGGAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACxxxxxxxxxxGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACAACGUUAUCGCCCCCCCCCCUCACAGCCCA\
) } def
/len { sequence length } bind def

/coor [
[92.58611298 419.50906372]
[80.02788544 411.15789795]
[69.94166565 399.94546509]
[62.96147156 386.57653809]
[59.52608871 371.89157104]
[59.85146332 356.81359863]
[63.91714859 342.29046631]
[71.46756744 329.23513794]
[82.02809906 318.46823120]
[94.93489075 310.66659546]
[109.37661743 306.32064819]
[108.75264740 291.33364868]
[108.12866974 276.34661865]
[107.50469208 261.35961914]
[106.88071442 246.37258911]
[106.25673676 231.38557434]
[105.63275909 216.39855957]
[105.00878143 201.41154480]
[96.74874115 189.01715088]
[103.90528107 174.90705872]
[103.28130341 159.92004395]
[102.65732574 144.93302917]
[102.03334808 129.94601440]
[65.78608704 112.13735199]
[75.46147156 65.18828583]
[65.07779694 76.03385925]
[53.58235550 85.69316101]
[41.10993195 94.05294037]
[27.80675888 101.01518250]
[13.82880878 106.49826050]
[-0.66003489 110.43788147]
[-15.48989677 112.78787231]
[-30.48690605 113.52066040]
[-45.47522736 112.62767029]
[-60.27913284 110.11936188]
[-74.72505188 106.02514648]
[-88.64362335 100.39302063]
[-101.87164307 93.28903198]
[-114.25402832 84.79646301]
[-125.64559937 75.01488495]
[-135.91279602 64.05898285]
[-144.93525696 52.05720520]
[-152.60716248 39.15026855]
[-158.83860779 25.48950577]
[-163.55648804 11.23507500]
[-166.70552063 -3.44589376]
[-168.24876404 -18.38127518]
[-168.16815186 -33.39595795]
[-166.46459961 -48.31390762]
[-163.15809631 -62.96021271]
[-158.28739929 -77.16315460]
[-151.90962219 -90.75621033]
[-144.09954834 -103.58001709]
[-134.94873047 -115.48420715]
[-124.56446838 -126.32922363]
[-113.06850433 -135.98789978]
[-100.59563446 -144.34701538]
[-87.29208374 -151.30853271]
[-73.31384277 -156.79086304]
[-58.82478714 -160.72970581]
[-43.99479675 -163.07890320]
[-28.99774933 -163.81088257]
[-14.00947475 -162.91708374]
[0.79429555 -160.40797424]
[15.23999596 -156.31298828]
[29.15825844 -150.68011475]
[42.38589859 -143.57540894]
[54.76782608 -135.08218384]
[66.15887451 -125.29998779]
[76.42548370 -114.34352875]
[85.44728851 -102.34127045]
[93.11851501 -89.43392181]
[99.34921265 -75.77281952]
[104.06632996 -61.51813889]
[107.21456909 -46.83699799]
[108.75701904 -31.90153503]
[108.67559052 -16.88685608]
[106.97123718 -1.96899962]
[103.66394043 12.67712784]
[98.79248047 26.87980843]
[92.41397858 40.47252274]
[84.60321045 53.29590607]
[99.31117249 50.35042191]
[106.76608276 37.33411407]
[114.22099304 24.31780434]
[111.41954041 8.52124119]
[122.13081360 -3.42229986]
[138.13804626 -2.35075521]
[147.16184998 10.91387749]
[142.27993774 26.19610596]
[127.23729706 31.77271461]
[119.78238678 44.78902435]
[112.32747650 57.80533218]
[123.09877014 68.24560547]
[133.86909485 78.68495941]
[146.64645386 70.82752991]
[159.42381287 62.97010803]
[172.20117188 55.11268234]
[182.52607727 41.66527939]
[198.30616760 47.86407089]
[196.71798706 64.74346924]
[180.05859375 67.89003754]
[167.28123474 75.74746704]
[154.50387573 83.60488892]
[141.72651672 91.46231842]
[136.28599548 98.88912201]
[129.71871948 104.20664978]
[144.62062073 105.91934204]
[159.52252197 107.63202667]
[167.22830200 94.49655151]
[179.61433411 85.63619232]
[194.53468323 82.58606720]
[209.40428162 85.87463379]
[221.64691162 94.93211365]
[229.14144897 108.18926239]
[230.58940125 123.34918213]
[225.73994446 137.78533936]
[215.43322754 148.99656677]
[201.45498657 155.04046631]
[186.22703552 154.86988831]
[172.38768005 148.51438904]
[162.33470154 137.07508850]
[157.80982971 122.53393555]
[142.90792847 120.82124329]
[128.00602722 119.10855103]
[117.02036285 129.32203674]
[117.64434052 144.30905151]
[118.26831818 159.29606628]
[118.89229584 174.28308105]
[127.19696045 187.74945068]
[119.99579620 200.78756714]
[120.61977386 215.77458191]
[121.24375153 230.76159668]
[121.86772919 245.74861145]
[122.49170685 260.73562622]
[123.11568451 275.72265625]
[123.73966217 290.70965576]
[124.36363983 305.69668579]
[139.11663818 308.82711792]
[152.62727356 315.52886963]
[164.04624939 325.38067627]
[172.65577698 337.76318359]
[177.91461182 351.89810181]
[179.49221802 366.89682007]
[177.28941345 381.81655884]
[171.44467163 395.71942139]
[162.32539368 407.73147583]
[150.50482178 417.09765625]
[136.72601318 423.22912598]
[121.85511017 425.74053955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[20 129]
[21 128]
[22 127]
[23 126]
[25 82]
[83 93]
[84 92]
[85 91]
[95 105]
[96 104]
[97 103]
[98 102]
[107 125]
[108 124]
[109 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
