%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCUACUGGGGGGGGGGGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUxxxxxxxxxxAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACCCCCCCCCCCAAUUUUACUG\
) } def
/len { sequence length } bind def

/coor [
[44.41804123 543.67114258]
[31.54476738 535.76831055]
[21.42047310 524.55780029]
[14.86589146 510.94845581]
[12.41236973 496.04351807]
[14.25880718 481.05126953]
[20.25551987 467.18707275]
[29.91637993 455.57482910]
[42.45822906 447.15588379]
[56.86434937 442.61270142]
[56.55229187 427.61596680]
[56.24023819 412.61920166]
[55.92818069 397.62243652]
[55.61612320 382.62570190]
[55.30406952 367.62893677]
[54.99201202 352.63217163]
[54.67995453 337.63543701]
[54.36790085 322.63867188]
[54.05584335 307.64193726]
[53.74378586 292.64517212]
[51.25780487 291.42092896]
[48.97617340 289.84832764]
[35.73358917 296.89346313]
[22.49100304 303.93859863]
[11.34741688 316.71578979]
[-4.01529646 309.54479980]
[-1.37735534 292.79733276]
[15.44586754 290.69601440]
[28.68845367 283.65087891]
[41.93103790 276.60574341]
[45.16788483 263.09130859]
[57.04929352 254.94317627]
[59.84161758 240.20536804]
[62.63394165 225.46757507]
[55.94011688 209.27520752]
[67.98971558 195.39042664]
[70.47483063 180.59771729]
[64.95304871 166.76446533]
[74.86975861 154.43687439]
[77.35487366 139.64416504]
[75.34842682 132.48037720]
[80.04863739 124.57089996]
[82.84096527 109.83309937]
[76.21246338 96.37712860]
[62.82618332 89.60901642]
[49.43989563 82.84090424]
[33.81034470 86.45982361]
[21.32607841 76.38397980]
[21.56396484 60.34268570]
[34.34151459 50.64146042]
[49.85688400 54.72224808]
[56.20801163 69.45462036]
[69.59429932 76.22273254]
[82.98058319 82.99084473]
[89.52716064 79.33129120]
[78.52028656 69.14067078]
[84.81085205 55.52344894]
[99.70549011 57.29820633]
[102.62031555 72.01219177]
[109.16689301 68.35263824]
[110.41376495 53.40454865]
[111.66063690 38.45646286]
[112.90751648 23.50837517]
[114.15438843 8.56028748]
[115.40126038 -6.38779974]
[101.11192322 -11.19178009]
[88.38785553 -19.27642250]
[77.96881104 -30.17169380]
[70.46054077 -43.24415970]
[66.29957581 -57.73380280]
[65.72781372 -72.79821777]
[68.77851105 -87.56157684]
[75.27429962 -101.16555023]
[84.83751678 -112.81922913]
[96.91217041 -121.84509277]
[110.79626465 -127.71836853]
[125.68258667 -130.09761047]
[140.70567322 -128.84448242]
[154.99209595 -124.03182983]
[167.71127319 -115.93947601]
[178.12370300 -105.03788757]
[185.62403870 -91.96087646]
[189.77622986 -77.46871185]
[190.33885193 -62.40395355]
[187.27920532 -47.64245224]
[180.77517700 -34.04241180]
[171.20489502 -22.39453125]
[159.12477112 -13.37599754]
[145.23712158 -7.51113701]
[130.34934998 -5.14092493]
[129.10247803 9.80716228]
[127.85559845 24.75524902]
[126.60872650 39.70333481]
[125.36185455 54.65142441]
[124.11497498 69.59951019]
[129.86587524 74.41377258]
[139.49459839 62.91212845]
[150.99607849 72.54103851]
[141.36767578 84.04229736]
[147.11859131 88.85655975]
[161.61418152 84.99940491]
[176.10977173 81.14224243]
[180.73468018 66.42443848]
[192.59706116 56.56099701]
[207.91168213 54.69931412]
[221.79170227 61.43344116]
[229.80805969 74.61454773]
[229.40277100 90.03658295]
[220.70513916 102.77844238]
[206.49057007 108.77423096]
[191.29487610 106.11072540]
[179.96693420 95.63784027]
[165.47134399 99.49500275]
[150.97573853 103.35215759]
[130.96965027 122.60574341]
[109.38558960 123.81630707]
[97.57877350 112.62541962]
[94.78644562 127.36322784]
[92.14758301 142.12928772]
[89.66246796 156.92199707]
[95.00650024 171.81332397]
[85.26753998 183.08283997]
[82.78242493 197.87554932]
[89.63136292 208.85488892]
[87.21432495 221.15841675]
[77.37174988 228.25988770]
[74.57942200 242.99769592]
[71.78709412 257.73550415]
[80.55931091 276.36791992]
[68.74053955 292.33312988]
[69.05259705 307.32986450]
[69.36465454 322.32662964]
[69.67671204 337.32336426]
[69.98876953 352.32012939]
[70.30081940 367.31689453]
[70.61287689 382.31362915]
[70.92493439 397.31039429]
[71.23699188 412.30712891]
[71.54904938 427.30389404]
[71.86110687 442.30065918]
[86.44374847 446.24060059]
[99.32495117 454.13055420]
[109.46050262 465.33087158]
[116.02875519 478.93362427]
[118.49724579 493.83609009]
[116.66587067 508.83016968]
[110.68309021 522.70037842]
[101.03389740 534.32232666]
[88.50051880 542.75390625]
[74.09896851 547.31152344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 30]
[23 29]
[24 28]
[32 128]
[33 127]
[34 126]
[36 123]
[37 122]
[39 120]
[40 119]
[42 118]
[43 117]
[44 54]
[45 53]
[46 52]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
