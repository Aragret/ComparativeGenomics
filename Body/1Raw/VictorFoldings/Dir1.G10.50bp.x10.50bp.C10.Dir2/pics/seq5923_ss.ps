%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUAUACUAAUAGGGGGGGGGGAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCxxxxxxxxxxAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCCCCCCCCCCCUCUUAUACUAGUA\
) } def
/len { sequence length } bind def

/coor [
[84.83116913 436.11654663]
[70.46891785 431.60983276]
[57.30803299 424.30392456]
[45.88743210 414.49807739]
[36.67479324 402.59378052]
[30.04736710 389.07852173]
[26.27653694 374.50576782]
[25.51671982 359.47222900]
[27.79903030 344.59350586]
[33.03000641 330.47891235]
[40.99544525 317.70642090]
[51.36916733 306.79904175]
[63.72637558 298.20343018]
[77.56104279 292.27160645]
[92.30666351 289.24642944]
[92.30666351 274.24642944]
[92.30666351 259.24642944]
[92.30666351 244.24641418]
[92.30666351 229.24641418]
[92.30666351 214.24641418]
[92.30666351 199.24641418]
[92.30666351 184.24641418]
[92.30666351 169.24641418]
[92.30666351 154.24641418]
[92.30666351 139.24641418]
[92.30666351 124.24642181]
[92.30666351 109.24642181]
[83.67552185 121.51440430]
[70.63240814 128.92231750]
[55.67498016 130.05160522]
[41.66746902 124.68600464]
[31.29220963 113.85299683]
[26.53598976 99.62702179]
[28.30958939 84.73224640]
[36.27337265 72.02090454]
[48.90233994 63.92713547]
[63.77813721 62.00082016]
[78.05216217 66.61083984]
[88.99103546 76.87442017]
[94.50041199 90.82841492]
[98.02370453 76.24806976]
[101.54699707 61.66772842]
[105.07028961 47.08738327]
[108.59357452 32.50703812]
[94.31048584 27.90208626]
[80.41146851 22.24262619]
[66.97425079 15.56031132]
[54.07397842 7.89251089]
[41.78279495 -0.71789235]
[30.16944122 -10.22274494]
[19.29886436 -20.56889153]
[9.23185539 -31.69847298]
[0.02471694 -43.54924393]
[-8.27106190 -56.05493546]
[-15.60908794 -69.14559937]
[-21.94832230 -82.74803925]
[-27.25331497 -96.78617859]
[-31.49439430 -111.18150330]
[-34.64784622 -125.85351562]
[-36.69603348 -140.72016907]
[-37.62749863 -155.69830322]
[-37.43703842 -170.70416260]
[-36.12571335 -185.65383911]
[-33.70085907 -200.46369934]
[-30.17603493 -215.05094910]
[-25.57095528 -229.33399963]
[-19.91137314 -243.23297119]
[-13.22894001 -256.67013550]
[-5.56102610 -269.57034302]
[3.04948568 -281.86145020]
[12.55444145 -293.47470093]
[22.90068436 -304.34521484]
[34.03035355 -314.41210938]
[45.88120651 -323.61914062]
[58.38697052 -331.91482544]
[71.47769928 -339.25271606]
[85.08019257 -345.59182739]
[99.11837769 -350.89669800]
[113.51374054 -355.13766479]
[128.18579102 -358.29098511]
[143.05244446 -360.33905029]
[158.03059387 -361.27038574]
[173.03645325 -361.07977295]
[187.98611450 -359.76831055]
[202.79595947 -357.34332275]
[217.38317871 -353.81838989]
[231.66618347 -349.21316528]
[245.56510925 -343.55346680]
[259.00219727 -336.87091064]
[271.90234375 -329.20288086]
[284.19338989 -320.59228516]
[295.80657959 -311.08721924]
[306.67697144 -300.74087524]
[316.74377441 -289.61111450]
[325.95071411 -277.76019287]
[334.24624634 -265.25436401]
[341.58404541 -252.16355896]
[347.92303467 -238.56100464]
[353.22778320 -224.52276611]
[357.46862793 -210.12736511]
[360.62182617 -195.45530701]
[362.66973877 -180.58862305]
[363.60095215 -165.61047363]
[363.41021729 -150.60461426]
[362.09863281 -135.65495300]
[359.67352295 -120.84513092]
[356.14843750 -106.25794220]
[351.54309082 -91.97497559]
[345.88327026 -78.07611084]
[339.20059204 -64.63906860]
[331.53247070 -51.73899460]
[322.92172241 -39.44804001]
[313.41656494 -27.83493805]
[303.07012939 -16.96463394]
[291.94027710 -6.89792061]
[280.08926392 2.30890512]
[267.58337402 10.60435390]
[254.49250793 17.94203377]
[240.88989258 24.28090858]
[226.85162354 29.58552742]
[212.45617676 33.82622910]
[197.78408813 36.97929001]
[182.91738892 39.02708435]
[167.93922424 39.95815659]
[152.93336487 39.76729584]
[137.98373413 38.45557785]
[123.17391968 36.03033066]
[119.65062714 50.61067581]
[116.12734222 65.19101715]
[112.60404968 79.77136230]
[109.08075714 94.35170746]
[107.30666351 109.24642181]
[107.30666351 124.24642181]
[107.30666351 139.24641418]
[107.30666351 154.24641418]
[107.30666351 169.24641418]
[107.30666351 184.24641418]
[107.30666351 199.24641418]
[107.30666351 214.24641418]
[107.30666351 229.24641418]
[107.30666351 244.24641418]
[107.30666351 259.24642944]
[107.30666351 274.24642944]
[107.30666351 289.24642944]
[122.05227661 292.27160645]
[135.88694763 298.20343018]
[148.24415588 306.79904175]
[158.61787415 317.70642090]
[166.58331299 330.47891235]
[171.81428528 344.59350586]
[174.09660339 359.47222900]
[173.33679199 374.50576782]
[169.56596375 389.07852173]
[162.93852234 402.59378052]
[153.72589111 414.49807739]
[142.30529785 424.30392456]
[129.14440918 431.60983276]
[114.78215027 436.11654663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[40 131]
[41 130]
[42 129]
[43 128]
[44 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
