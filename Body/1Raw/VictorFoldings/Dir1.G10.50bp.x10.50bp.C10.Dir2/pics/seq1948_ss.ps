%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUUAGCGGGGGGGGGGCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGxxxxxxxxxxAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCCCCCCCCCCCGACCUUAGC\
) } def
/len { sequence length } bind def

/coor [
[83.71125031 408.86386108]
[71.82698059 399.58874512]
[62.50827026 387.73864746]
[56.29690552 374.00247192]
[53.55400085 359.17883301]
[54.43902969 344.12957764]
[58.90053940 329.72964478]
[66.67913818 316.81619263]
[77.32258606 306.14004517]
[90.21209717 298.32186890]
[104.59828186 293.81619263]
[103.66265869 278.84539795]
[102.72702789 263.87460327]
[101.79139709 248.90380859]
[100.85576630 233.93302917]
[99.92014313 218.96223450]
[98.98451233 203.99143982]
[98.04888153 189.02064514]
[97.11325836 174.04985046]
[96.17762756 159.07907104]
[95.24199677 144.10827637]
[87.45754242 142.55426025]
[80.07463837 139.63783264]
[73.32965851 135.45237732]
[67.43855286 130.13188171]
[62.58992767 123.84669495]
[58.93901825 116.79804230]
[44.29551697 120.04886627]
[29.65201378 123.29969025]
[15.00851345 126.55051422]
[3.29324365 138.02590942]
[-12.42748642 133.35784912]
[-15.98153782 117.34845734]
[-3.71280718 106.46681213]
[11.75768757 111.90701294]
[26.40118790 108.65618896]
[41.04468918 105.40536499]
[55.68819046 102.15454102]
[58.65427017 83.91555786]
[68.79339600 68.46706390]
[84.34652710 58.48919296]
[102.61537170 55.71300125]
[106.01834869 41.10411072]
[109.42132568 26.49521637]
[105.01654816 11.29954338]
[115.43948364 0.65944427]
[118.84246063 -13.94944859]
[122.24543762 -28.55834007]
[116.47190857 -46.01245880]
[128.88494873 -58.37839508]
[131.98326111 -73.05492401]
[135.08158875 -87.73144531]
[137.72045898 -102.49750519]
[139.89729309 -117.33870697]
[142.07412720 -132.17991638]
[140.09184265 -137.14883423]
[140.24308777 -141.89535522]
[142.07345581 -145.63050842]
[144.87767029 -147.86744690]
[147.97599792 -162.54397583]
[134.03257751 -157.01396179]
[120.91082001 -164.28166199]
[118.20166016 -179.03498840]
[127.88528442 -190.49044800]
[142.88374329 -190.27502441]
[152.23422241 -178.54681396]
[156.83978271 -192.82228088]
[161.44534302 -207.09774780]
[166.05090332 -221.37319946]
[170.65647888 -235.64866638]
[157.76438904 -243.45190430]
[147.01977539 -254.01837158]
[139.00209045 -266.77822876]
[134.14372253 -281.04330444]
[132.70668030 -296.04437256]
[134.76843262 -310.97238159]
[140.21781921 -325.02233887]
[148.76097107 -337.43649292]
[159.93713379 -347.54541016]
[173.14360046 -354.80389404]
[187.66818237 -358.82052612]
[202.72756958 -359.37869263]
[217.50962830 -356.44827271]
[231.21719360 -350.18734741]
[243.11102295 -340.93350220]
[252.54969788 -329.18582153]
[259.02420044 -315.57781982]
[262.18539429 -300.84338379]
[261.86276245 -285.77709961]
[258.07369995 -271.19149780]
[251.02259827 -257.87313843]
[241.08967590 -246.54029846]
[228.81060791 -237.80409241]
[214.84757996 -232.13569641]
[199.95362854 -229.84077454]
[184.93193054 -231.04309082]
[180.32637024 -216.76763916]
[175.72080994 -202.49217224]
[171.11523438 -188.21672058]
[166.50967407 -173.94125366]
[162.65251160 -159.44566345]
[159.55419922 -144.76913452]
[156.91532898 -130.00308228]
[154.73849487 -115.16187286]
[152.56166077 -100.32066345]
[154.41749573 -97.25092316]
[154.84086609 -93.11299133]
[153.33872986 -88.60789490]
[149.75811768 -84.63312531]
[146.65979004 -69.95660400]
[143.56146240 -55.28007507]
[149.91032410 -44.93602753]
[147.40306091 -32.65056610]
[136.85432434 -25.15536308]
[133.45135498 -10.54647064]
[130.04837036 4.06242228]
[134.69656372 18.21316910]
[124.03022003 29.89819527]
[120.62724304 44.50708771]
[117.22426605 59.11597824]
[130.47915649 67.76338196]
[139.85527039 80.51319885]
[144.15943909 95.74290466]
[142.84387207 111.51435852]
[136.07603455 125.82051086]
[124.71715546 136.84074402]
[110.21279144 143.17263794]
[111.14842224 158.14343262]
[112.08404541 173.11422729]
[113.01967621 188.08502197]
[113.95530701 203.05581665]
[114.89093018 218.02659607]
[115.82656097 232.99739075]
[116.76219177 247.96818542]
[117.69781494 262.93896484]
[118.63344574 277.90975952]
[119.56907654 292.88055420]
[134.40431213 295.55996704]
[148.16694641 301.71249390]
[160.05683899 310.98037720]
[169.38272095 322.82482910]
[175.60241699 336.55725098]
[178.35430908 351.37921143]
[177.47840881 366.42898560]
[173.02561951 380.83163452]
[165.25485229 393.74978638]
[154.61787415 404.43240356]
[141.73310852 412.25839233]
[127.34966278 416.77279663]
[112.30375671 417.71310425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[27 38]
[28 37]
[29 36]
[30 35]
[42 120]
[43 119]
[44 118]
[46 116]
[47 115]
[48 114]
[50 111]
[51 110]
[52 109]
[53 105]
[54 104]
[55 103]
[59 102]
[60 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
