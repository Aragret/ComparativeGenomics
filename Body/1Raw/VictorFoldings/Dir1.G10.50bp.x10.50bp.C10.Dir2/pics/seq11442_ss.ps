%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACACUCAGGGGGGGGGGACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCxxxxxxxxxxUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCCCCCCCCCCCACCCUCA\
) } def
/len { sequence length } bind def

/coor [
[2.84230828 499.76596069]
[-11.00363064 493.74993896]
[-22.71229172 484.22052002]
[-31.41481590 471.88485718]
[-36.46541977 457.65832520]
[-37.48931122 442.59664917]
[-34.41051102 427.81747437]
[-27.45748901 414.41757202]
[-17.14620399 403.39123535]
[-4.24182367 395.55673218]
[10.29806328 391.49539185]
[10.29806328 376.49539185]
[10.29806328 361.49539185]
[10.29806328 346.49539185]
[10.29806328 331.49539185]
[10.29806328 316.49539185]
[10.29806328 301.49539185]
[10.29806328 286.49539185]
[10.29806328 271.49539185]
[10.29806328 256.49539185]
[10.29806328 241.49540710]
[10.29806328 226.49540710]
[-0.79325217 216.39675903]
[-15.72756004 217.79905701]
[-30.66186714 219.20137024]
[-45.59617615 220.60366821]
[-48.88764572 235.36921692]
[-56.58256912 248.39393616]
[-67.92707825 258.40179443]
[-81.80975342 264.41232300]
[-96.87050629 265.83670044]
[-111.63385010 262.53533936]
[-124.65341187 254.83168030]
[-134.65367126 243.48046875]
[-140.65489197 229.59376526]
[-142.06916809 214.53205872]
[-138.75790405 199.77093506]
[-131.04553223 186.75653076]
[-119.68762970 176.76388550]
[-105.79691315 170.77195740]
[-90.73426056 169.36778259]
[-75.97535706 172.68893433]
[-62.96613312 180.41001892]
[-52.98109436 191.77462769]
[-46.99847794 205.66935730]
[-32.06417084 204.26705933]
[-17.12986374 202.86474609]
[-2.19555569 201.46244812]
[-1.50548458 192.88446045]
[1.57610917 185.08915710]
[6.66043377 178.70808411]
[13.20298576 174.21704102]
[20.55953789 171.90136719]
[28.04851151 171.84007263]
[35.01377487 173.90927124]
[36.48196030 159.08720398]
[50.96124268 152.71060181]
[59.97877121 140.72377014]
[68.99629974 128.73693848]
[78.01383209 116.75009918]
[72.37245941 100.82260895]
[77.05619812 84.58768463]
[90.31459808 74.11273193]
[89.06772614 59.16464615]
[87.82085419 44.21656036]
[73.18849182 40.25805283]
[60.79424286 31.53116989]
[52.13478088 19.08972740]
[48.25576782 4.43609095]
[49.62562180 -10.66024303]
[56.07891846 -24.37631989]
[66.83639526 -35.05585480]
[80.59903717 -41.40924072]
[95.70493317 -42.66928101]
[110.32997894 -38.68381119]
[122.70812225 -29.93410492]
[131.34463501 -17.47672653]
[135.19664001 -2.81596494]
[133.79896545 12.27781963]
[127.32040405 25.98197937]
[116.54326630 36.64167023]
[102.76893616 42.96968460]
[104.01581573 57.91777039]
[105.26268768 72.86585999]
[109.02755737 69.53862000]
[113.47194672 66.72136688]
[118.52909851 64.51290131]
[130.42147827 55.37116623]
[142.31385803 46.22943115]
[154.20623779 37.08769608]
[140.01464844 32.22985077]
[134.76408386 18.17881393]
[142.29229736 5.20475912]
[157.09675598 2.79067087]
[168.35661316 12.70105171]
[167.84211731 27.69162941]
[180.61947632 19.83420372]
[193.39683533 11.97677898]
[203.72174072 -1.47062469]
[219.50183105 4.72816849]
[217.91365051 21.60756493]
[201.25425720 24.75413513]
[188.47689819 32.61156082]
[175.69953918 40.46898651]
[163.34797668 48.98007584]
[151.45559692 58.12181091]
[139.56321716 67.26354218]
[127.67082977 76.40528107]
[129.74977112 83.61138916]
[133.90766907 98.02360535]
[135.98660278 105.22971344]
[150.92091370 106.63201904]
[165.85522461 108.03431702]
[180.52798462 100.71025085]
[194.05610657 109.97967529]
[192.52299500 126.30700684]
[177.50579834 132.89608765]
[164.45291138 122.96862793]
[149.51861572 121.56632233]
[134.58430481 120.16401672]
[111.16867828 131.94010925]
[90.00066376 125.76763153]
[80.98313141 137.75445557]
[71.96560669 149.74130249]
[62.94807434 161.72813416]
[60.83489227 177.40757751]
[47.00060654 182.92680359]
[50.66026688 210.05914307]
[25.29806328 226.49540710]
[25.29806328 241.49540710]
[25.29806328 256.49539185]
[25.29806328 271.49539185]
[25.29806328 286.49539185]
[25.29806328 301.49539185]
[25.29806328 316.49539185]
[25.29806328 331.49539185]
[25.29806328 346.49539185]
[25.29806328 361.49539185]
[25.29806328 376.49539185]
[25.29806328 391.49539185]
[39.83795166 395.55673218]
[52.74233246 403.39123535]
[63.05361557 414.41757202]
[70.00663757 427.81747437]
[73.08543396 442.59664917]
[72.06154633 457.65832520]
[67.01094055 471.88485718]
[58.30841827 484.22052002]
[46.59975815 493.74993896]
[32.75381851 499.76596069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 48]
[24 47]
[25 46]
[26 45]
[55 127]
[57 125]
[58 124]
[59 123]
[60 122]
[63 84]
[64 83]
[65 82]
[87 108]
[88 107]
[89 106]
[90 105]
[96 104]
[97 103]
[98 102]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
