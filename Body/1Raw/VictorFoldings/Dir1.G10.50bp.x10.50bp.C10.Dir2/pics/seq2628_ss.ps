%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUAUUACGGGGGGGGGGCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAxxxxxxxxxxAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUCCCCCCCCCCUCAUUAUUGC\
) } def
/len { sequence length } bind def

/coor [
[81.80848694 380.03286743]
[67.96254730 374.01684570]
[56.25388336 364.48742676]
[47.55136108 352.15176392]
[42.50075912 337.92523193]
[41.47686768 322.86355591]
[44.55566788 308.08438110]
[51.50868988 294.68444824]
[61.81997299 283.65814209]
[74.72434998 275.82360840]
[89.26424408 271.76229858]
[89.26424408 256.76229858]
[89.26424408 241.76231384]
[89.26424408 226.76231384]
[89.26424408 211.76231384]
[89.26424408 196.76231384]
[89.26424408 181.76231384]
[89.26424408 166.76231384]
[89.26424408 151.76231384]
[89.26424408 136.76231384]
[83.46356964 132.00813293]
[81.02985382 146.80938721]
[66.99476624 152.10243225]
[55.39324951 142.59428406]
[57.82669449 127.79299164]
[71.86222839 122.49977112]
[66.06156158 117.74559021]
[51.35359573 120.69107056]
[36.64563370 123.63655853]
[29.30120850 137.44210815]
[14.78173542 143.24891663]
[-0.05713489 138.31515503]
[-8.20894146 124.97042084]
[-5.82464933 109.51567078]
[5.96995068 99.24817657]
[21.60581017 99.01593018]
[33.70015335 108.92859650]
[48.40811539 105.98311615]
[63.11607361 103.03762817]
[70.85292816 84.00151062]
[86.26100922 73.90657806]
[102.55625153 74.39755249]
[108.33251953 60.55433655]
[114.10879517 46.71111679]
[119.88506317 32.86790085]
[125.22657776 18.85118675]
[130.12812805 4.67462826]
[115.60468292 8.42555523]
[103.48991394 -0.41935188]
[102.63874054 -15.39518261]
[113.67330170 -25.55581665]
[128.52822876 -23.47465134]
[136.34568787 -10.67350674]
[142.69282532 -24.26445770]
[149.03994751 -37.85540771]
[155.24536133 -51.51165009]
[161.30838013 -65.23170471]
[167.37138367 -78.95175934]
[173.43440247 -92.67181396]
[179.49740601 -106.39186096]
[185.56042480 -120.11191559]
[191.62344360 -133.83197021]
[178.79280090 -141.64411926]
[167.09164429 -151.06420898]
[156.72021484 -161.93106079]
[147.85597229 -174.05873108]
[140.65060425 -187.23968506]
[135.22737122 -201.24838257]
[131.67910767 -215.84512329]
[130.06651306 -230.78013611]
[130.41719055 -245.79785156]
[132.72512817 -260.64132690]
[136.95085144 -275.05654907]
[143.02201843 -288.79684448]
[150.83477783 -301.62710571]
[160.25543213 -313.32778931]
[171.12277222 -323.69869995]
[183.25085449 -332.56237793]
[196.43215942 -339.76712036]
[210.44111633 -345.18969727]
[225.03802490 -348.73724365]
[239.97311401 -350.34915161]
[254.99082947 -349.99774170]
[269.83416748 -347.68911743]
[284.24917603 -343.46270752]
[297.98919678 -337.39086914]
[310.81909180 -329.57751465]
[322.51934814 -320.15631104]
[332.88973999 -309.28845215]
[341.75283813 -297.15994263]
[348.95697021 -283.97830200]
[354.37884521 -269.96908569]
[357.92572021 -255.37200928]
[359.53689575 -240.43685913]
[359.18478394 -225.41915894]
[356.87542725 -210.57591248]
[352.64834595 -196.16110229]
[346.57586670 -182.42138672]
[338.76187134 -169.59185791]
[329.34011841 -157.89205933]
[318.47177124 -147.52218628]
[306.34286499 -138.65966797]
[293.16088867 -131.45617676]
[279.15139771 -126.03495026]
[264.55413818 -122.48876953]
[249.61891174 -120.87831116]
[234.60124207 -121.23113251]
[219.75810242 -123.54119110]
[205.34349060 -127.76895905]
[199.28047180 -114.04890442]
[193.21746826 -100.32884979]
[187.15444946 -86.60879517]
[181.09144592 -72.88874054]
[175.02842712 -59.16868973]
[168.96540833 -45.44863510]
[169.13964844 -38.01121140]
[162.63090515 -31.50827789]
[156.28376770 -17.91732788]
[149.93664551 -4.32637691]
[144.30468750 9.57617855]
[139.40313721 23.75273705]
[140.65509033 27.11429787]
[140.30076599 31.25870895]
[137.98623657 35.40543365]
[133.72828674 38.64417267]
[127.95201111 52.48738861]
[122.17573547 66.33060455]
[116.39946747 80.17382812]
[129.33804321 97.01583099]
[125.91673279 120.82849884]
[104.26424408 136.76231384]
[104.26424408 151.76231384]
[104.26424408 166.76231384]
[104.26424408 181.76231384]
[104.26424408 196.76231384]
[104.26424408 211.76231384]
[104.26424408 226.76231384]
[104.26424408 241.76231384]
[104.26424408 256.76229858]
[104.26424408 271.76229858]
[118.80413055 275.82360840]
[131.70851135 283.65814209]
[142.01979065 294.68444824]
[148.97280884 308.08438110]
[152.05162048 322.86355591]
[151.02772522 337.92523193]
[145.97712708 352.15176392]
[137.27459717 364.48742676]
[125.56593323 374.01684570]
[111.71999359 380.03286743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 39]
[28 38]
[29 37]
[42 128]
[43 127]
[44 126]
[45 125]
[46 121]
[47 120]
[53 119]
[54 118]
[55 117]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[62 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
