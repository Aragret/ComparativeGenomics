%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUACCCCCCAGGGGGGGGGGAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGxxxxxxxxxxCCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACCCCCCCCCCCUCCUACCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 379.88174438]
[70.75619507 375.07229614]
[57.85220718 367.30691528]
[46.91955185 356.94876099]
[38.46956635 344.48236084]
[32.89747238 330.49072266]
[30.46388245 315.62829590]
[31.28262329 300.59020996]
[35.31539917 286.07983398]
[42.37359238 272.77584839]
[52.12707901 261.30050659]
[64.11966705 252.19052124]
[77.79044342 245.87197876]
[92.50000000 242.64042664]
[92.50000000 227.64042664]
[92.50000000 212.64042664]
[92.50000000 197.64042664]
[92.50000000 182.64042664]
[92.50000000 167.64042664]
[92.50000000 152.64042664]
[92.50000000 137.64042664]
[92.50000000 122.64041901]
[92.50000000 107.64041901]
[90.55450439 92.76712036]
[86.69638824 78.27178192]
[82.83826447 63.77643967]
[78.98014832 49.28109741]
[75.12202454 34.78575897]
[71.26390839 20.29041672]
[67.40578461 5.79507589]
[63.54766846 -8.70026493]
[59.68954849 -23.19560623]
[55.83142853 -37.69094849]
[41.06756592 -34.99493790]
[26.13617516 -33.48044968]
[11.13165951 -33.15706253]
[-3.85111833 -34.02681351]
[-18.71743011 -36.08420944]
[-33.37328339 -39.31623840]
[-47.72602081 -43.70246887]
[-61.68489838 -49.21516800]
[-75.16165924 -55.81948090]
[-88.07109833 -63.47365952]
[-100.33160400 -72.12930298]
[-111.86565399 -81.73168945]
[-122.60031891 -92.22010803]
[-132.46774292 -103.52825165]
[-141.40553284 -115.58461761]
[-149.35717773 -128.31298828]
[-156.27241516 -141.63288879]
[-162.10751343 -155.46009827]
[-166.82559204 -169.70719910]
[-170.39680481 -184.28410339]
[-172.79858398 -199.09867859]
[-174.01574707 -214.05725098]
[-174.04058838 -229.06523132]
[-172.87295532 -244.02774048]
[-170.52023315 -258.85018921]
[-166.99728394 -273.43884277]
[-162.32641602 -287.70147705]
[-156.53712463 -301.54794312]
[-149.66601562 -314.89065552]
[-141.75654602 -327.64526367]
[-132.85871887 -339.73117065]
[-123.02879333 -351.07189941]
[-112.32890320 -361.59579468]
[-100.82670593 -371.23632812]
[-88.59492493 -379.93249512]
[-75.71089172 -387.62939453]
[-62.25606918 -394.27828979]
[-48.31552124 -399.83715820]
[-33.97738266 -404.27087402]
[-19.33230591 -407.55142212]
[-4.47288799 -409.65802002]
[10.50692844 -410.57736206]
[25.51243210 -410.30364990]
[40.44875336 -408.83859253]
[55.22146225 -406.19146729]
[69.73715210 -402.37902832]
[83.90405273 -397.42532349]
[97.63259888 -391.36175537]
[110.83599091 -384.22659302]
[123.43074799 -376.06494141]
[135.33723450 -366.92846680]
[146.48019409 -356.87487793]
[156.78915405 -345.96774292]
[166.19895935 -334.27606201]
[174.65010071 -321.87368774]
[182.08914185 -308.83911133]
[188.46907043 -295.25466919]
[193.74952698 -281.20629883]
[197.89714050 -266.78280640]
[200.88569641 -252.07536316]
[202.69627380 -237.17698669]
[203.31745911 -222.18183899]
[202.74528503 -207.18475342]
[200.98339844 -192.28053284]
[198.04293823 -177.56340027]
[193.94247437 -163.12641907]
[188.70796204 -149.06086731]
[182.37246704 -135.45565796]
[174.97605896 -122.39682770]
[166.56549072 -109.96691895]
[157.19395447 -98.24452972]
[146.92068481 -87.30377960]
[135.81065369 -77.21382904]
[123.93407440 -68.03847504]
[111.36605835 -59.83572769]
[98.18605804 -52.65744781]
[84.47740936 -46.54902267]
[70.32676697 -41.54906845]
[74.18489075 -27.05372620]
[78.04300690 -12.55838490]
[81.90113068 1.93695581]
[85.75924683 16.43229675]
[89.61737061 30.92763710]
[93.47548676 45.42297745]
[97.33361053 59.91831970]
[101.19172668 74.41365814]
[105.04985046 88.90900421]
[109.99610138 74.74797821]
[120.19490814 63.74869156]
[133.94258118 57.74855423]
[148.94258118 57.74987793]
[162.68917847 63.75244522]
[172.88604736 74.75353241]
[177.82980347 88.91542816]
[176.69459534 103.87240601]
[169.67007446 117.12593842]
[157.92965698 126.46202850]
[143.43457031 130.32110596]
[128.60620117 128.05853271]
[115.92159271 120.05223083]
[107.50000000 107.64041901]
[107.50000000 122.64041901]
[107.50000000 137.64042664]
[107.50000000 152.64042664]
[107.50000000 167.64042664]
[107.50000000 182.64042664]
[107.50000000 197.64042664]
[107.50000000 212.64042664]
[107.50000000 227.64042664]
[107.50000000 242.64042664]
[122.20955658 245.87197876]
[135.88034058 252.19052124]
[147.87292480 261.30050659]
[157.62640381 272.77584839]
[164.68460083 286.07983398]
[168.71737671 300.59020996]
[169.53611755 315.62829590]
[167.10252380 330.49072266]
[161.53042603 344.48236084]
[153.08044434 356.94876099]
[142.14779663 367.30691528]
[129.24380493 375.07229614]
[114.97203827 379.88174438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
