%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUCCCACGGGGGGGGGGAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCxxxxxxxxxxUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCCCCCCCCCCCUUCUUCCCAC\
) } def
/len { sequence length } bind def

/coor [
[98.15767670 404.74609375]
[84.93748474 397.47363281]
[74.05067444 387.02661133]
[66.23954773 374.11737061]
[62.03666687 359.62606812]
[61.72859192 344.54071045]
[65.33633423 329.88989258]
[72.61390686 316.67251587]
[83.06511688 305.78973389]
[95.97737885 297.98358154]
[110.47031403 293.78631592]
[110.15825653 278.78955078]
[109.84619904 263.79278564]
[109.53414154 248.79603577]
[109.22209167 233.79928589]
[108.91003418 218.80253601]
[108.59797668 203.80578613]
[108.28591919 188.80902100]
[107.97386169 173.81227112]
[107.66180420 158.81552124]
[107.34975433 143.81877136]
[107.03769684 128.82200623]
[101.49203491 123.77268219]
[94.57606506 137.08317566]
[88.62457275 150.85197449]
[73.96068573 154.00958252]
[62.86970139 143.91056824]
[64.64356232 129.01582336]
[77.79507446 121.80407715]
[90.40071869 113.67403412]
[84.85506439 108.62471008]
[69.89481354 109.71601868]
[54.93456650 110.80733490]
[43.40001678 121.95783997]
[27.50972557 119.74918365]
[19.45336151 105.87566376]
[25.41107941 90.97985077]
[40.81262589 86.48854828]
[53.84325790 95.84708405]
[68.80350494 94.75577545]
[83.76375580 93.66445923]
[95.75058746 84.64693451]
[100.94599915 70.57541656]
[103.27710724 55.75765610]
[102.65312958 40.77063751]
[102.02915192 25.78362274]
[101.40517426 10.79660702]
[100.78119659 -4.19040918]
[85.80584717 -5.31085968]
[71.06183624 -8.16230297]
[56.74856567 -12.70617580]
[43.05960083 -18.88102722]
[30.18007469 -26.60335159]
[18.28416252 -35.76871109]
[7.53274632 -46.25315475]
[-1.92877448 -57.91489410]
[-9.97244358 -70.59621429]
[-16.48947906 -84.12561798]
[-21.39174461 -98.32013702]
[-24.61294556 -112.98780060]
[-26.10951614 -127.93025208]
[-25.86121750 -142.94540405]
[-23.87140846 -157.83020020]
[-20.16699791 -172.38334656]
[-14.79808426 -186.40800476]
[-7.83727598 -199.71453857]
[0.62128979 -212.12297058]
[10.46322060 -223.46549988]
[21.55541611 -233.58871460]
[33.74786758 -242.35574341]
[46.87568283 -249.64799500]
[60.76132965 -255.36685181]
[75.21701050 -259.43499756]
[90.04724121 -261.79739380]
[105.05144501 -262.42208862]
[120.02672577 -261.30062866]
[134.77053833 -258.44821167]
[149.08351135 -253.90336609]
[162.77206421 -247.72760010]
[175.65107727 -240.00442505]
[187.54637146 -230.83827209]
[198.29708862 -220.35310364]
[207.75782776 -208.69073486]
[215.80065918 -196.00888062]
[222.31678772 -182.47903442]
[227.21810913 -168.28419495]
[230.43832397 -153.61631775]
[231.93389893 -138.67376709]
[231.68460083 -123.65863037]
[229.69380188 -108.77396393]
[225.98841858 -94.22106934]
[220.61856079 -80.19676208]
[213.65687561 -66.89070129]
[205.19747925 -54.48283386]
[195.35478210 -43.14096451]
[184.26191711 -33.01847839]
[172.06887817 -24.25226784]
[158.94058228 -16.96089172]
[145.05455017 -11.24295521]
[130.59860229 -7.17578506]
[115.76821136 -4.81438637]
[116.39218903 10.17262936]
[117.01616669 25.15964508]
[117.64014435 40.14666367]
[118.26412201 55.13367844]
[125.56111145 42.02818680]
[136.33897400 31.59565544]
[149.67506409 24.72916794]
[164.42774963 22.01653290]
[179.33410645 23.68996429]
[193.11808777 29.60620880]
[204.59970093 39.25880432]
[212.79605103 51.82143402]
[217.00550842 66.21867371]
[216.86770630 81.21804047]
[212.39443970 95.53550720]
[203.96864319 107.94542694]
[192.31161499 117.38543701]
[178.42126465 123.04742432]
[163.48667908 124.44669342]
[148.78633118 121.46346283]
[135.57864380 114.35310364]
[124.99427795 103.72431183]
[117.93931580 90.48696136]
[115.01752472 75.77082825]
[109.82210541 89.84234619]
[125.04274750 101.38663483]
[122.03444672 128.50994873]
[122.34650421 143.50671387]
[122.65856171 158.50346375]
[122.97061920 173.50021362]
[123.28267670 188.49696350]
[123.59472656 203.49372864]
[123.90678406 218.49047852]
[124.21884155 233.48722839]
[124.53089905 248.48397827]
[124.84295654 263.48074341]
[125.15501404 278.47747803]
[125.46706390 293.47424316]
[140.12205505 297.06500244]
[153.34786987 304.32727051]
[164.24273682 314.76586914]
[172.06382751 327.66906738]
[176.27790833 342.15713501]
[176.59762573 357.24224854]
[173.00120544 371.89584351]
[165.73384094 385.11883545]
[155.29103088 396.00967407]
[142.38481140 403.82580566]
[127.89511108 408.03427124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[31 41]
[32 40]
[33 39]
[42 126]
[43 125]
[44 105]
[45 104]
[46 103]
[47 102]
[48 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
