%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAUUAUGGGGGGGGGGAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUxxxxxxxxxxCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUACCCCCCCCCCAAAAAACUAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 372.70501709]
[71.19830322 366.68899536]
[59.48964310 357.15957642]
[50.78712082 344.82391357]
[45.73651886 330.59738159]
[44.71262741 315.53570557]
[47.79142761 300.75656128]
[54.74444962 287.35662842]
[65.05573273 276.33029175]
[77.96011353 268.49578857]
[92.50000000 264.43447876]
[92.50000000 249.43447876]
[92.50000000 234.43447876]
[92.50000000 219.43447876]
[92.50000000 204.43447876]
[92.50000000 189.43447876]
[92.50000000 174.43447876]
[92.50000000 159.43447876]
[92.50000000 144.43447876]
[92.50000000 129.43447876]
[84.49405670 130.24542236]
[75.83446503 128.80873108]
[67.15367126 124.89673615]
[53.62948227 131.38490295]
[46.97323990 145.98194885]
[31.37632942 149.73907471]
[18.80336761 139.77413940]
[18.89925385 123.73136902]
[31.59043121 113.91741943]
[47.14131546 117.86071014]
[60.66550446 111.37254333]
[61.36665726 103.90539551]
[46.38747025 103.11544800]
[32.56347656 108.93757629]
[20.46869850 100.06535339]
[21.87077141 85.13102722]
[35.40554810 78.66497040]
[47.90455246 86.95877075]
[62.76895905 88.97108459]
[63.47011185 81.50392914]
[51.39012527 72.61157990]
[39.31013489 63.71923065]
[27.23014832 54.82688141]
[15.15015984 45.93453217]
[3.07017112 37.04218292]
[-9.10166550 28.27597427]
[-21.36403465 19.63685799]
[-33.62640381 10.99774265]
[-45.88877106 2.35862660]
[-61.41605377 5.30463696]
[-74.43143463 -3.66059661]
[-77.21311951 -19.21816063]
[-68.11077881 -32.13802719]
[-52.52467346 -34.75506973]
[-39.70176315 -25.51664352]
[-37.24965286 -9.90374184]
[-24.98728561 -1.26462543]
[-12.72491741 7.37449074]
[-0.46254963 16.01360703]
[6.86428785 17.30322075]
[11.96252060 24.96219444]
[24.04250908 33.85454178]
[36.12249756 42.74689484]
[48.20248413 51.63924408]
[60.28247452 60.53159332]
[72.36246490 69.42394257]
[99.13704681 64.21510315]
[119.25836182 76.51056671]
[131.33834839 67.61821747]
[143.41833496 58.72586441]
[135.90042114 45.72801590]
[129.85803223 31.98200798]
[125.36451721 17.65470886]
[122.47442627 2.92003703]
[121.22283173 -12.04314137]
[121.62494659 -27.05318832]
[123.67587280 -41.92789459]
[127.35072327 -56.48669434]
[132.60488892 -70.55285645]
[139.37457275 -83.95563507]
[147.57762146 -96.53233337]
[157.11444092 -108.13027191]
[167.86927795 -118.60866547]
[179.71156311 -127.84032440]
[192.49754333 -135.71318054]
[206.07202148 -142.13166809]
[220.27018738 -147.01785278]
[234.91972351 -150.31245422]
[249.84278870 -151.97544861]
[264.85821533 -151.98666382]
[279.78375244 -150.34596252]
[294.43817139 -147.07325745]
[308.64364624 -142.20828247]
[322.22769165 -135.81007385]
[335.02542114 -127.95633698]
[346.88146973 -118.74237823]
[357.65194702 -108.28005981]
[367.20608521 -96.69637299]
[375.42791748 -84.13195038]
[382.21762085 -70.73929596]
[387.49276733 -56.68099976]
[391.18936157 -42.12770462]
[393.26251221 -27.25608063]
[393.68704224 -12.24665070]
[392.45782471 2.71838117]
[389.58975220 17.45735359]
[385.11764526 31.79134941]
[379.09579468 45.54636765]
[371.59729004 58.55543137]
[362.71319580 70.66062927]
[352.55130005 81.71501160]
[341.23498535 91.58438110]
[328.90164185 100.14894867]
[315.70098877 107.30473328]
[301.79321289 112.96488190]
[287.34719849 117.06067657]
[272.53826904 119.54239655]
[257.54620361 120.37992859]
[242.55300903 119.56309509]
[227.74067688 117.10181427]
[213.28900146 113.02597046]
[199.37344360 107.38502502]
[186.16288757 100.24746704]
[173.81773376 91.69993591]
[162.48782349 81.84619141]
[152.31068420 70.80585480]
[140.23069763 79.69820404]
[128.15071106 88.59055328]
[129.86375427 105.54924774]
[122.17292786 120.76052856]
[107.50000000 129.43447876]
[107.50000000 144.43447876]
[107.50000000 159.43447876]
[107.50000000 174.43447876]
[107.50000000 189.43447876]
[107.50000000 204.43447876]
[107.50000000 219.43447876]
[107.50000000 234.43447876]
[107.50000000 249.43447876]
[107.50000000 264.43447876]
[122.03988647 268.49578857]
[134.94427490 276.33029175]
[145.25555420 287.35662842]
[152.20857239 300.75656128]
[155.28736877 315.53570557]
[154.26348877 330.59738159]
[149.21287537 344.82391357]
[140.51036072 357.15957642]
[128.80169678 366.68899536]
[114.95575714 372.70501709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 31]
[24 30]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[49 56]
[68 128]
[69 127]
[70 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
