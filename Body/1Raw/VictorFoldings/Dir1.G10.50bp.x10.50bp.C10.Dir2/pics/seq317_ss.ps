%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCCUCCGGGGGGGGGGCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACxxxxxxxxxxCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCCCCCCCCCCCACCUCC\
) } def
/len { sequence length } bind def

/coor [
[78.29040527 339.24398804]
[65.73217773 330.89282227]
[55.64595413 319.68038940]
[48.66576385 306.31146240]
[45.23037720 291.62646484]
[45.55575562 276.54852295]
[49.62144089 262.02539062]
[57.17185974 248.97004700]
[67.73239136 238.20315552]
[80.63918304 230.40151978]
[95.08090973 226.05557251]
[94.45693207 211.06855774]
[93.83295441 196.08154297]
[93.20897675 181.09452820]
[92.58499908 166.10751343]
[91.96102142 151.12049866]
[91.33704376 136.13346863]
[90.71306610 121.14646149]
[77.69676208 113.69155121]
[64.45417786 120.73668671]
[51.21158981 127.78182220]
[37.96900177 134.82695007]
[34.89850616 150.16012573]
[22.65815926 159.89192200]
[7.02748060 159.42729187]
[-4.61320257 148.98562622]
[-6.76751471 133.49714661]
[1.58174419 120.27504730]
[16.49230957 115.56240082]
[30.92386818 121.58436584]
[44.16645432 114.53923035]
[57.40903854 107.49409485]
[70.65162659 100.44896698]
[82.04665375 89.60686493]
[94.11735535 89.38338470]
[90.41119385 74.84844971]
[86.70503235 60.31351089]
[75.79791260 48.85291672]
[80.15069580 34.60853195]
[76.44453430 20.07359505]
[71.25149536 34.14599228]
[60.86502838 44.96825027]
[47.01783371 50.73497772]
[32.01993179 50.48415756]
[18.37330818 44.25762558]
[8.35452843 33.09410858]
[3.63494968 18.85593605]
[5.00190258 3.91835189]
[12.22734928 -9.22671986]
[24.10592270 -18.38638687]
[38.65600967 -22.03260994]
[53.45033264 -19.55711746]
[66.02085876 -11.37287617]
[74.27002716 1.15347588]
[74.58208466 -13.84327793]
[74.89414215 -28.84003067]
[66.75412750 -16.24081802]
[56.13928223 -5.64246750]
[43.52742386 2.47793961]
[29.48626900 7.75486755]
[14.64787388 9.95077896]
[-0.31981888 8.96682453]
[-14.74304676 4.84729767]
[-27.97255516 -2.22236395]
[-39.41282272 -11.92392254]
[-48.54887772 -23.82066727]
[-54.96945572 -37.37707520]
[-58.38554764 -51.98290634]
[-58.64337540 -66.98069000]
[-55.73133087 -81.69530487]
[-49.78049850 -95.46439362]
[-41.05875778 -107.66812897]
[-29.95870590 -117.75717926]
[-16.98001099 -125.27738190]
[-2.70690179 -129.89022827]
[12.21812725 -131.38806152]
[27.12323189 -129.70347595]
[41.33746719 -124.91227722]
[54.22098541 -117.23016357]
[65.19384766 -107.00292206]
[73.76210785 -94.69094086]
[79.54006958 -80.84842682]
[82.26764679 -66.09850311]
[81.82174683 -51.10286331]
[90.07404327 -63.62882233]
[98.32633209 -76.15478516]
[94.89725494 -91.58258820]
[103.45201111 -104.87136841]
[118.91519928 -108.13713837]
[132.11279297 -99.44236755]
[135.21488953 -83.94551086]
[126.38108063 -70.84057617]
[110.85228729 -67.90249634]
[102.59999847 -55.37653351]
[94.34770966 -42.85057449]
[89.89089966 -28.52797508]
[89.57884216 -13.53122139]
[89.26678467 1.46553206]
[90.97947693 16.36743355]
[94.68563843 30.90237045]
[105.32766724 41.32332993]
[101.23996735 56.60734940]
[104.94612885 71.14228821]
[108.65229034 85.67722321]
[119.63795471 95.89070129]
[134.40400696 98.52956390]
[149.17005920 101.16843414]
[163.93612671 103.80729675]
[171.05302429 90.45796204]
[181.94819641 79.96269226]
[195.55421448 73.34971619]
[210.53810120 71.26689911]
[225.43190002 73.91829681]
[238.77647400 81.04414368]
[249.26443481 91.94634247]
[255.86828613 105.55678558]
[257.94107056 120.54206848]
[255.27969360 135.43409729]
[248.14489746 148.77388000]
[237.23568726 159.25453186]
[223.62081909 165.84927368]
[208.63414001 167.91200256]
[193.74391174 165.24064636]
[180.40890503 158.09692383]
[169.93556213 147.18067932]
[163.34994507 133.56140137]
[161.29725647 118.57334900]
[146.53120422 115.93448639]
[131.76515198 113.29562378]
[116.99909210 110.65676117]
[105.70008850 120.52248383]
[106.32406616 135.50949097]
[106.94804382 150.49652100]
[107.57202148 165.48353577]
[108.19599152 180.47055054]
[108.81996918 195.45756531]
[109.44394684 210.44458008]
[110.06792450 225.43159485]
[124.82093048 228.56204224]
[138.33157349 235.26379395]
[149.75054932 245.11558533]
[158.36006165 257.49810791]
[163.61891174 271.63302612]
[165.19651794 286.63174438]
[162.99371338 301.55148315]
[157.14895630 315.45434570]
[148.02967834 327.46640015]
[136.20910645 336.83255005]
[122.43029785 342.96405029]
[107.55940247 345.47546387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 33]
[20 32]
[21 31]
[22 30]
[35 104]
[36 103]
[37 102]
[39 100]
[40 99]
[54 98]
[55 97]
[56 96]
[84 95]
[85 94]
[86 93]
[105 130]
[106 129]
[107 128]
[108 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
