%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUCGCAGGGGGGGGGGGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCxxxxxxxxxxAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCCCCCCCCCCCUAUUCGCAG\
) } def
/len { sequence length } bind def

/coor [
[83.78829956 426.32171631]
[70.91502380 418.41882324]
[60.79073334 407.20831299]
[54.23614883 393.59899902]
[51.78262711 378.69406128]
[53.62906647 363.70181274]
[59.62577820 349.83761597]
[69.28663635 338.22537231]
[81.82848358 329.80639648]
[96.23461151 325.26324463]
[95.92255402 310.26647949]
[95.61049652 295.26974487]
[95.29843903 280.27297974]
[94.98638153 265.27624512]
[94.67432404 250.27947998]
[94.36227417 235.28273010]
[94.05021667 220.28596497]
[93.73815918 205.28921509]
[93.42610168 190.29246521]
[93.11404419 175.29571533]
[92.80198669 160.29895020]
[84.27196503 151.66494751]
[83.92671204 139.13101196]
[92.50000000 129.43809509]
[92.50000000 114.43809509]
[83.73101807 100.16924286]
[92.20125580 85.72106171]
[91.88919830 70.72430420]
[91.42115784 55.73160934]
[90.79718018 40.74459457]
[90.17320251 25.75757790]
[75.17341614 25.31083679]
[60.24371338 23.79515648]
[45.46017838 21.21825981]
[30.89814758 17.59327698]
[16.63182259 12.93868446]
[2.73390388 7.27819681]
[-10.72478771 0.64066088]
[-23.67566872 -6.94009972]
[-36.05274582 -15.42545509]
[-47.79294205 -24.77216530]
[-58.83644104 -34.93260193]
[-69.12696075 -45.85498810]
[-78.61206055 -57.48366547]
[-87.24340820 -69.75937653]
[-94.97702026 -82.61956787]
[-101.77349091 -95.99870300]
[-107.59818268 -109.82860565]
[-112.42140961 -124.03880310]
[-116.21860504 -138.55688477]
[-118.97040558 -153.30885315]
[-120.66280365 -168.21955872]
[-121.28716278 -183.21301270]
[-120.84030914 -198.21279907]
[-119.32450867 -213.14248657]
[-116.74750519 -227.92599487]
[-113.12240601 -242.48800659]
[-108.46770477 -256.75430298]
[-102.80711365 -270.65216064]
[-96.16947174 -284.11080933]
[-88.58861542 -297.06161499]
[-80.10316467 -309.43862915]
[-70.75636292 -321.17877197]
[-60.59584045 -332.22219849]
[-49.67337799 -342.51263428]
[-38.04462814 -351.99761963]
[-25.76885033 -360.62887573]
[-12.90859985 -368.36239624]
[0.47058782 -375.15875244]
[14.30053616 -380.98333740]
[28.51077080 -385.80648804]
[43.02887726 -389.60354614]
[57.78087616 -392.35525513]
[72.69158936 -394.04751587]
[87.68504333 -394.67178345]
[102.68482208 -394.22479248]
[117.61450195 -392.70889282]
[132.39799500 -390.13177490]
[146.95997620 -386.50656128]
[161.22622681 -381.85174561]
[175.12405396 -376.19104004]
[188.58265686 -369.55331421]
[201.53341675 -361.97235107]
[213.91035461 -353.48681641]
[225.65042114 -344.13992310]
[236.69375610 -333.97930908]
[246.98410034 -323.05676270]
[256.46902466 -311.42794800]
[265.10018921 -299.15209961]
[272.83361816 -286.29177856]
[279.62988281 -272.91253662]
[285.45434570 -259.08255005]
[290.27737427 -244.87228394]
[294.07434082 -230.35415649]
[296.82589722 -215.60212708]
[298.51806641 -200.69140625]
[299.14221191 -185.69795227]
[298.69512939 -170.69816589]
[297.17910767 -155.76849365]
[294.60186768 -140.98503113]
[290.97653198 -126.42308044]
[286.32162476 -112.15686035]
[280.66082764 -98.25907135]
[274.02297974 -84.80052948]
[266.44192505 -71.84982300]
[257.95626831 -59.47294617]
[248.60928345 -47.73295975]
[238.44860840 -36.68969727]
[227.52598572 -26.39943123]
[215.89707947 -16.91459846]
[203.62117004 -8.28353214]
[190.76080322 -0.55021507]
[177.38151550 6.24594593]
[163.55146790 12.07031918]
[149.34117126 16.89322281]
[134.82299805 20.69008255]
[120.07096100 23.44154930]
[105.16021729 25.13360023]
[105.78419495 40.12061691]
[106.40817261 55.10763168]
[109.85106659 61.70248795]
[106.88595581 70.41224670]
[107.19801331 85.40900421]
[115.12266541 93.99886322]
[115.24423218 105.68522644]
[107.50000000 114.43809509]
[107.50000000 129.43809509]
[117.08272552 145.12730408]
[107.79874420 159.98689270]
[108.11080170 174.98365784]
[108.42285919 189.98040771]
[108.73490906 204.97715759]
[109.04696655 219.97390747]
[109.35902405 234.97067261]
[109.67108154 249.96742249]
[109.98313904 264.96417236]
[110.29519653 279.96093750]
[110.60724640 294.95767212]
[110.91930389 309.95443726]
[111.23136139 324.95120239]
[125.81400299 328.89114380]
[138.69520569 336.78109741]
[148.83076477 347.98141479]
[155.39901733 361.58416748]
[157.86750793 376.48660278]
[156.03613281 391.48071289]
[150.05334473 405.35092163]
[140.40415955 416.97286987]
[127.87077332 425.40441895]
[113.46922302 429.96206665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 127]
[25 126]
[27 123]
[28 122]
[29 120]
[30 119]
[31 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
