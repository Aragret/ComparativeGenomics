%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUACUAUGGGGGGGGGGGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCxxxxxxxxxxUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCACCCCCCCCCCUCCGUACUAU\
) } def
/len { sequence length } bind def

/coor [
[86.69022369 377.00061035]
[72.20053101 372.79214478]
[59.29430389 364.97601318]
[48.85150528 354.08517456]
[41.58414078 340.86218262]
[37.98771286 326.20858765]
[38.30743408 311.12347412]
[42.52150726 296.63540649]
[50.34260178 283.73220825]
[61.23747253 273.29360962]
[74.46327972 266.03134155]
[89.11827087 262.44058228]
[89.43032837 247.44381714]
[89.74238586 232.44706726]
[90.05444336 217.45031738]
[90.36649323 202.45356750]
[90.67855072 187.45680237]
[90.99060822 172.46005249]
[91.30266571 157.46330261]
[91.61472321 142.46655273]
[91.92678070 127.46979523]
[78.82921600 119.27600861]
[71.89576721 105.46980286]
[56.93552017 104.37848663]
[41.97526932 103.28717804]
[27.64875031 109.99995422]
[15.51812649 101.35720062]
[0.55787796 100.26589203]
[-13.76864243 106.97866821]
[-25.89926529 98.33590698]
[-40.85951614 97.24459839]
[-55.81976318 96.15328979]
[-70.78001404 95.06198120]
[-78.34065247 108.32091522]
[-90.91027069 116.97930145]
[-105.99314880 119.31799316]
[-120.59457397 114.87265778]
[-131.81542969 104.52590942]
[-137.42779541 90.33210754]
[-136.31735229 75.10943604]
[-128.70454407 61.88037491]
[-116.10093689 53.27156067]
[-101.00896454 50.99227524]
[-86.42515564 55.49507904]
[-75.24513245 65.88593292]
[-69.68870544 80.10173035]
[-54.72845459 81.19303894]
[-39.76820374 82.28434753]
[-24.80795479 83.37566376]
[-11.55149269 76.58482361]
[1.64918852 85.30564117]
[16.60943794 86.39694977]
[29.86590004 79.60611725]
[43.06658173 88.32692719]
[58.02682877 89.41824341]
[72.98707581 90.50955200]
[81.39396667 78.23806000]
[94.82285309 71.84039307]
[96.06972504 56.89230347]
[97.31659698 41.94421768]
[98.56347656 26.99612808]
[98.71951294 11.99694061]
[97.78388214 -2.97385120]
[96.84825134 -17.94464302]
[82.15039062 -21.47512054]
[69.14698792 -29.18245125]
[58.99430084 -40.38130569]
[52.59509659 -54.07588577]
[50.51838684 -69.04848480]
[52.94883728 -83.96774292]
[59.67032623 -97.50705719]
[70.08518982 -108.46251678]
[83.26734161 -115.85997009]
[98.04463196 -119.04163361]
[113.10308075 -117.72460938]
[127.10369873 -112.02599335]
[138.80155945 -102.45251465]
[147.15649414 -89.85543823]
[151.42558289 -75.35487366]
[151.22923279 -60.24021912]
[146.58491516 -45.85544968]
[137.90556335 -33.47964859]
[125.96296692 -24.21327209]
[111.81904602 -18.88027191]
[112.75466919 -3.90947962]
[113.69029999 11.06131172]
[123.90807343 0.07963636]
[138.77166748 -1.93859088]
[151.54776001 5.92090702]
[156.44862366 20.09770012]
[151.25415039 34.16956329]
[138.31745911 41.76180267]
[123.49900818 39.43506241]
[113.51155853 28.24300385]
[112.26468658 43.19108963]
[111.01780701 58.13917542]
[109.77093506 73.08726501]
[121.37015533 80.94525909]
[127.85237122 93.36584473]
[142.84506226 93.83388519]
[157.83776855 94.30192566]
[172.83045959 94.76996613]
[187.82315063 95.23800659]
[192.53324890 92.70134735]
[197.26599121 92.30963898]
[201.18571472 93.70156860]
[203.72821045 96.23202515]
[218.66252136 97.63433075]
[230.76538086 87.82829285]
[245.89091492 89.46317291]
[255.16488647 101.06183624]
[270.09918213 102.46414185]
[285.03350830 103.86643982]
[299.70626831 96.54237366]
[313.23437500 105.81179810]
[311.70126343 122.13912964]
[296.68408203 128.72821045]
[283.63119507 118.80075073]
[268.69689941 117.39844513]
[253.76258850 115.99613953]
[242.49156189 125.66567230]
[227.32608032 124.45628357]
[217.26020813 112.56864166]
[202.32589722 111.16633606]
[187.35511780 110.23070526]
[172.36241150 109.76266479]
[157.36972046 109.29462433]
[142.37702942 108.82657623]
[127.38433075 108.35853577]
[119.71227264 120.76519012]
[106.92353058 127.78185272]
[106.61147308 142.77861023]
[106.29941559 157.77536011]
[105.98736572 172.77210999]
[105.67530823 187.76885986]
[105.36325073 202.76562500]
[105.05119324 217.76237488]
[104.73913574 232.75912476]
[104.42707825 247.75587463]
[104.11502838 262.75262451]
[118.60796356 266.94992065]
[131.52021790 274.75607300]
[141.97143555 285.63882446]
[149.24900818 298.85623169]
[152.85675049 313.50704956]
[152.54867554 328.59237671]
[148.34579468 343.08370972]
[140.53466797 355.99295044]
[129.64785767 366.43994141]
[116.42765808 373.71243286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 56]
[24 55]
[25 54]
[27 52]
[28 51]
[30 49]
[31 48]
[32 47]
[33 46]
[58 97]
[59 96]
[60 95]
[61 94]
[62 86]
[63 85]
[64 84]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[107 124]
[108 123]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
