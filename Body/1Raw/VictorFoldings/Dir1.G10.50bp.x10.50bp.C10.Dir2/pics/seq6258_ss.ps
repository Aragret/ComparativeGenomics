%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUAUUCUGGGGGGGGGGCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAxxxxxxxxxxGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCACCCCCCCCCCUUACUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[70.62332153 534.26373291]
[56.77738571 528.24774170]
[45.06872177 518.71832275]
[36.36619949 506.38262939]
[31.31559753 492.15612793]
[30.29170609 477.09445190]
[33.37050629 462.31527710]
[40.32352829 448.91534424]
[50.63481140 437.88900757]
[63.53919220 430.05450439]
[78.07907867 425.99319458]
[78.07907867 410.99319458]
[78.07907867 395.99319458]
[78.07907867 380.99319458]
[78.07907867 365.99319458]
[78.07907867 350.99319458]
[78.07907867 335.99319458]
[78.07907867 320.99319458]
[78.07907867 305.99319458]
[78.07907867 290.99319458]
[65.08737946 287.83898926]
[53.13108444 281.83889771]
[42.82498932 273.29721069]
[34.69997406 262.64916992]
[29.17565155 250.43849182]
[26.53870201 237.28984070]
[26.92799950 223.87677002]
[30.32729721 210.88720703]
[36.56587601 198.98820496]
[45.32711792 188.79168701]
[56.16455460 180.82295227]
[68.52464294 175.49365234]
[81.77501678 173.08049011]
[82.71064758 158.10969543]
[83.64627075 143.13890076]
[76.71790314 129.95379639]
[85.30092621 116.66310883]
[84.35656738 83.85809326]
[82.79898834 68.93917847]
[81.24140930 54.02026367]
[79.21907043 39.15721893]
[76.73395538 24.36451149]
[74.24883270 9.57180405]
[71.76371765 -5.22090292]
[59.71411896 -19.10568047]
[66.40794373 -35.29804611]
[63.61561966 -50.03585052]
[60.82329178 -64.77365875]
[53.09920883 -77.63205719]
[41.39958572 -87.01921844]
[29.69996071 -96.40637970]
[13.65995216 -96.09386444]
[3.52612567 -108.53110504]
[7.07228565 -124.17733002]
[21.57812119 -131.03009033]
[35.91599655 -123.83252716]
[39.08712387 -108.10600281]
[50.78674698 -98.71884155]
[62.48637009 -89.33168030]
[76.14321899 -95.53736877]
[89.79885101 -101.74250031]
[90.42282867 -116.72951508]
[83.26629639 -130.83959961]
[91.52632904 -143.23399353]
[92.15030670 -158.22100830]
[83.98765564 -168.26217651]
[84.85400391 -180.77090454]
[93.73580170 -189.04260254]
[94.67143250 -204.01338196]
[95.60706329 -218.98417664]
[82.08872223 -225.99662781]
[72.59639740 -237.90527344]
[68.77469635 -252.64686584]
[71.28574371 -267.66732788]
[79.69449615 -280.36428833]
[92.54407501 -288.53793335]
[107.60821533 -290.77209473]
[122.27696991 -286.67971802]
[134.00888062 -276.96981812]
[140.77133179 -263.32470703]
[141.39268494 -248.10845947]
[135.76527405 -233.95741272]
[124.86409760 -223.32330322]
[110.57785034 -218.04855347]
[109.64221954 -203.07775879]
[108.70659637 -188.10696411]
[117.36440277 -172.87403870]
[107.13732147 -157.59703064]
[106.51335144 -142.61001587]
[113.71451569 -129.57189941]
[105.40984344 -116.10553741]
[104.78586578 -101.11852264]
[95.16197205 -74.17117310]
[75.56109619 -67.56597900]
[78.35342407 -52.82817459]
[81.14575195 -38.09037018]
[90.98832703 -30.98889351]
[93.40536499 -18.68535995]
[86.55642700 -7.70602179]
[89.04154205 7.08668566]
[91.52666473 21.87939262]
[94.01177979 36.67210007]
[96.72050476 39.02375412]
[98.39392853 42.83181763]
[98.34757996 47.58052444]
[96.16031647 52.46268463]
[97.71790314 67.38159943]
[99.27548218 82.30050659]
[110.57448578 92.16622925]
[125.56718445 91.69818878]
[139.21386719 82.60424042]
[153.79083252 90.11718750]
[154.30253601 106.50835419]
[140.22257996 114.91590881]
[126.03522491 106.69088745]
[111.04252625 107.15892792]
[100.27172089 117.59873962]
[107.13316345 131.85466003]
[98.61706543 144.07452393]
[97.68143463 159.04531860]
[96.74581146 174.01611328]
[112.57308960 179.48849487]
[126.23625946 189.14874268]
[136.65614319 202.22471619]
[143.01231384 217.67488098]
[144.80763245 234.27122498]
[141.90711975 250.69691467]
[134.54814148 265.65069580]
[123.32093048 277.95007324]
[109.12127686 286.62475586]
[93.07907867 290.99319458]
[93.07907867 305.99319458]
[93.07907867 320.99319458]
[93.07907867 335.99319458]
[93.07907867 350.99319458]
[93.07907867 365.99319458]
[93.07907867 380.99319458]
[93.07907867 395.99319458]
[93.07907867 410.99319458]
[93.07907867 425.99319458]
[107.61896515 430.05450439]
[120.52334595 437.88900757]
[130.83462524 448.91534424]
[137.78765869 462.31527710]
[140.86645508 477.09445190]
[139.84255981 492.15612793]
[134.79196167 506.38262939]
[126.08943176 518.71832275]
[114.38077545 528.24774170]
[100.53483582 534.26373291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 121]
[34 120]
[35 119]
[37 117]
[38 108]
[39 107]
[40 106]
[41 102]
[42 101]
[43 100]
[44 99]
[46 96]
[47 95]
[48 94]
[49 59]
[50 58]
[51 57]
[61 92]
[62 91]
[64 89]
[65 88]
[68 86]
[69 85]
[70 84]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
