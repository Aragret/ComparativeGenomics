%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUCGCCAGGGGGGGGGGGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUxxxxxxxxxxCUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCCCCCCCCCCCUGCCCGCCA\
) } def
/len { sequence length } bind def

/coor [
[51.13763809 417.14004517]
[37.29169846 411.12399292]
[25.58303642 401.59457397]
[16.88051224 389.25891113]
[11.82991028 375.03240967]
[10.80601883 359.97073364]
[13.88481808 345.19155884]
[20.83783913 331.79162598]
[31.14912415 320.76528931]
[44.05350494 312.93078613]
[58.59339142 308.86947632]
[58.59339142 293.86947632]
[58.59339142 278.86947632]
[58.59339142 263.86947632]
[58.59339142 248.86947632]
[58.59339142 233.86947632]
[58.59339142 218.86947632]
[58.59339142 203.86947632]
[58.59339142 188.86947632]
[58.59339142 173.86947632]
[58.59339142 158.86947632]
[58.59339142 143.86947632]
[53.04773331 138.82014465]
[45.85634995 151.98388672]
[40.11089706 165.83992004]
[25.47095108 169.10673523]
[14.38006783 159.00759888]
[16.26519394 144.12652588]
[29.52263069 137.11203003]
[41.95641708 128.72149658]
[36.41076279 123.67218018]
[21.47645378 125.07447815]
[6.54214573 126.47678375]
[-6.51073551 136.40423584]
[-21.52792931 129.81517029]
[-23.06103516 113.48783875]
[-9.53292465 104.21840668]
[5.13984203 111.54248047]
[20.07415009 110.14017487]
[35.00845718 108.73786926]
[37.82443619 101.78659058]
[23.92187881 96.15463257]
[10.01932335 90.52267456]
[-4.94316149 89.46247101]
[-8.55848312 74.90467072]
[4.16962194 66.96771240]
[15.65128040 76.62012482]
[29.55383682 82.25207520]
[43.45639420 87.88403320]
[46.27236938 80.93275452]
[36.52471924 69.53173828]
[26.77706718 58.13071442]
[11.92823982 52.66967773]
[9.53838062 37.96805191]
[-0.20927189 26.56703186]
[-9.95692444 15.16601086]
[-25.59021950 10.21302319]
[-28.85272789 -5.85832024]
[-16.38825989 -16.51519966]
[-1.01919186 -10.79473019]
[1.44409704 5.41835833]
[11.19174862 16.81937981]
[20.93940163 28.22039986]
[35.09101105 32.86595917]
[38.17808914 48.38306427]
[47.92573929 59.78408432]
[57.67339325 71.18510437]
[81.50038910 58.03355789]
[105.76306915 59.88973618]
[122.68058014 73.10548401]
[107.77039337 74.74445343]
[92.89239502 72.83516693]
[78.87918854 67.48448181]
[66.51493835 58.99180984]
[56.49157333 47.83241272]
[49.36999512 34.63077927]
[45.54873276 20.12567902]
[45.24163055 5.12882328]
[48.46587372 -9.52055454]
[55.04102707 -23.00266647]
[64.59914398 -34.56304550]
[76.60534668 -43.55476761]
[90.38776398 -49.47465134]
[105.17512512 -51.99141312]
[120.13990784 -50.96421432]
[134.44468689 -46.45054245]
[147.28895569 -38.70298004]
[157.95394897 -28.15508652]
[165.84283447 -15.39712906]
[170.51414490 -1.14304876]
[171.70649719 13.80948734]
[169.35313416 28.62372589]
[163.58575439 42.47065735]
[154.72712708 54.57539368]
[143.27359009 64.26013947]
[158.09135437 61.92903519]
[172.90910339 59.59793091]
[187.72686768 57.26682663]
[202.54461670 54.93572235]
[217.36238098 52.60462189]
[232.18014526 50.27351761]
[235.06359863 35.39193344]
[242.86561584 22.39561653]
[254.64407349 12.85393524]
[268.97665405 7.91909266]
[284.13265991 8.18699551]
[298.28189087 13.62529278]
[309.71575928 23.57728386]
[317.05361938 36.84121704]
[319.40933228 51.81541061]
[316.49844360 66.69165039]
[308.67248535 79.67356873]
[296.87646484 89.19352722]
[282.53479004 94.10195160]
[267.37933350 93.80611420]
[253.24014282 88.34175110]
[241.82463074 78.36870575]
[234.51124573 65.09127045]
[219.69348145 67.42237854]
[204.87573242 69.75347900]
[190.05796814 72.08458710]
[175.24021912 74.41568756]
[160.42245483 76.74679565]
[145.60469055 79.07789612]
[131.82231140 84.99786377]
[138.42317200 107.69911957]
[128.95623779 132.04898071]
[104.54529572 146.97888184]
[73.59339142 143.86947632]
[73.59339142 158.86947632]
[73.59339142 173.86947632]
[73.59339142 188.86947632]
[73.59339142 203.86947632]
[73.59339142 218.86947632]
[73.59339142 233.86947632]
[73.59339142 248.86947632]
[73.59339142 263.86947632]
[73.59339142 278.86947632]
[73.59339142 293.86947632]
[73.59339142 308.86947632]
[88.13327789 312.93078613]
[101.03765869 320.76528931]
[111.34894562 331.79162598]
[118.30196381 345.19155884]
[121.38076782 359.97073364]
[120.35687256 375.03240967]
[115.30627441 389.25891113]
[106.60374451 401.59457397]
[94.89508820 411.12399292]
[81.04914856 417.14004517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[31 40]
[32 39]
[33 38]
[50 67]
[51 66]
[52 65]
[54 63]
[55 62]
[56 61]
[70 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
