%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAGCUAAGGGGGGGGGGAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAxxxxxxxxxxAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUCCCCCCCCCCAAUUAAGCUAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 506.14120483]
[71.01555634 500.58819580]
[58.81560135 491.72186279]
[49.20452881 480.09954834]
[42.78650284 466.45184326]
[39.96496582 451.63665771]
[40.91728210 436.58526611]
[45.58358765 422.24386597]
[53.67055511 409.51388550]
[64.66983032 399.19561768]
[77.88998413 391.93765259]
[92.50000000 388.19619751]
[92.50000000 373.19619751]
[92.50000000 358.19619751]
[92.50000000 343.19619751]
[92.50000000 328.19619751]
[92.50000000 313.19619751]
[92.50000000 298.19619751]
[92.50000000 283.19619751]
[92.50000000 268.19619751]
[92.50000000 253.19621277]
[92.50000000 238.19621277]
[92.50000000 223.19621277]
[79.01693726 216.81871033]
[69.60120392 205.17167664]
[66.16201019 190.53155518]
[69.43365479 175.78990173]
[78.81950378 163.88221741]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[83.66528320 39.34306717]
[76.15507507 33.58731461]
[70.55168915 25.99201012]
[67.28501892 17.16188240]
[66.59953308 7.79549170]
[68.53607178 -1.37003851]
[72.92962646 -9.61703014]
[79.42333221 -16.30344582]
[87.49742126 -20.91286469]
[96.51081085 -23.09435844]
[98.35413361 -37.98066711]
[100.19745636 -52.86697388]
[102.04077911 -67.75328064]
[103.88410950 -82.63958740]
[105.72743225 -97.52589417]
[107.57075500 -112.41220856]
[92.98215485 -115.97440338]
[78.90575409 -121.20618439]
[65.53192902 -128.03680420]
[53.04153442 -136.37385559]
[41.60349274 -146.10462952]
[31.37249374 -157.09748840]
[22.48689651 -169.20379639]
[15.06686783 -182.25982666]
[9.21275711 -196.08898926]
[5.00373411 -210.50428772]
[2.49672079 -225.31074524]
[1.72562170 -240.30813599]
[2.70086503 -255.29365540]
[5.40926218 -270.06460571]
[9.81418419 -284.42123413]
[15.85606098 -298.16943359]
[23.45318222 -311.12319946]
[32.50280380 -323.10739136]
[42.88254166 -333.95993042]
[54.45202255 -343.53402710]
[67.05478668 -351.70025635]
[80.52038574 -358.34811401]
[94.66671753 -363.38772583]
[109.30246735 -366.75094604]
[124.22971344 -368.39230347]
[139.24656677 -368.28955078]
[154.14994812 -366.44409180]
[168.73831177 -362.88092041]
[182.81436157 -357.64822388]
[196.18772888 -350.81671143]
[208.67756653 -342.47882080]
[220.11495972 -332.74728394]
[230.34523010 -321.75372314]
[239.23002625 -309.64685059]
[246.64916992 -296.59033203]
[252.50236511 -282.76077271]
[256.71041870 -268.34518433]
[259.21646118 -253.53855896]
[259.98654175 -238.54110718]
[259.01031494 -223.55566406]
[256.30093384 -208.78488159]
[251.89503479 -194.42854309]
[245.85224915 -180.68077087]
[238.25425720 -167.72750854]
[229.20384216 -155.74391174]
[218.82337952 -144.89207458]
[207.25325012 -135.31872559]
[194.64994812 -127.15336609]
[181.18391418 -120.50639343]
[167.03724670 -115.46771240]
[152.40126038 -112.10546875]
[137.47390747 -110.46513367]
[122.45706177 -110.56887817]
[120.61373901 -95.68257141]
[118.77041626 -80.79626465]
[116.92708588 -65.90995789]
[115.08376312 -51.02365112]
[113.24044037 -36.13734436]
[111.39711761 -21.25103569]
[127.86433411 -8.37984085]
[133.38856506 11.91489887]
[125.61968994 31.60322189]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[121.18049622 163.88221741]
[130.56634521 175.78990173]
[133.83798218 190.53155518]
[130.39880371 205.17167664]
[120.98306274 216.81871033]
[107.50000000 223.19621277]
[107.50000000 238.19621277]
[107.50000000 253.19621277]
[107.50000000 268.19619751]
[107.50000000 283.19619751]
[107.50000000 298.19619751]
[107.50000000 313.19619751]
[107.50000000 328.19619751]
[107.50000000 343.19619751]
[107.50000000 358.19619751]
[107.50000000 373.19619751]
[107.50000000 388.19619751]
[122.11001587 391.93765259]
[135.33016968 399.19561768]
[146.32945251 409.51388550]
[154.41641235 422.24386597]
[159.08271790 436.58526611]
[160.03503418 451.63665771]
[157.21350098 466.45184326]
[150.79547119 480.09954834]
[141.18440247 491.72186279]
[128.98443604 500.58819580]
[114.96250153 506.14120483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[29 124]
[30 123]
[31 122]
[32 121]
[34 119]
[35 118]
[36 117]
[37 116]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[52 107]
[53 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
