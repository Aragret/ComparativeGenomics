%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCACAGGGGGGGGGGCCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAxxxxxxxxxxCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCCCCCCCCCCCUAGCCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.01104736]
[71.19830322 353.99502563]
[59.48964310 344.46560669]
[50.78712082 332.12991333]
[45.73651886 317.90341187]
[44.71262741 302.84173584]
[47.79142761 288.06256104]
[54.74444962 274.66262817]
[65.05573273 263.63629150]
[77.96011353 255.80178833]
[92.50000000 251.74047852]
[92.50000000 236.74047852]
[92.50000000 221.74047852]
[92.50000000 206.74047852]
[92.50000000 191.74047852]
[92.50000000 176.74047852]
[92.50000000 161.74047852]
[92.50000000 146.74047852]
[92.50000000 131.74047852]
[92.50000000 116.74047852]
[79.56194305 109.15057373]
[66.46878815 116.46967316]
[53.37563705 123.78878021]
[45.44923782 138.14511108]
[29.05014801 138.18824768]
[21.04834175 123.87380981]
[29.67539215 109.92726898]
[46.05653000 110.69562531]
[59.14968491 103.37652588]
[72.24283600 96.05741882]
[68.38568115 81.56182098]
[53.38648987 81.71785736]
[39.66755295 89.59829712]
[26.86048126 81.99380493]
[11.86129284 82.14984131]
[-1.97163284 90.95791626]
[-16.38913918 83.14334106]
[-16.55972862 66.74508667]
[-2.30791664 58.63226318]
[11.70525646 67.15065765]
[26.70444489 66.99462128]
[39.35054016 59.12534332]
[53.23045349 66.71866608]
[68.22964478 66.56262970]
[77.49589539 69.27630615]
[85.47689056 73.69961548]
[91.90218353 79.54048157]
[96.55580902 86.46767426]
[99.28162384 94.12000275]
[107.53391266 81.59404755]
[115.78620148 69.06808472]
[124.03849030 56.54212189]
[132.29078674 44.01615906]
[140.54307556 31.49019623]
[133.23516846 14.00926971]
[140.43908691 -4.98379946]
[159.95596313 -14.42481041]
[159.95596313 -29.42481041]
[159.95596313 -44.42481232]
[149.06140137 -55.55793381]
[149.27508545 -70.77006531]
[159.95596313 -81.08775330]
[152.21865845 -94.88792419]
[159.95596313 -107.61519623]
[159.95596313 -122.61519623]
[159.95596313 -137.61518860]
[159.95596313 -152.61518860]
[159.95596313 -167.61518860]
[145.89877319 -173.39999390]
[135.12890625 -184.12745667]
[129.28866577 -198.16169739]
[129.26867676 -213.36262512]
[135.07196045 -227.41218567]
[145.81356812 -238.16793823]
[159.85549927 -243.98970032]
[175.05642700 -243.98970032]
[189.09834290 -238.16793823]
[199.83996582 -227.41218567]
[205.64324951 -213.36262512]
[205.62324524 -198.16169739]
[199.78302002 -184.12745667]
[189.01315308 -173.39999390]
[174.95596313 -167.61518860]
[174.95596313 -152.61518860]
[174.95596313 -137.61518860]
[174.95596313 -122.61519623]
[174.95596313 -107.61519623]
[182.69326782 -94.88792419]
[174.95596313 -81.08775330]
[185.63684082 -70.77006531]
[185.85050964 -55.55793381]
[174.95596313 -44.42481232]
[174.95596313 -29.42481041]
[174.95596313 -14.42481041]
[186.55729675 -4.91645193]
[201.26525879 -7.86193466]
[215.97322083 -10.80741692]
[230.68118286 -13.75289917]
[237.23155212 -27.69559669]
[250.57978821 -35.02212143]
[265.50610352 -33.10652924]
[276.31292725 -22.89131546]
[291.02087402 -25.83679771]
[305.72885132 -28.78227997]
[320.43679810 -31.72776222]
[328.99041748 -45.01727295]
[344.45333862 -48.28435898]
[357.65167236 -39.59070969]
[360.75509644 -24.09411812]
[351.92239380 -10.98843575]
[336.39385986 -8.04903126]
[323.38229370 -17.01980209]
[308.67431641 -14.07431889]
[293.96636963 -11.12883663]
[279.25839233 -8.18335438]
[273.21871948 5.40561724]
[260.18118286 12.92137623]
[245.04100037 11.30006695]
[233.62666321 0.95506197]
[218.91870117 3.90054440]
[204.21073914 6.84602690]
[189.50279236 9.79150963]
[185.04930115 29.06286621]
[170.34791565 40.34907532]
[153.06903076 39.74248505]
[144.81674194 52.26844788]
[136.56445312 64.79441071]
[128.31216431 77.32037354]
[120.05987549 89.84633636]
[111.80758667 102.37229919]
[107.50000000 116.74047852]
[107.50000000 131.74047852]
[107.50000000 146.74047852]
[107.50000000 161.74047852]
[107.50000000 176.74047852]
[107.50000000 191.74047852]
[107.50000000 206.74047852]
[107.50000000 221.74047852]
[107.50000000 236.74047852]
[107.50000000 251.74047852]
[122.03988647 255.80178833]
[134.94427490 263.63629150]
[145.25555420 274.66262817]
[152.20857239 288.06256104]
[155.28736877 302.84173584]
[154.26348877 317.90341187]
[149.21287537 332.12991333]
[140.51036072 344.46560669]
[128.80169678 353.99502563]
[114.95575714 360.01104736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 30]
[22 29]
[23 28]
[31 44]
[32 43]
[34 41]
[35 40]
[49 130]
[50 129]
[51 128]
[52 127]
[53 126]
[54 125]
[57 94]
[58 93]
[59 92]
[62 89]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[95 122]
[96 121]
[97 120]
[98 119]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
