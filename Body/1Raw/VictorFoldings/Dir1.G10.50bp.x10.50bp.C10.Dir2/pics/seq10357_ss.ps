%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACUCCCAGGGGGGGGGGCUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCxxxxxxxxxxCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUCCCCCCCCCCUCUACUCCAA\
) } def
/len { sequence length } bind def

/coor [
[64.54107666 360.23077393]
[51.32087708 352.95831299]
[40.43407440 342.51129150]
[32.62294388 329.60205078]
[28.42006111 315.11074829]
[28.11198997 300.02539062]
[31.71973038 285.37457275]
[38.99730301 272.15719604]
[49.44851303 261.27441406]
[62.36077499 253.46827698]
[76.85370636 249.27099609]
[76.54165649 234.27423096]
[76.22959900 219.27748108]
[75.91754150 204.28073120]
[75.60548401 189.28398132]
[75.29342651 174.28721619]
[74.98136902 159.29046631]
[74.66931915 144.29371643]
[74.35726166 129.29696655]
[86.42326355 92.43121338]
[79.24075317 79.26262665]
[72.05824280 66.09404755]
[64.87574005 52.92546463]
[57.69322968 39.75688171]
[50.51071930 26.58830070]
[41.48207092 32.65898514]
[28.37120247 33.44917679]
[13.37850666 32.98113632]
[-1.61418986 32.51309204]
[-16.60688591 32.04505157]
[-22.21022034 46.12973785]
[-32.29519653 57.44649887]
[-45.64400482 64.62877655]
[-60.64471054 66.80928040]
[-75.48590851 63.72469711]
[-88.37545013 55.74750900]
[-97.75685883 43.84099960]
[-102.49729156 29.44293976]
[-102.02430725 14.29196358]
[-96.39502716 0.21762526]
[-86.28921509 -11.08053112]
[-72.92719269 -18.23819733]
[-57.92248917 -20.39105034]
[-43.08700180 -17.27912140]
[-30.21218300 -9.27819443]
[-20.85272980 2.64558268]
[-16.13884354 17.05235481]
[-1.14614773 17.52039719]
[13.84654808 17.98843956]
[28.83924484 18.45648003]
[17.79672050 8.30450344]
[22.02728081 -6.08654785]
[36.80704498 -8.64750481]
[45.63289261 3.48239136]
[46.87976837 -11.46569538]
[48.12664413 -26.41378212]
[49.37351608 -41.36186981]
[39.44210815 -53.36207199]
[40.91955948 -68.50379944]
[52.42112350 -77.89792633]
[53.66799545 -92.84600830]
[51.25193024 -101.72376251]
[55.09947586 -108.09102631]
[56.65705490 -123.00993347]
[58.21463776 -137.92884827]
[43.98876572 -142.90089417]
[31.29331207 -151.02014160]
[20.81292534 -161.84872437]
[13.11280441 -174.80267334]
[8.60820198 -189.18341064]
[7.54204893 -204.21537781]
[9.97183990 -219.08792114]
[15.76653957 -232.99900818]
[24.61364746 -245.19841003]
[36.03604889 -255.02822876]
[49.41775131 -261.95837402]
[64.03709412 -265.61508179]
[79.10567474 -265.80117798]
[93.81085968 -262.50662231]
[107.35962677 -255.90905762]
[119.02129364 -246.36431885]
[128.16697693 -234.38711548]
[134.30345154 -220.62338257]
[137.09979248 -205.81536865]
[136.40518188 -190.76165771]
[132.25709534 -176.27407837]
[124.87922668 -163.13391113]
[114.66945648 -152.04981995]
[102.17839050 -143.61952209]
[88.07964325 -138.29766846]
[73.13355255 -136.37126160]
[71.57596588 -121.45235443]
[70.01838684 -106.53344727]
[68.61608124 -91.59913635]
[67.36920929 -76.65104675]
[77.15545654 -65.48123169]
[76.10388947 -50.30398178]
[64.32160187 -40.11499405]
[63.07472992 -25.16690826]
[61.82785416 -10.21882153]
[60.58097839 4.72926569]
[63.67930222 19.40579224]
[70.86180878 32.57437515]
[78.04431915 45.74295807]
[85.22682953 58.91153717]
[92.40933990 72.08012390]
[99.59184265 85.24870300]
[112.20297241 93.37024689]
[127.16322327 94.46155548]
[142.12347412 95.55286407]
[157.08372498 96.64418030]
[172.04397583 97.73548889]
[185.07460022 88.37694550]
[200.47615051 92.86825562]
[206.43386841 107.76406860]
[198.37750244 121.63758850]
[182.48721313 123.84624481]
[170.95265198 112.69573975]
[155.99241638 111.60442352]
[141.03216553 110.51311493]
[126.07191467 109.42180634]
[111.11166382 108.33049774]
[105.67224884 113.49409485]
[118.27790070 121.62413788]
[131.67921448 128.36244202]
[133.87223816 143.20126343]
[122.99297333 153.52801514]
[108.28849030 150.56521606]
[102.25711060 136.83258057]
[94.79342651 123.82130432]
[89.35401154 128.98490906]
[89.66606903 143.98165894]
[89.97812653 158.97840881]
[90.29018402 173.97515869]
[90.60224152 188.97192383]
[90.91429138 203.96867371]
[91.22634888 218.96542358]
[91.53840637 233.96217346]
[91.85046387 248.95893860]
[106.50545502 252.54969788]
[119.73126221 259.81195068]
[130.62612915 270.25054932]
[138.44723511 283.15377808]
[142.66130066 297.64184570]
[142.98101807 312.72692871]
[139.38459778 327.38052368]
[132.11723328 340.60354614]
[121.67443085 351.49438477]
[108.76820374 359.31048584]
[94.27851105 363.51895142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 107]
[21 106]
[22 105]
[23 104]
[24 103]
[25 102]
[27 50]
[28 49]
[29 48]
[30 47]
[54 101]
[55 100]
[56 99]
[57 98]
[60 95]
[61 94]
[63 93]
[64 92]
[65 91]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
