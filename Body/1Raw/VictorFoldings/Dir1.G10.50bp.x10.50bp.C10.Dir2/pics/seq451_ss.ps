%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCUAACAGGGGGGGGGGCCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAAxxxxxxxxxxUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACCCCCCCCCCCAACCCAAACA\
) } def
/len { sequence length } bind def

/coor [
[97.10884857 428.92626953]
[85.22457886 419.65118408]
[75.90586853 407.80108643]
[69.69450378 394.06491089]
[66.95159912 379.24127197]
[67.83663177 364.19201660]
[72.29813385 349.79208374]
[80.07673645 336.87863159]
[90.72018433 326.20248413]
[103.60969543 318.38430786]
[117.99588013 313.87863159]
[117.06025696 298.90783691]
[116.12462616 283.93704224]
[115.18899536 268.96624756]
[114.25336456 253.99545288]
[113.31774139 239.02467346]
[112.38211060 224.05387878]
[111.44647980 209.08308411]
[110.35517120 194.12283325]
[109.10829926 179.17474365]
[107.86141968 164.22665405]
[106.45912170 149.29235840]
[104.90153503 134.37344360]
[80.72646332 105.32109070]
[65.76621246 104.22978210]
[50.80596161 103.13847351]
[36.47944260 109.85124969]
[24.34881783 101.20849609]
[9.38856983 100.11717987]
[3.18450117 102.68954468]
[-2.51490474 101.82463074]
[-6.16711760 98.65653229]
[-21.06901932 96.94384003]
[-35.97092056 95.23115540]
[-50.87282562 93.51846313]
[-59.95619202 105.90345764]
[-74.02156830 112.07279968]
[-89.28543854 110.36696625]
[-101.64189911 101.24481964]
[-107.76712036 87.16017914]
[-106.01345062 71.90172577]
[-96.85262299 59.57392502]
[-82.74884796 53.49288177]
[-67.49597168 55.29436874]
[-55.19694138 64.49379730]
[-49.16013336 78.61656189]
[-34.25823212 80.32925415]
[-19.35633087 82.04193878]
[-4.45442772 83.75463104]
[10.47988033 85.15693665]
[25.44012833 86.24824524]
[38.69659042 79.45741272]
[51.89727402 88.17822266]
[66.85752106 89.26953125]
[81.81777191 90.36084747]
[92.90908813 80.26219177]
[93.22114563 65.26544189]
[93.53319550 50.26868820]
[86.08467102 36.31053543]
[94.08506775 23.74698448]
[94.08506775 8.74698448]
[93.77301025 -6.24976921]
[93.46095276 -21.24652290]
[93.14890289 -36.24327850]
[78.52767181 -40.00122833]
[65.46309662 -47.56558228]
[54.92465210 -58.37501144]
[47.69436646 -71.62738800]
[44.30877304 -86.33930206]
[45.01910019 -101.41902161]
[49.77264404 -115.74754333]
[58.21665955 -128.26158142]
[69.72454071 -138.03251648]
[83.44232178 -144.33529663]
[98.35206604 -146.70219421]
[113.34735870 -144.95756531]
[127.31546021 -139.23089600]
[139.21983337 -129.94711304]
[148.17710876 -117.79516602]
[153.52258301 -103.67679596]
[154.85958862 -88.63967133]
[152.08891296 -73.79965973]
[145.41616821 -60.25798416]
[135.33650208 -49.01952362]
[122.59790039 -40.91825104]
[108.14565277 -36.55533218]
[108.45771027 -21.55857849]
[108.76976776 -6.56182575]
[109.08182526 8.43492794]
[111.89461517 12.36732197]
[112.22291565 18.12262535]
[109.08182526 24.05904007]
[116.55267334 36.94452286]
[108.52995300 50.58074188]
[108.21789551 65.57749939]
[107.90583801 80.57424927]
[113.60634613 85.44807434]
[123.35417938 74.04720306]
[134.75489807 83.79521179]
[125.00737000 95.19573212]
[130.70788574 100.06955719]
[145.47393799 97.43069458]
[160.23999023 94.79182434]
[175.00604248 92.15296173]
[180.83836365 77.87053680]
[193.47958374 69.02729034]
[208.89595032 68.44507599]
[222.16816711 76.30967712]
[229.06111145 90.11152649]
[227.37525940 105.44650269]
[217.64855957 117.42127228]
[202.98478699 122.21472931]
[188.06307983 118.29729462]
[177.64491272 106.91902161]
[162.87886047 109.55788422]
[148.11280823 112.19674683]
[133.34674072 114.83560944]
[148.20123291 116.91992950]
[156.68132019 129.29281616]
[153.26600647 143.89881897]
[140.17886353 151.22866821]
[125.94031525 146.51020813]
[119.82044983 132.81585693]
[121.37802887 147.73477173]
[125.40450287 156.00758362]
[122.80950928 162.97978210]
[124.05638123 177.92787170]
[125.30326080 192.87596130]
[129.15675354 201.23074341]
[126.41727448 208.14746094]
[127.35290527 223.11824036]
[128.28852844 238.08903503]
[129.22416687 253.05982971]
[130.15979004 268.03060913]
[131.09541321 283.00140381]
[132.03105164 297.97219849]
[132.96667480 312.94299316]
[147.80191040 315.62240601]
[161.56454468 321.77493286]
[173.45443726 331.04281616]
[182.78031921 342.88726807]
[189.00001526 356.61968994]
[191.75190735 371.44165039]
[190.87600708 386.49142456]
[186.42321777 400.89407349]
[178.65245056 413.81222534]
[168.01547241 424.49484253]
[155.13070679 432.32083130]
[140.74725342 436.83523560]
[125.70135498 437.77554321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 128]
[20 127]
[21 126]
[22 124]
[23 123]
[24 55]
[25 54]
[26 53]
[28 51]
[29 50]
[32 49]
[33 48]
[34 47]
[35 46]
[56 96]
[57 95]
[58 94]
[60 92]
[61 89]
[62 88]
[63 87]
[64 86]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
