%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUAAAACUGGGGGGGGGGCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAxxxxxxxxxxUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUACCCCCCCCCCGCAAUAAAACU\
) } def
/len { sequence length } bind def

/coor [
[93.26384735 375.20852661]
[79.24189758 369.65551758]
[67.04194641 360.78918457]
[57.43087387 349.16687012]
[51.01284790 335.51916504]
[48.19131088 320.70397949]
[49.14362717 305.65258789]
[53.80993271 291.31118774]
[61.89689636 278.58120728]
[72.89617157 268.26293945]
[86.11633301 261.00497437]
[100.72634125 257.26351929]
[100.72634125 242.26353455]
[100.72634125 227.26353455]
[100.72634125 212.26353455]
[100.72634125 197.26353455]
[100.72634125 182.26353455]
[100.72634125 167.26353455]
[100.72634125 152.26353455]
[100.72634125 137.26353455]
[100.72634125 122.26353455]
[87.97308350 114.36705017]
[74.54563904 121.05312347]
[61.11818695 127.73920441]
[54.67702866 142.43243408]
[39.13697815 146.41819763]
[26.41903114 136.63896179]
[26.27931023 120.59652710]
[38.82499695 110.59725952]
[54.43211365 114.31175232]
[67.85956573 107.62567902]
[81.28701019 100.93959808]
[90.20316315 88.87716675]
[92.65608978 74.07909393]
[95.10901642 59.28101349]
[80.50705719 55.82278061]
[66.17512512 51.37613297]
[52.18006516 45.96179962]
[38.58712006 39.60503006]
[25.45966339 32.33546066]
[12.85890579 24.18698502]
[0.84359819 15.19759655]
[-10.53023911 5.40920639]
[-21.20957375 -5.13254595]
[-31.14461517 -16.37850952]
[-40.28903961 -28.27624893]
[-48.60021591 -40.77029419]
[-56.03938675 -53.80238724]
[-62.57186890 -67.31176758]
[-68.16720581 -81.23545074]
[-72.79930878 -95.50851440]
[-76.44657898 -110.06441498]
[-79.09201813 -124.83528137]
[-80.72328186 -139.75224304]
[-81.33277130 -154.74574280]
[-80.91764069 -169.74589539]
[-79.47982788 -184.68273926]
[-77.02603149 -199.48664856]
[-73.56770325 -214.08859253]
[-69.12096405 -228.42048645]
[-63.70653534 -242.41551208]
[-57.34967422 -256.00842285]
[-50.08001709 -269.13583374]
[-41.93145752 -281.73651123]
[-32.94198608 -293.75177002]
[-23.15352058 -305.12554932]
[-12.61169720 -315.80480957]
[-1.36566663 -325.73977661]
[10.53213501 -334.88412476]
[23.02623558 -343.19522095]
[36.05838013 -350.63430786]
[49.56780624 -357.16668701]
[63.49152374 -362.76193237]
[77.76461792 -367.39395142]
[92.32054138 -371.04110718]
[107.09142303 -373.68646240]
[122.00839233 -375.31762695]
[137.00190735 -375.92700195]
[152.00204468 -375.51177979]
[166.93888855 -374.07385254]
[181.74278259 -371.61996460]
[196.34469604 -368.16152954]
[210.67655945 -363.71469116]
[224.67155457 -358.30017090]
[238.26441956 -351.94323730]
[251.39176941 -344.67349243]
[263.99243164 -336.52484131]
[276.00759888 -327.53527832]
[287.38131714 -317.74673462]
[298.06051636 -307.20483398]
[307.99539185 -295.95874023]
[317.13967896 -284.06088257]
[325.45068359 -271.56674194]
[332.88967896 -258.53454590]
[339.42196655 -245.02507019]
[345.01712036 -231.10131836]
[349.64901733 -216.82818604]
[353.29611206 -202.27223206]
[355.94134521 -187.50134277]
[357.57241821 -172.58435059]
[358.18170166 -157.59083557]
[357.76635742 -142.59069824]
[356.32833862 -127.65386963]
[353.87435913 -112.84999847]
[350.41583252 -98.24810028]
[345.96890259 -83.91626740]
[340.55429077 -69.92131042]
[334.19723511 -56.32849503]
[326.92739868 -43.20118332]
[318.77868652 -30.60059166]
[309.78906250 -18.58546448]
[300.00042725 -7.21182442]
[289.45846558 3.46729898]
[278.21231079 13.40211391]
[266.31439209 22.54630089]
[253.82015991 30.85722351]
[240.78791809 38.29613113]
[227.27841187 44.82834244]
[213.35461426 50.42340088]
[199.08145142 55.05521393]
[184.52548218 58.70219421]
[169.75456238 61.34733200]
[154.83757019 62.97829819]
[139.84405518 63.58748627]
[124.84391785 63.17205429]
[109.90709686 61.73394012]
[107.45417023 76.53202057]
[105.00124359 91.33010101]
[112.23357391 92.55450439]
[118.61373138 99.14534760]
[120.61145782 110.08290863]
[115.72634125 122.26353455]
[115.72634125 137.26353455]
[115.72634125 152.26353455]
[115.72634125 167.26353455]
[115.72634125 182.26353455]
[115.72634125 197.26353455]
[115.72634125 212.26353455]
[115.72634125 227.26353455]
[115.72634125 242.26353455]
[115.72634125 257.26351929]
[130.33634949 261.00497437]
[143.55651855 268.26293945]
[154.55578613 278.58120728]
[162.64276123 291.31118774]
[167.30906677 305.65258789]
[168.26138306 320.70397949]
[165.43983459 335.51916504]
[159.02182007 349.16687012]
[149.41075134 360.78918457]
[137.21078491 369.65551758]
[123.18884277 375.20852661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 32]
[23 31]
[24 30]
[33 128]
[34 127]
[35 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
