%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAACUUAGGGGGGGGGGAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACxxxxxxxxxxAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGCCCCCCCCCCACUCCACUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.03863525]
[71.19830322 376.02261353]
[59.48964310 366.49319458]
[50.78712082 354.15753174]
[45.73651886 339.93099976]
[44.71262741 324.86932373]
[47.79142761 310.09017944]
[54.74444962 296.69024658]
[65.05573273 285.66390991]
[77.96011353 277.82940674]
[92.50000000 273.76809692]
[92.50000000 258.76809692]
[92.50000000 243.76808167]
[92.50000000 228.76808167]
[92.50000000 213.76808167]
[92.50000000 198.76808167]
[92.50000000 183.76808167]
[92.50000000 168.76808167]
[92.50000000 153.76808167]
[92.50000000 138.76808167]
[83.94670868 136.07640076]
[76.22123718 131.52435303]
[69.72196960 125.34670258]
[64.78404236 117.86199951]
[61.66209793 109.45619965]
[60.51712036 100.56278229]
[45.75106430 97.92391205]
[30.98500824 95.28504944]
[23.14128494 105.11319733]
[11.91664982 110.61846161]
[-0.51158547 110.80182648]
[-11.76186943 105.69001770]
[-19.70477867 96.31851959]
[-22.86601448 84.52245331]
[-37.50951767 81.27162933]
[-52.15301895 78.02080536]
[-61.18111038 90.28511810]
[-74.42024231 97.81142426]
[-89.57664490 99.29575348]
[-104.02439117 94.48092651]
[-115.26031494 84.20114136]
[-121.33773041 70.23744202]
[-121.20367432 55.00911713]
[-114.88139343 41.15456390]
[-103.46623993 31.07417488]
[-88.93597412 26.51443100]
[-73.80805206 28.26534081]
[-60.70346451 36.02354431]
[-51.89266968 48.44488907]
[-48.90219116 63.37730026]
[-34.25868988 66.62812805]
[-19.61518860 69.87895203]
[-7.00212717 57.59162521]
[10.61019325 55.26637268]
[26.25301361 64.01191711]
[33.62387085 80.51899719]
[48.38992691 83.15785980]
[63.15598297 85.79672241]
[80.01987457 65.94109344]
[105.57997131 60.90935516]
[110.48152161 46.73279572]
[110.33385468 37.53333664]
[115.63531494 32.31412888]
[120.83073425 18.24260902]
[126.02614594 4.17109013]
[131.22155762 -9.90042973]
[136.41697693 -23.97194862]
[141.61239624 -38.04346848]
[128.73648071 -45.82854080]
[117.56676483 -55.90990829]
[108.50702667 -67.92313385]
[101.88477325 -81.43395233]
[97.93938446 -95.95395660]
[96.81349945 -110.95825195]
[98.54780579 -125.90444183]
[103.07960510 -140.25224304]
[110.24509430 -153.48297119]
[119.78523254 -165.11836243]
[131.35514832 -174.73779297]
[144.53660583 -181.99353027]
[158.85308838 -186.62329102]
[173.78707886 -188.45970154]
[188.79872131 -187.43638611]
[203.34535217 -183.59033203]
[216.90110779 -177.06056213]
[228.97596741 -168.08314514]
[239.13343811 -156.98258972]
[247.00633240 -144.16018677]
[252.31004333 -130.07943726]
[254.85282898 -115.24938202]
[254.54280090 -100.20610046]
[251.39115906 -85.49339294]
[245.51181030 -71.64312744]
[237.11732483 -59.15597916]
[226.51112366 -48.48334503]
[214.07662964 -40.01103973]
[200.26335144 -34.04532623]
[185.57061768 -30.80186653]
[170.52955627 -30.39790726]
[155.68391418 -32.84805298]
[150.48849487 -18.77653313]
[145.29307556 -4.70501375]
[140.09767151 9.36650562]
[134.90225220 23.43802452]
[129.70683289 37.50954437]
[124.65808105 51.63434601]
[119.75653076 65.81090546]
[128.40657043 72.57225037]
[134.86056519 81.45396423]
[138.61958313 91.76943207]
[139.39302063 102.72118378]
[153.88861084 106.57833862]
[168.38421631 110.43550110]
[182.87980652 114.29266357]
[197.37539673 118.14981842]
[211.87100220 122.00698090]
[226.36659241 125.86413574]
[242.05000305 121.07218933]
[253.85545349 132.45478821]
[249.63851929 148.30247498]
[233.73721313 152.31253052]
[222.50944519 140.35974121]
[208.01383972 136.50257874]
[193.51824951 132.64541626]
[179.02264404 128.78825378]
[164.52705383 124.93109894]
[150.03144836 121.07393646]
[135.53585815 117.21678162]
[128.60314941 127.22267914]
[118.95214081 134.64146423]
[107.50000000 138.76808167]
[107.50000000 153.76808167]
[107.50000000 168.76808167]
[107.50000000 183.76808167]
[107.50000000 198.76808167]
[107.50000000 213.76808167]
[107.50000000 228.76808167]
[107.50000000 243.76808167]
[107.50000000 258.76809692]
[107.50000000 273.76809692]
[122.03988647 277.82940674]
[134.94427490 285.66390991]
[145.25555420 296.69024658]
[152.20857239 310.09017944]
[155.28736877 324.86932373]
[154.26348877 339.93099976]
[149.21287537 354.15753174]
[140.51036072 366.49319458]
[128.80169678 376.02261353]
[114.95575714 382.03863525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 58]
[27 57]
[28 56]
[34 52]
[35 51]
[36 50]
[60 107]
[61 106]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[68 100]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
