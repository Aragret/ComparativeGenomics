%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUAGGAGGGGGGGGGGGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUxxxxxxxxxxUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCCCCCCCCCCCAAUUAGGAG\
) } def
/len { sequence length } bind def

/coor [
[84.55335236 388.18566895]
[79.38809204 373.97964478]
[78.64128113 358.88217163]
[82.37931061 344.23571777]
[90.26981354 331.34262085]
[101.61116028 321.34936523]
[115.39489746 315.14453125]
[113.52728271 300.26126099]
[109.54810333 293.97540283]
[111.77896118 285.04931641]
[110.22138214 270.13040161]
[108.66379547 255.21148682]
[107.10621643 240.29257202]
[105.54863739 225.37367249]
[103.99105835 210.45475769]
[102.43347168 195.53584290]
[100.87589264 180.61692810]
[99.31831360 165.69801331]
[97.76073456 150.77909851]
[96.20314789 135.86019897]
[87.83779144 133.94775391]
[80.16114807 130.11294556]
[73.60792542 124.57291412]
[68.54922485 117.64137268]
[54.22662735 122.09819031]
[39.90402985 126.55500793]
[25.58143044 131.01182556]
[18.45401573 145.11769104]
[3.41394138 149.97276306]
[-10.61578178 142.69660950]
[-15.31156921 127.60604095]
[-7.88749218 113.65402985]
[7.25187540 109.11805725]
[21.12461472 116.68922424]
[35.44721222 112.23240662]
[49.76980972 107.77559662]
[64.09240723 103.31877899]
[67.60392761 84.16130829]
[80.56592560 69.62424469]
[99.19716644 63.94830322]
[101.98949432 49.21049500]
[104.78182220 34.47269058]
[107.11292267 19.65493202]
[108.98053741 4.77165174]
[110.84815216 -10.11162853]
[100.83731079 -37.82190704]
[97.73899078 -52.49843216]
[84.77977753 -61.14114761]
[81.84671021 -76.06936646]
[90.16608429 -88.37073517]
[87.06776428 -103.04726410]
[83.96944427 -117.72378540]
[80.71862030 -132.36729431]
[77.31563568 -146.97618103]
[73.91265869 -161.58506775]
[68.88748932 -169.29217529]
[70.59420013 -176.53323364]
[67.49588013 -191.20976257]
[52.42885208 -191.70788574]
[37.91904831 -195.79798889]
[24.81004524 -203.24227905]
[13.86398411 -213.60795593]
[5.71725559 -226.29237366]
[0.84349966 -240.55805969]
[-0.47393030 -255.57563782]
[1.84155953 -270.47201538]
[7.65534973 -284.38113403]
[16.62943459 -296.49429321]
[28.24207115 -306.10733032]
[41.81811523 -312.66128540]
[56.56827927 -315.77514648]
[71.63500214 -315.26788330]
[86.14232635 -311.16897583]
[99.24681091 -303.71673584]
[110.18658447 -293.34445190]
[118.32562256 -280.65509033]
[123.19072723 -266.38644409]
[124.49905396 -251.36807251]
[122.17453766 -236.47309875]
[116.35231018 -222.56752014]
[107.37088776 -210.45977783]
[95.75242615 -200.85380554]
[82.17240906 -194.30807495]
[85.27072906 -179.63154602]
[88.52155304 -164.98805237]
[91.92453003 -150.37916565]
[95.32750702 -135.77026367]
[99.93788910 -129.93159485]
[98.64596558 -120.82210541]
[101.74429321 -106.14558411]
[104.84261322 -91.46905518]
[117.42431641 -83.58006287]
[120.77552795 -68.74011230]
[112.41551971 -55.59675217]
[115.51383972 -40.92022705]
[128.82899475 -34.01322937]
[142.61137390 -39.93319321]
[156.39375305 -45.85315323]
[158.12062073 -61.11465836]
[167.25978088 -73.45853424]
[181.35284424 -79.56434631]
[196.60887146 -77.78965759]
[208.92404175 -68.61184692]
[214.98564148 -54.49971008]
[213.16314697 -39.24932861]
[203.94677734 -26.96298790]
[189.81570435 -20.94564819]
[174.57112122 -22.81594276]
[162.31372070 -32.07077408]
[148.53134155 -26.15081024]
[134.74896240 -20.23084831]
[125.73143005 -8.24401474]
[123.86381531 6.63926506]
[121.99620056 21.52254486]
[123.91550446 24.55301666]
[124.42486572 28.68124008]
[123.01677704 33.21661758]
[119.51962280 37.26501465]
[116.72730255 52.00281906]
[113.93497467 66.74062347]
[125.91789246 74.92745972]
[133.70301819 87.17517853]
[136.02941895 101.50006866]
[132.52030945 115.58200073]
[123.74404144 127.14019012]
[111.12206268 134.30261230]
[112.67964172 149.22152710]
[114.23722839 164.14044189]
[115.79480743 179.05934143]
[117.35238647 193.97825623]
[118.90996552 208.89717102]
[120.46755219 223.81608582]
[122.02513123 238.73500061]
[123.58271027 253.65391541]
[125.14028931 268.57281494]
[126.69787598 283.49172974]
[128.41056824 298.39364624]
[130.27818298 313.27691650]
[145.16763306 315.88372803]
[158.62646484 322.76498413]
[169.45791626 333.30874634]
[176.69885254 346.57751465]
[179.70544434 361.39141846]
[178.21031189 376.43322754]
[172.34643555 390.36541748]
[162.63519287 401.94918823]
[149.94013977 410.15444946]
[135.39007568 414.25167847]
[120.27879333 413.87649536]
[105.94998932 409.06225586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 138]
[8 137]
[10 136]
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[24 37]
[25 36]
[26 35]
[27 34]
[40 120]
[41 119]
[42 118]
[43 114]
[44 113]
[45 112]
[46 95]
[47 94]
[50 91]
[51 90]
[52 89]
[53 87]
[54 86]
[55 85]
[57 84]
[58 83]
[96 111]
[97 110]
[98 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
