%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAAAAAGGGGGGGGGGCAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCxxxxxxxxxxUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUCCCCCCCCCCACCCCAGAAA\
) } def
/len { sequence length } bind def

/coor [
[80.68328094 420.78717041]
[66.83734131 414.77114868]
[55.12868118 405.24172974]
[46.42615891 392.90606689]
[41.37555695 378.67953491]
[40.35166550 363.61785889]
[43.43046188 348.83871460]
[50.38348389 335.43878174]
[60.69477081 324.41244507]
[73.59915161 316.57794189]
[88.13903809 312.51663208]
[88.13903809 297.51663208]
[88.13903809 282.51663208]
[88.13903809 267.51663208]
[88.13903809 252.51661682]
[88.13903809 237.51661682]
[88.13903809 222.51661682]
[88.13903809 207.51661682]
[88.13903809 192.51661682]
[88.13903809 177.51661682]
[85.85735321 174.74870300]
[84.83795929 170.71601868]
[85.67040253 166.04061890]
[88.63629150 161.58830261]
[89.57191467 146.61750793]
[90.50754547 131.64671326]
[91.44317627 116.67591858]
[78.47631073 98.56686401]
[91.83731079 77.00633240]
[82.81977844 65.01950073]
[73.80224609 53.03266907]
[60.29899216 52.68663406]
[49.62870407 44.72592545]
[45.57143402 32.25143433]
[49.40175247 19.90941429]
[40.63554382 7.73757744]
[31.86933708 -4.43425941]
[22.97698784 -16.51424789]
[12.64978218 -27.39307213]
[1.14797926 -37.02159882]
[-10.35382462 -46.65012360]
[-25.90220261 -49.57561874]
[-30.69472122 -63.67813873]
[-42.19652557 -73.30666351]
[-48.73417664 -74.84504700]
[-52.85352325 -78.87770081]
[-53.96565247 -83.58287811]
[-65.05696869 -93.68152618]
[-76.14828491 -103.78017426]
[-87.23960114 -113.87882233]
[-101.84831238 -109.13739777]
[-116.86718750 -112.35124969]
[-128.25622559 -122.65586853]
[-132.95184326 -137.27937317]
[-129.69093323 -152.28810120]
[-119.35066223 -163.64479065]
[-104.71250916 -168.29454041]
[-89.71407318 -164.98660278]
[-78.38985443 -154.61077881]
[-73.78601074 -139.95812988]
[-77.14094543 -124.97013855]
[-66.04963684 -114.87149048]
[-54.95831680 -104.77284241]
[-43.86700439 -94.67419434]
[-32.56799698 -84.80847168]
[-21.06619453 -75.17993927]
[-6.34050274 -72.94314575]
[-0.72529793 -58.15192795]
[10.77650547 -48.52340317]
[22.27830887 -38.89487457]
[18.87348366 -53.50333786]
[22.52305031 -68.05258942]
[32.41975403 -79.32446289]
[46.37454224 -84.82573700]
[61.30073547 -83.33956909]
[73.89680481 -75.19468689]
[81.37660980 -62.19266891]
[82.08569336 -47.20943832]
[75.86721039 -33.55914688]
[64.09662628 -24.26111603]
[49.37749100 -21.37198257]
[34.96382141 -25.53177834]
[41.54079056 -22.05484009]
[44.04117584 -13.20046616]
[52.80738068 -1.02862978]
[61.57358932 11.14320660]
[78.24674225 13.10887718]
[88.56748199 26.77513123]
[85.78907776 44.01514053]
[94.80661011 56.00197220]
[103.82414246 67.98880768]
[117.89566040 73.18421936]
[132.53915405 69.93339539]
[147.18266296 66.68257141]
[161.82615662 63.43174362]
[176.46966553 60.18091583]
[191.11315918 56.93009186]
[205.75666809 53.67926407]
[220.40016174 50.42844009]
[235.04367065 47.17761230]
[249.68716431 43.92678833]
[252.67764282 28.99437714]
[261.48843384 16.57303047]
[274.59301758 8.81482697]
[289.72094727 7.06391811]
[304.25122070 11.62366104]
[315.66638184 21.70405197]
[321.98864746 35.55860138]
[322.12271118 50.78693008]
[316.04528809 64.75063324]
[304.80938721 75.03041077]
[290.36163330 79.84523773]
[275.20523071 78.36091614]
[261.96609497 70.83460236]
[252.93800354 58.57028961]
[238.29449463 61.82111359]
[223.65100098 65.07193756]
[209.00749207 68.32276917]
[194.36399841 71.57359314]
[179.72048950 74.82441711]
[165.07699585 78.07524109]
[150.43348694 81.32607269]
[135.78999329 84.57689667]
[121.14648438 87.82772064]
[122.47493744 101.32711029]
[116.54294586 112.32357788]
[106.41396332 117.61154938]
[105.47834015 132.58233643]
[104.54270935 147.55313110]
[103.60707855 162.52392578]
[103.13903809 177.51661682]
[103.13903809 192.51661682]
[103.13903809 207.51661682]
[103.13903809 222.51661682]
[103.13903809 237.51661682]
[103.13903809 252.51661682]
[103.13903809 267.51663208]
[103.13903809 282.51663208]
[103.13903809 297.51663208]
[103.13903809 312.51663208]
[117.67892456 316.57794189]
[130.58331299 324.41244507]
[140.89459229 335.43878174]
[147.84761047 348.83871460]
[150.92640686 363.61785889]
[149.90251160 378.67953491]
[144.85191345 392.90606689]
[136.14939880 405.24172974]
[124.44073486 414.77114868]
[110.59479523 420.78717041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[26 128]
[27 127]
[29 91]
[30 90]
[31 89]
[35 86]
[36 85]
[37 84]
[38 82]
[39 70]
[40 69]
[41 68]
[43 66]
[44 65]
[47 64]
[48 63]
[49 62]
[50 61]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
