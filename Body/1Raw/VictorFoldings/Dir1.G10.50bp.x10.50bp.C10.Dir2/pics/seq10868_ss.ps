%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCAAAUCGGGGGGGGGGAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCAxxxxxxxxxxCCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACCCCCCCCCCCAGUCAAAUC\
) } def
/len { sequence length } bind def

/coor [
[5.59110260 260.89981079]
[-5.28994656 253.99940491]
[-15.66873741 246.36437988]
[-25.49576187 238.03115845]
[-34.72414017 229.03950500]
[-43.30985260 219.43229675]
[-51.21194077 209.25537109]
[-58.39271545 198.55728149]
[-64.81791687 187.38903809]
[-78.34210968 193.87719727]
[-91.86629486 200.36535645]
[-105.39048767 206.85353088]
[-118.91467285 213.34169006]
[-132.43887329 219.82984924]
[-145.96305847 226.31802368]
[-155.05874634 239.26325989]
[-169.88053894 237.79231262]
[-183.40472412 244.28048706]
[-196.92890930 250.76864624]
[-210.45310974 257.25680542]
[-223.97729492 263.74496460]
[-233.07298279 276.69021606]
[-247.89477539 275.21926880]
[-251.60044861 290.41143799]
[-264.23501587 299.62564087]
[-279.83285522 298.51119995]
[-291.02911377 287.59432983]
[-292.53726196 272.02963257]
[-283.64520264 259.16632080]
[-268.55151367 255.07798767]
[-254.38293457 261.69509888]
[-246.25459290 249.21392822]
[-230.46545410 250.22079468]
[-216.94126892 243.73262024]
[-203.41708374 237.24446106]
[-189.89289856 230.75628662]
[-176.36869812 224.26812744]
[-168.24035645 211.78697205]
[-152.45121765 212.79383850]
[-138.92703247 206.30566406]
[-125.40283966 199.81750488]
[-111.87865448 193.32933044]
[-98.35446167 186.84117126]
[-84.83026886 180.35301208]
[-71.30608368 173.86483765]
[-79.50484467 150.79173279]
[-84.61097717 126.84355927]
[-86.53650665 102.43289948]
[-85.24827576 77.98032379]
[-80.76845551 53.90712357]
[-73.17424774 30.62803650]
[-62.59647369 8.54413605]
[-49.21738434 -11.96410275]
[-33.26748276 -30.54335213]
[-15.02155972 -46.87351608]
[-23.78776741 -59.04535294]
[-32.55397415 -71.21718597]
[-48.19153976 -73.50675201]
[-57.56285477 -86.23286438]
[-55.10808945 -101.84535217]
[-42.28360748 -111.08159637]
[-26.69794846 -108.46189880]
[-17.59780884 -95.54048157]
[-20.38213730 -79.98339844]
[-11.61593056 -67.81156158]
[-2.84972310 -55.63972092]
[6.85614300 -61.63542557]
[16.91035080 -67.02664185]
[27.27529716 -71.79320526]
[37.91222000 -75.91729736]
[48.78134155 -79.38349152]
[59.84201050 -82.17882538]
[71.05286407 -84.29283905]
[82.37197113 -85.71763611]
[93.75701141 -86.44788361]
[105.16539001 -86.48085022]
[116.55445862 -85.81641388]
[127.88161469 -84.45705414]
[139.10449219 -82.40785980]
[150.18113708 -79.67649078]
[161.07009888 -76.27317047]
[171.73068237 -72.21061707]
[182.12300110 -67.50402832]
[192.20820618 -62.17100906]
[201.94854736 -56.23149872]
[211.30763245 -49.70771027]
[220.25045776 -42.62404251]
[228.74354553 -35.00698471]
[236.75517273 -26.88502884]
[244.25535583 -18.28854370]
[251.21604919 -9.24968338]
[257.61123657 0.19775142]
[263.41696167 10.01842785]
[268.61154175 20.17561913]
[273.17556763 30.63134003]
[277.09194946 41.34648514]
[280.34600830 52.28098679]
[294.98950195 49.03015900]
[309.63302612 45.77933502]
[324.27651978 42.52850723]
[337.51605225 29.77334023]
[354.03454590 35.61627579]
[368.60723877 32.06151199]
[383.17993164 28.50675011]
[397.75265503 24.95198822]
[409.22665405 13.23536491]
[425.04107666 17.57535362]
[428.92742920 33.50734711]
[416.88772583 44.64187622]
[401.30740356 39.52469254]
[386.73471069 43.07945251]
[372.16198730 46.63421631]
[357.58929443 50.18897629]
[351.00912476 60.38744736]
[338.84790039 63.44087219]
[327.52734375 57.17200851]
[312.88385010 60.42283630]
[298.24032593 63.67366028]
[283.59683228 66.92448425]
[285.44198608 79.67627716]
[286.40255737 92.52502441]
[286.47393799 105.40942383]
[285.65579224 118.26802063]
[283.95199585 131.03947449]
[281.37072754 143.66285706]
[277.92428589 156.07797241]
[273.62908936 168.22557068]
[268.50564575 180.04771423]
[262.57839966 191.48800659]
[255.87559509 202.49189758]
[248.42922974 213.00686646]
[240.27482605 222.98275757]
[231.45127869 232.37200928]
[222.00068665 241.12980652]
[211.96810913 249.21438599]
[201.40142822 256.58715820]
[190.35102844 263.21298218]
[178.86962891 269.06024170]
[167.01200867 274.10107422]
[154.83473206 278.31137085]
[142.39587402 281.67108154]
[129.75477600 284.16418457]
[116.97174072 285.77874756]
[104.10774231 286.50714111]
[91.22415924 286.34585571]
[78.38243103 285.29562378]
[65.64382935 283.36151123]
[53.06911087 280.55270386]
[40.71826553 276.88262939]
[28.65020752 272.36877441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[23 31]
[55 66]
[56 65]
[57 64]
[97 119]
[98 118]
[99 117]
[100 116]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
