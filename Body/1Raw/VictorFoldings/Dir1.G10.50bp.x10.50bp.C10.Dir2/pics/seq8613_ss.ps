%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCAUUCAACGGGGGGGGGGCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUAxxxxxxxxxxACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCCCCCCCCCCCACUCAUUCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 403.21102905]
[70.75619507 398.40161133]
[57.85220718 390.63623047]
[46.91955185 380.27807617]
[38.46956635 367.81164551]
[32.89747238 353.82000732]
[30.46388245 338.95758057]
[31.28262329 323.91952515]
[35.31539917 309.40914917]
[42.37359238 296.10516357]
[52.12707901 284.62982178]
[64.11966705 275.51983643]
[77.79044342 269.20129395]
[92.50000000 265.96972656]
[92.50000000 250.96972656]
[92.50000000 235.96972656]
[92.50000000 220.96972656]
[92.50000000 205.96972656]
[92.50000000 190.96972656]
[92.50000000 175.96972656]
[92.50000000 160.96972656]
[92.50000000 145.96972656]
[92.50000000 130.96972656]
[84.19456482 127.66878510]
[77.13249207 122.19123077]
[71.86934662 114.96795654]
[68.81914520 106.56719971]
[53.82590485 106.11703491]
[38.83266068 105.66687775]
[23.83941650 105.21671295]
[13.22776890 119.86146545]
[-3.88782001 125.19955444]
[-20.64795113 119.28782654]
[-30.45254517 104.65289307]
[-45.45179367 104.80296326]
[-60.45104599 104.95304108]
[-72.66278839 115.35750580]
[-88.38310242 112.15574646]
[-95.55270386 97.80387115]
[-88.67169952 83.31141663]
[-73.01859283 79.79574585]
[-60.60111618 89.95378876]
[-45.60186768 89.80371857]
[-30.60261917 89.65364075]
[-25.07424355 78.77521515]
[-15.37451553 71.25256348]
[-3.32125521 68.57368469]
[8.79300690 71.31140137]
[18.63705444 79.00221252]
[24.28957748 90.22347260]
[39.28282166 90.67362976]
[54.27606583 91.12379456]
[69.26931000 91.57395172]
[78.17361450 76.78400421]
[93.48432922 68.80834198]
[110.70751190 69.98795319]
[118.93155670 57.44343185]
[127.15560913 44.89891052]
[135.37965393 32.35439301]
[123.62644958 23.01751137]
[112.77099609 12.65052700]
[102.90324402 1.33934784]
[94.10497284 -10.82229805]
[86.44908142 -23.73363304]
[79.99901581 -37.28767014]
[74.80821991 -51.37208557]
[70.91970062 -65.87017822]
[68.36569977 -80.66181183]
[67.16735840 -95.62440491]
[67.33462524 -110.63397980]
[68.86610413 -125.56615448]
[71.74910736 -140.29719543]
[75.95973969 -154.70503235]
[81.46311951 -168.67027283]
[88.21363831 -182.07720947]
[96.15534973 -194.81472778]
[105.22245789 -206.77728271]
[115.33982849 -217.86575317]
[126.42361450 -227.98825073]
[138.38197327 -237.06088257]
[151.11581421 -245.00849915]
[164.51962280 -251.76521301]
[178.48231506 -257.27505493]
[192.88819885 -261.49237061]
[207.61790466 -264.38217163]
[222.54937744 -265.92056274]
[237.55886841 -266.09478760]
[252.52201843 -264.90335083]
[267.31481934 -262.35620117]
[281.81472778 -258.47439575]
[295.90151978 -253.29011536]
[309.45855713 -246.84631348]
[322.37344360 -239.19641113]
[334.53915405 -230.40376282]
[345.85488892 -220.54124451]
[356.22689819 -209.69059753]
[365.56921387 -197.94171143]
[373.80444336 -185.39195251]
[380.86431885 -172.14530945]
[386.69033813 -158.31155396]
[391.23425293 -144.00532532]
[394.45837402 -129.34516907]
[396.33602905 -114.45256805]
[396.85162354 -99.45092010]
[396.00088501 -84.46454620]
[393.79089355 -69.61762238]
[390.23992920 -55.03318024]
[385.37741089 -40.83207703]
[379.24368286 -27.13198662]
[371.88952637 -14.04643536]
[363.37588501 -1.68385708]
[353.77334595 9.85330677]
[343.16143799 20.46945381]
[331.62808228 30.07661247]
[319.26892090 38.59517288]
[306.18630981 45.95454788]
[292.48864746 52.09375381]
[278.28948975 56.96191788]
[263.70648193 60.51869965]
[248.86042786 62.73462677]
[233.87438965 63.59133530]
[218.87254333 63.08172607]
[203.97918701 61.21002579]
[189.31774902 57.99174118]
[175.00970459 53.45354080]
[161.17362976 47.63302994]
[147.92417908 40.57844162]
[139.70013428 53.12296295]
[131.47607422 65.66748047]
[123.25202942 78.21200562]
[131.01576233 92.69274139]
[130.53303528 109.11634064]
[121.93218231 123.11608124]
[107.50000000 130.96972656]
[107.50000000 145.96972656]
[107.50000000 160.96972656]
[107.50000000 175.96972656]
[107.50000000 190.96972656]
[107.50000000 205.96972656]
[107.50000000 220.96972656]
[107.50000000 235.96972656]
[107.50000000 250.96972656]
[107.50000000 265.96972656]
[122.20955658 269.20129395]
[135.88034058 275.51983643]
[147.87292480 284.62982178]
[157.62640381 296.10516357]
[164.68460083 309.40914917]
[168.71737671 323.91952515]
[169.53611755 338.95758057]
[167.10252380 353.82000732]
[161.53042603 367.81164551]
[153.08044434 380.27807617]
[142.14779663 390.63623047]
[129.24380493 398.40161133]
[114.97203827 403.21102905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[27 53]
[28 52]
[29 51]
[30 50]
[34 44]
[35 43]
[36 42]
[56 130]
[57 129]
[58 128]
[59 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
