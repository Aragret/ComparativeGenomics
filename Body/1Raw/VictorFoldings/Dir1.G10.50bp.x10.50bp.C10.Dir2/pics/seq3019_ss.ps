%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGGGUUUGGGGGGGGGGACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCUAUUAAAxxxxxxxxxxCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGCCCCCCCCCCAACAGGGUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 363.54840088]
[71.19830322 357.53237915]
[59.48964310 348.00296021]
[50.78712082 335.66729736]
[45.73651886 321.44076538]
[44.71262741 306.37908936]
[47.79142761 291.59994507]
[54.74444962 278.20001221]
[65.05573273 267.17367554]
[77.96011353 259.33917236]
[92.50000000 255.27784729]
[92.50000000 240.27784729]
[92.50000000 225.27784729]
[92.50000000 210.27784729]
[92.50000000 195.27784729]
[92.50000000 180.27784729]
[92.50000000 165.27784729]
[92.50000000 150.27784729]
[92.50000000 135.27784729]
[92.50000000 120.27784729]
[89.06021881 118.64838409]
[85.95948792 116.44095612]
[72.86633301 123.76006317]
[64.93993378 138.11639404]
[48.54084396 138.15953064]
[40.53903961 123.84509277]
[49.16608810 109.89855194]
[65.54722595 110.66690826]
[78.64038086 103.34780121]
[79.02392578 94.76116180]
[82.72267151 87.00250244]
[89.15203857 81.29804993]
[97.29589081 78.54938507]
[100.69886780 63.94049072]
[104.10184479 49.33160019]
[107.50482941 34.72270584]
[99.91491699 21.78465080]
[85.50270081 17.62676239]
[71.09048462 13.46887589]
[61.91114426 14.09462070]
[56.42337418 9.07167244]
[42.10077667 4.61485672]
[27.28677750 10.77318668]
[13.30572891 2.90490746]
[10.88269234 -12.95411015]
[21.87641525 -24.63818550]
[37.85345459 -23.18429565]
[46.55759048 -9.70774078]
[60.88018799 -5.25092459]
[75.24837494 -0.94334018]
[89.66059113 3.21454716]
[104.07280731 7.37243462]
[117.91602325 1.59616220]
[125.09853363 -11.57242012]
[132.28103638 -24.74100304]
[139.46354675 -37.90958405]
[127.05195618 -46.35464859]
[115.52790070 -55.97561264]
[105.00236511 -66.67981720]
[95.57672882 -78.36416626]
[87.34175873 -90.91614532]
[80.37677002 -104.21485901]
[74.74883270 -118.13222504]
[70.51216125 -132.53421021]
[67.70755005 -147.28213501]
[66.36200714 -162.23393250]
[66.48849487 -177.24562073]
[68.08580017 -192.17262268]
[71.13853455 -206.87118530]
[75.61729431 -221.19973755]
[81.47894287 -235.02029419]
[88.66704559 -248.19975281]
[97.11235809 -260.61117554]
[106.73355103 -272.13504028]
[117.43796539 -282.66036987]
[129.12251282 -292.08575439]
[141.67465210 -300.32046509]
[154.97349548 -307.28521729]
[168.89097595 -312.91284180]
[183.29306030 -317.14923096]
[198.04103088 -319.95355225]
[212.99284363 -321.29879761]
[228.00453186 -321.17199707]
[242.93150330 -319.57440186]
[257.63000488 -316.52139282]
[271.95846558 -312.04232788]
[285.77890015 -306.18041992]
[298.95822144 -298.99203491]
[311.36947632 -290.54647827]
[322.89315796 -280.92504883]
[333.41824341 -270.22042847]
[342.84341431 -258.53570557]
[351.07788086 -245.98339844]
[358.04235840 -232.68441772]
[363.66973877 -218.76681519]
[367.90582275 -204.36465454]
[370.70983887 -189.61663818]
[372.05477905 -174.66477966]
[371.92770386 -159.65309143]
[370.32980347 -144.72615051]
[367.27648926 -130.02772522]
[362.79714966 -115.69934082]
[356.93493652 -101.87902069]
[349.74630737 -88.69985199]
[341.30050659 -76.28876495]
[331.67886353 -64.76528931]
[320.97402954 -54.24039841]
[309.28909302 -44.81546021]
[296.73663330 -36.58124542]
[283.43750000 -29.61705208]
[269.51980591 -23.98995399]
[255.11755371 -19.75414276]
[240.36946106 -16.95041656]
[225.41758728 -15.60577202]
[210.40589905 -15.73316193]
[195.47900391 -17.33135986]
[180.78062439 -20.38497353]
[166.45233154 -24.86459160]
[152.63212585 -30.72707558]
[145.44961548 -17.55849457]
[138.26712036 -4.38991165]
[131.08460999 8.77867126]
[135.34536743 15.48012352]
[135.63282776 24.25096893]
[131.04649353 32.69899750]
[122.11371613 38.12568283]
[118.71073914 52.73457718]
[115.30776215 67.34346771]
[111.90478516 81.95236206]
[121.47899628 102.46859741]
[107.50000000 120.27784729]
[107.50000000 135.27784729]
[107.50000000 150.27784729]
[107.50000000 165.27784729]
[107.50000000 180.27784729]
[107.50000000 195.27784729]
[107.50000000 210.27784729]
[107.50000000 225.27784729]
[107.50000000 240.27784729]
[107.50000000 255.27784729]
[122.03988647 259.33917236]
[134.94427490 267.17367554]
[145.25555420 278.20001221]
[152.20857239 291.59994507]
[155.28736877 306.37908936]
[154.26348877 321.44076538]
[149.21287537 335.66729736]
[140.51036072 348.00296021]
[128.80169678 357.53237915]
[114.95575714 363.54840088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 29]
[23 28]
[33 129]
[34 128]
[35 127]
[36 126]
[37 52]
[38 51]
[39 50]
[41 49]
[42 48]
[53 122]
[54 121]
[55 120]
[56 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
