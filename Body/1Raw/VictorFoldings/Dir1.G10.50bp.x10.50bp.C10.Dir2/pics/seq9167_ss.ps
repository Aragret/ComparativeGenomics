%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACAUUUGGGGGGGGGGUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUxxxxxxxxxxAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCCCCCCCCCCCUCAACUUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 394.18112183]
[71.19830322 388.16510010]
[59.48964310 378.63568115]
[50.78712082 366.30001831]
[45.73651886 352.07348633]
[44.71262741 337.01181030]
[47.79142761 322.23263550]
[54.74444962 308.83273315]
[65.05573273 297.80639648]
[77.96011353 289.97186279]
[92.50000000 285.91055298]
[92.50000000 270.91055298]
[92.50000000 255.91056824]
[92.50000000 240.91056824]
[92.50000000 225.91056824]
[92.50000000 210.91056824]
[92.50000000 195.91056824]
[92.50000000 180.91056824]
[92.50000000 165.91056824]
[92.50000000 150.91056824]
[73.58190155 145.86143494]
[57.42783356 133.85481262]
[46.56206512 116.26578522]
[31.91856384 119.51660919]
[17.27506256 122.76743317]
[2.74012685 126.47359467]
[-11.67208958 130.63148499]
[-26.08430481 134.78936768]
[-40.49652100 138.94725037]
[-54.03898621 149.14715576]
[-67.58919525 138.95755005]
[-61.54887390 123.11611938]
[-44.65440750 124.53504181]
[-30.24219322 120.37715149]
[-15.82997704 116.21926880]
[-1.41776061 112.06137848]
[0.60923338 109.10185242]
[4.20132256 107.00457764]
[8.92426682 106.50841522]
[14.02423763 108.12393188]
[28.66773796 104.87310791]
[43.31124115 101.62228394]
[44.86882019 86.70336914]
[31.21257973 80.49796295]
[17.55633926 74.29255676]
[2.09085512 78.55850983]
[-10.80174255 69.01071167]
[-11.23135757 52.97341156]
[1.13157511 42.74905396]
[16.80327034 46.18089294]
[23.76174545 60.63631439]
[37.41798782 66.84172058]
[51.07422638 73.04712677]
[67.59547424 57.23001480]
[88.29401398 49.88906860]
[87.04714203 34.94097900]
[78.18948364 21.83173180]
[84.84204865 8.50534439]
[83.59517670 -6.44274235]
[82.34829712 -21.39082909]
[80.63561249 -36.29273224]
[78.45877075 -51.13393784]
[76.28193665 -65.97514343]
[61.39463425 -68.74046326]
[48.21309280 -76.19201660]
[38.16714859 -87.52152252]
[32.34650421 -101.50003815]
[31.38254547 -116.61127472]
[35.37983322 -131.21607971]
[43.90477371 -143.73023987]
[56.03264236 -152.79631042]
[70.44789886 -157.43086243]
[85.58688354 -157.13117981]
[99.80743408 -151.92977905]
[111.56701660 -142.39085388]
[119.59002686 -129.54911804]
[123.00620270 -114.79756927]
[121.44497681 -99.73631287]
[115.07569122 -85.99909973]
[104.58924866 -75.07604218]
[91.12314606 -68.15197754]
[93.29998016 -53.31077576]
[95.47681427 -38.46957016]
[98.13603210 -36.06207275]
[99.72987366 -32.22002029]
[99.58473969 -27.47330284]
[97.29638672 -22.63770485]
[98.54325867 -7.68961716]
[99.79013824 7.25847006]
[108.55861664 19.29853249]
[101.99523163 33.69410706]
[103.24210358 48.64219284]
[117.16264343 51.48629761]
[129.77485657 58.02865601]
[140.11729431 67.77053833]
[153.05534363 60.18062973]
[154.43618774 44.72511673]
[164.66317749 33.05513763]
[179.80383301 29.65804291]
[194.03625488 35.84008026]
[201.88780212 49.22413254]
[200.33938599 64.66375732]
[189.98640442 76.22210693]
[174.80978394 79.45475769]
[160.64526367 73.11868286]
[147.70719910 80.70859528]
[149.91098022 87.46882629]
[151.16186523 94.46829224]
[151.43597412 101.57337952]
[166.20204163 104.21224213]
[180.96809387 106.85110474]
[195.73414612 109.48996735]
[210.50019836 112.12883759]
[225.26625061 114.76770020]
[238.08837891 105.52818298]
[253.67471313 108.14389801]
[262.77813721 121.06298828]
[259.99780273 136.62078857]
[246.98316956 145.58712769]
[231.45562744 142.64244080]
[222.62739563 129.53375244]
[207.86134338 126.89488983]
[193.09527588 124.25602722]
[178.32922363 121.61716461]
[163.56317139 118.97829437]
[148.79711914 116.33943176]
[144.04766846 126.60710907]
[137.16943359 135.58888245]
[128.49482727 142.85067749]
[118.44308472 148.04151917]
[107.50000000 150.91056824]
[107.50000000 165.91056824]
[107.50000000 180.91056824]
[107.50000000 195.91056824]
[107.50000000 210.91056824]
[107.50000000 225.91056824]
[107.50000000 240.91056824]
[107.50000000 255.91056824]
[107.50000000 270.91055298]
[107.50000000 285.91055298]
[122.03988647 289.97186279]
[134.94427490 297.80639648]
[145.25555420 308.83273315]
[152.20857239 322.23263550]
[155.28736877 337.01181030]
[154.26348877 352.07348633]
[149.21287537 366.30001831]
[140.51036072 378.63568115]
[128.80169678 388.16510010]
[114.95575714 394.18112183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 42]
[24 41]
[25 40]
[26 36]
[27 35]
[28 34]
[29 33]
[43 53]
[44 52]
[45 51]
[55 92]
[56 91]
[58 89]
[59 88]
[60 87]
[61 83]
[62 82]
[63 81]
[95 106]
[96 105]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
