%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUUCACGGGGGGGGGGCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCxxxxxxxxxxUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCCCCCCCCCCCUACCUUCAC\
) } def
/len { sequence length } bind def

/coor [
[86.73395538 541.95306396]
[72.88801575 535.93707275]
[61.17935562 526.40765381]
[52.47682953 514.07196045]
[47.42622757 499.84545898]
[46.40233612 484.78375244]
[49.48113632 470.00460815]
[56.43415833 456.60467529]
[66.74544525 445.57833862]
[79.64982605 437.74383545]
[94.18971252 433.68252563]
[94.18971252 418.68252563]
[94.18971252 403.68252563]
[94.18971252 388.68252563]
[94.18971252 373.68252563]
[94.18971252 358.68252563]
[94.18971252 343.68252563]
[94.18971252 328.68252563]
[94.18971252 313.68252563]
[94.18971252 298.68252563]
[94.18971252 283.68252563]
[79.95297241 279.11346436]
[67.80908203 270.35583496]
[58.95470047 258.25708008]
[54.26711273 243.99462891]
[54.21734238 228.96133423]
[58.82284927 214.62939453]
[67.64458466 202.40625000]
[79.82880402 193.49629211]
[94.18971252 188.78228760]
[94.03367615 173.78309631]
[86.03327179 161.21954346]
[93.48180389 147.26139832]
[93.16974640 132.26463318]
[92.85768890 117.26788330]
[81.33857727 100.97151184]
[91.10322571 83.56710815]
[89.85635376 68.61902618]
[88.60947418 53.67093658]
[87.36260223 38.72285080]
[78.50494385 25.61359978]
[85.15750885 12.28721333]
[83.91063690 -2.66087389]
[82.66375732 -17.60896111]
[70.16143036 -20.56804657]
[59.02169418 -26.93271637]
[50.14876938 -36.17462921]
[44.25957108 -47.53238678]
[41.82576370 -60.07424164]
[43.03602219 -72.77454376]
[47.78144073 -84.59761047]
[55.66524124 -94.58219147]
[66.03594208 -101.91960144]
[78.04116821 -106.01924133]
[77.72911072 -121.01599121]
[77.41705322 -136.01274109]
[73.10946655 -150.38093567]
[65.11955261 -163.07585144]
[57.12963486 -175.77078247]
[49.13972092 -188.46571350]
[35.58563995 -198.65017700]
[41.61994553 -214.49389648]
[58.51494980 -213.08139038]
[61.83465195 -196.45562744]
[69.82456970 -183.76071167]
[77.81448364 -171.06578064]
[85.80439758 -158.37084961]
[85.62716675 -173.36979675]
[88.72984314 -188.04541016]
[94.96265411 -201.68916321]
[104.02468109 -213.64237976]
[115.47843933 -223.32801819]
[128.77098083 -230.27844238]
[143.26055908 -234.15812683]
[158.24768066 -234.77975464]
[173.00878906 -232.11334229]
[186.83125305 -226.28758240]
[199.04777527 -217.58375549]
[209.06855774 -206.42205811]
[216.40985107 -193.34132385]
[220.71720886 -178.97306824]
[221.78269958 -164.01095581]
[219.55488586 -149.17732239]
[214.14131165 -135.18827820]
[205.80332947 -122.71920013]
[194.94348145 -112.37203979]
[182.08604431 -104.64634705]
[167.85174561 -99.91508484]
[152.92779541 -98.40667725]
[138.03465271 -100.19393158]
[123.89132690 -105.19058228]
[111.18062592 -113.15538788]
[100.51619720 -123.70384216]
[92.41381073 -136.32479858]
[92.72586060 -121.32804871]
[93.03791809 -106.33129120]
[109.33691406 -100.56971741]
[122.22783661 -88.99871063]
[129.74006653 -73.35121155]
[130.71153259 -55.98602295]
[124.96839142 -39.53219223]
[113.35542297 -26.49103165]
[97.61184692 -18.85583496]
[98.85871887 -3.90774822]
[100.10559845 11.04033852]
[108.87406921 23.08040047]
[102.31069183 37.47597504]
[103.55756378 52.42406082]
[104.80443573 67.37214661]
[106.05131531 82.32023621]
[113.47483826 87.05313873]
[117.90739441 94.65981293]
[118.36511230 103.45183563]
[114.74638367 111.47766113]
[107.85444641 116.95582581]
[108.16650391 131.95257568]
[108.47855377 146.94934082]
[116.50128174 160.58555603]
[109.03042603 173.47103882]
[112.35528564 182.04991150]
[109.18971252 188.78228760]
[123.55061340 193.49629211]
[135.73483276 202.40625000]
[144.55657959 214.62939453]
[149.16207886 228.96133423]
[149.11230469 243.99462891]
[144.42471313 258.25708008]
[135.57034302 270.35583496]
[123.42645264 279.11346436]
[109.18971252 283.68252563]
[109.18971252 298.68252563]
[109.18971252 313.68252563]
[109.18971252 328.68252563]
[109.18971252 343.68252563]
[109.18971252 358.68252563]
[109.18971252 373.68252563]
[109.18971252 388.68252563]
[109.18971252 403.68252563]
[109.18971252 418.68252563]
[109.18971252 433.68252563]
[123.72959900 437.74383545]
[136.63397217 445.57833862]
[146.94526672 456.60467529]
[153.89828491 470.00460815]
[156.97708130 484.78375244]
[155.95318604 499.84545898]
[150.90258789 514.07196045]
[142.20005798 526.40765381]
[130.49140930 535.93707275]
[116.64546204 541.95306396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 121]
[31 119]
[33 117]
[34 116]
[35 115]
[37 110]
[38 109]
[39 108]
[40 107]
[42 105]
[43 104]
[44 103]
[54 96]
[55 95]
[56 94]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
