%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUCUAGGGGGGGGGGAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCxxxxxxxxxxAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUACCCCCCCCCCUCACCCUAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 396.01028442]
[71.19830322 389.99426270]
[59.48964310 380.46484375]
[50.78712082 368.12918091]
[45.73651886 353.90264893]
[44.71262741 338.84097290]
[47.79142761 324.06179810]
[54.74444962 310.66186523]
[65.05573273 299.63555908]
[77.96011353 291.80102539]
[92.50000000 287.73971558]
[92.50000000 272.73971558]
[92.50000000 257.73971558]
[92.50000000 242.73973083]
[92.50000000 227.73973083]
[92.50000000 212.73973083]
[92.50000000 197.73973083]
[92.50000000 182.73973083]
[92.50000000 167.73973083]
[92.50000000 152.73973083]
[71.62496185 145.08421326]
[55.69327927 129.57437134]
[42.16909027 136.06253052]
[28.64489937 142.55068970]
[21.98865700 157.14775085]
[6.39174795 160.90487671]
[-6.18121386 150.93992615]
[-6.08532810 134.89715576]
[6.60584927 125.08321381]
[22.15673447 129.02650452]
[35.68092346 122.53833771]
[49.20511246 116.05017090]
[46.73656845 99.14243317]
[49.74813843 82.32292938]
[57.92996979 67.32215881]
[70.44026184 55.68351746]
[85.99186707 48.60446548]
[84.12425232 33.72118759]
[82.25663757 18.83790779]
[80.38903046 3.95462751]
[77.54212189 0.48236659]
[76.13201141 -3.33635783]
[76.08691406 -6.99420547]
[77.17360687 -10.06227970]
[79.03841400 -12.23709488]
[70.06933594 -21.56498337]
[69.89289856 -34.10243988]
[78.05638123 -43.08380508]
[77.74432373 -58.08055878]
[77.43226624 -73.07731628]
[72.53071594 -87.25387573]
[63.51318741 -99.24070740]
[54.49565506 -111.22753906]
[41.81747437 -113.81936646]
[34.55836105 -124.04307556]
[36.18439865 -136.07067871]
[27.41819191 -148.24252319]
[18.65198517 -160.41435242]
[3.48451114 -166.64971924]
[1.56922364 -182.93664551]
[14.87640667 -192.52052307]
[29.71677208 -185.54229736]
[30.82382202 -169.18055725]
[39.59003067 -157.00872803]
[48.35623550 -144.83688354]
[64.70839691 -138.54348755]
[66.48249054 -120.24506378]
[75.50001526 -108.25823212]
[84.51754761 -96.27140045]
[83.30809784 -111.22256470]
[84.98329926 -126.12872314]
[89.48117828 -140.43847656]
[96.63536072 -153.62248230]
[106.18118286 -165.19300842]
[117.76554108 -174.72206116]
[130.95988464 -181.85711670]
[145.27613831 -186.33425903]
[160.18472290 -187.98785400]
[175.13410950 -186.75672913]
[189.57130432 -182.68644714]
[202.96224976 -175.92755127]
[214.81158447 -166.73007202]
[224.68095398 -155.43424988]
[232.20529175 -142.45794678]
[237.10623169 -128.28118896]
[239.20251465 -113.42839050]
[238.41656494 -98.44899750]
[234.77746582 -83.89712524]
[228.41983032 -70.31108093]
[219.57884216 -58.19345093]
[208.58155823 -47.99248123]
[195.83479309 -40.08553696]
[181.81005859 -34.76510620]
[167.02618408 -32.22800827]
[152.03002930 -32.56809235]
[137.37637329 -35.77278137]
[123.60725403 -41.72352600]
[111.23203278 -50.20019531]
[100.70849609 -60.88921738]
[92.42902374 -73.38937378]
[92.74107361 -58.39261627]
[93.05313110 -43.39586258]
[102.94721222 -28.93532753]
[94.02542877 -12.86107254]
[95.27230835 2.08701420]
[97.13992310 16.97029495]
[99.00753021 31.85357475]
[100.87514496 46.73685455]
[111.30760956 47.94361877]
[121.30058289 51.17363358]
[130.46566772 56.30135727]
[138.44667053 63.12749481]
[144.93339539 71.38673401]
[149.67370605 80.75807190]
[152.48336792 90.87727356]
[153.25320435 101.35104370]
[151.95326233 111.77230072]
[165.96997070 117.11381531]
[179.98669434 122.45532990]
[194.00340271 127.79684448]
[210.95735168 127.78718567]
[215.65994263 144.07588196]
[201.30961609 153.10386658]
[188.66189575 141.81355286]
[174.64517212 136.47204590]
[160.62846375 131.13052368]
[146.61175537 125.78901672]
[139.46759033 135.77761841]
[130.22590637 143.86482239]
[119.37787628 149.62083435]
[107.50000000 152.73973083]
[107.50000000 167.73973083]
[107.50000000 182.73973083]
[107.50000000 197.73973083]
[107.50000000 212.73973083]
[107.50000000 227.73973083]
[107.50000000 242.73973083]
[107.50000000 257.73971558]
[107.50000000 272.73971558]
[107.50000000 287.73971558]
[122.03988647 291.80102539]
[134.94427490 299.63555908]
[145.25555420 310.66186523]
[152.20857239 324.06179810]
[155.28736877 338.84097290]
[154.26348877 353.90264893]
[149.21287537 368.12918091]
[140.51036072 380.46484375]
[128.80169678 389.99426270]
[114.95575714 396.01028442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 32]
[23 31]
[24 30]
[37 108]
[38 107]
[39 106]
[40 105]
[45 104]
[48 102]
[49 101]
[50 100]
[51 69]
[52 68]
[53 67]
[56 65]
[57 64]
[58 63]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
