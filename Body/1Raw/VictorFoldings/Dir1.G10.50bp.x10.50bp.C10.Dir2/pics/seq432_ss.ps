%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGAACCCGGGGGGGGGGUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCCCCCCCCCCCAAAGAGCCC\
) } def
/len { sequence length } bind def

/coor [
[54.49307632 521.55175781]
[41.27287674 514.27929688]
[30.38607407 503.83227539]
[22.57494354 490.92303467]
[18.37206268 476.43170166]
[18.06398964 461.34637451]
[21.67173195 446.69555664]
[28.94930458 433.47814941]
[39.40051270 422.59539795]
[52.31277466 414.78924561]
[66.80570984 410.59194946]
[66.49365234 395.59521484]
[66.18159485 380.59844971]
[65.86954498 365.60171509]
[65.55748749 350.60494995]
[65.24542999 335.60818481]
[64.93337250 320.61145020]
[64.62131500 305.61468506]
[64.30925751 290.61791992]
[63.99720383 275.62118530]
[63.68515015 260.62442017]
[51.96232224 255.72799683]
[42.94475555 246.71266174]
[38.00929260 234.90452576]
[37.92856979 222.05982971]
[42.75028992 210.10365295]
[51.78475189 200.84144592]
[63.70325089 195.68638611]
[64.01530457 180.68962097]
[55.79292297 193.23524475]
[43.99881363 202.50340271]
[29.86474609 207.52616882]
[14.86687660 207.77896118]
[0.57157201 203.23535156]
[-11.52817345 194.36990356]
[-20.16867065 182.10852051]
[-24.44750977 167.73175049]
[-23.91781425 152.74110413]
[-18.63490295 138.70219421]
[-9.15051937 127.08124542]
[3.54479194 119.09193420]
[18.12513924 115.56866455]
[33.06776428 116.87940216]
[46.81206131 122.88724518]
[57.92258835 132.96475220]
[65.23896790 146.05943298]
[67.99715424 160.80668640]
[73.48418427 146.84629822]
[78.97121429 132.88591003]
[84.45825195 118.92552185]
[89.94528198 104.96513367]
[75.27837372 108.10865784]
[63.54202271 98.76744843]
[63.31455994 83.76917267]
[74.76223755 74.07635498]
[89.51773071 76.77366638]
[96.79592133 89.88892365]
[103.70291901 76.57376862]
[110.60991669 63.25860977]
[117.51691437 49.94345474]
[124.42391205 36.62829971]
[123.91020966 20.81543541]
[136.63891602 13.08049679]
[143.54591370 -0.23465924]
[144.73486328 -9.35816002]
[150.73762512 -13.75275517]
[157.92013550 -26.92133713]
[146.38291931 -36.57972336]
[136.95477295 -48.29968643]
[129.99659729 -61.62961578]
[125.77418518 -76.05632019]
[124.44799042 -91.02481079]
[126.06713104 -105.95962524]
[130.56752014 -120.28695679]
[137.77439880 -133.45672607]
[147.40913391 -144.96366882]
[159.09999084 -154.36671448]
[172.39648438 -161.30595398]
[186.78669739 -165.51634216]
[201.71705627 -166.83784485]
[216.61354065 -165.22155762]
[230.90385437 -160.73143005]
[238.08636475 -173.90000916]
[245.26887512 -187.06858826]
[252.45138550 -200.23718262]
[251.51266479 -216.60943604]
[265.36871338 -225.38110352]
[279.76559448 -217.52862549]
[279.89306641 -201.12997437]
[265.61996460 -193.05467224]
[258.43746948 -179.88609314]
[251.25494385 -166.71749878]
[244.07243347 -153.54891968]
[255.58476257 -143.96557617]
[265.00915527 -132.31658936]
[271.98193359 -119.04850769]
[276.23348999 -104.67039490]
[277.59857178 -89.73432159]
[276.02288818 -74.81417084]
[271.56509399 -60.48357391]
[264.39480591 -47.29386520]
[254.78587341 -35.75286484]
[243.10621643 -26.30533600]
[229.80352783 -19.31583977]
[215.38822937 -15.05466461]
[200.41378784 -13.68738079]
[185.45559692 -15.26840305]
[171.08871460 -19.73882866]
[163.90620422 -6.57024622]
[156.86106873 6.67233944]
[149.95407104 19.98749542]
[150.96180725 34.84796906]
[137.73907471 43.53529739]
[130.83207703 56.85045242]
[123.92507172 70.16561127]
[117.01807404 83.48076630]
[110.11107635 96.79592133]
[103.90567017 110.45216370]
[98.41864014 124.41255188]
[92.93161011 138.37294006]
[87.44457245 152.33332825]
[81.95754242 166.29371643]
[79.01206207 181.00167847]
[78.70000458 195.99844360]
[93.90610504 204.69731140]
[102.60216522 219.80287170]
[102.48993683 237.14375305]
[93.68946075 251.98306274]
[78.68190002 260.31237793]
[78.99395752 275.30911255]
[79.30601501 290.30587769]
[79.61807251 305.30264282]
[79.93013000 320.29937744]
[80.24217987 335.29614258]
[80.55423737 350.29287720]
[80.86629486 365.28964233]
[81.17835236 380.28640747]
[81.49040985 395.28314209]
[81.80246735 410.27990723]
[96.45745850 413.87066650]
[109.68326569 421.13293457]
[120.57813263 431.57153320]
[128.39923096 444.47473145]
[132.61329651 458.96279907]
[132.93302917 474.04791260]
[129.33659363 488.70150757]
[122.06922913 501.92449951]
[111.62643433 512.81536865]
[98.72019958 520.63146973]
[84.23051453 524.83996582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[28 124]
[29 123]
[47 122]
[48 121]
[49 120]
[50 119]
[51 118]
[57 117]
[58 116]
[59 115]
[60 114]
[61 113]
[63 111]
[64 110]
[66 109]
[67 108]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
