%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACCAUCUGGGGGGGGGGUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAxxxxxxxxxxAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCACCCCCCCCCCUUUACCAUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 406.31771851]
[71.19830322 400.30169678]
[59.48964310 390.77227783]
[50.78712082 378.43661499]
[45.73651886 364.21008301]
[44.71262741 349.14840698]
[47.79142761 334.36923218]
[54.74444962 320.96932983]
[65.05573273 309.94299316]
[77.96011353 302.10848999]
[92.50000000 298.04714966]
[92.50000000 283.04714966]
[92.50000000 268.04714966]
[92.50000000 253.04716492]
[92.50000000 238.04716492]
[92.50000000 223.04716492]
[92.50000000 208.04716492]
[92.50000000 193.04716492]
[92.50000000 178.04716492]
[92.50000000 163.04716492]
[92.50000000 148.04716492]
[68.79978180 137.30049133]
[54.03422928 115.87223053]
[52.43169022 89.89871979]
[38.41497803 84.55720520]
[24.39826393 79.21569824]
[10.38155079 73.87418365]
[0.88401556 84.53240204]
[-11.65990353 91.28498840]
[-25.72729492 93.33538818]
[-39.61821747 90.45649719]
[-51.66112137 83.01566315]
[-60.41399384 71.92790985]
[-64.83702087 58.54345703]
[-64.41607666 44.48334885]
[-78.31863403 38.85139084]
[-92.22119141 33.21943283]
[-106.12374878 27.58747864]
[-120.53285217 33.50486755]
[-134.55178833 27.59521675]
[-140.10432434 13.82187176]
[-154.00686646 8.18991566]
[-167.90942383 2.55795884]
[-181.63766479 10.04592991]
[-196.95697021 6.90705156]
[-206.63406372 -5.37659359]
[-206.09970093 -21.00504494]
[-195.60620117 -32.59902573]
[-180.10826111 -34.68420792]
[-166.92355347 -26.27604103]
[-162.27746582 -11.34459686]
[-148.37492371 -5.71264076]
[-134.47236633 -0.08068389]
[-120.89926910 -6.10619640]
[-106.71987152 -0.59263885]
[-100.49179077 13.68492222]
[-86.58923340 19.31687927]
[-72.68667603 24.94883537]
[-58.78412247 30.58079147]
[-47.86721039 19.13501167]
[-33.36397552 12.72729492]
[-17.47404861 12.36166573]
[-2.61973715 18.12331963]
[8.92324066 29.16114807]
[15.37439442 43.81332397]
[15.72306347 59.85747147]
[29.73977661 65.19898224]
[43.75648880 70.54049683]
[57.77320099 75.88201141]
[62.35861206 69.21192169]
[67.98687744 63.39481354]
[74.50205994 58.59185028]
[81.72365570 54.93609619]
[89.45160675 52.52883911]
[97.47179413 51.43675995]
[105.56202698 51.69012833]
[113.49816132 53.28191376]
[121.06033325 56.16802216]
[128.03903198 60.26849365]
[134.24090576 65.46971893]
[139.49414062 71.62760925]
[152.88043213 64.85949707]
[166.26670837 58.09138107]
[179.65299988 51.32326508]
[193.03927612 44.55514908]
[195.95965576 40.07284927]
[199.92700195 37.46276474]
[204.03465271 36.80785370]
[207.47839355 37.81192398]
[221.26077271 31.89196205]
[235.04315186 25.97199821]
[248.82553101 20.05203438]
[262.60791016 14.13207245]
[268.76513672 -2.20886016]
[284.51303101 -8.93846226]
[299.95816040 -2.35772276]
[313.61441040 -8.56312943]
[327.27062988 -14.76853657]
[340.92687988 -20.97394371]
[354.58312988 -27.17935181]
[361.54159546 -41.63477325]
[377.21328735 -45.06660843]
[389.57623291 -34.84225464]
[389.14660645 -18.80495453]
[376.25399780 -9.25715446]
[360.78851318 -13.52310944]
[347.13229370 -7.31770277]
[333.47604370 -1.11229563]
[319.81979370 5.09311152]
[306.16357422 11.29851818]
[303.35342407 23.91200066]
[293.63296509 32.72035217]
[280.41735840 34.32521820]
[268.52786255 27.91445351]
[254.74549866 33.83441544]
[240.96310425 39.75437927]
[227.18072510 45.67434311]
[213.39834595 51.59430695]
[199.80740356 57.94143677]
[186.42111206 64.70954895]
[173.03483582 71.47766876]
[159.64854431 78.24578094]
[146.26225281 85.01389313]
[148.52235413 96.78118896]
[147.83642578 108.74391174]
[144.24612427 120.17575073]
[137.96940613 130.38262939]
[129.38739014 138.74481201]
[119.02113342 144.75462341]
[107.50000000 148.04716492]
[107.50000000 163.04716492]
[107.50000000 178.04716492]
[107.50000000 193.04716492]
[107.50000000 208.04716492]
[107.50000000 223.04716492]
[107.50000000 238.04716492]
[107.50000000 253.04716492]
[107.50000000 268.04714966]
[107.50000000 283.04714966]
[107.50000000 298.04714966]
[122.03988647 302.10848999]
[134.94427490 309.94299316]
[145.25555420 320.96932983]
[152.20857239 334.36923218]
[155.28736877 349.14840698]
[154.26348877 364.21008301]
[149.21287537 378.43661499]
[140.51036072 390.77227783]
[128.80169678 400.30169678]
[114.95575714 406.31771851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 69]
[25 68]
[26 67]
[27 66]
[35 59]
[36 58]
[37 57]
[38 56]
[41 53]
[42 52]
[43 51]
[81 123]
[82 122]
[83 121]
[84 120]
[85 119]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
