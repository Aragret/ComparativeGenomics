%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGUACUACGGGGGGGGGGGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUxxxxxxxxxxCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCCCCCCCCCCCACGGACUAC\
) } def
/len { sequence length } bind def

/coor [
[66.40950012 372.03820801]
[52.56356049 366.02218628]
[40.85490036 356.49276733]
[32.15237427 344.15710449]
[27.10177422 329.93060303]
[26.07788277 314.86889648]
[29.15668106 300.08975220]
[36.10970306 286.68981934]
[46.42098618 275.66348267]
[59.32536697 267.82897949]
[73.86525726 263.76766968]
[73.86525726 248.76766968]
[73.86525726 233.76766968]
[73.86525726 218.76766968]
[73.86525726 203.76766968]
[73.86525726 188.76766968]
[73.86525726 173.76766968]
[73.86525726 158.76766968]
[73.86525726 143.76766968]
[73.86525726 128.76766968]
[87.06582642 94.16426086]
[78.81353760 81.63829803]
[70.56124878 69.11234283]
[62.30895615 56.58637619]
[48.43515778 62.39618301]
[33.73390961 65.55680084]
[18.70619774 65.96202087]
[3.86386108 63.59950638]
[-10.28784657 58.55116653]
[-23.26745415 50.99031448]
[-34.63365555 41.17570877]
[-44.00030518 29.44272232]
[-51.04955673 16.19185448]
[-55.54262543 1.87507749]
[-57.32788849 -13.01958275]
[-56.34600067 -27.98468781]
[-52.63186646 -42.51066589]
[-46.31339645 -56.10317230]
[-37.60710907 -68.29990387]
[-26.81070328 -78.68633270]
[-35.06299210 -91.21228790]
[-43.31528091 -103.73825073]
[-54.40659714 -113.83690643]
[-67.64918518 -120.88203430]
[-80.89176941 -127.92716980]
[-94.13435364 -134.97230530]
[-107.37693787 -142.01744080]
[-123.73854828 -140.90846252]
[-132.65386963 -154.67250061]
[-124.95159149 -169.15031433]
[-108.55515289 -169.44834900]
[-100.33180237 -155.26002502]
[-87.08921814 -148.21488953]
[-73.84663391 -141.16975403]
[-60.60404968 -134.12461853]
[-47.36146164 -127.07949066]
[-55.02186203 -139.97593689]
[-59.43855286 -154.31095886]
[-60.36437607 -169.28236389]
[-57.74752426 -184.05232239]
[-51.73443985 -197.79434204]
[-42.66161346 -209.73936462]
[-31.03676605 -219.21897888]
[-17.51043320 -225.70266724]
[-2.83955622 -228.82763672]
[12.15487576 -228.41897583]
[26.63376617 -224.49955750]
[39.78686523 -217.28874207]
[50.87812042 -207.19003296]
[59.28686142 -194.76855469]
[64.54252625 -180.71942139]
[66.35100555 -165.82884216]
[64.61109161 -150.93008423]
[59.42015839 -136.85691833]
[51.06869507 -124.39685822]
[40.02404404 -114.24719238]
[26.90427780 -106.97589874]
[12.44358540 -102.98987579]
[-2.54880667 -102.51219177]
[-17.23391533 -105.56958008]
[-30.78931999 -111.99053955]
[-22.53703117 -99.46458435]
[-14.28474140 -86.93862152]
[-0.48047447 -92.75948334]
[14.16225338 -95.94542694]
[29.14506721 -96.38652039]
[43.95774078 -94.06627655]
[58.09557343 -89.06227112]
[71.07659149 -81.54353333]
[82.45795441 -71.76486969]
[91.85109711 -60.05819702]
[98.93498230 -46.82128906]
[103.46706390 -32.50426102]
[105.29158020 -17.59426880]
[104.34494781 -2.59892154]
[100.65795135 11.97099400]
[94.35472107 25.61891174]
[85.64861298 37.87940979]
[74.83492279 48.33408737]
[83.08721161 60.86005020]
[91.33950043 73.38600922]
[99.59178925 85.91197205]
[112.45018768 93.63606262]
[127.38449860 95.03836060]
[142.31880188 96.44066620]
[157.25311279 97.84297180]
[163.23573303 83.94824219]
[173.22076416 72.58363342]
[186.22999573 64.86254883]
[200.98889160 61.54140091]
[216.05154419 62.94557190]
[229.94226074 68.93750000]
[241.30017090 78.93014526]
[249.01254272 91.94454193]
[252.32380676 106.70566559]
[250.90953064 121.76737213]
[244.90829468 135.65406799]
[234.90805054 147.00529480]
[221.88848877 154.70893860]
[207.12513733 158.01029968]
[192.06439209 156.58593750]
[178.18171692 150.57540894]
[166.83720398 140.56755066]
[159.14227295 127.54282379]
[155.85081482 112.77727509]
[140.91650391 111.37497711]
[125.98219299 109.97267151]
[111.04788971 108.57036591]
[105.50222778 113.61968994]
[94.41091156 123.71833801]
[88.86525726 128.76766968]
[88.86525726 143.76766968]
[88.86525726 158.76766968]
[88.86525726 173.76766968]
[88.86525726 188.76766968]
[88.86525726 203.76766968]
[88.86525726 218.76766968]
[88.86525726 233.76766968]
[88.86525726 248.76766968]
[88.86525726 263.76766968]
[103.40514374 267.82897949]
[116.30952454 275.66348267]
[126.62080383 286.68981934]
[133.57382202 300.08975220]
[136.65263367 314.86889648]
[135.62873840 329.93060303]
[130.57814026 344.15710449]
[121.87561035 356.49276733]
[110.16694641 366.02218628]
[96.32100677 372.03820801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 102]
[22 101]
[23 100]
[24 99]
[40 83]
[41 82]
[42 81]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
