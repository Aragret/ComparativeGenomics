%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAACUAGGGGGGGGGGACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAAxxxxxxxxxxCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUA\
) } def
/len { sequence length } bind def

/coor [
[44.42184448 206.02450562]
[37.96882629 202.38291931]
[31.75346565 198.34907532]
[25.79957771 193.93841553]
[20.12997055 189.16786194]
[14.76636791 184.05567932]
[9.72931862 178.62145996]
[5.03812170 172.88601685]
[0.71074897 166.87132263]
[-3.23621917 160.60043335]
[-16.62250328 167.36854553]
[-25.44691086 180.50019836]
[-40.29610062 179.33792114]
[-53.68238449 186.10604858]
[-67.06867218 192.87416077]
[-80.45495605 199.64227295]
[-93.84123993 206.41038513]
[-107.22752380 213.17849731]
[-120.61380768 219.94660950]
[-134.00009155 226.71473694]
[-147.38638306 233.48284912]
[-148.15794373 248.82234192]
[-156.50935364 261.71224976]
[-170.19412231 268.68521118]
[-185.53112793 267.86560059]
[-198.39479065 259.47381592]
[-205.32484436 245.76724243]
[-204.45713806 230.43287659]
[-196.02508545 217.59559631]
[-182.29685974 210.70854187]
[-166.96528625 211.62431335]
[-154.15449524 220.09655762]
[-140.76820374 213.32844543]
[-127.38191986 206.56033325]
[-113.99563599 199.79222107]
[-100.60935211 193.02410889]
[-87.22306824 186.25598145]
[-73.83678436 179.48786926]
[-60.45050049 172.71975708]
[-47.06421280 165.95164490]
[-39.19728470 153.30409241]
[-23.39061928 153.98225403]
[-10.00433445 147.21414185]
[-15.19660950 132.55564880]
[-18.44485855 117.34774780]
[-19.69426537 101.84709167]
[-18.92374420 86.31526184]
[-16.14629745 71.01437378]
[-11.40879822 56.20264435]
[-4.79119539 42.13002396]
[3.59483528 29.03400230]
[13.60777283 17.13558197]
[25.07864189 6.63555861]
[37.81386566 -2.28887129]
[51.59852219 -9.48710251]
[66.19998932 -14.83765984]
[81.37185669 -18.25024796]
[96.85808563 -19.66727638]
[112.39733887 -19.06483459]
[114.88246155 -33.85754013]
[117.36757660 -48.65024948]
[119.85269928 -63.44295502]
[122.33781433 -78.23566437]
[124.82293701 -93.02836609]
[127.30805206 -107.82107544]
[113.30084229 -113.34300995]
[100.74801636 -121.65686798]
[90.19832611 -132.39920044]
[82.11296844 -145.10040283]
[76.84539032 -159.20524597]
[74.62586975 -174.09709167]
[75.55143738 -189.12496948]
[79.58162689 -203.63191223]
[86.54026794 -216.98373413]
[96.12314606 -228.59674072]
[107.91133881 -237.96328735]
[121.38952637 -244.67388916]
[135.96849060 -248.43519592]
[151.01091003 -249.08277893]
[165.85919189 -246.58831787]
[179.86422729 -241.06088257]
[192.41378784 -232.74208069]
[202.95924377 -221.99560547]
[211.03961182 -209.29121399]
[216.30163574 -195.18431091]
[218.51528931 -180.29158020]
[217.58381653 -165.26406860]
[213.54791260 -150.75872803]
[206.58403015 -137.40963745]
[196.99658203 -125.80039978]
[185.20469666 -116.43849182]
[171.72387695 -109.73319244]
[157.14343262 -105.97762299]
[142.10075378 -105.33596039]
[139.61564636 -90.54325104]
[137.13052368 -75.75054169]
[134.64540100 -60.95783615]
[132.16027832 -46.16513062]
[129.67517090 -31.37242317]
[127.19004822 -16.57971573]
[154.69685364 -6.48184013]
[178.92649841 9.99591064]
[198.42724609 31.86627007]
[212.03071594 57.81887054]
[218.92184448 86.29875946]
[233.90155029 85.51892090]
[248.88127136 84.73907471]
[263.86099243 83.95922852]
[273.13116455 71.36566162]
[288.33963013 67.72743988]
[302.30538940 74.76241302]
[308.43429565 89.14889526]
[303.83239746 104.09401703]
[290.67263794 112.54115295]
[275.16857910 110.50182343]
[264.64083862 98.93894196]
[249.66111755 99.71878815]
[234.68139648 100.49863434]
[219.70169067 101.27848053]
[219.39328003 108.68168640]
[218.62745667 116.05163574]
[217.40713501 123.36009216]
[215.73698425 130.57904053]
[213.62342834 137.68083191]
[211.07453918 144.63825989]
[208.10009766 151.42468262]
[204.71150208 158.01406860]
[200.92170715 164.38117981]
[196.74526978 170.50163269]
[192.19818115 176.35198975]
[187.29783630 181.90980530]
[182.06304932 187.15380859]
[176.51383972 192.06390381]
[170.67149353 196.62126160]
[164.55838013 200.80845642]
[158.19793701 204.60942078]
[151.61450195 208.00958252]
[144.83332825 210.99595642]
[137.88038635 213.55705261]
[130.78231812 215.68309021]
[123.56631470 217.36590576]
[116.26001740 218.59907532]
[108.89142609 219.37785339]
[101.48876953 219.69926453]
[94.08040619 219.56205750]
[86.69472504 218.96679688]
[79.36001587 217.91572571]
[72.10438538 216.41290283]
[64.95563507 214.46406555]
[57.94114685 212.07667542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 43]
[11 42]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[105 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
