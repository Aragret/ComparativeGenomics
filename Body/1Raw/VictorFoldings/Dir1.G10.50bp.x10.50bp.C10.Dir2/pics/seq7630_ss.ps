%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGAAACCGGGGGGGGGGGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCxxxxxxxxxxCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCCCCCCCCCCCAUCGAAACCG\
) } def
/len { sequence length } bind def

/coor [
[83.47624207 439.82833862]
[70.60296631 431.92547607]
[60.47867584 420.71496582]
[53.92409134 407.10562134]
[51.47057343 392.20068359]
[53.31700897 377.20846558]
[59.31372070 363.34423828]
[68.97457886 351.73199463]
[81.51642609 343.31304932]
[95.92255402 338.76989746]
[95.61049652 323.77313232]
[95.29843903 308.77636719]
[94.98638153 293.77963257]
[94.67432404 278.78286743]
[94.36227417 263.78610229]
[94.05021667 248.78936768]
[93.73815918 233.79260254]
[93.42610168 218.79585266]
[93.11404419 203.79910278]
[92.80198669 188.80235291]
[84.27196503 180.16835022]
[83.92671204 167.63439941]
[92.50000000 157.94148254]
[92.50000000 142.94148254]
[77.78097534 137.50381470]
[65.94094849 127.20665741]
[58.51405716 113.38423920]
[56.46263885 97.82758331]
[60.05249786 82.55241394]
[68.81848145 69.53798676]
[60.05227661 57.36614990]
[51.28607178 45.19431305]
[42.51986313 33.02247620]
[33.75365448 20.85063934]
[24.98744774 8.67880249]
[11.83196449 15.92384338]
[-2.10090971 21.53030205]
[-16.60799217 25.41641808]
[-31.47772789 27.52552032]
[-46.49327087 27.82685471]
[-61.43565369 26.31602478]
[-76.08696747 23.01506424]
[-90.23355865 17.97210884]
[-103.66912079 11.26070118]
[-116.19773102 2.97871280]
[-127.63668060 -6.75307989]
[-137.81915283 -17.79275894]
[-146.59666443 -29.97933388]
[-153.84121704 -43.13508987]
[-159.44715881 -57.06817245]
[-163.33273315 -71.57540131]
[-165.44126892 -86.44521332]
[-165.74205017 -101.46076965]
[-164.23065186 -116.40309906]
[-160.92915344 -131.05429077]
[-155.88566589 -145.20068359]
[-149.17375183 -158.63600159]
[-140.89129639 -171.16429138]
[-131.15907288 -182.60289001]
[-120.11901855 -192.78494263]
[-107.93211365 -201.56201172]
[-94.77609253 -208.80606079]
[-80.84279633 -214.41148376]
[-66.33542633 -218.29650879]
[-51.46553040 -220.40449524]
[-36.44996262 -220.70471191]
[-21.50769424 -219.19276428]
[-6.85662699 -215.89070129]
[7.28958416 -210.84669495]
[20.72464561 -204.13427734]
[33.25263596 -195.85136414]
[44.69085693 -186.11871338]
[54.87250900 -175.07826233]
[63.64910889 -162.89103699]
[70.89267731 -149.73474121]
[76.49756622 -135.80123901]
[80.38205719 -121.29371643]
[82.48949432 -106.42374420]
[82.78914642 -91.40817261]
[81.27663422 -76.46595764]
[77.97402954 -61.81501389]
[72.92948914 -47.66899109]
[66.21657562 -34.23418045]
[57.93318176 -21.70650101]
[48.20010757 -10.26864243]
[37.15928650 -0.08740442]
[45.92549133 12.08443260]
[54.69169998 24.25626945]
[63.45790863 36.42810440]
[72.22411346 48.59994125]
[80.99031830 60.77177811]
[100.09401703 56.40857697]
[119.17871094 60.85414124]
[134.38784790 73.21013641]
[147.63043213 66.16500092]
[160.87301636 59.11986542]
[174.11561584 52.07473373]
[176.13818359 36.69003677]
[186.84176636 25.45558929]
[202.11062622 22.69126129]
[216.07357788 29.45999718]
[223.36155701 43.15907669]
[221.17222595 58.52092743]
[210.34739685 69.63860321]
[195.04943848 72.23712921]
[181.16075134 65.31731415]
[167.91815186 72.36244965]
[154.67556763 79.40758514]
[141.43298340 86.45272064]
[142.98910522 92.77799225]
[143.58532715 99.26452637]
[158.40307617 101.59562683]
[173.22084045 103.92673492]
[184.89236450 93.51954651]
[200.52435303 93.10115814]
[212.73585510 102.86912537]
[215.76097107 118.21131134]
[208.17134094 131.88360596]
[193.55055237 137.43035889]
[178.80209351 132.23257446]
[170.88973999 118.74449158]
[156.07197571 116.41338348]
[141.25421143 114.08228302]
[136.07128906 124.47618103]
[128.32766724 133.13252258]
[118.57308197 139.43681335]
[107.50000000 142.94148254]
[107.50000000 157.94148254]
[117.08272552 173.63069153]
[107.79874420 188.49029541]
[108.11080170 203.48704529]
[108.42285919 218.48379517]
[108.73490906 233.48054504]
[109.04696655 248.47731018]
[109.35902405 263.47406006]
[109.67108154 278.47082520]
[109.98313904 293.46755981]
[110.29519653 308.46432495]
[110.60724640 323.46105957]
[110.91930389 338.45782471]
[125.50194550 342.39779663]
[138.38314819 350.28771973]
[148.51870728 361.48803711]
[155.08695984 375.09078979]
[157.55545044 389.99325562]
[155.72407532 404.98733521]
[149.74128723 418.85757446]
[140.09210205 430.47952271]
[127.55871582 438.91107178]
[113.15716553 443.46868896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 128]
[24 127]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[94 109]
[95 108]
[96 107]
[97 106]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
