%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUGUUAGUGGGGGGGGGGAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAxxxxxxxxxxCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUCCCCCCCCCCACUAAUCUUAGU\
) } def
/len { sequence length } bind def

/coor [
[139.30673218 489.82089233]
[125.14613342 484.66589355]
[112.55638885 476.38366699]
[102.21645355 465.42089844]
[94.68394470 452.36877441]
[90.36507416 437.93118286]
[89.49276733 422.88671875]
[92.11405945 408.04672241]
[98.08758545 394.21148682]
[107.09120178 382.12713623]
[118.63935852 372.44534302]
[132.10926819 365.68829346]
[146.77453613 362.22030640]
[146.77453613 347.22030640]
[146.77453613 332.22030640]
[146.77453613 317.22030640]
[146.77453613 302.22030640]
[146.77453613 287.22030640]
[146.77453613 272.22030640]
[146.77453613 257.22030640]
[146.77453613 242.22030640]
[146.77453613 227.22030640]
[146.77453613 212.22030640]
[146.77453613 197.22030640]
[142.57507324 182.82014465]
[134.51202393 170.17153931]
[126.44896698 157.52294922]
[120.16455078 153.54981995]
[118.35369110 144.53527832]
[110.54863739 131.72586060]
[102.74359131 118.91644287]
[82.67240143 115.46656036]
[73.56252289 93.04034424]
[59.83880997 86.98561859]
[46.11509705 80.93089294]
[54.04283905 93.66474152]
[56.21516800 108.50660706]
[52.26935959 122.97832489]
[42.86425781 134.66352844]
[29.57023811 141.61112976]
[14.60702991 142.66107178]
[0.47305754 137.63803101]
[-10.47170734 127.38073730]
[-16.39980316 113.60185242]
[-16.32140541 98.60205841]
[-10.24960423 84.88588715]
[0.80178225 74.74356079]
[14.98748779 69.86854553]
[29.94029999 71.07524872]
[18.26718330 61.65514374]
[6.59406614 52.23504257]
[-5.07905102 42.81493759]
[-20.76535416 44.74248505]
[-33.16862106 34.94787216]
[-34.93021774 19.24206543]
[-25.00501442 6.94304419]
[-9.28146267 5.34759951]
[2.91193533 15.40227890]
[4.34105206 31.14182091]
[16.01416969 40.56192398]
[27.68728638 49.98202896]
[39.36040115 59.40213013]
[52.16982269 67.20718384]
[65.89353180 73.26190186]
[79.61724854 79.31662750]
[92.65800476 71.90456390]
[94.47766113 57.01534653]
[96.29731750 42.12612534]
[98.11697388 27.23690796]
[99.93663025 12.34768867]
[101.75629425 -2.54153037]
[88.03441620 -8.91061687]
[76.95366669 -19.20975685]
[69.59963226 -32.42994308]
[66.69278717 -47.27600098]
[68.51790619 -62.29346085]
[74.89617920 -76.01107025]
[85.20274353 -87.08490753]
[98.42785645 -94.43008423]
[113.27585602 -97.32698822]
[128.29209900 -95.49180603]
[142.00541687 -89.10433197]
[153.07235718 -78.79035187]
[160.40866089 -65.56032562]
[163.29562378 -50.71038437]
[161.45037842 -35.69538116]
[155.05371094 -21.98633575]
[144.73233032 -10.92631626]
[131.49737549 -3.59887290]
[116.64550781 -0.72187275]
[114.82585144 14.16734600]
[113.00619507 29.05656624]
[111.18653870 43.94578552]
[109.36688232 58.83500290]
[107.54721832 73.72422028]
[121.93225098 92.35562134]
[115.55300903 111.11138916]
[123.35805511 123.92080688]
[131.16310120 136.73022461]
[139.09756470 149.45988464]
[147.16061401 162.10848999]
[155.22367859 174.75709534]
[154.92045593 159.76016235]
[157.68498230 145.01710510]
[163.40081787 131.14883423]
[171.82727051 118.73935699]
[182.60945129 108.31130219]
[195.29330444 100.30381012]
[209.34466553 95.05411530]
[224.17178345 92.78329468]
[239.15023804 93.58698273]
[253.64923096 97.43133545]
[267.05816650 104.15444946]
[278.81237793 113.47319031]
[288.41680908 124.99512482]
[295.46697998 138.23501587]
[299.66604614 152.63528442]
[300.83712769 167.58950806]
[298.93090820 182.46789551]
[294.02764893 196.64385986]
[286.33389282 209.52043152]
[276.17361450 220.55531311]
[263.97470093 229.28379822]
[250.25088501 235.33830261]
[235.58013916 238.46383667]
[220.58027649 238.52879333]
[205.88299561 235.53042603]
[192.10726929 229.59500122]
[179.83322144 220.97250366]
[169.57774353 210.02601624]
[161.77453613 197.22030640]
[161.77453613 212.22030640]
[161.77453613 227.22030640]
[161.77453613 242.22030640]
[161.77453613 257.22030640]
[161.77453613 272.22030640]
[161.77453613 287.22030640]
[161.77453613 302.22030640]
[161.77453613 317.22030640]
[161.77453613 332.22030640]
[161.77453613 347.22030640]
[161.77453613 362.22030640]
[176.43980408 365.68829346]
[189.90971375 372.44534302]
[201.45787048 382.12713623]
[210.46148682 394.21148682]
[216.43501282 408.04672241]
[219.05630493 422.88671875]
[218.18399048 437.93118286]
[213.86512756 452.36877441]
[206.33262634 465.42089844]
[195.99267578 476.38366699]
[183.40293884 484.66589355]
[169.24234009 489.82089233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 102]
[26 101]
[27 100]
[29 99]
[30 98]
[31 97]
[33 65]
[34 64]
[35 63]
[49 62]
[50 61]
[51 60]
[52 59]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
