%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCAACUGGGGGGGGGGUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAxxxxxxxxxxUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCCCCCCCCCCCUAAUCAACU\
) } def
/len { sequence length } bind def

/coor [
[74.60140991 432.82528687]
[62.04319000 424.47412109]
[51.95696640 413.26168823]
[44.97677231 399.89279175]
[41.54138947 385.20779419]
[41.86676407 370.12982178]
[45.93244934 355.60671997]
[53.48286819 342.55136108]
[64.04339600 331.78445435]
[76.95019531 323.98284912]
[91.39192200 319.63687134]
[90.76794434 304.64987183]
[90.14396667 289.66284180]
[89.51998901 274.67584229]
[88.89601135 259.68881226]
[88.27203369 244.70179749]
[87.64805603 229.71478271]
[87.02407837 214.72776794]
[86.40010071 199.74075317]
[85.77612305 184.75373840]
[85.15214539 169.76672363]
[75.34342194 181.11524963]
[60.77489090 184.68705750]
[46.82933044 179.16244507]
[38.65935135 166.58264160]
[39.28359222 151.59564209]
[48.47141647 139.73883057]
[62.82810211 135.39306641]
[77.04914093 140.16403198]
[85.87985992 152.28811646]
[87.74747467 137.40483093]
[78.12129211 132.71954346]
[70.11373138 125.61360931]
[64.31719208 116.61274719]
[61.16051865 106.38285065]
[60.87724304 95.68074799]
[46.55464554 91.22393036]
[32.23204803 86.76711273]
[22.21572876 98.23852539]
[8.39679432 104.63828278]
[-6.83054304 104.85759735]
[-20.82805443 98.85846710]
[-31.17058563 87.68027496]
[-36.06623077 73.25971222]
[-34.66679001 58.09523773]
[-27.21472549 44.81417465]
[-15.00115204 35.71755219]
[-0.14214455 32.38142014]
[14.78788376 35.38377762]
[27.20221519 44.20444870]
[34.94998932 57.31520081]
[36.68886185 72.44451904]
[51.01145935 76.90133667]
[65.33406067 81.35814667]
[74.33325195 70.15935516]
[86.75190735 62.93608093]
[100.93553925 60.65065765]
[114.99453735 63.60755539]
[123.24682617 51.08159256]
[131.49911499 38.55563354]
[132.12838745 20.18217468]
[148.05615234 12.88106537]
[156.04606628 0.18613581]
[164.03598022 -12.50879383]
[171.89340210 -25.28615189]
[179.61749268 -38.14455414]
[187.34158325 -51.00295639]
[176.21611023 -61.13291168]
[167.28366089 -73.23493195]
[160.88603210 -86.84276581]
[157.26739502 -101.43263245]
[156.56501770 -116.44333649]
[158.80401611 -131.29786682]
[163.89651489 -145.42558289]
[171.64498901 -158.28416443]
[181.75006104 -169.38035583]
[193.82194519 -178.28894043]
[207.39559937 -184.66906738]
[221.94850159 -188.27719116]
[236.92089844 -188.97647095]
[251.73725891 -186.74189758]
[265.82843018 -181.66120911]
[273.55252075 -194.51960754]
[274.02612305 -210.33372498]
[287.21252441 -217.25964355]
[294.93661499 -230.11805725]
[294.67974854 -246.51518250]
[308.88870239 -254.70286560]
[322.94650269 -246.25830078]
[322.39169312 -229.86854553]
[307.79501343 -222.39396667]
[300.07092285 -209.53556824]
[300.14978027 -194.64117432]
[286.41091919 -186.79553223]
[278.68682861 -173.93711853]
[289.79052734 -163.88317871]
[298.72216797 -151.85223389]
[305.13699341 -138.30558777]
[308.78674316 -123.76305389]
[309.52935791 -108.78312683]
[307.33435059 -93.94143677]
[302.28433228 -79.80868530]
[294.57153320 -66.92866516]
[284.49084473 -55.79736710]
[272.42831421 -46.84387589]
[258.84637451 -40.41379929]
[244.26629639 -36.75597000]
[229.24794006 -36.01278305]
[214.36845398 -38.21467590]
[200.19998169 -43.27886963]
[192.47589111 -30.42046928]
[184.75181580 -17.56206703]
[183.99867249 -10.16082096]
[176.73091125 -4.51887751]
[168.74099731 8.17605209]
[160.75108337 20.87098122]
[163.12417603 32.77374268]
[156.51690674 43.43033218]
[144.02507019 46.80792236]
[135.77278137 59.33388138]
[127.52050018 71.85984802]
[137.15371704 87.00588226]
[139.05996704 104.85434723]
[132.84280396 121.69323730]
[119.79521179 134.02052307]
[102.63075256 139.27244568]
[100.76313782 154.15573120]
[100.13916779 169.14274597]
[100.76313782 184.12976074]
[101.38711548 199.11677551]
[102.01109314 214.10379028]
[102.63507080 229.09080505]
[103.25904846 244.07781982]
[103.88302612 259.06484985]
[104.50700378 274.05184937]
[105.13098145 289.03887939]
[105.75495911 304.02587891]
[106.37893677 319.01290894]
[121.13194275 322.14334106]
[134.64257812 328.84509277]
[146.06155396 338.69689941]
[154.67106628 351.07943726]
[159.92991638 365.21432495]
[161.50752258 380.21304321]
[159.30471802 395.13278198]
[153.45997620 409.03564453]
[144.34069824 421.04772949]
[132.52012634 430.41387939]
[118.74131012 436.54537964]
[103.87040710 439.05676270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[30 127]
[31 126]
[36 54]
[37 53]
[38 52]
[58 121]
[59 120]
[60 119]
[62 116]
[63 115]
[64 114]
[65 112]
[66 111]
[67 110]
[82 95]
[83 94]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
