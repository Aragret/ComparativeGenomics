%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGCCUAUGGGGGGGGGGAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGxxxxxxxxxxUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCCCCCCCCCCCUCGGCCUAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 414.48272705]
[71.19830322 408.46670532]
[59.48964310 398.93728638]
[50.78712082 386.60162354]
[45.73651886 372.37509155]
[44.71262741 357.31341553]
[47.79142761 342.53427124]
[54.74444962 329.13433838]
[65.05573273 318.10800171]
[77.96011353 310.27349854]
[92.50000000 306.21218872]
[92.50000000 291.21218872]
[92.50000000 276.21218872]
[92.50000000 261.21218872]
[92.50000000 246.21217346]
[92.50000000 231.21217346]
[92.50000000 216.21217346]
[92.50000000 201.21217346]
[92.50000000 186.21217346]
[92.50000000 171.21217346]
[92.50000000 156.21217346]
[77.48284149 152.04840088]
[64.16600037 143.95434570]
[53.55507660 132.54118347]
[46.45130920 118.67075348]
[43.39113235 103.39046478]
[28.43088150 102.29914856]
[13.47063351 101.20783997]
[-0.85588712 107.92061615]
[-12.98651123 99.27786255]
[-27.94676018 98.18655396]
[-42.27328110 104.89933014]
[-54.40390396 96.25656891]
[-69.36415100 95.16526031]
[-84.32440186 94.07395172]
[-99.28465271 92.98264313]
[-111.07804108 103.50364685]
[-126.85172272 102.52053070]
[-137.24745178 90.61656952]
[-136.09762573 74.85416412]
[-124.08441162 64.58486938]
[-108.33504486 65.90128326]
[-98.19333649 78.02239227]
[-83.23309326 79.11370087]
[-68.27284241 80.20500946]
[-53.31259155 81.29632568]
[-40.05612946 74.50548553]
[-26.85544968 83.22630310]
[-11.89520073 84.31761169]
[1.36126316 77.52677917]
[14.56194401 86.24758911]
[29.52219200 87.33890533]
[44.48244095 88.43021393]
[53.76768875 67.15745544]
[70.79765320 51.38640213]
[92.71951294 43.75896835]
[115.86098480 45.55288315]
[121.92399597 31.83283043]
[127.98701477 18.11277771]
[134.05001831 4.39272308]
[140.11303711 -9.32733059]
[138.61399841 -25.07736015]
[150.83544922 -33.59119415]
[156.89846802 -47.31124878]
[162.23997498 -61.32796097]
[166.84555054 -75.60342407]
[171.45111084 -89.87888336]
[158.26249695 -97.12159729]
[146.68307495 -106.72959137]
[137.13145447 -118.35555267]
[129.95289612 -131.57919312]
[125.40691376 -145.92251587]
[123.65784454 -160.86698914]
[124.76890564 -175.87239075]
[128.69995117 -190.39627075]
[135.30885315 -203.91363525]
[144.35671997 -215.93580627]
[155.51646423 -226.02819824]
[168.38467407 -233.82598877]
[182.49618530 -239.04728699]
[197.34085083 -241.50334167]
[212.38206482 -241.10536194]
[227.07609558 -237.86775208]
[240.89175415 -231.90754700]
[253.32960510 -223.44018555]
[263.94006348 -212.77177429]
[272.33950806 -200.28796387]
[278.22436523 -186.44004822]
[281.38186646 -171.72859192]
[281.69790649 -156.68544006]
[279.16101074 -141.85437012]
[273.86291504 -127.77152252]
[265.99511719 -114.94597626]
[255.84207153 -103.84138489]
[243.77078247 -94.85915375]
[230.21762085 -88.32398987]
[215.67251587 -84.47214508]
[200.66128540 -83.44284821]
[185.72656250 -85.27331543]
[181.12100220 -70.99785614]
[176.51544189 -56.72239685]
[190.95771790 -60.77465439]
[203.25386047 -52.18369293]
[204.41641235 -37.22881317]
[193.59561157 -26.84081650]
[178.70060730 -28.61249352]
[170.61851501 -41.24823380]
[164.55551147 -27.52818108]
[166.48820496 -12.75950050]
[153.83309937 -3.26431727]
[147.77008057 10.45573616]
[141.70706177 24.17579079]
[135.64405823 37.89584351]
[129.58103943 51.61589813]
[136.64244080 56.71731186]
[142.83920288 62.84004974]
[148.02511597 69.83963013]
[152.07780457 77.55089569]
[154.90162659 85.79187775]
[156.42996216 94.36812592]
[156.62675476 103.07726288]
[155.48735046 111.71378326]
[153.03863525 120.07390594]
[149.33840942 127.96035004]
[144.47395325 135.18702698]
[138.56005859 141.58341980]
[131.73629761 146.99858093]
[124.16365814 151.30474854]
[116.02085114 154.40028381]
[107.50000000 156.21217346]
[107.50000000 171.21217346]
[107.50000000 186.21217346]
[107.50000000 201.21217346]
[107.50000000 216.21217346]
[107.50000000 231.21217346]
[107.50000000 246.21217346]
[107.50000000 261.21218872]
[107.50000000 276.21218872]
[107.50000000 291.21218872]
[107.50000000 306.21218872]
[122.03988647 310.27349854]
[134.94427490 318.10800171]
[145.25555420 329.13433838]
[152.20857239 342.53427124]
[155.28736877 357.31341553]
[154.26348877 372.37509155]
[149.21287537 386.60162354]
[140.51036072 398.93728638]
[128.80169678 408.46670532]
[114.95575714 414.48272705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 53]
[27 52]
[28 51]
[30 49]
[31 48]
[33 46]
[34 45]
[35 44]
[36 43]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[63 108]
[64 107]
[65 101]
[66 100]
[67 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
