%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCAAUCAGGGGGGGGGGAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGxxxxxxxxxxCGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCCCCCCCCCCCACCAAUCA\
) } def
/len { sequence length } bind def

/coor [
[64.86009216 500.02893066]
[51.63989258 492.75643921]
[40.75308609 482.30944824]
[32.94195557 469.40020752]
[28.73907661 454.90887451]
[28.43100357 439.82354736]
[32.03874588 425.17272949]
[39.31631851 411.95532227]
[49.76752472 401.07257080]
[62.67978668 393.26641846]
[77.17272186 389.06912231]
[76.86066437 374.07238770]
[76.54861450 359.07562256]
[76.23655701 344.07885742]
[75.92449951 329.08212280]
[75.61244202 314.08535767]
[75.30038452 299.08859253]
[74.98832703 284.09185791]
[74.67627716 269.09509277]
[74.36421967 254.09834290]
[63.69847107 264.64547729]
[48.76377869 266.04364014]
[36.32569885 257.65948486]
[32.01880264 243.29109192]
[37.79415894 229.44749451]
[51.03547287 222.39997864]
[65.74430084 225.34112549]
[75.25753784 236.93896484]
[77.12515259 222.05567932]
[78.99275970 207.17240906]
[80.86037445 192.28912354]
[82.72798920 177.40583801]
[84.59560394 162.52256775]
[71.01735687 157.50106812]
[58.90408325 149.57310486]
[48.86806488 139.13938904]
[41.41658020 126.72731018]
[36.92628098 112.96427155]
[35.62413406 98.54592896]
[37.57595825 84.20108795]
[42.68309784 70.65482330]
[50.68740463 58.59185791]
[61.18428421 48.62192535]
[73.64316559 41.24897003]
[87.43428802 36.84567261]
[101.86056519 35.63460159]
[104.03739929 20.79339409]
[90.00579071 15.32348251]
[77.54929352 6.87220907]
[67.29082489 -4.13391161]
[59.74251938 -17.14070320]
[55.28016281 -31.49422646]
[54.12448502 -46.47366333]
[56.33023834 -61.32750702]
[61.78361511 -75.31127167]
[70.20812225 -87.72481537]
[81.17858887 -97.94735718]
[94.14262390 -105.46857452]
[108.44843292 -109.91403198]
[123.37758636 -111.06385803]
[125.55442810 -125.90506744]
[127.73126221 -140.74627686]
[129.90809631 -155.58747864]
[132.08493042 -170.42868042]
[117.93444824 -175.56175232]
[105.10707092 -183.43852234]
[94.12809753 -193.73643494]
[85.44710541 -206.03379822]
[79.41956329 -219.82704163]
[76.29230499 -234.55134583]
[76.19339752 -249.60375977]
[79.12687683 -264.36788940]
[84.97261810 -278.23916626]
[93.49125671 -290.64956665]
[104.33394623 -301.09085083]
[117.05669403 -309.13552856]
[131.13850403 -314.45413208]
[146.00274658 -316.82885742]
[161.04072571 -316.16247559]
[175.63664246 -312.48229980]
[189.19282532 -305.93899536]
[201.15414429 -296.80050659]
[211.03079224 -285.44107056]
[218.41831970 -272.32583618]
[223.01422119 -257.99188232]
[224.63029480 -243.02615356]
[223.20036316 -228.04148865]
[218.78298950 -213.65150452]
[211.55903625 -200.44546509]
[201.82434082 -188.96414185]
[189.97753906 -179.67770386]
[176.50373840 -172.96640015]
[161.95468140 -169.10507202]
[146.92614746 -168.25184631]
[144.74931335 -153.41064453]
[142.57246399 -138.56942749]
[140.39562988 -123.72822571]
[138.21879578 -108.88702393]
[152.18891907 -103.49839020]
[164.61553955 -95.13194275]
[174.87364197 -84.20461273]
[182.44638062 -71.26224518]
[186.95121765 -56.95228958]
[188.15913391 -41.99147415]
[186.00636292 -27.12985802]
[180.59768677 -13.11325169]
[172.20135498 -0.64577842]
[161.23580933 9.64548874]
[148.24877930 17.24207115]
[133.88999939 21.76020622]
[118.87860107 22.97023201]
[116.70176697 37.81143570]
[131.03982544 43.58283997]
[143.58953857 52.60466385]
[153.62789917 64.35712433]
[160.57653809 78.16310883]
[164.03511047 93.22721100]
[163.80436707 108.68151855]
[159.89759827 123.63564301]
[152.53988647 137.22802734]
[142.15515137 148.67556763]
[129.34167480 157.31869507]
[114.83770752 162.65946960]
[99.47888184 164.39018250]
[97.61126709 179.27345276]
[95.74365234 194.15673828]
[93.87604523 209.04002380]
[92.00843048 223.92329407]
[90.14081573 238.80657959]
[89.36096954 253.78628540]
[89.67302704 268.78305054]
[89.98508453 283.77978516]
[90.29714203 298.77655029]
[90.60919952 313.77331543]
[90.92124939 328.77005005]
[91.23330688 343.76681519]
[91.54536438 358.76358032]
[91.85742188 373.76031494]
[92.16947937 388.75708008]
[106.82447052 392.34783936]
[120.05027771 399.61010742]
[130.94514465 410.04870605]
[138.76625061 422.95190430]
[142.98031616 437.43997192]
[143.30003357 452.52505493]
[139.70361328 467.17868042]
[132.43624878 480.40167236]
[121.99344635 491.29251099]
[109.08721161 499.10864258]
[94.59752655 503.31710815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[28 129]
[29 128]
[30 127]
[31 126]
[32 125]
[33 124]
[46 112]
[47 111]
[60 98]
[61 97]
[62 96]
[63 95]
[64 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
