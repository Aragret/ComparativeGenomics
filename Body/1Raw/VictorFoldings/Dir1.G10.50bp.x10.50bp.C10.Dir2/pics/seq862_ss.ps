%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAAAGCAAGGGGGGGGGGUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUxxxxxxxxxxUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCCCCCCCCCCCUCAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[86.78761292 483.09094238]
[72.76566315 477.53793335]
[60.56570816 468.67160034]
[50.95463562 457.04928589]
[44.53661346 443.40158081]
[41.71507645 428.58639526]
[42.66739273 413.53503418]
[47.33369446 399.19360352]
[55.42066193 386.46365356]
[66.41993713 376.14535522]
[79.64009857 368.88739014]
[94.25010681 365.14596558]
[94.25010681 350.14596558]
[94.25010681 335.14596558]
[94.25010681 320.14596558]
[94.25010681 305.14596558]
[94.25010681 290.14596558]
[94.25010681 275.14596558]
[94.25010681 260.14596558]
[94.25010681 245.14595032]
[94.25010681 230.14595032]
[94.25010681 215.14595032]
[80.08269501 207.43360901]
[71.67424011 193.55828857]
[71.39104462 177.24278259]
[79.40436554 162.92048645]
[93.61827087 154.53059387]
[93.31028748 139.53376770]
[93.00231171 124.53691864]
[84.93266296 120.59134674]
[78.73042297 114.09373474]
[75.16428375 105.84937286]
[74.67621613 96.88006592]
[60.98558807 90.75089264]
[47.29496384 84.62171173]
[33.60433578 78.49253845]
[19.91371155 72.36336517]
[6.22308588 66.23419189]
[-5.76091433 72.46263123]
[-18.94898415 70.65820312]
[-28.53440857 61.70564270]
[-31.15481377 49.05313873]
[-44.71670914 42.64416504]
[-58.27860641 36.23518753]
[-71.31005859 44.49260330]
[-86.73693848 44.37099838]
[-99.63659668 35.90917969]
[-105.89279175 21.80727959]
[-103.50920105 6.56516695]
[-93.24641418 -4.95345831]
[-78.37924957 -9.07304382]
[-63.65176392 -4.47904444]
[-53.76345062 7.36261034]
[-51.86963272 22.67329216]
[-38.30773544 29.08226776]
[-24.74583817 35.49124527]
[-9.20243263 29.14257050]
[6.44335508 36.10969925]
[12.35225964 52.54356766]
[26.04288483 58.67274094]
[39.73350906 64.80191803]
[53.42413712 70.93109131]
[67.11476135 77.06026459]
[80.80538940 83.18943787]
[89.41978455 76.78174591]
[99.90744781 74.48491669]
[110.41149139 76.70559692]
[120.28719330 65.41532135]
[130.16290283 54.12504196]
[120.15808868 42.92310333]
[111.60573578 30.57657242]
[104.63549042 17.27261543]
[99.35301971 3.21291637]
[95.83840179 -11.38938141]
[94.14492798 -26.31291199]
[94.29825592 -41.33143616]
[96.29607391 -56.21728134]
[100.10808563 -70.74477386]
[105.67651367 -84.69369507]
[112.91693115 -97.85256958]
[121.71958160 -110.02191162]
[131.95101929 -121.01725006]
[143.45613098 -130.67189026]
[156.06050110 -138.83946228]
[169.57305908 -145.39616394]
[183.78897095 -150.24258423]
[198.49269104 -153.30525208]
[213.46134949 -154.53775024]
[228.46800232 -153.92140198]
[243.28515625 -151.46551514]
[257.68820190 -147.20735168]
[271.45877075 -141.21145630]
[284.38815308 -133.56872559]
[296.28027344 -124.39501190]
[306.95489502 -113.82939911]
[316.25015259 -102.03205109]
[324.02517700 -89.18181610]
[330.16210938 -75.47350311]
[334.56787109 -61.11491776]
[337.17568970 -46.32374191]
[337.94604492 -31.32420349]
[336.86724854 -16.34368896]
[333.95562744 -1.60930192]
[329.25537109 12.65559006]
[322.83770752 26.23473358]
[314.79992676 38.92227173]
[305.26385498 50.52586746]
[294.37411499 60.86961365]
[282.29574585 69.79669189]
[269.21188354 77.17178345]
[255.32086182 82.88307953]
[240.83325195 86.84399414]
[225.96868896 88.99448395]
[210.95252991 89.30194855]
[196.01240540 87.76172638]
[181.37480164 84.39716339]
[167.26164246 79.25926971]
[153.88684082 72.42593384]
[141.45318604 64.00074768]
[131.57748413 75.29102325]
[121.70176697 86.58130646]
[123.97649384 108.72673035]
[107.99915314 124.22894287]
[108.30712891 139.22578430]
[108.61510468 154.22262573]
[121.23128510 160.34085083]
[129.92852783 171.25433350]
[133.04710388 184.78855896]
[130.03155518 198.27818298]
[121.52876282 209.09196472]
[109.25010681 215.14595032]
[109.25010681 230.14595032]
[109.25010681 245.14595032]
[109.25010681 260.14596558]
[109.25010681 275.14596558]
[109.25010681 290.14596558]
[109.25010681 305.14596558]
[109.25010681 320.14596558]
[109.25010681 335.14596558]
[109.25010681 350.14596558]
[109.25010681 365.14596558]
[123.86012268 368.88739014]
[137.08027649 376.14535522]
[148.07955933 386.46365356]
[156.16651917 399.19360352]
[160.83282471 413.53503418]
[161.78514099 428.58639526]
[158.96360779 443.40158081]
[152.54557800 457.04928589]
[142.93450928 468.67160034]
[130.73455811 477.53793335]
[116.71260834 483.09094238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 125]
[28 124]
[29 123]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[42 56]
[43 55]
[44 54]
[67 121]
[68 120]
[69 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
