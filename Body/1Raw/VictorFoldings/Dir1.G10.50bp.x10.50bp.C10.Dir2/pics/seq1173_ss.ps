%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCCCAGGGGGGGGGGGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCxxxxxxxxxxCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCCCCCCCCCCCUAACCCCUG\
) } def
/len { sequence length } bind def

/coor [
[39.52557373 753.29376221]
[25.67963409 747.27777100]
[13.97097301 737.74835205]
[5.26844883 725.41265869]
[0.21784687 711.18615723]
[-0.80604440 696.12445068]
[2.27275443 681.34533691]
[9.22577667 667.94537354]
[19.53705978 656.91906738]
[32.44144058 649.08453369]
[46.98132706 645.02325439]
[46.98132706 630.02325439]
[46.98132706 615.02325439]
[46.98132706 600.02325439]
[46.98132706 585.02325439]
[46.98132706 570.02325439]
[46.98132706 555.02325439]
[46.98132706 540.02325439]
[46.98132706 525.02325439]
[46.98132706 510.02322388]
[46.98132706 495.02322388]
[39.24403000 482.29595947]
[46.98132706 468.49578857]
[44.69964218 465.72787476]
[43.68024826 461.69519043]
[44.51269531 457.01977539]
[47.47858047 452.56747437]
[48.41420746 437.59667969]
[38.39770126 426.63284302]
[39.13329697 411.43701172]
[50.70106506 401.00512695]
[51.63669586 386.03433228]
[52.57232285 371.06353760]
[50.46773148 368.15869141]
[49.70186234 364.07028198]
[50.82431412 359.45590210]
[54.06213760 355.19723511]
[55.92975235 340.31396484]
[57.79736710 325.43069458]
[59.66497803 310.54739380]
[61.53259277 295.66412354]
[63.40020370 280.78085327]
[56.21347046 271.00033569]
[57.69083023 258.54898071]
[67.58001709 250.20286560]
[69.75685120 235.36164856]
[71.93369293 220.52044678]
[66.12531281 206.80505371]
[75.78341675 194.27383423]
[77.96025848 179.43263245]
[80.13709259 164.59141541]
[66.56576538 170.98039246]
[53.01623154 164.54531860]
[49.39211273 149.98971558]
[58.34233856 137.95254517]
[73.32502747 137.23200989]
[83.38884735 148.35414124]
[87.09500885 133.81919861]
[90.80116272 119.28426361]
[94.50732422 104.74932861]
[86.45043945 106.14309692]
[77.72202301 103.10253143]
[70.22436523 95.53299713]
[65.80765533 84.06143951]
[66.01705933 69.98452759]
[66.64103699 54.99751282]
[67.26501465 40.01049805]
[53.07804108 34.75835419]
[41.20968628 25.37766266]
[32.82269287 12.78744888]
[28.73872757 -1.77882838]
[29.35790062 -16.89411163]
[34.61954880 -31.07756233]
[44.00819016 -42.93962860]
[56.60402298 -51.31818390]
[71.17303467 -55.39238739]
[86.28789520 -54.76308823]
[100.46781921 -49.49193573]
[112.32359314 -40.09534836]
[120.69370270 -27.49390411]
[124.75814819 -12.92216778]
[124.11871338 2.19227266]
[118.83806610 16.36865807]
[109.43353271 28.21813011]
[96.82648468 36.57979965]
[82.25202942 40.63447571]
[81.62805176 55.62149048]
[81.00407410 70.60850525]
[87.69721985 73.99256134]
[100.25170135 65.78373718]
[101.08350372 80.76068115]
[107.77664185 84.14473724]
[119.47626495 74.75757599]
[131.17588806 65.37041473]
[142.87551880 55.98324966]
[151.44577026 41.35495758]
[167.87487793 45.54077530]
[168.40066528 62.48656845]
[152.26268005 67.68287659]
[140.56304932 77.07003784]
[128.86343384 86.45719910]
[117.16380310 95.84436035]
[109.04226685 108.45549011]
[105.33610535 122.99042511]
[101.62994385 137.52536011]
[97.92378235 152.06030273]
[94.97829437 166.76826477]
[92.80146027 181.60946655]
[90.62462616 196.45066833]
[96.27729797 211.22760010]
[86.77489471 222.69728088]
[84.59806061 237.53849792]
[82.42121887 252.37969971]
[89.62564087 269.29348755]
[78.28348541 282.64846802]
[76.41587067 297.53173828]
[74.54825592 312.41500854]
[72.68064880 327.29830933]
[70.81303406 342.18157959]
[68.94541931 357.06484985]
[67.54311371 371.99917603]
[66.60749054 386.96997070]
[65.67185974 401.94073486]
[75.85076904 413.73175049]
[74.68864441 428.90093994]
[63.38499832 438.53228760]
[62.44937134 453.50308228]
[61.98132706 468.49578857]
[69.71862793 482.29595947]
[61.98132706 495.02322388]
[61.98132706 510.02322388]
[61.98132706 525.02325439]
[61.98132706 540.02325439]
[61.98132706 555.02325439]
[61.98132706 570.02325439]
[61.98132706 585.02325439]
[61.98132706 600.02325439]
[61.98132706 615.02325439]
[61.98132706 630.02325439]
[61.98132706 645.02325439]
[76.52121735 649.08453369]
[89.42559814 656.91906738]
[99.73687744 667.94537354]
[106.68990326 681.34533691]
[109.76869965 696.12445068]
[108.74481201 711.18615723]
[103.69420624 725.41265869]
[94.99168396 737.74835205]
[83.28302002 747.27777100]
[69.43708038 753.29376221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[27 127]
[28 126]
[31 123]
[32 122]
[33 121]
[37 120]
[38 119]
[39 118]
[40 117]
[41 116]
[42 115]
[45 113]
[46 112]
[47 111]
[49 109]
[50 108]
[51 107]
[57 106]
[58 105]
[59 104]
[60 103]
[65 88]
[66 87]
[67 86]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
