%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCAUCAAUAGGGGGGGGGGCAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUAxxxxxxxxxxCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUCCCCCCCCCCAUCUCAUCAACA\
) } def
/len { sequence length } bind def

/coor [
[57.42225647 300.50613403]
[45.69358063 297.65219116]
[34.15324020 294.11279297]
[22.84124565 289.90023804]
[11.79683399 285.02911377]
[1.05830467 279.51632690]
[-9.33710289 273.38098145]
[-19.35333824 266.64437866]
[-28.95566368 259.32986450]
[-38.11078262 251.46281433]
[-46.78694153 243.07048035]
[-54.95405579 234.18200684]
[-62.58380127 224.82818604]
[-74.80778503 233.52154541]
[-87.03176117 242.21488953]
[-93.79376221 256.51824951]
[-108.64982605 257.58905029]
[-120.87380981 266.28237915]
[-133.09779358 274.97573853]
[-145.32177734 283.66909790]
[-157.54574585 292.36242676]
[-163.87159729 307.49240112]
[-180.16966248 309.31036377]
[-189.67390442 295.94616699]
[-182.60716248 281.14776611]
[-166.23910522 280.13845825]
[-154.01512146 271.44509888]
[-141.79113770 262.75173950]
[-129.56715393 254.05841064]
[-117.34317780 245.36506653]
[-111.45551300 231.68351746]
[-95.72511292 229.99090576]
[-83.50112915 221.29756165]
[-71.27714539 212.60421753]
[-83.54682922 191.24763489]
[-93.16633606 168.57357788]
[-99.99678802 144.90940857]
[-103.93955231 120.59680176]
[-104.93770599 95.98680878]
[-102.97683716 71.43476105]
[-98.08525848 47.29515457]
[-90.33359528 23.91653442]
[-79.83377075 1.63645923]
[-92.72162628 -6.03837967]
[-105.60948181 -13.71321869]
[-118.49733734 -21.38805771]
[-131.50927734 -13.32902908]
[-146.77682495 -12.25163269]
[-160.79159546 -18.40344620]
[-170.33309937 -30.37082672]
[-173.20877075 -45.40375900]
[-168.75781250 -60.04778671]
[-158.00300598 -70.93781281]
[-143.41574097 -75.57140350]
[-128.34803772 -72.88377380]
[-116.26238251 -63.49253845]
[-109.93594360 -49.55572510]
[-110.82249451 -34.27591324]
[-97.93463898 -26.60107613]
[-85.04678345 -18.92623711]
[-72.15892792 -11.25139713]
[-64.25117493 -22.62594032]
[-55.59318161 -33.44036865]
[-46.22448730 -43.64529037]
[-36.18789291 -53.19408798]
[-25.52923584 -62.04314423]
[-14.29720592 -70.15204620]
[-2.54310441 -77.48374939]
[9.67937851 -84.00476837]
[22.31441498 -89.68531799]
[35.30429459 -94.49945068]
[48.58967972 -98.42517090]
[62.10988998 -101.44455719]
[75.80316925 -103.54381561]
[89.60697174 -104.71334839]
[103.45824432 -104.94782257]
[117.29372406 -104.24617004]
[131.05021667 -102.61158752]
[144.66487122 -100.05154419]
[158.07551575 -96.57772827]
[171.22088623 -92.20602417]
[184.04095459 -86.95637512]
[196.47715759 -80.85278320]
[208.47267151 -73.92311859]
[219.97271729 -66.19902802]
[230.92477417 -57.71579361]
[241.27882385 -48.51217270]
[250.98754883 -38.63019562]
[260.00662231 -28.11500549]
[268.29483032 -17.01462936]
[275.81433105 -5.37977028]
[282.53076172 6.73642731]
[296.12893677 0.40480852]
[309.72711182 -5.92681074]
[323.32531738 -12.25842953]
[336.92349243 -18.59004784]
[335.07019043 -33.60405731]
[337.94918823 -48.45554352]
[345.27841187 -61.68950653]
[356.33981323 -72.00941467]
[370.04971313 -78.40423584]
[385.06497192 -80.24746704]
[399.91452026 -77.35852814]
[413.14355469 -70.02043915]
[423.45605469 -58.95212555]
[429.84167480 -45.23794174]
[431.67486572 -30.22146225]
[428.77597046 -15.37384796]
[421.42901611 -2.14971995]
[410.35379028 8.15535831]
[396.63534546 14.53179932]
[381.61764526 16.35490417]
[366.77197266 13.44606590]
[353.55276489 6.09026051]
[343.25509644 -4.99186468]
[329.65692139 1.33975422]
[316.05874634 7.67137337]
[302.46057129 14.00299263]
[288.86236572 20.33461189]
[293.22427368 31.58985901]
[296.91610718 43.08234787]
[299.92501831 54.77222061]
[302.24063110 66.61894226]
[303.85488892 78.58142853]
[304.76217651 90.61818695]
[304.95938110 102.68748474]
[304.44580078 114.74745941]
[303.22320557 126.75629425]
[301.29583740 138.67234802]
[298.67041016 150.45426941]
[295.35601807 162.06123352]
[291.36413574 173.45297241]
[286.70861816 184.58998108]
[281.40560913 195.43363953]
[275.47348022 205.94633484]
[268.93283081 216.09161377]
[261.80636597 225.83430481]
[254.11872864 235.14060974]
[245.89663696 243.97825623]
[237.16859436 252.31660461]
[227.96484375 260.12670898]
[218.31733704 267.38153076]
[208.25950623 274.05587769]
[197.82623291 280.12661743]
[187.05372620 285.57269287]
[175.97930908 290.37518311]
[164.64140320 294.51751709]
[153.07933044 297.98522949]
[141.33317566 300.76638794]
[129.44367981 302.85128784]
[117.45207977 304.23269653]
[105.39995575 304.90585327]
[93.32910156 304.86840820]
[81.28138733 304.12051392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 34]
[14 33]
[15 32]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[43 61]
[44 60]
[45 59]
[46 58]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
