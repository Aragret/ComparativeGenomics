%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAUCACCCGGGGGGGGGGCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUxxxxxxxxxxAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCCCCCCCCCCCUCAUCACCC\
) } def
/len { sequence length } bind def

/coor [
[58.95781708 534.51000977]
[45.73762131 527.23754883]
[34.85081482 516.79052734]
[27.03968620 503.88128662]
[22.83680534 489.38995361]
[22.52873230 474.30462646]
[26.13647270 459.65377808]
[33.41404724 446.43640137]
[43.86525345 435.55364990]
[56.77751541 427.74749756]
[71.27045441 423.55020142]
[70.95839691 408.55343628]
[70.64633942 393.55670166]
[70.33428192 378.55993652]
[70.02222443 363.56320190]
[69.71017456 348.56643677]
[69.39811707 333.56967163]
[69.08605957 318.57293701]
[68.77400208 303.57617188]
[68.46194458 288.57940674]
[58.41925430 299.72143555]
[43.77956772 302.98937988]
[29.95195770 297.17584229]
[22.04545212 284.42880249]
[22.98134613 269.45803833]
[32.41384506 257.79492188]
[46.85783005 253.74879456]
[60.97653580 258.81457520]
[69.55312347 271.11975098]
[71.72995758 256.27853394]
[73.90679932 241.43733215]
[76.08363342 226.59611511]
[78.26046753 211.75491333]
[80.28280640 196.89186096]
[82.15042114 182.00859070]
[72.83728790 170.44134521]
[74.51929474 155.32096863]
[86.71523285 145.63093567]
[88.58284760 130.74765015]
[79.71269226 125.77198029]
[72.79319763 118.31829071]
[68.48968506 109.10327148]
[67.21592712 99.01296234]
[69.09440613 89.01755524]
[56.48328018 80.89601135]
[43.87215042 72.77446747]
[30.25086021 79.87065887]
[14.90708160 79.18946838]
[1.96821511 70.91412354]
[-5.08524942 57.27066040]
[-4.35596466 41.92909241]
[3.95989466 29.01622772]
[17.62540436 22.00556374]
[32.96461105 22.78293228]
[45.85134506 31.13922691]
[52.81914139 44.82664490]
[51.99369431 60.16333771]
[64.60482025 68.28488159]
[77.21595001 76.40642548]
[81.21941376 73.11023712]
[85.69235229 70.48625946]
[90.52296448 68.60006714]
[89.58734131 53.62927628]
[88.65171051 38.65848541]
[87.71607971 23.68769455]
[86.78045654 8.71690369]
[72.30433655 4.15549707]
[60.45597076 -5.33031845]
[52.83775711 -18.45766449]
[50.47998810 -33.45117569]
[53.70153809 -48.28310394]
[62.06671906 -60.94754791]
[74.44420624 -69.73175049]
[89.16004944 -73.44771576]
[104.22405243 -71.59290314]
[117.59892273 -64.41813660]
[127.47583008 -52.89376831]
[132.51899719 -38.57836151]
[132.04638672 -23.40796089]
[126.12190247 -9.43423748]
[115.54679108 1.45297647]
[101.75124359 7.78127480]
[102.68687439 22.75206566]
[103.62250519 37.72285843]
[104.55812836 52.69364929]
[105.49375916 67.66444397]
[113.06753540 69.91662598]
[119.88290405 73.91475677]
[125.54433441 79.42679596]
[139.06852722 72.93863678]
[152.59271240 66.45046997]
[166.11691284 59.96230316]
[179.64109802 53.47414017]
[193.16528320 46.98597336]
[191.65370178 31.90317154]
[195.39492798 17.21374893]
[203.93714905 4.69152451]
[216.24888611 -4.15138054]
[230.84342957 -8.24714279]
[245.95840454 -7.10118008]
[259.76861572 -0.85187167]
[270.60641479 9.74614716]
[277.16308594 23.41311455]
[278.64685059 38.49867630]
[274.87857056 53.18117905]
[266.31329346 65.68763733]
[253.98527527 74.50784302]
[239.38320923 78.57669830]
[224.27037048 77.40288544]
[210.47169495 71.12813568]
[199.65345764 60.51016235]
[186.12925720 66.99832916]
[172.60507202 73.48649597]
[159.08088684 79.97465515]
[145.55668640 86.46282196]
[132.03250122 92.95098877]
[126.61488342 119.16814423]
[103.46612549 132.61526489]
[101.59851074 147.49855042]
[111.02213287 159.90148926]
[108.91609192 174.96865845]
[97.03369904 183.87620544]
[95.16608429 198.75947571]
[97.21076202 207.73005676]
[93.10167694 213.93174744]
[90.92484283 228.77296448]
[88.74800110 243.61416626]
[86.57116699 258.45538330]
[84.39432526 273.29656982]
[83.45870209 288.26736450]
[83.77075958 303.26412964]
[84.08280945 318.26086426]
[84.39486694 333.25762939]
[84.70692444 348.25439453]
[85.01898193 363.25112915]
[85.33103943 378.24789429]
[85.64309692 393.24462891]
[85.95514679 408.24139404]
[86.26720428 423.23815918]
[100.92219543 426.82891846]
[114.14801025 434.09118652]
[125.04287720 444.52975464]
[132.86396790 457.43298340]
[137.07804871 471.92105103]
[137.39776611 487.00613403]
[133.80134583 501.65975952]
[126.53397369 514.88275146]
[116.09117126 525.77355957]
[103.18494415 533.58972168]
[88.69525146 537.79815674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[34 123]
[35 122]
[38 119]
[39 118]
[44 59]
[45 58]
[46 57]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
