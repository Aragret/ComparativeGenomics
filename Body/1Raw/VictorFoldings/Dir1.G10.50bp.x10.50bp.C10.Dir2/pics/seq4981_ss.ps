%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAGCUAUGGGGGGGGGGAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUAxxxxxxxxxxUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACCCCCCCCCCCUAAUAGCUUU\
) } def
/len { sequence length } bind def

/coor [
[81.71614075 375.11114502]
[68.49594116 367.83868408]
[57.60913849 357.39169312]
[49.79800797 344.48242188]
[45.59512711 329.99111938]
[45.28705215 314.90579224]
[48.89479446 300.25494385]
[56.17236710 287.03756714]
[66.62357330 276.15478516]
[79.53583527 268.34866333]
[94.02877045 264.15136719]
[93.71672058 249.15461731]
[93.40466309 234.15786743]
[93.09260559 219.16110229]
[92.78054810 204.16435242]
[92.46849060 189.16760254]
[92.15643311 174.17085266]
[91.84438324 159.17408752]
[91.53232574 144.17733765]
[91.22026825 129.18058777]
[78.36186218 121.45649719]
[64.97557831 128.22460938]
[62.63339233 143.56390381]
[51.69840240 154.57324219]
[36.37533569 157.01933289]
[22.55622864 149.96157837]
[15.55480576 136.11384583]
[18.06325722 120.80086517]
[29.11703491 109.91078949]
[44.46573257 107.63108063]
[58.20746613 114.83833313]
[71.59375000 108.07021332]
[78.54447174 86.14913177]
[96.83372498 78.68843079]
[99.93204498 64.01190948]
[103.03037262 49.33538055]
[98.31041718 34.23463440]
[108.50974274 23.38000107]
[111.60806274 8.70347500]
[114.70638275 -5.97305012]
[101.27594757 -11.80232430]
[89.25296021 -20.14853287]
[79.10291290 -30.68617439]
[71.21827698 -43.00495148]
[65.90341187 -56.62575150]
[63.36273575 -71.01927185]
[63.69293976 -85.62658691]
[66.87924194 -99.88087463]
[72.79609680 -113.22937775]
[81.21209717 -125.15486908]
[91.79903412 -135.19566345]
[104.14470673 -142.96353149]
[117.76898193 -148.15866089]
[132.14242554 -150.58128357]
[146.70690918 -150.13928223]
[150.10989380 -164.74818420]
[153.51286316 -179.35707092]
[156.91584778 -193.96595764]
[155.44781494 -198.20935059]
[155.44764709 -202.28010559]
[156.67228699 -205.72715759]
[158.75436401 -208.22894287]
[161.25701904 -209.62324524]
[165.86257935 -223.89869690]
[170.46815491 -238.17416382]
[175.07371521 -252.44961548]
[179.67927551 -266.72506714]
[166.49066162 -273.96780396]
[154.91123962 -283.57580566]
[145.35961914 -295.20175171]
[138.18106079 -308.42538452]
[133.63508606 -322.76870728]
[131.88601685 -337.71319580]
[132.99708557 -352.71859741]
[136.92811584 -367.24246216]
[143.53701782 -380.75982666]
[152.58488464 -392.78201294]
[163.74462891 -402.87438965]
[176.61285400 -410.67218018]
[190.72434998 -415.89349365]
[205.56903076 -418.34954834]
[220.61024475 -417.95156860]
[235.30426025 -414.71395874]
[249.11991882 -408.75375366]
[261.55776978 -400.28637695]
[272.16821289 -389.61798096]
[280.56768799 -377.13415527]
[286.45254517 -363.28625488]
[289.61004639 -348.57479858]
[289.92605591 -333.53164673]
[287.38916016 -318.70056152]
[282.09106445 -304.61770630]
[274.22329712 -291.79217529]
[264.07025146 -280.68759155]
[251.99894714 -271.70535278]
[238.44578552 -265.17019653]
[223.90069580 -261.31835938]
[208.88946533 -260.28906250]
[193.95474243 -262.11950684]
[189.34916687 -247.84405518]
[184.74360657 -233.56858826]
[180.13804626 -219.29313660]
[175.53248596 -205.01766968]
[171.52473450 -190.56298828]
[168.12176514 -175.95408630]
[164.71878052 -161.34519958]
[161.31581116 -146.73631287]
[175.28585815 -140.28001404]
[187.62202454 -131.06922913]
[197.78887939 -119.50081635]
[205.34457397 -106.07403564]
[209.95997620 -91.36898041]
[211.43305969 -76.02153015]
[209.69773865 -60.69583511]
[204.82682800 -46.05560684]
[197.02894592 -32.73534775]
[186.63966370 -21.31286812]
[174.10700989 -12.28420830]
[159.97212219 -6.04210901]
[144.84599304 -2.85892177]
[129.38290405 -2.87472844]
[126.28458405 11.80179691]
[123.18626404 26.47832298]
[128.12783813 40.52930832]
[117.70689392 52.43370438]
[114.60857391 67.11022949]
[111.51025391 81.78675842]
[123.63117981 94.75099945]
[122.62005615 114.50044250]
[106.21701813 128.86853027]
[106.52907562 143.86528015]
[106.84113312 158.86203003]
[107.15319061 173.85879517]
[107.46524811 188.85554504]
[107.77730560 203.85229492]
[108.08935547 218.84904480]
[108.40141296 233.84580994]
[108.71347046 248.84255981]
[109.02552795 263.83932495]
[123.68051910 267.43008423]
[136.90632629 274.69235229]
[147.80119324 285.13092041]
[155.62229919 298.03414917]
[159.83636475 312.52221680]
[160.15608215 327.60729980]
[156.55966187 342.26092529]
[149.29229736 355.48391724]
[138.84950256 366.37475586]
[125.94326782 374.19085693]
[111.45357513 378.39935303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 32]
[22 31]
[34 127]
[35 126]
[36 125]
[38 123]
[39 122]
[40 121]
[55 107]
[56 106]
[57 105]
[58 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
