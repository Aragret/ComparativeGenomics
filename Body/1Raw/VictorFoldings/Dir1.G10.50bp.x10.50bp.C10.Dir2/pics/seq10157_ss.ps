%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAGCCCCCGGGGGGGGGGAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAxxxxxxxxxxACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACCCCCCCCCCCAAAGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.86118317 494.91333008]
[80.01524353 488.89730835]
[68.30657959 479.36788940]
[59.60405731 467.03222656]
[54.55345535 452.80569458]
[53.52956390 437.74401855]
[56.60836029 422.96487427]
[63.56138229 409.56494141]
[73.87266541 398.53860474]
[86.77704620 390.70410156]
[101.31693268 386.64279175]
[101.31693268 371.64279175]
[101.31693268 356.64279175]
[101.31693268 341.64279175]
[101.31693268 326.64279175]
[101.31693268 311.64279175]
[101.31693268 296.64279175]
[101.31693268 281.64279175]
[101.31693268 266.64279175]
[101.31693268 251.64277649]
[85.15592194 244.62176514]
[73.62329102 231.23045349]
[69.04984283 214.10523987]
[72.39033508 196.64395142]
[83.02458191 182.33169556]
[98.87202454 174.04534912]
[97.93639374 159.07455444]
[97.00077057 144.10375977]
[96.06513977 129.13296509]
[95.12950897 114.16217804]
[87.41636658 109.44438934]
[83.52828217 100.79325867]
[85.27397919 91.02001190]
[76.76288605 78.66844177]
[62.56139755 71.69503784]
[61.71105576 56.82472992]
[53.19996643 44.47315598]
[47.31101608 41.24394989]
[44.41887665 36.25728607]
[44.60432053 31.42601967]
[36.61440277 18.73109055]
[26.86675072 7.33006954]
[15.56774616 -2.53565335]
[4.26874161 -12.40137672]
[-7.03026342 -22.26709938]
[-18.32926750 -32.13282394]
[-29.83107185 -41.76134872]
[-41.53069687 -51.14850998]
[-53.23031998 -60.53567123]
[-67.82479858 -55.53519440]
[-82.80043793 -59.24108124]
[-93.37857819 -70.47079468]
[-96.18376923 -85.64097595]
[-90.32087708 -99.91088104]
[-77.66074371 -108.72702789]
[-62.24315643 -109.27621460]
[-48.98781967 -101.38320160]
[-42.12446213 -87.56662750]
[-43.84315872 -72.23529816]
[-32.14353180 -62.84813309]
[-20.44390869 -53.46097183]
[-15.62306595 -53.09357452]
[-10.99923515 -49.65097427]
[-8.46354485 -43.43182755]
[2.83545995 -33.56610489]
[14.13446426 -23.70038033]
[25.43346977 -13.83465862]
[36.73247528 -3.96893525]
[32.80677414 -18.44611931]
[34.61402893 -33.33684921]
[41.88887405 -46.45464706]
[53.56311035 -55.87336349]
[67.92255402 -60.21000671]
[82.85873413 -58.82780075]
[96.17850494 -51.92970657]
[105.92605591 -40.52860260]
[110.67012024 -26.29856873]
[109.71408844 -11.32906628]
[103.19834900 2.18186045]
[92.07963562 12.25033760]
[77.99056244 17.39796257]
[62.99990082 16.86888504]
[49.30933380 10.74117470]
[57.29924774 23.43610382]
[65.55153656 35.96206665]
[74.06262970 48.31363678]
[87.65534973 54.40356827]
[89.11445618 70.15734863]
[97.62554932 82.50891876]
[112.03776550 86.66680908]
[125.82014465 80.74684906]
[139.60252380 74.82688141]
[140.53277588 60.83472061]
[147.38056946 48.67335510]
[158.75370789 40.69860458]
[172.38993835 38.42683411]
[185.60682678 42.24690247]
[195.82945251 51.35499573]
[209.73200989 45.72303772]
[223.63456726 40.09108353]
[237.53712463 34.45912552]
[245.09089661 20.30567932]
[260.89178467 17.52873039]
[272.81869507 28.25851631]
[271.72232056 44.26406097]
[258.44372559 53.26728439]
[243.16908264 48.36168289]
[229.26652527 53.99363708]
[215.36396790 59.62559509]
[201.46141052 65.25755310]
[199.63331604 81.28283691]
[189.93214417 94.28549194]
[174.91882324 100.67535400]
[158.63667297 98.62908936]
[145.52249146 88.60926056]
[131.74011230 94.52922821]
[117.95772552 100.44918823]
[110.10030365 113.22654724]
[111.03593445 128.19734192]
[111.97155762 143.16813660]
[112.90718842 158.13891602]
[113.84281921 173.10971069]
[125.85795593 176.67767334]
[136.16433716 183.76693726]
[143.76354980 193.67236328]
[147.92515564 205.41688538]
[148.25683594 217.84797668]
[144.74131775 229.75061035]
[137.73663330 239.96617126]
[127.93968964 247.50508118]
[116.31693268 251.64277649]
[116.31693268 266.64279175]
[116.31693268 281.64279175]
[116.31693268 296.64279175]
[116.31693268 311.64279175]
[116.31693268 326.64279175]
[116.31693268 341.64279175]
[116.31693268 356.64279175]
[116.31693268 371.64279175]
[116.31693268 386.64279175]
[130.85682678 390.70410156]
[143.76119995 398.53860474]
[154.07249451 409.56494141]
[161.02551270 422.96487427]
[164.10430908 437.74401855]
[163.08041382 452.80569458]
[158.02981567 467.03222656]
[149.32728577 479.36788940]
[137.61862183 488.89730835]
[123.77268982 494.91333008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 122]
[27 121]
[28 120]
[29 119]
[30 118]
[33 89]
[34 88]
[36 86]
[37 85]
[40 84]
[41 83]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 61]
[48 60]
[49 59]
[90 117]
[91 116]
[92 115]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
