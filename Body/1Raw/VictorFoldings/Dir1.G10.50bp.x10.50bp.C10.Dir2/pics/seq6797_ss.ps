%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCGGAGGGGGGGGGGGGAGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUxxxxxxxxxxUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCCCCCCCCCCCGCCGCAG\
) } def
/len { sequence length } bind def

/coor [
[95.36537170 419.42617798]
[81.51943207 413.41015625]
[69.81077576 403.88073730]
[61.10824966 391.54507446]
[56.05764771 377.31854248]
[55.03375626 362.25686646]
[58.11255264 347.47772217]
[65.06557465 334.07778931]
[75.37686157 323.05145264]
[88.28124237 315.21694946]
[102.82112885 311.15563965]
[102.82112885 296.15563965]
[102.82112885 281.15563965]
[102.82112885 266.15563965]
[102.82112885 251.15562439]
[102.82112885 236.15562439]
[102.82112885 221.15562439]
[102.82112885 206.15562439]
[102.82112885 191.15562439]
[102.82112885 176.15562439]
[95.08382416 163.42835999]
[102.82112885 149.62818909]
[102.82112885 134.62818909]
[102.82112885 119.62818146]
[90.74114227 110.73583221]
[76.41854095 115.19264984]
[62.09594345 119.64946747]
[54.96852875 133.75534058]
[39.92845535 138.61039734]
[25.89873123 131.33424377]
[21.20294380 116.24369049]
[28.62702179 102.29167175]
[43.76638794 97.75569916]
[57.63912964 105.32686615]
[71.96172333 100.87005615]
[86.28432465 96.41323853]
[71.29084015 96.85529327]
[58.24169540 89.45800781]
[50.92031860 76.36612701]
[51.44944382 61.37545776]
[59.67565918 48.83235931]
[73.21388245 42.37352753]
[88.13888550 43.87162018]
[100.12336731 52.89228439]
[105.69257355 66.82009125]
[103.23283386 81.61465454]
[109.57996368 68.02370453]
[115.92709351 54.43275070]
[122.27421570 40.84180069]
[111.56721497 22.56216049]
[118.09633636 0.54551584]
[140.20924377 -10.56082153]
[131.08078003 -23.48295975]
[137.45466614 -36.94486237]
[135.89707947 -51.86377335]
[134.33950806 -66.78268433]
[132.78192139 -81.70159912]
[131.22433472 -96.62051392]
[129.66676331 -111.53942108]
[125.64028168 -119.81223297]
[128.23527527 -126.78443909]
[126.98840332 -141.73252869]
[118.13074493 -154.84176636]
[124.78330994 -168.16816711]
[123.53643799 -183.11624146]
[122.28956604 -198.06433105]
[107.80016327 -202.66061401]
[96.17584229 -212.45568848]
[89.18923187 -225.95590210]
[87.90573120 -241.10255432]
[92.52106476 -255.58589172]
[102.33142853 -267.19732666]
[115.84081268 -274.16616821]
[130.98913574 -275.42974854]
[145.46640015 -270.79537964]
[157.06491089 -260.96972656]
[164.01597595 -247.45118713]
[165.25962830 -232.30120850]
[160.60620117 -217.83006287]
[150.76531982 -206.24449158]
[137.23765564 -199.31120300]
[138.48452759 -184.36312866]
[139.73139954 -169.41503906]
[148.49987793 -157.37496948]
[141.93649292 -142.97940063]
[143.18336487 -128.03131104]
[144.58567810 -113.09700012]
[146.14324951 -98.17809296]
[147.70083618 -83.25917816]
[149.25840759 -68.34027100]
[150.81599426 -53.42135620]
[152.37358093 -38.50244141]
[161.39064026 -26.64740372]
[155.12815857 -12.11840248]
[160.91375732 -25.95772362]
[160.01060486 -40.93051147]
[166.04020691 -54.66528320]
[177.67346191 -64.13456726]
[192.34613037 -67.25110626]
[206.82398987 -63.32793427]
[217.91578674 -53.22981644]
[223.17662048 -39.18261719]
[221.44685364 -24.28268814]
[213.10778809 -11.81433010]
[199.99754333 -4.52587318]
[185.00296021 -4.02448654]
[171.76512146 3.02957225]
[186.76431274 3.18560886]
[201.76350403 3.34164548]
[216.76269531 3.49768186]
[227.87686157 -7.73845005]
[243.68115234 -7.74113989]
[254.79914856 3.49120903]
[254.63475037 19.29464340]
[243.28547668 30.29326439]
[227.48466492 29.96178818]
[216.60665894 18.49687004]
[201.60746765 18.34083366]
[186.60827637 18.18479729]
[171.60908508 18.02876091]
[165.99632263 36.06252670]
[152.04446411 46.68637466]
[135.86517334 47.18893051]
[129.51803589 60.77988052]
[123.17091370 74.37083435]
[116.82378387 87.96178436]
[117.82112885 119.62818146]
[117.82112885 134.62818909]
[117.82112885 149.62818909]
[125.55842590 163.42835999]
[117.82112885 176.15562439]
[117.82112885 191.15562439]
[117.82112885 206.15562439]
[117.82112885 221.15562439]
[117.82112885 236.15562439]
[117.82112885 251.15562439]
[117.82112885 266.15563965]
[117.82112885 281.15563965]
[117.82112885 296.15563965]
[117.82112885 311.15563965]
[132.36100769 315.21694946]
[145.26539612 323.05145264]
[155.57667542 334.07778931]
[162.52970886 347.47772217]
[165.60850525 362.25686646]
[164.58460999 377.31854248]
[159.53401184 391.54507446]
[150.83148193 403.88073730]
[139.12281799 413.41015625]
[125.27688599 419.42617798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[25 36]
[26 35]
[27 34]
[46 126]
[47 125]
[48 124]
[49 123]
[52 94]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[61 86]
[62 85]
[64 83]
[65 82]
[66 81]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
