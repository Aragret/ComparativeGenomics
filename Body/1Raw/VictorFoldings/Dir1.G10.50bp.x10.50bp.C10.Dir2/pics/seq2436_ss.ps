%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAACAUAGGGGGGGGGGUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAxxxxxxxxxxUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCCCCCCCCCCCUAACAUA\
) } def
/len { sequence length } bind def

/coor [
[110.44725800 453.42678833]
[96.60131836 447.41076660]
[84.89266205 437.88134766]
[76.19013214 425.54568481]
[71.13953400 411.31915283]
[70.11563873 396.25747681]
[73.19444275 381.47833252]
[80.14746094 368.07839966]
[90.45874786 357.05206299]
[103.36312866 349.21755981]
[117.90301514 345.15625000]
[117.90301514 330.15625000]
[117.90301514 315.15625000]
[117.90301514 300.15625000]
[117.90301514 285.15625000]
[117.90301514 270.15625000]
[117.90301514 255.15623474]
[117.90301514 240.15623474]
[117.90301514 225.15623474]
[117.90301514 210.15623474]
[117.90301514 195.15623474]
[116.34543610 180.23733521]
[113.24710846 165.56080627]
[110.14878845 150.88427734]
[107.05046844 136.20774841]
[103.95214844 121.53122711]
[95.51016235 133.93013000]
[80.65750885 131.83282471]
[75.97878265 117.58116913]
[86.69944000 107.08843994]
[71.70674133 106.62039185]
[56.71405029 106.15235138]
[49.71150208 119.71432495]
[37.51294708 128.88809204]
[22.54040909 131.85218811]
[7.76669931 128.01809692]
[-3.87485123 118.14707184]
[-10.07280445 104.19902039]
[-9.59655285 88.94333649]
[-2.54065514 75.40904236]
[9.69393349 66.28338623]
[24.67802811 63.37827682]
[39.43652344 67.27051544]
[51.03911209 77.18730927]
[57.18209076 91.15965271]
[72.17478943 91.62770081]
[87.16748047 92.09574127]
[73.73928833 85.41116333]
[69.61755371 70.98856354]
[77.48576355 58.21784592]
[92.22127533 55.41343689]
[104.23046875 64.40116882]
[105.69483948 79.32910156]
[110.59638977 65.15254974]
[115.49794006 50.97599030]
[119.80552673 36.60780334]
[123.51168823 22.07286835]
[127.21784973 7.53793287]
[123.13014984 -7.74608755]
[133.77218628 -18.16704750]
[137.47834778 -32.70198441]
[141.18450928 -47.23691940]
[144.89067078 -61.77185440]
[148.59683228 -76.30679321]
[134.88941956 -82.49372101]
[122.46471405 -90.96708679]
[111.70028687 -101.46938324]
[102.92325592 -113.68145752]
[96.40033722 -127.23220062]
[92.32976532 -141.70982361]
[90.83522797 -156.67436218]
[91.96215820 -171.67106628]
[95.67630005 -186.24420166]
[101.86478424 -199.95091248]
[110.33955383 -212.37464905]
[120.84307098 -223.13789368]
[133.05613708 -231.91354370]
[146.60762024 -238.43492126]
[161.08570862 -242.50384521]
[176.05041504 -243.99668884]
[191.04699707 -242.86805725]
[205.61970520 -239.15226746]
[219.32571411 -232.96221924]
[231.74848938 -224.48603821]
[242.51054382 -213.98130798]
[251.28480530 -201.76724243]
[257.80465698 -188.21501160]
[261.87194824 -173.73648071]
[263.36306763 -158.77159119]
[262.23275757 -143.77514648]
[258.51528931 -129.20285034]
[252.32369995 -115.49755096]
[243.84611511 -103.07572937]
[233.34016418 -92.31487274]
[221.12510681 -83.54199982]
[207.57214355 -77.02368927]
[193.09313965 -72.95803833]
[178.12808228 -71.46860504]
[163.13175964 -72.60063171]
[159.42559814 -58.06569672]
[155.71943665 -43.53075790]
[152.01327515 -28.99582291]
[148.30711365 -14.46088696]
[152.65991211 -0.21650214]
[141.75279236 11.24409389]
[138.04663086 25.77902985]
[134.34046936 40.31396484]
[135.71583557 42.82706833]
[136.14537048 46.05344009]
[135.34570312 49.62309265]
[133.17723083 53.06819916]
[129.67449951 55.87754059]
[124.77294922 70.05410004]
[119.87139893 84.23065948]
[118.62866974 118.43290710]
[121.72698975 133.10943604]
[124.82531738 147.78594971]
[127.92363739 162.46247864]
[131.02195740 177.13900757]
[137.75434875 163.73471069]
[150.21075439 155.37780762]
[165.16688538 154.23144531]
[178.75138855 160.59236145]
[187.44795227 172.81405640]
[189.00550842 187.73297119]
[183.02087402 201.48739624]
[171.04316711 210.51704407]
[156.17277527 212.48460388]
[142.25885010 206.88079834]
[132.90301514 195.15623474]
[132.90301514 210.15623474]
[132.90301514 225.15623474]
[132.90301514 240.15623474]
[132.90301514 255.15623474]
[132.90301514 270.15625000]
[132.90301514 285.15625000]
[132.90301514 300.15625000]
[132.90301514 315.15625000]
[132.90301514 330.15625000]
[132.90301514 345.15625000]
[147.44290161 349.21755981]
[160.34727478 357.05206299]
[170.65856934 368.07839966]
[177.61158752 381.47833252]
[180.69038391 396.25747681]
[179.66648865 411.31915283]
[174.61589050 425.54568481]
[165.91337585 437.88134766]
[154.20471191 447.41076660]
[140.35876465 453.42678833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 119]
[23 118]
[24 117]
[25 116]
[26 115]
[30 47]
[31 46]
[32 45]
[53 114]
[54 113]
[55 112]
[56 107]
[57 106]
[58 105]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
