%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUCACCCGGGGGGGGGGCGCUAAAUCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAxxxxxxxxxxUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCCCCCCCCCCCGGCAUCAACC\
) } def
/len { sequence length } bind def

/coor [
[84.57910919 422.09545898]
[71.35890961 414.82299805]
[60.47210312 404.37600708]
[52.66097260 391.46673584]
[48.45809174 376.97543335]
[48.15002060 361.89010620]
[51.75776291 347.23925781]
[59.03533554 334.02188110]
[69.48654175 323.13912964]
[82.39880371 315.33297729]
[96.89173889 311.13568115]
[96.57968140 296.13891602]
[96.26763153 281.14218140]
[95.95557404 266.14541626]
[95.64351654 251.14866638]
[95.33145905 236.15191650]
[95.01940155 221.15516663]
[94.70734406 206.15840149]
[94.39529419 191.16165161]
[94.08323669 176.16490173]
[79.33943939 173.54754639]
[65.38945007 168.10440063]
[52.76924133 160.04461670]
[41.96369553 149.67784119]
[33.38796997 137.40237427]
[27.37156105 123.68987274]
[24.14562225 109.06716919]
[23.83410072 94.09609985]
[26.44896507 79.35186768]
[31.88974762 65.40096283]
[39.94740677 52.77938843]
[50.31235886 41.97208786]
[62.58637238 33.39429092]
[76.29785919 27.37556458]
[90.92001343 24.14715576]
[90.60795593 9.15040207]
[87.28309631 0.57152408]
[90.44866943 -6.16084242]
[90.44866943 -21.16084290]
[90.44866943 -36.16084290]
[90.44866943 -51.16084290]
[75.49885559 -52.50590515]
[60.72979355 -55.18565369]
[46.26040268 -59.17851639]
[32.20718002 -64.45234680]
[18.68328476 -70.96467590]
[5.79759741 -78.66307068]
[-6.34612846 -87.48554993]
[-17.65011787 -97.36108398]
[-28.02335548 -108.21014404]
[-37.38232040 -119.94538879]
[-45.65166092 -132.47233582]
[-52.76478958 -145.69010925]
[-58.66444016 -159.49229431]
[-63.30311203 -173.76776123]
[-66.64345551 -188.40158081]
[-68.65856934 -203.27589417]
[-69.33222961 -218.27098083]
[-68.65902710 -233.26608276]
[-66.64436340 -248.14047241]
[-63.30447006 -262.77438354]
[-58.66623688 -277.04998779]
[-52.76700592 -290.85235596]
[-45.65427780 -304.07034302]
[-37.38532257 -316.59753418]
[-28.02671623 -328.33306885]
[-17.65381050 -339.18246460]
[-6.35012197 -349.05831909]
[5.79333496 -357.88116455]
[18.67878723 -365.57995605]
[32.20248413 -372.09271240]
[46.25554276 -377.36697388]
[60.72481155 -381.36029053]
[75.49378967 -384.04046631]
[90.44357300 -385.38598633]
[105.45377350 -385.38598633]
[120.40354919 -384.04046631]
[135.17253113 -381.36029053]
[149.64179993 -377.36697388]
[163.69485474 -372.09271240]
[177.21855164 -365.57995605]
[190.10400391 -357.88116455]
[202.24746704 -349.05831909]
[213.55114746 -339.18246460]
[223.92405701 -328.33306885]
[233.28266907 -316.59753418]
[241.55162048 -304.07034302]
[248.66435242 -290.85235596]
[254.56358337 -277.04998779]
[259.20181274 -262.77438354]
[262.54171753 -248.14047241]
[264.55636597 -233.26608276]
[265.22958374 -218.27098083]
[264.55590820 -203.27589417]
[262.54080200 -188.40158081]
[259.20046997 -173.76776123]
[254.56178284 -159.49229431]
[248.66213989 -145.69010925]
[241.54901123 -132.47233582]
[233.27966309 -119.94538879]
[223.92070007 -108.21014404]
[213.54747009 -97.36108398]
[202.24346924 -87.48554993]
[190.09974670 -78.66307068]
[177.21406555 -70.96467590]
[163.69017029 -64.45234680]
[149.63694763 -59.17851639]
[135.16755676 -55.18565369]
[120.39849091 -52.50590515]
[105.44866943 -51.16084290]
[105.44866943 -36.16084290]
[105.44866943 -21.16084290]
[105.44866943 -6.16084242]
[105.60470581 8.83834553]
[105.91676331 23.83510017]
[120.66056061 26.45245361]
[134.61054993 31.89559364]
[147.23075867 39.95538712]
[158.03630066 50.32216263]
[166.61203003 62.59762573]
[172.62843323 76.31012726]
[175.85437012 90.93283081]
[176.16589355 105.90390015]
[173.55104065 120.64813232]
[168.11026001 134.59904480]
[160.05259705 147.22061157]
[149.68763733 158.02790833]
[137.41363525 166.60571289]
[123.70214081 172.62443542]
[109.07998657 175.85284424]
[109.39204407 190.84959412]
[109.70410156 205.84635925]
[110.01615906 220.84310913]
[110.32821655 235.83985901]
[110.64026642 250.83660889]
[110.95232391 265.83337402]
[111.26438141 280.83010864]
[111.57643890 295.82687378]
[111.88849640 310.82363892]
[126.54348755 314.41439819]
[139.76930237 321.67666626]
[150.66416931 332.11523438]
[158.48526001 345.01846313]
[162.69932556 359.50653076]
[163.01905823 374.59161377]
[159.42262268 389.24523926]
[152.15525818 402.46823120]
[141.71246338 413.35906982]
[128.80622864 421.17517090]
[114.31654358 425.38366699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[35 115]
[36 114]
[38 113]
[39 112]
[40 111]
[41 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
