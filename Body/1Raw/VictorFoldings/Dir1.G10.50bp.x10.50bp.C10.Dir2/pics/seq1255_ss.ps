%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCUAAAACUCAGGGGGGGGGGCCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCxxxxxxxxxxAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCCCCCCCCCCCAAUGCUAAAACUAA\
) } def
/len { sequence length } bind def

/coor [
[82.47059631 401.20263672]
[68.83509827 394.84106445]
[56.65009308 386.01370239]
[46.35607910 375.03964233]
[38.32516861 362.31561279]
[32.84767532 348.30157471]
[30.12160873 333.50411987]
[30.24551392 318.45812988]
[33.21491241 303.70758057]
[38.92246246 289.78564453]
[47.16183853 277.19558716]
[57.63519287 266.39257812]
[69.96392059 257.76708984]
[83.70234680 251.63095093]
[98.35382843 248.20596313]
[97.76123047 233.21768188]
[97.16863251 218.22938538]
[96.57603455 203.24110413]
[95.98343658 188.25280762]
[95.39083099 173.26452637]
[94.79823303 158.27622986]
[94.20563507 143.28794861]
[93.61303711 128.29965210]
[93.02043915 113.31136322]
[87.19651031 108.58570099]
[73.18760681 113.94767761]
[75.54865265 99.13438416]
[69.72472382 94.40872955]
[54.93577194 96.91609955]
[40.14682007 99.42347717]
[25.35787010 101.93085480]
[10.56891823 104.43823242]
[1.62438881 117.46784973]
[-13.92873287 120.27426147]
[-26.86305618 111.19247437]
[-29.50487518 95.61054993]
[-20.28684616 82.77297211]
[-4.67786217 80.29603577]
[8.06154251 89.64927673]
[22.85049438 87.14190674]
[37.63944626 84.63452911]
[52.42839432 82.12715149]
[67.21734619 79.61977386]
[84.20702362 82.73531342]
[96.30858612 92.68273926]
[101.53160858 78.62144470]
[106.75463104 64.56015015]
[104.30677795 48.92945480]
[115.99153137 39.69280243]
[103.70203400 31.80183220]
[93.33526611 21.52313614]
[85.34638977 9.31158733]
[80.08541870 -4.29315042]
[77.78188324 -18.69048119]
[78.53482056 -33.24538422]
[82.30850220 -47.31642914]
[88.93414307 -60.28403473]
[98.11741638 -71.57775879]
[109.45157623 -80.70139313]
[122.43543243 -87.25474548]
[136.49552917 -90.95123291]
[151.01145935 -91.63035583]
[165.34326172 -89.26473236]
[170.84307861 -103.22008514]
[176.34289551 -117.17544556]
[181.84271240 -131.13079834]
[177.42153931 -143.28456116]
[182.32974243 -154.81475830]
[193.42053223 -159.72676086]
[199.19499207 -173.57073975]
[204.96946716 -187.41471863]
[210.33114624 -201.42372131]
[215.27532959 -215.58546448]
[220.21952820 -229.74720764]
[208.72554016 -220.10935974]
[194.93237305 -214.21456909]
[180.02297974 -212.56840515]
[165.27603149 -215.31204224]
[151.95628357 -222.21017456]
[141.20608521 -232.67121887]
[133.94740295 -245.79795837]
[130.80276489 -260.46463013]
[132.04187012 -275.41336060]
[137.55845642 -289.36209106]
[146.87939453 -301.11456299]
[159.20529175 -309.66278076]
[173.47903442 -314.27368164]
[188.47645569 -314.55178833]
[202.91133118 -310.47326660]
[215.54566956 -302.38787842]
[225.29591370 -290.98907471]
[231.32585144 -277.25445557]
[233.11831665 -262.36193848]
[230.51860046 -247.58572388]
[240.31092834 -258.94839478]
[242.83784485 -275.15170288]
[258.22924805 -280.81179810]
[270.65179443 -270.10604858]
[267.32623291 -254.04765320]
[251.67359924 -249.15606689]
[241.88127136 -237.79339600]
[234.38127136 -224.80300903]
[229.43707275 -210.64128113]
[224.49288940 -196.47953796]
[225.72622681 -193.12268066]
[225.36187744 -188.99403381]
[223.05180359 -184.86651611]
[218.81343079 -181.64025879]
[213.03897095 -167.79627991]
[207.26451111 -153.95230103]
[210.46723938 -136.72111511]
[195.79806519 -125.63098907]
[190.29824829 -111.67562866]
[184.79843140 -97.72026825]
[179.29861450 -83.76491547]
[192.08729553 -75.13201904]
[202.64947510 -63.87447739]
[210.45759583 -50.55007553]
[215.12068176 -35.81993103]
[216.40386963 -20.41571617]
[214.24024963 -5.10329580]
[208.73440552 9.35534191]
[200.15727234 22.24000549]
[188.93286133 32.90817642]
[175.61729431 40.82703400]
[160.87124634 45.60009766]
[145.42713928 46.98704529]
[130.05282593 44.91582489]
[132.87426758 59.54076385]
[120.81592560 69.78317261]
[115.59290314 83.84446716]
[110.36988068 97.90576172]
[108.00872803 112.71876526]
[108.60132599 127.70705414]
[109.19392395 142.69534302]
[109.78652191 157.68363953]
[110.37912750 172.67192078]
[110.97172546 187.66021729]
[111.56432343 202.64849854]
[112.15692139 217.63679504]
[112.74951935 232.62507629]
[113.34211731 247.61337280]
[128.21827698 249.87089539]
[142.39826965 254.90321350]
[155.36950684 262.52841187]
[166.66308594 272.47082520]
[175.87074280 284.37103271]
[182.65963745 297.79891968]
[186.78434753 312.26898193]
[188.09576416 327.25820923]
[186.54649353 342.22470093]
[182.19253540 356.62747192]
[175.19126892 369.94583130]
[165.79580688 381.69836426]
[154.34577942 391.46017456]
[141.25509644 398.87844849]
[126.99697113 403.68496704]
[112.08683777 405.70596313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[45 132]
[46 131]
[47 130]
[49 128]
[63 115]
[64 114]
[65 113]
[66 112]
[69 110]
[70 109]
[71 108]
[72 104]
[73 103]
[74 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
