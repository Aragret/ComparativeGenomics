%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAAAUGUUGGGGGGGGGGUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUxxxxxxxxxxACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCCCCCCCCCCCGAAAAUGUU\
) } def
/len { sequence length } bind def

/coor [
[83.35260010 531.93383789]
[70.43344116 524.17553711]
[59.65214539 513.64648438]
[51.59012985 500.91461182]
[46.68216705 486.66650391]
[45.19294357 471.67053223]
[47.20276642 456.73544312]
[52.60325241 442.66662598]
[61.10315704 430.22280884]
[72.24408722 420.07510376]
[85.42523956 412.77069092]
[99.93575287 408.70358276]
[99.31993103 393.71621704]
[98.70410919 378.72885132]
[98.08827972 363.74151611]
[97.47245789 348.75415039]
[96.85662842 333.76681519]
[96.24080658 318.77944946]
[95.62497711 303.79208374]
[95.00915527 288.80474854]
[94.39332581 273.81738281]
[93.77750397 258.83004761]
[93.16167450 243.84268188]
[85.00017548 237.56996155]
[81.59889221 227.62141418]
[84.32341003 217.23869324]
[92.50000000 209.94850159]
[92.50000000 194.94850159]
[92.50000000 179.94850159]
[92.50000000 164.94850159]
[92.50000000 149.94850159]
[92.50000000 134.94850159]
[81.08847046 131.28379822]
[71.29337311 123.92158508]
[64.30080414 113.53469849]
[61.02726746 101.17150116]
[62.00282288 88.15080261]
[67.29426575 75.92131042]
[53.86681366 69.23523712]
[40.43936539 62.54916000]
[35.97840881 62.99584961]
[32.02314758 62.05805206]
[28.95486069 60.07503891]
[27.00096512 57.47666550]
[26.21867371 54.72365952]
[13.38501930 46.95852280]
[0.55136585 39.19338989]
[-12.28228760 31.42825317]
[-27.56701088 35.44730759]
[-41.17454147 27.40922737]
[-45.03176880 12.08286762]
[-36.85027313 -1.43891728]
[-21.48398781 -5.13389111]
[-8.04945850 3.19010830]
[-4.51715279 18.59460068]
[8.31650162 26.35973549]
[21.15015602 34.12487030]
[33.98381042 41.89000702]
[47.12543869 49.12170792]
[60.55289078 55.80778503]
[73.98033905 62.49385834]
[87.54223633 56.08488464]
[90.90149689 41.46587753]
[94.26074982 26.84686852]
[85.82756042 16.29741478]
[85.04150391 3.00970292]
[91.96632385 -8.12921906]
[103.87094879 -13.15238285]
[107.52965546 -27.69933701]
[111.18836212 -42.24629211]
[114.84706879 -56.79324341]
[101.66023254 -64.12603760]
[90.82127380 -74.62267303]
[83.06920624 -87.56746674]
[78.93257141 -102.07783508]
[78.69342041 -117.16442871]
[82.36806488 -131.79861450]
[89.70594788 -144.98262024]
[100.20676422 -155.81752014]
[113.15455627 -163.56459045]
[127.66651917 -167.69561768]
[142.75320435 -167.92893982]
[157.38597107 -164.24865723]
[170.56713867 -156.90568542]
[181.39797974 -146.40068054]
[189.14006042 -133.44990540]
[193.26548767 -118.93634796]
[193.49298096 -103.84957123]
[189.80703735 -89.21823120]
[182.45898438 -76.03990173]
[171.94979858 -65.21310425]
[158.99603271 -57.47603226]
[144.48088074 -53.35621262]
[129.39402771 -53.13454056]
[125.73531342 -38.58758545]
[122.07660675 -24.04063034]
[118.41790771 -9.49367714]
[127.65897369 4.52437305]
[123.85662842 21.22388458]
[108.87976074 30.20612717]
[105.52050018 44.82513428]
[102.16123962 59.44414139]
[116.51200104 64.67861938]
[127.35525513 74.54409790]
[133.38446045 87.22795105]
[148.20693970 84.92707825]
[163.02943420 82.62619781]
[177.85191345 80.32532501]
[188.44425964 68.27618408]
[204.46131897 69.18898773]
[213.61618042 82.36350250]
[208.88601685 97.69338226]
[193.89939880 103.41884613]
[180.15278625 95.14781189]
[165.33030701 97.44868469]
[150.50782776 99.74955750]
[135.68533325 102.05043030]
[133.15582275 113.35436249]
[127.14431763 123.25582886]
[118.28214264 130.71499634]
[107.50000000 134.94850159]
[107.50000000 149.94850159]
[107.50000000 164.94850159]
[107.50000000 179.94850159]
[107.50000000 194.94850159]
[107.50000000 209.94850159]
[118.38706970 226.86593628]
[108.14903259 243.22685242]
[108.76485443 258.21420288]
[109.38068390 273.20156860]
[109.99650574 288.18890381]
[110.61233521 303.17626953]
[111.22815704 318.16363525]
[111.84397888 333.15097046]
[112.45980835 348.13833618]
[113.07563019 363.12567139]
[113.69145966 378.11303711]
[114.30728149 393.10040283]
[114.92311096 408.08773804]
[129.71838379 410.95071411]
[143.45436096 417.14907837]
[155.39025879 426.34860229]
[164.88241577 438.05310059]
[171.41891479 451.63143921]
[174.64724731 466.35128784]
[174.39332581 481.41888428]
[170.67083740 496.02163696]
[163.68052673 509.37197876]
[153.79939270 520.75006104]
[141.56028748 529.54211426]
[127.62325287 535.27416992]
[112.73991394 537.63696289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[27 126]
[28 125]
[29 124]
[30 123]
[31 122]
[32 121]
[38 61]
[39 60]
[40 59]
[45 58]
[46 57]
[47 56]
[48 55]
[62 102]
[63 101]
[64 100]
[68 97]
[69 96]
[70 95]
[71 94]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
