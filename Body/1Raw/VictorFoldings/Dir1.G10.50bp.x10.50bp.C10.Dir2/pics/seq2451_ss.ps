%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUCACACGGGGGGGGGGCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUxxxxxxxxxxGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUCCCCCCCCCCACUCCUUACAC\
) } def
/len { sequence length } bind def

/coor [
[91.65383911 461.11523438]
[77.63189697 455.56222534]
[65.43193817 446.69589233]
[55.82086563 435.07357788]
[49.40283966 421.42587280]
[46.58130264 406.61068726]
[47.53361893 391.55932617]
[52.19992447 377.21789551]
[60.28689194 364.48794556]
[71.28616333 354.16967773]
[84.50632477 346.91168213]
[99.11633301 343.17025757]
[99.11633301 328.17025757]
[99.11633301 313.17025757]
[99.11633301 298.17025757]
[99.11633301 283.17025757]
[99.11633301 268.17025757]
[99.11633301 253.17025757]
[99.11633301 238.17025757]
[99.11633301 223.17025757]
[99.11633301 208.17025757]
[86.30854034 202.75561523]
[76.50904846 192.82905579]
[71.22711945 179.87219238]
[71.29420471 165.83683777]
[76.73327637 152.85101318]
[86.75031281 142.89620972]
[99.85004425 137.50514221]
[100.15802002 122.50830078]
[94.63080597 136.45283508]
[80.60761261 141.77729797]
[67.21829987 135.01518250]
[63.18003845 120.56898499]
[71.12196350 107.84397888]
[85.87301636 105.12473297]
[71.10089874 102.52001190]
[56.32878494 99.91528320]
[41.55666733 97.31056213]
[26.78455162 94.70584106]
[13.98382092 103.97497559]
[-1.60851061 101.39529419]
[-10.74178982 88.49728394]
[-7.99740362 72.93309784]
[4.99645185 63.93669128]
[20.53075218 66.84548187]
[29.38927460 79.93372345]
[44.16139221 82.53844452]
[58.93350601 85.14317322]
[73.70561981 87.74789429]
[88.47773743 90.35261536]
[76.48500061 81.34294891]
[75.04805756 66.41193390]
[85.10244751 55.28047562]
[100.10220337 55.19576645]
[110.28167725 66.21295166]
[109.01367950 81.15885162]
[116.91015625 68.40559387]
[124.80664062 55.65233994]
[132.70312500 42.89908218]
[122.79235077 34.53335953]
[118.53676605 19.29750633]
[124.00579071 1.34555173]
[127.66449738 -13.20140266]
[131.32319641 -27.74835587]
[134.98190308 -42.29531097]
[138.64060974 -56.84226608]
[142.29931641 -71.38922119]
[136.83363342 -88.94361877]
[149.46492004 -101.08837128]
[152.82418823 -115.70738220]
[156.18344116 -130.32638550]
[142.92239380 -137.54077148]
[132.10032654 -148.06622314]
[124.52029419 -161.12170410]
[120.74479675 -175.73841858]
[121.05400085 -190.83169556]
[125.42495728 -205.28150940]
[133.53330994 -218.01560974]
[144.77737427 -228.08901978]
[158.32276917 -234.75422668]
[173.16432190 -237.51664734]
[188.20068359 -236.17127991]
[202.31608582 -230.81794739]
[214.46305847 -221.85392761]
[223.74020386 -209.94438171]
[229.45910645 -195.97309875]
[231.19538879 -180.97683716]
[228.82020569 -166.06842041]
[222.50979614 -152.35414124]
[212.73246765 -140.85169983]
[200.21372986 -132.41464233]
[185.88256836 -127.66907501]
[170.80244446 -126.96713257]
[167.44319153 -112.34812164]
[164.08393860 -97.72911835]
[170.24703979 -87.27548981]
[167.52348328 -75.03810120]
[156.84626770 -67.73051453]
[153.18756104 -53.18355942]
[149.52886963 -38.63660431]
[145.87016296 -24.08965111]
[142.21145630 -9.54269600]
[138.55274963 5.00425768]
[143.31440735 10.79878139]
[158.11248779 8.34582424]
[152.83775330 22.38783073]
[157.59942627 28.18235397]
[172.57966614 27.41269493]
[187.55990601 26.64303398]
[202.54014587 25.87337494]
[217.52038574 25.10371399]
[230.98130798 15.73698425]
[245.70649719 22.95506096]
[246.54795837 39.33260727]
[232.64004517 48.02180481]
[218.29003906 40.08395386]
[203.30979919 40.85361481]
[188.32955933 41.62327576]
[173.34931946 42.39293671]
[158.36907959 43.16259384]
[145.45637512 50.79556656]
[137.55990601 63.54882431]
[129.66342163 76.30207825]
[121.76693726 89.05533600]
[115.15486145 122.81628418]
[114.84688568 137.81312561]
[129.39443970 145.03518677]
[139.31253052 157.82339478]
[142.66345215 173.59686279]
[138.82847595 189.19992065]
[128.62136841 201.53338623]
[114.11633301 208.17025757]
[114.11633301 223.17025757]
[114.11633301 238.17025757]
[114.11633301 253.17025757]
[114.11633301 268.17025757]
[114.11633301 283.17025757]
[114.11633301 298.17025757]
[114.11633301 313.17025757]
[114.11633301 328.17025757]
[114.11633301 343.17025757]
[128.72634888 346.91168213]
[141.94650269 354.16967773]
[152.94578552 364.48794556]
[161.03274536 377.21789551]
[165.69905090 391.55932617]
[166.65136719 406.61068726]
[163.82983398 421.42587280]
[157.41180420 435.07357788]
[147.80073547 446.69589233]
[135.60078430 455.56222534]
[121.57883453 461.11523438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 126]
[29 125]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[56 124]
[57 123]
[58 122]
[59 121]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[69 95]
[70 94]
[71 93]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
