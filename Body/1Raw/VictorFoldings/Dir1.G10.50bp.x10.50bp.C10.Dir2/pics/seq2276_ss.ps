%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAACUGUUGGGGGGGGGGAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAxxxxxxxxxxAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUCCCCCCCCCCAUUUAGCUGUU\
) } def
/len { sequence length } bind def

/coor [
[105.38005829 369.67269897]
[91.35811615 364.11968994]
[79.15815735 355.25335693]
[69.54708099 343.63104248]
[63.12905884 329.98333740]
[60.30752182 315.16815186]
[61.25983810 300.11679077]
[65.92613983 285.77536011]
[74.01310730 273.04541016]
[85.01238251 262.72714233]
[98.23254395 255.46914673]
[112.84255219 251.72772217]
[112.84255219 236.72772217]
[112.84255219 221.72772217]
[112.84255219 206.72772217]
[112.84255219 191.72772217]
[112.84255219 176.72772217]
[112.84255219 161.72772217]
[112.84255219 146.72772217]
[112.84255219 131.72772217]
[112.84255219 116.72771454]
[96.61039734 118.89756775]
[85.34455109 109.21023560]
[70.44010925 110.90063477]
[55.53565979 112.59103394]
[40.63121033 114.28143311]
[25.72676468 115.97183228]
[10.82231712 117.66222382]
[-4.08213043 119.35262299]
[-18.98657799 121.04302216]
[-33.89102554 122.73342133]
[-48.79547501 124.42382050]
[-58.44291687 136.94189453]
[-74.12682343 138.88885498]
[-86.54220581 129.10960388]
[-88.32324219 113.40599823]
[-78.41326904 101.09469604]
[-62.69170761 99.47978973]
[-50.48587036 109.51937103]
[-35.58142471 107.82897186]
[-20.67697525 106.13857269]
[-5.77252817 104.44817352]
[9.13191986 102.75778198]
[24.03636742 101.06738281]
[38.94081497 99.37698364]
[53.84526062 97.68658447]
[68.74971008 95.99619293]
[83.65415955 94.30579376]
[89.55773926 85.02751923]
[100.33762360 80.80381775]
[112.09726715 83.89282990]
[120.14688873 93.76698303]
[128.81349182 81.52402496]
[137.48010254 69.28107452]
[143.88908386 55.71917725]
[147.84568787 41.25040817]
[151.80230713 26.78164101]
[155.75891113 12.31287384]
[159.71553040 -2.15589333]
[163.67213440 -16.62466049]
[162.34580994 -23.20367622]
[164.29074097 -28.62632370]
[168.09962463 -31.59982109]
[164.90997314 -47.09616852]
[176.14147949 -56.87893677]
[180.68876648 -71.17306519]
[185.23606873 -85.46720123]
[189.78335571 -99.76132965]
[194.33064270 -114.05545807]
[198.87792969 -128.34959412]
[185.84024048 -135.88832092]
[174.72825623 -146.05384827]
[166.06173706 -158.37072754]
[160.24601746 -172.26286316]
[157.55310059 -187.08050537]
[158.10896301 -202.13058472]
[161.88757324 -216.70919800]
[168.71223450 -230.13449097]
[178.26371765 -241.77850342]
[190.09529114 -251.09664917]
[203.65357971 -257.65310669]
[218.30442810 -261.14117432]
[233.36259460 -261.39776611]
[248.12376404 -258.41085815]
[261.89755249 -252.32014465]
[274.03973389 -243.41050720]
[283.98239136 -232.09866333]
[291.26046753 -218.91369629]
[295.53359985 -204.47227478]
[296.60186768 -189.44985962]
[294.41534424 -174.54908752]
[289.07629395 -160.46687317]
[280.83444214 -147.86187744]
[270.07525635 -137.32366943]
[257.30197144 -129.34512329]
[243.11201477 -124.29941559]
[228.16908264 -122.42254639]
[213.17205811 -123.80229950]
[208.62477112 -109.50817108]
[204.07748413 -95.21403503]
[199.53019714 -80.91990662]
[194.98291016 -66.62577820]
[190.43560791 -52.33164597]
[193.95050049 -37.85771179]
[182.39375305 -27.05253220]
[178.14089966 -12.66805077]
[174.18429565 1.80071700]
[170.22767639 16.26948547]
[166.27107239 30.73825264]
[162.31445312 45.20701981]
[158.35784912 59.67578888]
[169.35894775 49.47893524]
[183.03810120 43.32419586]
[197.96594238 41.85468674]
[212.58265686 45.22395325]
[225.36088562 53.07994080]
[234.96545410 64.60176849]
[240.39273071 78.58549500]
[241.07563782 93.56993866]
[236.94279480 107.98935699]
[228.42607117 120.33704376]
[216.41537476 129.32276917]
[202.16572571 134.00758362]
[187.16610718 133.90199280]
[172.98382568 129.01701355]
[161.10083008 119.86308289]
[152.75878906 107.39671326]
[148.82937622 92.92053986]
[149.72305298 77.94767761]
[141.05645752 90.19063568]
[132.38984680 102.43358612]
[127.84255219 116.72771454]
[127.84255219 131.72772217]
[127.84255219 146.72772217]
[127.84255219 161.72772217]
[127.84255219 176.72772217]
[127.84255219 191.72772217]
[127.84255219 206.72772217]
[127.84255219 221.72772217]
[127.84255219 236.72772217]
[127.84255219 251.72772217]
[142.45257568 255.46914673]
[155.67272949 262.72714233]
[166.67199707 273.04541016]
[174.75897217 285.77536011]
[179.42527771 300.11679077]
[180.37759399 315.16815186]
[177.55604553 329.98333740]
[171.13803101 343.63104248]
[161.52696228 355.25335693]
[149.32699585 364.11968994]
[135.30505371 369.67269897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[52 131]
[53 130]
[54 129]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[60 106]
[63 105]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
