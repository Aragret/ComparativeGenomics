%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCAAACGGGGGGGGGGCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAxxxxxxxxxxCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUCCCCCCCCCCUAAACAAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.21709442 354.19433594]
[70.37115479 348.17831421]
[58.66249466 338.64889526]
[49.95996857 326.31323242]
[44.90936661 312.08670044]
[43.88547516 297.02502441]
[46.96427536 282.24584961]
[53.91729736 268.84591675]
[64.22858429 257.81958008]
[77.13296509 249.98507690]
[91.67285156 245.92376709]
[91.67285156 230.92376709]
[91.67285156 215.92376709]
[91.67285156 200.92376709]
[91.67285156 185.92376709]
[91.67285156 170.92376709]
[91.67285156 155.92376709]
[91.67285156 140.92376709]
[91.67285156 125.92376709]
[91.67285156 110.92376709]
[85.46744537 97.26753235]
[74.16843414 87.40180969]
[62.86943054 77.53608704]
[51.57042694 67.67035675]
[38.79307175 59.81293488]
[24.89051437 54.18097687]
[10.98795795 48.54902267]
[-2.91459799 42.91706467]
[-17.32369995 48.83445358]
[-31.34263992 42.92480469]
[-36.89516830 29.15145874]
[-50.79772568 23.51950264]
[-60.50234985 31.51554871]
[-72.62206268 34.58358383]
[-84.82015991 32.19588470]
[-94.77196503 24.87051392]
[-100.60785675 14.06046677]
[-101.26438904 1.86581469]
[-114.92063141 -4.33959246]
[-128.57687378 -10.54499912]
[-142.23310852 -16.75040627]
[-155.88935852 -22.95581436]
[-171.65412903 -21.62069702]
[-180.04035950 -33.93005371]
[-193.69660950 -40.13545990]
[-209.16209412 -35.86950302]
[-222.05468750 -45.41730499]
[-222.48429871 -61.45460510]
[-210.12136841 -71.67896271]
[-194.44967651 -68.24712372]
[-187.49119568 -53.79170227]
[-173.83496094 -47.58629608]
[-159.04696655 -49.36526489]
[-149.68394470 -36.61205673]
[-136.02770996 -30.40664864]
[-122.37145996 -24.20124054]
[-108.71521759 -17.99583435]
[-95.05898285 -11.79042625]
[-80.17990875 -21.20749092]
[-62.46710968 -19.84468842]
[-48.96805954 -8.05664062]
[-45.16576767 9.61694622]
[-31.26321220 15.24890232]
[-17.69012260 9.22338963]
[-3.51072407 14.73694801]
[2.71735859 29.01450920]
[16.61991501 34.64646530]
[30.52247047 40.27842331]
[44.42502594 45.91037750]
[35.71988297 33.69479752]
[31.62512589 19.26451683]
[32.61685181 4.29733610]
[38.57975388 -9.46652317]
[48.82052612 -20.42674828]
[62.14848709 -27.30900383]
[77.01400757 -29.31309700]
[91.68867493 -26.20601082]
[104.46629333 -18.34900475]
[113.86121368 -6.65560770]
[118.78108978 7.51460075]
[118.65390015 22.51406097]
[113.49442291 36.59880066]
[103.90256500 48.13119507]
[90.99354553 55.77038574]
[76.26828766 58.62817001]
[61.43614960 56.37135696]
[72.73515320 66.23707581]
[84.03415680 76.10279846]
[95.33316803 85.96852112]
[109.74538422 90.12641144]
[124.56314087 87.79531097]
[139.38088989 85.46420288]
[154.19865417 83.13310242]
[168.87518311 80.03478241]
[183.37077332 76.17761993]
[197.86637878 72.32045746]
[203.53431702 57.99633026]
[216.39956665 49.85147095]
[231.41629028 50.83230591]
[242.83923340 60.35354996]
[257.33483887 56.49638748]
[260.66134644 41.55674744]
[270.55847168 29.88175011]
[284.75192261 24.15423012]
[299.98016357 25.69032860]
[312.74383545 34.13705826]
[320.10992432 47.55342865]
[320.38580322 62.85644913]
[313.50805664 76.52960205]
[301.05712891 85.43089294]
[285.89416504 87.51487732]
[271.50350952 82.30266571]
[261.19198608 70.99198914]
[246.69639587 74.84914398]
[241.51608276 88.78838348]
[228.97273254 97.10272980]
[213.76091003 96.42894745]
[201.72352600 86.81605530]
[187.22793579 90.67321777]
[172.73234558 94.53037262]
[183.95881653 104.47856140]
[183.39361572 119.46791077]
[171.44985962 128.54241943]
[156.85746765 125.06935883]
[150.28230286 111.58725739]
[156.52975464 97.95085907]
[141.71200562 100.28195953]
[126.89424133 102.61306763]
[112.07648468 104.94416809]
[109.83955383 108.38085938]
[106.67285156 110.92376709]
[106.67285156 125.92376709]
[106.67285156 140.92376709]
[106.67285156 155.92376709]
[106.67285156 170.92376709]
[106.67285156 185.92376709]
[106.67285156 200.92376709]
[106.67285156 215.92376709]
[106.67285156 230.92376709]
[106.67285156 245.92376709]
[121.21273804 249.98507690]
[134.11711121 257.81958008]
[144.42840576 268.84591675]
[151.38142395 282.24584961]
[154.46022034 297.02502441]
[153.43632507 312.08670044]
[148.38572693 326.31323242]
[139.68319702 338.64889526]
[127.97454071 348.17831421]
[114.12860107 354.19433594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 89]
[22 88]
[23 87]
[24 86]
[25 69]
[26 68]
[27 67]
[28 66]
[31 63]
[32 62]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[44 52]
[45 51]
[90 129]
[91 128]
[92 127]
[93 126]
[94 120]
[95 119]
[96 118]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
