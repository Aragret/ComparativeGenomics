%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCAAGCAGGGGGGGGGGUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAACAxxxxxxxxxxUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCCCCCCCCCCCAUUCAAGCA\
) } def
/len { sequence length } bind def

/coor [
[83.86952209 391.18905640]
[70.64932251 383.91659546]
[59.76251984 373.46957397]
[51.95138931 360.56033325]
[47.74850845 346.06903076]
[47.44043350 330.98367310]
[51.04817581 316.33285522]
[58.32574844 303.11547852]
[68.77695465 292.23269653]
[81.68921661 284.42654419]
[96.18215179 280.22927856]
[95.87010193 265.23251343]
[95.55804443 250.23576355]
[95.24598694 235.23901367]
[94.93392944 220.24224854]
[94.62187195 205.24549866]
[94.30981445 190.24874878]
[93.99776459 175.25199890]
[93.68570709 160.25523376]
[93.37364960 145.25848389]
[93.06159210 130.26173401]
[85.59377289 123.50684357]
[81.51898193 115.45760345]
[80.79457092 107.49586487]
[82.87992096 100.81697083]
[86.85716248 96.26695251]
[73.07478333 90.34698486]
[59.29240417 84.42702484]
[45.51002121 78.50706482]
[31.72764015 72.58709717]
[22.16026878 91.18951416]
[-6.08993053 97.01531982]
[-20.79789162 94.06983948]
[-35.50585556 91.12435913]
[-50.21381378 88.17887115]
[-65.26464844 93.05565643]
[-76.22479248 82.96980286]
[-90.93275452 80.02431488]
[-102.24926758 90.64110565]
[-117.64907074 92.54518127]
[-131.21063232 85.00438690]
[-137.71926880 70.91831207]
[-134.67224121 55.70334244]
[-123.24122620 45.20994186]
[-107.82166290 43.47303772]
[-94.34270477 51.16050720]
[-87.98726654 65.31635284]
[-73.27930450 68.26184082]
[-59.28048706 63.17437363]
[-47.26833344 73.47091675]
[-32.56037140 76.41639709]
[-17.85240936 79.36187744]
[-3.14444828 82.30735779]
[1.04662335 76.08763885]
[-13.37420559 71.95972443]
[-13.90458012 56.96910477]
[0.18846098 51.83235168]
[9.42876625 63.64820099]
[13.61983776 57.42847824]
[-1.27512586 50.56756973]
[-2.51124430 34.21507645]
[11.18309593 25.19304276]
[25.72033119 32.78256226]
[26.14579964 49.17618942]
[37.64760208 58.80471802]
[51.42998505 64.72467804]
[65.21236420 70.64464569]
[78.99475098 76.56460571]
[92.77713013 82.48457336]
[79.20829773 76.09028625]
[69.57325745 64.59394836]
[65.64937592 50.11626816]
[68.16049194 35.32794952]
[76.64338684 22.95699692]
[89.53321838 15.28547382]
[104.45220184 13.72854614]
[118.64822388 18.57341957]
[129.50256348 28.92636299]
[135.01290894 42.87756729]
[134.16276550 57.85345840]
[127.10896301 71.09143066]
[115.15549469 80.14820099]
[127.41786194 71.50907898]
[139.68023682 62.86996460]
[144.93669128 55.31871414]
[152.28877258 54.18180466]
[164.72822571 45.79965973]
[177.16766357 37.41751862]
[189.60710144 29.03537369]
[201.49948120 19.89364052]
[212.79847717 10.02791691]
[224.09748840 0.16219364]
[235.39649963 -9.70352936]
[237.91067505 -25.54835320]
[251.93673706 -33.33611679]
[266.71508789 -27.09271240]
[270.90902710 -11.60754776]
[261.30133057 1.24048567]
[245.26222229 1.59547532]
[233.96321106 11.46119881]
[222.66421509 21.32692146]
[211.36520386 31.19264412]
[226.15277100 33.70812225]
[234.98675537 45.83086014]
[232.85162354 60.67811966]
[220.95959473 69.82031250]
[206.06242371 68.06692505]
[196.61804199 56.41344452]
[197.98924255 41.47481537]
[185.54980469 49.85695648]
[173.11036682 58.23910141]
[160.67092896 66.62124634]
[148.31935120 75.13233185]
[136.05697632 83.77145386]
[123.79461670 92.41056824]
[125.66222382 107.29384613]
[139.67893982 112.63536072]
[153.69564819 117.97686768]
[167.26513672 110.20492554]
[182.64643860 113.02442169]
[192.57698059 125.10408783]
[192.36785889 140.74028015]
[182.11782837 152.55004883]
[166.66662598 154.95719910]
[153.30984497 146.82513428]
[148.35414124 131.99359131]
[134.33743286 126.65206909]
[120.32071686 121.31056213]
[108.05834961 129.94967651]
[108.37039948 144.94642639]
[108.68245697 159.94317627]
[108.99451447 174.93994141]
[109.30657196 189.93669128]
[109.61862946 204.93344116]
[109.93068695 219.93019104]
[110.24273682 234.92695618]
[110.55479431 249.92370605]
[110.86685181 264.92047119]
[111.17890930 279.91720581]
[125.83390045 283.50796509]
[139.05970764 290.77023315]
[149.95457458 301.20883179]
[157.77568054 314.11203003]
[161.98974609 328.60009766]
[162.30946350 343.68521118]
[158.71304321 358.33880615]
[151.44567871 371.56182861]
[141.00286865 382.45266724]
[128.09664917 390.26876831]
[113.60695648 394.47723389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[32 53]
[33 52]
[34 51]
[35 50]
[37 48]
[38 47]
[59 64]
[82 115]
[83 114]
[84 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 102]
[91 101]
[92 100]
[93 99]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
