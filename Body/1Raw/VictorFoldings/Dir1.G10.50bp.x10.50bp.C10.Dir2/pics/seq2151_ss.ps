%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAAACCAGAGGGGGGGGGGCGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUxxxxxxxxxxGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCCCCCCCCCCCGAAACCAAA\
) } def
/len { sequence length } bind def

/coor [
[72.27690125 383.87646484]
[58.25495529 378.32345581]
[46.05499649 369.45712280]
[36.44392395 357.83480835]
[30.02589989 344.18710327]
[27.20436287 329.37191772]
[28.15667915 314.32052612]
[32.82298279 299.97909546]
[40.90995026 287.24914551]
[51.90922546 276.93087769]
[65.12938690 269.67291260]
[79.73939514 265.93145752]
[79.73939514 250.93147278]
[79.73939514 235.93147278]
[79.73939514 220.93147278]
[79.73939514 205.93147278]
[79.73939514 190.93147278]
[79.73939514 175.93147278]
[79.73939514 160.93147278]
[79.73939514 145.93147278]
[79.73939514 130.93147278]
[69.29738617 120.16278839]
[54.30450058 119.70085907]
[39.38348389 121.23815155]
[24.79973602 124.74732208]
[10.21598721 128.25648499]
[-4.36776257 131.76565552]
[-8.64535904 146.51684570]
[-19.73657036 157.14137268]
[-34.65791702 160.78129578]
[-49.39562988 156.45748901]
[-59.98534012 145.33302307]
[-63.57846832 130.40034485]
[-59.20848083 115.67625427]
[-48.05088425 105.12146759]
[-33.10700989 101.57515717]
[-18.39669228 105.99127960]
[-7.87692976 117.18190765]
[6.70681953 113.67273712]
[21.29056931 110.16357422]
[35.87431717 106.65440369]
[21.86062050 101.30498505]
[11.15573597 90.79758453]
[5.54633284 76.88591766]
[5.96863222 61.89186096]
[12.35215187 48.31796646]
[23.63146782 38.42973709]
[37.92403793 33.87754822]
[52.84440231 35.42116928]
[65.90231323 42.80295944]
[74.91838837 54.79088974]
[78.38781738 69.38414764]
[75.73153687 84.14707947]
[67.39290619 96.61572266]
[54.76642609 104.70797729]
[69.75931549 105.16990662]
[80.83007812 82.04588318]
[102.26494598 78.26766968]
[108.53435516 64.64069366]
[114.80375671 51.01371002]
[121.07316589 37.38673401]
[127.34256744 23.75975418]
[133.47174072 10.06912804]
[139.31852722 -3.74445462]
[145.02319336 -17.61733437]
[150.72785950 -31.49021530]
[138.60771179 -22.65266991]
[124.37680817 -17.91124344]
[109.37811279 -17.71339226]
[95.02707672 -22.07778549]
[82.67803955 -30.59255028]
[73.49639130 -42.45413971]
[68.34860992 -56.54315186]
[67.72050476 -71.52999878]
[71.67134857 -86.00034332]
[79.82829285 -98.58860016]
[91.42156219 -108.10679626]
[105.35707855 -113.65669250]
[120.31973267 -114.71453094]
[134.89747620 -111.18048859]
[147.71458435 -103.38807678]
[157.56149292 -92.07266998]
[163.50894165 -78.30212402]
[164.99563599 -63.37598801]
[161.88209534 -48.70489502]
[172.21299744 -59.58020782]
[182.54389954 -70.45552063]
[192.87480164 -81.33083344]
[203.20570374 -92.20614624]
[198.21841431 -106.67630768]
[200.53846741 -121.80495453]
[209.63273621 -134.11563110]
[223.41142273 -140.77944946]
[238.70828247 -140.26509094]
[252.00820923 -132.69076538]
[260.25500488 -119.79699707]
[261.55355835 -104.54667664]
[255.60551453 -90.44421387]
[243.77769470 -80.73025513]
[228.78800964 -77.63700104]
[214.08100891 -81.87524414]
[203.75010681 -70.99993134]
[193.41920471 -60.12461853]
[183.08830261 -49.24930573]
[172.75740051 -38.37399292]
[164.60073853 -25.78555298]
[158.89607239 -11.91267204]
[153.19140625 1.96020865]
[153.55854797 9.38835812]
[147.22457886 16.05742455]
[147.43911743 23.49154663]
[140.96954346 30.02915955]
[134.70014954 43.65613937]
[128.43074036 57.28311539]
[122.16133118 70.91009521]
[115.89192963 84.53707886]
[122.30090332 98.09896851]
[136.80952454 101.90682983]
[151.31816101 105.71469116]
[168.17332458 103.88729858]
[174.59529114 119.57789612]
[161.29565430 130.09246826]
[147.51029968 120.22331238]
[133.00166321 116.41545868]
[118.49304199 112.60759735]
[112.55463409 117.18856812]
[126.42747498 122.89332581]
[128.42330933 137.75994873]
[116.54628754 146.92163086]
[102.67357635 141.21656799]
[100.67781067 126.35050201]
[94.73939514 130.93147278]
[94.73939514 145.93147278]
[94.73939514 160.93147278]
[94.73939514 175.93147278]
[94.73939514 190.93147278]
[94.73939514 205.93147278]
[94.73939514 220.93147278]
[94.73939514 235.93147278]
[94.73939514 250.93147278]
[94.73939514 265.93145752]
[109.34941101 269.67291260]
[122.56957245 276.93087769]
[133.56884766 287.24914551]
[141.65580750 299.97909546]
[146.32211304 314.32052612]
[147.27442932 329.37191772]
[144.45289612 344.18710327]
[138.03486633 357.83480835]
[128.42379761 369.45712280]
[116.22383881 378.32345581]
[102.20189667 383.87646484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 56]
[23 55]
[24 41]
[25 40]
[26 39]
[27 38]
[58 116]
[59 115]
[60 114]
[61 113]
[62 112]
[63 110]
[64 108]
[65 107]
[66 106]
[85 105]
[86 104]
[87 103]
[88 102]
[89 101]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
