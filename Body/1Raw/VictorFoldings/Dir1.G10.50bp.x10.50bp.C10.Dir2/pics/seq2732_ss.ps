%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUAGCAUGGGGGGGGGGCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCxxxxxxxxxxCCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCCCCCCCCCCCUGUAGCAU\
) } def
/len { sequence length } bind def

/coor [
[89.16650391 526.50152588]
[75.32056427 520.48547363]
[63.61190414 510.95605469]
[54.90937805 498.62039185]
[49.85877609 484.39385986]
[48.83488846 469.33218384]
[51.91368484 454.55303955]
[58.86670685 441.15310669]
[69.17799377 430.12677002]
[82.08237457 422.29226685]
[96.62226105 418.23095703]
[96.62226105 403.23095703]
[96.62226105 388.23095703]
[96.62226105 373.23095703]
[96.62226105 358.23095703]
[96.62226105 343.23095703]
[96.62226105 328.23095703]
[96.62226105 313.23095703]
[96.62226105 298.23095703]
[96.62226105 283.23095703]
[83.13919830 276.85345459]
[73.72346497 265.20642090]
[70.28427124 250.56629944]
[73.55591583 235.82464600]
[82.94176483 223.91696167]
[96.62226105 217.23823547]
[96.62226105 202.23823547]
[96.62226105 187.23823547]
[96.62226105 172.23823547]
[96.62226105 157.23823547]
[95.99828339 142.25122070]
[94.75141144 127.30313873]
[93.50453186 112.35504913]
[82.95323944 101.69342041]
[68.01893616 100.29112244]
[53.08462906 98.88881683]
[38.15031815 97.48651123]
[24.92781830 106.57193756]
[9.62303925 101.76119232]
[3.97649932 86.74465942]
[12.31974125 73.04174805]
[28.25254250 71.16415405]
[39.55262375 82.55220032]
[54.48693085 83.95450592]
[69.42124176 85.35681152]
[84.35554504 86.75911713]
[89.93888855 89.39425659]
[94.71172333 93.03906250]
[97.81004333 78.36253357]
[100.90836334 63.68600845]
[88.90365601 55.96022415]
[80.28369904 44.61810684]
[76.07204437 31.04027176]
[76.75720978 16.87071991]
[82.23609161 3.81777334]
[91.82888031 -6.55187321]
[104.36334229 -13.00119972]
[118.31804657 -14.77040768]
[121.72103119 -29.37930107]
[125.12400818 -43.98819351]
[128.52697754 -58.59708405]
[116.66346741 -68.25788879]
[111.48116302 -83.63061523]
[115.49749756 -100.30010223]
[128.42860413 -112.92303467]
[127.49296570 -127.89382935]
[113.01685333 -132.45523071]
[101.16848755 -141.94105530]
[93.55027008 -155.06838989]
[91.19250488 -170.06190491]
[94.41405487 -184.89382935]
[102.77923584 -197.55827332]
[115.15672302 -206.34248352]
[129.87255859 -210.05845642]
[144.93656921 -208.20362854]
[158.31143188 -201.02886963]
[168.18833923 -189.50450134]
[173.23152161 -175.18908691]
[172.75889587 -160.01869202]
[166.83441162 -146.04496765]
[156.25930786 -135.15776062]
[142.46376038 -128.82945251]
[143.39938354 -113.85866547]
[157.76757812 -109.55107880]
[166.78511047 -121.53791046]
[175.80262756 -133.52474976]
[184.82015991 -145.51158142]
[181.11412048 -160.70365906]
[188.08671570 -174.70068359]
[202.44570923 -180.89370728]
[217.41120911 -176.35855103]
[225.91697693 -163.23658752]
[223.94685364 -147.72360229]
[212.43104553 -137.14436340]
[196.80699158 -136.49404907]
[187.78945923 -124.50721741]
[178.77194214 -112.52037811]
[169.75440979 -100.53354645]
[172.84222412 -78.36122131]
[161.61715698 -60.79319763]
[143.13587952 -55.19410706]
[139.73289490 -40.58521652]
[136.32992554 -25.97632217]
[132.92694092 -11.36742973]
[145.93022156 -2.36190796]
[154.51399231 10.96931744]
[157.34458923 26.60936928]
[153.96139526 42.17861176]
[144.85153198 55.29670334]
[131.37992859 63.94652557]
[115.58489227 66.78433228]
[112.48657227 81.46085358]
[109.38825226 96.13738251]
[108.45262146 111.10817719]
[109.69949341 126.05625916]
[110.94636536 141.00434875]
[113.64636993 144.59202576]
[114.89640808 148.46611023]
[114.78929901 152.12266541]
[113.57592010 155.14288330]
[111.62226105 157.23823547]
[111.62226105 172.23823547]
[111.62226105 187.23823547]
[111.62226105 202.23823547]
[111.62226105 217.23823547]
[125.30275726 223.91696167]
[134.68861389 235.82464600]
[137.96025085 250.56629944]
[134.52105713 265.20642090]
[125.10532379 276.85345459]
[111.62226105 283.23095703]
[111.62226105 298.23095703]
[111.62226105 313.23095703]
[111.62226105 328.23095703]
[111.62226105 343.23095703]
[111.62226105 358.23095703]
[111.62226105 373.23095703]
[111.62226105 388.23095703]
[111.62226105 403.23095703]
[111.62226105 418.23095703]
[126.16214752 422.29226685]
[139.06652832 430.12677002]
[149.37780762 441.15310669]
[156.33084106 454.55303955]
[159.40963745 469.33218384]
[158.38574219 484.39385986]
[153.33514404 498.62039185]
[144.63261414 510.95605469]
[132.92395020 520.48547363]
[119.07801819 526.50152588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 116]
[32 115]
[33 114]
[34 46]
[35 45]
[36 44]
[37 43]
[48 113]
[49 112]
[50 111]
[58 104]
[59 103]
[60 102]
[61 101]
[65 83]
[66 82]
[84 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
