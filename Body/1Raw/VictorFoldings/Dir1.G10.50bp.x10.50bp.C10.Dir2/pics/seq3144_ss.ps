%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUACCCACAGGGGGGGGGGCCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAxxxxxxxxxxCGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACCCCCCCCCCCUUAAACCCACA\
) } def
/len { sequence length } bind def

/coor [
[100.38466644 626.45214844]
[86.89578247 619.72064209]
[75.41028595 609.95605469]
[66.59591675 597.72613525]
[60.96513367 583.74194336]
[58.84530640 568.81646729]
[60.35967636 553.81750488]
[65.42019653 539.61694336]
[73.73266602 527.04052734]
[84.81379700 516.81939697]
[98.01934814 509.54776001]
[112.58157349 505.64840698]
[112.27359772 490.65155029]
[111.96562195 475.65472412]
[111.65763855 460.65786743]
[111.34966278 445.66104126]
[111.04168701 430.66421509]
[110.73371124 415.66735840]
[110.42572784 400.67053223]
[110.11775208 385.67367554]
[109.80977631 370.67684937]
[109.34784698 355.68395996]
[108.73202515 340.69662476]
[108.11619568 325.70925903]
[107.50037384 310.72189331]
[91.80193329 307.04949951]
[77.74739838 299.12194824]
[66.46474457 287.56658936]
[58.86198425 273.30224609]
[55.55409622 257.46615601]
[56.81328201 241.32344055]
[62.54658508 226.16583252]
[72.30270386 213.20851135]
[85.30751038 203.49253845]
[100.52546692 197.80126953]
[99.29485321 182.85183716]
[98.06424713 167.90240479]
[96.83363342 152.95295715]
[95.60301971 138.00352478]
[94.37240601 123.05409241]
[93.14179230 108.10466003]
[90.99321747 93.25933838]
[87.93482208 78.57444000]
[84.87642670 63.88954163]
[81.81803131 49.20464325]
[78.75963593 34.51974869]
[65.82397461 25.84181786]
[62.93151855 10.90567493]
[71.28431702 -1.37302029]
[68.22592163 -16.05791855]
[65.16752625 -30.74281502]
[62.10912704 -45.42771149]
[51.72060394 -57.36040497]
[56.70036697 -71.39790344]
[53.64197159 -86.08279419]
[50.13280487 -100.66654968]
[46.17619324 -115.13531494]
[31.11554909 -114.61215210]
[16.34033585 -117.57691193]
[2.64736223 -123.86969757]
[-9.22492695 -133.15115356]
[-18.63627243 -144.92074585]
[-25.07913589 -158.54374695]
[-28.20605850 -173.28549194]
[-27.84840965 -188.35098267]
[-24.02547836 -202.92774963]
[-16.94342804 -216.22967529]
[-6.98418808 -227.53941345]
[5.31515455 -236.24703979]
[19.29131126 -241.88298035]
[34.19056702 -244.14328003]
[49.20941925 -242.90603638]
[63.53792572 -238.23799133]
[76.40336609 -230.39088440]
[87.11191559 -219.78788757]
[95.08609009 -207.00080872]
[99.89584351 -192.71925354]
[101.28179169 -177.71339417]
[99.16919708 -162.79248047]
[93.67198944 -148.76116943]
[85.08661652 -136.37617493]
[73.87608337 -126.30539703]
[60.64496231 -119.09192657]
[64.60157013 -104.62315369]
[67.52948761 -102.55567169]
[69.57485962 -98.93820190]
[70.00697327 -94.21391296]
[68.32686615 -89.14118958]
[71.38526154 -74.45629883]
[81.55503082 -63.57396317]
[76.79402924 -48.48610687]
[79.85242462 -33.80121231]
[82.91082001 -19.11631393]
[85.96921539 -4.43141603]
[98.52941895 3.49176860]
[101.84025574 18.34077454]
[93.44452667 31.46135139]
[96.50292206 46.14624786]
[99.56132507 60.83114624]
[102.61972046 75.51604462]
[105.67811584 90.20094299]
[115.10572815 78.53389740]
[130.00067139 76.76163483]
[141.90270996 85.89078522]
[144.05157471 100.73606873]
[135.22673035 112.86546326]
[120.44062805 115.38956451]
[108.09122467 106.87404633]
[109.32183838 121.82347870]
[110.55245209 136.77291870]
[111.78306580 151.72235107]
[113.01367950 166.67178345]
[114.24429321 181.62121582]
[115.47489929 196.57064819]
[129.21073914 198.97532654]
[141.95355225 204.61442566]
[152.95455933 213.15136719]
[161.56861877 224.07945251]
[167.29200745 236.75190735]
[169.79193115 250.42021179]
[168.92581177 264.27825928]
[164.74946594 277.50997925]
[157.51348877 289.33728027]
[147.64825439 299.06588745]
[135.73831177 306.12609863]
[122.48772430 310.10607910]
[123.10355377 325.09344482]
[123.71937561 340.08078003]
[124.33520508 355.06814575]
[127.83232117 363.57495117]
[124.80661011 370.36886597]
[125.11459351 385.36572266]
[125.42256927 400.36254883]
[125.73054504 415.35937500]
[126.03852081 430.35623169]
[126.34650421 445.35305786]
[126.65447998 460.34991455]
[126.96245575 475.34674072]
[127.27043152 490.34356689]
[127.57841492 505.34042358]
[142.28845215 508.63864136]
[155.78140259 515.36199951]
[167.27282715 525.11956787]
[176.09460449 537.34411621]
[181.73387146 551.32495117]
[183.86274719 566.24908447]
[182.35746765 581.24902344]
[177.30555725 595.45257568]
[169.00071716 608.03405762]
[157.92578125 618.26196289]
[144.72463989 625.54156494]
[130.16477966 629.44976807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 129]
[23 128]
[24 127]
[25 126]
[35 114]
[36 113]
[37 112]
[38 111]
[39 110]
[40 109]
[41 108]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[49 94]
[50 93]
[51 92]
[52 91]
[54 89]
[55 88]
[56 84]
[57 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
