%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUGUCUGGGGGGGGGGUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUxxxxxxxxxxACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCCCCCCCCCCCACCCCUGACU\
) } def
/len { sequence length } bind def

/coor [
[75.77037811 370.27163696]
[63.21215820 361.92047119]
[53.12593460 350.70803833]
[46.14574051 337.33911133]
[42.71035767 322.65414429]
[43.03573227 307.57617188]
[47.10141754 293.05303955]
[54.65183640 279.99771118]
[65.21236420 269.23080444]
[78.11916351 261.42916870]
[92.56089020 257.08322144]
[91.93691254 242.09620667]
[91.31293488 227.10919189]
[90.68895721 212.12217712]
[90.06497955 197.13516235]
[89.44100189 182.14814758]
[88.81702423 167.16113281]
[88.19304657 152.17411804]
[87.56906891 137.18710327]
[86.94509125 122.20008087]
[81.34256744 111.39537048]
[82.05937195 101.03083038]
[87.22401428 94.08629608]
[93.86476135 91.86856842]
[89.55717468 77.50038910]
[85.24958801 63.13220215]
[80.94200897 48.76401901]
[76.63442230 34.39583588]
[71.41345215 32.75848007]
[66.87091064 30.12311745]
[63.18291855 26.69971275]
[60.46834946 22.72556305]
[58.78561020 18.45080376]
[58.13294220 14.12387085]
[58.45207596 9.97775745]
[59.63486862 6.21776247]
[61.53247452 3.01139688]
[63.96643829 0.48092434]
[59.65885544 -13.88725948]
[55.35126877 -28.25544357]
[51.04368591 -42.62362671]
[35.16303635 -43.45230103]
[20.54629135 -49.64758301]
[8.94625092 -60.44667816]
[1.74716461 -74.53591156]
[-0.20044991 -90.21052551]
[3.31975269 -105.58094788]
[11.86607933 -118.80056763]
[24.39413261 -128.28758240]
[19.78856850 -142.56304932]
[15.18300343 -156.83851624]
[0.27415624 -154.84701538]
[-14.75068474 -155.54981995]
[-29.40853310 -158.92431641]
[-43.22819901 -164.86204529]
[-55.76544189 -173.17211914]
[-66.61723328 -183.58741760]
[-75.43473816 -195.77311707]
[-81.93450928 -209.33750916]
[-85.90760803 -223.84454346]
[-87.22631073 -238.82789612]
[-85.84823608 -253.80590820]
[-81.81766510 -268.29708862]
[-75.26418304 -281.83560181]
[-66.39845276 -293.98626709]
[-55.50546265 -304.35845947]
[-42.93538284 -312.61880493]
[-29.09229279 -318.50170898]
[-14.42118359 -321.81808472]
[0.60632503 -322.46130371]
[15.50716209 -320.41073608]
[29.80232620 -315.73226929]
[43.03228760 -308.57632446]
[54.77175903 -299.17288208]
[64.64336395 -287.82424927]
[72.32977295 -274.89526367]
[77.58389282 -260.80151367]
[80.23683929 -245.99604797]
[80.20331573 -230.95481873]
[77.48440552 -216.16133118]
[72.16751099 -202.09112549]
[64.42355347 -189.19651794]
[54.50146103 -177.89201355]
[42.72019196 -168.54100037]
[29.45846367 -161.44407654]
[34.06402969 -147.16860962]
[38.66959381 -132.89315796]
[52.85836792 -132.79420471]
[66.34038544 -128.30236816]
[77.78778076 -119.84600067]
[86.06873322 -108.24468231]
[90.35940552 -94.62967682]
[90.22585297 -80.33372498]
[85.66788483 -66.76051331]
[77.12038422 -55.24689865]
[65.41187286 -46.93121338]
[69.71945190 -32.56303024]
[74.02703857 -18.19484520]
[78.33462524 -3.82666039]
[91.85881042 2.66150475]
[105.76136780 -2.97045183]
[113.31514740 -17.12389755]
[129.11602783 -19.90084648]
[141.04295349 -9.17106152]
[139.94657898 6.83448553]
[126.66796875 15.83770752]
[111.39332581 10.93210411]
[97.49076843 16.56406021]
[91.00260925 30.08825111]
[95.31018829 44.45643616]
[99.61777496 58.82461929]
[103.92536163 73.19280243]
[108.23294067 87.56098938]
[118.67276001 98.33179474]
[132.89953613 103.08560944]
[147.17500305 107.69117737]
[161.49758911 112.14798737]
[175.37033081 104.57682037]
[190.50970459 109.11280060]
[197.93377686 123.06481171]
[193.23799133 138.15538025]
[179.20826721 145.43153381]
[164.16819763 140.57646179]
[157.04077148 126.47058868]
[142.71818542 122.01377106]
[135.34928894 123.03606415]
[128.14572144 117.31239319]
[113.91894531 112.55857849]
[101.93210602 121.57610321]
[102.55608368 136.56312561]
[103.18006134 151.55014038]
[103.80403900 166.53715515]
[104.42801666 181.52416992]
[105.05199432 196.51118469]
[105.67597198 211.49819946]
[106.29994965 226.48521423]
[106.92392731 241.47222900]
[107.54790497 256.45925903]
[122.30091095 259.58969116]
[135.81155396 266.29144287]
[147.23052979 276.14324951]
[155.84004211 288.52575684]
[161.09889221 302.66067505]
[162.67649841 317.65939331]
[160.47369385 332.57913208]
[154.62893677 346.48199463]
[145.50965881 358.49404907]
[133.68908691 367.86022949]
[119.91027832 373.99169922]
[105.03937531 376.50311279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[38 99]
[39 98]
[40 97]
[41 96]
[49 87]
[50 86]
[51 85]
[100 108]
[101 107]
[114 128]
[115 127]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
