%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGAGCAGUAGGGGGGGGGGCAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAxxxxxxxxxxUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACCCCCCCCCCCUGCGAGCAGUA\
) } def
/len { sequence length } bind def

/coor [
[82.94017792 421.83410645]
[68.77957153 416.67907715]
[56.18983078 408.39688110]
[45.84989166 397.43411255]
[38.31737900 384.38198853]
[33.99851608 369.94439697]
[33.12620544 354.89993286]
[35.74749756 340.05993652]
[41.72102356 326.22470093]
[50.72463989 314.14035034]
[62.27279663 304.45855713]
[75.74271393 297.70147705]
[90.40797424 294.23352051]
[90.40797424 279.23352051]
[90.40797424 264.23352051]
[90.40797424 249.23350525]
[90.40797424 234.23350525]
[90.40797424 219.23350525]
[90.40797424 204.23350525]
[90.40797424 189.23350525]
[90.40797424 174.23350525]
[90.40797424 159.23350525]
[87.68186951 155.24703979]
[87.47135162 149.49366760]
[90.72430420 143.62870789]
[91.33218384 128.64103699]
[91.94007111 113.65335083]
[86.55677032 108.43128204]
[72.12865448 112.53365326]
[75.79016113 97.98712921]
[70.40686035 92.76506042]
[55.44458771 93.82825470]
[40.48231506 94.89144897]
[25.52004242 95.95464325]
[13.96455956 107.08345032]
[-1.92155457 104.84494019]
[-9.95183372 90.95630646]
[-3.96613455 76.07171631]
[11.44382668 71.60935974]
[24.45684624 80.99237061]
[39.41912079 79.92917633]
[54.38139343 78.86598206]
[69.34366608 77.80278015]
[77.82531738 79.48133087]
[85.38434601 82.79604340]
[91.76056671 87.54116058]
[96.73081207 93.47337341]
[102.92430115 79.81172180]
[103.22830963 64.81480408]
[97.59355164 50.91338348]
[82.90441132 54.12851715]
[67.88318634 54.81475830]
[52.96207809 52.95236206]
[38.57039261 48.59491348]
[25.12220573 41.86778259]
[13.00444889 32.96452332]
[2.56577659 22.14130402]
[-5.89347172 9.70952415]
[-12.12990665 -3.97312522]
[-15.96409225 -18.51296806]
[-17.28571320 -33.49166489]
[-16.05674171 -48.47824478]
[-12.31253815 -63.04151917]
[-6.16083288 -76.76247406]
[2.22137928 -89.24632263]
[12.59292507 -100.13388824]
[24.65539360 -109.11190796]
[38.06172562 -115.92206573]
[52.42618942 -120.36843109]
[67.33549500 -122.32305908]
[82.36067200 -121.72971344]
[97.06941986 -118.60547638]
[111.03852844 -113.04022980]
[123.86608124 -105.19409180]
[135.18301392 -95.29282379]
[144.66371155 -83.62129974]
[152.03538513 -70.51533508]
[157.08593750 -56.35200500]
[159.67007446 -41.53882599]
[159.71342468 -26.50200081]
[157.21475220 -11.67416668]
[152.24594116 2.51804709]
[144.94995117 15.66630363]
[135.53672791 27.39230156]
[124.27707672 37.35866165]
[111.49497223 45.27862930]
[117.12973022 59.18004990]
[130.85343933 65.23477173]
[144.91972351 60.02519608]
[158.98600769 54.81561661]
[173.05229187 49.60603714]
[187.11857605 44.39645767]
[201.18484497 39.18688202]
[215.25112915 33.97730255]
[229.31741333 28.76772308]
[243.38369751 23.55814362]
[257.04534912 17.36465454]
[270.23364258 10.21840763]
[283.42193604 3.07216144]
[296.61022949 -4.07408476]
[299.56332397 -19.43029594]
[311.72885132 -29.25546074]
[327.36264038 -28.91043472]
[339.08285522 -18.55813026]
[341.35562134 -3.08658862]
[333.10775757 10.19900227]
[318.23370361 15.02559185]
[303.75646973 9.11421204]
[290.56817627 16.26045799]
[277.37988281 23.40670395]
[264.19158936 30.55294991]
[278.46603394 35.16169357]
[286.58239746 47.77615356]
[284.86080933 62.67702866]
[274.08178711 73.10837555]
[259.13250732 74.34070587]
[246.79081726 65.81528473]
[242.65235901 51.39747620]
[248.59327698 37.62442780]
[234.52699280 42.83400345]
[220.46070862 48.04358292]
[206.39442444 53.25316238]
[192.32815552 58.46274185]
[178.26187134 63.67232132]
[164.19558716 68.88189697]
[150.12930298 74.09147644]
[136.06301880 79.30105591]
[116.58595276 86.00521088]
[110.39246368 99.66686249]
[106.92774963 114.26123810]
[106.31986237 129.24891663]
[105.71197510 144.23658752]
[105.40797424 159.23350525]
[105.40797424 174.23350525]
[105.40797424 189.23350525]
[105.40797424 204.23350525]
[105.40797424 219.23350525]
[105.40797424 234.23350525]
[105.40797424 249.23350525]
[105.40797424 264.23352051]
[105.40797424 279.23352051]
[105.40797424 294.23352051]
[120.07323456 297.70147705]
[133.54315186 304.45855713]
[145.09130859 314.14035034]
[154.09492493 326.22470093]
[160.06845093 340.05993652]
[162.68974304 354.89993286]
[161.81742859 369.94439697]
[157.49856567 384.38198853]
[149.96606445 397.43411255]
[139.62611389 408.39688110]
[127.03637695 416.67907715]
[112.87577057 421.83410645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 132]
[26 131]
[27 130]
[31 43]
[32 42]
[33 41]
[34 40]
[47 129]
[48 128]
[49 87]
[50 86]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
