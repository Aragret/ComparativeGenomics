%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUACCUGAGGGGGGGGGGGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAxxxxxxxxxxGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCACCCCCCCCCCUUUUACCUCA\
) } def
/len { sequence length } bind def

/coor [
[82.71371460 372.66159058]
[68.22402954 368.45309448]
[55.31779480 360.63699341]
[44.87499619 349.74615479]
[37.60763168 336.52316284]
[34.01120377 321.86953735]
[34.33092499 306.78445435]
[38.54499817 292.29638672]
[46.36609268 279.39318848]
[57.26096344 268.95458984]
[70.48677063 261.69232178]
[85.14176178 258.10156250]
[85.45381927 243.10479736]
[85.76587677 228.10804749]
[86.07793427 213.11129761]
[86.38999176 198.11453247]
[86.70204163 183.11778259]
[87.01409912 168.12103271]
[87.32615662 153.12428284]
[87.63821411 138.12751770]
[87.95027161 123.13076782]
[88.26232910 108.13401794]
[82.19931030 94.41396332]
[70.90030670 84.54824066]
[59.60130310 74.68251801]
[48.30229950 64.81679535]
[37.00329208 54.95107269]
[25.70428848 45.08535004]
[12.61113453 37.76624298]
[-1.71146297 33.30942535]
[-16.03405952 28.85261154]
[-30.35665703 24.39579582]
[-44.89159393 20.68963432]
[-59.59955597 17.74415207]
[-74.30751801 14.79866982]
[-89.01548004 11.85318661]
[-103.72344208 8.90770435]
[-113.80487061 20.49477768]
[-128.33439636 25.47358322]
[-143.40364075 22.50484848]
[-154.95906067 12.38714409]
[-159.89230347 -2.15791440]
[-156.87634277 -17.21778107]
[-146.72247314 -28.74142647]
[-132.16201782 -33.62904739]
[-117.11167908 -30.56590080]
[-105.61991882 -20.37595558]
[-100.77795410 -5.80025721]
[-86.06999969 -2.85477471]
[-71.36203766 0.09070788]
[-56.65407181 3.03619027]
[-41.94610977 5.98167276]
[-47.62087631 -7.90346432]
[-40.49006653 -21.10011292]
[-25.76572418 -23.96259117]
[-14.21015549 -14.39865780]
[-14.26954365 0.60122424]
[-25.89984131 10.07319832]
[-11.57724476 14.53001404]
[2.74535275 18.98682976]
[17.06794930 23.44364548]
[7.15189695 12.18878460]
[0.73608482 -1.36987889]
[-1.67879117 -16.17421532]
[0.09572821 -31.06888199]
[5.92115784 -44.89148331]
[15.34287643 -56.56329727]
[27.62560463 -65.17343903]
[41.81078720 -70.04997253]
[56.79140091 -70.81232452]
[71.39834595 -67.40100861]
[84.49168396 -60.08222961]
[95.04960632 -49.42716599]
[102.24814606 -36.26734161]
[105.52554321 -21.62976456]
[104.62601471 -6.65676069]
[99.61975861 7.48316336]
[90.89748383 19.68651581]
[79.13986206 29.00093460]
[65.26448059 34.69951630]
[50.35418701 36.33753967]
[35.57001114 33.78634262]
[46.86901474 43.65206528]
[58.16802216 53.51778793]
[69.46702576 63.38351440]
[80.76602936 73.24923706]
[92.06503296 83.11495972]
[86.34656525 69.24776459]
[92.72776031 55.67277527]
[107.05410767 51.22804642]
[119.99838257 58.80734253]
[123.13315582 73.47612762]
[114.41789246 85.68399048]
[127.66047668 78.63885498]
[140.90306091 71.59372711]
[154.14564514 64.54859161]
[154.59791565 49.19635773]
[162.67936707 36.13550568]
[176.21611023 28.87934303]
[191.56684875 29.37973404]
[204.60231018 37.50207901]
[211.81600952 51.06151199]
[211.26750183 66.41060638]
[203.10433960 79.42053223]
[189.52235413 86.59169769]
[174.17506409 85.99507904]
[161.19078064 77.79117584]
[147.94819641 84.83631134]
[134.70561218 91.88144684]
[121.46302032 98.92658234]
[121.85294342 106.41643524]
[136.83265686 105.63658905]
[151.81239319 104.85697937]
[152.59176636 119.83671570]
[137.61250305 120.61630249]
[122.63278961 121.39614868]
[123.02271271 128.88600159]
[136.92527771 134.51795959]
[150.82781982 140.14991760]
[165.28190613 133.75811768]
[179.99182129 139.53686523]
[186.23045349 154.05770874]
[180.29650879 168.70571899]
[165.71051025 174.79046631]
[151.12606812 168.70199585]
[145.19587708 154.05247498]
[131.29331970 148.42051697]
[117.39075470 142.78855896]
[110.17189789 125.67910767]
[103.25907898 108.44607544]
[102.94702148 123.44282532]
[102.63496399 138.43957520]
[102.32291412 153.43634033]
[102.01085663 168.43309021]
[101.69879913 183.42984009]
[101.38674164 198.42658997]
[101.07468414 213.42335510]
[100.76262665 228.42010498]
[100.45057678 243.41685486]
[100.13851929 258.41360474]
[114.63145447 262.61090088]
[127.54371643 270.41705322]
[137.99491882 281.29980469]
[145.27249146 294.51721191]
[148.88023376 309.16802979]
[148.57215881 324.25335693]
[144.36927795 338.74468994]
[136.55815125 351.65393066]
[125.67134857 362.10092163]
[112.45114899 369.37341309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 61]
[30 60]
[31 59]
[32 58]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[93 110]
[94 109]
[95 108]
[96 107]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
