%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCUAAGAGGGGGGGGGGACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAxxxxxxxxxxAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCCCCCCCCCCCUACCUAAAA\
) } def
/len { sequence length } bind def

/coor [
[86.30970764 368.27438354]
[72.46376801 362.25836182]
[60.75510788 352.72894287]
[52.05258560 340.39328003]
[47.00198364 326.16674805]
[45.97809219 311.10507202]
[49.05688858 296.32592773]
[56.00991058 282.92599487]
[66.32119751 271.89965820]
[79.22557831 264.06515503]
[93.76546478 260.00384521]
[93.76546478 245.00382996]
[93.76546478 230.00382996]
[93.76546478 215.00382996]
[93.76546478 200.00382996]
[93.76546478 185.00382996]
[93.76546478 170.00382996]
[93.76546478 155.00382996]
[93.76546478 140.00382996]
[93.76546478 125.00382996]
[93.76546478 110.00382996]
[91.37693024 108.87248230]
[89.20314026 107.16398621]
[87.38388062 104.92230988]
[72.56612396 102.59120941]
[57.74836349 100.26010132]
[42.93060684 97.92900085]
[34.69023132 109.27545929]
[22.41686249 115.92041779]
[8.54360867 116.61164856]
[-4.20720530 111.27082825]
[-13.35823727 100.99767303]
[-17.15840912 87.84403992]
[-31.92446518 85.20516968]
[-46.71717072 82.72005463]
[-61.53493118 80.38894653]
[-76.35269165 78.05784607]
[-87.21776581 89.13619232]
[-102.52503967 91.67922974]
[-116.38854980 84.70909882]
[-123.47749329 70.90596771]
[-121.06603241 55.57741928]
[-110.08142090 44.61758804]
[-94.74745941 42.24075699]
[-80.96038055 49.36086655]
[-74.02158356 63.24008942]
[-59.20382690 65.57118988]
[-44.38607025 67.90229797]
[-37.24354553 65.82143402]
[-29.28560066 70.43911743]
[-14.51954556 73.07798004]
[-4.43633842 60.48907471]
[10.70006084 54.65200043]
[26.80989265 57.24108124]
[39.49997330 67.64576721]
[45.26171112 83.11124420]
[60.07946777 85.44234467]
[74.89722443 87.77345276]
[89.71498871 90.10455322]
[103.99044800 85.49899292]
[114.65206909 74.94770050]
[125.31369781 64.39640808]
[126.17256165 51.48454666]
[135.32423401 42.91332245]
[147.46125793 42.90292740]
[158.34008789 32.57572174]
[169.21890259 22.24851799]
[180.09773254 11.92131329]
[171.06723022 -0.07651369]
[163.46327209 -13.02555275]
[157.38499451 -26.75698662]
[152.91163635 -41.09179688]
[150.10150146 -55.84310150]
[148.99125671 -70.81858063]
[149.59535217 -85.82301331]
[151.90591431 -100.66076660]
[155.89283752 -115.13841248]
[161.50411987 -129.06719971]
[168.66662598 -142.26554871]
[177.28697205 -154.56137085]
[187.25277710 -165.79438782]
[198.43411255 -175.81814575]
[210.68519592 -184.50195312]
[223.84632874 -191.73262024]
[237.74591064 -197.41584778]
[252.20274353 -201.47758484]
[267.02835083 -203.86485291]
[282.02944946 -204.54652405]
[297.01049805 -203.51371765]
[311.77612305 -200.77992249]
[326.13388062 -196.38073730]
[339.89654541 -190.37355042]
[352.88473511 -182.83665466]
[364.92910767 -173.86831665]
[375.87261963 -163.58544922]
[385.57263184 -152.12213135]
[393.90264893 -139.62779236]
[400.75408936 -126.26533508]
[406.03765869 -112.20895386]
[409.68441772 -97.64190674]
[411.64688110 -82.75411224]
[411.89941406 -67.73965454]
[410.43878174 -52.79427719]
[407.28396606 -38.11282730]
[402.47610474 -23.88671112]
[396.07791138 -10.30138969]
[388.17279053 2.46602178]
[378.86380005 14.24907398]
[368.27227783 24.89415169]
[356.53634644 34.26247406]
[343.80899048 42.23190308]
[330.25610352 48.69854736]
[316.05441284 53.57809448]
[301.38906860 56.80693054]
[286.45126343 58.34296417]
[271.43572998 58.16616821]
[256.53820801 56.27884674]
[241.95295715 52.70560837]
[227.87010193 47.49303055]
[214.47325134 40.70907593]
[201.93704224 32.44218826]
[190.42494202 22.80013847]
[179.54611206 33.12734222]
[168.66728210 43.45454788]
[157.78846741 53.78175354]
[153.75715637 70.83310699]
[135.86499023 75.05803680]
[125.20336151 85.60932922]
[114.54173279 96.16061401]
[108.76546478 110.00382996]
[108.76546478 125.00382996]
[108.76546478 140.00382996]
[108.76546478 155.00382996]
[108.76546478 170.00382996]
[108.76546478 185.00382996]
[108.76546478 200.00382996]
[108.76546478 215.00382996]
[108.76546478 230.00382996]
[108.76546478 245.00382996]
[108.76546478 260.00384521]
[123.30535126 264.06515503]
[136.20973206 271.89965820]
[146.52101135 282.92599487]
[153.47404480 296.32592773]
[156.55284119 311.10507202]
[155.52894592 326.16674805]
[150.47834778 340.39328003]
[141.77581787 352.72894287]
[130.06715393 362.25836182]
[116.22122192 368.27438354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 59]
[25 58]
[26 57]
[27 56]
[33 51]
[34 50]
[35 48]
[36 47]
[37 46]
[60 129]
[61 128]
[62 127]
[65 125]
[66 124]
[67 123]
[68 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
