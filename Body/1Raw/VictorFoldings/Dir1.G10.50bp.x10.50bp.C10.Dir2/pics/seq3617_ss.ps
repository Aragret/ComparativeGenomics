%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUACCCGGGGGGGGGGAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCxxxxxxxxxxUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCCCCCCCCCCCAUACUC\
) } def
/len { sequence length } bind def

/coor [
[84.95531464 396.90063477]
[71.73511505 389.62814331]
[60.84831619 379.18115234]
[53.03718567 366.27191162]
[48.83430481 351.78057861]
[48.52622986 336.69525146]
[52.13397217 322.04443359]
[59.41154480 308.82702637]
[69.86275482 297.94427490]
[82.77501678 290.13812256]
[97.26795197 285.94082642]
[96.95589447 270.94409180]
[96.64383698 255.94732666]
[96.33177948 240.95057678]
[96.01972961 225.95382690]
[95.70767212 210.95706177]
[95.39561462 195.96031189]
[95.08355713 180.96356201]
[94.77149963 165.96681213]
[94.45944214 150.97004700]
[93.99140167 135.97735596]
[93.36742401 120.99034119]
[83.54552460 115.80844879]
[77.20836639 106.21002197]
[76.23493958 94.35144806]
[81.24376678 83.12268829]
[91.34881592 75.44297028]
[104.29352570 73.50468445]
[100.58736420 58.96974945]
[96.88120270 44.43481445]
[93.17504120 29.89987946]
[78.13380432 30.48300171]
[63.30581665 27.92691612]
[49.33880615 22.34574890]
[36.84237671 13.98571205]
[26.36140633 3.21425343]
[18.35227966 -9.49610519]
[13.16302299 -23.58848763]
[11.01818180 -38.44606781]
[12.00910091 -53.41906357]
[16.09004021 -67.85314941]
[23.08027649 -81.11807251]
[32.67211533 -92.63513947]
[44.44441605 -101.90249634]
[57.88109970 -108.51696777]
[54.17493820 -123.05190277]
[50.46878052 -137.58683777]
[40.40435028 -126.46446228]
[25.42169380 -127.18555450]
[16.47191620 -139.22305298]
[20.09658241 -153.77853394]
[33.64635468 -160.21310425]
[47.21702576 -153.82412720]
[45.04019165 -168.66532898]
[42.86335373 -183.50653076]
[40.68651581 -198.34773254]
[32.10923386 -186.04203796]
[17.99034882 -180.97676086]
[3.54650688 -185.02342224]
[-5.88557959 -196.68685913]
[-6.82094240 -211.65765381]
[1.08601654 -224.40441895]
[14.91383266 -230.21746826]
[29.55340385 -226.94898987]
[39.59534073 -215.80741882]
[39.90739441 -230.80418396]
[40.21945190 -245.80093384]
[25.99602890 -250.99447632]
[14.23118305 -260.52691650]
[6.20107794 -273.36419678]
[2.77675796 -288.11386108]
[4.32966805 -303.17599487]
[10.69136047 -316.91671753]
[21.17176628 -327.84555054]
[34.63404846 -334.77706909]
[49.61792374 -336.95932007]
[64.49804688 -334.15563965]
[77.66033936 -326.67013550]
[87.67704773 -315.31475830]
[93.46163940 -301.32128906]
[94.38664246 -286.20764160]
[90.35172272 -271.61315918]
[81.79455566 -259.12103271]
[69.64336395 -250.08625793]
[55.21620560 -245.48887634]
[54.90414810 -230.49212646]
[54.59209442 -215.49536133]
[55.52772141 -200.52458191]
[57.70455933 -185.68336487]
[59.88139343 -170.84216309]
[62.05823135 -156.00096130]
[65.00371552 -141.29299927]
[68.70987701 -126.75806427]
[72.41603851 -112.22312927]
[87.37940979 -112.85018921]
[102.15190125 -110.35130310]
[116.08739471 -104.83330536]
[128.57585144 -96.53511810]
[139.07006836 -85.81744385]
[147.10957336 -73.14705658]
[152.34092712 -59.07648087]
[154.53315735 -44.21990967]
[153.58804321 -29.22637367]
[149.54447937 -14.75140667]
[142.57687378 -1.42837107]
[132.98760986 10.15924549]
[121.19397736 19.50338936]
[107.70997620 26.19371796]
[111.41613770 40.72865295]
[115.12229919 55.26358795]
[118.82846069 69.79852295]
[129.59927368 80.23833466]
[144.24276733 83.48916626]
[158.88627625 86.73999023]
[173.52976990 89.99081421]
[188.17327881 93.24163818]
[203.64376831 87.80143738]
[215.91249084 98.68308258]
[212.35844421 114.69248199]
[196.63771057 119.36052704]
[184.92243958 107.88513947]
[170.27894592 104.63431549]
[155.63543701 101.38349152]
[140.99194336 98.13266754]
[126.34844208 94.88183594]
[121.49706268 111.60001373]
[108.35443878 120.36636353]
[108.97841644 135.35337830]
[112.48103333 143.86123657]
[109.45619965 150.65798950]
[109.76825714 165.65475464]
[110.08031464 180.65150452]
[110.39236450 195.64825439]
[110.70442200 210.64500427]
[111.01647949 225.64176941]
[111.32853699 240.63851929]
[111.64059448 255.63526917]
[111.95265198 270.63201904]
[112.26470184 285.62878418]
[126.91970062 289.21954346]
[140.14550781 296.48181152]
[151.04037476 306.92041016]
[158.86146545 319.82360840]
[163.07554626 334.31167603]
[163.39526367 349.39675903]
[159.79884338 364.05038452]
[152.53147888 377.27337646]
[142.08866882 388.16421509]
[129.18244934 395.98034668]
[114.69274902 400.18881226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[28 111]
[29 110]
[30 109]
[31 108]
[45 94]
[46 93]
[47 92]
[53 91]
[54 90]
[55 89]
[56 88]
[65 87]
[66 86]
[67 85]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
