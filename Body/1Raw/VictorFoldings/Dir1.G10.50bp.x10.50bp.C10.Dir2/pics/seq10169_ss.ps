%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUAGGCGGCGGGGGGGGGGUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUxxxxxxxxxxCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACCCCCCCCCCCAAACUAGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[93.88378143 472.54336548]
[80.18163300 466.28247070]
[68.21651459 457.12911987]
[58.58860397 445.54244995]
[51.78082657 432.10363770]
[48.13465500 417.48675537]
[47.83298874 402.42498779]
[50.89095306 387.67382812]
[57.15516281 373.97320557]
[66.31140900 362.01028442]
[77.90041351 352.38519287]
[91.34088135 345.58065796]
[105.95864868 341.93804932]
[105.65464783 326.94113159]
[105.35063934 311.94421387]
[105.04663849 296.94729614]
[104.74263000 281.95037842]
[104.43862915 266.95343018]
[104.13462067 251.95652771]
[103.83061981 236.95960999]
[103.52661133 221.96269226]
[103.22261047 206.96577454]
[102.91860199 191.96885681]
[101.85540771 177.00657654]
[100.03575134 162.11735535]
[98.21609497 147.22813416]
[96.39643860 132.33891296]
[80.08910370 125.73611450]
[69.60250092 111.60963440]
[68.00228119 94.08920288]
[75.75624847 78.29673004]
[67.18722534 65.98528290]
[58.61819839 53.67382812]
[50.04917526 41.36237717]
[49.12566376 56.33392334]
[40.95217514 68.91144562]
[27.64631653 75.83633423]
[12.65539646 75.31447601]
[-0.13670331 67.48107910]
[-7.41577864 54.36562347]
[-7.29595137 39.36610413]
[0.19173352 26.36861992]
[13.10735035 18.74059105]
[28.10469437 18.45830154]
[41.29673004 25.59349442]
[35.38139343 11.80912685]
[29.46605682 -1.97524059]
[23.55071831 -15.75960827]
[17.63537979 -29.54397583]
[11.72004318 -43.32834244]
[2.90326405 -55.46359634]
[-8.37850857 -65.34902191]
[-19.66028023 -75.23444366]
[-35.41181183 -73.94417572]
[-47.40795898 -84.23339844]
[-48.53162003 -99.99768829]
[-38.11614609 -111.88438416]
[-22.34085464 -112.84130859]
[-10.56494522 -102.30074310]
[-9.77485657 -86.51622009]
[1.50691605 -76.63079071]
[12.78868866 -66.74536896]
[8.15696621 -81.01236725]
[7.30403042 -95.98809814]
[10.28591537 -110.68872070]
[16.90672493 -124.14846802]
[26.73149872 -135.48309326]
[39.11479187 -143.94796753]
[53.24307632 -148.98698425]
[68.18817902 -150.26908875]
[82.96828461 -147.71005249]
[96.61238861 -141.47801208]
[108.22413635 -131.98236084]
[117.04069519 -119.84694672]
[122.48284149 -105.86899567]
[124.19305420 -90.96681213]
[122.05898285 -76.11939240]
[116.22083282 -62.30216217]
[107.06212616 -50.42284393]
[95.18457031 -41.26185989]
[81.36846161 -35.42105103]
[66.52145386 -33.28413010]
[51.61893845 -34.99148178]
[37.63994598 -40.43094254]
[25.50440979 -49.24367905]
[31.41974831 -35.45931244]
[37.33508682 -21.67494583]
[43.25042343 -7.89057827]
[49.16576004 5.89378881]
[55.08110046 19.67815590]
[62.36063004 32.79335403]
[70.92964935 45.10480499]
[79.49867249 57.41625977]
[88.06769562 69.72770691]
[94.68898010 67.89728546]
[101.54697418 67.49771881]
[108.33602142 68.54682922]
[114.75352478 70.99784851]
[120.51343536 74.74153137]
[125.35903931 79.61102295]
[129.07435608 85.38927460]
[143.66873169 81.92456055]
[158.26310730 78.45983887]
[160.64453125 63.44660568]
[168.59425354 50.49013138]
[180.90000916 41.56618500]
[195.68525696 38.03560257]
[210.69534302 40.43677521]
[223.64135742 48.40354156]
[232.54910278 60.72102356]
[236.06022644 75.51090240]
[233.63931274 90.51782227]
[225.65553284 103.45333862]
[213.32633972 112.34487152]
[198.53186035 115.83654785]
[183.52813721 113.39588928]
[170.60313416 105.39509583]
[161.72781372 93.05421448]
[147.13343811 96.51892853]
[132.53907776 99.98365021]
[126.70688629 118.58853912]
[111.28565979 130.51925659]
[113.10531616 145.40847778]
[114.92497253 160.29769897]
[116.74462891 175.18692017]
[128.12501526 165.41517639]
[142.89785767 168.01576233]
[150.25711060 181.08638000]
[144.81964111 195.06614685]
[130.56282043 199.72912598]
[117.91552734 191.66484070]
[118.21952820 206.66175842]
[118.52353668 221.65867615]
[118.82753754 236.65560913]
[119.13153839 251.65252686]
[119.43554688 266.64944458]
[119.73954773 281.64636230]
[120.04355621 296.64328003]
[120.34755707 311.64019775]
[120.65156555 326.63711548]
[120.95556641 341.63403320]
[135.70893860 344.68127441]
[149.41412354 350.93551636]
[161.38368225 360.08306885]
[171.01721191 371.66506958]
[177.83149719 385.10058594]
[181.48474121 399.71569824]
[181.79371643 414.77731323]
[178.74288940 429.52996826]
[172.48532104 443.23364258]
[163.33488464 455.20095825]
[151.75053406 464.83169556]
[138.31336975 471.64273071]
[123.69737244 475.29241943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 125]
[25 124]
[26 123]
[27 122]
[31 94]
[32 93]
[33 92]
[34 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 62]
[52 61]
[53 60]
[101 120]
[102 119]
[103 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
