%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCUAAAUCGGGGGGGGGGCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUxxxxxxxxxxCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCCCCCCCCCCCACCCUCUACAUC\
) } def
/len { sequence length } bind def

/coor [
[83.87147522 607.02032471]
[69.71086884 601.86529541]
[57.12112808 593.58306885]
[46.78118896 582.62030029]
[39.24867630 569.56817627]
[34.92981339 555.13061523]
[34.05750275 540.08612061]
[36.67879486 525.24615479]
[42.65232086 511.41088867]
[51.65593719 499.32653809]
[63.20409393 489.64477539]
[76.67401123 482.88769531]
[91.33927155 479.41970825]
[91.33927155 464.41970825]
[91.33927155 449.41970825]
[91.33927155 434.41970825]
[91.33927155 419.41970825]
[91.33927155 404.41970825]
[91.33927155 389.41970825]
[91.33927155 374.41970825]
[91.33927155 359.41970825]
[91.33927155 344.41970825]
[79.06187439 338.36666870]
[70.55932617 327.55465698]
[67.54262543 314.06686401]
[70.65872192 300.53369141]
[79.35279846 289.61968994]
[91.96605682 283.49902344]
[92.27005768 268.50210571]
[92.57405853 253.50518799]
[77.68471527 248.95382690]
[64.66194916 240.39422607]
[54.55953598 228.50926208]
[48.19766617 214.25128174]
[46.09637833 198.76577759]
[48.43305588 183.29937744]
[55.02747345 169.09950256]
[65.35568237 157.31369019]
[78.59162140 148.89695740]
[93.67320251 144.53433228]
[93.67320251 129.53433228]
[93.67320251 114.53433990]
[81.60872650 109.30572510]
[75.25897980 94.37944794]
[63.97721100 84.49402618]
[52.69543839 74.60859680]
[41.41366577 64.72317505]
[30.13189316 54.83774948]
[18.85012054 44.95232773]
[7.56834888 35.06690216]
[-3.71342349 25.18147850]
[-14.99519539 15.29605389]
[-26.27696800 5.41062927]
[-42.02849960 6.70089674]
[-54.02464676 -3.58832121]
[-55.14830780 -19.35261345]
[-44.73283386 -31.23930740]
[-28.95754242 -32.19623566]
[-17.18163300 -21.65567017]
[-16.39154434 -5.87114334]
[-5.10977125 4.01428127]
[6.17200089 13.89970589]
[17.45377350 23.78512955]
[28.73554611 33.67055511]
[40.01731873 43.55597687]
[51.29909134 53.44140244]
[62.58086395 63.32682800]
[73.86263275 73.21224976]
[85.14440918 83.09767914]
[79.98304749 69.01362610]
[74.82168579 54.92958450]
[69.66032410 40.84553909]
[58.58213425 30.73248863]
[51.23288727 17.65622902]
[48.35356903 2.93517184]
[50.23448563 -11.94643307]
[56.68599319 -25.48814774]
[67.05761719 -36.32463074]
[80.30364227 -43.36329269]
[95.08853912 -45.89446259]
[109.92162323 -43.66293716]
[123.30734253 -36.89370346]
[133.89608765 -26.26927567]
[140.62025452 -12.86085892]
[142.80186462 1.97964585]
[140.22096252 16.75594330]
[133.13777161 29.97821426]
[122.26783752 40.31238556]
[117.39297485 54.49814606]
[112.51811218 68.68389893]
[107.64324951 82.86965942]
[118.72235870 72.75762177]
[129.80146790 62.64558029]
[140.88056946 52.53353882]
[151.95968628 42.42149734]
[154.12448120 26.52517128]
[167.97572327 18.43055916]
[182.88790894 24.34715652]
[187.42170715 39.73625565]
[178.09915161 52.79265594]
[162.07171631 53.50060272]
[150.99261475 63.61264420]
[139.91351318 73.72468567]
[128.83439636 83.83673096]
[117.75529480 93.94876862]
[131.99687195 89.23946381]
[146.14120483 94.23322296]
[154.26913452 106.84023285]
[152.97924805 121.78466797]
[142.81134033 132.81253052]
[128.02052307 135.30882263]
[114.79650116 128.22889709]
[108.67320251 114.53433990]
[108.67320251 129.53433228]
[108.67320251 144.53433228]
[122.63050079 148.40368652]
[135.09431458 155.75755310]
[145.21325684 166.08622742]
[152.29795837 178.67709351]
[155.86816406 192.66371155]
[155.68518066 207.08547974]
[151.76783752 220.95362854]
[144.39085388 233.31892395]
[134.06546021 243.33673096]
[121.50403595 250.32470703]
[107.57098389 253.80918884]
[107.26697540 268.80609131]
[106.96297455 283.80300903]
[121.18004608 292.19024658]
[129.19668579 306.51226807]
[128.91564941 322.82913208]
[120.50762939 336.70629883]
[106.33927155 344.41970825]
[106.33927155 359.41970825]
[106.33927155 374.41970825]
[106.33927155 389.41970825]
[106.33927155 404.41970825]
[106.33927155 419.41970825]
[106.33927155 434.41970825]
[106.33927155 449.41970825]
[106.33927155 464.41970825]
[106.33927155 479.41970825]
[121.00453186 482.88769531]
[134.47444153 489.64477539]
[146.02259827 499.32653809]
[155.02622986 511.41088867]
[160.99975586 525.24615479]
[163.62103271 540.08612061]
[162.74873352 555.13061523]
[158.42987061 569.56817627]
[150.89735413 582.62030029]
[140.55741882 593.58306885]
[127.96767426 601.86529541]
[113.80706787 607.02032471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[28 128]
[29 127]
[30 126]
[40 115]
[41 114]
[42 113]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
