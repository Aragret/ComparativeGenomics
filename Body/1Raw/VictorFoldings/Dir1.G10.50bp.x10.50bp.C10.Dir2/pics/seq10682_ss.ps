%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUUCCCCACGGGGGGGGGGAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUxxxxxxxxxxACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCCCCCCCCCCCUCGCUUCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[82.36339569 386.77416992]
[69.15531158 379.53811646]
[57.81187057 369.63153076]
[48.86361694 357.51779175]
[42.72908020 343.76345825]
[39.69517899 329.01187134]
[39.90382004 313.95297241]
[43.34524536 299.29107666]
[49.85848618 285.71200562]
[59.13891602 273.85079956]
[70.75246429 264.26229858]
[84.15594482 257.39492798]
[98.72245789 253.56991577]
[98.11457825 238.58222961]
[97.50669098 223.59455872]
[96.89881134 208.60687256]
[96.29092407 193.61920166]
[95.68304443 178.63151550]
[95.07515717 163.64384460]
[94.46727753 148.65617371]
[93.85939026 133.66848755]
[93.25150299 118.68080902]
[81.35973358 112.33097839]
[75.20075989 98.62807465]
[61.13447571 103.83765411]
[47.06819534 109.04723358]
[41.97335815 123.83157349]
[28.54076004 131.83776855]
[13.11285686 129.28555298]
[2.97423506 117.37999725]
[2.91204214 101.74253082]
[12.95564365 89.75670624]
[28.36275673 87.08184814]
[41.85861588 94.98094940]
[55.92489624 89.77136993]
[69.99118042 84.56179047]
[79.64592743 73.08199310]
[82.36700439 58.33086395]
[85.08808136 43.57973862]
[87.80915833 28.82861137]
[90.08057404 14.00158596]
[91.90023041 -0.88763332]
[79.74167633 -10.16754627]
[73.89912415 -24.19471359]
[75.84922791 -39.16346359]
[84.96896362 -51.06667328]
[98.72959900 -56.76846695]
[100.54925537 -71.65768433]
[102.36891174 -86.54690552]
[104.18857574 -101.43612671]
[106.00823212 -116.32534790]
[98.67562866 -126.98310089]
[100.53509521 -139.37936401]
[110.04323578 -146.91683960]
[112.16427612 -161.76611328]
[114.28532410 -176.61540222]
[116.40636444 -191.46467590]
[118.52740479 -206.31396484]
[116.63657379 -215.31207275]
[120.84486389 -221.44149780]
[123.26641846 -236.24475098]
[125.68797302 -251.04798889]
[128.10952759 -265.85122681]
[118.45232391 -254.37350464]
[106.28436279 -245.60191345]
[92.34261322 -240.06770325]
[77.47143555 -238.10604858]
[62.57149887 -239.83575439]
[48.54520798 -245.15206909]
[36.24206161 -253.73300171]
[26.40718651 -265.05886841]
[19.63622856 -278.44372559]
[16.33926964 -293.07690430]
[16.71598434 -308.07217407]
[20.74356079 -322.52136230]
[28.17806816 -335.54931641]
[38.56924057 -346.36706543]
[51.28774261 -354.31939697]
[65.56328583 -358.92471313]
[80.53128052 -359.90405273]
[95.28520203 -357.19815063]
[108.93147278 -350.97088623]
[120.64363098 -341.59936523]
[129.71234131 -329.65118408]
[135.58833313 -315.85000610]
[137.91575623 -301.03167725]
[136.55287170 -286.09005737]
[138.40480042 -301.80252075]
[152.14530945 -307.55120850]
[160.96208191 -319.68646240]
[159.88265991 -335.69317627]
[171.82093811 -346.41030884]
[187.61888123 -343.61663818]
[195.15765381 -329.45520020]
[188.65417480 -314.78945923]
[173.09733582 -310.86968994]
[164.28056335 -298.73443604]
[163.05926514 -283.88998413]
[148.68812561 -277.27328491]
[142.91278076 -263.42968750]
[140.49122620 -248.62643433]
[138.06965637 -233.82319641]
[135.64810181 -219.01994324]
[133.37669373 -204.19291687]
[131.25564575 -189.34364319]
[129.13459778 -174.49435425]
[127.01355743 -159.64508057]
[124.89251709 -144.79579163]
[132.31239319 -128.92022705]
[120.89745331 -114.50568390]
[119.07778931 -99.61647034]
[117.25813293 -84.72724915]
[115.43847656 -69.83802795]
[113.61882019 -54.94881058]
[125.60128784 -46.10087204]
[131.58596802 -32.35170364]
[129.87376404 -17.35387993]
[120.82501984 -5.14662361]
[106.78945160 0.93202430]
[104.96978760 15.82124329]
[106.89366913 18.84220314]
[107.41594696 22.96113777]
[106.02963257 27.49305153]
[102.56027985 31.54968643]
[99.83920288 46.30081558]
[97.11812592 61.05194092]
[94.39705658 75.80307007]
[111.47255707 79.38368988]
[121.16085815 92.80759430]
[119.37606049 108.36870575]
[108.23918152 118.07292938]
[108.84706879 133.06060791]
[109.45494843 148.04827881]
[110.06283569 163.03596497]
[110.67071533 178.02363586]
[111.27860260 193.01132202]
[111.88648987 207.99899292]
[112.49436951 222.98666382]
[113.10225677 237.97434998]
[113.71013641 252.96202087]
[128.53857422 255.59481812]
[142.45417786 261.35415649]
[154.80610657 269.97064209]
[165.01661682 281.04129028]
[172.60816956 294.04830933]
[177.22567749 308.38333130]
[178.65316772 323.37588501]
[176.82388306 338.32470703]
[171.82337952 352.53067017]
[163.88555908 365.32928467]
[153.38165283 376.12197876]
[140.80296326 384.40393066]
[126.73782349 389.78778076]
[111.84407806 392.02172852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 36]
[25 35]
[26 34]
[37 127]
[38 126]
[39 125]
[40 124]
[41 120]
[42 119]
[47 114]
[48 113]
[49 112]
[50 111]
[51 110]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[60 103]
[61 102]
[62 101]
[63 100]
[87 99]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
