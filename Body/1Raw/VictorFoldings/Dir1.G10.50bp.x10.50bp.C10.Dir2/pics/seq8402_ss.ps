%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACACUAGGGGGGGGGGAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCxxxxxxxxxxACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCCCCCCCCCCCACAACACAA\
) } def
/len { sequence length } bind def

/coor [
[83.80579376 384.93157959]
[70.58559418 377.65911865]
[59.69878769 367.21212769]
[51.88765717 354.30288696]
[47.68477631 339.81155396]
[47.37670517 324.72622681]
[50.98444748 310.07540894]
[58.26202011 296.85800171]
[68.71322632 285.97525024]
[81.62548828 278.16909790]
[96.11842346 273.97180176]
[95.80636597 258.97506714]
[95.49431610 243.97830200]
[95.18225861 228.98155212]
[94.87020111 213.98478699]
[94.55814362 198.98803711]
[94.24608612 183.99128723]
[93.93402863 168.99453735]
[93.62197876 153.99777222]
[93.30992126 139.00102234]
[79.27176666 133.70722961]
[68.21336365 123.56791687]
[54.68917084 130.05607605]
[41.16498184 136.54425049]
[34.50873947 151.14129639]
[18.91183090 154.89842224]
[6.33886957 144.93347168]
[6.43475485 128.89071655]
[19.12593269 119.07675934]
[34.67681503 123.02005768]
[48.20100784 116.53189087]
[61.72519684 110.04372406]
[60.43416977 100.61823273]
[61.43008423 91.15700531]
[64.65537262 82.20690918]
[69.92360687 74.28526306]
[76.93028259 67.84996033]
[85.27040863 63.27295303]
[94.46191406 60.81879807]
[103.97352600 60.62934875]
[108.28111267 46.26116562]
[112.58869934 31.89298248]
[113.52433014 16.92218971]
[111.03920746 2.12948346]
[108.55409241 -12.66322327]
[106.06896973 -27.45593071]
[103.58385468 -42.24863815]
[101.09873199 -57.04134369]
[98.61361694 -71.83405304]
[95.05885315 -86.40675354]
[90.45329285 -100.68221283]
[85.84772491 -114.95767975]
[81.24215698 -129.23313904]
[66.27995300 -127.58473206]
[51.29223251 -128.98228455]
[36.89274216 -133.36857605]
[23.67112350 -140.56396484]
[12.16879845 -150.27381897]
[2.85677981 -162.10054016]
[-3.88361168 -175.55981445]
[-7.77636099 -190.10049438]
[-8.66206264 -205.12715149]
[-6.50444746 -220.02445984]
[-1.39186895 -234.18235779]
[6.46631622 -247.02111816]
[16.74832153 -258.01498413]
[29.03310204 -266.71380615]
[42.81760788 -272.76129150]
[57.53736877 -275.90988159]
[72.58962250 -276.03057861]
[87.35798645 -273.11846924]
[101.23770905 -267.29281616]
[113.66041565 -258.79217529]
[124.11741638 -247.96461487]
[132.18049622 -235.25352478]
[137.51947021 -221.17942810]
[139.91572571 -206.31864929]
[139.27113342 -191.27972412]
[135.61207581 -176.67848206]
[129.08840942 -163.11283875]
[119.96726227 -151.13830566]
[108.62213898 -141.24520874]
[95.51762390 -133.83869934]
[100.12318420 -119.56324005]
[104.72875214 -105.28778076]
[109.33431244 -91.01232147]
[116.52196503 -104.17809296]
[130.42607117 -109.80621338]
[144.74795532 -105.34707642]
[152.99963379 -92.82071686]
[151.44303894 -77.90170288]
[140.78332520 -67.34848785]
[125.84942627 -65.94178772]
[113.40632629 -74.31916809]
[115.89144135 -59.52646255]
[118.37656403 -44.73375702]
[120.86167908 -29.94104958]
[123.34679413 -15.14834213]
[125.83191681 -0.35563511]
[128.31703186 14.43707180]
[133.85528564 0.49692523]
[142.75364685 -11.57863808]
[154.42810059 -20.99708939]
[168.11244202 -27.14028549]
[182.90855408 -29.60504723]
[197.84535217 -28.22960663]
[211.94253540 -23.10423660]
[224.27488708 -14.56532001]
[234.03303528 -3.17327189]
[240.57652283 10.32423782]
[243.47590637 25.04135704]
[242.54089355 40.01218796]
[237.83285522 54.25418091]
[229.66078186 66.83262634]
[218.56101990 76.92198181]
[205.26203918 83.86008453]
[190.63668823 87.19158173]
[175.64482117 86.69781494]
[161.27035522 82.41119385]
[148.45672607 74.61306000]
[138.04490662 63.81520081]
[130.71820068 50.72629547]
[126.95688629 36.20056534]
[122.64929962 50.56875229]
[118.34171295 64.93693542]
[132.67677307 77.68262482]
[139.33331299 95.67253113]
[136.74716187 114.67932892]
[125.52602386 130.23672485]
[108.30667114 138.68896484]
[108.61872864 153.68571472]
[108.93078613 168.68247986]
[109.24284363 183.67922974]
[109.55490112 198.67597961]
[109.86695099 213.67272949]
[110.17900848 228.66949463]
[110.49106598 243.66624451]
[110.80312347 258.66299438]
[111.11518097 273.65975952]
[125.77017212 277.25051880]
[138.99598694 284.51278687]
[149.89085388 294.95138550]
[157.71194458 307.85458374]
[161.92601013 322.34265137]
[162.24574280 337.42773438]
[158.64930725 352.08135986]
[151.38194275 365.30435181]
[140.93914795 376.19519043]
[128.03291321 384.01129150]
[113.54322815 388.21978760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 32]
[23 31]
[24 30]
[40 125]
[41 124]
[42 123]
[43 100]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
[49 94]
[50 86]
[51 85]
[52 84]
[53 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
