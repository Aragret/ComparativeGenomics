%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCAAAAUGGGGGGGGGGAGUGGGAAGAUUUAUAGGUAGAGGCGACAAACCUACCGAGCCUGGUGAUAxxxxxxxxxxCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUACCCUAACCGUGCAAAGCCCCCCCCCCGUAGCAUAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 367.99584961]
[71.19830322 361.97982788]
[59.48964310 352.45040894]
[50.78712082 340.11474609]
[45.73651886 325.88821411]
[44.71262741 310.82653809]
[47.79142761 296.04736328]
[54.74444962 282.64743042]
[65.05573273 271.62109375]
[77.96011353 263.78659058]
[92.50000000 259.72528076]
[92.50000000 244.72528076]
[92.50000000 229.72528076]
[92.50000000 214.72528076]
[92.50000000 199.72528076]
[92.50000000 184.72528076]
[92.50000000 169.72528076]
[92.50000000 154.72528076]
[92.50000000 139.72528076]
[92.50000000 124.72528076]
[80.28540039 116.70102692]
[74.37818909 103.33353424]
[76.66828156 88.89952850]
[65.57696533 78.80087280]
[54.48564911 68.70222473]
[43.39433289 58.60357666]
[27.98111153 55.03382492]
[23.77938461 40.74415207]
[12.68806839 30.64550400]
[0.42570040 22.00638771]
[-12.81688499 14.96125221]
[-21.40980148 21.88980103]
[-32.78620529 24.55218506]
[-44.82417679 21.88514519]
[-55.03318405 13.87487411]
[-61.06653595 1.66027141]
[-75.38912964 -2.79654431]
[-89.71173096 -7.25335979]
[-104.03432465 -11.71017551]
[-114.80741119 -0.83822936]
[-129.40245056 3.77084136]
[-144.46560669 1.05790615]
[-156.53546143 -8.35362244]
[-162.83848572 -22.30104446]
[-161.92625427 -37.57934570]
[-154.00842285 -50.67768097]
[-140.90441895 -58.58615112]
[-125.62548065 -59.48744583]
[-111.68257141 -53.17445755]
[-102.27967072 -41.09786224]
[-99.57751465 -26.03277206]
[-85.25491333 -21.57595634]
[-70.93231964 -17.11914062]
[-56.60971832 -12.66232586]
[-47.84351349 -24.83416176]
[-56.60971832 -37.00600052]
[-65.37592316 -49.17783737]
[-74.14213562 -61.34967422]
[-89.30960846 -67.58503723]
[-91.22489929 -83.87195587]
[-77.91770935 -93.45584106]
[-63.07734680 -86.47761536]
[-61.97029495 -70.11588287]
[-53.20409012 -57.94404221]
[-44.43788147 -45.77220535]
[-35.67167664 -33.60036850]
[-10.04265785 -22.43140221]
[-5.77175045 1.71866655]
[7.47083521 8.76380157]
[0.81034428 -4.67635727]
[0.52061373 -19.67355919]
[6.65702868 -33.36093903]
[18.04655266 -43.12202454]
[32.51196671 -47.09088135]
[47.28805923 -44.50882721]
[59.55024338 -35.86944580]
[66.95447540 -22.82424164]
[68.08535767 -7.86693192]
[62.72672272 6.14324379]
[51.90291977 16.52810287]
[37.68302917 21.30247688]
[22.78671837 19.55418777]
[33.87803268 29.65283775]
[48.49793243 32.50026703]
[53.49298477 47.51226044]
[64.58429718 57.61091232]
[75.67561340 67.70956421]
[86.76692963 77.80821228]
[106.90340424 75.10155487]
[122.77116394 87.79082489]
[137.47912598 84.84534454]
[145.33927917 80.06310272]
[152.52354431 81.99492645]
[167.28959656 79.35606384]
[182.05566406 76.71719360]
[190.08914185 66.57240295]
[202.48834229 64.70724487]
[212.48832703 71.58530426]
[227.30609131 69.25419617]
[242.12384033 66.92309570]
[256.83181763 63.97761154]
[271.40451050 60.42284775]
[282.97793579 49.63553619]
[297.17626953 54.13626480]
[311.74899292 50.58150482]
[323.22299194 38.86487961]
[339.03741455 43.20486832]
[342.92376709 59.13685989]
[330.88406372 70.27139282]
[315.30374146 65.15420532]
[300.73104858 68.70896912]
[290.19995117 79.24201965]
[274.95925903 74.99555206]
[260.38656616 78.55031586]
[258.81387329 80.94489288]
[256.16726685 82.83944702]
[252.64024353 83.81004333]
[248.58029175 83.51371765]
[244.45495605 81.74085236]
[229.63719177 84.07195282]
[214.81944275 86.40306091]
[201.82487488 98.15641022]
[184.69451904 91.48325348]
[169.92846680 94.12211609]
[155.16241455 96.76097870]
[140.42460632 99.55330658]
[125.71664429 102.49878693]
[123.88066864 109.86425018]
[119.98350525 116.37831116]
[114.36154175 121.47872925]
[107.50000000 124.72528076]
[107.50000000 139.72528076]
[107.50000000 154.72528076]
[107.50000000 169.72528076]
[107.50000000 184.72528076]
[107.50000000 199.72528076]
[107.50000000 214.72528076]
[107.50000000 229.72528076]
[107.50000000 244.72528076]
[107.50000000 259.72528076]
[122.03988647 263.78659058]
[134.94427490 271.62109375]
[145.25555420 282.64743042]
[152.20857239 296.04736328]
[155.28736877 310.82653809]
[154.26348877 325.88821411]
[149.21287537 340.11474609]
[140.51036072 352.45040894]
[128.80169678 361.97982788]
[114.95575714 367.99584961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 88]
[24 87]
[25 86]
[26 85]
[28 83]
[29 82]
[30 69]
[31 68]
[36 54]
[37 53]
[38 52]
[39 51]
[55 66]
[56 65]
[57 64]
[58 63]
[90 127]
[91 126]
[93 125]
[94 124]
[95 123]
[98 121]
[99 120]
[100 119]
[101 114]
[102 113]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
