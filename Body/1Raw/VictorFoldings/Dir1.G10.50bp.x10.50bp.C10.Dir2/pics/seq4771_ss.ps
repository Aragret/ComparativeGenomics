%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCAAAAAAGGGGGGGGGGAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCxxxxxxxxxxCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCCCCCCCCCCCUAACCAACAAA\
) } def
/len { sequence length } bind def

/coor [
[87.71498108 502.70968628]
[74.01282501 496.44879150]
[62.04771423 487.29544067]
[52.41979980 475.70877075]
[45.61202240 462.26992798]
[41.96585464 447.65304565]
[41.66418457 432.59130859]
[44.72214890 417.84014893]
[50.98635864 404.13949585]
[60.14260483 392.17660522]
[71.73161316 382.55151367]
[85.17208099 375.74697876]
[99.78984833 372.10433960]
[99.48583984 357.10742188]
[99.18183899 342.11050415]
[98.87783051 327.11358643]
[98.57382965 312.11666870]
[98.26982117 297.11975098]
[97.96582031 282.12283325]
[97.66181183 267.12591553]
[97.35781097 252.12899780]
[97.05381012 237.13208008]
[82.03998566 232.76527405]
[69.08919525 223.96939087]
[59.47117233 211.59233093]
[54.13333893 196.83380127]
[53.60751724 181.12904358]
[57.95694733 166.00924683]
[66.76895142 152.95227051]
[79.19406891 143.23814392]
[94.02792358 137.82368469]
[93.42003632 122.83599854]
[77.24770355 113.85513306]
[71.05403900 94.24382019]
[56.05480576 94.39582825]
[41.05557632 94.54783630]
[27.22028732 103.35219574]
[12.80488014 95.53375244]
[12.63869095 79.13545227]
[26.89268112 71.02645111]
[40.90356827 79.54860687]
[55.90279770 79.39659882]
[70.90202332 79.24459076]
[81.98113251 69.13254547]
[83.49865723 54.20950699]
[85.01618195 39.28646851]
[86.53370667 24.36342621]
[74.75610352 16.75785255]
[67.45022583 4.86976099]
[65.99885559 -8.94149494]
[70.62948608 -21.96370506]
[80.38085175 -31.66441154]
[93.30187988 -36.18338013]
[95.12153625 -51.07260132]
[96.94119263 -65.96182251]
[98.76084900 -80.85103607]
[96.85383606 -84.90108490]
[96.41678619 -88.93672943]
[97.25804138 -92.48706055]
[99.04980469 -95.19533539]
[101.37867737 -96.85410309]
[104.39815521 -111.54705048]
[107.41763306 -126.24000549]
[108.93515778 -141.16304016]
[108.93515778 -156.16304016]
[108.78314972 -171.16227722]
[108.47914124 -186.15919495]
[93.94309235 -190.30583191]
[81.27598572 -198.55421448]
[71.60417175 -210.17089844]
[65.78767395 -224.12295532]
[64.34368134 -239.16975403]
[67.40058899 -253.97335815]
[74.68659210 -267.21743774]
[85.55381012 -277.72433472]
[99.03594971 -284.55978394]
[113.93417358 -287.11599731]
[128.92375183 -285.16564941]
[142.67182922 -278.88217163]
[153.95591736 -268.82431030]
[161.77265930 -255.88638306]
[165.42698669 -241.21882629]
[164.59396362 -226.12586975]
[159.34764099 -211.94955444]
[150.15455627 -199.95045471]
[137.83212280 -191.19551086]
[123.47605896 -186.46319580]
[123.78006744 -171.46627808]
[127.07935333 -164.80337524]
[123.93515778 -156.16304016]
[123.93515778 -141.16304016]
[133.24591064 -152.92356873]
[147.13955688 -158.57748413]
[162.01647949 -156.65995789]
[174.02235413 -147.66780090]
[180.04667664 -133.93070984]
[178.52864075 -119.00772858]
[169.86152649 -106.76512146]
[156.29086304 -100.37474060]
[141.33255005 -101.49221802]
[128.86201477 -109.82802582]
[122.11058044 -123.22052765]
[119.09110260 -108.52757263]
[116.07162476 -93.83462524]
[113.65007019 -79.03137970]
[111.83041382 -64.14216614]
[110.01074982 -49.25294495]
[108.19109344 -34.36372375]
[121.31909180 -24.98851395]
[127.98156738 -10.19385147]
[126.28112793 6.03662014]
[116.58628082 19.28035164]
[101.45674896 25.88095093]
[99.93922424 40.80399323]
[98.42169952 55.72703171]
[96.90417480 70.65007019]
[112.89390564 74.73699951]
[123.59136963 86.43416595]
[126.02451324 101.43682098]
[120.09981537 114.72193146]
[108.40771484 122.22811890]
[109.01559448 137.21578979]
[122.97521973 140.85780334]
[135.32467651 148.28520203]
[145.06349182 158.88577271]
[151.40560913 171.79060364]
[153.84295654 185.94540405]
[152.18600464 200.19656372]
[146.57856750 213.38522339]
[137.48533630 224.44145203]
[125.65336609 232.47109985]
[112.05072784 236.82807922]
[112.35472870 251.82499695]
[112.65873718 266.82192993]
[112.96273804 281.81884766]
[113.26674652 296.81576538]
[113.57074738 311.81268311]
[113.87474823 326.80960083]
[114.17875671 341.80651855]
[114.48275757 356.80343628]
[114.78676605 371.80035400]
[129.54014587 374.84759521]
[143.24533081 381.10183716]
[155.21487427 390.24938965]
[164.84840393 401.83139038]
[171.66268921 415.26690674]
[175.31594849 429.88201904]
[175.62490845 444.94363403]
[172.57409668 459.69628906]
[166.31652832 473.39993286]
[157.16607666 485.36727905]
[145.58174133 494.99798584]
[132.14456177 501.80902100]
[117.52856445 505.45874023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[31 122]
[32 121]
[34 43]
[35 42]
[36 41]
[44 116]
[45 115]
[46 114]
[47 113]
[53 108]
[54 107]
[55 106]
[56 105]
[61 104]
[62 103]
[63 102]
[64 91]
[65 90]
[66 88]
[67 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
