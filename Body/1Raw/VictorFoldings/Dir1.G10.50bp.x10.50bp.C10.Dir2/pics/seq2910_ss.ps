%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAACCUCCGGGGGGGGGGGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAxxxxxxxxxxCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUCCCCCCCCCCACCCAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.72266388 399.64004517]
[90.94666290 386.76983643]
[85.45774078 372.77056885]
[82.41382599 358.04498291]
[81.90250397 343.01678467]
[83.93848419 328.11837769]
[88.46318054 313.77841187]
[95.34641266 300.40942383]
[104.39013672 288.39614868]
[115.33415222 278.08419800]
[127.86357117 269.77023315]
[141.61788940 263.69351196]
[137.95918274 249.14656067]
[134.30047607 234.59960938]
[130.64176941 220.05265808]
[126.98307037 205.50569153]
[123.32436371 190.95874023]
[119.66565704 176.41178894]
[116.00695038 161.86483765]
[112.34824371 147.31788635]
[108.68953705 132.77093506]
[105.03083801 118.22397614]
[91.67273712 111.40039825]
[77.74201965 116.96233368]
[63.81130219 122.52427673]
[49.88058472 128.08621216]
[42.25569534 142.20147705]
[26.44103432 144.89888000]
[14.56825733 134.10922241]
[15.74514294 118.10939789]
[29.06888390 109.17310333]
[44.31864929 114.15549469]
[58.24936676 108.59355927]
[72.18008423 103.03162384]
[86.11079407 97.46968079]
[71.28263092 95.20574188]
[62.95289993 82.73114777]
[66.54471588 68.16753387]
[79.71961212 60.99661255]
[93.90000916 65.88704681]
[99.85369873 79.65444946]
[101.69702148 64.76814270]
[103.54035187 49.88183212]
[105.38367462 34.99552536]
[98.06727600 24.32434654]
[99.94829559 11.92946434]
[109.47150421 4.40811539]
[111.62007904 -10.43720722]
[113.76866150 -25.28252983]
[106.53267670 -42.18434143]
[117.85278320 -55.55967712]
[119.69610596 -70.44598389]
[121.38650513 -85.35043335]
[122.92379761 -100.27145386]
[124.46109009 -115.19246674]
[125.99838257 -130.11347961]
[127.53567505 -145.03450012]
[112.94929504 -148.63778687]
[99.00637817 -154.23611450]
[85.97833252 -161.72048950]
[74.11873627 -170.94525146]
[63.65845871 -181.73083496]
[54.80110550 -193.86727905]
[47.71908569 -207.11836243]
[42.55025101 -221.22613525]
[39.39522171 -235.91600037]
[38.31540298 -250.90199280]
[39.33181763 -265.89242554]
[42.42468262 -280.59548950]
[47.53379440 -294.72500610]
[54.55970001 -308.00592041]
[63.36563873 -320.17974854]
[73.78019714 -331.00946045]
[85.60066223 -340.28430176]
[98.59693909 -347.82373047]
[112.51605225 -353.48098755]
[127.08705902 -357.14593506]
[142.02633667 -358.74725342]
[157.04307556 -358.25378418]
[171.84498596 -355.67507935]
[186.14393616 -351.06140137]
[199.66159058 -344.50250244]
[212.13482666 -336.12606812]
[223.32086182 -326.09518433]
[233.00193787 -314.60507202]
[240.98960876 -301.87936401]
[247.12841797 -288.16583252]
[251.29884338 -273.73135376]
[253.41970825 -258.85696411]
[253.44975281 -243.83213806]
[251.38836670 -228.94937134]
[247.27569580 -214.49835205]
[241.19178772 -200.76036072]
[233.25505066 -188.00283813]
[223.62001038 -176.47410583]
[212.47418213 -166.39854431]
[200.03453064 -157.97232056]
[186.54321289 -151.35943604]
[172.26281738 -146.68859863]
[157.47134399 -144.05073547]
[142.45669556 -143.49720764]
[140.91940308 -128.57618713]
[139.38211060 -113.65517426]
[137.84481812 -98.73416138]
[136.30752563 -83.81314087]
[138.76565552 -76.79389954]
[134.58241272 -68.60266113]
[132.73908997 -53.71635437]
[139.94110107 -43.94940186]
[138.48603821 -31.49732780]
[128.61398315 -23.13395119]
[126.46540833 -8.28862762]
[124.31682587 6.55669451]
[131.70796204 22.44429016]
[120.26998138 36.83884811]
[118.42665863 51.72515488]
[116.58333588 66.61146545]
[114.74000549 81.49777222]
[119.57778931 114.56526947]
[123.23649597 129.11222839]
[126.89520264 143.65917969]
[130.55390930 158.20613098]
[134.21261597 172.75308228]
[137.87132263 187.30003357]
[141.53002930 201.84700012]
[145.18873596 216.39395142]
[148.84742737 230.94090271]
[152.50613403 245.48785400]
[156.16484070 260.03482056]
[171.15744019 258.88140869]
[186.12927246 260.27850342]
[200.64961243 264.18591309]
[214.30064392 270.49124146]
[226.68963623 279.01306152]
[237.46009827 289.50613403]
[246.30216980 301.66860962]
[252.96142578 315.15054321]
[257.24627686 329.56402588]
[259.03344727 344.49432373]
[258.27148438 359.51190186]
[254.98236084 374.18463135]
[249.26066589 388.09042358]
[241.27105713 400.82910156]
[231.24337769 412.03417969]
[219.46618652 421.38327026]
[206.27830505 428.60739136]
[192.05917358 433.49865723]
[177.21792603 435.91635132]
[162.18156433 435.79092407]
[147.38270569 433.12597656]
[133.24716187 427.99819946]
[120.18161774 420.55508423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 129]
[13 128]
[14 127]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
[23 35]
[24 34]
[25 33]
[26 32]
[41 118]
[42 117]
[43 116]
[44 115]
[47 113]
[48 112]
[49 111]
[51 108]
[52 107]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
