%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGACCAACGGGGGGGGGGGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAxxxxxxxxxxAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCCCCCCCCCCCUUGACCACC\
) } def
/len { sequence length } bind def

/coor [
[109.92416382 431.13137817]
[96.07822418 425.11535645]
[84.36956024 415.58593750]
[75.66703796 403.25027466]
[70.61643982 389.02374268]
[69.59254456 373.96206665]
[72.67134857 359.18292236]
[79.62436676 345.78298950]
[89.93565369 334.75665283]
[102.84003448 326.92214966]
[117.37992096 322.86083984]
[117.37992096 307.86083984]
[117.37992096 292.86083984]
[117.37992096 277.86083984]
[117.37992096 262.86083984]
[117.37992096 247.86082458]
[117.37992096 232.86082458]
[117.37992096 217.86082458]
[117.37992096 202.86082458]
[117.37992096 187.86082458]
[117.37992096 172.86082458]
[117.37992096 157.86082458]
[117.37992096 142.86082458]
[97.23931885 143.48835754]
[79.96060944 135.65579224]
[68.67064667 121.90308380]
[64.91070557 105.71691895]
[50.49848557 109.87480927]
[41.51586914 123.16736603]
[25.51204300 124.28855896]
[14.76377201 112.37830353]
[17.51621056 96.57312775]
[31.65792465 88.99740601]
[46.34059906 95.46259308]
[60.75281525 91.30470276]
[66.67277527 77.52232361]
[59.76578140 64.20716858]
[52.85877991 50.89200974]
[45.95178223 37.57685471]
[39.04478455 24.26169968]
[32.13778687 10.94654465]
[17.99989128 16.02624702]
[3.31107020 19.17616463]
[-11.66653728 20.34008598]
[-26.66563797 19.49723625]
[-41.41855621 16.66266060]
[-55.66201019 11.88694191]
[-69.14180756 5.25530958]
[-81.61738586 -3.11388612]
[-92.86609650 -13.07128811]
[-102.68720245 -24.43919373]
[-110.90543365 -37.01473236]
[-117.37412262 -50.57347107]
[-121.97783661 -64.87345123]
[-124.63439941 -79.65946198]
[-125.29641724 -94.66763306]
[-123.95207214 -109.63011932]
[-120.62535095 -124.27991486]
[-115.37562561 -138.35556030]
[-108.29658508 -151.60586548]
[-99.51455688 -163.79435730]
[-89.18627167 -174.70353699]
[-77.49605560 -184.13868713]
[-64.65252686 -191.93145752]
[-50.88489151 -197.94276428]
[-36.43885803 -202.06530762]
[-21.57222176 -204.22555542]
[-6.55030394 -204.38491821]
[8.35881615 -202.54058838]
[22.88906479 -198.72544861]
[36.78113556 -193.00759888]
[49.78710556 -185.48907471]
[61.67487335 -176.30406189]
[72.23227692 -165.61647034]
[81.27091980 -153.61703491]
[88.62948608 -140.51989746]
[94.17665863 -126.55879974]
[97.81344604 -111.98288727]
[99.47493744 -97.05228424]
[99.13148499 -82.03344727]
[96.78921509 -67.19440460]
[92.48993683 -52.79997253]
[86.31036377 -39.10704041]
[78.36078644 -26.35997581]
[68.78307343 -14.78626347]
[57.74814606 -4.59244967]
[45.45294189 4.03954554]
[52.35993958 17.35470200]
[59.26693726 30.66985703]
[66.17393494 43.98501205]
[73.08093262 57.30016708]
[79.98793030 70.61532593]
[97.78080750 60.94484329]
[119.87577820 62.22557831]
[139.54272461 76.01071930]
[153.06690979 69.52256012]
[166.59111023 63.03439331]
[180.11529541 56.54622650]
[193.63948059 50.05806351]
[207.16368103 43.56989670]
[215.97012329 29.73593140]
[232.33996582 30.71577835]
[239.43331909 45.50145721]
[229.95315552 58.88272858]
[213.65184021 57.09408569]
[200.12765503 63.58225250]
[186.60345459 70.07041931]
[173.07926941 76.55857849]
[159.55508423 83.04674530]
[146.03088379 89.53491211]
[146.65432739 97.00895691]
[147.90119934 111.95704651]
[148.52464294 119.43108368]
[162.93685913 123.58897400]
[177.34907532 127.74686432]
[191.76129150 131.90475464]
[206.17350769 136.06263733]
[220.85618591 129.59745789]
[234.99789429 137.17317200]
[237.75033569 152.97834778]
[227.00205994 164.88861084]
[210.99822998 163.76741028]
[202.01560974 150.47485352]
[187.60339355 146.31697083]
[173.19117737 142.15907288]
[158.77896118 138.00119019]
[144.36674500 133.84330750]
[132.37991333 142.86082458]
[132.37991333 157.86082458]
[132.37991333 172.86082458]
[132.37991333 187.86082458]
[132.37991333 202.86082458]
[132.37991333 217.86082458]
[132.37991333 232.86082458]
[132.37991333 247.86082458]
[132.37991333 262.86083984]
[132.37991333 277.86083984]
[132.37991333 292.86083984]
[132.37991333 307.86083984]
[132.37991333 322.86083984]
[146.91979980 326.92214966]
[159.82418823 334.75665283]
[170.13546753 345.78298950]
[177.08848572 359.18292236]
[180.16729736 373.96206665]
[179.14340210 389.02374268]
[174.09280396 403.25027466]
[165.39027405 415.58593750]
[153.68161011 425.11535645]
[139.83567810 431.13137817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[27 35]
[28 34]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
