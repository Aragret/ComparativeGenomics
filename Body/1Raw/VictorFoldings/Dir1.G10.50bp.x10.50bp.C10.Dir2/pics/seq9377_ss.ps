%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACUACCAGGGGGGGGGGCAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGAxxxxxxxxxxGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCCCCCCCCCCCUUGACCACCA\
) } def
/len { sequence length } bind def

/coor [
[111.29969788 369.68576050]
[98.74147797 361.33459473]
[88.65525055 350.12216187]
[81.67506409 336.75323486]
[78.23967743 322.06826782]
[78.56505585 306.99029541]
[82.63073730 292.46716309]
[90.18115997 279.41183472]
[100.74168396 268.64492798]
[113.64848328 260.84329224]
[128.09020996 256.49734497]
[127.46623230 241.51033020]
[126.84225464 226.52331543]
[126.21827698 211.53630066]
[125.59429932 196.54928589]
[124.97032166 181.56227112]
[124.34634399 166.57525635]
[123.72236633 151.58824158]
[123.09838867 136.60122681]
[122.47441101 121.61420441]
[110.22241211 127.84413910]
[97.15693665 127.99736023]
[85.98892212 122.63596344]
[78.77935791 113.40761566]
[64.28376007 117.26477814]
[61.47079468 132.26644897]
[52.42050552 144.55688477]
[38.92983246 151.69583130]
[23.67736244 152.26583862]
[9.69148254 146.15371704]
[-0.25090069 134.57305908]
[-4.17571926 119.82318878]
[-1.30369771 104.83271790]
[7.79492188 92.57801056]
[21.31360245 85.49224854]
[36.56819916 84.98231506]
[50.52989960 91.14945221]
[60.42660141 102.76918030]
[74.92219543 98.91201782]
[77.73249054 85.97281647]
[87.04533386 75.70468903]
[100.83131409 71.26268768]
[115.60385132 74.41798401]
[127.29957581 84.93327332]
[127.29957581 69.93327332]
[127.29957581 54.93327332]
[127.29957581 39.93327332]
[127.29957581 24.93327141]
[114.31195068 19.27354240]
[104.50090027 9.11349678]
[99.33027649 -3.98321581]
[99.55329895 -18.01850128]
[105.10300446 -30.86463928]
[115.10742950 -40.58684921]
[128.02642822 -45.73467255]
[128.33848572 -60.73142624]
[128.65054321 -75.72817993]
[128.96260071 -90.72492981]
[129.27465820 -105.72168732]
[114.53349304 -108.71128082]
[100.56311035 -114.28516388]
[87.81260681 -122.26416779]
[76.69185638 -132.39178467]
[67.55834198 -144.34246826]
[60.70567703 -157.73204041]
[56.35414124 -172.13009644]
[54.64361954 -187.07379150]
[55.62909698 -202.08273315]
[59.27889633 -216.67446899]
[65.47568512 -230.37992859]
[74.02027130 -242.75852966]
[84.63797760 -253.41236877]
[96.98749542 -261.99893188]
[110.67182159 -268.24224854]
[125.25107574 -271.94158936]
[140.25659180 -272.97802734]
[155.20600891 -271.31826782]
[169.61875916 -267.01565552]
[183.03152466 -260.20852661]
[195.01316833 -251.11564636]
[205.17849731 -240.02935791]
[213.20075989 -227.30603027]
[218.82205200 -213.35466003]
[221.86170959 -198.62373352]
[222.22198486 -183.58677673]
[219.89129639 -168.72717285]
[214.94459534 -154.52259827]
[207.54087830 -141.42967224]
[197.91813660 -129.86927795]
[186.38572693 -120.21303558]
[173.31434631 -112.77133942]
[159.12419128 -107.78342438]
[144.27140808 -105.40962982]
[143.95935059 -90.41287994]
[143.64730835 -75.41612244]
[143.33525085 -60.41936874]
[143.02319336 -45.42261505]
[157.38595581 -38.48638535]
[167.33428955 -25.94500732]
[170.84532166 -10.26731014]
[167.16978455 5.43226910]
[156.99124146 18.01237106]
[142.29957581 24.93327141]
[142.29957581 39.93327332]
[142.29957581 54.93327332]
[142.29957581 69.93327332]
[142.29957581 84.93327332]
[151.80793762 96.53461456]
[166.51589966 99.48009491]
[181.22386169 102.42557526]
[195.93182373 105.37106323]
[210.63978577 108.31654358]
[225.34774780 111.26202393]
[236.00036621 100.10294342]
[251.00033569 96.49679565]
[265.56121826 101.59427643]
[275.03668213 113.76879883]
[276.40313721 129.13552856]
[269.22457886 142.79098511]
[255.79162598 150.37777710]
[240.39070129 149.47497559]
[227.93617249 140.37065125]
[222.40225220 125.96998596]
[207.69429016 123.02450562]
[192.98632812 120.07902527]
[178.27836609 117.13353729]
[163.57041931 114.18805695]
[148.86245728 111.24257660]
[137.46142578 120.99022675]
[138.08540344 135.97724915]
[138.70938110 150.96426392]
[139.33335876 165.95127869]
[139.95733643 180.93829346]
[140.58131409 195.92530823]
[141.20529175 210.91232300]
[141.82926941 225.89933777]
[142.45324707 240.88635254]
[143.07722473 255.87336731]
[157.83023071 259.00381470]
[171.34086609 265.70556641]
[182.75984192 275.55737305]
[191.36935425 287.93988037]
[196.62820435 302.07479858]
[198.20581055 317.07351685]
[196.00300598 331.99325562]
[190.15826416 345.89611816]
[181.03898621 357.90817261]
[169.21841431 367.27435303]
[155.43960571 373.40582275]
[140.56869507 375.91723633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 39]
[25 38]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[108 128]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
