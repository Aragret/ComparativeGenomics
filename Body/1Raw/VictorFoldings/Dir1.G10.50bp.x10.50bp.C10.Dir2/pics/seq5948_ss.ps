%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUAAUCUUGGGGGGGGGGAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAxxxxxxxxxxUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCCCCCCCCCCCUAAAAAUCUU\
) } def
/len { sequence length } bind def

/coor [
[100.95626068 604.08428955]
[88.62314606 595.43316650]
[78.52469635 584.25421143]
[71.16744232 571.10815430]
[66.92042542 556.65441895]
[65.99666595 541.61798096]
[68.44250488 526.75305176]
[74.13526154 512.80529785]
[82.78938293 500.47427368]
[93.97078705 490.37854004]
[107.11861420 483.02447510]
[121.57337952 478.78097534]
[120.64997101 463.80941772]
[119.72655487 448.83786011]
[118.80313873 433.86630249]
[117.87973022 418.89477539]
[116.95631409 403.92321777]
[116.03289795 388.95166016]
[115.10948944 373.98010254]
[114.18607330 359.00857544]
[113.26265717 344.03701782]
[112.33924866 329.06546021]
[100.43211365 322.95217896]
[93.05451965 311.65447998]
[92.23191833 298.07769775]
[98.28730774 285.77731323]
[109.72836304 278.02777100]
[109.11253357 263.04043579]
[108.49671173 248.05307007]
[107.88088226 233.06571960]
[107.11122894 218.08547974]
[106.18781281 203.11392212]
[105.26439667 188.14237976]
[104.34098816 173.17082214]
[93.33940887 183.36717224]
[78.34421539 182.98762512]
[67.87255096 172.24777222]
[67.87226105 157.24777222]
[78.34349823 146.50750732]
[93.33867645 146.12738037]
[104.34098816 156.32400513]
[105.26439667 141.35244751]
[102.52016449 134.44004822]
[106.36358643 126.08396912]
[107.59419250 111.13453674]
[100.82883453 118.19445038]
[88.84648132 120.05619049]
[75.84156799 113.52034760]
[67.60968018 98.61209869]
[56.84100342 88.17008972]
[41.54749680 84.11802673]
[37.79663467 69.70343781]
[27.02795410 59.26142883]
[11.49229622 61.04393387]
[-1.52591193 52.38020325]
[-5.87987041 37.36098099]
[0.48622715 23.07788277]
[14.56650448 16.27495575]
[29.71268463 20.16433144]
[38.77320480 32.90956497]
[37.46996307 48.49274826]
[48.23864365 58.93475723]
[62.76190186 62.23994446]
[67.28301239 77.40141296]
[78.05168915 87.84342194]
[91.74231720 81.71424866]
[91.12648773 66.72689056]
[90.51066589 51.73954010]
[76.22783661 46.53673553]
[65.02662659 36.26048279]
[58.61514282 22.47783661]
[57.97108841 7.29055214]
[63.19267654 -6.98542213]
[73.48365784 -18.17310333]
[87.27472687 -24.56645012]
[102.46284485 -25.19052505]
[116.73193359 -19.95016098]
[127.90606689 -9.64447403]
[134.28126526 4.15499163]
[134.88536072 19.34391975]
[129.62623596 33.60610580]
[119.30585480 44.76667404]
[105.49801636 51.12371445]
[106.11384583 66.11106873]
[106.72966766 81.09841919]
[120.35665131 87.36782837]
[132.13877869 78.08444214]
[143.92092896 68.80105591]
[148.76359558 60.98157501]
[156.04161072 59.45100021]
[168.01187134 50.41147995]
[179.98213196 41.37195969]
[191.66833496 31.96810341]
[203.05941772 22.20882988]
[214.45048523 12.44955444]
[219.38752747 -3.18878484]
[235.45553589 -6.46768236]
[246.12512207 5.98591089]
[240.42033386 21.36080551]
[224.20976257 23.84062767]
[212.81867981 33.59990311]
[201.42761230 43.35917664]
[200.80934143 46.88975143]
[198.41259766 50.28464127]
[194.32588196 52.69384766]
[189.02165222 53.34222031]
[177.05139160 62.38173676]
[165.08113098 71.42125702]
[153.20431519 80.58319092]
[141.42216492 89.86657715]
[129.64002991 99.14996338]
[122.54363251 112.36515045]
[121.31301880 127.31458282]
[120.23594666 142.27586365]
[119.31253815 157.24740601]
[119.31253815 172.24740601]
[120.23594666 187.21896362]
[121.15936279 202.19050598]
[122.08277893 217.16206360]
[125.75381470 225.59529114]
[122.86824036 232.44989014]
[123.48406219 247.43724060]
[124.09989166 262.42459106]
[124.71571350 277.41195679]
[138.90466309 286.56475830]
[144.80523682 302.20803833]
[140.28613281 318.13253784]
[127.31079865 328.14205933]
[128.23420715 343.11358643]
[129.15762329 358.08514404]
[130.08103943 373.05670166]
[131.00445557 388.02825928]
[131.92785645 402.99978638]
[132.85127258 417.97134399]
[133.77468872 432.94290161]
[134.69810486 447.91445923]
[135.62152100 462.88598633]
[136.54493713 477.85754395]
[151.41162109 480.29257202]
[165.36352539 485.97518921]
[177.70082092 494.62036133]
[187.80468750 505.79440308]
[195.16830444 518.93688965]
[199.42233276 533.38854980]
[200.35337830 548.42456055]
[197.91474915 563.29064941]
[192.22875977 577.24114990]
[183.58061218 589.57641602]
[172.40409851 599.67755127]
[159.25982666 607.03796387]
[144.80712891 611.28851318]
[129.77091980 612.21588135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[27 124]
[28 123]
[29 122]
[30 121]
[31 119]
[32 118]
[33 117]
[34 116]
[41 115]
[42 114]
[44 113]
[45 112]
[49 65]
[50 64]
[52 62]
[53 61]
[66 85]
[67 84]
[68 83]
[86 111]
[87 110]
[88 109]
[90 108]
[91 107]
[92 106]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
