%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUACAUAAAGGGGGGGGGGAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCxxxxxxxxxxACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACACCCCCCCCCCUAGUACAUAAA\
) } def
/len { sequence length } bind def

/coor [
[59.28310394 291.76303101]
[53.17969894 278.06091309]
[48.66173553 263.75747681]
[45.78694534 249.03553772]
[44.59206009 234.08320618]
[45.09235382 219.09155273]
[47.28142929 204.25215149]
[51.13131714 189.75462341]
[56.59281921 175.78422546]
[63.59614563 162.51948547]
[72.05360413 150.12754822]
[82.52857971 139.39093018]
[68.18851471 143.79122925]
[53.84845734 148.19152832]
[39.50839615 152.59182739]
[25.16833305 156.99214172]
[10.82827282 161.39244080]
[-3.51178885 165.79273987]
[-17.85185051 170.19303894]
[-32.19190979 174.59333801]
[-46.53197098 178.99363708]
[-46.53833008 194.10957336]
[-51.00149155 208.55157471]
[-59.52460098 221.03549194]
[-71.34978485 230.45123291]
[-85.42556000 235.96159363]
[-100.50031281 237.07656860]
[-115.23361206 233.69702148]
[-128.31538391 226.12347412]
[-138.58239746 215.02934265]
[-145.12171936 201.40110779]
[-147.35188293 186.45059204]
[-145.07458496 171.50718689]
[-138.49230957 157.89965820]
[-128.19036865 146.83795166]
[-115.08477783 139.30569458]
[-100.34089661 135.97262573]
[-85.26972961 137.13513184]
[-71.21140289 142.68984985]
[-59.41596985 152.14285278]
[-50.93227386 164.65357971]
[-36.59221268 160.25328064]
[-22.25214958 155.85298157]
[-7.91208887 151.45266724]
[6.42797232 147.05236816]
[20.76803398 142.65206909]
[35.10809326 138.25177002]
[49.44815445 133.85147095]
[63.78821564 129.45117188]
[78.12828064 125.05087280]
[79.95763397 117.77739716]
[85.44568634 95.95696259]
[74.89367676 85.29605865]
[64.34165955 74.63514709]
[53.78964615 63.97423935]
[37.83716965 60.17284775]
[33.41297913 44.38175583]
[45.06829834 32.84548569]
[60.81313705 37.43156052]
[64.45055389 53.42222214]
[75.00257111 64.08312988]
[85.55458069 74.74404144]
[96.10659790 85.40495300]
[91.95744324 70.99021912]
[87.80829620 56.57548141]
[83.65914154 42.16075134]
[79.50998688 27.74601746]
[69.59433746 16.49080467]
[62.30255127 3.38241339]
[57.96905899 -10.97797775]
[56.79259872 -25.93177032]
[58.82712173 -40.79315567]
[63.97932816 -54.88055420]
[72.01291656 -67.54788971]
[82.55946350 -78.21421051]
[95.13526917 -86.39033508]
[109.16358948 -91.70130157]
[124.00104523 -93.90351868]
[138.96717834 -92.89600372]
[153.37557983 -88.72495270]
[166.56549072 -81.58166504]
[177.93194580 -71.79373932]
[186.95370483 -59.81008530]
[193.21697998 -46.18028641]
[196.43452454 -31.52943611]
[196.45878601 -16.52945518]
[193.28863525 -1.86827517]
[187.06948853 11.78171253]
[178.08656311 23.79449081]
[166.75181580 33.61912918]
[153.58100891 40.80673599]
[144.75193787 52.93305969]
[135.92288208 65.05938721]
[127.09383392 77.18570709]
[118.26477051 89.31203461]
[131.82667542 82.90306091]
[145.38856506 76.49407959]
[158.95045471 70.08510590]
[159.52717590 54.79046631]
[167.15565491 41.52152634]
[180.08294678 33.32738495]
[195.33843994 32.09100342]
[209.41653442 38.09648895]
[219.08218384 49.96382523]
[222.11430359 64.96598816]
[217.81613159 79.65558624]
[207.17535400 90.65705872]
[192.63714600 95.44235229]
[177.54228210 92.91183472]
[165.35943604 83.64700317]
[151.79754639 90.05597687]
[138.23564148 96.46495056]
[124.67375183 102.87393188]
[139.64805603 103.75144196]
[154.25045776 100.32067871]
[169.14674377 98.55987549]
[184.14659119 98.49153900]
[199.05830383 100.11654663]
[213.69134521 103.41413116]
[227.85873413 108.34215546]
[241.37940979 114.83763885]
[254.08059692 122.81758881]
[265.80001831 132.18002319]
[276.38790894 142.80531311]
[285.70895386 154.55767822]
[293.64404297 167.28695679]
[300.09179688 180.83044434]
[304.96981812 195.01512146]
[308.21578979 209.65969849]
[309.78817749 224.57705688]
[309.66693115 239.57656860]
[307.85360718 254.46656799]
[304.37136841 269.05676270]
[299.26467896 283.16073608]
[292.59884644 296.59823608]
[284.45901489 309.19757080]
[274.94921875 320.79772949]
[264.19097900 331.25048828]
[252.32174683 340.42227173]
[239.49320984 348.19586182]
[225.86930847 354.47192383]
[211.62411499 359.17031860]
[196.93968201 362.23092651]
[182.00364685 363.61468506]
[167.00686646 363.30389404]
[152.14097595 361.30252075]
[137.59596252 357.63616943]
[123.55765533 352.35165405]
[110.20545959 345.51651001]
[97.71000671 337.21810913]
[86.23095703 327.56246948]
[75.91499329 316.67297363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[52 63]
[53 62]
[54 61]
[55 60]
[95 113]
[96 112]
[97 111]
[98 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
