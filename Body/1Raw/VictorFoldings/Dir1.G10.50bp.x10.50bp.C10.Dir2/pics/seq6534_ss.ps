%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUUAGCGGGGGGGGGGAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUxxxxxxxxxxGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCCCCCCCCCCCUCCCUAAGC\
) } def
/len { sequence length } bind def

/coor [
[82.59362030 387.00695801]
[68.74768066 380.99093628]
[57.03902054 371.46151733]
[48.33649445 359.12585449]
[43.28589249 344.89932251]
[42.26200104 329.83764648]
[45.34080124 315.05850220]
[52.29382324 301.65856934]
[62.60510635 290.63223267]
[75.50949097 282.79772949]
[90.04937744 278.73641968]
[90.04937744 263.73641968]
[90.04937744 248.73640442]
[90.04937744 233.73640442]
[90.04937744 218.73640442]
[90.04937744 203.73640442]
[90.04937744 188.73640442]
[90.04937744 173.73640442]
[90.04937744 158.73640442]
[90.04937744 143.73640442]
[90.04937744 128.73640442]
[77.52341461 120.48411560]
[63.74103165 126.40408325]
[49.95864868 132.32405090]
[36.17626953 138.24400330]
[28.91857338 152.55154419]
[13.17887402 155.65660095]
[1.03132200 145.17726135]
[1.79447949 129.15237427]
[14.88291740 119.87485504]
[30.25630569 124.46162415]
[44.03868866 118.54166412]
[57.82106781 112.62170410]
[71.60344696 106.70173645]
[73.39084625 94.42356873]
[79.86331177 84.85273743]
[89.12816620 79.49567413]
[98.95670319 78.80684662]
[103.56226349 64.53138733]
[108.16783142 50.25592422]
[112.77339172 35.98046494]
[98.87055969 30.33082962]
[85.42293549 23.66985893]
[72.50395966 16.03392982]
[60.18420410 7.46474981]
[48.53095245 -1.99087870]
[37.60784912 -12.28131199]
[27.47455215 -23.35034752]
[18.18640900 -35.13752747]
[9.79414845 -47.57847595]
[2.34360623 -60.60524368]
[-4.12452459 -74.14667511]
[-9.57491684 -88.12882233]
[-13.97780323 -102.47531891]
[-17.30913544 -117.10779572]
[-19.55071831 -131.94635010]
[-20.69030952 -146.90992737]
[-20.72168350 -161.91679382]
[-19.64467239 -176.88499451]
[-17.46515656 -191.73278809]
[-14.19503880 -206.37907410]
[-9.85218048 -220.74385071]
[-4.46030140 -234.74867249]
[1.95115006 -248.31703186]
[9.34715557 -261.37484741]
[17.68732262 -273.85076904]
[26.92609596 -285.67669678]
[37.01301956 -296.78799438]
[47.89299774 -307.12402344]
[59.50661087 -316.62829590]
[71.79042816 -325.24890137]
[84.67736053 -332.93878174]
[98.09701538 -339.65594482]
[111.97610474 -345.36364746]
[126.23882294 -350.03076172]
[140.80728149 -353.63180542]
[155.60189819 -356.14709473]
[170.54187012 -357.56286621]
[185.54559326 -357.87142944]
[200.53114319 -357.07107544]
[215.41665649 -355.16616821]
[230.12084961 -352.16711426]
[244.56338501 -348.09033203]
[258.66540527 -342.95803833]
[272.34988403 -336.79830933]
[285.54205322 -329.64474487]
[298.16992188 -321.53643799]
[310.16445923 -312.51766968]
[321.46017456 -302.63769531]
[331.99539185 -291.95050049]
[341.71255493 -280.51440430]
[350.55859375 -268.39190674]
[358.48519897 -255.64921570]
[365.44906616 -242.35592651]
[371.41217041 -228.58462524]
[376.34191895 -214.41053772]
[380.21142578 -199.91108704]
[382.99954224 -185.16545105]
[384.69100952 -170.25418091]
[385.27664185 -155.25869751]
[384.75323486 -140.26092529]
[383.12359619 -125.34276581]
[380.39666748 -110.58570099]
[376.58731079 -96.07032013]
[371.71640015 -81.87591553]
[365.81045532 -68.08000183]
[358.90179443 -54.75793839]
[351.02810669 -41.98247910]
[342.23242188 -29.82340050]
[332.56277466 -18.34711456]
[322.07196045 -7.61629963]
[310.81732178 2.31043434]
[298.86029053 11.37887096]
[286.26617432 19.53948021]
[273.10375977 26.74769211]
[259.44494629 32.96413803]
[245.36434937 38.15486526]
[230.93884277 42.29151917]
[216.24722290 45.35151672]
[201.36973572 47.31813431]
[186.38763428 48.18063736]
[171.38275146 47.93431091]
[156.43704224 46.58050537]
[141.63211060 44.12660980]
[127.04885864 40.58602905]
[122.44329071 54.86149216]
[117.83772278 69.13694763]
[113.23216248 83.41241455]
[124.41624451 106.22679138]
[105.04937744 128.73640442]
[105.04937744 143.73640442]
[105.04937744 158.73640442]
[105.04937744 173.73640442]
[105.04937744 188.73640442]
[105.04937744 203.73640442]
[105.04937744 218.73640442]
[105.04937744 233.73640442]
[105.04937744 248.73640442]
[105.04937744 263.73641968]
[105.04937744 278.73641968]
[119.58926392 282.79772949]
[132.49363708 290.63223267]
[142.80493164 301.65856934]
[149.75794983 315.05850220]
[152.83674622 329.83764648]
[151.81285095 344.89932251]
[146.76225281 359.12585449]
[138.05972290 371.46151733]
[126.35106659 380.99093628]
[112.50512695 387.00695801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 34]
[23 33]
[24 32]
[25 31]
[38 128]
[39 127]
[40 126]
[41 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
