%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAAUCCAGGGGGGGGGGCCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCxxxxxxxxxxUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUCCCCCCCCCCGUAAAAUCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 363.10662842]
[71.19830322 357.09060669]
[59.48964310 347.56118774]
[50.78712082 335.22552490]
[45.73651886 320.99899292]
[44.71262741 305.93731689]
[47.79142761 291.15817261]
[54.74444962 277.75823975]
[65.05573273 266.73190308]
[77.96011353 258.89739990]
[92.50000000 254.83607483]
[92.50000000 239.83607483]
[92.50000000 224.83607483]
[92.50000000 209.83607483]
[92.50000000 194.83607483]
[92.50000000 179.83607483]
[92.50000000 164.83607483]
[92.50000000 149.83607483]
[92.50000000 134.83607483]
[92.50000000 119.83608246]
[85.22691345 116.11509705]
[79.70816040 109.76017761]
[76.88094330 101.57060242]
[77.32761383 92.67079926]
[81.16698456 84.35625458]
[88.01114655 77.90496063]
[96.99793243 74.38196564]
[88.74564362 61.85600281]
[80.49335480 49.33003998]
[72.24106598 36.80408096]
[63.98877716 24.27811813]
[52.38743591 14.76975918]
[38.48487854 9.13780212]
[24.58232307 3.50584579]
[10.67976761 -2.12611079]
[-3.22278857 -7.75806761]
[-12.44616508 4.19316244]
[-24.55260658 13.21184731]
[-38.64373398 18.62873840]
[-53.67388916 20.04187012]
[-68.52774048 17.34637642]
[-82.10303497 10.74228001]
[-93.39238739 0.71964985]
[-101.55805206 -11.97776794]
[-105.99409485 -26.40774155]
[-106.37132263 -41.49946976]
[-102.66174316 -56.13304901]
[-95.14063263 -69.22256470]
[-84.36610413 -79.79669189]
[-71.13771057 -87.07076263]
[-56.43707657 -90.50498962]
[-41.35508728 -89.84453583]
[-27.01092911 -85.13839722]
[-14.46903419 -76.73581696]
[-4.66009188 -65.26030731]
[1.68800759 -51.56343842]
[4.10419321 -36.66160583]
[2.40916800 -21.66062355]
[16.31172371 -16.02866745]
[30.21427917 -10.39671040]
[44.11683655 -4.76475334]
[58.01939392 0.86720318]
[49.23213196 -11.28944206]
[43.01942825 -24.94236565]
[39.62612152 -39.55350876]
[39.18594742 -54.54704666]
[41.71624374 -69.33209229]
[47.11730194 -83.32597351]
[55.17626190 -95.97718048]
[65.57552338 -106.78714752]
[77.90525055 -115.32984924]
[91.67953491 -121.26862335]
[106.35553741 -124.36942291]
[121.35488129 -124.51004028]
[136.08644104 -121.68494415]
[149.96965027 -116.00546265]
[162.45738220 -107.69542694]
[173.05747986 -97.08233643]
[181.35221863 -84.58444214]
[187.01469421 -70.69428253]
[189.82174683 -55.95927429]
[189.66275024 -40.96011734]
[186.54397583 -26.28792381]
[180.58834839 -12.52092171]
[172.03054810 -0.20166448]
[161.20785522 10.18434906]
[148.54676819 18.22780800]
[134.54629517 23.61172104]
[119.75816345 26.12390900]
[104.76516724 25.66537094]
[90.15819550 22.25417328]
[76.51473999 16.02582932]
[84.76702881 28.55179024]
[93.01931763 41.07775116]
[101.27160645 53.60371399]
[109.52389526 66.12967682]
[122.76647949 73.17481232]
[137.76567078 73.01877594]
[152.76486206 72.86273956]
[155.84323120 58.12036133]
[162.01921082 44.38459396]
[171.00396729 32.29788971]
[182.37722778 22.42556190]
[195.60707092 15.22935677]
[210.07470703 11.04585457]
[225.10345459 10.07072449]
[239.99038696 12.34957695]
[254.03923035 17.77582550]
[266.59286499 26.09567261]
[277.06417847 36.91998672]
[284.96337891 49.74249268]
[289.92102051 63.96345901]
[291.70523071 78.91774750]
[290.23251343 93.90591431]
[285.57180786 108.22694397]
[277.94107056 121.21100616]
[267.69720459 132.25082397]
[255.31935120 140.83003235]
[241.38644409 146.54737854]
[226.55014038 149.13543701]
[211.50436401 148.47317505]
[196.95281982 144.59155273]
[183.57614136 137.67213440]
[171.99995422 128.03855896]
[162.76570129 116.14138031]
[156.30529785 102.53707123]
[152.92089844 87.86192322]
[137.92170715 88.01795959]
[122.92251587 88.17399597]
[121.93920898 108.42138672]
[107.50000000 119.83608246]
[107.50000000 134.83607483]
[107.50000000 149.83607483]
[107.50000000 164.83607483]
[107.50000000 179.83607483]
[107.50000000 194.83607483]
[107.50000000 209.83607483]
[107.50000000 224.83607483]
[107.50000000 239.83607483]
[107.50000000 254.83607483]
[122.03988647 258.89739990]
[134.94427490 266.73190308]
[145.25555420 277.75823975]
[152.20857239 291.15817261]
[155.28736877 305.93731689]
[154.26348877 320.99899292]
[149.21287537 335.22552490]
[140.51036072 347.56118774]
[128.80169678 357.09060669]
[114.95575714 363.10662842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[97 129]
[98 128]
[99 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
