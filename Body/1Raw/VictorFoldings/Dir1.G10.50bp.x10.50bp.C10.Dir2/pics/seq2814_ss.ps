%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGAAGACGGGGGGGGGGCCUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGxxxxxxxxxxCAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACCCCCCCCCCCACGAGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[87.04322052 559.42596436]
[73.19728088 553.40997314]
[61.48862076 543.88055420]
[52.78609467 531.54486084]
[47.73549271 517.31835938]
[46.71160126 502.25665283]
[49.79040146 487.47750854]
[56.74342346 474.07757568]
[67.05471039 463.05123901]
[79.95909119 455.21673584]
[94.49897766 451.15542603]
[94.49897766 436.15542603]
[94.49897766 421.15542603]
[94.49897766 406.15542603]
[94.49897766 391.15542603]
[94.49897766 376.15542603]
[94.49897766 361.15542603]
[94.49897766 346.15542603]
[94.49897766 331.15542603]
[94.49897766 316.15542603]
[80.67362213 310.51727295]
[70.03134918 299.98693848]
[64.21577454 286.14700317]
[64.14181519 271.09436035]
[69.85187531 257.12265015]
[80.50466156 246.37271118]
[94.49897766 240.50459290]
[94.49897766 225.50459290]
[94.49897766 210.50459290]
[84.90786743 195.84135437]
[94.16212463 179.95619202]
[93.85006714 164.95942688]
[93.53800964 149.96267700]
[85.53761292 137.39912415]
[92.98614502 123.44097137]
[92.67408752 108.44422150]
[92.20604706 93.45152283]
[91.58206940 78.46450806]
[83.27739716 64.99813843]
[90.47856140 51.96002579]
[89.85458374 36.97301102]
[89.23061371 21.98599434]
[88.60663605 6.99897814]
[87.98265839 -7.98803806]
[87.35868073 -22.97505379]
[73.13237000 -28.25595093]
[62.04162216 -38.55344391]
[55.75530243 -52.27553558]
[55.20303345 -67.31822968]
[60.43785095 -81.38810730]
[70.63286591 -92.35200500]
[84.21171570 -98.56039429]
[83.58773804 -113.54740906]
[70.14260101 -116.78527069]
[58.01470566 -123.40460968]
[48.03673172 -132.94335938]
[40.89176941 -144.73930359]
[37.06655884 -157.97598267]
[36.81834412 -171.73924255]
[40.15756226 -185.08039856]
[46.84761429 -197.08157349]
[56.42158508 -206.91886902]
[68.21485138 -213.91894531]
[81.41120911 -217.60505676]
[81.41120911 -232.60505676]
[81.41120911 -247.60505676]
[81.41120911 -262.60504150]
[67.15853882 -267.76617432]
[55.53260422 -277.49313354]
[47.93730545 -290.61132812]
[45.28980255 -305.53668213]
[47.90979385 -320.46691895]
[55.48090744 -333.59909058]
[67.08889008 -343.34744263]
[81.33202362 -348.53482056]
[96.49038696 -348.53482056]
[110.73352051 -343.34744263]
[122.34150696 -333.59909058]
[129.91261292 -320.46691895]
[132.53260803 -305.53668213]
[129.88510132 -290.61132812]
[122.28980255 -277.49313354]
[110.66387939 -267.76617432]
[96.41120911 -262.60504150]
[96.41120911 -247.60505676]
[96.41120911 -232.60505676]
[96.41120911 -217.60505676]
[111.94776917 -212.85139465]
[125.28514862 -203.54014587]
[135.12449646 -190.56414795]
[140.50331116 -175.17382812]
[140.88966370 -158.85667419]
[136.23469543 -143.19346619]
[126.97853088 -129.70513916]
[114.00862885 -119.70512390]
[98.57475281 -114.17138672]
[99.19873047 -99.18437195]
[113.24665833 -94.12621307]
[124.31777191 -84.04772186]
[130.70402527 -70.46167755]
[131.40409851 -55.42513657]
[126.28017426 -41.22798538]
[116.08379364 -30.04421425]
[102.34569550 -23.59903145]
[102.96967316 -8.61201572]
[103.59365082 6.37500048]
[104.21762848 21.36201668]
[104.84160614 36.34903336]
[105.46558380 51.33604813]
[113.72561646 63.73044586]
[106.56908417 77.84053040]
[107.19306183 92.82754517]
[110.66732025 100.16332245]
[107.67083740 108.13216400]
[107.98289490 123.12892151]
[116.00561523 136.76513672]
[108.53476715 149.65061951]
[108.84682465 164.64736938]
[109.15888214 179.64413452]
[117.93196106 189.15658569]
[117.84753418 201.69500732]
[109.49897766 210.50459290]
[109.49897766 225.50459290]
[109.49897766 240.50459290]
[123.49329376 246.37271118]
[134.14607239 257.12265015]
[139.85614014 271.09436035]
[139.78218079 286.14700317]
[133.96659851 299.98693848]
[123.32433319 310.51727295]
[109.49897766 316.15542603]
[109.49897766 331.15542603]
[109.49897766 346.15542603]
[109.49897766 361.15542603]
[109.49897766 376.15542603]
[109.49897766 391.15542603]
[109.49897766 406.15542603]
[109.49897766 421.15542603]
[109.49897766 436.15542603]
[109.49897766 451.15542603]
[124.03886414 455.21673584]
[136.94323730 463.05123901]
[147.25453186 474.07757568]
[154.20755005 487.47750854]
[157.28634644 502.25665283]
[156.26245117 517.31835938]
[151.21185303 531.54486084]
[142.50933838 543.88055420]
[130.80067444 553.40997314]
[116.95472717 559.42596436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 124]
[28 123]
[29 122]
[31 119]
[32 118]
[33 117]
[35 115]
[36 114]
[37 112]
[38 111]
[40 109]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
[52 97]
[53 96]
[64 87]
[65 86]
[66 85]
[67 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
