%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAGCCUAGCGGGGGGGGGGCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCxxxxxxxxxxUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUCCCCCCCCCCUCUACCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[47.63691711 314.14981079]
[35.30380630 305.49868774]
[25.20535660 294.31973267]
[17.84810257 281.17367554]
[13.60108280 266.71994019]
[12.67732430 251.68350220]
[15.12316322 236.81858826]
[20.81591606 222.87081909]
[29.47003746 210.53981018]
[40.65143967 200.44406128]
[53.79927063 193.08999634]
[68.25403595 188.84648132]
[67.33062744 173.87493896]
[66.40721130 158.90338135]
[65.48379517 143.93183899]
[64.56038666 128.96028137]
[63.63697052 113.98873138]
[62.71355820 99.01718140]
[53.30970001 87.33097076]
[38.88231659 83.22602844]
[24.45492935 79.12108612]
[10.02754593 75.01613617]
[-4.39983892 70.91119385]
[-18.82722282 66.80625153]
[-8.68011761 77.85324860]
[-2.36516833 91.45918274]
[-0.47832599 106.34004211]
[-3.19765449 121.09148407]
[-10.26652718 134.32141113]
[-21.01784515 144.78129578]
[-34.43699265 151.48402405]
[-49.25758362 153.79704285]
[-64.08097839 151.50207520]
[-77.50827789 144.81570435]
[-88.27233124 134.36891174]
[-95.35730743 121.14760590]
[-98.09460449 106.39948273]
[-96.22588348 91.51634216]
[-89.92751312 77.90272522]
[-79.79386139 66.84337616]
[-66.78127289 59.38197327]
[-52.11775970 56.22266006]
[-37.18924713 57.66304779]
[-49.15950775 48.62352753]
[-64.60936737 50.60836411]
[-76.62014008 41.27048492]
[-78.41716003 26.52917099]
[-90.38742065 17.48965263]
[-102.35768127 8.45013237]
[-114.32794189 -0.58938712]
[-129.52679443 3.08876014]
[-143.51100159 -3.90952039]
[-149.67764282 -18.27985573]
[-145.11502075 -33.23701096]
[-131.97747803 -41.71867752]
[-116.46813202 -39.72006989]
[-105.91004944 -28.18486786]
[-105.28842163 -12.55964565]
[-93.31816101 -3.52012587]
[-81.34790039 5.51939344]
[-69.37764740 14.55891323]
[-54.70729446 12.25318527]
[-42.43897629 21.25002289]
[-40.11998749 36.65327072]
[-28.14972878 45.69279099]
[-14.72227859 52.37886429]
[-0.29489428 56.48381042]
[14.13249016 60.58875656]
[28.55987549 64.69370270]
[42.98725891 68.79864502]
[57.41464615 72.90358734]
[43.37412643 67.62496185]
[32.84291077 56.94351196]
[27.76368141 42.82963562]
[29.07341194 27.88692665]
[36.53049088 14.87185955]
[48.75931549 6.18532562]
[63.50403214 3.42972827]
[78.04468536 7.11339283]
[89.69896698 16.55679321]
[96.31700134 30.01790619]
[96.67797089 45.01356125]
[90.71527863 58.77751541]
[79.53153992 68.76922607]
[91.50180054 59.72970581]
[103.47205353 50.69018555]
[115.44231415 41.65066528]
[127.41257477 32.61114883]
[139.38282776 23.57162666]
[151.35308838 14.53210831]
[163.32334900 5.49258852]
[175.29360962 -3.54693103]
[171.81152344 -18.37241364]
[174.66691589 -33.33124542]
[183.36508179 -45.83171082]
[196.39901733 -53.70803833]
[211.51049805 -55.59560013]
[226.08139038 -51.16736603]
[237.58717346 -41.19055557]
[244.03442383 -27.39371109]
[244.30609131 -12.16721916]
[238.35513306 1.85083926]
[227.21258545 12.23175049]
[212.80894470 17.17695808]
[197.63973999 15.82967567]
[184.33312988 8.42332745]
[172.36286926 17.46284676]
[160.39260864 26.50236702]
[148.42234802 35.54188538]
[136.45208740 44.58140564]
[124.48183441 53.62092590]
[112.51157379 62.66044617]
[100.54132080 71.69996643]
[88.57106018 80.73948669]
[110.03095245 81.37282562]
[119.89429474 99.05844116]
[134.04161072 104.04376221]
[148.18891907 109.02908325]
[160.30548096 99.47960663]
[175.66360474 98.01953125]
[189.36254883 105.11475372]
[197.03105164 118.50122833]
[196.22212219 133.90736389]
[187.19387817 146.41712952]
[172.82719421 152.03871155]
[157.70643616 148.97825623]
[146.65658569 138.21237183]
[143.20359802 123.17639923]
[129.05628967 118.19107819]
[114.90897369 113.20575714]
[91.66294098 119.44441223]
[77.68510437 98.09377289]
[78.60852051 113.06532288]
[79.53193665 128.03686523]
[80.45534515 143.00842285]
[81.37876129 157.97996521]
[82.30217743 172.95152283]
[83.22558594 187.92306519]
[98.09227753 190.35810852]
[112.04418182 196.04071045]
[124.38147736 204.68586731]
[134.48535156 215.85992432]
[141.84896851 229.00241089]
[146.10299683 243.45408630]
[147.03404236 258.49008179]
[144.59539795 273.35617065]
[138.90940857 287.30670166]
[130.26126099 299.64190674]
[119.08475494 309.74307251]
[105.94049072 317.10351562]
[91.48778534 321.35403442]
[76.45156860 322.28143311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[43 65]
[44 64]
[47 61]
[48 60]
[49 59]
[50 58]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
[116 130]
[117 129]
[118 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
