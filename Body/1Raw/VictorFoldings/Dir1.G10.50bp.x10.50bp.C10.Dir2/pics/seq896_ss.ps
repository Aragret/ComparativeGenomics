%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACCCCAUGGGGGGGGGGAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACxxxxxxxxxxAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCCCCCCCCCCCAUCACCCGAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 381.10476685]
[71.01555634 375.55175781]
[58.81560135 366.68542480]
[49.20452881 355.06311035]
[42.78650284 341.41540527]
[39.96496582 326.60021973]
[40.91728210 311.54885864]
[45.58358765 297.20742798]
[53.67055511 284.47747803]
[64.66983032 274.15917969]
[77.88998413 266.90121460]
[92.50000000 263.15979004]
[92.50000000 248.15977478]
[92.50000000 233.15977478]
[92.50000000 218.15977478]
[92.50000000 203.15977478]
[92.50000000 188.15977478]
[92.50000000 173.15977478]
[92.50000000 158.15977478]
[92.50000000 143.15977478]
[92.50000000 128.15977478]
[92.50000000 113.15978241]
[80.34666443 104.36793518]
[69.66070557 116.03501892]
[55.15144348 112.66890717]
[40.90475464 117.36270905]
[26.65806007 122.05651093]
[12.41136837 126.75030518]
[1.89787245 139.33595276]
[-14.20976448 136.25762939]
[-19.34138680 120.68206024]
[-8.21802044 108.63204956]
[7.71756792 112.50361633]
[21.96426010 107.80981445]
[36.21095276 103.11601257]
[50.45764542 98.42221069]
[60.12458801 87.09086609]
[75.65286255 90.12124634]
[83.56050873 88.32793427]
[90.72154999 89.45158386]
[96.26915741 92.99655914]
[101.68778229 79.00947571]
[107.10640717 65.02239227]
[112.52503204 51.03530884]
[117.94365692 37.04822540]
[104.40559387 30.57184410]
[91.40301514 23.07813263]
[79.01222992 14.61106682]
[67.30595398 5.22033310]
[56.35288620 -5.03895760]
[46.21730423 -16.10659981]
[36.95868683 -27.91764259]
[28.63136482 -40.40277481]
[21.28421402 -53.48872375]
[14.96034527 -67.09870148]
[9.69687271 -81.15283203]
[5.52468491 -95.56864166]
[2.46826458 -110.26153564]
[0.54554921 -125.14527893]
[-0.23217784 -140.13253784]
[0.13964742 -155.13536072]
[1.65884292 -170.06568909]
[4.31649351 -184.83590698]
[8.09700203 -199.35935974]
[12.97818470 -213.55079651]
[18.93139458 -227.32693481]
[25.92169571 -240.60693359]
[33.90806580 -253.31286621]
[42.84363556 -265.37014771]
[52.67597198 -276.70806885]
[63.34737015 -287.26004028]
[74.79520416 -296.96414185]
[86.95229340 -305.76345825]
[99.74729919 -313.60632324]
[113.10513306 -320.44671631]
[126.94739532 -326.24450684]
[141.19287109 -330.96566772]
[155.75793457 -334.58248901]
[170.55714417 -337.07376099]
[185.50363159 -338.42483521]
[200.50967407 -338.62777710]
[215.48722839 -337.68142700]
[230.34840393 -335.59133911]
[245.00596619 -332.36975098]
[259.37390137 -328.03558350]
[273.36791992 -322.61428833]
[286.90585327 -316.13766479]
[299.90829468 -308.64367676]
[312.29891968 -300.17639160]
[324.00500488 -290.78543091]
[334.95788574 -280.52593994]
[345.09326172 -269.45809937]
[354.35165405 -257.64688110]
[362.67874146 -245.16159058]
[370.02563477 -232.07550049]
[376.34924316 -218.46540833]
[381.61245728 -204.41117859]
[385.78436279 -189.99528503]
[388.84051514 -175.30233765]
[390.76293945 -160.41854858]
[391.54037476 -145.43128967]
[391.16827393 -130.42846680]
[389.64880371 -115.49816895]
[386.99087524 -100.72799683]
[383.21008301 -86.20462036]
[378.32864380 -72.01327515]
[372.37515259 -58.23724747]
[365.38461304 -44.95738220]
[357.39801025 -32.25160217]
[348.46218872 -20.19447899]
[338.62963867 -8.85676670]
[327.95803833 1.69499874]
[316.51004028 11.39889526]
[304.35278320 20.19797516]
[291.55761719 28.04060364]
[278.19964600 34.88075256]
[264.35726929 40.67828369]
[250.11172485 45.39917374]
[235.54658508 49.01572037]
[220.74732971 51.50669479]
[205.80082703 52.85748291]
[190.79476929 53.06015396]
[175.81723022 52.11352539]
[160.95610046 50.02314377]
[146.29859924 46.80128479]
[131.93074036 42.46685028]
[126.51211548 56.45393372]
[121.09349060 70.44101715]
[115.67486572 84.42810059]
[110.25624084 98.41518402]
[107.50000000 113.15978241]
[107.50000000 128.15977478]
[107.50000000 143.15977478]
[107.50000000 158.15977478]
[107.50000000 173.15977478]
[107.50000000 188.15977478]
[107.50000000 203.15977478]
[107.50000000 218.15977478]
[107.50000000 233.15977478]
[107.50000000 248.15977478]
[107.50000000 263.15979004]
[122.11001587 266.90121460]
[135.33016968 274.15917969]
[146.32945251 284.47747803]
[154.41641235 297.20742798]
[159.08271790 311.54885864]
[160.03503418 326.60021973]
[157.21350098 341.41540527]
[150.79547119 355.06311035]
[141.18440247 366.68542480]
[128.98443604 375.55175781]
[114.96250153 381.10476685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 38]
[25 36]
[26 35]
[27 34]
[28 33]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
