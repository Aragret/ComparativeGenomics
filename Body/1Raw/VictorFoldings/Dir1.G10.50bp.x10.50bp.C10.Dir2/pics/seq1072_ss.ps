%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCACAGGGGGGGGGGCCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAxxxxxxxxxxCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCCCCCCCCCCCUAGGCACA\
) } def
/len { sequence length } bind def

/coor [
[59.61342239 494.65905762]
[45.76748276 488.64303589]
[34.05882263 479.11361694]
[25.35629654 466.77795410]
[20.30569458 452.55142212]
[19.28180504 437.48974609]
[22.36060333 422.71060181]
[29.31362534 409.31066895]
[39.62490845 398.28433228]
[52.52928925 390.44982910]
[67.06917572 386.38851929]
[67.06917572 371.38851929]
[67.06917572 356.38851929]
[67.06917572 341.38851929]
[67.06917572 326.38851929]
[67.06917572 311.38851929]
[67.06917572 296.38851929]
[67.06917572 281.38851929]
[67.06917572 266.38851929]
[67.06917572 251.38851929]
[54.13112259 243.79859924]
[41.03796768 251.11770630]
[27.94481277 258.43682861]
[20.01841545 272.79315186]
[3.61932492 272.83627319]
[-4.38248110 258.52185059]
[4.24456930 244.57530212]
[20.62570572 245.34365845]
[33.71886063 238.02455139]
[46.81201553 230.70544434]
[44.45006180 213.16035461]
[50.48612213 197.20263672]
[62.89990234 186.45629883]
[78.30487061 183.04966736]
[81.09719086 168.31185913]
[83.88951874 153.57405090]
[86.68183899 138.83624268]
[82.84172058 85.71408081]
[78.83398438 71.25939178]
[74.82624054 56.80470276]
[70.81850433 42.35001373]
[63.84011459 55.62789536]
[50.46175766 62.41167068]
[35.62646866 60.19487000]
[24.81559181 49.79655457]
[22.02352905 35.05870056]
[28.28189278 21.42664719]
[41.27834320 13.93716717]
[56.21094894 15.35747623]
[67.56195068 25.16205025]
[66.00437164 10.24313736]
[56.47093201 1.49286044]
[55.51280594 -11.00917816]
[63.10017776 -20.48225403]
[61.85330200 -35.43033981]
[60.60642624 -50.37842560]
[59.35955429 -65.32651520]
[55.05196762 -79.69470215]
[47.86945724 -92.86328125]
[40.68695068 -106.03186035]
[33.50444031 -119.20044708]
[19.23134041 -127.27575684]
[19.35880089 -143.67440796]
[33.75570297 -151.52687073]
[47.61174774 -142.75521851]
[46.67302322 -126.38295746]
[53.85553360 -113.21437073]
[61.03804016 -100.04579163]
[68.22055054 -86.87720490]
[68.93353271 -101.86025238]
[73.76329041 -116.06143188]
[82.33291626 -128.37246704]
[93.97361755 -137.83259583]
[107.77694702 -143.70353699]
[122.66568756 -145.52713013]
[137.47790527 -143.16105652]
[151.05763245 -136.78996277]
[162.34510803 -126.91104889]
[170.45944214 -114.29528809]
[174.76739502 -99.92720795]
[174.93275452 -84.92812347]
[170.94262695 -70.46855927]
[163.10839844 -57.67696762]
[152.04147339 -47.55160522]
[138.60549927 -40.88266373]
[123.84904480 -38.19059753]
[108.92372131 -39.68549728]
[94.99431610 -45.25069809]
[83.14787292 -54.45188904]
[74.30764008 -66.57338715]
[75.55451202 -51.62530136]
[76.80139160 -36.67721558]
[78.04826355 -21.72912788]
[88.82505798 -7.91389608]
[80.92328644 8.68555641]
[82.48086548 23.60446930]
[85.27318573 38.34227371]
[89.28092957 52.79696274]
[93.28867340 67.25164795]
[97.29640961 81.70633698]
[110.46499634 88.88884735]
[124.78759003 84.43202972]
[139.11018372 79.97521973]
[147.81433105 66.49866486]
[163.79136658 65.04476929]
[174.78507996 76.72885132]
[172.36204529 92.58786774]
[158.38099670 100.45614624]
[143.56700134 94.29781342]
[129.24440002 98.75463104]
[114.92180634 103.21144867]
[116.01312256 118.17169189]
[130.83087158 120.50279999]
[145.64863586 122.83390045]
[159.41209412 114.59091949]
[174.38700867 120.34693909]
[179.08589172 135.68643188]
[169.90417480 148.84225464]
[153.88526917 149.72238159]
[143.31753540 137.65165710]
[128.49977112 135.32055664]
[113.68201447 132.98945618]
[101.41964722 141.62857056]
[98.62731934 156.36637878]
[95.83499908 171.10418701]
[93.04267120 185.84197998]
[106.67095947 195.82890320]
[113.54629517 211.86697388]
[111.24296570 229.72253418]
[99.84366608 244.36611938]
[82.06917572 251.38851929]
[82.06917572 266.38851929]
[82.06917572 281.38851929]
[82.06917572 296.38851929]
[82.06917572 311.38851929]
[82.06917572 326.38851929]
[82.06917572 341.38851929]
[82.06917572 356.38851929]
[82.06917572 371.38851929]
[82.06917572 386.38851929]
[96.60906219 390.44982910]
[109.51344299 398.28433228]
[119.82472992 409.31066895]
[126.77774811 422.71060181]
[129.85655212 437.48974609]
[128.83265686 452.55142212]
[123.78205872 466.77795410]
[115.07952881 479.11361694]
[103.37087250 488.64303589]
[89.52493286 494.65905762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 30]
[22 29]
[23 28]
[34 126]
[35 125]
[36 124]
[37 123]
[38 100]
[39 99]
[40 98]
[41 97]
[50 96]
[51 95]
[54 93]
[55 92]
[56 91]
[57 90]
[58 69]
[59 68]
[60 67]
[61 66]
[101 111]
[102 110]
[103 109]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
