%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUACUCAGGGGGGGGGGCUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGAxxxxxxxxxxAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACCCCCCCCCCCUACUACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.19730377 375.08670044]
[71.35136414 369.07067871]
[59.64270401 359.54125977]
[50.94018173 347.20556641]
[45.88957977 332.97906494]
[44.86568832 317.91738892]
[47.94448853 303.13821411]
[54.89751053 289.73828125]
[65.20879364 278.71194458]
[78.11317444 270.87744141]
[92.65306091 266.81613159]
[92.65306091 251.81613159]
[92.65306091 236.81613159]
[92.65306091 221.81613159]
[92.65306091 206.81613159]
[92.65306091 191.81613159]
[92.65306091 176.81613159]
[92.65306091 161.81613159]
[92.65306091 146.81613159]
[92.65306091 131.81613159]
[84.91576385 119.08885956]
[92.65306091 105.28868866]
[90.28324890 102.15493774]
[89.33691406 97.97760010]
[90.25396729 93.43037415]
[93.15031433 89.36036682]
[94.08593750 74.38957214]
[95.02156830 59.41878128]
[95.95719910 44.44799042]
[85.29772949 37.77773666]
[78.54685211 27.25509453]
[76.94564056 14.92907429]
[80.73947144 3.16870284]
[89.14276123 -5.79229307]
[100.50073242 -10.27972126]
[102.05831909 -25.19863319]
[103.61589813 -40.11754608]
[105.17347717 -55.03645706]
[90.41259003 -57.74654770]
[75.90610504 -61.59235382]
[61.74126816 -66.55074310]
[48.00326538 -72.59189606]
[34.77471542 -79.67948151]
[22.13518715 -87.77087402]
[10.16069221 -96.81740570]
[-1.07675302 -106.76467896]
[-11.50956345 -117.55285645]
[-21.07499313 -129.11706543]
[-29.71551704 -141.38774109]
[-37.37916565 -154.29110718]
[-44.01984787 -167.74954224]
[-49.59762955 -181.68212891]
[-54.07896423 -196.00503540]
[-57.43689728 -210.63215637]
[-59.65123367 -225.47550964]
[-60.70865631 -240.44581604]
[-60.60280609 -255.45304871]
[-59.33432388 -270.40695190]
[-56.91083145 -285.21759033]
[-53.34690857 -299.79589844]
[-48.66398621 -314.05416870]
[-42.89023209 -327.90667725]
[-36.06036758 -341.27011108]
[-28.21547127 -354.06408691]
[-19.40272141 -366.21166992]
[-9.67512226 -377.63980103]
[0.90882450 -388.27975464]
[12.28546429 -398.06750488]
[24.38637543 -406.94424438]
[37.13878250 -414.85653687]
[50.46598816 -421.75683594]
[64.28784180 -427.60360718]
[78.52120972 -432.36169434]
[93.08049774 -436.00247192]
[107.87814331 -438.50408936]
[122.82514954 -439.85147095]
[137.83161926 -440.03649902]
[152.80729675 -439.05807495]
[167.66212463 -436.92211914]
[182.30676270 -433.64138794]
[196.65312195 -429.23571777]
[210.61494446 -423.73153687]
[224.10823059 -417.16195679]
[237.05184937 -409.56649780]
[249.36796570 -400.99084473]
[260.98248291 -391.48657227]
[271.82556152 -381.11080933]
[281.83197021 -369.92602539]
[290.94158936 -357.99942017]
[299.09954834 -345.40277100]
[306.25683594 -332.21182251]
[312.37039185 -318.50585938]
[317.40347290 -304.36740112]
[321.32577515 -289.88140869]
[324.11370850 -275.13500977]
[325.75051880 -260.21694946]
[326.22637939 -245.21687317]
[325.53839111 -230.22505188]
[323.69073486 -215.33161926]
[320.69445801 -200.62614441]
[316.56765747 -186.19708252]
[311.33511353 -172.13121033]
[305.02828979 -158.51312256]
[297.68511963 -145.42472839]
[289.34979248 -132.94471741]
[280.07241821 -121.14817047]
[269.90878296 -110.10603333]
[258.92001343 -99.88470459]
[247.17222595 -90.54566956]
[234.73605347 -82.14508820]
[221.68627930 -74.73347473]
[208.10140991 -68.35542297]
[194.06314087 -63.04927444]
[179.65588379 -58.84695435]
[164.96630859 -55.77372742]
[150.08276367 -53.84807968]
[135.09474182 -53.08159256]
[120.09239197 -53.47887802]
[118.53480530 -38.55996323]
[116.97722626 -23.64105225]
[115.41964722 -8.72214031]
[129.06677246 2.40547562]
[133.38777161 19.63711929]
[126.48551178 36.17619705]
[110.92798615 45.38361740]
[109.99236298 60.35440826]
[109.05673218 75.32520294]
[108.12110138 90.29598999]
[107.65306091 105.28868866]
[115.39035797 119.08885956]
[107.65306091 131.81613159]
[107.65306091 146.81613159]
[107.65306091 161.81613159]
[107.65306091 176.81613159]
[107.65306091 191.81613159]
[107.65306091 206.81613159]
[107.65306091 221.81613159]
[107.65306091 236.81613159]
[107.65306091 251.81613159]
[107.65306091 266.81613159]
[122.19294739 270.87744141]
[135.09733582 278.71194458]
[145.40861511 289.73828125]
[152.36163330 303.13821411]
[155.44042969 317.91738892]
[154.41654968 332.97906494]
[149.36593628 347.20556641]
[140.66342163 359.54125977]
[128.95475769 369.07067871]
[115.10881805 375.08670044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[26 128]
[27 127]
[28 126]
[29 125]
[35 121]
[36 120]
[37 119]
[38 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
