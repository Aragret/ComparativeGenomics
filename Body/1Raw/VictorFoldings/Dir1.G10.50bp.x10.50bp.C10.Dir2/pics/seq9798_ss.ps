%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUCCCUCUACUAUGGGGGGGGGGUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCxxxxxxxxxxACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCACCCCCCCCCCAUCAACCCUCAACUAU\
) } def
/len { sequence length } bind def

/coor [
[58.99341965 295.05111694]
[55.10326385 280.53741455]
[53.31830215 265.61779785]
[53.67487717 250.59602356]
[56.16572571 235.77792358]
[60.74013901 221.46514893]
[67.30498505 207.94909668]
[75.72662354 195.50494385]
[85.83358002 184.38604736]
[97.42011261 174.81874084]
[110.25031281 166.99783325]
[104.34354401 153.20979309]
[98.43678284 139.42175293]
[92.53001404 125.63371277]
[81.73689270 107.92107391]
[88.30082703 94.07530975]
[79.62496185 81.83891296]
[70.94910431 69.60250854]
[62.27324677 57.36611176]
[53.59738922 45.12971115]
[44.92153168 32.89331055]
[36.24567413 20.65691185]
[27.56981468 8.42051220]
[18.89395523 -3.81588721]
[10.21809673 -16.05228615]
[1.54223847 -28.28868675]
[-7.13361979 -40.52508545]
[-15.80947876 -52.76148605]
[-24.48533630 -64.99788666]
[-33.16119385 -77.23428345]
[-46.11529922 -69.65268707]
[-59.68089294 -63.22898102]
[-73.75473022 -58.01204300]
[-88.22970581 -54.04158783]
[-102.99564362 -51.34782791]
[-117.94017792 -49.95126724]
[-132.94955444 -49.86253738]
[-147.90954590 -51.08230591]
[-162.70631409 -53.60129547]
[-177.22721863 -57.40033340]
[-191.36175537 -62.45050812]
[-205.00234985 -68.71337891]
[-218.04518127 -76.14128876]
[-230.39099121 -84.67769623]
[-241.94581604 -94.25763702]
[-252.62171936 -104.80820465]
[-262.33746338 -116.24909210]
[-271.01907349 -128.49324036]
[-278.60046387 -141.44744873]
[-285.02398682 -155.01313782]
[-290.24072266 -169.08703613]
[-294.21099854 -183.56207275]
[-296.90454102 -198.32804871]
[-298.30090332 -213.27259827]
[-298.38940430 -228.28198242]
[-297.16943359 -243.24195862]
[-294.65023804 -258.03869629]
[-290.85098267 -272.55953979]
[-285.80062866 -286.69400024]
[-279.53756714 -300.33450317]
[-272.10946655 -313.37722778]
[-263.57287598 -325.72293091]
[-253.99278259 -337.27761841]
[-243.44206238 -347.95336914]
[-232.00103760 -357.66894531]
[-219.75677490 -366.35037231]
[-206.80245972 -373.93161011]
[-193.23667908 -380.35494995]
[-179.16270447 -385.57150269]
[-164.68760681 -389.54153442]
[-149.92160034 -392.23489380]
[-134.97703552 -393.63101196]
[-119.96764374 -393.71932983]
[-105.00768280 -392.49914551]
[-90.21099854 -389.97973633]
[-75.69019318 -386.18029785]
[-61.55580139 -381.12973022]
[-47.91538239 -374.86648560]
[-34.87275696 -367.43820190]
[-22.52718353 -358.90145874]
[-10.97262287 -349.32116699]
[-0.29701510 -338.77032471]
[9.41839123 -327.32916260]
[18.09965515 -315.08474731]
[25.68070602 -302.13034058]
[32.10384369 -288.56448364]
[37.32018661 -274.49041748]
[41.29003525 -260.01528931]
[43.98317337 -245.24922180]
[45.37910461 -230.30462646]
[45.46720505 -215.29525757]
[44.24680710 -200.33529663]
[41.72719574 -185.53865051]
[37.92754364 -171.01791382]
[32.87677765 -156.88359070]
[26.61333084 -143.24325562]
[19.18487549 -130.20072937]
[10.64794827 -117.85527802]
[1.06751955 -106.30084991]
[-9.48349571 -95.62538910]
[-20.92479515 -85.91014099]
[-12.24893761 -73.67374420]
[-3.57307887 -61.43734360]
[5.10277987 -49.20094681]
[13.77863789 -36.96454620]
[22.45449638 -24.72814560]
[31.13035583 -12.49174595]
[39.80621338 -0.25534603]
[48.48207092 11.98105335]
[57.15793228 24.21745300]
[65.83378601 36.45385361]
[74.50965118 48.69025421]
[83.18550873 60.92665100]
[91.86136627 73.16305542]
[100.53722382 85.39945221]
[113.96088409 92.09313965]
[128.95460510 91.65954590]
[143.94834900 91.22594452]
[158.94207764 90.79235077]
[172.60961914 81.72978210]
[187.16928101 89.27619934]
[187.64332581 105.66849518]
[173.54409790 114.04367828]
[159.37567139 105.78608704]
[144.38194275 106.21968079]
[129.38821411 106.65327454]
[114.39447784 107.08686829]
[106.31805420 119.72694397]
[112.22482300 133.51498413]
[118.13159180 147.30302429]
[124.03835297 161.09106445]
[138.55133057 157.19822693]
[153.47061157 155.41049194]
[168.49244690 155.76428223]
[183.31101990 158.25238037]
[197.62464905 162.82412720]
[211.14190674 169.38647461]
[223.58761597 177.80578613]
[234.70840454 187.91069031]
[244.27784729 199.49543762]
[252.10113525 212.32418823]
[258.01901245 226.13577271]
[261.91094971 240.64898682]
[263.69775391 255.56837463]
[263.34304810 270.59017944]
[260.85403442 285.40859985]
[256.28140259 299.72195435]
[249.71821594 313.23880005]
[241.29812622 325.68399048]
[231.19253540 336.80416870]
[219.60719299 346.37289429]
[206.77795410 354.19537354]
[192.96601868 360.11239624]
[178.45256042 364.00344849]
[163.53306580 365.78933716]
[148.51126099 365.43368530]
[133.69299316 362.94375610]
[119.37994385 358.37020874]
[105.86348724 351.80621338]
[93.41881561 343.38534546]
[82.29928589 333.27908325]
[72.73126984 321.69314575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 131]
[12 130]
[13 129]
[14 128]
[16 115]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
