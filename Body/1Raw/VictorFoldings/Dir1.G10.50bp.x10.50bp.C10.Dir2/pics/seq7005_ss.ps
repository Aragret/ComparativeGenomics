%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCACUAGGGGGGGGGGGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUxxxxxxxxxxUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCCCCCCCCCCCUCAUUACUA\
) } def
/len { sequence length } bind def

/coor [
[84.40426636 486.85894775]
[69.91457367 482.65048218]
[57.00834656 474.83435059]
[46.56554413 463.94351196]
[39.29817963 450.72052002]
[35.70175171 436.06692505]
[36.02147675 420.98181152]
[40.23554611 406.49374390]
[48.05664444 393.59054565]
[58.95151138 383.15194702]
[72.17732239 375.88967896]
[86.83231354 372.29891968]
[87.14437103 357.30215454]
[87.45642090 342.30541992]
[87.76847839 327.30865479]
[88.08053589 312.31188965]
[88.39259338 297.31515503]
[88.70465088 282.31838989]
[89.01670837 267.32165527]
[89.32875824 252.32489014]
[89.64081573 237.32814026]
[89.95287323 222.33137512]
[82.48202515 209.44589233]
[90.50474548 195.80967712]
[90.81680298 180.81292725]
[91.12886047 165.81617737]
[83.65800476 152.93069458]
[91.68072510 139.29446411]
[68.93510437 125.46051788]
[59.83694839 100.44122314]
[45.07089233 97.80236053]
[30.30483627 95.16349792]
[15.53878212 92.52463531]
[0.77272618 89.88576508]
[-3.38860321 91.57242584]
[-7.45384550 91.78423309]
[-10.95990276 90.74046326]
[-13.56654358 88.79125977]
[-15.08907032 86.36448669]
[-29.58466721 82.50732422]
[-44.08026505 78.65016174]
[-58.57585907 74.79300690]
[-75.43714905 76.56308746]
[-81.80572510 60.85074997]
[-68.47043610 50.38145065]
[-54.71870041 60.29740906]
[-40.22310257 64.15457153]
[-25.72750664 68.01172638]
[-11.23191071 71.86888885]
[3.41159034 75.11971283]
[18.17764664 77.75857544]
[32.94370270 80.39743805]
[47.70975876 83.03630829]
[62.47581100 85.67517090]
[68.26653290 75.37779999]
[76.80261230 67.21057129]
[87.34555817 61.88005066]
[98.98328400 59.84739685]
[110.70896149 61.28845596]
[117.33745575 47.83249283]
[123.96595764 34.37652588]
[130.59445190 20.92056084]
[137.22296143 7.46459532]
[124.72839355 -0.87452537]
[113.42923737 -10.77321625]
[103.51882935 -22.06209755]
[95.16674805 -34.54800034]
[88.51591492 -48.01727676]
[83.68013000 -62.23945236]
[80.74214172 -76.97116089]
[79.75222015 -91.96032715]
[80.72730255 -106.95046234]
[83.65071106 -121.68507385]
[88.47241211 -135.91201782]
[95.10991669 -149.38787842]
[103.44963074 -161.88204956]
[113.34885406 -173.18072510]
[124.63820648 -183.09059143]
[137.12451172 -191.44207764]
[150.59410095 -198.09226990]
[164.81651306 -202.92738342]
[179.54835510 -205.86466980]
[194.53756714 -206.85388184]
[209.52766418 -205.87808228]
[224.26213074 -202.95397949]
[238.48884583 -198.13159180]
[251.96438599 -191.49345398]
[264.45816040 -183.15313721]
[275.75637817 -173.25337219]
[285.66571045 -161.96354675]
[294.01660156 -149.47685242]
[300.66613770 -136.00694275]
[305.50057983 -121.78430939]
[308.43716431 -107.05232239]
[309.42565918 -92.06306458]
[308.44915771 -77.07302094]
[305.52435303 -62.33868790]
[300.70129395 -48.11219406]
[294.06250000 -34.63697433]
[285.72158813 -22.14360046]
[275.82128906 -10.84585857]
[264.53100586 -0.93706274]
[252.04389954 7.41323280]
[238.57366943 14.06214333]
[224.35081482 18.89589882]
[209.61868286 21.83178520]
[194.62937927 22.81956673]
[179.63937378 21.84234238]
[164.90518188 18.91683006]
[150.67892456 14.09309387]
[144.05041504 27.54905891]
[137.42192078 41.00502396]
[130.79342651 54.46099091]
[124.16492462 67.91695404]
[130.91732788 74.36049652]
[136.00024414 82.18854523]
[139.13919067 90.97837830]
[140.16465759 100.25537872]
[139.02130127 109.51857758]
[135.77084351 118.26779175]
[130.58880615 126.03057098]
[123.75500488 132.38772583]
[115.63847351 136.99598694]
[106.67748260 139.60652161]
[114.12601471 153.56466675]
[106.12561035 166.12821960]
[105.81355286 181.12498474]
[105.50149536 196.12173462]
[112.95002747 210.07987976]
[104.94963074 222.64343262]
[104.63757324 237.64019775]
[104.32551575 252.63694763]
[104.01345825 267.63369751]
[103.70140076 282.63046265]
[103.38934326 297.62719727]
[103.07729340 312.62396240]
[102.76523590 327.62072754]
[102.45317841 342.61746216]
[102.14112091 357.61422729]
[101.82906342 372.61096191]
[116.32199860 376.80825806]
[129.23426819 384.61441040]
[139.68547058 395.49716187]
[146.96304321 408.71456909]
[150.57078552 423.36538696]
[150.26271057 438.45071411]
[146.05982971 452.94204712]
[138.24870300 465.85128784]
[127.36190033 476.29827881]
[114.14170074 483.57077026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 128]
[25 127]
[26 126]
[28 124]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[39 49]
[40 48]
[41 47]
[42 46]
[59 114]
[60 113]
[61 112]
[62 111]
[63 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
