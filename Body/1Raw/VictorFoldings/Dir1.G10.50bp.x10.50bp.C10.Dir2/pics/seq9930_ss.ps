%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACCCCUCGGGGGGGGGGACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUC\
) } def
/len { sequence length } bind def

/coor [
[86.34147644 494.96676636]
[73.78325653 486.61563110]
[63.69702911 475.40316772]
[56.71683502 462.03427124]
[53.28145218 447.34927368]
[53.60683060 432.27130127]
[57.67251587 417.74819946]
[65.22293091 404.69284058]
[75.78346252 393.92596436]
[88.69025421 386.12432861]
[103.13198853 381.77838135]
[102.50801086 366.79135132]
[101.88403320 351.80435181]
[101.26005554 336.81732178]
[100.63607788 321.83029175]
[100.01210022 306.84329224]
[99.38812256 291.85626221]
[98.76414490 276.86926270]
[98.14016724 261.88223267]
[97.51618958 246.89521790]
[94.07329559 240.30036926]
[97.03840637 231.59060669]
[96.72635651 216.59385681]
[82.40254974 209.17898560]
[73.70684814 195.48347473]
[73.08210754 179.17889404]
[80.79232788 164.69274902]
[94.82530212 156.00630188]
[94.20132446 141.01928711]
[93.57734680 126.03227234]
[92.95336914 111.04525757]
[91.70648956 96.09716797]
[89.83888245 81.21389008]
[87.97126770 66.33061218]
[84.23072052 60.75245285]
[83.95962524 54.99417114]
[86.34887695 50.79095840]
[85.10200500 35.84287262]
[76.24433899 22.73362350]
[82.89691162 9.40723705]
[81.65003204 -5.54085016]
[80.40316010 -20.48893738]
[65.39260864 -20.71283722]
[50.47628403 -22.40696716]
[35.79784775 -25.55501556]
[21.49865532 -30.12665939]
[7.71642637 -36.07787323]
[-5.41610718 -43.35134506]
[-17.77246857 -51.87701797]
[-29.23365784 -61.57278824]
[-39.68929291 -72.34527588]
[-49.03867722 -84.09073639]
[-57.19176865 -96.69604492]
[-64.07004547 -110.03981018]
[-69.60726929 -123.99351501]
[-73.75011444 -138.42277527]
[-76.45867157 -153.18864441]
[-77.70686340 -168.14888000]
[-77.48265839 -183.15942383]
[-75.78823090 -198.07571411]
[-72.63989258 -212.75408936]
[-68.06796265 -227.05319214]
[-62.11647034 -240.83529663]
[-54.84273911 -253.96769714]
[-46.31681824 -266.32388306]
[-36.62081909 -277.78488159]
[-25.84811974 -288.24029541]
[-14.10247517 -297.58944702]
[-1.49700058 -305.74227905]
[11.84690189 -312.62030029]
[25.80072021 -318.15725708]
[40.23006821 -322.29980469]
[54.99597549 -325.00805664]
[69.95624542 -326.25595093]
[84.96678925 -326.03143311]
[99.88304138 -324.33673096]
[114.56135559 -321.18807983]
[128.86036682 -316.61587524]
[142.64234924 -310.66409302]
[155.77459717 -303.39010620]
[168.13061523 -294.86395264]
[179.59141541 -285.16772461]
[190.04661560 -274.39480591]
[199.39553833 -262.64898682]
[207.54812622 -250.04333496]
[214.42587280 -236.69929504]
[219.96253967 -222.74536133]
[224.10479736 -208.31593323]
[226.81277466 -193.54997253]
[228.06036377 -178.58967590]
[227.83555603 -163.57914734]
[226.14053345 -148.66291809]
[222.99160767 -133.98466492]
[218.41909790 -119.68575287]
[212.46705627 -105.90388489]
[205.19281006 -92.77178192]
[196.66638184 -80.41593170]
[186.96992493 -68.95532990]
[176.19682312 -58.50033951]
[164.45079041 -49.15166092]
[151.84500122 -40.99932480]
[138.50082397 -34.12184525]
[124.54677582 -28.58545876]
[110.11726379 -24.44348335]
[95.35124969 -21.73581123]
[96.59812164 -6.78772449]
[97.84499359 8.16036224]
[106.61347198 20.20042419]
[100.05008698 34.59599686]
[101.29696655 49.54408646]
[102.85454559 64.46299744]
[104.72216034 79.34627533]
[106.58977509 94.22956085]
[108.89948273 96.32697296]
[110.47490692 99.33242035]
[110.97050476 102.96702576]
[110.15194702 106.82551575]
[107.94038391 110.42127991]
[108.56436157 125.40829468]
[109.18833923 140.39530945]
[109.81231689 155.38232422]
[122.55599213 161.23422241]
[131.48164368 171.96379089]
[134.88365173 185.43121338]
[132.15061951 198.98252869]
[123.87442780 209.97268677]
[111.72310638 216.28179932]
[112.03516388 231.27854919]
[112.50320435 246.27124023]
[113.12718201 261.25827026]
[113.75115967 276.24526978]
[114.37513733 291.23229980]
[114.99911499 306.21929932]
[115.62309265 321.20632935]
[116.24707031 336.19335938]
[116.87104797 351.18035889]
[117.49502563 366.16738892]
[118.11900330 381.15438843]
[132.87200928 384.28482056]
[146.38264465 390.98660278]
[157.80162048 400.83837891]
[166.41113281 413.22091675]
[171.66998291 427.35580444]
[173.24758911 442.35455322]
[171.04478455 457.27426147]
[165.20004272 471.17715454]
[156.08074951 483.18920898]
[144.26017761 492.55535889]
[130.48136902 498.68685913]
[115.61047363 501.19824219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 128]
[23 127]
[28 121]
[29 120]
[30 119]
[31 118]
[32 113]
[33 112]
[34 111]
[37 110]
[38 109]
[40 107]
[41 106]
[42 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
