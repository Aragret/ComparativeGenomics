%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUACAAUGGGGGGGGGGCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACxxxxxxxxxxCUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCCCCCCCCCCCAAUUACAAU\
) } def
/len { sequence length } bind def

/coor [
[115.21858215 448.84121704]
[101.37264252 442.82519531]
[89.66397858 433.29577637]
[80.96145630 420.96011353]
[75.91085052 406.73358154]
[74.88696289 391.67190552]
[77.96575928 376.89276123]
[84.91878510 363.49282837]
[95.23006439 352.46649170]
[108.13444519 344.63198853]
[122.67433167 340.57067871]
[122.67433167 325.57067871]
[122.67433167 310.57067871]
[122.67433167 295.57067871]
[122.67433167 280.57067871]
[122.67433167 265.57067871]
[122.67433167 250.57067871]
[122.67433167 235.57067871]
[122.67433167 220.57067871]
[122.67433167 205.57067871]
[109.19126892 199.19317627]
[99.77553558 187.54614258]
[96.33634949 172.90602112]
[99.60798645 158.16436768]
[108.99383545 146.25668335]
[122.67433167 139.57795715]
[122.67433167 124.57796478]
[92.14572906 127.96143341]
[76.29850769 106.76374054]
[61.30581284 106.29570007]
[46.31311798 105.82765961]
[40.09251022 119.69749451]
[29.03422737 130.12739563]
[14.82458019 135.52687073]
[-0.36956394 135.07255554]
[-14.23120975 128.83370972]
[-24.64655495 117.76171112]
[-30.02733803 103.54497528]
[-29.55302620 88.35144043]
[-23.29594994 74.49801636]
[-12.21026611 64.09724426]
[2.01353741 58.73516846]
[17.20643425 59.22946548]
[31.05161667 65.50476074]
[41.43779755 76.60411835]
[46.78115845 90.83496094]
[61.77385330 91.30300140]
[76.76654816 91.77104187]
[95.40086365 71.32284546]
[126.44885254 79.53881836]
[128.93397522 64.74611664]
[131.41908264 49.95340729]
[133.90420532 35.16069794]
[131.92311096 28.74332047]
[133.31706238 23.14973259]
[136.81271362 19.80969048]
[139.91104126 5.13316488]
[143.00935364 -9.54336071]
[146.10768127 -24.21988678]
[136.11282349 -33.76462173]
[132.18666077 -46.90229034]
[135.25657654 -60.15469360]
[144.41236877 -70.06847382]
[157.17251587 -74.11499023]
[160.57550049 -88.72388458]
[163.97848511 -103.33277130]
[167.38145447 -117.94166565]
[153.78855896 -124.42605591]
[141.90768433 -133.68127441]
[132.29454041 -145.27442932]
[125.39871979 -158.66329956]
[121.54277039 -173.22164917]
[120.90704346 -188.26856995]
[123.52126312 -203.10029602]
[129.26316833 -217.02310181]
[137.86419678 -229.38580322]
[148.92205811 -239.61018372]
[161.91955566 -247.21800232]
[176.24877930 -251.85345459]
[191.23951721 -253.29972839]
[206.19064331 -251.48916626]
[220.40284729 -246.50645447]
[233.21139526 -238.58465576]
[244.01722717 -228.09426880]
[252.31492615 -215.52597046]
[257.71640015 -201.46757507]
[259.96899414 -186.57664490]
[258.96734619 -171.54965210]
[254.75834656 -157.08941650]
[247.53881836 -143.87228394]
[237.64645386 -132.51644897]
[225.54391479 -123.55303192]
[211.79728699 -117.40127563]
[197.04949951 -114.34890747]
[181.99035645 -114.53868866]
[178.58737183 -99.92979431]
[175.18438721 -85.32090759]
[171.78141785 -70.71201324]
[182.90884399 -58.68348312]
[184.71534729 -42.23044586]
[176.29602051 -27.78757858]
[160.78421021 -21.12156487]
[157.68588257 -6.44503927]
[154.58755493 8.23148632]
[151.48924255 22.90801239]
[148.69691467 37.64581680]
[146.21179199 52.43852615]
[143.72668457 67.23123169]
[141.24156189 82.02394104]
[146.58851624 68.00930023]
[159.95291138 61.19805145]
[174.43466187 65.10685730]
[182.55682373 77.71758270]
[180.12590027 92.51929474]
[168.39698792 101.86982727]
[153.42387390 100.94062805]
[167.91946411 104.79779053]
[183.60287476 100.00584412]
[195.40832520 111.38843536]
[191.19139099 127.23612976]
[175.29008484 131.24618530]
[164.06231689 119.29338837]
[149.56671143 115.43622589]
[137.67433167 124.57796478]
[137.67433167 139.57795715]
[151.35482788 146.25668335]
[160.74067688 158.16436768]
[164.01232910 172.90602112]
[160.57313538 187.54614258]
[151.15739441 199.19317627]
[137.67433167 205.57067871]
[137.67433167 220.57067871]
[137.67433167 235.57067871]
[137.67433167 250.57067871]
[137.67433167 265.57067871]
[137.67433167 280.57067871]
[137.67433167 295.57067871]
[137.67433167 310.57067871]
[137.67433167 325.57067871]
[137.67433167 340.57067871]
[152.21421814 344.63198853]
[165.11860657 352.46649170]
[175.42988586 363.49282837]
[182.38290405 376.89276123]
[185.46170044 391.67190552]
[184.43782043 406.73358154]
[179.38720703 420.96011353]
[170.68469238 433.29577637]
[158.97602844 442.82519531]
[145.13009644 448.84121704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 125]
[27 124]
[29 48]
[30 47]
[31 46]
[50 109]
[51 108]
[52 107]
[53 106]
[56 105]
[57 104]
[58 103]
[59 102]
[64 98]
[65 97]
[66 96]
[67 95]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
