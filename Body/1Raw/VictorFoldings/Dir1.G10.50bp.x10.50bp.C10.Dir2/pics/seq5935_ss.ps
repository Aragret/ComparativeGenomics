%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACUAAUAGGGGGGGGGGAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCxxxxxxxxxxUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUACCCCCCCCCCUAAACUAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.63351440]
[71.19830322 359.61749268]
[59.48964310 350.08807373]
[50.78712082 337.75241089]
[45.73651886 323.52587891]
[44.71262741 308.46420288]
[47.79142761 293.68502808]
[54.74444962 280.28512573]
[65.05573273 269.25878906]
[77.96011353 261.42425537]
[92.50000000 257.36294556]
[92.50000000 242.36296082]
[92.50000000 227.36296082]
[92.50000000 212.36296082]
[92.50000000 197.36296082]
[92.50000000 182.36296082]
[92.50000000 167.36296082]
[92.50000000 152.36296082]
[92.50000000 137.36296082]
[92.50000000 122.36296082]
[82.63240814 125.69598389]
[70.73837280 124.93151093]
[57.49579239 131.97665405]
[44.25320435 139.02178955]
[33.10961914 151.79898071]
[17.74690628 144.62797546]
[20.38484764 127.88050842]
[37.20806885 125.77919769]
[50.45065689 118.73406219]
[63.69324112 111.68892670]
[61.91585922 104.40257263]
[56.58371735 82.54351807]
[41.58452988 82.38748169]
[26.58534050 82.23144531]
[11.58615208 82.07540894]
[-3.41303587 81.91937256]
[-19.31420708 87.80062103]
[-29.36749649 74.14896393]
[-19.03237724 60.70940781]
[-3.25699925 66.92018890]
[11.74218941 67.07622528]
[26.74137688 67.23226166]
[41.74056625 67.38829803]
[56.73975372 67.54433441]
[69.35088348 59.42279053]
[75.41389465 45.70273590]
[81.47690582 31.98268318]
[87.25318146 18.13946533]
[92.74021149 4.17907619]
[98.22724152 -9.78131390]
[97.61441040 -16.46950912]
[100.13367462 -21.65454483]
[104.24385071 -24.20051384]
[110.30686951 -37.92056656]
[110.92441559 -47.10046387]
[116.64137268 -51.86092377]
[122.98850250 -65.45187378]
[129.33563232 -79.04282379]
[111.42144012 -116.90521240]
[112.66831207 -131.85330200]
[113.91519165 -146.80139160]
[115.16206360 -161.74948120]
[116.40893555 -176.69755554]
[101.99119568 -181.03604126]
[88.79072571 -188.27766418]
[77.38459015 -198.10588074]
[68.27142334 -210.09103394]
[61.84960938 -223.70918274]
[58.39988708 -238.36500549]
[58.07306290 -253.41781616]
[60.88341904 -268.20956421]
[66.70810699 -282.09359741]
[75.29248810 -294.46298218]
[86.26129150 -304.77700806]
[99.13500977 -312.58477783]
[113.35086060 -317.54492188]
[128.28738403 -319.44067383]
[143.29162598 -318.18911743]
[157.70767212 -313.84497070]
[170.90528870 -306.59814453]
[182.30755615 -296.76544189]
[191.41600037 -284.77670288]
[197.83245850 -271.15603638]
[201.27641296 -256.49887085]
[201.59732056 -241.44592285]
[198.78114319 -226.65528870]
[192.95100403 -212.77354431]
[184.36175537 -200.40751648]
[173.38888550 -190.09780884]
[160.51210022 -182.29512024]
[146.29429626 -177.34054565]
[131.35702515 -175.45068359]
[130.11015320 -160.50260925]
[128.86328125 -145.55451965]
[127.61640167 -130.60643005]
[126.36952972 -115.65834045]
[132.21934509 -110.96475983]
[143.91896057 -101.57759857]
[149.76876831 -96.88401794]
[164.09136963 -101.34083557]
[166.79353333 -116.40592194]
[176.19642639 -128.48251343]
[190.13934326 -134.79550171]
[205.41828918 -133.89421082]
[218.52227783 -125.98574066]
[226.44012451 -112.88740540]
[227.35234070 -97.60910797]
[221.04933167 -83.66168213]
[208.97946167 -74.25015259]
[193.91630554 -71.53721619]
[179.32127380 -76.14628601]
[168.54818726 -87.01823425]
[154.22558594 -82.56141663]
[142.92658997 -72.69569397]
[136.57945251 -59.10474396]
[130.23233032 -45.51379395]
[124.02691650 -31.85755348]
[117.96390533 -18.13750076]
[112.18763733 -4.29428244]
[106.70059967 9.66610718]
[101.21356964 23.62649727]
[102.29513550 28.33879280]
[100.38184357 33.77667999]
[95.19696045 38.04569626]
[89.13394928 51.76575089]
[83.07093811 65.48580170]
[107.00496674 65.22716522]
[124.49375916 78.63819885]
[129.47178650 98.15858459]
[122.03268433 114.82895660]
[107.50000000 122.36296082]
[107.50000000 137.36296082]
[107.50000000 152.36296082]
[107.50000000 167.36296082]
[107.50000000 182.36296082]
[107.50000000 197.36296082]
[107.50000000 212.36296082]
[107.50000000 227.36296082]
[107.50000000 242.36296082]
[107.50000000 257.36294556]
[122.03988647 261.42425537]
[134.94427490 269.25878906]
[145.25555420 280.28512573]
[152.20857239 293.68502808]
[155.28736877 308.46420288]
[154.26348877 323.52587891]
[149.21287537 337.75241089]
[140.51036072 350.08807373]
[128.80169678 359.61749268]
[114.95575714 365.63351440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 30]
[23 29]
[24 28]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[45 126]
[46 125]
[47 124]
[48 121]
[49 120]
[50 119]
[53 118]
[54 117]
[56 116]
[57 115]
[58 114]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
