%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUACUCCGGGGGGGGGGCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAAxxxxxxxxxxUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCCCCCCCCCCCUACACUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.32766724]
[71.19830322 377.31164551]
[59.48964310 367.78222656]
[50.78712082 355.44656372]
[45.73651886 341.22003174]
[44.71262741 326.15835571]
[47.79142761 311.37918091]
[54.74444962 297.97927856]
[65.05573273 286.95294189]
[77.96011353 279.11840820]
[92.50000000 275.05709839]
[92.50000000 260.05709839]
[92.50000000 245.05711365]
[92.50000000 230.05711365]
[92.50000000 215.05711365]
[92.50000000 200.05711365]
[92.50000000 185.05711365]
[92.50000000 170.05711365]
[92.50000000 155.05711365]
[92.50000000 140.05711365]
[83.20072174 137.12959290]
[74.86284637 132.07717896]
[67.96353912 125.18902588]
[62.89764786 116.85933685]
[59.95507812 107.56481171]
[59.30423737 97.83734894]
[60.98237228 88.23366547]
[64.89344025 79.30334473]
[53.59443665 69.43762207]
[41.85678482 78.13742828]
[28.56647682 84.19127655]
[14.31079960 87.33444214]
[-0.28087664 87.43076324]
[-14.56489277 84.47852325]
[-27.91169167 78.61043549]
[-39.73356628 70.08767700]
[-49.51053619 59.28824234]
[-56.81322098 46.69020462]
[-61.32168961 32.85053635]
[-62.83949661 18.38049889]
[-61.30221558 3.91863441]
[-56.78017807 -9.89741039]
[-49.47526932 -22.45899582]
[-60.56658173 -32.55764389]
[-71.65789795 -42.65629578]
[-82.74921417 -52.75494385]
[-98.16243744 -56.32469559]
[-102.36416626 -70.61437225]
[-113.45548248 -80.71302032]
[-127.59104919 -74.95555115]
[-142.82429504 -75.91001892]
[-156.13064575 -83.38690948]
[-164.86810303 -95.90167999]
[-167.30186462 -110.96951294]
[-162.94866943 -125.59868622]
[-152.67288208 -136.88455200]
[-138.51475525 -142.58630371]
[-123.28538513 -141.57185364]
[-110.00858307 -134.04263306]
[-101.32046509 -121.49354553]
[-98.94606781 -106.41624451]
[-103.35682678 -91.80433655]
[-92.26551819 -81.70568085]
[-77.64561462 -78.85825348]
[-72.65056610 -63.84626007]
[-61.55924988 -53.74761200]
[-50.46793365 -43.64896011]
[-39.37661743 -33.55031204]
[-26.76835060 -42.43557358]
[-12.49848938 -48.30940628]
[2.72493649 -50.87703705]
[18.14585114 -50.00782013]
[32.99767685 -45.74188232]
[46.54143906 -38.28826904]
[58.10254288 -28.01472664]
[67.10436249 -15.42953205]
[73.09702301 -1.15636837]
[75.77983856 14.09659481]
[75.01644897 29.57183266]
[70.84172058 44.50009155]
[63.46015930 58.13861847]
[74.75916290 68.00434113]
[101.77589417 56.71614075]
[131.27650452 66.42277527]
[141.93814087 55.87148285]
[152.59976196 45.32019043]
[163.26138306 34.76890182]
[173.92301941 24.21761131]
[184.47430420 13.55598450]
[194.91410828 2.78517604]
[205.35392761 -7.98563242]
[215.79374695 -18.75644112]
[222.47598267 -34.33796692]
[239.29840088 -32.23027039]
[241.92999268 -15.48180294]
[226.56454468 -8.31662846]
[216.12474060 2.45418000]
[205.68492126 13.22498894]
[195.24511719 23.99579620]
[192.83251953 31.03320312]
[184.47430420 34.87923813]
[173.81268311 45.43052673]
[163.15104675 55.98181915]
[152.48942566 66.53311157]
[141.82780457 77.08439636]
[146.87655640 91.20919800]
[161.81086731 92.61150360]
[176.74516296 94.01380920]
[191.67947388 95.41611481]
[195.68620300 93.38938141]
[199.71977234 92.84038544]
[203.30046082 93.58909607]
[206.06010437 95.31488037]
[207.77908325 97.60669708]
[222.54513550 100.24555969]
[237.77593994 94.16651917]
[250.48670959 104.52838898]
[247.60169983 120.67176819]
[232.08876038 125.98973083]
[219.90628052 115.01161957]
[205.14022827 112.37275696]
[190.27717590 110.35041809]
[175.34286499 108.94811249]
[160.40855408 107.54581451]
[145.47425842 106.14350891]
[142.41075134 115.13865662]
[137.62812805 123.14389801]
[131.40020752 129.84414673]
[124.05540466 134.99397278]
[115.95995331 138.42626953]
[107.50000000 140.05711365]
[107.50000000 155.05711365]
[107.50000000 170.05711365]
[107.50000000 185.05711365]
[107.50000000 200.05711365]
[107.50000000 215.05711365]
[107.50000000 230.05711365]
[107.50000000 245.05711365]
[107.50000000 260.05709839]
[107.50000000 275.05709839]
[122.03988647 279.11840820]
[134.94427490 286.95294189]
[145.25555420 297.97927856]
[152.20857239 311.37918091]
[155.28736877 326.15835571]
[154.26348877 341.22003174]
[149.21287537 355.44656372]
[140.51036072 367.78222656]
[128.80169678 377.31164551]
[114.95575714 383.32766724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 82]
[29 81]
[43 68]
[44 67]
[45 66]
[46 65]
[48 63]
[49 62]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[89 99]
[90 98]
[91 97]
[92 96]
[106 125]
[107 124]
[108 123]
[109 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
