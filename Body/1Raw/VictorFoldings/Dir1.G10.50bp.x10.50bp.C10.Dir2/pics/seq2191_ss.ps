%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACAAACCUACCGAGGGGGGGGGGGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAAAUxxxxxxxxxxUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCCCCCCCCCCCAACAAACCUACCCA\
) } def
/len { sequence length } bind def

/coor [
[139.73768616 688.52648926]
[125.30081177 684.28698730]
[111.92727661 677.39172363]
[100.10052490 668.08984375]
[90.24809265 656.71765137]
[82.72613525 643.68627930]
[77.80656433 629.46679688]
[75.66722870 614.57318115]
[76.38545227 599.54388428]
[79.93527985 584.92211914]
[86.18837738 571.23651123]
[94.91870880 558.98181152]
[105.81067657 548.60101318]
[118.47054291 540.46929932]
[132.44065857 534.88073730]
[147.21601868 532.03729248]
[147.21601868 517.03729248]
[147.21601868 502.03726196]
[147.21601868 487.03726196]
[147.21601868 472.03726196]
[147.21601868 457.03726196]
[147.21601868 442.03726196]
[147.21601868 427.03726196]
[147.21601868 412.03726196]
[147.21601868 397.03726196]
[147.21601868 382.03726196]
[146.77703857 367.04370117]
[145.89945984 352.06939697]
[145.02186584 337.09509277]
[143.56071472 322.16641235]
[141.51821899 307.30612183]
[139.47572327 292.44583130]
[137.43321228 277.58554077]
[135.39071655 262.72525024]
[132.76998901 247.95597839]
[122.49934387 237.16879272]
[127.11967468 222.03726196]
[123.92469788 207.38148499]
[120.72972107 192.72569275]
[116.96536255 178.20571899]
[112.63735199 163.84367371]
[108.30934906 149.48162842]
[103.98134613 135.11958313]
[99.65334320 120.75753021]
[95.32534027 106.39548492]
[88.64801025 109.82502747]
[80.46743011 110.34891510]
[71.79276276 107.53489685]
[58.90104294 99.86654663]
[46.00932312 92.19819641]
[33.11760330 84.52985382]
[20.22588539 76.86150360]
[3.52194524 73.96068573]
[1.68528724 57.10651398]
[17.37235260 50.67593765]
[27.89423370 63.96978378]
[40.78595352 71.63813019]
[53.67767334 79.30648041]
[66.56938934 86.97483063]
[79.46111298 94.64317322]
[92.50000000 87.22782898]
[92.50000000 72.22782898]
[92.50000000 57.22782898]
[92.50000000 42.22782898]
[77.71169281 39.46729660]
[63.68251038 34.03620148]
[50.89029312 26.11952209]
[39.77073288 15.98689938]
[30.70256042 3.98344684]
[23.99463081 -9.48200321]
[19.87541771 -23.95082283]
[18.48521614 -38.93020630]
[19.87137985 -53.90996552]
[23.98669434 -68.37989807]
[30.69099236 -81.84715271]
[39.75592804 -93.85305023]
[50.87275696 -103.98867035]
[63.66284180 -111.90879822]
[77.69055939 -117.34367371]
[92.47811890 -120.10819244]
[107.52188110 -120.10819244]
[122.30944061 -117.34367371]
[136.33715820 -111.90879822]
[149.12724304 -103.98867035]
[160.24406433 -93.85305023]
[169.30900574 -81.84715271]
[176.01330566 -68.37989807]
[180.12861633 -53.90996552]
[181.51478577 -38.93020630]
[180.12458801 -23.95082283]
[176.00537109 -9.48200321]
[169.29743958 3.98344684]
[160.22926331 15.98689938]
[149.10971069 26.11952209]
[136.31748962 34.03620148]
[122.28830719 39.46729660]
[107.50000000 42.22782898]
[107.50000000 57.22782898]
[107.50000000 72.22782898]
[107.50000000 87.22782898]
[109.68738556 102.06748199]
[114.01538849 116.42952728]
[118.34339142 130.79158020]
[122.67139435 145.15362549]
[126.99940491 159.51567078]
[131.32740784 173.87771606]
[134.68803406 176.80609131]
[136.70750427 180.30868530]
[137.37153625 183.88285828]
[136.83398438 187.07470703]
[135.38549805 189.53071594]
[138.58049011 204.18649292]
[141.77546692 218.84228516]
[152.27462769 230.67774963]
[147.42576599 244.76098633]
[150.54783630 247.94248962]
[152.28805542 251.59188843]
[152.67137146 255.20695496]
[151.88658142 258.34716797]
[150.25100708 260.68276978]
[152.29350281 275.54306030]
[154.33601379 290.40332031]
[156.37850952 305.26361084]
[158.42100525 320.12390137]
[161.28549194 323.53915405]
[162.73585510 327.31314087]
[162.83613586 330.94708252]
[161.80888367 334.01654053]
[159.99618530 336.21749878]
[160.87376404 351.19180298]
[161.75134277 366.16610718]
[164.68295288 370.60690308]
[165.50065613 375.26116943]
[164.48437500 379.27575684]
[162.21601868 382.03726196]
[162.21601868 397.03726196]
[162.21601868 412.03726196]
[162.21601868 427.03726196]
[162.21601868 442.03726196]
[162.21601868 457.03726196]
[162.21601868 472.03726196]
[162.21601868 487.03726196]
[162.21601868 502.03726196]
[162.21601868 517.03729248]
[162.21601868 532.03729248]
[176.99137878 534.88073730]
[190.96148682 540.46929932]
[203.62135315 548.60101318]
[214.51332092 558.98181152]
[223.24366760 571.23651123]
[229.49676514 584.92211914]
[233.04658508 599.54388428]
[233.76481628 614.57318115]
[231.62547302 629.46679688]
[226.70590210 643.68627930]
[219.18394470 656.71765137]
[209.33151245 668.08984375]
[197.50476074 677.39172363]
[184.13122559 684.28698730]
[169.69435120 688.52648926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[27 131]
[28 130]
[29 129]
[30 124]
[31 123]
[32 122]
[33 121]
[34 120]
[35 115]
[37 113]
[38 112]
[39 111]
[40 106]
[41 105]
[42 104]
[43 103]
[44 102]
[45 101]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[61 100]
[62 99]
[63 98]
[64 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
