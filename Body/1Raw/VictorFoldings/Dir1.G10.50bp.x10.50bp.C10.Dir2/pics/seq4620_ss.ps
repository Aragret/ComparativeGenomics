%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUAAAUAGGGGGGGGGGAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAxxxxxxxxxxUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCCCCCCCCCCCAACUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[82.68064117 388.65997314]
[70.12241364 380.30880737]
[60.03619385 369.09637451]
[53.05599976 355.72747803]
[49.62061310 341.04248047]
[49.94599152 325.96450806]
[54.01167679 311.44137573]
[61.56209564 298.38604736]
[72.12262726 287.61914062]
[85.02941895 279.81750488]
[99.47114563 275.47155762]
[98.84716797 260.48455811]
[98.22319031 245.49752808]
[97.59921265 230.51051331]
[96.97523499 215.52349854]
[96.35125732 200.53648376]
[95.72727966 185.54946899]
[95.10330963 170.56245422]
[94.47933197 155.57543945]
[93.85535431 140.58842468]
[90.41245270 133.99356079]
[93.37757111 125.28380585]
[93.06551361 110.28704834]
[91.03335571 110.66683960]
[88.85426331 110.71919250]
[86.57600403 110.41854858]
[71.75824738 112.74965668]
[56.94049072 115.08075714]
[42.12273026 117.41186523]
[27.30497360 119.74296570]
[19.39261436 133.23106384]
[4.64415455 138.42884827]
[-9.97663498 132.88208008]
[-17.56626320 119.20979309]
[-14.54114151 103.86760712]
[-2.32963896 94.09963989]
[13.30234623 94.51802063]
[24.97386932 104.92520905]
[39.79162598 102.59410858]
[54.60938644 100.26300049]
[69.42714691 97.93190002]
[84.24490356 95.60079193]
[94.90652466 85.04950714]
[97.39164734 70.25679779]
[99.87676239 55.46408844]
[101.74437714 40.58081055]
[102.99124908 25.63272285]
[104.23812866 10.68463612]
[105.48500061 -4.26345110]
[106.73187256 -19.21153831]
[107.97875214 -34.15962601]
[109.22562408 -49.10771179]
[110.47249603 -64.05580139]
[95.77864838 -67.16931152]
[81.59090424 -72.09995270]
[68.13303375 -78.76995087]
[55.61728287 -87.07411957]
[44.24103928 -96.88148499]
[34.18373108 -108.03736877]
[25.60396957 -120.36582947]
[18.63707352 -133.67242432]
[13.39292145 -147.74729919]
[9.95421886 -162.36846924]
[8.37519932 -177.30532837]
[8.68076801 -192.32232666]
[10.86610413 -207.18258667]
[14.89674282 -221.65176392]
[20.70911407 -235.50166321]
[28.21154976 -248.51383972]
[37.28572464 -260.48306274]
[47.78852463 -271.22061157]
[59.55430603 -280.55706787]
[72.39750671 -288.34521484]
[86.11557770 -294.46224976]
[100.49214935 -298.81164551]
[115.30049133 -301.32485962]
[130.30705261 -301.96218872]
[145.27517700 -300.71365356]
[159.96876526 -297.59890747]
[174.15608215 -292.66708374]
[187.61340332 -285.99594116]
[200.12844849 -277.69070435]
[211.50386047 -267.88238525]
[221.56024170 -256.72567749]
[230.13896179 -244.39648438]
[237.10473633 -231.08929443]
[242.34770203 -217.01397705]
[245.78517151 -202.39251709]
[247.36294556 -187.45552063]
[247.05610657 -172.43856812]
[244.86952209 -157.57847595]
[240.83766174 -143.10963440]
[235.02412415 -129.26023865]
[227.52059937 -116.24868774]
[218.44541931 -104.28022003]
[207.94171143 -93.54357910]
[196.17514038 -84.20810699]
[183.33128357 -76.42102814]
[169.61270142 -70.30516052]
[155.23576355 -65.95696259]
[140.42720032 -63.44501495]
[125.42058563 -62.80892563]
[124.17371368 -47.86083603]
[122.92683411 -32.91275024]
[121.67996216 -17.96466446]
[120.43309021 -3.01657677]
[119.18621063 11.93150997]
[117.93933868 26.87959671]
[116.69246674 41.82768250]
[118.46518707 44.07818985]
[119.42331696 47.18881226]
[119.22609711 50.84161758]
[117.65835571 54.59838104]
[114.66947174 57.94920731]
[112.18435669 72.74191284]
[109.69923401 87.53462219]
[119.42372131 76.11383820]
[133.44288635 70.77877808]
[148.29991150 72.84496307]
[160.33132935 81.80291748]
[166.57044983 95.44378662]
[165.47883606 110.40400696]
[157.32565308 122.99470520]
[144.12132263 130.11126709]
[129.12173462 129.99888611]
[116.02551270 122.68527985]
[108.06227112 109.97499847]
[108.37432861 124.97174835]
[108.84236908 139.96444702]
[109.46634674 154.95146179]
[110.09032440 169.93847656]
[110.71430206 184.92549133]
[111.33827972 199.91250610]
[111.96225739 214.89952087]
[112.58623505 229.88653564]
[113.21021271 244.87356567]
[113.83418274 259.86056519]
[114.45816040 274.84759521]
[129.21116638 277.97802734]
[142.72180176 284.67977905]
[154.14077759 294.53158569]
[162.75028992 306.91412354]
[168.00914001 321.04901123]
[169.58674622 336.04772949]
[167.38394165 350.96746826]
[161.53919983 364.87033081]
[152.41992188 376.88238525]
[140.59934998 386.24856567]
[126.82053375 392.38006592]
[111.94963837 394.89144897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 128]
[23 127]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[43 116]
[44 115]
[45 114]
[46 109]
[47 108]
[48 107]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
