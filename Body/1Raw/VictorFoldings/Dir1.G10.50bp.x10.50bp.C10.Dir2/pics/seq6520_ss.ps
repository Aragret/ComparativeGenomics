%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGGAACAGGGGGGGGGGGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCxxxxxxxxxxAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUCCCCCCCCCCAGCAGGAAUA\
) } def
/len { sequence length } bind def

/coor [
[58.06175613 396.29113770]
[44.21581650 390.27511597]
[32.50715637 380.74569702]
[23.80463219 368.41003418]
[18.75403023 354.18350220]
[17.73013878 339.12182617]
[20.80893707 324.34265137]
[27.76195908 310.94271851]
[38.07324219 299.91641235]
[50.97762299 292.08187866]
[65.51750946 288.02056885]
[65.51750946 273.02056885]
[65.51750946 258.02056885]
[65.51750946 243.02058411]
[65.51750946 228.02058411]
[65.51750946 213.02058411]
[65.51750946 198.02058411]
[65.51750946 183.02058411]
[65.51750946 168.02058411]
[65.51750946 153.02058411]
[81.74700165 89.18830872]
[74.02291870 76.32990265]
[66.29882812 63.47150040]
[58.57474518 50.61309814]
[50.85066223 37.75469589]
[43.12657547 24.89629555]
[37.45051575 21.30605316]
[34.87504959 16.14870071]
[35.36148453 11.33840942]
[28.17897606 -1.83017337]
[20.99646759 -14.99875546]
[8.21911049 -22.85618210]
[-6.77358580 -23.32422447]
[-21.76628113 -23.79226494]
[-31.16747284 -11.44733906]
[-46.03900909 -7.01822138]
[-60.66247559 -12.20799923]
[-69.41485596 -25.02109528]
[-68.93067932 -40.53061676]
[-59.39612198 -52.77283096]
[-44.47741699 -57.04035950]
[-29.91110802 -51.69225311]
[-21.29823875 -38.78496170]
[-6.30554342 -38.31692123]
[8.68715286 -37.84887695]
[14.46342468 -51.69209671]
[3.58459973 -62.01929855]
[-7.29422522 -72.34650421]
[-18.17304993 -82.67371368]
[-29.05187607 -93.00091553]
[-43.52033997 -88.00870514]
[-58.64977264 -90.32361603]
[-70.96354675 -99.41369629]
[-77.63204193 -113.19011688]
[-77.12288666 -128.48715210]
[-69.55308533 -141.78965759]
[-56.66211700 -150.04081726]
[-41.41223907 -151.34457397]
[-27.30775642 -145.40133667]
[-17.58977890 -133.57679749]
[-14.49142265 -118.58818054]
[-18.72467041 -103.87973785]
[-7.84584570 -93.55253601]
[3.03297949 -83.22533417]
[13.91180515 -72.89812469]
[24.79063034 -62.57091904]
[39.15881348 -66.87850189]
[42.56179047 -81.48739624]
[45.96477127 -96.09629059]
[32.58449936 -103.05467987]
[21.35562134 -113.12260437]
[12.98399734 -125.66719055]
[7.99587297 -139.89988708]
[6.70480585 -154.92599487]
[9.19195366 -169.80096436]
[15.30097294 -183.58975220]
[24.64784431 -195.42558289]
[36.64501572 -204.56443787]
[50.53833771 -210.43183899]
[65.45446014 -212.65898132]
[80.45574188 -211.10583496]
[94.59919739 -205.87004089]
[106.99575043 -197.28073120]
[116.86614990 -185.87782288]
[123.58992004 -172.37812805]
[126.74441528 -157.63024902]
[126.13133240 -142.56124878]
[121.78921509 -128.11836243]
[113.99101257 -115.20950317]
[103.22692108 -104.64611816]
[90.17357635 -97.09223175]
[75.65153503 -93.02268982]
[60.57366180 -92.69331360]
[57.17068481 -78.08441925]
[53.76770782 -63.47552872]
[34.16505051 -22.18126488]
[41.34756088 -9.01268196]
[48.53006744 4.15590048]
[55.98497772 17.17221069]
[63.70906448 30.03061295]
[71.43315125 42.88901520]
[79.15723419 55.74741745]
[86.88131714 68.60581970]
[94.60540009 81.46421814]
[94.82401276 66.46581268]
[106.04477692 56.51119614]
[120.96237183 58.08136749]
[129.86462402 70.15406036]
[126.95568085 84.86929321]
[114.12986755 92.64658356]
[129.12905884 92.80261993]
[143.14222717 84.28423309]
[157.39404297 92.39705658]
[157.22344971 108.79531097]
[142.80593872 116.60988617]
[128.97302246 107.80181122]
[113.97383118 107.64577484]
[111.02835083 122.35373688]
[124.93090057 127.98569489]
[139.38497925 121.59389496]
[154.09490967 127.37263489]
[160.33352661 141.89349365]
[154.39959717 156.54148865]
[139.81359863 162.62623596]
[125.22914886 156.53776550]
[119.29895020 141.88824463]
[105.39639282 136.25628662]
[99.17667389 140.44735718]
[100.21640778 155.41128540]
[86.73722839 148.82951355]
[80.51750946 153.02058411]
[80.51750946 168.02058411]
[80.51750946 183.02058411]
[80.51750946 198.02058411]
[80.51750946 213.02058411]
[80.51750946 228.02058411]
[80.51750946 243.02058411]
[80.51750946 258.02056885]
[80.51750946 273.02056885]
[80.51750946 288.02056885]
[95.05739594 292.08187866]
[107.96177673 299.91641235]
[118.27306366 310.94271851]
[125.22608185 324.34265137]
[128.30488586 339.12182617]
[127.28099060 354.18350220]
[122.23039246 368.41003418]
[113.52786255 380.74569702]
[101.81920624 390.27511597]
[87.97326660 396.29113770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[29 98]
[30 97]
[31 96]
[32 45]
[33 44]
[34 43]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[67 95]
[68 94]
[69 93]
[110 117]
[111 116]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
