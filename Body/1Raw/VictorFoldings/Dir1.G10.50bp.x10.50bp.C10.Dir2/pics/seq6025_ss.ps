%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCCCACUCUGCAGGGGGGGGGGUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACxxxxxxxxxxGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAAAUACCCCCCCCCCAAAUCCCCACUAUGCA\
) } def
/len { sequence length } bind def

/coor [
[85.01929474 455.92395020]
[70.52014923 451.92211914]
[56.96866608 445.39547729]
[44.80046082 436.55383301]
[34.40669250 425.68142700]
[26.12147713 413.12774658]
[20.21115112 399.29632568]
[16.86570549 384.63183594]
[16.19268417 369.60562134]
[18.21372032 354.70074463]
[22.86384773 340.39633179]
[29.99358368 327.15222168]
[39.37373734 315.39413452]
[50.70277023 305.50006104]
[63.61650848 297.78805542]
[77.69982147 292.50601196]
[92.50000000 289.82373047]
[92.50000000 274.82373047]
[92.50000000 259.82373047]
[92.50000000 244.82373047]
[92.50000000 229.82373047]
[92.50000000 214.82373047]
[92.50000000 199.82373047]
[92.50000000 184.82373047]
[92.50000000 169.82373047]
[92.50000000 154.82373047]
[92.50000000 139.82373047]
[82.03594208 136.32453918]
[72.90363312 130.13247681]
[65.78006744 121.70658112]
[61.19335938 111.67150116]
[46.27755737 113.25859070]
[31.36175537 114.84568787]
[16.44595337 116.43277740]
[7.86890554 129.50827026]
[-7.12105799 133.96191406]
[-21.44613457 127.69085693]
[-28.34246254 113.65608978]
[-24.55380440 98.48439789]
[-11.86905003 89.33940125]
[3.72244740 90.53907776]
[14.85886002 101.51698303]
[29.77466202 99.92988586]
[44.69046402 98.34278870]
[59.60626602 96.75569916]
[60.80558777 89.70545959]
[63.22558975 82.97583771]
[66.79089355 76.77642059]
[71.39047241 71.30027771]
[76.88106537 66.71796417]
[83.09167480 63.17218399]
[89.82888031 60.77338028]
[96.88285828 59.59625244]
[104.03391266 59.67746353]
[111.05934143 61.01448441]
[117.75302887 47.59082794]
[124.44670868 34.16717148]
[131.14039612 20.74351311]
[137.83409119 7.31985664]
[125.05556488 -0.55514461]
[113.03440094 -9.54391193]
[101.86739349 -19.57407188]
[91.64443970 -30.56486511]
[82.44786072 -42.42779922]
[74.35169983 -55.06735611]
[67.42115021 -68.38177490]
[61.71200180 -82.26384735]
[57.27023315 -96.60179901]
[54.13159943 -111.28018951]
[52.32137680 -126.18083954]
[51.85413742 -141.18377686]
[52.73364639 -156.16818237]
[54.95281601 -171.01344299]
[58.49378586 -185.60000610]
[63.32804108 -199.81042480]
[69.41666412 -213.53030396]
[76.71062469 -226.64915466]
[85.15119934 -239.06137085]
[94.67041779 -250.66699219]
[105.19165802 -261.37258911]
[116.63018799 -271.09197998]
[128.89390564 -279.74685669]
[141.88409424 -287.26760864]
[155.49613953 -293.59359741]
[169.62045288 -298.67398071]
[184.14331055 -302.46777344]
[198.94776917 -304.94445801]
[213.91465759 -306.08410645]
[228.92343140 -305.87753296]
[243.85328674 -304.32641602]
[258.58398438 -301.44320679]
[272.99691772 -297.25115967]
[286.97607422 -291.78399658]
[300.40884399 -285.08575439]
[313.18713379 -277.21038818]
[325.20800781 -268.22125244]
[336.37472534 -258.19073486]
[346.59735107 -247.19963074]
[355.79354858 -235.33642578]
[363.88931274 -222.69660950]
[370.81948853 -209.38198853]
[376.52819824 -195.49974060]
[380.96954346 -181.16165161]
[384.10772705 -166.48316956]
[385.91748047 -151.58245850]
[386.38427734 -136.57951355]
[385.50430298 -121.59513092]
[383.28466797 -106.74994659]
[379.74325562 -92.16349030]
[374.90856934 -77.95320892]
[368.81951904 -64.23352051]
[361.52517700 -51.11488724]
[353.08422852 -38.70293427]
[343.56463623 -27.09759903]
[333.04309082 -16.39232063]
[321.60424805 -6.67329311]
[309.34027100 1.98122942]
[296.34985352 9.50156403]
[282.73760986 15.82716084]
[268.61312866 20.90708923]
[254.09016418 24.70044518]
[239.28562927 27.17668915]
[224.31871033 28.31588364]
[209.30993652 28.10885429]
[194.38014221 26.55726814]
[179.64953613 23.67362022]
[165.23670959 19.48112679]
[151.25773621 14.01354313]
[144.56405640 27.43720055]
[137.87037659 40.86085510]
[131.17668152 54.28451538]
[124.48299408 67.70816803]
[138.13049316 86.27976227]
[139.44479370 109.28913116]
[128.00077820 129.29394531]
[107.50000000 139.82373047]
[107.50000000 154.82373047]
[107.50000000 169.82373047]
[107.50000000 184.82373047]
[107.50000000 199.82373047]
[107.50000000 214.82373047]
[107.50000000 229.82373047]
[107.50000000 244.82373047]
[107.50000000 259.82373047]
[107.50000000 274.82373047]
[107.50000000 289.82373047]
[122.30017853 292.50601196]
[136.38348389 297.78805542]
[149.29722595 305.50006104]
[160.62626648 315.39413452]
[170.00642395 327.15222168]
[177.13615417 340.39633179]
[181.78628540 354.70074463]
[183.80731201 369.60562134]
[183.13429260 384.63183594]
[179.78884888 399.29632568]
[173.87852478 413.12774658]
[165.59330750 425.68142700]
[155.19953918 436.55383301]
[143.03132629 445.39547729]
[129.47984314 451.92211914]
[114.98070526 455.92395020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
[31 45]
[32 44]
[33 43]
[34 42]
[55 132]
[56 131]
[57 130]
[58 129]
[59 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
