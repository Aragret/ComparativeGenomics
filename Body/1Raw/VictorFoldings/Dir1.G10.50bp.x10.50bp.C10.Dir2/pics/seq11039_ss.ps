%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUCACGGGGGGGGGGCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUxxxxxxxxxxUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCCCCCCCCCCCACCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[109.06404114 446.98437500]
[95.84384918 439.71191406]
[84.95703888 429.26492310]
[77.14591217 416.35565186]
[72.94303131 401.86434937]
[72.63495636 386.77902222]
[76.24269867 372.12817383]
[83.52027130 358.91079712]
[93.97148132 348.02801514]
[106.88374329 340.22189331]
[121.37667847 336.02459717]
[121.06462097 321.02783203]
[120.75256348 306.03109741]
[120.44051361 291.03433228]
[120.12845612 276.03759766]
[119.81639862 261.04083252]
[119.50434113 246.04408264]
[119.19228363 231.04731750]
[118.88022614 216.05056763]
[118.56817627 201.05381775]
[113.96260834 186.77835083]
[105.45151520 174.42678833]
[96.94042969 162.07521057]
[88.42933655 149.72363281]
[79.91825104 137.37207031]
[66.07502747 131.59579468]
[51.30897522 134.23464966]
[47.25872803 148.95057678]
[37.21811676 160.44618225]
[23.18071175 166.43901062]
[7.93364668 165.73916626]
[-5.49576092 158.48564148]
[-14.44109249 146.11859131]
[-17.12624550 131.09352112]
[-13.01808071 116.39366913]
[-2.93227839 104.93769836]
[11.12861919 99.00019073]
[26.37281036 99.76006317]
[39.77354813 107.06642151]
[48.67010880 119.46859741]
[63.43616486 116.82973480]
[65.61299896 101.98853302]
[52.22671890 95.22041321]
[38.84043121 88.45230103]
[25.45414734 81.68418884]
[12.06786346 74.91606903]
[-3.56169081 78.53499603]
[-16.04595566 68.45914459]
[-15.80807018 52.41785812]
[-3.03052115 42.71662903]
[12.48484993 46.79741669]
[18.83597755 61.52978516]
[32.22226334 68.29790497]
[45.60854721 75.06601715]
[58.99483109 81.83412933]
[72.38111877 88.60224915]
[82.84508514 82.09609222]
[93.26488495 81.47249603]
[93.88886261 66.48548126]
[94.35690308 51.49278641]
[94.66896057 36.49603271]
[94.98101807 21.49927902]
[95.29307556 6.50252533]
[80.70313263 2.73020935]
[67.37670898 -4.30562878]
[56.03246689 -14.22555637]
[47.28219604 -26.49460220]
[41.59778595 -40.45111465]
[39.28579330 -55.34243393]
[40.47089386 -70.36549377]
[45.08917999 -84.71011353]
[52.89159393 -97.60270691]
[63.45735931 -108.34799957]
[76.21668243 -116.36650848]
[90.48146057 -121.22579956]
[105.48242188 -122.66381836]
[120.41058350 -120.60302734]
[134.46087646 -115.15454865]
[146.87559509 -106.61221313]
[156.98522949 -95.43669891]
[164.24456787 -82.23069763]
[168.26214600 -67.70637512]
[168.82128906 -52.64702606]
[165.89183044 -37.86477280]
[159.63177490 -24.15680313]
[150.37870789 -12.26237583]
[138.63163757 -2.82293844]
[125.02406311 3.65245032]
[110.28982544 6.81458139]
[109.97777557 21.81133461]
[109.66571808 36.80809021]
[109.35366058 51.80484390]
[112.37849426 58.60160828]
[108.87587738 67.10945892]
[108.25189972 82.09647369]
[123.31981659 108.42777252]
[92.26982117 128.86097717]
[100.78090668 141.21253967]
[109.29199982 153.56411743]
[117.80309296 165.91569519]
[126.31417847 178.26725769]
[130.29963684 172.45402527]
[136.54127502 167.73701477]
[144.70806885 164.79351807]
[154.28851318 164.20095825]
[169.28770447 164.04492188]
[184.28689575 163.88888550]
[199.28608704 163.73284912]
[214.28526306 163.57681274]
[224.07128906 151.37976074]
[239.41793823 148.37733459]
[253.07897949 155.98718262]
[258.60409546 170.61616516]
[253.38452148 185.35691833]
[239.88473511 193.24931335]
[224.47895813 190.56680298]
[214.44129944 178.57598877]
[199.44212341 178.73202515]
[184.44293213 178.88806152]
[169.44374084 179.04409790]
[154.44454956 179.20013428]
[149.22463989 184.58554077]
[162.46247864 191.63960266]
[175.94290161 198.21823120]
[178.53196716 212.99310303]
[168.09169006 223.76345825]
[153.24340820 221.63539124]
[146.24851990 208.36763000]
[138.78483582 195.35635376]
[133.56492615 200.74176025]
[133.87698364 215.73851013]
[134.18904114 230.73526001]
[134.50109863 245.73202515]
[134.81315613 260.72875977]
[135.12521362 275.72552490]
[135.43727112 290.72229004]
[135.74931335 305.71902466]
[136.06137085 320.71578979]
[136.37342834 335.71255493]
[151.02842712 339.30331421]
[164.25422668 346.56558228]
[175.14910889 357.00415039]
[182.97019958 369.90737915]
[187.18426514 384.39544678]
[187.50399780 399.48052979]
[183.90756226 414.13415527]
[176.64019775 427.35714722]
[166.19740295 438.24798584]
[153.29116821 446.06408691]
[138.80148315 450.27258301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 101]
[22 100]
[23 99]
[24 98]
[25 97]
[26 41]
[27 40]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[58 95]
[59 94]
[60 92]
[61 91]
[62 90]
[63 89]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
