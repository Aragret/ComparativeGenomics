%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUACCUGACGGGGGGGGGGUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCAxxxxxxxxxxUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCCCCCCCCCCCAACUACCUAAC\
) } def
/len { sequence length } bind def

/coor [
[81.37705231 356.26953125]
[68.45789337 348.51116943]
[57.67659760 337.98214722]
[49.61458206 325.25027466]
[44.70662308 311.00216675]
[43.21739578 296.00619507]
[45.22722244 281.07107544]
[50.62770462 267.00228882]
[59.12760925 254.55847168]
[70.26854706 244.41075134]
[83.44969177 237.10635376]
[97.96021271 233.03923035]
[97.34438324 218.05187988]
[96.72856140 203.06451416]
[96.11273193 188.07716370]
[95.49691010 173.08981323]
[94.88108063 158.10246277]
[94.26525879 143.11511230]
[93.64942932 128.12774658]
[93.03360748 113.14039612]
[89.52443695 98.55664825]
[83.25503540 84.92967224]
[76.98562622 71.30268860]
[70.71622467 57.67571259]
[64.44681549 44.04873276]
[58.17741394 30.42175484]
[49.77010345 32.29851913]
[41.18134689 32.88703918]
[32.60727310 32.17549133]
[24.24341965 30.18171501]
[16.28030014 26.95277977]
[8.89904118 22.56386948]
[2.26727962 17.11653328]
[-3.46465707 10.73633289]
[-8.16715145 3.56995511]
[-11.73422813 -4.21816444]
[-14.08594227 -12.44961357]
[-15.17017078 -20.93609047]
[-14.96376705 -29.48371315]
[-13.47304916 -37.89744186]
[-27.40376663 -43.45938110]
[-41.33448029 -49.02131653]
[-55.26519775 -54.58325577]
[-68.31822205 -46.19289017]
[-83.80811310 -47.11092758]
[-95.77870178 -56.98435974]
[-99.62704468 -72.01665497]
[-93.87337494 -86.42758942]
[-80.73010254 -94.67585754]
[-65.25107574 -93.58983612]
[-53.38830566 -83.58712769]
[-49.70326233 -68.51396942]
[-35.77254486 -62.95203400]
[-21.84182930 -57.39009857]
[-7.91111231 -51.82815933]
[-3.42492914 -58.60409164]
[1.98622859 -64.66696930]
[8.21059418 -69.89156342]
[15.11960411 -74.16996002]
[22.57055473 -77.41379547]
[30.40954781 -79.55606079]
[38.47467041 -80.55251312]
[46.59933853 -80.38256836]
[49.95859909 -95.00157166]
[53.31785583 -109.62058258]
[56.67711639 -124.23958588]
[46.10391998 -113.59968567]
[32.68898392 -106.88853455]
[17.83405685 -104.80740356]
[3.09135175 -107.57373810]
[-9.99864388 -114.89849091]
[-20.06813431 -126.01628876]
[-26.06494522 -139.76541138]
[-27.36245918 -154.70918274]
[-23.82509613 -169.28611755]
[-15.82248116 -181.97305298]
[-4.19082069 -191.44429016]
[9.85447598 -196.71018982]
[24.84579277 -197.22048950]
[39.21666336 -192.92187500]
[51.46545792 -184.26353455]
[60.31227493 -172.15014648]
[64.83269501 -157.84750366]
[64.55447388 -142.85058594]
[72.71113586 -155.43901062]
[80.86780548 -168.02745056]
[89.02446747 -180.61589050]
[97.18113708 -193.20433044]
[97.48175812 -209.60072327]
[111.96077728 -217.30073547]
[125.72341919 -208.38323975]
[124.61186218 -192.02180481]
[109.76957703 -185.04766846]
[101.61290741 -172.45922852]
[93.45624542 -159.87078857]
[85.29957581 -147.28234863]
[77.14291382 -134.69390869]
[71.29611969 -120.88033295]
[67.93686676 -106.26132202]
[64.57760620 -91.64231873]
[61.21834564 -77.02330780]
[82.10234833 -63.43065643]
[95.14688873 -42.14881516]
[97.79121399 -17.28391075]
[89.48544312 6.34769487]
[71.80438995 24.15234947]
[78.07379913 37.77932739]
[84.34320068 51.40630722]
[90.61260986 65.03328705]
[96.88201141 78.66026306]
[103.15142059 92.28724670]
[115.67888641 81.37533569]
[134.21128845 78.58821869]
[148.86401367 81.79721832]
[163.51673889 85.00621033]
[178.16946411 88.21520996]
[190.43977356 78.52121735]
[206.06895447 79.03407288]
[217.67735291 89.51161194]
[219.78387451 105.00666046]
[211.39385986 118.20293427]
[196.46882629 122.86956024]
[182.05592346 116.80309296]
[174.96046448 102.86793518]
[160.30773926 99.65893555]
[145.65501404 96.44994354]
[131.00228882 93.24094391]
[125.25695801 98.06185150]
[127.86170959 112.83396149]
[113.76629639 107.70366669]
[108.02095795 112.52457428]
[108.63678741 127.51192474]
[109.25260925 142.49928284]
[109.86843872 157.48663330]
[110.48426056 172.47398376]
[111.10009003 187.46133423]
[111.71591187 202.44869995]
[112.33173370 217.43605042]
[112.94756317 232.42340088]
[127.74283600 235.28636169]
[141.47880554 241.48474121]
[153.41471863 250.68424988]
[162.90686035 262.38876343]
[169.44335938 275.96710205]
[172.67169189 290.68695068]
[172.41777039 305.75454712]
[168.69528198 320.35726929]
[161.70498657 333.70764160]
[151.82383728 345.08569336]
[139.58473206 353.87777710]
[125.64771271 359.60980225]
[110.76436615 361.97262573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 111]
[22 110]
[23 109]
[24 108]
[25 107]
[26 106]
[40 55]
[41 54]
[42 53]
[43 52]
[63 101]
[64 100]
[65 99]
[66 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
