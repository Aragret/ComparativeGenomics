%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAACACCGGGGGGGGGGAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAxxxxxxxxxxCCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCCCCCCCCCCCUAACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.99320984 352.75820923]
[72.14727020 346.74218750]
[60.43861008 337.21276855]
[51.73608398 324.87710571]
[46.68548203 310.65057373]
[45.66159058 295.58889771]
[48.74039078 280.80972290]
[55.69341278 267.40982056]
[66.00469971 256.38348389]
[78.90908051 248.54896545]
[93.44896698 244.48765564]
[93.44896698 229.48765564]
[93.44896698 214.48765564]
[93.44896698 199.48765564]
[93.44896698 184.48765564]
[93.44896698 169.48765564]
[93.44896698 154.48765564]
[93.44896698 139.48765564]
[93.44896698 124.48765564]
[93.44896698 109.48765564]
[90.95404053 108.73476410]
[88.52822876 107.34185028]
[73.52903748 107.49788666]
[58.52985001 107.65392303]
[44.81090927 115.53435516]
[32.00384140 107.92987061]
[17.00465202 108.08590698]
[11.03588295 111.16507721]
[5.28430557 110.77692413]
[1.38138473 107.92337799]
[-13.61131096 107.45533752]
[-28.60400772 106.98729706]
[-43.59670258 106.51924896]
[-51.61913300 119.61643219]
[-65.12300110 126.93360901]
[-80.47584534 126.50248718]
[-93.54781342 118.43904877]
[-100.82262421 104.91230774]
[-100.34338379 89.56089020]
[-92.23900604 76.51425934]
[-78.68952942 69.28188324]
[-63.33969498 69.80924225]
[-50.31852722 77.95447540]
[-43.12866211 91.52655792]
[-28.13596535 91.99459839]
[-13.14326954 92.46263885]
[1.84942675 92.93067932]
[16.84861565 93.08671570]
[31.84780312 92.93067932]
[44.49390030 85.06140900]
[58.37381363 92.65473175]
[73.37300110 92.49869537]
[88.37219238 92.34265900]
[101.89637756 85.85449219]
[111.40473938 74.25315094]
[120.91309357 62.65180969]
[110.16509247 52.17507935]
[100.35752106 40.81317139]
[91.56298065 28.65021324]
[83.84660339 15.77625370]
[77.26549530 2.28660798]
[71.86840057 -11.71884823]
[67.69527435 -26.13642120]
[64.77700806 -40.85936737]
[63.13520813 -55.77868271]
[62.78203583 -70.78390503]
[63.72010422 -85.76393890]
[65.94246674 -100.60787964]
[69.43266296 -115.20582581]
[74.16486359 -129.44969177]
[80.10402679 -143.23402405]
[87.20618439 -156.45675659]
[95.41874695 -169.02000427]
[104.68091583 -180.83074951]
[114.92411041 -191.80154419]
[126.07250214 -201.85116577]
[138.04354858 -210.90521240]
[150.74859619 -218.89663696]
[164.09361267 -225.76628113]
[177.97978210 -231.46328735]
[192.30429077 -235.94546509]
[206.96107483 -239.17964172]
[221.84164429 -241.14187622]
[236.83580017 -241.81762695]
[251.83255005 -241.20188904]
[266.72082520 -239.29922485]
[281.39044189 -236.12373352]
[295.73278809 -231.69889832]
[309.64163208 -226.05751038]
[323.01403809 -219.24133301]
[335.75097656 -211.30081177]
[347.75814819 -202.29475403]
[358.94665527 -192.28982544]
[369.23367310 -181.36010742]
[378.54302979 -169.58651733]
[386.80581665 -157.05624390]
[393.96081543 -143.86203003]
[399.95510864 -130.10157776]
[404.74426270 -115.87675476]
[408.29287720 -101.29290009]
[410.57461548 -86.45796967]
[411.57263184 -71.48181152]
[411.27947998 -56.47529221]
[409.69741821 -41.54953003]
[406.83810425 -26.81502151]
[402.72268677 -12.38086224]
[397.38168335 1.64607966]
[390.85461426 15.16195393]
[383.18981934 28.06669044]
[374.44403076 40.26474762]
[364.68200684 51.66580963]
[353.97601318 62.18547058]
[342.40533447 71.74584198]
[330.05560303 80.27613831]
[317.01831055 87.71321106]
[303.38992310 94.00199890]
[289.27139282 99.09592438]
[274.76721191 102.95729065]
[259.98477173 105.55750275]
[245.03352356 106.87731171]
[230.02416992 106.90693665]
[215.06784058 105.64617157]
[200.27525330 103.10433960]
[185.75595093 99.30027008]
[171.61740112 94.26211548]
[157.96429443 88.02719116]
[144.89773560 80.64164734]
[132.51443481 72.16017151]
[123.00608063 83.76151276]
[113.49771881 95.36285400]
[108.44896698 109.48765564]
[108.44896698 124.48765564]
[108.44896698 139.48765564]
[108.44896698 154.48765564]
[108.44896698 169.48765564]
[108.44896698 184.48765564]
[108.44896698 199.48765564]
[108.44896698 214.48765564]
[108.44896698 229.48765564]
[108.44896698 244.48765564]
[122.98885345 248.54896545]
[135.89323425 256.38348389]
[146.20451355 267.40982056]
[153.15753174 280.80972290]
[156.23634338 295.58889771]
[155.21244812 310.65057373]
[150.16184998 324.87710571]
[141.45932007 337.21276855]
[129.75065613 346.74218750]
[115.90471649 352.75820923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 53]
[23 52]
[24 51]
[26 49]
[27 48]
[30 47]
[31 46]
[32 45]
[33 44]
[54 130]
[55 129]
[56 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
