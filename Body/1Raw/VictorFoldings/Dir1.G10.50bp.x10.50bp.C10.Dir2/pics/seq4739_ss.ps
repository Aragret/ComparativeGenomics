%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUAGAAGGGGGGGGGGAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGxxxxxxxxxxCACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGACCCCCCCCCCAGGCUUAGAA\
) } def
/len { sequence length } bind def

/coor [
[91.79913330 364.00845337]
[77.95319366 357.99243164]
[66.24452972 348.46301270]
[57.54200745 336.12734985]
[52.49140549 321.90081787]
[51.46751404 306.83914185]
[54.54631424 292.05999756]
[61.49933624 278.66006470]
[71.81062317 267.63372803]
[84.71500397 259.79922485]
[99.25489044 255.73789978]
[99.25489044 240.73789978]
[99.25489044 225.73789978]
[99.25489044 210.73789978]
[99.25489044 195.73789978]
[99.25489044 180.73789978]
[99.25489044 165.73789978]
[99.25489044 150.73789978]
[99.25489044 135.73789978]
[99.25489044 120.73790741]
[87.17489624 111.84555817]
[72.85230255 116.30236816]
[58.52970505 120.75918579]
[44.20710754 125.21600342]
[29.88451004 129.67282104]
[26.58224869 144.67250061]
[16.21072197 156.00065613]
[1.55981553 160.61004639]
[-13.42944813 157.26078796]
[-24.72503281 146.85380554]
[-29.28848267 132.18852234]
[-25.89225388 117.20983124]
[-15.44991302 105.94692230]
[-0.77039868 101.42946625]
[14.19757366 104.87262726]
[25.42769432 115.35021973]
[39.75029373 110.89340210]
[54.07289124 106.43659210]
[68.39548492 101.97977448]
[82.71808624 97.52295685]
[93.70375061 87.30947876]
[99.19078064 73.34909058]
[104.67781067 59.38869858]
[91.16001892 52.87091064]
[78.16710663 45.36115265]
[65.77173615 36.90143204]
[54.04322052 27.53905106]
[43.04715729 17.32637215]
[32.84503937 6.32050896]
[23.49392509 -5.41698885]
[15.04610634 -17.82047844]
[7.54882860 -30.82059669]
[1.04402113 -44.34463882]
[-4.43193913 -58.31697083]
[-8.84842777 -72.65945435]
[-12.18074512 -87.29187775]
[-14.41025639 -102.13241577]
[-15.52449322 -117.09806824]
[-15.51722336 -132.10513306]
[-14.38848686 -147.06970215]
[-12.14459801 -161.90806580]
[-8.79810429 -176.53726196]
[-4.36772156 -190.87545776]
[1.12177384 -204.84246826]
[7.63968182 -218.36021423]
[15.14955139 -231.35305786]
[23.60938454 -243.74835205]
[32.97186661 -255.47679138]
[43.18464279 -266.47274780]
[54.19059753 -276.67477417]
[65.92817688 -286.02578735]
[78.33174133 -294.47351074]
[91.33192444 -301.97067261]
[104.85602570 -308.47534180]
[118.82839966 -313.95120239]
[133.17092896 -318.36755371]
[147.80337524 -321.69973755]
[162.64393616 -323.92910767]
[177.60958862 -325.04321289]
[192.61666870 -325.03582764]
[207.58122253 -323.90695190]
[222.41957092 -321.66293335]
[237.04872131 -318.31631470]
[251.38688660 -313.88580322]
[265.35385132 -308.39617920]
[278.87152100 -301.87814331]
[291.86431885 -294.36816406]
[304.25955200 -285.90823364]
[315.98788452 -276.54565430]
[326.98376465 -266.33276367]
[337.18569946 -255.32672119]
[346.53659058 -243.58906555]
[354.98419189 -231.18542480]
[362.48126221 -218.18518066]
[368.98580933 -204.66102600]
[374.46154785 -190.68859863]
[378.87777710 -176.34602356]
[382.20983887 -161.71354675]
[384.43908691 -146.87297058]
[385.55303955 -131.90730286]
[385.54553223 -116.90023041]
[384.41650391 -101.93568420]
[382.17236328 -87.09735870]
[378.82562256 -72.46823120]
[374.39498901 -58.13010788]
[368.90524292 -44.16318512]
[362.38708496 -30.64556694]
[354.87698364 -17.65285301]
[346.41693115 -5.25770235]
[337.05426025 6.47056437]
[326.84127808 17.46635818]
[315.83514404 27.66818237]
[304.09741211 37.01898956]
[291.69369507 45.46648026]
[278.69338989 52.96341324]
[265.16915894 59.46786118]
[251.19668579 64.94345093]
[236.85408020 69.35956573]
[222.22157288 72.69149017]
[207.38098145 74.92060852]
[192.41529846 76.03445435]
[177.40823364 76.02678680]
[162.44369507 74.89765167]
[147.60537720 72.65337372]
[132.97628784 69.30648804]
[118.63819885 64.87573242]
[113.15116882 78.83612061]
[107.66413879 92.79650879]
[115.15121460 97.24157715]
[118.72650909 107.79083252]
[114.25489044 120.73790741]
[114.25489044 135.73789978]
[114.25489044 150.73789978]
[114.25489044 165.73789978]
[114.25489044 180.73789978]
[114.25489044 195.73789978]
[114.25489044 210.73789978]
[114.25489044 225.73789978]
[114.25489044 240.73789978]
[114.25489044 255.73789978]
[128.79476929 259.79922485]
[141.69915771 267.63372803]
[152.01043701 278.66006470]
[158.96345520 292.05999756]
[162.04226685 306.83914185]
[161.01837158 321.90081787]
[155.96777344 336.12734985]
[147.26524353 348.46301270]
[135.55657959 357.99243164]
[121.71063995 364.00845337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[41 128]
[42 127]
[43 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
