%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCUGACUUCCCUGGGGGGGGGGAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUxxxxxxxxxxACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCCCCCCCCCCCACCCCUGACUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[32.25864410 325.05062866]
[21.11141014 321.38937378]
[10.16078758 317.17639160]
[-0.56593037 312.42214966]
[-11.04200935 307.13845825]
[-21.24134064 301.33853149]
[-31.13850212 295.03683472]
[-40.70883179 288.24902344]
[-49.92847443 280.99206543]
[-58.77445221 273.28399658]
[-67.22471619 265.14407349]
[-75.25821686 256.59255981]
[-82.85491943 247.65077209]
[-89.99589539 238.34098816]
[-96.66334534 228.68643188]
[-102.84066010 218.71115112]
[-116.02175140 225.87068176]
[-129.20283508 233.03019714]
[-137.63656616 246.41612244]
[-152.51354980 245.69180298]
[-165.69464111 252.85131836]
[-178.87574768 260.01083374]
[-192.05683899 267.17037964]
[-205.23793030 274.32989502]
[-218.41902161 281.48941040]
[-226.51921082 295.74841309]
[-242.91761780 295.59234619]
[-250.74496460 281.18176270]
[-241.94914246 267.34103394]
[-225.57853699 268.30831909]
[-212.39744568 261.14880371]
[-199.21635437 253.98927307]
[-186.03526306 246.82975769]
[-172.85417175 239.67022705]
[-159.67308044 232.51071167]
[-152.18214417 219.63688660]
[-136.36236572 219.84910583]
[-123.18127441 212.68959045]
[-110.00018311 205.53005981]
[-118.54823303 186.44848633]
[-125.36656189 166.68270874]
[-130.40119934 146.38917542]
[-133.61231995 125.72848511]
[-134.97448730 104.86415863]
[-134.47692871 83.96134186]
[-132.12358093 63.18545914]
[-127.93308258 42.70094681]
[-121.93857574 22.66993713]
[-114.18752289 3.25096178]
[-104.74125671 -15.40228462]
[-93.67455292 -33.14216995]
[-105.75798798 -42.02983475]
[-117.84142303 -50.91750336]
[-129.92486572 -59.80516815]
[-146.27468872 -61.07602310]
[-153.10394287 -75.98552704]
[-143.38726807 -89.19606018]
[-127.12034607 -87.11775970]
[-121.03719330 -71.88860321]
[-108.95375824 -63.00093460]
[-96.87032318 -54.11326981]
[-84.78688812 -45.22560501]
[-76.24976349 -55.47568893]
[-67.14485168 -65.22490692]
[-57.50147247 -74.44184113]
[-47.35070038 -83.09680939]
[-36.72523117 -91.16192627]
[-25.65929794 -98.61120605]
[-14.18854904 -105.42065430]
[-2.34993839 -111.56833649]
[9.81839561 -117.03443909]
[22.27725220 -121.80136108]
[34.98649597 -125.85374451]
[47.90518188 -129.17852783]
[60.99169540 -131.76501465]
[74.20387268 -133.60485840]
[87.49915314 -134.69213867]
[100.83470917 -135.02334595]
[114.16757202 -134.59742737]
[127.45479584 -133.41572571]
[140.65356445 -131.48208618]
[153.72137451 -128.80271912]
[166.61611938 -125.38625336]
[179.29626465 -121.24369812]
[191.72094727 -116.38839722]
[203.85014343 -110.83599854]
[215.64479065 -104.60437775]
[223.43855286 -117.42066956]
[231.23231506 -130.23696899]
[239.02606201 -143.05325317]
[246.81982422 -155.86955261]
[242.83489990 -171.16320801]
[250.90332031 -184.75276184]
[266.23825073 -188.57577515]
[279.74176025 -180.36412048]
[283.40240479 -164.98962402]
[275.04846191 -151.57369995]
[259.63610840 -148.07579041]
[251.84236145 -135.25949097]
[244.04859924 -122.44320679]
[236.25483704 -109.62691498]
[228.46107483 -96.81062317]
[245.31719971 -84.71487427]
[261.04089355 -71.17971802]
[275.50970459 -56.31063461]
[288.61083984 -40.22348785]
[300.24218750 -23.04364204]
[310.31314087 -4.90496969]
[318.74520874 14.05118275]
[325.47271729 33.67709732]
[330.44317627 53.81983948]
[345.23733521 51.34332275]
[360.03149414 48.86680603]
[369.00317383 35.85587692]
[384.56213379 33.08192062]
[397.47747803 42.19067001]
[400.08676147 57.77807236]
[390.84197998 70.59639740]
[375.22787476 73.04075623]
[362.50799561 63.66095734]
[347.71386719 66.13747406]
[332.91970825 68.61399078]
[334.19583130 80.27747345]
[334.88830566 91.99011230]
[334.99533081 103.72271729]
[334.51672363 115.44604492]
[333.45361328 127.13087463]
[331.80865479 138.74807739]
[329.58599854 150.26872253]
[326.79110718 161.66407776]
[323.43103027 172.90574646]
[319.51406860 183.96572876]
[315.05001831 194.81642151]
[310.05001831 205.43081665]
[304.52651978 215.78245544]
[298.49325562 225.84552002]
[291.96530151 235.59494019]
[284.95892334 245.00642395]
[277.49157715 254.05651855]
[269.58187866 262.72265625]
[261.24951172 270.98324585]
[252.51527405 278.81768799]
[243.40092468 286.20645142]
[233.92918396 293.13116455]
[224.12364197 299.57452393]
[214.00875854 305.52050781]
[203.60972595 310.95425415]
[192.95248413 315.86224365]
[182.06356812 320.23223877]
[170.97012329 324.05337524]
[159.69979858 327.31610107]
[148.28068542 330.01226807]
[136.74125671 332.13519287]
[125.11024475 333.67956543]
[113.41665649 334.64157104]
[101.68962860 335.01876831]
[89.95839691 334.81021118]
[78.25218201 334.01644897]
[66.60017395 332.63946533]
[55.03140259 330.68267822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 39]
[17 38]
[18 37]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[51 62]
[52 61]
[53 60]
[54 59]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
