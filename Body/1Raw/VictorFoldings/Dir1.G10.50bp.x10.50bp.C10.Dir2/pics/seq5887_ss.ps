%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUACUCCGGGGGGGGGGUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUxxxxxxxxxxAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAACCCCCCCCCCACGCUAAUCC\
) } def
/len { sequence length } bind def

/coor [
[92.77459717 380.70034790]
[78.92866516 374.68432617]
[67.22000122 365.15490723]
[58.51747513 352.81924438]
[53.46687317 338.59271240]
[52.44298172 323.53103638]
[55.52178192 308.75186157]
[62.47480392 295.35192871]
[72.78608704 284.32562256]
[85.69046783 276.49108887]
[100.23035431 272.42977905]
[100.23035431 257.42977905]
[100.23035431 242.42979431]
[100.23035431 227.42979431]
[100.23035431 212.42979431]
[100.23035431 197.42979431]
[100.23035431 182.42979431]
[100.23035431 167.42979431]
[100.23035431 152.42979431]
[100.23035431 137.42979431]
[100.23035431 122.42978668]
[93.03897095 135.59352112]
[85.84758759 148.75726318]
[82.66626740 163.41601562]
[73.49549103 175.28602600]
[60.11441803 182.06443787]
[45.11902618 182.43624878]
[31.41846848 176.32929993]
[21.67069817 164.92837524]
[17.76681519 150.44529724]
[20.46418381 135.68981934]
[29.23950768 123.52455139]
[42.39034271 116.30960083]
[57.36608505 115.44480896]
[71.48748016 110.38652802]
[85.60887909 105.32825470]
[70.79112244 102.99715424]
[55.97336197 100.66604614]
[41.15560150 98.33494568]
[26.05456734 104.72953033]
[13.13098145 94.63433838]
[15.67952251 78.43443298]
[31.07847023 72.79488373]
[43.48670578 83.51718903]
[58.30446625 85.84828949]
[73.12222290 88.17938995]
[87.93997955 90.51049805]
[76.27961731 81.07460785]
[75.38153839 66.10151672]
[85.83043671 55.33952332]
[100.82350922 55.79527283]
[110.59944916 67.17204285]
[108.79381561 82.06256104]
[117.81134796 70.07572937]
[126.82887268 58.08889771]
[135.84640503 46.10206604]
[144.86393738 34.11523056]
[153.24607849 21.67579079]
[160.97016907 8.81738949]
[168.69424438 -4.04101324]
[176.41833496 -16.89941597]
[180.42607117 -31.35410500]
[180.42607117 -46.35410309]
[180.42607117 -61.35410309]
[172.68876648 -75.15427399]
[180.42607117 -87.88154602]
[180.42607117 -102.88154602]
[180.42607117 -117.88154602]
[180.42607117 -132.88154602]
[180.42607117 -147.88154602]
[167.08494568 -155.49140930]
[159.34997559 -168.76037598]
[159.30183411 -184.11920166]
[166.95346069 -197.43640137]
[180.24662781 -205.12974548]
[195.60551453 -205.12974548]
[208.89868164 -197.43640137]
[216.55030823 -184.11920166]
[216.50216675 -168.76037598]
[208.76719666 -155.49140930]
[195.42607117 -147.88154602]
[195.42607117 -132.88154602]
[195.42607117 -117.88154602]
[195.42607117 -102.88154602]
[195.42607117 -87.88154602]
[203.16337585 -75.15427399]
[195.42607117 -61.35410309]
[195.42607117 -46.35410309]
[195.42607117 -31.35410500]
[203.26542664 -44.14255524]
[213.70845032 -54.91026306]
[226.25094604 -63.13739014]
[240.28741455 -68.42675781]
[255.14022827 -70.52300262]
[270.09228516 -69.32493591]
[284.42181396 -64.89038086]
[297.43695068 -57.43344116]
[308.50939941 -47.31410599]
[317.10458374 -35.02091599]
[322.80758667 -21.14735222]
[325.34307861 -6.36319304]
[324.58862305 8.61782169]
[320.58065796 23.07244873]
[313.51266479 36.30285645]
[303.72592163 47.67031860]
[291.69284058 56.62603760]
[277.99435425 62.73766708]
[263.29183960 65.71014404]
[248.29504395 65.39996338]
[233.72799683 61.82211304]
[220.29394531 55.14930725]
[208.64144897 45.70370102]
[199.33306885 33.94129944]
[192.81819153 20.42996025]
[189.41131592 5.82197428]
[189.27673340 -9.17533112]
[181.55264282 3.68307161]
[173.82856750 16.54147339]
[166.10447693 29.39987564]
[181.08950806 28.72972488]
[191.11605835 39.88625717]
[188.85554504 54.71494675]
[175.96022034 62.37722778]
[161.85551453 57.27258682]
[156.85076904 43.13276291]
[147.83323669 55.11959457]
[138.81570435 67.10643005]
[129.79817200 79.09326172]
[120.78064728 91.08009338]
[115.23035431 122.42978668]
[115.23035431 137.42979431]
[115.23035431 152.42979431]
[115.23035431 167.42979431]
[115.23035431 182.42979431]
[115.23035431 197.42979431]
[115.23035431 212.42979431]
[115.23035431 227.42979431]
[115.23035431 242.42979431]
[115.23035431 257.42977905]
[115.23035431 272.42977905]
[129.77024841 276.49108887]
[142.67462158 284.32562256]
[152.98590088 295.35192871]
[159.93893433 308.75186157]
[163.01773071 323.53103638]
[161.99383545 338.59271240]
[156.94323730 352.81924438]
[148.24070740 365.15490723]
[136.53204346 374.68432617]
[122.68611145 380.70034790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[36 47]
[37 46]
[38 45]
[39 44]
[53 129]
[54 128]
[55 127]
[56 126]
[57 125]
[58 119]
[59 118]
[60 117]
[61 116]
[62 89]
[63 88]
[64 87]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
