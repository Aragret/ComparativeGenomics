%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGCGCUAAGCGGGGGGGGGGUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUxxxxxxxxxxGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCCCCCCCCCCCACAGCUCUAAGC\
) } def
/len { sequence length } bind def

/coor [
[94.76815033 458.55676270]
[80.49638367 453.74734497]
[67.59239960 445.98193359]
[56.65974426 435.62380981]
[48.20975876 423.15737915]
[42.63766479 409.16574097]
[40.20407486 394.30331421]
[41.02281570 379.26522827]
[45.05559158 364.75485229]
[52.11378479 351.45089722]
[61.86727142 339.97552490]
[73.85985565 330.86553955]
[87.53063202 324.54699707]
[102.24019623 321.31546021]
[102.24019623 306.31546021]
[102.24019623 291.31546021]
[102.24019623 276.31546021]
[102.24019623 261.31546021]
[102.24019623 246.31544495]
[102.24019623 231.31544495]
[102.24019623 216.31544495]
[102.24019623 201.31544495]
[102.24019623 186.31544495]
[102.24019623 171.31544495]
[102.24019623 156.31544495]
[100.74193573 141.39045715]
[97.76040649 126.68976593]
[90.30486298 124.96724701]
[83.64065552 121.20686340]
[78.31172943 115.71553802]
[74.75303650 108.94148254]
[73.25504303 101.43760681]
[58.65044785 98.01624298]
[44.04585266 94.59487915]
[29.44125557 91.17350769]
[18.27520752 103.33222198]
[2.59577894 108.18873596]
[-13.30542660 104.51252747]
[-25.12564850 93.39517975]
[-29.71524048 77.92855072]
[-44.38537216 74.80008698]
[-59.05550003 71.67162323]
[-74.48004150 77.24079895]
[-86.83918762 66.46195221]
[-83.41891479 50.42344284]
[-67.73770142 45.62431335]
[-55.92704010 57.00149536]
[-41.25690842 60.12995529]
[-26.58677864 63.25841904]
[-18.10736656 52.51447296]
[-5.76154375 46.45376968]
[8.05726910 46.31499863]
[20.64245605 52.18254471]
[29.50433159 62.95877838]
[32.86262131 76.56891632]
[47.46722031 79.99028015]
[62.07181549 83.41164398]
[76.67641449 86.83301544]
[81.77186584 80.37618256]
[88.58641815 75.77007294]
[96.47738647 73.44909668]
[104.70056915 73.63214111]
[111.36293030 60.19290924]
[118.02528381 46.75367737]
[124.68764496 33.31444168]
[131.35000610 19.87520981]
[131.31228638 13.17323112]
[134.25572205 8.22947884]
[138.55725098 6.03960848]
[145.75196838 -7.12230587]
[133.75498962 -16.17163277]
[123.20351410 -26.87136459]
[114.32244873 -38.99343491]
[107.30110168 -52.27946091]
[102.28912354 -66.44625092]
[99.39334869 -81.19183350]
[98.67549896 -96.20191956]
[100.15087128 -111.15655518]
[103.78803253 -125.73698425]
[109.50944519 -139.63243103]
[117.19315338 -152.54669189]
[126.67539215 -164.20452881]
[137.75402832 -174.35743713]
[150.19294739 -182.78900146]
[163.72698975 -189.31951904]
[178.06767273 -193.80978394]
[192.90934753 -196.16407776]
[207.93563843 -196.33222961]
[222.82627869 -194.31065369]
[237.26385498 -190.14244080]
[250.94065857 -183.91642761]
[263.56512451 -175.76533508]
[274.86819458 -165.86288452]
[284.60894775 -154.42016602]
[292.57974243 -141.68107605]
[298.61065674 -127.91715240]
[302.57321167 -113.42176056]
[304.38287354 -98.50389099]
[304.00109863 -83.48150635]
[301.43603516 -68.67480469]
[296.74234009 -54.39940643]
[290.02005005 -40.95957947]
[281.41247559 -28.64180374]
[271.10308838 -17.70862961]
[259.31161499 -8.39309692]
[246.28941345 -0.89376879]
[232.31404114 4.62950659]
[217.68336487 8.05900097]
[202.70927429 9.32161331]
[187.71090698 8.39043140]
[173.00798035 5.28530312]
[158.91387939 0.07241547]
[151.71916199 13.23432922]
[144.78923035 26.53756714]
[138.12687683 39.97679901]
[131.46452332 53.41603470]
[124.80216217 66.85527039]
[118.13980865 80.29450226]
[126.55733490 103.47381592]
[112.46109772 123.70822906]
[115.44262695 138.40893555]
[128.06759644 127.95445251]
[146.51408386 124.68688965]
[160.70390320 129.54991150]
[177.64776611 128.96520996]
[182.90014648 145.08505249]
[168.86428833 154.59457397]
[155.84088135 143.73973083]
[141.65106201 138.87670898]
[135.54833984 143.23640442]
[123.34291077 151.95576477]
[117.24019623 156.31544495]
[117.24019623 171.31544495]
[117.24019623 186.31544495]
[117.24019623 201.31544495]
[117.24019623 216.31544495]
[117.24019623 231.31544495]
[117.24019623 246.31544495]
[117.24019623 261.31546021]
[117.24019623 276.31546021]
[117.24019623 291.31546021]
[117.24019623 306.31546021]
[117.24019623 321.31546021]
[131.94975281 324.54699707]
[145.62052917 330.86553955]
[157.61311340 339.97552490]
[167.36659241 351.45089722]
[174.42478943 364.75485229]
[178.45756531 379.26522827]
[179.27630615 394.30331421]
[176.84272766 409.16574097]
[171.27062988 423.15737915]
[162.82063293 435.62380981]
[151.88798523 445.98193359]
[138.98399353 453.74734497]
[124.71223450 458.55676270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 121]
[27 120]
[32 58]
[33 57]
[34 56]
[35 55]
[40 49]
[41 48]
[42 47]
[62 118]
[63 117]
[64 116]
[65 115]
[66 114]
[69 113]
[70 112]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
