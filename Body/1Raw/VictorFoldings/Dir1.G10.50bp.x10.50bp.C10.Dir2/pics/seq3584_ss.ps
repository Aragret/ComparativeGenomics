%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCCUCCGGGGGGGGGGCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAxxxxxxxxxxAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGCCCCCCCCCCACCCCUCUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 557.73388672]
[71.19830322 551.71783447]
[59.48964310 542.18841553]
[50.78712082 529.85278320]
[45.73651886 515.62622070]
[44.71262741 500.56457520]
[47.79142761 485.78540039]
[54.74444962 472.38546753]
[65.05573273 461.35913086]
[77.96011353 453.52462769]
[92.50000000 449.46331787]
[92.50000000 434.46331787]
[92.50000000 419.46331787]
[92.50000000 404.46331787]
[92.50000000 389.46331787]
[92.50000000 374.46331787]
[92.50000000 359.46331787]
[92.50000000 344.46331787]
[92.50000000 329.46331787]
[92.50000000 314.46331787]
[92.50000000 299.46331787]
[77.77018738 296.72964478]
[63.78981781 291.33438110]
[51.03553772 283.45989990]
[39.94248962 273.37310791]
[30.88946152 261.41647339]
[24.18593407 247.99632263]
[20.06152153 233.56901550]
[18.65810013 218.62553406]
[20.02492142 203.67465210]
[24.11689758 189.22567749]
[30.79607773 175.77111816]
[39.83630371 163.76983643]
[50.93086243 153.63142395]
[63.70289993 145.70228577]
[77.71820831 140.25366211]
[92.50000000 137.47251892]
[92.50000000 122.47251892]
[86.68387604 119.59451294]
[81.86682892 115.24638367]
[78.41026306 109.75435638]
[76.57352448 103.53048706]
[76.49440765 97.04173279]
[62.97021866 90.55356598]
[49.44602966 84.06540680]
[34.62140274 89.54317474]
[20.30057716 82.85815430]
[14.97984409 67.97644806]
[21.81589890 53.72709656]
[36.75303268 48.56399918]
[50.92930984 55.55032730]
[55.93419266 70.54121399]
[69.45838165 77.02938080]
[82.98257446 83.51753998]
[88.15200043 79.48441315]
[94.22891235 77.02264404]
[100.74784851 76.32079315]
[105.94326019 62.24927139]
[111.13867950 48.17775345]
[116.33409119 34.10623169]
[121.52951050 20.03471375]
[126.72492218 5.96319485]
[131.92033386 -8.10832500]
[118.73041534 -15.30858898]
[106.72947693 -24.35266495]
[96.17332458 -35.04777908]
[87.28695679 -47.16596222]
[80.25978851 -60.44891357]
[75.24161530 -74.61351013]
[72.33938599 -89.35782623]
[71.61496735 -104.36759186]
[73.08380127 -119.32286835]
[76.71457672 -133.90489197]
[82.42990875 -147.80284119]
[90.10797119 -160.72047424]
[99.58509827 -172.38244629]
[110.65930176 -182.54020691]
[123.09452057 -190.97721863]
[136.62570190 -197.51365662]
[150.96441650 -202.01019287]
[165.80505371 -204.37098694]
[180.83128357 -204.54571533]
[195.72280884 -202.53065491]
[210.16221619 -198.36875916]
[223.84172058 -192.14872742]
[236.46977234 -184.00315857]
[247.77717590 -174.10565186]
[257.52291870 -162.66720581]
[265.49926758 -149.93159485]
[271.53622437 -136.17031860]
[275.50512695 -121.67666626]
[277.32131958 -106.75958252]
[276.94610596 -91.73703003]
[274.38751221 -76.92921448]
[269.70007324 -62.65176010]
[262.98367310 -49.20899582]
[254.38150024 -36.88745117]
[244.07690430 -25.94976616]
[232.28950500 -16.62907600]
[219.27058411 -9.12404919]
[205.29762268 -3.59465837]
[190.66845703 -0.15876234]
[175.69490051 1.11040270]
[160.69613647 0.18578435]
[145.99185181 -2.91290903]
[140.79644775 11.15861034]
[135.60102844 25.23012924]
[130.40560913 39.30164719]
[125.21019745 53.37316895]
[120.01477814 67.44468689]
[114.81936646 81.51620483]
[123.32152557 104.16782379]
[107.50000000 122.47251892]
[107.50000000 137.47251892]
[122.28179169 140.25366211]
[136.29710388 145.70228577]
[149.06913757 153.63142395]
[160.16369629 163.76983643]
[169.20391846 175.77111816]
[175.88310242 189.22567749]
[179.97508240 203.67465210]
[181.34190369 218.62553406]
[179.93847656 233.56901550]
[175.81407166 247.99632263]
[169.11053467 261.41647339]
[160.05751038 273.37310791]
[148.96446228 283.45989990]
[136.21018982 291.33438110]
[122.22981262 296.72964478]
[107.50000000 299.46331787]
[107.50000000 314.46331787]
[107.50000000 329.46331787]
[107.50000000 344.46331787]
[107.50000000 359.46331787]
[107.50000000 374.46331787]
[107.50000000 389.46331787]
[107.50000000 404.46331787]
[107.50000000 419.46331787]
[107.50000000 434.46331787]
[107.50000000 449.46331787]
[122.03988647 453.52462769]
[134.94427490 461.35913086]
[145.25555420 472.38546753]
[152.20857239 485.78540039]
[155.28736877 500.56457520]
[154.26348877 515.62622070]
[149.21287537 529.85278320]
[140.51036072 542.18841553]
[128.80169678 551.71783447]
[114.95575714 557.73388672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[37 114]
[38 113]
[43 54]
[44 53]
[45 52]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 106]
[63 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
