%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACACCCGGGGGGGGGGUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACxxxxxxxxxxUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCCCCCCCCCCCAUCAACAACC\
) } def
/len { sequence length } bind def

/coor [
[82.53160095 389.98849487]
[70.64732361 380.71337891]
[61.32861710 368.86328125]
[55.11725235 355.12710571]
[52.37434769 340.30346680]
[53.25938034 325.25421143]
[57.72088623 310.85427856]
[65.49948120 297.94082642]
[76.14293671 287.26467896]
[89.03244019 279.44650269]
[103.41863251 274.94082642]
[102.48300171 259.97003174]
[101.54737091 244.99923706]
[100.61174774 230.02845764]
[99.67611694 215.05766296]
[98.74048615 200.08686829]
[97.80486298 185.11607361]
[96.86923218 170.14527893]
[95.93360138 155.17449951]
[94.99797821 140.20370483]
[94.06234741 125.23291016]
[85.35090637 127.28770447]
[75.33525848 126.25092316]
[65.09443665 121.64012146]
[51.07772446 126.98163605]
[37.06101227 132.32315063]
[29.21442604 146.31639099]
[13.35918522 148.76402283]
[1.65807331 137.78842163]
[3.08718157 121.80915070]
[16.55022049 113.08412170]
[31.71949959 118.30643463]
[45.73621368 112.96492004]
[59.75292587 107.62341309]
[58.97413635 100.16395569]
[56.63776398 77.78558350]
[41.82000732 75.45448303]
[27.00224686 73.12338257]
[12.18448925 70.79227448]
[-2.91654658 77.18686676]
[-15.84013271 67.09166718]
[-13.29159164 50.89176178]
[2.10735607 45.25222015]
[14.51559353 55.97451782]
[29.33335114 58.30562210]
[44.15110779 60.63672638]
[58.96886826 62.96782684]
[72.06201935 55.64872360]
[77.83829498 41.80550385]
[65.08448792 25.59911156]
[63.32460403 5.16451883]
[73.01260376 -12.78543758]
[90.86212158 -22.42219734]
[90.86212158 -37.42219925]
[87.71644592 -46.06838989]
[91.02140045 -52.73344421]
[91.33345795 -67.73019409]
[83.88492584 -81.68834686]
[91.88533020 -94.25189972]
[92.19738770 -109.24864960]
[84.74885559 -123.20680237]
[92.74925232 -135.77035522]
[93.06130981 -150.76710510]
[78.47136688 -154.53942871]
[65.14494324 -161.57527161]
[53.80070114 -171.49519348]
[45.05043411 -183.76423645]
[39.36602402 -197.72074890]
[37.05402756 -212.61207581]
[38.23912811 -227.63513184]
[42.85741425 -241.97975159]
[50.65982819 -254.87234497]
[61.22559738 -265.61764526]
[73.98491669 -273.63613892]
[88.24970245 -278.49542236]
[103.25066376 -279.93347168]
[118.17881775 -277.87265015]
[132.22911072 -272.42419434]
[144.64382935 -263.88183594]
[154.75346375 -252.70634460]
[162.01281738 -239.50033569]
[166.03038025 -224.97601318]
[166.58952332 -209.91665649]
[163.66007996 -195.13441467]
[157.40000916 -181.42643738]
[148.14694214 -169.53201294]
[136.39987183 -160.09257507]
[122.79229736 -153.61718750]
[108.05806732 -150.45504761]
[107.74600983 -135.45829773]
[115.21685791 -122.57281494]
[107.19413757 -108.93659973]
[106.88208008 -93.93984222]
[114.35293579 -81.05435944]
[106.33020782 -67.41813660]
[106.01815796 -52.42138672]
[105.86212158 -37.42219925]
[105.86212158 -22.42219734]
[113.89988708 -19.62667847]
[121.03578949 -14.98990726]
[126.85562134 -8.78102303]
[131.02157593 -1.36041212]
[145.78762817 -3.99927640]
[160.55369568 -6.63814068]
[175.31974792 -9.27700520]
[190.08580017 -11.91586971]
[204.85185242 -14.55473328]
[219.38026428 -23.29326057]
[231.79914856 -11.75169849]
[224.14651489 3.37687302]
[207.49072266 0.21132196]
[192.72467041 2.85018635]
[177.95860291 5.48905039]
[163.19255066 8.12791443]
[148.42649841 10.76677895]
[133.66044617 13.40564346]
[131.29724121 25.29042625]
[125.03645325 35.72807312]
[115.58055878 43.47681046]
[104.01454926 47.60053253]
[91.68151093 47.58177948]
[85.90524292 61.42499542]
[110.39836121 63.40888977]
[127.51301575 78.34898376]
[131.95602417 98.73607635]
[124.09461975 116.05123138]
[109.03313446 124.29727936]
[109.96876526 139.26806641]
[110.90439606 154.23886108]
[111.84002686 169.20965576]
[112.77565002 184.18045044]
[113.71128082 199.15124512]
[114.64691162 214.12202454]
[115.58253479 229.09281921]
[116.51816559 244.06361389]
[117.45379639 259.03439331]
[118.38941956 274.00518799]
[133.22465515 276.68463135]
[146.98728943 282.83712769]
[158.87718201 292.10501099]
[168.20307922 303.94946289]
[174.42276001 317.68188477]
[177.17465210 332.50384521]
[176.29875183 347.55361938]
[171.84597778 361.95626831]
[164.07521057 374.87442017]
[153.43823242 385.55703735]
[140.55346680 393.38302612]
[126.17000580 397.89743042]
[111.12410736 398.83773804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[24 34]
[25 33]
[26 32]
[36 47]
[37 46]
[38 45]
[39 44]
[48 122]
[49 121]
[53 98]
[54 97]
[56 96]
[57 95]
[59 93]
[60 92]
[62 90]
[63 89]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
