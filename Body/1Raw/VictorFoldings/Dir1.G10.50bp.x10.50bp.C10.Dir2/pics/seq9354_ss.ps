%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACUAAUAAGGGGGGGGGGUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCxxxxxxxxxxGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACCCCCCCCCCCUACUACUAAUCA\
) } def
/len { sequence length } bind def

/coor [
[84.83499908 448.22555542]
[71.13285065 441.96466064]
[59.16773224 432.81130981]
[49.53981781 421.22463989]
[42.73204041 407.78579712]
[39.08587265 393.16894531]
[38.78420258 378.10717773]
[41.84216690 363.35601807]
[48.10637665 349.65536499]
[57.26262283 337.69247437]
[68.85163116 328.06738281]
[82.29209900 321.26284790]
[96.90986633 317.62023926]
[96.60585785 302.62329102]
[96.30185699 287.62637329]
[95.99784851 272.62945557]
[95.69384766 257.63253784]
[95.38983917 242.63563538]
[95.08583832 227.63871765]
[94.78183746 212.64178467]
[94.47782898 197.64486694]
[94.17382812 182.64794922]
[93.86981964 167.65103149]
[93.56581879 152.65411377]
[93.26181030 137.65719604]
[92.95780945 122.66027832]
[92.65380096 107.66336060]
[91.43903351 92.71263123]
[89.31799316 77.86334229]
[87.19695282 63.01406479]
[85.07590485 48.16478348]
[82.95486450 33.31549835]
[80.53330994 18.51225471]
[77.81223297 3.76112795]
[75.09115601 -10.98999882]
[60.15896988 -9.47914982]
[45.15332031 -9.19044781]
[30.17407417 -10.12581539]
[15.32090950 -12.27902699]
[0.69267708 -15.63575363]
[-13.61327457 -20.17365646]
[-27.50173950 -25.86253548]
[-40.88029099 -32.66453171]
[-53.65989685 -40.53437805]
[-65.75550842 -49.41970444]
[-77.08662415 -59.26137543]
[-87.57785034 -69.99389648]
[-97.15936279 -81.54584503]
[-105.76738739 -93.84033966]
[-113.34465027 -106.79556274]
[-119.84072113 -120.32530975]
[-125.21237183 -134.33952332]
[-129.42384338 -148.74494934]
[-132.44712830 -163.44570923]
[-134.26208496 -178.34399414]
[-134.85665894 -193.34063721]
[-134.22686768 -208.33584595]
[-132.37692261 -223.22981262]
[-129.31912231 -237.92344666]
[-125.07381439 -252.31893921]
[-119.66926575 -266.32049561]
[-113.14143372 -279.83493042]
[-105.53376007 -292.77233887]
[-96.89688110 -305.04656982]
[-87.28826904 -316.57598877]
[-76.77186584 -327.28384399]
[-65.41765594 -337.09887695]
[-53.30120850 -345.95574951]
[-40.50315475 -353.79556274]
[-27.10866356 -360.56613159]
[-13.20687580 -366.22235107]
[1.10969436 -370.72665405]
[15.74577045 -374.04901123]
[30.60395050 -376.16732788]
[45.58535385 -377.06750488]
[60.59028244 -376.74356079]
[75.51887512 -375.19763184]
[90.27178955 -372.44003296]
[104.75083923 -368.48910522]
[118.85967255 -363.37112427]
[132.50439453 -357.12017822]
[145.59419250 -349.77786255]
[158.04197693 -341.39300537]
[169.76487732 -332.02142334]
[180.68490601 -321.72552490]
[190.72937012 -310.57379150]
[199.83145142 -298.64041138]
[207.93054199 -286.00485229]
[214.97276306 -272.75119019]
[220.91125488 -258.96759033]
[225.70648193 -244.74583435]
[229.32653809 -230.18052673]
[231.74732971 -215.36862183]
[232.95275879 -200.40869141]
[232.93478394 -185.40026855]
[231.69354248 -170.44326782]
[229.23728943 -155.63719177]
[225.58236694 -141.08061218]
[220.75309753 -126.87036896]
[214.78161621 -113.10104370]
[207.70767212 -99.86426544]
[199.57833862 -87.24813843]
[190.44772339 -75.33660889]
[180.37657166 -64.20894623]
[169.43193054 -53.93920898]
[157.68661499 -44.59574509]
[145.21879578 -36.24072647]
[132.11145020 -28.92975998]
[118.45179749 -22.71150017]
[104.33074951 -17.62732697]
[89.84227753 -13.71107483]
[92.56335449 1.04005170]
[95.28443146 15.79117870]
[98.68847656 19.21697807]
[99.93919373 24.83670616]
[97.80414581 31.19445610]
[99.92518616 46.04373932]
[102.04623413 60.89302063]
[104.16727448 75.74230194]
[106.28831482 90.59158325]
[116.42269135 79.53289795]
[131.39910889 78.69210052]
[142.70759583 88.54695129]
[143.92239380 103.49767303]
[134.35321045 115.04890442]
[119.43751526 116.63694000]
[107.65072632 107.35935211]
[107.95472717 122.35626984]
[108.25872803 137.35319519]
[108.56273651 152.35011292]
[108.86673737 167.34703064]
[109.17074585 182.34394836]
[109.47474670 197.34086609]
[109.77875519 212.33778381]
[110.08275604 227.33470154]
[110.38676453 242.33161926]
[110.69076538 257.32855225]
[110.99477386 272.32546997]
[111.29877472 287.32238770]
[111.60277557 302.31930542]
[111.90678406 317.31622314]
[126.66015625 320.36346436]
[140.36534119 326.61770630]
[152.33489990 335.76525879]
[161.96841431 347.34725952]
[168.78271484 360.78277588]
[172.43595886 375.39788818]
[172.74493408 390.45950317]
[169.69410706 405.21215820]
[163.43653870 418.91583252]
[154.28610229 430.88314819]
[142.70175171 440.51388550]
[129.26458740 447.32492065]
[114.64859009 450.97460938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 127]
[28 120]
[29 119]
[30 118]
[31 117]
[32 116]
[33 113]
[34 112]
[35 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
