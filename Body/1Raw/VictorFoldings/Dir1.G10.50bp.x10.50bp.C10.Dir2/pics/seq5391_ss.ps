%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACUCAACGGGGGGGGGGUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUxxxxxxxxxxUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCCCCCCCCCCCACUACUCACC\
) } def
/len { sequence length } bind def

/coor [
[52.32645035 406.57598877]
[38.48051071 400.55996704]
[26.77185059 391.03054810]
[18.06932640 378.69488525]
[13.01872349 364.46835327]
[11.99483204 349.40667725]
[15.07363129 334.62750244]
[22.02665329 321.22760010]
[32.33793640 310.20126343]
[45.24231720 302.36676025]
[59.78220367 298.30541992]
[59.78220367 283.30541992]
[59.78220367 268.30541992]
[59.78220367 253.30543518]
[59.78220367 238.30543518]
[59.78220367 223.30543518]
[59.78220367 208.30543518]
[59.78220367 193.30543518]
[59.78220367 178.30543518]
[59.78220367 163.30543518]
[50.42628479 175.03005981]
[36.51234055 180.63381958]
[21.64195061 178.66619873]
[9.66427326 169.63650513]
[3.67969322 155.88206482]
[5.23730087 140.96315002]
[13.93391418 128.74148560]
[27.51844025 122.38062286]
[42.47456741 123.52703857]
[54.93094635 131.88398743]
[61.66326141 145.28819275]
[64.76158142 130.61167908]
[67.85990143 115.93515015]
[64.15373993 101.40021515]
[54.40608978 89.99919128]
[44.65843964 78.59816742]
[32.30686569 70.08708191]
[18.18206406 65.03832245]
[4.05726051 59.98956680]
[-6.42758179 71.03438568]
[-20.50077629 76.85375977]
[-35.72405624 76.43944550]
[-49.45989609 69.86323547]
[-59.32847595 58.26448441]
[-63.62001038 43.65275574]
[-61.59096527 28.55961609]
[-53.59287643 15.60004330]
[-41.01147079 7.01936340]
[-26.02654648 4.30422926]
[-11.23433495 7.92505455]
[0.80232364 17.25450897]
[7.99800634 30.67621040]
[9.10601711 45.86476517]
[23.23081970 50.91352081]
[37.35562134 55.96227646]
[27.92470551 44.29789734]
[21.37872505 30.80159569]
[18.05745697 16.17391014]
[18.13329315 1.17410123]
[21.60229683 -13.41925335]
[28.28440857 -26.84867668]
[37.83278656 -38.41710281]
[49.75181580 -47.52406311]
[63.42282867 -53.69685745]
[78.13622284 -56.61508179]
[93.12828827 -56.12725830]
[107.62084961 -52.25871277]
[120.86166382 -45.21024704]
[132.16345215 -35.34770966]
[140.93959045 -23.18302917]
[146.73452759 -9.34761906]
[149.24751282 5.44038105]
[148.34806824 20.41339111]
[144.08290100 34.79422379]
[136.67340088 47.83643341]
[126.50414276 58.86305237]
[114.10298920 67.30173492]
[100.11362457 72.71446991]
[85.26217651 74.82029724]
[70.31952667 73.50991821]
[56.05945969 68.85051727]
[65.80711365 80.25154114]
[75.55476379 91.65255737]
[85.94535828 80.01884460]
[100.36231232 76.97588348]
[112.99167633 82.71269226]
[125.60280609 74.59114838]
[138.21394348 66.46960449]
[150.82505798 58.34806442]
[154.18991089 41.21286011]
[168.60527039 31.96723175]
[184.92720032 35.89816284]
[197.36663818 27.51602173]
[209.80609131 19.13387871]
[222.24552917 10.75173473]
[223.70724487 -4.81738138]
[234.87088013 -15.76759434]
[250.46531677 -16.92854881]
[263.12731934 -7.75207615]
[266.87829590 7.42897224]
[259.94714355 21.44657135]
[245.60652161 27.68203735]
[230.62767029 23.19117546]
[218.18823242 31.57331848]
[205.74879456 39.95546341]
[193.30934143 48.33760452]
[192.62777710 61.24234390]
[184.50097656 71.53939819]
[171.73388672 75.31157684]
[158.94660950 70.95919037]
[146.33547974 79.08073425]
[133.72434998 87.20227814]
[121.11322021 95.32382202]
[121.36213684 96.63934326]
[121.52915955 97.96775818]
[136.02476501 101.82491302]
[150.52035522 105.68207550]
[166.20376587 100.89012909]
[178.00921631 112.27272034]
[173.79226685 128.12040710]
[157.89096069 132.13046265]
[146.66319275 120.17767334]
[132.16760254 116.32051086]
[117.67200470 112.46335602]
[111.49907684 119.54462433]
[102.53569031 123.59214020]
[92.25998688 123.53976440]
[82.53643036 119.03347015]
[79.43811035 133.70999146]
[76.33978271 148.38652039]
[74.78220367 163.30543518]
[74.78220367 178.30543518]
[74.78220367 193.30543518]
[74.78220367 208.30543518]
[74.78220367 223.30543518]
[74.78220367 238.30543518]
[74.78220367 253.30543518]
[74.78220367 268.30541992]
[74.78220367 283.30541992]
[74.78220367 298.30541992]
[89.32209015 302.36676025]
[102.22647095 310.20126343]
[112.53775787 321.22760010]
[119.49077606 334.62750244]
[122.56958008 349.40667725]
[121.54568481 364.46835327]
[116.49508667 378.69488525]
[107.79256439 391.03054810]
[96.08390045 400.55996704]
[82.23796082 406.57598877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 130]
[32 129]
[33 128]
[34 83]
[35 82]
[36 81]
[37 55]
[38 54]
[39 53]
[86 113]
[87 112]
[88 111]
[89 110]
[92 106]
[93 105]
[94 104]
[95 103]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
