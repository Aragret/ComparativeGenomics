%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGACUACGGGGGGGGGGCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUxxxxxxxxxxCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCCCCCCCCCCCACGGACUAC\
) } def
/len { sequence length } bind def

/coor [
[82.10546875 463.76208496]
[68.25953674 457.74606323]
[56.55087280 448.21664429]
[47.84834671 435.88098145]
[42.79774475 421.65444946]
[41.77385330 406.59277344]
[44.85265350 391.81362915]
[51.80567551 378.41369629]
[62.11695862 367.38735962]
[75.02133942 359.55285645]
[89.56122589 355.49154663]
[89.56122589 340.49154663]
[89.56122589 325.49154663]
[89.56122589 310.49154663]
[89.56122589 295.49154663]
[89.56122589 280.49154663]
[89.56122589 265.49154663]
[89.56122589 250.49153137]
[89.56122589 235.49153137]
[89.56122589 220.49153137]
[89.56122589 205.49153137]
[78.88035583 195.17385864]
[78.66667175 179.96171570]
[89.56122589 168.82859802]
[89.56122589 153.82859802]
[87.27954102 151.06066895]
[86.26014709 147.02798462]
[87.09259033 142.35258484]
[90.05847931 137.90026855]
[90.99410248 122.92948151]
[91.92973328 107.95868683]
[79.73992920 116.69989014]
[64.90939331 114.45149994]
[55.85822678 102.49004364]
[57.72526550 87.60668945]
[69.45048523 78.25152588]
[84.37685394 79.73597717]
[94.03033447 91.21871185]
[96.82265472 76.48090363]
[99.61498260 61.74309921]
[102.40730286 47.00529099]
[91.90657806 57.71672058]
[78.14831543 63.69251633]
[63.15269852 64.05521393]
[49.12161255 58.75156784]
[38.11531067 48.56033325]
[31.74989700 34.97793579]
[30.96003532 19.99874687]
[35.86170578 5.82222986]
[45.73517227 -5.47000790]
[59.13066864 -12.21987438]
[74.08126831 -13.43625450]
[88.39170074 -8.94054031]
[99.96070862 0.60714006]
[107.08953857 13.80485535]
[108.73150635 28.71405983]
[115.63850403 15.39890480]
[122.54550171 2.08374929]
[129.45249939 -11.23140621]
[128.93879700 -27.04427147]
[141.66751099 -34.77920914]
[148.57450867 -48.09436417]
[155.48150635 -61.40952301]
[143.14097595 -69.97339630]
[131.99693298 -80.04506683]
[122.23236847 -91.45915985]
[114.00760651 -104.02823639]
[107.45771790 -117.54589844]
[102.69026184 -131.79019165]
[99.78351593 -146.52719116]
[98.78521729 -161.51490784]
[99.71175385 -176.50723267]
[102.54791260 -191.25798035]
[107.24712372 -205.52491760]
[113.73222351 -219.07379150]
[121.89671326 -231.68209839]
[131.60653687 -243.14280701]
[142.70222473 -253.26771545]
[155.00160217 -261.89056396]
[168.30270386 -268.86978149]
[182.38710022 -274.09069824]
[197.02349854 -277.46765137]
[211.97158813 -278.94519043]
[226.98588562 -278.49899292]
[241.81985474 -276.13641357]
[256.22991943 -271.89627075]
[269.97940063 -265.84817505]
[282.84259033 -258.09143066]
[294.60821533 -248.75341797]
[305.08306885 -237.98747253]
[314.09518433 -225.97039795]
[321.49655151 -212.89950562]
[327.16561890 -198.98944092]
[331.00933838 -184.46861267]
[332.96453857 -169.57548523]
[332.99914551 -154.55459595]
[331.11260986 -139.65260315]
[327.33584595 -125.11422729]
[321.73092651 -111.17818451]
[314.38989258 -98.07332611]
[305.43325806 -86.01483917]
[295.00811768 -75.20074463]
[283.28564453 -65.80860901]
[270.45834351 -57.99266815]
[256.73687744 -51.88126373]
[242.34652710 -47.57474899]
[227.52360535 -45.14384460]
[212.51152039 -44.62846375]
[197.55677795 -46.03707504]
[182.90495300 -49.34654236]
[168.79666138 -54.50252151]
[161.88966370 -41.18736649]
[154.98266602 -27.87221146]
[155.99040222 -13.01173592]
[142.76765442 -4.32440805]
[135.86065674 8.99074745]
[128.95365906 22.30590439]
[122.04666138 35.62105942]
[117.14511108 49.79761887]
[114.35279083 64.53542328]
[111.56046295 79.27323151]
[108.76814270 94.01103210]
[106.90052795 108.89431763]
[105.96489716 123.86510468]
[105.02926636 138.83589172]
[104.56122589 153.82859802]
[104.56122589 168.82859802]
[115.45578003 179.96171570]
[115.24209595 195.17385864]
[104.56122589 205.49153137]
[104.56122589 220.49153137]
[104.56122589 235.49153137]
[104.56122589 250.49153137]
[104.56122589 265.49154663]
[104.56122589 280.49154663]
[104.56122589 295.49154663]
[104.56122589 310.49154663]
[104.56122589 325.49154663]
[104.56122589 340.49154663]
[104.56122589 355.49154663]
[119.10111237 359.55285645]
[132.00549316 367.38735962]
[142.31677246 378.41369629]
[149.26980591 391.81362915]
[152.34860229 406.59277344]
[151.32470703 421.65444946]
[146.27410889 435.88098145]
[137.57157898 448.21664429]
[125.86292267 457.74606323]
[112.01698303 463.76208496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 127]
[25 126]
[29 125]
[30 124]
[31 123]
[38 122]
[39 121]
[40 120]
[41 119]
[56 118]
[57 117]
[58 116]
[59 115]
[61 113]
[62 112]
[63 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
