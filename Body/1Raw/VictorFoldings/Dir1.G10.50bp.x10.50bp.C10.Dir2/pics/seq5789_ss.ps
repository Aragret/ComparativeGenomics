%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAACCCAGGGGGGGGGGCCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCxxxxxxxxxxCAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCCCCCCCCCCCACAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[95.78927612 551.39257812]
[84.57384491 541.32727051]
[75.98244476 528.94647217]
[70.47840118 514.91784668]
[68.35854340 499.99792480]
[69.73718262 484.99139404]
[74.53998566 470.70751953]
[82.50793457 457.91653442]
[93.21132660 447.30834961]
[106.07293701 439.45495605]
[120.39916992 434.77993774]
[119.15229797 419.83184814]
[117.90541840 404.88375854]
[116.65854645 389.93566895]
[115.41167450 374.98757935]
[114.16479492 360.03952026]
[112.91792297 345.09143066]
[111.67105103 330.14334106]
[110.42417145 315.19525146]
[109.17729950 300.24716187]
[95.21076965 295.01251221]
[84.85946655 284.18847656]
[80.21521759 269.88491821]
[82.25013733 254.92230225]
[90.61367798 242.27563477]
[103.69165802 234.48283386]
[102.44478607 219.53475952]
[101.19790649 204.58666992]
[87.66624451 198.36094666]
[79.01007080 186.11648560]
[77.63589478 171.08392334]
[84.01249695 157.29133606]
[96.51825714 148.48489380]
[95.27137756 133.53680420]
[89.14549255 132.08203125]
[83.39473724 129.51850891]
[78.21785736 125.93483734]
[73.79376221 121.45484924]
[70.27536011 116.23339081]
[67.78423309 110.45090485]
[66.40647125 104.30723572]
[66.18970490 98.01471710]
[67.14141846 91.79080200]
[53.75513458 85.02268982]
[40.50825882 92.92989349]
[25.09009361 92.39721680]
[12.42051983 83.59463501]
[6.54235172 69.33101654]
[9.33129120 54.15783691]
[19.89739799 42.91680145]
[34.86906433 39.19487762]
[49.46889114 44.17972183]
[59.03812027 56.28068924]
[60.52324677 71.63640594]
[73.90953064 78.40451813]
[80.27333832 72.46936035]
[87.93939209 68.35163879]
[96.40161896 66.32316589]
[105.10139465 66.51786804]
[110.58843231 52.55747986]
[116.07546234 38.59709167]
[121.56249237 24.63669968]
[127.04952240 10.67631054]
[132.53656006 -3.28407955]
[119.52414703 -10.80304146]
[107.77777863 -20.17750168]
[97.55986786 -31.19803238]
[89.09870148 -43.61842728]
[82.58329010 -57.16121674]
[78.15919495 -71.52384186]
[75.92525482 -86.38544464]
[75.93137360 -101.41400146]
[78.17742157 -116.27378082]
[82.61320496 -130.63279724]
[89.13964844 -144.17027283]
[97.61092377 -156.58378601]
[107.83780670 -167.59597778]
[119.59180450 -176.96087646]
[132.61033630 -184.46923828]
[146.60255432 -189.95333862]
[161.25588989 -193.29063416]
[176.24295044 -194.40660095]
[191.22895813 -193.27630615]
[205.87907410 -189.92497253]
[219.86605835 -184.42749023]
[232.87739563 -176.90667725]
[244.62242126 -167.53054810]
[254.83876038 -156.50856018]
[263.29815674 -144.08695984]
[269.81164551 -130.54324341]
[274.23370361 -116.17998505]
[276.46551514 -101.31806946]
[276.45724487 -86.28950500]
[274.20910645 -71.43005371]
[269.77127075 -57.07166290]
[263.24288940 -43.53511810]
[254.76985168 -31.12282181]
[244.54139709 -20.11207390]
[232.78607178 -10.74885654]
[219.76646423 -3.24234796]
[205.77346802 2.23975277]
[191.11965942 5.57497454]
[176.13243103 6.68880701]
[161.14659119 5.55636644]
[146.49694824 2.20295191]
[141.00991821 16.16334152]
[135.52288818 30.12373161]
[130.03585815 44.08412170]
[124.54882050 58.04450989]
[119.06179047 72.00489807]
[132.99780273 92.36963654]
[129.41667175 116.78501892]
[110.21946716 132.28993225]
[111.46633911 147.23802185]
[125.25827789 153.85087585]
[133.83184814 166.39642334]
[134.96717834 181.44891357]
[128.45921326 194.95825195]
[116.14599609 203.33979797]
[117.39286804 218.28787231]
[118.63974762 233.23596191]
[132.82806396 238.75437927]
[143.17126465 249.84065247]
[147.65698242 264.25933838]
[145.44664001 279.13467407]
[137.03166199 291.52407837]
[124.12538910 299.00027466]
[125.37226105 313.94836426]
[126.61913300 328.89645386]
[127.86601257 343.84454346]
[129.11288452 358.79263306]
[130.35975647 373.74072266]
[131.60662842 388.68881226]
[132.85351562 403.63690186]
[134.10038757 418.58499146]
[135.34725952 433.53308105]
[150.25004578 435.76998901]
[164.23501587 441.38400269]
[176.54800415 450.07232666]
[186.52497864 461.36642456]
[193.62788391 474.65722656]
[197.47367859 489.22796631]
[197.85494995 504.29287720]
[194.75115967 519.03948975]
[188.32968140 532.67260742]
[178.93679810 544.45697021]
[167.07908630 553.75701904]
[153.39601135 560.07128906]
[138.62545776 563.05920410]
[123.56401062 562.55969238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[26 121]
[27 120]
[28 119]
[33 114]
[34 113]
[43 55]
[44 54]
[59 110]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
