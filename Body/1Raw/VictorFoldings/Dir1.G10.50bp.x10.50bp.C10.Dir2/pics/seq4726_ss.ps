%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUUACCUGGGGGGGGGGGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAxxxxxxxxxxGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUCCCCCCCCCCAUUUAUUACCU\
) } def
/len { sequence length } bind def

/coor [
[89.70986938 416.83581543]
[75.15001678 412.92764282]
[61.94887161 405.64797974]
[50.87393951 395.42010498]
[42.56909943 382.83865356]
[37.51718521 368.63507080]
[36.01191330 353.63516235]
[38.14078903 338.71096802]
[43.78004837 324.73019409]
[52.60182953 312.50564575]
[64.09324646 302.74804688]
[77.58620453 296.02468872]
[92.29624176 292.72647095]
[92.60421753 277.72961426]
[92.91219330 262.73278809]
[93.22017670 247.73594666]
[93.52815247 232.73910522]
[93.83612823 217.74227905]
[94.14410400 202.74543762]
[94.45208740 187.74859619]
[94.76006317 172.75175476]
[95.06803894 157.75492859]
[95.37601471 142.75808716]
[95.68399811 127.76124573]
[76.66362762 106.13708496]
[87.50067902 84.17619324]
[83.24783325 69.79170990]
[78.99498749 55.40722656]
[74.74214172 41.02274704]
[70.48929596 26.63826561]
[66.23644257 12.25378513]
[51.54843140 15.33737278]
[36.65991592 17.22905922]
[21.66746330 17.91657448]
[6.66830492 17.39546204]
[-8.24028301 15.66909885]
[-22.96161079 12.74868298]
[-37.40020370 8.65315437]
[-51.46242142 3.40907454]
[-65.05706024 -2.94954658]
[-78.09595490 -10.38147068]
[-90.49454498 -18.83849716]
[-102.17241669 -28.26577759]
[-113.05383301 -38.60217285]
[-123.06822968 -49.78064728]
[-132.15065002 -61.72870255]
[-140.24218750 -74.36885071]
[-147.29037476 -87.61911011]
[-153.24949646 -101.39355469]
[-158.08088684 -115.60283661]
[-161.75325012 -130.15481567]
[-164.24275208 -144.95510864]
[-165.53323364 -159.90774536]
[-165.61633301 -174.91571045]
[-164.49151611 -189.88171387]
[-162.16607666 -204.70867920]
[-158.65510559 -219.30043030]
[-153.98133850 -233.56234741]
[-148.17514038 -247.40193176]
[-141.27412415 -260.72943115]
[-133.32305908 -273.45840454]
[-124.37351227 -285.50631714]
[-114.48352814 -296.79501343]
[-103.71724701 -307.25128174]
[-92.14448547 -316.80731201]
[-79.84031677 -325.40112305]
[-66.88452148 -332.97698975]
[-53.36112976 -339.48574829]
[-39.35784912 -344.88525391]
[-24.96549606 -349.14041138]
[-10.27741241 -352.22369385]
[4.61114311 -354.11505127]
[19.60361099 -354.80224609]
[34.60275650 -354.28079224]
[49.51130676 -352.55410767]
[64.23257446 -349.63336182]
[78.67107391 -345.53750610]
[92.73317719 -340.29312134]
[106.32767487 -333.93420410]
[119.36640930 -326.50198364]
[131.76481628 -318.04467773]
[143.44247437 -308.61715698]
[154.32366943 -298.28051758]
[164.33781433 -287.10180664]
[173.41996765 -275.15356445]
[181.51123047 -262.51324463]
[188.55911255 -249.26281738]
[194.51792908 -235.48825073]
[199.34902954 -221.27885437]
[203.02105713 -206.72679138]
[205.51022339 -191.92645264]
[206.80038452 -176.97378540]
[206.88316345 -161.96580505]
[205.75801086 -146.99983215]
[203.43225098 -132.17292786]
[199.92094421 -117.58125305]
[195.24687195 -103.31943512]
[189.44035339 -89.47997284]
[182.53904724 -76.15262604]
[174.58770752 -63.42382431]
[165.63789368 -51.37611771]
[155.74766541 -40.08764267]
[144.98115540 -29.63161659]
[133.40818787 -20.07584381]
[121.10382080 -11.48230171]
[108.14785767 -3.90672398]
[94.62432861 2.60175967]
[80.62092590 8.00093842]
[84.87377167 22.38541985]
[89.12661743 36.76990128]
[93.37947083 51.15438080]
[97.63231659 65.53886414]
[101.88516235 79.92333984]
[113.75845337 81.80878448]
[123.73511505 90.81183624]
[127.61758423 105.15592194]
[141.86427307 109.84972382]
[156.11097717 114.54352570]
[168.62271118 105.36551666]
[184.13975525 105.32823944]
[196.69544983 114.44602966]
[201.46189880 129.21290588]
[196.60629272 143.95069885]
[183.99571228 152.99244690]
[168.47918701 152.86138916]
[156.02314758 143.60792542]
[151.41717529 128.79022217]
[137.17048645 124.09642029]
[122.92378998 119.40261841]
[110.68083191 128.06922913]
[110.37285614 143.06605530]
[110.06488037 158.06289673]
[109.75689697 173.05973816]
[109.44892120 188.05657959]
[109.14094543 203.05342102]
[108.83296967 218.05024719]
[108.52498627 233.04708862]
[108.21701050 248.04393005]
[107.90903473 263.04077148]
[107.60105896 278.03759766]
[107.29307556 293.03445435]
[121.85530090 296.93380737]
[135.06085205 304.20544434]
[146.14198303 314.42660522]
[154.45445251 327.00302124]
[159.51498413 341.20352173]
[161.02934265 356.20254517]
[158.90951538 371.12802124]
[153.27873230 385.11221313]
[144.46437073 397.34210205]
[132.97886658 407.10665894]
[119.48999023 413.83819580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 130]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
