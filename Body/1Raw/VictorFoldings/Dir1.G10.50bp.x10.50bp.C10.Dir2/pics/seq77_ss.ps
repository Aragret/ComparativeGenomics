%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUGUCGCAGGGGGGGGGGGUAUCUGUCUUUGAUUCCUGCCUCAUCCUAUUAUUUAUCGCACCUACGUUxxxxxxxxxxCCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCCCCCCCCCCCUAUGUAGCA\
) } def
/len { sequence length } bind def

/coor [
[90.51556396 534.54644775]
[76.66962433 528.53045654]
[64.96096039 519.00103760]
[56.25843811 506.66534424]
[51.20783615 492.43881226]
[50.18394470 477.37713623]
[53.26274490 462.59799194]
[60.21576691 449.19805908]
[70.52705383 438.17172241]
[83.43143463 430.33721924]
[97.97132111 426.27590942]
[97.97132111 411.27590942]
[97.97132111 396.27590942]
[97.97132111 381.27590942]
[97.97132111 366.27590942]
[97.97132111 351.27590942]
[97.97132111 336.27590942]
[97.97132111 321.27590942]
[97.97132111 306.27590942]
[97.97132111 291.27590942]
[84.48825836 284.89840698]
[75.07251740 273.25137329]
[71.63333130 258.61126709]
[74.90496826 243.86959839]
[84.29081726 231.96191406]
[97.97132111 225.28318787]
[97.97132111 210.28318787]
[97.97132111 195.28318787]
[97.50327301 180.29049683]
[96.56764984 165.31970215]
[95.63201904 150.34890747]
[94.69638824 135.37812805]
[86.14953613 132.98339844]
[78.45533752 128.55813599]
[72.08747864 122.37478638]
[67.43797302 114.81398773]
[64.79306030 106.34121704]
[64.31555176 97.47805786]
[66.03486633 88.77016449]
[53.09680557 81.18025208]
[40.15875244 73.59034729]
[28.85867882 83.64835358]
[15.00276089 89.72032166]
[-0.05153943 91.21136475]
[-14.82935619 87.97542572]
[-27.88290787 80.32951355]
[-37.93334198 69.02270508]
[-43.99602127 55.16272354]
[-45.47698212 40.10742569]
[-42.23114014 25.33178139]
[-34.57648468 12.28335381]
[-23.26294136 2.24049783]
[-9.39890003 -3.81289172]
[5.65738487 -5.28376484]
[20.43085098 -2.02802062]
[33.47414780 5.63537645]
[43.50941849 16.95564461]
[49.55351639 30.82374001]
[51.01430130 45.88100815]
[47.74865723 60.65229034]
[60.68671417 68.24219513]
[73.62477112 75.83210754]
[78.62392426 69.94458771]
[84.94766998 65.11915588]
[92.36387634 61.65454865]
[100.57316589 59.79738617]
[109.22088623 59.72711182]
[112.92704773 45.19217682]
[116.63320923 30.65724182]
[103.33724213 23.55226898]
[92.12842560 13.47129822]
[83.65843964 1.00042307]
[78.41970825 -13.13531685]
[76.71681213 -28.11408806]
[78.64874268 -43.06504059]
[84.10319519 -57.11895370]
[92.76303864 -69.45874786]
[104.12481689 -79.36699677]
[117.52796936 -86.26765442]
[132.19323730 -89.75952911]
[147.26802063 -89.63960266]
[161.87588501 -85.91484070]
[175.16754150 -78.80181122]
[186.37023926 -68.71405029]
[194.83267212 -56.23804092]
[200.06282043 -42.09912491]
[201.75665283 -27.11932564]
[199.81564331 -12.16954517]
[194.35267639 1.88105679]
[185.68534851 14.21559525]
[174.31756592 24.11695671]
[160.91024780 31.00948906]
[146.24285889 34.49246979]
[131.16815186 34.36340332]
[127.46198273 48.89833832]
[123.75582123 63.43327332]
[134.74148560 73.64675140]
[148.96826172 68.89293671]
[163.19505310 64.13912201]
[177.42182922 59.38531113]
[180.41131592 44.32016754]
[190.54493713 32.77870560]
[205.09678650 27.86551094]
[220.15248108 30.90221596]
[231.66212463 41.07195663]
[236.52967834 55.63912964]
[233.44580078 70.68523407]
[223.24002075 82.16294098]
[208.65766907 86.98481750]
[193.62130737 83.85378265]
[182.17564392 73.61209106]
[167.94886780 78.36590576]
[153.72207642 83.11972046]
[139.49530029 87.87353516]
[133.83256531 118.46660614]
[109.66718292 134.44248962]
[110.60281372 149.41328430]
[111.53843689 164.38407898]
[112.47406769 179.35487366]
[115.43994904 183.80718994]
[116.27239990 188.48258972]
[115.25300598 192.51527405]
[112.97132111 195.28318787]
[112.97132111 210.28318787]
[112.97132111 225.28318787]
[126.65181732 231.96191406]
[136.03765869 243.86959839]
[139.30931091 258.61126709]
[135.87011719 273.25137329]
[126.45438385 284.89840698]
[112.97132111 291.27590942]
[112.97132111 306.27590942]
[112.97132111 321.27590942]
[112.97132111 336.27590942]
[112.97132111 351.27590942]
[112.97132111 366.27590942]
[112.97132111 381.27590942]
[112.97132111 396.27590942]
[112.97132111 411.27590942]
[112.97132111 426.27590942]
[127.51120758 430.33721924]
[140.41558838 438.17172241]
[150.72686768 449.19805908]
[157.67988586 462.59799194]
[160.75869751 477.37713623]
[159.73480225 492.43881226]
[154.68420410 506.66534424]
[145.98167419 519.00103760]
[134.27301025 528.53045654]
[120.42707062 534.54644775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 125]
[27 124]
[28 123]
[29 119]
[30 118]
[31 117]
[32 116]
[39 62]
[40 61]
[41 60]
[67 96]
[68 95]
[69 94]
[97 114]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
