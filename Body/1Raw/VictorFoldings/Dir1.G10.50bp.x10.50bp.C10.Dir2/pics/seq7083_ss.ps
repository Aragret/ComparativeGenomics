%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCUAUUGGGGGGGGGGCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAxxxxxxxxxxAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCCCCCCCCCCCUUGCCCUAUU\
) } def
/len { sequence length } bind def

/coor [
[101.73510742 376.45181274]
[89.17688751 368.10067749]
[79.09066010 356.88821411]
[72.11046600 343.51931763]
[68.67508698 328.83432007]
[69.00045776 313.75634766]
[73.06614685 299.23324585]
[80.61656189 286.17788696]
[91.17709351 275.41101074]
[104.08388519 267.60937500]
[118.52561951 263.26342773]
[117.90164185 248.27639771]
[117.27766418 233.28938293]
[116.65368652 218.30236816]
[116.02970886 203.31535339]
[115.40573120 188.32833862]
[114.78175354 173.34132385]
[114.15777588 158.35430908]
[113.53379822 143.36727905]
[112.90982056 128.38026428]
[106.96363068 123.80940247]
[97.82170105 135.70162964]
[85.92961884 126.55950165]
[95.07125092 114.66767120]
[89.12506104 110.09680176]
[74.48155975 113.34762573]
[59.87266541 116.75060272]
[45.29996490 120.30536652]
[30.72726059 123.86013031]
[21.19946861 136.76751709]
[5.16285515 137.22200012]
[-5.08066320 124.87494659]
[-1.67313540 109.19795227]
[12.77147484 102.21706390]
[27.17249870 109.28742981]
[41.74520111 105.73266602]
[56.31790543 102.17790222]
[62.10829926 97.50703430]
[71.23073578 98.70412445]
[85.87423706 95.45330048]
[71.50772858 91.14013672]
[63.74221420 78.30670929]
[66.58705139 63.57894897]
[78.57344055 54.56082916]
[93.51277924 55.90842819]
[103.69186401 66.92597198]
[103.85448456 81.92700958]
[111.03699493 68.75842285]
[118.21950531 55.58983994]
[125.40200806 42.42125702]
[132.58451843 29.25267601]
[132.30361938 24.77131653]
[133.39109802 20.84850502]
[135.49220276 17.85396957]
[138.16702271 15.99943924]
[140.95121765 15.32449341]
[149.20352173 2.79853106]
[157.45581055 -9.72743130]
[145.78915405 -19.17498207]
[135.10473633 -29.72058487]
[125.50540924 -41.26267624]
[117.08365631 -53.69009781]
[109.92057037 -66.88316345]
[104.08513641 -80.71481323]
[99.63356018 -95.05184174]
[96.60871887 -109.75616455]
[95.03973389 -124.68616486]
[94.94171143 -139.69807434]
[96.31561279 -154.64729309]
[99.14819336 -169.38986206]
[103.41217804 -183.78378296]
[109.06649780 -197.69046021]
[116.05670166 -210.97593689]
[124.31546021 -223.51226807]
[133.76324463 -235.17872620]
[144.30906677 -245.86294556]
[155.85134888 -255.46202087]
[168.27893066 -263.88354492]
[181.47215271 -271.04635620]
[195.30390930 -276.88150024]
[209.64102173 -281.33279419]
[224.34541321 -284.35736084]
[239.27545166 -285.92602539]
[254.28735352 -286.02374268]
[269.23654175 -284.64956665]
[283.97906494 -281.81668091]
[298.37289429 -277.55239868]
[312.27944946 -271.89779663]
[325.56478882 -264.90734863]
[338.10095215 -256.64834595]
[349.76721191 -247.20031738]
[360.45123291 -236.65428162]
[370.05007935 -225.11180115]
[378.47134399 -212.68405151]
[385.63391113 -199.49069214]
[391.46878052 -185.65881348]
[395.91979980 -171.32160950]
[398.94403076 -156.61717224]
[400.51242065 -141.68710327]
[400.60986328 -126.67519379]
[399.23535156 -111.72602844]
[396.40219116 -96.98357391]
[392.13763428 -82.58981323]
[386.48275757 -68.68337250]
[379.49200439 -55.39817429]
[371.23275757 -42.86217117]
[361.78448486 -31.19609451]
[351.23825073 -20.51229668]
[339.69558716 -10.91367149]
[327.26766968 -2.49266124]
[314.07415771 4.66963339]
[300.24215698 10.50423431]
[285.90487671 14.95494843]
[271.20037842 17.97891235]
[256.27026367 19.54700279]
[241.25836182 19.64411926]
[226.30921936 18.26932335]
[211.56683350 15.43585873]
[197.17315674 11.17101192]
[183.26681519 5.51585722]
[169.98176575 -1.47514176]
[161.72947693 11.05082035]
[153.47718811 23.57678223]
[145.75309753 36.43518448]
[138.57058716 49.60376740]
[131.38807678 62.77235031]
[124.20557404 75.94093323]
[117.02306366 89.10951233]
[127.89683533 127.75629425]
[128.52081299 142.74331665]
[129.14479065 157.73033142]
[129.76876831 172.71734619]
[130.39274597 187.70436096]
[131.01672363 202.69137573]
[131.64070129 217.67839050]
[132.26467896 232.66540527]
[132.88865662 247.65242004]
[133.51263428 262.63943481]
[148.26564026 265.76986694]
[161.77627563 272.47164917]
[173.19525146 282.32342529]
[181.80476379 294.70596313]
[187.06361389 308.84085083]
[188.64122009 323.83959961]
[186.43841553 338.75930786]
[180.59367371 352.66220093]
[171.47438049 364.67425537]
[159.65380859 374.04040527]
[145.87500000 380.17190552]
[131.00410461 382.68328857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[25 40]
[26 39]
[27 37]
[28 36]
[29 35]
[47 128]
[48 127]
[49 126]
[50 125]
[51 124]
[56 123]
[57 122]
[58 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
