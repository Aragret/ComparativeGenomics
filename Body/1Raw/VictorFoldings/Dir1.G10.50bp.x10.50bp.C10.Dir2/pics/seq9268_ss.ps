%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCGUUAACGGGGGGGGGGUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCxxxxxxxxxxCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUCCCCCCCCCCUACCGCUAAC\
) } def
/len { sequence length } bind def

/coor [
[92.74082184 382.30014038]
[78.89488220 376.28411865]
[67.18621826 366.75469971]
[58.48369598 354.41903687]
[53.43309402 340.19250488]
[52.40920258 325.13082886]
[55.48800278 310.35168457]
[62.44102478 296.95175171]
[72.75231171 285.92541504]
[85.65669250 278.09091187]
[100.19657898 274.02960205]
[100.19657898 259.02960205]
[100.19657898 244.02958679]
[100.19657898 229.02958679]
[100.19657898 214.02958679]
[100.19657898 199.02958679]
[100.19657898 184.02958679]
[100.19657898 169.02958679]
[100.19657898 154.02958679]
[100.19657898 139.02958679]
[81.01267242 132.79376221]
[68.02993774 118.13970947]
[64.38175964 99.50971222]
[70.48607635 82.16252899]
[84.09055328 70.69017792]
[80.08280945 56.23549271]
[76.07506561 41.78080368]
[72.06732941 27.32611465]
[68.05958557 12.87142658]
[53.67727280 7.35280180]
[45.39902496 -5.42702627]
[46.22359467 -20.45314026]
[55.62549591 -31.97452164]
[51.61775589 -46.42921066]
[40.84695053 -56.86902237]
[26.27424622 -60.42378616]
[11.70154285 -63.97854614]
[-2.87115955 -67.53330994]
[-17.44386292 -71.08807373]
[-32.01656342 -74.64282990]
[-45.39003754 -66.22108459]
[-60.78285980 -69.80390930]
[-69.06273651 -83.26567841]
[-65.31737518 -98.61975861]
[-51.76882172 -106.75685120]
[-36.45519638 -102.84935760]
[-28.46180344 -89.21553802]
[-13.88910007 -85.66077423]
[0.68360239 -82.10601044]
[15.25630474 -78.55124664]
[29.82900810 -74.99649048]
[44.40171051 -71.44172668]
[47.14888763 -82.29600525]
[54.09426880 -90.03423309]
[63.10059738 -93.36100769]
[64.65818024 -108.27991486]
[66.21575928 -123.19882965]
[67.77333832 -138.11773682]
[69.33092499 -153.03665161]
[70.73322296 -167.97096252]
[71.98010254 -182.91905212]
[73.22697449 -197.86714172]
[73.38301086 -212.86631775]
[72.44738007 -227.83711243]
[71.51175690 -242.80790710]
[70.57612610 -257.77868652]
[56.10000610 -262.34011841]
[44.25164413 -271.82592773]
[36.63342667 -284.95327759]
[34.27566147 -299.94677734]
[37.49721146 -314.77871704]
[45.86239243 -327.44314575]
[58.23987961 -336.22735596]
[72.95571899 -339.94332886]
[88.01972198 -338.08850098]
[101.39459229 -330.91372681]
[111.27150726 -319.38937378]
[116.31467438 -305.07397461]
[115.84205627 -289.90356445]
[109.91757202 -275.92984009]
[99.34246063 -265.04263306]
[85.54692078 -258.71432495]
[86.48254395 -243.74353027]
[87.41817474 -228.77273560]
[88.35380554 -213.80195618]
[98.57157135 -224.78363037]
[113.43518066 -226.80184937]
[126.21125793 -218.94235229]
[131.11213684 -204.76556396]
[125.91764832 -190.69369507]
[112.98095703 -183.10145569]
[98.16251373 -185.42820740]
[88.17506409 -196.62025452]
[86.92818451 -181.67218018]
[85.68131256 -166.72409058]
[88.27630615 -159.75187683]
[84.24983215 -151.47906494]
[82.69225311 -136.56016541]
[81.13467407 -121.64125061]
[79.57709503 -106.72233582]
[78.01950836 -91.80342102]
[89.54409790 -78.05202484]
[85.20123291 -59.07720947]
[66.07244873 -50.43695068]
[70.08018494 -35.98226166]
[84.07255554 -30.94722939]
[92.51692963 -18.49104500]
[92.00142670 -3.27304149]
[82.51427460 8.86368656]
[86.52201843 23.31837463]
[90.52975464 37.77306366]
[94.53749847 52.22775269]
[98.54523468 66.68244171]
[110.27583313 67.27951813]
[121.39093781 71.99125671]
[130.45565796 80.45142365]
[136.21932983 91.79762268]
[137.78507996 104.75646973]
[134.74205017 117.78587341]
[148.12832642 124.55399323]
[161.51461792 131.32211304]
[174.90090942 138.09022522]
[191.23590088 136.64109802]
[200.43563843 150.21669006]
[193.03620911 164.85160828]
[176.64952087 165.49069214]
[168.13278198 151.47650146]
[154.74650574 144.70838928]
[141.36021423 137.94027710]
[127.97393036 131.17216492]
[115.19657898 139.02958679]
[115.19657898 154.02958679]
[115.19657898 169.02958679]
[115.19657898 184.02958679]
[115.19657898 199.02958679]
[115.19657898 214.02958679]
[115.19657898 229.02958679]
[115.19657898 244.02958679]
[115.19657898 259.02960205]
[115.19657898 274.02960205]
[129.73646545 278.09091187]
[142.64083862 285.92541504]
[152.95213318 296.95175171]
[159.90515137 310.35168457]
[162.98394775 325.13082886]
[161.96005249 340.19250488]
[156.90945435 354.41903687]
[148.20692444 366.75469971]
[136.49827576 376.28411865]
[122.65232849 382.30014038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[33 105]
[34 104]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[55 101]
[56 100]
[57 99]
[58 98]
[59 97]
[60 95]
[61 94]
[62 93]
[63 85]
[64 84]
[65 83]
[66 82]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
