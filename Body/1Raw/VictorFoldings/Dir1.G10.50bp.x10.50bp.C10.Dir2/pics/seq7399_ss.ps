%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCCCAUGGGGGGGGGGGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUxxxxxxxxxxGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCCCCCCCCCCCAACCCCCUG\
) } def
/len { sequence length } bind def

/coor [
[94.27142334 358.64859009]
[81.39814758 350.74569702]
[71.27384949 339.53518677]
[64.71926880 325.92584229]
[62.26574707 311.02093506]
[64.11218262 296.02868652]
[70.10889435 282.16448975]
[79.76976013 270.55221558]
[92.31160736 262.13327026]
[106.71772766 257.59011841]
[106.40567017 242.59335327]
[106.09361267 227.59660339]
[105.78156281 212.59985352]
[105.46950531 197.60310364]
[105.15744781 182.60633850]
[104.84539032 167.60958862]
[104.53333282 152.61283875]
[104.22127533 137.61608887]
[103.90922546 122.61933136]
[90.52293396 115.85121918]
[78.26056671 124.49033356]
[68.79455566 138.55557251]
[52.65853882 133.35313416]
[53.19076538 116.40753937]
[69.62145233 112.22796631]
[81.88381958 103.58884430]
[89.20292664 90.49568939]
[90.13855743 75.52490234]
[91.07418060 60.55411148]
[92.00981140 45.58331680]
[75.59442139 26.93382454]
[81.58996582 3.33591056]
[73.60005188 -9.35901928]
[65.61013031 -22.05394936]
[57.62021637 -34.74887848]
[51.87069321 -38.22026062]
[49.18849564 -43.32291794]
[49.57475281 -48.14228821]
[42.11984253 -61.15859604]
[32.61148453 -72.75994110]
[21.31247902 -82.62566376]
[10.01347351 -92.49138641]
[-1.28553128 -102.35710907]
[-16.76968384 -105.60543060]
[-21.26777840 -119.80460358]
[-32.56678391 -129.67031860]
[-43.86578751 -139.53604126]
[-50.37002182 -141.21011353]
[-54.40458298 -145.32757568]
[-55.41858673 -150.05487061]
[-66.29740906 -160.38208008]
[-77.17623901 -170.70928955]
[-88.05506134 -181.03648376]
[-104.06553650 -182.05838013]
[-113.13044739 -195.29495239]
[-108.29596710 -210.59225464]
[-93.27069855 -216.21549988]
[-79.58074188 -207.85101318]
[-77.72785950 -191.91531372]
[-66.84902954 -181.58810425]
[-55.97020721 -171.26091003]
[-45.09138107 -160.93370056]
[-34.00006485 -150.83505249]
[-22.70106125 -140.96932983]
[-11.40205574 -131.10360718]
[3.27391505 -128.56094360]
[8.58019161 -113.65611267]
[19.87919617 -103.79039001]
[31.17820168 -93.92466736]
[42.47720718 -84.05894470]
[38.24162674 -98.44851685]
[39.08703995 -113.42467499]
[44.91514969 -127.24614716]
[55.04832840 -138.30592346]
[68.30839539 -145.31809998]
[83.15361786 -147.46736145]
[97.85795593 -144.50382996]
[110.71174622 -136.77207947]
[120.22048187 -125.17104340]
[125.27860260 -111.04959106]
[125.29799652 -96.04960632]
[120.27641296 -81.91512299]
[110.79770660 -70.28954315]
[97.96395874 -62.52456284]
[83.26733398 -59.52301407]
[68.41660309 -61.63388443]
[55.13615036 -68.61351013]
[62.59106064 -55.59719849]
[70.31514740 -42.73879623]
[78.30506134 -30.04386520]
[86.29497528 -17.34893608]
[94.28489685 -4.65400553]
[105.06106567 -5.26650047]
[115.14707947 -1.42290425]
[122.78262329 6.20595551]
[137.19483948 2.04806828]
[151.60705566 -2.10981917]
[166.01927185 -6.26770639]
[180.43148804 -10.42559433]
[182.09306335 -25.53544617]
[189.41482544 -38.85686493]
[201.28025818 -48.35842896]
[215.87998962 -52.59122467]
[230.98764038 -50.90977478]
[244.29940796 -43.57049561]
[253.78536987 -31.69256592]
[257.99896240 -17.08728790]
[256.29763794 -1.98185980]
[248.94084167 11.32024956]
[237.05044556 20.79056740]
[222.43963623 24.98493576]
[207.33645630 23.26374626]
[194.04403687 15.88946724]
[184.58937073 3.98662210]
[170.17715454 8.14450932]
[155.76493835 12.30239677]
[141.35272217 16.46028519]
[126.94050598 20.61817169]
[126.39657593 26.36030960]
[124.58360291 31.87742043]
[121.57483673 36.89072037]
[117.50435638 41.14285278]
[112.56119537 44.41108704]
[106.98060608 46.51894760]
[106.04497528 61.48973846]
[105.10934448 76.46053314]
[104.17372131 91.43132019]
[111.75739288 91.58475494]
[119.23517609 97.58506012]
[122.65580750 108.82446289]
[118.90597534 122.30727386]
[119.21803284 137.30403137]
[119.53009033 152.30078125]
[119.84214783 167.29753113]
[120.15419769 182.29429626]
[120.46625519 197.29104614]
[120.77831268 212.28779602]
[121.09037018 227.28454590]
[121.40242767 242.28131104]
[121.71448517 257.27804565]
[136.29711914 261.21801758]
[149.17832947 269.10797119]
[159.31388855 280.30828857]
[165.88212585 293.91104126]
[168.35063171 308.81347656]
[166.51925659 323.80758667]
[160.53646851 337.67779541]
[150.88728333 349.29974365]
[138.35389709 357.73129272]
[123.95234680 362.28894043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 26]
[21 25]
[27 127]
[28 126]
[29 125]
[30 124]
[32 92]
[33 91]
[34 90]
[35 89]
[38 88]
[39 87]
[40 70]
[41 69]
[42 68]
[43 67]
[45 65]
[46 64]
[47 63]
[50 62]
[51 61]
[52 60]
[53 59]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
