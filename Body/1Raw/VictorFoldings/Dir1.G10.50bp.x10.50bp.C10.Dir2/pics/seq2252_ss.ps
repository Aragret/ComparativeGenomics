%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCCCCUUGGGGGGGGGGGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAxxxxxxxxxxUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACCCCCCCCCCCAAAUCUCCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 418.63851929]
[71.19830322 412.62249756]
[59.48964310 403.09307861]
[50.78712082 390.75741577]
[45.73651886 376.53088379]
[44.71262741 361.46920776]
[47.79142761 346.69003296]
[54.74444962 333.29010010]
[65.05573273 322.26376343]
[77.96011353 314.42926025]
[92.50000000 310.36795044]
[92.50000000 295.36795044]
[92.50000000 280.36795044]
[92.50000000 265.36795044]
[92.50000000 250.36795044]
[92.50000000 235.36795044]
[92.50000000 220.36795044]
[92.50000000 205.36795044]
[92.50000000 190.36795044]
[92.50000000 175.36795044]
[92.50000000 160.36795044]
[92.50000000 145.36795044]
[92.50000000 130.36795044]
[86.92900848 129.88400269]
[81.32071686 128.35501099]
[75.87391663 125.75749207]
[70.79368591 122.10603333]
[66.28401947 117.45464325]
[51.71131897 121.00939941]
[37.13861847 124.56416321]
[23.18357277 134.19189453]
[10.06896305 123.44743347]
[16.76303673 107.87098694]
[33.58385468 109.99146271]
[48.15655899 106.43669891]
[62.72925949 102.88193512]
[64.59687805 87.99865723]
[51.35429001 80.95352173]
[38.11170197 73.90838623]
[24.86911774 66.86325073]
[11.62653160 59.81811905]
[-1.61605382 52.77298355]
[-14.85863972 45.72784805]
[-28.10122490 38.68271255]
[-41.34381104 31.63757896]
[-54.58639526 24.59244347]
[-69.62606049 29.44879341]
[-83.65640259 22.17383385]
[-88.35346985 7.08366966]
[-80.93058014 -6.86897326]
[-65.79160309 -11.40623951]
[-51.91821671 -3.83624864]
[-47.54125977 11.34985733]
[-34.29867554 18.39499283]
[-21.05608940 25.44012642]
[-7.81350470 32.48526382]
[5.42908096 39.53039551]
[18.67166710 46.57553101]
[31.91425323 53.62066650]
[45.15683746 60.66580200]
[58.39942169 67.71093750]
[71.64200592 74.75607300]
[80.90432739 68.74234009]
[91.15313721 65.83497620]
[101.41364288 66.07472992]
[110.77507019 69.21360016]
[118.47148895 74.75585175]
[129.97328186 65.12732697]
[141.47509766 55.49880219]
[133.18534851 42.97841263]
[126.34960175 29.60857391]
[121.05381012 15.55743122]
[117.36458588 1.00169015]
[115.32830811 -13.87559414]
[114.97058868 -28.88732529]
[116.29593658 -43.84471130]
[119.28768158 -58.55965424]
[123.90819550 -72.84709167]
[130.09936523 -86.52734375]
[137.78334045 -99.42837524]
[146.86347961 -111.38793182]
[157.22560120 -122.25561523]
[168.73937988 -131.89474487]
[181.26002502 -140.18411255]
[194.63006592 -147.01947021]
[208.68136597 -152.31483459]
[223.23721313 -156.00363159]
[238.11456299 -158.03945923]
[253.12629700 -158.39672852]
[268.08364868 -157.07093811]
[282.79849243 -154.07875061]
[297.08581543 -149.45780945]
[310.76586914 -143.26623535]
[323.66665649 -135.58186340]
[335.62594604 -126.50136566]
[346.49331665 -116.13892365]
[356.13211060 -104.62486267]
[364.42111206 -92.10397339]
[371.25607300 -78.73372650]
[376.55102539 -64.68226624]
[380.23937988 -50.12630463]
[382.27474976 -35.24889755]
[382.63156128 -20.23714638]
[381.30532837 -5.27983761]
[378.31271362 9.43492413]
[373.69134521 23.72208595]
[367.49935913 37.40196991]
[359.81460571 50.30253983]
[350.73373413 62.26155472]
[340.37097168 73.12861633]
[328.85662842 82.76706696]
[316.33547974 91.05567932]
[302.96502686 97.89022827]
[288.91342163 103.18476105]
[274.35736084 106.87268829]
[259.47988892 108.90763092]
[244.46812439 109.26399231]
[229.51084900 107.93730164]
[214.79617310 104.94424438]
[200.50915527 100.32244873]
[186.82945251 94.13004303]
[173.92912292 86.44491577]
[161.97036743 77.36370087]
[151.10362244 67.00060272]
[139.60182190 76.62913513]
[128.10000610 86.25765991]
[128.34201050 113.23604584]
[107.50000000 130.36795044]
[107.50000000 145.36795044]
[107.50000000 160.36795044]
[107.50000000 175.36795044]
[107.50000000 190.36795044]
[107.50000000 205.36795044]
[107.50000000 220.36795044]
[107.50000000 235.36795044]
[107.50000000 250.36795044]
[107.50000000 265.36795044]
[107.50000000 280.36795044]
[107.50000000 295.36795044]
[107.50000000 310.36795044]
[122.03988647 314.42926025]
[134.94427490 322.26376343]
[145.25555420 333.29010010]
[152.20857239 346.69003296]
[155.28736877 361.46920776]
[154.26348877 376.53088379]
[149.21287537 390.75741577]
[140.51036072 403.09307861]
[128.80169678 412.62249756]
[114.95575714 418.63851929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[28 36]
[29 35]
[30 34]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[67 126]
[68 125]
[69 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
