%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAACAGGGGGGGGGGGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUxxxxxxxxxxCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCCCCCCCCCCCUAACAGG\
) } def
/len { sequence length } bind def

/coor [
[247.72560120 132.05769348]
[235.83647156 123.93527222]
[224.45407104 115.11656189]
[213.61912537 105.63308716]
[203.37040710 95.51876068]
[193.74456787 84.80975342]
[184.77607727 73.54435730]
[176.49700928 61.76286697]
[163.71965027 69.62029266]
[150.94229126 77.47771454]
[138.16493225 85.33514404]
[125.38757324 93.19256592]
[112.61021423 101.04999542]
[100.08425903 109.30228424]
[87.82188416 117.94139862]
[80.99659729 132.21466064]
[66.13593292 133.21965027]
[53.87356567 141.85876465]
[41.61119843 150.49787903]
[29.34882927 159.13699341]
[25.20293427 174.63508606]
[10.44402790 180.92430115]
[-3.60611963 173.18008423]
[-6.16943789 157.34313965]
[4.72043228 145.56221008]
[20.70971489 146.87461853]
[32.97208405 138.23550415]
[45.23445129 129.59638977]
[57.49681854 120.95727539]
[63.44502258 107.30194092]
[79.18276978 105.67903137]
[91.44513702 97.03991699]
[92.64208221 93.29776001]
[95.51198578 90.11824036]
[99.75746918 88.24898529]
[104.75279236 88.27263641]
[117.53015137 80.41521454]
[130.30751038 72.55778503]
[143.08486938 64.70036316]
[155.86222839 56.84293365]
[168.63957214 48.98550797]
[161.27621460 35.09207916]
[154.83551025 20.74780083]
[149.34490967 6.01386595]
[144.82781982 -9.04687119]
[141.30349731 -24.37016678]
[138.78692627 -39.89065552]
[137.28883362 -55.54213715]
[136.81559753 -71.25785065]
[137.36917114 -86.97075653]
[138.94721985 -102.61384583]
[141.54295349 -118.12038422]
[145.14530945 -133.42425537]
[149.73886108 -148.46017456]
[155.30403137 -163.16401672]
[161.81703186 -177.47306824]
[169.25007629 -191.32632446]
[177.57144165 -204.66470337]
[186.74562073 -217.43132019]
[196.73344421 -229.57171631]
[207.49230957 -241.03416443]
[218.97630310 -251.76974487]
[231.13641357 -261.73272705]
[243.92079163 -270.88058472]
[257.27487183 -279.17437744]
[271.14169312 -286.57870483]
[285.46209717 -293.06204224]
[300.17495728 -298.59671021]
[315.21755981 -303.15914917]
[330.52572632 -306.72991943]
[346.03414917 -309.29382324]
[361.67669678 -310.83993530]
[377.38659668 -311.36166382]
[393.09689331 -310.85687256]
[408.74053955 -309.32766724]
[424.25085449 -306.78060913]
[439.56164551 -303.22662354]
[454.60763550 -298.68084717]
[469.32464600 -293.16271973]
[483.64990234 -286.69580078]
[497.52233887 -279.30767822]
[510.88278198 -271.02987671]
[523.67425537 -261.89773560]
[535.84222412 -251.95022583]
[546.05572510 -262.93588257]
[556.26922607 -273.92156982]
[566.48266602 -284.90722656]
[560.87255859 -299.10192871]
[561.98547363 -314.32440186]
[569.60034180 -327.55224609]
[582.20532227 -336.15905762]
[597.29766846 -338.43594360]
[611.88073730 -333.93081665]
[623.05914307 -323.53817749]
[628.61328125 -309.32150269]
[627.44049072 -294.10351562]
[619.77355957 -280.90576172]
[607.13476562 -272.34863281]
[592.03356934 -270.13122559]
[577.46832275 -274.69372559]
[567.25488281 -263.70806885]
[557.04138184 -252.72241211]
[546.82788086 -241.73674011]
[556.75244141 -231.31307983]
[566.03613281 -220.31466675]
[574.64581299 -208.78082275]
[582.55072021 -196.75280762]
[589.72241211 -184.27365112]
[596.13537598 -171.38795471]
[601.76660156 -158.14181519]
[606.59588623 -144.58261108]
[610.60601807 -130.75883484]
[613.78259277 -116.71994019]
[616.11425781 -102.51612854]
[617.59265137 -88.19820404]
[618.21246338 -73.81738281]
[617.97143555 -59.42510986]
[616.87048340 -45.07285309]
[614.91345215 -30.81196213]
[612.10742188 -16.69344521]
[608.46228027 -2.76780820]
[603.99121094 10.91513443]
[598.71008301 24.30643463]
[592.63775635 37.35818481]
[585.79602051 50.02369690]
[578.20935059 62.25765610]
[569.90472412 74.01629639]
[560.91198730 85.25754547]
[551.26324463 95.94118500]
[540.99298096 106.02899170]
[530.13787842 115.48487854]
[518.73687744 124.27499390]
[506.83065796 132.36790466]
[494.46182251 139.73461914]
[481.67459106 146.34881592]
[468.51473999 152.18678284]
[455.02929688 157.22766113]
[441.26647949 161.45336914]
[427.27557373 164.84880066]
[413.10656738 167.40179443]
[398.81015015 169.10319519]
[384.43750000 169.94691467]
[370.03997803 169.92990112]
[355.66906738 169.05221558]
[341.37622070 167.31698608]
[327.21255493 164.73039246]
[313.22872925 161.30168152]
[299.47479248 157.04309082]
[285.99987793 151.96984863]
[272.85223389 146.10008240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[14 32]
[15 31]
[17 29]
[18 28]
[19 27]
[20 26]
[84 103]
[85 102]
[86 101]
[87 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
