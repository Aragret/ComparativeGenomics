%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACAACUAGGGGGGGGGGCGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCxxxxxxxxxxACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACCCCCCCCCCCUAUACUACUA\
) } def
/len { sequence length } bind def

/coor [
[81.32035828 348.10928345]
[68.76213837 339.75811768]
[58.67591476 328.54568481]
[51.69572067 315.17678833]
[48.26033783 300.49179077]
[48.58571243 285.41381836]
[52.65139771 270.89071655]
[60.20181656 257.83535767]
[70.76234436 247.06846619]
[83.66914368 239.26683044]
[98.11087036 234.92088318]
[97.48689270 219.93386841]
[96.86291504 204.94685364]
[96.23893738 189.95983887]
[95.61495972 174.97280884]
[94.99098206 159.98579407]
[94.36700439 144.99877930]
[93.74302673 130.01176453]
[93.11904907 115.02474976]
[83.97731781 103.13237000]
[69.65471649 98.67555237]
[55.33212280 94.21874237]
[48.70623779 95.31654358]
[43.35165787 93.18118286]
[40.51340103 89.26712799]
[26.38859940 84.21837616]
[12.26379585 79.16961670]
[-1.86100674 74.12086487]
[4.19664860 87.84328461]
[0.18491401 102.29685974]
[-12.07885551 110.93399048]
[-27.03905106 109.84195709]
[-37.91856003 99.51547241]
[-39.78885651 84.63253021]
[-31.80267715 71.93524933]
[-17.57743835 67.17562866]
[-30.82002449 60.13049698]
[-44.06261063 53.08536148]
[-57.30519485 46.04022598]
[-70.54778290 38.99509048]
[-83.79036713 31.94995689]
[-97.03295135 24.90482140]
[-110.41923523 18.13670731]
[-123.94342804 11.64854145]
[-137.46762085 5.16037655]
[-150.99180603 -1.32778847]
[-167.29312134 0.46085337]
[-176.77328491 -12.92041683]
[-169.67993164 -27.70609665]
[-153.31008911 -28.68594551]
[-144.50364685 -14.85197830]
[-130.97944641 -8.36381340]
[-117.45526123 -1.87564814]
[-103.93107605 4.61251688]
[-99.15258026 3.87665462]
[-93.86830139 6.18050623]
[-89.98781586 11.66223621]
[-76.74523163 18.70737076]
[-63.50264740 25.75250626]
[-50.26005936 32.79764175]
[-37.01747513 39.84277725]
[-23.77488899 46.88790894]
[-10.53230381 53.93304443]
[3.18774962 59.99605942]
[17.31255341 65.04481506]
[31.43735504 70.09357452]
[45.56216049 75.14232635]
[59.78893661 79.89614105]
[74.11153412 84.35295868]
[88.43413544 88.80977631]
[74.31770325 83.73765564]
[63.88703537 72.95799255]
[59.28208923 58.68233109]
[61.44761276 43.83946991]
[69.93933105 31.47457123]
[83.01507568 24.12441444]
[97.99224091 23.29695892]
[111.79809570 29.16196442]
[121.60024261 40.51616669]
[125.38767242 55.03013992]
[122.38334656 69.72619629]
[113.20403290 81.58898163]
[126.72821808 75.10081482]
[140.25241089 68.61264801]
[153.77659607 62.12448502]
[167.30079651 55.63631821]
[180.82498169 49.14815521]
[194.34916687 42.65998840]
[197.14923096 26.01031303]
[209.18542480 14.40808582]
[225.59788513 12.26401997]
[239.92079163 20.22390366]
[253.30708313 13.45578861]
[266.69335938 6.68767357]
[265.17129517 -8.41357613]
[269.21096802 -23.04386711]
[278.26608276 -35.22457123]
[291.11196899 -43.30834961]
[306.01135254 -46.20193481]
[320.94921875 -43.51399994]
[333.90530396 -35.60805893]
[343.12744141 -23.55332947]
[347.36840820 -8.98011208]
[346.05465698 6.14068365]
[339.36383057 19.76409340]
[328.20083618 30.04766464]
[314.07534790 35.60062790]
[298.89776611 35.67199326]
[284.72070312 30.25210381]
[273.46148682 20.07395744]
[260.07519531 26.84207344]
[246.68890381 33.61018753]
[245.78161621 46.96581650]
[238.32002258 58.21019363]
[226.17265320 64.33326721]
[212.47879028 63.63237000]
[200.83734131 56.18418121]
[187.31314087 62.67234421]
[173.78895569 69.16050720]
[160.26477051 75.64867401]
[146.74057007 82.13684082]
[133.21638489 88.62500763]
[119.69219208 95.11316681]
[134.62704468 93.71666718]
[146.64289856 102.69549561]
[149.53593445 117.41386414]
[141.81248474 130.27264404]
[127.46017456 134.63282776]
[113.88913727 128.24322510]
[108.10606384 114.40077209]
[108.73004150 129.38778687]
[109.35401917 144.37480164]
[109.97799683 159.36181641]
[110.60197449 174.34883118]
[111.22595215 189.33586121]
[111.84992981 204.32287598]
[112.47390747 219.30989075]
[113.09788513 234.29690552]
[127.85089111 237.42735291]
[141.36152649 244.12910461]
[152.78050232 253.98089600]
[161.39001465 266.36343384]
[166.64886475 280.49832153]
[168.22647095 295.49703979]
[166.02366638 310.41677856]
[160.17892456 324.31964111]
[151.05964661 336.33172607]
[139.23907471 345.69787598]
[125.46025848 351.82937622]
[110.58935547 354.34075928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 70]
[21 69]
[22 68]
[25 67]
[26 66]
[27 65]
[28 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 54]
[44 53]
[45 52]
[46 51]
[82 123]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[88 117]
[92 112]
[93 111]
[94 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
