%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACUAUCUGGGGGGGGGGAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGxxxxxxxxxxUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCCCCCCCCCCCAACUAUCU\
) } def
/len { sequence length } bind def

/coor [
[84.46761322 358.34225464]
[70.62167358 352.32623291]
[58.91300964 342.79681396]
[50.21048355 330.46115112]
[45.15988159 316.23461914]
[44.13599396 301.17294312]
[47.21479034 286.39376831]
[54.16781235 272.99383545]
[64.47909546 261.96749878]
[77.38347626 254.13301086]
[91.92336273 250.07168579]
[91.92336273 235.07168579]
[91.92336273 220.07168579]
[91.92336273 205.07168579]
[91.92336273 190.07168579]
[91.92336273 175.07168579]
[91.92336273 160.07168579]
[91.92336273 145.07168579]
[91.92336273 130.07168579]
[91.92336273 115.07169342]
[82.78163147 103.17931366]
[68.28603363 99.32215118]
[53.79043579 95.46498871]
[39.29484177 91.60783386]
[23.96912575 95.53632355]
[13.65943241 84.78646088]
[-0.87550396 81.08029938]
[-15.44820690 77.52553558]
[-32.96143723 83.11718750]
[-45.19758224 70.57618713]
[-59.84108353 67.32536316]
[-74.48458099 64.07453918]
[-83.37677002 70.47879028]
[-94.10697174 70.88655853]
[-103.08320618 65.40509796]
[-107.43499756 56.07269287]
[-121.93058777 52.21553421]
[-136.46553040 48.50937271]
[-151.03822327 44.95460892]
[-165.61093140 41.39984894]
[-178.98440552 49.82159042]
[-194.37722778 46.23876953]
[-202.65710449 32.77700424]
[-198.91174316 17.42292213]
[-185.36318970 9.28583050]
[-170.04956055 13.19331932]
[-162.05616760 26.82714462]
[-147.48347473 30.38190651]
[-132.91076660 33.93666840]
[-125.61998749 32.45672989]
[-118.07343292 37.71993637]
[-103.57783508 41.57709503]
[-85.38614655 35.13564682]
[-71.23375702 49.43103409]
[-56.59025574 52.68186188]
[-41.94675446 55.93268585]
[-31.53722572 49.69177246]
[-19.27850914 52.32670212]
[-11.89344501 62.95283508]
[2.67925787 66.50759888]
[9.97003460 65.02765656]
[17.51659203 70.29086304]
[31.80548477 66.08648682]
[43.15200043 77.11223602]
[57.64759827 80.96939850]
[72.14319611 84.82655334]
[86.63879395 88.68371582]
[101.31531525 85.58539581]
[113.01493835 76.19822693]
[124.71456146 66.81106567]
[118.67310333 52.99311066]
[116.41612244 38.09373093]
[118.09152222 23.12947655]
[123.57913208 9.11973667]
[132.49928284 -2.98268056]
[144.23910522 -12.35635853]
[157.99455261 -18.36701775]
[172.82557678 -20.61043739]
[187.72030640 -18.93962860]
[201.66407776 -13.47445202]
[213.70858765 -4.59304380]
[225.40820312 -13.98020554]
[237.10783386 -23.36736679]
[237.03234863 -36.87484360]
[244.65625000 -47.78833389]
[256.99807739 -52.23286819]
[269.45358276 -48.78952026]
[281.34597778 -57.93125534]
[293.23834229 -67.07299042]
[305.13073730 -76.21472168]
[317.02310181 -85.35646057]
[313.84222412 -100.28444672]
[317.46170044 -115.11219025]
[327.16290283 -126.89564514]
[341.01962280 -133.29518127]
[356.28060913 -133.04017639]
[369.91577148 -126.18126678]
[379.21786499 -114.08027649]
[382.33993530 -99.13988495]
[378.66210938 -84.32649994]
[368.91458130 -72.58134460]
[355.03277588 -66.23641968]
[339.77288818 -66.55152130]
[326.16485596 -73.46408081]
[314.27246094 -64.32234192]
[302.38009644 -55.18061066]
[290.48770142 -46.03887558]
[278.59533691 -36.89714050]
[277.15084839 -20.17077065]
[263.81329346 -9.42863560]
[246.49499512 -11.66774368]
[234.79536438 -2.28058195]
[223.09574890 7.10657978]
[229.15576172 20.78962135]
[231.46913147 35.58641815]
[229.87222290 50.48924637]
[224.46791077 64.48159790]
[215.61900330 76.60749054]
[203.92382812 86.03680420]
[190.17585754 92.12210083]
[175.30979919 94.44307709]
[160.33808899 92.83557892]
[146.28196716 87.40321350]
[134.10173035 78.51068878]
[122.40209961 87.89785767]
[110.70247650 97.28501892]
[112.14512634 100.35579681]
[112.63922119 104.00708008]
[111.98093414 107.93087006]
[110.06884766 111.75388336]
[106.92336273 115.07169342]
[106.92336273 130.07168579]
[106.92336273 145.07168579]
[106.92336273 160.07168579]
[106.92336273 175.07168579]
[106.92336273 190.07168579]
[106.92336273 205.07168579]
[106.92336273 220.07168579]
[106.92336273 235.07168579]
[106.92336273 250.07168579]
[121.46324921 254.13301086]
[134.36763000 261.96749878]
[144.67892456 272.99383545]
[151.63194275 286.39376831]
[154.71073914 301.17294312]
[153.68684387 316.23461914]
[148.63624573 330.46115112]
[139.93371582 342.79681396]
[128.22505188 352.32623291]
[114.37911987 358.34225464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 67]
[22 66]
[23 65]
[24 64]
[26 62]
[27 60]
[28 59]
[30 56]
[31 55]
[32 54]
[36 52]
[37 51]
[38 49]
[39 48]
[40 47]
[68 126]
[69 125]
[70 124]
[81 113]
[82 112]
[83 111]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
