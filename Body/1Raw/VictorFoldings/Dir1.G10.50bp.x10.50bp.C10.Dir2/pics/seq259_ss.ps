%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAAAAUUGGGGGGGGGGUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCxxxxxxxxxxAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAACCCCCCCCCCAAUAAAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[-18.87786102 302.15435791]
[-28.38153839 296.25622559]
[-37.59317780 289.91168213]
[-46.49182892 283.13510132]
[-55.05724716 275.94195557]
[-63.26994324 268.34860229]
[-71.11124420 260.37228394]
[-78.56330872 252.03114319]
[-85.60918427 243.34419250]
[-92.23284912 234.33114624]
[-98.41922760 225.01254272]
[-104.15425110 215.40956116]
[-117.44158936 222.36991882]
[-130.72892761 229.33027649]
[-143.94412231 236.42668152]
[-157.08575439 243.65838623]
[-170.22738647 250.89009094]
[-183.36901855 258.12179565]
[-196.51065063 265.35348511]
[-209.65226746 272.58520508]
[-222.79389954 279.81689453]
[-235.93553162 287.04861450]
[-238.78889465 302.42364502]
[-250.89039612 312.32757568]
[-266.52606201 312.08404541]
[-278.31326294 301.80804443]
[-280.68640137 286.35156250]
[-272.52493286 273.01272583]
[-257.68252563 268.08969116]
[-243.16723633 273.90698242]
[-230.02560425 266.67526245]
[-216.88397217 259.44357300]
[-203.74234009 252.21185303]
[-190.60070801 244.98016357]
[-177.45907593 237.74845886]
[-164.31744385 230.51675415]
[-151.17582703 223.28504944]
[-146.80497742 217.26774597]
[-137.68928528 216.04293823]
[-124.40194702 209.08258057]
[-111.11460876 202.12222290]
[-123.54145813 170.90515137]
[-131.37976074 138.23265076]
[-134.46859741 104.77533722]
[-132.74458313 71.22001648]
[-126.24309540 38.25545120]
[-115.09758759 6.55829191]
[-99.53685760 -23.22081947]
[-112.04088593 -31.50629425]
[-124.54492188 -39.79176712]
[-140.93736267 -40.26070786]
[-148.48831177 -54.81801605]
[-139.42999268 -68.48838043]
[-123.08084106 -67.20890808]
[-116.25945282 -52.29580307]
[-103.75541687 -44.01033020]
[-91.25138092 -35.72485352]
[-84.56237793 -44.68950653]
[-77.45355225 -53.32502747]
[-69.94105530 -61.61177063]
[-62.04198456 -69.53089142]
[-53.77430725 -77.06436157]
[-45.15683365 -84.19506073]
[-36.20916367 -90.90676117]
[-26.95165062 -97.18418884]
[-17.40535355 -103.01307678]
[-7.59198761 -108.38015747]
[2.46612334 -113.27322388]
[12.74609947 -117.68115234]
[23.22455788 -121.59390259]
[33.87765884 -125.00258636]
[44.68117523 -127.89943695]
[55.61052704 -130.27787781]
[66.64085388 -132.13249207]
[77.74706268 -133.45906067]
[88.90389252 -134.25456238]
[100.08596802 -134.51719666]
[111.26784515 -134.24636841]
[122.42408752 -133.44268799]
[133.52932739 -132.10797119]
[144.55828857 -130.24526978]
[155.48588562 -127.85881805]
[166.28727722 -124.95404816]
[176.93788147 -121.53755951]
[187.41346741 -117.61711884]
[197.69021606 -113.20166016]
[207.74473572 -108.30122375]
[217.55415344 -102.92694855]
[227.09617615 -97.09106445]
[236.34909058 -90.80684662]
[245.29183960 -84.08859253]
[253.90408325 -76.95157623]
[262.16622925 -69.41204071]
[270.05947876 -61.48713684]
[277.56591797 -53.19488907]
[284.66839600 -44.55416107]
[291.35083008 -35.58460617]
[297.59799194 -26.30662727]
[303.39562988 -16.74133492]
[308.73062134 -6.91048384]
[313.59078979 3.16356254]
[317.96511841 13.45788765]
[321.84359741 23.94907570]
[325.21743774 34.61325836]
[328.07897949 45.42618179]
[330.42169189 56.36325073]
[332.24026489 67.39957428]
[333.53051758 78.51006317]
[334.28958130 89.66943359]
[334.51568604 100.85230255]
[334.20831299 112.03323364]
[333.36816406 123.18679810]
[331.99716187 134.28761292]
[330.09844971 145.31042480]
[327.67630005 156.23017883]
[324.73623657 167.02201843]
[321.28497314 177.66139221]
[317.33032227 188.12411499]
[312.88128662 198.38636780]
[307.94802856 208.42481995]
[302.54171753 218.21664429]
[296.67468262 227.73954773]
[290.36029053 236.97186279]
[283.61282349 245.89260864]
[276.44772339 254.48149109]
[268.88122559 262.71896362]
[260.93057251 270.58627319]
[252.61383057 278.06555176]
[243.94993591 285.13980103]
[234.95860291 291.79287720]
[225.66026306 298.00967407]
[216.07606506 303.77603149]
[206.22784424 309.07885742]
[196.13796997 313.90609741]
[185.82940674 318.24673462]
[175.32559204 322.09094238]
[164.65043640 325.42990112]
[153.82823181 328.25610352]
[142.88356018 330.56304932]
[131.84135437 332.34555054]
[120.72670746 333.59951782]
[109.56491852 334.32208252]
[98.38137054 334.51162720]
[87.20149994 334.16772461]
[76.05074310 333.29113770]
[64.95446777 331.88388062]
[53.93791580 329.94915771]
[43.02613831 327.49133301]
[32.24396515 324.51602173]
[21.61592102 321.02999878]
[11.16618061 317.04119873]
[0.91851455 312.55865479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 41]
[13 40]
[14 39]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
