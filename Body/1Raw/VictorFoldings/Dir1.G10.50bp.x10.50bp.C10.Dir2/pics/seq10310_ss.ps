%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAUCCUCAUGGGGGGGGGGUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCxxxxxxxxxxUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUACCCCCCCCCCUCCAUCCUCAU\
) } def
/len { sequence length } bind def

/coor [
[75.01488495 560.22637939]
[60.99293900 554.67340088]
[48.79298019 545.80706787]
[39.18191147 534.18475342]
[32.76388550 520.53704834]
[29.94234848 505.72183228]
[30.89466476 490.67047119]
[35.56097031 476.32904053]
[43.64793396 463.59909058]
[54.64720917 453.28082275]
[67.86737061 446.02282715]
[82.47737885 442.28140259]
[82.47737885 427.28140259]
[82.47737885 412.28140259]
[82.47737885 397.28140259]
[82.47737885 382.28140259]
[82.47737885 367.28140259]
[82.47737885 352.28140259]
[82.47737885 337.28140259]
[82.47737885 322.28140259]
[82.47737885 307.28140259]
[82.47737885 292.28140259]
[82.47737885 277.28140259]
[70.13773346 274.19671631]
[58.80352402 268.40533447]
[49.06021118 260.20202637]
[41.41208267 250.00621033]
[36.25612640 238.34056091]
[33.86145782 225.80424500]
[34.35525513 213.04208374]
[37.71602249 200.71145630]
[43.77449036 189.44834900]
[52.22212601 179.83465576]
[62.62686539 172.36804199]
[74.45519257 167.43620300]
[87.09951019 165.29673767]
[88.33012390 150.34730530]
[89.56073761 135.39787292]
[90.79135132 120.44844055]
[79.97914124 114.32030487]
[73.31463623 102.51953125]
[73.67824554 87.84453583]
[59.63627243 82.56979370]
[46.10393524 90.40623474]
[30.70938873 87.65997314]
[20.72146797 75.62770081]
[20.85616302 59.99069977]
[31.04987717 48.13227463]
[46.48944855 45.65161514]
[59.88478088 53.72001266]
[64.91101074 68.52781677]
[78.95298767 73.80255890]
[92.44837189 67.25468445]
[96.99566650 52.96055603]
[101.54295349 38.66642380]
[106.09024811 24.37229538]
[105.71353149 15.18241596]
[110.88042450 9.83307743]
[115.72023773 -4.36467552]
[120.56005859 -18.56242752]
[113.84033203 -32.61529541]
[118.95084381 -46.94488907]
[132.38951111 -53.26451874]
[137.22933960 -67.46227264]
[142.06915283 -81.66001892]
[145.42840576 -96.27902985]
[147.27172852 -111.16533661]
[141.28895569 -125.81173706]
[150.53164673 -137.49171448]
[152.37496948 -152.37802124]
[154.21829224 -167.26432800]
[140.70788574 -174.13781738]
[130.36540222 -185.21974182]
[124.43975067 -199.17189026]
[123.64646912 -214.30946350]
[128.08134460 -228.80456543]
[137.20886230 -240.90679932]
[149.92683411 -249.15478516]
[164.69947815 -252.55253601]
[179.74293518 -250.68974304]
[193.24064636 -243.79136658]
[203.56269836 -232.69041443]
[209.46263123 -218.72737122]
[210.22801208 -203.58834839]
[205.76643372 -189.10145569]
[196.61662292 -177.01606750]
[183.88348389 -168.79151917]
[169.10459900 -165.42100525]
[167.26127625 -150.53469849]
[165.41795349 -135.64839172]
[171.53257751 -122.06676483]
[162.15803528 -109.32201385]
[160.31471252 -94.43570709]
[171.02008057 -104.94260406]
[185.51014709 -108.82052612]
[200.03245544 -105.06520081]
[210.82624817 -94.64914703]
[215.09628296 -80.26976013]
[211.73678589 -65.65081024]
[201.61773682 -54.57810593]
[187.35961914 -49.91909409]
[172.65481567 -52.88030624]
[161.31135559 -62.69488525]
[156.26690674 -76.82020569]
[151.42707825 -62.62245560]
[146.58726501 -48.42470169]
[153.36784363 -35.21261215]
[148.66183472 -20.74512672]
[134.75781250 -13.72261143]
[129.91799927 0.47514084]
[125.07817841 14.67289352]
[120.38437653 28.91958618]
[115.83708191 43.21371460]
[111.28979492 57.50784683]
[106.74250793 71.80197906]
[124.09564209 88.25875854]
[122.38195801 110.24470520]
[105.74078369 121.67904663]
[104.51016998 136.62847900]
[103.27956390 151.57791138]
[102.04895020 166.52735901]
[118.30480194 172.89714050]
[131.82669067 183.91471863]
[141.33013916 198.51998901]
[145.91656494 215.31275940]
[145.15815735 232.68688965]
[139.13778687 248.98393250]
[128.44010925 262.65151978]
[114.09477997 272.39108276]
[97.47737885 277.28140259]
[97.47737885 292.28140259]
[97.47737885 307.28140259]
[97.47737885 322.28140259]
[97.47737885 337.28140259]
[97.47737885 352.28140259]
[97.47737885 367.28140259]
[97.47737885 382.28140259]
[97.47737885 397.28140259]
[97.47737885 412.28140259]
[97.47737885 427.28140259]
[97.47737885 442.28140259]
[112.08739471 446.02282715]
[125.30755615 453.28082275]
[136.30682373 463.59909058]
[144.39379883 476.32904053]
[149.06010437 490.67047119]
[150.01242065 505.72183228]
[147.19087219 520.53704834]
[140.77285767 534.18475342]
[131.16178894 545.80706787]
[118.96182251 554.67340088]
[104.93988037 560.22637939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[36 121]
[37 120]
[38 119]
[39 118]
[42 52]
[43 51]
[53 115]
[54 114]
[55 113]
[56 112]
[58 111]
[59 110]
[60 109]
[63 106]
[64 105]
[65 104]
[66 93]
[67 92]
[69 90]
[70 89]
[71 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
