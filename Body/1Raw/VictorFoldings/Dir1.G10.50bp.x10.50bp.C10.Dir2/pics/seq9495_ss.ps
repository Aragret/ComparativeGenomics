%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCUAGCCCUAGGGGGGGGGGAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUxxxxxxxxxxAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACCCCCCCCCCCUCAUCCUAACCCUA\
) } def
/len { sequence length } bind def

/coor [
[83.53464508 401.57827759]
[69.51991272 396.09436035]
[56.84448624 387.98141479]
[45.99558640 377.55130005]
[37.39020920 365.20489502]
[31.35912704 351.41677856]
[28.13415718 336.71691895]
[27.83925819 321.67034912]
[30.48576546 306.85540771]
[35.97195435 292.84155273]
[44.08694839 280.16744995]
[54.51883316 269.32025146]
[66.86663055 260.71685791]
[80.65573120 254.68800354]
[95.35610962 251.46542358]
[95.05975342 236.46835327]
[94.76339722 221.47126770]
[94.46703339 206.47419739]
[94.17067719 191.47712708]
[93.87432098 176.48005676]
[93.57796478 161.48298645]
[93.28160858 146.48591614]
[92.98525238 131.48884583]
[92.68888855 116.49176788]
[82.67398071 105.32478333]
[67.79751587 103.40363312]
[52.92105103 101.48247528]
[38.04459000 99.56131744]
[23.16812515 97.64015961]
[8.29166222 95.71900177]
[-8.50250626 103.21107483]
[-22.04621696 92.08725739]
[-36.95773315 90.46038818]
[-51.86924744 88.83352661]
[-60.99107361 101.11112976]
[-74.94147491 107.13467407]
[-89.93420410 105.37840271]
[-101.95441437 96.41344452]
[-107.83376312 82.72772980]
[-122.74528503 81.10086060]
[-137.52659607 88.20331573]
[-150.91369629 78.73137665]
[-149.13508606 62.42896652]
[-134.02044678 56.06660461]
[-121.11841583 66.18934631]
[-106.20690155 67.81620789]
[-97.51473236 55.72026825]
[-83.84414673 49.55820084]
[-68.82542419 51.07621765]
[-56.50211716 59.96625900]
[-50.24238205 73.92201233]
[-35.33086777 75.54887390]
[-20.41935158 77.17574310]
[-10.76317883 69.83462524]
[1.70385146 71.10302734]
[10.21281910 80.84253693]
[25.08928108 82.76369476]
[39.96574402 84.68485260]
[54.84220886 86.60601044]
[69.71867371 88.52716827]
[84.59513092 90.44832611]
[98.43910980 84.67386627]
[107.54110718 72.75104523]
[116.64311218 60.82822800]
[117.88281250 54.24634552]
[121.71098328 49.95571136]
[126.34779358 48.62364578]
[135.91372681 37.06972504]
[145.47964478 25.51580620]
[150.84132385 11.50679684]
[151.43392944 -3.48149300]
[152.02653503 -18.46978188]
[152.61912537 -33.45807266]
[138.80145264 -39.79370880]
[128.46379089 -50.93827057]
[123.18256378 -65.19229126]
[123.76312256 -80.38213348]
[130.11692810 -94.19146729]
[141.27508545 -104.51445770]
[155.53604126 -109.77692413]
[170.72509766 -109.17639160]
[184.52606201 -102.80442047]
[194.83436584 -91.63269806]
[200.07807922 -77.36483765]
[199.45755005 -62.17657089]
[193.06744385 -48.38400650]
[181.88217163 -38.09040833]
[167.60742188 -32.86547470]
[167.01481628 -17.87718391]
[166.42222595 -2.88889384]
[165.82962036 12.09939575]
[178.43383789 20.23166084]
[191.84570312 13.51439095]
[205.25758362 6.79712152]
[218.66944885 0.07985205]
[215.33219910 -14.62137794]
[215.61085510 -29.69406128]
[219.48922729 -44.26189041]
[226.74182129 -57.47791672]
[236.94699097 -68.57376862]
[249.51141357 -76.90435791]
[263.70462036 -81.98534393]
[278.70141602 -83.52133179]
[293.62994385 -81.42301941]
[307.62222290 -75.81240082]
[319.86483765 -67.01567078]
[329.64593506 -55.54425812]
[336.39691162 -42.06509781]
[339.72525024 -27.36184692]
[339.43743896 -12.28933430]
[335.55026245 2.27614236]
[328.28964233 15.48776627]
[318.07775879 26.57743073]
[305.50827026 34.90039825]
[291.31198120 39.97277832]
[276.31427002 41.49967575]
[261.38702393 39.39231491]
[247.39813232 33.77321625]
[235.16087341 24.96906281]
[225.38671875 13.49172306]
[211.97485352 20.20899200]
[198.56297302 26.92626190]
[185.15110779 33.64353180]
[169.60278320 39.60382080]
[157.03356934 35.08173370]
[147.46763611 46.63565063]
[137.90171814 58.18957138]
[128.56593323 69.93022919]
[119.46392822 81.85305023]
[110.36192322 93.77586365]
[113.44372559 98.32762146]
[114.36585236 104.34003448]
[112.48204803 110.74043274]
[107.68596649 116.19541168]
[107.98232269 131.19248962]
[108.27867889 146.18955994]
[108.57503510 161.18663025]
[108.87139130 176.18370056]
[109.16774750 191.18077087]
[109.46411133 206.17784119]
[109.76046753 221.17491150]
[110.05682373 236.17198181]
[110.35317993 251.16906738]
[125.16939545 253.80838013]
[139.18591309 259.28775024]
[151.86395264 267.39660645]
[162.71623230 277.82321167]
[171.32560730 290.16683960]
[177.36114502 303.95300293]
[180.59088135 318.65182495]
[180.89065552 333.69827271]
[178.24893188 348.51406860]
[172.76728821 362.52969360]
[164.65638733 375.20645142]
[154.22802734 386.05703735]
[141.88301086 394.66439819]
[128.09587097 400.69772339]
[113.39653015 403.92504883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[32 53]
[33 52]
[34 51]
[39 46]
[40 45]
[62 130]
[63 129]
[64 128]
[67 127]
[68 126]
[69 125]
[70 91]
[71 90]
[72 89]
[73 88]
[92 123]
[93 122]
[94 121]
[95 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
