%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAUAUCACUCUGGGGGGGGGGCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAxxxxxxxxxxUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCCCCCCCCCCCAAAUAUCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[87.35980988 580.67657471]
[73.48567963 574.82836914]
[61.13087082 566.22296143]
[50.83549881 555.23663330]
[43.04962158 542.34967041]
[38.11360931 528.12542725]
[36.24324036 513.18572998]
[37.52027893 498.18362427]
[41.88890076 483.77499390]
[49.15813065 470.58969116]
[59.01018524 459.20413208]
[71.01437378 450.11605835]
[84.64592743 443.72274780]
[99.30893707 440.30368042]
[99.00880432 425.30670166]
[98.70867157 410.30969238]
[98.40853882 395.31271362]
[98.10840607 380.31570435]
[97.80827332 365.31869507]
[97.50814056 350.32171631]
[97.20800781 335.32470703]
[96.90787506 320.32772827]
[96.60774231 305.33071899]
[96.30760956 290.33370972]
[96.00747681 275.33673096]
[95.70734406 260.33972168]
[81.77194977 254.97932434]
[70.92110443 244.66406250]
[64.82977295 230.94326782]
[64.45464325 215.89511108]
[69.88400269 201.81193542]
[80.31956482 190.85099792]
[94.19366455 184.70405579]
[93.89353180 169.70704651]
[93.59339905 154.71005249]
[93.29326630 139.71305847]
[92.99313354 124.71606445]
[75.78204346 108.57148743]
[79.00525665 85.19457245]
[69.80454254 73.34777069]
[56.77180481 80.82398987]
[42.82538605 86.41358185]
[28.23675156 90.00773621]
[13.28987694 91.53648376]
[-1.72429335 90.97007751]
[-16.51350403 88.31953430]
[-30.78988075 83.63645935]
[-44.27552795 77.01199341]
[-56.70794296 68.57510376]
[-67.84512329 58.48999786]
[-77.47028351 46.95299911]
[-85.39607239 34.18867111]
[-91.46820068 20.44547844]
[-95.56848145 5.99093390]
[-97.61709595 -8.89359856]
[-97.57417297 -23.91838837]
[-95.44054413 -38.79097366]
[-91.25773621 -53.22185135]
[-85.10717773 -66.93012238]
[-77.10858917 -79.64895630]
[-67.41766357 -91.13077545]
[-56.22304153 -101.15207672]
[-43.74262238 -109.51779175]
[-30.21934319 -116.06509399]
[-15.91644192 -120.66651917]
[-1.11232746 -123.23251343]
[13.90483475 -123.71312714]
[28.84272957 -122.09899139]
[43.41058731 -118.42154694]
[57.32484055 -112.75235748]
[70.31464386 -105.20178986]
[82.12715149 -95.91680908]
[92.53242493 -85.07815552]
[101.32791901 -72.89679718]
[108.34243011 -59.60985947]
[113.43942261 -45.47597122]
[116.51967621 -30.77025223]
[117.52323914 -15.77895355]
[116.43056488 -0.79388773]
[113.26293945 13.89325809]
[108.08200836 27.99659538]
[100.98862457 41.24159622]
[92.12086487 53.37044525]
[81.65134430 64.14704895]
[90.85206604 75.99385071]
[99.48596954 74.31507111]
[108.18013763 75.64707184]
[116.89950562 63.44163513]
[125.61886597 51.23619843]
[134.33824158 39.03076172]
[130.25889587 23.93463707]
[136.88441467 9.77001190]
[151.08641052 3.22499013]
[166.15913391 7.38993168]
[174.98571777 20.29827690]
[173.39851379 35.85510254]
[162.14695740 46.71494675]
[146.54367065 47.75012970]
[137.82431030 59.95556641]
[129.10493469 72.16100311]
[120.38557434 84.36643219]
[120.60091400 84.65131378]
[120.81227875 84.93916321]
[135.00210571 80.07614136]
[149.19192505 75.21312714]
[163.38174438 70.35010529]
[177.57156372 65.48708344]
[187.93453979 52.77720642]
[204.07766724 55.66361237]
[209.39428711 71.17700958]
[198.41513062 83.35855103]
[182.43458557 79.67690277]
[168.24476624 84.53992462]
[154.05494690 89.40294647]
[139.86512756 94.26596832]
[125.67530060 99.12899017]
[123.70621490 109.89924622]
[117.43124390 118.87145233]
[107.99013519 124.41593170]
[108.29026794 139.41293335]
[108.59040070 154.40992737]
[108.89053345 169.40692139]
[109.19065857 184.40391541]
[123.29959106 189.99085999]
[134.16534424 200.52548218]
[140.15380859 214.38015747]
[140.38105774 229.43127441]
[134.84356689 243.38479614]
[124.41411591 254.12594604]
[110.70434570 260.03961182]
[111.00447845 275.03659058]
[111.30461121 290.03359985]
[111.60474396 305.03057861]
[111.90487671 320.02758789]
[112.20500183 335.02459717]
[112.50513458 350.02157593]
[112.80526733 365.01858521]
[113.10540009 380.01556396]
[113.40553284 395.01257324]
[113.70566559 410.00958252]
[114.00579834 425.00656128]
[114.30593109 440.00357056]
[129.09399414 442.83322144]
[142.97042847 448.67602539]
[155.32861328 457.27651978]
[165.62831116 468.25878906]
[173.41925049 481.14270020]
[178.36087036 495.36499023]
[180.23710632 510.30398560]
[178.96597290 525.30657959]
[174.60301208 539.71691895]
[167.33897400 552.90509033]
[157.49140930 564.29449463]
[145.49078369 573.38732910]
[131.86175537 579.78601074]
[117.20008850 583.21081543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 131]
[26 130]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[39 85]
[40 84]
[87 101]
[88 100]
[89 99]
[90 98]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
