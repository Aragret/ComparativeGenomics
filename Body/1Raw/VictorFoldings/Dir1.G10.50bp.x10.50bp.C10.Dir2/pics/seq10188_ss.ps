%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUCAACGGGGGGGGGGCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGxxxxxxxxxxAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCCCCCCCCCCCUUUCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[49.48059845 484.31149292]
[35.63465881 478.29547119]
[23.92599678 468.76605225]
[15.22347355 456.43038940]
[10.17287159 442.20385742]
[9.14898014 427.14218140]
[12.22777939 412.36303711]
[19.18080139 398.96310425]
[29.49208450 387.93676758]
[42.39646530 380.10226440]
[56.93635178 376.04095459]
[56.93635178 361.04095459]
[56.93635178 346.04095459]
[56.93635178 331.04095459]
[56.93635178 316.04095459]
[56.93635178 301.04095459]
[56.93635178 286.04095459]
[56.93635178 271.04095459]
[56.93635178 256.04095459]
[56.93635178 241.04095459]
[56.93635178 226.04095459]
[56.93635178 211.04095459]
[48.58779526 202.23135376]
[48.50336838 189.69294739]
[57.27645111 180.18048096]
[57.58850479 165.18373108]
[49.51425552 177.82519531]
[38.78822327 188.31100464]
[25.96714401 196.09687805]
[11.71651363 200.77870178]
[-3.22398257 202.11346436]
[-18.07884598 200.03187561]
[-32.07702255 194.64196777]
[-44.49192810 186.22352600]
[-54.67915726 175.21351624]
[-62.10993576 162.18341064]
[-66.39855957 147.80957031]
[-67.32242584 132.83804321]
[-64.83358765 118.04595947]
[-59.06121826 104.20111084]
[-50.30494308 92.02213287]
[-39.01926422 82.14116669]
[-25.78997231 75.07110596]
[-11.30374050 71.17891693]
[3.68750882 70.66663361]
[18.40564537 73.56084442]
[32.08671188 79.71132660]
[44.02058411 88.79882812]
[53.58782578 100.35166168]
[60.29183960 113.77016449]
[63.78464890 128.35783386]
[63.88474655 143.35948181]
[71.60883331 130.50108337]
[79.33291626 117.64267731]
[87.05699921 104.78427887]
[74.81219482 113.44827271]
[59.90950775 115.15409851]
[46.02363205 109.48114014]
[36.57854462 97.82823181]
[33.90320969 83.06874084]
[38.65731049 68.84205627]
[49.66858673 58.65619278]
[64.22187805 55.02277374]
[78.72863770 58.83772659]
[89.61180115 69.16036224]
[94.18772125 83.44410706]
[95.74530029 68.52519989]
[97.30288696 53.60628510]
[98.86046600 38.68737411]
[85.11798096 32.32947540]
[74.18623352 21.85208702]
[67.25102234 8.39171982]
[65.06462097 -6.59154987]
[67.86418915 -21.47244835]
[75.34606171 -34.63680649]
[86.69866180 -44.65665054]
[100.69052887 -50.44510651]
[115.80394745 -51.37428665]
[130.39952087 -47.34339523]
[142.89402771 -38.78968048]
[151.93214417 -26.64097786]
[156.53352356 -12.21509361]
[156.19898987 2.92316318]
[150.96487427 17.13170624]
[141.39891052 28.86930084]
[128.53875732 36.86273956]
[113.77938080 40.24495316]
[112.22179413 55.16386414]
[110.66421509 70.08277893]
[109.10663605 85.00169373]
[114.85753632 89.81595612]
[126.35933685 99.44448090]
[132.11024475 104.25874329]
[146.52246094 100.10085297]
[160.93467712 95.94297028]
[147.07609558 90.20364380]
[137.83508301 78.38824463]
[135.60363770 63.55514908]
[140.95938110 49.54386139]
[152.51596069 39.98116302]
[167.28202820 37.34232330]
[181.43540955 42.31040192]
[191.31254578 53.59942627]
[194.35678101 68.28726959]
[189.78012085 82.57202148]
[178.76730347 92.75607300]
[193.72755432 91.66475677]
[208.68780518 90.57344818]
[223.64805603 89.48213959]
[236.90463257 79.82838440]
[251.78150940 86.72844696]
[252.97460938 103.08413696]
[239.25659180 112.07012177]
[224.73936462 104.44239044]
[209.77911377 105.53369904]
[194.81886292 106.62500763]
[179.85861206 107.71631622]
[165.09255981 110.35518646]
[150.68034363 114.51306915]
[136.26812744 118.67095947]
[113.80018616 122.79896545]
[99.91540527 112.50836182]
[92.19131470 125.36676788]
[84.46723175 138.22517395]
[76.74314880 151.08357239]
[72.58525848 165.49578857]
[72.27320099 180.49253845]
[81.52745819 196.37771606]
[71.93635559 211.04095459]
[71.93635559 226.04095459]
[71.93635559 241.04095459]
[71.93635559 256.04095459]
[71.93635559 271.04095459]
[71.93635559 286.04095459]
[71.93635559 301.04095459]
[71.93635559 316.04095459]
[71.93635559 331.04095459]
[71.93635559 346.04095459]
[71.93635559 361.04095459]
[71.93635559 376.04095459]
[86.47624207 380.10226440]
[99.38062286 387.93676758]
[109.69190216 398.96310425]
[116.64492798 412.36303711]
[119.72372437 427.14218140]
[118.69983673 442.20385742]
[113.64923096 456.43038940]
[104.94670868 468.76605225]
[93.23804474 478.29547119]
[79.39210510 484.31149292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 127]
[26 126]
[52 125]
[53 124]
[54 123]
[55 122]
[66 90]
[67 89]
[68 88]
[69 87]
[93 120]
[94 119]
[95 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
