%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAUUCUCCGGGGGGGGGGGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCxxxxxxxxxxUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACCCCCCCCCCCACAAUUCUCCG\
) } def
/len { sequence length } bind def

/coor [
[49.95157242 386.57290649]
[35.79096985 381.41790771]
[23.20122528 373.13568115]
[12.86128807 362.17291260]
[5.32877684 349.12078857]
[1.00991130 334.68319702]
[0.13760258 319.63873291]
[2.75889301 304.79873657]
[8.73241997 290.96350098]
[17.73603821 278.87915039]
[29.28419495 269.19735718]
[42.75410843 262.44030762]
[57.41937256 258.97232056]
[57.41937256 243.97232056]
[57.41937256 228.97232056]
[57.41937256 213.97232056]
[57.41937256 198.97232056]
[57.41937256 183.97232056]
[57.41937256 168.97232056]
[57.41937256 153.97232056]
[57.41937256 138.97232056]
[57.41937256 123.97232056]
[57.41937256 108.97232056]
[47.42012405 97.79130554]
[32.51322937 96.12262726]
[15.85184193 103.89940643]
[2.11943698 93.01322174]
[-12.81821537 91.64700317]
[-27.75586700 90.28079224]
[-42.69351959 88.91457367]
[-48.06225967 103.02411652]
[-57.03955078 115.16128540]
[-68.95921326 124.42541504]
[-82.93673706 130.12905884]
[-97.93488312 131.84895325]
[-112.84070587 129.45748901]
[-126.54808044 123.13211060]
[-138.03984070 113.34220886]
[-146.46321106 100.81427002]
[-151.19313049 86.47793579]
[-151.87860107 71.39706421]
[-148.46875000 56.69075012]
[-141.21662903 43.45030975]
[-130.66038513 32.65826416]
[-117.58335114 25.11545944]
[-102.95594788 21.38161850]
[-87.86361694 21.73381805]
[-73.42630005 26.14592171]
[-60.71536255 34.29052353]
[-50.67402649 45.56324005]
[-44.04742432 59.12755966]
[-41.32730103 73.97692108]
[-26.38965034 75.34313965]
[-11.45199776 76.70935059]
[3.48565388 78.07556915]
[13.01550102 70.56555939]
[25.50604820 71.61968231]
[34.18190765 81.21573639]
[49.08880234 82.88441467]
[34.75357819 78.46837616]
[26.12106514 66.20136261]
[26.80382729 51.21690750]
[36.51614380 39.78577042]
[51.19356537 36.69169235]
[64.69382477 43.22949600]
[71.36729431 56.66321564]
[68.42058563 71.37215424]
[74.05534363 57.47072983]
[79.69010162 43.56930923]
[66.90799713 35.64934158]
[55.64834595 25.68298340]
[46.23511124 13.95698547]
[38.93912888 0.80872887]
[33.97032166 -13.38348484]
[31.47164536 -28.21131897]
[31.51499748 -43.24814606]
[34.09912872 -58.06132507]
[39.14969254 -72.22464752]
[46.52136612 -85.33061981]
[56.00205612 -97.00214386]
[67.31898499 -106.90341187]
[80.14654541 -114.74954987]
[94.11565399 -120.31479645]
[108.82439423 -123.43903351]
[123.84957123 -124.03237915]
[138.75888062 -122.07775116]
[153.12335205 -117.63138580]
[166.52967834 -110.82122803]
[178.59214783 -101.84320831]
[188.96368408 -90.95564270]
[197.34590149 -78.47179413]
[203.49760437 -64.75083923]
[207.24180603 -50.18756485]
[208.47077942 -35.20098114]
[207.14916992 -20.22228622]
[203.31497192 -5.68244362]
[197.07853699 8.00020599]
[188.61929321 20.43198395]
[178.18061829 31.25520706]
[166.06286621 40.15846634]
[152.61468506 46.88559341]
[138.22299194 51.24304581]
[123.30188751 53.10544205]
[108.28066254 52.41920090]
[93.59152222 49.20406342]
[87.95676422 63.10548782]
[82.32200623 77.00691223]
[108.84128571 75.18091583]
[123.06149292 94.57792664]
[137.99914551 95.94414520]
[152.93679810 97.31036377]
[167.87445068 98.67658234]
[182.81210327 100.04279327]
[191.60545349 87.45023346]
[205.52378845 80.95597076]
[220.82315063 82.30692291]
[233.38807678 91.13970184]
[239.83868408 105.07832336]
[238.43978882 120.37338257]
[229.56767273 132.91056824]
[215.60888672 139.31745911]
[200.31829834 137.87060547]
[187.80897522 128.95924377]
[181.44587708 114.98044586]
[166.50822449 113.61423492]
[151.57057190 112.24801636]
[136.63291931 110.88179779]
[121.69527435 109.51557922]
[113.16265106 121.27613068]
[98.69873047 126.31467438]
[83.18878174 121.98393250]
[72.41937256 108.97232056]
[72.41937256 123.97232056]
[72.41937256 138.97232056]
[72.41937256 153.97232056]
[72.41937256 168.97232056]
[72.41937256 183.97232056]
[72.41937256 198.97232056]
[72.41937256 213.97232056]
[72.41937256 228.97232056]
[72.41937256 243.97232056]
[72.41937256 258.97232056]
[87.08463287 262.44030762]
[100.55455017 269.19735718]
[112.10270691 278.87915039]
[121.10632324 290.96350098]
[127.07984924 304.79873657]
[129.70114136 319.63873291]
[128.82882690 334.68319702]
[124.50996399 349.12078857]
[116.97745514 362.17291260]
[106.63751984 373.13568115]
[94.04776764 381.41790771]
[79.88716888 386.57290649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 59]
[25 58]
[27 55]
[28 54]
[29 53]
[30 52]
[67 107]
[68 106]
[69 105]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
