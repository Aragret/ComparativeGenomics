%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGACCCGGGGGGGGGGUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUxxxxxxxxxxACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGCCCCCCCCCCGAGGAGACCC\
) } def
/len { sequence length } bind def

/coor [
[97.96471405 454.73959351]
[84.74451447 447.46713257]
[73.85771179 437.02011108]
[66.04658508 424.11087036]
[61.84370041 409.61956787]
[61.53562927 394.53421021]
[65.14337158 379.88339233]
[72.42094421 366.66601562]
[82.87215424 355.78323364]
[95.78441620 347.97708130]
[110.27735138 343.77981567]
[109.96529388 328.78305054]
[109.65323639 313.78628540]
[109.34117889 298.78955078]
[109.02912140 283.79278564]
[108.71707153 268.79602051]
[108.40501404 253.79928589]
[108.09295654 238.80252075]
[107.78089905 223.80577087]
[99.78050232 211.24221802]
[107.22902679 197.28407288]
[99.22863007 184.72052002]
[106.67716217 170.76237488]
[106.36510468 155.76560974]
[106.05304718 140.76885986]
[79.41456604 132.79092407]
[65.42317963 110.77968597]
[50.48887253 112.18199158]
[37.47247314 121.17554474]
[24.07760429 114.66196442]
[9.14329720 116.06426239]
[-5.79101086 117.46656799]
[-20.72531891 118.86887360]
[-33.77819824 128.79632568]
[-48.79539490 122.20725250]
[-50.32849884 105.87992096]
[-36.80038834 96.61049652]
[-22.12762260 103.93456268]
[-7.19331408 102.53226471]
[7.74099350 101.12995911]
[22.67530060 99.72765350]
[34.62349701 90.83440399]
[49.08656693 97.24768829]
[64.02087402 95.84538269]
[65.37635040 89.37168884]
[67.88648987 83.25244141]
[71.46759033 77.69171143]
[76.00022125 72.87493896]
[81.33322906 68.96276855]
[76.43167877 54.78620911]
[71.53012848 40.60964966]
[64.76200867 27.22336578]
[56.25092316 14.87179375]
[47.73983002 2.52022076]
[39.22874069 -9.83135128]
[24.04112434 -7.93532848]
[9.71611309 -13.32537651]
[-0.45451227 -24.76290131]
[-4.13361549 -39.61964417]
[-0.47576579 -54.48163223]
[9.67848969 -65.93369293]
[23.99577713 -71.34422302]
[39.18608856 -69.46992493]
[51.75880432 -60.74149704]
[58.82480240 -47.16466904]
[58.76037216 -31.85929680]
[51.58031464 -18.34244156]
[60.09140396 -5.99086952]
[68.60249329 6.36070299]
[77.11358643 18.71227646]
[77.11105347 3.71227598]
[83.10620117 -10.03756714]
[94.09890747 -20.24347115]
[108.25533295 -25.20286369]
[123.21387482 -24.08840370]
[136.47911072 -17.08601189]
[145.83810425 -5.36384106]
[149.72955322 9.12258530]
[147.50430298 23.95660782]
[139.53353882 36.66357803]
[127.14699554 45.12368774]
[112.41101074 47.92560196]
[97.78388214 44.60189819]
[85.70668793 35.70809937]
[90.60823822 49.88465881]
[95.50978851 64.06121826]
[104.89262390 64.11378479]
[113.94708252 66.57490540]
[122.06546021 71.27938843]
[128.70289612 77.91149902]
[142.22708130 71.42333221]
[155.75128174 64.93516541]
[153.30552673 50.02895737]
[155.15977478 35.03768158]
[161.16372681 21.17660713]
[170.83064270 9.56939316]
[183.37687683 1.15698278]
[197.78536987 -3.37866664]
[212.88807678 -3.66987038]
[227.46069336 0.30697784]
[240.32189941 8.22949314]
[250.42907715 19.45543098]
[256.96289062 33.07475662]
[259.39364624 47.98341370]
[257.52432251 62.97282410]
[251.50646973 76.82785797]
[241.82789612 88.42535400]
[229.27322388 96.82515717]
[214.86018372 101.34632874]
[199.75718689 101.62236023]
[185.18856812 97.63087463]
[172.33532715 89.69544220]
[162.23944092 78.45935822]
[148.71525574 84.94751740]
[135.19105530 91.43568420]
[138.54324341 103.66374207]
[137.49345398 117.11667633]
[151.81604004 121.57349396]
[167.68521118 117.43810272]
[179.00694275 129.30192566]
[174.13441467 144.96047974]
[158.08006287 148.30558777]
[147.35923767 135.89608765]
[133.03663635 131.43927002]
[121.04979706 140.45680237]
[121.36185455 155.45355225]
[121.67391205 170.45031738]
[129.69664001 184.08653259]
[122.22578430 196.97201538]
[130.24850464 210.60823059]
[122.77765656 223.49371338]
[123.08970642 238.49047852]
[123.40176392 253.48722839]
[123.71382141 268.48397827]
[124.02587891 283.48074341]
[124.33793640 298.47747803]
[124.64999390 313.47424316]
[124.96204376 328.47100830]
[125.27410126 343.46774292]
[139.92909241 347.05850220]
[153.15490723 354.32077026]
[164.04977417 364.75936890]
[171.87086487 377.66256714]
[176.08494568 392.15063477]
[176.40466309 407.23574829]
[172.80824280 421.88934326]
[165.54087830 435.11236572]
[155.09806824 446.00317383]
[142.19184875 453.81930542]
[127.70214844 458.02777100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[23 127]
[24 126]
[25 125]
[27 44]
[28 43]
[30 41]
[31 40]
[32 39]
[33 38]
[49 86]
[50 85]
[51 84]
[52 70]
[53 69]
[54 68]
[55 67]
[90 115]
[91 114]
[92 113]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
