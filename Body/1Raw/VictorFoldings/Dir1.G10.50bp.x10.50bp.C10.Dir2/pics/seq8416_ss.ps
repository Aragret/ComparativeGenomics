%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAGUAUCGGGGGGGGGGCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUxxxxxxxxxxUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCCCCCUACUAGUCUC\
) } def
/len { sequence length } bind def

/coor [
[85.64373779 469.65454102]
[73.75946808 460.37942505]
[64.44075775 448.52932739]
[58.22939301 434.79315186]
[55.48649216 419.96954346]
[56.37152100 404.92025757]
[60.83302689 390.52032471]
[68.61162567 377.60690308]
[79.25507355 366.93072510]
[92.14458466 359.11254883]
[106.53076935 354.60687256]
[105.59514618 339.63607788]
[104.65951538 324.66528320]
[103.72388458 309.69451904]
[102.78826141 294.72372437]
[101.85263062 279.75292969]
[100.91699982 264.78213501]
[99.98137665 249.81134033]
[99.04574585 234.84054565]
[98.11011505 219.86975098]
[97.17449188 204.89895630]
[96.23886108 189.92817688]
[84.85063934 184.21813965]
[78.58231354 171.29817200]
[64.35553741 176.05198669]
[50.12875748 180.80580139]
[44.56037903 195.41836548]
[30.87687492 202.98776245]
[15.53918171 199.93995667]
[5.78928661 187.71401978]
[6.23079300 172.08265686]
[16.65523529 160.42654419]
[32.14051056 158.24932861]
[45.37494278 166.57902527]
[59.60172272 161.82521057]
[73.82849884 157.07139587]
[83.69422150 145.77238464]
[86.48654938 131.03457642]
[89.27887726 116.29677582]
[77.59907532 94.93415833]
[96.38884735 73.82183838]
[93.29052734 59.14531326]
[90.19220734 44.46878815]
[83.84679413 58.06053925]
[71.99008179 67.24848938]
[57.24466705 70.00034332]
[42.87209702 65.70741272]
[32.05145264 55.31926727]
[27.17615891 41.13365555]
[29.32458878 26.28831291]
[38.02153015 14.06688690]
[51.34329605 7.17264700]
[66.34323883 7.13053465]
[79.70350647 13.94986439]
[88.46967316 26.12409973]
[88.78173065 11.12734699]
[89.09378815 -3.86940670]
[89.40584564 -18.86615944]
[89.71790314 -33.86291504]
[74.97673035 -36.85250854]
[61.00634766 -42.42639542]
[48.25584412 -50.40539169]
[37.13509369 -60.53301239]
[28.00158501 -72.48369598]
[21.14891815 -85.87326813]
[16.79738235 -100.27132416]
[15.08686066 -115.21501160]
[16.07233810 -130.22396851]
[19.72213554 -144.81570435]
[25.91892815 -158.52116394]
[34.46351624 -170.89976501]
[45.08122253 -181.55358887]
[57.43073273 -190.14016724]
[71.11506653 -196.38348389]
[85.69432068 -200.08280945]
[100.69983673 -201.11926270]
[115.64925385 -199.45950317]
[130.06199646 -195.15689087]
[143.47477722 -188.34974670]
[155.45640564 -179.25688171]
[165.62173462 -168.17059326]
[173.64399719 -155.44725037]
[179.26530457 -141.49588013]
[182.30494690 -126.76495361]
[182.66522217 -111.72800446]
[180.33454895 -96.86840057]
[175.38783264 -82.66382599]
[167.98411560 -69.57089996]
[158.36137390 -58.01050568]
[146.82896423 -48.35425949]
[133.75758362 -40.91256714]
[119.56742859 -35.92465591]
[104.71465302 -33.55085754]
[104.40259552 -18.55410385]
[104.09053802 -3.55735040]
[103.77848816 11.43940353]
[103.46643066 26.43615723]
[104.86873627 41.37046432]
[107.96705627 56.04698944]
[111.06537628 70.72351837]
[123.41694641 79.23460388]
[138.23471069 76.90350342]
[153.05245972 74.57239532]
[167.87022400 72.24129486]
[175.92251587 67.79016876]
[183.02020264 70.01916504]
[197.88323975 67.99683380]
[212.74629211 65.97450256]
[227.62562561 57.84789658]
[239.55364990 69.89607239]
[231.27832031 84.69321442]
[214.76863098 80.83754730]
[199.90557861 82.85987854]
[185.04252625 84.88221741]
[170.20132446 87.05905151]
[155.38357544 89.39015961]
[140.56581116 91.72126007]
[125.74805450 94.05236053]
[123.02007294 107.19989014]
[114.66870880 116.14479828]
[104.01667786 119.08909607]
[101.22435760 133.82690430]
[98.43202972 148.56471252]
[118.21968079 156.29083252]
[122.96862793 175.33842468]
[111.20964813 188.99253845]
[112.14527893 203.96333313]
[113.08090973 218.93412781]
[114.01653290 233.90492249]
[114.95216370 248.87571716]
[115.88779449 263.84649658]
[116.82342529 278.81729126]
[117.75904846 293.78808594]
[118.69467926 308.75888062]
[119.63031006 323.72967529]
[120.56593323 338.70046997]
[121.50156403 353.67126465]
[136.33679199 356.35067749]
[150.09942627 362.50317383]
[161.98931885 371.77105713]
[171.31521606 383.61553955]
[177.53491211 397.34793091]
[180.28678894 412.16989136]
[179.41088867 427.21969604]
[174.95811462 441.62234497]
[167.18734741 454.54049683]
[156.55036926 465.22308350]
[143.66560364 473.04910278]
[129.28215027 477.56347656]
[114.23624420 478.50381470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[24 36]
[25 35]
[26 34]
[37 123]
[38 122]
[39 121]
[41 100]
[42 99]
[43 98]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[101 118]
[102 117]
[103 116]
[104 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
