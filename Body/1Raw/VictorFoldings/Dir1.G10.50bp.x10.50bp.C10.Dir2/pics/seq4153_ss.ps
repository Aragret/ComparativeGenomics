%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUACAAUCGGGGGGGGGGUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAxxxxxxxxxxGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCCCCCCCCCCCACAACAAUC\
) } def
/len { sequence length } bind def

/coor [
[88.77759552 370.19009399]
[74.93165588 364.17407227]
[63.22299576 354.64465332]
[54.52047348 342.30899048]
[49.46987152 328.08245850]
[48.44598007 313.02078247]
[51.52477646 298.24163818]
[58.47779846 284.84170532]
[68.78908539 273.81536865]
[81.69346619 265.98086548]
[96.23335266 261.91955566]
[96.23335266 246.91954041]
[96.23335266 231.91954041]
[96.23335266 216.91954041]
[96.23335266 201.91954041]
[96.23335266 186.91954041]
[96.23335266 171.91954041]
[96.23335266 156.91954041]
[96.23335266 141.91954041]
[96.23335266 126.91954041]
[78.38130951 108.17955780]
[85.53517151 87.60832214]
[78.90667725 74.15235901]
[72.27817535 60.69639206]
[59.23902512 51.73585892]
[60.55569839 36.89956665]
[47.51654816 27.93903542]
[48.83322525 13.10274124]
[42.20472717 -0.35322466]
[28.21341324 5.08115816]
[13.80169964 9.27542686]
[-0.92072904 12.19766045]
[-15.84182549 13.82561779]
[-30.84802818 14.14690971]
[-45.82513046 13.15909100]
[-60.65914536 10.86967850]
[-75.23716736 7.29609680]
[-89.44826508 2.46554446]
[-103.18426514 -3.58521533]
[-116.34062958 -10.81013203]
[-128.81723022 -19.15421677]
[-140.51910400 -28.55396843]
[-151.35720825 -38.93784332]
[-161.24905396 -50.22681808]
[-170.11933899 -62.33497238]
[-177.90057373 -75.17015076]
[-184.53352356 -88.63467407]
[-189.96769714 -102.62606049]
[-194.16177368 -117.03783417]
[-197.08380127 -131.76029968]
[-198.71154785 -146.68142700]
[-199.03262329 -161.68763733]
[-198.04460144 -176.66471863]
[-195.75497437 -191.49870300]
[-192.18119812 -206.07667542]
[-187.35043335 -220.28770447]
[-181.29948425 -234.02362061]
[-174.07438660 -247.17988586]
[-165.73011780 -259.65637207]
[-156.33021545 -271.35812378]
[-145.94618225 -282.19607544]
[-134.65707397 -292.08773804]
[-122.54878998 -300.95785522]
[-109.71350098 -308.73892212]
[-96.24888611 -315.37167358]
[-82.25742340 -320.80566406]
[-67.84558868 -324.99954224]
[-53.12308121 -327.92135620]
[-38.20193863 -329.54888916]
[-23.19572639 -329.86975098]
[-8.21865177 -328.88153076]
[6.61529684 -326.59170532]
[21.19322395 -323.01770020]
[35.40417862 -318.18676758]
[49.14001083 -312.13562012]
[62.29617310 -304.91030884]
[74.77253723 -296.56588745]
[86.47415924 -287.16580200]
[97.31197357 -276.78161621]
[107.20349121 -265.49237061]
[116.07344055 -253.38397217]
[123.85430908 -240.54858398]
[130.48687744 -227.08386230]
[135.92066956 -213.09233093]
[140.11433411 -198.68043518]
[143.03594971 -183.95788574]
[144.66328430 -169.03672791]
[144.98393250 -154.03050232]
[143.99548340 -139.05345154]
[141.70545959 -124.21952820]
[138.13125610 -109.64164734]
[133.30010986 -95.43076324]
[127.24877167 -81.69501495]
[120.02330017 -68.53895569]
[111.67868805 -56.06270599]
[102.27845001 -44.36121750]
[91.89411163 -33.52355194]
[80.60472870 -23.63219070]
[68.49620056 -14.76241207]
[55.66069031 -6.98172331]
[62.28918839 6.47424221]
[74.85422516 14.47231197]
[74.01166534 30.27106667]
[86.57669830 38.26913834]
[85.73413849 54.06789017]
[92.36264038 67.52385712]
[98.99113464 80.97982025]
[116.89089203 84.22118378]
[126.98289490 103.28221130]
[141.47848511 107.13936615]
[155.97409058 110.99652863]
[170.46968079 114.85369110]
[184.96527100 118.71084595]
[194.86198425 107.09111786]
[208.82368469 100.92398071]
[224.07827759 101.43391418]
[237.59695435 108.51967621]
[246.69557190 120.77439117]
[249.56759644 135.76486206]
[245.64277649 150.51472473]
[235.70039368 162.09538269]
[221.71452332 168.20750427]
[206.46205139 167.63749695]
[192.97137451 160.49855042]
[183.92108154 148.20811462]
[181.10812378 133.20645142]
[166.61251831 129.34928894]
[152.11692810 125.49212646]
[137.62132263 121.63496399]
[123.12573242 117.77780914]
[111.23335266 126.91954041]
[111.23335266 141.91954041]
[111.23335266 156.91954041]
[111.23335266 171.91954041]
[111.23335266 186.91954041]
[111.23335266 201.91954041]
[111.23335266 216.91954041]
[111.23335266 231.91954041]
[111.23335266 246.91954041]
[111.23335266 261.91955566]
[125.77323914 265.98086548]
[138.67762756 273.81536865]
[148.98890686 284.84170532]
[155.94192505 298.24163818]
[159.02072144 313.02078247]
[157.99682617 328.08245850]
[152.94622803 342.30899048]
[144.24371338 354.64465332]
[132.53504944 364.17407227]
[118.68910980 370.19009399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 107]
[23 106]
[24 105]
[26 103]
[28 101]
[29 100]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
