%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUACUCCAAGGGGGGGGGGUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUxxxxxxxxxxAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACCCCCCCCCCCAACCUAUUCCAA\
) } def
/len { sequence length } bind def

/coor [
[83.65811157 390.16806030]
[69.95595551 383.90716553]
[57.99084091 374.75381470]
[48.36293030 363.16714478]
[41.55514908 349.72833252]
[37.90898132 335.11145020]
[37.60731506 320.04968262]
[40.66527939 305.29852295]
[46.92948914 291.59790039]
[56.08573532 279.63497925]
[67.67474365 270.00988770]
[81.11521149 263.20535278]
[95.73297119 259.56274414]
[95.42897034 244.56582642]
[95.12496185 229.56890869]
[94.82096100 214.57199097]
[94.51696014 199.57505798]
[94.21295166 184.57814026]
[93.90895081 169.58122253]
[93.60494232 154.58430481]
[93.30094147 139.58738708]
[92.99693298 124.59046936]
[92.69293213 109.59355164]
[92.08504486 94.60587311]
[91.17353058 79.63359070]
[78.25476837 71.24242401]
[72.81768036 57.01950455]
[76.75158691 42.49406433]
[88.34554291 33.18181229]
[87.43403625 18.20953178]
[86.52252197 3.23725224]
[85.61100769 -11.73502731]
[84.69949341 -26.70730591]
[83.78797913 -41.67958450]
[68.78236389 -41.87614441]
[53.83223724 -43.18037415]
[39.01926041 -45.58515167]
[24.42433739 -49.07734299]
[10.12717819 -53.63787842]
[-3.79412842 -59.24184418]
[-17.26354790 -65.85863495]
[-30.20751572 -73.45211792]
[-42.55533600 -81.98081207]
[-54.23956299 -91.39813232]
[-65.19638824 -101.65265656]
[-75.36596680 -112.68836975]
[-84.69274902 -124.44499207]
[-93.12580872 -136.85832214]
[-100.61907196 -149.86056519]
[-107.13161469 -163.38069153]
[-112.62787628 -177.34487915]
[-117.07783508 -191.67683411]
[-120.45718384 -206.29830933]
[-122.74745941 -221.12940979]
[-123.93616486 -236.08917236]
[-124.01679993 -251.09585571]
[-122.98892975 -266.06753540]
[-120.85816956 -280.92239380]
[-117.63614655 -295.57931519]
[-113.34046173 -309.95828247]
[-107.99458313 -323.98071289]
[-101.62770844 -337.57006836]
[-94.27460480 -350.65206909]
[-85.97544098 -363.15530396]
[-76.77553558 -375.01150513]
[-66.72514343 -386.15585327]
[-55.87915039 -396.52752686]
[-44.29679871 -406.06988525]
[-32.04134369 -414.73077393]
[-19.17972946 -422.46292114]
[-5.78219414 -429.22406006]
[8.07808590 -434.97732544]
[22.32540894 -439.69125366]
[36.88196182 -443.34008789]
[51.66823959 -445.90390015]
[66.60348511 -447.36871338]
[81.60612488 -447.72653198]
[96.59421539 -446.97537231]
[111.48590851 -445.11932373]
[126.19985962 -442.16857910]
[140.65570068 -438.13922119]
[154.77449036 -433.05325317]
[168.47911072 -426.93847656]
[181.69470215 -419.82824707]
[194.34910583 -411.76144409]
[206.37318420 -402.78210449]
[217.70127869 -392.93927002]
[228.27153015 -382.28668213]
[238.02616882 -370.88256836]
[246.91195679 -358.78918457]
[254.88034058 -346.07257080]
[261.88781738 -332.80221558]
[267.89608765 -319.05053711]
[272.87234497 -304.89273071]
[276.78942871 -290.40606689]
[279.62591553 -275.66964722]
[281.36636353 -260.76400757]
[282.00119019 -245.77053833]
[281.52700806 -230.77113342]
[279.94635010 -215.84770203]
[277.26788330 -201.08175659]
[273.50622559 -186.55395508]
[268.68188477 -172.34362793]
[262.82128906 -158.52841187]
[255.95637512 -145.18373108]
[248.12467957 -132.38250732]
[239.36895752 -120.19461823]
[229.73703003 -108.68664551]
[219.28150940 -97.92145538]
[208.05950928 -87.95783234]
[196.13230896 -78.85018921]
[183.56504822 -70.64828491]
[170.42637634 -63.39690399]
[156.78805542 -57.13565445]
[142.72456360 -51.89873505]
[128.31269836 -47.71474838]
[113.63121033 -44.60654449]
[98.76026154 -42.59109879]
[99.67177582 -27.61882019]
[100.58328247 -12.64654064]
[101.49479675 2.32573891]
[102.40631104 17.29801750]
[103.31782532 32.27029800]
[115.95583344 40.10730743]
[121.62277222 54.04824448]
[117.95122528 68.82569885]
[106.14581299 78.72208405]
[107.05732727 93.69435883]
[110.13729858 98.01856995]
[110.54161835 103.76641846]
[107.68984985 109.28954315]
[107.99385834 124.28646851]
[108.29785919 139.28338623]
[108.60186005 154.28030396]
[108.90586853 169.27722168]
[109.20986938 184.27413940]
[109.51387787 199.27105713]
[109.81787872 214.26797485]
[110.12188721 229.26489258]
[110.42588806 244.26181030]
[110.72989655 259.25872803]
[125.48326874 262.30596924]
[139.18844604 268.56024170]
[151.15800476 277.70776367]
[160.79153442 289.28979492]
[167.60581970 302.72531128]
[171.25906372 317.34042358]
[171.56803894 332.40203857]
[168.51722717 347.15466309]
[162.25965881 360.85833740]
[153.10920715 372.82565308]
[141.52485657 382.45639038]
[128.08769226 389.26742554]
[113.47169495 392.91714478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 128]
[25 127]
[29 123]
[30 122]
[31 121]
[32 120]
[33 119]
[34 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
