%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAUAGACGGGGGGGGGGGUAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUCCCxxxxxxxxxxUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAACCCCCCCCCCAGGAUUAGAC\
) } def
/len { sequence length } bind def

/coor [
[112.79789734 477.05047607]
[98.95196533 471.03445435]
[87.24330139 461.50503540]
[78.54077911 449.16937256]
[73.49017334 434.94284058]
[72.46628571 419.88116455]
[75.54508209 405.10202026]
[82.49810028 391.70208740]
[92.80938721 380.67575073]
[105.71376801 372.84124756]
[120.25365448 368.77993774]
[120.25365448 353.77993774]
[120.25365448 338.77993774]
[120.25365448 323.77993774]
[120.25365448 308.77993774]
[120.25365448 293.77993774]
[120.25365448 278.77993774]
[120.25365448 263.77993774]
[120.25365448 248.77992249]
[120.25365448 233.77992249]
[119.62967682 218.79290771]
[118.38280487 203.84483337]
[117.13593292 188.89674377]
[115.88905334 173.94865417]
[107.12057495 161.90858459]
[113.68395996 147.51301575]
[112.43708801 132.56492615]
[111.19021606 117.61684418]
[103.38504791 124.89164734]
[91.44445801 128.09742737]
[77.67135620 125.13633728]
[65.32371521 115.22600555]
[50.46067047 113.20366669]
[35.59762573 111.18133545]
[27.62024689 124.15366364]
[15.05256081 132.75442505]
[0.07199308 135.49349976]
[-14.72598267 131.89630127]
[-26.77752686 122.58608246]
[-33.99463654 109.17588806]
[-35.12690353 93.98912048]
[-29.97815895 79.65698242]
[-19.44044876 68.66259003]
[-5.33949852 62.91080475]
[9.88161755 63.39814377]
[23.58575058 70.04018402]
[33.39857483 81.68614197]
[37.61996078 96.31829071]
[52.48300552 98.34062195]
[67.34605408 100.36296082]
[72.45279694 94.87012482]
[61.46729660 84.65646362]
[71.68114471 73.67113495]
[82.66627502 83.88446045]
[87.77301025 78.39163208]
[84.67469025 63.71510315]
[81.57637024 49.03857803]
[78.47805023 34.36205292]
[63.41102219 33.86392212]
[48.90121460 29.77381516]
[35.79221344 22.32952499]
[24.84615135 11.96385098]
[16.69942284 -0.72055876]
[11.82566643 -14.98624992]
[10.50823689 -30.00383377]
[12.82372665 -44.90020752]
[18.63751602 -58.80931473]
[27.61160088 -70.92250061]
[39.22423935 -80.53551483]
[52.80028534 -87.08947754]
[67.55044556 -90.20334625]
[82.61716461 -89.69608307]
[97.12448883 -85.59717560]
[110.22898102 -78.14494324]
[121.16875458 -67.77263641]
[129.30778503 -55.08328629]
[134.17289734 -40.81464386]
[135.48121643 -25.79626465]
[133.15670776 -10.90129757]
[127.33448029 3.00428319]
[118.35305023 15.11202526]
[106.73458862 24.71800041]
[93.15457153 31.26373100]
[96.25289154 45.94025421]
[99.35121918 60.61677933]
[102.44953918 75.29330444]
[109.03382874 78.88455963]
[116.21654510 65.71608734]
[129.38490295 72.89900208]
[122.20241547 86.06707001]
[128.78669739 89.65832520]
[142.80342102 84.31681061]
[156.82012939 78.97529602]
[170.83683777 73.63378906]
[173.51876831 61.97273254]
[181.43879700 53.16466522]
[192.52296448 49.34167862]
[203.95201111 51.35278320]
[212.87834167 58.57849121]
[227.10513306 53.82467651]
[241.33190918 49.07086182]
[245.87538147 34.23386383]
[258.29229736 24.92798233]
[273.80813599 24.73151970]
[286.45672607 33.72002029]
[291.37438965 48.43721771]
[286.67025757 63.22405624]
[274.15310669 72.39469147]
[258.63604736 72.42282104]
[246.08572388 63.29764175]
[231.85894775 68.05145264]
[217.63215637 72.80526733]
[210.51678467 89.62100220]
[193.09440613 96.06753540]
[176.17835999 87.65049744]
[162.16163635 92.99201202]
[148.14492798 98.33352661]
[134.12821960 103.67504120]
[126.13829803 116.36996460]
[127.38517761 131.31805420]
[128.63204956 146.26614380]
[137.48971558 159.37539673]
[130.83714294 172.70178223]
[132.08401489 187.64987183]
[133.33088684 202.59794617]
[134.57775879 217.54603577]
[137.27777100 221.13372803]
[138.52780151 225.00779724]
[138.42070007 228.66435242]
[137.20732117 231.68457031]
[135.25366211 233.77992249]
[135.25366211 248.77992249]
[135.25366211 263.77993774]
[135.25366211 278.77993774]
[135.25366211 293.77993774]
[135.25366211 308.77993774]
[135.25366211 323.77993774]
[135.25366211 338.77993774]
[135.25366211 353.77993774]
[135.25366211 368.77993774]
[149.79354858 372.84124756]
[162.69792175 380.67575073]
[173.00920105 391.70208740]
[179.96223450 405.10202026]
[183.04103088 419.88116455]
[182.01713562 434.94284058]
[176.96653748 449.16937256]
[168.26400757 461.50503540]
[156.55534363 471.03445435]
[142.70941162 477.05047607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 126]
[22 125]
[23 124]
[24 123]
[26 121]
[27 120]
[28 119]
[32 50]
[33 49]
[34 48]
[55 86]
[56 85]
[57 84]
[58 83]
[91 118]
[92 117]
[93 116]
[94 115]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
