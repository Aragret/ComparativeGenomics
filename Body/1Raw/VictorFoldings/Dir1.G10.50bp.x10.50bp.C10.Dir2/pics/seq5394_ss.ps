%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCAACUGGGGGGGGGGUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAxxxxxxxxxxUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCCCCCCCCCCCUACUCCACU\
) } def
/len { sequence length } bind def

/coor [
[81.97839355 363.91418457]
[69.42016602 355.56304932]
[59.33394623 344.35058594]
[52.35375214 330.98168945]
[48.91836548 316.29669189]
[49.24374390 301.21871948]
[53.30942917 286.69561768]
[60.85984802 273.64025879]
[71.42037964 262.87338257]
[84.32717133 255.07174683]
[98.76889801 250.72578430]
[98.14492035 235.73876953]
[97.52094269 220.75175476]
[96.89696503 205.76473999]
[96.27298737 190.77772522]
[95.64900970 175.79071045]
[95.02503204 160.80369568]
[94.40106201 145.81668091]
[93.77708435 130.82966614]
[93.15310669 115.84264374]
[86.51553345 129.29414368]
[86.44645691 144.29397583]
[80.79372406 158.18809509]
[70.37133026 168.97576904]
[56.68008423 175.10354614]
[41.69151688 175.68907166]
[27.56396675 170.64799500]
[16.33179283 160.70625305]
[9.61241436 147.29544067]
[8.37341976 132.34669495]
[12.79322052 118.01263428]
[22.23537064 106.35734558]
[35.34020615 99.05917358]
[50.22064590 97.16905975]
[64.73452759 100.95947266]
[79.44050598 98.00407410]
[65.11790466 93.54725647]
[50.79530716 89.09044647]
[40.77898788 100.56185150]
[26.96005440 106.96161652]
[11.73271656 107.18092346]
[-2.26479411 101.18179321]
[-12.60732555 90.00360107]
[-17.50297165 75.58304596]
[-16.10353088 60.41856384]
[-8.65146637 47.13750076]
[3.56210780 38.04088211]
[18.42111588 34.70474625]
[33.35114288 37.70710373]
[45.76547241 46.52777863]
[53.51325226 59.63853073]
[55.25212479 74.76784515]
[69.57472229 79.22466278]
[83.89731598 83.68148041]
[90.17469788 83.18895721]
[95.58756256 84.60207367]
[99.63253784 87.44174957]
[101.99311066 91.11113739]
[111.97583771 79.91537476]
[121.95856476 68.71960449]
[131.94128418 57.52384186]
[117.55242157 61.76181793]
[102.60154724 62.97485352]
[87.71768188 61.11192322]
[73.52700806 56.25139618]
[60.62654495 48.59776306]
[49.55904007 38.47302628]
[40.79011536 26.30314636]
[34.68869400 12.60012913]
[31.51147461 -2.05951858]
[31.39212608 -17.05904388]
[34.33566666 -31.76739311]
[40.21826172 -45.56576538]
[48.79241943 -57.87364197]
[59.69741058 -68.17321014]
[72.47444916 -76.03115845]
[86.58598328 -81.11688232]
[101.43832397 -83.21642303]
[116.40660095 -82.24144745]
[130.86108398 -78.23297119]
[144.19364929 -71.35964966]
[155.84338379 -61.91063690]
[165.32015991 -50.28347778]
[172.22526550 -36.96734238]
[176.26820374 -22.52246094]
[177.27888489 -7.55654764]
[175.21476746 7.30075550]
[170.16271973 21.42438126]
[162.33528137 34.22012711]
[152.05725098 45.15354538]
[166.55285645 41.29638672]
[181.04844666 37.43922424]
[195.54403687 33.58206558]
[196.86782837 17.73500824]
[203.51618958 3.31868887]
[214.67196655 -7.93874073]
[228.97897339 -14.69469833]
[244.70672607 -16.15227318]
[259.95983887 -12.15418434]
[272.90634155 -3.19952893]
[281.99783325 9.61844540]
[296.41003418 5.46055794]
[310.82226562 1.30267024]
[318.24160767 -12.65186691]
[333.37942505 -17.19299698]
[347.25473022 -9.62654877]
[351.63555908 5.55843973]
[343.92285156 19.35298347]
[328.69238281 23.57302475]
[314.98016357 15.71488667]
[300.56793213 19.87277412]
[286.15573120 24.03066063]
[285.61410522 38.20943832]
[280.70376587 51.54473495]
[271.89431763 62.72269058]
[260.04025269 70.63761902]
[246.29800415 74.50138092]
[232.01318359 73.92181396]
[218.58880615 68.94254303]
[207.34750366 60.03994751]
[199.40119934 48.07766342]
[184.90560913 51.93482208]
[170.41000366 55.79198074]
[155.91441345 59.64913940]
[143.13705444 67.50656891]
[133.15432739 78.70233154]
[123.17160034 89.89810181]
[113.18887329 101.09386444]
[108.14012146 115.21866608]
[108.76409912 130.20568848]
[109.38807678 145.19270325]
[110.01205444 160.17971802]
[110.63603210 175.16673279]
[111.26000977 190.15374756]
[111.88398743 205.14076233]
[112.50796509 220.12777710]
[113.13193512 235.11479187]
[113.75591278 250.10180664]
[128.50892639 253.23225403]
[142.01956177 259.93402100]
[153.43853760 269.78579712]
[162.04804993 282.16833496]
[167.30690002 296.30322266]
[168.88450623 311.30197144]
[166.68170166 326.22171021]
[160.83694458 340.12457275]
[151.71766663 352.13662720]
[139.89709473 361.50277710]
[126.11828613 367.63427734]
[111.24739075 370.14566040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[36 54]
[37 53]
[38 52]
[58 128]
[59 127]
[60 126]
[61 125]
[90 124]
[91 123]
[92 122]
[93 121]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
