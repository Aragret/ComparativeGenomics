%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUAAACUAGGGGGGGGGGAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCxxxxxxxxxxUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCCCCCCCCCCCAGUAAGCUA\
) } def
/len { sequence length } bind def

/coor [
[67.96391296 417.37625122]
[54.11797714 411.36022949]
[42.40931320 401.83081055]
[33.70679092 389.49514771]
[28.65618706 375.26861572]
[27.63229752 360.20693970]
[30.71109581 345.42776489]
[37.66411591 332.02786255]
[47.97540283 321.00152588]
[60.87978363 313.16702271]
[75.41967010 309.10571289]
[75.41967010 294.10571289]
[75.41967010 279.10571289]
[75.41967010 264.10571289]
[75.41967010 249.10569763]
[75.41967010 234.10569763]
[75.41967010 219.10569763]
[75.41967010 204.10569763]
[75.41967010 189.10569763]
[75.41967010 174.10569763]
[69.15668488 169.97955322]
[56.63072586 161.72726440]
[50.36774445 157.60112000]
[36.58536530 163.52108765]
[22.80298233 169.44104004]
[15.54528713 183.74858093]
[-0.19441205 186.85363770]
[-12.34196377 176.37429810]
[-11.57880592 160.34941101]
[1.50963128 151.07189941]
[16.88302040 155.65866089]
[30.66540146 149.73870850]
[44.44778442 143.81874084]
[58.65545654 142.95893860]
[70.47702789 147.03410339]
[78.47531128 154.68237305]
[83.08087921 140.40692139]
[87.68643951 126.13145447]
[92.29200745 111.85599518]
[88.26914978 108.72451019]
[85.50973511 104.23928833]
[84.46258545 98.90692139]
[85.37480927 93.37930298]
[88.24643707 88.37395477]
[92.81629181 84.58104706]
[90.94868469 69.69776917]
[81.23526764 61.14771652]
[80.01725769 48.66831589]
[87.40591431 39.03944778]
[85.84832764 24.12053299]
[84.29074860 9.20162201]
[72.29904175 -0.74004251]
[70.93196106 -15.89212894]
[80.48371887 -27.26312256]
[78.92613220 -42.18203735]
[74.02458191 -56.35859299]
[66.03466797 -69.05352020]
[58.04475021 -81.74845123]
[42.52882767 -83.69525909]
[31.93228149 -95.19514465]
[31.25848389 -110.81820679]
[40.82557678 -123.18771362]
[56.11627579 -126.46316528]
[69.91077423 -119.09799194]
[75.69573975 -104.56980896]
[70.73968506 -89.73837280]
[78.72959900 -77.04344177]
[86.71951294 -64.34851074]
[86.46253204 -79.34630585]
[90.02453613 -93.91724396]
[97.17176819 -107.10500336]
[107.43513489 -118.04407501]
[120.14104462 -126.01651764]
[134.45559692 -130.49908447]
[149.43933105 -131.19758606]
[164.10884094 -128.06619263]
[177.50134277 -121.31039429]
[188.73788452 -111.37358856]
[197.08100891 -98.90795135]
[201.98315430 -84.73159027]
[203.12257385 -69.77493286]
[200.42448425 -55.01958084]
[194.06597900 -41.43394852]
[184.46437073 -29.90967178]
[172.24980164 -21.20309448]
[158.22395325 -15.88564110]
[143.30732727 -14.30629730]
[128.47892761 -16.56871796]
[114.71194458 -22.52441978]
[102.90993500 -31.78252220]
[93.84504700 -43.73961639]
[95.40262604 -28.82070351]
[107.09713745 -19.66788673]
[108.88926697 -4.56017637]
[99.20966339 7.64404058]
[100.76724243 22.56295395]
[102.32482147 37.48186493]
[113.38669586 51.06990814]
[105.83196259 67.83015442]
[107.69957733 82.71343231]
[118.89533997 92.69615936]
[133.89453125 92.85219574]
[148.89372253 93.00823212]
[163.89289856 93.16426849]
[178.89208984 93.32030487]
[193.89128113 93.16426849]
[208.88397217 92.69622803]
[223.87667847 92.22818756]
[238.86936951 91.76014709]
[249.50651550 80.07140350]
[265.29702759 79.41128540]
[276.87265015 90.17141724]
[277.36578369 105.96800995]
[266.48385620 117.42922974]
[250.68293762 117.75532532]
[239.33741760 106.75283813]
[224.34471130 107.22088623]
[209.35202026 107.68892670]
[194.35932922 108.15696716]
[190.45640564 111.01051331]
[184.70483398 111.39866638]
[178.73605347 108.31949615]
[163.73686218 108.16345978]
[148.73768616 108.00742340]
[133.73849487 107.85138702]
[118.73930359 107.69535065]
[106.56746674 116.46155548]
[101.96189880 130.73701477]
[97.35633850 145.01248169]
[92.75077057 159.28793335]
[90.41967010 174.10569763]
[90.41967010 189.10569763]
[90.41967010 204.10569763]
[90.41967010 219.10569763]
[90.41967010 234.10569763]
[90.41967010 249.10569763]
[90.41967010 264.10571289]
[90.41967010 279.10571289]
[90.41967010 294.10571289]
[90.41967010 309.10571289]
[104.95955658 313.16702271]
[117.86393738 321.00152588]
[128.17521667 332.02786255]
[135.12825012 345.42776489]
[138.20704651 360.20693970]
[137.18315125 375.26861572]
[132.13255310 389.49514771]
[123.43002319 401.83081055]
[111.72136688 411.36022949]
[97.87542725 417.37625122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 33]
[24 32]
[25 31]
[36 130]
[37 129]
[38 128]
[39 127]
[45 100]
[46 99]
[49 97]
[50 96]
[51 95]
[54 92]
[55 91]
[56 68]
[57 67]
[58 66]
[101 126]
[102 125]
[103 124]
[104 123]
[105 122]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
