%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCGAAGAAGGGGGGGGGGCCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAxxxxxxxxxxUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUCCCCCCCCCCAUUCGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.20993042]
[71.19830322 353.19390869]
[59.48964310 343.66448975]
[50.78712082 331.32882690]
[45.73651886 317.10229492]
[44.71262741 302.04061890]
[47.79142761 287.26144409]
[54.74444962 273.86154175]
[65.05573273 262.83520508]
[77.96011353 255.00068665]
[92.50000000 250.93937683]
[92.50000000 235.93937683]
[92.50000000 220.93937683]
[92.50000000 205.93937683]
[92.50000000 190.93937683]
[92.50000000 175.93937683]
[92.50000000 160.93937683]
[92.50000000 145.93937683]
[92.50000000 130.93937683]
[92.50000000 115.93937683]
[87.45124054 101.81457520]
[77.94288635 90.21323395]
[68.43452454 78.61189270]
[58.92616653 67.01055145]
[42.08721161 68.23595428]
[27.96310425 59.29217529]
[21.99062157 43.85535431]
[26.32945442 28.05409431]
[16.58180237 16.65307236]
[6.83415079 5.25205231]
[-2.91350150 -6.14896870]
[-12.66115379 -17.54998970]
[-22.40880585 -28.95101166]
[-32.15645599 -40.35203171]
[-45.59380341 -32.77928925]
[-60.24116516 -27.96051979]
[-75.54072571 -26.07734299]
[-90.91018677 -27.19961739]
[-105.76496887 -31.28285217]
[-119.54038239 -38.16996765]
[-131.71315002 -47.59733200]
[-141.82127380 -59.20486069]
[-149.48155212 -72.54977417]
[-154.40409851 -87.12345886]
[-156.40333557 -102.37088776]
[-155.40499878 -117.71174622]
[-151.44886780 -132.56251526]
[-144.68717957 -146.35864258]
[-135.37879944 -158.57606506]
[-145.36152649 -169.77183533]
[-160.90231323 -170.83093262]
[-170.86672974 -182.32723999]
[-169.76127625 -197.13648987]
[-179.74400330 -208.33224487]
[-195.36804199 -207.68156433]
[-207.72337341 -217.26693726]
[-210.97621155 -232.56246948]
[-203.59063721 -246.34605408]
[-189.05390930 -252.10952759]
[-174.22982788 -247.13153076]
[-166.11785889 -233.76254272]
[-168.54823303 -218.31497192]
[-158.56550598 -207.11921692]
[-143.72689819 -206.52653503]
[-133.44349670 -195.31465149]
[-134.16577148 -179.75456238]
[-124.18303680 -168.55879211]
[-111.66605377 -176.08610535]
[-97.97032928 -181.17366028]
[-83.56653595 -183.64497375]
[-68.94997406 -183.41355896]
[-54.62354279 -180.48580933]
[-41.08044434 -174.96099854]
[-28.78720284 -167.02775574]
[-18.16759109 -156.95776367]
[-9.58802319 -145.09635925]
[-3.34491277 -131.85073853]
[0.34556645 -117.67595673]
[1.35496807 -103.05931854]
[-0.35295841 -88.50360107]
[-4.72096825 -74.50975037]
[-11.60023785 -61.55969620]
[-20.75543594 -50.09968567]
[-11.00778484 -38.69866180]
[-1.26013255 -27.29764175]
[8.48751926 -15.89662075]
[18.23517227 -4.49559975]
[27.98282433 6.90542126]
[37.73047638 18.30644226]
[50.92066193 16.02281189]
[63.61300659 20.60711861]
[72.44038391 30.95737839]
[75.00468445 44.42724991]
[70.52751160 57.50218964]
[80.03586578 69.10353088]
[89.54422760 80.70487213]
[99.05258179 92.30621338]
[101.14183044 88.39101410]
[104.87975311 85.20589447]
[110.00730896 83.27392578]
[116.11930084 83.03148651]
[122.69167328 84.79046631]
[137.68437195 84.32242584]
[152.67706299 83.85438538]
[167.66976929 83.38633728]
[173.01312256 69.15549469]
[183.39930725 58.05614090]
[197.24449158 51.78084564]
[212.43739319 51.28654861]
[226.66119385 56.64862442]
[237.74687195 67.04939270]
[244.00395203 80.90282440]
[244.47825623 96.09635925]
[239.09747314 110.31309509]
[228.68212891 121.38508606]
[214.82048035 127.62393188]
[199.62634277 128.07826233]
[185.41670227 122.67877960]
[174.35841370 112.24887848]
[168.13780212 98.37903595]
[153.14511108 98.84707642]
[138.15242004 99.31511688]
[123.15972137 99.78316498]
[138.15055847 100.30713654]
[149.68395996 109.89780426]
[152.93334961 124.54162598]
[146.53894043 138.11039734]
[133.17668152 144.92579651]
[118.43844604 142.13571167]
[108.49196625 130.90774536]
[107.50000000 115.93937683]
[107.50000000 130.93937683]
[107.50000000 145.93937683]
[107.50000000 160.93937683]
[107.50000000 175.93937683]
[107.50000000 190.93937683]
[107.50000000 205.93937683]
[107.50000000 220.93937683]
[107.50000000 235.93937683]
[107.50000000 250.93937683]
[122.03988647 255.00068665]
[134.94427490 262.83520508]
[145.25555420 273.86154175]
[152.20857239 287.26144409]
[155.28736877 302.04061890]
[154.26348877 317.10229492]
[149.21287537 331.32882690]
[140.51036072 343.66448975]
[128.80169678 353.19390869]
[114.95575714 359.20993042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 97]
[22 96]
[23 95]
[24 94]
[28 89]
[29 88]
[30 87]
[31 86]
[32 85]
[33 84]
[34 83]
[49 67]
[50 66]
[53 63]
[54 62]
[102 123]
[103 122]
[104 121]
[105 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
