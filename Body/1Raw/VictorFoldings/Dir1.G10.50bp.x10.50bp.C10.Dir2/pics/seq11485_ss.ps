%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCAUGGGGGGGGGGGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCAxxxxxxxxxxCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCACCCCCCCCCCUCCUAGCAAU\
) } def
/len { sequence length } bind def

/coor [
[104.38705444 396.59265137]
[90.54111481 390.57662964]
[78.83245087 381.04721069]
[70.12992859 368.71154785]
[65.07933044 354.48504639]
[64.05543518 339.42333984]
[67.13423157 324.64419556]
[74.08725739 311.24426270]
[84.39854431 300.21792603]
[97.30292511 292.38342285]
[111.84281158 288.32211304]
[111.84281158 273.32211304]
[111.84281158 258.32211304]
[111.84281158 243.32211304]
[111.84281158 228.32211304]
[111.84281158 213.32211304]
[111.84281158 198.32211304]
[111.84281158 183.32211304]
[111.84281158 168.32211304]
[111.84281158 153.32211304]
[108.74448395 138.64558411]
[102.68147278 124.92552948]
[96.61846161 111.20547485]
[92.28344727 125.56540680]
[80.96983337 135.41436768]
[66.14962006 137.72985840]
[52.37095261 131.80125427]
[43.86232376 119.44799042]
[43.23491669 104.46111298]
[50.68128204 91.43991089]
[63.91622543 84.38043213]
[78.87810516 85.44911957]
[90.97580719 94.31866455]
[87.57283020 79.70977020]
[84.01806641 65.13706970]
[80.31190491 50.60213089]
[76.60574341 36.06719589]
[72.89958191 21.53225899]
[69.19342041 6.99732256]
[65.48725891 -7.53761339]
[61.78110123 -22.07254982]
[46.91601944 -19.95674515]
[31.90931892 -19.46057129]
[16.93694496 -20.58984184]
[2.17444062 -23.33131981]
[-12.20511150 -27.65285873]
[-26.03311920 -33.50379562]
[-39.14745331 -40.81552887]
[-51.39435959 -49.50233078]
[-62.63024521 -59.46235657]
[-72.72338104 -70.57882690]
[-81.55541992 -82.72140503]
[-89.02281952 -95.74773407]
[-95.03802490 -109.50508118]
[-99.53051758 -123.83214569]
[-102.44761658 -138.56094360]
[-103.75511932 -153.51881409]
[-103.43769836 -168.53036499]
[-101.49908447 -183.41958618]
[-97.96199799 -198.01191711]
[-92.86790466 -212.13627625]
[-86.27654266 -225.62705994]
[-78.26518250 -238.32608032]
[-68.92775726 -250.08447266]
[-58.37374878 -260.76437378]
[-46.72688675 -270.24053955]
[-34.12372589 -278.40188599]
[-20.71203995 -285.15274048]
[-6.64906931 -290.41390991]
[7.90030527 -294.12377930]
[22.76549911 -296.23876953]
[37.77222443 -296.73413086]
[52.74454117 -295.60406494]
[67.50689697 -292.86178589]
[81.88621521 -288.53945923]
[95.71390533 -282.68780518]
[108.82785034 -275.37536621]
[121.07428741 -266.68789673]
[132.30964661 -256.72726440]
[142.40217590 -245.61024475]
[151.23356628 -233.46719360]
[158.70025635 -220.44046021]
[164.71472168 -206.68280029]
[169.20645142 -192.35549927]
[172.12275696 -177.62652588]
[173.42944336 -162.66859436]
[173.11122131 -147.65705872]
[171.17181396 -132.76794434]
[167.63394165 -118.17580414]
[162.53907776 -104.05171967]
[155.94699097 -90.56129456]
[147.93495178 -77.86269379]
[138.59689331 -66.10480499]
[128.04231262 -55.42548370]
[116.39493561 -45.94993591]
[103.79134369 -37.78926086]
[90.37928772 -31.03914070]
[76.31603241 -25.77871132]
[80.02219391 -11.24377441]
[83.72835541 3.29116130]
[87.43451691 17.82609749]
[91.14067841 32.36103439]
[94.84683990 46.89596939]
[98.55300140 61.43090439]
[103.28385162 67.17240143]
[102.18172455 76.30679321]
[105.58470154 90.91568756]
[110.33851624 105.14246368]
[116.40152740 118.86251831]
[122.46453857 132.58256531]
[124.42051697 117.71064758]
[130.41403198 103.96009064]
[139.97735596 92.40401459]
[152.36415100 83.94425964]
[166.60772705 79.24102783]
[181.59652710 78.66137695]
[196.16079712 82.25052643]
[209.16392517 89.72838593]
[219.59115601 100.51138306]
[226.62872314 113.75798798]
[229.72741699 128.43443298]
[228.64541626 143.39535522]
[223.46714783 157.47320557]
[214.59672546 169.56930542]
[202.72642517 178.73968506]
[188.78259277 184.26867676]
[173.85343933 185.72479248]
[159.10403442 182.99440002]
[145.68544006 176.29058838]
[134.64485168 166.13650513]
[126.84281158 153.32211304]
[126.84281158 168.32211304]
[126.84281158 183.32211304]
[126.84281158 198.32211304]
[126.84281158 213.32211304]
[126.84281158 228.32211304]
[126.84281158 243.32211304]
[126.84281158 258.32211304]
[126.84281158 273.32211304]
[126.84281158 288.32211304]
[141.38269043 292.38342285]
[154.28707886 300.21792603]
[164.59835815 311.24426270]
[171.55137634 324.64419556]
[174.63018799 339.42333984]
[173.60629272 354.48504639]
[168.55569458 368.71154785]
[159.85316467 381.04721069]
[148.14450073 390.57662964]
[134.29856873 396.59265137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 110]
[22 109]
[23 108]
[33 107]
[34 106]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
