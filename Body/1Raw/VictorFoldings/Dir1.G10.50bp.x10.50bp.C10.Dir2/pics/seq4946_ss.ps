%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCAUGGGGGGGGGGAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCxxxxxxxxxxCGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCCCCCCCCCCCUCAUAAUCAU\
) } def
/len { sequence length } bind def

/coor [
[81.69577026 376.61462402]
[69.81150055 367.33950806]
[60.49279022 355.48941040]
[54.28142548 341.75323486]
[51.53852463 326.92959595]
[52.42355347 311.88034058]
[56.88505936 297.48040771]
[64.66365814 284.56695557]
[75.30710602 273.89080811]
[88.19661713 266.07263184]
[102.58280182 261.56695557]
[101.64717865 246.59616089]
[100.71154785 231.62536621]
[99.77591705 216.65457153]
[98.84029388 201.68379211]
[97.90466309 186.71299744]
[96.96903229 171.74220276]
[96.03340912 156.77140808]
[95.09777832 141.80061340]
[94.16214752 126.82982635]
[80.82885742 119.65674591]
[73.32456207 106.50701904]
[73.93094635 91.37882996]
[82.46363068 78.87191010]
[76.40061951 65.15185547]
[70.33760834 51.43180466]
[64.27459717 37.71175003]
[49.82901001 31.95814705]
[44.46568680 16.53308105]
[34.02587509 5.76227283]
[23.58606148 -5.00853586]
[13.14624882 -15.77934456]
[1.15942526 -6.72972059]
[-11.84866047 0.77823067]
[-25.68080902 6.63069105]
[-40.12732697 10.73893929]
[-54.96921158 13.04069424]
[-69.98146057 13.50106335]
[-84.93650055 12.11306572]
[-99.60760498 8.89774513]
[-113.77236938 3.90384316]
[-127.21605682 -2.79293275]
[-139.73487854 -11.09106159]
[-151.13902283 -20.86474609]
[-161.25563049 -31.96581841]
[-169.93133545 -44.22599030]
[-177.03460693 -57.45940399]
[-182.45776367 -71.46543884]
[-186.11859131 -86.03176880]
[-187.96159363 -100.93756866]
[-187.95883179 -115.95687866]
[-186.11035156 -130.86199951]
[-182.44416809 -145.42698669]
[-177.01586914 -159.43103027]
[-169.90773010 -172.66181946]
[-161.22752380 -184.91880798]
[-151.10684204 -196.01615906]
[-139.69909668 -205.78565979]
[-127.17723083 -214.07917786]
[-113.73107910 -220.77101135]
[-99.56448364 -225.75970459]
[-84.89219666 -228.96963501]
[-69.93665314 -230.35214233]
[-54.92457199 -229.88626099]
[-40.08353424 -227.57904053]
[-25.63852501 -223.46548462]
[-11.80852890 -217.60794067]
[1.19679594 -210.09521484]
[13.18029213 -201.04118347]
[23.96029282 -190.58311462]
[33.37337875 -178.87954712]
[41.27684402 -166.10791016]
[47.55087662 -152.46180725]
[52.10036850 -138.14811707]
[54.85634232 -123.38381958]
[55.77702332 -108.39276123]
[54.84845734 -93.40218353]
[52.08471298 -78.63935089]
[47.52769470 -64.32804871]
[41.24648285 -50.68525314]
[33.33629608 -37.91777039]
[23.91705704 -26.21915627]
[34.35686874 -15.44834805]
[44.79668045 -4.67753983]
[55.23649597 6.09326887]
[70.23567963 6.24930525]
[80.89730835 -4.30198479]
[91.55893707 -14.85327530]
[102.22055817 -25.40456581]
[98.24504852 -40.24002457]
[102.23538208 -55.07150650]
[113.11817932 -65.90941620]
[127.96602631 -69.83840179]
[142.78492737 -65.80160522]
[153.58866882 -54.88488388]
[157.47109985 -40.02479172]
[153.38786316 -25.21862030]
[142.43734741 -14.44914913]
[127.56515503 -10.61331558]
[112.77185059 -14.74293900]
[102.11022186 -4.19164896]
[91.44860077 6.35964108]
[80.78697205 16.91093063]
[77.99465179 31.64873695]
[84.05766296 45.36878967]
[90.12067413 59.08884430]
[96.18368530 72.80889893]
[116.27751160 77.88749695]
[127.09705353 95.56491852]
[141.99896240 97.27761078]
[156.90086365 98.99029541]
[171.80276489 100.70298767]
[183.03125000 89.81929016]
[198.63230896 88.75099945]
[211.23957825 98.00253296]
[214.90028381 113.20559692]
[207.88597107 127.18177032]
[193.50857544 133.33193970]
[178.55667114 128.75216675]
[170.09007263 115.60488892]
[155.18817139 113.89219666]
[140.28627014 112.17951202]
[125.38436127 110.46681976]
[123.27500153 114.56690216]
[120.50930023 118.25620270]
[117.16524506 121.43069458]
[113.33714294 124.00085449]
[109.13294220 125.89420319]
[110.06856537 140.86499023]
[111.00419617 155.83578491]
[111.93982697 170.80657959]
[112.87545776 185.77737427]
[113.81108093 200.74815369]
[114.74671173 215.71894836]
[115.68234253 230.68974304]
[116.61796570 245.66053772]
[117.55359650 260.63131714]
[132.38882446 263.31072998]
[146.15145874 269.46325684]
[158.04135132 278.73114014]
[167.36724854 290.57559204]
[173.58694458 304.30801392]
[176.33882141 319.12997437]
[175.46292114 334.17974854]
[171.01014709 348.58239746]
[163.23937988 361.50054932]
[152.60240173 372.18316650]
[139.71763611 380.00915527]
[125.33418274 384.52355957]
[110.28827667 385.46386719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[24 107]
[25 106]
[26 105]
[27 104]
[29 85]
[30 84]
[31 83]
[32 82]
[86 103]
[87 102]
[88 101]
[89 100]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
