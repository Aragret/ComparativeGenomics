%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGGUCUAUGGGGGGGGGGCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCxxxxxxxxxxUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCCCCCCCCCCCACAGGACUAU\
) } def
/len { sequence length } bind def

/coor [
[89.10584259 362.23477173]
[76.18668365 354.47640991]
[65.40538788 343.94738770]
[57.34337616 331.21551514]
[52.43541336 316.96740723]
[50.94618988 301.97143555]
[52.95601273 287.03631592]
[58.35649872 272.96752930]
[66.85639954 260.52371216]
[77.99733734 250.37599182]
[91.17848206 243.07159424]
[105.68900299 239.00447083]
[105.07317352 224.01710510]
[104.45735168 209.02975464]
[103.84152985 194.04240417]
[103.22570038 179.05505371]
[102.60987854 164.06770325]
[101.99404907 149.08033752]
[101.37822723 134.09298706]
[100.76239777 119.10563660]
[88.98026276 109.82225037]
[74.26473999 112.72972870]
[62.22602081 122.99519348]
[48.24039078 117.87158203]
[33.52486801 120.77905273]
[18.80934715 123.68652344]
[15.85898113 138.59838867]
[7.42251539 151.24333191]
[-5.21355104 159.69308472]
[-20.12230873 162.65911865]
[-35.03028107 159.68913269]
[-47.66411209 151.23603821]
[-56.09723282 138.58886719]
[-59.04365158 123.67622375]
[-56.05406570 108.77217102]
[-47.58436203 96.14946747]
[-34.92610550 87.73299408]
[-20.00959587 84.80619812]
[-5.10948896 87.81538391]
[7.50205803 96.30168915]
[15.90187454 108.97100067]
[30.61739731 106.06352997]
[45.33292007 103.15605927]
[56.31908417 93.09854889]
[71.35726929 98.01420593]
[86.07279205 95.10672760]
[72.04330444 89.79885864]
[65.19482422 76.45351410]
[69.06324005 61.96091461]
[81.65127563 53.80363083]
[96.45970917 56.19328308]
[105.84290314 67.89608765]
[104.95545197 82.87173462]
[113.62205505 70.62877655]
[116.04900360 61.75715637]
[122.59442139 58.22590256]
[131.51057434 46.16347122]
[140.42672729 34.10103989]
[149.34288025 22.03860664]
[158.25901794 9.97617531]
[167.17517090 -2.08625579]
[159.81680298 -13.23143196]
[158.86305237 -27.90510750]
[165.85580444 -42.36108780]
[180.15792847 -52.29851913]
[180.46589661 -67.29535675]
[180.77388000 -82.29219818]
[181.08186340 -97.28903198]
[181.38983154 -112.28587341]
[181.69781494 -127.28270721]
[182.00579834 -142.27954102]
[168.57165527 -149.61320496]
[160.09410095 -162.35643005]
[158.52119446 -177.58090210]
[164.21438599 -191.78814697]
[175.86541748 -201.71347046]
[190.79696655 -205.07608032]
[205.57789612 -201.10328674]
[216.81161499 -190.70800781]
[221.91673279 -176.27899170]
[219.72010803 -161.13192749]
[210.72651672 -148.74751282]
[197.00262451 -141.97157288]
[196.69465637 -126.97473145]
[196.38667297 -111.97789764]
[196.07868958 -96.98105621]
[195.77072144 -81.98421478]
[195.46273804 -66.98738098]
[195.15476990 -51.99054337]
[201.13989258 -47.47078323]
[210.17961121 -59.44089127]
[222.14956665 -50.40097427]
[213.11015320 -38.43126297]
[219.09527588 -33.91150284]
[233.43534851 -38.31180191]
[244.35859680 -49.75702286]
[258.79568481 -46.09371948]
[273.13574219 -50.49401855]
[287.47579956 -54.89431763]
[274.98864746 -63.20521927]
[271.84963989 -77.87309265]
[279.84164429 -90.56668854]
[294.42532349 -94.07614899]
[307.31723022 -86.40811157]
[311.19485474 -71.91797638]
[303.85513306 -58.83554077]
[318.62725830 -61.44026566]
[333.39938354 -64.04498291]
[345.60720825 -74.99491119]
[361.10781860 -69.64109802]
[363.95547485 -53.49108887]
[351.22079468 -43.15863037]
[336.00408936 -49.27286911]
[321.23196411 -46.66814804]
[306.45986938 -44.06342316]
[291.87609863 -40.55425644]
[277.53604126 -36.15395737]
[263.19598389 -31.75365639]
[253.29843140 -20.62317848]
[237.83564758 -23.97174263]
[223.49557495 -19.57144165]
[206.11094666 7.39546394]
[179.23760986 6.82989502]
[170.32145691 18.89232635]
[161.40530396 30.95475769]
[152.48915100 43.01718903]
[143.57299805 55.07962036]
[134.65684509 67.14205170]
[125.86501312 79.29538727]
[117.19840240 91.53833771]
[115.74975586 118.48981476]
[116.36557770 133.47717285]
[116.98139954 148.46452332]
[117.59722900 163.45187378]
[118.21305084 178.43922424]
[118.82888031 193.42657471]
[119.44470215 208.41392517]
[120.06053162 223.40129089]
[120.67635345 238.38864136]
[135.47163391 241.25160217]
[149.20759583 247.44998169]
[161.14350891 256.64947510]
[170.63565063 268.35400391]
[177.17214966 281.93234253]
[180.40049744 296.65219116]
[180.14656067 311.71978760]
[176.42407227 326.32250977]
[169.43377686 339.67288208]
[159.55262756 351.05093384]
[147.31352234 359.84301758]
[133.37649536 365.57504272]
[118.49316406 367.93786621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 46]
[22 45]
[24 43]
[25 42]
[26 41]
[53 130]
[54 129]
[56 128]
[57 127]
[58 126]
[59 125]
[60 124]
[61 123]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[94 121]
[95 120]
[97 118]
[98 117]
[99 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
