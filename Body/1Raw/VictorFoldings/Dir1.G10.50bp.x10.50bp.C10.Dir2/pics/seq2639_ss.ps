%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACCCUCACGGGGGGGGGGUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAxxxxxxxxxxUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUCCCCCCCCCCUUACACUCAC\
) } def
/len { sequence length } bind def

/coor [
[70.48946381 466.66442871]
[57.26926422 459.39196777]
[46.38246155 448.94497681]
[38.57133102 436.03570557]
[34.36845016 421.54440308]
[34.06037521 406.45907593]
[37.66811752 391.80822754]
[44.94569016 378.59085083]
[55.39689636 367.70806885]
[68.30915833 359.90194702]
[82.80209351 355.70465088]
[82.49004364 340.70788574]
[82.17798615 325.71115112]
[81.86592865 310.71438599]
[81.55387115 295.71762085]
[81.24181366 280.72088623]
[80.92975616 265.72412109]
[80.61770630 250.72737122]
[80.30564880 235.73062134]
[67.52828979 227.87319946]
[54.00410080 234.36135864]
[40.47990799 240.84951782]
[26.95571899 247.33769226]
[23.25004387 262.52984619]
[10.61546326 271.74404907]
[-4.98235798 270.62960815]
[-16.17860794 259.71273804]
[-17.68675804 244.14805603]
[-8.79470634 231.28472900]
[6.29899216 227.19641113]
[20.46755409 233.81350708]
[33.99174500 227.32533264]
[47.51593399 220.83717346]
[61.04012299 214.34899902]
[70.42728424 202.64938354]
[73.83026123 188.04048157]
[77.08109283 173.39698792]
[80.17941284 158.72045898]
[83.12489319 144.01249695]
[85.91722107 129.27468872]
[88.70954132 114.53688812]
[81.11963654 101.59883118]
[66.89285278 96.84501648]
[50.94108963 100.64937592]
[39.86861801 88.55258179]
[45.06584930 72.99877930]
[61.18632126 69.98838806]
[71.64666748 82.61824036]
[85.87345123 87.37205505]
[96.85911560 77.15857697]
[93.15295410 62.62363815]
[89.44679260 48.08869934]
[85.58963013 33.59310532]
[81.58189392 19.13841629]
[77.57415009 4.68372774]
[62.53593063 5.49978638]
[47.67393875 3.06354618]
[33.68329620 -2.51104546]
[21.21837807 -10.96325493]
[10.86218548 -21.89775658]
[3.09909678 -34.80312729]
[-1.70779312 -49.07575226]
[-3.33365750 -64.04808044]
[-1.70245218 -79.01982880]
[3.10952878 -93.29074097]
[10.87722015 -106.19333649]
[21.23731232 -117.12414551]
[33.70524597 -125.57190704]
[47.69787598 -131.14151001]
[62.56073380 -133.57244873]
[77.59866333 -132.75102234]
[92.10831451 -128.71565247]
[105.41103363 -121.65509033]
[116.88464355 -111.89955902]
[125.99249268 -99.90534973]
[132.30859375 -86.23344421]
[135.53753662 -71.52331543]
[135.52828979 -56.46296692]
[132.28128052 -41.75681305]
[125.94838715 -28.09267807]
[116.82581329 -16.10966110]
[105.34022522 -6.36823225]
[92.02883911 0.67598748]
[96.03658295 15.13067627]
[100.04431915 29.58536339]
[104.89358521 35.22719574]
[103.98172760 44.38254166]
[107.68788910 58.91747665]
[111.39405060 73.45241547]
[115.11000824 58.91997910]
[116.44155884 43.97919464]
[126.84732056 33.17548752]
[141.72763062 31.28441620]
[154.50495911 39.14188766]
[159.53134155 53.27466965]
[154.58496094 67.43564606]
[141.85243225 75.36521149]
[130.56008911 85.23854828]
[145.20358276 81.98772430]
[159.84709167 78.73690033]
[174.49058533 75.48607635]
[189.13409424 72.23524475]
[203.77758789 68.98442078]
[209.01072693 54.47174454]
[221.27314758 45.11029816]
[236.65196228 43.88729095]
[250.23983765 51.19297791]
[257.70092773 64.69614410]
[256.65444946 80.08797455]
[247.43432617 92.45699310]
[232.98263550 97.85629272]
[217.91088867 94.56297302]
[207.02841187 83.62792206]
[192.38491821 86.87874603]
[177.74140930 90.12957764]
[163.09791565 93.38040161]
[148.45440674 96.63122559]
[133.81091309 99.88204956]
[103.44734955 117.32921600]
[100.65502167 132.06701660]
[97.86270142 146.80482483]
[99.34384918 155.88546753]
[94.85593414 161.81878662]
[91.75761414 176.49531555]
[93.04953766 185.60479736]
[88.43915558 191.44346619]
[85.03617859 206.05235291]
[91.33477783 210.63175964]
[95.71780396 217.66717529]
[97.23442078 226.32688904]
[95.30239868 235.41856384]
[95.61445618 250.41531372]
[95.92651367 265.41207886]
[96.23857117 280.40881348]
[96.55062866 295.40557861]
[96.86267853 310.40234375]
[97.17473602 325.39907837]
[97.48679352 340.39584351]
[97.79885101 355.39260864]
[112.45384216 358.98336792]
[125.67964935 366.24560547]
[136.57452393 376.68420410]
[144.39561462 389.58743286]
[148.60968018 404.07550049]
[148.92941284 419.16058350]
[145.33297729 433.81417847]
[138.06561279 447.03720093]
[127.62281799 457.92803955]
[114.71659088 465.74414062]
[100.22689819 469.95263672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 34]
[21 33]
[22 32]
[23 31]
[35 127]
[36 126]
[37 124]
[38 123]
[39 121]
[40 120]
[41 119]
[42 49]
[43 48]
[50 89]
[51 88]
[52 87]
[53 85]
[54 84]
[55 83]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
