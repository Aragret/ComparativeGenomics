%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUAUUUGGGGGGGGGGCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGxxxxxxxxxxGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUCCCCCCCCCCACUAAUAAUU\
) } def
/len { sequence length } bind def

/coor [
[84.39922333 335.55453491]
[71.84099579 327.20339966]
[61.75477600 315.99093628]
[54.77458191 302.62203979]
[51.33919525 287.93704224]
[51.66457367 272.85910034]
[55.73025894 258.33596802]
[63.28067780 245.28062439]
[73.84120941 234.51373291]
[86.74800110 226.71209717]
[101.18972778 222.36613464]
[100.56575012 207.37911987]
[99.94177246 192.39210510]
[99.31779480 177.40509033]
[98.69381714 162.41807556]
[98.06984711 147.43106079]
[97.44586945 132.44404602]
[96.82189178 117.45703125]
[86.27059937 106.79540253]
[71.29088593 106.01555634]
[56.31116867 105.23571014]
[40.14497757 113.98979950]
[25.78814697 103.94583130]
[10.79545021 103.47779083]
[-4.19724607 103.00974274]
[-11.29958820 116.47518921]
[-23.49433327 125.48491669]
[-38.33089828 128.29498291]
[-52.85657501 124.40065002]
[-64.20413971 114.62608337]
[-70.15782166 100.95058441]
[-85.15052032 100.48254395]
[-100.14321136 100.01450348]
[-115.13591003 99.54646301]
[-130.12860107 99.07842255]
[-141.47413635 110.08090210]
[-157.27505493 109.75480652]
[-168.15696716 98.29358673]
[-167.66383362 82.49699402]
[-156.08821106 71.73686218]
[-140.29771423 72.39698029]
[-129.66056824 84.08572388]
[-114.66786957 84.55376434]
[-99.67517090 85.02180481]
[-84.68247223 85.48984528]
[-69.68978119 85.95789337]
[-62.89467621 72.68038940]
[-50.95951843 63.63265991]
[-36.21921921 60.65195847]
[-21.58682060 64.38198853]
[-9.97780609 74.13481903]
[-3.72920394 88.01705170]
[11.26349163 88.48509216]
[26.25618744 88.95313263]
[35.32198715 80.88352203]
[47.85692978 81.19037628]
[57.09101486 90.25599670]
[72.07073212 91.03584290]
[87.05044556 91.81568909]
[100.77050018 85.75267792]
[110.27885437 74.15133667]
[99.67254639 63.52660751]
[90.17684174 51.89861679]
[81.88610840 39.38293076]
[74.88275909 26.10393524]
[69.23638153 12.19361305]
[65.00311279 -2.20978904]
[62.22500610 -16.96311951]
[60.92968750 -31.91974831]
[61.13002014 -46.93102646]
[62.82402039 -61.84776306]
[65.99485016 -76.52169800]
[70.61099243 -90.80699921]
[76.62657166 -104.56168365]
[83.98180389 -117.64905548]
[92.60358429 -129.93904114]
[102.40621948 -141.30947876]
[113.29228210 -151.64736938]
[125.15358734 -160.84997559]
[137.87225342 -168.82583618]
[151.32185364 -175.49568176]
[165.36874390 -180.79319763]
[179.87329102 -184.66575623]
[194.69134521 -187.07487488]
[209.67562866 -187.99659729]
[224.67724609 -187.42176819]
[239.54705811 -185.35609436]
[254.13731384 -181.82009888]
[268.30297852 -176.84895325]
[281.90328979 -170.49203491]
[294.80303955 -162.81254578]
[306.87408447 -153.88679504]
[317.99636841 -143.80349731]
[328.05941772 -132.66285706]
[336.96322632 -120.57562256]
[344.61923218 -107.66191101]
[350.95138550 -94.05006409]
[355.89675903 -79.87537384]
[359.40621948 -65.27871704]
[361.44482422 -50.40515900]
[361.99237061 -35.40253448]
[361.04339600 -20.41994286]
[358.60733032 -5.60629320]
[354.70840454 8.89118481]
[349.38534546 22.92840576]
[342.69104004 36.36585617]
[334.69207764 49.06998825]
[325.46789551 60.91453552]
[315.11022949 71.78178406]
[303.72195435 81.56372070]
[291.41632080 90.16312408]
[278.31558228 97.49453735]
[264.54998779 103.48508453]
[250.25631714 108.07524109]
[235.57662964 111.21936798]
[220.65684509 112.88623810]
[205.64521790 113.05926514]
[190.69097900 111.73674011]
[175.94271851 108.93180084]
[161.54704285 104.67234039]
[147.64701843 99.00067139]
[134.38078308 91.97317505]
[121.88019562 83.65969086]
[112.37184143 95.26103210]
[124.52539062 86.46949005]
[139.42663574 88.18782806]
[149.26022339 99.51481628]
[148.86863708 114.50970459]
[138.45727539 125.30801392]
[123.48664856 126.24626923]
[111.80890656 116.83305359]
[112.43288422 131.82006836]
[113.05686188 146.80708313]
[113.68083954 161.79409790]
[114.30481720 176.78111267]
[114.92879486 191.76812744]
[115.55277252 206.75514221]
[116.17675018 221.74215698]
[130.92974854 224.87260437]
[144.44038391 231.57435608]
[155.85935974 241.42614746]
[164.46887207 253.80868530]
[169.72772217 267.94357300]
[171.30532837 282.94232178]
[169.10252380 297.86206055]
[163.25778198 311.76492310]
[154.13850403 323.77697754]
[142.31793213 333.14312744]
[128.53912354 339.27462769]
[113.66822052 341.78601074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 59]
[20 58]
[21 57]
[23 54]
[24 53]
[25 52]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[60 124]
[61 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
