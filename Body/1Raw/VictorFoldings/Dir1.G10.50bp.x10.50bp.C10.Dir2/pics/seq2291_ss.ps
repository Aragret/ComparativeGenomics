%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUAGGAAGGGGGGGGGGAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAxxxxxxxxxxAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUACCCCCCCCCCAAACUAGGAA\
) } def
/len { sequence length } bind def

/coor [
[75.89662170 508.84475708]
[62.05068588 502.82873535]
[50.34202194 493.29931641]
[41.63949966 480.96365356]
[36.58889771 466.73712158]
[35.56500626 451.67544556]
[38.64380646 436.89627075]
[45.59682846 423.49636841]
[55.90811157 412.47003174]
[68.81249237 404.63552856]
[83.35237885 400.57418823]
[83.35237885 385.57418823]
[83.35237885 370.57418823]
[83.35237885 355.57418823]
[83.35237885 340.57418823]
[83.35237885 325.57418823]
[83.35237885 310.57418823]
[83.35237885 295.57418823]
[83.35237885 280.57418823]
[83.35237885 265.57418823]
[75.61508179 252.84692383]
[83.35237885 239.04675293]
[81.39871216 236.95140076]
[80.18534088 233.93118286]
[80.07823181 230.27462769]
[81.32826233 226.40054321]
[84.02826691 222.81286621]
[85.27514648 207.86477661]
[86.52201843 192.91668701]
[87.61332703 177.95645142]
[88.54895782 162.98565674]
[81.62059021 149.80055237]
[90.20361328 136.50985718]
[91.13924408 121.53907013]
[76.92220306 103.14006805]
[85.70649719 81.61140442]
[80.80494690 67.43484497]
[75.90339661 53.25828552]
[71.00184631 39.08172607]
[66.10029602 24.90516853]
[51.44866180 28.19297409]
[36.52103424 29.81961250]
[21.50514412 29.76462746]
[6.58982992 28.02870941]
[-8.03733158 24.63368988]
[-22.19238853 19.62226486]
[-35.69732666 13.05745697]
[-48.38230515 5.02182817]
[-60.08779526 -4.38356638]
[-70.66659546 -15.04044342]
[-79.98565674 -26.81478310]
[-87.92779541 -39.55850983]
[-94.39311218 -53.11135483]
[-99.30031586 -67.30287933]
[-102.58768463 -81.95461273]
[-104.21387482 -96.88228607]
[-104.15843964 -111.89817810]
[-102.42207336 -126.81343842]
[-99.02661896 -141.44050598]
[-94.01477051 -155.59539795]
[-87.44955444 -169.10014343]
[-79.41355133 -181.78488159]
[-70.00780487 -193.49009705]
[-59.35060883 -204.06857300]
[-47.57599258 -213.38728333]
[-34.83203125 -221.32904053]
[-21.27899170 -227.79396057]
[-7.08731890 -232.70072937]
[7.56451082 -235.98765564]
[22.49223518 -237.61340332]
[37.50812149 -237.55752563]
[52.42333221 -235.82070923]
[67.05029297 -232.42481995]
[81.20504761 -227.41255188]
[94.70959473 -220.84692383]
[107.39408875 -212.81054688]
[119.09902191 -203.40444946]
[129.67718506 -192.74693298]
[138.99554443 -180.97204590]
[146.93692017 -168.22784424]
[153.40142822 -154.67460632]
[158.30776978 -140.48278809]
[161.59426880 -125.83086395]
[163.21955872 -110.90309143]
[163.16323853 -95.88719940]
[161.42597961 -80.97204590]
[158.02964783 -66.34518433]
[153.01695251 -52.19058228]
[146.45092773 -38.68623352]
[138.41416931 -26.00197601]
[129.00772095 -14.29732609]
[118.34989166 -3.71948409]
[106.57471466 5.59852362]
[93.83027649 13.53951359]
[80.27685547 20.00361824]
[85.17840576 34.18017578]
[90.07995605 48.35673523]
[94.98150635 62.53329468]
[99.88305664 76.70985413]
[106.28317261 77.57308960]
[112.20019531 80.16064453]
[117.17919159 84.27358246]
[120.83733368 89.59566498]
[135.70037842 87.57333374]
[150.56343079 85.55100250]
[165.42648315 83.52866364]
[173.61772156 70.20809937]
[188.47113037 65.31826782]
[202.97335815 71.16799164]
[210.27691650 84.99521637]
[206.93327332 100.27114868]
[194.52119446 109.78295898]
[178.90130615 109.03945923]
[167.44880676 98.39170837]
[152.58576965 100.41404724]
[137.72271729 102.43637848]
[122.85967255 104.45871735]
[119.68907928 112.44125366]
[113.84074402 118.73175049]
[106.11003113 122.47470093]
[105.17440796 137.44549561]
[112.03585052 151.70141602]
[103.51975250 163.92127991]
[102.58412170 178.89207458]
[105.18435669 187.71763611]
[101.47010803 194.16357422]
[100.22322845 209.11164856]
[98.97635651 224.05973816]
[98.35237885 239.04675293]
[106.08967590 252.84692383]
[98.35237885 265.57418823]
[98.35237885 280.57418823]
[98.35237885 295.57418823]
[98.35237885 310.57418823]
[98.35237885 325.57418823]
[98.35237885 340.57418823]
[98.35237885 355.57418823]
[98.35237885 370.57418823]
[98.35237885 385.57418823]
[98.35237885 400.57418823]
[112.89226532 404.63552856]
[125.79664612 412.47003174]
[136.10792542 423.49636841]
[143.06095886 436.89627075]
[146.13975525 451.67544556]
[145.11585999 466.73712158]
[140.06526184 480.96365356]
[131.36273193 493.29931641]
[119.65407562 502.82873535]
[105.80813599 508.84475708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[27 128]
[28 127]
[29 126]
[30 124]
[31 123]
[33 121]
[34 120]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
