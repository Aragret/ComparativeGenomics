%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAGGAGGGGGGGGGGGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAxxxxxxxxxxACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCCCCCCCCCCCAUCAUAGGAG\
) } def
/len { sequence length } bind def

/coor [
[85.28924561 458.47125244]
[73.19431305 449.43716431]
[63.98617554 437.47418213]
[58.34814072 423.47006226]
[56.69859314 408.46401978]
[59.15993881 393.56958008]
[65.54952240 379.89202881]
[75.39320374 368.44628906]
[87.96051025 360.08175659]
[102.31887054 355.41912842]
[101.69489288 340.43209839]
[101.07091522 325.44509888]
[100.44693756 310.45806885]
[99.82295990 295.47106934]
[99.19898224 280.48403931]
[98.57500458 265.49703979]
[97.95102692 250.51000977]
[97.32704926 235.52299500]
[96.70307159 220.53598022]
[96.07909393 205.54896545]
[95.45511627 190.56195068]
[86.74732208 182.10726929]
[86.14138794 169.58322144]
[94.51116943 159.71405029]
[94.19911194 144.71730042]
[93.73107147 129.72459412]
[93.10709381 114.73758698]
[83.75213623 100.84586334]
[91.61402130 86.05783844]
[90.52271271 71.09758759]
[89.27584076 56.14950180]
[88.02896881 41.20141220]
[84.17546844 32.84663010]
[86.91494751 25.92991829]
[85.97932434 10.95912647]
[85.04369354 -4.01166487]
[73.47592163 -14.44356060]
[72.74032593 -29.63940048]
[82.75683594 -40.60321426]
[81.82120514 -55.57400513]
[80.88557434 -70.54479980]
[79.94995117 -85.51558685]
[79.01432037 -100.48638153]
[78.07868958 -115.45716858]
[63.07756805 -116.06568909]
[48.21852112 -118.21343231]
[33.65906906 -121.87763977]
[19.55355072 -127.01946259]
[6.05149078 -133.58439636]
[-6.70398235 -141.50285339]
[-18.57765198 -150.69088745]
[-29.44365120 -161.05110168]
[-39.18679428 -172.47367859]
[-47.70380020 -184.83752441]
[-54.90438080 -198.01158142]
[-60.71220398 -211.85618591]
[-65.06571198 -226.22459412]
[-67.91874695 -240.96447754]
[-69.24106598 -255.91960144]
[-69.01865387 -270.93139648]
[-67.25387573 -285.84078979]
[-63.96542358 -300.48968506]
[-59.18817139 -314.72280884]
[-52.97274780 -328.38928223]
[-45.38505173 -341.34423828]
[-36.50550842 -353.45034790]
[-26.42825127 -364.57925415]
[-15.26010227 -374.61303711]
[-3.11945033 -383.44528198]
[9.86500645 -390.98239136]
[23.55562592 -397.14443970]
[37.80728149 -401.86614990]
[52.46889114 -405.09741211]
[67.38504028 -406.80401611]
[82.39760590 -406.96786499]
[97.34745026 -405.58721924]
[112.07609558 -402.67669678]
[126.42740631 -398.26718140]
[140.24925232 -392.40539551]
[153.39511108 -385.15347290]
[165.72564697 -376.58828735]
[177.11012268 -366.80065918]
[187.42787170 -355.89431763]
[196.56951904 -343.98489380]
[204.43815613 -331.19863892]
[210.95036316 -317.67108154]
[216.03712463 -303.54559326]
[219.64450073 -288.97195435]
[221.73426819 -274.10464478]
[222.28425598 -259.10128784]
[221.28865051 -244.12086487]
[218.75799561 -229.32221985]
[214.71911621 -214.86221313]
[209.21484375 -200.89414978]
[202.30349731 -187.56608582]
[194.05836487 -175.01930237]
[184.56684875 -163.38679504]
[173.92955017 -152.79190063]
[162.25924683 -143.34690857]
[149.67962646 -135.15194702]
[136.32406616 -128.29388428]
[122.33412170 -122.84542847]
[107.85811615 -118.86433411]
[93.04948425 -116.39279938]
[93.98511505 -101.42200470]
[94.92073822 -86.45121765]
[95.85636902 -71.48042297]
[96.79199982 -56.50963211]
[97.72762299 -41.53884125]
[109.03126526 -31.90747261]
[110.19338989 -16.73828888]
[100.01448822 -4.94729328]
[100.95011139 10.02349854]
[101.88574219 24.99428940]
[102.97705078 39.95454025]
[104.22393036 54.90262604]
[105.47080231 69.85071564]
[109.18505096 76.29663849]
[106.58481598 85.12220764]
[114.85993195 93.37497711]
[115.46753693 105.04616547]
[108.09410858 114.11360931]
[108.71808624 129.10061646]
[112.22070312 137.60847473]
[109.19586945 144.40524292]
[109.50792694 159.40199280]
[119.41497040 174.88844299]
[110.44213104 189.93797302]
[111.06610870 204.92498779]
[111.69008636 219.91200256]
[112.31406403 234.89901733]
[112.93804169 249.88603210]
[113.56201935 264.87304688]
[114.18599701 279.86007690]
[114.80997467 294.84707642]
[115.43395233 309.83410645]
[116.05792999 324.82110596]
[116.68190765 339.80813599]
[117.30588531 354.79513550]
[132.00213623 358.24810791]
[145.22123718 365.53903198]
[155.98228455 376.12689209]
[163.48670959 389.22598267]
[167.17762756 403.86428833]
[166.78115845 418.95550537]
[162.32673645 433.37982178]
[154.14489746 446.06683350]
[142.84277344 456.07504272]
[129.25907898 462.66183472]
[114.40180206 465.33840942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 126]
[25 125]
[26 123]
[27 122]
[29 119]
[30 117]
[31 116]
[32 115]
[34 114]
[35 113]
[36 112]
[39 109]
[40 108]
[41 107]
[42 106]
[43 105]
[44 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
