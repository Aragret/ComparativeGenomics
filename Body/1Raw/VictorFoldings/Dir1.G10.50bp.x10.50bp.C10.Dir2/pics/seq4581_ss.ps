%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUCACACGGGGGGGGGGCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAxxxxxxxxxxAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCCCCCCCCCCCUACCACAC\
) } def
/len { sequence length } bind def

/coor [
[106.03953552 536.20281982]
[96.70032501 524.39300537]
[90.02095795 510.89929199]
[86.29343414 496.31164551]
[85.68070221 481.26776123]
[88.20954895 466.42529297]
[93.76942444 452.43310547]
[102.11726379 439.90286255]
[112.88815308 429.38232422]
[125.61122131 421.33142090]
[139.73027039 416.10208130]
[137.55343628 401.26086426]
[135.37660217 386.41967773]
[133.19976807 371.57846069]
[130.86866760 356.76071167]
[128.38354492 341.96798706]
[125.89842224 327.17529297]
[123.41330719 312.38256836]
[120.92818451 297.58987427]
[118.44306946 282.79714966]
[115.95795441 268.00445557]
[112.60425568 264.52188110]
[111.44420624 258.87515259]
[113.69054413 252.54574585]
[111.82292938 237.66246033]
[109.95531464 222.77919006]
[108.08769989 207.89590454]
[106.06536865 193.03285217]
[103.88852692 178.19165039]
[94.38612366 166.72196960]
[100.03880310 151.94503784]
[97.86196899 137.10383606]
[95.68512726 122.26262665]
[78.55334473 112.54798889]
[74.35810089 91.48543549]
[88.62722778 73.11721802]
[81.72023010 59.80206299]
[74.81323242 46.48690796]
[62.48610306 60.57991028]
[40.42801666 65.56941223]
[26.30321121 60.52065277]
[12.17840862 55.47189713]
[-1.94639421 50.42314148]
[-17.00374603 55.95989990]
[-30.64538574 47.51684189]
[-32.40661240 31.57075691]
[-20.93636703 20.35411835]
[-5.03363705 22.47137070]
[3.10236216 36.29833984]
[17.22716522 41.34709549]
[31.35196877 46.39585114]
[45.47677231 51.44460678]
[50.17035294 45.59479523]
[64.25109100 28.04536057]
[56.26117706 15.35043144]
[48.27126312 2.65550160]
[40.28134537 -10.03942776]
[32.29143143 -22.73435783]
[16.77550507 -24.68116760]
[6.17895985 -36.18104935]
[5.50516129 -51.80410767]
[15.07225513 -64.17361450]
[30.36295319 -67.44906616]
[44.15745544 -60.08389664]
[49.94241714 -45.55570984]
[44.98635864 -30.72427368]
[52.97627640 -18.02934456]
[60.96619034 -5.33441496]
[68.95610809 7.36051512]
[76.94602203 20.05544472]
[74.64580536 5.23286057]
[76.71206665 -9.62414455]
[82.96968842 -23.25653458]
[92.88839722 -34.50905609]
[105.62763977 -42.42813110]
[120.10784912 -46.34266663]
[135.10191345 -45.92093277]
[149.33920288 -41.19867325]
[161.61318970 -32.57606125]
[170.88371277 -20.78381348]
[176.36518860 -6.82124090]
[177.59309387 8.12841702]
[174.46334839 22.79827499]
[167.24119568 35.94515991]
[156.53866577 46.45495224]
[143.26272583 53.43702698]
[128.53842163 56.29969025]
[113.61354065 54.80035400]
[99.75287628 49.06607437]
[88.12838745 39.57991028]
[95.03538513 52.89506531]
[101.94239044 66.21022034]
[116.35460663 70.36811066]
[129.29266357 62.77819824]
[142.23071289 55.18828964]
[155.16877747 47.59838104]
[168.10682678 40.00847244]
[171.84826660 24.65343857]
[185.39474487 16.51288795]
[200.70936584 20.41646767]
[208.70623779 34.04825211]
[204.64096069 49.32074738]
[190.92539978 57.17304993]
[175.69673157 52.94652939]
[162.75868225 60.53643799]
[149.82061768 68.12635040]
[136.88256836 75.71625519]
[123.94451141 83.30615997]
[126.99340057 98.83322144]
[121.53316498 112.39895630]
[110.52633667 120.08578491]
[112.70317078 134.92698669]
[114.88000488 149.76820374]
[124.53811646 162.29942322]
[118.72973633 176.01481628]
[120.90657043 190.85601807]
[125.27369690 198.95417786]
[122.97098541 206.02828979]
[124.83859253 220.91157532]
[126.70620728 235.79484558]
[128.57382202 250.67813110]
[130.75065613 265.51934814]
[133.23577881 280.31204224]
[135.72090149 295.10476685]
[138.20600891 309.89746094]
[140.69113159 324.69015503]
[143.17625427 339.48287964]
[145.66137695 354.27557373]
[150.19601440 362.28112793]
[148.04096985 369.40161133]
[150.21780396 384.24282837]
[152.39463806 399.08404541]
[154.57148743 413.92523193]
[169.59754944 414.87969971]
[184.09671021 418.93780518]
[197.43511963 425.92208862]
[209.02967834 435.52728271]
[218.37353516 447.33346558]
[225.05821228 460.82452393]
[228.79147339 475.41070557]
[229.41012573 490.45434570]
[226.88711548 505.29779053]
[221.33274841 519.29217529]
[212.98983765 531.82574463]
[202.22309875 542.35046387]
[189.50318909 550.40643311]
[175.38618469 555.64129639]
[160.48922729 557.82629395]
[145.46354675 556.86590576]
[130.96598816 552.80212402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 133]
[12 132]
[13 131]
[14 130]
[15 128]
[16 127]
[17 126]
[18 125]
[19 124]
[20 123]
[21 122]
[24 121]
[25 120]
[26 119]
[27 118]
[28 116]
[29 115]
[31 113]
[32 112]
[33 111]
[36 92]
[37 91]
[38 90]
[40 52]
[41 51]
[42 50]
[43 49]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
