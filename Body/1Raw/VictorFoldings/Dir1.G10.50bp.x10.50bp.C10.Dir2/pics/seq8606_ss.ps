%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCAUUCAGGGGGGGGGGACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCxxxxxxxxxxCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCCCCCCCCCCCUACUCAUGCA\
) } def
/len { sequence length } bind def

/coor [
[67.09175873 444.02719116]
[52.93115616 438.87219238]
[40.34141159 430.58996582]
[30.00147438 419.62719727]
[22.46896362 406.57507324]
[18.15009880 392.13748169]
[17.27779007 377.09301758]
[19.89908028 362.25302124]
[25.87260628 348.41778564]
[34.87622452 336.33343506]
[46.42438126 326.65164185]
[59.89429855 319.89459229]
[74.55955505 316.42660522]
[74.55955505 301.42660522]
[74.55955505 286.42660522]
[74.55955505 271.42660522]
[74.55955505 256.42660522]
[74.55955505 241.42660522]
[74.55955505 226.42660522]
[74.55955505 211.42660522]
[74.55955505 196.42660522]
[74.55955505 181.42660522]
[65.59325409 193.45179749]
[52.12011719 200.04533386]
[37.12307739 199.74740601]
[23.92244530 192.62396240]
[15.44081688 180.25213623]
[13.55600643 165.37103271]
[18.68530655 151.27528381]
[29.69310379 141.08564758]
[44.14228821 137.05812073]
[58.83384705 140.08436584]
[70.51509094 149.49440002]
[76.59950256 163.20307922]
[79.91613770 148.57434082]
[83.23278046 133.94560242]
[86.54941559 119.31686401]
[89.86605835 104.68813324]
[89.71404266 89.68890381]
[86.10160828 75.13038635]
[82.48917389 60.57187653]
[78.87673187 46.01336288]
[75.26429749 31.45484924]
[71.50450897 16.93369293]
[67.59775543 2.45138288]
[57.21305466 0.62992382]
[48.12054825 -4.59968996]
[41.39389801 -12.57736588]
[37.81279755 -22.32115364]
[37.77272415 -32.64802933]
[41.24158859 -42.31752777]
[30.36969757 -52.65203094]
[15.66253376 -48.22541428]
[0.71613532 -51.76105499]
[-10.44899273 -62.30787659]
[-14.82948780 -77.02883911]
[-11.24701691 -91.96408844]
[-0.66524845 -103.09609985]
[14.06937599 -107.43042755]
[28.99331665 -103.80116272]
[40.09210587 -93.18455505]
[44.38022995 -78.43641663]
[40.70420074 -63.52392197]
[51.57609177 -53.18941879]
[56.86922836 -55.77563477]
[62.57002258 -57.26112366]
[64.08754730 -72.18416595]
[65.60507202 -87.10720062]
[51.44853592 -92.30751801]
[39.03047943 -100.86571503]
[29.13152313 -112.24382782]
[22.37391663 -125.72661591]
[19.18244934 -140.46653748]
[19.75774193 -155.53703308]
[24.06363106 -169.99075317]
[31.82944298 -182.91914368]
[42.56701279 -193.50947571]
[55.60136795 -201.09606934]
[70.11315918 -205.20201111]
[85.19016266 -205.56919861]
[99.88462067 -202.17456055]
[113.27283478 -195.23146057]
[124.51320648 -185.17637634]
[132.89915466 -172.64135742]
[137.90353394 -158.41436768]
[139.21177673 -143.38973999]
[136.74162292 -128.51193237]
[130.64836121 -114.71617889]
[121.31501007 -102.86968231]
[109.32829285 -93.71712494]
[95.44168091 -87.83384705]
[80.52811432 -85.58967590]
[79.01058960 -70.66664124]
[77.49306488 -55.74359894]
[93.96842957 -41.19849777]
[95.96693420 -19.08064461]
[82.08006287 -1.45536947]
[85.98681641 13.02694035]
[90.79361725 18.69917679]
[89.82280731 27.84241104]
[93.43524170 42.40092468]
[97.04768372 56.95943832]
[100.66011810 71.51795197]
[104.27256012 86.07646179]
[116.22663116 95.13737488]
[131.21969604 94.68140411]
[146.61401367 84.62680054]
[161.74777222 93.46179962]
[176.72853088 92.70206451]
[191.70927429 91.94232941]
[199.29251099 78.50737000]
[212.94607544 71.32518768]
[228.31315613 72.68759155]
[240.49018860 82.15983582]
[245.59152222 96.71936798]
[241.98933411 111.72029114]
[230.83306885 122.37586975]
[215.68264771 125.28594208]
[201.37252808 119.52191925]
[192.46900940 106.92307281]
[177.48826599 107.68281555]
[162.50752258 108.44255066]
[154.13536072 117.22464752]
[141.62126160 117.94731903]
[131.67565918 109.67447662]
[116.68260193 110.13043976]
[109.97184753 110.31771851]
[104.49478912 108.00476837]
[101.17815399 122.63350677]
[97.86151123 137.26223755]
[94.54487610 151.89097595]
[91.22823334 166.51971436]
[89.55955505 181.42660522]
[89.55955505 196.42660522]
[89.55955505 211.42660522]
[89.55955505 226.42660522]
[89.55955505 241.42660522]
[89.55955505 256.42660522]
[89.55955505 271.42660522]
[89.55955505 286.42660522]
[89.55955505 301.42660522]
[89.55955505 316.42660522]
[104.22481537 319.89459229]
[117.69473267 326.65164185]
[129.24288940 336.33343506]
[138.24650574 348.41778564]
[144.22003174 362.25302124]
[146.84132385 377.09301758]
[145.96902466 392.13748169]
[141.65014648 406.57507324]
[134.11764526 419.62719727]
[123.77770233 430.58996582]
[111.18795776 438.87219238]
[97.02735901 444.02719116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[34 132]
[35 131]
[36 130]
[37 129]
[38 128]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 98]
[45 97]
[51 64]
[52 63]
[66 94]
[67 93]
[68 92]
[105 126]
[106 125]
[108 122]
[109 121]
[110 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
