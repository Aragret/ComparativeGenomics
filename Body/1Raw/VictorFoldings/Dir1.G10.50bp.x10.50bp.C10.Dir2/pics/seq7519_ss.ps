%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUAUCUGGGGGGGGGGGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUxxxxxxxxxxUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCCCCCCCCCCCUUCCUUCUCU\
) } def
/len { sequence length } bind def

/coor [
[78.87220001 396.39877319]
[65.02626038 390.38275146]
[53.31760025 380.85333252]
[44.61507416 368.51766968]
[39.56447220 354.29113770]
[38.54058075 339.22946167]
[41.61938095 324.45028687]
[48.57240295 311.05038452]
[58.88368607 300.02404785]
[71.78807068 292.18954468]
[86.32795715 288.12820435]
[86.32795715 273.12820435]
[86.32795715 258.12820435]
[86.32795715 243.12821960]
[86.32795715 228.12821960]
[86.32795715 213.12821960]
[86.32795715 198.12821960]
[86.32795715 183.12821960]
[86.32795715 168.12821960]
[86.32795715 153.12821960]
[86.32795715 138.12821960]
[73.38990021 130.53831482]
[60.29674530 137.85742188]
[52.37034607 152.21374512]
[35.97125626 152.25688171]
[27.96945000 137.94244385]
[36.59650040 123.99590302]
[52.97763824 124.76425934]
[66.07079315 117.44515991]
[63.15259933 102.93470001]
[65.99417877 88.88308716]
[73.80011749 77.41670990]
[85.05265045 70.12874603]
[97.79420471 67.86054230]
[100.27932739 53.06783295]
[102.76444244 38.27512360]
[97.42041016 23.38379097]
[107.15937042 12.11427689]
[109.64448547 -2.67843008]
[112.12960815 -17.47113800]
[97.56983948 -21.11081886]
[83.34052277 -25.88163567]
[69.52938843 -31.75417137]
[56.22158813 -38.69221878]
[43.49916840 -46.65300369]
[31.44056511 -55.58744431]
[20.12013054 -65.44045258]
[9.60765553 -76.15129089]
[-0.03204457 -87.65390778]
[-8.73953724 -99.87739563]
[-16.46113777 -112.74639130]
[-23.14923668 -126.18154907]
[-28.76260376 -140.10003662]
[-33.26662827 -154.41603088]
[-36.63353729 -169.04129028]
[-38.84257507 -183.88562012]
[-39.88012695 -198.85751343]
[-39.73978806 -213.86465454]
[-38.42242813 -228.81452942]
[-35.93616867 -243.61494446]
[-32.29633713 -258.17468262]
[-27.52537727 -272.40396118]
[-21.65270042 -286.21502686]
[-14.71451664 -299.52276611]
[-6.75360155 -312.24508667]
[2.18096185 -324.30358887]
[12.03408813 -335.62393188]
[22.74502945 -346.13629150]
[34.24774933 -355.77587891]
[46.47132492 -364.48324585]
[59.34039688 -372.20471191]
[72.77561951 -378.89266968]
[86.69416046 -384.50592041]
[101.01020813 -389.00979614]
[115.63549805 -392.37655640]
[130.47985840 -394.58544922]
[145.45175171 -395.62283325]
[160.45889282 -395.48233032]
[175.40875244 -394.16482544]
[190.20915222 -391.67840576]
[204.76884460 -388.03842163]
[218.99806213 -383.26733398]
[232.80908203 -377.39450073]
[246.11674500 -370.45620728]
[258.83898926 -362.49514771]
[270.89743042 -353.56045532]
[282.21765137 -343.70721436]
[292.72991943 -332.99618530]
[302.36938477 -321.49334717]
[311.07662964 -309.26968384]
[318.79794312 -296.40054321]
[325.48577881 -282.96524048]
[331.09887695 -269.04663086]
[335.60260010 -254.73056030]
[338.96920776 -240.10523987]
[341.17794800 -225.26084900]
[342.21517944 -210.28894043]
[342.07455444 -195.28179932]
[340.75686646 -180.33195496]
[338.27032471 -165.53157043]
[334.63018799 -150.97192383]
[329.85894775 -136.74275208]
[323.98596191 -122.93180084]
[317.04751587 -109.62421417]
[309.08633423 -96.90203094]
[300.15155029 -84.84370422]
[290.29818726 -73.52357483]
[279.58703613 -63.01142502]
[268.08410645 -53.37207794]
[255.86035156 -44.66495895]
[242.99111938 -36.94375229]
[229.55575562 -30.25606537]
[215.63710022 -24.64312553]
[201.32096863 -20.13954163]
[186.69561768 -16.77307892]
[171.85121155 -14.56449413]
[156.87928772 -13.52740288]
[141.87214661 -13.66820049]
[126.92230988 -14.98601913]
[124.43719482 -0.19331150]
[121.95207214 14.59939575]
[127.47386169 28.43265724]
[117.55715179 40.76024246]
[115.07203674 55.55295181]
[112.58691406 70.34565735]
[127.02313232 80.36672974]
[134.45802307 96.98622894]
[132.15524292 115.68508148]
[120.12990570 131.00210571]
[101.32795715 138.12821960]
[101.32795715 153.12821960]
[101.32795715 168.12821960]
[101.32795715 183.12821960]
[101.32795715 198.12821960]
[101.32795715 213.12821960]
[101.32795715 228.12821960]
[101.32795715 243.12821960]
[101.32795715 258.12820435]
[101.32795715 273.12820435]
[101.32795715 288.12820435]
[115.86784363 292.18954468]
[128.77221680 300.02404785]
[139.08351135 311.05038452]
[146.03652954 324.45028687]
[149.11532593 339.22946167]
[148.09143066 354.29113770]
[143.04083252 368.51766968]
[134.33830261 380.85333252]
[122.62964630 390.38275146]
[108.78370667 396.39877319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 29]
[23 28]
[34 125]
[35 124]
[36 123]
[38 121]
[39 120]
[40 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
