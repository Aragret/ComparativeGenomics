%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAUGCAAGGGGGGGGGGGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAxxxxxxxxxxCAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAACCCCCCCCCCACAGAUGCAA\
) } def
/len { sequence length } bind def

/coor [
[67.92771149 372.18078613]
[54.08177567 366.16476440]
[42.37311172 356.63534546]
[33.67058945 344.29968262]
[28.61998558 330.07315063]
[27.59609413 315.01147461]
[30.67489433 300.23229980]
[37.62791443 286.83236694]
[47.93920135 275.80603027]
[60.84358215 267.97152710]
[75.38346863 263.91021729]
[75.38346863 248.91021729]
[75.38346863 233.91021729]
[75.38346863 218.91021729]
[75.38346863 203.91021729]
[75.38346863 188.91021729]
[75.38346863 173.91021729]
[75.38346863 158.91021729]
[75.38346863 143.91021729]
[75.38346863 128.91021729]
[82.41888428 92.26980591]
[73.15393829 80.47315979]
[63.88898849 68.67652130]
[50.15449524 70.21366882]
[37.56049347 64.79109955]
[29.36931038 53.93038940]
[27.64466476 40.54618073]
[32.73262024 28.16439247]
[23.71508980 16.17755890]
[14.69756031 4.19072676]
[2.61757159 -4.70162296]
[-11.50723171 -9.75037956]
[-27.14315796 -1.97508526]
[-43.25874710 -7.76920319]
[-50.08959198 -23.10535240]
[-64.31637573 -27.85916710]
[-78.54315186 -32.61298370]
[-92.76992798 -37.36679840]
[-108.31084442 -34.40190506]
[-117.92993927 -45.77389908]
[-132.15672302 -50.52771378]
[-144.70704651 -41.40253067]
[-160.22409058 -41.43066788]
[-172.74124146 -50.60129929]
[-177.44540405 -65.38813782]
[-172.52770996 -80.10533905]
[-159.87913513 -89.09383392]
[-144.36329651 -88.89737701]
[-131.94636536 -79.59149170]
[-127.40290070 -64.75449371]
[-113.17612457 -60.00067902]
[-98.65280151 -63.30559921]
[-88.01611328 -51.59357452]
[-73.78933716 -46.83975983]
[-59.56255722 -42.08594513]
[-45.33577728 -37.33213043]
[-34.68919373 -44.65654373]
[-21.57255363 -44.48893738]
[-10.80098534 -36.66581345]
[-6.45847511 -23.87518311]
[7.66632795 -18.82642555]
[-1.66408420 -30.57135773]
[-8.40188408 -43.97292709]
[-12.26360226 -58.46730804]
[-13.08677006 -73.44470215]
[-10.83675671 -88.27499390]
[-5.60822201 -102.33424377]
[2.37886024 -115.03095245]
[12.78846169 -125.83096313]
[25.18263626 -134.27989197]
[39.03993988 -140.02229309]
[53.77737808 -142.81655884]
[68.77492523 -142.54513550]
[83.40160370 -139.21945190]
[97.04206085 -132.97941589]
[109.12240601 -124.08756256]
[119.13441467 -112.91797638]
[126.65686035 -99.94057465]
[131.37326050 -85.70135498]
[133.08520508 -70.79936218]
[131.72064209 -55.86156082]
[127.33699799 -41.51639557]
[120.11870575 -28.36739731]
[110.36943054 -16.96776009]
[98.49935913 -7.79708433]
[85.00786591 -1.24119449]
[70.46257019 2.42409372]
[55.47541046 3.04457593]
[40.67691803 0.59414738]
[26.68439293 -4.82680321]
[35.70192337 7.16002941]
[44.71945190 19.14686203]
[61.08549118 18.33562469]
[74.86106110 27.51165581]
[80.53128052 43.23839188]
[75.68563080 59.41157150]
[84.95057678 71.20821381]
[94.21553040 83.00485229]
[94.12206268 68.00514221]
[105.13330841 57.81924820]
[120.08033752 59.07873535]
[129.23182678 70.96361542]
[126.62963867 85.73618317]
[113.96839905 93.77861786]
[128.90270996 95.18092346]
[143.83702087 96.58322144]
[158.77133179 97.98552704]
[173.70562744 99.38783264]
[188.68534851 100.16767883]
[203.68453979 100.32371521]
[218.68373108 100.47975159]
[232.69689941 91.96135712]
[246.94871521 100.07418060]
[246.77812195 116.47243500]
[232.36061096 124.28701019]
[218.52767944 115.47893524]
[203.52850342 115.32289886]
[188.52931213 115.16686249]
[186.41374207 117.09862518]
[183.38107300 118.28051758]
[179.72358704 118.34957886]
[175.86273193 117.05931854]
[172.30332947 114.32213593]
[157.36901855 112.91983795]
[142.43470764 111.51753235]
[127.50040436 110.11522675]
[112.56610107 108.71292114]
[107.02043915 113.76224518]
[110.22049713 128.41693115]
[95.92912292 123.86090088]
[90.38346863 128.91021729]
[90.38346863 143.91021729]
[90.38346863 158.91021729]
[90.38346863 173.91021729]
[90.38346863 188.91021729]
[90.38346863 203.91021729]
[90.38346863 218.91021729]
[90.38346863 233.91021729]
[90.38346863 248.91021729]
[90.38346863 263.91021729]
[104.92335510 267.97152710]
[117.82773590 275.80603027]
[128.13902283 286.83236694]
[135.09204102 300.23229980]
[138.17083740 315.01147461]
[137.14694214 330.07315063]
[132.09634399 344.29968262]
[123.39382172 356.63534546]
[111.68515778 366.16476440]
[97.83922577 372.18078613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 98]
[22 97]
[23 96]
[28 92]
[29 91]
[30 90]
[31 61]
[32 60]
[35 56]
[36 55]
[37 54]
[38 53]
[40 51]
[41 50]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
