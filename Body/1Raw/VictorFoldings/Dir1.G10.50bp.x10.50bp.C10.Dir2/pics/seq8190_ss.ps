%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGCUUCAUGGGGGGGGGGUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAxxxxxxxxxxCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUCCCCCCCCCCUUCACUUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.31530762]
[71.19830322 351.29928589]
[59.48964310 341.76986694]
[50.78712082 329.43420410]
[45.73651886 315.20767212]
[44.71262741 300.14599609]
[47.79142761 285.36682129]
[54.74444962 271.96691895]
[65.05573273 260.94058228]
[77.96011353 253.10606384]
[92.50000000 249.04475403]
[92.50000000 234.04475403]
[92.50000000 219.04475403]
[92.50000000 204.04475403]
[92.50000000 189.04475403]
[92.50000000 174.04475403]
[92.50000000 159.04475403]
[92.50000000 144.04475403]
[92.50000000 129.04475403]
[92.50000000 114.04475403]
[86.36881256 109.72519684]
[74.10644531 101.08608246]
[67.97526550 96.76652527]
[53.85046005 101.81527710]
[39.72565842 106.86403656]
[25.60085487 111.91278839]
[19.06639099 126.30294037]
[4.24129915 131.77944946]
[-10.07895756 125.09320831]
[-15.39842415 110.21104431]
[-8.56115627 95.96228027]
[6.37641716 90.80045319]
[20.55209923 97.78798676]
[34.67690277 92.73923492]
[48.80170441 87.69047546]
[62.92650604 82.64171600]
[73.15353394 81.64350128]
[82.55174255 83.36344147]
[90.53479767 87.48071289]
[96.60226440 93.56052399]
[102.37854004 79.71730042]
[108.15480804 65.87408447]
[97.03568268 56.67709732]
[88.97560120 44.72742081]
[84.62336731 31.00305748]
[84.32476044 16.62418556]
[88.09508514 2.76174498]
[95.61865997 -9.45792961]
[106.27523041 -19.04461670]
[119.19110870 -25.22444916]
[133.31076050 -27.50238228]
[147.48312378 -25.70183754]
[153.54614258 -39.42189026]
[149.62229919 -51.75304031]
[155.00431824 -63.07791519]
[166.29635620 -67.52733612]
[172.64347839 -81.11828613]
[177.69223022 -95.24309540]
[181.39839172 -109.77803040]
[185.10455322 -124.31296539]
[188.81071472 -138.84790039]
[174.64932251 -133.90269470]
[161.84126282 -141.70994568]
[159.74816895 -156.56320190]
[169.89993286 -167.60591125]
[184.87644958 -166.76676941]
[193.73095703 -154.65975952]
[198.92636108 -168.73127747]
[204.12178040 -182.80279541]
[209.31719971 -196.87431335]
[196.47944641 -189.11595154]
[181.48582458 -188.67831421]
[168.21740723 -195.67466736]
[160.10865784 -208.29402161]
[159.25852966 -223.26991272]
[165.88705444 -236.72586060]
[178.27845764 -245.17884827]
[193.22528076 -246.44084167]
[206.85856628 -240.18516541]
[215.64938354 -228.03109741]
[217.32228088 -213.12477112]
[225.31219482 -225.81970215]
[233.30212402 -238.51463318]
[241.29203796 -251.20956421]
[249.28195190 -263.90447998]
[244.32589722 -278.73593140]
[250.11085510 -293.26412964]
[263.90536499 -300.62930298]
[279.19604492 -297.35385132]
[288.76315308 -284.98434448]
[288.08935547 -269.36126709]
[277.49279785 -257.86138916]
[261.97686768 -255.91458130]
[253.98696899 -243.21965027]
[245.99705505 -230.52471924]
[238.00712585 -217.82978821]
[230.01721191 -205.13485718]
[223.38871765 -191.67889404]
[218.19329834 -177.60737610]
[212.99787903 -163.53585815]
[207.80247498 -149.46434021]
[203.34565735 -135.14173889]
[199.63949585 -120.60680389]
[195.93333435 -106.07186890]
[192.22717285 -91.53693390]
[204.50601196 -100.15261078]
[219.48686218 -100.91025543]
[232.57229614 -93.57734680]
[239.74655151 -80.40426636]
[238.80795288 -65.43366241]
[230.04452515 -53.25982285]
[216.14566040 -47.61874008]
[201.37675476 -50.24159622]
[190.27018738 -60.32346725]
[186.23443604 -74.77115631]
[179.88729858 -61.18021011]
[182.37281799 -43.83598328]
[167.26618958 -33.35887909]
[161.20318604 -19.63882446]
[172.96272278 -9.33771801]
[180.98211670 4.10458279]
[184.46931458 19.38375282]
[183.07269287 35.01292801]
[176.91648865 49.46740341]
[166.58985901 61.33335876]
[153.09048462 69.44617462]
[137.72824097 73.00469208]
[121.99802399 71.65036011]
[116.22175598 85.49357605]
[110.44548035 99.33679199]
[107.50000000 114.04475403]
[107.50000000 129.04475403]
[107.50000000 144.04475403]
[107.50000000 159.04475403]
[107.50000000 174.04475403]
[107.50000000 189.04475403]
[107.50000000 204.04475403]
[107.50000000 219.04475403]
[107.50000000 234.04475403]
[107.50000000 249.04475403]
[122.03988647 253.10606384]
[134.94427490 260.94058228]
[145.25555420 271.96691895]
[152.20857239 285.36682129]
[155.28736877 300.14599609]
[154.26348877 315.20767212]
[149.21287537 329.43420410]
[140.51036072 341.76986694]
[128.80169678 351.29928589]
[114.95575714 357.31530762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 36]
[24 35]
[25 34]
[26 33]
[40 130]
[41 129]
[42 128]
[52 119]
[53 118]
[56 116]
[57 115]
[58 105]
[59 104]
[60 103]
[61 102]
[67 101]
[68 100]
[69 99]
[70 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
