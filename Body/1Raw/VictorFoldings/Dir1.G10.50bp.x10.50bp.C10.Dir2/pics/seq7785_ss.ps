%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUCCUAGAAGGGGGGGGGGCCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUxxxxxxxxxxCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACCCCCCCCCCCUAUGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[112.57567596 486.04617310]
[99.08679199 479.31463623]
[87.60129547 469.55007935]
[78.78692627 457.32019043]
[73.15614319 443.33599854]
[71.03631592 428.41052246]
[72.55068207 413.41149902]
[77.61120605 399.21099854]
[85.92367554 386.63458252]
[97.00480652 376.41342163]
[110.21035767 369.14178467]
[124.77258301 365.24240112]
[124.46460724 350.24557495]
[124.15662384 335.24874878]
[123.84864807 320.25189209]
[123.54067230 305.25506592]
[123.23269653 290.25820923]
[122.92472076 275.26138306]
[122.61673737 260.26455688]
[122.30876160 245.26771545]
[122.00078583 230.27087402]
[113.47404480 221.63624573]
[113.13047028 209.10415649]
[121.70277405 199.41294861]
[121.70277405 184.41294861]
[118.94653320 169.66835022]
[113.52790833 155.68127441]
[108.10928345 141.69418335]
[102.69065857 127.70710754]
[91.02722168 127.57527924]
[79.97815704 122.55463409]
[71.57579041 113.15386963]
[67.52664948 100.71546936]
[68.87592316 87.22940826]
[54.44853973 83.12445831]
[40.02115631 79.01951599]
[35.71823502 80.27830505]
[31.65800095 80.08324432]
[28.27757835 78.69779205]
[25.87950325 76.50269318]
[24.60466766 73.94030762]
[10.56269073 68.66556549]
[-3.47928524 63.39082336]
[-17.01162338 71.22726440]
[-32.40616989 68.48100281]
[-42.39408875 56.44873810]
[-42.25939560 40.81173325]
[-32.06568146 28.95331001]
[-16.62611008 26.47264862]
[-3.23077559 34.54104614]
[1.79545629 49.34884644]
[15.83743286 54.62358856]
[29.87940979 59.89833069]
[44.12610245 64.59213257]
[58.55348587 68.69707489]
[72.98087311 72.80202484]
[85.48490906 64.51654816]
[79.50212860 49.87014771]
[88.74481964 38.19016647]
[90.58814240 23.30385971]
[92.43146515 8.41755199]
[94.27478790 -6.46875620]
[96.11811829 -21.35506439]
[90.13533783 -36.00146103]
[99.37802887 -47.68144226]
[101.22135162 -62.56775284]
[103.06467438 -77.45405579]
[88.97875977 -82.82531738]
[76.58798218 -91.41205597]
[66.61273193 -102.71504974]
[59.63294220 -116.07716370]
[56.05442047 -130.72154236]
[56.08521652 -145.79676819]
[59.72353745 -160.42639160]
[66.75785828 -173.75987244]
[76.77920532 -185.02201843]
[89.20496368 -193.55805969]
[103.31270599 -198.87173462]
[118.28222656 -200.65408325]
[133.24322510 -198.80151367]
[147.32588196 -193.42172241]
[159.71145630 -184.82746887]
[169.67985535 -173.51843262]
[176.65153503 -160.15208435]
[180.22117615 -145.50555420]
[180.18124390 -130.43034363]
[176.53405762 -115.80292511]
[169.49165344 -102.47370911]
[159.46347046 -91.21763611]
[147.03254700 -82.68912506]
[132.92158508 -77.38401794]
[117.95098114 -75.61073303]
[116.10765839 -60.72442627]
[114.26433563 -45.83811951]
[120.37895966 -32.25648880]
[111.00442505 -19.51173973]
[109.16110229 -4.62543154]
[107.31777191 10.26087570]
[105.47444916 25.14718437]
[103.63112640 40.03349304]
[109.74575043 53.61511993]
[100.37121582 66.35987091]
[119.04508209 74.04725647]
[129.22084045 90.45647430]
[127.92485046 108.83325958]
[116.67774200 122.28848267]
[122.09636688 136.27555847]
[127.51499176 150.26264954]
[132.93360901 164.24972534]
[135.63430786 149.49485779]
[142.68647766 136.25601196]
[153.42457581 125.78256226]
[166.83525085 119.06290436]
[181.65290833 116.73117065]
[196.47918701 119.00741577]
[209.91491699 125.67683411]
[220.69215393 136.11001587]
[227.79382324 149.32237244]
[230.54974365 164.06703186]
[228.69981384 178.95251465]
[222.41864014 192.57408142]
[212.29896545 203.64620972]
[199.29580688 211.12403870]
[184.63629150 214.30186462]
[169.70385742 212.87979126]
[155.90768433 206.99201965]
[144.54975891 197.19418335]
[136.70277405 184.41294861]
[136.70277405 199.41294861]
[146.28514099 215.10400391]
[136.99761963 229.96289062]
[137.30560303 244.95973206]
[137.61357117 259.95657349]
[137.92155457 274.95339966]
[138.22953796 289.95025635]
[138.53750610 304.94708252]
[138.84548950 319.94390869]
[139.15347290 334.94076538]
[139.46144104 349.93759155]
[139.76942444 364.93444824]
[154.47946167 368.23266602]
[167.97241211 374.95602417]
[179.46383667 384.71362305]
[188.28561401 396.93817139]
[193.92488098 410.91894531]
[196.05375671 425.84313965]
[194.54847717 440.84304810]
[189.49656677 455.04663086]
[181.19172668 467.62808228]
[170.11679077 477.85595703]
[156.91564941 485.13558960]
[142.35578918 489.04379272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 129]
[25 128]
[26 109]
[27 108]
[28 107]
[29 106]
[34 56]
[35 55]
[36 54]
[41 53]
[42 52]
[43 51]
[57 102]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[65 94]
[66 93]
[67 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
