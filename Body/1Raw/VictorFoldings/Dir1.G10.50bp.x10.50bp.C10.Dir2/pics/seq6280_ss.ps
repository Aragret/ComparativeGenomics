%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUGGAACAGGGGGGGGGGCUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGxxxxxxxxxxAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUCCCCCCCCCCACAUUGGGACA\
) } def
/len { sequence length } bind def

/coor [
[100.93329620 522.26165771]
[86.91134644 516.70861816]
[74.71139526 507.84228516]
[65.10031891 496.21997070]
[58.68229675 482.57229614]
[55.86075974 467.75711060]
[56.81307220 452.70571899]
[61.47937775 438.36428833]
[69.56634521 425.63433838]
[80.56562042 415.31607056]
[93.78578186 408.05810547]
[108.39579010 404.31665039]
[108.39579010 389.31665039]
[108.39579010 374.31665039]
[108.39579010 359.31665039]
[108.39579010 344.31665039]
[108.39579010 329.31665039]
[108.39579010 314.31665039]
[108.39579010 299.31665039]
[108.39579010 284.31665039]
[108.39579010 269.31665039]
[93.35404205 265.71914673]
[79.59575653 258.63565063]
[67.91609192 248.47096252]
[58.99119568 235.80795288]
[53.33903503 221.37437439]
[51.28936005 206.00086975]
[52.96446609 190.57330322]
[58.27190018 175.98161316]
[66.90955353 163.06854248]
[78.38286591 152.58090210]
[92.03312683 145.12644958]
[107.07528687 141.13862610]
[106.76731110 126.14179230]
[85.29084778 120.28137207]
[76.94107056 101.44393921]
[85.54091644 84.55840302]
[79.83625793 70.68552399]
[74.13159180 56.81264496]
[61.72732925 46.99201584]
[64.04291534 32.27850723]
[51.63865280 22.45787811]
[53.95424271 7.74436998]
[45.16239929 -4.40896320]
[33.77132416 -14.16823769]
[22.38025093 -23.92751312]
[10.98917770 -33.68678665]
[-0.40189612 -43.44606018]
[-11.79296970 -53.20533752]
[-24.72980881 -53.00075531]
[-34.02320480 -61.41527176]
[-35.03273392 -73.50836945]
[-46.22103119 -83.49947357]
[-62.25519943 -84.03327942]
[-71.71902466 -96.98764038]
[-67.35267639 -112.42507935]
[-52.50563431 -118.50331116]
[-38.56728363 -110.55963898]
[-36.22993469 -94.68776703]
[-25.04163551 -84.69667053]
[-7.71509600 -82.08218384]
[-2.03369546 -64.59641266]
[9.35737801 -54.83713531]
[20.74845123 -45.07786179]
[32.13952637 -35.31858444]
[43.53060150 -25.55931091]
[54.92167282 -15.80003738]
[50.18389511 -30.03216553]
[49.06462860 -44.99034882]
[51.63162613 -59.76906586]
[57.72949600 -73.47366333]
[66.98908234 -85.27451324]
[78.84985352 -94.45722198]
[92.59378815 -100.46590424]
[107.38887787 -102.93681335]
[122.33946991 -101.72036743]
[136.54051208 -96.89020538]
[149.13230896 -88.73873138]
[159.35261536 -77.75940704]
[166.58270264 -64.61688995]
[170.38488770 -50.10678101]
[170.52902222 -35.10747147]
[167.00634766 -20.52697563]
[160.03015137 -7.24794960]
[150.02272034 3.92574048]
[137.58988953 12.31767464]
[123.48428345 17.41983223]
[108.55982208 18.92334557]
[93.71998596 16.73719788]
[79.86312866 10.99373055]
[67.82712555 2.03970647]
[79.82334900 10.86805534]
[77.91579437 26.57384491]
[89.91202545 35.40219116]
[88.00447083 51.10798264]
[93.70913696 64.98086548]
[99.41380310 78.85374451]
[111.01905060 79.69286346]
[121.37515259 86.93110657]
[126.99581146 99.35493469]
[141.50444031 95.54707336]
[156.01306152 91.73921204]
[170.52168274 87.93135834]
[185.03030396 84.12349701]
[190.53973389 69.61743164]
[203.54180908 61.14833450]
[219.03697205 61.97274017]
[231.06701660 71.77365112]
[235.00613403 86.78240967]
[229.33967590 101.22785187]
[216.24649048 109.55540466]
[200.76118469 108.56295776]
[188.83816528 98.63211823]
[174.32954407 102.43997955]
[159.82092285 106.24784088]
[145.31228638 110.05569458]
[130.80366516 113.86355591]
[121.76414490 125.83381653]
[122.07212830 140.83065796]
[136.32444763 143.87397766]
[149.52961731 150.02171326]
[161.02134705 158.95997620]
[170.22059631 170.23411560]
[176.66484070 183.27197266]
[180.03123474 197.41276550]
[180.15284729 211.94070435]
[177.02687073 226.12117004]
[170.81466675 239.23783875]
[161.83340454 250.62892151]
[150.53984070 259.72052002]
[137.50714111 266.05554199]
[123.39579010 269.31665039]
[123.39579010 284.31665039]
[123.39579010 299.31665039]
[123.39579010 314.31665039]
[123.39579010 329.31665039]
[123.39579010 344.31665039]
[123.39579010 359.31665039]
[123.39579010 374.31665039]
[123.39579010 389.31665039]
[123.39579010 404.31665039]
[138.00579834 408.05810547]
[151.22596741 415.31607056]
[162.22523499 425.63433838]
[170.31221008 438.36428833]
[174.97851562 452.70571899]
[175.93083191 467.75711060]
[173.10928345 482.57229614]
[166.69126892 496.21997070]
[157.08018494 507.84228516]
[144.88023376 516.70861816]
[130.85829163 522.26165771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[33 119]
[34 118]
[37 97]
[38 96]
[39 95]
[41 93]
[43 91]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 60]
[53 59]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
