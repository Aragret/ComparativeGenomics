%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACUCAUAGGGGGGGGGGCACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGxxxxxxxxxxGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCCCCCCCCCCCAACUAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.18793488 152.87287903]
[71.47409821 146.91706848]
[59.87530518 137.48262024]
[51.25152969 125.26905060]
[46.24217987 111.18192291]
[45.21867371 96.26571655]
[48.25689697 81.62638092]
[55.13158417 68.34934998]
[65.33300781 57.41903687]
[78.10480499 49.64586639]
[92.50000000 45.60617065]
[92.50000000 30.60617256]
[92.50000000 15.60617256]
[92.50000000 0.60617250]
[92.50000000 -14.39382744]
[92.50000000 -29.39382744]
[92.50000000 -44.39382935]
[92.50000000 -59.39382935]
[92.50000000 -74.39382935]
[92.50000000 -89.39382935]
[92.50000000 -104.39382935]
[77.52034760 -105.25028229]
[62.61402512 -106.96051025]
[47.82964325 -109.51892853]
[33.21543503 -112.91720581]
[18.81906128 -117.14425659]
[4.68748665 -122.18627930]
[-9.13319683 -128.02684021]
[-22.59790993 -134.64688110]
[-35.66273117 -142.02481079]
[-48.28504562 -150.13656616]
[-60.42368698 -158.95568848]
[-72.03905487 -168.45339966]
[-83.09326172 -178.59873962]
[-93.55025482 -189.35861206]
[-103.37592316 -200.69790649]
[-112.53822327 -212.57965088]
[-121.00725555 -224.96507263]
[-128.75541687 -237.81379700]
[-135.75741577 -251.08389282]
[-141.99041748 -264.73208618]
[-147.43408203 -278.71383667]
[-152.07067871 -292.98358154]
[-155.88507080 -307.49475098]
[-158.86480713 -322.20001221]
[-161.00018311 -337.05139160]
[-162.28421021 -352.00045776]
[-162.71273804 -366.99844360]
[-162.28433228 -381.99645996]
[-161.00041199 -396.94552612]
[-158.86515808 -411.79693604]
[-155.88552856 -426.50219727]
[-152.07125854 -441.01339722]
[-147.43478394 -455.28317261]
[-141.99121094 -469.26498413]
[-135.75831604 -482.91323853]
[-128.75642395 -496.18338013]
[-121.00836945 -509.03216553]
[-112.53942871 -521.41766357]
[-103.37722778 -533.29943848]
[-93.55164337 -544.63885498]
[-83.09473419 -555.39880371]
[-72.04060364 -565.54418945]
[-60.42531586 -575.04205322]
[-48.28674698 -583.86126709]
[-35.66449356 -591.97308350]
[-22.59972954 -599.35113525]
[-9.13506889 -605.97125244]
[4.68556929 -611.81195068]
[18.81710434 -616.85406494]
[33.21344376 -621.08123779]
[47.82762909 -624.47961426]
[62.61198807 -627.03814697]
[77.51830292 -628.74853516]
[92.49794006 -629.60510254]
[107.50205994 -629.60510254]
[122.48169708 -628.74853516]
[137.38801575 -627.03814697]
[152.17237854 -624.47961426]
[166.78656006 -621.08123779]
[181.18289185 -616.85406494]
[195.31443787 -611.81195068]
[209.13507080 -605.97125244]
[222.59973145 -599.35113525]
[235.66448975 -591.97308350]
[248.28674316 -583.86126709]
[260.42532349 -575.04205322]
[272.04061890 -565.54418945]
[283.09472656 -555.39880371]
[293.55163574 -544.63885498]
[303.37722778 -533.29943848]
[312.53942871 -521.41766357]
[321.00836182 -509.03216553]
[328.75640869 -496.18338013]
[335.75833130 -482.91323853]
[341.99121094 -469.26498413]
[347.43478394 -455.28317261]
[352.07125854 -441.01339722]
[355.88552856 -426.50219727]
[358.86514282 -411.79693604]
[361.00039673 -396.94552612]
[362.28433228 -381.99645996]
[362.71273804 -366.99844360]
[362.28421021 -352.00045776]
[361.00018311 -337.05139160]
[358.86480713 -322.20001221]
[355.88507080 -307.49475098]
[352.07067871 -292.98358154]
[347.43408203 -278.71383667]
[341.99041748 -264.73208618]
[335.75741577 -251.08389282]
[328.75540161 -237.81379700]
[321.00726318 -224.96507263]
[312.53820801 -212.57965088]
[303.37591553 -200.69790649]
[293.55026245 -189.35861206]
[283.09326172 -178.59873962]
[272.03906250 -168.45339966]
[260.42367554 -158.95568848]
[248.28504944 -150.13656616]
[235.66273499 -142.02481079]
[222.59791565 -134.64688110]
[209.13319397 -128.02684021]
[195.31251526 -122.18627930]
[181.18093872 -117.14425659]
[166.78456116 -112.91720581]
[152.17034912 -109.51892853]
[137.38597107 -106.96051025]
[122.47965240 -105.25028229]
[107.50000000 -104.39382935]
[107.50000000 -89.39382935]
[107.50000000 -74.39382935]
[107.50000000 -59.39382935]
[107.50000000 -44.39382935]
[107.50000000 -29.39382744]
[107.50000000 -14.39382744]
[107.50000000 0.60617250]
[107.50000000 15.60617256]
[107.50000000 30.60617256]
[107.50000000 45.60617065]
[121.89519501 49.64586639]
[134.66699219 57.41903687]
[144.86842346 68.34934998]
[151.74310303 81.62638092]
[154.78132629 96.26571655]
[153.75781250 111.18192291]
[148.74847412 125.26905060]
[140.12469482 137.48262024]
[128.52589417 146.91706848]
[114.81206512 152.87287903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
