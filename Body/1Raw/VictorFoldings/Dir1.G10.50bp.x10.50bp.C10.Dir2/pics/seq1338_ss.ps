%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCUAAGACCCGGGGGGGGGGAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAxxxxxxxxxxUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCCCCCCCCCCCAAAGCUAAGACCC\
) } def
/len { sequence length } bind def

/coor [
[101.67481232 406.29235840]
[88.23215485 399.51889038]
[76.42836761 390.17779541]
[66.74682617 378.65164185]
[59.58396149 365.41235352]
[55.23310089 351.00213623]
[53.87240601 336.01101685]
[55.55759430 321.05291748]
[60.21966553 306.74032593]
[67.66770172 293.65936279]
[77.59671783 282.34567261]
[89.60012817 273.26254272]
[103.18638611 266.78195190]
[117.79916382 263.16921997]
[117.19902039 248.18122864]
[116.59886932 233.19323730]
[115.99872589 218.20524597]
[115.39858246 203.21725464]
[114.79843903 188.22927856]
[114.19829559 173.24128723]
[113.59815216 158.25329590]
[112.99800873 143.26530457]
[112.39786530 128.27731323]
[106.66326141 123.44364166]
[96.99575043 134.91270447]
[85.52684784 125.24500275]
[95.19406128 113.77630615]
[89.45946503 108.94263458]
[74.58615875 110.88813019]
[59.71286011 112.83362579]
[44.83956146 114.77911377]
[38.34576416 128.77319336]
[25.30484009 137.01564026]
[9.87810612 136.87631226]
[-3.01182580 128.39968872]
[-9.25182533 114.29061890]
[-6.85073042 99.05125427]
[3.42527747 87.54441833]
[18.29716110 83.44190979]
[33.01935959 88.05281830]
[42.89406967 99.90581512]
[57.76736832 97.96032715]
[72.64067078 96.01483154]
[87.51396942 94.06933594]
[99.36077118 84.86862183]
[104.92726135 70.93972015]
[102.86370087 55.25366974]
[114.77158356 46.30651855]
[112.70801544 30.62046623]
[124.61590576 21.67331696]
[130.18240356 7.74442053]
[135.74888611 -6.18447638]
[136.03524780 -15.37175179]
[141.56863403 -20.33456993]
[147.41270447 -34.14929962]
[134.18637085 -41.24779892]
[121.67143250 -49.53639984]
[109.97466278 -58.94438934]
[99.19586182 -69.39150238]
[89.42698669 -80.78859711]
[80.75138855 -93.03843689]
[73.24308777 -106.03651428]
[66.96614075 -119.67192841]
[61.97409821 -133.82835388]
[58.30955505 -148.38499451]
[56.00377655 -163.21765137]
[55.07643509 -178.19979858]
[55.53544235 -193.20359802]
[57.37688065 -208.10104370]
[60.58504105 -222.76501465]
[65.13255310 -237.07043457]
[70.98061371 -250.89521790]
[78.07933044 -264.12142944]
[86.36814117 -276.63623047]
[95.77632904 -288.33285522]
[106.22361755 -299.11148071]
[117.62087250 -308.88015747]
[129.87086487 -317.55554199]
[142.86906433 -325.06362915]
[156.50457764 -331.34036255]
[170.66108704 -336.33218384]
[185.21778870 -339.99645996]
[200.05049133 -342.30200195]
[215.03265381 -343.22909546]
[230.03643799 -342.76983643]
[244.93385315 -340.92816162]
[259.59777832 -337.71975708]
[273.90310669 -333.17199707]
[287.72781372 -327.32369995]
[300.95391846 -320.22476196]
[313.46856689 -311.93572998]
[325.16503906 -302.52737427]
[335.94348145 -292.07989502]
[345.71197510 -280.68246460]
[354.38717651 -268.43234253]
[361.89501953 -255.43402100]
[368.17153931 -241.79838562]
[373.16308594 -227.64181519]
[376.82714844 -213.08505249]
[379.13244629 -198.25230408]
[380.05929565 -183.27012634]
[379.59976196 -168.26634216]
[377.75784302 -153.36895752]
[374.54919434 -138.70509338]
[370.00119019 -124.39982605]
[364.15267944 -110.57523346]
[357.05352783 -97.34925079]
[348.76428223 -84.83472443]
[339.35571289 -73.13842773]
[328.90808105 -62.36014938]
[317.51049805 -52.59184647]
[305.26022339 -43.91686249]
[292.26174927 -36.40921021]
[278.62603760 -30.13294029]
[264.46936035 -25.14160728]
[249.91253662 -21.47779274]
[235.07975769 -19.17275429]
[220.09756470 -18.24616241]
[205.09378052 -18.70591927]
[190.19644165 -20.54810333]
[175.53262329 -23.75699615]
[161.22743225 -28.30522156]
[155.38336182 -14.49049187]
[149.67778015 -0.61798477]
[144.11129761 13.31091213]
[138.54479980 27.23980904]
[141.00651550 41.92957306]
[128.70048523 51.87301254]
[131.16220093 66.56277466]
[118.85616302 76.50621033]
[113.28967285 90.43511200]
[127.38585663 127.67716980]
[127.98600006 142.66516113]
[128.58613586 157.65315247]
[129.18627930 172.64114380]
[129.78642273 187.62913513]
[130.38658142 202.61711121]
[130.98672485 217.60510254]
[131.58686829 232.59309387]
[132.18701172 247.58108521]
[132.78715515 262.56906128]
[147.64199829 265.00186157]
[161.70292664 270.37542725]
[174.39413452 278.46975708]
[185.19595337 288.95333862]
[193.66603088 301.39691162]
[199.45755005 315.29092407]
[202.33331299 330.06640625]
[202.17559814 345.11831665]
[198.99084473 359.83029175]
[192.90945435 373.59988403]
[184.18048096 385.86322021]
[173.16136169 396.11816406]
[160.30331421 403.94476318]
[146.13287354 409.02252197]
[131.23030090 411.14349365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[28 44]
[29 43]
[30 42]
[31 41]
[45 131]
[46 130]
[48 128]
[50 126]
[51 125]
[52 124]
[54 123]
[55 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
