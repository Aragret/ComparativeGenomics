%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCUAGCAUGGGGGGGGGGCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCxxxxxxxxxxAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCCCCCCCCCCCACCUCUAGCCU\
) } def
/len { sequence length } bind def

/coor [
[58.74202347 470.72918701]
[45.03987122 464.46829224]
[33.07475662 455.31494141]
[23.44684410 443.72827148]
[16.63906479 430.28945923]
[12.99289703 415.67257690]
[12.69122982 400.61080933]
[15.74919319 385.85964966]
[22.01340294 372.15902710]
[31.16964912 360.19613647]
[42.75865555 350.57101440]
[56.19912720 343.76651001]
[70.81688690 340.12387085]
[70.51288605 325.12695312]
[70.20887756 310.13003540]
[69.90487671 295.13311768]
[69.60086823 280.13619995]
[69.29686737 265.13928223]
[68.99286652 250.14236450]
[68.68885803 235.14544678]
[68.38485718 220.14851379]
[68.08084869 205.15159607]
[67.77684784 190.15467834]
[57.76428986 201.32377625]
[43.13257599 204.62725830]
[29.29249191 198.84347534]
[21.36208153 186.11129761]
[22.27400208 171.13903809]
[31.69102669 159.46343994]
[46.13075256 155.40211487]
[60.25338364 160.45693970]
[68.83599854 172.75735474]
[70.95703888 157.90808105]
[73.07807922 143.05879211]
[75.19912720 128.20950317]
[66.13821411 116.25543976]
[51.26819992 114.28498840]
[36.39818573 112.31453705]
[21.52817154 110.34408569]
[7.96901703 118.91898346]
[-7.14129925 113.52844238]
[-12.21143627 98.30762482]
[-3.35201907 84.93264008]
[12.64076519 83.66362762]
[23.49862289 95.47406769]
[38.36863708 97.44451904]
[53.23865128 99.41497040]
[68.10866547 101.38542175]
[79.13526154 79.73406982]
[100.37538147 73.75038147]
[104.86582947 59.43828964]
[104.45242310 50.25296021]
[109.59503174 44.88330460]
[114.37461853 30.66516113]
[102.24684906 39.49223709]
[87.51166534 42.29837418]
[72.98842621 38.54666138]
[61.45591354 28.95493507]
[55.12070847 15.35842037]
[55.19495392 0.35860458]
[61.66444016 -13.17453003]
[73.29133606 -22.65162468]
[87.85100555 -26.25938606]
[102.55769348 -23.30751991]
[114.59748077 -14.36082458]
[121.66676331 -1.13111019]
[122.41325378 13.84837341]
[130.47631836 1.19977069]
[138.53936768 -11.44883156]
[146.60241699 -24.09743500]
[136.08276367 -34.27644730]
[127.76510620 -46.31580734]
[121.97052002 -59.74736404]
[118.92199707 -74.04927826]
[118.73589325 -88.66632080]
[121.41748047 -103.03141785]
[126.86080170 -116.58765411]
[134.85289001 -128.80987549]
[145.08206177 -139.22497559]
[157.15010071 -147.43031311]
[170.58773804 -153.10917664]
[184.87292480 -156.04306030]
[199.45111084 -156.12005615]
[213.75671387 -153.33914185]
[227.23516846 -147.81011963]
[235.55291748 -160.29270935]
[243.87066650 -172.77529907]
[237.60139465 -186.87138367]
[239.97085571 -202.11570740]
[250.22296143 -213.64384460]
[265.08630371 -217.77720642]
[279.81802368 -213.19685364]
[289.71731567 -201.36437988]
[291.62533569 -186.05545044]
[284.93322754 -172.15512085]
[271.77645874 -164.09892273]
[256.35324097 -164.45755005]
[248.03550720 -151.97496033]
[239.71775818 -139.49237061]
[250.53132629 -128.53814697]
[258.84661865 -115.57830048]
[264.30154419 -101.17277527]
[266.65771484 -85.94458771]
[265.81079102 -70.55284882]
[261.79510498 -55.66422272]
[254.78231812 -41.92407990]
[245.07403564 -29.92850113]
[233.08885193 -20.19842911]
[219.34432983 -13.15703773]
[204.43461609 -9.11133671]
[189.00477600 -8.23877811]
[173.72286987 -10.57947826]
[159.25102234 -16.03437996]
[151.18797302 -3.38577676]
[143.12490845 9.26282597]
[135.06185913 21.91142845]
[128.59275818 35.44474792]
[123.81317139 49.66289139]
[119.17791748 63.92873764]
[114.68746948 78.24082947]
[122.81607819 85.44705963]
[127.52263641 95.60050964]
[127.78487396 107.11713409]
[123.29778290 118.08257294]
[114.56725311 126.57039642]
[102.86538696 130.97930908]
[90.04840851 130.33055115]
[87.92736816 145.17984009]
[85.80632019 160.02911377]
[83.68527985 174.87840271]
[82.77376556 189.85067749]
[83.07776642 204.84759521]
[83.38177490 219.84451294]
[83.68577576 234.84143066]
[83.98978424 249.83834839]
[84.29378510 264.83526611]
[84.59779358 279.83218384]
[84.90179443 294.82910156]
[85.20580292 309.82601929]
[85.50980377 324.82293701]
[85.81380463 339.81985474]
[100.56718445 342.86709595]
[114.27236938 349.12136841]
[126.24192047 358.26892090]
[135.87544250 369.85092163]
[142.68972778 383.28643799]
[146.34298706 397.90155029]
[146.65194702 412.96316528]
[143.60113525 427.71578979]
[137.34356689 441.41946411]
[128.19311523 453.38681030]
[116.60877991 463.01751709]
[103.17160797 469.82855225]
[88.55561066 473.47827148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[32 130]
[33 129]
[34 128]
[35 127]
[36 48]
[37 47]
[38 46]
[39 45]
[50 120]
[51 119]
[53 118]
[54 117]
[67 116]
[68 115]
[69 114]
[70 113]
[85 99]
[86 98]
[87 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
