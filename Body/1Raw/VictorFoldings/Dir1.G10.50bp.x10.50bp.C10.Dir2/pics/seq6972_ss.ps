%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAGCCCUGGGGGGGGGGAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGxxxxxxxxxxCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGCCCCCCCCCCUCUGCGCCCU\
) } def
/len { sequence length } bind def

/coor [
[86.73867798 371.95956421]
[72.89274597 365.94354248]
[61.18408203 356.41412354]
[52.48155594 344.07846069]
[47.43095398 329.85192871]
[46.40706253 314.79025269]
[49.48586273 300.01107788]
[56.43888474 286.61114502]
[66.75016785 275.58483887]
[79.65454865 267.75030518]
[94.19443512 263.68899536]
[94.19443512 248.68899536]
[94.19443512 233.68899536]
[94.19443512 218.68899536]
[94.19443512 203.68899536]
[94.19443512 188.68899536]
[94.19443512 173.68899536]
[94.19443512 158.68899536]
[94.19443512 143.68899536]
[94.19443512 128.68899536]
[77.51937866 116.41577911]
[73.75672150 97.10979462]
[59.18402100 100.66455841]
[57.82258224 115.74517822]
[51.63595963 129.56561279]
[41.29523849 140.62672424]
[27.92209816 147.72868347]
[12.96715641 150.10112000]
[-1.94738352 147.48670959]
[-15.20370579 140.16900635]
[-25.36386299 128.94181824]
[-31.32575798 115.02295685]
[-32.44268799 99.92225647]
[-28.59349823 85.27771759]
[-20.19571877 72.67787933]
[-8.16027832 63.48946762]
[6.20730877 58.70917892]
[21.34855461 58.85553741]
[35.62104797 63.91267776]
[47.47661591 73.33203125]
[55.62926102 86.09185028]
[70.20196533 82.53709412]
[80.41544342 71.55142975]
[82.90055847 56.75872040]
[81.23081970 47.71085739]
[85.59432983 41.68545914]
[88.38665009 26.94765282]
[91.17897797 12.20984650]
[93.97129822 -2.52795959]
[95.99363708 -17.39100647]
[97.24050903 -32.33909225]
[98.48738098 -47.28718185]
[99.73426056 -62.23526764]
[100.98113251 -77.18335724]
[98.69277954 -82.01895142]
[98.54764557 -86.76567078]
[100.14148712 -90.60771942]
[102.80070496 -93.01522064]
[104.97753906 -107.85642242]
[107.15438080 -122.69763184]
[109.33121490 -137.53883362]
[111.50804901 -152.38003540]
[105.85537720 -167.15698242]
[115.35778046 -178.62666321]
[117.53461456 -193.46786499]
[111.88194275 -208.24479675]
[121.38434601 -219.71447754]
[123.56118011 -234.55567932]
[125.73802185 -249.39689636]
[127.91485596 -264.23809814]
[114.44874573 -271.16217041]
[103.96230316 -282.08520508]
[97.59302521 -295.82241821]
[96.03179932 -310.88369751]
[99.44796753 -325.63525391]
[107.47098541 -338.47695923]
[119.23056030 -348.01589966]
[133.45111084 -353.21728516]
[148.59010315 -353.51696777]
[163.00535583 -348.88241577]
[175.13322449 -339.81634521]
[183.65815735 -327.30218506]
[187.65545654 -312.69738770]
[186.69149780 -297.58615112]
[180.87084961 -283.60763550]
[170.82490540 -272.27813721]
[157.64335632 -264.82656860]
[142.75605774 -262.06124878]
[140.57922363 -247.22004700]
[138.40238953 -232.37884521]
[136.22555542 -217.53764343]
[142.03392029 -203.82225037]
[132.37582397 -191.29103088]
[130.19898987 -176.44981384]
[136.00737000 -162.73442078]
[126.34925842 -150.20320129]
[124.17241669 -135.36199951]
[121.99558258 -120.52079010]
[119.81874847 -105.67958832]
[117.64190674 -90.83837891]
[115.92922211 -75.93647766]
[114.68234253 -60.98839188]
[113.43547058 -46.04030609]
[112.18859863 -31.09221840]
[110.94171906 -16.14413261]
[124.08811188 -23.36717987]
[138.01264954 -17.78978920]
[142.53761292 -3.48857808]
[134.35563660 9.08342266]
[119.44707489 10.73709965]
[108.70910645 0.26436478]
[105.91677856 15.00217056]
[103.12445831 29.73997688]
[100.33213043 44.47778320]
[97.69326782 59.24383926]
[95.20815277 74.03654480]
[120.31371307 80.96821594]
[128.37753296 107.17489624]
[141.90171814 113.66306305]
[155.42590332 120.15122223]
[168.95010376 126.63938904]
[184.50099182 122.69609833]
[197.19216919 132.51004028]
[197.28805542 148.55281067]
[184.71508789 158.51776123]
[169.11817932 154.76063538]
[162.46192932 140.16357422]
[148.93774414 133.67541504]
[135.41355896 127.18724823]
[121.88936615 120.69908905]
[109.19443512 128.68899536]
[109.19443512 143.68899536]
[109.19443512 158.68899536]
[109.19443512 173.68899536]
[109.19443512 188.68899536]
[109.19443512 203.68899536]
[109.19443512 218.68899536]
[109.19443512 233.68899536]
[109.19443512 248.68899536]
[109.19443512 263.68899536]
[123.73432159 267.75030518]
[136.63870239 275.58483887]
[146.94998169 286.61114502]
[153.90301514 300.01107788]
[156.98181152 314.79025269]
[155.95791626 329.85192871]
[150.90731812 344.07846069]
[142.20478821 356.41412354]
[130.49612427 365.94354248]
[116.65019226 371.95956421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 42]
[23 41]
[43 116]
[44 115]
[46 114]
[47 113]
[48 112]
[49 111]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[58 100]
[59 99]
[60 98]
[61 97]
[62 96]
[64 94]
[65 93]
[67 91]
[68 90]
[69 89]
[70 88]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
