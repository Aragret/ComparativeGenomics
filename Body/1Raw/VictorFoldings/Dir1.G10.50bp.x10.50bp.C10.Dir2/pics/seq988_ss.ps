%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUCUAGGGGGGGGGGAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCxxxxxxxxxxAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAACCCCCCCCCCUCCCCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[180.00437927 445.45394897]
[177.12455750 430.70651245]
[176.37292480 415.69931030]
[177.76478577 400.73791504]
[181.27177429 386.12689209]
[186.82250977 372.16372681]
[194.30400085 359.13269043]
[203.56390381 347.29904175]
[214.41371155 336.90374756]
[226.63255310 328.15841675]
[219.72555542 314.84326172]
[212.81855774 301.52810669]
[205.91156006 288.21295166]
[199.00456238 274.89779663]
[192.09756470 261.58264160]
[184.64265442 248.56632996]
[176.65272522 235.87139893]
[168.66281128 223.17646790]
[160.67289734 210.48153687]
[152.68298340 197.78660583]
[144.69306946 185.09167480]
[136.70315552 172.39674377]
[122.77662659 177.90786743]
[108.07461548 180.76638794]
[93.09767914 180.87501526]
[78.35575104 178.23002625]
[64.35075378 172.92147827]
[51.55953979 165.13011169]
[40.41761398 155.12123108]
[31.30433273 143.23558044]
[24.52998352 129.87785339]
[20.32521629 115.50286865]
[18.83319664 100.60003662]
[20.10472298 85.67678070]
[24.09650230 71.24119568]
[30.67262459 57.78477859]
[39.60918427 45.76569748]
[50.60191727 35.59317017]
[42.61200333 22.89824295]
[34.62208557 10.20331192]
[26.63216972 -2.49161720]
[10.17114925 2.52900219]
[-7.02373028 2.78312063]
[-23.60106468 -1.74207926]
[-38.25996780 -10.68407345]
[-49.85216141 -23.33402634]
[-57.47192383 -38.69298172]
[-60.52684402 -55.55073929]
[-58.78388596 -72.58122253]
[-52.38713455 -88.44676971]
[-41.84593582 -101.90323639]
[-50.86346436 -113.89007568]
[-59.88099289 -125.87690735]
[-72.55917358 -128.46873474]
[-79.81829071 -138.69244385]
[-78.19225311 -150.72004700]
[-86.95845795 -162.89189148]
[-95.72466278 -175.06372070]
[-110.89213562 -181.29908752]
[-112.80742645 -197.58599854]
[-99.50024414 -207.16989136]
[-84.65988159 -200.19166565]
[-83.55282593 -183.82992554]
[-74.78662109 -171.65809631]
[-66.02041626 -159.48625183]
[-49.66825485 -153.19285583]
[-47.89416122 -134.89443970]
[-38.87663269 -122.90760040]
[-29.85910225 -110.92076874]
[-18.02341843 -116.17410278]
[-5.33841944 -118.81082916]
[7.62429476 -118.70912933]
[20.27997208 -115.87065125]
[32.05708694 -110.42053986]
[42.42315674 -102.60198975]
[50.90880585 -92.76531982]
[57.12903214 -81.35233307]
[60.80066299 -68.87644196]
[61.75524902 -55.89957428]
[59.94679642 -43.00688934]
[55.45396042 -30.78036499]
[48.47664642 -19.77253914]
[39.32709885 -10.48153305]
[47.31701660 2.21339607]
[55.30693054 14.90832615]
[63.29684830 27.60325623]
[77.22337341 22.09213638]
[91.92538452 19.23360443]
[106.90232086 19.12498665]
[121.64424896 21.76997757]
[135.64924622 27.07852554]
[148.44046021 34.86988449]
[159.58238220 44.87877655]
[168.69566345 56.76441956]
[175.47001648 70.12213898]
[179.67478943 84.49713135]
[181.16680908 99.39996338]
[179.89527893 114.32321930]
[175.90350342 128.75880432]
[169.32737732 142.21522522]
[160.39080811 154.23429871]
[149.39808655 164.40682983]
[157.38800049 177.10176086]
[165.37791443 189.79669189]
[173.36782837 202.49162292]
[181.35774231 215.18655396]
[189.34765625 227.88146973]
[197.33758545 240.57640076]
[201.38632202 242.51785278]
[204.27983093 245.38117981]
[205.86846924 248.67634583]
[206.18209839 251.91603088]
[205.41271973 254.67562866]
[212.31971741 267.99078369]
[219.22671509 281.30593872]
[226.13371277 294.62109375]
[233.04071045 307.93624878]
[239.94770813 321.25140381]
[254.13426208 316.29940796]
[268.88119507 313.41687012]
[283.88824463 312.66244507]
[298.84991455 314.05151367]
[313.46157837 317.55581665]
[327.42575073 323.10394287]
[340.45819092 330.58300781]
[352.29354858 339.84072876]
[362.69085693 350.68859863]
[371.43847656 362.90582275]
[378.35827637 376.24362183]
[383.30938721 390.43048096]
[386.19100952 405.17758179]
[386.94451904 420.18469238]
[385.55450439 435.14627075]
[382.04931641 449.75772095]
[376.50030518 463.72155762]
[369.02044678 476.75354004]
[359.76199341 488.58831787]
[348.91348267 498.98495483]
[336.69570923 507.73181152]
[323.35748291 514.65075684]
[309.17031860 519.60101318]
[294.42303467 522.48175049]
[279.41589355 523.23431396]
[264.45440674 521.84338379]
[249.84317017 518.33728027]
[235.87965393 512.78741455]
[222.84814453 505.30673218]
[211.01394653 496.04757690]
[200.61796570 485.19839478]
[191.87188721 472.98010254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[16 108]
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[38 86]
[39 85]
[40 84]
[41 83]
[51 69]
[52 68]
[53 67]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
