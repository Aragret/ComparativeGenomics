%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUAAUCCAAGCGGGGGGGGGGCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAxxxxxxxxxxAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCCCCCCCCCCCACUAAUCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.45889282 640.09747314]
[71.01623535 633.32397461]
[59.21245193 623.98291016]
[49.53090286 612.45672607]
[42.36804199 599.21746826]
[38.01718140 584.80725098]
[36.65648651 569.81616211]
[38.34167862 554.85803223]
[43.00374603 540.54547119]
[50.45178604 527.46447754]
[60.38080215 516.15081787]
[72.38420868 507.06765747]
[85.97046661 500.58706665]
[100.58324432 496.97433472]
[99.98310089 481.98635864]
[99.38295746 466.99835205]
[98.78281403 452.01037598]
[98.18266296 437.02236938]
[97.58251953 422.03439331]
[96.98237610 407.04638672]
[96.38223267 392.05841064]
[95.78208923 377.07040405]
[95.18194580 362.08242798]
[94.58180237 347.09445190]
[93.98165894 332.10644531]
[81.62626648 327.90710449]
[71.41900635 319.72546387]
[64.59765625 308.52566528]
[61.99891281 295.63946533]
[63.95584488 282.60794067]
[70.25537872 270.99710083]
[80.16124725 262.20977783]
[92.50000000 257.31616211]
[92.50000000 242.31617737]
[84.76270294 229.58889771]
[92.50000000 215.78872681]
[92.50000000 200.78872681]
[92.50000000 185.78872681]
[92.50000000 170.78872681]
[92.50000000 155.78872681]
[82.95571136 153.64816284]
[73.92607117 149.88769531]
[65.68372345 144.62091064]
[58.47753906 138.00680542]
[52.52510452 130.24511719]
[48.00615692 121.57017517]
[45.05713654 112.24394226]
[43.76708984 102.54800415]
[44.17497253 92.77512360]
[46.26846695 83.22040558]
[49.98435974 74.17233276]
[37.69229889 65.57552338]
[21.31680107 64.69514465]
[14.13374138 49.95283890]
[23.53243828 36.51421738]
[39.84431458 38.20378494]
[46.28911591 53.28345871]
[58.58117676 61.88027573]
[67.02317047 50.58818436]
[78.55313873 41.27351379]
[71.09650421 28.25819016]
[63.63986969 15.24286938]
[48.32406998 11.34392548]
[40.32307053 -2.28543806]
[44.38372421 -17.55916214]
[58.09691620 -25.41561699]
[73.32685852 -21.19370651]
[81.03788757 -7.39821625]
[76.65518951 7.78623438]
[84.11182404 20.80155563]
[91.56845856 33.81687546]
[99.03095245 34.56600571]
[98.72702026 19.56908607]
[98.42308807 4.57216549]
[98.11914825 -10.42475510]
[95.81358337 -25.24650764]
[106.12852478 -36.13695908]
[121.05351257 -34.63871384]
[128.99797058 -21.91528702]
[123.79231262 -7.84753132]
[120.51351929 6.78973389]
[117.23473358 21.42700005]
[113.95594025 36.06426620]
[121.41843414 36.81339264]
[131.31332397 25.53992081]
[141.20820618 14.26644707]
[144.54348755 5.70117188]
[151.41563416 2.86894822]
[161.53410339 -8.20428276]
[171.65258789 -19.27751350]
[165.52201843 -33.21796036]
[165.59803772 -48.44668579]
[171.86749268 -62.32522583]
[183.24415588 -72.44903564]
[197.75694275 -77.06410980]
[212.89143372 -75.37084961]
[226.02548218 -67.66263580]
[234.88352966 -55.27494812]
[237.93089294 -40.35403824]
[234.63955688 -25.48504066]
[225.57980347 -13.24410152]
[212.32125854 -5.75203419]
[197.16107178 -4.30688667]
[182.72581482 -9.15903854]
[172.60734558 1.91419244]
[162.48886108 12.98742390]
[152.48168945 24.16133499]
[142.58679199 35.43480682]
[132.69190979 46.70828247]
[146.68804932 59.59909058]
[156.00413513 75.91690826]
[159.88993835 94.05722046]
[158.12115479 112.28535461]
[151.00729370 128.90231323]
[139.34928894 142.40310669]
[124.35182953 151.61291504]
[107.50000000 155.78872681]
[107.50000000 170.78872681]
[107.50000000 185.78872681]
[107.50000000 200.78872681]
[107.50000000 215.78872681]
[115.23729706 229.58889771]
[107.50000000 242.31617737]
[107.50000000 257.31616211]
[123.07165527 264.44012451]
[133.94963074 277.59356689]
[137.99810791 294.11849976]
[134.45506287 310.70278931]
[124.07517242 324.04385376]
[108.96965027 331.50631714]
[109.56979370 346.49429321]
[110.16993713 361.48226929]
[110.77008057 376.47027588]
[111.37022400 391.45825195]
[111.97036743 406.44625854]
[112.57051086 421.43423462]
[113.17065430 436.42224121]
[113.77079773 451.41021729]
[114.37094116 466.39822388]
[114.97108459 481.38619995]
[115.57123566 496.37417603]
[130.42607117 498.80697632]
[144.48699951 504.18054199]
[157.17822266 512.27484131]
[167.98004150 522.75842285]
[176.45011902 535.20202637]
[182.24162292 549.09600830]
[185.11740112 563.87152100]
[184.95967102 578.92340088]
[181.77491760 593.63537598]
[175.69354248 607.40496826]
[166.96455383 619.66833496]
[155.94543457 629.92327881]
[143.08738708 637.74987793]
[128.91694641 642.82763672]
[114.01438904 644.94860840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[33 124]
[34 123]
[36 121]
[37 120]
[38 119]
[39 118]
[40 117]
[51 58]
[52 57]
[60 71]
[61 70]
[62 69]
[84 109]
[85 108]
[86 107]
[88 106]
[89 105]
[90 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
