%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACUAACAGGGGGGGGGGGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCxxxxxxxxxxACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGCCCCCCCCCCACUUCUAACAG\
) } def
/len { sequence length } bind def

/coor [
[97.17526245 376.71520996]
[83.95704651 369.43914795]
[73.07308197 358.98916626]
[65.26546478 346.07778931]
[61.06652451 331.58532715]
[60.76255417 316.49990845]
[64.37428284 301.85006714]
[71.65544891 288.63467407]
[82.10961914 277.75473022]
[95.02400208 269.95211792]
[109.51807404 265.75875854]
[109.21009827 250.76191711]
[108.90212250 235.76509094]
[108.59414673 220.76824951]
[108.28616333 205.77140808]
[107.97818756 190.77456665]
[107.67021179 175.77774048]
[107.36223602 160.78089905]
[107.05425262 145.78405762]
[106.74627686 130.78721619]
[90.87880707 128.21138000]
[79.29223633 118.51920319]
[74.61058044 105.17945099]
[59.67456436 103.79542542]
[44.73855209 102.41139984]
[40.45754242 116.83912659]
[33.44381714 130.15429688]
[23.96695518 141.84512329]
[12.39122963 151.46223450]
[-0.83842224 158.63597107]
[-15.21348763 163.09060669]
[-30.18142700 164.65490723]
[-45.16691208 163.26873779]
[-59.59394073 158.98539734]
[-72.90798187 151.96951294]
[-84.59726715 142.49075317]
[-94.21250916 130.91348267]
[-101.38410187 117.68266296]
[-105.83641052 103.30687714]
[-107.39828491 88.33868408]
[-106.00969696 73.35342407]
[-101.72401428 58.92708588]
[-94.70597839 45.61418533]
[-85.22533417 33.92642975]
[-73.64649200 24.31306839]
[-60.41452026 17.14361191]
[-46.03801346 12.69363403]
[-31.06956863 11.13418198]
[-16.08453369 12.52519703]
[-1.65889060 16.81320953]
[11.65287495 23.83340454]
[23.33909607 33.31594086]
[32.95058441 44.89633560]
[40.11789703 58.12946701]
[44.56554794 72.50669098]
[46.12257767 87.47538757]
[61.05858994 88.85941315]
[75.99460602 90.24343872]
[82.74048615 80.67233276]
[93.01083374 75.04802704]
[93.31881714 60.05118561]
[93.62679291 45.05434799]
[93.93476868 30.05751038]
[94.24274445 15.06067276]
[84.98457336 -0.82381248]
[94.57521057 -15.48888206]
[94.57521057 -30.48888206]
[80.18203735 -35.14632416]
[67.93373108 -44.02518845]
[59.03026199 -56.25561905]
[54.34389877 -70.63939667]
[54.33375931 -85.76735687]
[59.00084305 -100.15740967]
[67.88791656 -112.39975739]
[80.12430573 -121.29502869]
[94.51123047 -125.97175598]
[109.63919067 -125.97175598]
[124.02610779 -121.29502869]
[136.26249695 -112.39975739]
[145.14956665 -100.15740967]
[149.81665039 -85.76735687]
[149.80651855 -70.63939667]
[145.12014771 -56.25561905]
[136.21669006 -44.02518845]
[123.96838379 -35.14632416]
[109.57521057 -30.48888206]
[109.57521057 -15.48888206]
[117.92286682 -6.68100119]
[118.00906372 5.85550213]
[109.23958588 15.36864948]
[108.93161011 30.36548805]
[108.62362671 45.36232758]
[108.31565094 60.35916519]
[108.00767517 75.35600281]
[124.38389587 84.83497620]
[131.19216919 104.51819611]
[146.17240906 103.74853516]
[161.15264893 102.97888184]
[176.13288879 102.20922089]
[191.09416199 101.13214874]
[206.03018188 99.74812317]
[220.96618652 98.36409760]
[228.94508362 85.18670654]
[242.98915100 79.30303955]
[257.63159180 82.77613068]
[267.30545044 94.07012939]
[282.24148560 92.68610382]
[297.17749023 91.30207825]
[312.11349487 89.91806030]
[327.04949951 88.53403473]
[340.11453247 78.62255859]
[355.12365723 85.23001099]
[356.63677979 101.55919647]
[343.09732056 110.81206512]
[328.43353271 103.47004700]
[313.49752808 104.85407257]
[298.56152344 106.23809814]
[283.62548828 107.62212372]
[268.68948364 109.00614166]
[261.25561523 121.88541412]
[247.50064087 127.98991394]
[232.61459351 124.78701019]
[222.35021973 113.30010986]
[207.41419983 114.68413544]
[192.47819519 116.06816101]
[188.75869751 119.15272522]
[183.04550171 119.89254761]
[176.90254211 117.18946075]
[161.92230225 117.95912170]
[146.94206238 118.72878265]
[131.96182251 119.49844360]
[121.74311829 130.47924805]
[122.05109406 145.47607422]
[122.35906982 160.47291565]
[122.66704559 175.46975708]
[122.97502899 190.46659851]
[123.28300476 205.46343994]
[123.59098053 220.46026611]
[123.89895630 235.45710754]
[124.20693970 250.45394897]
[124.51491547 265.45077515]
[139.16893005 269.04553223]
[152.39276123 276.31140137]
[163.28479004 286.75296021]
[171.10238647 299.65829468]
[175.31251526 314.14749146]
[175.62812805 329.23269653]
[172.02772522 343.88531494]
[164.75675964 357.10632324]
[154.31098938 367.99432373]
[141.40263367 375.80694580]
[126.91180420 380.01147461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[23 58]
[24 57]
[25 56]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[66 87]
[67 86]
[96 131]
[97 130]
[98 129]
[99 128]
[100 125]
[101 124]
[102 123]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
