%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCACACUGGGGGGGGGGAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACxxxxxxxxxxGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUCCCCCCCCCCUCUCCUCACU\
) } def
/len { sequence length } bind def

/coor [
[124.99540710 504.56808472]
[111.14946747 498.55206299]
[99.44081116 489.02264404]
[90.73828125 476.68698120]
[85.68768311 462.46044922]
[84.66378784 447.39877319]
[87.74259186 432.61962891]
[94.69561005 419.21969604]
[105.00689697 408.19335938]
[117.91127777 400.35885620]
[132.45115662 396.29754639]
[132.45115662 381.29754639]
[132.45115662 366.29754639]
[132.45115662 351.29754639]
[132.45115662 336.29754639]
[132.45115662 321.29754639]
[132.45115662 306.29754639]
[132.45115662 291.29754639]
[132.45115662 276.29754639]
[132.45115662 261.29754639]
[132.45115662 246.29754639]
[132.45115662 231.29754639]
[132.29512024 216.29835510]
[129.50280762 201.56054688]
[124.30738831 187.48902893]
[119.11196899 173.41751099]
[113.91655731 159.34599304]
[108.72113800 145.27447510]
[90.84317780 145.18836975]
[74.34198761 138.30799866]
[61.69859695 125.66784668]
[54.81398392 109.16842651]
[54.72329330 91.29048920]
[61.44015121 74.72206879]
[73.95465088 61.95429230]
[67.60752106 48.36334229]
[57.50887299 37.27202606]
[44.57081985 29.68211937]
[31.55450821 22.22720909]
[18.46135521 14.90810299]
[5.36819983 7.58899689]
[-7.72495461 0.26989144]
[-20.81810951 -7.04921436]
[-33.91126251 -14.36831951]
[-47.00441742 -21.68742561]
[-60.09757233 -29.00653076]
[-74.65129089 -23.28609467]
[-89.46058655 -28.30791855]
[-97.53296661 -41.70085144]
[-95.05690002 -57.14115906]
[-83.20151520 -67.33840179]
[-67.56455231 -67.47775269]
[-55.52931213 -57.49341202]
[-52.77846527 -42.09968567]
[-39.68531036 -34.78057861]
[-26.59215736 -27.46147346]
[-13.49900341 -20.14236832]
[-0.40584889 -12.82326317]
[12.68730545 -5.50415754]
[25.78046036 1.81494820]
[38.87361526 9.13405418]
[46.29475403 9.65588665]
[52.16072845 16.74406242]
[65.09878540 24.33397102]
[58.16874695 11.03079033]
[54.00315857 -3.37920189]
[52.76618195 -18.32811165]
[54.50656509 -33.22680283]
[59.15571976 -47.48812866]
[66.53042603 -60.55004883]
[76.34004974 -71.89779663]
[88.19798279 -81.08415985]
[101.63692474 -87.74710083]
[116.12724304 -91.62404633]
[131.09788513 -92.56220245]
[145.95883179 -90.52458954]
[160.12446594 -85.59152222]
[173.03648376 -77.95739746]
[184.18603516 -67.92308807]
[193.13372803 -55.88403320]
[199.52691650 -42.31468964]
[203.11367798 -27.74983025]
[203.75262451 -12.76344490]
[201.41860962 2.05385423]
[196.20358276 16.11812019]
[188.31309509 28.87508392]
[178.05809021 39.82199860]
[165.84272766 48.52744675]
[152.14840698 54.64834595]
[137.51480103 57.94348145]
[122.51865387 58.28298569]
[107.75092316 55.65348053]
[93.79362488 50.15859222]
[81.19847107 42.01621246]
[87.54560089 55.60716248]
[99.53612518 53.89554596]
[111.55865479 55.36555862]
[122.78353119 59.91575623]
[132.43614197 67.23213959]
[139.85035706 76.80979919]
[144.51452637 87.98780060]
[146.10678101 99.99475098]
[144.51725769 112.00206757]
[139.85563660 123.18112946]
[132.44360352 132.76048279]
[122.79265594 140.07905579]
[127.98807526 154.15057373]
[133.18348694 168.22209167]
[138.37890625 182.29360962]
[143.57432556 196.36512756]
[146.74609375 181.70429993]
[154.65937805 168.96147156]
[166.39410400 159.61820984]
[180.58587646 154.76087952]
[195.58462524 154.95422363]
[209.64646912 160.17576599]
[221.13645935 169.81840515]
[228.71862793 182.76098633]
[231.51144409 197.49870300]
[229.19015503 212.31800842]
[222.02468872 225.49586487]
[210.84814453 235.50010681]
[196.96000671 241.16754150]
[181.97505188 241.83921814]
[167.63555908 237.43705750]
[155.60877991 228.47286987]
[147.29188538 215.98629761]
[150.61674500 224.56517029]
[147.45115662 231.29754639]
[147.45115662 246.29754639]
[147.45115662 261.29754639]
[147.45115662 276.29754639]
[147.45115662 291.29754639]
[147.45115662 306.29754639]
[147.45115662 321.29754639]
[147.45115662 336.29754639]
[147.45115662 351.29754639]
[147.45115662 366.29754639]
[147.45115662 381.29754639]
[147.45115662 396.29754639]
[161.99104309 400.35885620]
[174.89543152 408.19335938]
[185.20671082 419.21969604]
[192.15974426 432.61962891]
[195.23854065 447.39877319]
[194.21464539 462.46044922]
[189.16404724 476.68698120]
[180.46151733 489.02264404]
[168.75285339 498.55206299]
[154.90692139 504.56808472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 127]
[24 110]
[25 109]
[26 108]
[27 107]
[28 106]
[35 95]
[36 94]
[37 64]
[38 63]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
