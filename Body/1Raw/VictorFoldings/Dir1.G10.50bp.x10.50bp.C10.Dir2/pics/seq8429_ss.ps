%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUGCCACAGGGGGGGGGGACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUxxxxxxxxxxGCUACUCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCCCCCCCCCCCUAUUGCCAUA\
) } def
/len { sequence length } bind def

/coor [
[79.87379456 347.46154785]
[67.98952484 338.18643188]
[58.67081451 326.33633423]
[52.45944977 312.60015869]
[49.71654510 297.77651978]
[50.60157394 282.72726440]
[55.06308365 268.32733154]
[62.84167862 255.41389465]
[73.48513031 244.73773193]
[86.37464142 236.91955566]
[100.76082611 232.41387939]
[99.82520294 217.44308472]
[98.88957214 202.47230530]
[97.95394135 187.50151062]
[97.01831055 172.53071594]
[96.08268738 157.55992126]
[95.14705658 142.58912659]
[94.21142578 127.61833954]
[93.27580261 112.64755249]
[85.70394897 100.89346313]
[91.75341034 88.28807831]
[90.81777954 73.31728363]
[75.81331635 73.35607147]
[60.83338165 72.49745178]
[45.93161392 70.74450684]
[31.16135406 68.10350037]
[16.57547188 64.58390808]
[2.22618365 60.19831085]
[-11.83514309 54.96241379]
[-25.55817223 48.89495850]
[-38.89377975 42.01766968]
[-51.79422379 34.35516357]
[-64.21332550 25.93486786]
[-76.10663605 16.78692818]
[-87.43156433 6.94409132]
[-98.14758301 -3.55840778]
[-108.21632385 -14.68297291]
[-117.60174561 -26.38978195]
[-126.27025604 -38.63692474]
[-134.19081116 -51.38056183]
[-141.33506775 -64.57507324]
[-147.67745972 -78.17322540]
[-153.19525146 -92.12633514]
[-157.86872864 -106.38446045]
[-161.68112183 -120.89656830]
[-164.61882019 -135.61068726]
[-166.67129517 -150.47416687]
[-167.83119202 -165.43377686]
[-168.09436035 -180.43598938]
[-167.45985413 -195.42709351]
[-165.92996216 -210.35340881]
[-163.51014709 -225.16151428]
[-160.20907593 -239.79840088]
[-156.03855896 -254.21166992]
[-151.01353455 -268.34973145]
[-145.15199280 -282.16195679]
[-138.47489929 -295.59890747]
[-131.00617981 -308.61251831]
[-122.77255249 -321.15615845]
[-113.80349731 -333.18493652]
[-104.13112640 -344.65579224]
[-93.79005432 -355.52767944]
[-82.81731415 -365.76165771]
[-71.25217438 -375.32110596]
[-59.13603592 -384.17181396]
[-46.51227570 -392.28207397]
[-33.42608261 -399.62283325]
[-19.92430305 -406.16787720]
[-6.05526829 -411.89373779]
[8.13137436 -416.77990723]
[22.58483887 -420.80889893]
[37.25338364 -423.96633911]
[52.08450317 -426.24084473]
[67.02510071 -427.62432861]
[82.02169800 -428.11181641]
[97.02060699 -427.70159912]
[111.96813202 -426.39508057]
[126.81076813 -424.19699097]
[141.49539185 -421.11520386]
[155.96940613 -417.16070557]
[170.18103027 -412.34765625]
[184.07939148 -406.69332886]
[197.61470032 -400.21795654]
[210.73854065 -392.94467163]
[223.40391541 -384.89956665]
[235.56547546 -376.11138916]
[247.17970276 -366.61166382]
[258.20501709 -356.43432617]
[268.60195923 -345.61587524]
[278.33331299 -334.19497681]
[287.36419678 -322.21255493]
[295.66232300 -309.71148682]
[303.19799805 -296.73654175]
[309.94421387 -283.33416748]
[315.87683105 -269.55230713]
[320.97460938 -255.44032288]
[325.21932983 -241.04872131]
[328.59576416 -226.42903137]
[331.09182739 -211.63359070]
[332.69860840 -196.71536255]
[333.41030884 -181.72772217]
[333.22442627 -166.72436523]
[332.14160156 -151.75897217]
[330.16574097 -136.88511658]
[327.30386353 -122.15605164]
[323.56628418 -107.62450409]
[318.96633911 -93.34249115]
[313.52047729 -79.36113739]
[307.24822998 -65.73049927]
[300.17202759 -52.49935913]
[292.31723022 -39.71508789]
[283.71191406 -27.42345428]
[274.38693237 -15.66845322]
[264.37564087 -4.49216700]
[253.71386719 6.06539583]
[242.43978882 15.96644115]
[230.59376526 25.17552757]
[218.21820068 33.65968704]
[205.35739136 41.38854599]
[192.05738831 48.33444214]
[178.36579895 54.47250748]
[164.33163452 59.78076935]
[150.00512695 64.24022675]
[135.43757629 67.83491516]
[120.68111420 70.55197144]
[105.78857422 72.38166046]
[106.72419739 87.35244751]
[114.29605103 99.10653687]
[108.24658966 111.71192169]
[109.18222046 126.68271637]
[110.11785126 141.65350342]
[111.05347443 156.62429810]
[111.98910522 171.59509277]
[112.92473602 186.56588745]
[113.86035919 201.53666687]
[114.79598999 216.50746155]
[115.73162079 231.47825623]
[130.56684875 234.15766907]
[144.32948303 240.31018066]
[156.21937561 249.57807922]
[165.54527283 261.42254639]
[171.76496887 275.15493774]
[174.51684570 289.97689819]
[173.64094543 305.02670288]
[169.18817139 319.42932129]
[161.41740417 332.34747314]
[150.78042603 343.03009033]
[137.89566040 350.85607910]
[123.51220703 355.37048340]
[108.46630096 356.31079102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[21 127]
[22 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
