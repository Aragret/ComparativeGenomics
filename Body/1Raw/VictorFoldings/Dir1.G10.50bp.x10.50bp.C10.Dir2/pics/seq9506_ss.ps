%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCCUGGGGGGGGGGAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGxxxxxxxxxxCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUCCCCCCCCCCUCCUAGCCAU\
) } def
/len { sequence length } bind def

/coor [
[97.81759644 431.46398926]
[83.97165680 425.44796753]
[72.26300049 415.91854858]
[63.56047440 403.58288574]
[58.50987244 389.35635376]
[57.48598099 374.29467773]
[60.56477737 359.51553345]
[67.51779938 346.11560059]
[77.82908630 335.08926392]
[90.73346710 327.25476074]
[105.27335358 323.19345093]
[105.27335358 308.19345093]
[105.27335358 293.19345093]
[105.27335358 278.19345093]
[105.27335358 263.19345093]
[105.27335358 248.19343567]
[105.27335358 233.19343567]
[105.27335358 218.19343567]
[105.27335358 203.19343567]
[105.27335358 188.19343567]
[105.27335358 173.19343567]
[105.11731720 158.19425964]
[104.80525970 143.19749451]
[104.49320221 128.20074463]
[88.48387146 124.41470337]
[78.07360840 112.88565063]
[76.18389130 98.39153290]
[82.46143341 86.21376038]
[74.47151947 73.51882935]
[66.48159790 60.82390213]
[52.58248520 53.26578140]
[52.35146332 38.37296677]
[38.45235062 30.81484604]
[38.22132492 15.92203140]
[30.23140907 3.22710204]
[22.24149323 -9.46782780]
[14.25157642 -22.16275787]
[6.26166058 -34.85768509]
[-1.72825575 -47.55261612]
[-13.12927628 -57.30027008]
[-26.91165733 -63.22023010]
[-40.69403839 -69.14019775]
[-52.95143127 -59.88536453]
[-68.19602203 -58.01506805]
[-82.32709503 -64.03240967]
[-91.54345703 -76.31874847]
[-93.36595917 -91.56912994]
[-87.30435944 -105.68127441]
[-74.98918915 -114.85907745]
[-59.73316956 -116.63376617]
[-45.64009857 -110.52796173]
[-36.50093842 -98.18408203]
[-34.77407455 -82.92257690]
[-20.99169540 -77.00260925]
[-7.20931339 -71.08264923]
[-1.21589732 -75.59141541]
[-10.47289371 -87.39429474]
[-19.24736023 -99.56018066]
[-7.26061010 -108.57781982]
[1.99652612 -96.77487183]
[10.77093506 -84.60894775]
[16.76435089 -89.11770630]
[14.89673805 -104.00099182]
[13.02912521 -118.88426971]
[-1.75523901 -122.23066711]
[-14.50178242 -130.43441772]
[-23.67129707 -142.50486755]
[-28.15651894 -156.98445129]
[-27.41583824 -172.12471008]
[-21.53869247 -186.09735107]
[-11.23477840 -197.21514893]
[2.25165749 -204.13554382]
[17.29206276 -206.02287292]
[32.07023621 -202.64923096]
[44.80163956 -194.42201233]
[53.94889450 -182.33467102]
[58.40742493 -167.84684753]
[57.63884354 -152.70797729]
[51.73595810 -138.74618530]
[41.41157150 -127.64740753]
[27.91240501 -120.75188446]
[29.78001785 -105.86859894]
[31.64763069 -90.98532104]
[26.99545479 -65.87475586]
[10.96667385 -55.54253387]
[18.95659065 -42.84760284]
[26.94650650 -30.15267372]
[34.93642426 -17.45774460]
[42.92633820 -4.76281404]
[50.91625595 7.93211555]
[64.24387360 14.58221149]
[65.04639435 30.38305092]
[78.37401581 37.03314590]
[79.17652893 52.83398819]
[87.16644287 65.52891541]
[95.15636444 78.22384644]
[116.54206085 80.68247986]
[128.49729919 101.83712769]
[143.45755005 100.74581146]
[158.41780090 99.65450287]
[173.37803650 98.56319427]
[184.53697205 85.13130951]
[201.61941528 83.91707611]
[214.06626892 95.18356323]
[229.00057983 93.78126526]
[243.93489075 92.37895966]
[258.86920166 90.97665405]
[267.60748291 78.00836182]
[282.65142822 73.74063873]
[296.89776611 80.18857574]
[303.61981201 94.30764771]
[299.64358521 109.43126678]
[286.84658813 118.41851807]
[271.27114868 117.02590179]
[260.27148438 105.91096497]
[245.33718872 107.31326294]
[230.40287781 108.71556854]
[215.46858215 110.11787415]
[208.69099426 121.12065125]
[196.62585449 126.26910400]
[183.61129761 123.46740723]
[174.46936035 113.52344513]
[159.50910950 114.61475372]
[144.54885864 115.70606232]
[129.58860779 116.79737091]
[119.48995972 127.88868713]
[119.80201721 142.88543701]
[120.11406708 157.88220215]
[123.43893433 166.46107483]
[120.27335358 173.19343567]
[120.27335358 188.19343567]
[120.27335358 203.19343567]
[120.27335358 218.19343567]
[120.27335358 233.19343567]
[120.27335358 248.19343567]
[120.27335358 263.19345093]
[120.27335358 278.19345093]
[120.27335358 293.19345093]
[120.27335358 308.19345093]
[120.27335358 323.19345093]
[134.81323242 327.25476074]
[147.71762085 335.08926392]
[158.02890015 346.11560059]
[164.98193359 359.51553345]
[168.06072998 374.29467773]
[167.03683472 389.35635376]
[161.98623657 403.58288574]
[153.28370667 415.91854858]
[141.57504272 425.44796753]
[127.72911072 431.46398926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[23 127]
[24 126]
[28 96]
[29 95]
[30 94]
[32 92]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 55]
[41 54]
[42 53]
[62 83]
[63 82]
[64 81]
[98 125]
[99 124]
[100 123]
[101 122]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
