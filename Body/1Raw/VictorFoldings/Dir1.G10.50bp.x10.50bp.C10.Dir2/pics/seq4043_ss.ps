%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAUCGAAGGGGGGGGGGUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUxxxxxxxxxxCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACCCCCCCCCCCAUCAUCGAA\
) } def
/len { sequence length } bind def

/coor [
[146.99559021 363.33197021]
[133.14964294 357.31594849]
[121.44098663 347.78652954]
[112.73846436 335.45086670]
[107.68785858 321.22433472]
[106.66397095 306.16265869]
[109.74276733 291.38348389]
[116.69579315 277.98358154]
[127.00707245 266.95724487]
[139.91145325 259.12274170]
[154.45133972 255.06141663]
[154.45133972 240.06141663]
[154.45133972 225.06141663]
[154.45133972 210.06141663]
[154.45133972 195.06141663]
[154.45133972 180.06141663]
[154.45133972 165.06141663]
[154.45133972 150.06141663]
[154.45133972 135.06141663]
[154.45133972 120.06141663]
[154.45133972 105.06141663]
[130.13677979 138.45552063]
[93.62554932 142.55407715]
[69.48131561 121.27132416]
[55.69893265 127.19128418]
[41.91655350 133.11125183]
[29.74942780 144.91792297]
[15.03597355 136.49470520]
[19.05691719 120.02447510]
[35.99658966 119.32886505]
[49.77896881 113.40890503]
[63.56135178 107.48894501]
[59.67174149 89.90847015]
[64.65731049 70.64580536]
[79.03452301 54.26150894]
[100.98979187 45.32288361]
[87.20741272 39.40292358]
[73.42503357 33.48295975]
[59.64265060 27.56299591]
[47.35298538 31.61490440]
[35.97273636 26.35097885]
[31.40609169 15.10584259]
[17.74984932 8.90043545]
[4.09360886 2.69502854]
[-9.56263256 -3.51037860]
[-25.02811623 0.75557691]
[-37.92071152 -8.79222298]
[-38.35032654 -24.82952309]
[-25.98739624 -35.05387878]
[-10.31570053 -31.62203979]
[-3.35722494 -17.16662025]
[10.29901600 -10.96121216]
[23.95525742 -4.75580549]
[37.61149979 1.44960153]
[54.92892838 -1.21620548]
[65.56261444 13.78061485]
[79.34499359 19.70057678]
[93.12738037 25.62054062]
[106.90975952 31.54050446]
[118.70639801 22.27555466]
[116.22128296 7.48284721]
[101.22123718 5.70086908]
[87.33139038 -0.23619547]
[75.67771912 -9.84705448]
[67.20493317 -22.35259819]
[62.59989166 -36.73905945]
[62.23590088 -51.84019089]
[66.14246368 -66.43181610]
[74.00289917 -79.33104706]
[85.17999268 -89.49221039]
[98.76766968 -96.09158325]
[113.66443634 -98.59418488]
[128.66268921 -96.79713440]
[142.54655457 -90.84612274]
[154.19056702 -81.22356415]
[162.65078735 -68.70951080]
[167.24137878 -54.31843185]
[167.59019470 -39.21694183]
[163.66897583 -24.62925148]
[155.79557800 -11.73791981]
[144.60829163 -1.58799016]
[131.01399231 4.99772882]
[133.49909973 19.79043579]
[148.29180908 22.27555466]
[155.47431946 9.10697174]
[154.53559875 -7.26528597]
[168.39164734 -16.03694725]
[182.78854370 -8.18447971]
[182.91600037 8.21417236]
[168.64289856 16.28948021]
[161.46038818 29.45806313]
[172.55171204 39.55671310]
[184.99114990 31.17457008]
[197.43058777 22.79242706]
[209.87002563 14.41028309]
[222.30947876 6.02814007]
[226.77688599 -9.38035583]
[241.66343689 -15.36116886]
[255.54943848 -7.32633209]
[257.78274536 8.56051636]
[246.65013123 20.11234474]
[230.69161987 18.46758080]
[218.25218201 26.84972382]
[205.81272888 35.23186874]
[193.37329102 43.61400986]
[180.93385315 51.99615479]
[182.09941101 59.40503311]
[196.91720581 57.07417297]
[199.24781799 71.89201355]
[184.43051147 74.22279358]
[185.59606934 81.63166809]
[200.00828552 85.78955841]
[214.42050171 89.94744110]
[224.19599915 78.27014160]
[237.87879944 71.58428192]
[253.09828186 71.04822540]
[267.21755981 76.75485992]
[277.79040527 87.71546936]
[282.98498535 102.03105927]
[281.90133667 117.22137451]
[274.72717285 130.65458679]
[262.70550537 140.00332642]
[247.91911316 143.64787292]
[232.92985535 140.95675659]
[220.33470154 132.39625549]
[212.31585693 119.44952393]
[210.26260376 104.35965729]
[195.85038757 100.20177460]
[181.43817139 96.04388428]
[169.45133972 105.06141663]
[169.45133972 120.06141663]
[169.45133972 135.06141663]
[169.45133972 150.06141663]
[169.45133972 165.06141663]
[169.45133972 180.06141663]
[169.45133972 195.06141663]
[169.45133972 210.06141663]
[169.45133972 225.06141663]
[169.45133972 240.06141663]
[169.45133972 255.06141663]
[183.99122620 259.12274170]
[196.89561462 266.95724487]
[207.20689392 277.98358154]
[214.15991211 291.38348389]
[217.23870850 306.16265869]
[216.21482849 321.22433472]
[211.16421509 335.45086670]
[202.46170044 347.78652954]
[190.75303650 357.31594849]
[176.90710449 363.33197021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 32]
[25 31]
[26 30]
[36 59]
[37 58]
[38 57]
[39 56]
[42 54]
[43 53]
[44 52]
[45 51]
[60 83]
[61 82]
[84 91]
[85 90]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
