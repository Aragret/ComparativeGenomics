%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCCCUUAGGGGGGGGGGUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGUGxxxxxxxxxxUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCCCCCCCCCCCAUCGCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[74.79413605 554.51684570]
[60.94819641 548.50085449]
[49.23953247 538.97143555]
[40.53701019 526.63574219]
[35.48640823 512.40924072]
[34.46251678 497.34753418]
[37.54131699 482.56838989]
[44.49433899 469.16845703]
[54.80562210 458.14212036]
[67.70999908 450.30761719]
[82.24989319 446.24630737]
[82.24989319 431.24630737]
[82.24989319 416.24630737]
[82.24989319 401.24630737]
[82.24989319 386.24630737]
[82.24989319 371.24630737]
[82.24989319 356.24630737]
[82.24989319 341.24630737]
[82.24989319 326.24630737]
[82.24989319 311.24630737]
[79.08431244 304.51391602]
[82.40917206 295.93505859]
[82.72122955 280.93829346]
[70.63584900 275.99114990]
[60.94052505 267.19519043]
[54.81401062 255.59025574]
[53.01121521 242.55950928]
[55.77025986 229.66445923]
[62.78126907 218.45791626]
[73.22101593 210.29698181]
[85.84952545 206.17872620]
[86.78514862 191.20793152]
[87.72077942 176.23713684]
[77.70427704 165.27333069]
[78.43987274 150.07748413]
[90.00763702 139.64558411]
[90.94326782 124.67479706]
[91.87889862 109.70401001]
[92.34693909 94.71131134]
[92.34693909 79.71131134]
[92.34693909 64.71131134]
[92.34693909 49.71131134]
[92.34693909 34.71131134]
[82.76421356 19.02210236]
[92.04819489 4.16250515]
[91.73613739 -10.83424854]
[91.42407990 -25.83100319]
[78.07147980 -33.29124832]
[70.29714203 -46.34714890]
[70.10292816 -61.44114304]
[77.44085693 -74.51824951]
[90.25289917 -82.11542511]
[89.94084930 -97.11218262]
[89.31687164 -112.09919739]
[88.38124084 -127.06998444]
[87.44561005 -142.04077148]
[86.50998688 -157.01156616]
[85.57435608 -171.98236084]
[70.65040588 -173.89868164]
[56.35890198 -178.60499573]
[43.21647263 -185.93118286]
[31.69820786 -195.61241150]
[22.22048569 -207.29869080]
[15.12591839 -220.56759644]
[10.67097092 -234.93943787]
[9.01668739 -249.89469910]
[10.22286987 -264.89276123]
[14.24591351 -279.39141846]
[20.94038963 -292.86660767]
[30.06429672 -304.83117676]
[41.28781128 -314.85260010]
[54.20520782 -322.56866455]
[68.34953308 -327.70037842]
[83.20948029 -330.06225586]
[98.24787140 -329.56893921]
[112.92107391 -326.23822021]
[126.69866180 -320.19052124]
[139.08258057 -311.64447021]
[149.62516785 -300.90899658]
[157.94531250 -288.37219238]
[163.74224854 -274.48724365]
[166.80642700 -259.75607300]
[167.02705383 -244.71121216]
[164.39617920 -229.89651489]
[159.00889587 -215.84754944]
[151.05995178 -203.07214355]
[140.83670044 -192.03215027]
[128.70869446 -183.12663269]
[115.11437225 -176.67753601]
[100.54514313 -172.91798401]
[101.48077393 -157.94720459]
[102.41640472 -142.97640991]
[103.35203552 -128.00561523]
[104.28765869 -113.03482056]
[107.26159668 -109.22283936]
[107.82903290 -103.48617554]
[104.93759918 -97.42423248]
[105.24965668 -82.42748260]
[118.36664581 -75.36984253]
[126.24221039 -62.60930252]
[126.67604828 -47.52029419]
[119.45154572 -34.15229797]
[106.42083740 -26.14305878]
[106.73289490 -11.14630508]
[107.04495239 3.85044885]
[115.57497406 12.48445129]
[115.92022705 25.01839638]
[107.34693909 34.71131134]
[107.34693909 49.71131134]
[107.34693909 64.71131134]
[107.34693909 79.71131134]
[107.34693909 94.71131134]
[109.71675110 97.84506226]
[110.66308594 102.02239990]
[109.74603271 106.56962585]
[106.84968567 110.63963318]
[105.91406250 125.61042786]
[104.97843170 140.58122253]
[115.15734100 152.37220764]
[113.99521637 167.54139709]
[102.69157410 177.17276001]
[101.75594330 192.14355469]
[100.82031250 207.11434937]
[115.91182709 215.18989563]
[125.94934845 228.98605347]
[128.96897888 245.72196960]
[124.41542053 262.04998779]
[113.24341583 274.72518921]
[97.71797943 281.25036621]
[97.40592957 296.24710083]
[97.24989319 311.24630737]
[97.24989319 326.24630737]
[97.24989319 341.24630737]
[97.24989319 356.24630737]
[97.24989319 371.24630737]
[97.24989319 386.24630737]
[97.24989319 401.24630737]
[97.24989319 416.24630737]
[97.24989319 431.24630737]
[97.24989319 446.24630737]
[111.78977966 450.30761719]
[124.69416046 458.14212036]
[135.00544739 469.16845703]
[141.95846558 482.56838989]
[145.03726196 497.34753418]
[144.01336670 512.40924072]
[138.96276855 526.63574219]
[130.26023865 538.97143555]
[118.55158234 548.50085449]
[104.70564270 554.51684570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[31 123]
[32 122]
[33 121]
[36 118]
[37 117]
[38 116]
[39 112]
[40 111]
[41 110]
[42 109]
[43 108]
[45 105]
[46 104]
[47 103]
[52 98]
[53 97]
[54 94]
[55 93]
[56 92]
[57 91]
[58 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
