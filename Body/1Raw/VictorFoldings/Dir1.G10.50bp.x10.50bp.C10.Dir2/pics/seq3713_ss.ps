%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUCUAGCGGGGGGGGGGCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAxxxxxxxxxxAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUACCCCCCCCCCUUAUACUAGC\
) } def
/len { sequence length } bind def

/coor [
[123.29820251 365.18203735]
[109.45226288 359.16601562]
[97.74360657 349.63659668]
[89.04107666 337.30093384]
[83.99047852 323.07440186]
[82.96658325 308.01272583]
[86.04538727 293.23358154]
[92.99840546 279.83364868]
[103.30969238 268.80731201]
[116.21407318 260.97280884]
[130.75395203 256.91149902]
[130.75395203 241.91148376]
[130.75395203 226.91148376]
[130.75395203 211.91148376]
[130.75395203 196.91148376]
[130.75395203 181.91148376]
[130.75395203 166.91148376]
[130.75395203 151.91148376]
[130.75395203 136.91148376]
[130.75395203 121.91148376]
[111.24312592 133.36439514]
[90.29735565 131.17950439]
[75.89936066 118.03373718]
[72.45613861 100.43177795]
[57.96054077 96.57462311]
[43.46494293 92.71746063]
[34.30060577 93.53403473]
[28.70952606 88.62634277]
[13.30539989 92.23514557]
[3.22157526 81.27313232]
[-11.19064045 77.11524200]
[-25.60285759 72.95735931]
[-40.44406128 70.78051758]
[-55.44325256 70.62448120]
[-65.48089600 82.61530304]
[-80.88668060 85.29780579]
[-94.38645935 77.40541077]
[-99.60605621 62.66465378]
[-94.08092499 48.03567505]
[-80.41987610 40.42583084]
[-65.07323456 43.42825699]
[-55.28721237 55.62529755]
[-40.28802490 55.78133392]
[-38.28415680 48.55398941]
[-34.27641678 34.09930038]
[-32.27254486 26.87195587]
[-45.21060181 19.28204727]
[-58.14865875 11.69213963]
[-74.54223633 12.11954498]
[-82.87727356 -2.00345397]
[-74.57940674 -16.14832687]
[-58.18476486 -15.76404095]
[-50.55875015 -1.24591672]
[-37.62069321 6.34399176]
[-24.68263626 13.93389988]
[-13.32809162 39.19811249]
[-21.44496918 58.54514313]
[-7.03275347 62.70302963]
[7.37946272 66.86091614]
[21.75273132 62.95471191]
[32.86741257 74.21412659]
[47.32210159 78.22186279]
[61.81769943 82.07902527]
[76.31329346 85.93618774]
[94.29006195 67.84880066]
[123.84559631 70.72019958]
[126.33071899 55.92749405]
[128.81584167 41.13478470]
[131.30094910 26.34207916]
[117.70665741 19.75636101]
[106.51935577 9.60643101]
[98.64596558 -3.28490043]
[94.72474670 -17.87259102]
[95.07357025 -32.97407913]
[99.66415405 -47.36516190]
[108.12436676 -59.87921143]
[119.76837921 -69.50177002]
[133.65225220 -75.45278931]
[148.65049744 -77.24983215]
[163.54727173 -74.74723053]
[177.13494873 -68.14785767]
[188.31204224 -57.98669815]
[196.17247009 -45.08746338]
[200.07904053 -30.49584198]
[199.71504211 -15.39470959]
[195.11000061 -1.00824821]
[186.63722229 11.49729633]
[174.98355103 21.10815430]
[161.09370422 27.04521942]
[146.09365845 28.82719803]
[143.60853577 43.61990356]
[141.12342834 58.41261292]
[138.63830566 73.20532227]
[143.33187866 79.05513000]
[151.55825806 66.51213074]
[166.02938843 70.46005249]
[166.74633789 85.44290924]
[152.71905518 90.75475311]
[157.41262817 96.60456848]
[172.39234924 97.38441467]
[187.37205505 98.16425323]
[202.35177612 98.94409943]
[217.33148193 99.72394562]
[232.31120300 100.50379181]
[245.05567932 88.56579590]
[262.15637207 89.48790741]
[273.10360718 102.21645355]
[288.09631348 102.68449402]
[303.08898926 103.15253448]
[318.08169556 103.62058258]
[333.07440186 104.08862305]
[345.70443726 94.19612885]
[361.27947998 98.04286957]
[367.85168457 112.67795563]
[360.37942505 126.87459564]
[344.59475708 129.74235535]
[332.60635376 119.08132172]
[317.61364746 118.61327362]
[302.62097168 118.14523315]
[287.62826538 117.67719269]
[272.63555908 117.20915222]
[264.54080200 127.28245544]
[251.92851257 130.88864136]
[239.36407471 126.48833466]
[231.53135681 115.48350525]
[216.55163574 114.70365906]
[201.57192993 113.92381287]
[186.59220886 113.14397430]
[171.61250305 112.36412811]
[156.63278198 111.58428192]
[145.75395203 121.91148376]
[145.75395203 136.91148376]
[145.75395203 151.91148376]
[145.75395203 166.91148376]
[145.75395203 181.91148376]
[145.75395203 196.91148376]
[145.75395203 211.91148376]
[145.75395203 226.91148376]
[145.75395203 241.91148376]
[145.75395203 256.91149902]
[160.29383850 260.97280884]
[173.19822693 268.80731201]
[183.50950623 279.83364868]
[190.46253967 293.23358154]
[193.54133606 308.01272583]
[192.51744080 323.07440186]
[187.46684265 337.30093384]
[178.76431274 349.63659668]
[167.05564880 359.16601562]
[153.20971680 365.18203735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 64]
[25 63]
[26 62]
[28 61]
[30 59]
[31 58]
[32 57]
[33 43]
[34 42]
[46 55]
[47 54]
[48 53]
[66 93]
[67 92]
[68 91]
[69 90]
[99 130]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
