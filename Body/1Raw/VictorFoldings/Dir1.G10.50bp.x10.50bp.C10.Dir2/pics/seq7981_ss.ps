%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACUAAAUAGGGGGGGGGGCUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCxxxxxxxxxxCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCCCCCCCCCCCAACUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[261.51770020 218.41563416]
[250.62248230 210.28848267]
[240.18562317 201.58042908]
[230.23803711 192.31724548]
[220.80921936 182.52641296]
[211.92710876 172.23692322]
[203.61804199 161.47924805]
[195.90666199 150.28527832]
[188.81581116 138.68818665]
[182.36651611 126.72233582]
[176.57789612 114.42317200]
[171.46713257 101.82714081]
[167.04936218 88.97157288]
[152.60739136 93.02489471]
[138.16542053 97.07820892]
[123.72344208 101.13152313]
[109.28146362 105.18483734]
[95.16310883 110.25160217]
[81.43939972 116.30632782]
[67.77774811 122.49981689]
[54.17956543 128.83143616]
[40.58138275 135.16305542]
[26.98319817 141.49467468]
[13.38501358 147.82629395]
[-0.21317008 154.15791321]
[-7.03746700 168.67715454]
[-22.67670631 172.25399780]
[-35.13380051 162.14457703]
[-34.85273743 146.10398865]
[-22.04911804 136.43719482]
[-6.54478931 140.55972290]
[7.05339479 134.22810364]
[20.65157890 127.89649200]
[34.24976349 121.56487274]
[47.84794617 115.23325348]
[61.44612885 108.90163422]
[66.21036530 103.19359589]
[75.38467407 102.58261108]
[89.10839081 96.52788544]
[75.25407410 90.77827454]
[68.18594360 77.54795074]
[71.10863495 62.83543777]
[82.69701385 53.31128693]
[97.69699860 53.29366684]
[109.30771637 62.79057312]
[112.26496124 77.49617767]
[105.22814941 90.74286652]
[119.67012787 86.68954468]
[134.11210632 82.63623047]
[148.55407715 78.58291626]
[162.99604797 74.52960205]
[159.41635132 57.63576889]
[157.01290894 40.53514862]
[155.79714966 23.30953217]
[155.77487183 6.04131079]
[156.94616699 -11.18692684]
[159.30537415 -28.29278183]
[162.84120178 -45.19444656]
[167.53668213 -61.81108475]
[173.36935425 -78.06324005]
[180.31127930 -93.87317657]
[188.32920837 -109.16530609]
[197.38479614 -123.86650085]
[207.43469238 -137.90644836]
[218.43080139 -151.21804810]
[230.32051086 -163.73762512]
[243.04692078 -175.40533447]
[256.54916382 -186.16539001]
[270.76260376 -195.96635437]
[285.61929321 -204.76138306]
[301.04812622 -212.50842285]
[316.97528076 -219.17047119]
[333.32458496 -224.71568298]
[350.01785278 -229.11755371]
[366.97521973 -232.35508728]
[384.11557007 -234.41281128]
[401.35693359 -235.28092957]
[418.61682129 -234.95530701]
[435.81271362 -233.43753052]
[452.86233521 -230.73489380]
[469.68417358 -226.86038208]
[486.19778442 -221.83251953]
[502.32415771 -215.67539978]
[517.98620605 -208.41850281]
[533.10906982 -200.09655762]
[541.17211914 -212.74516296]
[549.23516846 -225.39376831]
[557.29821777 -238.04235840]
[565.36126709 -250.69096375]
[565.54022217 -267.08914185]
[579.96173096 -274.89633179]
[593.79016113 -266.08117676]
[592.79998779 -249.71195984]
[578.00988770 -242.62791443]
[569.94683838 -229.97930908]
[561.88378906 -217.33070374]
[553.82067871 -204.68209839]
[545.75762939 -192.03350830]
[556.77917480 -184.08715820]
[567.35198975 -175.55278015]
[577.44476318 -166.45561218]
[587.02758789 -156.82264709]
[596.07214355 -146.68240356]
[604.55145264 -136.06492615]
[612.44049072 -125.00168610]
[619.71582031 -113.52545929]
[626.35595703 -101.67024231]
[632.34106445 -89.47117615]
[637.65356445 -76.96440125]
[642.27758789 -64.18698120]
[646.19946289 -51.17678070]
[649.40759277 -37.97235107]
[651.89239502 -24.61281967]
[653.64648438 -11.13778114]
[654.66473389 2.41283536]
[654.94409180 15.99887180]
[654.48370361 29.58006477]
[653.28491211 43.11616898]
[651.35125732 56.56706238]
[648.68847656 69.89288330]
[645.30444336 83.05414581]
[641.20922852 96.01183319]
[636.41485596 108.72755432]
[630.93566895 121.16360474]
[624.78771973 133.28314209]
[617.98937988 145.05023193]
[610.56072998 156.43000793]
[602.52368164 167.38874817]
[593.90222168 177.89393616]
[584.72174072 187.91447449]
[575.00958252 197.42063904]
[564.79437256 206.38424683]
[554.10644531 214.77873230]
[542.97747803 222.57922363]
[531.44049072 229.76257324]
[519.52954102 236.30751038]
[507.28002930 242.19461060]
[494.72824097 247.40641785]
[481.91131592 251.92749023]
[468.86730957 255.74440002]
[455.63479614 258.84585571]
[442.25305176 261.22265625]
[428.76171875 262.86770630]
[415.20074463 263.77615356]
[401.61035156 263.94531250]
[388.03079224 263.37463379]
[374.50231934 262.06582642]
[361.06506348 260.02273560]
[347.75878906 257.25143433]
[334.62295532 253.76010132]
[321.69650269 249.55909729]
[309.01773071 244.66084290]
[296.62420654 239.07986450]
[284.55270386 232.83267212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 39]
[19 38]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
