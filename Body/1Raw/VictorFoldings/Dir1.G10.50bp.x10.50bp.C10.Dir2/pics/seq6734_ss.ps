%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAUCACGGGGGGGGGGUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGxxxxxxxxxxAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCCCCCCCCCCCUAGCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[82.15772247 372.55541992]
[69.59949493 364.20428467]
[59.51327515 352.99182129]
[52.53308105 339.62292480]
[49.09769821 324.93792725]
[49.42307281 309.85995483]
[53.48875809 295.33685303]
[61.03917694 282.28149414]
[71.59970856 271.51461792]
[84.50650024 263.71298218]
[98.94822693 259.36703491]
[98.32424927 244.38000488]
[97.70027924 229.39299011]
[97.07630157 214.40597534]
[96.45232391 199.41896057]
[95.82834625 184.43194580]
[95.20436859 169.44493103]
[94.58039093 154.45790100]
[93.95641327 139.47088623]
[93.33243561 124.48387146]
[92.70845795 109.49685669]
[84.19892883 121.84951019]
[70.98386383 128.94612122]
[55.98630524 129.21701050]
[42.52358627 122.60224152]
[33.57352829 110.56494904]
[31.11580658 95.76766205]
[35.69404221 81.48341370]
[46.29557419 70.87174225]
[60.57543945 66.27985382]
[75.37506866 68.72343445]
[87.42091370 77.66197968]
[94.04898071 91.12030792]
[96.84130096 76.38249969]
[99.63362885 61.64469528]
[102.11874390 46.85198975]
[104.29557800 32.01078415]
[106.47241974 17.16957855]
[91.83122253 13.87522507]
[77.48110962 9.48300457]
[63.50427246 4.01807594]
[49.98077393 -2.48825765]
[36.98807526 -9.99872875]
[24.60059929 -18.47031593]
[12.88929844 -27.85449600]
[1.92125773 -38.09751892]
[-8.24069977 -49.14070511]
[-17.53836632 -60.92080688]
[-25.91848373 -73.37034607]
[-33.33305359 -86.41800690]
[-39.73960495 -99.98906708]
[-45.10143661 -114.00577545]
[-49.38784409 -128.38784790]
[-52.57426834 -143.05291748]
[-54.64245987 -157.91696167]
[-55.58057022 -172.89485168]
[-55.38323212 -187.90080261]
[-54.05157089 -202.84884644]
[-51.59321213 -217.65336609]
[-48.02224350 -232.22956848]
[-43.35911179 -246.49395752]
[-37.63053513 -260.36480713]
[-30.86932182 -273.76269531]
[-23.11420250 -286.61087036]
[-14.40959549 -298.83572388]
[-4.80536318 -310.36724854]
[5.64348316 -321.13940430]
[16.87709236 -331.09045410]
[28.83111763 -340.16342163]
[41.43708801 -348.30630493]
[54.62279892 -355.47250366]
[68.31271362 -361.62097168]
[82.42842865 -366.71646118]
[96.88908386 -370.72979736]
[111.61184692 -373.63800049]
[126.51239014 -375.42437744]
[141.50535583 -376.07873535]
[156.50488281 -375.59732056]
[171.42503357 -373.98287964]
[186.18035889 -371.24468994]
[200.68634033 -367.39837646]
[214.85987854 -362.46600342]
[228.61978149 -356.47583008]
[241.88725281 -349.46215820]
[254.58628845 -341.46517944]
[266.64416504 -332.53067017]
[277.99179077 -322.70983887]
[288.56414795 -312.05889893]
[298.30072021 -300.63888550]
[307.14572144 -288.51522827]
[315.04849243 -275.75735474]
[321.96377563 -262.43832397]
[327.85192871 -248.63444519]
[332.67926025 -234.42478943]
[336.41809082 -219.89074707]
[339.04699707 -205.11555481]
[340.55096436 -190.18385315]
[340.92132568 -175.18118286]
[340.15600586 -160.19346619]
[338.25936890 -145.30656433]
[335.24227905 -130.60572815]
[331.12200928 -116.17517090]
[325.92218018 -102.09756470]
[319.67254639 -88.45352936]
[312.40893555 -75.32122803]
[304.17294312 -62.77587509]
[295.01174927 -50.88933563]
[284.97781372 -39.72969437]
[274.12863159 -29.36087036]
[262.52633667 -19.84225655]
[250.23738098 -11.22837830]
[237.33215332 -3.56857347]
[223.88459778 3.09328222]
[209.97171021 8.71903038]
[195.67320251 13.27644539]
[181.07096863 16.73942375]
[166.24865723 19.08813095]
[151.29116821 20.30911064]
[136.28416443 20.39536858]
[121.31362152 19.34641457]
[119.13678741 34.18762207]
[116.95995331 49.02882767]
[119.08237457 53.37288284]
[118.45262909 59.10304260]
[114.37142944 64.43701935]
[111.57910919 79.17482758]
[108.78678131 93.91263580]
[107.69547272 108.87287903]
[108.31945038 123.85990143]
[108.94342804 138.84690857]
[109.56740570 153.83392334]
[110.19138336 168.82095337]
[110.81536102 183.80796814]
[111.43933868 198.79498291]
[112.06331635 213.78199768]
[112.68729401 228.76901245]
[113.31127167 243.75602722]
[113.93524933 258.74304199]
[128.68824768 261.87347412]
[142.19888306 268.57522583]
[153.61785889 278.42703247]
[162.22738647 290.80957031]
[167.48622131 304.94445801]
[169.06382751 319.94320679]
[166.86102295 334.86291504]
[161.01628113 348.76580811]
[151.89700317 360.77786255]
[140.07643127 370.14401245]
[126.29762268 376.27551270]
[111.42671967 378.78689575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[33 127]
[34 126]
[35 125]
[36 122]
[37 121]
[38 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
