%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCACUGGGGGGGGGGCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACxxxxxxxxxxAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACCCCCCCCCCCAAACCCCAUU\
) } def
/len { sequence length } bind def

/coor [
[83.15515137 414.21395874]
[69.93495941 406.94146729]
[59.04815292 396.49447632]
[51.23702240 383.58523560]
[47.03414154 369.09390259]
[46.72607040 354.00857544]
[50.33380890 339.35775757]
[57.61138153 326.14035034]
[68.06259155 315.25759888]
[80.97485352 307.45144653]
[95.46778870 303.25415039]
[95.15573120 288.25741577]
[94.84367371 273.26065063]
[94.53162384 258.26388550]
[94.21956635 243.26715088]
[93.90750885 228.27038574]
[93.59545135 213.27363586]
[93.28339386 198.27688599]
[92.97133636 183.28013611]
[92.65928650 168.28337097]
[89.35433197 161.61831665]
[92.50000000 152.97213745]
[92.50000000 137.97213745]
[84.54222870 137.48872375]
[76.51232910 135.29441833]
[68.78418732 131.34912109]
[61.74307251 125.69506073]
[55.76743698 118.45940399]
[51.21026611 109.85283661]
[48.38077927 100.16399384]
[33.38808060 100.63203430]
[18.39538574 101.10007477]
[3.40268946 101.56811523]
[-6.12746954 113.96610260]
[-21.40832901 117.28714752]
[-35.22473526 109.96315002]
[-41.05300522 95.45228577]
[-36.14120483 80.60613251]
[-22.80853653 72.43459320]
[-7.35028172 74.79602051]
[2.93464732 86.57542419]
[17.92734337 86.10738373]
[32.92004013 85.63933563]
[47.91273499 85.17129517]
[50.14114380 78.00999451]
[39.96579742 66.98900604]
[54.59795761 63.68740082]
[56.82636642 56.52610016]
[44.74637985 47.63375092]
[32.66638947 38.74140167]
[16.65326691 39.72089386]
[6.01084042 27.71596336]
[8.90307140 11.93576908]
[23.11128807 4.48552322]
[37.73616028 11.08041763]
[41.55873871 26.66141319]
[53.63872910 35.55376434]
[65.71871948 44.44611359]
[80.39524078 41.34778976]
[87.85015106 28.33148193]
[95.30506134 15.31517220]
[102.75997162 2.29886317]
[110.21488190 -10.71744633]
[117.66979218 -23.73375511]
[125.12470245 -36.75006485]
[113.19921875 -45.88605118]
[102.59789276 -56.53007889]
[93.50991821 -68.49218750]
[86.09748077 -81.55891418]
[80.49286652 -95.49705505]
[76.79608917 -110.05786896]
[75.07312775 -124.98149872]
[75.35473633 -140.00161743]
[77.63587952 -154.85018921]
[81.87585449 -169.26219177]
[87.99898529 -182.98045349]
[95.89600372 -195.76014709]
[105.42597961 -207.37319946]
[116.41883850 -217.61236572]
[128.67839050 -226.29492188]
[141.98587036 -233.26591492]
[156.10375977 -238.40092468]
[170.78013611 -241.60832214]
[185.75308228 -242.83087158]
[200.75537109 -242.04673767]
[215.51927185 -239.26994324]
[229.78131104 -234.55003357]
[243.28695679 -227.97122192]
[255.79521179 -219.65092468]
[267.08282471 -209.73764038]
[276.94836426 -198.40826416]
[285.21575928 -185.86500549]
[291.73748779 -172.33168030]
[296.39712524 -158.04985046]
[299.11157227 -143.27435303]
[299.83233643 -128.26889038]
[298.54656982 -113.30124664]
[295.27722168 -98.63854218]
[290.08264160 -84.54244995]
[283.05554199 -71.26453400]
[274.32128906 -59.04174805]
[264.03579712 -48.09222412]
[252.38261414 -38.61137009]
[239.56968689 -30.76838493]
[225.82569885 -24.70323181]
[211.39590454 -20.52415466]
[196.53784180 -18.30573082]
[181.51666260 -18.08755112]
[166.60043335 -19.87351036]
[152.05535889 -23.63173485]
[138.14100647 -29.29515457]
[130.68609619 -16.27884483]
[123.23119354 -3.26253605]
[115.77628326 9.75377369]
[108.32137299 22.77008247]
[100.86646271 35.78639221]
[93.41155243 48.80270004]
[107.61441803 50.13248062]
[120.58594513 55.23503494]
[131.37115479 63.54146194]
[139.23042297 74.25518799]
[143.68936157 86.42558289]
[144.56507874 99.03099060]
[141.96772766 111.06400299]
[136.27809143 121.61190796]
[128.10420227 129.92587280]
[118.22113800 135.47366333]
[107.50000000 137.97213745]
[107.50000000 152.97213745]
[107.65603638 167.97131348]
[107.96809387 182.96807861]
[108.28015137 197.96482849]
[108.59220886 212.96157837]
[108.90425873 227.95832825]
[109.21631622 242.95509338]
[109.52837372 257.95184326]
[109.84043121 272.94860840]
[110.15248871 287.94534302]
[110.46454620 302.94210815]
[125.11953735 306.53286743]
[138.34533691 313.79513550]
[149.24021912 324.23373413]
[157.06130981 337.13693237]
[161.27537537 351.62500000]
[161.59510803 366.71011353]
[157.99867249 381.36370850]
[150.73130798 394.58670044]
[140.28851318 405.47753906]
[127.38227844 413.29367065]
[112.89258575 417.50213623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
[30 44]
[31 43]
[32 42]
[33 41]
[48 58]
[49 57]
[50 56]
[59 117]
[60 116]
[61 115]
[62 114]
[63 113]
[64 112]
[65 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
