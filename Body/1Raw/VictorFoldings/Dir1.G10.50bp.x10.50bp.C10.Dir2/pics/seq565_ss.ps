%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCCUCCGGGGGGGGGGCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAxxxxxxxxxxUGAGCACACCAUAUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUACCCCCCCCCCUUUCACCUCC\
) } def
/len { sequence length } bind def

/coor [
[86.16448975 583.67938232]
[72.31855011 577.66339111]
[60.60988998 568.13397217]
[51.90736771 555.79827881]
[46.85676575 541.57177734]
[45.83287430 526.51007080]
[48.91167068 511.73092651]
[55.86469269 498.33099365]
[66.17597961 487.30465698]
[79.08036041 479.47015381]
[93.62024689 475.40884399]
[93.62024689 460.40884399]
[93.62024689 445.40884399]
[93.62024689 430.40884399]
[93.62024689 415.40884399]
[93.62024689 400.40884399]
[93.62024689 385.40884399]
[93.62024689 370.40884399]
[93.62024689 355.40884399]
[93.62024689 340.40884399]
[78.96586609 337.31936646]
[65.26880646 331.24798584]
[53.12874985 322.45791626]
[43.07777405 311.33142090]
[35.55702591 298.35314941]
[30.89734077 284.08920288]
[29.30471039 269.16232300]
[30.85116768 254.22473145]
[35.47153473 239.92956543]
[42.96616745 226.90246582]
[53.00957870 215.71403503]
[65.16457367 206.85498047]
[78.90127563 200.71447754]
[93.62024689 197.56317139]
[93.62024689 182.56317139]
[93.62024689 167.56317139]
[84.02913666 152.89993286]
[93.28339386 137.01477051]
[92.97133636 122.01801300]
[92.65928650 107.02125549]
[89.33838654 99.61479187]
[92.50000000 91.71001434]
[92.50000000 76.71001434]
[84.61185455 89.46842957]
[73.22380066 99.23122406]
[59.41000748 105.07752228]
[44.47347260 106.45587921]
[29.82307434 103.23627472]
[16.84071159 95.72240448]
[6.75094748 84.62300873]
[0.50549501 70.98503113]
[-1.30654323 56.09488297]
[1.48575294 41.35707092]
[8.61900043 28.16173935]
[19.42035675 17.75353622]
[32.87098312 11.11421299]
[47.70215607 8.87002468]
[62.51491928 11.23265266]
[75.91206360 17.97924423]
[86.62990570 28.47342491]
[93.65748596 41.72533417]
[96.33193207 56.48517609]
[101.81896973 42.52478409]
[107.30599976 28.56439590]
[112.79302979 14.60400581]
[118.28005981 0.64361620]
[123.76708984 -13.31677341]
[111.22100830 -21.63390160]
[100.68256378 -32.37373352]
[92.61066437 -45.06511688]
[87.35608673 -59.15200043]
[85.14623260 -74.01779175]
[86.07528687 -89.01232910]
[90.10021973 -103.48034668]
[97.04274750 -116.79009247]
[106.59725952 -128.36090088]
[118.34424591 -137.68856812]
[131.76872253 -144.36727905]
[146.28280640 -148.10726929]
[161.25148010 -148.74742126]
[176.02033997 -146.26219177]
[181.50737000 -160.22257996]
[178.53747559 -176.35055542]
[191.19357300 -186.77914429]
[206.45613098 -180.78030396]
[208.62435913 -164.52513123]
[195.46775818 -154.73554993]
[189.98072815 -140.77516174]
[202.48930359 -132.53918457]
[213.01614380 -121.87820435]
[221.09938049 -109.25650024]
[226.38365173 -95.22445679]
[228.63568115 -80.39457703]
[227.75463867 -65.41471863]
[223.77659607 -50.93980026]
[216.87312317 -37.60317612]
[207.34378052 -25.98891640]
[195.60324097 -16.60623360]
[182.16316223 -9.86714935]
[167.60992432 -6.06840897]
[152.57907104 -5.37840986]
[137.72747803 -7.82974195]
[132.24044800 6.13064766]
[126.75341797 20.09103775]
[121.26638794 34.05142593]
[115.77935791 48.01181793]
[110.29232788 61.97220612]
[107.50000000 76.71001434]
[107.50000000 91.71001434]
[107.65603638 106.70919800]
[107.96809387 121.70595551]
[108.28015137 136.70271301]
[117.05323029 146.21516418]
[116.96880341 158.75358582]
[108.62024689 167.56317139]
[108.62024689 182.56317139]
[108.62024689 197.56317139]
[123.33921814 200.71447754]
[137.07592773 206.85498047]
[149.23091125 215.71403503]
[159.27432251 226.90246582]
[166.76895142 239.92956543]
[171.38932800 254.22473145]
[172.93577576 269.16232300]
[171.34315491 284.08920288]
[166.68347168 298.35314941]
[159.16271973 311.33142090]
[149.11174011 322.45791626]
[136.97169495 331.24798584]
[123.27462006 337.31936646]
[108.62024689 340.40884399]
[108.62024689 355.40884399]
[108.62024689 370.40884399]
[108.62024689 385.40884399]
[108.62024689 400.40884399]
[108.62024689 415.40884399]
[108.62024689 430.40884399]
[108.62024689 445.40884399]
[108.62024689 460.40884399]
[108.62024689 475.40884399]
[123.16013336 479.47015381]
[136.06451416 487.30465698]
[146.37579346 498.33099365]
[153.32882690 511.73092651]
[156.40762329 526.51007080]
[155.38372803 541.57177734]
[150.33312988 555.79827881]
[141.63059998 568.13397217]
[129.92193604 577.66339111]
[116.07600403 583.67938232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 117]
[35 116]
[36 115]
[38 112]
[39 111]
[40 110]
[42 109]
[43 108]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[67 102]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
