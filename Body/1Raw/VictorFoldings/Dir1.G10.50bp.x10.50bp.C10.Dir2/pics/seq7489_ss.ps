%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCUUUCAGGGGGGGGGGUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGxxxxxxxxxxACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAACCCCCCCCCCAUCACCUUCCA\
) } def
/len { sequence length } bind def

/coor [
[47.05881119 445.03637695]
[33.03686905 439.48336792]
[20.83691025 430.61703491]
[11.22583961 418.99472046]
[4.80781412 405.34701538]
[1.98627710 390.53182983]
[2.93859291 375.48043823]
[7.60489798 361.13903809]
[15.69186497 348.40905762]
[26.69113922 338.09078979]
[39.91129684 330.83282471]
[54.52131271 327.09140015]
[54.52131271 312.09140015]
[54.52131271 297.09140015]
[54.52131271 282.09140015]
[54.52131271 267.09140015]
[54.52131271 252.09138489]
[54.52131271 237.09138489]
[54.52131271 222.09138489]
[54.52131271 207.09138489]
[54.52131271 192.09138489]
[54.52131271 177.09138489]
[46.76418686 189.92988586]
[36.30181885 200.67878723]
[23.67754173 208.77987671]
[9.54696083 213.81243896]
[-5.35608768 215.51512146]
[-20.25765419 213.79951477]
[-34.38386536 208.75469971]
[-47.00111389 200.64266968]
[-57.45415878 189.88470459]
[-65.20014954 177.03948975]
[-69.83681488 162.77409363]
[-71.12335968 147.82937622]
[-68.99298096 132.98143005]
[-63.55630875 119.00134277]
[-55.09568024 106.61515045]
[-44.05047607 96.46608734]
[-30.99430084 89.08122253]
[-16.60519218 84.84406281]
[-1.63040853 83.97464752]
[13.15237331 86.51814270]
[26.97545052 92.34245300]
[39.12095642 101.14510345]
[48.95814896 112.46895599]
[55.97615814 125.72593689]
[59.81052399 140.22758484]
[60.26247406 155.21652222]
[67.62871552 142.14982605]
[74.99495697 129.08312988]
[82.36119080 116.01643372]
[89.72743225 102.94974518]
[95.57421875 89.13616180]
[99.82706451 74.75167847]
[96.31993103 59.32408524]
[107.34821320 49.31277847]
[111.60105896 34.92829514]
[115.85390472 20.54381371]
[120.10675049 6.15933371]
[124.35959625 -8.22514725]
[128.61244202 -22.60962868]
[132.86529541 -36.99411011]
[135.31822205 -51.79218674]
[135.93405151 -66.77954102]
[136.54986572 -81.76689148]
[137.16569519 -96.75424957]
[137.78152466 -111.74160004]
[138.39733887 -126.72895813]
[124.20751953 -131.97337341]
[112.33406830 -141.34761047]
[103.94022369 -153.93325806]
[99.84833527 -168.49731445]
[100.45928955 -183.61293030]
[105.71321869 -197.79924011]
[115.09540558 -209.66641235]
[127.68668365 -218.05181885]
[142.25347900 -222.13395691]
[157.36868286 -221.51287842]
[171.55146790 -216.24943542]
[183.41233826 -206.85929871]
[191.78930664 -194.26240540]
[195.86167908 -179.69288635]
[195.23046875 -164.57809448]
[189.95753479 -150.39884949]
[180.55944824 -138.54425049]
[167.95695496 -130.17573547]
[153.38470459 -126.11312866]
[152.76887512 -111.12577820]
[152.15304565 -96.13842010]
[151.53721619 -81.15106964]
[150.92140198 -66.16371918]
[150.30557251 -51.17636490]
[159.50929260 -63.02083969]
[172.88732910 -69.80522156]
[187.88125610 -70.23203278]
[201.62358093 -64.21966553]
[211.48617554 -52.91792679]
[215.58288574 -38.48820114]
[213.13026428 -23.69007301]
[204.59732056 -11.35357952]
[191.61596680 -3.83798671]
[176.66874695 -2.58059978]
[162.61425781 -7.82188511]
[152.14028931 -18.55948257]
[147.24977112 -32.74126434]
[142.99693298 -18.35678101]
[138.74407959 -3.97230077]
[134.49122620 10.41217995]
[130.23838806 24.79666138]
[125.98554230 39.18114090]
[121.73268890 53.56562424]
[125.54402161 67.96434021]
[114.21154785 79.00452423]
[109.95870209 93.38900757]
[121.98477173 84.42387390]
[136.77923584 81.94921112]
[151.06822205 86.51262665]
[161.68974304 97.10429382]
[166.29335022 111.38038635]
[163.86032104 126.18174744]
[154.92906189 138.23300171]
[141.47596741 144.86732483]
[126.47806549 144.61660767]
[113.25423431 137.53634644]
[104.73075867 125.19331360]
[102.79412842 110.31597900]
[95.42788696 123.38267517]
[88.06164551 136.44937134]
[80.69541168 149.51606750]
[73.32917023 162.58276367]
[69.52130890 177.09138489]
[69.52130890 192.09138489]
[69.52130890 207.09138489]
[69.52130890 222.09138489]
[69.52130890 237.09138489]
[69.52130890 252.09138489]
[69.52130890 267.09140015]
[69.52130890 282.09140015]
[69.52130890 297.09140015]
[69.52130890 312.09140015]
[69.52130890 327.09140015]
[84.13132477 330.83282471]
[97.35148621 338.09078979]
[108.35075378 348.40905762]
[116.43772125 361.13903809]
[121.10402679 375.48043823]
[122.05634308 390.53182983]
[119.23480988 405.34701538]
[112.81678009 418.99472046]
[103.20571136 430.61703491]
[91.00575256 439.48336792]
[76.98381042 445.03637695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[48 130]
[49 129]
[50 128]
[51 127]
[52 126]
[53 114]
[54 113]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
[62 105]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
