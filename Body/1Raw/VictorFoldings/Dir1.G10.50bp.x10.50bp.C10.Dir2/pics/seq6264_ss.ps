%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUACAAAGGGGGGGGGGCCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGxxxxxxxxxxUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCCCCCCCCCCCUCCCUACAAA\
) } def
/len { sequence length } bind def

/coor [
[94.86195374 365.75622559]
[81.64176178 358.48373413]
[70.75495911 348.03674316]
[62.94382477 335.12750244]
[58.74094391 320.63616943]
[58.43287277 305.55084229]
[62.04061127 290.90002441]
[69.31818390 277.68261719]
[79.76939392 266.79986572]
[92.68165588 258.99371338]
[107.17459106 254.79641724]
[106.86253357 239.79966736]
[106.55047607 224.80291748]
[106.23842621 209.80616760]
[105.92636871 194.80940247]
[105.61431122 179.81265259]
[105.30225372 164.81590271]
[104.99019623 149.81915283]
[104.67813873 134.82238770]
[104.36608887 119.82563782]
[91.75495911 111.70410156]
[77.97257996 117.62406158]
[64.19019318 123.54402161]
[61.75014114 138.77720642]
[51.44474411 150.25772095]
[36.56241989 154.32218933]
[21.85206032 149.67366028]
[12.00769043 137.79544067]
[10.17061234 122.47785187]
[16.92703056 108.60866547]
[30.12099648 100.61348724]
[45.54236603 101.04356384]
[58.27023315 109.76164246]
[72.05261230 103.84168243]
[85.83499146 97.92171478]
[71.05986786 100.50929260]
[56.56208420 96.66035461]
[45.01605606 87.08489990]
[38.55167770 73.54932404]
[38.36142731 58.55053329]
[44.48040771 44.85534668]
[55.77984238 34.99011993]
[70.17533112 30.77468681]
[85.01133728 32.98667145]
[97.55107117 41.21802521]
[105.48131561 53.95031357]
[107.33918762 68.83480835]
[102.78350067 83.12313080]
[110.50758362 70.26473236]
[118.23167419 57.40632629]
[125.95575714 44.54792404]
[130.70956421 30.32114601]
[132.26715088 15.40223408]
[133.82473755 0.48332155]
[135.38230896 -14.43559074]
[122.08850098 -7.48759937]
[108.28301239 -13.35346699]
[104.05653381 -27.74571800]
[112.49829102 -40.14478302]
[127.43803406 -41.48794937]
[137.95581055 -30.79409027]
[141.05412292 -45.47061539]
[144.15245056 -60.14714050]
[145.86514282 -75.04904175]
[146.17720032 -90.04579926]
[146.48925781 -105.04254913]
[146.80130005 -120.03930664]
[147.11335754 -135.03605652]
[147.42541504 -150.03280640]
[133.62707520 -156.47685242]
[123.64759064 -167.98031616]
[119.21596527 -182.55017090]
[121.10001373 -197.66209412]
[128.97331238 -210.69786072]
[141.47175598 -219.39892578]
[156.42991638 -222.25781250]
[171.25621033 -218.77917480]
[183.38188171 -209.56570435]
[190.70610046 -196.21371460]
[191.95988464 -181.03649902]
[186.92601013 -166.66360474]
[176.47663879 -155.58522034]
[162.42218018 -149.72074890]
[162.11012268 -134.72399902]
[161.79806519 -119.72724915]
[161.48600769 -104.73049164]
[161.17395020 -89.73374176]
[160.86189270 -74.73698425]
[170.86598206 -85.91366577]
[185.28434753 -90.05019379]
[199.69216919 -85.87710571]
[209.66787720 -74.67508698]
[212.15005493 -59.88188553]
[206.37693787 -46.03734970]
[194.12025452 -37.39018631]
[179.14138794 -36.59410477]
[166.03718567 -43.89340973]
[158.82897949 -57.04882050]
[155.73065186 -42.37229156]
[152.63232422 -27.69576836]
[150.30122375 -12.87800980]
[148.74365234 2.04090238]
[147.18606567 16.95981407]
[145.62847900 31.87872696]
[154.69764709 19.93091393]
[166.60762024 10.81211185]
[180.50758362 5.17374897]
[195.40454102 3.41861844]
[210.23429871 5.67210197]
[223.93745422 11.77321529]
[235.53507996 21.28610992]
[244.19866943 33.53120422]
[249.30929565 47.63373566]
[250.50189209 62.58625031]
[247.69125366 77.32057190]
[241.07817078 90.78411865]
[231.13505554 102.01508331]
[218.57223511 110.21114349]
[204.28715515 114.78679657]
[189.30032349 115.41516876]
[174.68235779 112.05136108]
[161.47753906 104.93569183]
[150.62919617 94.57647705]
[142.91229248 81.71376038]
[138.87812805 67.26642609]
[138.81416321 52.27201080]
[131.09007263 65.13040924]
[123.36598969 77.98881531]
[115.64190674 90.84721375]
[119.36283875 119.51358795]
[119.67489624 134.51034546]
[119.98695374 149.50709534]
[120.29901123 164.50384521]
[120.61106110 179.50059509]
[120.92311859 194.49734497]
[121.23517609 209.49411011]
[121.54723358 224.49085999]
[121.85929108 239.48760986]
[122.17134857 254.48435974]
[136.82633972 258.07513428]
[150.05213928 265.33740234]
[160.94702148 275.77600098]
[168.76811218 288.67919922]
[172.98217773 303.16726685]
[173.30191040 318.25234985]
[169.70547485 332.90597534]
[162.43811035 346.12896729]
[151.99531555 357.01980591]
[139.08908081 364.83590698]
[124.59939575 369.04440308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 35]
[22 34]
[23 33]
[48 129]
[49 128]
[50 127]
[51 126]
[52 104]
[53 103]
[54 102]
[55 101]
[61 100]
[62 99]
[63 98]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
