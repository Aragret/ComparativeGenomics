%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUUAUAGGGGGGGGGGACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGxxxxxxxxxxGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUCCCCCCCCCCAAAUAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 399.88327026]
[71.19830322 393.86724854]
[59.48964310 384.33782959]
[50.78712082 372.00216675]
[45.73651886 357.77563477]
[44.71262741 342.71395874]
[47.79142761 327.93481445]
[54.74444962 314.53488159]
[65.05573273 303.50854492]
[77.96011353 295.67404175]
[92.50000000 291.61273193]
[92.50000000 276.61273193]
[92.50000000 261.61273193]
[92.50000000 246.61271667]
[92.50000000 231.61271667]
[92.50000000 216.61271667]
[92.50000000 201.61271667]
[92.50000000 186.61271667]
[92.50000000 171.61271667]
[92.50000000 156.61271667]
[92.50000000 141.61271667]
[82.26525879 138.38420105]
[73.17298126 132.68301392]
[65.80888367 124.87640381]
[60.64734268 115.46727753]
[58.02087402 105.06175995]
[58.09867096 94.33016968]
[60.87572098 83.96382141]
[66.17312622 74.63051605]
[55.95964432 63.64485168]
[45.74616241 52.65918732]
[35.53268433 41.67352295]
[22.65390778 40.41218567]
[14.37241650 30.99752426]
[14.74073505 18.86609077]
[3.64941978 8.76744175]
[-8.43056870 -0.12490775]
[-20.51055717 -9.01725769]
[-32.77292633 -17.65637398]
[-45.21236420 -26.03851700]
[-57.65180588 -34.42065811]
[-70.09124756 -42.80280304]
[-82.53068542 -51.18494797]
[-94.97012329 -59.56708908]
[-107.49608612 -67.81938171]
[-120.10721588 -75.94091797]
[-132.71833801 -84.06246185]
[-145.32946777 -92.18400574]
[-160.72076416 -88.59463501]
[-174.09782410 -97.01068878]
[-177.52426147 -112.43907166]
[-168.96725464 -125.72639465]
[-153.50350952 -128.98953247]
[-140.30738831 -120.29251862]
[-137.20793152 -104.79513550]
[-124.59680176 -96.67359161]
[-111.98567200 -88.55204773]
[-99.37454987 -80.43050385]
[-92.00040436 -79.44679260]
[-86.58798218 -72.00653076]
[-74.14854431 -63.62438583]
[-61.70910263 -55.24224472]
[-49.26966095 -46.86009979]
[-36.83022308 -38.47795868]
[-24.39078140 -30.09581375]
[-19.55608177 -30.13041878]
[-14.66208839 -27.08408928]
[-11.61820698 -21.09724617]
[0.46178111 -12.20489597]
[12.54176903 -3.31254649]
[8.64595795 -17.79780197]
[12.38158035 -32.32519531]
[22.78168297 -43.13434982]
[37.15423203 -47.42735672]
[51.77893066 -44.09297562]
[62.87022781 -33.99430466]
[67.55717468 -19.74535751]
[64.62656403 -5.03442478]
[54.83697891 6.33060980]
[40.72241974 11.40794277]
[25.93650055 8.88336468]
[42.85375977 13.44475174]
[46.51834869 31.46004105]
[56.73183060 42.44570541]
[66.94530487 53.43136978]
[77.15879059 64.41703796]
[104.39063263 57.94538498]
[129.69847107 69.90234375]
[141.96084595 61.26322556]
[154.22320557 52.62411118]
[166.48558044 43.98499298]
[178.74794006 35.34587860]
[184.00440979 27.79462433]
[191.35649109 26.65771484]
[203.79592896 18.27557182]
[216.23536682 9.89342880]
[228.67480469 1.51128578]
[238.43139648 -12.35397816]
[254.45568848 -6.81697845]
[253.57102966 10.11387348]
[237.05696106 13.95072651]
[224.61750793 22.33286858]
[212.17807007 30.71501350]
[199.73863220 39.09715652]
[187.38705444 47.60824585]
[175.12469482 56.24736023]
[162.86231995 64.88647461]
[150.59996033 73.52559662]
[138.33758545 82.16471100]
[140.75157166 88.72268677]
[142.05245972 95.58869934]
[142.20469666 102.57520294]
[156.77740479 106.12996674]
[171.35009766 109.68472290]
[185.92280579 113.23948669]
[200.49551392 116.79425049]
[214.89653015 109.72388458]
[229.34114075 116.70477295]
[232.74867249 132.38177490]
[222.50515747 144.72883606]
[206.46853638 144.27433777]
[196.94075012 131.36695862]
[182.36804199 127.81218719]
[167.79534912 124.25743103]
[153.22264099 120.70266724]
[138.64993286 117.14790344]
[133.36956787 125.96807098]
[126.11677551 133.25331116]
[117.32027435 138.57299805]
[107.50000000 141.61271667]
[107.50000000 156.61271667]
[107.50000000 171.61271667]
[107.50000000 186.61271667]
[107.50000000 201.61271667]
[107.50000000 216.61271667]
[107.50000000 231.61271667]
[107.50000000 246.61271667]
[107.50000000 261.61273193]
[107.50000000 276.61273193]
[107.50000000 291.61273193]
[122.03988647 295.67404175]
[134.94427490 303.50854492]
[145.25555420 314.53488159]
[152.20857239 327.93481445]
[155.28736877 342.71395874]
[154.26348877 357.77563477]
[149.21287537 372.00216675]
[140.51036072 384.33782959]
[128.80169678 393.86724854]
[114.95575714 399.88327026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 86]
[30 85]
[31 84]
[32 83]
[35 81]
[36 70]
[37 69]
[38 68]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 58]
[46 57]
[47 56]
[48 55]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[94 104]
[95 103]
[96 102]
[97 101]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
