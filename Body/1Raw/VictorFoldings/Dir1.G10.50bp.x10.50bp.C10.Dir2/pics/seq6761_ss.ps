%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGACCGCAGGGGGGGGGGACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAxxxxxxxxxxCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCCCCCCCCCCCACACACCGCA\
) } def
/len { sequence length } bind def

/coor [
[71.57660675 391.02194214]
[58.35641098 383.74948120]
[47.46960831 373.30249023]
[39.65847778 360.39321899]
[35.45559692 345.90191650]
[35.14752197 330.81658936]
[38.75526428 316.16574097]
[46.03283691 302.94836426]
[56.48404312 292.06558228]
[69.39630890 284.25946045]
[83.88924408 280.06216431]
[83.57718658 265.06539917]
[83.26512909 250.06864929]
[82.95307159 235.07189941]
[82.64102173 220.07514954]
[82.32896423 205.07839966]
[82.01690674 190.08163452]
[81.70484924 175.08488464]
[81.39279175 160.08813477]
[81.08073425 145.09138489]
[80.76868439 130.09461975]
[70.10705566 119.54333496]
[55.10786438 119.38729858]
[40.10867691 119.23126221]
[25.10948944 119.07522583]
[21.48914909 133.70361328]
[14.59231853 147.10250854]
[4.79093552 158.54933167]
[-7.38642263 167.42675781]
[-21.28304672 173.25604248]
[-36.14950943 175.72282410]
[-51.18408203 174.69406128]
[-65.57596588 170.22523499]
[-78.54903412 162.55735779]
[-89.40365601 152.10394287]
[-97.55445099 139.42872620]
[-102.56186676 125.21526337]
[-104.15586090 110.23007202]
[-102.25046539 95.28128815]
[-96.94844055 81.17507172]
[-88.53571320 68.67216492]
[-77.46597290 58.44682693]
[-64.33619690 51.05049896]
[-49.85445404 46.88205338]
[-34.80173492 46.16629028]
[-19.98980713 48.94181061]
[-6.21746016 55.05893326]
[5.77257919 64.18777466]
[15.33370399 75.83602142]
[21.95029449 89.37549591]
[25.26552582 104.07603455]
[40.26471329 104.23207092]
[55.26390457 104.38810730]
[70.26309204 104.54415131]
[78.83618927 76.98001099]
[107.57695007 68.43840790]
[110.06206512 53.64570236]
[112.54718781 38.85299683]
[115.03230286 24.06028748]
[117.51742554 9.26758099]
[103.26496887 4.49118423]
[89.93522644 -2.45609283]
[77.85647583 -11.40316677]
[67.32614899 -22.12970924]
[58.60356522 -34.37156677]
[51.90353394 -47.82727432]
[47.39104843 -62.16547394]
[45.17722702 -77.03307343]
[45.31658936 -92.06394196]
[47.80570984 -106.88793945]
[52.58328247 -121.13999939]
[59.53165817 -134.46916199]
[68.47972870 -146.54718018]
[79.20713806 -157.07661438]
[91.44971466 -165.79818726]
[104.90597534 -172.49711609]
[119.24454498 -177.00842285]
[134.11233521 -179.22100830]
[149.14318848 -179.08039856]
[163.96697998 -176.59007263]
[178.21864319 -171.81130981]
[191.54722595 -164.86184692]
[203.62451172 -155.91276550]
[214.15307617 -145.18449402]
[222.87362671 -132.94119263]
[229.57144165 -119.48438263]
[234.08155823 -105.14543915]
[236.29292297 -90.27747345]
[236.15107727 -75.24662781]
[233.65951538 -60.42304611]
[228.87959290 -46.17177200]
[221.92901611 -32.84375763]
[212.97895813 -20.76721573]
[202.24980164 -10.23954391]
[190.00579834 -1.51999438]
[176.54843140 5.17670584]
[162.20910645 9.68564415]
[147.34095764 11.89578438]
[132.31013489 11.75269985]
[129.82501221 26.54540634]
[127.33988953 41.33811569]
[124.85477448 56.13082123]
[122.36965179 70.92353058]
[127.27671051 56.74887466]
[140.42205811 49.52393723]
[155.01873779 52.97896194]
[163.53042603 65.33011627]
[161.56254578 80.20046997]
[150.13110352 89.91242981]
[135.13629150 89.45088959]
[149.84425354 92.39636993]
[164.89508057 87.51958466]
[175.85522461 97.60544586]
[190.56318665 100.55092621]
[202.65753174 90.63826752]
[218.29339600 90.87050629]
[230.08799744 101.13800049]
[232.47227478 116.59275055]
[224.32048035 129.93748474]
[209.48159790 134.87124634]
[194.96212769 129.06445312]
[187.61770630 115.25888824]
[172.90974426 112.31340790]
[158.91091919 117.40087128]
[146.89877319 107.10433197]
[132.19081116 104.15885162]
[125.08715057 119.32323456]
[111.64125061 128.59539795]
[95.76543427 129.78257751]
[96.07749176 144.77932739]
[96.38954926 159.77607727]
[96.70160675 174.77282715]
[97.01365662 189.76959229]
[97.32571411 204.76634216]
[97.63777161 219.76309204]
[97.94982910 234.75984192]
[98.26188660 249.75660706]
[98.57394409 264.75335693]
[98.88599396 279.75012207]
[113.54099274 283.34088135]
[126.76679993 290.60311890]
[137.66166687 301.04171753]
[145.48275757 313.94494629]
[149.69683838 328.43301392]
[150.01655579 343.51809692]
[146.42013550 358.17169189]
[139.15277100 371.39471436]
[128.70996094 382.28555298]
[115.80373383 390.10165405]
[101.31404114 394.31015015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 54]
[23 53]
[24 52]
[25 51]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[110 126]
[111 125]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
