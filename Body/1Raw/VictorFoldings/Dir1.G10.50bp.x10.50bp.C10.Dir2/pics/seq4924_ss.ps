%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUCAUCAUUAGGGGGGGGGGAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUxxxxxxxxxxGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCCCCCCCCCCCAAACUCAUCACUA\
) } def
/len { sequence length } bind def

/coor [
[68.74401855 560.11279297]
[54.86988831 554.26452637]
[42.51508331 545.65917969]
[32.21970749 534.67285156]
[24.43383026 521.78588867]
[19.49781799 507.56164551]
[17.62744904 492.62191772]
[18.90448952 477.61984253]
[23.27311325 463.21118164]
[30.54234123 450.02590942]
[40.39439392 438.64035034]
[52.39858246 429.55227661]
[66.03013611 423.15896606]
[80.69314575 419.73989868]
[80.39301300 404.74291992]
[80.09288025 389.74591064]
[79.79274750 374.74890137]
[79.49261475 359.75192261]
[79.19248199 344.75491333]
[78.89234924 329.75793457]
[78.59221649 314.76092529]
[78.29208374 299.76391602]
[77.99195099 284.76693726]
[70.00154877 272.19702148]
[77.46117401 258.24481201]
[77.16104126 243.24780273]
[76.86090851 228.25080872]
[76.56077576 213.25379944]
[68.38864899 225.83221436]
[55.86659241 234.09042358]
[41.08640289 236.64894104]
[26.51708031 233.08033752]
[14.59241295 223.98075867]
[7.30439329 210.87026978]
[5.87047434 195.93896484]
[10.53019047 181.68109131]
[20.50514221 170.47840881]
[34.12903214 164.20228577]
[49.12601089 163.90115356]
[62.99085236 169.62532043]
[73.40746307 180.41857910]
[78.63564301 194.47711182]
[82.20295715 179.90747070]
[85.77027130 165.33784485]
[89.33758545 150.76820374]
[92.90489197 136.19856262]
[79.96940613 83.88556671]
[76.98787689 69.18486786]
[74.00634766 54.48417282]
[71.02481842 39.78347778]
[67.93994141 36.54854584]
[66.25054932 32.86364746]
[65.92391968 29.23423004]
[66.76293182 26.10088539]
[68.44252014 23.79031944]
[66.64592743 8.89830017]
[64.84933472 -5.99372005]
[49.82967377 -6.67162085]
[35.12646866 -9.81258011]
[21.14083672 -15.33091068]
[8.25431728 -23.07606888]
[-3.18153691 -32.83676147]
[-12.85474777 -44.34670639]
[-20.50142097 -57.29190826]
[-25.91295242 -71.31920624]
[-28.94171143 -86.04593658]
[-29.50506783 -101.07033539]
[-27.58765793 -115.98252106]
[-23.24178505 -130.37568665]
[-16.58601189 -143.85717773]
[-7.80190897 -156.05920410]
[2.87088370 -166.64888000]
[15.14120579 -175.33732605]
[28.67431450 -181.88751221]
[43.10101700 -186.12072754]
[58.02774048 -187.92150879]
[73.04727173 -187.24070740]
[87.74987030 -184.09690857]
[101.73443604 -178.57589722]
[114.61946869 -170.82824707]
[126.05344391 -161.06535339]
[135.72442627 -149.55354309]
[143.36860657 -136.60687256]
[148.77743530 -122.57852936]
[151.80335999 -107.85121918]
[152.36383057 -92.82671356]
[150.44354248 -77.91489410]
[146.09489441 -63.52256393]
[139.43652344 -50.04235840]
[130.65007019 -37.84202576]
[119.97524261 -27.25440025]
[107.70324707 -18.56832123]
[94.16887665 -12.02075005]
[79.74135590 -7.79030943]
[81.53794861 7.10171080]
[83.33453369 21.99373055]
[85.72550964 36.80194473]
[88.70704651 51.50264359]
[91.68857574 66.20333862]
[94.67010498 80.90403748]
[108.17532349 87.43160248]
[121.54722595 80.63511658]
[134.91912842 73.83863831]
[148.29103088 67.04215240]
[159.67140198 54.47539139]
[174.89746094 61.93218231]
[171.94706726 78.62744141]
[155.08752441 80.41405487]
[141.71560669 87.21054077]
[128.34370422 94.00702667]
[114.97180176 100.80350494]
[118.68470764 115.33672333]
[133.67794800 114.88655853]
[148.67118835 114.43640137]
[160.67230225 103.78967285]
[176.45353699 106.67624664]
[183.90887451 120.88179779]
[177.31922913 135.50903320]
[161.73959351 139.33718872]
[149.12135315 129.42964172]
[134.12811279 129.87980652]
[119.13486481 130.32997131]
[107.47453308 139.76588440]
[103.90721893 154.33551025]
[100.33990479 168.90515137]
[96.77259064 183.47479248]
[93.20527649 198.04441833]
[91.55776978 212.95367432]
[91.85790253 227.95066833]
[92.15803528 242.94766235]
[92.45816803 257.94467163]
[100.47004700 271.58724976]
[92.98895264 284.46679688]
[93.28908539 299.46380615]
[93.58921814 314.46078491]
[93.88935089 329.45779419]
[94.18948364 344.45477295]
[94.48960876 359.45178223]
[94.78974152 374.44879150]
[95.08987427 389.44577026]
[95.39000702 404.44277954]
[95.69013977 419.43975830]
[110.47820282 422.26943970]
[124.35463715 428.11224365]
[136.71282959 436.71273804]
[147.01251221 447.69500732]
[154.80346680 460.57888794]
[159.74507141 474.80120850]
[161.62132263 489.74020386]
[160.35017395 504.74279785]
[155.98722839 519.15313721]
[148.72319031 532.34130859]
[138.87561035 543.73071289]
[126.87500000 552.82354736]
[113.24596405 559.22222900]
[98.58430481 562.64703369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[25 131]
[26 130]
[27 129]
[28 128]
[42 127]
[43 126]
[44 125]
[45 124]
[46 123]
[47 100]
[48 99]
[49 98]
[50 97]
[55 96]
[56 95]
[57 94]
[101 111]
[102 110]
[103 109]
[104 108]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
