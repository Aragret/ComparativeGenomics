%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUCCCAGGGGGGGGGGUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACxxxxxxxxxxUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCCCCCCCCCCCACACCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 389.23522949]
[71.19830322 383.21920776]
[59.48964310 373.68978882]
[50.78712082 361.35412598]
[45.73651886 347.12759399]
[44.71262741 332.06591797]
[47.79142761 317.28674316]
[54.74444962 303.88684082]
[65.05573273 292.86050415]
[77.96011353 285.02600098]
[92.50000000 280.96466064]
[92.50000000 265.96466064]
[92.50000000 250.96467590]
[92.50000000 235.96467590]
[92.50000000 220.96467590]
[92.50000000 205.96467590]
[92.50000000 190.96467590]
[92.50000000 175.96467590]
[92.50000000 160.96467590]
[92.50000000 145.96467590]
[92.50000000 130.96467590]
[92.50000000 115.96467590]
[82.36519623 100.36695099]
[91.84238434 84.36112976]
[91.21840668 69.37411499]
[90.59442902 54.38710022]
[89.97045135 39.40008545]
[89.34647369 24.41306686]
[88.72249603 9.42605114]
[73.72194672 9.02586365]
[58.78367233 7.60293055]
[43.97732925 5.16388607]
[29.37195015 1.72010326]
[15.03563213 -2.71236205]
[1.03521991 -8.11284351]
[-12.56401062 -14.45616055]
[-25.69865227 -21.71273804]
[-38.30746460 -29.84874153]
[-50.33166122 -38.82624054]
[-61.71517944 -48.60337067]
[-72.40493774 -59.13455200]
[-82.35110474 -70.37068176]
[-91.50729370 -82.25936890]
[-99.83082581 -94.74517822]
[-107.28289032 -107.76990509]
[-113.82873535 -121.27281952]
[-119.43784332 -135.19096375]
[-124.08406830 -149.45942688]
[-127.74574280 -164.01171875]
[-130.40579224 -178.77995300]
[-132.05181885 -193.69529724]
[-132.67613220 -208.68818665]
[-132.27584839 -223.68873596]
[-130.85281372 -238.62699890]
[-128.41366577 -253.43333435]
[-124.96978760 -268.03869629]
[-120.53723145 -282.37496948]
[-115.13665771 -296.37536621]
[-108.79324341 -309.97454834]
[-101.53658295 -323.10913086]
[-93.40048981 -335.71789551]
[-84.42291260 -347.74203491]
[-74.64570618 -359.12548828]
[-64.11445618 -369.81515503]
[-52.87826157 -379.76126099]
[-40.98951340 -388.91735840]
[-28.50364113 -397.24081421]
[-15.47886372 -404.69277954]
[-1.97590756 -411.23855591]
[11.94227028 -416.84756470]
[26.21077538 -421.49368286]
[40.76308060 -425.15527344]
[55.53133774 -427.81521606]
[70.44668579 -429.46115112]
[85.43959045 -430.08535767]
[100.44013977 -429.68496704]
[115.37839508 -428.26184082]
[130.18470764 -425.82260132]
[144.79003906 -422.37863159]
[159.12629700 -417.94595337]
[173.12663269 -412.54528809]
[186.72578430 -406.20178223]
[199.86032104 -398.94503784]
[212.46902466 -390.80886841]
[224.49310303 -381.83120728]
[235.87649536 -372.05392456]
[246.56610107 -361.52261353]
[256.51211548 -350.28634644]
[265.66815186 -338.39752197]
[273.99151611 -325.91159058]
[281.44342041 -312.88677979]
[287.98907471 -299.38378906]
[293.59799194 -285.46557617]
[298.24401855 -271.19702148]
[301.90551758 -256.64468384]
[304.56536865 -241.87641907]
[306.21118164 -226.96105957]
[306.83529663 -211.96815491]
[306.43481445 -196.96760559]
[305.01156616 -182.02935791]
[302.57223511 -167.22306824]
[299.12817383 -152.61775208]
[294.69540405 -138.28152466]
[289.29464722 -124.28122711]
[282.95104980 -110.68212128]
[275.69421387 -97.54763031]
[267.55795288 -84.93898010]
[258.58020020 -72.91496277]
[248.80285645 -61.53164291]
[238.27145386 -50.84209442]
[227.03512573 -40.89615631]
[215.14625549 -31.74020195]
[202.66027832 -23.41692162]
[189.63540649 -15.96512318]
[176.13235474 -9.41954803]
[162.21409607 -3.81071734]
[147.94554138 0.83521885]
[133.39317322 4.49659872]
[118.62488556 7.15635061]
[103.70951843 8.80207443]
[104.33348846 23.78908920]
[104.95746613 38.77610779]
[105.58144379 53.76312256]
[106.20542145 68.75013733]
[106.82939911 83.73715210]
[114.58746338 90.08402252]
[117.63480377 99.63304901]
[114.98732758 109.30058289]
[107.50000000 115.96467590]
[107.50000000 130.96467590]
[107.50000000 145.96467590]
[107.50000000 160.96467590]
[107.50000000 175.96467590]
[107.50000000 190.96467590]
[107.50000000 205.96467590]
[107.50000000 220.96467590]
[107.50000000 235.96467590]
[107.50000000 250.96467590]
[107.50000000 265.96466064]
[107.50000000 280.96466064]
[122.03988647 285.02600098]
[134.94427490 292.86050415]
[145.25555420 303.88684082]
[152.20857239 317.28674316]
[155.28736877 332.06591797]
[154.26348877 347.12759399]
[149.21287537 361.35412598]
[140.51036072 373.68978882]
[128.80169678 383.21920776]
[114.95575714 389.23522949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[29 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
