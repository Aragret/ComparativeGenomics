%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCUUAAUGGGGGGGGGGCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACAxxxxxxxxxxUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUCCCCCCCCCCUCGCCUUAAU\
) } def
/len { sequence length } bind def

/coor [
[107.88643646 372.24114990]
[94.04049683 366.22512817]
[82.33183289 356.69570923]
[73.62931061 344.36004639]
[68.57871246 330.13351440]
[67.55481720 315.07183838]
[70.63362122 300.29266357]
[77.58663940 286.89273071]
[87.89792633 275.86639404]
[100.80230713 268.03189087]
[115.34219360 263.97058105]
[115.34219360 248.97058105]
[115.34219360 233.97058105]
[115.34219360 218.97058105]
[115.34219360 203.97058105]
[115.34219360 188.97058105]
[115.34219360 173.97058105]
[115.34219360 158.97058105]
[115.34219360 143.97058105]
[115.34219360 128.97058105]
[109.03662872 124.90981293]
[100.91487885 137.52081299]
[88.30401611 129.39884949]
[96.42549896 116.78826904]
[90.11993408 112.72750092]
[81.02760315 126.37526703]
[64.68167877 125.05507660]
[57.89745331 110.12503052]
[67.65395355 96.94387817]
[83.91452789 99.07125854]
[93.17947388 87.27462006]
[95.97180176 72.53681183]
[98.76412964 57.79900742]
[101.55644989 43.06120300]
[91.44569397 28.82357979]
[94.66493988 12.00333786]
[108.75320435 2.87213922]
[111.23831940 -11.92056751]
[105.89428711 -26.81190300]
[115.63324738 -38.08141708]
[118.11836243 -52.87412262]
[120.60347748 -67.66683197]
[114.68344879 -95.63167572]
[111.58512878 -110.30819702]
[108.48680878 -124.98472595]
[105.38848877 -139.66125488]
[102.29016113 -154.33776855]
[87.31314087 -153.17858887]
[72.31294250 -153.98426819]
[57.54624557 -156.74102783]
[43.26573181 -161.40170288]
[29.71575356 -167.88653564]
[17.12817192 -176.08457947]
[5.71837521 -185.85552979]
[-4.31839895 -197.03221130]
[-12.81040859 -209.42337036]
[-19.61234283 -222.81697083]
[-24.60781479 -236.98384094]
[-27.71134186 -251.68156433]
[-28.86982155 -266.65866089]
[-28.06342888 -281.65881348]
[-25.30596352 -296.42538452]
[-20.64460945 -310.70565796]
[-14.15912628 -324.25534058]
[-5.96049118 -336.84252930]
[3.81100726 -348.25186157]
[14.98816490 -358.28811646]
[27.37972641 -366.77951050]
[40.77365875 -373.58081055]
[54.94076920 -378.57562256]
[69.63864136 -381.67843628]
[84.61577606 -382.83621216]
[99.61589813 -382.02911377]
[114.38233185 -379.27093506]
[128.66239929 -374.60888672]
[142.21176147 -368.12277222]
[154.79856873 -359.92355347]
[166.20742798 -350.15148926]
[176.24313354 -338.97387695]
[184.73396301 -326.58190918]
[191.53462219 -313.18765259]
[196.52874756 -299.02029419]
[199.63087463 -284.32226562]
[200.78793335 -269.34509277]
[199.98011780 -254.34500122]
[197.22123718 -239.57870483]
[192.55853271 -225.29884338]
[186.07174683 -211.74980164]
[177.87191772 -199.16339111]
[168.09933472 -187.75498962]
[156.92121887 -177.71980286]
[144.52885437 -169.22956848]
[131.13427734 -162.42955017]
[116.96669006 -157.43609619]
[120.06501007 -142.75956726]
[123.16333008 -128.08305359]
[126.26165771 -113.40651703]
[129.35997009 -98.72999573]
[142.05490112 -90.74008179]
[156.62760925 -94.29483795]
[171.20031738 -97.84960175]
[185.77301025 -101.40436554]
[200.34571838 -104.95912933]
[214.91842651 -108.51388550]
[222.91181946 -122.14771271]
[238.22543335 -126.05520630]
[251.77398682 -117.91811371]
[255.51936340 -102.56403351]
[247.23947144 -89.10226440]
[231.84664917 -85.51943970]
[218.47317505 -93.94118500]
[203.90048218 -90.38642120]
[189.32777405 -86.83166504]
[174.75506592 -83.27690125]
[160.18237305 -79.72213745]
[145.60966492 -76.16737366]
[135.39619446 -65.18170929]
[132.91107178 -50.38900375]
[130.42594910 -35.59629822]
[135.94773865 -21.76303673]
[126.03102875 -9.43544960]
[123.54590607 5.35725784]
[132.43588257 14.73622799]
[134.30873108 27.71955490]
[128.25463867 39.57602310]
[116.29425812 45.85352707]
[113.50193024 60.59133148]
[110.70960999 75.32913971]
[107.91728210 90.06694794]
[127.26424408 98.14904785]
[130.34219360 128.97058105]
[130.34219360 143.97058105]
[130.34219360 158.97058105]
[130.34219360 173.97058105]
[130.34219360 188.97058105]
[130.34219360 203.97058105]
[130.34219360 218.97058105]
[130.34219360 233.97058105]
[130.34219360 248.97058105]
[130.34219360 263.97058105]
[144.88208008 268.03189087]
[157.78645325 275.86639404]
[168.09774780 286.89273071]
[175.05076599 300.29266357]
[178.12956238 315.07183838]
[177.10566711 330.13351440]
[172.05506897 344.36004639]
[163.35255432 356.69570923]
[151.64389038 366.22512817]
[137.79794312 372.24114990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 30]
[31 129]
[32 128]
[33 127]
[34 126]
[37 122]
[38 121]
[40 119]
[41 118]
[42 117]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
