%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAAACCCGGGGGGGGGGCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAxxxxxxxxxxCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUCCCCCCCCCCACUAAACCCC\
) } def
/len { sequence length } bind def

/coor [
[79.04337311 376.72778320]
[65.19743347 370.71176147]
[53.48877335 361.18234253]
[44.78625107 348.84667969]
[39.73564911 334.62014771]
[38.71175766 319.55847168]
[41.79055405 304.77929688]
[48.74357605 291.37939453]
[59.05485916 280.35305786]
[71.95924377 272.51855469]
[86.49913025 268.45721436]
[86.49913025 253.45722961]
[86.49913025 238.45722961]
[86.49913025 223.45722961]
[86.49913025 208.45722961]
[86.49913025 193.45722961]
[86.49913025 178.45722961]
[86.49913025 163.45722961]
[86.49913025 148.45722961]
[86.49913025 133.45722961]
[74.05969238 125.07508850]
[60.15713120 130.70704651]
[46.25457764 136.33900452]
[44.21059418 151.56127930]
[34.81661224 163.71235657]
[20.59956551 169.52365112]
[5.38377142 167.43196106]
[-6.73780107 157.99993896]
[-12.50450897 143.76475525]
[-10.36513615 128.55558777]
[-0.89516455 116.46363831]
[13.35803223 110.74157715]
[28.56041527 112.92861176]
[40.62261963 122.43643951]
[54.52517700 116.80448914]
[68.42773438 111.17253113]
[74.88139343 83.23497772]
[98.55817413 73.13043976]
[101.96115112 58.52154541]
[89.30955505 50.20515060]
[80.28356171 38.08478165]
[75.95706940 23.63480759]
[76.83377075 8.60478973]
[82.78858185 -5.19237232]
[93.08508301 -16.09909630]
[106.46650696 -22.81226158]
[121.30915070 -24.53888130]
[124.71212769 -39.14777374]
[128.11511230 -53.75666428]
[131.51808167 -68.36555481]
[123.11565399 -78.94179535]
[122.37054443 -92.23362732]
[129.33145142 -103.35208893]
[141.25384521 -108.33741760]
[144.96000671 -122.87235260]
[148.66616821 -137.40728760]
[151.91699219 -152.05078125]
[154.70930481 -166.78858948]
[157.50163269 -181.52639771]
[160.29396057 -196.26420593]
[163.08628845 -211.00201416]
[158.05320740 -226.00129700]
[168.02450562 -237.06576538]
[170.81681824 -251.80357361]
[161.98171997 -262.02111816]
[160.68432617 -275.27044678]
[167.17669678 -286.66885376]
[178.88139343 -292.14581299]
[181.97970581 -306.82235718]
[185.07803345 -321.49887085]
[171.76945496 -328.64440918]
[161.01406860 -339.25091553]
[153.68374634 -352.45861816]
[150.37274170 -367.19677734]
[151.34945679 -382.27069092]
[156.53472900 -396.45834351]
[165.50817871 -408.60964966]
[177.54240417 -417.73950195]
[191.66181946 -423.10781860]
[206.72183228 -424.27938843]
[221.50160217 -421.15927124]
[234.80299377 -414.00039673]
[245.54771423 -403.38308716]
[252.86476135 -390.16802979]
[256.16094971 -375.42654419]
[255.16909790 -360.35360718]
[249.96958923 -346.17117310]
[240.98391724 -334.02890015]
[228.94053650 -324.91113281]
[214.81573486 -319.55700684]
[199.75456238 -318.40054321]
[196.65623474 -303.72402954]
[193.55790710 -289.04748535]
[203.32954407 -275.39566040]
[200.17279053 -258.56356812]
[185.55462646 -249.01124573]
[182.76231384 -234.27343750]
[187.99511719 -220.32830811]
[177.82409668 -208.20968628]
[175.03176880 -193.47187805]
[172.23944092 -178.73406982]
[169.44711304 -163.99627686]
[166.65480042 -149.25846863]
[168.38133240 -146.11418152]
[168.63220215 -141.96221924]
[166.94395447 -137.52349854]
[163.20109558 -133.70112610]
[159.49493408 -119.16619110]
[155.78877258 -104.63125610]
[164.98405457 -90.58473206]
[161.12985229 -73.89852905]
[146.12696838 -64.96257782]
[142.72399902 -50.35368729]
[139.32101440 -35.74479675]
[135.91804504 -21.13590240]
[148.46984863 -13.02805042]
[157.50730896 -1.09265983]
[161.92425537 13.24139500]
[161.16912842 28.24976921]
[155.31382751 42.12007904]
[145.04724121 53.17075729]
[131.59436035 60.05492401]
[116.57004547 61.92452240]
[113.16706848 76.53341675]
[121.47605133 82.27084351]
[127.32060242 90.92317963]
[129.69422913 101.44414520]
[128.02972412 112.44849396]
[122.30897522 122.39431763]
[113.09818268 129.79879761]
[101.49913025 133.45722961]
[101.49913025 148.45722961]
[101.49913025 163.45722961]
[101.49913025 178.45722961]
[101.49913025 193.45722961]
[101.49913025 208.45722961]
[101.49913025 223.45722961]
[101.49913025 238.45722961]
[101.49913025 253.45722961]
[101.49913025 268.45721436]
[116.03901672 272.51855469]
[128.94338989 280.35305786]
[139.25468445 291.37939453]
[146.20770264 304.77929688]
[149.28649902 319.55847168]
[148.26260376 334.62014771]
[143.21200562 348.84667969]
[134.50949097 361.18234253]
[122.80081940 370.71176147]
[108.95488739 376.72778320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 36]
[22 35]
[23 34]
[38 124]
[39 123]
[47 115]
[48 114]
[49 113]
[50 112]
[54 109]
[55 108]
[56 107]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[63 97]
[64 96]
[68 93]
[69 92]
[70 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
