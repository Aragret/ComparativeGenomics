%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAAACCAUUUGGGGGGGGGGACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUxxxxxxxxxxGAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUACCCCCCCCCCAACCAAACCACUU\
) } def
/len { sequence length } bind def

/coor [
[0.66237527 674.53112793]
[-13.60939407 669.72167969]
[-26.51337814 661.95629883]
[-37.44603348 651.59814453]
[-45.89601898 639.13171387]
[-51.46811295 625.14007568]
[-53.90170288 610.27764893]
[-53.08296204 595.23956299]
[-49.05018616 580.72918701]
[-41.99199295 567.42523193]
[-32.23850632 555.94989014]
[-20.24592018 546.83990479]
[-6.57514381 540.52136230]
[8.13441372 537.28979492]
[8.13441372 522.28979492]
[8.13441372 507.28979492]
[8.13441372 492.28979492]
[8.13441372 477.28979492]
[8.13441372 462.28979492]
[8.13441372 447.28979492]
[8.13441372 432.28979492]
[8.13441372 417.28979492]
[8.13441372 402.28979492]
[-4.24304199 393.81637573]
[-18.22693443 399.24322510]
[-21.20633698 414.38015747]
[-31.91287613 425.48754883]
[-46.93013382 429.02102661]
[-61.46616364 423.85308838]
[-70.88256073 411.63281250]
[-72.17459869 396.25964355]
[-64.92998505 382.63909912]
[-51.46044922 375.11746216]
[-36.06407547 376.09481812]
[-23.65378952 385.25933838]
[-9.66989803 379.83248901]
[1.94076800 379.13314819]
[10.81337261 383.28930664]
[14.96075439 368.87408447]
[19.10813713 354.45883179]
[23.25551796 340.04357910]
[27.40290070 325.62835693]
[31.55028343 311.21310425]
[19.44425964 300.82211304]
[13.04608822 286.14398193]
[13.67837429 270.08633423]
[21.26551247 255.85424805]
[34.33870316 246.31036377]
[50.32003021 243.39927673]
[54.17814636 228.90393066]
[58.03626633 214.40859985]
[61.89438629 199.91325378]
[65.75251007 185.41790771]
[61.54907608 171.12873840]
[72.57557678 159.78295898]
[66.77504730 149.12794495]
[69.91201782 136.99372864]
[80.82694244 130.05316162]
[84.97432709 115.63791656]
[89.12170410 101.22267151]
[89.87177277 86.24143982]
[87.18498230 71.48403168]
[72.14109039 70.42003632]
[57.83469009 65.64743042]
[45.16510010 57.46621323]
[34.92874146 46.39066696]
[27.76907539 33.11700821]
[24.13616753 18.47963142]
[24.25838470 3.39865446]
[28.12804604 -11.17792034]
[35.50189972 -24.33379745]
[45.91641998 -35.24198914]
[58.71693802 -43.21679306]
[73.09880829 -47.75690842]
[88.15796661 -48.57693863]
[102.94779205 -45.62533951]
[116.53857422 -39.08764648]
[128.07598877 -29.37482834]
[136.83479309 -17.09743881]
[142.26438904 -3.02724624]
[144.02346802 11.95128727]
[142.00144958 26.89659691]
[136.32545471 40.86920929]
[127.35227203 52.99079132]
[115.64595795 62.49937439]
[101.94239044 68.79724121]
[104.62918091 83.55464935]
[119.35897827 86.38895416]
[127.33037567 73.68238831]
[135.30177307 60.97582626]
[135.36219788 44.57678986]
[149.72688293 36.66553497]
[163.61866760 45.38048172]
[162.74688721 61.75643921]
[148.00834656 68.94722748]
[140.03694153 81.65379333]
[132.06553650 94.36035156]
[142.93409729 104.69836426]
[155.22615051 96.10154724]
[167.51821899 87.50473785]
[173.96301270 72.42505646]
[190.27488708 70.73548889]
[199.67358398 84.17411041]
[192.49052429 98.91641998]
[176.11503601 99.79679871]
[163.82296753 108.39360809]
[151.53091431 116.99042511]
[137.40484619 119.75756073]
[124.09398651 118.44706726]
[112.53229523 113.45526123]
[103.53694916 105.37005615]
[99.38956451 119.78530121]
[95.24218750 134.20054626]
[100.11088562 151.93254089]
[87.07092285 163.64106750]
[90.99839020 178.96705627]
[80.24784851 189.27603149]
[76.38973236 203.77137756]
[72.53160858 218.26670837]
[68.67349243 232.76205444]
[64.81536865 247.25740051]
[75.90715790 256.06384277]
[82.77468109 268.40045166]
[84.40614319 282.38146973]
[80.58720398 295.88433838]
[71.92849731 306.87173462]
[59.76824570 313.69903564]
[45.96552658 315.36047363]
[41.81814194 329.77572632]
[37.67076111 344.19097900]
[33.52338028 358.60620117]
[29.37599754 373.02145386]
[25.22861481 387.43670654]
[23.13441467 402.28979492]
[23.13441467 417.28979492]
[23.13441467 432.28979492]
[23.13441467 447.28979492]
[23.13441467 462.28979492]
[23.13441467 477.28979492]
[23.13441467 492.28979492]
[23.13441467 507.28979492]
[23.13441467 522.28979492]
[23.13441467 537.28979492]
[37.84397125 540.52136230]
[51.51474762 546.83990479]
[63.50733566 555.94989014]
[73.26081848 567.42523193]
[80.31901550 580.72918701]
[84.35179138 595.23956299]
[85.17053223 610.27764893]
[82.73694611 625.14007568]
[77.16484833 639.13171387]
[68.71485901 651.59814453]
[57.78220367 661.95629883]
[44.87822342 669.72167969]
[30.60645294 674.53112793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 36]
[25 35]
[38 133]
[39 132]
[40 131]
[41 130]
[42 129]
[43 128]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[55 115]
[58 113]
[59 112]
[60 111]
[61 87]
[62 86]
[88 97]
[89 96]
[90 95]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
