%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACAUUCAGGGGGGGGGGAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGxxxxxxxxxxGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUUAAUUCCCCCCCCCCAUAACAUUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.70864868]
[71.19830322 381.69262695]
[59.48964310 372.16320801]
[50.78712082 359.82754517]
[45.73651886 345.60101318]
[44.71262741 330.53933716]
[47.79142761 315.76016235]
[54.74444962 302.36026001]
[65.05573273 291.33392334]
[77.96011353 283.49942017]
[92.50000000 279.43807983]
[92.50000000 264.43807983]
[92.50000000 249.43809509]
[92.50000000 234.43809509]
[92.50000000 219.43809509]
[92.50000000 204.43809509]
[92.50000000 189.43809509]
[92.50000000 174.43809509]
[92.50000000 159.43809509]
[92.50000000 144.43809509]
[92.50000000 129.43809509]
[92.50000000 114.43809509]
[83.73101807 100.16924286]
[92.20125580 85.72106171]
[91.88919830 70.72430420]
[91.57714081 55.72755432]
[76.58570862 55.08776855]
[61.66503143 53.49845505]
[46.87519455 50.96600723]
[32.27575302 47.50062943]
[17.92549515 43.11626816]
[3.88220263 37.83058167]
[-9.79757595 31.66485596]
[-23.05875587 24.64391518]
[-35.84793854 16.79603004]
[-48.11362839 8.15280247]
[-59.80643463 -1.25096405]
[-70.87927246 -11.37740326]
[-81.28755951 -22.18574142]
[-90.98937988 -33.63245392]
[-99.94566345 -45.67144775]
[-108.12036133 -58.25424957]
[-115.48053741 -71.33019257]
[-121.99657440 -84.84661865]
[-127.64221954 -98.74910736]
[-132.39474487 -112.98168182]
[-136.23501587 -127.48701477]
[-139.14756775 -142.20672607]
[-141.12066650 -157.08151245]
[-142.14637756 -172.05149841]
[-142.22055054 -187.05639648]
[-141.34291077 -202.03579712]
[-139.51699829 -216.92936707]
[-136.75012207 -231.67713928]
[-133.05346680 -246.21974182]
[-128.44190979 -260.49859619]
[-122.93399811 -274.45623779]
[-116.55193329 -288.03643799]
[-109.32140350 -301.18450928]
[-101.27152252 -313.84753418]
[-92.43470764 -325.97448730]
[-82.84654999 -337.51657104]
[-72.54563904 -348.42730713]
[-61.57347107 -358.66271973]
[-49.97422028 -368.18164062]
[-37.79459381 -376.94573975]
[-25.08363152 -384.91970825]
[-11.89252090 -392.07141113]
[1.72562397 -398.37210083]
[15.71596622 -403.79638672]
[30.02217102 -408.32241821]
[44.58663559 -411.93197632]
[59.35070801 -414.61053467]
[74.25493622 -416.34732056]
[89.23931885 -417.13531494]
[104.24350739 -416.97131348]
[119.20708466 -415.85604858]
[134.06980896 -413.79397583]
[148.77180481 -410.79339600]
[163.25390625 -406.86639404]
[177.45777893 -402.02877808]
[191.32623291 -396.30004883]
[204.80343628 -389.70324707]
[217.83509827 -382.26495361]
[230.36875916 -374.01510620]
[242.35394287 -364.98693848]
[253.74238586 -355.21679688]
[264.48825073 -344.74401855]
[274.54824829 -333.61077881]
[283.88186646 -321.86190796]
[292.45153809 -309.54470825]
[300.22274780 -296.70880127]
[307.16421509 -283.40582275]
[313.24795532 -269.68939209]
[318.44952393 -255.61473083]
[322.74792480 -241.23849487]
[326.12588501 -226.61857605]
[328.56979370 -211.81385803]
[330.06979370 -196.88392639]
[330.61984253 -181.88893127]
[330.21774292 -166.88923645]
[328.86511230 -151.94525146]
[326.56741333 -137.11712646]
[323.33386230 -122.46459198]
[319.17752075 -108.04664612]
[314.11508179 -93.92134094]
[308.16693115 -80.14555359]
[301.35708618 -66.77475739]
[293.71289062 -53.86279678]
[285.26513672 -41.46165085]
[276.04788208 -29.62126732]
[266.09823608 -18.38931656]
[255.45622253 -7.81102896]
[244.16471863 2.07100105]
[232.26919556 11.21698093]
[219.81753540 19.59008408]
[206.85989380 27.15659332]
[193.44844055 33.88603973]
[179.63719177 39.75133133]
[165.48173523 44.72884369]
[151.03907776 48.79853821]
[136.36740112 51.94402695]
[121.52574158 54.15264511]
[106.57389832 55.41549683]
[106.88595581 70.41224670]
[107.19801331 85.40900421]
[115.12266541 93.99886322]
[115.24423218 105.68522644]
[107.50000000 114.43809509]
[107.50000000 129.43809509]
[107.50000000 144.43809509]
[107.50000000 159.43809509]
[107.50000000 174.43809509]
[107.50000000 189.43809509]
[107.50000000 204.43809509]
[107.50000000 219.43809509]
[107.50000000 234.43809509]
[107.50000000 249.43809509]
[107.50000000 264.43807983]
[107.50000000 279.43807983]
[122.03988647 283.49942017]
[134.94427490 291.33392334]
[145.25555420 302.36026001]
[152.20857239 315.76016235]
[155.28736877 330.53933716]
[154.26348877 345.60101318]
[149.21287537 359.82754517]
[140.51036072 372.16320801]
[128.80169678 381.69262695]
[114.95575714 387.70864868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 126]
[25 125]
[26 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
