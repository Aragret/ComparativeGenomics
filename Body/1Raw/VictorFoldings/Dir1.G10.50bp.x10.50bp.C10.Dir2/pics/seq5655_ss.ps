%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUACGGGGGGGGGGCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAAxxxxxxxxxxCCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCCCCCCCCCCCUACUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[83.48797607 383.64312744]
[70.26777649 376.37066650]
[59.38097382 365.92364502]
[51.56984329 353.01440430]
[47.36696243 338.52310181]
[47.05888748 323.43774414]
[50.66662979 308.78692627]
[57.94420242 295.56954956]
[68.39540863 284.68676758]
[81.30767059 276.88061523]
[95.80060577 272.68334961]
[95.48855591 257.68658447]
[95.17649841 242.68983459]
[94.86444092 227.69308472]
[94.55238342 212.69631958]
[94.24032593 197.69956970]
[93.92826843 182.70281982]
[93.61621857 167.70606995]
[93.30416107 152.70930481]
[92.99210358 137.71255493]
[92.52406311 122.71985626]
[91.90008545 107.73284149]
[88.04292297 93.23724365]
[81.13592529 79.92208862]
[74.22892761 66.60693359]
[60.39984894 72.43759918]
[46.15123749 77.15110779]
[31.57317543 80.71765137]
[16.75783348 83.11468506]
[1.79888165 84.32704926]
[-13.20910549 84.34707642]
[-28.17124176 83.17465210]
[-42.99292755 80.81717682]
[-57.58045959 77.28956604]
[-71.84160614 72.61411285]
[-85.68619537 66.82038879]
[-99.02671051 59.94501114]
[-111.77880096 52.03145599]
[-123.86183929 43.12975311]
[-135.19943237 33.29618835]
[-145.71989441 22.59292603]
[-155.35673523 11.08764172]
[-164.04899597 -1.14692521]
[-171.74174500 -14.03342247]
[-178.38632202 -27.49037743]
[-183.94073486 -41.43270874]
[-188.36985779 -55.77226639]
[-191.64569092 -70.41838837]
[-193.74752808 -85.27848816]
[-194.66207886 -100.25859833]
[-194.38356018 -115.26400757]
[-192.91372681 -130.19985962]
[-190.26187134 -144.97172546]
[-186.44476318 -159.48619080]
[-181.48654175 -173.65150452]
[-175.41854858 -187.37809753]
[-168.27915955 -200.57920837]
[-160.11347961 -213.17134094]
[-150.97317505 -225.07490540]
[-140.91601562 -236.21464539]
[-130.00559998 -246.52011108]
[-118.31088257 -255.92616272]
[-105.90582275 -264.37332153]
[-92.86884308 -271.80819702]
[-79.28237152 -278.18377686]
[-65.23230743 -283.45971680]
[-50.80747604 -287.60272217]
[-36.09908295 -290.58654785]
[-21.20012093 -292.39236450]
[-6.20478153 -293.00872803]
[8.79212475 -292.43176270]
[23.69578171 -290.66510010]
[38.41196442 -287.71990967]
[52.84762573 -283.61483765]
[66.91150665 -278.37579346]
[80.51467896 -272.03594971]
[93.57114410 -264.63534546]
[105.99835205 -256.22079468]
[117.71773529 -246.84552002]
[128.65519714 -236.56874084]
[138.74159241 -225.45547485]
[147.91313171 -213.57595825]
[156.11184692 -201.00531006]
[163.28590393 -187.82301331]
[169.38993835 -174.11239624]
[174.38536072 -159.96015930]
[178.24058533 -145.45578003]
[180.93122864 -130.69093323]
[182.44030762 -115.75899506]
[182.75823975 -100.75436401]
[181.88305664 -85.77190399]
[179.82026672 -70.90633392]
[176.58291626 -56.25165558]
[172.19148254 -41.90051270]
[166.67372131 -27.94363594]
[160.06451416 -14.46927261]
[152.40565491 -1.56260943]
[143.74555969 10.69475079]
[134.13897705 22.22531319]
[123.64666748 32.95617676]
[112.33494568 42.81949234]
[100.27533722 51.75290680]
[87.54408264 59.69993591]
[94.45108032 73.01509094]
[101.35807800 86.33024597]
[113.79752350 94.71239471]
[128.73182678 96.11469269]
[143.66613770 97.51699829]
[150.73976135 84.06217957]
[162.42707825 74.34234619]
[176.94584656 69.83971405]
[192.08207703 71.24089050]
[205.52757263 78.33221436]
[215.23202515 90.03230286]
[219.71556091 104.55699158]
[218.29446411 119.69135284]
[211.18547058 133.12751770]
[199.47261047 142.81655884]
[184.94204712 147.28099060]
[169.80957031 145.83999634]
[156.38276672 138.71331787]
[146.70913696 126.98773193]
[142.26382446 112.45130920]
[127.32952118 111.04900360]
[112.39521790 109.64669800]
[109.52889252 108.54978180]
[106.88710022 107.10886383]
[107.51107788 122.09588623]
[111.01369476 130.60372925]
[107.98885345 137.40049744]
[108.30091095 152.39724731]
[108.61296844 167.39401245]
[108.92502594 182.39076233]
[109.23708344 197.38751221]
[109.54914093 212.38426208]
[109.86119080 227.38102722]
[110.17324829 242.37777710]
[110.48530579 257.37454224]
[110.79736328 272.37127686]
[125.45235443 275.96203613]
[138.67816162 283.22430420]
[149.57302856 293.66290283]
[157.39413452 306.56610107]
[161.60820007 321.05416870]
[161.92791748 336.13928223]
[158.33149719 350.79287720]
[151.06413269 364.01589966]
[140.62133789 374.90673828]
[127.71510315 382.72283936]
[113.22541046 386.93130493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[23 105]
[24 104]
[25 103]
[106 125]
[107 124]
[108 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
