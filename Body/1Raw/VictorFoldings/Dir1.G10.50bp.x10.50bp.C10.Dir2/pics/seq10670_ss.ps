%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCCCCAUGGGGGGGGGGUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACxxxxxxxxxxCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUCCCCCCCCCCAAACCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[98.47854614 477.80712891]
[85.25834656 470.53466797]
[74.37154388 460.08767700]
[66.56041718 447.17840576]
[62.35753250 432.68710327]
[62.04946136 417.60174561]
[65.65720367 402.95092773]
[72.93477631 389.73355103]
[83.38598633 378.85076904]
[96.29824829 371.04464722]
[110.79118347 366.84735107]
[110.47912598 351.85058594]
[110.16706848 336.85385132]
[109.85501099 321.85708618]
[109.54295349 306.86032104]
[109.23090363 291.86358643]
[108.91884613 276.86682129]
[108.60678864 261.87008667]
[108.29473114 246.87332153]
[107.82669067 231.88061523]
[107.20271301 216.89360046]
[106.57873535 201.90658569]
[105.17642975 186.97229004]
[102.99959564 172.13107300]
[100.82275391 157.28987122]
[85.97081757 155.55166626]
[72.07444763 150.02969360]
[60.08016586 141.10003662]
[50.80493927 129.37094116]
[44.88053131 115.64131165]
[42.71047211 100.84630585]
[44.44256592 85.99365234]
[49.95883942 72.09500885]
[58.88356018 60.09706116]
[70.60884094 50.81701660]
[84.33603668 44.88696671]
[82.15920258 30.04575920]
[79.98236084 15.20455360]
[77.80552673 0.36334854]
[65.14296722 -1.81014037]
[53.62792206 -7.46757174]
[44.19581223 -16.13803864]
[37.60963821 -27.10633850]
[34.39826965 -39.47196198]
[34.81398773 -52.22302246]
[38.81269836 -64.31906891]
[46.05835724 -74.77595520]
[55.95119095 -82.74595642]
[67.67732239 -87.58644104]
[66.43045044 -102.53452301]
[65.18357086 -117.48261261]
[63.93669891 -132.43069458]
[62.68982315 -147.37878418]
[61.44295120 -162.32687378]
[60.19607544 -177.27496338]
[57.13820648 -181.66461182]
[56.20867538 -186.32168579]
[57.14395523 -190.37469482]
[59.36756134 -193.18949890]
[59.05550766 -208.18624878]
[58.74345016 -223.18299866]
[43.96984863 -226.10784912]
[30.17058182 -232.14060974]
[17.99106598 -240.99914551]
[8.00096226 -252.26910400]
[0.66752386 -265.42337036]
[-3.66625071 -279.84671021]
[-4.79766273 -294.86447144]
[-2.67379427 -309.77432251]
[2.60601759 -323.87884521]
[10.79482651 -336.51837158]
[21.50962639 -347.10171509]
[34.24926758 -355.13388062]
[48.41789627 -360.23916626]
[63.35281372 -362.17883301]
[78.35549164 -360.86212158]
[92.72422791 -356.35064697]
[105.78696442 -348.85537720]
[116.93274689 -338.72692871]
[125.64025116 -326.43896484]
[131.50221252 -312.56628418]
[134.24447632 -297.75772095]
[133.73875427 -282.70584106]
[130.00872803 -268.11471558]
[123.22883606 -254.66679382]
[113.71618652 -242.99101257]
[101.91571808 -233.63351440]
[88.37934875 -227.03193665]
[73.74020386 -223.49505615]
[74.05226135 -208.49830627]
[74.36431885 -193.50154114]
[75.14416504 -178.52183533]
[76.39103699 -163.57374573]
[77.63790894 -148.62565613]
[78.88478851 -133.67756653]
[80.13166046 -118.72948456]
[81.37853241 -103.78140259]
[82.62541199 -88.83331299]
[99.25204468 -84.09960938]
[112.83961487 -73.35520935]
[121.31323242 -58.20675659]
[123.36595917 -40.93597412]
[118.66031647 -24.15595627]
[107.88339996 -10.41582584]
[92.64672852 -1.81348836]
[94.82357025 13.02771664]
[97.00040436 27.86892319]
[99.17724609 42.71012878]
[114.02918243 44.44832611]
[127.92555237 49.97031021]
[139.91983032 58.89996338]
[149.19505310 70.62905884]
[155.11946106 84.35868835]
[157.28953552 99.15369415]
[155.55743408 114.00634766]
[150.04116821 127.90499115]
[141.11643982 139.90293884]
[129.39115906 149.18298340]
[115.66396332 155.11303711]
[117.84079742 169.95423889]
[120.01763916 184.79544067]
[131.18258667 174.77827454]
[146.00938416 177.05125427]
[153.66081238 189.95301819]
[148.54432678 204.05342102]
[134.39964294 209.04621887]
[121.56575012 201.28260803]
[122.18972778 216.26962280]
[122.81370544 231.25665283]
[126.31632233 239.76449585]
[123.29148865 246.56126404]
[123.60353851 261.55801392]
[123.91559601 276.55477905]
[124.22765350 291.55151367]
[124.53971100 306.54827881]
[124.85176849 321.54504395]
[125.16382599 336.54177856]
[125.47587585 351.53854370]
[125.78793335 366.53527832]
[140.44293213 370.12606812]
[153.66873169 377.38830566]
[164.56359863 387.82690430]
[172.38470459 400.73013306]
[176.59877014 415.21820068]
[176.91848755 430.30328369]
[173.32206726 444.95687866]
[166.05470276 458.17990112]
[155.61190796 469.07073975]
[142.70567322 476.88684082]
[128.21598816 481.09533691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 121]
[24 120]
[25 119]
[36 108]
[37 107]
[38 106]
[39 105]
[49 98]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[59 91]
[60 90]
[61 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
