%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGAAAAAGGGGGGGGGGUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCxxxxxxxxxxAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCCCCCCCCCCCAGAGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[79.75747681 474.66516113]
[65.91154480 468.64910889]
[54.20288086 459.11968994]
[45.50035477 446.78402710]
[40.44975281 432.55752563]
[39.42586136 417.49581909]
[42.50466156 402.71667480]
[49.45768356 389.31674194]
[59.76896667 378.29040527]
[72.67334747 370.45590210]
[87.21323395 366.39459229]
[87.21323395 351.39459229]
[87.21323395 336.39459229]
[87.21323395 321.39459229]
[87.21323395 306.39459229]
[87.21323395 291.39459229]
[87.21323395 276.39459229]
[87.21323395 261.39459229]
[87.21323395 246.39459229]
[87.21323395 231.39459229]
[73.38787842 225.75643921]
[62.74560547 215.22612000]
[56.93003082 201.38618469]
[56.85607147 186.33354187]
[62.56613159 172.36181641]
[73.21891785 161.61187744]
[87.21323395 155.74375916]
[87.21323395 140.74375916]
[87.21323395 125.74376678]
[87.21323395 110.74376678]
[79.35581207 97.96640778]
[65.96952057 91.19829559]
[52.58324051 84.43017578]
[36.77657318 85.10834503]
[28.90964508 72.46079254]
[13.10297966 73.13896179]
[5.23604918 60.49140549]
[-8.15023518 53.72328949]
[-21.53652000 46.95517731]
[-34.92280579 40.18706131]
[-45.75763702 50.76464081]
[-59.44100952 57.24877548]
[-74.48865509 58.93612289]
[-89.26831055 55.64364624]
[-102.17680359 47.72849274]
[-111.81390381 36.04923630]
[-117.13425446 21.87275505]
[-117.56074524 6.73681068]
[-113.04711151 -7.71676540]
[-104.08296204 -19.92015648]
[-91.64065552 -28.54962921]
[-77.06984711 -32.66912460]
[-61.95106888 -31.83179092]
[-47.92428207 -26.12845230]
[-36.51102066 -16.17776871]
[-28.94929886 -3.05911350]
[-26.05936432 11.80449963]
[-28.15468979 26.80077744]
[-14.76840591 33.56888962]
[-1.38212085 40.33700562]
[12.00416374 47.10512161]
[26.85335159 45.94284821]
[35.67775726 59.07450867]
[50.52694702 57.91223526]
[59.35135269 71.04389191]
[72.73764038 77.81200409]
[86.12392426 84.58012390]
[77.62116241 72.22281647]
[69.11840057 59.86550903]
[56.97710037 51.05705261]
[49.85863876 37.85374069]
[49.17225647 22.86945152]
[55.05384827 9.07065105]
[66.33901978 -0.81089270]
[80.79363251 -4.81891489]
[95.55607605 -2.15994143]
[107.70381927 6.63962650]
[114.83194733 19.83772469]
[115.52928925 34.82150650]
[109.65702820 48.62567520]
[108.73149109 63.59709167]
[107.80595398 78.56851196]
[115.79587555 65.87358093]
[123.78578949 53.17865372]
[131.77571106 40.48372269]
[126.81964874 25.65228653]
[132.60461426 11.12409973]
[146.39910889 3.75892782]
[161.68980408 7.03437996]
[171.25689697 19.40388870]
[170.58309937 35.02694702]
[159.98655701 46.52682877]
[144.47064209 48.47364044]
[136.48071289 61.16856766]
[128.49079895 73.86349487]
[120.50088501 86.55842590]
[124.16043854 93.10500336]
[137.25358582 85.78589630]
[150.34674072 78.46679688]
[163.43989563 71.14768982]
[176.53317261 63.82880020]
[183.85185242 76.92219543]
[170.75900269 84.24084473]
[157.66584778 91.55995178]
[144.57269287 98.87905121]
[131.47953796 106.19815826]
[135.13909912 112.74473572]
[150.13829041 112.58869934]
[165.13748169 112.43266296]
[180.13665771 112.27662659]
[195.13584900 112.12059021]
[210.91122437 105.90981293]
[221.24635315 119.34936523]
[211.19305420 133.00102234]
[195.29188538 127.11978149]
[180.29269409 127.27581787]
[165.29351807 127.43185425]
[150.29432678 127.58789062]
[135.29513550 127.74392700]
[114.69200897 123.75550079]
[102.21323395 110.74376678]
[102.21323395 125.74376678]
[102.21323395 140.74375916]
[102.21323395 155.74375916]
[116.20755005 161.61187744]
[126.86033630 172.36181641]
[132.57040405 186.33354187]
[132.49644470 201.38618469]
[126.68086243 215.22612000]
[116.03858948 225.75643921]
[102.21323395 231.39459229]
[102.21323395 246.39459229]
[102.21323395 261.39459229]
[102.21323395 276.39459229]
[102.21323395 291.39459229]
[102.21323395 306.39459229]
[102.21323395 321.39459229]
[102.21323395 336.39459229]
[102.21323395 351.39459229]
[102.21323395 366.39459229]
[116.75312042 370.45590210]
[129.65750122 378.29040527]
[139.96878052 389.31674194]
[146.92181396 402.71667480]
[150.00061035 417.49581909]
[148.97671509 432.55752563]
[143.92611694 446.78402710]
[135.22358704 459.11968994]
[123.51493073 468.64910889]
[109.66899109 474.66516113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 124]
[28 123]
[29 122]
[30 121]
[31 67]
[32 66]
[33 65]
[35 63]
[37 61]
[38 60]
[39 59]
[40 58]
[82 96]
[83 95]
[84 94]
[85 93]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
