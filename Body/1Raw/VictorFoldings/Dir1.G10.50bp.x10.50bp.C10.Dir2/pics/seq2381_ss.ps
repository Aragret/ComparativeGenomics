%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACACCCGGGGGGGGGGACUACCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGxxxxxxxxxxCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCCCCCCCCCCCUCAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.70454407 379.63204956]
[67.85860443 373.61602783]
[56.14994431 364.08660889]
[47.44742203 351.75094604]
[42.39682007 337.52441406]
[41.37292862 322.46273804]
[44.45172501 307.68356323]
[51.40474701 294.28363037]
[61.71603394 283.25732422]
[74.62041473 275.42279053]
[89.16030121 271.36148071]
[89.16030121 256.36148071]
[89.16030121 241.36149597]
[89.16030121 226.36149597]
[89.16030121 211.36149597]
[89.16030121 196.36149597]
[89.16030121 181.36149597]
[89.16030121 166.36149597]
[89.16030121 151.36149597]
[89.16030121 136.36149597]
[89.16030121 121.36148834]
[81.55192566 108.13045502]
[84.23114014 95.61899567]
[72.53151703 86.23183441]
[60.83189392 76.84467316]
[47.91632462 86.48941040]
[32.96662521 92.48900604]
[16.98804665 94.44595337]
[1.05349648 92.23436737]
[-13.76848125 86.00809479]
[-26.48538017 76.19001770]
[-36.24717712 63.44330978]
[-42.40316391 48.62668991]
[-44.54530716 32.73653412]
[-42.53528976 16.83989143]
[-36.51344299 2.00282121]
[-48.59342957 -6.88952827]
[-60.67341995 -15.78187847]
[-72.75341034 -24.67422867]
[-83.80019379 -16.59453392]
[-96.66506195 -11.97428513]
[-110.29453278 -11.18168640]
[-123.57537079 -14.27191925]
[-135.42553711 -20.98341370]
[-144.88230896 -30.75995636]
[-151.18051147 -42.79678345]
[-153.81445312 -56.10681915]
[-152.57844543 -69.60161591]
[-147.58288574 -82.18035126]
[-159.28251648 -91.56751251]
[-170.98213196 -100.95467377]
[-187.02214050 -100.64215851]
[-197.15597534 -113.07940674]
[-193.60981750 -128.72563171]
[-179.10397339 -135.57838440]
[-164.76609802 -128.38082886]
[-161.59497070 -112.65430450]
[-149.89535522 -103.26713562]
[-138.19572449 -93.87997437]
[-124.35062408 -102.67580414]
[-108.31104279 -106.22883606]
[-91.99588776 -104.09616089]
[-77.36313629 -96.51613617]
[-66.17485046 -84.38192749]
[-59.78498840 -69.13624573]
[-58.97558212 -52.59988403]
[-63.86105728 -36.75421524]
[-51.78107071 -27.86186600]
[-39.70108032 -18.96951675]
[-27.62109184 -10.07716751]
[-16.98519135 -19.10756493]
[-4.58785725 -25.52600288]
[8.94083595 -29.00230217]
[22.91242027 -29.35590363]
[36.61507416 -26.56526184]
[49.34988022 -20.76910973]
[60.46648407 -12.25957298]
[69.39629364 -1.46744359]
[75.68158722 11.05962372]
[78.99892426 24.68490410]
[79.17586517 38.71496582]
[76.19984436 52.43496323]
[70.21905518 65.14505005]
[81.91867828 74.53221130]
[93.61830139 83.91937256]
[83.43345642 72.90715790]
[79.26538849 58.49787903]
[81.99850464 43.74897766]
[91.05287170 31.78994370]
[104.50728607 25.15830421]
[119.50693512 25.26119232]
[132.86911011 32.07677841]
[141.75857544 44.15889359]
[144.28909302 58.94390106]
[139.92375183 73.29464722]
[129.58880615 84.16610718]
[115.47735596 89.25151825]
[130.18531799 86.30603790]
[144.89328003 83.36054993]
[159.60124207 80.41506958]
[174.30920410 77.46958923]
[177.22102356 62.55014801]
[185.62480164 49.88345337]
[198.23899841 41.40108490]
[213.14002991 38.39654160]
[228.05563354 41.32799149]
[240.71125793 49.74841690]
[249.17703247 62.37375641]
[252.16197205 77.27873993]
[249.21089172 92.19046783]
[240.77383423 104.83500671]
[228.13737488 113.28416443]
[213.22846985 116.24948883]
[198.32063293 113.27880859]
[185.68721008 104.82511902]
[177.25468445 92.17755127]
[162.54672241 95.12303162]
[147.83876038 98.06851196]
[133.13079834 101.01399231]
[118.42283630 103.95948029]
[133.13587952 101.03948975]
[147.23023987 106.17263794]
[156.61943054 117.87063599]
[158.58119202 132.74179077]
[152.54672241 146.47442627]
[140.26565552 155.08694458]
[125.29871368 156.08224487]
[111.98535919 149.17176819]
[104.18563080 136.35911560]
[104.16030121 121.36148834]
[104.16030121 136.36149597]
[104.16030121 151.36149597]
[104.16030121 166.36149597]
[104.16030121 181.36149597]
[104.16030121 196.36149597]
[104.16030121 211.36149597]
[104.16030121 226.36149597]
[104.16030121 241.36149597]
[104.16030121 256.36148071]
[104.16030121 271.36148071]
[118.70018768 275.42279053]
[131.60456848 283.25732422]
[141.91584778 294.28363037]
[148.86888123 307.68356323]
[151.94767761 322.46273804]
[150.92378235 337.52441406]
[145.87318420 351.75094604]
[137.17065430 364.08660889]
[125.46199036 373.61602783]
[111.61605835 379.63204956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 85]
[24 84]
[25 83]
[36 70]
[37 69]
[38 68]
[39 67]
[49 59]
[50 58]
[51 57]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
