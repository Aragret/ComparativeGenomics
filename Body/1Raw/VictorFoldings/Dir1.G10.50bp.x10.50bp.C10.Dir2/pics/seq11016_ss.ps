%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACUCAAAGGGGGGGGGGACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCxxxxxxxxxxUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACAACCCCCCCCCCAAUACUCAAA\
) } def
/len { sequence length } bind def

/coor [
[59.97657776 540.11077881]
[46.13063812 534.09478760]
[34.42197418 524.56536865]
[25.71945190 512.22967529]
[20.66884995 498.00317383]
[19.64495850 482.94149780]
[22.72375679 468.16232300]
[29.67677879 454.76239014]
[39.98806381 443.73608398]
[52.89244461 435.90155029]
[67.43233490 431.84024048]
[67.43233490 416.84024048]
[67.43233490 401.84024048]
[67.43233490 386.84024048]
[67.43233490 371.84024048]
[67.43233490 356.84024048]
[67.43233490 341.84024048]
[67.43233490 326.84024048]
[67.43233490 311.84024048]
[67.43233490 296.84024048]
[54.46500778 289.51126099]
[46.85661316 276.58963013]
[46.73677826 261.49487305]
[54.23781967 248.28005981]
[67.43233490 240.54364014]
[57.66292191 251.92602539]
[43.33373642 256.36160278]
[28.84221458 252.48916626]
[18.63562202 241.49710083]
[15.84623146 226.75874329]
[21.33007050 212.79710388]
[33.40422058 203.89682007]
[48.36327744 202.78929138]
[61.61649704 209.81440735]
[69.09683228 222.81700134]
[71.88915253 208.07920837]
[74.68148041 193.34140015]
[77.47380066 178.60359192]
[80.26612854 163.86578369]
[66.55152893 157.87455750]
[54.51363754 148.98219299]
[44.75588226 137.63444519]
[37.76740265 124.40016937]
[33.89851761 109.94275665]
[33.34316635 94.98693848]
[36.12918472 80.28240967]
[42.11692047 66.56628418]
[51.00621414 54.52612686]
[62.35146713 44.76548004]
[75.58396149 37.77362823]
[90.04039001 33.90105820]
[104.99607086 33.34189224]
[107.78839111 18.60408401]
[110.58071899 3.86627889]
[113.37303925 -10.87152672]
[103.62701416 -18.81706238]
[98.23882294 -30.09835815]
[98.18474579 -42.52782822]
[103.41330719 -53.72432709]
[112.86692047 -61.56932068]
[124.69523621 -64.60768127]
[128.09822083 -79.21656799]
[131.50119019 -93.82546234]
[127.09641266 -109.02113342]
[137.51934814 -119.66123199]
[140.92231750 -134.27012634]
[144.32530212 -148.87902832]
[147.72828674 -163.48791504]
[151.13125610 -178.09680176]
[137.75099182 -185.05519104]
[126.52210999 -195.12312317]
[118.15048218 -207.66770935]
[113.16236115 -221.90039062]
[111.87129211 -236.92651367]
[114.35844421 -251.80148315]
[120.46746063 -265.59027100]
[129.81433105 -277.42608643]
[141.81150818 -286.56494141]
[155.70481873 -292.43237305]
[170.62094116 -294.65948486]
[185.62223816 -293.10635376]
[199.76568604 -287.87054443]
[212.16223145 -279.28125000]
[222.03263855 -267.87832642]
[228.75640869 -254.37864685]
[231.91090393 -239.63076782]
[231.29782104 -224.56176758]
[226.95570374 -210.11888123]
[219.15750122 -197.21002197]
[208.39340210 -186.64663696]
[195.34007263 -179.09274292]
[180.81802368 -175.02320862]
[165.74015808 -174.69383240]
[162.33717346 -160.08493042]
[158.93418884 -145.47604370]
[155.53121948 -130.86715698]
[152.12823486 -116.25825500]
[156.77642822 -102.10751343]
[146.11009216 -90.42248535]
[142.70710754 -75.81359100]
[139.30412292 -61.20470047]
[151.45957947 -48.46450424]
[153.60150146 -30.82894707]
[144.69371033 -15.27794838]
[128.11083984 -8.07920265]
[125.31851959 6.65860367]
[122.52619934 21.39640999]
[119.73387146 36.13421631]
[133.44847107 42.12544632]
[145.48635864 51.01781082]
[155.24411011 62.36555099]
[162.23258972 75.59983063]
[166.10148621 90.05724335]
[166.65682983 105.01306152]
[163.87081909 119.71759033]
[157.88308716 133.43371582]
[148.99378967 145.47387695]
[137.64852905 155.23451233]
[124.41603851 162.22637939]
[109.95960999 166.09893799]
[95.00392914 166.65811157]
[92.21160889 181.39591980]
[89.41928101 196.13372803]
[86.62696075 210.87152100]
[83.83463287 225.60932922]
[82.43233490 240.54364014]
[95.62683868 248.28005981]
[103.12788391 261.49487305]
[103.00804901 276.58963013]
[95.39965057 289.51126099]
[82.43233490 296.84024048]
[82.43233490 311.84024048]
[82.43233490 326.84024048]
[82.43233490 341.84024048]
[82.43233490 356.84024048]
[82.43233490 371.84024048]
[82.43233490 386.84024048]
[82.43233490 401.84024048]
[82.43233490 416.84024048]
[82.43233490 431.84024048]
[96.97222137 435.90155029]
[109.87660217 443.73608398]
[120.18788147 454.76239014]
[127.14090729 468.16232300]
[130.21971130 482.94149780]
[129.19581604 498.00317383]
[124.14521027 512.22967529]
[115.44268799 524.56536865]
[103.73402405 534.09478760]
[89.88808441 540.11077881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 126]
[35 125]
[36 124]
[37 123]
[38 122]
[39 121]
[52 108]
[53 107]
[54 106]
[55 105]
[61 101]
[62 100]
[63 99]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
