%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAAGCACUGGGGGGGGGGGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGxxxxxxxxxxCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCCCCCCCCCCCACUCAAGCACU\
) } def
/len { sequence length } bind def

/coor [
[84.84221649 441.91146851]
[71.35334015 435.17993164]
[59.86783600 425.41537476]
[51.05346680 413.18548584]
[45.42268372 399.20129395]
[43.30285645 384.27581787]
[44.81722641 369.27682495]
[49.87775040 355.07629395]
[58.19021606 342.49987793]
[69.27134705 332.27871704]
[82.47689819 325.00708008]
[97.03912354 321.10772705]
[96.73114777 306.11087036]
[96.42317200 291.11404419]
[96.11518860 276.11721802]
[95.80721283 261.12036133]
[95.49923706 246.12353516]
[95.19126129 231.12669373]
[94.88327789 216.12985229]
[94.57530212 201.13301086]
[94.26732635 186.13618469]
[93.95935059 171.13934326]
[80.07369995 168.55828857]
[66.96783447 163.29432678]
[55.15462112 155.55346680]
[45.09634399 145.63862610]
[37.18661880 133.93780518]
[31.73497391 120.90888977]
[28.95475388 107.06174469]
[28.95475388 92.93825531]
[31.73497391 79.09111023]
[37.18661880 66.06220245]
[45.09634399 54.36137772]
[55.15462112 44.44653702]
[66.96783447 36.70567703]
[80.07369995 31.44171906]
[93.95935059 28.86065865]
[94.26732635 13.86382103]
[94.57530212 -1.13301682]
[94.88327789 -16.12985420]
[95.19126129 -31.12669373]
[95.49923706 -46.12353134]
[80.57839966 -47.75638199]
[65.86026001 -50.70155716]
[51.46001816 -54.93601227]
[37.49037170 -60.42660141]
[24.06065369 -67.13035583]
[11.27597523 -74.99481201]
[-0.76360643 -83.95841217]
[-11.96386242 -93.95100403]
[-22.23713493 -104.89437866]
[-31.50301933 -116.70288849]
[-39.68899918 -129.28411865]
[-46.73100281 -142.53961182]
[-52.57391357 -156.36560059]
[-57.17201233 -170.65388489]
[-60.48929977 -185.29263306]
[-62.49982071 -200.16729736]
[-63.18783951 -215.16143799]
[-62.54796982 -230.15771484]
[-60.58522034 -245.03874207]
[-57.31494904 -259.68807983]
[-52.76275635 -273.99105835]
[-46.96426392 -287.83572388]
[-39.96485901 -301.11376953]
[-31.81932068 -313.72122192]
[-22.59140015 -325.55941772]
[-12.35331821 -336.53573608]
[-1.18520474 -346.56423950]
[10.82553387 -355.56643677]
[23.58489418 -363.47189331]
[36.99301529 -370.21875000]
[50.94496155 -375.75415039]
[65.33153534 -380.03482056]
[80.04013824 -383.02725220]
[94.95565796 -384.70800781]
[109.96135712 -385.06393433]
[124.93978882 -384.09222412]
[139.77372742 -381.80053711]
[154.34707642 -378.20678711]
[168.54577637 -373.33908081]
[182.25869751 -367.23553467]
[195.37852478 -359.94390869]
[207.80258179 -351.52127075]
[219.43359375 -342.03356934]
[230.18057251 -331.55499268]
[239.95939636 -320.16763306]
[248.69351196 -307.96054077]
[256.31460571 -295.02932739]
[262.76296997 -281.47512817]
[267.98815918 -267.40405273]
[271.94931030 -252.92625427]
[274.61541748 -238.15501404]
[275.96554565 -223.20593262]
[275.98922729 -208.19604492]
[274.68618774 -193.24278259]
[272.06668091 -178.46321106]
[268.15121460 -163.97299194]
[262.97036743 -149.88552856]
[256.56475830 -136.31106567]
[248.98449707 -123.35587311]
[240.28889465 -111.12133026]
[230.54602051 -99.70317841]
[219.83212280 -89.19079590]
[208.23106384 -79.66645813]
[195.83363342 -71.20470428]
[182.73686218 -63.87175751]
[169.04324341 -57.72500992]
[154.85995483 -52.81257248]
[140.29801941 -49.17288971]
[125.47136688 -46.83444977]
[110.49607086 -45.81555176]
[110.18809509 -30.81871605]
[109.88011932 -15.82187748]
[109.57214355 -0.82503915]
[109.26416779 14.17179871]
[108.95618439 29.16863632]
[124.35296631 32.88645172]
[138.55113220 39.90752411]
[150.85183716 49.88627625]
[160.64968872 62.33156967]
[167.46241760 76.63085938]
[170.95474243 92.08035278]
[170.95474243 107.91964722]
[167.46241760 123.36914062]
[160.64968872 137.66842651]
[150.85183716 150.11372375]
[138.55113220 160.09248352]
[124.35296631 167.11354065]
[108.95618439 170.83135986]
[109.26416779 185.82820129]
[109.57214355 200.82504272]
[109.88011932 215.82188416]
[110.18809509 230.81871033]
[110.49607086 245.81555176]
[110.80405426 260.81237793]
[111.11203003 275.80923462]
[111.42000580 290.80606079]
[111.72798157 305.80291748]
[112.03596497 320.79974365]
[126.74600220 324.09796143]
[140.23895264 330.82131958]
[151.73037720 340.57891846]
[160.55215454 352.80346680]
[166.19142151 366.78424072]
[168.32029724 381.70843506]
[166.81501770 396.70834351]
[161.76310730 410.91192627]
[153.45826721 423.49337769]
[142.38333130 433.72125244]
[129.18218994 441.00091553]
[114.62232971 444.90908813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[42 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
