%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAUUUACCGGGGGGGGGGCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUxxxxxxxxxxCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUCCCCCCCCCCAACCAUAUACC\
) } def
/len { sequence length } bind def

/coor [
[96.24973297 622.52233887]
[82.22779083 616.96936035]
[70.02783203 608.10302734]
[60.41676331 596.48071289]
[53.99873734 582.83300781]
[51.17720032 568.01782227]
[52.12951660 552.96643066]
[56.79582214 538.62500000]
[64.88278961 525.89508057]
[75.88206482 515.57678223]
[89.10221863 508.31881714]
[103.71223450 504.57736206]
[103.71223450 489.57736206]
[103.71223450 474.57736206]
[103.71223450 459.57736206]
[103.71223450 444.57736206]
[103.71223450 429.57736206]
[103.71223450 414.57736206]
[103.71223450 399.57736206]
[103.71223450 384.57736206]
[103.71223450 369.57736206]
[87.78083038 365.90475464]
[73.16071320 358.56890869]
[60.68122482 347.98168945]
[51.05126953 334.73947144]
[44.81908035 319.58966064]
[42.34098434 303.38839722]
[43.76103973 287.05218506]
[49.00267029 271.50616455]
[57.77278519 257.63159180]
[69.57814789 246.21591187]
[83.75314331 237.90808105]
[99.49727631 233.18170166]
[98.57386017 218.21014404]
[97.65045166 203.23860168]
[96.72703552 188.26704407]
[95.80361938 173.29550171]
[86.92957306 165.01820374]
[86.07178497 152.51078796]
[94.23899078 142.47583008]
[93.62316132 127.48847961]
[93.00733948 112.50112152]
[85.68813324 100.58807373]
[92.00531006 88.11470032]
[88.74694824 82.24736023]
[88.95647430 76.49028015]
[91.68468475 72.50203705]
[91.68468475 57.50203705]
[91.68468475 42.50203705]
[81.28833008 37.42839050]
[73.59304810 28.85989571]
[69.69674683 18.07698631]
[70.13352203 6.67160797]
[74.80074310 -3.68777514]
[82.97977448 -11.50026703]
[93.44631195 -15.64996529]
[94.36972809 -30.62151527]
[95.29314423 -45.59306335]
[80.60825348 -48.79530716]
[66.58432007 -54.20176315]
[53.55008698 -61.68569565]
[41.81110001 -71.07167816]
[31.64253426 -82.13967896]
[23.28275681 -94.63025665]
[16.92773056 -108.25061035]
[12.72642994 -122.68146515]
[10.77733612 -137.58453369]
[11.12614059 -152.61047363]
[13.76466560 -167.40704346]
[18.63106155 -181.62741089]
[25.61125183 -194.93820190]
[34.54161072 -207.02742004]
[45.21280289 -217.61166382]
[57.37467194 -226.44282532]
[70.74213409 -233.31387329]
[85.00182343 -238.06376648]
[99.81948853 -240.58116150]
[114.84777832 -240.80702209]
[129.73440552 -238.73606873]
[144.13040161 -234.41683960]
[157.69831848 -227.95060730]
[170.12007141 -219.48892212]
[181.10452271 -209.23014832]
[190.39414978 -197.41476440]
[197.77119446 -184.31974792]
[203.06274414 -170.25204468]
[206.14474487 -155.54144287]
[206.94493103 -140.53277588]
[205.44458008 -125.57787323]
[201.67884827 -111.02728271]
[195.73600769 -97.22209930]
[187.75537109 -84.48593140]
[177.92401123 -73.11734772]
[166.47239685 -63.38283157]
[153.66896057 -55.51057434]
[139.81382751 -49.68511963]
[125.23179626 -46.04301834]
[110.26469421 -44.66965103]
[109.34127808 -29.69810104]
[108.41786194 -14.72655201]
[123.47615051 -3.76209450]
[128.99705505 14.18396568]
[122.60496521 31.99681091]
[106.68468475 42.50203705]
[106.68468475 57.50203705]
[106.68468475 72.50203705]
[106.99266052 87.49887848]
[114.31186676 99.41192627]
[107.99468994 111.88529968]
[108.61051941 126.87265015]
[109.22634125 141.86000061]
[119.44482422 157.14442444]
[110.77516937 172.37208557]
[111.69858551 187.34362793]
[112.62200165 202.31518555]
[113.54541016 217.28672791]
[114.46882629 232.25828552]
[128.04479980 234.29087830]
[140.94590759 238.96539307]
[152.66366577 246.09532166]
[162.73664856 255.39738464]
[170.76869202 266.50283813]
[176.44448853 278.97210693]
[179.54194641 292.31207275]
[179.94088745 305.99569702]
[177.62770081 319.48278809]
[172.69578552 332.24136353]
[165.34182739 343.76858521]
[155.85791016 353.61053467]
[144.61991882 361.38027954]
[132.07264709 366.77285767]
[118.71223450 369.57736206]
[118.71223450 384.57736206]
[118.71223450 399.57736206]
[118.71223450 414.57736206]
[118.71223450 429.57736206]
[118.71223450 444.57736206]
[118.71223450 459.57736206]
[118.71223450 474.57736206]
[118.71223450 489.57736206]
[118.71223450 504.57736206]
[133.32225037 508.31881714]
[146.54240417 515.57678223]
[157.54167175 525.89508057]
[165.62864685 538.62500000]
[170.29495239 552.96643066]
[171.24726868 568.01782227]
[168.42573547 582.83300781]
[162.00770569 596.48071289]
[152.39663696 608.10302734]
[140.19667053 616.96936035]
[126.17472839 622.52233887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[33 117]
[34 116]
[35 115]
[36 114]
[37 113]
[40 111]
[41 110]
[42 109]
[44 107]
[47 106]
[48 105]
[49 104]
[56 100]
[57 99]
[58 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
