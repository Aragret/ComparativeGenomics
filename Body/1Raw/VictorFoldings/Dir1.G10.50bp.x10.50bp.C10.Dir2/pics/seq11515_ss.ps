%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGAUUCUGGGGGGGGGGUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCxxxxxxxxxxUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUACCCCCCCCCCACACUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[17.22890282 516.12847900]
[3.38296342 510.11242676]
[-8.32569790 500.58300781]
[-17.02822304 488.24734497]
[-22.07882500 474.02081299]
[-23.10271645 458.95913696]
[-20.02391624 444.17996216]
[-13.07089520 430.78005981]
[-2.75961089 419.75372314]
[10.14476967 411.91921997]
[24.68465614 407.85791016]
[24.68465614 392.85791016]
[24.68465614 377.85791016]
[24.68465614 362.85791016]
[24.68465614 347.85791016]
[24.68465614 332.85791016]
[24.68465614 317.85791016]
[24.68465614 302.85791016]
[24.68465614 287.85791016]
[24.68465614 272.85791016]
[24.68465614 257.85791016]
[16.94735718 245.13063049]
[24.68465614 231.33044434]
[16.51148224 243.90817261]
[4.40608931 252.76591492]
[-10.05509377 256.75015259]
[-24.98885536 255.34205627]
[-38.45044708 248.72499084]
[-48.68682861 237.76066589]
[-54.36496735 223.87690735]
[-54.74542618 208.88172913]
[-49.77865601 194.72789001]
[-40.11146164 183.25857544]
[-27.00275040 175.96736145]
[-12.15960979 173.80377197]
[2.48501301 177.04954529]
[15.02401733 185.28199768]
[23.82451057 197.42906189]
[27.74030113 211.90713501]
[32.34586334 197.63166809]
[31.12992287 195.03767395]
[30.90247345 191.79078674]
[31.92324448 188.27796936]
[34.30238342 184.97482300]
[37.97352219 182.38943481]
[43.74979401 168.54621887]
[49.52606964 154.70300293]
[55.30234146 140.85978699]
[61.07861328 127.01657104]
[66.85488892 113.17335510]
[64.36976624 98.38064575]
[54.38703918 87.18487549]
[44.40431213 75.98911285]
[34.42158890 64.79335022]
[18.79754829 65.44403839]
[6.44220495 55.85865402]
[3.18937373 40.56312943]
[10.57494259 26.77953911]
[25.11166954 21.01607132]
[39.93576050 25.99406242]
[48.04772949 39.36305618]
[45.61735153 54.81061935]
[55.60007858 66.00638580]
[65.58280945 77.20215607]
[75.56552887 88.39791870]
[89.87037659 77.56935883]
[106.10949707 78.68362427]
[96.19306183 68.34786987]
[88.24581146 56.43561935]
[82.51324463 43.31710434]
[79.17205048 29.39979935]
[78.32463837 15.11574936]
[79.99606323 0.90815246]
[84.13320160 -12.78238487]
[90.60651398 -25.53151321]
[99.21405792 -36.94429398]
[109.68780518 -46.66743469]
[121.70196533 -54.40022659]
[134.88316345 -59.90383148]
[148.82199097 -63.00868607]
[163.08575439 -63.61969376]
[177.23191833 -61.71915817]
[190.82179260 -57.36729050]
[203.43418884 -50.70029449]
[212.69912720 -62.49693680]
[221.96408081 -74.29357910]
[224.40299988 -89.92566681]
[238.34910583 -95.15589142]
[247.61405945 -106.95252991]
[249.40077209 -123.25405121]
[264.51858521 -129.60890198]
[277.41555786 -119.47975159]
[274.82443237 -103.28660583]
[259.41070557 -97.68758392]
[250.14575195 -85.89093781]
[248.36952209 -71.10262299]
[233.76072693 -65.02862549]
[224.49577332 -53.23198700]
[215.23081970 -41.43534851]
[225.55288696 -29.58517647]
[233.39457703 -15.96091175]
[238.45916748 -1.07456517]
[240.55439758 14.51403618]
[239.59965515 30.21830177]
[235.62916565 45.44695282]
[228.79072571 59.62627792]
[219.34017944 72.22176361]
[207.63192749 82.75820923]
[194.10554504 90.83769989]
[179.26934814 96.15460968]
[163.68122864 98.50714874]
[147.92774963 97.80503845]
[132.60200500 94.07299805]
[118.28133392 87.44982910]
[122.85530090 97.54262543]
[122.03581238 108.99089813]
[115.64544678 118.99901581]
[104.91133118 124.94536591]
[92.24390411 125.06401825]
[80.69810486 118.94962311]
[74.92182922 132.79284668]
[69.14556122 146.63606262]
[63.36928558 160.47927856]
[57.59301376 174.32249451]
[51.81674194 188.16571045]
[46.62132645 202.23722839]
[42.01576233 216.51269531]
[39.68465805 231.33044434]
[47.42195892 245.13063049]
[39.68465805 257.85791016]
[39.68465805 272.85791016]
[39.68465805 287.85791016]
[39.68465805 302.85791016]
[39.68465805 317.85791016]
[39.68465805 332.85791016]
[39.68465805 347.85791016]
[39.68465805 362.85791016]
[39.68465805 377.85791016]
[39.68465805 392.85791016]
[39.68465805 407.85791016]
[54.22454453 411.91921997]
[67.12892151 419.75372314]
[77.44020844 430.78005981]
[84.39323425 444.17996216]
[87.47203064 458.95913696]
[86.44813538 474.02081299]
[81.39753723 488.24734497]
[72.69501495 500.58300781]
[60.98635101 510.11242676]
[47.14041138 516.12847900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[39 127]
[40 126]
[45 125]
[46 124]
[47 123]
[48 122]
[49 121]
[50 120]
[51 65]
[52 64]
[53 63]
[54 62]
[67 114]
[84 99]
[85 98]
[86 97]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
