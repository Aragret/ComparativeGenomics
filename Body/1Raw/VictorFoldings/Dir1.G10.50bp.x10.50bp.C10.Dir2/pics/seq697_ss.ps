%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCUACCCGGGGGGGGGGAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCAxxxxxxxxxxCAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCCCCCCCCCCCAUCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[234.84602356 191.98373413]
[224.83255005 182.83969116]
[215.43714905 173.06146240]
[206.69989014 162.69073486]
[198.65805054 151.77169800]
[191.34594727 140.35093689]
[184.79476929 128.47712708]
[179.03250122 116.20088959]
[174.08370972 103.57458496]
[169.96952820 90.65203857]
[155.39683533 94.20680237]
[140.82412720 97.76156616]
[126.25142670 101.31632996]
[111.67872620 104.87108612]
[97.22403717 108.87882996]
[82.90143585 113.33564758]
[68.57884216 117.79245758]
[54.25624084 122.24927521]
[46.86289215 135.95971680]
[32.27425385 140.27552795]
[19.24900818 133.14260864]
[4.92641068 137.59942627]
[-9.39618683 142.05624390]
[-23.71878433 146.51304626]
[-25.90526962 161.61874390]
[-34.43646240 174.27503967]
[-47.61848831 181.96899414]
[-62.83404541 183.17297363]
[-77.06207275 177.64794922]
[-87.47758484 166.49089050]
[-92.01258087 151.91706848]
[-89.76662445 136.82009888]
[-81.18566132 124.19750977]
[-67.97344208 116.55551910]
[-52.75325775 115.41146088]
[-38.54709625 120.99247742]
[-28.17560005 132.19046021]
[-13.85300255 127.73364258]
[0.46959487 123.27682495]
[14.79219246 118.82000732]
[21.47041321 105.55588531]
[35.93207550 100.83200836]
[49.79942703 107.92668152]
[64.12202454 103.46986389]
[78.44461823 99.01304626]
[92.76721954 94.55622864]
[95.05532837 91.36233521]
[98.76284790 89.21756744]
[103.37718201 88.74212646]
[108.12396240 90.29838562]
[122.69666290 86.74362183]
[137.26936340 83.18885803]
[151.84207153 79.63410187]
[166.41477966 76.07933807]
[163.68051147 59.35767365]
[162.31857300 42.46911240]
[162.33795166 25.52607727]
[163.73846436 8.64136219]
[166.51074219 -8.07263851]
[170.63627625 -24.50466919]
[176.08753967 -40.54535675]
[182.82820129 -56.08794022]
[190.81332397 -71.02896881]
[199.98970032 -85.26901245]
[210.29620361 -98.71331024]
[221.66418457 -111.27239227]
[234.01791382 -122.86268616]
[247.27513123 -133.40708923]
[261.34753418 -142.83544922]
[276.14141846 -151.08503723]
[291.55825806 -158.10099792]
[307.49542236 -163.83668518]
[323.84680176 -168.25393677]
[340.50350952 -171.32344055]
[357.35467529 -173.02479553]
[374.28808594 -173.34674072]
[391.19104004 -172.28718567]
[407.95101929 -169.85324097]
[424.45645142 -166.06115723]
[440.59750366 -160.93624878]
[456.26669312 -154.51266479]
[471.35974121 -146.83325195]
[485.77624512 -137.94914246]
[499.42022705 -127.91954803]
[512.20086670 -116.81127930]
[524.03320312 -104.69832611]
[535.53503418 -114.32685089]
[547.03680420 -123.95537567]
[558.53863525 -133.58390808]
[570.04040527 -143.21243286]
[566.24133301 -157.99517822]
[569.24084473 -172.96064758]
[578.44348145 -185.13746643]
[592.02197266 -192.10787964]
[607.28033447 -192.48793030]
[621.18902588 -186.20214844]
[630.98645020 -174.49859619]
[634.72735596 -159.70100403]
[631.66888428 -144.74745178]
[622.41839600 -132.60697937]
[608.81256104 -125.69008636]
[593.55279541 -125.37012482]
[579.66894531 -131.71063232]
[568.16711426 -122.08209991]
[556.66534424 -112.45357513]
[545.16351318 -102.82505035]
[533.66174316 -93.19651794]
[541.62841797 -82.23223877]
[548.86254883 -70.77122498]
[555.33325195 -58.86233521]
[561.01300049 -46.55635071]
[565.87744141 -33.90574646]
[569.90588379 -20.96445847]
[573.08111572 -7.78767347]
[575.38958740 5.56842089]
[576.82141113 19.04686928]
[577.37042236 32.59019470]
[577.03430176 46.14064026]
[575.81451416 59.64041901]
[573.71612549 73.03195190]
[570.74816895 86.25814056]
[566.92315674 99.26255798]
[562.25750732 111.98975372]
[556.77105713 124.38543701]
[550.48718262 136.39672852]
[543.43261719 147.97241211]
[535.63751221 159.06311035]
[527.13500977 169.62150574]
[517.96142578 179.60253906]
[508.15579224 188.96366882]
[497.75994873 197.66493225]
[486.81823730 205.66920471]
[475.37728882 212.94235229]
[463.48587036 219.45332336]
[451.19467163 225.17434692]
[438.55615234 230.08099365]
[425.62417603 234.15231323]
[412.45385742 237.37092590]
[399.10140991 239.72309875]
[385.62374878 241.19877625]
[372.07833862 241.79164124]
[358.52294922 241.49913025]
[345.01538086 240.32247925]
[331.61325073 238.26669312]
[318.37374878 235.34051514]
[305.35327148 231.55639648]
[292.60742188 226.93045044]
[280.19052124 221.48239136]
[268.15554810 215.23544312]
[256.55380249 208.21620178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 46]
[16 45]
[17 44]
[18 43]
[21 40]
[22 39]
[23 38]
[24 37]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
