%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCCCCAUGGGGGGGGGGUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCAxxxxxxxxxxAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCCCCCCCCCCCAUGCCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[83.59545135 357.71490479]
[70.37525177 350.44244385]
[59.48844910 339.99542236]
[51.67731857 327.08618164]
[47.47443771 312.59487915]
[47.16636276 297.50952148]
[50.77410507 282.85870361]
[58.05167770 269.64132690]
[68.50288391 258.75854492]
[81.41514587 250.95239258]
[95.90808105 246.75511169]
[95.59603119 231.75836182]
[95.28397369 216.76161194]
[94.97191620 201.76484680]
[94.65985870 186.76809692]
[94.34780121 171.77134705]
[94.03574371 156.77459717]
[93.72369385 141.77783203]
[93.41163635 126.78108215]
[93.09957886 111.78433228]
[90.48301697 110.77075195]
[88.01621246 109.17031097]
[73.19844818 111.50141144]
[58.38069534 113.83251953]
[45.95061493 123.62046051]
[32.17554474 117.95507050]
[28.98744202 132.79421997]
[20.65083504 145.47749329]
[8.29318428 154.28958130]
[-6.41424227 158.03871155]
[-21.48238564 156.21786499]
[-34.87340164 149.07328796]
[-44.77626801 137.57121277]
[-49.85169983 123.26721191]
[-49.41329193 108.09577942]
[-43.52032852 94.10873413]
[-32.96979141 83.19770813]
[-19.18854713 76.83831787]
[-4.04040194 75.89063263]
[10.42598534 80.48280334]
[22.25415230 89.99379730]
[29.84444046 103.13730621]
[41.21465302 93.51610565]
[56.04959106 99.01476288]
[70.86734772 96.68365479]
[85.68510437 94.35255432]
[97.08612823 84.60490417]
[101.69168854 70.32943726]
[106.29725647 56.05397797]
[110.90281677 41.77851868]
[115.50838470 27.50305748]
[101.53675842 32.96142197]
[87.72156525 27.11845016]
[81.90642548 13.29151344]
[87.39291382 -0.66908944]
[101.06605530 -6.83716965]
[115.16287231 -1.71077538]
[121.67992401 11.80110264]
[128.02705383 -1.78984785]
[134.37419128 -15.38079834]
[140.72131348 -28.97175026]
[147.06845093 -42.56270218]
[153.41557312 -56.15365219]
[152.24452209 -71.93145752]
[164.64044189 -80.18920135]
[170.98757935 -93.78015137]
[158.49865723 -102.14241028]
[147.43267822 -112.31317139]
[138.04902649 -124.05402374]
[130.56768799 -137.08973694]
[125.16401672 -151.11474609]
[121.96469116 -165.80027771]
[121.04471588 -180.80207825]
[122.42563629 -195.76849365]
[126.07510376 -210.34867859]
[131.90756226 -224.20085144]
[139.78627014 -237.00032043]
[149.52658081 -248.44702148]
[160.90013123 -258.27264404]
[173.64031982 -266.24685669]
[187.44850159 -272.18270874]
[202.00099182 -275.94110107]
[216.95664978 -277.43389893]
[231.96492004 -276.62612915]
[246.67396545 -273.53668213]
[260.73898315 -268.23803711]
[273.83026123 -260.85440063]
[285.64096069 -251.55879211]
[295.89419556 -240.56916809]
[304.34960938 -228.14312744]
[310.80899048 -214.57196045]
[315.12094116 -200.17378235]
[317.18435669 -185.28611755]
[316.95092773 -170.25793457]
[314.42605591 -155.44154358]
[309.66894531 -141.18424988]
[302.79113770 -127.82026672]
[293.95385742 -115.66285706]
[283.36422729 -104.99700928]
[271.27050781 -96.07276154]
[257.95617676 -89.09928894]
[243.73335266 -84.24008179]
[228.93545532 -81.60902405]
[213.90934753 -81.26780701]
[199.00726318 -83.22442627]
[184.57852173 -87.43302155]
[178.23139954 -73.84207153]
[179.85644531 -59.03637695]
[167.00653076 -49.80652237]
[160.65939331 -36.21557236]
[154.31227112 -22.62462044]
[147.96513367 -9.03366947]
[141.61801147 4.55728149]
[135.27087402 18.14823341]
[129.78384399 32.10862350]
[125.17828369 46.38408279]
[120.57271576 60.65954208]
[115.96715546 74.93500519]
[111.36158752 89.21046448]
[121.89121246 78.52744293]
[136.26138306 74.22647095]
[150.92869568 77.36808777]
[162.27650452 87.17763519]
[167.50666809 101.23627472]
[165.32952881 116.07743835]
[156.28193665 128.04159546]
[142.59483337 134.17861938]
[127.64317322 132.97526550]
[115.11374664 124.72823334]
[108.09632874 111.47227478]
[108.40838623 126.46902466]
[108.72044373 141.46577454]
[109.03250122 156.46253967]
[109.34455872 171.45928955]
[109.65661621 186.45603943]
[109.96866608 201.45278931]
[110.28072357 216.44955444]
[110.59278107 231.44630432]
[110.90483856 246.44305420]
[125.55982971 250.03382874]
[138.78564453 257.29608154]
[149.68051147 267.73468018]
[157.50160217 280.63787842]
[161.71566772 295.12594604]
[162.03540039 310.21105957]
[158.43896484 324.86465454]
[151.17160034 338.08764648]
[140.72880554 348.97848511]
[127.82257843 356.79461670]
[113.33288574 361.00308228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 46]
[23 45]
[24 44]
[26 42]
[47 119]
[48 118]
[49 117]
[50 116]
[51 115]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[63 109]
[65 107]
[66 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
