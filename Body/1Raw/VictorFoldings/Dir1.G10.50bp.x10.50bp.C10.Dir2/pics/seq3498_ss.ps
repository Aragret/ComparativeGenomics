%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCAUCACGGGGGGGGGGCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUxxxxxxxxxxUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCCCCCCCCCCCUACCUUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 400.58282471]
[71.19830322 394.56680298]
[59.48964310 385.03738403]
[50.78712082 372.70172119]
[45.73651886 358.47518921]
[44.71262741 343.41351318]
[47.79142761 328.63436890]
[54.74444962 315.23443604]
[65.05573273 304.20809937]
[77.96011353 296.37359619]
[92.50000000 292.31228638]
[92.50000000 277.31228638]
[92.50000000 262.31228638]
[92.50000000 247.31227112]
[92.50000000 232.31227112]
[92.50000000 217.31227112]
[92.50000000 202.31227112]
[92.50000000 187.31227112]
[92.50000000 172.31227112]
[92.50000000 157.31227112]
[92.50000000 142.31227112]
[78.48901367 137.20021057]
[67.06925964 127.60697174]
[59.61638260 114.68816376]
[57.02816391 100.00000000]
[59.61638260 85.31183624]
[67.06925964 72.39302826]
[78.48901367 62.79978561]
[92.50000000 57.68772507]
[92.50000000 42.68772507]
[92.50000000 27.68772507]
[89.48308563 21.68724823]
[89.93104553 15.94002056]
[92.82504272 12.06699467]
[93.44902039 -2.92002177]
[94.07299805 -17.90703773]
[79.17031097 -19.67702866]
[64.44685364 -22.58262253]
[49.98901749 -26.60676765]
[35.88165283 -31.72584724]
[22.20754623 -37.90982056]
[9.04694271 -45.12239838]
[-3.52292275 -53.32125473]
[-15.42828560 -62.45827103]
[-26.59927940 -72.47982788]
[-36.97034836 -83.32711792]
[-46.48062515 -94.93648529]
[-55.07430649 -107.23979187]
[-62.70095825 -120.16484833]
[-69.31581879 -133.63578796]
[-74.88007355 -147.57357788]
[-79.36107635 -161.89640808]
[-82.73251343 -176.52021790]
[-84.97460938 -191.35922241]
[-86.07421112 -206.32630920]
[-86.02485657 -221.33364868]
[-84.82683563 -236.29316711]
[-82.48719025 -251.11709595]
[-79.01963806 -265.71841431]
[-74.44452667 -280.01147461]
[-68.78871918 -293.91235352]
[-62.08539963 -307.33950806]
[-54.37390137 -320.21411133]
[-45.69948196 -332.46063232]
[-36.11304855 -344.00720215]
[-25.67086029 -354.78604126]
[-14.43419361 -364.73388672]
[-2.46899128 -373.79241943]
[10.15452957 -381.90841675]
[23.36228752 -389.03427124]
[37.07677078 -395.12817383]
[51.21750259 -400.15435791]
[65.70149231 -404.08331299]
[80.44374847 -406.89202881]
[95.35774231 -408.56393433]
[110.35597229 -409.08932495]
[125.35040283 -408.46502686]
[140.25305176 -406.69476318]
[154.97645569 -403.78887939]
[169.43421936 -399.76446533]
[183.54148865 -394.64511108]
[197.21546936 -388.46087646]
[210.37594604 -381.24804688]
[222.94564819 -373.04895020]
[234.85084534 -363.91171265]
[246.02163696 -353.88995361]
[256.39251709 -343.04244995]
[265.90255737 -331.43292236]
[274.49600220 -319.12945557]
[282.12240601 -306.20425415]
[288.73703003 -292.73318481]
[294.30102539 -278.79528809]
[298.78173828 -264.47238159]
[302.15289307 -249.84849548]
[304.39471436 -235.00944519]
[305.49404907 -220.04234314]
[305.44439697 -205.03500366]
[304.24609375 -190.07550049]
[301.90615845 -175.25161743]
[298.43832397 -160.65036011]
[293.86294556 -146.35739136]
[288.20687866 -132.45661926]
[281.50329590 -119.02960205]
[273.79156494 -106.15513611]
[265.11691284 -93.90878296]
[255.53025818 -82.36240387]
[245.08787537 -71.58376312]
[233.85101318 -61.63610458]
[221.88563538 -52.57781982]
[209.26196289 -44.46205521]
[196.05407715 -37.33644485]
[182.33947754 -31.24280357]
[168.19865417 -26.21689224]
[153.71458435 -22.28820229]
[138.97227478 -19.47979164]
[124.05824280 -17.80814171]
[109.06001282 -17.28306007]
[108.43603516 -2.29604435]
[107.81205750 12.69097137]
[107.50000000 27.68772507]
[107.50000000 42.68772507]
[107.50000000 57.68772507]
[121.51098633 62.79978561]
[132.93074036 72.39302826]
[140.38362122 85.31183624]
[142.97183228 100.00000000]
[140.38362122 114.68816376]
[132.93074036 127.60697174]
[121.51098633 137.20021057]
[107.50000000 142.31227112]
[107.50000000 157.31227112]
[107.50000000 172.31227112]
[107.50000000 187.31227112]
[107.50000000 202.31227112]
[107.50000000 217.31227112]
[107.50000000 232.31227112]
[107.50000000 247.31227112]
[107.50000000 262.31228638]
[107.50000000 277.31228638]
[107.50000000 292.31228638]
[122.03988647 296.37359619]
[134.94427490 304.20809937]
[145.25555420 315.23443604]
[152.20857239 328.63436890]
[155.28736877 343.41351318]
[154.26348877 358.47518921]
[149.21287537 372.70172119]
[140.51036072 385.03738403]
[128.80169678 394.56680298]
[114.95575714 400.58282471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 122]
[30 121]
[31 120]
[34 119]
[35 118]
[36 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
