%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUCUCACUUCAGGGGGGGGGGACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACxxxxxxxxxxUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUCCCCCCCCCCUACCUUUCACUUCA\
) } def
/len { sequence length } bind def

/coor [
[79.43850708 445.31054688]
[65.07625580 440.80383301]
[51.91536331 433.49795532]
[40.49476624 423.69210815]
[31.28212547 411.78781128]
[24.65469742 398.27255249]
[20.88386917 383.69976807]
[20.12405205 368.66622925]
[22.40636063 353.78750610]
[27.63733864 339.67291260]
[35.60277939 326.90042114]
[45.97649765 315.99304199]
[58.33370590 307.39746094]
[72.16838074 301.46560669]
[86.91399384 298.44042969]
[86.91399384 283.44042969]
[86.91399384 268.44042969]
[86.91399384 253.44042969]
[86.91399384 238.44042969]
[86.91399384 223.44042969]
[86.91399384 208.44042969]
[86.91399384 193.44042969]
[86.91399384 178.44042969]
[86.91399384 163.44042969]
[86.91399384 148.44042969]
[75.08168030 139.22108459]
[60.53684998 142.88824463]
[57.52783203 157.85182190]
[48.31750107 170.02279663]
[34.73457336 176.98460388]
[19.47595024 177.35499573]
[5.57124281 171.06039429]
[-4.21875954 159.35063171]
[-7.95024443 144.55067444]
[-4.88232327 129.59906006]
[4.37586641 117.46446228]
[17.98610497 110.55619049]
[33.24606705 110.24590302]
[47.12587738 116.59519958]
[56.86969376 128.34342957]
[71.41452026 124.67626953]
[72.37509918 117.23803711]
[57.49863434 115.31687927]
[42.75657272 118.08664703]
[35.56698227 104.92192841]
[45.86580658 94.01622772]
[59.41979218 100.44041443]
[74.29625702 102.36157227]
[75.25682831 94.92333984]
[62.12080765 87.68145752]
[45.74448013 88.54625702]
[37.03545761 74.65075684]
[44.95283890 60.28945160]
[61.35189819 60.23602295]
[69.36269379 74.54543304]
[82.49871826 81.78731537]
[92.51362610 70.62033081]
[83.88976288 58.34723663]
[75.26589966 46.07413864]
[66.64202881 33.80104065]
[58.01816559 21.52794266]
[42.52523041 17.36278534]
[36.25436401 2.59607172]
[44.01604080 -11.44443893]
[59.85616684 -13.98806763]
[71.62355042 -3.08356166]
[70.29125977 12.90407658]
[78.91513062 25.17717361]
[87.53899384 37.45027161]
[96.16285706 49.72336960]
[104.78672791 61.99646759]
[103.10260773 47.09130859]
[94.48905945 34.81097031]
[91.48212433 20.11544800]
[94.57985687 5.43879843]
[103.26917267 -6.78804922]
[116.11083984 -14.53993225]
[130.97785950 -16.53288841]
[145.40776062 -12.43681717]
[157.01049805 -2.93016315]
[163.86427307 10.41246510]
[164.83389282 25.38109398]
[159.75872803 39.49643326]
[149.47941589 50.42052460]
[135.69609070 56.34448242]
[126.43138123 68.14130402]
[140.21763611 62.23036194]
[154.00387573 56.31941986]
[167.79013062 50.40847397]
[181.57638550 44.49752808]
[195.18142700 38.18064880]
[208.59329224 31.46337700]
[222.00515747 24.74610710]
[235.41703796 18.02883911]
[248.82890320 11.31156826]
[258.57266235 -4.28440809]
[276.02017212 -2.62439799]
[289.29672241 -9.60533714]
[302.13638306 -17.36052513]
[314.49407959 -25.86272430]
[326.85177612 -34.36492538]
[339.20947266 -42.86712265]
[348.83132935 -56.82620621]
[364.90847778 -51.44462585]
[364.18783569 -34.50600433]
[347.71166992 -30.50942802]
[335.35397339 -22.00722885]
[322.99627686 -13.50503063]
[310.63858032 -5.00283146]
[325.06021118 -0.87767369]
[332.50003052 12.14725399]
[328.72729492 26.66504669]
[315.88739014 34.41984940]
[301.28204346 31.00172615]
[293.21685791 18.35446739]
[296.27764893 3.67120218]
[283.00112915 10.65214157]
[279.09332275 22.13529587]
[268.04452515 28.04794312]
[255.54617310 24.72344017]
[242.13430786 31.44071007]
[228.72242737 38.15797806]
[215.31056213 44.87524796]
[201.89869690 51.59251785]
[200.44540405 54.86017609]
[197.30816650 57.56872177]
[192.77565002 58.92115402]
[187.48733521 58.28377914]
[173.70108032 64.19472504]
[159.91482544 70.10566711]
[146.12857056 76.01661682]
[132.34233093 81.92755890]
[137.30358887 120.90873718]
[101.91399384 148.44042969]
[101.91399384 163.44042969]
[101.91399384 178.44042969]
[101.91399384 193.44042969]
[101.91399384 208.44042969]
[101.91399384 223.44042969]
[101.91399384 238.44042969]
[101.91399384 253.44042969]
[101.91399384 268.44042969]
[101.91399384 283.44042969]
[101.91399384 298.44042969]
[116.65960693 301.46560669]
[130.49427795 307.39746094]
[142.85148621 315.99304199]
[153.22520447 326.90042114]
[161.19064331 339.67291260]
[166.42163086 353.78750610]
[168.70393372 368.66622925]
[167.94412231 383.69976807]
[164.17329407 398.27255249]
[157.54585266 411.78781128]
[148.33322144 423.69210815]
[136.91262817 433.49795532]
[123.75173187 440.80383301]
[109.38948059 445.31054688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 41]
[27 40]
[49 56]
[50 55]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[86 132]
[87 131]
[88 130]
[89 129]
[90 128]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[97 117]
[98 116]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
