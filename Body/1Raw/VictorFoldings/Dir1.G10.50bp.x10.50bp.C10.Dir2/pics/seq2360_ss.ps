%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCACCAAUGGGGGGGGGGUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAACAUAxxxxxxxxxxUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUGCCCCCCCCCCACCCACCAAU\
) } def
/len { sequence length } bind def

/coor [
[82.63533783 328.68231201]
[69.41514587 321.40985107]
[58.52833939 310.96282959]
[50.71720886 298.05358887]
[46.51432800 283.56228638]
[46.20625687 268.47692871]
[49.81399536 253.82611084]
[57.09157181 240.60871887]
[67.54277802 229.72595215]
[80.45503998 221.91979980]
[94.94797516 217.72251892]
[94.63591766 202.72576904]
[94.32386017 187.72901917]
[94.01181030 172.73225403]
[93.69975281 157.73550415]
[93.38769531 142.73875427]
[93.07563782 127.74199677]
[92.76358032 112.74524689]
[89.36060333 98.13635254]
[83.01347351 84.54540253]
[76.66634369 70.95445251]
[70.31921387 57.36349869]
[46.79858780 46.69446182]
[45.30875778 21.49881744]
[34.64713287 10.94752789]
[23.98550606 0.39623758]
[13.32387924 -10.15505219]
[2.66225290 -20.70634270]
[-7.99937344 -31.25763321]
[-18.66099930 -41.80892181]
[-29.32262611 -52.36021423]
[-41.09598923 -43.03576660]
[-53.90747070 -35.19846344]
[-67.57024384 -28.96259880]
[-81.88505554 -24.41910362]
[-96.64317322 -21.63424110]
[-111.62936401 -20.64861870]
[-126.62509155 -21.47661209]
[-141.41166687 -24.10614586]
[-155.77346802 -28.49887466]
[-169.50105286 -34.59073639]
[-182.39422607 -42.29290009]
[-194.26498413 -51.49303818]
[-204.94020081 -62.05698776]
[-214.26420593 -73.83070374]
[-222.10102844 -86.64247131]
[-228.33639526 -100.30548096]
[-232.87934875 -114.62046814]
[-235.66366577 -129.37867737]
[-236.64871216 -144.36491394]
[-235.82015991 -159.36061096]
[-233.19007874 -174.14707947]
[-228.79681396 -188.50872803]
[-222.70443726 -202.23608398]
[-215.00180054 -215.12896729]
[-205.80120850 -226.99937439]
[-195.23686218 -237.67420959]
[-183.46279907 -246.99777222]
[-170.65072632 -254.83410645]
[-156.98750305 -261.06896973]
[-142.67233276 -265.61138916]
[-127.91401672 -268.39514160]
[-112.92774963 -269.37963867]
[-97.93209076 -268.55053711]
[-83.14570618 -265.91989136]
[-68.78423309 -261.52609253]
[-55.05710602 -255.43319702]
[-42.16450500 -247.73007202]
[-30.29443741 -238.52903748]
[-19.62000847 -227.96429443]
[-10.29688263 -216.18988037]
[-2.46101809 -203.37753296]
[3.77331591 -189.71405029]
[8.31520367 -175.39872742]
[11.09841156 -160.64030457]
[12.08235264 -145.65400696]
[11.25267696 -130.65837097]
[8.62148476 -115.87208557]
[4.22714567 -101.51078033]
[-1.86625755 -87.78387451]
[-9.56986523 -74.89156342]
[-18.77133560 -63.02183914]
[-8.10970879 -52.47055054]
[2.55191708 -41.91925812]
[13.21354294 -31.36796951]
[23.87516975 -20.81667900]
[34.53679657 -10.26538849]
[45.19842148 0.28590161]
[55.86004639 10.83719158]
[62.07766342 8.65271378]
[68.65433502 8.23072720]
[75.10015106 9.60266876]
[80.93492126 12.66633797]
[93.01491547 3.77398801]
[105.09490204 -5.11836147]
[108.91748047 -20.69935799]
[123.54235077 -27.29425240]
[137.75056458 -19.84400749]
[140.64280701 -4.06381178]
[130.00038147 7.94111729]
[113.98725128 6.96162653]
[101.90726471 15.85397625]
[89.82727814 24.74632645]
[91.17567444 30.15983772]
[91.25141144 35.79049683]
[90.02660370 41.34037781]
[87.54284668 46.51038742]
[83.91016388 51.01637268]
[90.25729370 64.60732269]
[96.60442352 78.19827271]
[102.95155334 91.78922272]
[112.50856018 87.00646210]
[125.36421967 89.77735901]
[139.38093567 95.11887360]
[153.39764404 100.46038818]
[164.10998535 89.63608551]
[178.30120850 84.11074829]
[193.51257324 84.84166718]
[207.10862732 91.70221710]
[216.73377991 103.50376129]
[220.72039795 118.20160675]
[218.37779236 133.24926758]
[210.11183167 146.03964233]
[197.35464478 154.35671997]
[182.31648254 156.75952148]
[167.60279846 152.83175659]
[155.76283264 143.25390625]
[148.84791565 129.68540955]
[148.05613708 114.47709656]
[134.03941345 109.13558960]
[120.02270508 103.79407501]
[107.76033783 112.43318939]
[108.07239532 127.42994690]
[108.38444519 142.42669678]
[108.69650269 157.42344666]
[109.00856018 172.42021179]
[109.32061768 187.41696167]
[109.63267517 202.41371155]
[109.94473267 217.41046143]
[124.59972382 221.00123596]
[137.82553101 228.26348877]
[148.72039795 238.70208740]
[156.54150391 251.60530090]
[160.75556946 266.09335327]
[161.07528687 281.17846680]
[157.47886658 295.83206177]
[150.21150208 309.05508423]
[139.76869202 319.94589233]
[126.86246490 327.76202393]
[112.37277985 331.97048950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 111]
[20 110]
[21 109]
[22 108]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[93 103]
[94 102]
[95 101]
[113 131]
[114 130]
[115 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
