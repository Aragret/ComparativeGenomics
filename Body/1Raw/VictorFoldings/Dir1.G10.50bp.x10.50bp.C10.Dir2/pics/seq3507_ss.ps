%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCACCCUGGGGGGGGGGCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAAxxxxxxxxxxUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCCCCCCCCCCCAUCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[93.52318573 389.38681030]
[79.67724609 383.37078857]
[67.96858978 373.84136963]
[59.26605988 361.50570679]
[54.21545792 347.27917480]
[53.19157028 332.21749878]
[56.27036667 317.43835449]
[63.22338867 304.03842163]
[73.53467560 293.01208496]
[86.43905640 285.17758179]
[100.97894287 281.11627197]
[100.97894287 266.11627197]
[100.97894287 251.11625671]
[100.97894287 236.11625671]
[100.97894287 221.11625671]
[100.97894287 206.11625671]
[100.97894287 191.11625671]
[100.97894287 176.11625671]
[100.97894287 161.11625671]
[100.97894287 146.11625671]
[100.97894287 131.11625671]
[95.17826843 126.36208344]
[87.98688507 139.52581787]
[83.50717926 153.84127808]
[69.13556671 158.13739014]
[57.53418732 148.62907410]
[58.92447281 133.69364929]
[72.08161926 126.48999786]
[83.57692719 116.85372162]
[77.77626038 112.09954834]
[63.06829834 115.04502869]
[48.72483444 124.08390808]
[36.06852722 112.80320740]
[43.40476608 97.51869965]
[60.12281418 100.33706665]
[74.83078003 97.39158630]
[78.75949097 91.00290680]
[64.17946625 87.47828674]
[63.02628708 72.52268219]
[76.89363861 66.80458069]
[86.61691284 78.22554779]
[90.54563141 71.83686829]
[86.53788757 57.38217926]
[82.53014374 42.92749023]
[78.37226105 28.51527596]
[74.06467438 14.14709187]
[69.75708771 -0.22109258]
[54.89666748 2.00344348]
[39.87091446 2.09039378]
[24.98574257 0.03798781]
[10.54418945 -4.11198997]
[-3.15973139 -10.27505112]
[-15.84702587 -18.32572365]
[-27.25939560 -28.10010719]
[-37.16450119 -39.39920807]
[-45.36068726 -51.99298477]
[-51.68108749 -65.62505341]
[-55.99703217 -80.01787567]
[-58.22064972 -94.87844086]
[-58.30666733 -109.90419769]
[-56.25334167 -124.78924561]
[-52.10247040 -139.23054504]
[-45.93856049 -152.93408203]
[-37.88710403 -165.62088013]
[-28.11201286 -177.03263855]
[-16.81230164 -186.93704224]
[-4.21801329 -195.13244629]
[9.41444588 -201.45201111]
[23.80753708 -205.76705933]
[38.66823578 -207.98976135]
[53.69400024 -208.07484436]
[68.57891846 -206.02059937]
[83.01995850 -201.86883545]
[96.72311401 -195.70408630]
[109.40940857 -187.65184021]
[120.82057190 -177.87603760]
[130.72427368 -166.57571411]
[138.91889954 -153.98092651]
[145.23762512 -140.34806824]
[149.55178833 -125.95471191]
[151.77355957 -111.09387207]
[151.85772705 -96.06810760]
[149.80255127 -81.18331909]
[145.64988708 -66.74253082]
[139.48428345 -53.03975677]
[131.43125916 -40.35395813]
[121.65475464 -28.94340324]
[110.35382080 -19.04039574]
[97.75851440 -10.84654808]
[84.12527466 -4.52867699]
[88.43286133 9.83950710]
[92.74044037 24.20769119]
[97.70603180 29.74741745]
[96.98483276 38.91975021]
[100.99257660 53.37443924]
[105.00031281 67.82913208]
[117.26268768 76.46824646]
[132.22293091 75.37693024]
[147.18318176 74.28562164]
[162.14343262 73.19431305]
[177.10368347 72.10300446]
[182.86875916 68.65752411]
[188.63334656 68.68616486]
[192.70666504 71.29071045]
[207.69935608 70.82266998]
[222.69204712 70.35462189]
[228.83503723 56.38227463]
[240.43762207 46.46548462]
[255.19612122 42.57324600]
[270.18020630 45.47835922]
[282.41479492 54.60401535]
[289.47070312 68.13830566]
[289.94696045 83.39398956]
[283.74899292 97.34204102]
[272.10745239 107.21306610]
[257.33374023 111.04715729]
[242.36120605 108.08306122]
[230.16264343 98.90929413]
[223.16009521 85.34732056]
[208.16740417 85.81536102]
[193.17469788 86.28340912]
[178.19499207 87.06324768]
[163.23474121 88.15456390]
[148.27449036 89.24587250]
[133.31423950 90.33718109]
[118.35399628 91.42848969]
[123.90309143 98.71792603]
[126.13018036 108.94262695]
[123.67308807 120.47414398]
[115.97894287 131.11625671]
[115.97894287 146.11625671]
[115.97894287 161.11625671]
[115.97894287 176.11625671]
[115.97894287 191.11625671]
[115.97894287 206.11625671]
[115.97894287 221.11625671]
[115.97894287 236.11625671]
[115.97894287 251.11625671]
[115.97894287 266.11627197]
[115.97894287 281.11627197]
[130.51882935 285.17758179]
[143.42320251 293.01208496]
[153.73449707 304.03842163]
[160.68751526 317.43835449]
[163.76631165 332.21749878]
[162.74241638 347.27917480]
[157.69181824 361.50570679]
[148.98930359 373.84136963]
[137.28063965 383.37078857]
[123.43470001 389.38681030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 36]
[31 35]
[42 96]
[43 95]
[44 94]
[45 92]
[46 91]
[47 90]
[97 126]
[98 125]
[99 124]
[100 123]
[101 122]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
