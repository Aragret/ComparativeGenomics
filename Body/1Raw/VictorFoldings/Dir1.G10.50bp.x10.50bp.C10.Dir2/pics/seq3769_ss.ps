%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUACGCCGGGGGGGGGGCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACxxxxxxxxxxGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCACCCCCCCCCCAACCUACGCC\
) } def
/len { sequence length } bind def

/coor [
[79.17639160 473.53945923]
[65.33045197 467.52343750]
[53.62179184 457.99401855]
[44.91926575 445.65835571]
[39.86866379 431.43182373]
[38.84477234 416.37014771]
[41.92357254 401.59097290]
[48.87659454 388.19107056]
[59.18787766 377.16473389]
[72.09226227 369.33023071]
[86.63214874 365.26889038]
[86.63214874 350.26889038]
[86.63214874 335.26889038]
[86.63214874 320.26889038]
[86.63214874 305.26889038]
[86.63214874 290.26889038]
[86.63214874 275.26889038]
[86.63214874 260.26889038]
[86.63214874 245.26890564]
[86.63214874 230.26890564]
[83.46656799 223.53652954]
[86.79142761 214.95765686]
[87.10348511 199.96090698]
[79.63263702 187.07542419]
[87.65535736 173.43919373]
[87.96741486 158.44244385]
[87.81137848 143.44325256]
[87.18740082 128.45623779]
[75.39076233 119.19129181]
[60.68279648 122.13677216]
[45.97483444 125.08226013]
[31.63137054 134.12113953]
[18.97506714 122.84043121]
[26.31130409 107.55593109]
[43.02935410 110.37429810]
[57.73731613 107.42881775]
[72.44527435 104.48332977]
[73.86212921 95.99618530]
[77.68595886 88.79708862]
[83.27435303 83.50077057]
[89.85282135 80.45762634]
[96.61263275 79.73574066]
[99.71095276 65.05921173]
[102.80927277 50.38269043]
[105.90759277 35.70616531]
[109.00592041 21.02963829]
[112.10424042 6.35311270]
[94.94454956 -5.22157669]
[84.41376495 -22.99004555]
[82.50691223 -43.51250458]
[89.55372620 -62.83464050]
[104.16235352 -77.24955750]
[123.49408722 -84.00889587]
[124.11806488 -98.99591064]
[124.74204254 -113.98293304]
[125.36602020 -128.96994019]
[111.33305359 -137.65638733]
[103.62283325 -152.14253235]
[104.24757385 -168.44711304]
[112.94327545 -182.14262390]
[127.26707458 -189.55749512]
[127.57913208 -204.55424500]
[127.89118958 -219.55099487]
[128.20324707 -234.54776001]
[128.51530457 -249.54450989]
[128.82736206 -264.54125977]
[129.13941956 -279.53802490]
[129.45147705 -294.53475952]
[115.40461731 -300.28372192]
[104.38576508 -310.72158813]
[97.88513184 -324.43676758]
[96.78185272 -339.57437134]
[101.22515869 -354.08718872]
[110.61412048 -366.01245117]
[123.67896271 -373.73736572]
[138.65277100 -376.21722412]
[153.51045227 -373.11663818]
[166.24263000 -364.85491943]
[175.12739563 -352.54940796]
[178.96313477 -337.86434937]
[177.23112488 -322.78573608]
[170.16557312 -309.35284424]
[158.72206116 -299.38235474]
[144.44822693 -294.22271729]
[144.13616943 -279.22595215]
[143.82411194 -264.22921753]
[143.51205444 -249.23245239]
[143.19999695 -234.23570251]
[142.88793945 -219.23893738]
[142.57588196 -204.24218750]
[142.26382446 -189.24543762]
[154.41514587 -182.93632507]
[162.69134521 -171.94616699]
[165.42437744 -158.39485168]
[162.02236938 -144.92742920]
[153.09671021 -134.19786072]
[140.35304260 -128.34596252]
[139.72906494 -113.35895538]
[139.10508728 -98.37193298]
[138.48110962 -83.38491821]
[147.95466614 -80.39658356]
[156.58857727 -75.46550751]
[163.98934937 -68.81196594]
[169.81878662 -60.73481369]
[173.80940247 -51.59810638]
[175.77667236 -41.81464767]
[175.62759399 -31.82735062]
[173.36506653 -22.08920288]
[169.08795166 -13.04270649]
[162.98670959 -5.09976864]
[155.33497620 1.37704420]
[146.47726440 6.09106112]
[136.81346130 8.82509232]
[126.78076935 9.45143414]
[123.68244171 24.12796021]
[120.58412170 38.80448532]
[117.48580170 53.48101044]
[114.38748169 68.15753937]
[111.28915405 82.83406067]
[123.46662903 106.03910828]
[102.17441559 127.83226776]
[102.79839325 142.81927490]
[105.67101288 147.33233643]
[106.40601349 152.02404785]
[105.30294037 156.03465271]
[102.96416473 158.75450134]
[102.65210724 173.75125122]
[110.10063934 187.70941162]
[102.10024261 200.27296448]
[101.78818512 215.26971436]
[101.63214874 230.26890564]
[101.63214874 245.26890564]
[101.63214874 260.26889038]
[101.63214874 275.26889038]
[101.63214874 290.26889038]
[101.63214874 305.26889038]
[101.63214874 320.26889038]
[101.63214874 335.26889038]
[101.63214874 350.26889038]
[101.63214874 365.26889038]
[116.17203522 369.33023071]
[129.07641602 377.16473389]
[139.38769531 388.19107056]
[146.34071350 401.59097290]
[149.41952515 416.37014771]
[148.39562988 431.43182373]
[143.34503174 445.65835571]
[134.64250183 457.99401855]
[122.93383789 467.52343750]
[109.08789825 473.53945923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[25 127]
[26 126]
[27 122]
[28 121]
[29 37]
[30 36]
[31 35]
[42 119]
[43 118]
[44 117]
[45 116]
[46 115]
[47 114]
[53 100]
[54 99]
[55 98]
[56 97]
[61 91]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
