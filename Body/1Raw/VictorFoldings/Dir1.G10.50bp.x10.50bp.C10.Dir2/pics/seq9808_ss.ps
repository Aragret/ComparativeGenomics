%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAACCAAAUCAGGGGGGGGGGACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAxxxxxxxxxxCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGCCCCCCCCCCUUUAACCAAAACA\
) } def
/len { sequence length } bind def

/coor [
[-47.26632309 234.33790588]
[-55.59730911 224.59341431]
[-63.28466415 214.33354187]
[-70.29659271 203.60073853]
[-76.60408783 192.43937683]
[-82.18105316 180.89564514]
[-87.00442505 169.01728821]
[-91.05425262 156.85343933]
[-94.31378937 144.45440674]
[-96.76953125 131.87149048]
[-98.41133881 119.15674591]
[-99.23242188 106.36275482]
[-99.22937012 93.54244232]
[-114.19259644 92.49276733]
[-129.15582275 91.44309235]
[-144.11904907 90.39342499]
[-159.08227539 89.34375000]
[-174.04550171 88.29407501]
[-188.99748230 89.49340057]
[-203.60208130 92.91476440]
[-218.20668030 96.33613586]
[-232.81127930 99.75749969]
[-247.41587830 103.17887115]
[-262.02047729 106.60023499]
[-276.62506104 110.02159882]
[-291.22967529 113.44297028]
[-293.65567017 128.44906616]
[-301.64382935 141.38188171]
[-313.97601318 150.26924133]
[-328.77166748 153.75592041]
[-343.77456665 151.31018066]
[-356.69686890 143.30500793]
[-365.56799316 130.96113586]
[-369.03521729 116.16089630]
[-366.56973267 101.16123199]
[-358.54757690 88.24948120]
[-346.19204712 79.39458466]
[-331.38726807 75.94686127]
[-316.39083862 78.43205261]
[-303.48965454 86.47119904]
[-294.65103149 98.83837128]
[-280.04644775 95.41700745]
[-265.44183350 91.99563599]
[-250.83723450 88.57427216]
[-236.23263550 85.15290070]
[-221.62805176 81.73153687]
[-207.02345276 78.31017303]
[-192.41885376 74.88880157]
[-206.56883240 69.91106415]
[-218.02825928 60.23213196]
[-225.30278015 47.11415482]
[-227.44380188 32.26774216]
[-224.17211914 17.62888336]
[-215.91438293 5.10651541]
[-203.74740601 -3.66642785]
[-189.25776672 -7.54593992]
[-174.33496094 -6.02612543]
[-160.92494202 0.69482833]
[-150.77638245 11.74049854]
[-145.21269226 25.67051315]
[-144.95936584 40.66837311]
[-150.04945374 54.77833557]
[-159.81918335 66.16043854]
[-172.99583435 73.33084869]
[-158.03260803 74.38052368]
[-143.06938171 75.43019104]
[-128.10615540 76.47986603]
[-113.14292145 77.52954102]
[-98.17969513 78.57921600]
[-95.39994049 60.59309387]
[-90.99131012 42.93547440]
[-84.99055481 25.75355148]
[-77.44770050 9.19055462]
[-68.42562103 -6.61544371]
[-57.99951935 -21.53268433]
[-46.25632095 -35.43681335]
[-33.29391098 -48.21192551]
[-19.22034836 -59.75152588]
[-4.15295029 -69.95941925]
[11.78267860 -78.75051117]
[28.45369720 -86.05152130]
[45.72113419 -91.80158234]
[63.44104385 -95.95275879]
[81.46571350 -98.47045898]
[99.64488983 -99.33367920]
[117.82702637 -98.53523254]
[135.86054993 -96.08177185]
[153.59513855 -91.99375916]
[170.88296509 -86.30525208]
[187.57987976 -79.06369019]
[203.54673767 -70.32942963]
[218.65040588 -60.17528915]
[232.76499939 -48.68590546]
[245.77284241 -35.95705795]
[257.56549072 -22.09485626]
[268.04467773 -7.21485853]
[280.98474121 -14.80133724]
[293.92480469 -22.38781548]
[306.86489868 -29.97429466]
[306.68222046 -45.33209991]
[314.21688843 -58.71582413]
[327.44213867 -66.52531433]
[342.80044556 -66.65985107]
[356.16049194 -59.08324814]
[363.92849731 -45.83357620]
[364.01489258 -30.47492599]
[356.39645386 -17.13870049]
[343.12249756 -9.41227627]
[327.76364136 -9.37402153]
[314.45135498 -17.03422737]
[301.51129150 -9.44774914]
[288.57122803 -1.86127031]
[275.63116455 5.72520876]
[281.32812500 17.21019745]
[286.27502441 29.03764725]
[290.45138550 41.15863419]
[293.83996582 53.52301788]
[296.42669678 66.07965088]
[298.20092773 78.77660370]
[299.15530396 91.56134033]
[299.28585815 104.38098907]
[298.59204102 117.18251038]
[297.07678223 129.91296387]
[294.74630737 142.51966858]
[291.61022949 154.95050049]
[287.68157959 167.15403748]
[282.97659302 179.07977295]
[277.51470947 190.67840576]
[271.31851196 201.90193176]
[264.41369629 212.70394897]
[256.82873535 223.03976440]
[248.59509277 232.86663818]
[239.74676514 242.14389038]
[230.32037354 250.83316040]
[220.35490417 258.89852905]
[209.89158630 266.30657959]
[198.97370911 273.02673340]
[187.64642334 279.03112793]
[175.95658875 284.29498291]
[163.95256042 288.79647827]
[151.68397522 292.51702881]
[139.20161438 295.44122314]
[126.55709076 297.55697632]
[113.80271149 298.85552979]
[100.99124146 299.33154297]
[88.17567444 298.98297119]
[75.40901184 297.81134033]
[62.74407196 295.82144165]
[50.23324203 293.02154541]
[37.92827225 289.42318726]
[25.88006401 285.04129028]
[14.13845253 279.89395142]
[2.75200963 274.00250244]
[-8.23216629 267.39126587]
[-18.76863861 260.08764648]
[-28.81382179 252.12179565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[96 113]
[97 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
