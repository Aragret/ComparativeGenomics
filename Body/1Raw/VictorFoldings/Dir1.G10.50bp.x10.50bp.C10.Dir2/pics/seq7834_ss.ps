%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACAGAUGGGGGGGGGGGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGxxxxxxxxxxAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCACCCCCCCCCCAAAAACACAU\
) } def
/len { sequence length } bind def

/coor [
[90.36700439 382.81768799]
[75.87731171 378.60919189]
[62.97108078 370.79309082]
[52.52828217 359.90225220]
[45.26091766 346.67922974]
[41.66448975 332.02563477]
[41.98421478 316.94055176]
[46.19828415 302.45248413]
[54.01937866 289.54925537]
[64.91424561 279.11065674]
[78.14006042 271.84841919]
[92.79505157 268.25762939]
[93.10710907 253.26089478]
[93.41915894 238.26412964]
[93.73121643 223.26737976]
[94.04327393 208.27062988]
[94.35533142 193.27388000]
[94.66738892 178.27711487]
[94.97944641 163.28036499]
[95.29149628 148.28361511]
[95.60355377 133.28686523]
[78.08115387 122.32143402]
[71.33161163 104.31864166]
[76.51090240 87.30584717]
[65.84927368 76.75455475]
[55.18764877 66.20326996]
[42.92528152 57.56415176]
[29.40109062 51.07598877]
[15.87690067 44.58782196]
[2.35271096 38.09965515]
[-11.17147923 31.61149216]
[-26.96061516 32.61835480]
[-35.08895874 20.13719559]
[-48.61314774 13.64903069]
[-62.13733673 7.16086531]
[-71.50725555 18.95715141]
[-83.26750183 28.37227058]
[-96.82817841 34.93396378]
[-111.50908661 38.31309509]
[-126.57384491 38.34017563]
[-141.26681519 35.01384735]
[-154.85099792 28.50094986]
[-166.64500427 19.12817383]
[-176.05728149 7.36565018]
[-182.61567688 -6.19661522]
[-185.99125671 -20.87834549]
[-186.01469421 -35.94311142]
[-182.68479919 -50.63527298]
[-176.16860962 -64.21787262]
[-166.79298401 -76.00962067]
[-155.02818298 -85.41903687]
[-141.46432495 -91.97415161]
[-126.78177643 -95.34617615]
[-111.71700287 -95.36595154]
[-97.02565002 -92.03250122]
[-83.44462585 -85.51302338]
[-71.65515900 -76.13453674]
[-62.24858856 -64.36745453]
[-55.69675446 -50.80200958]
[-52.32829285 -36.11864471]
[-52.31216431 -21.05386925]
[-55.64917374 -6.36332464]
[-42.12498474 0.12484065]
[-28.60079384 6.61300564]
[-13.77899837 5.14206743]
[-4.68331385 18.08730125]
[8.84087563 24.57546616]
[22.36506653 31.06363106]
[35.88925552 37.55179596]
[49.41344452 44.03996277]
[41.48720169 31.30517960]
[38.30051041 16.64758873]
[40.22388840 1.77141213]
[47.03369904 -11.59370804]
[57.93817902 -21.89382172]
[71.66947174 -27.93134117]
[86.63105011 -29.00429153]
[101.08334351 -24.98791885]
[113.34599304 -16.34920692]
[121.99324036 -4.09256840]
[126.01966095 10.35692596]
[124.95712280 25.31924629]
[118.92916107 39.05473328]
[108.63664246 49.96637726]
[95.27626038 56.78549194]
[80.40142822 58.71921921]
[65.73893738 55.54164124]
[76.40056610 66.09293365]
[87.06219482 76.64422607]
[105.78642273 73.93476105]
[121.60528564 84.31271362]
[135.73008728 79.26396179]
[149.85488892 74.21520233]
[148.46054077 59.19832611]
[150.84533691 44.30659866]
[156.85940552 30.47612953]
[166.12466431 18.57631302]
[178.05871582 9.35517979]
[191.91136169 3.39237976]
[206.81182861 1.06273890]
[221.82342529 2.51270032]
[236.00254822 7.65111828]
[248.45787048 16.15498734]
[258.40643311 27.48974800]
[265.22286987 40.94288635]
[268.47869873 55.66872787]
[267.96926880 70.74159241]
[263.72656250 85.21398926]
[256.01730347 98.17617035]
[245.32609558 108.81332397]
[232.32499695 116.45677948]
[217.83128357 120.62608337]
[202.75602722 121.05912781]
[188.04687500 117.72870636]
[174.62846375 110.84416199]
[163.34426880 100.83827209]
[154.90364075 88.34000397]
[140.77883911 93.38876343]
[126.65403748 98.43751526]
[129.70173645 105.10863495]
[130.93572998 113.05084991]
[144.02888489 120.36995697]
[159.16632080 115.82753754]
[173.04228210 123.39280701]
[177.42439270 138.57742310]
[169.71284485 152.37261963]
[154.48274231 156.59396362]
[140.76985168 148.73698425]
[136.70977783 133.46310425]
[123.61661530 126.14400482]
[110.60031128 133.59892273]
[110.28825378 148.59567261]
[109.97619629 163.59242249]
[109.66413879 178.58917236]
[109.35208130 193.58593750]
[109.04003143 208.58268738]
[108.72797394 223.57943726]
[108.41591644 238.57618713]
[108.10385895 253.57295227]
[107.79180145 268.56970215]
[122.28473663 272.76699829]
[135.19700623 280.57312012]
[145.64820862 291.45590210]
[152.92578125 304.67327881]
[156.53352356 319.32409668]
[156.22544861 334.40945435]
[152.02256775 348.90075684]
[144.21144104 361.81002808]
[133.32463074 372.25701904]
[120.10443878 379.52947998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 89]
[25 88]
[26 87]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[33 64]
[34 63]
[35 62]
[91 119]
[92 118]
[93 117]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
